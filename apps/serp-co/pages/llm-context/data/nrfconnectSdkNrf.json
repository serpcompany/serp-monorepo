[
  {
    "owner": "nrfconnect",
    "repo": "sdk-nrf",
    "content": "TITLE: Installing West Package Management Tool\nDESCRIPTION: Command to install the west tool using pip3. West is the meta-tool used for managing the nRF Connect SDK repositories and building applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npip3 install west\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for nRF Connect SDK on macOS\nDESCRIPTION: Commands to install required Python packages for Zephyr, nRF, and MCUBoot components of the nRF Connect SDK on macOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r zephyr/scripts/requirements.txt\npip3 install -r nrf/scripts/requirements.txt\npip3 install -r bootloader/mcuboot/scripts/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Initializing Edge Impulse Wrapper in C\nDESCRIPTION: Initializes the Edge Impulse wrapper in the Nordic Connect SDK application. It sets up necessary resources for model execution, including caches and threads. Dependencies include enabled Kconfig options like CONFIG_EI_WRAPPER. Expected inputs include buffered data for the model, and outputs involve initialization success or error codes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/ei_wrapper.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nei_wrapper_init();\n```\n\n----------------------------------------\n\nTITLE: Including Directories and Conditional Compilation in CMake\nDESCRIPTION: The snippet uses the zephyr\\_include\\_directories function to include directories for the Zephyr project and target\\_sources\\_ifdef for conditionally compiling source files based on the CONFIG\\_TRAFFIC\\_GEN configuration. The inclusion is done for the specified application target 'app'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/twt/modules/traffic_gen/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(inc)\n\ntarget_sources_ifdef(CONFIG_TRAFFIC_GEN app PRIVATE src/main.c)\ntarget_sources_ifdef(CONFIG_TRAFFIC_GEN app PRIVATE src/tcp.c)\n```\n\n----------------------------------------\n\nTITLE: OpenSSL TLS 1.2 Client Connection (ECDSA)\nDESCRIPTION: OpenSSL command to perform a TLS 1.2 client connection using ECDHE-ECDSA-AES128-SHA256 cipher and ECDSA root certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nopenssl s_client -connect 192.0.2.1:4243 -cipher ECDHE-ECDSA-AES128-SHA256 -CAfile certs/ecdsa/root_cert.pem\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Type with Dynamic Data Size\nDESCRIPTION: Example of defining an event type with variable-sized data using the event_dyndata structure and APP_EVENT_TYPE_DYNDATA_DECLARE macro.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/app_event_manager.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <app_event_manager.h>\n\nstruct sample_event {\n\tstruct app_event_header header;\n\n\t/* Custom data fields. */\n\tint8_t value1;\n\tint16_t value2;\n\tint32_t value3;\n\tstruct event_dyndata dyndata;\n};\n\nAPP_EVENT_TYPE_DYNDATA_DECLARE(sample_event);\n```\n\n----------------------------------------\n\nTITLE: OpenThread Ping Command\nDESCRIPTION: This command sends ICMP echo requests to a specified IPv6 address within the Thread network to test connectivity. It requires the IPv6 address of the target device to be pinged.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot ping fdde:ad00:beef:0:3102:d00b:5cbe:a61\n16 bytes from fdde:ad00:beef:0:3102:d00b:5cbe:a61: icmp_seq=3 hlim=64 time=23ms\n1 packets transmitted, 1 packets received. Packet loss = 0.0%. Round-trip min/av\nDone\n```\n\n----------------------------------------\n\nTITLE: Building with verbose output (Command line)\nDESCRIPTION: West command to build an application with detailed verbose output, targeting the nRF52840 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/building.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest -vvv build -b nrf52840dk/nrf52840\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Serial LTE Modem\nDESCRIPTION: Main CMake configuration that sets up the project requirements, includes core source files, and conditionally includes additional modules based on configuration flags. Requires CMake 3.20.0 or higher and depends on Zephyr RTOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(serial_lte_modem)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\ntarget_sources(app PRIVATE src/slm_util.c)\ntarget_sources(app PRIVATE src/slm_settings.c)\ntarget_sources(app PRIVATE src/slm_at_host.c)\ntarget_sources(app PRIVATE src/slm_at_commands.c)\ntarget_sources(app PRIVATE src/slm_at_socket.c)\ntarget_sources(app PRIVATE src/slm_at_tcp_proxy.c)\ntarget_sources(app PRIVATE src/slm_at_udp_proxy.c)\ntarget_sources(app PRIVATE src/slm_at_icmp.c)\ntarget_sources(app PRIVATE src/slm_at_fota.c)\ntarget_sources(app PRIVATE src/slm_uart_handler.c)\n# NORDIC SDK APP END\ntarget_sources_ifdef(CONFIG_SLM_SMS app PRIVATE src/slm_at_sms.c)\ntarget_sources_ifdef(CONFIG_SLM_PPP app PRIVATE src/slm_ppp.c)\ntarget_sources_ifdef(CONFIG_SLM_CMUX app PRIVATE src/slm_cmux.c)\n\nadd_subdirectory_ifdef(CONFIG_SLM_GNSS src/gnss)\nadd_subdirectory_ifdef(CONFIG_SLM_NRF_CLOUD src/nrfcloud)\nadd_subdirectory_ifdef(CONFIG_SLM_MQTTC src/mqtt_c)\nadd_subdirectory_ifdef(CONFIG_SLM_HTTPC src/http_c)\nadd_subdirectory_ifdef(CONFIG_SLM_TWI src/twi)\nadd_subdirectory_ifdef(CONFIG_SLM_GPIO src/gpio)\nadd_subdirectory_ifdef(CONFIG_SLM_CARRIER src/lwm2m_carrier)\nadd_subdirectory_ifdef(CONFIG_SLM_NATIVE_TLS src/nativetls)\nif (CONFIG_SLM_FTPC OR CONFIG_SLM_TFTPC)\n        add_subdirectory(src/ftp_c)\nendif()\n\nzephyr_include_directories(src)\n```\n\n----------------------------------------\n\nTITLE: Checking Package Versions - Windows Console Command\nDESCRIPTION: Command to list installed packages and their versions on Windows using Chocolatey package manager.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/recommended_versions.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nchoco list -lo\n```\n\n----------------------------------------\n\nTITLE: Illuminance Regulator Implementation Details\nDESCRIPTION: Core implementation of the Bluetooth Mesh light control regulator that calculates light levels using integral and proportional methods with floating-point precision\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_reg_spec.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n// Regulator steps:\n// 1. Calculate integral of error\n// 2. Add integral to internal sum\n// 3. Multiply sum by integral coefficient\n// 4. Combine with proportional error calculation\n```\n\n----------------------------------------\n\nTITLE: Including Cluster Attribute Helper in C++\nDESCRIPTION: This snippet shows how to include the necessary header file for accessing cluster attributes to enable the application's interaction with chip clusters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/adding_clusters.rst#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n   #include <app-common/zap-generated/attributes/Accessors.h>\n```\n\n----------------------------------------\n\nTITLE: Initializing Lightness and HSL Servers in C\nDESCRIPTION: This snippet shows how to initialize the Lightness and Light HSL Server models using their respective initialization macros. It also demonstrates how to define the Bluetooth Mesh elements and add the models to the element list, linking the Lightness and HSL servers and referencing the Hue and Saturation servers correctly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_hsl_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic struct bt_mesh_lightness_srv lightess_srv =\n   BT_MESH_LIGHTNESS_SRV_INIT(&lightness_cb);\n\nstatic struct bt_mesh_light_hsl_srv hsl_srv =\n\tBT_MESH_LIGHT_HSL_SRV_INIT(&lightness_srv, &hue_cb, &sat_cb);\n\nstatic struct bt_mesh_elem elements[] = {\n\tBT_MESH_ELEM(\n\t\t1, BT_MESH_MODEL_LIST(\n         BT_MESH_MODEL_LIGHTNESS_SRV(&lightness_srv),\n         BT_MESH_MODEL_LIGHT_HSL_SRV(&hsl_srv)),\n\t\tBT_MESH_MODEL_NONE),\n\tBT_MESH_ELEM(\n\t\t2, BT_MESH_MODEL_LIST(BT_MESH_MODEL_LIGHT_HUE_SRV(&hsl_srv.hue)),\n\t\tBT_MESH_MODEL_NONE),\n\tBT_MESH_ELEM(\n\t\t3, BT_MESH_MODEL_LIST(BT_MESH_MODEL_LIGHT_SAT_SRV(&hsl_srv.sat)),\n\t\tBT_MESH_MODEL_NONE),\n};\n```\n\n----------------------------------------\n\nTITLE: MCUboot minimal configuration - prj.conf\nDESCRIPTION: This configuration is used to reduce the flash partition occupied by MCUboot to 24 kB by disabling unnecessary debug features. It is present in each sample's sysbuild/mcuboot directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\n\"prj.conf file located in each sample's :file:`sysbuild/mcuboot` directory\"\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing LwM2M Client Sample\nDESCRIPTION: This command sequence builds and flashes the LwM2M client sample to the nRF9160 DK, after switching to PROG/DEBUG mode set to nRF91. Ensures the use of all overlay files required for FOTA evaluation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota_external_mcu.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncd lwm2m_client/\nwest build  --pristine -b nrf9160dk/nrf9160/ns --  -DEXTRA_CONF_FILE=\"overlay-adv-firmware.conf;overlay-fota_helper.conf;overlay-avsystem.conf;overlay-lwm2m-1.1.conf;overlay-mcumgr_client.conf\" -DEXTRA_DTC_OVERLAY_FILE=\"nrf9160dk_mcumgr_client_uart2.overlay\"\nwest flash --erase\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Workspace Application Directory Structure\nDESCRIPTION: Illustrates the directory structure for a workspace application in the nRF Connect SDK, showing the application's position relative to the SDK repositories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/create_application.rst#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n<home>/\n└─── <west-workspace>/\n   ├─── .west/\n   ├─── nrf/\n   ├─── zephyr/\n   ├─── ...\n   └─── <app>/\n      ├── src/\n      ├── ...\n      └── west.yml\n```\n\n----------------------------------------\n\nTITLE: Enabling Persistent Subscriptions for Matter\nDESCRIPTION: This snippet explains how to enable persistent subscriptions for Matter using the `CONFIG_CHIP_PERSISTENT_SUBSCRIPTIONS` Kconfig option. This allows devices to save subscription information and quickly re-establish subscriptions after being offline, improving the user experience after power outages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_5\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_PERSISTENT_SUBSCRIPTIONS`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PSA Crypto Driver Build Dependencies in CMake\nDESCRIPTION: Controls the conditional compilation of various cryptographic drivers and components. Includes logic for CC3XX platform, PSA crypto drivers (CC3XX, CRACEN, Oberon), and legacy components based on configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET nrf_cc3xx_platform)\n  add_subdirectory(nrf_cc3xx_platform)\nendif()\n\nif(CONFIG_MBEDTLS_PSA_CRYPTO_C)\n  if(CONFIG_PSA_CRYPTO_DRIVER_CC3XX)\n    add_subdirectory(nrf_cc3xx)\n  endif()\n\n  if(CONFIG_PSA_CRYPTO_DRIVER_CRACEN)\n    add_subdirectory(cracen)\n  endif()\n\n  if(CONFIG_PSA_CRYPTO_DRIVER_OBERON)\n    add_subdirectory(nrf_oberon)\n  endif()\n\n  add_subdirectory(zephyr)\nendif()\n\nif(NOT BUILD_INSIDE_TFM)\n  add_subdirectory(legacy)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Project Build with CMake\nDESCRIPTION: Complete CMake configuration for building a Matter-enabled thermostat project. Sets up project dependencies, includes Matter Data Model configuration, and specifies source files and include directories for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/thermostat/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr HINTS $ENV{ZEPHYR_BASE})\n\nproject(matter-template)\n\n# Enable GNU STD support and initialize the Matter Data Model.\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/nrfconnect/app/enable-gnu-std.cmake)\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/src/app/chip_data_model.cmake)\n\n# NORDIC SDK APP START\n\n# Include all source files that are located in the Matter common directory.\ninclude(${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/cmake/source_common.cmake)\n\ntarget_include_directories(app PRIVATE\n    src\n    ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}\n)\n\ntarget_sources(app PRIVATE\n    src/app_task.cpp\n    src/main.cpp\n    src/temp_sensor_manager.cpp\n    src/temperature_manager.cpp\n    src/temperature_measurement/sensor.cpp\n    src/zcl_callbacks.cpp\n    ${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/src/binding/binding_handler.cpp\n)\n\nchip_configure_data_model(app\n    INCLUDE_SERVER\n    BYPASS_IDL\n    GEN_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated\n    ZAP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/thermostat.zap\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Output Log\nDESCRIPTION: This log excerpt demonstrates the SoftAP sample's output during startup and operation. It shows the device initializing the network, configuring the SoftAP, starting the DHCP server, and displaying information about connected stations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/softap/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK v3.4.99-ncs1-4797-g7c3e830729b7 ***\n[00:00:00.580,596] <inf> net_config: Initializing network\n[00:00:00.580,596] <inf> net_config: Waiting interface 1 (0x200014e4) to be up...\n[00:00:00.580,718] <inf> net_config: IPv4 address: 192.168.1.1\n[00:00:00.581,268] <inf> wpa_supp: Successfully initialized wpa_supplicant\n[00:00:00.582,122] <inf> softap: Regulatory domain set to IN\n[00:00:00.602,508] <inf> softap: DHCPv4 server started and pool address start from 192.168.1.2\n[00:00:01.250,000] <inf> wpa_supp: wlan0: interface state UNINITIALIZED->ENABLED\n[00:00:01.250,061] <inf> wpa_supp: wlan0: AP-ENABLED\n[00:00:01.250,335] <inf> wpa_supp: wlan0: CTRL-EVENT-CONNECTED - Connection to nn:oo:rr:dd:ii:cc completed [id=0 id_str=]\n[00:00:01.254,608] <inf> softap: AP enable requested\n[00:00:01.256,225] <inf> softap: AP mode enabled\n[00:00:01.257,873] <inf> softap: Status: successful\n[00:00:01.257,904] <inf> softap: ==================\n[00:00:01.257,904] <inf> softap: State: COMPLETED\n[00:00:01.257,934] <inf> softap: Interface Mode: ACCESS POINT\n[00:00:01.257,965] <inf> softap: Link Mode: UNKNOWN\n[00:00:01.257,995] <inf> softap: SSID: MySoftAP\n[00:00:01.258,026] <inf> softap: BSSID: NN:OO:RR:DD:II:CC\n[00:00:01.258,026] <inf> softap: Band: 2.4GHz\n[00:00:01.258,056] <inf> softap: Channel: 6\n[00:00:01.258,056] <inf> softap: Security: OPEN\n[00:00:01.258,087] <inf> softap: MFP: Disable\n[00:00:01.258,087] <inf> softap: Beacon Interval: 100\n[00:00:01.258,087] <inf> softap: DTIM: 2\n[00:00:01.258,117] <inf> softap: TWT: Not supported\n[00:00:01.341,674] <inf> net_config: IPv6 address: fe80::f6ce:36ff:fe00:10d4\n[00:00:15.270,446] <inf> wpa_supp: HT: Forty MHz Intolerant is set by STA aa:bb:cc:dd:ee:ff in Association Request\n[00:00:15.286,376] <inf> wpa_supp: wlan0: AP-STA-CONNECTED aa:bb:cc:dd:ee:ff\n[00:00:15.286,529] <inf> softap: Station connected: AA:BB:CC:DD:EE:FF\n[00:00:15.286,529] <inf> softap: AP stations:\n[00:00:15.286,529] <inf> softap: ============\n[00:00:15.286,560] <inf> softap: Station 1:\n[00:00:15.286,560] <inf> softap: ==========\n[00:00:15.286,590] <inf> softap: MAC: AA:BB:CC:DD:EE:FF\n[00:00:15.286,590] <inf> softap: Link mode: WIFI 4 (802.11n/HT)\n[00:00:15.286,621] <inf> softap: TWT: Not supported\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving Data over TLS Connection\nDESCRIPTION: This snippet shows how to send plaintext data to a TLS server and retrieve the response using AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_7\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XSEND=\"Test TLS client\"\n\nAT#XRECV=0\n```\n\n----------------------------------------\n\nTITLE: AT Command: Store PSK Key\nDESCRIPTION: These AT commands store the Pre-Shared Key (PSK) and identity to the specified security tag in the modem.  `<TAG>` is the security tag identifier, and the identity and PSK are provided as strings. This is crucial for secure communication with the LwM2M server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/provisioning.rst#2025-04-21_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nAT%CMNG=0,<TAG>,4,\"urn:imei:352656100367872\"\nOK\nAT%CMNG=0,<TAG>,3,\"000102030405060708090a0b0c0d0e0f\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Flashing Application to Kit using West Flash\nDESCRIPTION: This command flashes the built application to the development kit using west flash, including erasing the flash memory. It programs the application to the board.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n\"west flash --erase\"\n```\n\n----------------------------------------\n\nTITLE: Running J-Link on Application Core\nDESCRIPTION: Commands to run and connect J-Link debugger to the application core using SWD interface\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_debugging.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nJLinkExe -USB <SEGGER-ID> -if SWD -Device Cortex-M33\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment on Linux\nDESCRIPTION: Creates a new Python virtual environment for the nRF Connect SDK on Linux.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv ~/ncs/.venv\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic SDK Application\nDESCRIPTION: This CMake configuration sets up a project that uses the Nordic SDK and Zephyr RTOS. It requires CMake 3.20.0 or later, finds the Zephyr package using environment variables, and adds the main.c source file to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/event_trigger/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Pushing Diagnostic Logs in Matter Applications with C++\nDESCRIPTION: This code snippet demonstrates how to push network diagnostic logs and end-user support logs in a Matter application using the DiagnosticLogProvider API. The snippet shows the inclusion of the necessary header file and two examples of pushing different types of logs with their respective intent enums.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_28\n\nLANGUAGE: C++\nCODE:\n```\n#include \"diagnostic_logs_provider.h\"\n\nNrf::Matter::DiagnosticLogProvider::GetInstance().PushLog(chip::app::Clusters::DiagnosticLogs::IntentEnum::kNetworkDiag, \"Example network log\", sizeof(\"Example network log\"));\nNrf::Matter::DiagnosticLogProvider::GetInstance().PushLog(chip::app::Clusters::DiagnosticLogs::IntentEnum::kEndUserSupport, \"Example end user log\", sizeof(\"Example end user log\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring west.yml with nRF Connect SDK imports and custom repositories\nDESCRIPTION: Example west.yml configuration that imports the nRF Connect SDK, overrides an existing repository with a fork, and adds a custom repository. This demonstrates how to set up remotes, import the nrf repository at a specific revision, replace the mcuboot repository with a forked version, and add an external library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/adding_code.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example your-application/west.yml, using manifest imports, with\n# an nRF Connect SDK fork and a separate module\nmanifest:\n  remotes:\n    - name: ncs\n      url-base: https://github.com/nrfconnect\n    - name: your-remote\n      url-base: https://github.com/your-name\n  projects:\n    - name: nrf\n      remote: ncs\n      revision: 2.9.0-nRF54H20-1\n      import: true\n    # Example for how to override a repository in the nRF Connect SDK with your own:\n    - name: mcuboot\n      remote: your-remote\n      revision: your-mcuboot-fork-SHA-or-branch\n    # Example for how to add a repository not in nRF Connect SDK:\n    - name: your-custom-library\n      remote: your-remote\n      revision: your-library-SHA-or-branch\n  self:\n    path: application\n```\n\n----------------------------------------\n\nTITLE: Validating Firmware Image with bl_validate_firmware\nDESCRIPTION: Performs comprehensive validation of firmware images, checking digest, signature, and firmware information structure before allowing bootloader to proceed with loading\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/bootloader/bl_validation.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint bl_validate_firmware()\n```\n\n----------------------------------------\n\nTITLE: Declaring a GPIO Pin Node with Devicetree in C\nDESCRIPTION: This snippet demonstrates how to declare a GPIO pin in a devicetree overlay file for use in an embedded application. It involves specifying the compatible binding, detailed pin configuration, and enabling relevant GPIO drivers. This declaration is essential for the GPIO driver API access.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/use_gpio_pin_directly.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n\t/ {\n\t\tuser_dbg_pin: user-dbg-pin {\n\t\t\tcompatible = \"nordic,gpio-pins\";\n\t\t\tgpios = <&gpio0 2 GPIO_ACTIVE_HIGH>;\n\t\t\tstatus = \"okay\";\n\t\t};\n\t};\n\n\t&gpio0 {\n\t\tstatus = \"okay\";\n\t};\n\n\t&gpiote0 {\n\t\tstatus = \"okay\";\n\t};\n```\n\n----------------------------------------\n\nTITLE: Adding PIN Code Credential to User - Console\nDESCRIPTION: This command assigns a PIN code to the previously created user, allowing them to unlock the door remotely. The command structure provides details for the credential and associates it with the user ID, reinforcing user authentication for secure remote operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n./chip-tool doorlock set-credential 0 '{\"credentialType\": 1, \"credentialIndex\": 1}' 12345678 2 null null 10 1 --timedInteractionTimeoutMs 5000\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for nRF Desktop\nDESCRIPTION: Sets up the CMake project with minimum version requirement, finds the Zephyr package, and defines the project name and version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\n################################################################################\n\n# The application uses the configuration/<board> scheme for configuration files.\nset(APPLICATION_CONFIG_DIR \"${CMAKE_CURRENT_LIST_DIR}/configuration/${NORMALIZED_BOARD_TARGET}\")\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"nRF Desktop\"\n        VERSION 0.1)\n```\n\n----------------------------------------\n\nTITLE: Selecting TNEP Service in C\nDESCRIPTION: Selects a TNEP service on the tag using nfc_tnep_poller_svc_select after finding valid Service Parameters records.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/poller.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nnfc_tnep_poller_svc_select(service_id);\n```\n\n----------------------------------------\n\nTITLE: Sample Output with Wi-Fi and TLS\nDESCRIPTION: Serial UART output demonstrating successful MQTT communication over Wi-Fi with TLS. Shows connection to network, MQTT broker details, and message publishing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/doc/description.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v2.4.0-ncs1-rc1-6-g45f2d5cf8ea4  ***\n[00:00:00.394,744] <inf> network: Bringing network interface up and connecting to the network\n[00:00:12.736,297] <inf> network: Network connectivity established\n[00:00:17.997,253] <inf> transport: Connected to MQTT broker\n[00:00:18.007,049] <inf> transport: Hostname: test.mosquitto.org\n[00:00:18.009,981] <inf> transport: Client ID: F4CE37111350\n[00:00:18.013,519] <inf> transport: Port: 8883\n[00:00:18.018,341] <inf> transport: TLS: Yes\n[00:00:18.078,521] <inf> transport: Subscribed to topic F4CE37111350/my/subscribe/topic\n[00:01:01.475,982] <inf> transport: Publishing message: \"Hello MQTT! Current uptime is: 61458\" on topic: \"F4CE37111350/my/publish/topic\"\n[00:02:01.475,982] <inf> transport: Publishing message: \"Hello MQTT! Current uptime is: 121458\" on topic: \"F4CE37111350/my/publish/topic\"\n[00:03:01.475,982] <inf> transport: Publishing message: \"Hello MQTT! Current uptime is: 181458\" on topic: \"F4CE37111350/my/publish/topic\"\n[00:04:01.475,982] <inf> transport: Publishing message: \"Hello MQTT! Current uptime is: 241458\" on topic: \"F4CE37111350/my/publish/topic\"\n[00:05:01.475,982] <inf> transport: Publishing message: \"Hello MQTT! Current uptime is: 301459\" on topic: \"F4CE37111350/my/publish/topic\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Bluetooth EnOcean Library\nDESCRIPTION: Function to initialize the EnOcean library with custom handler callbacks for tracking device events like button presses and sensor readings\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/enocean.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbt_enocean_init(struct bt_enocean_handlers *handlers)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor with Passive Power Management in C\nDESCRIPTION: Example configuration for a sensor with passive power management using the CAF Sensor Manager. This snippet defines a configuration for an LIS2DH12 accelerometer with suspend option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/sensor_manager.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstatic const struct sm_sensor_config sensor_configs[] = {\n        {\n                .dev_name = \"LIS2DH12-ACCEL\",\n                .event_descr = \"accel_xyz\",\n                .chans = accel_chan,\n                .chan_cnt = ARRAY_SIZE(accel_chan),\n                .sampling_period_ms = 20,\n                .active_events_limit = 3,\n                .suspend = true,\n        },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Matter Cluster in XML\nDESCRIPTION: This XML snippet defines a Matter cluster including its domain, name, unique code, attributes, commands, and events. It illustrates how to structure these elements and their respective parameters according to Matter specifications. Dependencies include compliance with the Matter specification for cluster and device definitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/custom_clusters.rst#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<cluster>\n   <domain>General</domain>\n   <name>MyNewCluster</name>\n   <code>0xFFF1FC01</code>\n   <define>MY_NEW_CLUSTER</define>\n   <description>The MyNewCluster cluster showcases a cluster manufacturer extensions</description>\n   <attribute side=\"server\" code=\"0xFFF10000\" define=\"MY_ATTRIBUTE\" type=\"boolean\" writable=\"true\" default=\"false\" optional=\"false\">MyAttribute</attribute>\n   <command source=\"client\" code=\"0xFFF10000\" name=\"MyCommand\" response=\"MyCommandResponse\" optional=\"false\">\n      <description>Command that takes two uint8 arguments and returns their sum.</description>\n      <arg name=\"arg1\" type=\"int8u\"/>\n      <arg name=\"arg2\" type=\"int8u\"/>\n   </command>\n   <event side=\"server\" code=\"0xFFF10000\" name=\"MyEvent\" priority=\"info\" optional=\"false\">\n      <description>Event that is generated by the server.</description>\n      <arg name=\"arg1\" type=\"int8u\"/>\n   </event>\n</cluster>\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Instance Creation Function in C for LwM2M\nDESCRIPTION: Defines the creation function for object instances that checks for duplicates, initializes data structures, sets up resources and resource instances, and returns the new instance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_client_utils.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nstatic struct lwm2m_engine_obj_inst *output_create(uint16_t id)\n{\n   /* Check that there is no other instance with this ID */\n   /* It is assumed that the instance ID is same as the index in the array */\n   if (inst[id].obj) {\n      LOG_ERR(\"Cannot create instance - already existing: %u\", id);\n      return NULL;\n   }\n\n   if (id >= MAX_INSTANCE_COUNT) {\n      LOG_ERR(\"Cannot create instance - no more room: %u\", id);\n      return NULL;\n   }\n\n   /* Set default values */\n   (void)memset(&output_data[id], 0, sizeof(output_data[id]));\n\n   (void)memset(res[id], 0, sizeof(res[id][0]) * ARRAY_SIZE(res[id]));\n   init_res_instance(res_inst[id], ARRAY_SIZE(res_inst[id]));\n\n   /* initialize instance resource data */\n   int i = 0, j = 0;\n   INIT_OBJ_RES(OUTPUT_DIGITAL_STATE_ID, res[id], i,\n         res_inst[id], j, 1, false, true,\n         &output_data[id].state,\n         sizeof(output_data[id].state),\n         NULL, NULL, NULL, NULL);\n\n   inst[id].resources = res[id];\n   inst[id].resource_count = i;\n\n   LOG_DBG(\"Created IPSO Output instance: %d\", id);\n\n   return &inst[id];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Memory Diagnostic Statistics\nDESCRIPTION: Function for retrieving runtime statistics for the library and TX memory region heaps.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_diagnostic.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nnrf_modem_lib_diag_stats_get\n```\n\n----------------------------------------\n\nTITLE: Initializing Modem Information Library in C\nDESCRIPTION: Initializes the modem information library. This function should be called before using any other functions from the library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_info.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nmodem_info_init();\n```\n\n----------------------------------------\n\nTITLE: Configuring Asymmetric Signature Algorithms in PSA Crypto\nDESCRIPTION: Kconfig options for enabling various asymmetric signature algorithms in PSA Crypto, including ECDSA, EdDSA, and RSA variants.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_19\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_PSA_USE_CC3XX_ASYMMETRIC_SIGNATURE_DRIVER\nCONFIG_PSA_USE_CRACEN_ASYMMETRIC_SIGNATURE_DRIVER\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 EK with nRF5340 DK\nDESCRIPTION: Command to build the QuickTrack application for the nRF7002 Evaluation Kit with the nRF5340 Development Kit using the shield option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf7002ek\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Requirements on Debian/Ubuntu/Linux Mint\nDESCRIPTION: This snippet details the commands required to install basic dependencies for the HID configurator on Debian-based systems. This includes installing the HIDAPI library and necessary Python libraries through pip.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nsudo apt install libhidapi-hidraw0\n```\n\nLANGUAGE: Python\nCODE:\n```\npip3 install --user -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Including Certificate Files for nRF Cloud Provisioning\nDESCRIPTION: Conditionally includes certificate files directory if nRF Cloud provisioning certificates are enabled in the configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories_ifdef(CONFIG_NRF_CLOUD_PROVISION_CERTIFICATES certs)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fabric Table Delegate in C++\nDESCRIPTION: Illustrates creating a class inheriting 'chip::FabricTable::Delegate' and overriding the 'OnFabricRemoved' method to implement custom reactions to the last fabric removal. This customization allows specific actions to be executed when a fabric is removed from the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/last_fabric_removal_delegate.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nclass AppFabricTableDelegate : public chip::FabricTable::Delegate {\n\n    private:\n\n       void OnFabricRemoved(const chip::FabricTable &fabricTable, chip::FabricIndex fabricIndex) {}\n\n};\n```\n\n----------------------------------------\n\nTITLE: Writing CA Chain Certificate to Modem using modem_key_mgmt_write in C\nDESCRIPTION: This code snippet demonstrates how to write a CA chain certificate to the nRF91 Series LTE modem using the `modem_key_mgmt_write` function. It sets a security tag and includes a certificate from a PEM file. If an error occurs during the provisioning, an error message will be printed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_key_mgmt.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint err;\nnrf_sec_tag_t sec_tag = 42;\nstatic const char cert[] = {\n        #include \"YourCert.pem.inc\"\n};\n\nerr = modem_key_mgmt_write(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, cert, sizeof(cert));\nif (err) {\n        printk(\"Failed to provision certificate, err %d\\n\", err);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SUIT Stream Sinks Library\nDESCRIPTION: This CMake code creates a standard Zephyr library. It conditionally includes source files based on various `CONFIG_SUIT_STREAM_SINK_*` definitions.  It also links the library against `suit_stream_sinks_interface` and `suit_memory_layout_interface` and conditionally against other libraries like `suit_sink_selector_interface`, `suit_cache_interface` and `suit_utils` based on corresponding configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/stream/stream_sinks/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SINK_CACHE src/suit_dfu_cache_sink.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SINK_RAM src/suit_ram_sink.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SINK_FLASH src/suit_flash_sink.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SINK_MEMPTR src/suit_memptr_sink.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SINK_SDFW src/suit_sdfw_sink.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SINK_SDFW_RECOVERY src/suit_sdfw_recovery_sink.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SINK_DIGEST src/suit_digest_sink.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SINK_EXTMEM src/suit_extmem_sink.c)\n\nzephyr_library_link_libraries(suit_stream_sinks_interface)\nzephyr_library_link_libraries(suit_memory_layout_interface)\n\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_SINK_SELECTOR suit_sink_selector_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STREAM_SINK_CACHE suit_cache_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STREAM_SINK_SDFW suit_utils)\n```\n\n----------------------------------------\n\nTITLE: Building SMP Server with Hardware Cryptography Support\nDESCRIPTION: Build command for the SMP server sample on nRF54L SoCs with hardware cryptography support, enabling ED25519 signature verification and KMU integration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/fota_update.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b *board_target* -- -DEXTRA_CONF_FILE=overlay-bt.conf -DSB_CONFIG_BOOT_SIGNATURE_TYPE_ED25519=y -DSB_CONFIG_BOOT_SIGNATURE_TYPE_PURE=y -Dmcuboot_CONFIG_PM_PARTITION_SIZE_MCUBOOT=0x10000 -DSB_CONFIG_MCUBOOT_SIGNATURE_USING_KMU=y\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Matter Initialization Data Structure\nDESCRIPTION: This code defines the `InitData` structure used for initializing the Matter stack. It includes pointers to user-provided implementations of Matter interfaces, such as the event handler, networking instance, server initialization parameters, device info provider, factory data provider, and operational keystore. It allows custom initialization callbacks to be executed before and after the server initialization.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/matter_api.rst#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nusing CustomInit = CHIP_ERROR (*)(void);\n\n   /** @brief Matter initialization data.\n    *\n    * This structure contains all user specific implementations of Matter interfaces\n    * and custom initialization callbacks that must be initialized in the Matter thread.\n    */\n   struct InitData {\n         /** @brief Matter stack events handler. */\n         chip::DeviceLayer::PlatformManager::EventHandlerFunct mEventHandler{ DefaultEventHandler };\n         /** @brief Pointer to the user provided NetworkCommissioning instance. */\n   #ifdef CONFIG_CHIP_WIFI\n         chip::app::Clusters::NetworkCommissioning::Instance *mNetworkingInstance{ &sWiFiCommissioningInstance };\n   #else\n         chip::app::Clusters::NetworkCommissioning::Instance *mNetworkingInstance{ nullptr };\n   #endif\n         /** @brief Pointer to the user provided custom server initialization parameters. */\n         chip::CommonCaseDeviceServerInitParams *mServerInitParams{ &sServerInitParamsDefault };\n         /** @brief Pointer to the user provided custom device info provider implementation. */\n         chip::DeviceLayer::DeviceInfoProviderImpl *mDeviceInfoProvider{ nullptr };\n   #ifdef CONFIG_CHIP_FACTORY_DATA\n         /** @brief Pointer to the user provided FactoryDataProvider implementation. */\n         chip::DeviceLayer::FactoryDataProviderBase *mFactoryDataProvider{ &sFactoryDataProviderDefault };\n   #endif\n   #ifdef CONFIG_CHIP_CRYPTO_PSA\n         /** @brief Pointer to the user provided OperationalKeystore implementation. */\n         chip::Crypto::OperationalKeystore *mOperationalKeyStore{ &sOperationalKeystoreDefault };\n   #endif\n         /** @brief Custom code to execute in the Matter main event loop before the server initialization. */\n         CustomInit mPreServerInitClbk{ nullptr };\n         /** @brief Custom code to execute in the Matter main event loop after the server initialization. */\n         CustomInit mPostServerInitClbk{ nullptr };\n\n         /** @brief Default implementation static objects that will be stripped by the compiler when above\n          * pointers are overwritten by the application. */\n   #ifdef CONFIG_CHIP_WIFI\n         static chip::app::Clusters::NetworkCommissioning::Instance sWiFiCommissioningInstance;\n   #endif\n         static chip::CommonCaseDeviceServerInitParams sServerInitParamsDefault;\n   #ifdef CONFIG_CHIP_FACTORY_DATA\n         static chip::DeviceLayer::FactoryDataProvider<chip::DeviceLayer::InternalFlashFactoryData> sFactoryDataProviderDefault;\n   #endif\n   #ifdef CONFIG_CHIP_CRYPTO_PSA\n         static chip::Crypto::PSAOperationalKeystore sOperationalKeystoreDefault;\n   #endif\n   };\n```\n\n----------------------------------------\n\nTITLE: Example: Registering Specific Activation Code in Matter (C++)\nDESCRIPTION: This snippet demonstrates how to handle a specific activation code, 0xFFFFFFFF00011234, by registering a corresponding event trigger. The event trigger is configured with a specific trigger ID (0xFFFFFFFF0001), a mask (0xFFFF), and a callback function (MyFunctionCallback). The callback will be invoked when the full activation code is received. This showcases a practical application of custom event trigger registration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/test_event_triggers.rst#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nNrf::Matter::TestEventTrigger::EventTrigger myEventTrigger;\nuint64_t myTriggerID = 0xFFFFFFFF0001;\nmyEventTrigger.Mask = 0xFFFF;\nmyEventTrigger.Callback = MyFunctionCallback;\n\nCHIP_ERROR err = Nrf::Matter::TestEventTrigger::Instance().RegisterTestEventTrigger(myTriggerID, myEventTrigger);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding LwM2M Carrier Subdirectory in CMake\nDESCRIPTION: Uses CMake's add_subdirectory_ifdef to include the lwm2m_carrier subdirectory only when CONFIG_LWM2M_CARRIER is defined. This allows optional inclusion of the LwM2M Carrier module during the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/bin/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_LWM2M_CARRIER lwm2m_carrier)\n```\n\n----------------------------------------\n\nTITLE: OpenThread State Command\nDESCRIPTION: This command retrieves the current state of the Thread network. It's a basic command to verify the device's role in the network (e.g., leader, router).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot state\nleader\nDone\n```\n\n----------------------------------------\n\nTITLE: Matter CLI Command to Turn On Light Devices\nDESCRIPTION: These Matter CLI commands enable users to turn on the state-indication LED on bound light bulb devices, either individually or as a group. Required setup includes a functioning Matter stack and a connected terminal emulator. Note that parameters are context-specific and should match the current device setup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nmatter switch onoff on\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmatter switch groups onoff on\n```\n\n----------------------------------------\n\nTITLE: Modifying CMakeLists.txt for Custom Clusters\nDESCRIPTION: CMake configuration changes needed to work with custom Matter clusters. It overrides the default zap-generated directory path and adds the EXTERNAL_CLUSTERS flag with the name of the custom cluster.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/custom_clusters.rst#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nproject(matter-template)\n\n# Override zap-generated directory.\nget_filename_component(CHIP_APP_ZAP_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated REALPATH CACHE)\n\n# Existing code in CMakeList.txt\n\nchip_configure_data_model(app\n    INCLUDE_SERVER\n    BYPASS_IDL\n    GEN_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated\n    ZAP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/template.zap\n    EXTERNAL_CLUSTERS \"MY_NEW_CLUSTER\" # Add EXTERNAL_CLUSTERS flag\n)\n\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Implementing GATT Notification Callback\nDESCRIPTION: Callback function for handling GATT notifications from the Bluetooth service, including data validation and attribute change scheduling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nstatic bt_uuid *sUuidChar = BT_UUID_MY_BT_SERVICE_CHARACTERISTIC;\nstatic bt_uuid *sUuidCcc = BT_UUID_GATT_CCC;\nuint8_t MyBtServiceDataProvider::GattNotifyCallback(bt_conn *conn, bt_gatt_subscribe_params *params, const void *data,\n                          uint16_t length)\n{\n   MyBtServiceDataProvider *provider = static_cast<MyBtServiceDataProvider *>(\n      BLEConnectivityManager::Instance().FindBLEProvider(*bt_conn_get_dst(conn)));\n   VerifyOrExit(data, );\n   VerifyOrExit(provider, );\n\n   /* Save data received in GATT write response. */\n   /* ... */\n   DeviceLayer::PlatformMgr().ScheduleWork(NotifyAttributeChange, reinterpret_cast<intptr_t>(provider));\n\nexit:\n   return BT_GATT_ITER_CONTINUE;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating RAI Socket Option Usage in C\nDESCRIPTION: Example of migrating from deprecated SO_RAI_* socket options to the new consolidated SO_RAI option in C applications using the Modem library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n/* Before migration. */\nsetsockopt(socket_fd, SOL_SOCKET, SO_RAI_LAST, NULL, 0);\n\n/* After migration. */\nint rai_option = RAI_LAST;\nsetsockopt(socket_fd, SOL_SOCKET, SO_RAI, &rai_option, sizeof(rai_option));\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Test Build for HCI Buffer Size Testing\nDESCRIPTION: Sets up CMake build configuration for testing HCI command callback host buffer size. Includes test runner generation, source file inclusion, mock creation, and configuration of include paths. Requires CMake 3.20.0 or higher and Zephyr SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/controller/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(hci_cmd_cb_host_buffer_size_test)\n\n# Generate runner for the test\ntest_runner_generate(src/hci_cmd_cb_host_buffer_size_test.c)\n\n# Add Unit Under Test source files\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/controller/hci_internal_wrappers.c)\n\n# Add test source file\ntarget_sources(app PRIVATE src/hci_cmd_cb_host_buffer_size_test.c)\n\n# Create mocks\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/softdevice_controller/include/sdc_hci_cmd_controller_baseband.h)\n\n# Include paths\ninclude_directories(${ZEPHYR_HAL_NORDIC_MODULE_DIR}/nrfx)\ninclude_directories(${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/controller)\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Project Build with CMake\nDESCRIPTION: This CMake script sets up the build environment for a GPIO project in the nRF Connect SDK. It specifies the minimum CMake version, finds the Zephyr package, sets include directories, defines the project name, and adds source files to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/gpio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nzephyr_include_directories(include)\n\nproject(gpio)\n\ntarget_sources(app PRIVATE ./../common/main.c)\ntarget_sources(app PRIVATE src/driver_test.c)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Heart Rate Measurements in C\nDESCRIPTION: This function enables notifications for the Heart Rate Measurement characteristic. The notifications are passed to the provided callback function, which will receive the current heart rate measurement data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/hrs_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbt_hrs_client_measurement_subscribe\n```\n\n----------------------------------------\n\nTITLE: Building with TLS and Debug Logging for Thingy:91\nDESCRIPTION: Example command to build the MQTT sample project with TLS and debug logging enabled for the Thingy:91. It makes use of the lib_mqtt_helper library and requires the Zephyr tooling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/doc/description.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b thingy91/nrf9160/ns -- -DEXTRA_CONF_FILE=overlay-tls-nrf91.conf -DCONFIG_MQTT_HELPER_LOG_LEVEL_DBG=y\n```\n\n----------------------------------------\n\nTITLE: Initializing Modem Parameters Structure in C\nDESCRIPTION: Initializes a structure to store all available modem information. This should be called before retrieving all modem parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_info.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nmodem_info_params_init();\n```\n\n----------------------------------------\n\nTITLE: Configuring Ranging Responder (RRSP) Options in Kconfig\nDESCRIPTION: This snippet shows the various Kconfig options available for configuring the Ranging Responder (RRSP) library. It includes options for enabling the library, setting antenna paths, supporting different modes, and configuring connection parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/rrsp.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_RAS=y\nCONFIG_BT_RAS_MAX_ANTENNA_PATHS=<value>\nCONFIG_BT_RAS_MODE_3_SUPPORTED=y\nCONFIG_BT_RAS_RRSP=y\nCONFIG_BT_RAS_RRSP_AUTO_ALLOC_INSTANCE=y\nCONFIG_BT_RAS_RRSP_MAX_ACTIVE_CONN=<value>\nCONFIG_BT_RAS_RRSP_RD_BUFFERS_PER_CONN=<value>\nCONFIG_BT_RAS_RRSP_LOG_LEVEL=<value>\n```\n\n----------------------------------------\n\nTITLE: Code Relocation Configuration in CMake\nDESCRIPTION: CMake configuration for relocating code to QSPI XIP and RAM sections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/qspi_xip_guide_nrf5340.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nzephyr_code_relocate(FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/bluetooth.c LOCATION EXTFLASH_TEXT NOCOPY)\nzephyr_code_relocate(FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/bluetooth.c LOCATION RAM_DATA)\n```\n\n----------------------------------------\n\nTITLE: Configuring PMW3360 Motion Sensor in Devicetree\nDESCRIPTION: DTS configuration example showing how to set up the PMW3360 motion sensor including SPI bus configuration, pin assignments, and sensor-specific parameters. This includes pinctrl settings, SPI interface configuration, and PMW3360 node definition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/pmw3360.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n&pinctrl {\n    spi1_default_alt: spi1_default_alt {\n        group1 {\n            psels = <NRF_PSEL(SPI_SCK, 0, 16)>,\n                    <NRF_PSEL(SPI_MISO, 0, 15)>,\n                    <NRF_PSEL(SPI_MOSI, 0, 17)>;\n        };\n    };\n\n    spi1_sleep_alt: spi1_sleep_alt {\n        group1 {\n            psels = <NRF_PSEL(SPI_SCK, 0, 16)>,\n                    <NRF_PSEL(SPI_MISO, 0, 15)>,\n                    <NRF_PSEL(SPI_MOSI, 0, 17)>;\n            low-power-enable;\n      };\n    };\n};\n\n&spi1 {\n    compatible = \"nordic,nrf-spim\";\n    status = \"okay\";\n    pinctrl-0 = <&spi1_default_alt>;\n    pinctrl-1 = <&spi1_sleep_alt>;\n    pinctrl-names = \"default\", \"sleep\";\n    cs-gpios = <&gpio0 13 GPIO_ACTIVE_LOW>;\n\n    pmw3360@0 {\n            compatible = \"pixart,pmw3360\";\n            reg = <0>;\n            irq-gpios = <&gpio0 21 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;\n            spi-max-frequency = <2000000>;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Freestanding Application Directory Structure\nDESCRIPTION: Shows the directory structure for a freestanding application in relation to the nRF Connect SDK west workspace.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/create_application.rst#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n<home>/\n├─── <west-workspace>/\n│  ├─── .west/\n│  ├─── nrf/\n│  ├─── zephyr/\n│  └─── ...\n└─── <app>/\n   ├─── src/\n   └─── ...\n```\n\n----------------------------------------\n\nTITLE: Getting Firmware Version Information - Python\nDESCRIPTION: This command retrieves information about the current firmware version running on the device, important for monitoring and debugging.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npython3 configurator_cli.py DEVICE fwinfo\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet specifies the minimum required version of CMake for the project. It ensures that the project can be built with CMake version 3.20.0 or higher.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_mds/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Project with CMake for Nordic nRF Connect SDK\nDESCRIPTION: This CMake configuration sets up a UDP networking project using the Nordic nRF Connect SDK and Zephyr RTOS. It specifies the required CMake version, locates the Zephyr package, defines project sources, and configures include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/udp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(udp)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n\nzephyr_include_directories(src)\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with P-GPS Support\nDESCRIPTION: This example compiles the MoSh sample to include P-GPS support using the -DEXTRA_CONF_FILE option with appropriate configuration files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_42\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=overlay-pgps.conf\n```\n\n----------------------------------------\n\nTITLE: Handling Network and MQTT Disconnections\nDESCRIPTION: Logs reflecting the automatic reconnection logic of the network and MQTT transport module. If network or MQTT broker connection is lost, these snippets show the corresponding disconnection messages and imply the automatic reconnection that will ensue, governed by certain configuration options for timeout settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/doc/description.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n<inf> network: Disconnected\n```\n\nLANGUAGE: console\nCODE:\n```\n<inf> transport: Disconnected from MQTT broker\n```\n\n----------------------------------------\n\nTITLE: Implementing ISO Transmission Handling in C\nDESCRIPTION: Handles time-synchronized transmission of isochronous data across established streams. Includes timestamp-based LED toggling and SDU transmission with button state tracking.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_time_sync/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// iso_tx.c\n// Transmits SDUs containing counter and Button state\n// Uses timer triggers for synchronized transmission\n// Toggles LED based on TX timestamp\n```\n\n----------------------------------------\n\nTITLE: Exporting Zephyr CMake Package\nDESCRIPTION: Command to export the Zephyr CMake package, allowing CMake to automatically load the boilerplate code for building nRF Connect SDK applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/create_application.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwest zephyr-export\n```\n\n----------------------------------------\n\nTITLE: Configuring QEMU Serial Connection for Bluetooth Testing in CMake\nDESCRIPTION: Adds extra flags to QEMU to enable serial communication over a Unix socket for Bluetooth stack testing. This allows external tools to communicate with the emulated device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/bluetooth/tester/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nLIST(APPEND QEMU_EXTRA_FLAGS -serial unix:/tmp/bt-stack-tester)\n```\n\n----------------------------------------\n\nTITLE: Registering Matter Test Event Trigger Handler in C++\nDESCRIPTION: This code snippet demonstrates how to register a test event trigger handler using the Nrf::Matter::TestEventTrigger instance. It creates a static OTATestEventTriggerHandler and registers it with the TestEventTrigger singleton.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/test_event_triggers.rst#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nstatic chip::OTATestEventTriggerHandler otaTestEventTrigger;\nReturnErrorOnFailure(Nrf::Matter::TestEventTrigger::Instance().RegisterTestEventTriggerHandler(&otaTestEventTrigger));\n```\n\n----------------------------------------\n\nTITLE: Building Location Sample with nRF91 Series DK and nRF7002 EK Wi-Fi Support in C\nDESCRIPTION: This code snippet provides the command to build the Location sample specifically for nRF91 Series DK with nRF7002 EK Wi-Fi support, incorporating various configuration flags for proper functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/location/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nwest build -p -b *board_target* -- -DSHIELD=nrf7002ek -DEXTRA_CONF_FILE=overlay-nrf700x-wifi-scan-only.conf -DSB_CONFIG_WIFI_NRF70=y -DSB_CONFIG_WIFI_NRF70_SCAN_ONLY=y\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Event Type Structure\nDESCRIPTION: Example of how to define a custom event type structure with a required header field and additional data fields for the Application Event Manager.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/app_event_manager.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <app_event_manager.h>\n\nstruct sample_event {\n\tstruct app_event_header header;\n\n\t/* Custom data fields. */\n\tint8_t value1;\n\tint16_t value2;\n\tint32_t value3;\n};\n\nAPP_EVENT_TYPE_DECLARE(sample_event);\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows\nDESCRIPTION: Activates the created Python virtual environment on Windows.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_19\n\nLANGUAGE: bat\nCODE:\n```\nncs\\.venv\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Setting up Build Environment on macOS\nDESCRIPTION: Sets up the command-line build environment by executing the Zephyr environment script for macOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsource zephyr/zephyr-env.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot Version with VERSION file\nDESCRIPTION: Applications using MCUboot must now set their version using an application VERSION file instead of the CONFIG_MCUBOOT_IMAGE_VERSION Kconfig option. The VERSION file approach is recommended, though version can also be set via CONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.5.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION=\"x.y.z\"\n```\n\n----------------------------------------\n\nTITLE: Building Matter Bridge for nRF70 Series (Wi-Fi)\nDESCRIPTION: Command for building Matter bridge over Wi-Fi for nRF70 Series with increased Bluetooth LE connections configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_BRIDGED_DEVICE_BT=y -DEXTRA_CONF_FILE=\"overlay-bt_max_connections_app.conf\" -Dipc_radio_EXTRA_CONF_FILE=\"overlay-bt_max_connections_net.conf\"\n```\n\n----------------------------------------\n\nTITLE: Building LwM2M Client with MCUmgr Client and Bootstrap\nDESCRIPTION: Command for building the LwM2M client sample for nRF9160 with MCUmgr client and bootstrap support. Uses multiple overlay configuration files including advanced firmware, FOTA helper, AVSystem bootstrap, and LwM2M 1.1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/sample_description.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwest build  --pristine -b nrf9160dk/nrf9160/ns --  -DEXTRA_CONF_FILE=\"overlay-adv-firmware.conf;overlay-fota_helper.conf;overlay-avsystem-bootstrap.conf;overlay-lwm2m-1.1.conf;overlay-mcumgr_client.conf\" -DEXTRA_DTC_OVERLAY_FILE=\"nrf9160dk_mcumgr_client_uart2.overlay\"\n```\n\n----------------------------------------\n\nTITLE: Opening menuconfig (Command line)\nDESCRIPTION: West command to open menuconfig for configuring application Kconfig options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/building.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nwest build -t menuconfig\n```\n\n----------------------------------------\n\nTITLE: Notifying Scheduler Server of Time Changes - C\nDESCRIPTION: This snippet highlights the use of the bt_mesh_scheduler_srv_time_update function, allowing the application to notify the Scheduler Server of any changes to the UTC time or Time Zone. This is crucial for the accurate scheduling of actions based on the updated time parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scheduler_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n* :c:func:`bt_mesh_scheduler_srv_time_update`: Notify server about UTC time or Time Zone changes\n```\n\n----------------------------------------\n\nTITLE: Configuring IoT Device Profile in nRF Wi-Fi Driver\nDESCRIPTION: Configuration for standard IoT devices with balanced performance settings. Achieves TCP throughput of 5.2/3.4 Mbps (TX/RX) and UDP throughput of 5.5/4.1 Mbps.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/stack_configuration.rst#2025-04-21_snippet_4\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_WIFI_NM_WPA_SUPPLICANT=y\nCONFIG_NRF70_AP_MODE=n\nCONFIG_NRF70_P2P_MODE=n\nCONFIG_NET_PKT_TX_COUNT=6\nCONFIG_NET_PKT_RX_COUNT=6\nCONFIG_NET_BUF_TX_COUNT=12\nCONFIG_NET_BUF_RX_COUNT=6\nCONFIG_NRF70_RX_NUM_BUFS=6\nCONFIG_NET_BUF_DATA_SIZE=800\nCONFIG_HEAP_MEM_POOL_SIZE=40144\nCONFIG_NRF_WIFI_CTRL_HEAP_SIZE=20000\nCONFIG_NRF_WIFI_DATA_HEAP_SIZE=199856\nCONFIG_SPEED_OPTIMIZATIONS=y\nCONFIG_NRF70_UTIL=n\nCONFIG_NRF70_MAX_TX_AGGREGATION=1\nCONFIG_NRF70_MAX_TX_TOKENS=5\n```\n\n----------------------------------------\n\nTITLE: Creating and Encoding NFC NDEF Messages in C\nDESCRIPTION: Shows how to create NFC NDEF message descriptors, add record descriptors to messages, and encode messages into buffers. The example demonstrates creating two messages with different records and encoding them to separate buffers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/msg.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint err;\nuint8_t buffer_for_message[512];\nuint8_t buffer_for_message_2[128];\nuint32_t length;\n\n// Declare message descriptor by macro - create and initialize an instance of\n//   nfc_ndef_msg_desc_t and an array of pointers to nfc_ndef_record_desc_t.\n// The declared message can contain up to 2 records.\nNFC_NDEF_MSG_DEF(my_message, 2);\n\n// Add record_1 and record_2 to the message.\n// record_1 and record_2 are record descriptors as created in the previous\n//   code example.\nerr = nfc_ndef_msg_record_add( &NFC_NDEF_MSG(my_message), record_1);\nerr = nfc_ndef_msg_record_add( &NFC_NDEF_MSG(my_message), record_2);\n\n// Get the message size to the length variable.\nerr_t = nfc_ndef_msg_encode( &NFC_NDEF_MSG(my_message),\n                                     NULL,\n                                     &length);\n\n// Encode the message to buffer_for_message.\nASSERT(length <= 512); // make sure the message fits into the buffer\nerr_t = nfc_ndef_msg_encode( &NFC_NDEF_MSG(my_message),\n                                     buffer_for_message,\n                                     &length);\n\n// Clear the message description.\nnfc_ndef_msg_clear( &NFC_NDEF_MSG(my_message));\n\n// Add record_3 to the message.\n// record_3 is a record descriptors as created in the previous code example.\nerr = nfc_ndef_msg_record_add( &NFC_NDEF_MSG(my_message), record_3);\n\n// Encode another message to buffer_for_message_2.\nlength = 128; // amount of memory available for message\nerr_t = nfc_ndef_msg_encode( &NFC_NDEF_MSG(my_message),\n                                     buffer_for_message_2,\n                                     &length);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for MPSL PM Test in nRF Connect SDK\nDESCRIPTION: Sets up a CMake project for testing the MPSL Power Management module. It defines the minimum CMake version, finds the Zephyr package, generates a test runner, creates mocks for various modules, and configures source files and include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/mpsl/pm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(pm_test)\n\n# Generate runner for the test\ntest_runner_generate(pm_test.c)\n\n# Create mocks for pm module.\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/pm/policy.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/mpsl/include/mpsl_pm.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/mpsl/include/mpsl_pm_config.h)\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/mpsl/mpsl_work.h)\n\n# Add Unit Under Test source files\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/subsys/mpsl/pm/mpsl_pm_utils.c)\n\n# Add test source file\ntarget_sources(app PRIVATE pm_test.c)\n\n# Include paths\ntarget_include_directories(app PRIVATE\n    src\n    ${ZEPHYR_NRF_MODULE_DIR}/subsys/mpsl/pm\n    ${ZEPHYR_NRFXLIB_MODULE_DIR}/mpsl/include)\n\n# Preinclude file to the UUT to redefine kernel and mpsl_work functions.\nset_property(SOURCE ${ZEPHYR_NRF_MODULE_DIR}/subsys/mpsl/pm/mpsl_pm_utils.c\n        PROPERTY COMPILE_FLAGS \"-include nrf_errno.h -include mocks/mpsl_work.h\")\n\n# Options that cannot be passed through Kconfig fragments.\ntarget_compile_options(app PRIVATE\n    -DCONFIG_PM=y\n    -DCONFIG_MPSL_USE_ZEPHYR_PM=y\n    -DCONFIG_MPSL_PM_NO_RADIO_EVENT_PERIOD_LATENCY_US=499999\n)\n```\n\n----------------------------------------\n\nTITLE: Registering MDS Callbacks in C\nDESCRIPTION: Call the bt_mds_cb_register function to register callbacks for the Memfault Diagnostic Service. This should be done before enabling the Bluetooth stack to ensure proper access restriction to MDS service data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/mds.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbt_mds_cb_register(&bt_mds_cb);\n```\n\n----------------------------------------\n\nTITLE: Using Zephyr Logging Macros with nRF Cloud Log Backend in C\nDESCRIPTION: Example of using standard Zephyr logging macros when the nRF Cloud Log backend is enabled. This allows log messages to be sent to nRF Cloud using the normal Zephyr logging system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud_log.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#include <logging/log.h>\n\nLOG_MODULE_REGISTER(my_module);\n\nLOG_ERR(\"Error message\");\nLOG_WRN(\"Warning message\");\nLOG_INF(\"Info message\");\nLOG_DBG(\"Debug message\");\n```\n\n----------------------------------------\n\nTITLE: Checking out proper ZAP Tool revision in nRF Connect SDK\nDESCRIPTION: Commands to check out the correct ZAP Tool revision to resolve compatibility issues with Matter samples in nRF Connect SDK v2.1.1 and v2.1.2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd <NCS_root_directory>/modules/lib/matter/\ngit -C third_party/zap/repo/ checkout -f 2ae226\ngit add third_party/zap/repo/\n```\n\n----------------------------------------\n\nTITLE: Enabling Stream Cipher Algorithm in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for the stream cipher algorithm within the PSA Cryptography API in the nRF Connect SDK. This allows the application to utilize stream cipher functionalities provided by the underlying cryptographic drivers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_STREAM_CIPHER`\"\n```\n\n----------------------------------------\n\nTITLE: Pipelining Commands for Cloud Connection and Location in MoSh\nDESCRIPTION: Shows how to pipeline commands to establish an MQTT connection to nRF Cloud, wait for connection, and request current location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_23\n\nLANGUAGE: console\nCODE:\n```\nth pipeline \"cloud connect\" \"sleep 10\" \"location get\"\n```\n\n----------------------------------------\n\nTITLE: Module Configuration Structs\nDESCRIPTION: Structure definitions used for power management events and button events in the motion module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/motion.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\npower_down_event\nwake_up_event\nbutton_event\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysbuild for QSPI XIP with Network Core Support\nDESCRIPTION: Sysbuild configuration options for enabling QSPI XIP split image with swap-using-move mode and network core support. Enables MCUboot, external flash secondary partitions, and network core update capabilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_6\n\nLANGUAGE: cfg\nCODE:\n```\nSB_CONFIG_BOOTLOADER_MCUBOOT=y\nSB_CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y\nSB_CONFIG_NETCORE_APP_UPDATE=y\nSB_CONFIG_SECURE_BOOT_NETCORE=y\nSB_CONFIG_QSPI_XIP_SPLIT_IMAGE=y\n\n# This will enable the hci_ipc image for the network core, change to the desired image\nSB_CONFIG_NETCORE_HCI_IPC=y\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Module Subdirectory based on Kconfig\nDESCRIPTION: Conditionally adds the 'src/modules/led' directory as a subdirectory to the build, depending on whether the CONFIG_MQTT_SAMPLE_LED Kconfig option is enabled. This allows for optional modules to be included based on the project configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory_ifdef(CONFIG_MQTT_SAMPLE_LED src/modules/led)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Low Power UART in DeviceTree\nDESCRIPTION: DeviceTree configuration for low power UART showing pinctrl setup, UART configuration with disabled flow control, and LPUART node configuration with REQ and RDY pins. The configuration demonstrates how to set up the necessary pins and properties for the low power UART implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/uart_nrf_sw_lpuart.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n&pinctrl {\n\tuart1_default_alt: uart1_default_alt {\n\t\tgroup1 {\n\t\t\tpsels = <NRF_PSEL(UART_TX, 1, 13)>,\n\t\t\t\t<NRF_PSEL(UART_RX, 1, 12)>;\n\t\t};\n\t};\n\n\tuart1_sleep_alt: uart1_sleep_alt {\n\t\tgroup1 {\n\t\t\tpsels = <NRF_PSEL(UART_TX, 1, 13)>,\n\t\t\t\t<NRF_PSEL(UART_RX, 1, 12)>;\n\t\t\tlow-power-enable;\n\t\t};\n\t};\n};\n\n&uart1 {\n\tcompatible = \"nordic,nrf-uarte\";\n\tstatus = \"okay\";\n\tbaudrate = <1000000>;\n\tpinctrl-0 = <&uart1_default_alt>;\n\tpinctrl-1 = <&uart1_sleep_alt>;\n\tpinctrl-names = \"default\", \"sleep\";\n\t/delete-property/ hw-flow-control;\n\n\tlpuart: nrf-sw-lpuart {\n\t\tcompatible = \"nordic,nrf-sw-lpuart\";\n\t\tstatus = \"okay\";\n\t\treq-pin = <46>;\n\t\trdy-pin = <47>;\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing CA Chain Certificate with modem_key_mgmt_cmp in C\nDESCRIPTION: This code snippet showcases how to compare a CA chain certificate stored in the nRF91 Series LTE modem with another certificate using the `modem_key_mgmt_cmp` function. A security tag is defined, and the certificate is included from a PEM file. The function checks for a mismatch and prints the result of the comparison.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_key_mgmt.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint mismatch;\nnrf_sec_tag_t sec_tag = 42;\nstatic const char cert[] = {\n        #include \"YourCert.pem.inc\"\n};\n\nmismatch = modem_key_mgmt_cmp(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, cert, sizeof(cert));\nif (mismatch) {\n        printk(\"Certificate mismatch\\n\");\n} else {\n        printk(\"Certificate match\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Azure IoT Hub DPS Configuration and Registration in C\nDESCRIPTION: Configuration and initialization of Device Provisioning Service (DPS) for Azure IoT Hub, including setting registration ID, ID scope, and handling device assignment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nint err;\nstruct azure_iot_hub_buf assigned_hostname;\nstruct azure_iot_hub_buf assigned_device_id;\nstruct azure_iot_hub_dps_config dps_cfg = {\n   .handler = dps_handler,\n   .reg_id = {\n      .ptr = device_id_buf,\n      .size = device_id_len,\n   },\n   .id_scope = {\n      .ptr = id_scope_buf,\n      .size = id_scope_len,\n   },\n};\n\nerr = azure_iot_hub_dps_init(&dps_cfg);\nerr = azure_iot_hub_dps_start();\nif (err == 0) {\n   LOG_INF(\"The DPS process has started\");\n   err = k_sem_take(&dps_done_sem, K_SECONDS(SOME_TIMEOUT));\n} else if (err == -EALREADY) {\n   LOG_INF(\"Already assigned to an IoT hub, skipping DPS\");\n}\nerr = azure_iot_hub_dps_hostname_get(assigned_hostname);\nerr = azure_iot_hub_dps_device_id_get(assigned_device_id);\n```\n\n----------------------------------------\n\nTITLE: Transitioning nRF54H20 SoC to Root of Trust\nDESCRIPTION: This command uses nRF Util to change the lifecycle state of the nRF54H20 SoC to Root of Trust (RoT).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-adac-lcs-change --life-cycle rot --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Nordic SDK Application\nDESCRIPTION: Sets up CMake build configuration for a Nordic SDK project. Specifies minimum CMake version, locates Zephyr package, defines project name, and adds main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/scanning_while_connecting/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(scanning_while_connecting)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring High Performance STA Mode in nRF Wi-Fi Driver\nDESCRIPTION: High-throughput configuration for IoT devices requiring maximum performance. Achieves TCP throughput of 13.8/9.1 Mbps (TX/RX) and UDP throughput of 27.4/19.7 Mbps.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/stack_configuration.rst#2025-04-21_snippet_6\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_WIFI_NM_WPA_SUPPLICANT=y\nCONFIG_NRF70_AP_MODE=n\nCONFIG_NRF70_P2P_MODE=n\nCONFIG_NET_PKT_TX_COUNT=30\nCONFIG_NET_PKT_RX_COUNT=30\nCONFIG_NET_BUF_TX_COUNT=60\nCONFIG_NET_BUF_RX_COUNT=30\nCONFIG_NET_BUF_DATA_SIZE=1100\nCONFIG_HEAP_MEM_POOL_SIZE=40144\nCONFIG_NRF_WIFI_CTRL_HEAP_SIZE=20000\nCONFIG_NRF_WIFI_DATA_HEAP_SIZE=199856\nCONFIG_SPEED_OPTIMIZATIONS=y\nCONFIG_NRF70_UTIL=n\nCONFIG_NRF70_MAX_TX_AGGREGATION=9\nCONFIG_NRF70_MAX_TX_TOKENS=12\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Persistent Key Application in Nordic SDK\nDESCRIPTION: This CMake configuration sets up a persistent key application build in the Nordic nRF Connect SDK. It requires CMake 3.20.0 or newer, finds the Zephyr package, and defines source files for the application. Additionally, it conditionally includes a trusted storage initialization file when the CONFIG_TRUSTED_STORAGE configuration option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/persistent_key_usage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(persistent_key)\n\ntarget_sources(app PRIVATE\n        src/main.c\n        )\n\ntarget_sources_ifdef(CONFIG_TRUSTED_STORAGE app PRIVATE\n        src/trusted_storage_init.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Initializing Sensor Server with Multiple Sensors - C\nDESCRIPTION: This snippet demonstrates how to initialize the Sensor Server with an array of sensor pointers. It shows how to declare external sensor instances and create a Sensor Server instance using the provided sensor list.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/sensor_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nextern struct bt_mesh_sensor temperature_sensor;\nextern struct bt_mesh_sensor motion_sensor;\nextern struct bt_mesh_sensor light_sensor;\n\nstatic struct bt_mesh_sensor* const sensors[] = {\n    &temperature_sensor,\n    &motion_sensor,\n    &light_sensor,\n};\nstatic struct bt_mesh_sensor_srv sensor_srv = BT_MESH_SENSOR_SRV_INIT(sensors, ARRAY_SIZE(sensors));\n```\n\n----------------------------------------\n\nTITLE: Connecting to Wi-Fi Network with Shell Commands\nDESCRIPTION: Command to connect to a specific Wi-Fi access point by providing the SSID, key management type, and passphrase parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/using_wifi_shell_sample.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi connect -s <SSID> -k <key_management> -p <passphrase>\n```\n\n----------------------------------------\n\nTITLE: LwM2M Shell Command for Registration Update\nDESCRIPTION: Shell command to trigger a registration update in the LwM2M client. This command is used for testing LwM2M client functionality through the shell interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/sample_description.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ lwm2m update\n```\n\n----------------------------------------\n\nTITLE: Navigating to sample directory (Command line)\nDESCRIPTION: Command to navigate to the at_client sample directory using the command line.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/building.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncd nrf/samples/cellular/at_client\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Data Model\nDESCRIPTION: Configures the Matter data model with manufacturer-specific extensions. Sets up ZAP file generation and includes external clusters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nchip_configure_data_model(app\n    INCLUDE_SERVER\n    BYPASS_IDL\n    GEN_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated\n    ZAP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/manufacturer_specific.zap\n    EXTERNAL_CLUSTERS \"NORDIC_DEV_KIT_CLUSTER\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a UDP Client in Python\nDESCRIPTION: This Python script creates a UDP client, binds it to a local address and port, sends data to a specified host, and receives data back. It uses the `socket` library to establish a UDP connection and the `time` library to introduce delays.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport socket\nimport time\n\nhost_addr = '000.000.000.00'\nhost_port = 1234\nhost = (host_addr, host_port)\nlocal_addr = '9.999.999.99'\nlocal_port = 1234\nlocal = (local_addr, local_port)\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.bind(local)\nprint(\"Sending: 'Hello, UDP#1!\")\ns.sendto(b\"Hello, UDP#1!\", host)\ntime.sleep(1)\nprint(\"Sending: 'Hello, UDP#2!\")\ns.sendto(b\"Hello, UDP#2!\", host)\ndata, address = s.recvfrom(1024)\nprint(data)\nprint(address)\n\nprint(\"Sending: 'Hello, UDP#3!\")\ns.sendto(b\"Hello, UDP#3!\", host)\ntime.sleep(1)\nprint(\"Sending: 'Hello, UDP#4!\")\ns.sendto(b\"Hello, UDP#4!\", host)\ntime.sleep(1)\nprint(\"Sending: 'Hello, UDP#5!\")\ns.sendto(b\"Hello, UDP#5!\", host)\ndata, address = s.recvfrom(1024)\nprint(data)\nprint(address)\n\nprint(\"Closing connection\")\ns.close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Continuous DSSS TX Traffic on Channel 14\nDESCRIPTION: Sequence of commands to configure and run a continuous DSSS TX traffic sequence with specific parameters including channel 14, frame length, power, and timing settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test init 14\nwifi_radio_test bypass_reg_domain 1\nwifi_radio_test tx_pkt_preamble 0\nwifi_radio_test tx_pkt_rate 1\nwifi_radio_test tx_pkt_len 1024\nwifi_radio_test tx_power 10\nwifi_radio_test tx_pkt_gap 8600\nwifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Automatic Feeding with FeedingCallback Implementation\nDESCRIPTION: Provides an example of implementing automatic feeding of a Matter watchdog source using a custom FeedingCallback defined in the Main thread, with periodic invocation set at 200 ms.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/watchdog.rst#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nvoid FeedFromApp(Nrf::Watchdog::WatchdogSource *source)\n{\n    if (source)\n    {\n        Nrf::PostTask([source] { source->Feed(); });\n    }\n}\n\nNrf::Watchdog::WatchdogSource myWatchdog(200, FeedFromApp);\n\nif(!Nrf::Watchdog::InstallSource(myWatchdog))\n{\n    LOG_ERR(\"Watchdog source cannot be installed.\");\n}\n\nif(!Nrf::Watchdog::Enable())\n{\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic nRF Connect SDK Project\nDESCRIPTION: Sets up the CMake build environment for a Nordic Semiconductor nRF Connect SDK project. It requires CMake 3.20.0 or higher, finds the Zephyr package, collects all C source files from the src directory, and adds them to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/channel_sounding_ras_initiator/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\t${app_sources}\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Including Utilities Headers - CMake\nDESCRIPTION: When CONFIG_MOCK_SUIT_UTILS is enabled, this snippet includes the utils headers and sources necessary for the test binary. This integrates utility functions that aid in the suite testing process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_UTILS)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_UTILS)\n  target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/utils/include)\n  target_include_directories(testbinary PRIVATE ${ZEPHYR_ZCBOR_MODULE_DIR}/include)\n\n  if (NOT CONFIG_MOCK_SUIT_PLAT_DECODE_UTIL)\n    target_sources(testbinary PRIVATE\n      ${SUIT_SUBSYS_DIR}/utils/src/suit_plat_decode_util.c)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating AWS IoT Certificate from CSR\nDESCRIPTION: AWS CLI command to create a certificate from a Certificate Signing Request (CSR) and obtain the certificate ARN.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\naws iot create-certificate-from-csr --certificate-signing-request file://device_cert.csr.pem --certificate-pem-outfile device_cert.pem --set-as-active --no-cli-pager --query certificateArn\n```\n\n----------------------------------------\n\nTITLE: SUIT Manifest Structure Definition in CDDL\nDESCRIPTION: Defines the structure of a SUIT manifest using Concise Data Definition Language (CDDL). The manifest includes version, sequence number, common elements, and various command sequences for validation, loading, invocation, payload fetching, and installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_manifest_overview.rst#2025-04-21_snippet_0\n\nLANGUAGE: CDDL\nCODE:\n```\nSUIT_Manifest = {\n      suit-manifest-version => 1,\n      suit-manifest-sequence-number => uint,\n      suit-common => bstr .cbor SUIT_Common,\n\n      ? suit-validate => bstr .cbor SUIT_Command_Sequence,\n      ? suit-load => bstr .cbor SUIT_Command_Sequence,\n      ? suit-invoke => bstr .cbor SUIT_Command_Sequence,\n      ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,\n      ? suit-install => bstr .cbor SUIT_Command_Sequence,\n      ? suit-text => bstr .cbor SUIT_Text_Map\n\n      * $$SUIT_Manifest_Extensions,\n   }\n```\n\n----------------------------------------\n\nTITLE: OpenThread IP Address Command\nDESCRIPTION: This command retrieves the IP addresses of the current Thread network interface. It's used to identify the device's addresses within the network.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot ipaddr\nfdde:ad00:beef:0:0:ff:fe00:800\nfdde:ad00:beef:0:3102:d00b:5cbe:a61\nfe80:0:0:0:8467:5746:a29f:1196\nDone\n```\n\n----------------------------------------\n\nTITLE: Implementing Driver Source with Device Tree Definition\nDESCRIPTION: This C code snippet demonstrates how to define a device using the DEVICE_DT_DEFINE macro, which is a key part of implementing a driver in the NCS. It shows the structure for defining driver APIs and integrating with the device tree.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/add_new_driver.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// driver_source.c\n#include <zephyr/device.h>\n\nstatic const struct my_driver_api driver_api = {\n    // API functions\n};\n\n#define MY_DRIVER_INIT(n) \\\n    DEVICE_DT_INST_DEFINE(n,\\\n                         my_driver_init,\\\n                         NULL,\\\n                         &my_driver_data_##n,\\\n                         &my_driver_config_##n,\\\n                         POST_KERNEL,\\\n                         CONFIG_MY_DRIVER_INIT_PRIORITY,\\\n                         &driver_api);\n\nDT_INST_FOREACH_STATUS_OKAY(MY_DRIVER_INIT)\n```\n\n----------------------------------------\n\nTITLE: GATT Service Definition for Fast Pair\nDESCRIPTION: Uses BT_GATT_SERVICE_DEFINE to statically define and register the Fast Pair GATT service with automatic request handling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/fast_pair.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nBT_GATT_SERVICE_DEFINE\n```\n\n----------------------------------------\n\nTITLE: Uploading and Testing New Application Image\nDESCRIPTION: mcumgr commands to upload a new application image, list images, flag for testing, and initiate a reset to apply the update.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_psa_template/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nmcumgr --conntype serial --connstring dev=/dev/ttyACM1,baud=115200,mtu=512 image list\nmcumgr --conntype serial --connstring dev=/dev/ttyACM1,baud=115200,mtu=512 image upload \\\nbuild_update/tfm_psa_template/zephyr/zephyr.signed.bin\nmcumgr --conntype serial --connstring dev=/dev/ttyACM1,baud=115200,mtu=512 image test <hash>\nmcumgr --conntype serial --connstring dev=/dev/ttyACM1,baud=115200,mtu=512 reset\n```\n\n----------------------------------------\n\nTITLE: Starting FOTA Update Job in C\nDESCRIPTION: This function initiates a Firmware Over-the-Air (FOTA) update job, allowing devices to receive firmware updates automatically or on request. It is essential for maintaining device performance and security.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n:c:func:`nrf_cloud_fota_job_start` function that starts a FOTA update job.\n```\n\n----------------------------------------\n\nTITLE: Custom GNSS and Cellular Location Request\nDESCRIPTION: Example showing how to configure and request location using GNSS and cellular methods with custom timeout values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/location.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nint err;\nstruct location_config config;\nenum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};\n\nlocation_config_defaults_set(&config, ARRAY_SIZE(methods), methods);\n\n/* Now you have default values set and here you can modify the parameters you want */\nconfig.timeout = 180 * MSEC_PER_SEC;\nconfig.methods[0].gnss.timeout = 90 * MSEC_PER_SEC;\nconfig.methods[1].cellular.timeout = 15 * MSEC_PER_SEC;\n\nerr = location_request(&config);\n```\n\n----------------------------------------\n\nTITLE: Building without sysbuild (Command line)\nDESCRIPTION: West command to explicitly build an application without using sysbuild, targeting the nRF52840 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/building.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 --no-sysbuild\n```\n\n----------------------------------------\n\nTITLE: Installing nRF Util Device Command\nDESCRIPTION: Command to update the nRF Util device command to version 2.4.0\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil install device=2.4.0 --force\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for nRF Comparator Test Project\nDESCRIPTION: This CMake snippet configures the build system for a comparator test project within the nRF Connect SDK. It sets the minimum CMake version to 3.20.0, finds the Zephyr package, defines the project name as 'comp', and adds all C source files from the Zephyr test directory for the comparator board test.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/boards/nrf/comp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(comp)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/boards/nrf/comp/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Registering Modem Functional Mode Change Callback in C\nDESCRIPTION: Macro to register a callback function that will be executed when the modem changes functional mode (CFUN). The callback is called after the mode has been successfully set.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_wrapper.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nNRF_MODEM_LIB_ON_CFUN(callback_name, context)\n```\n\n----------------------------------------\n\nTITLE: Manual Feeding of Matter Watchdog\nDESCRIPTION: Illustrates the steps to manually feed a Matter Watchdog source, focusing on efficient power consumption by feeding only when the CPU is active.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/watchdog.rst#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nNrf::Watchdog::WatchdogSource myWatchdog;\n\nif(!Nrf::Watchdog::InstallSource(myWatchdog))\n{\n    LOG_ERR(\"Watchdog source cannot be installed.\");\n}\n\nif(!Nrf::Watchdog::Enable())\n{\n    return false;\n}\n\nmyWatchdog.Feed();\n```\n\n----------------------------------------\n\nTITLE: Configuring ECC Curve Support in PSA Crypto\nDESCRIPTION: Kconfig options for enabling various elliptic curve types, including Brainpool, Curve25519, Edwards curves, and SECP curves.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_21\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_PSA_WANT_ECC_BRAINPOOL_P_R1_160\nCONFIG_PSA_WANT_ECC_BRAINPOOL_P_R1_192\nCONFIG_PSA_WANT_ECC_BRAINPOOL_P_R1_224\nCONFIG_PSA_WANT_ECC_BRAINPOOL_P_R1_256\nCONFIG_PSA_WANT_ECC_BRAINPOOL_P_R1_320\nCONFIG_PSA_WANT_ECC_BRAINPOOL_P_R1_384\nCONFIG_PSA_WANT_ECC_BRAINPOOL_P_R1_512\nCONFIG_PSA_WANT_ECC_MONTGOMERY_255\nCONFIG_PSA_WANT_ECC_MONTGOMERY_448\nCONFIG_PSA_WANT_ECC_TWISTED_EDWARDS_255\nCONFIG_PSA_WANT_ECC_TWISTED_EDWARDS_448\nCONFIG_PSA_WANT_ECC_SECP_K1_192\nCONFIG_PSA_WANT_ECC_SECP_K1_224\nCONFIG_PSA_WANT_ECC_SECP_K1_256\nCONFIG_PSA_WANT_ECC_SECP_R1_192\nCONFIG_PSA_WANT_ECC_SECP_R1_224\nCONFIG_PSA_WANT_ECC_SECP_R1_256\nCONFIG_PSA_WANT_ECC_SECP_R1_384\nCONFIG_PSA_WANT_ECC_SECP_R1_521\nCONFIG_PSA_WANT_ECC_SECP_R2_160\nCONFIG_PSA_WANT_ECC_SECT_K1_163\nCONFIG_PSA_WANT_ECC_SECT_K1_233\nCONFIG_PSA_WANT_ECC_SECT_K1_239\nCONFIG_PSA_WANT_ECC_SECT_K1_283\nCONFIG_PSA_WANT_ECC_SECT_K1_409\n```\n\n----------------------------------------\n\nTITLE: Registering a Deferred AT Monitor in C\nDESCRIPTION: Demonstrates how to register a handler that receives +CEREG notifications from the modem in the system workqueue.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_monitor.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/* AT monitor for +CEREG notifications */\nAT_MONITOR(network_registration, \"+CEREG\", cereg_mon);\n\nint cereg_mon(const char *notif)\n{\n\tprintf(\"Received +CEREG notification: %s\", notif);\n}\n```\n\n----------------------------------------\n\nTITLE: Including SMS Library Header File in C\nDESCRIPTION: Header file inclusion for the SMS library API in C code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/sms.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <modem/sms.h>\n```\n\n----------------------------------------\n\nTITLE: Defining Wave Signal Parameters in C\nDESCRIPTION: This struct defines parameters for the wave signal used in the wave generator library. Users can specify various configuration options for wave generation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/wave_gen.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct wave_gen_param {\n    // Define parameters for wave generation\n    int frequency;  // Frequency of the wave\n    int amplitude;  // Amplitude of the wave\n    int offset;     // Offset applied to the wave\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Memfault in Kconfig\nDESCRIPTION: Basic Kconfig options to enable Memfault integration and set the project key in nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/memfault.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_MEMFAULT=y\nCONFIG_MEMFAULT_NCS_PROJECT_KEY=\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the build system has the necessary features and capabilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Ethernet over RTT Device in Devicetree\nDESCRIPTION: Devicetree definition required to initialize an instance of the Ethernet over RTT driver. This configuration establishes the device with the 'segger,eth-rtt' compatible string, making it available as a network interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/eth_rtt.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n  eth-rtt {\n    compatible = \"segger,eth-rtt\";\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining URI String and Message Buffer in C for NFC\nDESCRIPTION: Initializes a URL string \"nordicsemi.com\" as a character array and creates a buffer for the NFC NDEF message. This setup is required before encoding the URI message.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/uri_msg.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic const uint8_t m_url[] =\n    {'n', 'o', 'r', 'd', 'i', 'c', 's', 'e', 'm', 'i', '.', 'c', 'o', 'm'}; //URL \"nordicsemi.com\"\n\nuint8_t m_ndef_msg_buf[256];\n```\n\n----------------------------------------\n\nTITLE: Device Provisioning Service (DPS) Handler in C\nDESCRIPTION: Implementation of a DPS registration status handler for Azure IoT Hub. Handles different registration states including not started, assigning, assigned, and failed scenarios.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nstatic void dps_handler(enum azure_iot_hub_dps_reg_status state)\n{\n   switch (state) {\n   case AZURE_IOT_HUB_DPS_REG_STATUS_NOT_STARTED:\n      LOG_INF(\"AZURE_IOT_HUB_DPS_REG_STATUS_NOT_STARTED\");\n      break;\n   case AZURE_IOT_HUB_DPS_REG_STATUS_ASSIGNING:\n      LOG_INF(\"AZURE_IOT_HUB_DPS_REG_STATUS_ASSIGNING\");\n      break;\n   case AZURE_IOT_HUB_DPS_REG_STATUS_ASSIGNED:\n      LOG_INF(\"AZURE_IOT_HUB_DPS_REG_STATUS_ASSIGNED\");\n      k_sem_give(&dps_assigned_sem);\n      break;\n   case AZURE_IOT_HUB_DPS_REG_STATUS_FAILED:\n      LOG_INF(\"ZURE_IOT_HUB_DPS_REG_STATUS_FAILED\");\n      k_sem_give(&dps_registration_failed_sem);\n      break;\n   default:\n      LOG_WRN(\"Unhandled DPS registration status: %d\", state);\n      break;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Devices\nDESCRIPTION: Command to list all connected development kits and their serial numbers\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device list\n```\n\n----------------------------------------\n\nTITLE: Setting up Counter Project with Zephyr RTOS in CMake\nDESCRIPTION: Configures a counter project build environment with CMake. It specifies minimum CMake version 3.20.0, finds the Zephyr package at the environment's ZEPHYR_BASE location, and imports source files from Zephyr's counter alarm sample. The imported sources are then added to the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/drivers/counter/alarm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(counter)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/samples/drivers/counter/alarm/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 DK\nDESCRIPTION: Command to build the QuickTrack application for the nRF7002 Development Kit with the default configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Generating Random Number\nDESCRIPTION: Sends a command to generate a new random number and update the RandomNumber attribute\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: matter-cli\nCODE:\n```\nany command-by-id 0x0028 0 '{}' 1 0\n```\n\n----------------------------------------\n\nTITLE: LLPM Connection Interval Configuration in C\nDESCRIPTION: Demonstrates the connection interval settings based on LLPM support and configuration. For LLPM-capable devices, interval is set to 1ms. For standard Bluetooth, intervals are set to either 7.5ms or 10ms depending on connection count support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/ble_conn_params.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// LLPM capable devices\nconnection_interval = 1; // 1ms interval\n\n// Standard Bluetooth\nif (!LLPM_supported || CONFIG_BT_MAX_CONN == 1) {\n    connection_interval = 7.5; // 7.5ms interval\n} else {\n    connection_interval = 10; // 10ms interval\n}\n```\n\n----------------------------------------\n\nTITLE: FOTA Download URL Configuration Example\nDESCRIPTION: Example of URL configuration parameters required for initiating a FOTA download. The host parameter specifies the target hostname and the file parameter indicates the path to the firmware file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/fota_download.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* host - my_domain.com\n* file - path/to/resource/file.bin\n```\n\n----------------------------------------\n\nTITLE: Stack Usage Query Command\nDESCRIPTION: Shell command to display stack usage statistics for all running threads in a Matter device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nkernel stacks\n```\n\n----------------------------------------\n\nTITLE: Revoking Old Key in Bluetooth Mesh Using NCS API - C\nDESCRIPTION: This code snippet shows how to revoke an old key after all nodes have switched to Key Refresh Phase 2. It sends a message to transition the Key Refresh Phase to phase 3, effectively removing the old key and transitioning security management to the new key.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/node_removal.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n    static int swap_net_keys_in_cdb(uint8_t net_idx) {\\n        struct bt_mesh_cdb_subnet *subnet;\\n\\n        subnet = bt_mesh_cdb_subnet_get(net_idx);\\n        if (!subnet) {\\n            printk(\"Unable to get subnet\\n\");\\n            return -EINVAL;\\n        }\\n\\n        memcpy(subnet->keys[0].net_key, subnet->keys[1].net_key, 16);\\n        memset(subnet->keys[1].net_key, 0, 16);\\n        bt_mesh_cdb_subnet_store(subnet);\\n    }\\n\\n    ...\\n\\n    update_key_refresh_phase(BT_MESH_NET_PRIMARY, BT_MESH_KR_PHASE_3);\\n    /* Replace the old key with the new one in CDB. */\\n    swap_net_keys_in_cdb(BT_MESH_NET_PRIMARY);\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package - CMake\nDESCRIPTION: This snippet uses CMake to find the required Zephyr package as a dependency for the project. It ensures that the proper version of Zephyr, specified by the environment variable ZEPHYR_BASE, is available for the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/uart/uart_elementary/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Creating DTLS Client and Connecting to Server\nDESCRIPTION: This snippet demonstrates how to create a DTLS client and connect to a DTLS server using AT commands, specifying the server address, port, and security tag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_14\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XUDPCLI=1,\"example.com\",1234,1001\n```\n\n----------------------------------------\n\nTITLE: Handling Directed Advertising in Bluetooth LE Scanning in C\nDESCRIPTION: This code snippet demonstrates how to handle directed advertising packets by implementing a filter_no_match event handler. This allows establishing connections with devices that send directed advertising packets without reconfiguring existing filters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/scan.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n.. literalinclude:: ../../../../samples/bluetooth/central_hids/src/main.c\n    :language: c\n    :start-after: include_startingpoint_scan_rst\n    :end-before: include_endpoint_scan_rst\n```\n\n----------------------------------------\n\nTITLE: Configuring TX Power Limits in Devicetree for nRF70 Wi-Fi Driver\nDESCRIPTION: This devicetree snippet demonstrates how to configure maximum transmit power limits for different frequency bands and modulation schemes in the nRF70 Wi-Fi driver. These values should be replaced with measurements from transmitter testing on specific PCB designs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/wifi/nrf70_native.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n&nrf70 {\n   wifi-max-tx-pwr-2g-dsss = <21>;\n   wifi-max-tx-pwr-2g-mcs0 = <16>;\n   wifi-max-tx-pwr-2g-mcs7 = <16>;\n   wifi-max-tx-pwr-5g-low-mcs0 = <14>;\n   wifi-max-tx-pwr-5g-low-mcs7 = <14>;\n   wifi-max-tx-pwr-5g-mid-mcs0 = <14>;\n   wifi-max-tx-pwr-5g-mid-mcs7 = <14>;\n   wifi-max-tx-pwr-5g-high-mcs0 = <14>;\n   wifi-max-tx-pwr-5g-high-mcs7 = <14>;\n};\n```\n\n----------------------------------------\n\nTITLE: Central Device Console Output\nDESCRIPTION: Console output showing the initialization, connection and subrating parameter changes from the central device perspective.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/subrating/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK v2.7.99-9539f0a1a59b ***\n*** Using Zephyr OS v3.6.99-766b306bcbe8 ***\nStarting Bluetooth Subrating sample\nI: SoftDevice Controller build revision:\nI: 0f 3f c8 4a 7e 8d b6 7a |.?.J~..z\nI: 64 7f 04 47 8b 3c 4b ae |d..G.<K.\nI: 95 16 0d 96             |....\nI: HW Platform: Nordic Semiconductor (0x0002)\nI: HW Variant: nRF52x (0x0002)\nI: Firmware: Standard Bluetooth controller (0x00) Version 15.51263 Build 3062726218\nI: Identity: EA:9C:4D:3A:2F:A8 (random)\nI: HCI: version 5.4 (0x0d) revision 0x1224, manufacturer 0x0059\nI: LMP: version 5.4 (0x0d) subver 0x1224\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Project with CMake\nDESCRIPTION: This CMake snippet establishes the build environment for a Zephyr project, setting a minimum CMake version and locating the Zephyr package via environment variables. It defines the project name 'full_modem_update' and specifies the main C source file. It depends on having Zephyr installed and accessible through the ZEPHYR_BASE environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/http_update/modem_full_update/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(full_modem_update)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: HTTP PUT request (Non-TLS, Wi-Fi)\nDESCRIPTION: Sends an HTTP PUT request to update the state of LED 1 via a non-TLS connection. It uses the `http` command with the PUT method to the specified URL and includes raw data '1' to set the LED state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"http PUT http://httpserver.local:80/led/1 --raw=\\\"1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: PPP Control Example Usage\nDESCRIPTION: Complete example showing PPP control commands including initialization, starting/stopping PPP, and handling peer connections with corresponding status notifications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/PPP_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: at-commands\nCODE:\n```\nAT+CFUN=1\n\nOK\n\n// PPP is automatically started when the modem is registered to the network.\n#XPPP: 1,0\n\n// Stop PPP.\nAT#XPPP=0\n\nOK\n\n#XPPP: 0,0\n\n// Start PPP.\nAT#XPPP=1\n\nOK\n\n#XPPP: 1,0\n\n// Have the peer connect to SLM's PPP.\n#XPPP: 1,1\n\n// Peer disconnects.\n#XPPP: 1,0\n\n// SLM restarts PPP automatically when peer disconnects.\n#XPPP: 0,0\n\n#XPPP: 1,0\n\nAT+CFUN=4\n\nOK\n\n#XPPP: 0,0\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenThread Custom Parameters and Compiler Options\nDESCRIPTION: Sets up custom OpenThread parameters from Kconfig and adds necessary compiler flags. Adds MbedTLS compatibility definition for SSL key export and integrates Zephyr's compiler options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nstring(REPLACE \" \" \";\" OT_PARAM_LIST \" ${CONFIG_OPENTHREAD_CUSTOM_PARAMETERS}\")\ntarget_compile_definitions(ot-config INTERFACE ${OT_PARAM_LIST})\n\n# Since Mbed TLS 3.1.0 MBEDTLS_SSL_EXPORT_KEYS was removed as build symbol and\n# it's always assumed to be enabled. Corresponding kconfig was removed from\n# Zephyr as well, but OpenThread code still uses it, so we add it here.\ntarget_compile_definitions(ot-config INTERFACE -DMBEDTLS_SSL_EXPORT_KEYS)\n\n# Zephyr compiler options\ntarget_include_directories(ot-config INTERFACE\n    $<TARGET_PROPERTY:zephyr_interface,INTERFACE_INCLUDE_DIRECTORIES>\n)\n\ntarget_include_directories(ot-config SYSTEM INTERFACE\n    $<TARGET_PROPERTY:zephyr_interface,INTERFACE_SYSTEM_INCLUDE_DIRECTORIES>\n)\n\ntarget_compile_definitions(ot-config INTERFACE\n    $<TARGET_PROPERTY:zephyr_interface,INTERFACE_COMPILE_DEFINITIONS>\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Active Groups with chip-tool\nDESCRIPTION: This command retrieves the current active groups within the Matter network, allowing users to see group IDs, associated key sets, and names, which is crucial for managing device communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n./chip-tool groupsettings show-groups\n    ...\n      +-------------------------------------------------------------------------------------+\n      | Available Groups :                                                                  |\n      +-------------------------------------------------------------------------------------+\n      | Group Id   |  KeySet Id     |   Group Name                                          |\n      | 0x101           0x1a1            Group #1                                           |\n      | 0x102           0x1a2            Group #2                                           |\n      | 0x103           0x1a3            Group #3                                           |\n      +-------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Adding Text Record to NFC NDEF Message in C\nDESCRIPTION: This snippet shows how to add a previously created text record to an NDEF message. It includes error handling to verify the record was added successfully.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/text_rec.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nerr = nfc_ndef_msg_record_add(&NFC_NDEF_MSG(nfc_text_msg),\n\t\t\t      &NFC_NDEF_TEXT_RECORD_DESC(nfc_en_text_rec));\nif (err < 0) {\n\tprintk(\"Cannot add first record!\\n\");\n\treturn err;\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Metadata - Shell Command\nDESCRIPTION: This command encodes the completed DFU metadata for a firmware version, including its size and the hash of the Composition Data. The output provides the final encoded metadata.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfu metadata encode 2 0 0 0 241236 1 0x71f3267c 1\n```\n\n----------------------------------------\n\nTITLE: Generating Persistent AES 128-bit Key using PSA API in C\nDESCRIPTION: This snippet demonstrates the generation of a persistent AES 128-bit key using PSA APIs. The key is stored in the Internal Trusted Storage (ITS) and retains its value between device resets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/persistent_key_usage/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\npsa_key_attributes_t attributes = PSA_KEY_ATTRIBUTES_INIT;\npsa_set_key_usage_flags(&attributes, PSA_KEY_USAGE_ENCRYPT | PSA_KEY_USAGE_DECRYPT);\npsa_set_key_algorithm(&attributes, PSA_ALG_CTR);\npsa_set_key_type(&attributes, PSA_KEY_TYPE_AES);\npsa_set_key_bits(&attributes, 128);\npsa_set_key_lifetime(&attributes, PSA_KEY_LIFETIME_PERSISTENT);\npsa_set_key_id(&attributes, KEY_ID);\n\nstatus = psa_generate_key(&attributes, &key_handle);\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version for Zephyr Project\nDESCRIPTION: This snippet defines the minimum required version of CMake for the project and specifies the Zephyr package to be used. It ensures that the correct version of CMake is used during the build process, as well as the necessary environment hints for Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_event_manager/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Registering Fast Pair Information Callbacks (C)\nDESCRIPTION: The `bt_fast_pair_info_cb_register` function is used to register callbacks for Fast Pair events.  The `bt_fast_pair_info_cb.account_key_written` callback is triggered on a successful Account Key write operation and informs about updates to the Account Key storage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n\"bt_fast_pair_info_cb_register\"\n```\n\nLANGUAGE: c\nCODE:\n```\n\"bt_fast_pair_info_cb.account_key_written\"\n```\n\nLANGUAGE: c\nCODE:\n```\n\"bt_fast_pair_has_account_key\"\n```\n\n----------------------------------------\n\nTITLE: Testing TCP Socket Connection\nDESCRIPTION: Commands for establishing and testing TCP socket connections including socket creation, connection, data transfer, and closure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_1\n\nLANGUAGE: at-commands\nCODE:\n```\nAT#XSOCKET=1,1,0\nAT#XSOCKET?\nAT#XSOCKETOPT=1,20,30\nAT#XCONNECT=\"example.com\",1234\nAT#XSEND=\"Test TCP\"\nAT#XRECV=0\nAT#XSOCKET=0\n```\n\n----------------------------------------\n\nTITLE: Setting Up PSA Crypto Libraries and Includes in CMake\nDESCRIPTION: Defines and configures three interface libraries for PSA crypto: psa_crypto_config, psa_crypto_library_config, and psa_interface. Each library is configured with appropriate include paths and compiler definitions for the PSA Crypto interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Add library for crypto configs (NS/S-only build)\n# The name and intent of this comes from TF-M distribution\nadd_library(psa_crypto_config INTERFACE)\n\n# Add config files required for PSA crypto interface\ntarget_compile_definitions(psa_crypto_config\n  INTERFACE\n    -DMBEDTLS_CONFIG_FILE=\"${CONFIG_MBEDTLS_CFG_FILE}\"\n    -DMBEDTLS_PSA_CRYPTO_CONFIG_FILE=\"${CONFIG_MBEDTLS_PSA_CRYPTO_CONFIG_FILE}\"\n)\n\n# Add library for crypto configs (S-only or Secure image build)\n# The name and intent of this comes from TF-M distribution\nadd_library(psa_crypto_library_config INTERFACE)\n\n# Add config files required for PSA core\ntarget_compile_definitions(psa_crypto_library_config\n  INTERFACE\n    -DMBEDTLS_CONFIG_FILE=\"${CONFIG_MBEDTLS_CFG_FILE}\"\n    -DMBEDTLS_PSA_CRYPTO_CONFIG_FILE=\"${CONFIG_MBEDTLS_PSA_CRYPTO_CONFIG_FILE}\"\n    -DMBEDTLS_PSA_CRYPTO_USER_CONFIG_FILE=\"${CONFIG_MBEDTLS_PSA_CRYPTO_USER_CONFIG_FILE}\"\n)\n\n# Add a library for crypto includes for the PSA interface (NS, S-only and TF-M)\n# The name and intent of this comes from TF-M distribution\nadd_library(psa_interface INTERFACE)\n\n# Add the includes from nrf_security, Oberon PSA core, and Arm Mbed TLS\n# to the psa_interface library\ntarget_include_directories(psa_interface\n  INTERFACE\n    # Oberon PSA headers\n    ${OBERON_PSA_CORE_PATH}/include\n    ${OBERON_PSA_CORE_PATH}/library\n    # Mbed TLS (mbedcrypto) PSA headers\n    ${ARM_MBEDTLS_PATH}/library\n    ${ARM_MBEDTLS_PATH}/include\n    ${ARM_MBEDTLS_PATH}/include/library\n)\n\n# Finally adding the crypto lib\nadd_subdirectory(${NRFXLIB_DIR}/crypto crypto_copy)\n\n# Add mbed TLS Libraries\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for nRF Connect SDK\nDESCRIPTION: Command to create a Python virtual environment in the ncs directory. Virtual environments help avoid package conflicts with system Python installations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv ~/ncs/.venv\n```\n\n----------------------------------------\n\nTITLE: Configuring Motion Detector Application Library in CMake\nDESCRIPTION: Sets up the Motion Detector application library, including directories, dependencies, and platform-specific source files. It handles different platforms (DK and Thingy) and includes a workaround for a build order issue with offsets.h.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/src/motion_detector/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_named(app_motion_detector)\n\ntarget_include_directories(app_motion_detector PUBLIC include)\n\ntarget_link_libraries(app_motion_detector PRIVATE app_ui)\n\nif(CONFIG_APP_PLATFORM_DK)\n  target_sources(app_motion_detector PRIVATE platform_dk.c)\nelseif(CONFIG_APP_PLATFORM_THINGY)\n  target_sources(app_motion_detector PRIVATE platform_thingy.c)\n  # Workaround build order issue related to offsets.h not being generated\n  # before the platform_thingy.c file which includes it is built.\n  add_dependencies(app_motion_detector offsets_h)\nelse()\n  message(FATAL_ERROR \"Unsupported platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding the Zephyr package\nDESCRIPTION: Locates the Zephyr development environment. The `find_package` command searches for the Zephyr package and makes its variables available for use.  The `REQUIRED` argument ensures that the configuration fails if Zephyr is not found, and `HINTS` suggests possible locations based on the `ZEPHYR_BASE` environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/writable_ndef_msg/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Running unit tests (Command line)\nDESCRIPTION: West command to run unit tests using the native simulator board target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/building.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nwest build -b native_sim -t run\n```\n\n----------------------------------------\n\nTITLE: Configuring ICD Communication Parameters\nDESCRIPTION: This snippet lists the Kconfig options necessary to configure the Idle Mode Duration, Active Mode Duration, and polling intervals for Intermittently Connected Devices, affecting their responsiveness and power consumption.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/low_power_configuration.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\n:kconfig:option:`CONFIG_CHIP_ICD_IDLE_MODE_DURATION` to set the Idle Mode Duration value in seconds (for example, ``120``).\n:kconfig:option:`CONFIG_CHIP_ICD_ACTIVE_MODE_DURATION` to set the Active Mode Duration value in milliseconds (for example, ``300``).\n:kconfig:option:`CONFIG_CHIP_ICD_SLOW_POLL_INTERVAL` to set the Slow Polling Interval value in milliseconds (for example, ``5000``).\n:kconfig:option:`CONFIG_CHIP_ICD_FAST_POLLING_INTERVAL` to set the Fast Polling Interval value in milliseconds (for example, ``200``).\n```\n\n----------------------------------------\n\nTITLE: Building Wi-Fi Scan Sample for nRF7002 DK\nDESCRIPTION: CLI commands to build the Wi-Fi scan sample for the nRF7002 DK, including options for fetching different types of scan results.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/scan/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp\n```\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_WIFI_MGMT_RAW_SCAN_RESULTS=y -DCONFIG_WIFI_MGMT_RAW_SCAN_RESULTS_ONLY=y\n```\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_WIFI_MGMT_RAW_SCAN_RESULTS=y\n```\n\n----------------------------------------\n\nTITLE: FOTA upload command\nDESCRIPTION: This command uploads the binary to Coiote Device Management server. The script defines resource ID based on the given instance ID: ``lwm2m_client_fota_instance_<instance_id>``. The example shows how to upload `app_update.bin` for instance 0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"./scripts/fota.py upload 0 app_update.bin\"\n```\n\n----------------------------------------\n\nTITLE: Console Output for Successful Bluetooth Advertising\nDESCRIPTION: Console output showing that Bluetooth advertising has started successfully for Wi-Fi provisioning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/provisioning/ble/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwifi_prov: BT Advertising successfully started\n```\n\n----------------------------------------\n\nTITLE: Creating NFC Text Record in C\nDESCRIPTION: This snippet shows how to define text payload and language code for an NFC NDEF text record. It creates a text record with the content 'Hello World!' and the English language code 'en'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/text_rec.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic const uint8_t en_payload[] = {\n\t'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!'\n};\nstatic const uint8_t en_code[] = {'e', 'n'};\n\nint err;\n\n/* Create NFC NDEF text record description in English */\nNFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_en_text_rec,\n\t\t\t UTF_8,\n\t\t\t en_code,\n\t\t\t sizeof(en_code),\n\t\t\t en_payload,\n\t\t\t sizeof(en_payload));\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for WiFi BLE Provisioning\nDESCRIPTION: Sets up the CMake build configuration including minimum version requirement (3.20.0), finds the Zephyr package, defines the project name, and specifies the main source file to compile.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/provisioning/ble/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(wifi_ble_provisioning)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Performing Device Firmware Upgrade (DFU) - Python\nDESCRIPTION: This command initiates a DFU operation to update the firmware on the device. The command must include the path to the DFU image file required for the upgrade.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npython3 configurator_cli.py DEVICE dfu UPDATE_IMAGE_PATH\n```\n\n----------------------------------------\n\nTITLE: Creating AWS IoT Policy\nDESCRIPTION: JSON structure for an AWS IoT Core policy that grants full access to IoT resources. This is intended for development use only.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n       {\n         \"Effect\": \"Allow\",\n         \"Action\": \"iot:*\",\n         \"Resource\": \"*\"\n       }\n    ]\n }\n```\n\n----------------------------------------\n\nTITLE: Building WiFi Shell Sample with nRF70 Firmware Patch DFU using CMake\nDESCRIPTION: CMake commands for building the WiFi Shell sample with DFU procedure for nRF70 Series firmware patch on nRF7002 DK platform. It configures external flash storage for WiFi patches and enables WiFi firmware patch DFU using the sysbuild system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf70_fw_patch_update.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ncmake -GNinja -Bbuild -- -DBOARD=nrf7002dk/nrf5340/cpuapp -Dshell_SNIPPET=nrf70-fw-patch-ext-flash -DSB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE=y -DCONFIG_NRF_WIFI_FW_PATCH_DFU=y -DAPP_DIR=*app_path* *path_to_zephyr*/share/sysbuild\nninja -C build\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Images with sysbuild.cmake\nDESCRIPTION: A CMake script that adds a custom image to a sysbuild project. This script uses ExternalZephyrProject_Add to incorporate an additional image called 'ABC' when the corresponding Kconfig option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/sysbuild_images.rst#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SB_CONFIG_MY_APP_IMAGE_ABC)\n  ExternalZephyrProject_Add(\n    APPLICATION ABC\n    SOURCE_DIR \"<path_to_application>\"\n    BUILD_ONLY true   # This will build the application and not flash it, this **must** be used when building additional images to a core (not the primary image) when using Partition Manager, as the main application for each core will flash a merged hex file instead\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Starting Matter Server in C++\nDESCRIPTION: Code to start the Matter server after initialization. This should be added at the end of the Init method.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nreturn Nrf::Matter::StartServer();\n```\n\n----------------------------------------\n\nTITLE: Initializing Full Modem Update Management in C\nDESCRIPTION: Function to initialize the full modem update management library. The modem must be set to DFU mode before calling this function. Refer to nrf_modem documentation for details on changing modem mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/fmfu_mgmt.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfmfu_mgmt_init()\n```\n\n----------------------------------------\n\nTITLE: Enabling SUIT Cache Processing in Kconfig\nDESCRIPTION: Kconfig options for enabling SUIT cache processing, which is required for SUIT multi-image package support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_multi_image.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_SUIT_DFU_CANDIDATE_PROCESSING_FULL=y\n# or\nSUIT_DFU_CANDIDATE_PROCESSING_PUSH_TO_CACHE=y\n```\n\n----------------------------------------\n\nTITLE: Reading CA Chain Certificate from Modem using modem_key_mgmt_read in C\nDESCRIPTION: This code snippet presents how to read a CA chain certificate from the nRF91 Series LTE modem using the `modem_key_mgmt_read` function. It defines a security tag, a character array to store the certificate, and its size. If the read operation fails, an error message is printed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_key_mgmt.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint err;\nnrf_sec_tag_t sec_tag = 42;\nchar cert[CERT_SIZE];\nsize_t len;\n\nlen = sizeof(cert);\n\nerr = modem_key_mgmt_read(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, cert, &len);\nif (err) {\n        printk(\"Failed to read certificate\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Preprocessing Function Definition\nDESCRIPTION: Defines a function to preprocess partition manager YAML files using the C preprocessor. Handles configuration dependencies and sharing of preprocessed files between images.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/partition_manager/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(preprocess_pm_yml in_file out_file)\n  execute_process(\n    COMMAND ${CMAKE_C_COMPILER}\n    -x assembler-with-cpp\n    -nostdinc\n    -I${ZEPHYR_BINARY_DIR}/include/generated\n    ${NOSYSDEF_CFLAG}\n    -P\n    -E ${in_file}\n    -o ${out_file}\n    WORKING_DIRECTORY ${ZEPHYR_BINARY_DIR}\n    RESULT_VARIABLE ret\n    )\n  if(NOT \"${ret}\" STREQUAL \"0\")\n    message(FATAL_ERROR \"command failed with return code: ${ret}\")\n  endif()\n\n  # Share location of original source file so that the parent image can add it\n  # to the CMAKE_CONFIGURE_DEPENDS list.\n  set_shared(IMAGE ${IMAGE_NAME} APPEND PROPERTY PM_YML_DEP_FILES ${in_file})\n\n  # Share location of preprocessed pm.yml file so that the parent image can\n  # use it as source for partition manager configuration.\n  set_shared(IMAGE ${IMAGE_NAME} APPEND PROPERTY PM_YML_FILES ${out_file})\n\n  # Re-configure (Re-execute all CMakeLists.txt code) when original\n  # (not preprocessed) configuration file changes.\n  set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${in_file})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Commissioner in NCP Sample\nDESCRIPTION: Command to form a new Thread network in the OpenThread NCP sample, setting up the device as a Commissioner.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwpanctl:leader_if> form \"My_Network\" -c 11\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Direction Finding Peripheral Project\nDESCRIPTION: This CMake script sets up the project configuration for a direction finding peripheral application. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, and adds the main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/direction_finding_peripheral/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(direction_finding_peripheral)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring SUPL Client Library Build in CMake\nDESCRIPTION: Sets up the Zephyr library build configuration for SUPL client, including include directories and source files for OS-specific implementations. Handles core functionality like SUPL OS client, LTE parameters, and utilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/supl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(include)\nzephyr_library()\nzephyr_library_sources(\n  os/supl_os_client.c\n  os/lte_params.c\n  os/utils.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for DMIC API Testing\nDESCRIPTION: This CMake script sets up the build environment for testing the Digital Microphone (DMIC) API. It requires CMake 3.20.0 or higher, finds the Zephyr package using environment variables, and imports all source files from Zephyr's DMIC API test directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/audio/dmic_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(dmic_api)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/audio/dmic_api/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Attaching Thing Principal in AWS IoT - Console\nDESCRIPTION: This command attaches a specified principal (certificate ARN) to a given Thing in AWS IoT. Ensure that the certificate and Thing have been created prior to executing this command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\naws iot attach-thing-principal --principal <certificate arn> --thing-name <thing name>\n```\n\n----------------------------------------\n\nTITLE: Starting Prediction in Edge Impulse Wrapper in C\nDESCRIPTION: Initiates a prediction based on buffered input data, shifting the prediction window as required. Dependencies include properly sized data buffers and sufficient input data. Prediction is executed if conditions are met, with results handled through a callback function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/ei_wrapper.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nei_wrapper_start_prediction();\n```\n\n----------------------------------------\n\nTITLE: Configuring No Signature Type for MCUboot\nDESCRIPTION: Indicates the absence of a signature; the image is unchecked but its hash is verified for integrity. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_12\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_SIGNATURE_TYPE_NONE\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_BOOT_SIGNATURE_TYPE_NONE`\"\n```\n\n----------------------------------------\n\nTITLE: Protecting Flash Area using fprotect_area in C\nDESCRIPTION: This snippet demonstrates how to use the `fprotect_area` function to protect a specific area of flash memory from being written to.  The `PM_B0_ADDRESS` and `PM_B0_SIZE` constants define the starting address and size of the flash area to be protected, respectively. The function returns an integer indicating the success or failure of the protection operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/bootloader/fprotect.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint err = fprotect_area(PM_B0_ADDRESS, PM_B0_SIZE);\n```\n\n----------------------------------------\n\nTITLE: Querying Zephyr commits in NCS using Git\nDESCRIPTION: Git commands to list Zephyr commits incorporated into NCS since the previous release, including upstream commits and NCS-specific commits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.0.rst#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline 53fbf40227 ^45ef0d2\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^53fbf40227\n```\n\n----------------------------------------\n\nTITLE: Defining Cluster Attributes and Lists\nDESCRIPTION: Declares required clusters and attributes for the pressure sensor device including descriptor, basic info, identify and pressure measurement clusters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nnamespace\n{\nDESCRIPTOR_CLUSTER_ATTRIBUTES(descriptorAttrs);\nBRIDGED_DEVICE_BASIC_INFORMATION_CLUSTER_ATTRIBUTES(bridgedDeviceBasicAttrs);\nIDENTIFY_CLUSTER_ATTRIBUTES(identifyAttrs);\n};\n\nDECLARE_DYNAMIC_ATTRIBUTE_LIST_BEGIN(pressureSensorAttrs)\nDECLARE_DYNAMIC_ATTRIBUTE(Clusters::PressureMeasurement::Attributes::MeasuredValue::Id, INT16S, 2, 0),\n   DECLARE_DYNAMIC_ATTRIBUTE(Clusters::PressureMeasurement::Attributes::MinMeasuredValue::Id, INT16S, 2, 0),\n   DECLARE_DYNAMIC_ATTRIBUTE(Clusters::PressureMeasurement::Attributes::MaxMeasuredValue::Id, INT16S, 2, 0),\n   DECLARE_DYNAMIC_ATTRIBUTE(Clusters::PressureMeasurement::Attributes::FeatureMap::Id, BITMAP32, 4, 0),\n   DECLARE_DYNAMIC_ATTRIBUTE_LIST_END();\n```\n\n----------------------------------------\n\nTITLE: Including Header Files for Bluetooth LE OOB Records\nDESCRIPTION: Header and source file locations for the Bluetooth LE OOB record implementation in the nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/le_oob_rec.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ninclude/nfc/ndef/le_oob_rec.h\nsubsys/nfc/ndef/le_oob_rec.c\n```\n\n----------------------------------------\n\nTITLE: Configuring Nanopb with Zephyr in CMake\nDESCRIPTION: This CMake script configures the Zephyr library to use Nanopb by setting various build options, paths, and generating required files from .proto definitions. It includes adding appropriate include paths and source files to the build system. Dependencies include Nanopb, and the script expects .proto files as input to generate header and source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/wifi_prov/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n\nset(PROTOC_OPTIONS \"-I${CMAKE_CURRENT_SOURCE_DIR}\")\nset(nanopb_BUILD_RUNTIME OFF)\nset(CMAKE_MODULE_PATH ${ZEPHYR_NANOPB_MODULE_DIR}/extra)\nfind_package(Nanopb REQUIRED)\nset(NANOPB_GENERATE_CPP_STANDALONE FALSE)\nnanopb_generate_cpp(proto_sources proto_headers\n\tproto/common.proto\n\tproto/version.proto\n\tproto/result.proto\n\tproto/request.proto\n\tproto/response.proto\n)\n\n# Add include path to generated .pb.h header files\nzephyr_library_include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\nzephyr_library_sources(\n\twifi_prov_ble.c\n\twifi_prov_handler.c\n\t${proto_sources}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IoT Application Build with CMake\nDESCRIPTION: Sets up the CMake build configuration for an AWS IoT application. Specifies minimum CMake version, finds Zephyr package, declares project name, adds source files, and configures include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/aws_iot/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(aws_iot)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\ntarget_sources(app PRIVATE src/json_payload/json_payload.c)\n# NORDIC SDK APP END\n\nzephyr_include_directories(src)\nzephyr_include_directories(src/json_payload)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: This snippet provides a list of Python package dependencies with specific version constraints for use with Python versions from 3.12 to below 4.0. It ensures the project's consistent build and environment setup across different development systems. Dependencies include widely-used libraries such as 'beautifulsoup4', 'cryptography', and 'numpy'. Constraints on platform and machine type are also specified for some packages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/requirements-fixed.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n#\\n--index-url https://files.nordicsemi.com/artifactory/api/pypi/nordic-pypi/simple\\n\\naenum==3.1.15 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nanytree==2.12.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4\\\"\\nappdirs==1.4.4 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\narrow==1.2.3 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nastroid==3.0.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nattrs==23.1.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nbanal==1.0.6 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nbeautifulsoup4==4.12.3 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nbeautifulsoup4[chardet]==4.12.3 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nbinaryornot==0.4.4 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nbitarray==3.0.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nboolean-py==4.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\ncanopen==2.3.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ncapstone==4.0.2 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ncbor2==5.4.6 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ncbor==1.0.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ncertifi==2024.7.4 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ncffi==1.16.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nchardet==5.2.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ncharset-normalizer==3.2.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nclang-format==17.0.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nclick==8.1.3 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ncmsis-pack-manager==0.5.2 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ncolorama==0.4.6 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ncommoncode==32.0.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nconstruct==2.10.70 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ncontainer-inspector==33.0.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\ncoverage==7.6.4 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ncryptography==44.0.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ndebian-inspector==31.1.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\ndeprecated==1.2.14 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ndill==0.3.7 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ndockerfile-parse==2.0.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\ndocopt==0.6.2 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ndparse2==0.7.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\necdsa==0.19.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\neditdistance==0.8.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nextractcode-7z==16.5.210531 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nextractcode-libarchive==3.5.1.210531 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nextractcode[full]==31.0.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nfasteners==0.19 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nfingerprints==1.2.3 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nftfy==6.3.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nfuture==0.18.3 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ngcovr==6.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ngemfileparser2==0.9.4 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\ngitdb==4.0.10 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ngitlint-core[trusted-deps]==0.19.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ngitlint==0.19.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ngitpython==3.1.43 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ngraphviz==0.20.3 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ngrpcio-tools==1.66.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\ngrpcio==1.66.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nhidapi==0.14.0.post2 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_system != \\\"Linux\\\"\\nhtml5lib-modern==1.2 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nhtml5lib==1.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nidna==3.7 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nimagesize==1.4.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nimgtool==2.1.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nimportlib-metadata==6.8.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nimportlib-resources==6.1.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\niniconfig==2.0.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nintbitset==3.1.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nintelhex==2.3.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nintervaltree==3.1.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nisort==5.12.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\njaraco-functools==4.1.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\njavaproperties==0.8.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\njinja2==3.1.6 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\njsonschema-specifications==2023.7.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\njsonschema==4.23.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\njsonstreams==0.6.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\njunit2html==31.0.2 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\njunitparser==3.1.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nlark==1.1.7 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nlibusb-package==1.0.26.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nlibusb==1.0.27 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nlicense-expression==30.3.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nlpc-checksum==3.0.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nlxml==5.3.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nmarkupsafe==2.1.3 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nmccabe==0.7.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nmilksnake==0.1.6 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nmock==5.1.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nmore-itertools==10.2.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nmsgpack==1.0.5 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_system != \\\"Windows\\\"\\nmypy-extensions==1.0.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nmypy==1.13.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nnatsort==8.4.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nnormality==2.5.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nnrf-regtool==9.0.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nnrfcredstore==1.0.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nnumpy==2.1.3 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npackageurl-python==0.16.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\npackaging==24.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npackvers==21.5 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nparameter-expansion-patched==0.3.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\npathspec==0.11.2 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npatool==3.0.3 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npdfminer-six==20240706 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\npefile==2024.8.26 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\npillow==10.3.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npip-requirements-parser==32.0.1 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\npkg-about==1.1.5 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npkginfo2==30.0.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nplatformdirs==3.10.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npluggy==1.5.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nplugincode==32.0.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\nply==3.11 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npolib==1.2.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nprettytable==3.9.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nprogress==1.6 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\nprotobuf==5.27.3 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npsutil==6.1.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npublicsuffix2==2.20191221 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\npy==1.11.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npyahocorasick==2.1.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\" and platform_machine == \\\"x86_64\\\"\\npycparser==2.21 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\\npycryptodome==3.21.0 ; python_version >= \\\"3.12\\\" and python_version < \\\"4.0\\\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Matter Watchdog\nDESCRIPTION: Method to disable all previously enabled Matter watchdog sources, remove their channels, and stop automatic feeding.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/watchdog.rst#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nNrf::Watchdog::Disable();\n```\n\n----------------------------------------\n\nTITLE: Getting Device Identification Information - Python\nDESCRIPTION: This command obtains identification information for the device, including Vendor ID and Product ID, which are crucial for device management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npython3 configurator_cli.py DEVICE devinfo\n```\n\n----------------------------------------\n\nTITLE: Building Update Package (Console)\nDESCRIPTION: Command to build the update package for Nordic components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_43\n\nLANGUAGE: console\nCODE:\n```\nwest build  -b nrf54h20dk/nrf54h20/cpuapp -- \\\n   -DSB_EXTRA_CONF_FILE=\"suit_mpi.conf\" \\\n   -Dab_CONFIG_N_BLINKS=5 \\\n   -DSB_CONFIG_SUIT_ENVELOPE_NORDIC_TOP_DIRECTORY=\"\\\"<path-to-the-nordic-update-package>\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Zephyr Library Creation\nDESCRIPTION: This CMake command creates a Zephyr library. This command is used to bundle the source code related to the Azure SDK into a reusable library component that can be linked into Zephyr-based applications. It encapsulates the Azure SDK functionalities for Zephyr RTOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/azure-sdk-for-c/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n```\n\n----------------------------------------\n\nTITLE: Installing GN Tool on Linux\nDESCRIPTION: The snippet provides step-by-step instructions for installing the GN meta-build system on a Linux environment. Dependencies include wget for downloading files. Parameters involve setting the installation directory and updating the PATH environment variable. The output files include extracted GN binaries for use in building applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/tools.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir ${HOME}/gn && cd ${HOME}/gn\n```\n\nLANGUAGE: console\nCODE:\n```\nwget -O gn.zip https://chrome-infra-packages.appspot.com/dl/gn/gn/linux-amd64/+/latest\nunzip gn.zip\nrm gn.zip\necho 'export PATH=${HOME}/gn:\"$PATH\"' >> ${HOME}/.bashrc\nsource ${HOME}/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Setting Matter Log Level to Info\nDESCRIPTION: This snippet shows how to set the log level for the Matter module to INFO using the `CONFIG_MATTER_LOG_LEVEL_INF` Kconfig option. This allows displaying informational log messages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_11\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_MATTER_LOG_LEVEL_INF`\"\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment\nDESCRIPTION: Command to activate the Python virtual environment. Once activated, the shell prompt will be prefixed with (.venv) to indicate the environment is active.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/ncs/.venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Defining a Paused AT Monitor in C\nDESCRIPTION: Demonstrates how to define an AT monitor for +CEREG notifications that is paused at boot and can be resumed later.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_monitor.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/* AT monitor for +CEREG notifications, paused until manually activated */\nAT_MONITOR(network_registration, \"+CEREG\", cereg_mon, PAUSED);\n\nvoid foo(void)\n{\n\t/* let's resume the monitor */\n\tat_monitor_resume(&network_registration);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Network Key Using NCS API - C\nDESCRIPTION: This code snippet handles the process of uploading a new network key to all nodes in the Bluetooth Mesh network. It utilizes the Config NetKey Update message to ensure all nodes, including the Configuration Client model, receive the updated key. The function handles error checking and logs the status of the update.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/node_removal.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n    static uint8_t send_net_key_update(struct bt_mesh_cdb_node *node, void *user_data)\\n    {\\n        struct bt_mesh_cdb_subnet *subnet = user_data;\\n        uint8_t status = 0;\\n        int err;\\n\\n        err = bt_mesh_cfg_cli_net_key_update(node->net_idx, node->addr, subnet->net_idx,\\n                                             subnet->keys[1].net_key, &status);\\n        if (err || status) {\\n            printk(\"Unable to update NetKey on %#x (err %d, status %u)\\n\", node->addr, err,\\n                   status);\\n        } else {\\n            printk(\"Updated NetKey with index %u on %#x\\n\", subnet->net_idx, node->addr);\\n        }\\n\\n        return BT_MESH_CDB_ITER_CONTINUE;\\n    }\\n\\n    static int update_net_key(uint16_t net_idx, uint8_t *new_net_key) {\\n        struct bt_mesh_cdb_subnet *subnet;\\n\\n        subnet = bt_mesh_cdb_subnet_get(net_idx);\\n        if (!subnet) {\\n            printk(\"Unable to get subnet\\n\");\\n            return -EINVAL;\\n        }\\n\\n        /* Store the new network key in CDB. */\\n        memcpy(subnet->keys[1].net_key, new_net_key, 16);\\n        bt_mesh_cdb_subnet_store(subnet);\\n\\n        /* Send the new network key to each node. */\\n        bt_mesh_cdb_node_foreach(send_net_key_update, subnet);\\n        return 0;\\n    }\\n\\n    ...\\n\\n    uint8_t new_net_key[16] = { ... };\\n    update_net_key(BT_MESH_NET_PRIMARY, new_net_key);\n```\n\n----------------------------------------\n\nTITLE: Initializing nRF Provisioning Client in C\nDESCRIPTION: Demonstrates how to initialize the nRF provisioning client by calling the nrf_provisioning_init function with callback structures for modem and provisioning state changes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_provisioning.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nnrf_provisioning_init(nrf_provisioning_mm_change *mm_change, nrf_provisioning_dm_change *dm_change);\n```\n\n----------------------------------------\n\nTITLE: Configuring RX Prioritized STA Mode in nRF Wi-Fi Driver\nDESCRIPTION: Configuration optimized for reception-heavy applications like display devices. Achieves TCP throughput of 11/8.8 Mbps (TX/RX) and UDP throughput of 9.2/16.9 Mbps.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/stack_configuration.rst#2025-04-21_snippet_8\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_WIFI_NM_WPA_SUPPLICANT=y\nCONFIG_NRF70_AP_MODE=n\nCONFIG_NRF70_P2P_MODE=n\nCONFIG_NET_PKT_TX_COUNT=20\nCONFIG_NET_PKT_RX_COUNT=64\nCONFIG_NET_BUF_TX_COUNT=40\nCONFIG_NET_BUF_RX_COUNT=64\nCONFIG_NRF70_RX_NUM_BUFS=64\nCONFIG_NET_BUF_DATA_SIZE=1100\nCONFIG_HEAP_MEM_POOL_SIZE=40144\nCONFIG_NRF_WIFI_CTRL_HEAP_SIZE=20000\nCONFIG_NRF_WIFI_DATA_HEAP_SIZE=199856\nCONFIG_SPEED_OPTIMIZATIONS=y\nCONFIG_NRF70_UTIL=n\nCONFIG_NRF70_MAX_TX_AGGREGATION=2\nCONFIG_NRF70_MAX_TX_TOKENS=5\n```\n\n----------------------------------------\n\nTITLE: Building with SLIP support\nDESCRIPTION: Command to build the QuickTrack application with Serial Line Internet Protocol support, which includes both a configuration overlay and a device tree overlay.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -DEXTRA_CONF_FILE=overlay-slip.conf -DEXTRA_DTC_OVERLAY_FILE=nrf7002_uart_pipe.overlay\n```\n\n----------------------------------------\n\nTITLE: XSMS Command Usage Examples\nDESCRIPTION: Complete example showing how to start SMS reception, send messages, and receive notifications. Demonstrates both short and long message handling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SMS_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT\nCODE:\n```\nat#xsms=1\n\nOK\nat#xsms=2,\"+8190xxxxxxxx\",\"SLM test\"\n\nOK\n\n#XSMS: \"21-05-24 11:58:22\",\"090xxxxxxxx\",\"Tested OK\"\n\nat#xsms=2,\"+8190xxxxxxxx\",\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nOK\n\n#XSMS: \"21-05-24 13:29:47\",\"090xxxxxxxx\",\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 EK with nRF5340 DK\nDESCRIPTION: Command to build the Wi-Fi shell sample for nRF7002 EK with nRF5340 DK, using the SHIELD CMake option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf7002ek\n```\n\n----------------------------------------\n\nTITLE: OpenThread UDP Packet Processing Flow\nDESCRIPTION: Process that converts a UDP network packet (net_pkt) to OpenThread message format (otMessage) and handles its transmission through the OpenThread stack and IEEE 802.15.4 radio driver.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/ot_integration.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nprocess_tx_packet()    // Queue UDP packet for processing\n    openthread_send()    // Convert net_pkt to otMessage\n        otIp6Send()       // Process message in OpenThread stack\n// Signal openthread thread\n// Schedule IEEE 802.15.4 frame transmission\n// Send packet via nRF radio driver\n```\n\n----------------------------------------\n\nTITLE: Configuring AEAD Algorithms in nRF Security\nDESCRIPTION: Enables Authenticated Encryption with Associated Data (AEAD) algorithms through Kconfig options. Supports CCM, GCM, and ChaCha20-Poly1305 across multiple drivers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_17\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_PSA_WANT_ALG_CCM\nCONFIG_PSA_WANT_ALG_GCM\nCONFIG_PSA_WANT_ALG_CHACHA20_POLY1305\n```\n\n----------------------------------------\n\nTITLE: Defining a Zephyr Library\nDESCRIPTION: This snippet declares a Zephyr library using the `zephyr_library` function and specifies source files to be included in this library using `zephyr_library_sources`. It is used to configure the build for the Nordic Semiconductor SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/wave_gen/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(wave_gen.c)\n```\n\n----------------------------------------\n\nTITLE: Building the Wi-Fi TWT Sample for nRF7002 DK\nDESCRIPTION: Command-line example showing how to build the TWT sample for the nRF7002 DK. It targets the nRF5340 CPU application processor on the board.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/twt/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Executing FOTA Update with Resource ID (Python)\nDESCRIPTION: Commands to upload a binary and update firmware using the uploaded resource ID. It demonstrates the two-step process of uploading and then updating.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n./scripts/fota.py upload 1 mfw_nrf91x1_update_from_2.x.x-FOTA-TEST_to_2.x.x.bin\n./scripts/fota.py -id urn:imei:359746166785274 update 1 resource lwm2m_client_fota_instance_1\n```\n\n----------------------------------------\n\nTITLE: Testing SMP Server App Using MCUmgr\nDESCRIPTION: This snippet demonstrates how to test the SMP server application using the MCUmgr command-line tool to echo a message back from a remote device via Bluetooth or serial connection. It includes usage for both types of connections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/extxip_smp_svr/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsudo mcumgr --conntype ble --connstring ctlr_name=hci0,peer_name='Zephyr' echo hello\nhello\n```\n\nLANGUAGE: console\nCODE:\n```\nmcumgr --conntype serial --connstring \"/dev/ttyACM2,baud=115200\" echo hello\nhello\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Zephyr Library Sources\nDESCRIPTION: This snippet conditionally adds additional source files to the Zephyr library based on specific configuration options. If a configuration is enabled, the corresponding source file is included in the build process, allowing for modular feature support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/client/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_OPENTHREAD_RPC src/ot_shell.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_MPSL_CX_SOFTWARE src/coex_shell.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_LOG_FORWARDER_RPC src/log_rpc_shell.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_NFC_RPC src/nfc_shell.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_NRF_RPC_DEV_INFO src/dev_info_shell.c)\n```\n\n----------------------------------------\n\nTITLE: Binding Table Configuration Commands for Matter Light Switch\nDESCRIPTION: CHIP Tool commands for configuring binding tables for both unicast and groupcast scenarios\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nchip-tool binding write binding '[{\"fabricIndex\": 1, \"node\": <light bulb node id>, \"endpoint\": 1, \"cluster\": 6}, {\"fabricIndex\": 1, \"node\": <light bulb node id>, \"endpoint\": 1, \"cluster\": 8}]' <light switch node id> 1\n\nchip-tool binding write binding '[{\"fabricIndex\": 1, \"group\": 257}]' <light_switch_node_ID> 1\n```\n\n----------------------------------------\n\nTITLE: HMAC Test Case Implementation in C\nDESCRIPTION: Implementation of the HMAC test case execution function that performs initialization, key setup, and verification of HMAC operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/crypto/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid exec_test_case_hmac(void)\n{\n   int err_code = -1;\n\n   /* Initialize the HMAC module. */\n   mbedtls_md_init(&md_context);\n\n   const mbedtls_md_info_t *p_md_info =\n\t   mbedtls_md_info_from_type(p_test_vector->digest_type);\n   err_code = mbedtls_md_setup(&md_context, p_md_info, 1);\n   if (err_code != 0) {\n\t   LOG_WRN(\"mb setup ec: -0x%02X\", -err_code);\n   }\n   TEST_VECTOR_ASSERT_EQUAL(err_code, 0);\n\n   start_time_measurement();\n   err_code = mbedtls_md_hmac_starts(&md_context, m_hmac_key_buf, key_len);\n   TEST_VECTOR_ASSERT_EQUAL(err_code, 0);\n\n   err_code =\n\t   mbedtls_md_hmac_update(&md_context, m_hmac_input_buf, in_len);\n   TEST_VECTOR_ASSERT_EQUAL(err_code, 0);\n\n   /* Finalize the HMAC computation. */\n   err_code = mbedtls_md_hmac_finish(&md_context, m_hmac_output_buf);\n   stop_time_measurement();\n\n   TEST_VECTOR_ASSERT_EQUAL(p_test_vector->expected_err_code, err_code);\n\n   /* Verify the generated HMAC. */\n   TEST_VECTOR_ASSERT_EQUAL(expected_hmac_len, hmac_len);\n   TEST_VECTOR_MEMCMP_ASSERT(m_hmac_output_buf, m_hmac_expected_output_buf,\n\t   \t\t     expected_hmac_len,\n\t\t\t     p_test_vector->expected_result,\n\t\t\t     \"Incorrect hmac\");\n\n   mbedtls_md_free(&md_context);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Regulator Coefficient of Light Control Server - C\nDESCRIPTION: Sets a specified Regulator Coefficient value for the Light Lightness Control Server and waits for a response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl coeff-set <ID> <Val>\n\tSet a Regulator Coefficient value of the Light Lightness Control Server and wait for a response.\n\n\t* ``ID`` - ID of the coefficient to set. See :c:enum:`bt_mesh_light_ctrl_coeff` for a list of supported coefficients.\n\t* ``Val`` - New coefficient value.\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Project for Zephyr with Nordic SDK\nDESCRIPTION: Configures a CMake project for use with Zephyr RTOS and Nordic SDK. It sets the minimum CMake version, finds the Zephyr package, defines the project, collects source files from the src/ directory, and adds them to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/esb/esb_prx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE ${app_sources})\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Modem Parameters in C\nDESCRIPTION: Populates the initialized structure with all available modem information. This function should be called after modem_info_params_init().\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_info.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nmodem_info_params_get();\n```\n\n----------------------------------------\n\nTITLE: Building SMP Server Sample for nRF52 SoCs\nDESCRIPTION: Command to build the SMP Server sample for nRF52 SoCs with Bluetooth transport configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf52/fota_update.rst#2025-04-21_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nwest build -b *board_target* -- -DEXTRA_CONF_FILE=overlay-bt.conf\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Suspending DFU Transfer\nDESCRIPTION: This command suspends an ongoing DFU transfer, changing the distribution phase to indicate the suspension.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfd suspend\n```\n\n----------------------------------------\n\nTITLE: UDP Client Read Command Response Syntax\nDESCRIPTION: Response syntax for the UDP client read command showing handle and IP family.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_15\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPCLI: <handle>,<family>\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Source Files\nDESCRIPTION: This section defines the project and specifies the source files to be compiled as part of the application, highlighting the use of target_sources to include the main.c file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/shell_bt_nus/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(NONE)\n\ntarget_sources(app PRIVATE\n  src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Building the Peripheral LBS Sample with Minimal Configuration\nDESCRIPTION: This code snippet demonstrates how to build the peripheral LBS sample with minimal configuration to reduce code size and RAM usage. It uses the `-DFILE_SUFFIX=minimal` flag in the build command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_lbs/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build samples/bluetooth/peripheral_lbs -- -DFILE_SUFFIX=minimal\n```\n\n----------------------------------------\n\nTITLE: Setting up CMock Handlers for Network and Modem Interfaces\nDESCRIPTION: Configures CMock handlers for various system interfaces including modem AT commands, SNTP, and socket functionality. Excludes specific printf and scanf related functions from mocking.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/date_time/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem_at.h\n\t     FUNC_EXCLUDE \".*nrf_modem_at_scanf\"\n\t     FUNC_EXCLUDE \".*nrf_modem_at_printf\"\n\t     WORD_EXCLUDE \"__nrf_modem_(printf|scanf)_like\\(.*\\)\")\n\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/net/sntp.h)\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/net/socket.h)\n\n# When mocking nrf_modem_at then nrf_modem/include must manually be added\n# because CONFIG_NRF_MODEM_LINK_BINARY=n\nzephyr_include_directories(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/)\n```\n\n----------------------------------------\n\nTITLE: Generating Public Keys from Private Keys\nDESCRIPTION: Commands to derive public keys from the previously generated private keys. These public keys will be provisioned to the device for signature verification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_signing.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkey -in <KEYS_DIR>/MANIFEST_APPLICATION_GEN1_priv.pem -pubout -out <KEYS_DIR>/MANIFEST_APPLICATION_GEN1_pub.pem\nopenssl pkey -in <KEYS_DIR>/MANIFEST_RADIOCORE_GEN1_priv.pem -pubout -out <KEYS_DIR>/MANIFEST_RADIOCORE_GEN1_pub.pem\nopenssl pkey -in <KEYS_DIR>/MANIFEST_OEM_ROOT_GEN1_priv.pem -pubout -out <KEYS_DIR>/MANIFEST_OEM_ROOT_GEN1_pub.pem\n```\n\n----------------------------------------\n\nTITLE: Building an application (Command line)\nDESCRIPTION: West command to build an application for a specific board target. The board_target needs to be replaced with the actual target name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/building.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b *board_target*\n```\n\n----------------------------------------\n\nTITLE: Implementing USB HID Report Subscription in C\nDESCRIPTION: Header file configuration for selective HID report subscription that assigns HID input reports to specific USB HID instances. This allows different HID reports (like mouse and keyboard) to be handled by separate USB HID class instances.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/usb_state.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include \"hid_report_desc.h\"\n\n/* This configuration file is included only once from usb_state module and holds\n * information about HID report subscriptions of USB HID instances.\n */\n\n/* This structure enforces the header file is included only once in the build.\n * Violating this requirement triggers a multiple definition error at link time.\n */\nconst struct {} usb_state_def_include_once;\n\nstatic const uint32_t usb_hid_report_bm[] = {\n       BIT(REPORT_ID_MOUSE),\n       BIT(REPORT_ID_KEYBOARD_KEYS),\n};\n```\n\n----------------------------------------\n\nTITLE: Identifying DFU Target Types in C\nDESCRIPTION: This function identifies all supported firmware upgrade types. The result can be used as input for the dfu_target_init function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_target.rst#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\ndfu_target_init\n```\n\n----------------------------------------\n\nTITLE: Configuring ECDSA Support with Kconfig for C\nDESCRIPTION: This snippet explains the configuration required to enable ECDSA support within the nrfconnect SDK. It involves setting the Kconfig option CONFIG_MBEDTLS_ECDSA_C. ECDSA functionality depends on ECC configurations being enabled first, and this specific configuration replaces only the top-level APIs for ECDSA.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/backend_config.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo configure Elliptic Curve Digital Signature Algorithm (ECDSA) support, set the :kconfig:option:`CONFIG_MBEDTLS_ECDSA_C` Kconfig option.\n```\n\n----------------------------------------\n\nTITLE: AT Command Execution with Modem Shell\nDESCRIPTION: Use the AT command module in Modem Shell to send and receive AT commands directly with the modem. Commands can be sent individually or via an integrated AT command mode, allowing command pipelining. Ensure that command syntax elements like quotes are properly escaped. Avoid mixing write operations via AT commands with MoSh commands to prevent desynchronization.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nat at+cereg?\n```\n\nLANGUAGE: console\nCODE:\n```\nat at%NBRGRSRP\n```\n\nLANGUAGE: console\nCODE:\n```\nat AT+COPS=1,2,\\\"24407\\\"\n```\n\nLANGUAGE: console\nCODE:\n```\nat events_enable\n```\n\nLANGUAGE: console\nCODE:\n```\nat events_disable\n```\n\nLANGUAGE: console\nCODE:\n```\nat at_cmd_mode enable_autostart\n```\n\nLANGUAGE: console\nCODE:\n```\nat at_cmd_mode start\n```\n\n----------------------------------------\n\nTITLE: Setting Group Key Set on Light Switch\nDESCRIPTION: Uses chip-tool to write group key set information to the Light Switch device. This includes the group key set ID, security policy, epoch keys, and start times.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./chip-tool groupkeymanagement key-set-write '{\"groupKeySetID\":\"258\",\"groupKeySecurityPolicy\":0,\"epochKey0\":\"a0a1a2a3a4a5a6a7a8a9aaabacad7531\",\"epochStartTime0\":\"1110000\",\"epochKey1\":\"b0b1b2b3b4b5b6b7b8b9babbbcbd7531\",\"epochStartTime1\":\"1110001\",\"epochKey2\":\"c0c1c2c3c4c5c6c7c8c9cacbcccd7531\",\"epochStartTime2\":\"1110002\"}' 1 0\n```\n\n----------------------------------------\n\nTITLE: Encoding NDEF File for NFC Type 4 Tag in C\nDESCRIPTION: This code snippet demonstrates how to encode an NDEF file for an NFC Type 4 Tag. It shows the implementation from the writable_ndef_msg sample, illustrating how to create and manage the NDEF file structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/t4t/ndef_file.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n.. literalinclude:: ../../../../../samples/nfc/writable_ndef_msg/src/ndef_file_m.c\n    :language: c\n    :start-after: include_startingpoint_ndef_file_rst\n    :end-before: include_endpoint_ndef_file_rst\n```\n\n----------------------------------------\n\nTITLE: Assigning Heart Rate Service Handles in C\nDESCRIPTION: This function assigns the handles of the Heart Rate Service to a HRS client instance. It must be called after successful service discovery to enable operations with the remote Heart Rate Service.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/hrs_client.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nbt_hrs_client_handles_assign\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysbuild Settings Using sysbuild.conf\nDESCRIPTION: Example configuration in sysbuild.conf that enables MCUboot, sets RSA as the key type, and specifies overwrite-only mode for all boards.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_sysbuild.rst#2025-04-21_snippet_0\n\nLANGUAGE: cfg\nCODE:\n```\nSB_CONFIG_BOOTLOADER_MCUBOOT=y\nSB_CONFIG_MCUBOOT_MODE_OVERWRITE_ONLY=y\nSB_CONFIG_BOOT_SIGNATURE_TYPE_RSA=y\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SMP Client Application in Nordic nRF Connect SDK\nDESCRIPTION: This CMake configuration sets up the build system for an SMP client application. It requires CMake 3.20.0 or later, finds the Zephyr package, defines the project name as 'smp_client', adds the main.c source file, and configures include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/smp_svr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(smp_client)\nzephyr_compile_definitions(PROJECT_NAME=${PROJECT_NAME})\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\nzephyr_include_directories(src)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Get SUIT Manifest State Response in SUIT SMP Extension\nDESCRIPTION: Defines the comprehensive CBOR response format for the 'Get SUIT manifest state' request in the SUIT SMP protocol extension. This structure contains detailed information about the manifest configuration, verification status, and version details.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_5\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str)\"rc\"                               : (uint)\n    (str)\"class_id\"                         : (byte str)\n    (str)\"vendor_id\"                        : (byte str)\n    (str)\"downgrade_prevention_policy\"      : (uint)\n    (str)\"independent_updateability_policy\" : (uint)\n    (str)\"signature_verification_policy\"    : (uint)\n    (str, opt)\"digest\"                      : (byte str)\n    (str, opt)\"digest_algorithm\"            : (int)\n    (str, opt)\"signature_check\"             : (uint)\n    (str, opt)\"sequence_number\"             : (uint)\n    (str, opt)\"semantic_version\"            : [0*5 int]\n}\n```\n\n----------------------------------------\n\nTITLE: Timer Management Implementation in C++\nDESCRIPTION: Implements timer control functions for starting and canceling system timers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nvoid AppTask::CancelTimer()\n{\n  k_timer_stop(&sFunctionTimer);\n}\n\nvoid AppTask::StartTimer(uint32_t timeoutInMs)\n{\n  k_timer_start(&sFunctionTimer, K_MSEC(timeoutInMs), K_NO_WAIT);\n}\n```\n\n----------------------------------------\n\nTITLE: Running the HID Configurator Script\nDESCRIPTION: This snippet shows how to execute the HID configurator script for various tasks, such as fetching help or listing devices. Parameters like DEVICE and COMMAND_NAME are used for performing specific actions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npython3 configurator_cli.py -h\n```\n\nLANGUAGE: Python\nCODE:\n```\npython3 configurator_cli.py\n```\n\nLANGUAGE: Python\nCODE:\n```\npython3 configurator_cli.py DEVICE COMMAND_NAME ...\n```\n\n----------------------------------------\n\nTITLE: Installing SEGGER J-Link with USB Drivers on Windows\nDESCRIPTION: Commands to install SEGGER J-Link v7.94i with USB drivers on Windows using either Command Prompt or PowerShell. The -InstUSBDriver=1 parameter ensures USB drivers are installed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7_99-cs2.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nJLink_Windows_V794i_x86_64.exe -InstUSBDriver=1\n```\n\nLANGUAGE: bash\nCODE:\n```\n.\\JLink_Windows_V794i_x86_64.exe -InstUSBDriver=1\n```\n\n----------------------------------------\n\nTITLE: Conditional Zephyr Library Configuration\nDESCRIPTION: This CMake snippet conditionally configures a Zephyr library named \"zephyr_library\" if both CONFIG_BOOT_IMAGE_ACCESS_HOOKS and CONFIG_BOOT_IMAGE_ACCESS_HOOK_NRF5340 Kconfig options are enabled. It includes the source file \"nrf53_hooks.c\" and links the library to MCUBOOT_BOOTUTIL.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/mcuboot/hooks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_BOOT_IMAGE_ACCESS_HOOKS)\n  if(CONFIG_BOOT_IMAGE_ACCESS_HOOK_NRF5340)\n    zephyr_library()\n    zephyr_library_sources(nrf53_hooks.c)\n    zephyr_library_link_libraries(MCUBOOT_BOOTUTIL)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Random Hardware Unique Key Project with TFM Support\nDESCRIPTION: This CMake snippet sets up the project configuration, including minimum CMake version, Zephyr package requirement, and source file inclusion. It conditionally includes TFM-specific source files based on the CONFIG_BUILD_WITH_TFM variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/keys/hw_unique_key/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(random_hw_unique_key)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\nif (DEFINED CONFIG_BUILD_WITH_TFM)\n  target_sources(app PRIVATE src/derive_key_tfm.c)\nelse ()\n  target_sources(app PRIVATE src/derive_key.c)\nendif()\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Scheduling Neighborhood Cell Measurement in C\nDESCRIPTION: Schedules a neighborhood cell measurement using the lwm2m_ncell_schedule_measurement function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_location_assistance.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nlwm2m_ncell_schedule_measurement();\n```\n\n----------------------------------------\n\nTITLE: Enable MCUboot Overwrite Only Mode\nDESCRIPTION: This Kconfig option configures MCUboot to only overwrite the current firmware image during an update, disabling fallback recovery. Enabling downgrade protection is recommended when this option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_9\n\nLANGUAGE: Kconfig\nCODE:\n```\n:kconfig:option:`SB_CONFIG_MCUBOOT_MODE_OVERWRITE_ONLY` to ``y``\n```\n\n----------------------------------------\n\nTITLE: Defining Firmware Version in VERSION File - Console\nDESCRIPTION: This snippet demonstrates how to define firmware version details in a file named VERSION, enabling version control for Matter products. At least one version variable must be assigned a value; otherwise, it will cause an error.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/versioning.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nVERSION_MAJOR = \nVERSION_MINOR = \nPATCHLEVEL = \nVERSION_TWEAK = \nEXTRAVERSION =\n```\n\nLANGUAGE: console\nCODE:\n```\nVERSION_MAJOR = 2\nVERSION_MINOR = 5\nPATCHLEVEL = 99\nVERSION_TWEAK = 0\nEXTRAVERSION = dev\n```\n\n----------------------------------------\n\nTITLE: Defining Bluetooth GATT Service for QoS\nDESCRIPTION: Uses BT_GATT_SERVICE_DEFINE macro to define a custom GATT Service for QoS data. The service UUID is defined in qos.c and integrates with the SoftDevice Link Layer to provide QoS information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/qos.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nBT_GATT_SERVICE_DEFINE\n```\n\n----------------------------------------\n\nTITLE: Building for RX prioritized profile\nDESCRIPTION: This command builds the throughput sample for the nRF7002 DK with the RX prioritized profile for Station mode, utilizing the `overlay-rx-prio.conf` configuration file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DEXTRA_CONF_FILE=overlay-rx-prio.conf\n```\n\n----------------------------------------\n\nTITLE: Glob Application Source Files\nDESCRIPTION: Generates a list of all C source files in the src/ directory. This allows dynamically including all source files for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tnep_poller/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Vendor and Class Names\nDESCRIPTION: Sysbuild Kconfig options for customizing vendor and class identifiers in the SUIT manifest configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_customize_qsg.rst#2025-04-21_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nSB_CONFIG_SUIT_MPI_ROOT_VENDOR_NAME=\"ACME Corp\"\nSB_CONFIG_SUIT_MPI_ROOT_CLASS_NAME=\"Light bulb root\"\nSB_CONFIG_SUIT_MPI_APP_LOCAL_1_VENDOR_NAME=\"ACME Corp\"\nSB_CONFIG_SUIT_MPI_APP_LOCAL_1_CLASS_NAME=\"Light bulb\"\n```\n\n----------------------------------------\n\nTITLE: Defining Launch App Message Parameters in C\nDESCRIPTION: Demonstrates how to define the required Universal Link string, Android package name string and create a buffer for the NFC message.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/launchapp.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic const uint8_t universal_link[] = \"https://developer.nordicsemi.com\"; \nstatic const uint8_t android_package_name[] = \"no.nordicsemi.android.nrfconnect\";\n\nstatic uint8_t ndef_msg_buf[256]; /* Buffer for NDEF message */\n```\n\n----------------------------------------\n\nTITLE: Adding Core Bluetooth Content Control Source Files in CMake\nDESCRIPTION: Adds the main Bluetooth content control source file to the application build regardless of configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_content_control/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/bt_content_ctrl.c)\n```\n\n----------------------------------------\n\nTITLE: HSL to RGB Conversion Function\nDESCRIPTION: This snippet refers to the `bt_mesh_light_hsl_to_rgb` function, which provides an easy conversion between HSL and RGB color spaces. The function is used to translate HSL values to RGB values for controlling RGB LED hardware in light fixtures. The conversion is theoretical and might require calibration in the hardware driver to account for non-linear responses of the light emitting hardware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_hsl.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n\".. c:func:`bt_mesh_light_hsl_to_rgb`\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally adding source files\nDESCRIPTION: These snippets conditionally include `src/ble.c` and `src/low_power.c` as source files to the `app` target based on the `CONFIG_CLI_SAMPLE_MULTIPROTOCOL` and `CONFIG_CLI_SAMPLE_LOW_POWER` configuration options respectively. These files are included only if the corresponding configuration options are enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_CLI_SAMPLE_MULTIPROTOCOL app PRIVATE src/ble.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_CLI_SAMPLE_LOW_POWER app PRIVATE src/low_power.c)\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Host Name at Runtime - C\nDESCRIPTION: Demonstrates how to set the AWS IoT host name dynamically at runtime within the aws_iot_config structure that is passed to the aws_iot_connect function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_18\n\nLANGUAGE: c\nCODE:\n```\n// Example code to set host_name in aws_iot_config structure before calling aws_iot_connect\n\n```\n\n----------------------------------------\n\nTITLE: HTTPS PUT request (TLS with server and client auth, Cellular)\nDESCRIPTION: Sends an HTTPS PUT request to update the state of LED 1 using TLS with both server and client authentication for cellular networks. It includes `--verify`, `--cert`, and `--cert-key` flags to specify the server certificate, client certificate, and client key respectively.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n\"https PUT https://<ip>:443/led/1 --raw=\\\"1\\\" --verify server_certificate.pem --cert client.crt --cert-key client.key\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Access for Manufacturer Property Server Property (With Acknowledgment)\nDESCRIPTION: Configures access permissions for a property on the Manufacturer Property Server and waits for verification, critical for scenarios demanding confirmation of access level changes. Needs 'ID' and 'Access'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_prop_cli.rst#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmesh models prop mfr-prop-set <ID> <Access>\n```\n\n----------------------------------------\n\nTITLE: Changing Sensor Sample Period in C\nDESCRIPTION: This code snippet demonstrates how to change the sampling period of a sensor (in this case, an accelerometer) to 400 milliseconds using the set_sensor_period_event.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/sensor_manager.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#include <caf/events/sensor_event.h>\n\nstruct set_sensor_period_event *event = new_set_sensor_period_event();\nevent->sampling_period = 400;\nevent->descr = \"accel_sim_xyz\";\nAPP_EVENT_SUBMIT(event);\n```\n\n----------------------------------------\n\nTITLE: Custom AT Command Implementation Structure\nDESCRIPTION: Required function implementations for custom AT commands including callback, initialization, and cleanup functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_extending.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nAT_CMD_CUSTOM callback\n*_init()    // Setup function implementation\n*_uninit()  // Teardown function implementation\n```\n\n----------------------------------------\n\nTITLE: Terminal Output Example for Chat Messages\nDESCRIPTION: Example terminal output showing different types of chat messages including private messages, broadcast messages, and presence notifications as they would appear when using the chat application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/chat/sample_description.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<0x0002> is now available\n<0x0002>: Hi there!\n<you>: Hello, 0x0002!\n<you> are now away\n<you>: *0x0004* See you!\n<0x0004>: *you* Bye!\n<0x0004> received the message\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Test Event Trigger in Matter (C++)\nDESCRIPTION: This snippet demonstrates how to register a new test event trigger with a specific trigger ID, mask, and callback function. It creates an EventTrigger object, assigns the trigger ID, mask, and callback, and then uses the RegisterTestEventTrigger method to register the event.  It also includes an important check for potential memory allocation failures.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/test_event_triggers.rst#2025-04-21_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n/* Create a new event */\nNrf::Matter::TestEventTrigger::EventTrigger myEventTrigger;\n\n/* Assign all fields */\nuint64_t myTriggerID = /* Set the trigger ID */\nmyEventTrigger.Mask = /* Fill the value mask filed */;\nmyEventTrigger.Callback = MyFunctionCallback;\n\n/* Register the new event */\nCHIP_ERROR err = Nrf::Matter::TestEventTrigger::Instance().RegisterTestEventTrigger(myTriggerID, myEventTrigger);\n\n/* Remember to check the CHIP_ERROR return code */\n```\n\n----------------------------------------\n\nTITLE: Validating MCUboot Firmware Update\nDESCRIPTION: Executes the mcuboot command on a terminal to validate if the firmware of the nRF52840 SoC has been successfully updated to version 1.1.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota_external_mcu.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v3.3.99-ncs1-2938-gc7094146b5b4 ***\nI: Starting bootloader\nI: Primary image: magic=good, swap_type=0x2, copy_done=0x1, image_ok=0x1\nI: Secondary image: magic=good, swap_type=0x2, copy_done=0x3, image_ok=0x3\nI: Boot source: none\nI: Swap type: test\nI: Starting swap using move algorithm.\nI: Bootloader chainload address offset: 0xc000\n: Jumping to the first image slot\n\n<inf> board_control: vcom0_pins_routing is ENABLED\n<inf> board_control: vcom2_pins_routing is ENABLED\n<inf> board_control: led1_pin_routing is ENABLED\n<inf> board_control: led2_pin_routing is ENABLED\n<inf> board_control: led3_pin_routing is ENABLED\n<inf> board_control: led4_pin_routing is ENABLED\n<inf> board_control: switch1_pin_routing is ENABLED\n<inf> board_control: switch2_pin_routing is ENABLED\n<inf> board_control: button1_pin_routing is ENABLED\n<inf> board_control: button2_pin_routing is ENABLED\n<inf> board_control: nrf_interface_pins_0_2_routing is disabled\n<inf> board_control: nrf_interface_pins_3_5_routing is disabled\n<inf> board_control: nrf_interface_pins_6_8_routing is disabled\n<inf> board_control: nrf_interface_pin_9_routing is ENABLED\n<inf> board_control: io_expander_pins_routing is disabled\n<inf> board_control: external_flash_pins_routing is ENABLED\n<inf> board_control: Board configured.\n*** Booting Zephyr OS build v3.3.99-ncs1-2938-gc7094146b5b4 ***\n<inf> app_smp_svr: Booting image: build time: Sep  4 2023 10:38:09\n<inf> app_smp_svr: Image Version 1.1.0-0\n<inf> app_smp_svr: Image is not confirmed OK\n<inf> app_smp_svr: Marked image as OK\nuart:~$ mcuboot\nswap type: none\nconfirmed: 1\n\nprimary area (2):\n  version: 1.1.0+0\n  image size: 70136\n  magic: good\n  swap type: test\n  copy done: set\n  image ok: set\n\nsecondary area (5):\n  version: 1.0.0+0\n  image size: 70136\n  magic: unset\n  swap type: none\n  copy done: unset\n  image ok: unset\nuart:~$\n\n```\n\n----------------------------------------\n\nTITLE: Configuring west build with additional CMake options\nDESCRIPTION: Example of how to configure the west build command to use additional options by adding them after -- at the end of the west config build.cmake-args command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/kconfig/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwest config build.cmake-args -- -DOVERLAY_CONFIG=some.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring FEM Node in Devicetree for SKY66112-11\nDESCRIPTION: This snippet shows how to add a devicetree node for the SKY66112-11 front-end module. It specifies the compatible property and GPIO pins for CTX and CRX signals. The node can be customized with the appropriate GPIO port and pin numbers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_simple_gpio.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n   nrf_radio_fem: name_of_fem_node {\n      compatible = \"skyworks,sky66112-11\", \"generic-fem-two-ctrl-pins\";\n      ctx-gpios = <&gpio0 13 GPIO_ACTIVE_HIGH>;\n      crx-gpios = <&gpio0 14 GPIO_ACTIVE_HIGH>;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Matter Event Handler Declaration in C++\nDESCRIPTION: Example of updating the event handler declaration in the event_types.h file for Matter applications using the common directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#pragma once\n\nstruct AppEvent; /* needs to be implemented in the application code */\nusing EventHandler = void (*)(const AppEvent &);\n```\n\n----------------------------------------\n\nTITLE: Enabling Matter Shell Library\nDESCRIPTION: This snippet describes how to enable the Matter shell library using the `CONFIG_CHIP_LIB_SHELL` Kconfig option. Enabling this option allows using Matter shell commands for debugging and testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_15\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_LIB_SHELL`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DM Timer in Devicetree\nDESCRIPTION: Example devicetree overlay for configuring the Distance Measurement module to use TIMER2 peripheral, which is required for the module's operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/dm.rst#2025-04-21_snippet_0\n\nLANGUAGE: DTS\nCODE:\n```\n/ {\n        chosen {\n                ncs,dm-timer = &timer2;\n        };\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing TNEP Poller in C\nDESCRIPTION: Initializes the TNEP poller library by calling nfc_tnep_poller_init with the TX buffer and callback structure. This must be performed according to tag type requirements to ensure proper tag discovery.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/poller.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nnfc_tnep_poller_init(tx_buffer, &callbacks);\n```\n\n----------------------------------------\n\nTITLE: Modem and LwM2M Default Configuration Settings\nDESCRIPTION: This snippet describes the default modem and LwM2M configuration settings applied by the sample, which include connection protocols, security settings, and device management server configurations. It outlines how these settings aid in the effective operation of the LwM2M sample application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/sample_description.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nDefault LwM2M configuration:\n\n* Protocol version: 1.0\n* Binding mode: Queue\n* Device Management server: Leshan Demo server\n* Security: Enabled with PSK, DTLS Connection Identifier, and DTLS session caching\n* Registration life time: 12 hours\n* Coap ACK initial timeout: 4 seconds\n* Enable LwM2M tickless mode power optimization\n* LwM2M shell\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nDefault modem configurations:\n\n* Network Mode: LTE-M with GNSS.\n* PSM: Enabled TAU 12 hours, RAT 30 seconds\n* Paging window: LTE 1.28 seconds and NB-IoT 2.56 seconds\n* eDRX: Enabled, with request of 5.12 seconds on LTE and 20.48 seconds on NB-IoT.\n* TAU pre-warning enabled, notification triggers registration update and TAU will be sent with the update which decreases power consumption.\n```\n\n----------------------------------------\n\nTITLE: Triggering CO Alarm via General Diagnostics Command\nDESCRIPTION: Attempts to trigger a CO alarm with lower priority than the smoke alarm. Requires a test event enable key and node ID. Output is non-visible since CO alarm does not override an active smoke alarm.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/smoke_co_alarm/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ngeneraldiagnostics test-event-trigger hex:<test_event_enable_key> 0x005c00000000009d <node_id> 0\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Linux\nDESCRIPTION: Activates the created Python virtual environment on Linux.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/ncs/.venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Library Sources for Azure SDK\nDESCRIPTION: This CMake command specifies the source files to be included in the Zephyr library. It lists all the C source files from the Azure SDK's core and IoT libraries that are required for the Azure IoT Hub client functionality.  This ensures that all necessary components of the Azure SDK are compiled and linked into the Zephyr library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/azure-sdk-for-c/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(\n\t# Azure SDK for C - CORE lib\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_context.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_json_reader.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_json_token.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_json_writer.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_span.c\n\n\t# Azure SDK for C - IoT lib\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_common.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_c2d.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_commands.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_methods.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_properties.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_telemetry.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_twin.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_provisioning_client.c\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr SDK Package\nDESCRIPTION: Locates the Zephyr SDK package using environment variable hints. This is crucial for setting up the build environment and accessing Zephyr's build tools and configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tnep_tag/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Applying the Firmware Image\nDESCRIPTION: This command forces the targeted nodes to apply the newly transferred firmware image according to the specified update policy.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfd apply\n```\n\n----------------------------------------\n\nTITLE: Setting Device Type for Amazon FFS\nDESCRIPTION: This snippet explains setting the device type appropriate for Amazon Frustration-Free Setup using the `CONFIG_CHIP_DEVICE_TYPE` Kconfig option. The value must comply with the Matter Device Type Identifier.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_24\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_DEVICE_TYPE`\"\n```\n\n----------------------------------------\n\nTITLE: Conditional and Core Library Linkage in Zephyr (CMake)\nDESCRIPTION: This code snippet ensures that various libraries are linked to the Zephyr build system. It conditionally links specific libraries based on configuration flags such as 'CONFIG_SUIT_PROCESSOR' and 'CONFIG_SUIT_STREAM_IPC_PROVIDER'. Core library interfaces like 'suit_utils' and 'suit_memory_layout_interface' are linked unconditionally. Dependencies include having these configuration flags available and correctly set in the build environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/orchestrator_app/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_PROCESSOR suit)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STREAM_IPC_PROVIDER suit_stream_sources_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_CACHE_RW suit_cache_interface)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_memory_layout_interface)\nzephyr_library_link_libraries(suit_envelope_info)\nzephyr_library_link_libraries(suit_platform_err)\n```\n\n----------------------------------------\n\nTITLE: Triggering Location Request in Asset Tracker v2 (C)\nDESCRIPTION: The Asset Tracker v2 location module triggers a location request using GNSS as first priority and cellular as second priority if enabled in the configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.2.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nlocation_request()\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package for Nordic SDK Project\nDESCRIPTION: Locates the Zephyr RTOS package using environment variables, which is essential for building Nordic Semiconductor embedded projects\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/shell/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Event Types with nRF Profiler in C\nDESCRIPTION: This code snippet demonstrates how to register custom event types with the nRF Profiler using the `nrf_profiler_register_event_type` function. It defines the data names and types associated with the event, which will be used for profiling.  The registered event IDs are stored for later use when logging event occurrences.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/nrf_profiler.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic const char * const data_names[] = {\"value1\", \"value2\", \"value3\", \"value4\", \"string\"};\nstatic const enum nrf_profiler_arg data_types[] = {NRF_PROFILER_ARG_U32, NRF_PROFILER_ARG_S32,\n            NRF_PROFILER_ARG_S16, NRF_PROFILER_ARG_U8,\n            NRF_PROFILER_ARG_STRING};\n\nno_data_event_id = nrf_profiler_register_event_type(\"no_data_event\", NULL,\n            NULL, 0);\ndata_event_id = nrf_profiler_register_event_type(\"data_event\", data_names,\n            data_types, 5);\n```\n\n----------------------------------------\n\nTITLE: Transmitting packets with ltx command in Shell\nDESCRIPTION: Initiates burst transmission of packets with control over packet count and delay. Set number to 0 for infinite transmission.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncustom ltx *10* *1000*\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with West Build Command\nDESCRIPTION: Command template for running unit tests using west build command with a specified board target. The -t run parameter tells west to run the default test target after building.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/test_framework/running_unit_tests.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -b *board_target* -t run\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Firmware Upgrade over Matter - Console\nDESCRIPTION: This snippet illustrates adding necessary Kconfig options to the prj.conf file for configuring DFU over Matter. These include CONFIG_CHIP_DEVICE_SOFTWARE_VERSION, CONFIG_CHIP_DEVICE_SOFTWARE_VERSION_STRING, and CONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/versioning.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nCONFIG_CHIP_DEVICE_SOFTWARE_VERSION=33907456\nCONFIG_CHIP_DEVICE_SOFTWARE_VERSION_STRING=\"2.5.99+0\"\nCONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION=\"2.5.99+0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom LEDs in Devicetree for DK Library\nDESCRIPTION: Example devicetree configuration for defining LEDs for use with the DK Buttons and LEDs library. Shows how to configure up to four LEDs with different GPIO configurations and active states (high or low).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/dk_buttons_and_leds.rst#2025-04-21_snippet_1\n\nLANGUAGE: DTS\nCODE:\n```\n/ {\n        leds {\n                compatible = \"gpio-leds\";\n                led_0 {\n                        /* LED 0 on P0.13, LED on when pin is high */\n                        gpios = < &gpio0 13 GPIO_ACTIVE_HIGH >;\n                        label = \"LED 0\";\n                };\n                led_1 {\n                        /* LED 1 on P0.14, LED on when pin is low */\n                        gpios = < &gpio0 14 GPIO_ACTIVE_LOW >;\n                        label = \"LED 1\";\n                };\n                led_2 {\n                        /* LED 2 on P1.0, on when low */\n                        gpios = < &gpio1 0 GPIO_ACTIVE_LOW >;\n                        label = \"LED 2\";\n                };\n                led_3 {\n                        /* LED 3 on P1.1, on when high */\n                        gpios = < &gpio1 1 GPIO_ACTIVE_HIGH >;\n                        label = \"LED 3\";\n                };\n     };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Bluetooth Mesh DTT Client Commands\nDESCRIPTION: This snippet provides shell commands for interacting with the Generic Default Transition Time (DTT) Client model in a Bluetooth Mesh environment. These commands enable users to set or get the transition time of a server. Key parameters include 'ElemIdx' for selecting the model instance and 'TransTime' for setting the transition time in milliseconds. Ensure 'CONFIG_BT_MESH_SHELL' and 'CONFIG_BT_MESH_SHELL_DTT_CLI' are enabled to use these commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_dtt_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dtt instance get-all\n\tPrint all instances of the Generic Default Transition Time Client model on the device.\n\nmesh models dtt instance set <ElemIdx>\n\tSelect the Generic Default Transition Time Client model instantiated on the specified element ID.\n\tThis instance will be used in message sending.\n\tIf no model instance is selected, the first model instance found on the device will be used by default.\n\n\t* ``ElemIdx`` - Element index where the model instance is found.\n\nmesh models dtt get\n\tGet the Default Transition Time of the bound server.\n\nmesh models dtt set <TransTime(ms)>\n\tSet the Default Transition Time of the server and wait for a response.\n\n\t* ``TransTime`` - Default transition time in milliseconds.\n\nmesh models dtt set-unack <TransTime(ms)>\n\tSet the Default Transition Time of the server without requesting a response.\n\n\t* ``TransTime`` - Default transition time in milliseconds.\n```\n\n----------------------------------------\n\nTITLE: Using Zephyr Network Interface Functions with nRF91 Series Modem\nDESCRIPTION: The LTE network interface can be controlled using standard Zephyr network interface functions such as net_if_up, conn_mgr_if_connect, and net_if_down. This driver enables treating the nRF91 cellular modem as a standard Zephyr network interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_lte_net_if.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nnet_if_up(), conn_mgr_if_connect(), net_if_down()\n```\n\n----------------------------------------\n\nTITLE: HTTP Connection Command Syntax\nDESCRIPTION: AT command syntax for connecting to and disconnecting from an HTTP server. Includes parameters for host, port, security tag, peer verification and hostname verification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/HTTPC_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT\nCODE:\n```\nAT#XHTTPCCON=<op>[,<host>,<port>[,<sec_tag>[,peer_verify[,hostname_verify]]]]\n```\n\n----------------------------------------\n\nTITLE: Configuring NRF WiFi Raw TX Packet Project in CMake\nDESCRIPTION: Sets up the build system for the nrf_wifi_raw_tx_packet project. It finds the Zephyr package, configures include directories for networking components, and defines source files with conditional inclusion based on the CONFIG_RAW_TX_PKT_SAMPLE_CONNECTION_MODE flag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/raw_tx_packet/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_raw_tx_packet)\n\ntarget_include_directories(app PUBLIC ${ZEPHYR_BASE}/subsys/net/ip)\n\ntarget_sources_ifdef(CONFIG_RAW_TX_PKT_SAMPLE_CONNECTION_MODE\n\tapp\n\tPRIVATE\n\tsrc/wifi_connection.c)\n\ntarget_sources(app PRIVATE\n\tsrc/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Bluetooth LE Dependencies for Multiprotocol Extension\nDESCRIPTION: Header files and libraries required for Bluetooth Low Energy functionality in the optional multiprotocol extension\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/coap_client/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <bluetooth/bluetooth.h>\n#include <bluetooth/gatt.h>\n#include <bluetooth/hci.h>\n#include <bluetooth/uuid.h>\n```\n\n----------------------------------------\n\nTITLE: Radio Core Channel Assignments\nDESCRIPTION: Channel ID assignment for BBPROC when owned by the Radio core\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_architecture_ipc.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nBBPROC             18\n```\n\n----------------------------------------\n\nTITLE: nRF Util Multi-Image Programming Commands\nDESCRIPTION: Commands to program multiple image builds for network and application cores with verification\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/building_nrf53.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --firmware merged_CPUNET.hex --options verify=VERIFY_READ,chip_erase_mode=ERASE_CTRL_AP\nnrfutil device program --firmware merged.hex --options verify=VERIFY_READ,chip_erase_mode=ERASE_CTRL_AP\n```\n\n----------------------------------------\n\nTITLE: Building for Fixed Packet Transmission in Connected Station Mode\nDESCRIPTION: Command for building the sample for fixed number of raw 802.11 packet transmission in connected Station mode\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/raw_tx_packet/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_RAW_TX_PKT_SAMPLE_CONNECTION_MODE=y -DCONFIG_RAW_TX_PKT_SAMPLE_TX_MODE_FIXED=y -DCONFIG_RAW_TX_PKT_SAMPLE_FIXED_NUM_PACKETS=<number of packets to be sent>\n```\n\n----------------------------------------\n\nTITLE: Board-specific Sysbuild Configuration Using Kconfig.sysbuild\nDESCRIPTION: Example of conditional Kconfig configuration for the nRF5340 DK application core that enables MCUboot with RSA keys and overwrite-only mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_sysbuild.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nif BOARD_NRF5340DK_NRF5340_CPUAPP\n\nchoice BOOTLOADER\n        default BOOTLOADER_MCUBOOT\nendchoice\n\nif BOOTLOADER_MCUBOOT\n\nchoice MCUBOOT_MODE\n        default MCUBOOT_MODE_OVERWRITE_ONLY\nendchoice\n\nchoice BOOT_SIGNATURE_TYPE\n        default BOOT_SIGNATURE_TYPE_RSA\nendchoice\n\nendif # BOOTLOADER_MCUBOOT\n\nendif # BOARD_NRF5340DK_NRF5340_CPUAPP\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote HCI Project Build in CMake\nDESCRIPTION: Configures the build process for a remote HCI project, setting up version requirements, dependencies, include paths, and source files. It includes the Zephyr package, sets up include directories for RPC and transport modules, and specifies the main source files for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/direct_test_mode/remote_hci/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(remote_hci)\n\ntarget_include_directories(app PRIVATE ./../rpc)\ntarget_include_directories(app PRIVATE ./../src/transport)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n  ../src/transport/hci_uart.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Battery Measurement Implementation Detail\nDESCRIPTION: Describes the core functionality using k_work_delayable for periodic voltage measurements with ADC calibration. The system performs asynchronous voltage measurements and automatically calibrates during first readout.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/battery_meas.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct k_work_delayable {\n    /* Starts async voltage measurement */\n    /* Resubmits itself periodically */\n    /* Reads measured voltage on next processing */\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Entropy Settings - C\nDESCRIPTION: This C code snippet outlines the necessary definitions for entropy settings needed when using custom Mbed TLS headers, ensuring compliance with security requirements when CryptoCell is in use.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/mbed_tls_header.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define MBEDTLS_ENTROPY_MAX_GATHER 144\n#define MBEDTLS_ENTROPY_FORCE_SHA256\n#define MBEDTLS_ENTROPY_MAX_SOURCES 1\n```\n\n----------------------------------------\n\nTITLE: Enabling Backbone Router Functionality\nDESCRIPTION: Enables the Thread Backbone Router (BBR) functionality on the leader device, which provides connectivity between Thread and non-Thread networks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot bbr enable\nDone\n```\n\n----------------------------------------\n\nTITLE: Configuring Click Detector in C\nDESCRIPTION: This code snippet demonstrates how to configure the Click Detector module by defining an array of click_detector_config structures. It specifies the key ID and whether button events should be consumed for each configured key.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/click_detector.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <caf/key_id.h>\n#include <caf/click_detector.h>\n\nstatic const struct click_detector_config click_detector_config[] = {\n        {\n                .key_id = KEY_ID(0x00, 0x01),\n                .consume_button_event = false,\n        },\n};\n```\n\n----------------------------------------\n\nTITLE: MQTT Publish with QoS 1 on nRF9160 SLM\nDESCRIPTION: Example of publishing a message with Quality of Service 1 (acknowledgment required) to an MQTT topic. The response includes event type 3 (PUBACK) with result 0 indicating successful acknowledgment of the message.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/MQTT_AT_commands.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nAT#XMQTTPUB=\"nrf91/slm/mqtt/topic1\",\"Test message with QoS 1\",1,0\nOK\n#XMQTTEVT: 3,0\n```\n\n----------------------------------------\n\nTITLE: Initializing Modem Library in C\nDESCRIPTION: Function to initialize the Modem library. It automatically passes the size and address of all shared memory regions to nrf_modem_init.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_wrapper.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nnrf_modem_lib_init()\n```\n\n----------------------------------------\n\nTITLE: Implementing Bluetooth Mesh Sensor Settings in C\nDESCRIPTION: Complete example showing how to add a setting to a sensor with get/set callbacks and sensor configuration. The code demonstrates threshold management for a motion sensor including mandatory get callback and optional set callback implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/sensor.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nstatic void motion_threshold_get(struct bt_mesh_sensor_srv *srv,\n                                    struct bt_mesh_sensor *sensor,\n                                    const struct bt_mesh_sensor_setting *setting,\n                                    struct bt_mesh_msg_ctx *ctx,\n                                    struct bt_mesh_sensor_value *rsp)\n{\n     /** Get the current threshold in an application defined way and\n      *  store it in rsp.\n      */\n     get_threshold(rsp);\n}\n\nstatic int motion_threshold_set(struct bt_mesh_sensor_srv *srv,\n                                   struct bt_mesh_sensor *sensor,\n                                   const struct bt_mesh_sensor_setting *setting,\n                                   struct bt_mesh_msg_ctx *ctx,\n                                   const struct bt_mesh_sensor_value *value)\n{\n     /** Store incoming threshold in application-defined way.\n      *  Return error code to reject set.\n      */\n     return set_threshold(value);\n}\n\nstatic const struct bt_mesh_sensor_setting settings[] = {\n    {\n        .type = &bt_mesh_sensor_motion_threshold,\n        .get = motion_threshold_get,\n        .set = motion_threshold_set,\n    }\n};\n\nstatic struct bt_mesh_sensor motion_sensor = {\n    .type = &bt_mesh_sensor_motion_sensed,\n    .get = get_motion,\n    .settings = {\n        .list = settings,\n        .count = ARRAY_SIZE(settings)\n     }\n};\n```\n\n----------------------------------------\n\nTITLE: Executing FOTA Update to Revert Modem Firmware (Python)\nDESCRIPTION: Command to update the modem firmware back to the original released version using the fota.py script.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n./scripts/fota.py -id urn:imei:359746166785274 update 1 mfw_nrf91x1_update_from_2.x.x-FOTA-TEST_to_2.x.x.bin\n```\n\n----------------------------------------\n\nTITLE: Setting the Generic Level state value without response\nDESCRIPTION: Sets the Generic Level state value without waiting for a response, with optional transition time and delay parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_lvl_cli.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmesh models lvl set-unack <Lvl> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: Building Combined Wi-Fi and Radio Test for nRF7002DK\nDESCRIPTION: Shell command for building a combined configuration that includes both Wi-Fi Radio test on the application core and Radio test on the network core. This generates merged HEX files for both APP and NET cores.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_build_instructions.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ west build -p -b nrf7002dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Configuration File Preprocessing in NRF Connect SDK - YAML\nDESCRIPTION: In the NRF Connect SDK, pm.yml files are preprocessed to resolve symbols from Kconfig and devicetree. The included headers provide application configurations and hardware properties, used to configure sizes and placements of partitions. This example demonstrates preprocessing with Kconfig's autoconf.h and devicetree_legacy_unfixed.h.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n#include <zephyr/autoconf.h>\n#include <devicetree_legacy_unfixed.h>\n\nb0:\n   size: CONFIG_PM_PARTITION_SIZE_B0_IMAGE\n   placement:\n     after: start\n\nb0_container:\n   span: [b0, provision]\n\ns0_pad:\n   share_size: mcuboot_pad\n   placement:\n     after: b0\n     align: {start: CONFIG_FPROTECT_BLOCK_SIZE}\n\napp_image:\n   span: [tfm, app]\n\ns0_image:\n   # S0 spans over the image booted by B0\n   span: {one_of: [mcuboot, app_image]}\n\ns0:\n   # Phony container to allow hex overriding\n   span: [s0_pad, s0_image]\n\ns1_pad:\n   # This partition will only exist if mcuboot_pad exists.\n   share_size: mcuboot_pad\n   placement:\n     after: s0\n     align: {start: DT_FLASH_ERASE_BLOCK_SIZE}\n\ns1_image:\n   share_size: {one_of: [mcuboot, s0_image]}\n   placement:\n     after: [s1_pad, s0]\n     align: {end: CONFIG_FPROTECT_BLOCK_SIZE}\n\ns1:\n   # Partition which contains the whole S1 partition.\n   span: [s1_pad, s1_image]\n\nprovision:\n   size: CONFIG_PM_PARTITION_SIZE_PROVISION\n#if defined(CONFIG_SOC_SERIES_NRF91X) || defined(CONFIG_SOC_NRF5340_CPUAPP)\n   region: otp\n#else\n   placement:\n     after: b0\n     align: {start: DT_FLASH_ERASE_BLOCK_SIZE}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Matter Application Initialization Example\nDESCRIPTION: This code snippet demonstrates how to use the nRF Connect Matter APIs to initialize a Matter application.  It includes the `matter_init.h` header, declares a custom Matter event handler, and defines a function to handle specific device events, such as commissioning completion. It shows how to structure an application that utilizes the Matter stack.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/matter_api.rst#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include \"app/matter_init.h\"\n\n   #include <zephyr/logging/log.h>\n\n   LOG_MODULE_DECLARE(app, CONFIG_CHIP_APP_LOG_LEVEL);\n\n   static void CustomMatterEventHandler(const ChipDeviceEvent *event, intptr_t /* unused */)\n   {\n         switch (event->Type) {\n         case DeviceEventType::kCommissioningComplete:\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Options for Zephyr Module Directories\nDESCRIPTION: This snippet sets TFM CMake options for the Zephyr nRF module directory and the Zephyr base directory. These options provide the TF-M build system with the necessary paths to Zephyr and nRF module directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS\n  -DZEPHYR_NRF_MODULE_DIR=${ZEPHYR_NRF_MODULE_DIR}\n)\n\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS\n  -DZEPHYR_BASE=${ZEPHYR_BASE}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring IPC UART Driver in Devicetree\nDESCRIPTION: This snippet demonstrates how to configure the IPC UART driver in the devicetree. It sets up an instance of the driver with a specified IPC service and endpoint name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/uart_ipc.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n\t\tuart_ipc: uart_ipc {\n\t\t\tstatus = \"okay\";\n\t\t\tcompatible = \"nordic,nrf-ipc-uart\";\n\t\t\tipc = <&ipc0>;\n\t\t\tept-name = \"remote shell\";\n\t\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Transmitting unmodulated carrier wave with lcarrier command in Shell\nDESCRIPTION: Starts transmission of unmodulated carrier with configurable pulse duration, interval, and transmission duration. Set transmission_duration to 0 for infinite transmission.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\ncustom lcarrier ``10`` ``200`` ``2000``\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread TX Power using West Command\nDESCRIPTION: Demonstrates how to build a Matter sample with a custom Thread TX power using the 'west' command line tool. It requires specifying the board target and desired TX power using CONFIG_OPENTHREAD_DEFAULT_TX_POWER. The inputs include the target board and power level, and the expected outcome is a compiled sample with adjusted TX power.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/transmission_power.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 -- -DCONFIG_OPENTHREAD_DEFAULT_TX_POWER=2\n```\n\n----------------------------------------\n\nTITLE: Resetting Presence Value in Bluetooth Mesh Model (C)\nDESCRIPTION: This code snippet implements a reset handler to ensure the model's presence value is reset upon node reset, which allows the model to behave as newly initialized. It assumes the use of persistent storage features and relies on correct configuration macros.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/chat_sample_walk_through.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstatic void model_reset(struct bt_mesh_model *model) {\n    reset_presence_value();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Nordic Firmware Update Flow Diagram in PlantUML\nDESCRIPTION: This UML activity diagram defines the decision flow for updating Nordic firmware components. It includes version compatibility checks, handling of different update sets (SET_A and SET_B), and the process of fetching, integrity checking, and processing firmware components like top, radio, and application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/img/ab_root_install.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nstart\n\n: SET_TO_UPDATE_MIRROR := SET_TO_UPDATE ;\n\nif (Uri('#top') present and valid) then (yes)\n\nif (SET_TO_UPDATE_MIRROR == SET_B) then (yes)\nif (Version(Application A) >= MIN_COMPATIBLE_APP_VERSION_FOR_NORDIC_TOP) then (yes)\nif (Version(Radio A) >= MIN_COMPATIBLE_RAD_VERSION_FOR_NORDIC_TOP) then (yes)\n: fetch('#top') ;\n: check_integrity('#top') ;\n: process('#top') ;\nstop\n\nendif\nendif\nendif\n: abort() ;\nstop\n\nelse (no)\nif (Version(Intalled Nordic Top) >= MIN_NORDIC_TOP_VERSION) then (yes)\nif (SET_TO_UPDATE_MIRROR == SET_A) then (yes)\n: CONFIRM_SET_A := JUST_INSTALLED ;\n: fetch('#radio') ;\n: check_integrity('#radio') ;\n: process('#radio') ;\n\n: fetch('#application') ;\n: check_integrity('#application') ;\n: process('#application') ;\n: BOOT_PREFERENCE := SET_A ;\nstop\nelseif (SET_TO_UPDATE_MIRROR == SET_B) then (yes)\n: CONFIRM_SET_B := JUST_INSTALLED ;\n: fetch('#radio_b') ;\n: check_integrity('#radio_b') ;\n: process('#radio_b') ;\n\n: fetch('#application_b') ;\n: check_integrity('#application_b') ;\n: process('#application_b') ;\n: BOOT_PREFERENCE := SET_B ;\nstop\nelse (no)\n: abort() ;\nstop\nendif\n\nelse (no)\n: abort() ;\nstop\nendif\n\nendif\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Deriving a Key in C\nDESCRIPTION: This C function derives a key using the hardware unique key. It is part of the API in the CC3xx platform libraries. It allows you to generate keys without storing them directly on the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/hw_unique_key.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n:c:func:`hw_unique_key_derive_key`\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Library Sources\nDESCRIPTION: This snippet declares a Zephyr library and specifies the source files that are included in the library related to SMS functionality. Required dependencies include the Zephyr RTOS framework. The key functionality includes handling SMS delivery, submission, as well as aiding in parsing and string conversions necessary for SMS operations. Inputs involve the source C files that implement the respective functionalities, and outputs are the compiled library for use in applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/sms/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(sms.c)\nzephyr_library_sources(sms_deliver.c)\nzephyr_library_sources(sms_submit.c)\nzephyr_library_sources(parser.c)\nzephyr_library_sources(string_conversion.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Encryption with Shell Command\nDESCRIPTION: Command to enable or disable encryption for a given Broadcast Isochronous Group. When enabling encryption, an optional broadcast code can be specified.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnac encrypt <0/1> <BIG index> [broadcast_code]\n```\n\n----------------------------------------\n\nTITLE: Sending Data via UDP Server using AT Command\nDESCRIPTION: This AT command sends data through the created UDP server. The response contains the number of bytes sent.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n**AT#XUDPSEND=\"UDP1/2 received\"**\n#XUDPSEND: 15\nOK\n```\n\n----------------------------------------\n\nTITLE: Enabling GNU STD Support and Matter Data Model\nDESCRIPTION: Includes the necessary CMake files to enable GNU standard support and initialize the Matter Data Model, which is required for Matter application development.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Enable GNU STD support and initialize the Matter Data Model.\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/nrfconnect/app/enable-gnu-std.cmake)\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/src/app/chip_data_model.cmake)\n```\n\n----------------------------------------\n\nTITLE: Reading RandomNumberChanged Event\nDESCRIPTION: Reads the event generated by changes to the RandomNumber attribute\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: matter-cli\nCODE:\n```\nany read-event-by-id 0x0028 0x4 1 0\n```\n\n----------------------------------------\n\nTITLE: Enabling Promiscuous Mode in C\nDESCRIPTION: Example of using the net_eth_promisc_mode API to enable or disable Promiscuous mode in the nRF Wi-Fi driver. This API is recommended over the network management API for controlling Promiscuous mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/advanced_modes/promiscuous_operation.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nnet_eth_promisc_mode(iface, enable);\n```\n\n----------------------------------------\n\nTITLE: Parsing Raw Data from NFC Type 2 Tag in C\nDESCRIPTION: This code demonstrates how to parse raw data from an NFC Type 2 Tag. It creates a Type 2 Tag descriptor structure capable of storing up to 10 TLV blocks, parses the raw tag data into this structure, and then prints out the parsed tag contents. The function handles memory limitations gracefully.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/t2t/t2t_parser.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Buffer with raw data from a Type 2 Tag. */\nuint8_t raw_tag_data[] = ..;\n\n/* Declaration of Type 2 Tag structure which\n * can contain a maximum of 10 TLV blocks.\n */\nNFC_T2T_DESC_DEF(tag_data, 10);\nstruct nfc_t2t *t2t = &NFC_T2T_DESC(tag_data);\n\nerr = nfc_t2t_parse(t2t, raw_tag_data);\nif (err) {\n\tprintk(\"Not enough memory to read the whole tag. Printing what has been read.\\n\");\n}\n\n/* Print the tag data. */\nnfc_t2t_printout(t2t);\n```\n\n----------------------------------------\n\nTITLE: Generating AWS IoT Key Pair and Certificate\nDESCRIPTION: AWS CLI command to generate a key pair and certificate for AWS IoT Core authentication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\naws iot create-keys-and-certificate --set-as-active --certificate-pem-outfile device_cert.pem --public-key-outfile pub_key.pem --private-key-outfile priv_key.pem --no-cli-pager --query certificateArn\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for CAF Modules in CMake\nDESCRIPTION: This CMake script sets up the Zephyr library for the Common Application Framework (CAF). It conditionally includes source files for various CAF modules based on their respective configuration options. The script covers modules for BLE advertising, bonding, state management, buttons, LEDs, network states, power management, sensors, and other common application features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/caf/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources_ifdef(CONFIG_CAF_BLE_ADV ble_adv.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_BLE_BOND ble_bond.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_BLE_STATE ble_state.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_BLE_STATE_PM ble_state_pm.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_BUTTONS buttons.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_BUTTONS_PM_KEEP_ALIVE buttons_pm_keep_alive.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_CLICK_DETECTOR click_detector.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_FACTORY_RESET_REQUEST factory_reset_request.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_LEDS leds.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_NET_STATE_LTE net_state_lte.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_NET_STATE_OT net_state_ot.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_POWER_MANAGER power_manager.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_SENSOR_MANAGER sensor_manager.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_SENSOR_DATA_AGGREGATOR sensor_data_aggregator.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_SETTINGS_LOADER settings_loader.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_BLE_SMP ble_smp.c)\n\nzephyr_library_sources_ifdef(CONFIG_CAF_SHELL caf_shell.c)\n\nzephyr_library_link_libraries_ifdef(CONFIG_MCUMGR mgmt_mcumgr)\n```\n\n----------------------------------------\n\nTITLE: Calculating RX Packet Memory Size for nRF70 Series\nDESCRIPTION: Formula to calculate the size of RX packet memory in the nRF70 Series device based on maximum data size and number of buffers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/stack_configuration.rst#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nCONFIG_NRF70_RX_MAX_DATA_SIZE * CONFIG_NRF70_RX_NUM_BUFS\n```\n\n----------------------------------------\n\nTITLE: Handling Different AT Command Types in C\nDESCRIPTION: Shows how to handle test, set, and read operations for a custom AT command 'MYCOMMAND', demonstrating proper response formatting.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_custom.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n/* Callback for +MYCOMMAND calls */\nAT_CMD_CUSTOM(my_command_filter, \"AT+MYCOMMAND\", my_command_callback);\n\nint my_command_callback(char *buf, size_t len, char *at_cmd);\n{\n\t/* test */\n\tif(strncmp(\"AT+MYCOMMAND=?\", at_cmd, strlen(\"AT+MYCOMMAND=?\")) == 0) {\n\t\treturn at_cmd_custom_respond(buf, len, \"+MYCOMMAND: (%d, %d)\\r\\nOK\\r\\n\", 0, 1);\n\t}\n\t/* set */\n\tif(strncmp(\"AT+MYCOMMAND=\", at_cmd, strlen(\"AT+MYCOMMAND=\")) == 0) {\n\t\treturn at_cmd_custom_respond(buf, len, \"OK\\r\\n\");\n\t}\n\t/* read */\n\tif(strncmp(\"AT+MYCOMMAND?\", at_cmd, strlen(\"AT+MYCOMMAND?\")) == 0) {\n\t\treturn at_cmd_custom_respond(buf, len, \"+CME ERROR: %d\\r\\n\", 1);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving IPUC Count in C\nDESCRIPTION: Uses the suit_get_ipuc_count SSF service to return the number of currently declared IPUCs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsuit_get_ipuc_count()\n```\n\n----------------------------------------\n\nTITLE: Configuring SLM Monitors\nDESCRIPTION: Examples of setting up SLM monitors for network status and download notifications using the SLM_MONITOR macro.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_slm.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nSLM_MONITOR(network, \"\\r\\n+CEREG:\", cereg_mon);\n\nSLM_MONITOR(download, \"\\r\\n#XDFUGET: 0,\", download_mon, MON_PAUSED);\n```\n\n----------------------------------------\n\nTITLE: Getting CMD RX antenna ID with lgetrxantenna command in Shell\nDESCRIPTION: Retrieves the antenna currently used by the CMD device for RX operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\ncustom lgetrxantenna\n```\n\n----------------------------------------\n\nTITLE: Status LED Control Implementation in C++\nDESCRIPTION: Controls system status LED based on network provisioning, connectivity state and BLE connections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nvoid AppTask::UpdateStatusLED()\n{\n  if (sIsNetworkProvisioned && sIsNetworkEnabled) {\n    sStatusLED.Set(true);\n  } else if (sHaveBLEConnections) {\n    sStatusLED.Blink(LedConsts::StatusLed::Unprovisioned::kOn_ms,\n        LedConsts::StatusLed::Unprovisioned::kOff_ms);\n  } else {\n    sStatusLED.Blink(LedConsts::StatusLed::Provisioned::kOn_ms, LedConsts::StatusLed::Provisioned::kOff_ms);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Shadow for FOTA Support\nDESCRIPTION: JSON structure for the device shadow that enables FOTA updates by specifying supported FOTA types in the serviceInfo field. This example shows a configuration supporting all available FOTA types.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud.rst#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"state\": {\n   \"reported\": {\n      \"device\": {\n         \"serviceInfo\": {\n            \"fota_v2\": [\n            \"APP\",\n            \"MODEM\",\n            \"MDM_FULL\",\n            \"BOOT\"\n            ]\n}}}}}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with Zephyr for Nordic SDK\nDESCRIPTION: Sets up the basic CMake project configuration for a Nordic SDK application, including minimum CMake version, finding Zephyr package, Git package, and defining the project name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/connectivity_bridge/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nfind_package(Git)\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: Listing Images with mcumgr\nDESCRIPTION: This command lists the currently available images on the device, showing their slots, versions, bootable status, flags, and hashes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ mcumgr -c acm0 image list\n```\n\n----------------------------------------\n\nTITLE: Setting up Source Files and Include Directories\nDESCRIPTION: Configures include directories and source files for the application. Includes Matter common source files and specific application sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/cmake/source_common.cmake)\n\ntarget_include_directories(app PRIVATE\n    src\n    ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}\n)\n\ntarget_compile_options(app PRIVATE -Wno-deprecated-declarations)\n\ntarget_sources(app PRIVATE\n    src/app_task.cpp\n    src/light_switch.cpp\n    src/main.cpp\n    src/shell_commands.cpp\n    ${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/src/binding/binding_handler.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Flash Protection Source Selection (CMake)\nDESCRIPTION: This snippet selects the appropriate flash protection source file (fprotect_*.c) based on the Kconfig options enabled in the project. It checks for hardware security features like SPU, ACL, BPROT/MPU, or RRAM and sets the `FPROTECT_SRC` variable accordingly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/fprotect/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"if (CONFIG_HAS_HW_NRF_SPU)\n  set(FPROTECT_SRC fprotect_spu.c)\nelif (CONFIG_HAS_HW_NRF_ACL)\n  set(FPROTECT_SRC fprotect_acl.c)\nelif (CONFIG_HAS_HW_NRF_BPROT OR CONFIG_HAS_HW_NRF_MPU)\n  set(FPROTECT_SRC fprotect_bprot.c)\nelif (CONFIG_SOC_SERIES_NRF54LX)\n  set(FPROTECT_SRC fprotect_rram.c)\nelse()\n  message(FATAL_ERROR \\\"No fprotect backend selected.\\\")\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Downloading a File using HTTPS with Downloader Library in C\nDESCRIPTION: This comprehensive example demonstrates how to download a file using HTTPS with the downloader library. It includes setting up the callback function, configuring the downloader and host settings, and handling the download process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/downloader.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nint err;\nint dl_res;\n\nstatic int dl_callback(const struct downloader_evt *event) {\n      switch (event->id) {\n      case DOWNLOADER_EVT_FRAGMENT:\n            printk(\"Received fragment, dataptr: %p, len %d\\n\",\n                   event->fragment.buf, event->fragment.len);\n            return 0;\n      case DOWNLOADER_EVT_ERROR:\n            printk(\"downloader error: %d\\n\", event->error);\n            dl_res = event->error;\n            return 0;\n      case DOWNLOADER_EVT_DONE:\n            printk(\"downloader done\\n\");\n            dl_res = 0;\n            return 0;\n      case DOWNLOADER_EVT_STOPPED:\n            printk(\"downloader stopped\\n\");\n            k_sem_give(&dl_sem);\n            return 0;\n      case DOWNLOADER_EVT_DEINITIALIZED:\n            printk(\"downloader deinitialized\\n\");\n            return 0;\n      }\n}\n\nchar dl_buf[2048];\nstruct downloader dl;\nstruct downloader_cfg dl_cfg = {\n      .callback = dl_callback,\n      .buf = dl_buf,\n      .buf_size,\n};\n\nint sec_tags[] = {1, 2, 3};\n\nstruct downloader_host_cfg dl_host_cfg = {\n      .sec_tag_list = sec_tags,\n      .sec_tag_count = ARRAY_SIZE(sec_tags),\n      /* This will disconnect the downloader from the server when the download is complete */\n      .keep_connection = false,\n};\n\nstruct downloader_transport_http_cfg dl_transport_http_cfg = {\n      .sock_recv_timeo = 600000,\n};\n\nerr = downloader_init(&dl, &dl_cfg);\nif (err) {\n      printk(\"downloader init failed, err %d\\n\", err);\n}\n\nerr = downloader_transport_http_set_config(&dl, &dl_transport_http_cfg);\nif (err) {\n      printk(\"failed to set http transport params failed, err %d\\n\", err);\n}\n\nerr = downloader_get(&dl, &dl_host_cfg, \"https://myserver.com/path/to/file.txt\");\nif (err) {\n      printk(\"downloader start failed, err %d\\n\", err);\n}\n\n/* Wait for download to complete */\nk_sem_take(&dl_sem, K_FOREVER);\n\nerr = downloader_deinit(&dl);\nif (err) {\n      printk(\"downloader deinit failed, err %d\\n\", err);\n}\n```\n\n----------------------------------------\n\nTITLE: LED Indication Control - Custom Command Usage\nDESCRIPTION: This command allows the CMD device to control the LED that indicates packet reception, requiring a value argument (0 for none, 1 for indication). Example usage includes activating LED indication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncustom lindication *<value>*\n```\n\n----------------------------------------\n\nTITLE: Setting Up External Project for TF-M PSA Architecture Tests\nDESCRIPTION: This snippet configures an external project for building the PSA architecture tests. It sets the source and binary directories, configures build parameters, and defines dependencies with the main TF-M project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_psa_test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(ExternalProject)\n\nif(CONFIG_DEBUG_OPTIMIZATIONS)\n  set(tfm_ns_CMAKE_BUILD_TYPE Debug)\nelse()\n  set(tfm_ns_CMAKE_BUILD_TYPE RelWithDebInfo)\nendif()\n\nExternalProject_Add(tfm_psa_arch_test_app\n    SOURCE_DIR ${TFM_TEST_REPO_PATH}/tests_psa_arch\n    BINARY_DIR ${PROJECT_BINARY_DIR}/tfm_ns\n    CONFIGURE_COMMAND\n        ${CMAKE_COMMAND}\n                -G ${CMAKE_GENERATOR}\n                -S ${TFM_TEST_REPO_PATH}/tests_psa_arch\n                -B ${PROJECT_BINARY_DIR}/tfm_ns\n                -DCONFIG_SPE_PATH=${TFM_BINARY_DIR}/api_ns\n                -DTFM_TOOLCHAIN_FILE=cmake/${TFM_TOOLCHAIN_NS_FILE}\n                -DCROSS_COMPILE=${TFM_TOOLCHAIN_PATH}/${TFM_TOOLCHAIN_PREFIX}\n                -DPSA_TOOLCHAIN_FILE=${TFM_BINARY_DIR}/api_ns/cmake/${TFM_TOOLCHAIN_NS_FILE}\n                -DQCBOR_PATH${QCBOR_PATH_TYPE}=${CONFIG_TFM_QCBOR_PATH}\n                -DCMAKE_BUILD_TYPE=${tfm_ns_CMAKE_BUILD_TYPE}\n                -DTEST_PSA_API=${TEST_PSA_API}\n                -DZEPHYR_NRF_MODULE_DIR=${ZEPHYR_NRF_MODULE_DIR}\n                -DNRF_CONFIG_CPU_FREQ_MHZ=${CONFIG_TFM_CPU_FREQ_MHZ}\n    BUILD_COMMAND ${CMAKE_COMMAND} --build .\n    INSTALL_COMMAND \"\"\n    BUILD_ALWAYS True\n    USES_TERMINAL_BUILD True\n    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/tfm_ns\n    DEPENDS tfm\n    BUILD_BYPRODUCTS\n        ${TFM_NS_HEX_FILE}\n        ${TFM_NS_BIN_FILE}\n        ${TFM_NS_SIGNED_BIN_FILE}\n)\n\nadd_dependencies(app tfm_psa_arch_test_app)\n```\n\n----------------------------------------\n\nTITLE: Documenting a Function in Doxygen\nDESCRIPTION: Demonstrates the proper way to document a function in Doxygen, including @brief, @note, @param, and @return tags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/styleguide.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n/** @brief Request a random number from the Secure Firmware.\n *\n * This function provides a True Random Number from the on-board random number generator.\n *\n * @note Currently, the RNG hardware runs each time this function is called. This\n *       consumes significant time and power.\n *\n * @param[out] output  The random number. Must be at least @p len long.\n * @param[in]  len     The length of the output array. Currently, @p len must be\n```\n\n----------------------------------------\n\nTITLE: Configuring Reduced Mobility in LTE\nDESCRIPTION: This code snippet demonstrates how to configure reduced mobility for an LTE device using the `lte_lc_reduced_mobility_set` function.  Reduced mobility can decrease power consumption by minimizing cell swapping for mostly stationary devices. The function takes a mobility level as an argument and returns an error code if the configuration fails.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/lte/psm.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nerr = int lte_lc_reduced_mobility_set(LTE_LC_REDUCED_MOBILITY_NORDIC);\n\tif (err) {\n\t\tprintk(\"lte_lc_reduced_mobility_set, error: %d\\n\", err);\n\t\treturn;\n\t }\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic SDK Application with Zephyr\nDESCRIPTION: This CMake snippet sets up the build environment for a Nordic SDK application. It specifies the minimum CMake version, finds the Zephyr package, defines the project, and configures the application's source files and include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/sensor_server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/model_handler.c)\ntarget_include_directories(app PRIVATE include)\n\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Multi-Image Application Check\nDESCRIPTION: This snippet verifies if the application is being built with the sysbuild argument. If not, it raises a fatal error indicating the necessary build command to be used. This is crucial for setting up a multi-image application correctly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/boards/nordic/spis_wakeup/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: AWS IoT Jobs Document for FOTA Update\nDESCRIPTION: JSON document that specifies the firmware update metadata including version, size and location details. Used by AWS IoT Jobs to initiate the FOTA process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_fota.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"app_fw_update\",\n  \"fwversion\": \"v1.0.2\",\n  \"size\": 181124,\n  \"location\": {\n    \"protocol\": \"*protocol*\",\n    \"host\": \"*host_url*\",\n    \"path\": \"*file_path*\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Core on nRF5340\nDESCRIPTION: This configuration option enables the network core on the nRF5340. Even if the firmware primarily runs on the network core, the application core must be programmed to start the network core and manage its GPIO pins. This configuration is essential for samples that require radio communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/features_nrf53.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_SOC_NRF53_CPUNET_ENABLE`\"\n```\n\n----------------------------------------\n\nTITLE: Defining QSPI XIP Partition Layout in YAML\nDESCRIPTION: Example YAML configuration for defining the QSPI XIP partition layout in the Partition Manager static partition file. It shows how to define the mcuboot_primary_2 section with pad and app subsections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_sysbuild.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmcuboot_primary_2:\n  address: 0x120000\n  device: MX25R64\n  end_address: 0x160000\n  orig_span: &id003\n  - mcuboot_primary_2_pad\n  - mcuboot_primary_2_app\n  region: external_flash\n  size: 0x40000\n  span: *id003\nmcuboot_primary_2_pad:\n  address: 0x120000\n  end_address: 0x120200\n  region: external_flash\n  size: 0x200\nmcuboot_primary_2_app:\n  address: 0x120200\n  device: MX25R64\n  end_address: 0x40000\n  region: external_flash\n  size: 0x3FE00\n```\n\n----------------------------------------\n\nTITLE: Scanning for Available Bluetooth LE Devices\nDESCRIPTION: CLI command to scan and list available Bluetooth LE devices that can be added to the Matter bridge. The output displays each device's index, address, and UUID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmatter_bridge scan\n```\n\n----------------------------------------\n\nTITLE: Retrieving Modem Data as Short in C\nDESCRIPTION: Retrieves a specific modem data value as a short integer. This function can be used for numeric modem information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_info.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nmodem_info_short_get();\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Script\nDESCRIPTION: This snippet includes a common CMake script that is shared across multiple USB subsystem samples, ensuring that default settings and variables are applied for the HID keyboard application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/usb/hid-keyboard/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${ZEPHYR_BASE}/samples/subsys/usb/common/common.cmake)\n```\n\n----------------------------------------\n\nTITLE: Device Onboarding Script Reference\nDESCRIPTION: The nrf_cloud_onboard.py script handles secure device onboarding to nRF Cloud. It generates and stores private keys on the device, creates device certificates signed by the specified CA, and writes both device and AWS CA certificates to the device. The private key remains secure on the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/nrf_cloud.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnrf_cloud_onboard.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Motion Detector Timeout Period (kconfig)\nDESCRIPTION: These Kconfig options define the minimum and maximum timeout periods for the motion detector in Unwanted Tracking Protection mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DULT_MOTION_DETECTOR_SEPARATED_UT_TIMEOUT_PERIOD_MIN\n```\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DULT_MOTION_DETECTOR_SEPARATED_UT_TIMEOUT_PERIOD_MAX\n```\n\n----------------------------------------\n\nTITLE: Enabling KMU Support with CRACEN in nRF54L\nDESCRIPTION: Configuration settings to enable KMU support with the CRACEN cryptographic accelerator in nRF54L devices using the nRF Security library and PSA cryptography API.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/cryptography.rst#2025-04-21_snippet_6\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF_SECURITY=y\nCONFIG_MBEDTLS_PSA_CRYPTO_C=y\nCONFIG_PSA_CRYPTO_DRIVER_CRACEN=y\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Source Files in CMake\nDESCRIPTION: This CMake snippet includes directories and targets source files for the application build in a Nordic Semiconductor project. It specifies 'app' as the target and adds an include directory along with a source file 'nrf91_non_offloaded_dev.c'. Prerequisites include having CMake installed and setting the correct paths.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/drivers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/nrf91_non_offloaded_dev.c)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Occupancy Mode of Light Control Server - C\nDESCRIPTION: Retrieves the current Occupancy Mode setting from the Light Lightness Control Server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl occupancy-get\n\tGet the Light Lightness Control Server's current Occupancy Mode.\n```\n\n----------------------------------------\n\nTITLE: Setting Socket Options using AT command\nDESCRIPTION: This AT command sets a specific option for a socket. The command takes the socket identifier, option name, and option value as parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_35\n\nLANGUAGE: text\nCODE:\n```\n**AT#XSOCKETOPT=1,20,30**\nOK\n```\n\n----------------------------------------\n\nTITLE: Enabling Wi-Fi Coexistence in Kconfig\nDESCRIPTION: Kconfig option to explicitly enable Wi-Fi coexistence, required for both application and network cores on nRF5340.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_MPSL_CX\n```\n\n----------------------------------------\n\nTITLE: MQTT Publish with QoS 0 on nRF9160 SLM\nDESCRIPTION: Example of publishing a message with Quality of Service 0 (no acknowledgment needed) to an MQTT topic. This command sends 'Test message with QoS 0' to the topic 'nrf91/slm/mqtt/topic0' without retention.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/MQTT_AT_commands.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nAT#XMQTTPUB=\"nrf91/slm/mqtt/topic0\",\"Test message with QoS 0\",0,0\nOK\n```\n\n----------------------------------------\n\nTITLE: Enabling HKDF-Extract Key Derivation Function in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for the HKDF-Extract algorithm within the PSA Cryptography API. This is the extract stage of HKDF, used for entropy extraction from the initial keying material.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_8\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_HKDF_EXTRACT`\"\n```\n\n----------------------------------------\n\nTITLE: Setting VIO Pin Direction in C\nDESCRIPTION: Functions to configure VPR IO pin direction (input or output) and to toggle existing direction settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_csr_vio_dir_set()\nnrf_vpr_csr_vio_dir_toggle_set()\n```\n\n----------------------------------------\n\nTITLE: Parsing Bluetooth LE OOB Records in C\nDESCRIPTION: Code example showing how to use the LE OOB record parser module to parse and decode Bluetooth LE OOB NDEF records from raw NFC tag data. This sample demonstrates the integration with the NDEF parser library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/le_oob_rec_parser.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ninclude_startingpoint_le_oob_rec_parser_rst\ninclude_endpoint_le_oob_rec_parser_rst\n```\n\n----------------------------------------\n\nTITLE: Shell Output - Tester Device Configuration\nDESCRIPTION: Terminal output showing the initialization and connection process for the tester (central) device, including connection parameters and throughput test results.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/throughput/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n*** Booting Zephyr OS build v3.0.99-ncs1  ***\nStarting Bluetooth Throughput sample\nI: SoftDevice Controller build revision:\nI: 33 78 2a 18 20 f5 61 61 |3x*. .aa\nI: a6 8b 77 60 62 83 39 2a |..w`b.9*\nI: 7c f1 14 e4             ||...\n[...]\n[local] sent 1242945 bytes (1213 KB) in 7292 ms at 1363 kbps\n[peer] received 1242945 bytes (1213 KB) in 2511 GATT writes at 1415583 bps\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for nRF7002 EK Shield with nRF7000 Emulation\nDESCRIPTION: CMake configuration to add support for the nRF7002 EK shield in emulation mode for the nRF7000 IC variant in a project's CMakeLists.txt file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf7002ek_dev_guide.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nset(SHIELD nrf7002ek_nrf7000)\n```\n\n----------------------------------------\n\nTITLE: Configuring FEM without PDN GPIO in Devicetree\nDESCRIPTION: Example showing how to remove unneeded GPIO control declarations in devicetree when pins like PDN are connected to fixed logic levels. This allows simplifying the configuration when certain pins don't need dynamic control.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_incomplete_connections.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\npdn-gpios = < .. >;\n```\n\n----------------------------------------\n\nTITLE: Modem Trace Shell Command Examples\nDESCRIPTION: Examples of shell commands for controlling modem tracing functionality, including starting and stopping traces, checking the size of stored traces, dumping traces over UART, and clearing stored traces.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_trace.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nmodem_trace start full\n<use the modem by triggering functionality in the app or use at-commands>\nmodem_trace stop\n```\n\nLANGUAGE: console\nCODE:\n```\nmodem_trace size\n```\n\nLANGUAGE: console\nCODE:\n```\nmodem_trace dump_uart\n```\n\nLANGUAGE: console\nCODE:\n```\nmodem_trace clear\n```\n\n----------------------------------------\n\nTITLE: Setting Regulator Coefficient of Light Control Server Unacknowledged - C\nDESCRIPTION: Sets a specified Regulator Coefficient value for the Light Lightness Control Server without requesting a response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl coeff-set-unack <ID> <Val>\n\tSet a Regulator Coefficient value of the Light Lightness Control Server without requesting a response.\n\n\t* ``ID`` - ID of the coefficient to set. See :c:enum:`bt_mesh_light_ctrl_coeff` for a list of supported coefficients.\n\t* ``Val`` - New coefficient value.\n```\n\n----------------------------------------\n\nTITLE: Configuring X.509 Library\nDESCRIPTION: Sets up the X.509 certificate handling library with required source files and dependencies when enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_MBEDTLS_X509_LIBRARY)\n  append_with_prefix(src_x509 ${ARM_MBEDTLS_PATH}/library\n    x509.c\n    x509_create.c\n    x509_crl.c\n    x509_crt.c\n    x509_csr.c\n    x509write.c\n    x509write_crt.c\n    x509write_csr.c\n  )\n\n  add_library(mbedx509 STATIC\n    ${src_x509}\n  )\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Type in C\nDESCRIPTION: Retrieves the type of parameter stored at a specific index in the parsed AT command list.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_parser.rst#2025-04-21_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nat_params_type_get();\n```\n\n----------------------------------------\n\nTITLE: Static Partition Manager Layout for nRF54L15\nDESCRIPTION: Example YAML configuration for the static Partition Manager layout on nRF54L15, defining boot and slot partitions for image compression.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_image_compression.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: ../../../../samples/nrf_compress/mcuboot_update/pm_static_nrf54l15dk_nrf54l15_cpuapp.yml\n     :language: yaml\n```\n\n----------------------------------------\n\nTITLE: Registering Update Callback for Regulator\nDESCRIPTION: This snippet specifies how to register a callback function that will be called on each regulator step to provide the necessary output adjustments based on the regulator's internal calculations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_reg.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nregulator.updated = user_update_callback;\n```\n\n----------------------------------------\n\nTITLE: Creating Enrollment Group in DPS Using Azure CLI\nDESCRIPTION: Creates a DPS enrollment group using a subordinate CA certificate, allowing the automatic onboarding of devices to IoT Hub.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_19\n\nLANGUAGE: console\nCODE:\n```\naz iot dps enrollment-group create --dps-name <dps_name> --resource-group <resource_name> --enrollment-id <enrollment_name> --certificate-path ca/sub-ca-cert.pem --provisioning-status enabled --iot-hubs <iothub_url> --allocation-policy static\n```\n\n----------------------------------------\n\nTITLE: Establishing an LTE Connection in C\nDESCRIPTION: This snippet demonstrates how to use the LTE link control API to asynchronously establish an LTE connection and handle events. It includes setting up a callback handler, connecting asynchronously, and waiting for a connection event.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/lte_lc.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <zephyr/kernel.h>\n#include <modem/lte_lc.h>\n\n/* Semaphore used to block the main thread until modem has established\n * an LTE connection.\n */\nK_SEM_DEFINE(lte_connected, 0, 1);\n\nstatic void lte_handler(const struct lte_lc_evt *const evt)\n{\n        switch (evt->type) {\n        case LTE_LC_EVT_NW_REG_STATUS:\n                if (evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME &&\n                    evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_ROAMING) {\n                        break;\n                }\n\n                printk(\"Connected to: %s network\\n\",\n                       evt->nw_reg_status == LTE_LC_NW_REG_REGISTERED_HOME ? \"home\" : \"roaming\");\n\n                k_sem_give(&lte_connected);\n                break;\n\n        case LTE_LC_EVT_RRC_UPDATE:\n        case LTE_LC_EVT_CELL_UPDATE:\n        case LTE_LC_EVT_LTE_MODE_UPDATE:\n        case LTE_LC_EVT_MODEM_EVENT:\n                /* Handle LTE events that are enabled by default. */\n                break;\n\n        default:\n                break;\n        }\n}\n\nint main(void)\n{\n        int err;\n\n        printk(\"Connecting to LTE network. This may take a few minutes...\\n\");\n\n        err = lte_lc_connect_async(lte_handler);\n        if (err) {\n                printk(\"lte_lc_connect_async, error: %d\\n\", err);\n                return 0;\n        }\n\n        k_sem_take(&lte_connected, K_FOREVER);\n\n        /* Continue execution... */\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sources to Application Target\nDESCRIPTION: Adds the globbed source files to the application target for compilation. Ensures all source files are included in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tnep_poller/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app  PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Setting Holiday Schedule using Chip-Tool\nDESCRIPTION: This command sets a Holiday schedule for the door lock using the chip-tool, specifying the schedule index, start and end times in Epoch Time, operating mode, destination ID, and endpoint ID. It configures a schedule that applies during holidays with a specified operating mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n\"./chip-tool doorlock set-holiday-schedule 1 1716786000 1717045200 1 1 1\"\n```\n\n----------------------------------------\n\nTITLE: Adding Wi-Fi Credentials (C)\nDESCRIPTION: Functions for adding Wi-Fi credentials to the library. These functions allow setting personal Wi-Fi credentials either by individual fields or using a pre-built struct.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/wifi_credentials.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nwifi_credentials_set_personal()\nwifi_credentials_set_personal_struct()\n```\n\n----------------------------------------\n\nTITLE: Device Power Management in C++\nDESCRIPTION: Demonstrates the usage of power management features in C++ by suspending and resuming a QSPI device when it is ready. Requires Zephyr's device and power management APIs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/cheat_sheet.rst#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n    #include <zephyr/pm/device.h>\n\n    const auto * qspi_dev = DEVICE_DT_GET(DT_INST(0, nordic_qspi_nor));\n    if (device_is_ready(qspi_dev))\n    {\n        // Put the peripheral into suspended state.\n        pm_device_action_run(qspi_dev, PM_DEVICE_ACTION_SUSPEND);\n\n        // Resume the peripheral from the suspended state.\n        pm_device_action_run(qspi_dev, PM_DEVICE_ACTION_RESUME);\n    }\n```\n\n----------------------------------------\n\nTITLE: FOTA upload command for nRF91x1 DK\nDESCRIPTION: This command uploads the modem firmware binary to Coiote Device Management server for the nRF91x1 DK. `2.x.x` is the latest modem release version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"./scripts/fota.py upload 1 mfw_nrf91x1_update_from_2.x.x_to_2.x.x-FOTA-TEST.bin\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Profiling Function in C\nDESCRIPTION: Example of a profiling function that logs event data to a buffer by encoding different data types. This function is called by the Application Event Manager profiler tracer to capture event data during profiling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/app_event_manager_profiler_tracer.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic void profile_sample_event(struct log_event_buf *buf, const struct app_event_header *aeh)\n{\n\tstruct sample_event *event = cast_sample_event(aeh);\n\n\tnrf_profiler_log_encode_int8(buf, event->value1);\n\tnrf_profiler_log_encode_int16(buf, event->value2);\n\tnrf_profiler_log_encode_int32(buf, event->value3);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for nRF Connect SDK Audio Application\nDESCRIPTION: This CMake configuration specifies the source files to be included in the application build. It defines common files for all targets and conditionally includes additional files when building for the nRF5340 Audio Development Kit.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/channel_assignment.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/error_handler.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/uicr.c\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_BOARD_NRF5340_AUDIO_DK_NRF5340_CPUAPP app PRIVATE\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/nrf5340_audio_dk.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/board_version.c)\n```\n\n----------------------------------------\n\nTITLE: Building the sample for nRF7002 DK\nDESCRIPTION: This command builds the throughput sample for the nRF7002 DK using the nrf5340/cpuapp board target.  It demonstrates the basic build process for the sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Performing Link Metrics Query (Single Probe)\nDESCRIPTION: Executes a Single Probe Link Metrics query to gather link quality information from a peer device, showing LQI, margin, and RSSI values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot linkmetrics query fe80:0:0:0:10b1:93ea:c0ee:eeb7 single qmr\nDone\nReceived Link Metrics Report from: fe80:0:0:0:10b1:93ea:c0ee:eeb7\n- LQI: 220 (Exponential Moving Average)\n- Margin: 60 (dB) (Exponential Moving Average)\n- RSSI: -40 (dBm) (Exponential Moving Average)\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Pin Function (#XGPIOCFG)\nDESCRIPTION: Command for configuring GPIO pin functionality with options for output, input pull-up, and input pull-down configurations. Supports pins 0-31.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/GPIO_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XGPIOCFG=<op>,<pin>\n```\n\n----------------------------------------\n\nTITLE: Turning Off a Light Using the Bridge\nDESCRIPTION: Uses the Matter Bridge CLI to send an \"off\" command to a connected light bulb through a bridged light switch endpoint. This turns off the LED on the light bulb device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_27\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge onoff_switch 0 *<bridged_light_switch_endpoint_ID>*\n```\n\n----------------------------------------\n\nTITLE: Creating and Submitting an Event with Dynamic Data\nDESCRIPTION: Example of how to allocate an event with variable-sized data, fill its fields including the dynamic data buffer, and submit it.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/app_event_manager.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n/* Allocate event. */\nstruct sample_event *event = new_sample_event(my_data_size);\n\n/* Write data to datafields. */\nevent->value1 = value1;\nevent->value2 = value2;\nevent->value3 = value3;\n\n/* Write data with variable size. */\nmemcpy(event->dyndata.data, my_buf, my_data_size);\n\n/* Submit event. */\nAPP_EVENT_SUBMIT(event);\n```\n\n----------------------------------------\n\nTITLE: Defining Advertising Request Structure in C++\nDESCRIPTION: This snippet defines a struct for advertising requests in a Bluetooth LE application that prioritizes the advertisement of services. The struct includes fields for priority, advertising options, intervals, and callback functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/adding_bt_services.rst#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Request : public sys_snode_t\n{\n    uint8_t priority;                     ///< Advertising request priority. Lower value means higher priority\n    uint32_t options;                     ///< Advertising options: bitmask of BT_LE_ADV_OPT_XXX constants from Zephyr\n    uint16_t minInterval;                 ///< Minimum advertising interval in 0.625 ms units\n    uint16_t maxInterval;                 ///< Maximum advertising interval in 0.625 ms units\n    Span<const bt_data> advertisingData;  ///< Advertising data fields\n    Span<const bt_data> scanResponseData; ///< Scan response data fields\n    OnAdvertisingStarted onStarted;       ///< (Optional) Callback invoked when the request becomes top-priority.\n    OnAdvertisingStopped onStopped;       ///< (Optional) Callback invoked when the request stops being top-priority.\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project with Matter Dependencies\nDESCRIPTION: Sets up the basic CMake configuration and finds the Zephyr package. Establishes minimum CMake version and project name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr HINTS $ENV{ZEPHYR_BASE})\n\nproject(matter-light-switch)\n```\n\n----------------------------------------\n\nTITLE: Enabling Kconfig options for Advanced FOTA\nDESCRIPTION: These Kconfig options are required to enable the Advanced Firmware Update functionality.  Enabling these options allows for the usage of advanced FOTA features. The options include enabling the LwM2M client utilities library, advanced firmware update object support, and disabling standard firmware update object support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\n\"CONFIG_LWM2M_CLIENT_UTILS=y\\nCONFIG_LWM2M_CLIENT_UTILS_ADV_FIRMWARE_UPDATE_OBJ_SUPPORT=y\\nCONFIG_LWM2M_CLIENT_UTILS_FIRMWARE_UPDATE_OBJ_SUPPORT=y\\nCONFIG_LWM2M_FIRMWARE_UPDATE_OBJ_SUPPORT=n\\nCONFIG_FOTA_CLIENT_AUTOSCHEDULE_UPDATE=n\\nCONFIG_LWM2M_RW_OMA_TLV_SUPPORT=y\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Matter Template Project in CMake\nDESCRIPTION: Sets up the CMake project for a Matter template, including version requirements, package finding, and project naming.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/template/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr HINTS $ENV{ZEPHYR_BASE})\n\nproject(matter-template)\n```\n\n----------------------------------------\n\nTITLE: Including NCS Core Components\nDESCRIPTION: Includes essential CMake configuration files for extensions, versioning, and hardware platform features, then sets up include directories and adds all major subsystems.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/extensions.cmake)\ninclude(cmake/version.cmake)\ninclude(cmake/version_app.cmake)\ninclude(cmake/hpf.cmake)\n\nzephyr_include_directories(include)\n\nadd_subdirectory(ext)\nadd_subdirectory(lib)\nadd_subdirectory(samples)\nadd_subdirectory(subsys)\nadd_subdirectory(modules)\nadd_subdirectory(drivers)\nadd_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Handling Cloud Location External Request in Location Library\nDESCRIPTION: Shows how to handle a cloud location external request event and set the result. The location_cloud_location_ext_result_set() function is used to provide the result back to the Location library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/location.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nlocation_cloud_location_ext_result_set(LOCATION_EXT_RESULT_SUCCESS)\\n(latitude,longitude)\n```\n\n----------------------------------------\n\nTITLE: Programming Nordic Thingy:53 Using West Flash Command\nDESCRIPTION: Command to flash a compiled sample or application to the Nordic Thingy:53 using an external debug probe connected via USB. This should be run after connecting the debug probe and ensuring both devices are powered on.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy53/building_thingy53.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Specifying Application Source Files\nDESCRIPTION: This snippet indicates where to find the source files for the application. It utilizes the target_sources command to include 'src/main.c' as a private source file for the target application. Be sure to have your source files organized correctly in the specified directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/at_client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing SMP Server Sample\nDESCRIPTION: This command sequence builds and flashes the SMP server sample to the nRF9160 DK while ensuring prerequisites such as the switch being set to nRF52. The sample uses MCUboot recovery mode for updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota_external_mcu.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncd samples/cellular/smp_svr/\nwest build --pristine -b nrf9160dk/nrf52840 -- -DEXTRA_CONF_FILE=\"overlay-serial.conf\" -DEXTRA_DTC_OVERLAY_FILE=\"nrf9160dk_nrf52840_mcumgr_srv.overlay\"\nwest flash --erase\n\n```\n\n----------------------------------------\n\nTITLE: Configuration Channel Data Format Protocol\nDESCRIPTION: Defines the data format for configuration channel feature reports used in nRF Desktop devices. The format includes Report ID, Recipient, Event ID (Module ID + Option ID), Status, and Data fields.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/config_channel.rst#2025-04-21_snippet_0\n\nLANGUAGE: table\nCODE:\n```\nFeature report layout:\nByte 0: Report ID\nByte 1: Recipient\nByte 2: Event ID (bits 0-3: Option ID, bits 4-7: Module ID)\nByte 3: Status\nByte 4: Data length\nByte 5+: Data\n```\n\n----------------------------------------\n\nTITLE: Determining DFU Image Type in C\nDESCRIPTION: Identify the type of firmware upgrade from the first fragment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_target.rst#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\ndfu_target_img_type(first_fragment, fragment_size);\n```\n\n----------------------------------------\n\nTITLE: Building BUS Interface Debug with CMake\nDESCRIPTION: Command to build with verbose BUS interface debugging enabled using CMake build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/debugging.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncmake -GNinja -Bbuild -DBOARD=nrf7002dk/nrf5340/cpuapp -Dnrf_wifi_shell_SNIPPET=\"nrf70-driver-verbose-debug\" samples/wifi/shell\nninja -C build\n```\n\n----------------------------------------\n\nTITLE: RF Tool RX Continuous Mode\nDESCRIPTION: This command configures the DECT RF tool for continuous receive (RX) mode. It sets the target frequency to 39 and configures the RF tool in continuous RX mode on channel 1677.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ndect sett -t 39\ndect rf_tool -m rx_cont -c 1677\n```\n\n----------------------------------------\n\nTITLE: Initializing and Connecting to nRF Cloud CoAP\nDESCRIPTION: Core functions for initializing the nRF Cloud CoAP library and establishing a connection to nRF Cloud services.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud_coap.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nnrf_cloud_coap_init\nnrf_cloud_coap_connect\nnrf_cloud_coap_disconnect\n```\n\n----------------------------------------\n\nTITLE: Managing Wi-Fi Credentials - Console\nDESCRIPTION: This snippet introduces commands to manage Wi-Fi credentials, allowing users to add, delete, list, and automatically connect to stored networks. Each subcommand is detailed with required parameters and options tailored for different security configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n``wifi cred`` is an extension to the Wi-Fi command line.\\\nIt adds the following subcommands to interact with the :ref:`lib_wifi_credentials` library:\\\n.. list-table:: Wi-Fi credentials shell subcommands\\\n   :header-rows: 1\\\n   * - Subcommands\\\n     - Description\\\n   * - add\\\n     - | Add a network to the credentials storage with following parameters:\\\n       | <-s --ssid \\\"<SSID>\\\">: SSID.\\\n       | [-c --channel]: Channel that needs to be scanned for connection. 0:any channel\\\n       | [-b, --band] 0: any band (2:2.4GHz, 5:5GHz, 6:6GHz)\\\n       | [-p, --passphrase]: Passphrase (valid only for secure SSIDs)\\\n       | [-k, --key-mgmt]: Key management type.\\\n       | 0:None, 1:WPA2-PSK, 2:WPA2-PSK-256, 3:SAE-HNP, 4:SAE-H2E, 5:SAE-AUTO, 6:WAPI,\\\n       | 7:EAP-TLS, 8:WEP, 9: WPA-PSK, 10: WPA-Auto-Personal, 11: DPP\\\n       | [-w, --ieee-80211w]: MFP (optional: needs security type to be specified)\\\n       | : 0:Disable, 1:Optional, 2:Required.\\\n       | [-m, --bssid]: MAC address of the AP (BSSID).\\\n       | [-t, --timeout]: Duration after which connection attempt needs to fail.\\\n       | [-a, --identity]: Identity for enterprise mode.\\\n       | [-K, --key-passwd]: Private key passwd for enterprise mode.\\\n       | [-h, --help]: Print out the help for the connect command.\\\n   * - delete <SSID>\\\n     - Removes network from credentials storage.\\\n   * - list\\\n     - Lists networks in credential storage.\\\n   * - auto_connect\\\n     - Automatically connects to any stored network.\n```\n\n----------------------------------------\n\nTITLE: AWS IoT Shadow Update Command in Bash\nDESCRIPTION: Bash function for updating the device shadow state in AWS IoT Core. Allows setting the onoff state and level control values for the light bulb.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_bulb/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfunction aws-update-desired() {\n      aws iot-data update-thing-shadow --cli-binary-format raw-in-base64-out --thing-name my-thing --payload \"{\\\"state\\\":{\\\"desired\\\":{\\\"onoff\\\":$1,\\\"level_control\\\":$2}}}\" \"output.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Runners in board.cmake File\nDESCRIPTION: Shows how to include runner support in a board's board.cmake file. The first runner listed becomes the default runner for that board.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/programming.rst#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${ZEPHYR_BASE}/boards/common/<runner>.board.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for nrf_wifi_sta Project with Bluetooth and Wi-Fi functionality\nDESCRIPTION: This CMake configuration sets up a Nordic Semiconductor project that combines Wi-Fi station mode with Bluetooth throughput testing. It defines the minimum CMake version, required Zephyr package, source files, and necessary include directories for networking and Bluetooth functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_sta)\n\ntarget_sources(app PRIVATE\n\tsrc/bt_throughput_test.c\n\tsrc/main.c\n)\n\n# For net_private.h\ntarget_include_directories(app PUBLIC\n\t${ZEPHYR_BASE}/subsys/net/ip\n)\n\nzephyr_library_include_directories(${ZEPHYR_BASE}/samples/bluetooth)\n```\n\n----------------------------------------\n\nTITLE: Initializing PSA API for Persistent Key Storage in C\nDESCRIPTION: This snippet represents the first step in the sample, which is the initialization of the Platform Security Architecture (PSA) API. This is a crucial setup step for using PSA cryptographic functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/persistent_key_usage/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\npsa_status_t status = psa_crypto_init();\n```\n\n----------------------------------------\n\nTITLE: LwM2M Configuration Options Overview\nDESCRIPTION: This snippet provides the configuration options available for managing LwM2M functionality within the application, including PSK configuration, endpoint naming, sensor object management, and GNSS functionalities. Each configuration is annotated with its purpose and potential impact on the application behavior.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/sample_description.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.. _CONFIG_APP_LWM2M_PSK:\n\nCONFIG_APP_LWM2M_PSK - Configuration for the PSK\n   The sample configuration sets the hexadecimal representation of the PSK used when registering the device with the server.\n   To prevent provisioning of the key to the modem, set this option to an empty string.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n.. _CONFIG_APP_ENDPOINT_PREFIX:\n\nCONFIG_APP_ENDPOINT_PREFIX - Configuration for setting prefix for endpoint name\n   This configuration option changes the prefix of the endpoint name.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n.. _CONFIG_APP_TEMP_SENSOR:\n\nCONFIG_APP_TEMP_SENSOR - Configuration for enabling an LwM2M Temperature sensor object\n   The sample configuration enables an LwM2M Temperature sensor object.\n   All compatible objects are enabled by default.\n   Disabled objects will not be visible in the server.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n.. _CONFIG_APP_GNSS:\n\nCONFIG_APP_GNSS - Configuration for enabling GNSS functionality\n   This configuration might interfere with LTE if the GNSS conditions are not optimal.\n   Disable this option if GNSS is not needed.\n```\n\n----------------------------------------\n\nTITLE: Migrating from download_client_start to downloader_get_with_host_and_file\nDESCRIPTION: Code comparison showing how to replace the download_client_start function with the new downloader_get_with_host_and_file function, including host configuration changes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_3.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n/* Note: All configuration of the downloader is done through the config structs.\n * The downloader struct should not be modified by the application.\n */\n\nstatic struct downloader_host_cfg dl_host_cfg = {\n        ...\n        /* Note:\n         * .frag_size_override is replaced by .range_override.\n         * .set_tls_hostname is replaced by .set_native_tls.\n         * dlc.close_when_done is moved here and inverted(.keep_connection).\n         * Set .cid if CONFIG_DOWNLOAD_CLIENT_CID was enabled in the download client.\n         */\n};\n\nint err = downloader_get_with_host_and_file(&dl, &dl_host_cfg, dl_host, dl_file, offset);\n```\n\n----------------------------------------\n\nTITLE: Documenting C Enums with Inline Documentation in nRF Connect SDK\nDESCRIPTION: Example of documenting a C enum with inline documentation for each element. This style is used for the PDN library event enum.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/styleguide.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/** @brief PDN library event. */\nenum pdn_event {\n        PDN_EVENT_CNEC_ESM,\t\t/**< +CNEC ESM error code. */\n        PDN_EVENT_ACTIVATED,\t\t/**< PDN connection activated. */\n        PDN_EVENT_DEACTIVATED,\t/**< PDN connection deactivated. */\n        PDN_EVENT_IPV6_UP,\t\t/**< PDN has IPv6 connectivity. */\n        PDN_EVENT_IPV6_DOWN,\t\t/**< PDN has lost IPv6 connectivity. */\n```\n\n----------------------------------------\n\nTITLE: Allocating Shared Memory for Transmission in C\nDESCRIPTION: This function, nrf_modem_os_shm_tx_alloc, is part of the OS abstraction layer. It uses Zephyr's Heap implementation to dynamically allocate memory for transmission. The characteristics of the allocation depend on Zephyr's heap implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_os_abstraction.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nnrf_modem_os_shm_tx_alloc\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Signing for NSIB Bootloader in nRF Connect SDK\nDESCRIPTION: Shows how to set up custom signing commands for the NSIB bootloader using Kconfig and command line options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\nSB_CONFIG_SECURE_BOOT_APPCORE=y\nSB_CONFIG_SECURE_BOOT_SIGNING_CUSTOM=y\nSB_CONFIG_SECURE_BOOT_SIGNING_PUBLIC_KEY=\"/path/to/pub.pem\"\nSB_CONFIG_SECURE_BOOT_SIGNING_COMMAND=\"my_command\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 zephyr/samples/hello_world -- \\\n-DSB_CONFIG_SECURE_BOOT_APPCORE=y \\\n-DSB_CONFIG_SECURE_BOOT_SIGNING_CUSTOM=y \\\n-DSB_CONFIG_SECURE_BOOT_SIGNING_PUBLIC_KEY=\\\"/path/to/pub.pem\\\" \\\n-DSB_CONFIG_SECURE_BOOT_SIGNING_COMMAND=\\\"my_command\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor Sampling Interval in Kconfig\nDESCRIPTION: Sets the time to wait between each temperature sensor sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_SENSOR_SAMPLE_INTERVAL_SECONDS\n```\n\n----------------------------------------\n\nTITLE: Fixing Flash Timeout Issue with Bluetooth LE Connection\nDESCRIPTION: When executing flash operations on the system workqueue with an active Bluetooth LE connection, the operation might result in -ETIMEDOUT error. The recommended workaround is to move flash operations to a different thread.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n-ETIMEDOUT\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Credentials Library in Kconfig (C)\nDESCRIPTION: Kconfig options for enabling and configuring the Wi-Fi credentials library. These options control the backend storage, maximum number of networks, SAE password length, and PSA ITS key offset.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/wifi_credentials.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nCONFIG_WIFI_CREDENTIALS=y\nCONFIG_WIFI_CREDENTIALS_BACKEND_PSA=y\nCONFIG_WIFI_CREDENTIALS_BACKEND_SETTINGS=y\nCONFIG_WIFI_CREDENTIALS_MAX_ENTRIES=10\nCONFIG_WIFI_CREDENTIALS_SAE_PASSWORD_LENGTH=128\nCONFIG_WIFI_CREDENTIALS_BACKEND_PSA_OFFSET=1\n```\n\n----------------------------------------\n\nTITLE: Using Network Scanning and Connection Commands - Console\nDESCRIPTION: This snippet provides examples of commands for scanning Wi-Fi networks, connecting to specified SSIDs, checking connection statuses, and performing basic networking tests like pinging and resolving DNS, which can help in troubleshooting network connectivity.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n|test_sample|\\\n#. |connect_kit|\\\n#. |connect_terminal|\\\n#. Scan for the Wi-Fi networks in range using the following command:\\\n   .. code-block:: console\\\n      wifi scan\\\n   The output should be similar to the following:\\\n   .. code-block:: console\\\n      Scan requested\\\n      Num  | SSID                             (len) | Chan (Band)    | RSSI | Security        | BSSID\\\n      1    | xyza                             4     | 1    (2.4GHz)  | -27  | WPA2-PSK        | xx:xx:xx:xx:xx:xx\\\n      2    | abcd                             4     | 149  (5GHz  )  | -28  | WPA2-PSK        | yy:yy:yy:yy:yy:yy\\\n#. Connect to your preferred network using the following command:\\\n   .. code-block:: console\\\n      wifi connect -s <SSID> -k <key_management> -p <passphrase>\\\n   ``<SSID>`` is the SSID of the network you want to connect to, ``<passphrase>`` is its passphrase, and the ``<key_management>`` is the security type used by the network.\\\n#. Check the connection status after a while, using the following command:\\\n   .. code-block:: console\\\n      wifi status\\\n   If the connection is established, you should see an output similar to the following:\\\n   .. code-block:: console\\\n      Status: successful\\\n      ==================\\\n      State: COMPLETED\\\n      Interface Mode: STATION\\\n      Link Mode: WIFI 6 (802.11ax/HE)\\\n      SSID: OpenWrt\\\n      BSSID: C0:06:C3:1D:CF:9E\\\n      Band: 5GHz\\\n      Channel: 157\\\n      Security: WPA2-PSK\\\n      PMF: Optional\\\n      RSSI: 0\\\n#. Initiate a ping and verify data connectivity using the following commands:\\\n   .. code-block:: console\\\n      net dns <hostname>\\\n      net ping <resolved hostname>\\\n   See the following example:\\\n   .. code-block:: console\\\n      net dns google.com\\\n       Query for 'google.com' sent.\\\n       dns: 142.250.74.46\\\n       dns: All results received\\\n      net ping 10 142.250.74.46\\\n       PING 142.250.74.46\\\n       28 bytes from 142.250.74.46 to 192.168.50.199: icmp_seq=0 ttl=113 time=191 ms\\\n       28 bytes from 142.250.74.46 to 192.168.50.199: icmp_seq=1 ttl=113 time=190 ms\\\n       28 bytes from 142.250.74.46 to 192.168.50.199: icmp_seq=2 ttl=113 time=190 ms\n```\n\n----------------------------------------\n\nTITLE: Continuous OFDM TX Traffic Sequence in HE-SU 11ax Mode\nDESCRIPTION: Complete command sequence for running a continuous OFDM TX traffic test in HE-SU 802.11ax mode. The configuration uses channel 116, HESU frame format, 4000 byte payload, 200 μs gap, MCS7 data rate, 3.2 μs guard interval, and 4xHELTF for a 70.9% duty cycle.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 116\nuart:~$ wifi_radio_test tx_pkt_tput_mode 3\nuart:~$ wifi_radio_test tx_pkt_mcs 7\nuart:~$ wifi_radio_test tx_pkt_len 4000\nuart:~$ wifi_radio_test he_ltf 2\nuart:~$ wifi_radio_test he_gi 2\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num -1\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Updating Sysbuild Configuration for Key Revocation\nDESCRIPTION: Changes the signing key file to use a different private key for testing key revocation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_signature_keys.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nSB_CONFIG_SECURE_BOOT_SIGNING_KEY_FILE=\"/path/to/priv_c.pem\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Central UART Project with Zephyr RTOS\nDESCRIPTION: This CMake script sets up the build environment for the central_uart project. It specifies the minimum CMake version, finds the Zephyr package, and defines the project name and source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_uart/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(central_uart)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target\nDESCRIPTION: This snippet defines a variable to store the paths to the source files, then it adds those source files to the application's target. It locates the main application source file and a test file for the asynchronous UART API within the Zephyr base directory and includes them in the project build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/uart/uart_async_api/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/uart/uart_async_api/src/main.c ${ZEPHYR_BASE}/tests/drivers/uart/uart_async_api/src/test_uart_async.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Location with Wi-Fi and Cellular Positioning in MoSh\nDESCRIPTION: Shows how to get the device's location using Wi-Fi positioning, falling back to cellular if not found, with specific timeout for Wi-Fi.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nlocation get --method wifi --wifi_timeout 60 --method cellular\n```\n\n----------------------------------------\n\nTITLE: Kconfig SSED Core Configuration Options\nDESCRIPTION: Primary configuration options for Synchronized Sleepy End Devices, including CSL receiver mode, auto-synchronization, timeout, and channel settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/sed_ssed.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_OPENTHREAD_CSL_RECEIVER\nCONFIG_OPENTHREAD_CSL_AUTO_SYNC\nCONFIG_OPENTHREAD_CSL_TIMEOUT\nCONFIG_OPENTHREAD_CSL_CHANNEL\n```\n\n----------------------------------------\n\nTITLE: Defining the Project\nDESCRIPTION: This snippet defines the project name as 'idle' for the CMake build system, establishing the context for the build configuration and linking sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(idle)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Executing Device Reset with nRF Util\nDESCRIPTION: Command to trigger a specific reset type on an nRF54H20 SoC-based device using nrfutil. Requires specifying the device serial number and desired reset type.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_architecture_reset.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device reset --serial-number <blah> --reset-kind <reset-kind>\n```\n\n----------------------------------------\n\nTITLE: Continuous OFDM TX Traffic Sequence in VHT 11ac Mode\nDESCRIPTION: Complete command sequence for running a continuous OFDM TX traffic test in VHT 802.11ac mode. The configuration uses channel 40, VHT frame format, 4000 byte payload, 200 μs gap, and MCS7 data rate with long guard for a 73% duty cycle.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 40\nuart:~$ wifi_radio_test tx_pkt_tput_mode 2\nuart:~$ wifi_radio_test tx_pkt_mcs 7\nuart:~$ wifi_radio_test tx_pkt_len 4000\nuart:~$ wifi_radio_test tx_pkt_sgi 0\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num -1\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Defining a DFU Cache Partition in Device Tree\nDESCRIPTION: A device tree snippet for defining a DFU cache partition. The partition number is represented by 'N', which should be replaced with an actual number (1-n). The partition is defined with a specific address and size in memory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_push.rst#2025-04-21_snippet_0\n\nLANGUAGE: dts\nCODE:\n```\ndfu_cache_partition_N: partition@a000 {\n\treg = <0xa000 DT_SIZE_K(1024)>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Boot Settings in Sysbuild\nDESCRIPTION: Kconfig options for configuring secure boot signing and public key settings at the sysbuild level.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_sysbuild.rst#2025-04-21_snippet_2\n\nLANGUAGE: kconfig\nCODE:\n```\nSB_CONFIG_SECURE_BOOT_SIGNING_COMMAND\nSB_CONFIG_SECURE_BOOT_SIGNING_PUBLIC_KEY\nSB_CONFIG_SECURE_BOOT_PUBLIC_KEY_FILES\n```\n\n----------------------------------------\n\nTITLE: Setting Power Source and Battery Level with LwM2M Carrier Library in C\nDESCRIPTION: Example of updating device power source and battery level information using the LwM2M carrier library functions. The application can indicate that it uses an internal battery as power source and report the current battery level to the operator's server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/app_integration.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nlwm2m_carrier_avail_power_sources_set(LWM2M_CARRIER_POWER_SOURCE_INTERNAL_BATTERY);\nlwm2m_carrier_battery_level_set(/* current battery level */)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Location Value with Response\nDESCRIPTION: This command sets the global location value of the Generic Location state and waits for a response. It requires latitude, longitude, and altitude parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_loc_cli.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models loc global-set <Lat> <Long> <Alt>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ANCS Client Peripheral Project\nDESCRIPTION: Sets up the CMake environment for building an ANCS client peripheral application. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, and includes all source files from the src directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ancs_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(peripheral_ancs_client)\n\nFILE(GLOB app_sources src/*.c)\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE ${app_sources})\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA Support with Kconfig for C\nDESCRIPTION: This snippet describes how to enable RSA support in the nrfconnect SDK. It lists the supported backends and their respective key sizes, emphasizing that specific Kconfig options must be set for RSA functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/backend_config.rst#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nTo configure Rivest-Shamir-Adleman (RSA) support, set the :kconfig:option:`CONFIG_MBEDTLS_RSA_C` Kconfig option.\n```\n\n----------------------------------------\n\nTITLE: PPP Control Command Syntax\nDESCRIPTION: AT command syntax for starting and stopping PPP operations. The op parameter accepts 0 to stop PPP and 1 to start PPP.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/PPP_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: at-commands\nCODE:\n```\n#XPPP=<op>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Memfault BLE Gateway Script\nDESCRIPTION: This snippet installs the required dependencies for the Memfault BLE gateway script using pip. It is essential to run this command in the root directory of the NCS (Nordic Connect SDK) to ensure all necessary libraries are available for the script to function correctly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_mds/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install --user -r scripts/memfault/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Matter Log Level to Error\nDESCRIPTION: This snippet shows how to set the log level for the Matter module to ERROR using the `CONFIG_MATTER_LOG_LEVEL_ERR` Kconfig option. This allows displaying error log messages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_12\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_MATTER_LOG_LEVEL_ERR`\"\n```\n\n----------------------------------------\n\nTITLE: CMUX Basic Usage Example\nDESCRIPTION: Example showing basic CMUX usage without PPP enabled, including checking configuration and starting CMUX.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CMUX_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT\nCODE:\n```\nAT#XCMUX?\n\n#XCMUX: 1,1\n\nOK\nAT#XCMUX\n\nOK\n// Here, CMUX is started and communication can now happen only through it (until a reset).\n// Open the AT channel, which is the only one, to continue exchanging AT data.\nAT\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Building with Extra Configuration File\nDESCRIPTION: Command line parameter to include additional sysbuild Kconfig values from suit_mpi.conf file during build\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n-DSB_EXTRA_CONF_FILE=\"suit_mpi.conf\"\n```\n\n----------------------------------------\n\nTITLE: SUIT Parameter Override Configuration\nDESCRIPTION: YAML configuration showing the vendor and class identifier overrides in the SUIT manifest.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_customize_qsg.rst#2025-04-21_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n- suit-directive-override-parameters:\n    suit-parameter-vendor-identifier:\n       RFC4122_UUID: ACME Corp              # Changed vendor-identifier value\n    suit-parameter-class-identifier:\n       RFC4122_UUID:                        # Changed class-identifier values\n         namespace: ACME Corp\n         name: Light bulb\n```\n\n----------------------------------------\n\nTITLE: Registering Fault Handler on Initialization - C\nDESCRIPTION: This snippet demonstrates how to register the fault handler function using the nrf_modem_lib_init function during library initialization. The application can specify the fault handler behavior through various Kconfig options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_fault.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Register the fault handler during initialization\nnrf_modem_lib_init(); // Registers the nrf_modem_fault_handler function\n\n// Example Kconfig options configured during initialization:\n// CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING\n// CONFIG_NRF_MODEM_LIB_ON_FAULT_RESET_MODEM\n// CONFIG_NRF_MODEM_LIB_ON_FAULT_APPLICATION_SPECIFIC\n// CONFIG_NRF_MODEM_LIB_ON_FAULT_LTE_NET_IF\n```\n\n----------------------------------------\n\nTITLE: Displaying Unsupported Build Type Error in Console\nDESCRIPTION: This snippet shows the console output when a selected board does not support the chosen build type. It uses the example of the 'nus' build type for the nrf_machine_learning_app application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/cmake/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nConfiguration file for build type ``nus`` is missing.\n```\n\n----------------------------------------\n\nTITLE: FLOAT to SFLOAT Conversion API in C\nDESCRIPTION: This library offers an API to convert IEEE 754 FLOAT type values to SFLOAT type values. This conversion may result in a loss of resolution, though it will preserve at least three significant figures of the original FLOAT value.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/sfloat.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n// Example function prototype for converting FLOAT to SFLOAT\nfloat_t float_to_sfloat(float value);\n```\n\n----------------------------------------\n\nTITLE: Building for nRF5340 DK with nRF21540 EK Shield (Console)\nDESCRIPTION: Command-line instruction for building an application for nRF5340 DK (multicore board) with the nRF21540 EK shield using west build. This passes the SHIELD variable to all images built by the command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/21540ek_dev_guide.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf21540ek\n```\n\n----------------------------------------\n\nTITLE: Uploading Signed Image with MCUmgr\nDESCRIPTION: This snippet outlines the command to upload a signed image to the nRF5340 device using MCUmgr. The command requires specifying a connection string and image to be updated, with options for internal and external updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/extxip_smp_svr/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsudo mcumgr <connection string> image upload build/zephyr/<signed_upload.bin> -e -n <image>\n```\n\n----------------------------------------\n\nTITLE: Running the Traffic Generator Server for Wi-Fi TWT Sample\nDESCRIPTION: Command to run the Python-based traffic generator server that should be executed on a PC connected to the same access point as the device. The server generates test traffic for performance measurement.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/twt/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npython3 traffic_gen_server.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Sensor Handler in C\nDESCRIPTION: Example code showing implementation of a sensor handler function that updates a sensor value resource in LwM2M. Uses work queue for periodic updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_client_utils.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstatic void my_sensor_handler(struct work *work)\n{\n   static double sensor_value = 0.0;\n\n   /* Demo: change the sensor value */\n   sensor_value += 0.1;\n\n   /* Return sensor value for the LwM2M library */\n   lwm2m_set_f64(&LWM2M_OBJ(3300, 0, 5700), sensor_value);\n\n   /* Schedule the next update */\n   k_work_schedule(work, K_MINUTES(2));\n}\n\nstatic K_WORK_DELAYABLE_DEFINE(my_sensor_work, my_sensor_handler);\n```\n\n----------------------------------------\n\nTITLE: Creating and Submitting a Fixed-Size Event\nDESCRIPTION: Example of how to allocate a new event, set its data fields, and submit it using the APP_EVENT_SUBMIT macro.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/app_event_manager.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n/* Allocate event. */\nstruct sample_event *event = new_sample_event();\n\n/* Write data to datafields. */\nevent->value1 = value1;\nevent->value2 = value2;\nevent->value3 = value3;\n\n/* Submit event. */\nAPP_EVENT_SUBMIT(event);\n```\n\n----------------------------------------\n\nTITLE: Enabling AT Command Notifications\nDESCRIPTION: Command to enable notifications for AT commands in the shell.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_shell.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nat events_enable\n```\n\n----------------------------------------\n\nTITLE: Configuring nrf_wifi_scan CMake Project\nDESCRIPTION: Defines the CMake configuration for a Nordic Semiconductor WiFi scanning application. Sets the minimum CMake version, finds the Zephyr package, includes networking headers, and specifies the main.c source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/scan/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_scan)\n\ntarget_include_directories(app PUBLIC ${ZEPHYR_BASE}/subsys/net/ip)\n\ntarget_sources(app PRIVATE\n\tsrc/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Using MQTT Unsubscribe with nRF9160 SLM\nDESCRIPTION: Example demonstrating how to unsubscribe from an MQTT topic using the #XMQTTUNSUB command. After unsubscribing from 'nrf91/slm/mqtt/topic0', the response includes the unsubscribe event notification with status code 0 indicating success.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/MQTT_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nAT#XMQTTUNSUB=\"nrf91/slm/mqtt/topic0\"\nOK\n#XMQTTEVT: 8,0\n```\n\n----------------------------------------\n\nTITLE: Getting All Instances of Generic Location Client Model\nDESCRIPTION: This command prints all instances of the Generic Location Client model available on the device. It is helpful for users to view what instances are available for interaction.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_loc_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models loc instance get-all\n\n```\n\n----------------------------------------\n\nTITLE: Device Registration - Leshan Demo Server\nDESCRIPTION: Step-by-step process for registering a device to the Leshan Demo Server using PSK authentication, requiring device IMEI and a hexadecimal key\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/lwm2m_common_server_setup.txt#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nEndpoint - urn\\:imei\\:*your Device IMEI*\nSecurity Mode - psk\nIdentity: - urn\\:imei\\:*your Device IMEI*\nKey - your key (for example, \"000102030405060708090a0b0c0d0e0f\")\n```\n\n----------------------------------------\n\nTITLE: Building Matter Bridge Application with DFU over Bluetooth SMP\nDESCRIPTION: Command for building the Matter bridge application with support for Device Firmware Upgrade over Bluetooth SMP, using west build tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_CHIP_DFU_OVER_BT_SMP=y\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Callback Function for Matter (C++)\nDESCRIPTION: This code snippet provides an example of how to create a custom callback function for a test event trigger.  The callback function takes a TriggerValue as input and returns a CHIP_ERROR code.  This function defines the behavior of the device when a specific event trigger is activated and should be implemented in a thread-safe manner.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/test_event_triggers.rst#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nCHIP_ERROR MyFunctionCallback(Nrf::Matter::TestEventTrigger::TriggerValue value)\n{\n   /* Define the required behavior of the device here. */\n\n   return CHIP_NO_ERROR;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling LE Pairing Authentication with LE Pairing Responder Model in RST\nDESCRIPTION: Explains how to enable LE pairing authentication with the LE Pairing Responder model support. It involves setting the EXTRA_CONF_FILE to overlay-smp-bt-auth.conf when building the sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/dfu/distributor/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\nTo enable the LE pairing authentication with the LE Pairing Responder model support, set :makevar:`EXTRA_CONF_FILE` to :file:`overlay-smp-bt-auth.conf` file when building the sample.\n```\n\n----------------------------------------\n\nTITLE: Verifying nRF54H20 Lifecycle State\nDESCRIPTION: Command to discover and display the current lifecycle state of the nRF54H20 device using nRF Util. Shows whether the device is in EMPTY or RoT state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-adac-discovery --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Publishing to Non-AWS Topics - C\nDESCRIPTION: This C code snippet demonstrates how to publish messages to a custom MQTT topic. Ensure the aws_iot_topic_data structure is populated correctly with the desired topic before sending.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n#define MY_CUSTOM_TOPIC_1 \"my-custom-topic/example\"\n#define MY_CUSTOM_TOPIC_1_IDX 0\n\nstatic struct aws_iot_topic_data pub_topics[1] = {\n\t[MY_CUSTOM_TOPIC_1_IDX].str = MY_CUSTOM_TOPIC_1,\n\t[MY_CUSTOM_TOPIC_1_IDX].len = strlen(MY_CUSTOM_TOPIC_1),\n};\n\nstruct aws_iot_data msg = {\n\t/* Pointer to payload */\n\t.ptr = buf,\n\n\t/* Length of payload */\n\t.len = len,\n\n\t /* Message ID , if not set it will be provided by the AWS IoT library */\n\t.message_id = id,\n\n\t/* Quality of Service level */\n\t.qos = MQTT_QOS_0_AT_MOST_ONCE,\n\n\t/* \"my-custom-topic/example\" */\n\t.topic = pub_topics[MY_CUSTOM_TOPIC_1_IDX]\n};\n\nerr = aws_iot_send(&msg);\nif (err) {\n\tLOG_ERR(\"aws_iot_send, error: %d\", err);\n\treturn err;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling the Watchdog Peripheral\nDESCRIPTION: Details the process of enabling and disabling the Global Watchdog module for Matter samples, with specific emphasis on ensuring all necessary watchdog sources are installed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/watchdog.rst#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nif(!Nrf::Watchdog::Enable())\n{\n    return false;\n}\n\n// Disable the Global watchdog\nNrf::Watchdog::Disable();\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot with External Crypto\nDESCRIPTION: This command builds the project with MCUboot enabled and configures it to use the cryptographic functionality exposed by the immutable bootloader, reducing flash memory usage. The mcuboot_FILE_SUFFIX and mcuboot_EXTRA_CONF_FILE options are used to apply Kconfig fragments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n\"west build -b nrf52840dk/nrf52840 zephyr/samples/hello_world -- \\\n      -DSB_CONFIG_SECURE_BOOT_APPCORE=y \\\n      -DSB_CONFIG_BOOTLOADER_MCUBOOT=y \\\n      -Dmcuboot_FILE_SUFFIX=minimal \\\n      -Dmcuboot_EXTRA_CONF_FILE=external_crypto.conf\"\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr RTOS Package\nDESCRIPTION: Locates the Zephyr RTOS package using environment variables, which is required for building the project\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/radio_coex_1wire/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Sending MLE Link Probe Messages\nDESCRIPTION: Sends MLE Link Probe messages to a peer device for link metrics measurements as part of the Forward Tracking Series.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot linkmetrics probe fe80:0:0:0:10b1:93ea:c0ee:eeb7 1 10\nDone\n```\n\n----------------------------------------\n\nTITLE: Battery Service (BAS) Event Table in RST\nDESCRIPTION: Table showing event propagation for the Battery Service (BAS) module, including battery level events and module state events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. table_bas_start\n\n+-----------------------------------------------+-------------------------+-------------+------------------------+---------------------------------------------+\n| Source Module                                 | Input Event             | This Module | Output Event           | Sink Module                                 |\n+===============================================+=========================+=============+========================+=============================================+\n| :ref:`nrf_desktop_battery_meas`               | ``battery_level_event`` | ``bas``     |                        |                                             |\n+-----------------------------------------------+-------------------------+             |                        |                                             |\n| :ref:`nrf_desktop_module_state_event_sources` | ``module_state_event``  |             |                        |                                             |\n+-----------------------------------------------+-------------------------+             +------------------------+---------------------------------------------+\n|                                               |                         |             | ``module_state_event`` | :ref:`nrf_desktop_module_state_event_sinks` |\n+-----------------------------------------------+-------------------------+-------------+------------------------+---------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Viewing Predefined Keysets with chip-tool\nDESCRIPTION: This command is used to display the available keysets in the Matter framework, detailing their key policy associated with each KeySet ID. This helps ensure the correct keys are used for secure communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n./chip-tool groupsettings show-keysets\n    ...\n      +-------------------------------------------------------------------------------------+\n      | Available KeySets :                                                                 |\n      +-------------------------------------------------------------------------------------+\n      | KeySet Id   |   Key Policy                                                          |\n      | 0x1a3           Trust First                                                         |\n      | 0x1a2           Cache and Sync                                                      |\n      | 0x1a1           Cache and Sync                                                      |\n      +-------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Private Keys for nRF54H20 SoC\nDESCRIPTION: Commands to generate Ed25519 private keys for different components of the nRF54H20 SoC: application core, radio core, and OEM root.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_keys.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl genpkey -algorithm Ed25519 -out MANIFEST_APPLICATION_GEN1_priv.pem\nopenssl genpkey -algorithm Ed25519 -out MANIFEST_RADIOCORE_GEN1_priv.pem\nopenssl genpkey -algorithm Ed25519 -out MANIFEST_OEM_ROOT_GEN1_priv.pem\n```\n\n----------------------------------------\n\nTITLE: Retrieving EUI64 Identifier in NCP Sample\nDESCRIPTION: Command to get the hardware address (EUI64) of the Joiner device in the OpenThread NCP sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nwpanctl:joiner_if> getprop NCP:HardwareAddress\n```\n\n----------------------------------------\n\nTITLE: Testing TCP Client Service\nDESCRIPTION: Commands for using the TCP client service including connection establishment, data transfer, and disconnection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_2\n\nLANGUAGE: at-commands\nCODE:\n```\nAT#XTCPCLI=1,\"example.com\",1234\nAT#XTCPCLI?\nAT#XTCPSEND=\"Test TCP\"\nAT#XTCPCLI=0\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This command adds the specified directories to the include path for the `app` target.  The `target_include_directories` command marks these directories as `PUBLIC`, making them available to other targets that depend on `app`. These include directories are necessary to resolve header files used in the project, specifically for networking and WiFi functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/thread_coex/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_include_directories(app PUBLIC\n\t${ZEPHYR_BASE}/subsys/net/ip\n\t${ZEPHYR_BASE}/drivers/wifi/nrf_wifi/inc/\n)\"\n```\n\n----------------------------------------\n\nTITLE: Disabling ADC Peripheral in Devicetree for Power Optimization\nDESCRIPTION: Example of how to disable the ADC peripheral in the board's devicetree overlay to reduce power consumption when the peripheral is not needed by the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/optimizing/power_general.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n&adc {\n    status = \"disabled\";\n};\n```\n\n----------------------------------------\n\nTITLE: LED Toggle Timer Implementation in C\nDESCRIPTION: Implements precise LED timing control using GPIOTE peripheral and PPI for accurate synchronization.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_time_sync/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n// timed_led_toggle.c\n// Uses GPIOTE and PPI peripherals\n// Provides accurate LED timing control\n```\n\n----------------------------------------\n\nTITLE: Reading On/Off Attribute with CHIP Tool\nDESCRIPTION: Command to read the on-off attribute from a bridged device endpoint using CHIP Tool\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/matter_bridge_testing.txt#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./chip-tool onoff read on-off <bridge_node_ID> <bridged_device_endpoint_ID>\n```\n\n----------------------------------------\n\nTITLE: Building Separate Core Images via Command Line\nDESCRIPTION: Series of commands to build and flash separate images for application and FLPR cores using west build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_flpr.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -S nordic-flpr --no-sysbuild\nwest flash\nwest build -p -b nrf54h20dk/nrf54h20/cpuflpr --no-sysbuild\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Performing Factory Reset with nRF Modem AT Commands in C\nDESCRIPTION: Shows how to perform a factory reset using nRF Modem AT commands, replacing the deprecated lte_lc_factory_reset function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_15\n\nLANGUAGE: C\nCODE:\n```\n#include <nrf_modem_at.h>\n\nerr = nrf_modem_at_printf(\"AT%%XFACTORYRESET=0\");\n```\n\n----------------------------------------\n\nTITLE: Decoding CBOR Data with zcbor in C\nDESCRIPTION: Example of using zcbor for decoding CBOR data with a map decode specification that extracts image number and binary data. The code demonstrates how to set up decoding keys and process a CBOR map.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_1.x_to_2.x.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint image;\nstruct zcbor_string zst;\nstruct zcbor_map_decode_key_val image_upload_decode[] = {\n        ZCBOR_MAP_DECODE_KEY_VAL(image, zcbor_int32_decode, &image),\n        ZCBOR_MAP_DECODE_KEY_VAL(data, zcbor_bstr_decode, &zst),\n};\nok = zcbor_map_decode_bulk(zsd, image_upload_decode,\n                           ARRAY_SIZE(image_upload_decode), &decoded) == 0;\n...\n```\n\n----------------------------------------\n\nTITLE: Minimal Zephyr Logs Example\nDESCRIPTION: Example output of minimal Zephyr logs showing different message severity levels (Debug, Info, Warning, Error).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/logging.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nD: Debug message\nI: Info message\nW: Warning message\nE: Error message\n```\n\n----------------------------------------\n\nTITLE: Defining Custom West Manifest for NCS Application\nDESCRIPTION: YAML configuration for a custom west.yml manifest file that imports the nRF Connect SDK. This allows creating a custom application repository that uses NCS as a dependency.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/adding_code.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example application-specific west.yml, using manifest imports.\nmanifest:\n  remotes:\n    - name: ncs\n      url-base: https://github.com/nrfconnect\n  projects:\n    - name: nrf\n      repo-path: sdk-nrf\n      remote: ncs\n      revision: 2.9.0-nRF54H20-1\n      import: true\n  self:\n    path: application\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Type Source File with Logging Function\nDESCRIPTION: Implementation of an event type source file that includes a logging function and defines the event type with the APP_EVENT_TYPE_DEFINE macro and custom flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/app_event_manager.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#include \"sample_event.h\"\n\nstatic void log_sample_event(const struct app_event_header *aeh)\n{\n\tstruct sample_event *event = cast_sample_event(aeh);\n\n\tAPP_EVENT_MANAGER_LOG(aeh, \"val1=%d val2=%d val3=%d\", event->value1,\n\t\t\tevent->value2, event->value3);\n}\n\nAPP_EVENT_TYPE_DEFINE(sample_event,\t\t\t\t\t\t/* Unique event name. */\n\t     log_sample_event,\t\t\t\t\t\t/* Function logging event data. */\n\t     NULL,\t\t\t\t\t\t\t/* No event info provided. */\n\t     APP_EVENT_FLAGS_CREATE(APP_EVENT_TYPE_FLAGS_INIT_LOG_ENABLE));\t/* Flags managing event type. */\n```\n\n----------------------------------------\n\nTITLE: Configuring Nordic SoC Build in Zephyr - CMake\nDESCRIPTION: This CMake script configures the Zephyr build system for Nordic Semiconductor's nRF54 series SoCs. It includes library sources and directories for these SoCs and sets various compile-time definitions based on the SOC configuration options. Dependencies include the Zephyr base directory and Nordic SoC specific directories. It expects SOC configuration flags to determine which definitions are applied.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/nrf54l/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(\\n  ${ZEPHYR_BASE}/soc/nordic/nrf54l/soc.c\\n  )\\nzephyr_include_directories(${ZEPHYR_BASE}/soc/nordic/nrf54l)\\nadd_subdirectory(${ZEPHYR_BASE}/soc/nordic/common ${CMAKE_BINARY_DIR}/common)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_compile_definitions_ifdef(CONFIG_SOC_NRF54LM20A_ENGA NRF_SKIP_TAMPC_SETUP)\\nzephyr_compile_definitions_ifdef(CONFIG_SOC_NRF54LM20A_ENGA NRF54LM20A_ENGA_XXAA)\\nzephyr_compile_definitions_ifdef(CONFIG_SOC_NRF54LM20A_ENGA_CPUAPP  NRF_APPLICATION)\\nzephyr_compile_definitions_ifdef(CONFIG_SOC_NRF54LM20A_ENGA_CPUFLPR NRF_FLPR)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_compile_definitions_ifdef(CONFIG_SOC_NRF54LV10A_ENGA NRF_SKIP_TAMPC_SETUP)\\nzephyr_compile_definitions_ifdef(CONFIG_SOC_NRF54LV10A_ENGA NRF54LV10A_ENGA_XXAA)\\nzephyr_compile_definitions_ifdef(CONFIG_SOC_NRF54LV10A_ENGA_CPUAPP  NRF_APPLICATION)\\nzephyr_compile_definitions_ifdef(CONFIG_SOC_NRF54LV10A_ENGA_CPUFLPR NRF_FLPR)\n```\n\n----------------------------------------\n\nTITLE: Generating and Managing Custom Keysets with chip-tool\nDESCRIPTION: This command sequence demonstrates creating a custom keyset and binding it to a group for secure communications. This is essential for ensuring that device communication is properly secured with the correct key policies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n./chip-tool groupsettings add-keysets 0xabcd 0 3330000 hex:0123456789abcdef0123456789abcdef\n./chip-tool groupsettings bind-keyset 0xdcba 0xabcd\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting with Persistent Key using PSA API in C\nDESCRIPTION: This snippet shows how to use the persistent key for encryption and decryption of a message. It demonstrates that the key can be successfully retrieved from storage and used for cryptographic operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/persistent_key_usage/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatus = psa_cipher_encrypt(\n    key_handle, PSA_ALG_CTR, iv, sizeof(iv),\n    plaintext, sizeof(plaintext), ciphertext, sizeof(ciphertext), &ciphertext_length\n);\n\nstatus = psa_cipher_decrypt(\n    key_handle, PSA_ALG_CTR, iv, sizeof(iv),\n    ciphertext, ciphertext_length, decrypted, sizeof(decrypted), &decrypted_length\n);\n```\n\n----------------------------------------\n\nTITLE: Device Reboot Command\nDESCRIPTION: Command to reboot the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_55\n\nLANGUAGE: plaintext\nCODE:\n```\ncustom lreboot\n```\n\n----------------------------------------\n\nTITLE: Building Matter Template with Internal Memory\nDESCRIPTION: Command to build the Matter template sample for nRF54L15 DK using only internal RRAM and supporting DFU features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/template/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54l15dk/nrf54l15/cpuapp -- -DCONFIG_CHIP_DFU_OVER_BT_SMP=y -DFILE_SUFFIX=internal\n```\n\n----------------------------------------\n\nTITLE: Disabling Module Logging in Matter SDK - C\nDESCRIPTION: This code snippet shows how to completely disable logging for the Bluetooth LE module by setting its enabler to 0, further optimizing memory usage. Ensure that the Matter SDK's LogModule enumeration is included in the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nCHIP_CONFIG_LOG_MODULE_Ble 0\n```\n\n----------------------------------------\n\nTITLE: Console Output for Bootloader Initialization\nDESCRIPTION: This code snippet represents the expected console output during the initialization phase of the network core bootloader. It is crucial for debugging and verifying that the bootloader is functioning correctly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/netboot/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nI: Starting bootloader\nI: Primary image: magic=unset, swap_type=0x1, copy_done=0x3, image_ok=0x3\nI: Secondary image: magic=unset, swap_type=0x1, copy_done=0x3, image_ok=0x3\nI: Boot source: none\nI: Swap type: none\nI: Bootloader chainload address offset: 0xc000\nI: Jumping to the first image slot\n*** Booting Zephyr OS build v2.7.99-ncs1-2195-g186cf4539e5a  ***\n```\n\n----------------------------------------\n\nTITLE: Configure Additional TF-M Build Settings\nDESCRIPTION: This snippet sets various additional configurations necessary for TF-M builds, particularly focusing on the use of MBEDTLS and ensuring proper handling of cryptographic options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/tfm/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CONFIG_MBEDTLS_PSA_CRYPTO_SPM                   True)\nset(CONFIG_MBEDTLS_LEGACY_CRYPTO_C                  False)\nset(CONFIG_MBEDTLS_NO_PLATFORM_ENTROPY              False)\nset(CONFIG_MBEDTLS_MD_C                             False)\nif(CONFIG_HAS_HW_NRF_CC3XX)\n  set(CONFIG_NRF_CC3XX_PLATFORM                     True)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Delayed Work in C\nDESCRIPTION: New macro added in Zephyr for defining delayed work structures.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nK_DELAYED_WORK_DEFINE(work_name)\n```\n\n----------------------------------------\n\nTITLE: Loading Device Root Key (KDR) in C\nDESCRIPTION: This C function loads the Device Root Key (KDR) to a specific register during the boot process. It is used in devices with the Arm CryptoCell CC310. The nRF Secure Immutable Bootloader uses this function automatically if `CONFIG_HW_UNIQUE_KEY` is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/hw_unique_key.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n:c:func:`hw_unique_key_load_kdr`\n```\n\n----------------------------------------\n\nTITLE: Adding Banner Source to Zephyr Build\nDESCRIPTION: CMake command to include banner.c source file in the Zephyr build system compilation. Uses zephyr_sources() function to add the source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/boot_banner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources(banner.c)\n```\n\n----------------------------------------\n\nTITLE: Stalling CPU Until VPR Timer Event in C\nDESCRIPTION: Functions that pause CPU execution until a timer event pulse is generated, for either simple or combined counter configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_csr_vtim_simple_wait_set()\nnrf_vpr_csr_vtim_combined_wait_trigger()\n```\n\n----------------------------------------\n\nTITLE: PDN Sample Console Output\nDESCRIPTION: Example console output showing the initialization of a PDN connection, event handling for PDP contexts, and network information retrieval including DNS addresses and interface configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/pdn/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK v2.9.99-0f7da9c375d1 ***\n*** Using Zephyr OS v3.7.99-2d1e173dfed0 ***\nPDN sample started\nEvent: PDP context 0 activated\nDefault APN is telenor.smart\nCreated new PDP context 1\nPDP context 1 configured: APN telenor.smart, Family IPV4V6\nEvent: PDP context 1 activated\nEvent: PDP context 0 IPv6 up\nEvent: PDP context 1 IPv6 up\nPDP Context 0, PDN ID 0\nPDP Context 1, PDN ID 0\nDynamic info for cid 0:\nPrimary IPv4 DNS address: 111.222.233.4\nSecondary IPv4 DNS address: 111.222.233.4\nPrimary IPv6 DNS address: 1111:2222:3:fff::55\nSecondary IPv6 DNS address: 1111:2222:3:fff::55\nIPv4 MTU: 1500, IPv6 MTU: 1500\nDynamic info for cid 1:\nPrimary IPv4 DNS address: 111.222.233.4\nSecondary IPv4 DNS address: 111.222.233.4\nPrimary IPv6 DNS address: 1111:2222:3:fff::55\nSecondary IPv6 DNS address: 1111:2222:3:fff::55\nIPv4 MTU: 1500, IPv6 MTU: 1500\n\nInterface addresses:\nl0: (AF_INET) 10.22.233.44\nl0: (AF_INET6) aaaa::bbbb:cccc\nl0: (AF_INET6) aaa:bbbbb:cccc:dddd::eeee:2cd2\n\nEvent: PDP context 0 network detach\nEvent: PDP context 1 network detach\nEvent: PDP context 1 context destroyed\nBye\n```\n\n----------------------------------------\n\nTITLE: Configuring Mbed TLS Header - Kconfig\nDESCRIPTION: This Kconfig snippet defines the necessary configuration settings for using a custom Mbed TLS header within the nRF project. It instructs how to disable default configurations and specify the custom header filename.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/mbed_tls_header.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_GENERATE_MBEDTLS_CFG_FILE=n\nCONFIG_MBEDTLS_CFG_FILE=\"custom-name-nrf-config.h\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wi-Fi Radio Test Statistics\nDESCRIPTION: Command to get statistics from the Wi-Fi radio test, including packet reception counts.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test get_stats\n```\n\n----------------------------------------\n\nTITLE: Setting Module State to Ready\nDESCRIPTION: Function call to set the module state to ready, which submits the required module_state_event to initialize CAF modules. This should be called after Application Event Manager is initialized.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/caf_overview.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nmodule_set_state(MODULE_STATE_READY);\n```\n\n----------------------------------------\n\nTITLE: Generic Power Level to Generic OnOff Mapping\nDESCRIPTION: This code snippet shows how the Generic OnOff state is derived from the Generic Power Level state. If the Generic Power Level is greater than 0, the Generic OnOff state is On; otherwise, it's Off.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_plvl_srv.rst#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n\"Generic OnOff = Generic Power Level > 0\"\n```\n\n----------------------------------------\n\nTITLE: LED State Management Implementation in C++\nDESCRIPTION: Implements LED state update handling through event posting and processing mechanisms.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nvoid AppTask::LEDStateUpdateHandler(LEDWidget &ledWidget)\n{\n  AppEvent event;\n  event.Type = AppEventType::UpdateLedState;\n  event.Handler = UpdateLedStateEventHandler;\n  event.UpdateLedStateEvent.LedWidget = &ledWidget;\n  PostEvent(event);\n}\n\nvoid AppTask::UpdateLedStateEventHandler(const AppEvent &event)\n{\n  if (event.Type == AppEventType::UpdateLedState) {\n    event.UpdateLedStateEvent.LedWidget->UpdateState();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting null/undefined values in zcbor (C)\nDESCRIPTION: This code snippet demonstrates how to check for null values in a zcbor stream since there are no direct replacements for cbor_value_is_null() and cbor_value_is_undefined() functions. The pattern shows error handling and type checking.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_1.x_to_2.x.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nbool ok;\n...\n/* Make sure that not in error state first */\nif (zs->constant_state->error != 0) {\n    /* Already in error */\n    ...\n}\nok = zcbor_nil_decode(zs, NULL);\nif (!ok && zs->constant_state->error == ZCBOR_ERR_WRONG_TYPE) {\n    /* Process non-NULL element */\n    zcbor_pop_error(zs);\n    ...\n} else if (!ok) {\n    /* Other error */\n    ...\n}\n/* Successfully decoded NULL element in CBOR stream */\n...\n```\n\n----------------------------------------\n\nTITLE: Enabling FFDH Key Agreement Algorithm in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for the FFDH (Finite Field Diffie-Hellman) key agreement algorithm within the PSA Cryptography API. This allows devices to establish shared secrets using finite field cryptography.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_FFDH`\"\n```\n\n----------------------------------------\n\nTITLE: Performing Authenticated Encryption and Decryption\nDESCRIPTION: This snippet describes the process of encrypting and decrypting a sample plaintext using Chacha20-Poly1305. It includes generating a random nonce and performing authenticated encryption and decryption.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/chachapoly/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n2. Encryption and decryption of a sample plaintext:\n\n   a. A random nonce is generated.\n   #. Authenticated encryption is performed.\n   #. Authenticated decryption is performed.\n```\n\n----------------------------------------\n\nTITLE: Enabling ECDH Key Agreement Algorithm in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for the ECDH (Elliptic Curve Diffie-Hellman) key agreement algorithm within the PSA Cryptography API. Enabling this option allows devices to establish shared secrets using elliptic curve cryptography.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_ECDH`\"\n```\n\n----------------------------------------\n\nTITLE: Entropy Remote Init Function\nDESCRIPTION: The entropy_remote_init function is used for initializing the entropy driver on the network core from the application core using RPC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/entropy_nrf53/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\":c:func:`entropy_remote_init`\"\n```\n\n----------------------------------------\n\nTITLE: Vendor-Specific Service UUID Configuration\nDESCRIPTION: Defines the unique 128-bit service UUID for the power profiling Bluetooth Low Energy service, enabling custom communication protocols.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_power_profiling/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n\"00001630-1212-EFDE-1523-785FEABCD123\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VIO Pin Toggle with VTIM Event in C\nDESCRIPTION: This C code snippet demonstrates toggling a VIO pin using VTIM events. It configures VTIM to generate an event every 64 million CPU cycles to toggle pin 9, mapped to P2.09, using buffered output. Dependencies include proper setup of the nRF hardware, ensuring GPIO pin is correctly mapped, real-time peripheral enablement, and VTIM counter configuration. The output is a toggled GPIO pin synchronized with the VTIM event.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n   // Configure ownership of P2.09 pin (VIO pin 9) - nRF54L15 specific\n   nrf_gpio_pin_control_select(NRF_GPIO_PIN_MAP(2, 9), NRF_GPIO_PIN_SEL_VPR);\n\n   // Enable real-time peripherals\n   nrf_vpr_csr_rtperiph_enable_set(true);\n\n   // Configure counters to reload and combined mode\n   nrf_vpr_csr_vtim_count_mode_set(0, NRF_VPR_CSR_VTIM_COUNT_RELOAD);\n   nrf_vpr_csr_vtim_count_mode_set(1, NRF_VPR_CSR_VTIM_COUNT_TRIGGER_COMBINED);\n\n   // Configure VIO pin 9 as output\n   nrf_vpr_csr_vio_dir_set(1 << 9);\n\n   // Configure reload value\n   nrf_vpr_csr_vtim_combined_counter_top_set(64000000);\n\n   // Start the timer\n   nrf_vpr_csr_vtim_combined_counter_set(64000000);\n\n   while (true)\n   {\n      // Configure buffer output to toggle pin 9\n      nrf_vpr_csr_vio_out_toggle_buffered_set(1 << 9);\n\n      // CPU is stalled until output buffer is clean.\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Peripheral CTS Client Application in nRF Connect SDK\nDESCRIPTION: Sets up the build environment for a peripheral CTS client application. It requires CMake 3.20.0+, finds the Zephyr package, defines the project name, collects all C source files from the src directory, and adds them to the application build target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_cts_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(peripheral_cts_client)\n\nFILE(GLOB app_sources src/*.c)\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE ${app_sources})\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Fetching All Generic Property Client Model Instances\nDESCRIPTION: This shell command prints all instances of the Generic Property Client model available on the device. It is useful for verifying which models are instantiated and ready for use.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_prop_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmesh models prop instance get-all\n```\n\n----------------------------------------\n\nTITLE: Deleting CA Chain Certificate from Modem using modem_key_mgmt_delete in C\nDESCRIPTION: This code snippet demonstrates how to delete a CA chain certificate stored in the nRF91 Series LTE modem using the `modem_key_mgmt_delete` function. It specifies a security tag for the certificate to be deleted. If deleting the credential fails, an error message is printed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_key_mgmt.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint err;\nnrf_sec_tag_t sec_tag = 42;\n\nerr = modem_key_mgmt_delete(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN);\nif (err) {\n        printk(\"Failed to delete existing certificate, err %d\\n\", err);\n}\n```\n\n----------------------------------------\n\nTITLE: Minimum CMake Version Requirement for Zephyr\nDESCRIPTION: Specifies the minimum required CMake version for the project, set to ensure compatibility with the features used in this project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_usb/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: TCP Listen Command\nDESCRIPTION: Command to put TCP socket in listening mode for incoming connections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_11\n\nLANGUAGE: AT\nCODE:\n```\nAT#XLISTEN\nOK\n```\n\n----------------------------------------\n\nTITLE: Initializing CoAP Utils Library in C\nDESCRIPTION: The coap_init function is used to initialize the CoAP utils library. It opens a socket for receiving UDP packets for either IPv4 or IPv6 connections, depending on the ip_family parameter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/coap_utils.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ncoap_init(ip_family);\n```\n\n----------------------------------------\n\nTITLE: Inserting Advertising Request in C++\nDESCRIPTION: This snippet demonstrates how to call the Bluetooth LE Arbiter's InsertRequest function to add a new advertising request to the Arbiter queue. This is crucial for ensuring that the correct service is advertised based on priority.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/adding_bt_services.rst#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nCHIP_ERROR InsertRequest(Request & request);\n\n// This adds the service to the Arbiter queue.\n```\n\n----------------------------------------\n\nTITLE: Sample UART Output: LZMA2 with ARM Thumb Filter\nDESCRIPTION: Example console output indicating a firmware update compressed with LZMA2 and ARM thumb filter, representing the highest compression ratio configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_compress/mcuboot_update/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nSecondary slot image is LZMA2 compressed with ARM thumb filter applied\n```\n\n----------------------------------------\n\nTITLE: Assigning Kconfig Fragments for Bootloaders - Console\nDESCRIPTION: This snippet shows how to apply Kconfig fragments to bootloaders during the build process. It details using the west build command to set specific configuration options, indicating options for both NSIB and MCUboot bootloaders.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_config.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 zephyr/samples/hello_world -- \\\n   -DSB_CONFIG_SECURE_BOOT_APPCORE=y \\\n   -DSB_CONFIG_BOOTLOADER_MCUBOOT=y \\\n   -Db0_EXTRA_CONF_FILE=my-custom-fragment.conf\n```\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 zephyr/samples/hello_world -- \\\n   -DSB_CONFIG_SECURE_BOOT_APPCORE=y \\\n   -DSB_CONFIG_BOOTLOADER_MCUBOOT=y \\\n   -Dmcuboot_EXTRA_CONF_FILE=my-custom-fragment.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring mbedTLS External Interface Library\nDESCRIPTION: Adds an INTERFACE library named mbedtls_external to link with mbedTLS, mbedx509, and mbedcrypto targets if present. This setup facilitates secure communication by offering necessary TLS/DTLS and x509 API support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/zephyr/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mbedtls_external INTERFACE)\n\nif(TARGET mbedtls)\n  target_link_libraries(mbedtls_external INTERFACE mbedtls)\nendif()\n\nif(TARGET mbedx509)\n  target_link_libraries(mbedtls_external INTERFACE mbedx509)\nendif()\n\ntarget_link_libraries(mbedtls_external INTERFACE ${mbedcrypto_target})\n\nzephyr_link_libraries(mbedtls_external)\n```\n\n----------------------------------------\n\nTITLE: Enabling Extended Announcement (Extended Beaconing) for Matter\nDESCRIPTION: This snippet describes how to enable Extended Announcement (Extended Beaconing) using the `CONFIG_CHIP_BLE_EXT_ADVERTISING` Kconfig option to allow advertising for longer than 15 minutes. The advertising duration can be extended to a maximum of 48 hours, but the advertised data is modified to enhance user privacy. This is useful for scenarios where longer advertising durations are required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_BLE_EXT_ADVERTISING` to ``y``\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Key Management with chip-tool\nDESCRIPTION: These commands configure the group encryption keys on a target device to enable secure messaging within a group. It's vital for maintaining confidentiality and integrity in group communications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n./chip-tool groupkeymanagement key-set-write '{\"groupKeySetID\":\"0xabcd\",\"groupKeySecurityPolicy\":0,\"epochKey0\":\"0123456789abcdef0123456789abcdef\",\"epochStartTime0\":\"3330000\",\"epochKey1\":\"0123456789abcdef0123456789abcdee\",\"epochStartTime1\":\"3330001\",\"epochKey2\":\"0123456789abcdef0123456789abcded\",\"epochStartTime2\":\"3330002\"}' 1 0\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Get Missing Image State Response\nDESCRIPTION: Defines the CBOR data structure for responding to a request about missing images. It includes a return code, optional stream session ID, and resource identifier for the requested image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_9\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str)\"rc\"                          : (uint)\n    (str,opt)\"stream_session_id\"       : (uint)\n    (str,opt)\"resource_id\"             : (byte str)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Battery Level for Fast Pair (C)\nDESCRIPTION: Before enabling Fast Pair with `bt_fast_pair_enable` when `CONFIG_BT_FAST_PAIR_FMDN_BATTERY_DULT` is enabled, the battery level must be initialized. The DULT battery mechanism requires a known battery level, so `BT_FAST_PAIR_FMDN_BATTERY_LEVEL_NONE` should not be used in this configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Implementing NotifyUpdateState Method for MyBtServiceDataProvider in C++\nDESCRIPTION: Implement the NotifyUpdateState method to inform the Bridge Manager and Matter Data Model about attribute value updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nvoid MyBtServiceDataProvider::NotifyUpdateState(chip::ClusterId clusterId, chip::AttributeId attributeId, void *data,\n                    size_t dataSize)\n{\n    if (mUpdateAttributeCallback) {\n        mUpdateAttributeCallback(*this, clusterId, attributeId, data, dataSize);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiprotocol Coexistence Configuration\nDESCRIPTION: Updates to coexistence implementation configuration options including 1-wire and 3-wire protocols\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_MPSL_CX_1WIRE\nCONFIG_MPSL_CX_3WIRE\nCONFIG_MPSL_CX_BT_1WIRE\n```\n\n----------------------------------------\n\nTITLE: Configuring SHA-512 Hash Algorithm for MCUboot\nDESCRIPTION: Selects SHA-512 as the hash algorithm for image integrity verification. It is restricted to use with Ed25519 signatures.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_17\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_HASH_ALG_SHA512\"\n```\n\n----------------------------------------\n\nTITLE: Setting Door Lock User using Chip-Tool\nDESCRIPTION: This command configures a user for the door lock using the chip-tool, specifying user ID, index, name, PIN code, status, type, credential rule, node ID, and interaction timeout. It creates a new user with specific access credentials and assigns it to the door lock cluster.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n\"./chip-tool doorlock set-user 0 2 Home 123 1 0 0 10 1 --timedInteractionTimeoutMs 5000\"\n```\n\n----------------------------------------\n\nTITLE: zperf UDP upload command\nDESCRIPTION: This command initiates a UDP upload test using the zperf tool.  It specifies the destination IP address, port, duration, packet size, and baud rate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nzperf udp upload <dest ip> <dest port> <duration> <packet size> <baud rate>\n```\n\n----------------------------------------\n\nTITLE: Defining TF-M Secure Peripheral Partition Macro in CMake\nDESCRIPTION: Adds a compile definition to enable the Secure Peripheral Partition in TF-M configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/secure_peripheral_partition/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(tfm_config\n    INTERFACE\n        TFM_PARTITION_SECURE_PERIPHERAL_PARTITION\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Identity Key Generation Project with Nordic nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build environment for an identity key generation project. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, and adds the main source file to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/keys/identity_key_generation/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(identity_key_generation)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Bridged Device Support\nDESCRIPTION: Conditional compilation for Bluetooth-connected bridged devices, including BLE connectivity manager and bridged device factory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_BRIDGED_DEVICE_BT)\n    target_sources(app PRIVATE\n         ${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/src/bridge/ble_connectivity_manager.cpp\n        src/ble_providers/ble_bridged_device_factory.cpp\n    )\n    target_include_directories(app PRIVATE src/ble_providers)\n```\n\n----------------------------------------\n\nTITLE: Key and Certificate Generation Using cert_tool.py Script\nDESCRIPTION: Generates a key and certificate using the cert_tool.py script. It saves the key in `private-key.pem` and the certificate in `client-cert.pem` for further use and provisioning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\ncert_tool.py client_key\ncert_tool.py csr --common-name <device_id>\ncert_tool.py sign\n```\n\n----------------------------------------\n\nTITLE: Application Source Configuration\nDESCRIPTION: CMake configuration that specifies the main application source file to be included in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/https_client/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Building Thread with BLE TX Power Configuration for nRF5340 DK\nDESCRIPTION: West build command for nrf5340dk with Thread and Bluetooth LE TX power set to +3 dBm using the ipc_radio configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/transmission_power.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -Dipc_radio_CONFIG_BT_CTLR_TX_PWR_PLUS_3=y\n```\n\n----------------------------------------\n\nTITLE: Getting Current Light CTL State - Command Syntax\nDESCRIPTION: This command retrieves the current Light CTL state value from the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl get\n```\n\n----------------------------------------\n\nTITLE: Writing DFU Image Block in C\nDESCRIPTION: Write a block of the DFU image to the target. Repeat until all blocks are downloaded.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_target.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ndfu_target_write(block_data, block_size);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for HMAC Project in nRF Connect SDK\nDESCRIPTION: This CMake script sets up the build environment for an HMAC project. It requires CMake 3.20.0 or higher, finds the Zephyr package, and specifies the main source file for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/hmac/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(hmac)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Mapping Kconfig Options to OpenThread Configuration\nDESCRIPTION: Series of function calls that map Zephyr Kconfig options to OpenThread build configuration options. Each call links a Zephyr configuration option to the corresponding OpenThread option with a descriptive comment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nkconfig_to_ot_option(CONFIG_OPENTHREAD_TIME_SYNC OT_TIME_SYNC \"Enable the time synchronization service feature\")\nkconfig_to_ot_option(CONFIG_OPENTHREAD_TREL OT_TREL \"Enable TREL radio link for Thread over Infrastructure feature\")\nkconfig_to_ot_option(CONFIG_OPENTHREAD_TX_BEACON_PAYLOAD OT_TX_BEACON_PAYLOAD \"Enable tx beacon payload support\")\nkconfig_to_ot_option(CONFIG_OPENTHREAD_TX_QUEUE_STATISTICS OT_TX_QUEUE_STATS \"Enable tx queue statistics\")\nkconfig_to_ot_option(CONFIG_OPENTHREAD_UDP_FORWARD OT_UDP_FORWARD \"Enable UDP forward feature\")\nkconfig_to_ot_option(CONFIG_OPENTHREAD_UPTIME OT_UPTIME \"Enable support for tracking OpenThread instance's uptime\")\nkconfig_to_ot_option(CONFIG_OPENTHREAD_VERHOEFF_CHECKSUM OT_VERHOEFF_CHECKSUM \"Verhoeff checksum\")\nkconfig_to_ot_option(CONFIG_OPENTHREAD_WAKEUP_COORDINATOR OT_WAKEUP_COORDINATOR \"Enable Wake-up Coordinator role\")\nkconfig_to_ot_option(CONFIG_OPENTHREAD_WAKEUP_END_DEVICE OT_WAKEUP_END_DEVICE \"Enable Wake-up End Device role\")\n```\n\n----------------------------------------\n\nTITLE: Checking if Flash Region is Protected in C\nDESCRIPTION: Example of using the new fprotect_is_protected function from the Flash Protection (fprotect) library to check if a specific flash region is protected.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.8.0.rst#2025-04-21_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nbool is_protected = fprotect_is_protected(0x1000, 0x1000);\n```\n\n----------------------------------------\n\nTITLE: Profiling a Data Event with nRF Profiler in C\nDESCRIPTION: This code snippet illustrates how to profile a custom event with associated data using the nRF Profiler. It utilizes the `nrf_profiler_log_start`, `nrf_profiler_log_encode_*`, and `nrf_profiler_log_send` functions to log the event and its data. The event data is encoded according to its type and then sent along with the registered event ID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/nrf_profiler.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic void profile_data_event(uint32_t val1, int32_t val2, int16_t val3,\n            uint8_t val4, const char *string)\n{\n  struct log_event_buf buf;\n\n  nrf_profiler_log_start(&buf);\n  /* Profiling data connected with an event */\n  nrf_profiler_log_encode_uint32(&buf, val1);\n  nrf_profiler_log_encode_int32(&buf, val2);\n  nrf_profiler_log_encode_int16(&buf, val3);\n  nrf_profiler_log_encode_uint8(&buf, val4);\n  nrf_profiler_log_encode_string(&buf, string);\n  nrf_profiler_log_send(&buf, data_event_id);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library with CMake\nDESCRIPTION: This CMake configuration script defines a Zephyr library within the Nordic Semiconductor project. It specifies the source file 'app_jwt.c' for the library and conditionally links the mbedTLS library if the 'CONFIG_MBEDTLS' configuration is set. This setup is essential for ensuring that the necessary crypto functionalities are included as part of the build process when configured.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/app_jwt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(\n    app_jwt.c\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries_ifdef(CONFIG_MBEDTLS mbedTLS)\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Data Model Generation\nDESCRIPTION: Sets up the Matter Data Model configuration with ZAP file generation settings and server inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nchip_configure_data_model(app\n    INCLUDE_SERVER\n    BYPASS_IDL\n    GEN_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated\n    ZAP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/light_switch.zap\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Updateable Image Number for MCUboot\nDESCRIPTION: This configuration specifies the number of images that MCUboot can handle, enabling it to operate as an enhanced dual-bank bootloader for more complex update scenarios and greater flexibility in managing different sets of firmware.  The `SB_CONFIG_MCUBOOT_UPDATEABLE_IMAGES` Kconfig option configures the number of images supported by MCUboot at the sysbuild level.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_UPDATEABLE_IMAGE_NUMBER\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_MCUBOOT_UPDATEABLE_IMAGES`\"\n```\n\n----------------------------------------\n\nTITLE: Implementing NFC TNEP Connection Handover for NFC Tag Device in C\nDESCRIPTION: This code snippet demonstrates how to use the NFC TNEP Connection Handover module with an NFC Tag Device. It shows the initialization process and setup of callbacks for handling handover messages. This implementation is used in the peripheral_nfc_pairing sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/ch.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ninclude_startingpoint_nfc_tnep_ch_tag_rst\n```\n\n----------------------------------------\n\nTITLE: Including Attribute Storage Header for Custom Delegation in C++\nDESCRIPTION: This snippet shows the inclusion of the 'attribute-storage.h' from the Matter stack core. It is essential when implementing a custom Fabric Table delegation for handling specific reactions to the last fabric removal scenario.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/last_fabric_removal_delegate.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <app/util/attribute-storage.h>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server CA using OpenSSL\nDESCRIPTION: This command retrieves the server CA certificate from an MQTT broker using OpenSSL. It connects to the specified hostname and port, displays the certificates, and allows you to select the appropriate root certificate.  The hostname and port should be replaced with the address of the MQTT broker.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/doc/provisioning.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"openssl s_client -connect <hostname>:<port> -showcerts -servername <hostname>\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Scene Without Acknowledgement\nDESCRIPTION: This command deletes a specified scene without waiting for a response, allowing for more rapid state changes without the need for confirmation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scene_cli.rst#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models scene delete-unack <Scene>\n```\n\n----------------------------------------\n\nTITLE: Boot Preference Change Log Output\nDESCRIPTION: Log output showing the application switching the boot preference from variant A to variant B in preparation for testing previous firmware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n<inf> AB: Changing a boot preference (a -> B)\n<inf> AB: restart the device to enforce\n```\n\n----------------------------------------\n\nTITLE: Closing TLS Socket\nDESCRIPTION: This snippet demonstrates how to close a TLS socket using AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_8\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XSSOCKET=0\n```\n\n----------------------------------------\n\nTITLE: Adding Model to Node Composition in C\nDESCRIPTION: Registers the model to a node's composition data with a macro to enable communication within the mesh. The setup requires a Company ID, Model ID, and an optional opcode list.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/dev_overview.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nBT_MESH_MODEL_VND_CB(YOUR_COMPANY_ID,\n                     YOUR_MODEL_ID,\n                     BT_MESH_MODEL_NO_OPS,\n                     NULL,\n                     NULL,\n                     NULL)\n```\n\n----------------------------------------\n\nTITLE: Configuring Packet Filter for Promiscuous Mode in C\nDESCRIPTION: Example of using the NET_REQUEST_WIFI_PACKET_FILTER network management command to configure packet filter settings for Promiscuous mode reception. This allows the application to choose which types of 802.11 packets to receive.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/advanced_modes/promiscuous_operation.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nnet_mgmt(NET_REQUEST_PACKET_FILTER, ...);\n```\n\n----------------------------------------\n\nTITLE: Enabling TF-M in Kconfig configuration\nDESCRIPTION: Add this option to the prj.conf file to enable TF-M in the build. This is the basic configuration required to include TF-M.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_building.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BUILD_WITH_TFM=y\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Sources in CMake\nDESCRIPTION: This snippet utilizes Zephyr's `zephyr_library_sources_ifdef` function to conditionally include the `uart.c` source file based on the `CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_UART` configuration variable. It's intended to manage source files dynamically according to the build configuration, particularly in projects utilizing the Zephyr ecosystem. The configuration must be defined for the `uart.c` file to be included.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/nrf_modem_lib/trace_backends/uart/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(\\n  CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_UART\\n  uart.c\\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nordic Device Components with CMake\nDESCRIPTION: CMake configuration that conditionally includes source files for different device components based on configuration flags. Handles motion sensors, buttons, selectors, wheel input, battery monitoring and other hardware features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/src/hw_interface/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/board.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_MOTION_SENSOR_ENABLE app PRIVATE\n                     ${CMAKE_CURRENT_SOURCE_DIR}/motion_sensor.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_MOTION_BUTTONS_ENABLE app\n                     PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/motion_buttons.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_MOTION_SIMULATED_ENABLE app PRIVATE\n                     ${CMAKE_CURRENT_SOURCE_DIR}/motion_simulated.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_BUTTONS_SIM_ENABLE app\n\t\t     PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/buttons_sim.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_PASSKEY_BUTTONS app\n                     PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/passkey_buttons.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_SELECTOR_HW_ENABLE app\n                     PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/selector_hw.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_WHEEL_ENABLE app\n                     PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/wheel.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_BATTERY_CHARGER_DISCRETE app\n                     PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/battery_charger.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_BATTERY_MEAS app\n                     PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/battery_meas.c)\n```\n\n----------------------------------------\n\nTITLE: Initializing Silvair EnOcean Proxy Server with Multiple Elements in Bluetooth Mesh\nDESCRIPTION: Example code showing how to initialize a Silvair EnOcean Proxy Server with two elements. The first element contains both the server model and a button handler, while the second element only contains a button handler.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/vnd/silvair_enocean_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct bt_mesh_silvair_enocean_srv enocean;\n\nstatic struct bt_mesh_elem elements[] = {\n\tBT_MESH_ELEM(\n      1,\n\t   BT_MESH_MODEL_LIST(BT_MESH_MODEL_SILVAIR_ENOCEAN_BUTTON(&silvair_enocean, 0)),\n\t   BT_MESH_MODEL_LIST(BT_MESH_MODEL_SILVAIR_ENOCEAN_SRV(&silvair_enocean))),\n   BT_MESH_ELEM(\n      2,\n\t   BT_MESH_MODEL_LIST(BT_MESH_MODEL_SILVAIR_ENOCEAN_BUTTON(&silvair_enocean, 1)),\n\t   BT_MESH_MODEL_NONE),\n};\n```\n\n----------------------------------------\n\nTITLE: Evaluating Energy Consumption and Delaying Network Operations in LTE\nDESCRIPTION: This code evaluates the energy estimate from the connection evaluation parameters and decides whether to delay network operations. If the energy estimate is below a certain threshold (`LTE_LC_ENERGY_CONSUMPTION_NORMAL`), a delay timer is started; otherwise, the network operation is performed immediately. This helps to optimize power consumption based on cell conditions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/lte/psm.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nif (params.energy_estimate < LTE_LC_ENERGY_CONSUMPTION_NORMAL) {\n      /* start delay timer */\n    } else {\n      /* do network operation immediately */\n    }\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from UDP Socket using AT command\nDESCRIPTION: This AT command receives data from a UDP socket. The response includes the data received, the IP address of the sender, and the port number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n**AT#XRECVFROM=0**\n#XRECVFROM: 13,\"<*IP address*>\",<*port*>\\nHello, UDP#1!\nOK\n```\n\nLANGUAGE: text\nCODE:\n```\n**AT#XRECVFROM=0**\n#XRECVFROM: 13,\"<*IP address*>\",<*port*>\\nHello, UDP#2!\nOK\n```\n\n----------------------------------------\n\nTITLE: CMUX Read Command Syntax\nDESCRIPTION: Syntax for reading the current CMUX configuration, including AT channel address and total channel count.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CMUX_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT\nCODE:\n```\nAT#XCMUX?\n```\n\n----------------------------------------\n\nTITLE: Attaching Joiner to Network in NCP Sample\nDESCRIPTION: Command to attach the newly joined device to the Thread network in the OpenThread NCP sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nwpanctl:joiner_if> attach\n```\n\n----------------------------------------\n\nTITLE: Retrieving Short Parameter in C\nDESCRIPTION: Retrieves a short integer parameter from the parsed AT command list.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_parser.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nat_params_short_get();\n```\n\n----------------------------------------\n\nTITLE: Using NET_REQUEST_WIFI_CONNECT_STORED Command in C\nDESCRIPTION: This snippet demonstrates how to use the NET_REQUEST_WIFI_CONNECT_STORED command from the Zephyr net_mgmt interface to initiate an automatic Wi-Fi connection. It retrieves the default network interface and attempts to connect using stored credentials.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/wifi_mgmt_ext.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint ret;\n\nstruct net_if *iface = net_if_get_default();\nint rc = net_mgmt(NET_REQUEST_WIFI_CONNECT_STORED, iface, NULL, 0);\n\nif (rc) {\n   printk(\"an error occurred when trying to auto-connect to a network. err: %d\", rc);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Bluetooth Mesh Light Control Test\nDESCRIPTION: This CMake snippet sets up the project, finds the Zephyr package, and configures source files and include directories for the Bluetooth Mesh Light Control Subsystem test.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/light_ctrl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bt_mesh_ligth_ctrl_sybsystem_test)\n\nFILE(GLOB app_sources src/*.c)\n\ntarget_sources(app\n  PRIVATE\n  ${app_sources}\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/light_ctrl_srv.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/light_ctrl_reg.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/light_ctrl_reg_spec.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/sensor_types.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/sensor.c\n  )\n\ntarget_include_directories(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh\n  ${ZEPHYR_BASE}/subsys/bluetooth\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with Certificate Processing\nDESCRIPTION: CMake build script that sets up a download project with the Nordic SDK and Zephyr RTOS. It handles certificate file conversion for secure sockets and defines project sources. Requires CMake 3.20.0 or higher and the Zephyr build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/download/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(download)\n\n# Generate hex file from pem file\nif(CONFIG_SAMPLE_SECURE_SOCKET)\n  get_filename_component(FILE_NAME ${CONFIG_SAMPLE_CERT_FILE} NAME)\n  set(OUTPUT_FILE \"${CMAKE_CURRENT_BINARY_DIR}/certs/${FILE_NAME}.inc\")\n  add_definitions(-DSAMPLE_CERT_FILE_INC=\"${OUTPUT_FILE}\")\n  generate_inc_file_for_target(\n    app\n    ${CONFIG_SAMPLE_CERT_FILE}\n    ${OUTPUT_FILE}\n  )\nendif()\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Running merge_data.py to merge datasets\nDESCRIPTION: This script merges data from two datasets and compensates for clock drift based on synchronization events. It is used to observe times between events for two connected devices.  The script requires the names of synchronization events and datasets for both devices, along with the desired name for the merged dataset.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/nrf_profiler.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npython3 merge_data.py test_p sync_event_p test_c sync_event_c test_merged\n```\n\n----------------------------------------\n\nTITLE: Reusing build directory (Command line)\nDESCRIPTION: West command to reuse an existing build directory when building for a different board or target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/building.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 -p=auto\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for SUIT Stream Testing\nDESCRIPTION: Sets up CMake configuration for an integration test project that tests cache streaming functionality. Defines minimum CMake version, finds Zephyr package, and links required SUIT stream interface libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/cache_fetch/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2023 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_cache_streamer)\ninclude(../cmake/test_template.cmake)\n\n# Link with the CMake target, that includes SUIT platform internal APIs header\nzephyr_library_link_libraries(suit_stream_sinks_interface)\nzephyr_library_link_libraries(suit_stream_sources_interface)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11a PER Measurement (Transmitter)\nDESCRIPTION: Commands to set up the transmitter for 802.11a PER measurement, including channel, packet parameters, and transmission settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 36\nuart:~$ wifi_radio_test tx_pkt_tput_mode 0\nuart:~$ wifi_radio_test tx_pkt_rate 54\nuart:~$ wifi_radio_test tx_pkt_len 1024\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num 10000\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Conditional Partition Configuration Processing\nDESCRIPTION: Processes partition manager YAML files for the main image and subsystems based on build configuration and enabled features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/partition_manager/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif((EXISTS ${CMAKE_SOURCE_DIR}/pm.yml) AND (IMAGE_NAME OR NOT SYSBUILD_MAIN_APP))\n  # Only preprocess pm.yml when being built as sub image.\n\n  preprocess_pm_yml(\n    ${CMAKE_SOURCE_DIR}/pm.yml\n    ${ZEPHYR_BINARY_DIR}/include/generated/pm.yml\n    )\nendif()\n\nget_property(PM_SUBSYS_PATHS GLOBAL PROPERTY PM_SUBSYS_PATHS)\nget_property(PM_SUBSYS_OUTPUT_PATHS GLOBAL PROPERTY PM_SUBSYS_OUTPUT_PATHS)\n\n# Check for partition manager configurations defined by subsystems\n# This is a list of absolute paths to these pm.yml files.\nif (PM_SUBSYS_PATHS)\n  # Each entry in the list has a corresponding entry with the output\n  # path in the build directory for the pm.yml file.\n  foreach (pm_yml_path ${PM_SUBSYS_PATHS})\n    list(GET PM_SUBSYS_OUTPUT_PATHS 0 output_pm_yml_path)\n    list(REMOVE_AT PM_SUBSYS_OUTPUT_PATHS 0)\n\n    preprocess_pm_yml(\n      ${pm_yml_path}\n      ${output_pm_yml_path}\n      )\n    set_property(\n      GLOBAL APPEND PROPERTY\n      PM_SUBSYS_PREPROCESSED\n      ${output_pm_yml_path}\n      )\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Verifying nRF54H20 Lifecycle State\nDESCRIPTION: This command uses nRF Util to check the current lifecycle state of the nRF54H20 SoC after transitioning to RoT.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-adac-discovery --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with Cloud over MQTT Support\nDESCRIPTION: This command is used to compile the MoSh sample with MQTT cloud connectivity by using a specific configuration file via the -DEXTRA_CONF_FILE option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_43\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=overlay-cloud_mqtt.conf\n```\n\n----------------------------------------\n\nTITLE: GNSS Status Notification Format\nDESCRIPTION: Format for GNSS position fix notification messages showing location coordinates, altitude, accuracy, speed, heading and timestamp\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/GNSS_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT\nCODE:\n```\n#XGPS: <latitude>,<longitude>,<altitude>,<accuracy>,<speed>,<heading>,<datetime>\n```\n\n----------------------------------------\n\nTITLE: Querying Properties from a Bound Server\nDESCRIPTION: This shell command retrieves a list of properties from a specified type of Property Server. The 'Kind' parameter identifies the type of server (Manufacturer, Admin, User) to query.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_prop_cli.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmesh models prop props-get <Kind>\n```\n\n----------------------------------------\n\nTITLE: Combining RPC and Bluetooth Low Energy Configurations\nDESCRIPTION: This shell command incorporates both Nordic RPC and Bluetooth Low Energy app-compatible configurations. The command uses the `west` tool, specifies board targets, appends file suffixes, and sets necessary Kconfig options to customize build preferences.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hids_mouse/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b *board_target* -S nordic-bt-rpc -- -DFILE_SUFFIX=bt_rpc -DCONFIG_BT_DIRECTED_ADVERTISING=n -DCONFIG_BT_PRIVACY=n -Dipc_radio_CONFIG_BT_PRIVACY=n\n```\n\n----------------------------------------\n\nTITLE: TNEP Library Processing Loop in C\nDESCRIPTION: Shows how to process TNEP library events in the main application loop and handle tag interactions through a callback handler.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/tag.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ntag_x_tag_handler()\n{\n\tnfc_tnep_tag_rx_msg_indicate();\n}\n\nmain()\n{\n\t/*initialization code, application code*/\n\twhile (1) {\n\t\tnfc_tnep_tag_process();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for nrf_modem_lib_trace Unit Test\nDESCRIPTION: This CMake snippet sets up the project, creates mocks for dependencies, generates a test runner, and configures source files and include paths for the nrf_modem_lib_trace unit test.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/nrf_modem_lib_trace/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_modem_lib_trace)\n\n# create mock\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem_os.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem_trace.h)\ncmock_handle(trace_backend_mock.h)\n\n# generate runner for the test\ntest_runner_generate(src/main.c)\n\ntarget_include_directories(app PRIVATE src)\n\n# add test file\ntarget_sources(app PRIVATE src/main.c)\n\n# add mock for backend\ntarget_sources(app PRIVATE trace_backend_mock.c)\n\n# add unit under test\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/nrf_modem_lib_trace.c)\n\n# include paths\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/)\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/include/modem/)\nzephyr_include_directories(${ZEPHYR_BASE}/subsys/testsuite/include)\n\n# Required for calling libmodem hooks\nzephyr_linker_sources(RODATA ${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/nrf_modem_lib.ld)\n```\n\n----------------------------------------\n\nTITLE: Executing West SBOM Command with Optional License Detectors\nDESCRIPTION: Example of running the West SBOM command with optional license detectors and limiting parallel processes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n--optional-license-detectors scancode-toolkit\n```\n\n----------------------------------------\n\nTITLE: Enabling nrf_cc3xx Key Agreement Driver in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables the `nrf_security_drivers_cc3xx` driver for all supported key agreement algorithms. The CC3xx driver provides hardware-accelerated key agreement operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_5\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_USE_CC3XX_KEY_AGREEMENT_DRIVER`\"\n```\n\n----------------------------------------\n\nTITLE: Provisioning Keys to nRF54H20 SoC Using nRF Util\nDESCRIPTION: Command to provision the generated keys from the JSON file to the KMU (Key Management Unit) of the nRF54H20 SoC using nRF Util.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_keys.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device x-provision-keys --serial-number <snr> --key-file all_keys.json\n```\n\n----------------------------------------\n\nTITLE: Relocating Libraries to QSPI Flash\nDESCRIPTION: CMake code to relocate entire libraries to run from external QSPI flash. Uses zephyr_code_relocate to place library code in EXTFLASH_TEXT region and its data in RAM_DATA region.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_code_relocate(LIBRARY subsys__mgmt__mcumgr__mgmt LOCATION EXTFLASH_TEXT NOCOPY)\nzephyr_code_relocate(LIBRARY subsys__mgmt__mcumgr__mgmt LOCATION RAM_DATA)\n```\n\n----------------------------------------\n\nTITLE: Encapsulating NFC NDEF Messages in Records in C\nDESCRIPTION: Demonstrates how to nest an NDEF message inside a record using the NFC_NDEF_NESTED_NDEF_MSG_RECORD_DEF macro. This technique is used for creating compound records that contain full messages as their payload.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/msg.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// nested_message_desc is a message descriptor\n\n// declare a record descriptor with an NDEF message nested in payload\n// create and initialize instance of nfc_ndef_record_desc_t\nNFC_NDEF_NESTED_NDEF_MSG_RECORD_DEF( compound_record,\n                                      3,\n                                      sizeof(id_string),\n                                      id_string,\n                                      type_string,\n                                      sizeof(type_string),\n                                      &nested_message_desc );\n\n// add compound record to a message like any other record\nerr = nfc_ndef_msg_record_add( &NFC_NDEF_MSG(my_message), &NFC_NDEF_NESTED_NDEF_MSG_RECORD(compound_record));\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Interval in Kconfig\nDESCRIPTION: Specifies the interval for sending notification data in milliseconds, which can impact power consumption during communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_power_profiling/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_BT_POWER_PROFILING_NOTIFICATION_INTERVAL\n```\n\n----------------------------------------\n\nTITLE: Enabling Modem Traces with UART Backend using CMake\nDESCRIPTION: Command to add the nrf91-modem-trace-uart snippet when building an application with CMake. This enables modem tracing with UART output.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_snippet.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n-D<image_name>_SNIPPET=\"nrf91-modem-trace-uart\" [...]\n```\n\n----------------------------------------\n\nTITLE: Checking CA Chain Certificate Existence using modem_key_mgmt_exists in C\nDESCRIPTION: This code snippet illustrates how to check if a CA chain certificate exists in the nRF91 Series LTE modem using the `modem_key_mgmt_exists` function. It defines a security tag and a boolean variable to store the existence status. The function returns whether the specified credential exists in the modem. An error message will be printed if the check fails.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_key_mgmt.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint err;\nnrf_sec_tag_t sec_tag = 42;\nbool exists;\n\nerr = modem_key_mgmt_exists(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, &exists);\nif (err) {\n        printk(\"Failed to check if credential exists\\n\");\n        return;\n}\n\nif (exists) {\n        printk(\"Credential exists in the modem\\n\");\n} else {\n        printk(\"Credential does not exist in the modem\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Enhanced ACK-based Link Metrics Probing\nDESCRIPTION: Disables Enhanced ACK-based Link Metrics probing that was previously configured, stopping the collection of metrics in acknowledgment frames.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_23\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot linkmetrics mgmt fe80:0:0:0:10b1:93ea:c0ee:eeb7 enhanced-ack clear\nDone\nReceived Link Metrics Management Response from: fe80:0:0:0:10b1:93ea:c0ee:eeb7\nStatus: Success\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic SDK Project\nDESCRIPTION: Sets up CMake build configuration for a Nordic Semiconductor project. Requires CMake 3.20.0 or higher, finds the Zephyr package using environment variables, and adds main.c as a source file to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/partition_manager/region/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Secure Socket Command Syntax\nDESCRIPTION: AT command syntax for secure sockets with TLS/DTLS support including security tag and peer verification options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT\nCODE:\n```\n#XSSOCKET=<op>[,<type>,<role>,<sec_tag>[,<peer_verify>[,<cid>]]\n```\n\n----------------------------------------\n\nTITLE: Connection Pre-evaluation in C\nDESCRIPTION: This snippet shows a basic implementation of the connection pre-evaluation feature using the lte_lc_conn_eval_params_get function. It demonstrates how to get information about a cell likely to be used for an RRC connection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/lte_lc.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n...\n\nint main(void)\n{\n        int err;\n\n        printk(\"Connecting to LTE network. This may take a few minutes...\\n\");\n\n        err = lte_lc_connect_async(lte_handler);\n        if (err) {\n```\n\n----------------------------------------\n\nTITLE: Include Generic SUIT IDs Source File (CMake)\nDESCRIPTION: Includes the `src/suit_generic_ids.c` source file into the Zephyr library. This file likely contains definitions for generic SUIT identifiers used throughout the SUIT implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/mci/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library_sources(src/suit_generic_ids.c)\"\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Provisioning Image for PSA Root-of-Trust\nDESCRIPTION: Commands to build and flash the provisioning image sample to set up PSA platform security parameters on the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_psa_template/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp nrf/samples/tfm/provisioning_image -d build_provisioning_image\nwest flash --erase --recover -d build_provisioning_image\n```\n\n----------------------------------------\n\nTITLE: Building with Bluetooth RPC for nRF Connect SDK\nDESCRIPTION: This shell command builds the sample using the Nordic Bluetooth RPC library with specified parameters. It requires the `west` tool and the `nordic-bt-rpc` snippet option. The build targets a specific development kit board and suffixes the file as needed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hids_mouse/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b *board_target* -S nordic-bt-rpc -- -DFILE_SUFFIX=bt_rpc\n```\n\n----------------------------------------\n\nTITLE: Enabling Matter Settings Shell Module\nDESCRIPTION: This snippet describes how to enable the Matter Settings shell module using the `:ref:`CONFIG_NCS_SAMPLE_MATTER_SETTINGS_SHELL<CONFIG_NCS_SAMPLE_MATTER_SETTINGS_SHELL>` Kconfig option. This module provides shell commands to monitor Zephyr Settings usage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_16\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":ref:`CONFIG_NCS_SAMPLE_MATTER_SETTINGS_SHELL<CONFIG_NCS_SAMPLE_MATTER_SETTINGS_SHELL>` Kconfig option to ``y``\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with Certificate Generation\nDESCRIPTION: Sets up a CMake project for ciphersuites with Zephyr RTOS integration. Configures certificate generation by converting PEM files to hex format and includes main source file compilation. Requires CMake 3.20.0 or higher and Zephyr SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/ciphersuites/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(ciphersuites)\n\n# Generate hex files from pem files\nset(gen_dir ${CMAKE_CURRENT_BINARY_DIR}/certs)\nzephyr_include_directories(${gen_dir})\ngenerate_inc_file_for_target(\n    app\n    cert/DigiCertGlobalG2.pem\n    ${gen_dir}/DigiCertGlobalG2.pem.inc\n    )\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Parsing Azure IoT Hub Device Twin JSON Format for FOTA\nDESCRIPTION: Example JSON structure expected by the Azure FOTA library. It contains firmware version information, download location details including host and path, and fragment size configuration for the download process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_fota.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"firmware\": {\n\t\t\"fwVersion\": \"v1.0.3\",\n\t\t\"fwLocation\": {\n       \t\t\"protocol\": \"https:\",\n\t\t\t\"host\": \"<hostname>\",\n\t\t\t\"path\": \"<filename>.bin\"\n\t\t},\n\t\t\"fwFragmentSize\": 1800\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting A-GNSS Assistance Data Mask in C\nDESCRIPTION: Sets the mask for A-GNSS assistance data request using the location_assistance_agnss_set_mask function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_location_assistance.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nlocation_assistance_agnss_set_mask();\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure IoT Hub Connection with DPS\nDESCRIPTION: Example demonstrating how to configure Azure IoT Hub connection using Device Provisioning Service (DPS). This configuration uses Kconfig values for device ID and enables automatic DPS registration to acquire IoT Hub details.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_24\n\nLANGUAGE: c\nCODE:\n```\nstruct azure_iot_hub_config cfg = {\n   .use_dps = true,\n};\n\nerr = azure_iot_hub_connect(&cfg);\n/* Error handling */\n```\n\n----------------------------------------\n\nTITLE: HTTPS GET request (TLS with server auth, Cellular)\nDESCRIPTION: Sends an HTTPS GET request to retrieve the state of LED 1 using TLS with server authentication for cellular networks. It includes the `--verify` flag to specify the server certificate for verification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n\"https GET https://<ip>:443/led/1 --verify server_certificate.pem\"\n```\n\n----------------------------------------\n\nTITLE: Signing CSR with CA Certificate Using cert_tool.py\nDESCRIPTION: Signs a CSR using a subordinate CA certificate with custom signing based on a cert_tool.py script. Ensure the script complies with your CA's requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ncert_tool.py sign\n```\n\n----------------------------------------\n\nTITLE: Registering Modem Initialization Callback in C\nDESCRIPTION: Macro to register a callback function that will be executed after the Modem library is initialized. The callback receives the initialization result and a context.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_wrapper.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nNRF_MODEM_LIB_ON_INIT(callback_name, context)\n```\n\n----------------------------------------\n\nTITLE: CRACEN KMU Encrypted Key Usage Scheme Macro\nDESCRIPTION: Macro definition for Encrypted usage scheme in CRACEN KMU, used for keys that are encrypted and decrypted on-the-fly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/cryptography.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nCRACEN_KMU_KEY_USAGE_SCHEME_ENCRYPTED\n```\n\n----------------------------------------\n\nTITLE: Generating Key Attributes Using Python Script\nDESCRIPTION: Python commands for generating key attributes for the application core, radio core, and OEM root using the generate_psa_key_attributes.py script.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_keys.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython generate_psa_key_attributes.py --usage VERIFY_MESSAGE_EXPORT --id 0x40022100 --type ECC_TWISTED_EDWARDS --size 255 --algorithm EDDSA_PURE --location LOCATION_CRACEN --key-from-file MANIFEST_APPLICATION_GEN1_pub.pem  --file all_keys.json --cracen_usage RAW --lifetime PERSISTENCE_DEFAULT\n```\n\nLANGUAGE: shell\nCODE:\n```\npython generate_psa_key_attributes.py --usage VERIFY_MESSAGE_EXPORT --id 0x40032100 --type ECC_TWISTED_EDWARDS --size 255 --algorithm EDDSA_PURE --location LOCATION_CRACEN --key-from-file MANIFEST_RADIOCORE_GEN1_pub.pem --file all_keys.json --cracen_usage RAW --lifetime PERSISTENCE_DEFAULT\n```\n\nLANGUAGE: shell\nCODE:\n```\npython generate_psa_key_attributes.py --usage VERIFY_MESSAGE_EXPORT --id 0x4000AA00 --type ECC_TWISTED_EDWARDS --size 255 --algorithm EDDSA_PURE --location LOCATION_CRACEN --key-from-file MANIFEST_OEM_ROOT_GEN1_pub.pem --file all_keys.json --cracen_usage RAW --lifetime PERSISTENCE_DEFAULT\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version for Zephyr\nDESCRIPTION: This snippet sets the minimum required version of CMake for the project to 3.20.0, ensuring compatibility with the Zephyr framework. It also establishes the paths for the test directory and Kbuild configuration file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/spi/spi_controller_peripheral/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nset(ZEPHYR_TEST_DIR \"\\${ZEPHYR_BASE}/tests/drivers/spi/spi_controller_peripheral/\")\nset(KCONFIG_ROOT \"\\${ZEPHYR_BASE}/tests/drivers/spi/spi_controller_peripheral/Kconfig\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying Current Date and Time with bt_mesh_time_srv_localtime in C\nDESCRIPTION: This snippet shows how to retrieve and display the current date and time using the Time Server's localtime function which converts device uptime to human-readable time format.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/time_srv.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid print_datetime(void)\n{\n   struct tm *today = bt_mesh_time_srv_localtime(&time_srv, k_uptime_get());\n   if (!today) {\n      /* Time Server does not know */\n      return;\n   }\n\n   const char *weekdays[] = {\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n   };\n\n   printk(\"Today is %s %04u-%02u-%02u\\n\", weekdays[today->tm_wday],\n         today->tm_year + 1900, today->tm_mon + 1, today->tm_mday);\n   printk(\"The time is %02u:%02u\\n\", today->tm_hour, today->tm_min);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Control and Data Packets in Wi-Fi Stack - Console\nDESCRIPTION: This snippet describes the command options for enabling control and data packets up the Wi-Fi stack, allowing users to manage packet filtering. Commonly used options are provided for controlling current filter settings and capturing lengths.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n| [-c, --ctrl] : Enable control packets to be allowed up\\\nthe stack\\\n| [-d, --data] : Enable Data packets to be allowed up the\\\n| stack\\\n| [-g, --get] : Get current filter settings for a specific\\\n| interface index\\\n| [-b, --capture-len <len>] : Capture length buffer size\\\n| for each packet to be captured\\\n| [-h, --help] : Help\\\n| Usage: Get operation example for interface index 1\\\n| wifi packet_filter -g -i1\\\n| Set operation example for interface index 1 - set\\\n| data+management frame filter\\\n| wifi packet_filter -i1 -md\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version and Project Settings\nDESCRIPTION: This snippet sets the minimum required CMake version and configures the project for the I2C target API in the Zephyr framework. It defines the Kconfig root path and finds the Zephyr package needed for the project. The environment variable ZEPHYR_BASE must be set to point to the Zephyr base directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/i2c/i2c_target_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nset(KCONFIG_ROOT \"\\${ZEPHYR_BASE}/tests/drivers/i2c/i2c_target_api/Kconfig\")\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(i2c_target_api)\n```\n\n----------------------------------------\n\nTITLE: Defining Model IDs and Opcodes in Bluetooth Mesh Client Model (C)\nDESCRIPTION: This code snippet defines the Company ID, Model ID, and message opcodes for the Chat Client model in Bluetooth Mesh. It is crucial for identifying the model and the types of messages it can send and receive. Dependencies include the necessary header files for the model definitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/chat_sample_walk_through.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define COMPANY_ID 0x1234\n#define MODEL_ID 0x5678\n#define MSG_OP_1 0x01\n#define MSG_OP_2 0x02\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Sources in CMake\nDESCRIPTION: This snippet demonstrates how to specify source files for a Zephyr library using CMake. It includes `bh1749.c` as a mandatory source file and conditionally includes `bh1749_trigger.c` based on the `CONFIG_BH1749_TRIGGER` configuration flag. This approach allows for flexible source inclusion depending on build configuration. It requires a Zephyr environment and CMake.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/sensor/bh1749/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(bh1749.c)\nezephyr_library_sources_ifdef(CONFIG_BH1749_TRIGGER bh1749_trigger.c)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom AT Command Header File\nDESCRIPTION: Header file template for custom AT commands showing required function declarations for initialization and cleanup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_extending.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n*_init()    // Setup function for custom AT command\n*_uninit()  // Teardown function for custom AT command\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting ETB Trace Capture in C\nDESCRIPTION: Calls the etb_trace_start function to initialize the library, configure the ETM, set up the ATB funnels and replicator, and enable the ETB for continuous trace capture.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/debug/etb_trace.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\netb_trace_start();\n```\n\n----------------------------------------\n\nTITLE: GNSS Single Fix Example\nDESCRIPTION: Example showing GNSS initialization and single position fix acquisition without cloud assistance\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/GNSS_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT\nCODE:\n```\nAT%XSYSTEMMODE=0,0,1,0\n\nOK\nAT+CFUN=31\n\nOK\nAT#XGPS=1,0,0,0\n\n#XGPS: 1,1\n\nOK\n\n#XGPS: 1,4\n\n#XGPS: 35.457576,139.625090,121.473785,22.199919,0.442868,0.000000,\"2021-06-02 06:25:48\"\n```\n\n----------------------------------------\n\nTITLE: Registering Bluetooth Connection Callbacks for SMP Service\nDESCRIPTION: This code snippet demonstrates how to register Bluetooth connection callbacks and initialize the SMP service advertisement after Bluetooth initialization. This is essential for the device to be discoverable by the nRF Connect Device Manager mobile app.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_ble.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n.. literalinclude:: ../../../../../samples/bluetooth/mesh/common/smp_bt.c\n      :language: c\n      :start-after: include_startingpoint_mesh_smp_dfu_rst_2\n      :end-before: include_endpoint_mesh_smp_dfu_rst_2\n```\n\n----------------------------------------\n\nTITLE: Configuring Radio Calibration Period in Kconfig\nDESCRIPTION: Kconfig options for setting the calibration period of the 802.15.4 radio driver and the Multiprotocol Service Layer (MPSL) driver. These settings affect device wake-ups and power consumption.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/low_power_configuration.rst#2025-04-21_snippet_5\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD\nCONFIG_MPSL_CALIBRATION_PERIOD\n```\n\n----------------------------------------\n\nTITLE: NVS Settings Peak Usage Reset Command - Console\nDESCRIPTION: This console command resets the peak NVS settings usage values, allowing for accurate tracking of settings usage throughout device operations. It ensures that new operations provide reliable data on memory usage changes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_settings reset\n```\n\n----------------------------------------\n\nTITLE: Native TLS Credential Management\nDESCRIPTION: The #XCMNG command manages TLS credentials including certificates and keys in Zephyr storage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/Generic_AT_commands.rst#2025-04-21_snippet_7\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XCMNG=<op>[,<sec_tag>[,<type>[,<content>]]]\n```\n\n----------------------------------------\n\nTITLE: CMake Setup for CDDL Decoder Generation\nDESCRIPTION: Sets up output directories and file paths for generated CDDL decoder files. Defines source, include paths and target file names for the decoder generation process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dfu/fmfu_fdev/cddl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(src_out ${ZEPHYR_BINARY_DIR}/source/generated)\nset(include_out ${ZEPHYR_BINARY_DIR}/include/generated)\n\nfile(MAKE_DIRECTORY ${src_out})\n\nset(cddl_file ${CMAKE_CURRENT_LIST_DIR}/modem_update.cddl)\nset(entry_types Wrapper Sig_structure1 Segments)\n\nset(decode_c_name modem_update_decode.c)\nset(decode_h_name modem_update_decode.h)\nset(types_h_name modem_update_types.h)\nset(decode_c ${src_out}/${decode_c_name})\nset(decode_h ${include_out}/${decode_h_name})\nset(types_h ${include_out}/${types_h_name})\n```\n\n----------------------------------------\n\nTITLE: Increasing BT_RX_STACK_SIZE for SMP Pairing\nDESCRIPTION: When SMP pairing is enabled, the Bluetooth RX thread stack might overflow and trigger MPU faults. The workaround increases the stack size for the Bluetooth RX thread using the CONFIG_BT_RX_STACK_SIZE Kconfig option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nCONFIG_BT_RX_STACK_SIZE\n```\n\n----------------------------------------\n\nTITLE: Provisioning Device with nRF Cloud Provisioning Service (MQTT)\nDESCRIPTION: This Python command uses the claim_and_provision_device.py script to provision and onboard a device to nRF Cloud using MQTT. It claims the device, generates and installs credentials, and installs necessary root CA certificates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\npython3 claim_and_provision_device.py --api_key \"your_api_key\" --ca=\"self_self_cert_serial_ca.pem\" --ca_key=\"self_self_cert_serial_prv.pem\" --install_ca --unclaim --id_imei --id_str \"nrf-\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TFM Secure Peripheral Partition in CMake\nDESCRIPTION: This CMake script sets up a Trusted Firmware-M secure peripheral partition project. It configures the TFM manifest list, sets TFM build properties, includes necessary source files, and sets up compiler definitions for the secure peripheral partition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nget_target_property(TFM_BINARY_DIR tfm TFM_BINARY_DIR)\nconfigure_file(\n  ${CMAKE_CURRENT_LIST_DIR}/secure_peripheral_partition/tfm_manifest_list.yaml.in\n  ${CMAKE_CURRENT_BINARY_DIR}/secure_peripheral_partition/tfm_manifest_list.yaml\n)\n\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS\n  -DTFM_EXTRA_MANIFEST_LIST_FILES=${CMAKE_CURRENT_BINARY_DIR}/secure_peripheral_partition/tfm_manifest_list.yaml\n  -DTFM_EXTRA_PARTITION_PATHS=${CMAKE_CURRENT_LIST_DIR}/secure_peripheral_partition\n)\n\nproject(tfm_secure_partition)\n\ntarget_sources(app PRIVATE\n  src/main.c\n  src/secure_peripheral_partition.c\n)\n\ntarget_include_directories(app PRIVATE\n  $<TARGET_PROPERTY:tfm,TFM_BINARY_DIR>/api_ns/interface/include\n)\n\ntarget_compile_definitions(app\n    PRIVATE TFM_PARTITION_SECURE_PERIPHERAL_PARTITION\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Commissioner Role in NCP Sample\nDESCRIPTION: Command to start the Commissioner role on the Leader device in the OpenThread NCP sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nwpanctl:leader_if> commissioner start\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version for Nordic SDK\nDESCRIPTION: Sets the minimum required CMake version for the project, ensuring compatibility with Zephyr and Nordic SDK build requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_lbs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Groupcast OnOff CLI Commands for Matter Light Switch\nDESCRIPTION: CLI commands for controlling multiple lighting devices simultaneously through group commands\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuart:~$ matter switch groups onoff on\nuart:~$ matter switch groups onoff off\nuart:~$ matter switch groups onoff toggle\n```\n\n----------------------------------------\n\nTITLE: Configuring Asymmetric Encryption Algorithms in PSA Crypto\nDESCRIPTION: Kconfig options for enabling RSA OAEP and RSA PKCS#1 v1.5 encryption algorithms in PSA Crypto.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_20\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_PSA_WANT_ALG_RSA_OAEP\nCONFIG_PSA_WANT_ALG_RSA_PKCS1V15_CRYPT\nCONFIG_PSA_USE_CC3XX_ASYMMETRIC_ENCRYPTION_DRIVER\nCONFIG_PSA_USE_CRACEN_ASYMMETRIC_DRIVER\n```\n\n----------------------------------------\n\nTITLE: Registering Matter Event Handler in C++\nDESCRIPTION: Code to register a Matter event handler that controls the connectivity status LED based on the Matter network state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nReturnErrorOnFailure(Nrf::Matter::PrepareServer());\n\n/* Register Matter event handler that controls the connectivity status LED based on the captured Matter network\n * state. */\nReturnErrorOnFailure(Nrf::Matter::RegisterEventHandler(Nrf::Board::DefaultMatterEventHandler, 0));\n```\n\n----------------------------------------\n\nTITLE: CRACEN KMU Raw Key Usage Scheme Macro\nDESCRIPTION: Macro definition for Raw usage scheme in CRACEN KMU, used for plain text keys stored in CPU-accessible RAM.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/cryptography.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nCRACEN_KMU_KEY_USAGE_SCHEME_RAW\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Hardware Version with AT Command\nDESCRIPTION: AT command to set the Hardware Version resource of the Device object. The version must be specified as a string in double quotes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_7\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"hardware_version\"[,<version>]\n```\n\n----------------------------------------\n\nTITLE: Setting Device Type for Matter\nDESCRIPTION: This snippet describes how to set the device type using the `CONFIG_CHIP_DEVICE_TYPE` Kconfig option. This uses the Matter Device Type Identifier.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_19\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_DEVICE_TYPE`\"\n```\n\n----------------------------------------\n\nTITLE: Getting Current Light CTL Temperature Range State - Command Syntax\nDESCRIPTION: Retrieves the current Light CTL Temperature Range state, helpful for validating temperature limits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl temp-range-get\n```\n\n----------------------------------------\n\nTITLE: Registering SRP Client Service\nDESCRIPTION: Configures and registers a host and service on the SRP client device, including hostname, IPv6 address, service name, protocol, and port.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_29\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot srp client host name my-host\nDone\nuart:~$ ot srp client host address fdde:ad00:beef:0:e0fc:dc28:1d12:8c2\nDone\nuart:~$ ot srp client service add my-service _ipps._tcp 12345\nDone\nuart:~$ ot srp client autostart enable\nDone\n```\n\n----------------------------------------\n\nTITLE: Configuring ECJPAKE Support with Kconfig for C\nDESCRIPTION: This snippet outlines the steps for enabling ECJPAKE support within the nrfconnect SDK by configuring the Kconfig option CONFIG_MBEDTLS_ECJPAKE_C. Similar to ECDSA, ECJPAKE support also requires ECC configurations to be enabled first.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/backend_config.rst#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTo configure Elliptic Curve, Password Authenticated Key Exchange by Juggling (ECJPAKE) support, set the :kconfig:option:`CONFIG_MBEDTLS_ECJPAKE_C` Kconfig option.\n```\n\n----------------------------------------\n\nTITLE: Triggering System Error Off State in C\nDESCRIPTION: This code shows how to trigger the system error off state using the power_off_event struct. The error field is set to true to indicate an error-induced power off.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/power_manager.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\npower_off_event.error = true;\n```\n\n----------------------------------------\n\nTITLE: Implementing SoftAP Wi-Fi Provisioning in C\nDESCRIPTION: Example C code demonstrating how to use the SoftAP Wi-Fi provision library. It includes initializing the library, handling events, and starting the provisioning process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/softap_wifi_provision.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <net/softap_wifi_provision.h>\n\nstatic void softap_wifi_provision_handler(const struct softap_wifi_provision_evt *evt)\n{\n   int ret;\n\n   switch (evt->type) {\n   case SOFTAP_WIFI_PROVISION_EVT_STARTED:\n      LOG_INF(\"Provisioning started\");\n      break;\n   case SOFTAP_WIFI_PROVISION_EVT_CLIENT_CONNECTED:\n      LOG_INF(\"Client connected\");\n      break;\n   case SOFTAP_WIFI_PROVISION_EVT_CLIENT_DISCONNECTED:\n      LOG_INF(\"Client disconnected\");\n      break;\n   case SOFTAP_WIFI_PROVISION_EVT_CREDENTIALS_RECEIVED:\n      LOG_INF(\"Wi-Fi credentials received\");\n      break;\n   case SOFTAP_WIFI_PROVISION_EVT_COMPLETED:\n      LOG_INF(\"Provisioning completed\");\n      break;\n   case SOFTAP_WIFI_PROVISION_EVT_UNPROVISIONED_REBOOT_NEEDED:\n      LOG_INF(\"Reboot request notified, rebooting...\");\n      sys_reboot(0);\n      break;\n   case SOFTAP_WIFI_PROVISION_EVT_FATAL_ERROR:\n      LOG_ERR(\"Provisioning failed, fatal error!\");\n      break;\n   default:\n      /* Don't care */\n      return;\n   }\n}\n\nint main(void)\n{\n      int ret;\n\n      ret = softap_wifi_provision_init(softap_wifi_provision_handler);\n      if (ret) {\n         LOG_ERR(\"softap_wifi_provision_init, error: %d\", ret);\n         return ret;\n      }\n\n      ret = conn_mgr_all_if_up(true);\n      if (ret) {\n         LOG_ERR(\"conn_mgr_all_if_up, error: %d\", ret);\n         return ret;\n      }\n\n      LOG_INF(\"Network interface brought up\");\n\n      /* Start provisioning, this function blocks. */\n      ret = softap_wifi_provision_start();\n      if (ret == -EALREADY) {\n         LOG_INF(\"Wi-Fi credentials found, skipping provisioning\");\n         return ret;\n      } else if (ret) {\n            LOG_ERR(\"softap_wifi_provision_start, error: %d\", ret);\n         return ret;\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temperature Data Source in Kconfig\nDESCRIPTION: Sets whether to take genuine temperature measurements from a connected BME680 sensor, or just simulate sensor data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_20\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_TEMP_DATA_USE_SENSOR\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr SDK. It requires Zephyr and uses the environment variable `ZEPHYR_BASE` as a hint to find the package.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/gpio_idle/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Cancelling the DFU Distribution\nDESCRIPTION: This command cancels an ongoing DFU distribution, sending cancellation messages to all targets and updating the distribution phase accordingly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfd cancel\n```\n\n----------------------------------------\n\nTITLE: Adding User for Remote Access - Console\nDESCRIPTION: This command creates a new user for the door lock with specific parameters such as user ID, username, and credentials. The user is assigned to the cluster of the door lock's endpoint, allowing for personalized remote access control.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n./chip-tool doorlock set-user 0 2 Home 123 1 0 0 10 1 --timedInteractionTimeoutMs 5000\n```\n\n----------------------------------------\n\nTITLE: Link Options for Single-Threaded Processing\nDESCRIPTION: This snippet enforces single-threaded nRF RPC command processing by defining link options that wrap certain functions during linking, ensuring thread safety.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_options(app PUBLIC\n  -Wl,--wrap=nrf_rpc_os_init,--wrap=nrf_rpc_os_thread_pool_send\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Data with Nordic UART Service Client in C\nDESCRIPTION: This function is used to send data to the RX Characteristic of the NUS service. The sending process is asynchronous, and the data must remain valid until a callback notifies that the write request is completed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/nus_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbt_nus_client_send\n```\n\n----------------------------------------\n\nTITLE: Adding Sources to Application Target\nDESCRIPTION: Adds the discovered source files to the application target using target_sources(). This ensures all source files are compiled into the final application binary.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tnep_tag/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app  PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: HTTPS PUT request (TLS with server auth, Cellular)\nDESCRIPTION: Sends an HTTPS PUT request to update the state of LED 1 using TLS with server authentication for cellular networks. It includes the `--verify` flag to specify the server certificate for verification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n\"https PUT https://<ip>:443/led/1 --raw=\\\"1\\\" --verify server_certificate.pem\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Remote OS Management in Kconfig\nDESCRIPTION: Kconfig option to enable remote OS management handlers for triggering device reboot after image transfer. This is useful for completing the DFU process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_smp.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MCUMGR_GRP_OS=y\n```\n\n----------------------------------------\n\nTITLE: OpenThread Source Build Report\nDESCRIPTION: Shows configuration details for an OpenThread library built from source files, including target device (nrf54l15), Thread version (v1.4), and build characteristics.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/certification.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n################### OPENTHREAD REPORT ###################\n+ Target device: nrf54l15\n+ Thread version: v1.4\n+ OpenThread library feature set: Minimal Thread Device (MTD)\n+ Thread device type: Sleepy End Device (SED)\n+ OpenThread library has been built from sources\n+ OpenThread NCS revision: ncs-thread-reference-20241002-dirty\n+ OpenThread NCS SHA: ee86dc26d\n+ NCS revision: v2.8.0-preview1-434-g49bcdd3c6d6-dirty\n+ NCS SHA: 49bcdd3c6d6\n###################        END        ###################\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Sample on Native Simulator - Console\nDESCRIPTION: This snippet contains the commands necessary to build and run the AWS IoT sample application on the native simulator board using the West build system. This allows development and testing without the actual hardware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/aws_iot/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -b native_sim samples/net/mqtt\n./samples/net/mqtt/build/zephyr/zephyr.exe\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Data Model in CMake\nDESCRIPTION: Sets up the Matter data model configuration, specifying the server inclusion, IDL bypass, generation directory, and ZAP file location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/template/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nchip_configure_data_model(app\n    INCLUDE_SERVER\n    BYPASS_IDL\n    GEN_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated\n    ZAP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/template.zap\n)\n```\n\n----------------------------------------\n\nTITLE: HTTPS PUT request (TLS with server auth, Wi-Fi)\nDESCRIPTION: Sends an HTTPS PUT request to update the state of LED 1 using TLS with server authentication. It includes the `--verify` flag to specify the server certificate for verification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n\"https PUT https://httpserver.local:443/led/1 --raw=\\\"1\\\" --verify server_certificate.pem\"\n```\n\n----------------------------------------\n\nTITLE: Workaround for OpenThread Interface Issue in C++\nDESCRIPTION: This code snippet provides a workaround for a potential assert when removing the last fabric. It disables the OpenThread IP6 interface after performing a factory reset.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nchip::DeviceLayer::ThreadStackMgrImpl().LockThreadStack();\notIp6SetEnabled(chip::DeviceLayer::ThreadStackMgrImpl().OTInstance(), false);\nchip::DeviceLayer::ThreadStackMgrImpl().UnlockThreadStack();\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Modem Flow Control in Serial LTE Modem (C)\nDESCRIPTION: Added an optional Kconfig option for data modem flow control in the Serial LTE modem application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.2.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nCONFIG_SLM_DATAMODE_URC\n```\n\n----------------------------------------\n\nTITLE: Generating Vendor ID for nordicsemi.com using Python UUID5\nDESCRIPTION: This Python snippet demonstrates how to generate a Vendor ID (VID) using UUID5 with DNS namespace prefix and a vendor domain name. This generates a unique identifier for Nordic Semiconductor.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_device_config.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nuuid5(uuid.NAMESPACE_DNS, 'nordicsemi.com')\n```\n\n----------------------------------------\n\nTITLE: Getting the current Generic Level state value\nDESCRIPTION: Retrieves the current Generic Level state value from the model.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_lvl_cli.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmesh models lvl get\n```\n\n----------------------------------------\n\nTITLE: TNEP Message Exchange Implementation in C\nDESCRIPTION: Demonstrates how to exchange NDEF messages using the TNEP tag library after initialization, showing the pattern for message processing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/tag.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n.. literalinclude:: ../../../../../samples/nfc/tnep_tag/src/main.c\n    :language: c\n    :start-after: include_startingpoint_tnep_service_rst\n    :end-before: include_endpoint_tnep_service_rst\n```\n\n----------------------------------------\n\nTITLE: SRAM Region Definition Example - After Migration\nDESCRIPTION: Shows the new way of defining SRAM regions using nordic,owned-memory binding under the reserved-memory node with absolute addressing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.4.99-cs3_to_2.7_application.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n   reserved-memory {\n      cpuapp_ram0x_region: memory@2f010000 {\n         compatible = \"nordic,owned-memory\";\n         reg = <0x2f010000 DT_SIZE_K(260)>;\n         perm-read;\n         perm-write;\n         perm-secure;\n         #address-cells = <1>;\n         #size-cells = <1>;\n         ranges = <0x0 0x2f010000 0x41000>;\n         cpusec_cpuapp_ipc_shm: memory@0 {\n            reg = <0x0 DT_SIZE_K(2)>;\n         };\n         cpuapp_cpusec_ipc_shm: memory@800 {\n            reg = <0x800 DT_SIZE_K(2)>;\n         };\n      };\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Extracting Public Keys from Private Keys\nDESCRIPTION: Commands to extract the corresponding public keys from the previously generated Ed25519 private keys.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_keys.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenssl pkey -in MANIFEST_APPLICATION_GEN1_priv.pem -pubout -out MANIFEST_APPLICATION_GEN1_pub.pem\nopenssl pkey -in MANIFEST_RADIOCORE_GEN1_priv.pem -pubout -out MANIFEST_RADIOCORE_GEN1_pub.pem\nopenssl pkey -in MANIFEST_OEM_ROOT_GEN1_priv.pem -pubout -out MANIFEST_OEM_ROOT_GEN1_pub.pem\n```\n\n----------------------------------------\n\nTITLE: Performing FOTA Update in MoSh\nDESCRIPTION: Shows how to initiate a FOTA (Firmware Over-The-Air) update using the MoSh fota command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nfota download eu fw_update_package_filename.hex\n```\n\n----------------------------------------\n\nTITLE: Retrieving String Parameters with AT Parser in C\nDESCRIPTION: Demonstrates how to retrieve string parameters using the new AT Parser, which now returns null-terminated strings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nat_parser_string_get(&at_parser, index, value, &len);\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion with CONFIG_BT_GATT_POOL\nDESCRIPTION: This CMake snippet includes the `gatt_pool.c` source file in the build process only if the `CONFIG_BT_GATT_POOL` configuration option is defined. `zephyr_sources_ifdef` is a Zephyr-specific macro for conditional source inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_sources_ifdef(CONFIG_BT_GATT_POOL gatt_pool.c)\"\n```\n\n----------------------------------------\n\nTITLE: Connecting and Sending Data with Socket in MoSh\nDESCRIPTION: Demonstrates how to establish a socket connection, set Release Assistance Indication (RAI), and send data using MoSh commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nlink funmode -1\nsock connect -a 111.222.111.222 -p 20000\nsock rai -i 0 --rai_last\nsock send -i 0 -d testing\n```\n\n----------------------------------------\n\nTITLE: ZAP Append Command - XML File Integration\nDESCRIPTION: West command for appending new cluster definitions to ZAP tool using XML files. Allows adding custom cluster configurations with optional base file and output directory specifications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/tools.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest zap-append <path_to_xml_file>\n```\n\n----------------------------------------\n\nTITLE: Enabling Modem Traces with UART Backend using West\nDESCRIPTION: Command to add the nrf91-modem-trace-uart snippet when building an application with west. This enables modem tracing with UART output at 1 Mbd with hardware flow control.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_snippet.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build --board *board_target* -- -D<image_name>_SNIPPET=\"nrf91-modem-trace-uart\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TF-M Partition Sizes in Kconfig\nDESCRIPTION: These Kconfig options allow specifying the size allocated for the TF-M partition in the final binary image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_building.rst#2025-04-21_snippet_6\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_PM_PARTITION_SIZE_TFM=<size>\nCONFIG_PM_PARTITION_SIZE_TFM_SRAM=<size>\n```\n\n----------------------------------------\n\nTITLE: Including Event Headers\nDESCRIPTION: This section includes the necessary directory for the application event headers, which allows the application to use event handling mechanisms defined by the included headers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_event_manager_profiler_tracer/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_include_directories(src/events)\n```\n\n----------------------------------------\n\nTITLE: Including Common Matter Sources in CMake\nDESCRIPTION: Includes a CMake file that adds all source files from the Matter common directory to the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/template/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/cmake/source_common.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Test Project with CMake for nRF Connect SDK\nDESCRIPTION: This CMake script sets up a JWT test project for the nRF Connect SDK. It defines the minimum CMake version, finds the Zephyr package, generates a test runner, includes necessary directories, handles CMock for AT commands, and adds source files for the JWT test and modem JWT implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/modem_jwt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(jwt_test)\n\n# generate runner for the test\ntest_runner_generate(src/jwt_test.c)\n\ntarget_include_directories(app PRIVATE src)\n\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem_at.h\n\t     WORD_EXCLUDE \"__nrf_modem_(printf|scanf)_like\\(.*\\)\")\n\n# add test file\ntarget_sources(app PRIVATE src/jwt_test.c)\ntarget_sources(app PRIVATE ../../../lib/modem_jwt/modem_jwt.c)\nadd_definitions(-DCONFIG_MODEM_JWT_MAX_LEN=850)\n\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include)\n```\n\n----------------------------------------\n\nTITLE: Installing RCP Firmware Package on nRF52840 Dongle\nDESCRIPTION: Command to install the RCP firmware package onto the nRF52840 Dongle using nRF Util.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil dfu usb-serial -pkg build/zephyr/zephyr.zip -p /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Configuring Recovery Button in Device Tree\nDESCRIPTION: Device tree overlay configuration for setting up a recovery button in the system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_recovery.rst#2025-04-21_snippet_7\n\nLANGUAGE: dts\nCODE:\n```\n/ {\n   chosen {\n      ncs,recovery-button = &button0;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Building Peripheral LBS Sample with FOTA Support\nDESCRIPTION: Command to build the Peripheral LBS sample with FOTA support enabled using MCUboot and the NCS_SAMPLE_MCUMGR_BT_OTA_DFU configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf52/fota_update.rst#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nwest build -b *board_target* -- -DCONFIG_BOOTLOADER_MCUBOOT=y -DCONFIG_NCS_SAMPLE_MCUMGR_BT_OTA_DFU=y\n```\n\n----------------------------------------\n\nTITLE: Enabling GPIO Node in Devicetree\nDESCRIPTION: This code snippet shows how to enable the ``gpio0`` node in the devicetree configuration to resolve a TF-M compilation error when the node is disabled. This workaround is applicable when building for nRF91 series devices and encountering the ``'TFM_PERIPHERAL_GPIO0_PIN_MASK_SECURE' undeclared`` error.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_63\n\nLANGUAGE: devicetree\nCODE:\n```\n\"&gpio0 {\\n  status = \\\"okay\\\";\\n};\"\n```\n\n----------------------------------------\n\nTITLE: TWI Read Example\nDESCRIPTION: Example showing read operation from BME680 device (address 0x76) on Thingy:91 returning chip ID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TWI_AT_commands.rst#2025-04-21_snippet_5\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XTWIR=2,\"76\",1\n\n#XTWIR: 61\nOK\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Modem Library\nDESCRIPTION: This snippet handles the shutdown of the modem library, ensuring that resources are properly released and that the modem is transitioned to a safe state. It provides output during the shutdown process, confirming the transition between functional modes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_callbacks/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid modem_shutdown() {\n    printf(\"Shutting down modem library\\n\");\n    lte_lc_func_mode_set(0); // Set to idle mode\n    printf(\"> Functional mode has changed to 0\\n\");\n    // Additional shutdown procedures\n    printf(\"> Shutting down\\n\");\n    printf(\"Bye\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Location Request with Multiple Methods\nDESCRIPTION: Example of initializing a location request with GNSS, Wi-Fi, and Cellular methods. This configuration allows for fallback between different positioning methods.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/location.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nlocation_request(&config)\\nmethod list: GNSS, Wi-Fi, Cellular\n```\n\n----------------------------------------\n\nTITLE: Second-stage Bootloader File Path Format\nDESCRIPTION: Format for specifying dual firmware files for second-stage bootloader upgrades. The paths must be space-separated, with the first entry for the S0 partition variant and the second for the S1 partition variant.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/fota_download.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[S0_bootloader_path] [S1_bootloader_path]\n```\n\n----------------------------------------\n\nTITLE: Configuring Carrier Build Settings in CMake\nDESCRIPTION: Sets up build configuration for SLM carrier and LwM2M carrier components. Includes directory configuration and conditional source file inclusion based on CONFIG flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/src/lwm2m_carrier/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(.)\ntarget_sources_ifdef(CONFIG_SLM_CARRIER app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_at_carrier.c)\ntarget_sources_ifdef(CONFIG_LWM2M_CARRIER_SETTINGS app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_at_carrier_cfg.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Project with Nordic SDK\nDESCRIPTION: Configures a CMake project using Zephyr framework with dynamic source file collection from the src directory. Ensures minimal project setup and source inclusion for Nordic Semiconductor applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_hids/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\nLANGUAGE: cmake\nCODE:\n```\nproject(NONE)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Deinitializing Downloader\nDESCRIPTION: Code snippet showing how to properly deinitialize the Downloader library after use, freeing resources which would require re-initialization for future downloads.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_3.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nerr = downloader_deinit(&dl);\n```\n\n----------------------------------------\n\nTITLE: Configuring HKDF Project Build with CMake for Zephyr RTOS\nDESCRIPTION: CMake configuration file for an HKDF (HMAC-based Key Derivation Function) project. It sets the minimum CMake version to 3.20.0, locates the Zephyr package using environment variables, defines the project name as 'hkdf', and specifies the main source file (src/main.c) for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/hkdf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(hkdf)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Displaying Modem Trace Statistics in C\nDESCRIPTION: This code snippet shows the console output of the modem trace backend sample. It displays the amount of received trace data, throughput, and CPU load percentage at regular intervals.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_trace_backend/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nCustom trace backend initialized\n*** Booting Zephyr OS build v3.0.99-ncs1  ***\nModem trace backend sample started\nConnecting to network\nLTE mode changed to 1\nTraces received:   9.2kB, 18.4kB/s, CPU-load:  6.48%\nTraces received:  14.4kB, 10.3kB/s, CPU-load:  3.65%\nTraces received:  36.7kB, 44.3kB/s, CPU-load:  6.36%\nTraces received:  51.6kB, 29.4kB/s, CPU-load:  5.72%\nTraces received:  65.9kB, 28.3kB/s, CPU-load:  5.00%\nTraces received:  67.5kB,  3.3kB/s, CPU-load:  2.34%\nTraces received:  68.6kB,  2.1kB/s, CPU-load:  2.10%\nTraces received:  70.0kB,  2.7kB/s, CPU-load:  2.12%\nTraces received:  71.5kB,  3.0kB/s, CPU-load:  2.23%\nTraces received:  74.2kB,  5.4kB/s, CPU-load:  2.60%\nTraces received:  81.8kB, 15.1kB/s, CPU-load:  3.38%\nTraces received:  82.2kB,  0.7kB/s, CPU-load:  1.64%\nTraces received:  83.9kB,  3.4kB/s, CPU-load:  2.37%\nLTE mode changed to 0\nCustom trace backend deinitialized\nBye\n```\n\n----------------------------------------\n\nTITLE: Linking Oberon PSA Core Dependencies\nDESCRIPTION: Configures library dependencies for the Oberon PSA core, including PSA interface, mbedcrypto, and security utilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/core/nrf_oberon/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(oberon_psa_core\n  PRIVATE\n    psa_crypto_library_config\n    psa_interface\n)\n\ntarget_link_libraries(oberon_psa_core\n  PRIVATE\n    psa_crypto_library_config\n    mbedcrypto_base\n    nrf_security_utils\n)\n\nnrf_security_add_zephyr_options_library(oberon_psa_core)\n\ntarget_link_libraries(${mbedcrypto_target}\n  PRIVATE\n    oberon_psa_core\n)\n```\n\n----------------------------------------\n\nTITLE: QSPI Flash Configuration in DeviceTree\nDESCRIPTION: DeviceTree configuration for QSPI flash setup on Nordic Thingy:53, including pin control and flash chip parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/qspi_xip_guide_nrf5340.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\n&qspi {\n        status = \"okay\";\n        pinctrl-0 = <&qspi_default>;\n        pinctrl-1 = <&qspi_sleep>;\n        pinctrl-names = \"default\", \"sleep\";\n        mx25r64: mx25r6435f@0 {\n            compatible = \"nordic,qspi-nor\";\n            reg = <0>;\n            writeoc = \"pp2o\";\n            readoc = \"read2io\";\n            sck-frequency = <8000000>;\n            jedec-id = [c2 28 17];\n            sfdp-bfp = [\n                e5 20 f1 ff  ff ff ff 03  44 eb 08 6b  08 3b 04 bb\n                ee ff ff ff  ff ff 00 ff  ff ff 00 ff  0c 20 0f 52\n                10 d8 00 ff  23 72 f5 00  82 ed 04 cc  44 83 68 44\n                30 b0 30 b0  f7 c4 d5 5c  00 be 29 ff  f0 d0 ff ff\n            ];\n            size = <67108864>;\n            has-dpd;\n            t-enter-dpd = <10000>;\n            t-exit-dpd = <35000>;\n        };\n    };\n```\n\n----------------------------------------\n\nTITLE: MQTT Publish with Data Mode on nRF9160 SLM\nDESCRIPTION: Example of publishing a JSON message using data mode with the #XMQTTPUB command. When an empty message parameter is provided, SLM enters data mode allowing the payload to be entered separately and terminated with +++.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/MQTT_AT_commands.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nAT#XMQTTPUB=\"nrf91/slm/mqtt/topic0\"\nOK\n{\"msg\":\"Test Json publish\"}+++\n#XDATAMODE: 0\n```\n\n----------------------------------------\n\nTITLE: Performing Factory Reset for Fast Pair in C\nDESCRIPTION: Demonstrates how to clear Fast Pair user data from non-volatile memory using the bt_fast_pair_factory_reset function. This does not affect the Fast Pair subsystem's enabled/disabled state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nbt_fast_pair_factory_reset();\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Optimized STA Mode in nRF Wi-Fi Driver\nDESCRIPTION: Memory-efficient configuration for sensors with low data requirements. Provides TCP throughput of 0.3/1.5 Mbps (TX/RX) and UDP throughput of 5.1/0.5 Mbps.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/stack_configuration.rst#2025-04-21_snippet_5\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_WIFI_NM_WPA_SUPPLICANT=y\nCONFIG_NRF70_AP_MODE=n\nCONFIG_NRF70_P2P_MODE=n\nCONFIG_NET_PKT_TX_COUNT=6\nCONFIG_NET_PKT_RX_COUNT=6\nCONFIG_NET_BUF_TX_COUNT=12\nCONFIG_NET_BUF_RX_COUNT=6\nCONFIG_NRF70_RX_NUM_BUFS=6\nCONFIG_NET_BUF_DATA_SIZE=500\nCONFIG_HEAP_MEM_POOL_SIZE=40144\nCONFIG_NRF_WIFI_CTRL_HEAP_SIZE=20000\nCONFIG_NRF_WIFI_DATA_HEAP_SIZE=199856\nCONFIG_SPEED_OPTIMIZATIONS=y\nCONFIG_NRF70_UTIL=n\nCONFIG_NRF70_MAX_TX_AGGREGATION=1\nCONFIG_NRF70_MAX_TX_TOKENS=5\n```\n\n----------------------------------------\n\nTITLE: Adding Element Metadata - Shell Command\nDESCRIPTION: This command adds element metadata for a new image to the DFU metadata composition by specifying element location and model IDs. It is crucial for defining the structure of the metadata.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfu metadata comp-elem-add 1 4 0 0x0000 0x0002 0xBF42 0xBF44\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth RPC with CMake in Zephyr\nDESCRIPTION: This CMake configuration sets up the Bluetooth RPC subsystem in a Zephyr project. It establishes an interface library, includes necessary directories, and conditionally adds subdirectories based on the project's configuration flags like CONFIG_BT_RPC_CLIENT and CONFIG_BT_RPC_HOST. Ensures inclusion of host shell commands manually when using the RPC-based stack. Dependencies include Zephyr build system, CMake, and enabled configuration flags. No inputs are directly processed; configurations affect build outputs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/rpc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(subsys_bluetooth_rpc)\n\ntarget_include_directories(subsys_bluetooth_rpc INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/common)\n\nadd_subdirectory(common)\nadd_subdirectory_ifdef(CONFIG_BT_RPC_CLIENT client)\nadd_subdirectory_ifdef(CONFIG_BT_RPC_HOST host)\nadd_subdirectory(soc)\n\n# Host shell commands are only included in Zephyr for BT_HCI, the default stack implementation that\n# is mutually exclusive with BT_RPC_STACK, so the commands must be pulled in manually to make them\n# work with the RPC-based stack.\nadd_subdirectory_ifdef(CONFIG_BT_SHELL ${ZEPHYR_BASE}/subsys/bluetooth/host/shell host/shell)\n```\n\n----------------------------------------\n\nTITLE: Setting up Nordic nRF Connect SDK CMake Project\nDESCRIPTION: This CMake script configures a Nordic Semiconductor SDK project. It sets the minimum required CMake version, locates the Zephyr package, defines the project, collects source files from the src directory, and adds them to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/esb/esb_ptx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE ${app_sources})\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Retrieving Notification Attributes in Bluetooth Low Energy App\nDESCRIPTION: Format of a request to retrieve notification attributes. It includes Command ID, Notification UID, Attribute IDs for app identifier, title, and message, along with a length field.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ancs_client/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n0 01 02 03 04 00 01 20 00 03\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth RSCs Source\nDESCRIPTION: This code includes the Running Speed and Cadence service (RSCs) source file if CONFIG_BT_RSCS is defined. It monitors and manages running metrics over Bluetooth.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_RSCS rscs.c)\n```\n\n----------------------------------------\n\nTITLE: Generating RSA-2048 Key Pair with OpenSSL\nDESCRIPTION: Uses OpenSSL to generate an RSA-2048 private key and save it to priv.pem. This key type is supported by MCUboot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_signature_keys.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nopenssl genrsa -out priv.pem 2048\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for IPC Service Host\nDESCRIPTION: Sets up the CMake build configuration including minimum version requirement, Zephyr package dependency, project name definition, and source file inclusion. Requires CMake 3.20.0 or higher and the Zephyr RTOS framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/ipc/ipc_service/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2024 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(ipc_service_host)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Source Files for ML Application in CMake\nDESCRIPTION: This CMake snippet conditionally includes source files for different components of a machine learning application based on configuration options. It uses target_sources_ifdef to add source files only when specific configurations are enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/src/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_ML_APP_DATA_AGGREGATOR_RELEASE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/data_aggregator_release.c)\n\ntarget_sources_ifdef(CONFIG_ML_APP_EI_DATA_FORWARDER_UART\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ei_data_forwarder_uart.c)\n\ntarget_sources_ifdef(CONFIG_ML_APP_EI_DATA_FORWARDER_BT_NUS\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ei_data_forwarder_bt_nus.c)\n\ntarget_sources_ifdef(CONFIG_ML_APP_EI_RESULT_NSMS\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ei_result_nsms.c)\n\ntarget_sources_ifdef(CONFIG_ML_APP_LED_STATE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/led_state.c)\n\ntarget_sources_ifdef(CONFIG_ML_APP_ML_RUNNER\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ml_runner.c)\n\ntarget_sources_ifdef(CONFIG_ML_APP_MODE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ml_app_mode.c)\n\ntarget_sources_ifdef(CONFIG_ML_APP_USB_STATE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/usb_state.c)\n\ntarget_sources_ifdef(CONFIG_ML_APP_SENSOR_SIM_CTRL\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sensor_sim_ctrl.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Impulse URI for Downloading from Private Project\nDESCRIPTION: Example configuration for downloading an Edge Impulse model directly from a private project in Edge Impulse studio. This requires setting the EDGE_IMPULSE_URI Kconfig option and providing an API key.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/edge_impulse.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_EDGE_IMPULSE_URI=\"https://studio.edgeimpulse.com/v1/api/XYZ/deployment/download?type=zip\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to MQTT Broker\nDESCRIPTION: Command to establish a connection with an MQTT broker using specified parameters like username, password, URL, and port\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/MQTT_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT\nCODE:\n```\nAT#XMQTTCON=1,\"\",\"\",\"mqtt.server.com\",1883\n```\n\n----------------------------------------\n\nTITLE: Flash with Recovery\nDESCRIPTION: Command to recover a device by erasing all user-available non-volatile memory and disabling any readback protection mechanism. Used when a device is not functioning correctly or is protected.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/programming.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwest flash --recover\n```\n\n----------------------------------------\n\nTITLE: Generating simplified JWT and full JWT in C\nDESCRIPTION: This snippet demonstrates the generation of both simplified and full JWTs. For the simplified version, it generates a JWT with only the **sub** and **exp** claims, while the full JWT includes additional claims such as **aud**, **iss**, **iat**, and a key ID in the header. It produces outputs to the serial terminal for both types of tokens.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_jwt/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\njwt_sample: Application JWT sample (nrf54h20dk)\njwt_sample: Generating simplified JWT token\napp_jwt: pubkey_der (91 bytes) =  3059301306072a8648ce3d020106082a8648ce3d0301070342000477284f32d5b9a68a69220b92ea1e48549dd25d225e12f44a74f4d3ab1559c544dbe1db85891ce77aec84e95ba7cc2764c4ab18dd19e505e63ccee9db2a98fd47\njwt_sample: JWT(length 218):\njwt_sample: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJucmY1NGgyMGRrLmUwZmE3OGQ1NjkxNzM3ZmVmZjdhOTM3YTgyODc3ZTBkIiwiZXhwIjoxNzM2Mjg3MjAwfQ.p8YA6nBSDhmaHBaGXYfji7CFvmc22KtD_zMO8qOgsWVQi7iRnhSHzIbOfJcxcD3r38xNBsN2wSyvmJUqx2Vesg\njwt_sample: Generating full JWT token\napp_jwt: pubkey_der (91 bytes) =  3059301306072a8648ce3d020106082a8648ce3d03010703420004017e627cc237c5a37d9142d0cba1530a5653c4f41e6ba6e06d3b74fdf5c308b09afffd761d99946d5deb4dd97dbd0dbcba62c3d9ba518fc9e43be88b780b1484\njwt_sample: JWT(length 528):\njwt_sample: eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IjRkMmM2NjdmNTYzMzExY2Q4OWE2N2M2ZWQ4ZDQwZDBmYWIyMzAyNTc3MjIyNjNjNDNkMThiNTM4YzZjN2JjZTkifQ.eyJpYXQiOjE3MzU2ODI0MDAsImp0aSI6Im5yZjU0aDIwZGsuMmMwN2VmYTc2MTA4NjViYzQ5YjE1N2I5NDMwNTc2N2MiLCJpc3MiOiJucmY1NGgyMDRrLjM3NThlMTk0LTcyODItMTFlZi05MzJiLTdiMWYwNzBjY2U3YSIsInN1YiI6IjM3NThlMTk0LTcyODItMTFlZi05MzJiLTdiMWYwNzBjY2U3YSIsImF1ZCI6IkpTT04gd2ViIHRva2VuIGZvciBkZW1vbnN0cmF0aW9uIiwiZXhwIjoxNzM2Mjg3MjAwfQ.sc6tcj5j4s-TTd0nRXW77yr6lfu62575_LzzHSMXsR32HEvnx30wIUR-t1Diidy2eC0lL1inYR_8nUNDTREaRQ\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Options to Disable Default Features for Minimal Profile\nDESCRIPTION: This snippet disables several default features (ROTPK, IAK, OTP, OTP_WRITEABLE, NV_COUNTERS) if the CONFIG_TFM_PROFILE_TYPE_MINIMAL option is enabled. This is used to create a minimal TF-M profile.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_PROFILE_TYPE_MINIMAL)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DPLATFORM_DEFAULT_ROTPK=OFF\n    -DPLATFORM_DEFAULT_IAK=OFF\n    -DPLATFORM_DEFAULT_OTP=OFF\n    -DPLATFORM_DEFAULT_OTP_WRITEABLE=OFF\n    -DPLATFORM_DEFAULT_NV_COUNTERS=OFF\n  )\nelif(NOT CONFIG_TFM_PARTITION_PROTECTED_STORAGE)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DPLATFORM_DEFAULT_OTP=OFF\n    -DPLATFORM_DEFAULT_OTP_WRITEABLE=OFF\n    -DPLATFORM_DEFAULT_NV_COUNTERS=OFF\n    -DPLATFORM_DEFAULT_NV_SEED=OFF\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling Commissioner Role in CLI Sample\nDESCRIPTION: Command to start the Commissioner role on the Leader device in the OpenThread CLI sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot commissioner start\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Manifest Payload Fetch\nDESCRIPTION: YAML configuration for root manifest payload fetch sequence including dependency integrity checks and processing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_external_memory.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsuit-payload-fetch:\n- suit-directive-set-component-index: 0\n- suit-directive-override-parameters:\n    suit-parameter-uri: \"#{{ application[\\'name\\'] }}\"\n- suit-directive-fetch:\n  - suit-send-record-failure\n- suit-condition-dependency-integrity:\n  - suit-send-record-success\n  - suit-send-record-failure\n  - suit-send-sysinfo-success\n  - suit-send-sysinfo-failure\n- suit-directive-process-dependency:\n  - suit-send-record-success\n  - suit-send-record-failure\n  - suit-send-sysinfo-success\n  - suit-send-sysinfo-failure\n```\n\n----------------------------------------\n\nTITLE: Installing Device Credentials with Python Script\nDESCRIPTION: Command to run the device_credentials_installer.py Python script for creating and installing credentials on a device for nRF Cloud connectivity. The script connects to the device over USB or RTT and installs certificates in the modem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/nrf_cloud.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevice_credentials_installer.py\n```\n\n----------------------------------------\n\nTITLE: Setting A-GNSS Elevation Mask in C\nDESCRIPTION: Sets the elevation mask for filtered A-GNSS using the location_assist_agnss_set_elevation_mask function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_location_assistance.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nlocation_assist_agnss_set_elevation_mask();\n```\n\n----------------------------------------\n\nTITLE: Initializing AT Parser in C\nDESCRIPTION: Demonstrates how to initialize the AT parser with an AT command response string. The initialization requires a parser structure and the AT command string to be parsed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_parser.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint err;\nstruct at_parser parser;\nconst char *at_response = \"+CFUN: 1\";\n\nerr = at_parser_init(&parser, at_response);\nif (err) {\n   return err;\n}\n```\n\n----------------------------------------\n\nTITLE: Building SoftAP Sample\nDESCRIPTION: This command builds the SoftAP sample for the nRF7002 DK using the west build tool. The board target is specified as nrf7002dk/nrf5340/cpuapp.  This command needs to be executed in the project directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/softap/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Retrieving Integer Parameters with AT Parser in C\nDESCRIPTION: Shows how to retrieve integer parameters using the new AT Parser, which is type-generic and replaces multiple specific functions from the old parser.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nint value;\nerr = at_parser_num_get(&at_parser, index, &value);\n\nuint16_t value;\nerr = at_parser_num_get(&at_parser, index, &value);\n```\n\n----------------------------------------\n\nTITLE: OpenSSL TLS 1.3 Client Connection\nDESCRIPTION: OpenSSL command to perform a TLS 1.3 client connection using TLS_AES_128_GCM_SHA256 cipher suite and ECDSA root certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nopenssl s_client -connect 192.0.2.1:4243 -tls1_3 -verifyCAfile certs/ecdsa/root_cert.pem -ciphersuites TLS_AES_128_GCM_SHA256\n```\n\n----------------------------------------\n\nTITLE: Installing GN Tool on macOS\nDESCRIPTION: This snippet offers a procedure for downloading and installing GN meta-build system on macOS, supporting both Apple Silicon and Intel architectures. It describes the need to alter the PATH variable to include the GN directory. The output comprises configured PATH for system access to GN binaries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/tools.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmkdir ${HOME}/gn && cd ${HOME}/gn\n```\n\nLANGUAGE: console\nCODE:\n```\ncurl -o gn.zip -L https://chrome-infra-packages.appspot.com/dl/gn/gn/mac-arm64/+/latest\n```\n\nLANGUAGE: console\nCODE:\n```\nunzip gn.zip\nrm gn.zip\n(echo; echo 'export PATH=\"'${HOME}'/gn:$PATH\"') >> ~/.zprofile\nsource ~/.zprofile\n```\n\n----------------------------------------\n\nTITLE: Generating C++ Code for Custom Clusters\nDESCRIPTION: Command to generate C++ code for the configured clusters based on the modified ZAP file. The --full option ensures all necessary files are generated.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/custom_clusters.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nwest zap-generate --full\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11b PER Measurement (Transmitter)\nDESCRIPTION: Commands to set up the transmitter for 802.11b PER measurement, including channel, packet parameters, and transmission settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 1\nuart:~$ wifi_radio_test tx_pkt_tput_mode 0\nuart:~$ wifi_radio_test tx_pkt_preamble 0\nuart:~$ wifi_radio_test tx_pkt_rate 1\nuart:~$ wifi_radio_test tx_pkt_len 1024\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num 10000\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Provisioning Certificates for nRF91 using nrfcredstore\nDESCRIPTION: Command-line utility for provisioning root CA certificates on nRF91 devices using serial port communication. Requires specifying serial port and security tags for certificate installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nnrfcredstore <serial port> list\n```\n\nLANGUAGE: console\nCODE:\n```\nnrfcredstore <serial port> write <sec tag> ROOT_CA_CERT DigiCertGlobalRootG2.crt.pem\n```\n\nLANGUAGE: console\nCODE:\n```\nnrfcredstore <serial port> write <secondary sec tag> ROOT_CA_CERT BaltimoreCyberTrustRoot.crt.pem\n```\n\n----------------------------------------\n\nTITLE: Generating Readme Header File from Board-Specific Text\nDESCRIPTION: Creates a C header file containing the readme text as a string variable. Checks for a board-specific readme file, falls back to a template, and adds Git commit hash and build date if Git is available.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/connectivity_bridge/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Generate a C header file with the readme text as a string variable\nset(OUTPUT_README_HEADER_FILE \"${CMAKE_BINARY_DIR}/generated/readme/readme.h\")\nset(INPUT_README_FILE ${CMAKE_SOURCE_DIR}/boards/${NORMALIZED_BOARD_TARGET}_readme.txt)\n\nif(NOT EXISTS ${INPUT_README_FILE})\n  message(WARNING \"${INPUT_README_FILE} does not exist\")\n  set(INPUT_README_FILE ${CMAKE_SOURCE_DIR}/README_TEMPLATE.txt)\nendif()\n\nfile(READ ${INPUT_README_FILE} README_CONTENT)\nif(GIT_FOUND)\n  execute_process(\n        COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD\n        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n        OUTPUT_VARIABLE GIT_HASH\n        OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  string(TIMESTAMP CURRENT_DATE \"%Y-%m-%d\")\n  string(APPEND README_CONTENT \"\\nFirmware version: ${GIT_HASH} Build date: ${CURRENT_DATE}\")\nendif()\nstring(REPLACE \"\\\"\" \"\\\\\\\"\" README_CONTENT \"${README_CONTENT}\")\nstring(REPLACE \"\\n\" \"\\\\n\\\"\\n\\\"\" README_CONTENT \"${README_CONTENT}\")\nfile(WRITE ${OUTPUT_README_HEADER_FILE} \"\\\"${README_CONTENT}\\\"\")\n```\n\n----------------------------------------\n\nTITLE: Triggering Manual Provisioning in C\nDESCRIPTION: Shows how to trigger immediate provisioning manually by calling the nrf_provisioning_trigger_manually function after the library has been initialized.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_provisioning.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nnrf_provisioning_trigger_manually();\n```\n\n----------------------------------------\n\nTITLE: Linking Pin Configurations to UART0 Device\nDESCRIPTION: Example of linking the defined pin configurations to the UART0 device in the devicetree. This associates the pinctrl states with the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/pin_control.rst#2025-04-21_snippet_2\n\nLANGUAGE: devicetree\nCODE:\n```\n#include \"board-pinctrl.dtsi\"\n\n &uart0 {\n     ...\n     /* default state */\n     pinctrl-0 = <&uart0_default>;\n     /* sleep state (only applicable if CONFIG_PM_DEVICE=y) */\n     pinctrl-1 = <&uart0_sleep>;\n     /* state assigned to each pinctrl-N property by index */\n     pinctrl-names = \"default\", \"sleep\";\n     ...\n };\n```\n\n----------------------------------------\n\nTITLE: TCP Connect Command Example\nDESCRIPTION: Example showing how to connect to an IPv6 address using the XCONNECT command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_10\n\nLANGUAGE: AT\nCODE:\n```\nAT#XCONNECT=\"2a02:c207:2051:8976::1\",4567\n#XCONNECT: 1\nOK\n```\n\n----------------------------------------\n\nTITLE: Configuring Nordic Device Source Files with CMake\nDESCRIPTION: CMake configuration that conditionally includes source files based on feature configuration flags. Each target_sources_ifdef statement adds a source file to the 'app' target only if the corresponding CONFIG flag is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/src/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_DESKTOP_BLE_BOND_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ble_bond.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_BLE_ENABLE_PASSKEY\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ble_passkey.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_BLE_LATENCY_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ble_latency.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_BLE_CONN_PARAMS_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ble_conn_params.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_BLE_DISCOVERY_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ble_discovery.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_BLE_SCAN_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ble_scan.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_BLE_QOS_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ble_qos.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_CONFIG_CHANNEL_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/info.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_FACTORY_RESET\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/factory_reset.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_FAST_PAIR\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/fast_pair.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_SWIFT_PAIR\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/swift_pair.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_HID_FORWARD_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/hid_forward.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_HID_STATE_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/hid_state.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_HID_STATE_PM_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/hid_state_pm.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_USB_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/usb_state.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_USB_PM_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/usb_state_pm.c)\n\ntarget_sources_ifdef(CONFIG_CAF_LEDS\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/led_state.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_LED_STREAM_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/led_stream.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_CONFIG_CHANNEL_DFU_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/dfu.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_DFU_MCUMGR_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/dfu_mcumgr.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_FN_KEYS_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/fn_keys.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_WATCHDOG_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/watchdog.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_BAS_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/bas.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_QOS_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/qos.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_DEV_DESCR_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/dev_descr.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_HIDS_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/hids.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_HFCLK_LOCK_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/hfclk_lock.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_CONSTLAT_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/constlat.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_FAILSAFE_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/failsafe.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_CPU_MEAS_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/cpu_meas.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_NRF_PROFILER_SYNC_GPIO_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/nrf_profiler_sync.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_DVFS\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/dvfs.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Library with Zephyr in CMake\nDESCRIPTION: This snippet uses CMake commands to link libraries and add source files and directories for the Zephyr Bluetooth library based on configuration flags such as CONFIG_BT_CONN and CONFIG_BT_RPC_INTERNAL_FUNCTIONS. It ensures that only relevant parts of the library are included, optimizing for different Bluetooth functionalities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/rpc/host/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_link_libraries(subsys_bluetooth_rpc)\n\nzephyr_library_sources(\n  bt_rpc_gap_host.c\n  bt_rpc_crypto_host.c\n)\n\nzephyr_library_sources_ifdef(\n  CONFIG_BT_CONN\n  bt_rpc_conn_host.c\n  bt_rpc_gatt_host.c\n)\n\nzephyr_library_sources_ifdef(\n  CONFIG_BT_RPC_INTERNAL_FUNCTIONS\n  bt_rpc_internal_host.c\n)\n\nzephyr_library_include_directories_ifdef(\n  CONFIG_BT_RPC_INTERNAL_FUNCTIONS\n  ${ZEPHYR_BASE}/subsys/bluetooth/host\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Sensor Gain via Mesh CLI Command\nDESCRIPTION: Example command showing how to set the sensor gain parameter for the present ambient light level sensor to 1.1 using the mesh models sensor setting-set command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/sensor_client/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmesh models sensor setting-set 0x004E 0x0074 1.1\n```\n\n----------------------------------------\n\nTITLE: Defining Response Message Structure in Protocol Buffers\nDESCRIPTION: Defines the structure of the Response message used by the target to provide feedback on the result of an action to the configurator, including request operation code, status, and device status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/wifi_prov.rst#2025-04-21_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Response {\n  optional enum request_op_code = 1;\n  optional enum status = 2;\n  optional message device_status = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Zephyr Network and WiFi Management APIs\nDESCRIPTION: Configures CMock for Zephyr's networking and WiFi management APIs, with necessary exclusions to handle complex code structures that CMock cannot parse properly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/location/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Net and Wi-Fi management API mocking requires tricks as the headers have code structures\n# that CMock is not able to parse properly.\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/net/net_if.h\n\t     FUNC_EXCLUDE \".*net_if_send_data\"\n\t     FUNC_EXCLUDE \".*net_if_recv_data\"\n\t     FUNC_EXCLUDE \".*net_if_queue_tx\"\n\t     FUNC_EXCLUDE \".*net_if_register_timestamp_cb\"\n\t     FUNC_EXCLUDE \".*net_if_call_timestamp_cb\"\n\t     FUNC_EXCLUDE \".*net_if_add_tx_timestamp\"\n\t     FUNC_EXCLUDE \".*net_if_ipv4_get_netmask\"\n\t     FUNC_EXCLUDE \".*net_if_ipv4_set_netmask\"\n\t     WORD_EXCLUDE \".*deprecated.*\"\n\t     WORD_EXCLUDE \".*struct net_pkt.*\")\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/net/net_mgmt.h\n\t     FUNC_EXCLUDE \".*net_mgmt_event_notify\"\n\t     FUNC_EXCLUDE \".*net_mgmt_event_notify_with_info\"\n\t     FUNC_EXCLUDE \".*net_mgmt_event_wait_on_iface\"\n\t     WORD_EXCLUDE \".*struct net_if.*\")\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/net/wifi_mgmt.h\n\t     FUNC_EXCLUDE \"NET_MGMT_DEFINE_REQUEST_HANDLER\"\n\t     FUNC_EXCLUDE \"BUILD_ASSERT\"\n\t     FUNC_EXCLUDE \"offsetof\")\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/device.h\n\t     FUNC_EXCLUDE \".*DEVICE_DT_NAME_GET\"\n\t     FUNC_EXCLUDE \".*device_get_dt_nodelabels\"\n\t     WORD_EXCLUDE \".*device_visitor_callback_t.*\")\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS 1.2 EC J-PAKE to PMS Key Derivation in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for the TLS 1.2 EC J-PAKE (Password Authenticated Key Exchange by Juggling PArameters) to PMS (Pre-Master Secret) derivation algorithm within the PSA Cryptography API. This key exchange is used in TLS 1.2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_14\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_TLS12_ECJPAKE_TO_PMS`\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Modem Data as String in C\nDESCRIPTION: Retrieves a specific modem data value as a string. This function can be used to get various types of modem information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_info.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nmodem_info_string_get();\n```\n\n----------------------------------------\n\nTITLE: Creating a CMakeLists.txt File for Driver Build Integration\nDESCRIPTION: This snippet represents the CMakeLists.txt file needed to add driver sources to the build as a Zephyr library. It's a crucial part of integrating a new driver into the NCS build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/add_new_driver.rst#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# CMakeLists.txt\nzephyr_library()\n```\n\n----------------------------------------\n\nTITLE: Controlling LED State via Command-by-ID\nDESCRIPTION: Sends a command to control LED attribute with specific action values: 0 (off), 1 (on), 2 (toggle)\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: matter-cli\nCODE:\n```\nany command-by-id 0xFFF1FC01 0xFFF10000 '{ \"0x0\": \"u:*action*\" }' 1 1\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake for Multi-image Application\nDESCRIPTION: This snippet sets the minimum required CMake version, finds the Zephyr package, checks for sysbuild arguments, and specifies the target source files. The snippet ensures the correct build environment is prepared and throws an error if built without sysbuild, which is necessary for multi-image applications. Ensure that Zephyr environment variables are properly configured before proceeding with the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_flpr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n\nproject(idle_flpr)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Scan-Only Profile in nRF Wi-Fi Driver\nDESCRIPTION: Basic configuration for scan-only functionality with minimal buffer allocation. Suitable for location services applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/stack_configuration.rst#2025-04-21_snippet_3\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_WIFI_NM_WPA_SUPPLICANT=n\nCONFIG_NRF70_AP_MODE=n\nCONFIG_NRF70_P2P_MODE=n\nCONFIG_NET_PKT_TX_COUNT=1\nCONFIG_NET_PKT_RX_COUNT=1\nCONFIG_NET_BUF_TX_COUNT=1\nCONFIG_NET_BUF_RX_COUNT=1\n```\n\n----------------------------------------\n\nTITLE: Defining LBS Service UUID in C\nDESCRIPTION: The 128-bit vendor-specific UUID for the LED Button Service.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/lbs.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n\"00001523-1212-EFDE-1523-785FEABCD123\"\n```\n\n----------------------------------------\n\nTITLE: Targeting Application Source Files\nDESCRIPTION: This snippet declares the source files for the application by adding the main source file located at src/main.c to the build target. It designates the file as a private source for the application target, ensuring it is included only in this target's build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_spim_loopback/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Initialize Multiple GPIO Pin Structures with Zephyr Macros\nDESCRIPTION: This snippet emphasizes the initialization of multiple GPIO pin structures using the Zephyr API. Utilizing GPIO_DT_SPEC_INST_GET_BY_IDX_OR macro allows for distinct GPIO configurations, enabling the creation of structured access to various GPIO pins.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/use_gpio_pin_directly.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#include <zephyr/drivers/gpio.h>\nstatic const struct gpio_dt_spec pin_dbg0 =\n    GPIO_DT_SPEC_GET_BY_IDX_OR(DT_NODELABEL(user_dbg_pin), gpios, 0, {0});\nstatic const struct gpio_dt_spec pin_dbg1 =\n\tGPIO_DT_SPEC_GET_BY_IDX_OR(DT_NODELABEL(user_dbg_pin), gpios, 1, {0});\n```\n\n----------------------------------------\n\nTITLE: Target Sources Definition\nDESCRIPTION: This command specifies the source files that should be compiled into the application. In this case, the `src/main.c` file is added as a private source file to the 'app' target. This means that the source file is only used for building the 'app' target and is not exposed to other targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_adc/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_sources(app PRIVATE src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: HTTP PUT request with IPv6 address\nDESCRIPTION: Sends an HTTP PUT request to update the state of LED 1, using an IPv6 address to explicitly specify the server. The request is sent over port 81.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n\"http PUT 'http://[2001:8c0:5140:895:f7ce:37ff:fe00:1971]:81/led/1' --raw=\\\"1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: SUIT DFU Fetch Source Registration\nDESCRIPTION: Function call to register fetch sources for retrieving additional data during the suit-payload-fetch sequence.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/suit_dfu.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nsuit_dfu_fetch_source_register();\n```\n\n----------------------------------------\n\nTITLE: GNSS Event Macro in C\nDESCRIPTION: The NRF_MODEM_GNSS_EVT_AGNSS_REQ macro represents the event sent by the GNSS module to request fresh A-GNSS data. The application receives this event and initiates a SUPL session to provide the requested data to the GNSS module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/supl_os_client.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n\"GNSS sends the :c:macro:`NRF_MODEM_GNSS_EVT_AGNSS_REQ` event when it needs fresh A-GNSS data.\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Ringing Volume Feature in Kconfig\nDESCRIPTION: Kconfig option for enabling support for adjustable ringing volume levels in Fast Pair FMDN devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_10\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_FAST_PAIR_FMDN_RING_VOLUME\n```\n\n----------------------------------------\n\nTITLE: Updated SRAM Region Definition in Device Tree\nDESCRIPTION: Example of new SRAM region definition style using nordic,owned-memory binding under the reserved-memory node. Shows simplified memory region configuration with IPC shared memory areas.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2.7_application.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n   reserved-memory {\n      cpuapp_ram0x_region: memory@2f010000 {\n         compatible = \"nordic,owned-memory\";\n         reg = <0x2f010000 DT_SIZE_K(260)>;\n         perm-read;\n         perm-write;\n         perm-secure;\n         #address-cells = <1>;\n         #size-cells = <1>;\n         ranges = <0x0 0x2f010000 0x41000>;\n         cpusec_cpuapp_ipc_shm: memory@0 {\n            reg = <0x0 DT_SIZE_K(2)>;\n         };\n         cpuapp_cpusec_ipc_shm: memory@800 {\n            reg = <0x800 DT_SIZE_K(2)>;\n         };\n      };\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Image Upload Response\nDESCRIPTION: Defines the CBOR data structure for the response to an image upload request. It includes the return code and the offset of the last successfully written byte of the candidate envelope.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_11\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str)\"rc\"         : (uint)\n    (str)\"off\"        : (uint)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Sources\nDESCRIPTION: CMake configuration to include the MyBtServiceDataProvider implementation in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n  src/ble_providers/my_bt_service_data_provider.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Registering RSRP Subscription in C\nDESCRIPTION: Registers a subscription for signal strength data (RSRP). This is required to retrieve RSRP information from the modem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_info.rst#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nmodem_info_rsrp_register();\n```\n\n----------------------------------------\n\nTITLE: Registering DULT Motion Detector Callbacks in C\nDESCRIPTION: Demonstrates how to register callbacks for the DULT motion detector using the bt_fast_pair_fmdn_motion_detector_cb_register function. Callbacks handle start, period expiration, and stop events for the motion detector.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nbt_fast_pair_fmdn_motion_detector_cb_register(struct bt_fast_pair_fmdn_motion_detector_cb *callbacks);\n```\n\n----------------------------------------\n\nTITLE: Building the Application for nRF5340\nDESCRIPTION: This snippet describes how to build the application for the nRF5340 using the 'west build' command, specifying the target board. The required binary files will be generated as part of the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/extxip_smp_svr/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b *board_target*\n```\n\n----------------------------------------\n\nTITLE: Setting Global Location Value without Acknowledgment\nDESCRIPTION: This command sets the global location value of the Generic Location state without waiting for a response. It similarly takes latitude, longitude, and altitude as parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_loc_cli.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models loc global-set-unack <Lat> <Long> <Alt>\n\n```\n\n----------------------------------------\n\nTITLE: Estimating Battery Lifetime with Payload Transmission\nDESCRIPTION: Code snippet for calculating the expected battery lifetime based on measured charge consumption with a specified payload transmission interval.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/optimizing/power_nrf91.rst#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n1000 mAh / ((116.57 mC/60 minutes) + 3.44 uA) = 3.18 years\n```\n\n----------------------------------------\n\nTITLE: MRAM Partition Configuration in Device Tree\nDESCRIPTION: Example showing new structure for MRAM partitions organized under the mram1x node, using nordic,owned-partitions binding instead of nordic,allocatable-mram. Demonstrates partition setup with size and permission configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.4.99-cs3_to_2.7_application.rst#2025-04-21_snippet_3\n\nLANGUAGE: devicetree\nCODE:\n```\n&mram1x {\n   cpuapp_rx_partitions: cpuapp-rx-partitions {\n      compatible = \"nordic,owned-partitions\", \"fixed-partitions\";\n      perm-read;\n      perm-execute;\n      perm-secure;\n      #address-cells = <1>;\n      #size-cells = <1>;\n      cpuapp_slot0_partition: partition@a6000 {\n         reg = <0xa6000 DT_SIZE_K(296)>;\n      };\n      cpuppr_code_partition: partition@f0000 {\n         reg = <0xf0000 DT_SIZE_K(64)>;\n      };\n   };\n}\n```\n\n----------------------------------------\n\nTITLE: Building SMP Server Sample for nRF5340 SoCs\nDESCRIPTION: Command to build the SMP Server sample for nRF5340 SoCs with Bluetooth transport configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf52/fota_update.rst#2025-04-21_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nwest build -b *board_target* -- -DEXTRA_CONF_FILE=overlay-bt.conf -DSB_CONFIG_NETCORE_HCI_IPC=y\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project in CMake\nDESCRIPTION: This snippet defines the project name and specifies the source files for the application. It adds 'src/main.c' as a private source file that is compiled with the application target, forming the core entry point for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/empty_net_core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(empty_net_core)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Main Source File to Application Target\nDESCRIPTION: Adds the main source file (main.c) to the application target for compilation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/remote/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nordic HID Device in fwupd\nDESCRIPTION: Configuration snippet showing how to specify device information in the nordic-hid.quirk file. This defines the device ID, plugin type, and bootloader information for fwupd.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/fwupd.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n[HIDRAW\\VEN_1915&DEV_52DE]\nPlugin = nordic_hid\nGType = FuNordicHidCfgChannel\nNordicHidBootloader = B0\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Image Upload Request\nDESCRIPTION: Defines the CBOR data structure for uploading a requested image to a device. It includes fields for stream session ID, length, offset, and the actual image chunk data to be delivered.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_10\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str,opt)\"stream_session_id\"      : (uint)\n    (str,opt)\"len\"                    : (uint)\n    (str)\"off\"                        : (uint)\n    (str)\"data\"                       : (byte str)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GNSS Fix Timeout in Kconfig\nDESCRIPTION: Sets the GNSS fix timeout in seconds. On each location sample, try for this long to achieve a GNSS fix before falling back to cellular positioning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_GNSS_FIX_TIMEOUT_SECONDS\n```\n\n----------------------------------------\n\nTITLE: Adding Memfault Config Directory in CMake\nDESCRIPTION: CMake command to include the Memfault configuration directory in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/memfault.rst#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(config)\n```\n\n----------------------------------------\n\nTITLE: Sample Download Output with HTTPS\nDESCRIPTION: Terminal output showing the download process from an HTTPS server, including certificate provisioning, network connection, download progress, and completion stats.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/download/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nDownload client sample started\nProvisioning certificate\nConnecting to network\nIP Up\nNetwork connected\nDownloading https://nrfconnectsdk.s3.eu-central-1.amazonaws.com/sample-img-100kb.png\n[ 100% ] |==================================================| (102923/102923 bytes)\nDownload completed in 13679 ms @ 7524 bytes per sec, total 102923 bytes\nIP down\nDisconnected from network\nSocket closed\nBye\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Assert Handler for MPSL in C\nDESCRIPTION: When CONFIG_MPSL_ASSERT_HANDLER is enabled, the application must provide a definition for the mpsl_assert_handle function. This function is called when MPSL encounters an unrecoverable error.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/mpsl/mpsl_assert.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid mpsl_assert_handle(const char * const file, const uint32_t line);\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Application Build Settings\nDESCRIPTION: Main CMake configuration for a Matter manufacturer-specific application. Sets minimum CMake version, finds Zephyr package, configures project settings and includes necessary Matter framework components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr HINTS $ENV{ZEPHYR_BASE})\n\nproject(matter-manufacturer_specific)\n\n# Override zap-generated directory.\nget_filename_component(CHIP_APP_ZAP_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated REALPATH CACHE)\n\n# Enable GNU STD support and initialize the Matter Data Model.\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/nrfconnect/app/enable-gnu-std.cmake)\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/src/app/chip_data_model.cmake)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for SPI Loopback Test\nDESCRIPTION: This snippet defines the CMake configuration for building an SPI loopback test application. It sets the minimum CMake version, locates the Zephyr RTOS environment, defines the project name, and adds the necessary source files. The inclusion of spi_rtio.c is conditional based on the CONFIG_SPI_RTIO Kconfig option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/spi/spi_loopback/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nset(KCONFIG_ROOT \"\\${ZEPHYR_BASE}/tests/drivers/spi/spi_loopback/Kconfig\")\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(spi_loopback)\n\ntarget_sources(app PRIVATE \\${ZEPHYR_BASE}/tests/drivers/spi/spi_loopback/src/spi.c)\ntarget_sources_ifdef(CONFIG_SPI_RTIO app PRIVATE \\${ZEPHYR_BASE}/tests/drivers/spi/spi_loopback/src/spi_rtio.c)\n```\n\n----------------------------------------\n\nTITLE: Define Pre-Image CMake Configuration Function\nDESCRIPTION: This snippet defines a CMake function called `${SYSBUILD_CURRENT_MODULE_NAME}_pre_image_cmake`. This function takes an `IMAGE` argument, retrieves the `NCS_VARIANT_APPLICATION` property of the target image, and then copies CMake cache variables associated with that variant application to variables prefixed with the image name. This allows for image-specific configurations based on variant applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\n \"function(${SYSBUILD_CURRENT_MODULE_NAME}_pre_image_cmake)\n  cmake_parse_arguments(PRE_IMAGE_CMAKE \\\"\\\" \\\"IMAGE\\\" \\\"\\\" ${ARGN})\n\n  get_property(variant_app TARGET ${PRE_IMAGE_CMAKE_IMAGE} PROPERTY NCS_VARIANT_APPLICATION)\n  if(NOT \\\"${variant_app}\\\" STREQUAL \\\"\\\")\n    set(variant_image ${PRE_IMAGE_CMAKE_IMAGE})\n\n    get_cmake_property(sysbuild_cache CACHE_VARIABLES)\n    foreach(var_name ${sysbuild_cache})\n      if(\\\"${var_name}\\\" MATCHES \\\"^${variant_app}_(.*)$\\\")\n        set(${variant_image}_${CMAKE_MATCH_1} \\\"${${var_name}}\\\" CACHE UNINITIALIZED \\\"\\\" FORCE)\n      endif()\n    endforeach()\n  endif()\nendfunction(${SYSBUILD_CURRENT_MODULE_NAME}_pre_image_cmake)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Radio-Based Commissioning\nDESCRIPTION: Enables radio-based commissioning for EnOcean devices, allowing automatic device registration through specific button press sequences\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/enocean.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbt_enocean_commissioning_enable()\n```\n\n----------------------------------------\n\nTITLE: MCUboot minimal configuration - Board files\nDESCRIPTION: Board files located in each sample's :file:`sysbuild/mcuboot/boards` directory provide board specific configuration for the MCUboot bootloader.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"Board files located in each sample's :file:`sysbuild/mcuboot/boards` directory\"\n```\n\n----------------------------------------\n\nTITLE: Updating nRF9151 Application Firmware via USB and MCUboot\nDESCRIPTION: Command to program the application binary to the nRF9151 application core over USB. Requires the device serial number and uses MCUboot trait.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy91x/thingy91x_updating_fw_programmer.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --firmware dfu_application.zip --serial-number <Thingy:91 X Serial number> --traits mcuboot --x-family nrf91 --core Application\n```\n\n----------------------------------------\n\nTITLE: Configuring PSA TLS Sample Build with CMake\nDESCRIPTION: CMake script that sets up the PSA TLS sample application build. It configures include directories, adds source files conditionally based on build configuration (TF-M, server/client mode, TLS/DTLS), and generates include files from DER certificates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(psa_tls_sample)\n\nzephyr_include_directories(src ${COMMON_DIR})\ntarget_include_directories(app PUBLIC ./include)\ntarget_sources(app PRIVATE src/main.c\n                           src/psa_tls_common.c)\n\nif(CONFIG_BUILD_WITH_TFM)\n  set(TLS_SRC_PATH \"non-secure\")\nelse()\n  set(TLS_SRC_PATH \"secure\")\nendif()\n\nif(CONFIG_PSA_TLS_SAMPLE_TYPE_SERVER)\n    target_sources(app PRIVATE src/${TLS_SRC_PATH}/psa_tls_credentials_server.c)\n    if(CONFIG_NET_SOCKETS_ENABLE_DTLS)\n        target_sources(app PRIVATE src/psa_dtls_functions_server.c)\n    else()\n        target_sources(app PRIVATE src/psa_tls_functions_server.c)\n    endif()\nelse()\n    target_sources(app PRIVATE src/${TLS_SRC_PATH}/psa_tls_credentials_client.c)\n    if(CONFIG_NET_SOCKETS_ENABLE_DTLS)\n        target_sources(app PRIVATE src/psa_dtls_functions_client.c)\n    else()\n        target_sources(app PRIVATE src/psa_tls_functions_client.c)\n    endif()\nendif()\n\nset(gen_dir ${ZEPHYR_BINARY_DIR}/include/generated/)\n\nforeach(inc_file\n  ec-root-cert.der\n\tec-echo-apps-cert.der\n\tec-echo-apps-key.der\n    )\n  generate_inc_file_for_target(\n    app\n    certs/ecdsa/${inc_file}\n    ${gen_dir}/${inc_file}.inc\n    )\nendforeach()\n\nforeach(inc_file\n  root-cert.der\n\techo-apps-cert.der\n\techo-apps-key.der\n    )\n  generate_inc_file_for_target(\n    app\n    certs/rsa/${inc_file}\n    ${gen_dir}/${inc_file}.inc\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Scanning for Wi-Fi networks\nDESCRIPTION: This command initiates a scan for available Wi-Fi networks. It is used to identify the SSIDs and other details of nearby networks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nwifi scan\n```\n\n----------------------------------------\n\nTITLE: Setting Occupancy Mode of Light Control Server - C\nDESCRIPTION: Sets the current Occupancy Mode of the Light Lightness Control Server with an acknowledgment required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl occupancy-set <Enable(off, on)>\n\tSet the Light Lightness Control Server's current Occupancy Mode and wait for a response.\n\n\t* ``Enable`` - Occupancy Mode to set.\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenThread RPC Build Directories in CMake\nDESCRIPTION: CMake script that adds subdirectories for OpenThread RPC components. It includes the common directory unconditionally, while client and server directories are included based on their respective configuration flags CONFIG_OPENTHREAD_RPC_CLIENT and CONFIG_OPENTHREAD_RPC_SERVER.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/rpc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(common)\nadd_subdirectory_ifdef(CONFIG_OPENTHREAD_RPC_CLIENT client)\nadd_subdirectory_ifdef(CONFIG_OPENTHREAD_RPC_SERVER server)\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Light Bulb Project Build in CMake\nDESCRIPTION: Complete CMake configuration that sets up a Matter-enabled light bulb application build. It includes necessary packages, enables GNU STD support, configures the Matter Data Model, and sets up source files and include directories. The configuration also handles optional AWS IoT integration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_bulb/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr HINTS $ENV{ZEPHYR_BASE})\n\nproject(matter-light-bulb)\n\n# Enable GNU STD support and initialize the Matter Data Model.\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/nrfconnect/app/enable-gnu-std.cmake)\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/src/app/chip_data_model.cmake)\n\n# NORDIC SDK APP START\n\n# Include all source files that are located in the Matter common directory.\ninclude(${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/cmake/source_common.cmake)\n\ntarget_include_directories(app PRIVATE\n    src\n    ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}\n)\n\nif(CONFIG_AWS_IOT_INTEGRATION)\n    add_subdirectory(src/aws_iot_integration)\nendif()\n\ntarget_sources(app PRIVATE\n    src/app_task.cpp\n    src/main.cpp\n    src/zcl_callbacks.cpp\n)\n\nchip_configure_data_model(app\n    INCLUDE_SERVER\n    BYPASS_IDL\n    GEN_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated\n    ZAP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/light_bulb.zap\n)\n```\n\n----------------------------------------\n\nTITLE: Publication Update Handler Implementation\nDESCRIPTION: Implementation of a publication update handler that initializes the message buffer for periodic publications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/dev_overview.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstatic int update_handler(struct bt_mesh_model *model)\n{\n    bt_mesh_model_msg_init(model->pub->msg, MESSAGE_STATUS_OPCODE);\n\n    // Fill the model publication buffer here\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AES CBC Project Build with CMake\nDESCRIPTION: This CMake configuration file sets up the build environment for an AES CBC encryption project. It requires CMake 3.20.0 or newer, locates the Zephyr package from the environment, defines the project name, and specifies the main source file to be compiled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/aes_cbc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(aes_cbc)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic Semiconductor Project\nDESCRIPTION: Configures the CMake build system for a Nordic Semiconductor project with Zephyr RTOS integration. Sets minimum CMake version, finds Zephyr package, and specifies project source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/rpc_host/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2021 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\nzephyr_library_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Deriving Generic OnOff State from Light State\nDESCRIPTION: Shows how the Generic OnOff state is determined based on the current Light state in the Bluetooth Mesh Light Lightness Server\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/lightness_srv.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nGeneric OnOff = (Light > 0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for DECT PHY RF Tool in CMake\nDESCRIPTION: Sets the current directory as a private include directory for the app target. This ensures the compiler can find header files in the current directory during build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/dect/rf_tool/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging Level in Kconfig\nDESCRIPTION: Sets the log level for this sample to debug.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_MULTI_SERVICE_LOG_LEVEL_DBG\n```\n\n----------------------------------------\n\nTITLE: Initializing zcbor State for Encoding in C\nDESCRIPTION: Example of initializing a zcbor state for encoding data to CBOR format. The code creates a state array, defines a buffer for storing the output, and sets up the encoding state with the appropriate parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_1.x_to_2.x.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nzcbor_state_t zs[2];\nuint8_t buffer[SOME_SIZE];\nzcbor_new_encode_state(zs, ARRAY_SIZE(zs), buffer, ARRAY_SIZE(buffer), 0);\n/* Encode data to the buffer with zs state */\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor Channels in C\nDESCRIPTION: Example configuration for sensor channels using the CAF Sensor Manager. This snippet defines an accelerometer channel configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/sensor_manager.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic const struct caf_sampled_channel accel_chan[] = {\n        {\n                .chan = SENSOR_CHAN_ACCEL_XYZ,\n                .data_cnt = 3,\n        },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor with Trigger in C\nDESCRIPTION: Example configuration for a sensor with trigger using the CAF Sensor Manager. This snippet defines a configuration for an LIS2DH12 accelerometer with trigger.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/sensor_manager.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic const struct sm_sensor_config sensor_configs[] = {\n        {\n                .dev_name = \"LIS2DH12-ACCEL\",\n                .event_descr = \"accel_xyz\",\n                .chans = accel_chan,\n                .chan_cnt = ARRAY_SIZE(accel_chan),\n                .sampling_period_ms = 20,\n                .active_events_limit = 3,\n                .trigger = &trig,\n        },\n};\n```\n\n----------------------------------------\n\nTITLE: Get Target xyL State\nDESCRIPTION: This shell command retrieves the Light xyL target state value from the bound server. This is useful for understanding the desired end-state during a transition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl target-get\n```\n\n----------------------------------------\n\nTITLE: Restricting Power States with Power Manager Restrict Event in C\nDESCRIPTION: This code demonstrates how to use the power_manager_restrict_event struct to restrict the allowed power states. It allows modules to specify the deepest allowed power state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/power_manager.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\npower_manager_restrict_event\n```\n\n----------------------------------------\n\nTITLE: Loading and Preparing Emergency Data Storage\nDESCRIPTION: This snippet shows how to load existing data from persistent memory into RAM and prepare the EMDS for new entries by calling emds_load and emds_prepare functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/emds.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nemds_load();\n\nemds_prepare();\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for nRF Desktop\nDESCRIPTION: Specifies include directories for the project, including application events, configuration headers, and common configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Include application events and configuration headers\nzephyr_library_include_directories(\n  src/events\n  src/util\n  )\n\nzephyr_include_directories(\n  configuration/common\n  ${APPLICATION_CONFIG_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining a compression type using NRF_COMPRESS_IMPLEMENTATION_DEFINE macro\nDESCRIPTION: This section explains how to define a custom compression type using the `NRF_COMPRESS_IMPLEMENTATION_DEFINE` macro. It highlights the requirements based on whether the library supports compression only, decompression only, or both. All other standard functions are mandatory and must be defined along with a unique ID for the compression library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/nrf_compression.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\"NRF_COMPRESS_IMPLEMENTATION_DEFINE(...)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting NFC via CLI\nDESCRIPTION: These commands initialize and start the NFC interface on the server device. They are executed via the UART interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/server/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ nfc init\nuart:~$ nfc start\n```\n\n----------------------------------------\n\nTITLE: Certificate Processing Function Definition\nDESCRIPTION: This CMake function processes a certificate file by generating a corresponding .inc file and defining a compiler definition used to assign C variables. The function takes the definition name and file name as input, checks if the certificate file exists, generates an .inc file, and adds a compiler definition that allows the certificate data to be included in the source code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(process_certificate definition_name file_name)\n\t\tset(cert_file ${APPLICATION_SOURCE_DIR}/credentials/${file_name})\n\t\tif(EXISTS ${cert_file})\n\t\t\tmessage(STATUS \"${file_name} found\")\n\n\t\t\tget_filename_component(file_base_name ${file_name} NAME_WE)\n\t\t\tset(inc_file_name ${file_base_name}.inc)\n\n\t\t\tset(inc_file_path ${app_certs_binary_dir}/${inc_file_name})\n\t\t\tgenerate_inc_file_for_target(app ${cert_file} ${inc_file_path})\n\n\t\t\t# Define a compiler macro with the path to the generated .inc file,\n\t\t\t# allowing it to be included in the source code.\n\t\t\tadd_definitions(-D${definition_name}=\"${inc_file_path}\")\n\t\tendif()\n\tendfunction()\n```\n\n----------------------------------------\n\nTITLE: Enabling hardware AP-Protect for non-nRF5340 devices using nrfutil\nDESCRIPTION: Command to enable hardware AP-Protect on all SoCs or SiPs other than nRF5340 by locking the UICR.APPROTECT register. This prevents unauthorized access to the device and cannot be disabled without erasing flash memory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/ap_protect.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device protection-set All\n```\n\n----------------------------------------\n\nTITLE: Creating Flash IPUC Driver by Component ID in C\nDESCRIPTION: Creates a flash IPUC driver instance based on the component ID, supporting both read-write and read-only modes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nflash_component_ipuc_create()\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Sysbuild Disable for West\nDESCRIPTION: This command configures west not to use sysbuild by default for building all projects across all workspaces, setting the build.sysbuild configuration to False globally.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/sysbuild_configuring_west.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwest config --global build.sysbuild False\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS 1.2 PSK to MS Key Derivation in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for the TLS 1.2 PSK (Pre-Shared Key) to MS (Master Secret) derivation algorithm within the PSA Cryptography API. This function is used to derive the master secret from a pre-shared key in TLS 1.2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_13\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_TLS12_PSK_TO_MS`\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from AT Command Response in C\nDESCRIPTION: Shows how to extract different types of values from an AT command response, including the prefix, numeric values using the type-generic macro at_parser_num_get, and string values using at_params_string_get.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_parser.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint err;\nstruct at_parser parser;\nconst char *at_response = \"+CGCONTRDP: 0,,\\\"internet\\\",\\\"\\\",\\\"\\\",\\\"10.0.0.1\\\",\\\"10.0.0.2\\\",,,,,1028\";\nuint16_t num;\nchar buffer[16] = { 0 };\nsize_t len = sizeof(buffer);\n\nerr = at_parser_init(&parser, at_response);\nif (err) {\n   return err;\n}\n\n/* Retrieve the AT command response prefix, at index 0 of the AT command string. */\nerr = at_parser_string_get(&parser, 0, buffer, &len);\nif (err) {\n   return err;\n}\n\n/* \"Prefix: `+CGCONTRDP`\" */\nprintk(\"Prefix: `%s`\\n\", buffer);\n\n/* Retrieve the first subparameter, at index 1 of the AT command string.\n * `at_parser_num_get` is a type-generic macro that retrieves an integer based on the type\n * of the passed variable. In this example, the preprocessor will expand the macro to the\n * function corresponding to the `uint16_t` type, which is the function `at_parser_uint16_get`.\n */\nerr = at_parser_num_get(&parser, 1, &num);\nif (err) {\n   return err;\n}\n\n/* \"First subparameter: 0\" */\nprintk(\"First subparameter: %u\\n\", num);\n\n/* Reset the buffer length. */\nlen = sizeof(buffer);\n\n/* Retrieve the third subparameter, at index 3 of the AT command string. */\nerr = at_parser_string_get(&parser, 3, buffer, &len);\nif (err) {\n   return err;\n}\n\n/* \"Third subparameter: `internet`\" */\nprintk(\"Third subparameter: `%s`\\n\", buffer);\n```\n\n----------------------------------------\n\nTITLE: Clearing Credentials Associated with Security Tag using modem_key_mgmt_clear in C\nDESCRIPTION: This code snippet showcases how to delete all credentials associated with a specific security tag in the nRF91 Series LTE modem using the `modem_key_mgmt_clear` function. A security tag is provided to identify the credentials to clear. An error message is printed if the clearing operation fails.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_key_mgmt.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint err;\nnrf_sec_tag_t sec_tag = 42;\n\nerr = modem_key_mgmt_clear(sec_tag);\nif (err) {\n        printk(\"Failed to clear credentials on sectag, err %d\\n\", err);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUmgr DFU Module Dependencies\nDESCRIPTION: Core dependencies required for enabling the MCUmgr DFU module including MCUmgr support, OS management handlers, and notification hooks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dfu_mcumgr.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MCUMGR=y\nCONFIG_MCUMGR_GRP_OS=y\nCONFIG_MCUMGR_GRP_OS_BOOTLOADER_INFO=y\nCONFIG_MCUMGR_MGMT_NOTIFICATION_HOOKS=y\nCONFIG_MCUMGR_SMP_COMMAND_STATUS_HOOKS=y\nCONFIG_NET_BUF=y\nCONFIG_ZCBOR=y\nCONFIG_CRC=y\nCONFIG_FLASH_MAP=y\nCONFIG_FLASH=y\n```\n\n----------------------------------------\n\nTITLE: TF-M and SSF Client PSA Crypto Configuration in CMake\nDESCRIPTION: Configures the build settings for TF-M or SSF client PSA crypto interface builds. It adjusts backend settings to use Oberon instead of CC3XX and sets specific ALT implementations flags to ensure proper linking.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_BUILD_WITH_TFM)\n  # Execute Cmake logic to forward configurations to TF-M build\n  include(${NRF_SECURITY_ROOT}/cmake/config_to_tf-m.cmake)\nendif()\n\nif(CONFIG_BUILD_WITH_TFM OR CONFIG_PSA_SSF_CRYPTO_CLIENT)\n  # We enable either TF-M or the SSF client PSA crypto interface but we are\n  # not in the secure image build\n\n  # Add replacement platform.c for NS build\n  list(APPEND src_zephyr\n    ${ARM_MBEDTLS_PATH}/library/platform.c\n  )\n\n  # The current version of the mbed TLS deliverables requires mbedcrypto built\n  # and linked in the NS image (e.g. for mbedtls and mbedx509 library).\n  # If CC3XX_BACKEND is enabled, configurations need to be converted to\n  # OBERON_BACKEND (enabled by default).\n\n  get_cmake_property(all_vars VARIABLES)\n\n  # 1. Non-secure should not build the PSA core or drivers\n  set(CONFIG_MBEDTLS_PSA_CRYPTO_C               False)\n\n  # 2. Enable OBERON_BACKEND, disable CC3XX_BACKEND\n  set(CONFIG_NRF_OBERON                         True)\n  set(CONFIG_OBERON_BACKEND                     True)\n  set(CONFIG_CC3XX_BACKEND                      False)\n  set(CONFIG_CC310_BACKEND                      False)\n  set(CONFIG_CC312_BACKEND                      False)\n  set(CONFIG_NRF_CC3XX_PLATFORM                 False)\n  set(CONFIG_PSA_CRYPTO_DRIVER_CC3XX            False)\n\n  # 3. Special case: _ALT in CC3XX, not in OBERON (set  to False)\n  set(CONFIG_MBEDTLS_AES_ALT                    False)\n  set(CONFIG_MBEDTLS_CCM_ALT                    False)\n  set(CONFIG_MBEDTLS_CHACHAPOLY_ALT             False)\n  set(CONFIG_MBEDTLS_CMAC_ALT                   False)\n  set(CONFIG_MBEDTLS_ECP_ALT                    False)\n  set(CONFIG_MBEDTLS_GCM_ALT                    False)\n  set(CONFIG_MBEDTLS_DHM_ALT                    False)\n  set(CONFIG_MBEDTLS_RSA_ALT                    False)\n\n  # 4. Special case: _ALT in ECJPAKE (only in OBERON, set to True)\n  #    Only has effect if ECJPAKE is enabled\n  set(CONFIG_MBEDTLS_ECJPAKE_ALT                True)\n\n  # 5. Special case: Handle platform specific configurations\n  set(CONFIG_MBEDTLS_PLATFORM_EXIT_ALT                 False)\n  set(CONFIG_MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT       False)\nelse()\n  nrf_security_debug(\"Building for pure Zephyr\")\nendif()\n\nset(CONFIG_MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG  True)\n```\n\n----------------------------------------\n\nTITLE: Linking WiFi OSAL Library\nDESCRIPTION: Links the Nordic WiFi OSAL (Operating System Abstraction Layer) library to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/single_domain/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(app PRIVATE nrf-wifi-osal)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor Data Aggregator in DeviceTree\nDESCRIPTION: Example of configuring two sensor data aggregators in a devicetree file. Shows how to define aggregator nodes with sensor descriptions, buffer sizes, and sample sizes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/sensor_data_aggregator.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\nagg0: agg0 {\n        compatible = \"caf,aggregator\";\n        sensor_descr = \"accel_sim_xyz\";\n        buf_data_length = <240>;\n        sample_size = <3>;\n        status = \"okay\";\n};\n\nagg1: agg1 {\n       compatible = \"caf,aggregator\";\n       sensor_descr = \"void_test_sensor\";\n       buf_data_length = <80>;\n       sample_size = <1>;\n       status = \"okay\";\n};\n```\n\n----------------------------------------\n\nTITLE: Dependencies Documentation in RST Format\nDESCRIPTION: ReStructuredText format documentation listing required NCS libraries, nrfxlib libraries, and Zephyr libraries needed for the Bluetooth LLPM sample application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/llpm/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nDependencies\n*************\n\nThis sample uses the following |NCS| libraries:\n\n* :ref:`latency_readme`\n* :ref:`latency_client_readme`\n\nThis sample uses the following `sdk-nrfxlib`_ libraries:\n\n* :ref:`nrfxlib:softdevice_controller`\n\nIn addition, it uses the following Zephyr libraries:\n\n* :file:`include/console.h`\n* :ref:`zephyr:kernel_api`:\n\n  * :file:`include/kernel.h`\n\n* :file:`include/sys/printk.h`\n* :file:`include/zephyr/types.h`\n* :ref:`zephyr:bluetooth_api`:\n\n  * :file:`include/bluetooth/bluetooth.h`\n  * :file:`include/bluetooth/conn.h`\n  * :file:`include/bluetooth/gatt.h`\n  * :file:`include/bluetooth/hci.h`\n  * :file:`include/bluetooth/uuid.h`\n  * :file:`include/bluetooth/scan.h`\n  * :file:`include/bluetooth/gatt_dm.h`\n```\n\n----------------------------------------\n\nTITLE: Getting Battery Voltage with modem_battery_voltage_get\nDESCRIPTION: Function to retrieve the current battery voltage in mV as measured by the modem. Returns voltage measured during modem wakeup or reception, not during transmission.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_battery.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nmodem_battery_voltage_get(&battery_voltage);\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple GPIO Pins in Devicetree with Names\nDESCRIPTION: This snippet shows how to declare multiple GPIO pins under a single devicetree node for multi-pin control. Each pin is assigned a name, enabling distinct identification and manipulation via the GPIO DT APIs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/use_gpio_pin_directly.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n\t/ {\n\t\tuser_dbg_pin: user-dbg-pin {\n\t\t\tcompatible = \"nordic,gpio-pins\";\n\t\t\tgpios = <&gpio0 2 GPIO_ACTIVE_HIGH>, <&gpio0 3 GPIO_ACTIVE_HIGH>;\n\t\t\tgpio-names = \"enter\", \"exit\";\n\t\t\tstatus = \"okay\";\n\t\t};\n\t};\n```\n\n----------------------------------------\n\nTITLE: Configuring Battery Charger in Devicetree\nDESCRIPTION: This snippet shows how to configure the battery charger node in the devicetree. It specifies the compatible property, GPIO pins for charge status output and enable, and the CSO switching frequency.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/battery_charger.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\nbattery_charger: battery-charger {\n    compatible = \"battery-charger\";\n    cso-gpios = <&gpio0 0 GPIO_ACTIVE_HIGH>;\n    enable-gpios = <&gpio0 1 GPIO_ACTIVE_HIGH>;\n    cso-switching-freq = <1000>;\n};\n```\n\n----------------------------------------\n\nTITLE: Clock synchronization equation for worst-case offset calculation in Bluetooth LE connections\nDESCRIPTION: This code block demonstrates the calculation of worst-case time offset between Central and Peripheral devices. It accounts for clock drift, jitter, and trigger accuracy to determine the maximum expected timing difference between synchronized actions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/conn_time_sync/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nworst_case_offset = drift + clock_jitter + trigger_jitter\nworst_case_offset = (c_sca_ppm + p_sca_ppm) * conn_interval + c_clock_jitter + p_clock_jitter + c_trigger_accuracy + p_trigger_accuracy\nworst_case_offset = (50 ppm + 50 ppm) * 10 ms + 1 µs + 1 µs + 0.5 µs + 0.5 µs\nworst_case_offset = 1 µs + 2 µs + 1 µs\nworst_case_offset = 4 µs\n```\n\n----------------------------------------\n\nTITLE: GNSS Service Status Format\nDESCRIPTION: Format for GNSS service and status notification messages indicating service availability and operational state\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/GNSS_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT\nCODE:\n```\n#XGPS: <gnss_service>,<gnss_status>\n```\n\n----------------------------------------\n\nTITLE: Setting TF-M CMake Build Options for PSA Tests\nDESCRIPTION: This code sets the necessary TF-M build properties for PSA architecture tests. It configures the test directory, PSA architecture tests path, configuration file, and selected test suite.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_psa_test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET zephyr_property_target\n             APPEND PROPERTY TFM_CMAKE_OPTIONS\n             -DCONFIG_TFM_TEST_DIR=${TFM_TEST_DIR}\n)\n\nset_property(TARGET zephyr_property_target\n             APPEND PROPERTY TFM_CMAKE_OPTIONS\n             -DPSA_ARCH_TESTS_PATH=${TFM_PSA_ARCHTEST_REPO_PATH}\n)\n\nset_property(TARGET zephyr_property_target\n             APPEND PROPERTY TFM_CMAKE_OPTIONS\n             -DCONFIG_PSA_ARCH_TESTS_CONFIG_FILE=${PSA_ARCH_TESTS_CONFIG_FILE}\n)\n\nset_property(TARGET zephyr_property_target\n             APPEND PROPERTY TFM_CMAKE_OPTIONS\n             -DTEST_PSA_API=${TEST_PSA_API}\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Bluetooth LE Advertising Autostart for Matter\nDESCRIPTION: This snippet explains how to automatically start Bluetooth LE advertising for Matter commissioning upon device boot if the device is not already commissioned. It uses the `CONFIG_CHIP_ENABLE_PAIRING_AUTOSTART` Kconfig option. This is useful for devices that should be easily discoverable for initial setup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_ENABLE_PAIRING_AUTOSTART` to ``y``\"\n```\n\n----------------------------------------\n\nTITLE: Reading DFU Package and Setting Compile Definition\nDESCRIPTION: Reads the generated DFU package as hexadecimal data and sets it as a compile definition for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/dfu/dfu_multi_image/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfile(READ\n  ${PROJECT_BINARY_DIR}/dfu_package.bin\n  DFU_PACKAGE_HEX\n  HEX\n  )\n\ntarget_compile_definitions(app PRIVATE\n  DFU_PACKAGE_HEX=\"${DFU_PACKAGE_HEX}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Levels in Matter SDK - C\nDESCRIPTION: This C snippet illustrates how to set a custom logging level for the Bluetooth LE module in the Matter SDK. Dependencies include Matter SDK's LogModule enumeration and the logging header. The main parameter is the logging level, with options such as Error, Progress, Detail, or Automation. This optimization helps reduce memory usage by fine-tuning log verbosity.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nCHIP_CONFIG_LOG_MODULE_Ble_DETAIL 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Sample Rate Converter CMake Project\nDESCRIPTION: Sets up the CMake build configuration for a Sample Rate Converter application. The script sets the minimum CMake version requirement, locates the Zephyr package using environment variables, defines the project name, and includes all C source files from the src directory into the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/sample_rate_converter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(sample_rate_converter)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring One-Wire Radio Coexistence\nDESCRIPTION: Devicetree configuration for one-wire radio coexistence interface with GRANT signal and optional concurrency mode setting.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/wifi_coex.rst#2025-04-21_snippet_3\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n      nrf_radio_coex: radio_coex_one_wire {\n         status = \"okay\";\n         compatible = \"generic-radio-coex-one-wire\";\n         grant-gpios =   <&gpio0 25 GPIO_ACTIVE_LOW>;\n         concurrency-mode = <0>;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unsigned Integer Parameter in C\nDESCRIPTION: Retrieves an unsigned integer parameter from the parsed AT command list.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_parser.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nat_params_unsigned_int_get();\n```\n\n----------------------------------------\n\nTITLE: Initializing Matter Server in C++\nDESCRIPTION: This code snippet initializes the Matter server using the nRF Connect SDK. It registers a custom Matter event handler and starts the Matter thread. Dependencies include the Nrf::Matter library and requires proper setup of the Matter stack. Key steps include preparing the server with initialization data and registering event handlers. The server is then started to manage Matter-specific events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/matter_api.rst#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nCHIP_ERROR MatterAppInit()\n{\n      /* Initialize Matter stack */\n      ReturnErrorOnFailure(Nrf::Matter::PrepareServer(Nrf::Matter::InitData{ .mPostServerInitClbk = [] {\n             LOG_INF(\"Matter server has been initialized.\");\n             return CHIP_NO_ERROR;\n      } }));\n\n      /* Register custom Matter event handler. */\n      ReturnErrorOnFailure(Nrf::Matter::RegisterEventHandler(CustomMatterEventHandler, 0));\n\n      /* Application specific initialization, e.g. hardware initialization.\n\n         ...\n      */\n\n      /* Start Matter thread that will run the scheduled initialization procedure. */\n      return Nrf::Matter::StartServer();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SUIT Envelope Info Implementation Library\nDESCRIPTION: Creates the main Zephyr library and adds the source file containing the SUIT envelope information implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/envelope_info/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(src/suit_envelope_info.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring External Flash for P-GPS Storage in Device Tree Overlay\nDESCRIPTION: This code snippet demonstrates how to configure external flash storage for P-GPS data using a device tree overlay. It sets the nordic,pm-ext-flash property and configures high drive mode for SPI3 pins to ensure proper signal quality at 8 MHz.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud_pgps.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/ {\n  chosen {\n    nordic,pm-ext-flash = &mx25r64;\n  };\n};\n\n/* Enable high drive mode for the SPI3 pins to get a square signal at 8 MHz */\n&spi3_default {\n  group1 {\n    nordic,drive-mode = <NRF_DRIVE_H0H1>;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Event Manager and Event Manager Proxy in C\nDESCRIPTION: This code snippet shows how to initialize both the Event Manager and the Event Manager Proxy. It assumes that the `event_manager_init()` function is available from the Event Manager library, and the snippet includes basic error handling for the initialization process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/event_manager_proxy.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\"/* Initialize Event Manager and Event Manager Proxy */\\nret = event_manager_init();\\n/* Error handling */\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion with CONFIG_BT_LL_SOFTDEVICE\nDESCRIPTION: This CMake snippet includes the `controller` subdirectory in the build process only if the `CONFIG_BT_LL_SOFTDEVICE` configuration option is defined. `add_subdirectory_ifdef` is used for conditional subdirectory inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory_ifdef(CONFIG_BT_LL_SOFTDEVICE controller)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Number of BIS Streams with Shell Command\nDESCRIPTION: Command to set the number of Broadcast Isochronous Streams for a given subgroup. The maximum number is configured via CONFIG_BT_BAP_BROADCAST_SRC_STREAM_COUNT.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnac num_bises <number> <BIG index> <Subgroup index>\n```\n\n----------------------------------------\n\nTITLE: Configuring Antenna Gain Parameters in Kconfig\nDESCRIPTION: Configuration settings for antenna gain compensation across different WiFi frequency bands. These parameters should be set in the project's prj.conf file or through CMake build arguments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/antenna_gain_compensation.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF70_ANT_GAIN_2G = <ant gain value>\nCONFIG_NRF70_ANT_GAIN_5G_BAND1 = <ant gain value>\nCONFIG_NRF70_ANT_GAIN_5G_BAND2 = <ant gain value>\nCONFIG_NRF70_ANT_GAIN_5G_BAND3 = <ant gain value>\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Wi-Fi Network using Shell Commands\nDESCRIPTION: Command to disconnect from the currently connected Wi-Fi network.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/using_wifi_shell_sample.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi disconnect\n```\n\n----------------------------------------\n\nTITLE: Enabling Fast Pair with Bond Manager Kconfig Option\nDESCRIPTION: When the Fast Pair bond management functionality is enabled using the `CONFIG_BT_FAST_PAIR_BOND_MANAGER` Kconfig option, the Fast Pair subsystem tracks the Bluetooth bonds created through the Fast Pair Procedure. It also unpairs them if the procedure is incomplete or the Account Key associated with the bonds is removed. \nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BT_FAST_PAIR_BOND_MANAGER\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Oberon Driver Component Inclusion\nDESCRIPTION: Conditionally appends additional source files based on configuration flags for various cryptographic operations like key management, AEAD, hashing, and signature verification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/nrf_oberon/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_KEY_MANAGEMENT_DRIVER        src_crypto_oberon ${drivers_path} oberon_key_management.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_AEAD_DRIVER                  src_crypto_oberon ${drivers_path} oberon_aead.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_KEY_DERIVATION_DRIVER        src_crypto_oberon ${drivers_path} oberon_key_derivation.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_MAC_DRIVER                   src_crypto_oberon ${drivers_path} oberon_mac.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_CIPHER_DRIVER                src_crypto_oberon ${drivers_path} oberon_cipher.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_HASH_DRIVER                  src_crypto_oberon ${drivers_path} oberon_hash.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_KEY_AGREEMENT_DRIVER         src_crypto_oberon ${drivers_path} oberon_key_agreement.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_PAKE_DRIVER                  src_crypto_oberon ${drivers_path} oberon_pake.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_ASYMMETRIC_SIGNATURE_DRIVER  src_crypto_oberon ${drivers_path} oberon_asymmetric_signature.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_ASYMMETRIC_ENCRYPTION_DRIVER src_crypto_oberon ${drivers_path} oberon_asymmetric_encrypt.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_CTR_DRBG_DRIVER              src_crypto_oberon ${drivers_path} oberon_ctr_drbg.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_HMAC_DRBG_DRIVER             src_crypto_oberon ${drivers_path} oberon_hmac_drbg.c)\nappend_with_prefix_ifdef(CONFIG_PSA_NEED_OBERON_KEY_WRAP_DRIVER              src_crypto_oberon ${drivers_path} oberon_key_wrap.c)\n```\n\n----------------------------------------\n\nTITLE: Button Press Configuration for Thingy:53\nDESCRIPTION: Defines button press behaviors for Thingy:53 platform including UI interactions, identification, recovery, and DFU modes\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_APP_BATTERY_POLL_INTERVAL\nCONFIG_APP_UI_SPEAKER_FREQ\n```\n\n----------------------------------------\n\nTITLE: Adding GNSS Source Files to Application Target in CMake\nDESCRIPTION: Adds the main GNSS source files (gnss_shell.c and gnss.c) to the 'app' target for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/gnss/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/gnss_shell.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/gnss.c)\n```\n\n----------------------------------------\n\nTITLE: Checking FMDN Provisioning State - C\nDESCRIPTION: This snippet describes how to check the current FMDN provisioning state using `bt_fast_pair_fmdn_is_provisioned`. This function should be called only when the Fast Pair module is ready.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n// Check provisioned state of the FMDN module.\nif (bt_fast_pair_is_ready() && bt_fast_pair_fmdn_is_provisioned()) {\n    // FMDN is provisioned\n}\n```\n\n----------------------------------------\n\nTITLE: Registering DULT Motion Detector Callbacks in C\nDESCRIPTION: Register callbacks for handling motion detector events including start, periodic checks, and stop requests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/dult.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ndult_motion_detector_cb_register(&motion_detector_cb);\n```\n\n----------------------------------------\n\nTITLE: Building the Wi-Fi Station Sample\nDESCRIPTION: The CLI command builds the Wi-Fi Station sample for the nRF7002 DK using the specified board target. Ensure that the `west` tool is installed and configured before attempting this build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/sta/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Set xyL Range State (Unacknowledged)\nDESCRIPTION: This shell command sets the Light xyL Range state value on the server without requesting a response.  It requires the minimum and maximum allowed x and y values as input.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl range-set-unack <XMin> <YMin> <XMax> <YMax>\n\tSet the Light xyL Range state value without requesting a response.\n\n\t* ``XMin`` - Minimum allowed x value.\n\t* ``YMin`` - Minimum allowed y value.\n\t* ``XMax`` - Maximum allowed x value.\n\t* ``YMax`` - Maximum allowed y value.\n```\n\n----------------------------------------\n\nTITLE: Creating Empty NFC NDEF Message in C\nDESCRIPTION: This snippet demonstrates how to create an empty NDEF message descriptor. The message is initialized with MAX_REC_COUNT which specifies the maximum number of records it can hold.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/text_rec.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nNFC_NDEF_MSG_DEF(nfc_text_msg, MAX_REC_COUNT);\n```\n\n----------------------------------------\n\nTITLE: Updating DFU Backend Configuration in Kconfig\nDESCRIPTION: The CONFIG_DESKTOP_DFU_MCUMGR_SUIT_ENABLE Kconfig option has been replaced by CONFIG_DESKTOP_DFU_BACKEND_SUIT. This change is due to the merging of the dfu_mcumgr_suit.c module with dfu_mcumgr.c.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.4.99-cs3_to_2.7_application.rst#2025-04-21_snippet_8\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DESKTOP_DFU_BACKEND_SUIT=y\n```\n\n----------------------------------------\n\nTITLE: Creating Azure IoT Hub\nDESCRIPTION: Creates an Azure IoT Hub instance in the specified resource group.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\naz iot hub create --resource-group <resource_name> --name <hub_name> --sku F1 --partition-count 2\n```\n\n----------------------------------------\n\nTITLE: Registering LTE Event Handler in C\nDESCRIPTION: Example of registering an LTE event handler using the updated lte_lc library API. The lte_lc_register_handler function is used to add a handler, while lte_lc_deregister_handler removes it.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.8.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nlte_lc_register_handler(my_lte_handler);\n// ...\nlte_lc_deregister_handler(my_lte_handler);\n```\n\n----------------------------------------\n\nTITLE: Initializing KMUKeyAllocator for Secure Key Storage in C++\nDESCRIPTION: This snippet demonstrates how to set up the KMUKeyAllocator for managing cryptographic keys in Nordic Matter samples. It requires including the relevant header file and invoking the SetPSAKeyAllocator method during the Matter stack initialization to ensure secure key management within the configured slots.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/security.rst#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <platform/nrfconnect/KMUKeyAllocator.h>\n\nstatic KMUKeyAllocator kmuAllocator;\nCrypto::SetPSAKeyAllocator(&kmuAllocator);\n```\n\n----------------------------------------\n\nTITLE: SUIT DFU Configuration Options\nDESCRIPTION: Kconfig options needed to enable and configure SUIT (Software Update for Internet of Things) DFU functionality\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/bootloader_dfu.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_SUIT=y\nCONFIG_SUIT_DFU_CANDIDATE_PROCESSING_MINIMAL=y\n```\n\n----------------------------------------\n\nTITLE: Setting Default Light CTL State Without Acknowledgement - Command Syntax\nDESCRIPTION: Sets the default CTL value without waiting for a response. This can be used for background updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl default-set-unack <Light> <Temp> <Dlt>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11n PER Measurement (Receiver)\nDESCRIPTION: Commands to initialize the Wi-Fi radio test in channel 36 and set it to receive mode for 802.11n PER measurement.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 36\nuart:~$ wifi_radio_test rx 1  #this will clear the earlier stats and wait for packets\n```\n\n----------------------------------------\n\nTITLE: Confirming the Current Image\nDESCRIPTION: This command confirms that the currently running image is functioning correctly, allowing it to persist across resets. It can be executed with or without specifying a hash.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ mcumgr <connection-options> image confirm \"\"\n```\n\n----------------------------------------\n\nTITLE: System Reboot Function\nDESCRIPTION: System reboot function used in non-SUIT DFU implementations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dfu.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nsys_reboot\n```\n\n----------------------------------------\n\nTITLE: Building nRF Desktop Release Configuration with Motion Simulation\nDESCRIPTION: CMake command for building nRF Desktop application in release configuration with simulated motion enabled for HID report rate testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/description.rst#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nwest build -p -b *board_target* -- \\\n-DFILE_SUFFIX=release \\\n-DCONFIG_DESKTOP_MOTION_SIMULATED_ENABLE=y\n```\n\n----------------------------------------\n\nTITLE: Initializing Temperature Sensor for Bluetooth Mesh\nDESCRIPTION: Demonstrates how to create a Bluetooth Mesh sensor for reporting device operating temperature using Nordic's temperature sensor driver. Includes device initialization, sensor value retrieval, and sensor structure definition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/sensor.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic const struct device *dev = DEVICE_DT_GET_ONE(nordic_nrf_temp);\n\nstatic int temp_get(struct bt_mesh_sensor *sensor,\n                   struct bt_mesh_msg_ctx *ctx,\n                   struct bt_mesh_sensor_value *rsp)\n{\n    struct sensor_value value;\n    int err;\n\n    sensor_sample_fetch(dev);\n    err = sensor_channel_get(dev, SENSOR_CHAN_DIE_TEMP, &value);\n    if (err) {\n        return err;\n    }\n    return bt_mesh_sensor_value_from_sensor_value(&value, rsp);\n}\n\nstruct bt_mesh_sensor temp_sensor = {\n    .type = &bt_mesh_sensor_present_dev_op_temp,\n    .get = temp_get,\n};\n\nvoid init(void)\n{\n     __ASSERT(device_is_ready(dev), \"Sensor device not ready\");\n}\n```\n\n----------------------------------------\n\nTITLE: Measure Peak NVS Settings Usage - Console\nDESCRIPTION: A console command to measure the peak usage of NVS settings. The command outputs the size in bytes, reset during reboot, providing metrics that can guide future memory allocation for NVS settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_settings peak\n```\n\n----------------------------------------\n\nTITLE: Binary File Transfer Operations\nDESCRIPTION: Commands for switching to binary mode and performing binary file transfers including downloads and uploads.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_41\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XFTP=\"binary\"\nAT#XFTP=\"get\",\"1KB.zip\"\nAT#XFTP=\"put\",\"upload.bin\",0,\"DEADBEEF\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Tone Project\nDESCRIPTION: Configures CMake build settings for a tone application. Sets minimum CMake version to 3.20.0, finds Zephyr package, defines project name, and includes all source files from src directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/tone/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2023 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(tone)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Creating GPIO Basic API Project\nDESCRIPTION: This part of the code initializes the GPIO basic API project and adds source files for testing GPIO functionality. It dynamically includes the source files for the main application and any tests based on the directory structure and configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/gpio/gpio_basic_api/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(gpio_basic_api)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/gpio/gpio_basic_api/src/main.c ${ZEPHYR_BASE}/tests/drivers/gpio/gpio_basic_api/src/test*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Connecting to Wi-Fi Access Point using Wi-Fi Shell Commands\nDESCRIPTION: Commands to scan for available networks and connect to a specific access point. Requires specifying the network SSID, key management method, and passphrase.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/power_profiling.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwifi scan\nwifi connect -s <SSID> -k <key_management> -p <passphrase>\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Adding Source Files\nDESCRIPTION: This snippet defines the BME680 project and gathers all source files from the src directory using the GLOB command. It then adds these source files to the app target, marking them as private to its scope.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/sensor/bme680/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(bme680)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Wi-Fi Credentials using Kconfig\nDESCRIPTION: A set of Kconfig options for statically configuring Wi-Fi credentials including network name, password, and security type. These options allow setting up basic Wi-Fi connectivity with different security protocols including Open, PSK, PSK-SHA256, and SAE.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/wifi_credentials_static.txt#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_WIFI_CREDENTIALS_STATIC=y\nCONFIG_WIFI_CREDENTIALS_STATIC_SSID=\"network_name\"\nCONFIG_WIFI_CREDENTIALS_STATIC_PASSWORD=\"password\"\nCONFIG_WIFI_CREDENTIALS_STATIC_TYPE_OPEN=n\nCONFIG_WIFI_CREDENTIALS_STATIC_TYPE_PSK=y\nCONFIG_WIFI_CREDENTIALS_STATIC_TYPE_PSK_SHA256=n\nCONFIG_WIFI_CREDENTIALS_STATIC_TYPE_SAE=n\n```\n\n----------------------------------------\n\nTITLE: Displaying Console Output for TF-M Provisioning Image Sample\nDESCRIPTION: This code snippet shows the expected console output after successfully running the TF-M provisioning image sample. It demonstrates the lifecycle state transitions, key generation, and identity key storage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/provisioning_image/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nSuccessfully verified PSA lifecycle state ASSEMBLY!\nSuccessfully switched to PSA lifecycle state PROVISIONING!\nGenerating random HUK keys (including MKEK)\nWriting the identity key to KMU\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Sources Based on Build Options\nDESCRIPTION: Conditionally adds source files and additional options based on configuration flags such as CONFIG_SETTINGS_CUSTOM, CONFIG_NRF_PROVISIONING_COAP, and CONFIG_NRF_PROVISIONING_HTTP.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_provisioning/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_SETTINGS_CUSTOM)\n  test_runner_generate(src/http_jwt.c)\n  list(APPEND app_sources src/http_jwt.c)\n  cmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/modem/modem_jwt.h)\n\nelseif(CONFIG_NRF_PROVISIONING_COAP)\n  test_runner_generate(src/coap.c)\n  list(APPEND app_sources src/coap.c)\n  list (APPEND options\n    -DCONFIG_COAP_CLIENT_MESSAGE_HEADER_SIZE=48\n    -DCONFIG_COAP_CLIENT_MESSAGE_SIZE=512\n    -DCONFIG_COAP_CLIENT_STACK_SIZE=1024\n    -DCONFIG_MODEM_INFO_BUFFER_SIZE=128\n    -DCONFIG_COAP_CLIENT_MAX_REQUESTS=2\n    -DCONFIG_COAP_CLIENT_BLOCK_SIZE=256\n  )\n  cmock_handle(${ZEPHYR_BASE}/include/zephyr/net/coap_client.h)\n  cmock_handle(${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_provisioning/include/nrf_provisioning_jwt.h)\n\nelseif(CONFIG_NRF_PROVISIONING_HTTP)\n  test_runner_generate(src/main.c)\n  list(APPEND app_sources src/main.c)\n  cmock_handle(${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_provisioning/include/nrf_provisioning_jwt.h)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Bluetooth LE Authentication Prompt Output\nDESCRIPTION: Example output displayed when adding a Bluetooth LE device that requires authentication with a PIN code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n----------------------------------------------------------------------------------------\n| Bridged Bluetooth LE device authentication                                           |\n|                                                                                      |\n| Insert pin code displayed by the Bluetooth LE peripheral device                      |\n| to authenticate the pairing operation.                                               |\n|                                                                                      |\n| To do that, use matter_bridge pincode <ble_device_index> <pincode> shell command.    |\n----------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: HTTP PUT request (Non-TLS, Cellular)\nDESCRIPTION: Sends an HTTP PUT request to update the state of LED 1 via a non-TLS connection for cellular networks. It uses the `http` command with the PUT method to the specified URL (replace <ip> with the actual IP address) and includes raw data '1' to set the LED state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n\"http PUT http://<ip>:80/led/1 --raw=\\\"1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: GPIO Read Operation Example\nDESCRIPTION: Example of reading the state of GPIO pin 2\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/GPIO_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XGPIO=1,2\n\n#XGPIO: 2,1\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Linking Oberon PSA Core with nrf_cc3xx_platform in CMake\nDESCRIPTION: This CMake command links the Oberon PSA core with the nrf_cc3xx_platform library. The target_link_libraries function is used with the PRIVATE scope, indicating that the linkage is required only within the target. This setup is crucial for enabling the integration of the specified platform with the PSA core components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/nrf_cc3xx_platform/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Link the Oberon PSA core with nrf_cc3xx_platform\ntarget_link_libraries(oberon_psa_core\n  PRIVATE\n    nrf_cc3xx_platform\n)\n```\n\n----------------------------------------\n\nTITLE: Adding UI LED Source Files in CMake\nDESCRIPTION: Conditionally adds UI LED source file based on CONFIG_UI_LED configuration option\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/ui/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_UI_LED\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ui_led.c)\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Packet Memory Size for nRF70 Series\nDESCRIPTION: Formula to calculate the total packet memory size used in the nRF70 Series device, combining both TX and RX memory requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/stack_configuration.rst#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n(CONFIG_NRF70_TX_MAX_DATA_SIZE + 52 ) * CONFIG_NRF70_MAX_TX_TOKENS * CONFIG_NRF70_MAX_TX_AGGREGATION +\nCONFIG_NRF70_RX_MAX_DATA_SIZE * CONFIG_NRF70_RX_NUM_BUFS\n```\n\n----------------------------------------\n\nTITLE: Modem Library Version Table in RST Format\nDESCRIPTION: reStructuredText table showing modem-related libraries and their version information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. list-table:: Modem-related libraries and versions\n   :widths: 15 10\n   :header-rows: 1\n\n   * - Library name\n     - Version information\n   * - Modem library\n     - `Changelog <Modem library changelog for v2.7.0_>`_\n   * - LwM2M carrier library\n     - `Changelog <LwM2M carrier library changelog for v2.7.0_>`_\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package and Setting Project Source Files - CMake\nDESCRIPTION: This snippet sets the minimum required version for CMake and finds the Zephyr package. It configures the target application to include all source files located in the 'src' directory, facilitating the build process for a Nordic SDK application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/subrating/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\t${app_sources}\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Suspending Application Modules with Power Down Event in C\nDESCRIPTION: This code demonstrates how to suspend application modules using the power_down_event struct. The error field is set to true to indicate an error condition, allowing some modules to remain active for error reporting.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/power_manager.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\npower_down_event.error = true;\n```\n\n----------------------------------------\n\nTITLE: Converting CSR from DER to PEM Format\nDESCRIPTION: Command to convert the Certificate Signing Request (CSR) from DER format to PEM format using OpenSSL.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nopenssl req -inform DER -in device_cert.csr.der -outform PEM -out device_cert.csr.pem\n```\n\n----------------------------------------\n\nTITLE: Adding mcumgr Bluetooth OTA DFU Subdirectory in CMake\nDESCRIPTION: This CMake command adds the 'mcumgr_bt_ota_dfu' subdirectory to the build process. This suggests that the mcumgr Bluetooth OTA DFU module is a component of the Nordic Semiconductor SDK-NRF project and needs to be compiled as part of the overall build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(mcumgr_bt_ota_dfu)\n```\n\n----------------------------------------\n\nTITLE: Basic Location Request with Default Configuration\nDESCRIPTION: Simple example showing how to make a location request using default configuration values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/location.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nint err;\n\nerr = location_request(NULL);\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure GPIO Pin in prj.conf\nDESCRIPTION: Configuration setting to assign GPIO pin 23 as secure using a bitmask\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nCONFIG_NRF_GPIO0_PIN_MASK_SECURE=0x00800000\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Execution Mode Interface Library in CMake\nDESCRIPTION: Creates and configures a named interface library for SUIT execution mode functionality. Sets up include directories and links against required SUIT platform error and metadata dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/execution_mode/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_interface_library_named(suit_execution_mode)\ntarget_include_directories(suit_execution_mode INTERFACE include)\ntarget_link_libraries(suit_execution_mode INTERFACE suit_platform_err)\ntarget_link_libraries(suit_execution_mode INTERFACE suit_metadata)\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Tag for DTLS Session\nDESCRIPTION: AT command to set the security tag storing credentials for DTLS session with the custom server. Specified as an integer value.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_18\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"sec_tag\"[,<sec_tag>]\n```\n\n----------------------------------------\n\nTITLE: Initializing Light CTL Server Structure - C\nDESCRIPTION: This snippet demonstrates the initialization of the Light CTL Server structure and its association with model instances in a Bluetooth Mesh element. The Light CTL Server handles the main light control functionalities, while the Light Temperature Server is set up alongside it for managing temperature states.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n    static struct bt_mesh_light_ctl_srv light_ctl_srv = BT_MESH_LIGHT_CTL_SRV_INIT(&lightness_handlers, &light_temp_handlers);\n\n    static struct bt_mesh_elem elements[] = {\n        BT_MESH_ELEM(\n            1,\n            BT_MESH_MODEL_LIST(BT_MESH_MODEL_LIGHT_CTL_SRV(&light_ctl_srv)),\n            BT_MESH_MODEL_NONE),\n        BT_MESH_ELEM(\n            2,\n            BT_MESH_MODEL_LIST(BT_MESH_MODEL_LIGHT_TEMP_SRV(&light_ctl_srv.temp_srv)),\n            BT_MESH_MODEL_NONE),\n    };\n```\n\n----------------------------------------\n\nTITLE: Check Current Peak Heap Usage - Console\nDESCRIPTION: A console command is used to read the current peak heap usage, providing insights into dynamic memory allocation. Outputs include detailed memory statistics such as heap allocated bytes and other Matter stack information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter stat peak\nPacket Buffers: 0\nTimers: 2\nTCP endpoints: 0\nUDP endpoints: 1\nExchange contexts: 0\nUnsolicited message handlers: 5\nPlatform events: 1\nHeap allocated bytes: 208\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA Signature Type for MCUboot\nDESCRIPTION: Utilizes RSA for digital signatures, supporting key sizes of 2048 and 3072 bits. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_9\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_SIGNATURE_TYPE_RSA\", \"CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_BOOT_SIGNATURE_TYPE_RSA`\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Zephyr CMake Package with west\nDESCRIPTION: Exports a Zephyr CMake package, allowing CMake to load necessary boilerplate code for building nRF Connect SDK applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nwest zephyr-export\n```\n\n----------------------------------------\n\nTITLE: Defining Project-Specific Matter Settings Path using Kconfig\nDESCRIPTION: This snippet describes how to define the path to a configuration file containing project-specific Matter settings using the `CONFIG_CHIP_PROJECT_CONFIG` Kconfig option. These settings are defined as C preprocessor macros and cannot be modified through Kconfig directly. This allows for highly customized configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_PROJECT_CONFIG`\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Thread Network Interface and Starting Thread Protocol\nDESCRIPTION: Shows the sequence of OpenThread CLI commands needed to enable the Thread network interface and start the Thread protocol. The commands are executed through UART console and each command returns 'Done' on successful execution.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/thread_enable_network.txt#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot ifconfig up\nDone\nuart:~$ ot thread start\nDone\n```\n\n----------------------------------------\n\nTITLE: Implementing NFC TNEP Connection Handover for NFC Poller Device in C\nDESCRIPTION: This code snippet demonstrates how to use the NFC TNEP Connection Handover module with an NFC Poller Device. It shows the initialization and callback setup for handling handover message exchange. This implementation is used in the central_nfc_pairing sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/ch.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ninclude_startingpoint_nfc_tnep_ch_poller_rst\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Zephyr Event Manager\nDESCRIPTION: Sets up a CMake project with minimum version requirements, finds the Zephyr package, and defines the project name for an event manager proxy remote application\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(event_manager_proxy_remote)\n```\n\n----------------------------------------\n\nTITLE: Building Peripheral LBS Sample with FOTA Support\nDESCRIPTION: A command example for building the Peripheral LBS sample with FOTA support, enabling MCUboot bootloader and the necessary configurations for Bluetooth LE FOTA updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/fota_update.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b *board_target* -- -DSB_CONFIG_BOOTLOADER_MCUBOOT=y -DCONFIG_NCS_SAMPLE_MCUMGR_BT_OTA_DFU=y\n```\n\n----------------------------------------\n\nTITLE: CHIP Certificate Tool Build Command\nDESCRIPTION: Command to build the CHIP Certificate Tool executable for generating and editing Matter certificates. Requires navigation to the connectedhomeip root directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/tools.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ncd src/tools/chip-cert && gn gen out && ninja -C out chip-cert\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment on Windows\nDESCRIPTION: Creates a new Python virtual environment for the nRF Connect SDK on Windows.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_18\n\nLANGUAGE: bat\nCODE:\n```\ncd %HOMEPATH%\npython -m venv ncs/.venv\n```\n\n----------------------------------------\n\nTITLE: OpenThread Diagnostic Power Command\nDESCRIPTION: This command sets the transmission power for the diagnostic module, controlling the signal strength during diagnostic tests. It requires a power level in dBm as input.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot diag power 0\nset tx power to 0 dBm\nstatus 0x00\nDone\n```\n\n----------------------------------------\n\nTITLE: Starting OpenThread Border Router Docker Container\nDESCRIPTION: Commands to start the OpenThread Border Router container with necessary configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo modprobe ip6table_filter\nsudo docker run -it --rm --privileged --name otbr --network otbr -p 8080:80 \\\n--sysctl \"net.ipv6.conf.all.disable_ipv6=0 net.ipv4.conf.all.forwarding=1 net.ipv6.conf.all.forwarding=1\" \\\n--volume /dev/ttyACM0:/dev/radio nrfconnect/otbr:fbde28a --radio-url spinel+hdlc+uart:///dev/radio?uart-baudrate=1000000\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Peripheral or Broadcaster Role Support in Bluetooth Management\nDESCRIPTION: Conditionally adds advertising support when either BT_PERIPHERAL or BT_BROADCASTER configurations are enabled for devices that need to advertise.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_management/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_BT_PERIPHERAL OR CONFIG_BT_BROADCASTER)\n\ttarget_sources(app PRIVATE\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/advertising/bt_mgmt_adv.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MAC Algorithms in nRF Security\nDESCRIPTION: Enables support for Message Authentication Code (MAC) algorithms through Kconfig options. Supports CMAC, HMAC, and CBC-MAC with varying driver support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_16\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_PSA_WANT_ALG_CMAC\nCONFIG_PSA_WANT_ALG_HMAC\nCONFIG_PSA_WANT_ALG_CBC_MAC\n```\n\n----------------------------------------\n\nTITLE: Retrieving ETB Trace Data in C\nDESCRIPTION: Calls the etb_data_get function to read out the captured traces from the ETB buffer, which can hold up to 2 KB of trace data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/debug/etb_trace.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\netb_data_get();\n```\n\n----------------------------------------\n\nTITLE: Button Event Structure Reference - C API\nDESCRIPTION: Structure used to trigger the simulated button sequence through the Common Application Framework buttons module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/buttons_sim.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct button_event;\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Cloud REST Device Message Sample CMake Build\nDESCRIPTION: This CMake script configures the build for the nRF Cloud REST Device Message Sample project. It sets the minimum required CMake version, finds the Zephyr package, defines project name, sets up include directories including board-specific ones, and configures application sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_rest_device_message/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nRF_Cloud_REST_Device_Message_Sample)\n\nzephyr_compile_definitions(PROJECT_NAME=${PROJECT_NAME})\nzephyr_include_directories(include/)\n\n# NORDIC SDK APP START\n# Add include directory for board specific CAF def files\nzephyr_include_directories(\n  include/${NORMALIZED_BOARD_TARGET}\n  )\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Pinging Network Address using Shell Commands\nDESCRIPTION: Command to ping a specific IP address on the network. In this example, it pings 192.168.1.100 with 10 packets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/using_wifi_shell_sample.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ net ping 10 192.168.1.100\n```\n\n----------------------------------------\n\nTITLE: Specifying AT Parameters Source File in C\nDESCRIPTION: This snippet indicates the location of the source file for the AT parameters module implementation. This information is useful for developers who need to reference or modify the module's internals.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_params.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n| Source file: :file:`lib/at_cmd_parser/at_params.c`\n```\n\n----------------------------------------\n\nTITLE: OpenThread Logs Example\nDESCRIPTION: Example output of OpenThread logs showing different thread modules (CORE, MLE, MAC) with their corresponding messages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/logging.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n-CORE----: Notifier: StateChanged (0x00000040) [Rloc-]\n-MLE-----: Send Parent Request to routers (ff02:0:0:0:0:0:0:2)\n-MAC-----: Sent IPv6 UDP msg, len:84, chksum:1e84, to:0xffff, sec:no, prio:net\n```\n\n----------------------------------------\n\nTITLE: Writing Groupcast Binding to Binding Table with Chip Tool\nDESCRIPTION: This shell snippet illustrates how to write a groupcast binding into a light switch's binding table using the Chip Tool. It's designed to bind a light switch to a group of light bulbs, facilitating collective control. Key parameters include fabric index and group ID, directing messages to multiple devices under a defined group. Ensure the Chip Tool is operational in the current setup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nchip-tool binding write binding '[{\"fabricIndex\": 1, \"group\": 257}]' <light_switch_node_ID> 1\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO LEDs in DTS for CAF LEDs Module\nDESCRIPTION: This snippet shows how to configure GPIO LEDs in the devicetree for use with the CAF LEDs module. It includes examples for both RGB LEDs controlled by a GPIO expander and monochromatic LEDs connected directly to MCU GPIOs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/leds.rst#2025-04-21_snippet_2\n\nLANGUAGE: devicetree\nCODE:\n```\nleds0 {\n\tcompatible = \"gpio-leds\";\n\tlabel = \"Lightwell RGB\";\n\tstatus = \"okay\";\n\n\tled0: led_0 {\n\t\tgpios = <&sx1509b 7 GPIO_ACTIVE_LOW>;\n\t\tlabel = \"Red LED\";\n\t};\n\tled1: led_1 {\n\t\tgpios = <&sx1509b 5 GPIO_ACTIVE_LOW>;\n\t\tlabel = \"Green LED\";\n\t};\n\tled2: led_2 {\n\t\tgpios = <&sx1509b 6 GPIO_ACTIVE_LOW>;\n\t\tlabel = \"Blue LED\";\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Board DTS File to Use Pinctrl\nDESCRIPTION: Example of migrating a board's devicetree file from the old pin configuration method to the new pinctrl method. This shows both the old and new approaches.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/pin_control.rst#2025-04-21_snippet_3\n\nLANGUAGE: devicetree\nCODE:\n```\n/* old board.dts */\n&uart0 {\n    ...\n    tx-pin = <5>;\n    rx-pin = <33>;\n    rx-pull-up;\n    ...\n};\n\n/* new board-pinctrl.dtsi file */\n&pinctrl {\n    uart0_default: uart0_default {\n        group1 {\n            psels = <NRF_PSEL(UART_TX, 0, 5)>;\n        };\n        group2 {\n            psels = <NRF_PSEL(UART_RX, 1, 1)>;\n            bias-pull-up;\n        };\n    };\n    uart0_sleep: uart0_sleep {\n        group1 {\n            psels = <NRF_PSEL(UART_TX, 0, 5)>,\n                    <NRF_PSEL(UART_RX, 1, 1)>;\n            low-power-enable;\n        };\n    };\n};\n\n/* adjusted board.dts */\n...\n#include \"board-pinctrl.dtsi\"\n...\n&uart0 {\n    ...\n    pinctrl-0 = <&uart0_default>;\n    pinctrl-1 = <&uart0_sleep>;\n    pinctrl-names = \"default\", \"sleep\";\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth LE Discovery Module in nRF Desktop\nDESCRIPTION: Define the module configuration in the ble_discovery_def.h file, specifying parameters for each nRF Desktop peripheral that connects to the central device. This includes setting the Vendor ID, Product ID, and peer type for each peripheral.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/ble_discovery.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n* Parameters common for all the peripherals:\n\n  * Vendor ID (VID)\n\n* Parameters defined separately for every peripheral:\n\n  * Product ID (PID)\n  * Peer type (:c:enumerator:`PEER_TYPE_MOUSE` or :c:enumerator:`PEER_TYPE_KEYBOARD`)\n\nFor an example of the module configuration, see :file:`configuration/nrf52840dongle_nrf52840/ble_discovery_def.h`.\n```\n\n----------------------------------------\n\nTITLE: Turning On a Light Using the Bridge\nDESCRIPTION: Uses the Matter Bridge CLI to send an \"on\" command to a connected light bulb through a bridged light switch endpoint. This controls the LED on the light bulb device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_26\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge onoff_switch 1 *<bridged_light_switch_endpoint_ID>*\n```\n\n----------------------------------------\n\nTITLE: Displaying Light Switch Output Using C\nDESCRIPTION: This snippet illustrates the output when a button on the EnOcean light switch is pressed and released. It provides the received status in a formatted manner, indicating the state changes of the button press.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/enocean/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n   EnOcean button RX: ba:15:00:00:15:e2:  pressed:  0 0 0 1\n   EnOcean button RX: ba:15:00:00:15:e2:  released: 0 0 0 1\n```\n\n----------------------------------------\n\nTITLE: Defining Project with Zephyr Library Sources\nDESCRIPTION: This snippet declares a new project called 'location_sample' and specifies the source files to be included in the library. It initializes the project structure required for a Zephyr application, indicating where the main source file can be found.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/location/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(location_sample)\n\nzephyr_library_sources(src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Creating and Encoding Launch App Message in C\nDESCRIPTION: Shows how to create and encode a Launch App message using the defined parameters. The code handles error checking and requires Android package name, Universal Link, and message buffer parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/launchapp.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint err;\n\nerr = nfc_launchapp_msg_encode(android_package_name,\n\t\t\tizeof(android_package_name),\n\t\t\tuniversal_link,\n\t\t\tsizeof(universal_link),\n\t\t\tndef_msg_buf,\n\t\t\t&len);\n\nif (err < 0) {\n     printk(\"Cannot encode message!\\n\");\n     return err;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding nRF21540 Node in Device Tree\nDESCRIPTION: This code snippet adds the nRF21540 range extender node in the device tree configuration. It defines the GPIO pins for controlling the TX_EN, RX_EN, and PDN signals, as well as the SPI interface configuration. The TX_EN, RX_EN, and PDN GPIOs must be set according to the hardware setup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf21540_gpio_spi.rst#2025-04-21_snippet_0\n\nLANGUAGE: device tree\nCODE:\n```\n/ {\n      nrf_radio_fem: name_of_fem_node {\n         compatible  = \"nordic,nrf21540-fem\";\n         tx-en-gpios = <&gpio0 13 GPIO_ACTIVE_HIGH>;\n         rx-en-gpios = <&gpio0 14 GPIO_ACTIVE_HIGH>;\n         pdn-gpios   = <&gpio0 15 GPIO_ACTIVE_HIGH>;\n         spi-if = <&nrf_radio_fem_spi>;\n         supply-voltage-mv = <3000>;\n      };\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Mesh Shell Support in prj.conf\nDESCRIPTION: This code snippet demonstrates how to disable mesh shell support in the prj.conf file of the sensor client sample. Disabling the mesh shell support reduces the RAM usage, resolving compilation issues due to RAM shortage on nRF52832 platform.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_25\n\nLANGUAGE: conf\nCODE:\n```\n\"Disable the mesh shell support in the :file:`prj.conf` file for the sensor client sample.\"\n```\n\n----------------------------------------\n\nTITLE: Creating Handover Select Message with Bluetooth LE OOB Record\nDESCRIPTION: Code example showing how to create a Handover Select message containing an Alternative Carrier record referencing a Bluetooth LE OOB record. Used in the peripheral_nfc_pairing sample to establish NFC-based Bluetooth pairing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/ch_msg.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic int nfc_ndef_ch_msg_create(struct nfc_ndef_ch_msg_records *ch_records)\n{\n\t/* Create NFC NDEF message description in static memory. */\n\tstatic uint8_t encoded_message[CONFIG_NFC_NDEF_MSG_MAX_SIZE];\n\n\t/* Create Handover Select message. */\n\tint err = nfc_ndef_ch_msg_select_create(encoded_message,\n\t\t\t\t\t\t  &len_msg_encode,\n\t\t\t\t\t\t  ch_records);\n\tif (err) {\n\t\treturn err;\n\t}\n\n\t/* Set created message as the NFC payload. */\n\terr = nfc_t4t_ndef_file_encode(encoded_message,\n\t\t\t\t\t     &len_msg_encode);\n\tif (err) {\n\t\treturn err;\n\t}\n\n\treturn 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending iOS Notification in Bluetooth Low Energy App\nDESCRIPTION: Example of how to send an iOS notification to the sample application using the Bluetooth Low Energy app. The notification includes fields like Event ID, Flags, Category, Category count, and Notification UID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ancs_client/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n00 18 06 02 01 02 03 04\n```\n\n----------------------------------------\n\nTITLE: Building with MCUboot in Direct-XIP Mode\nDESCRIPTION: Command to build the Peripheral LBS sample with MCUboot in direct-xip mode and FOTA support enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf52/fota_update.rst#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nwest build -b *board_target* -- -DSB_CONFIG_BOOTLOADER_MCUBOOT=y -DSB_CONFIG_MCUBOOT_MODE_DIRECT_XIP=y -DCONFIG_NCS_SAMPLE_MCUMGR_BT_OTA_DFU=y\n```\n\n----------------------------------------\n\nTITLE: Recalling a Scene\nDESCRIPTION: This command recalls a previously stored scene, optionally specifying transition time and delay parameters. It waits for a response after doing so.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scene_cli.rst#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models scene recall <Scene> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for SPAKE2+ Project in nRF Connect SDK\nDESCRIPTION: Sets up the CMake environment for the SPAKE2+ project. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, and adds the main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/spake2p/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# Copyright (c) 2024 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(spake2p)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Handling Attribute Change Callback in Matter SDK\nDESCRIPTION: The provided code snippet demonstrates how to implement a Matter Data Model callback to manage attribute changes related to a Door Lock device. It utilizes the generic MatterPostAttributeChangeCallback, watching for changes in the lock state attribute. Dependencies include Matter-specific headers and assumes a functional Matter stack. This function determines the state of a physical lock based on the attribute changes and is critical for maintaining synchronization between the Data Model and device state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/matter_api.rst#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include <app-common/zap-generated/ids/Clusters.h>\n#include <app/ConcreteAttributePath.h>\n#include <app/util/generic-callbacks.h>\n\nusing namespace ::chip;\nusing namespace ::chip::app::Clusters;\n\nvoid MatterPostAttributeChangeCallback(const chip::app::ConcreteAttributePath &attributePath, uint8_t type,\n                uint16_t size, uint8_t *value)\n{\n      if (attributePath.mClusterId == DoorLock::Id &&\n          attributePath.mAttributeId == DoorLock::Attributes::LockState::Id) {\n        /* Post events only if current lock state is different than given */\n        switch (*value) {\n        case to_underlying(DlLockState::kLocked):\n              /* Lock the physical door lock. */\n              break;\n        case to_underlying(DlLockState::kUnlocked):\n            /* Unlock the physical door lock. */\n              break;\n        default:\n              break;\n        }\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Including the Application Event Manager Header in Event Type Definition\nDESCRIPTION: Basic include statement required when defining a new event type for the Application Event Manager.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/app_event_manager.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <app_event_manager.h>\n```\n\n----------------------------------------\n\nTITLE: Network Core Board Target Configuration in Zephyr\nDESCRIPTION: Board target configuration for the network core processor in Zephyr with a focus on low-power radio communication\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/features_nrf53.rst#2025-04-21_snippet_0\n\nLANGUAGE: zephyr\nCODE:\n```\nnrf5340dk\\/nrf5340\\/cpunet\n```\n\n----------------------------------------\n\nTITLE: Starting AT Command Mode in MoSh\nDESCRIPTION: Enable AT command mode by setting the link fun mode to 0 and starting the AT command mode. Use this mode to send AT commands to the modem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_31\n\nLANGUAGE: console\nCODE:\n```\nmosh:~$ link funmode -0\nmosh:~$ at at_cmd_mode start\n```\n\n----------------------------------------\n\nTITLE: Configuring RAM Trace Backend in CMake\nDESCRIPTION: Conditionally adds the RAM subdirectory for modem trace logging when CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_RAM is enabled\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/nrf_modem_lib/trace_backends/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_RAM ram)\n```\n\n----------------------------------------\n\nTITLE: Defining Opcodes for Messages in C\nDESCRIPTION: Creates vendor-specific opcodes for the model's messages using a macro which encodes them in a defined Bluetooth Mesh format. This is necessary for message recognition and handling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/dev_overview.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nBT_MESH_MODEL_OP_3(0x01, YOUR_COMPANY_ID)\n```\n\nLANGUAGE: C\nCODE:\n```\n#define MESSAGE_SET_OPCODE    BT_MESH_MODEL_OP_3(0x01, YOUR_COMPANY_ID)\n#define MESSAGE_ACK_OPCODE    BT_MESH_MODEL_OP_3(0x02, YOUR_COMPANY_ID)\n#define MESSAGE_STATUS_OPCODE BT_MESH_MODEL_OP_3(0x03, YOUR_COMPANY_ID)\n```\n\n----------------------------------------\n\nTITLE: Relocating Code Files to QSPI Flash\nDESCRIPTION: CMake code to relocate specific source files to run from external QSPI flash. Uses zephyr_code_relocate to place code in EXTFLASH_TEXT region and data in RAM_DATA region.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_code_relocate(FILES src/complex_sensor_calculcation_code.c LOCATION EXTFLASH_TEXT NOCOPY)\nzephyr_code_relocate(FILES src/complex_sensor_calculcation_code.c LOCATION RAM_DATA)\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth Fast Pair Subdirectory\nDESCRIPTION: This code adds a subdirectory for the Fast Pairing service if CONFIG_BT_FAST_PAIR is enabled. It facilitates quick Bluetooth pairing mechanisms.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: C\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_BT_FAST_PAIR fast_pair)\n```\n\n----------------------------------------\n\nTITLE: Starting Ethernet over RTT for Linux\nDESCRIPTION: Command to run the eth_rtt_link executable as a superuser, specifying the development kit's SEGGER ID and IPv4 address. Used for both server and client tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsudo ./eth_rtt_link --snr 960010000 --ipv4 192.0.2.2\n```\n\n----------------------------------------\n\nTITLE: Setting Boot Signature Key File in Kconfig\nDESCRIPTION: This code snippet demonstrates how to set the boot signature key file using the SB_CONFIG_BOOT_SIGNATURE_KEY_FILE option in the sysbuild.conf file. This allows you to specify a custom private key for signing the bootloader image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n\"SB_CONFIG_BOOT_SIGNATURE_KEY_FILE=\\\"priv.pem\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Programming Station, Shell, or Wi-Fi Radio Test Firmware\nDESCRIPTION: Command to program Station (STA), Shell, or stand-alone Wi-Fi Radio test samples to the application core of nRF7002 DK or EK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/test_setup.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nrfutil device program --firmware merged.hex --core Application --options chip_erase_mode=ERASE_ALL,reset=RESET_SYSTEM\n```\n\n----------------------------------------\n\nTITLE: Settings NVS Sector Count Configuration\nDESCRIPTION: This Kconfig option configures the number of sectors used by the NVS (Non-Volatile Storage) backend for Zephyr settings storage. It must be set appropriately to cover the entire settings partition area.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\n:kconfig:option:`CONFIG_SETTINGS_NVS_SECTOR_COUNT` for the NVS\n```\n\n----------------------------------------\n\nTITLE: Scan Result Output Format\nDESCRIPTION: Example output from the scan command showing the format of available Bluetooth LE devices with their index, address, and UUID information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nScan result:\n---------------------------------------------------------------------\n| Index |      Address      |                   UUID\n---------------------------------------------------------------------\n| 0     | e6:11:40:96:a0:18 | 0x181a (Environmental Sensing Service)\n| 1     | c7:44:0f:3e:bb:f0 | 0xbcd1 (Led Button Service)\n```\n\n----------------------------------------\n\nTITLE: FOTA Response Syntax For Operation 7\nDESCRIPTION: Response format when reading modem DFU area size and firmware image offset information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/FOTA_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XFOTA=7\n#XFOTA: <size>,<offset>\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth HIDS Source\nDESCRIPTION: Includes the Human Interface Device Service (HIDS) source file if CONFIG_BT_HIDS is defined. This service is essential for Bluetooth HID device interactions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_HIDS hids.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Pair Advertising Provider in Kconfig\nDESCRIPTION: Enables the Google Fast Pair advertising data provider in the Bluetooth LE advertising provider subsystem. This allows integration of Fast Pair advertising payload into the advertising management system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_23\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_ADV_PROV_FAST_PAIR\n```\n\n----------------------------------------\n\nTITLE: Certificate File Generation Configuration\nDESCRIPTION: CMake configuration for generating hex files from PEM certificates. Sets up include directories and generates certificate include files for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/https_client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(gen_dir ${CMAKE_CURRENT_BINARY_DIR}/certs)\nzephyr_include_directories(${gen_dir})\ngenerate_inc_file_for_target(\n    app\n    cert/DigiCertGlobalG3.pem\n    ${gen_dir}/DigiCertGlobalG3.pem.inc\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating mcuboot_primary partition for nRF70 firmware\nDESCRIPTION: Defines the primary MCUboot partition that spans both the MCUboot header and the nRF70 firmware patch. This partition is used by MCUboot to manage the current firmware image with a total size aligned to the device's sector size.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf70_fw_patch_update.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmcuboot_primary_2:\n    orig_span: &id003\n    - nrf70_wifi_fw_mcuboot_pad\n    - nrf70_wifi_fw\n    span: *id003\n    address: 0x12F000\n    size: 0x21000\n    device: MX25R64\n    region: external_flash\n```\n\n----------------------------------------\n\nTITLE: Viewing Registered SRP Hosts and Services\nDESCRIPTION: Shows the hosts and services registered on the SRP server, including hostname, addresses, service name, port, and other service attributes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_31\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot srp server host\nmy-host.default.service.arpa.\n   deleted: false\n   addresses: [fdde:ad00:beef:0:e0fc:dc28:1d12:8c2]\nDone\nuart:~$ ot srp server service\nmy-service._ipps._tcp.default.service.arpa.\n   deleted: false\n   subtypes: (null)\n   port: 12345\n   priority: 0\n   weight: 0\n   ttl: 7200\n   TXT: []\n   host: my-host.default.service.arpa.\n   addresses: [fdde:ad00:beef:0:e0fc:dc28:1d12:8c2]\nDone\n```\n\n----------------------------------------\n\nTITLE: Enabling Serial Console Configuration in Kconfig\nDESCRIPTION: Kconfig options required to enable terminal message visibility during power consumption testing. These options enable serial communication and console output, with a minor impact on power consumption.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_power_profiling/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_SERIAL\nCONFIG_CONSOLE\nCONFIG_UART_CONSOLE\n```\n\n----------------------------------------\n\nTITLE: Configuring USB HID-class Instance in DeviceTree\nDESCRIPTION: A new USB HID-class instance is now configured through a separate DeviceTree node compatible with 'zephyr,hid-device'. This change is part of the integration of the new USB-next stack in the nRF Desktop application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.4.99-cs3_to_2.7_application.rst#2025-04-21_snippet_6\n\nLANGUAGE: devicetree\nCODE:\n```\ncompatible = \"zephyr,hid-device\";\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Application\nDESCRIPTION: Console commands for building and flashing the application using west build system with specified board and configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_external_memory.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest build ./ -b nrf54h20dk/nrf54h20/cpuapp -T <configuration_name>\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom LwM2M Sensor Object\nDESCRIPTION: Example showing how to initialize a custom sensor object instance and set up periodic value updates using the LwM2M client library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_client_utils.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nstatic int init_my_sensor(void)\n{\n   lwm2m_create_obj_inst(&LWM2M_OBJ(3300, 0);\n   /* Read the value and trigger the worker */\n   my_sensor_handler(&my_sensor_work);\n   return 0;\n}\nLWM2M_APP_INIT(init_my_sensor);\n```\n\n----------------------------------------\n\nTITLE: HID Report Event Structures for USB Input/Output\nDESCRIPTION: Event structure definitions for handling HID reports. These data structures are used for converting received HID input reports to event format and managing HID output reports.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/hid_forward.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct hid_report_event {\n    uint8_t subscriber;\n    uint8_t report_id;\n    uint8_t report_data[HID_REPORT_MAX_LEN];\n};\n\nstruct hid_report_sent_event {\n    uint8_t subscriber;\n    uint8_t report_id;\n};\n```\n\n----------------------------------------\n\nTITLE: Gathering Application Source Files\nDESCRIPTION: Uses FILE command to glob all C source files from the HID mouse sample directory, preparing them for compilation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/usb/hid-mouse/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources ${ZEPHYR_BASE}/samples/subsys/usb/hid-mouse/src/*.c)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets the minimum CMake version, includes a test template, and defines the project name. It initializes the build environment for the SUIT platform image matching test.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_check_image_match/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(suit_plat_check_image_match)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor Trigger in C\nDESCRIPTION: Example configuration for sensor trigger using the CAF Sensor Manager. This snippet defines a trigger configuration for an accelerometer.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/sensor_manager.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic struct sm_trigger trig = {\n        .cfg = {\n                .type = SENSOR_TRIG_DELTA,\n                .chan = SENSOR_CHAN_ACCEL_XYZ,\n        },\n        .activation = {\n                .type = ACT_TYPE_ABS,\n                .thresh = 0.5,\n                .timeout_ms = 4000,\n        },\n};\n```\n\n----------------------------------------\n\nTITLE: Selector Configuration Structure in C\nDESCRIPTION: Definition structure for hardware selector configuration including ID, GPIO pins array pointer, and array size\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/selector.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct selector_config {\n    uint8_t id;\n    struct gpio_pin *pins;\n    size_t pins_size;\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Rotating Device ID for Amazon FFS\nDESCRIPTION: This snippet shows how to enable the Rotating Device ID for Amazon Frustration-Free Setup by setting the `CONFIG_CHIP_ROTATING_DEVICE_ID` Kconfig option to ``y``. This is a prerequisite for FFS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_23\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_ROTATING_DEVICE_ID` to ``y``.`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter ZAP Files Path in Kconfig\nDESCRIPTION: Defines a Kconfig option to set the path for ZAP files location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/common/config.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH\n  \"string\" - Set the path under which ZAP files are located.\n```\n\n----------------------------------------\n\nTITLE: Configuring mbox_ipc_remote Project with CMake for NRF54L Boards\nDESCRIPTION: Configures the build system for the mbox_ipc_remote project. It checks if the build is targeting supported boards (NRF54L09PDK or NRF54L20PDK with CPUFLPR), failing with an error if an unsupported board is specified. The project compiles the main.c source file from the Zephyr samples.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/drivers/mbox/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nif(CONFIG_BOARD_NRF54L09PDK_NRF54L09_CPUFLPR OR\n   CONFIG_BOARD_NRF54L20PDK_NRF54L20_CPUFLPR)\n  message(STATUS \"${BOARD}${BOARD_QUALIFIERS} compile as remote in this sample\")\nelse()\n  message(FATAL_ERROR \"${BOARD}${BOARD_QUALIFIERS} is not supported for this sample\")\nendif()\n\nproject(mbox_ipc_remote)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/drivers/mbox/remote/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: OpenSSL TLS 1.3 Server\nDESCRIPTION: OpenSSL command to start a TLS 1.3 server using TLS_AES_128_GCM_SHA256 cipher suite and ECDSA certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nopenssl s_server -accept 4243 -tls1_3 -cert certs/ecdsa/cert.pem -key certs/ecdsa/cert.key -ciphersuites TLS_AES_128_GCM_SHA256\n```\n\n----------------------------------------\n\nTITLE: Configuring Long Idle Time Device Support\nDESCRIPTION: This snippet details the Kconfig options needed to enable features for Long Idle Time devices, such as Check-In protocol and User Active Mode Trigger, which help manage energy consumption and device responsiveness.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/low_power_configuration.rst#2025-04-21_snippet_2\n\nLANGUAGE: kconfig\nCODE:\n```\n:kconfig:option:`CONFIG_CHIP_ICD_LIT_SUPPORT` to enable Long Idle Time device support.\n:kconfig:option:`CONFIG_CHIP_ICD_CHECK_IN_SUPPORT` to enable the Check-In protocol support.\n:kconfig:option:`CONFIG_CHIP_ICD_CLIENTS_PER_FABRIC` to set the number of ICD clients that can be registered to an ICD server.\n:kconfig:option:`CONFIG_CHIP_ICD_UAT_SUPPORT` to enable the User Active Mode Trigger support.\n:kconfig:option:`CONFIG_CHIP_ICD_SIT_SLOW_POLL_LIMIT` to limit the slow polling interval of LIT devices temporarily in SIT mode.\n:kconfig:option:`CONFIG_CHIP_ICD_DSLS_SUPPORT` to enable Dynamic SIT LIT switching (DSLS) support.\n:kconfig:option:`CONFIG_CHIP_ICD_REPORT_ON_ACTIVE_MODE` Kconfig option to enable reporting on entering active mode.\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Options for nRF APPROTECT Lock\nDESCRIPTION: These snippets configure nRF APPROTECT lock settings by setting corresponding CMake options based on Kconfig options. They control secure and non-secure APPROTECT features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_NRF_APPROTECT_LOCK)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DCONFIG_NRF_APPROTECT_LOCK=ON\n  )\nendif()\n\nif(CONFIG_NRF_APPROTECT_USER_HANDLING)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DCONFIG_NRF_APPROTECT_USER_HANDLING=ON\n  )\nendif()\n\nif(CONFIG_NRF_SECURE_APPROTECT_LOCK)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DCONFIG_NRF_SECURE_APPROTECT_LOCK=ON\n  )\nendif()\n\nif(CONFIG_NRF_SECURE_APPROTECT_USER_HANDLING)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DCONFIG_NRF_SECURE_APPROTECT_USER_HANDLING=ON\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying and Setting Domain Unicast Address\nDESCRIPTION: Shows the current IPv6 addresses of the router device, including the autoconfigured Domain Unicast Address, and then manually sets a new DUA using a specific Interface Identifier (IID).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot ipaddr\nfd00:7d03:7d03:7d03:ee2d:eed:4b59:2736\nfdde:ad00:beef:0:0:ff:fe00:c400\nfdde:ad00:beef:0:e0fc:dc28:1d12:8c2\nfe80:0:0:0:acbd:53bf:1461:a861\nDone\nuart:~$ ot dua iid 0004000300020001\nDone\nuart:~$ ot ipaddr\nfd00:7d03:7d03:7d03:4:3:2:1\nfdde:ad00:beef:0:0:ff:fe00:c400\nfdde:ad00:beef:0:e0fc:dc28:1d12:8c2\nfe80:0:0:0:acbd:53bf:1461:a861\nDone\n```\n\n----------------------------------------\n\nTITLE: Enabling NFC Commissioning for Matter\nDESCRIPTION: This snippet details how to enable NFC tag usage for Matter commissioning instead of the default QR code. It utilizes the `CONFIG_CHIP_NFC_COMMISSIONING` Kconfig option. This allows for a different commissioning method using NFC-enabled devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_NFC_COMMISSIONING`\"\n```\n\n----------------------------------------\n\nTITLE: Applying Device Tree Overlay to MCUboot without Network Core\nDESCRIPTION: CMake configuration for sysbuild to apply the device tree overlay to MCUboot without network core support. Disables boot image access hooks in addition to adding the overlay file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND mcuboot_EXTRA_DTC_OVERLAY_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/app.overlay\")\nset(mcuboot_CONFIG_BOOT_IMAGE_ACCESS_HOOKS n)\n```\n\n----------------------------------------\n\nTITLE: Zephyr Git Log Command for NCS Specific Commits\nDESCRIPTION: Git command to show NCS specific commits including cherry-picked commits from upstream Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.9.0-nRF54H20-1.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline manifest-rev ^beb733919d\n```\n\n----------------------------------------\n\nTITLE: Building for high performance profile\nDESCRIPTION: This command builds the throughput sample for the nRF7002 DK with the high performance profile for Station mode, using the `overlay-high-performance.conf` overlay configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DEXTRA_CONF_FILE=overlay-high-performance.conf\n```\n\n----------------------------------------\n\nTITLE: Provisioning Certificate to Modem Using nrfcredstore\nDESCRIPTION: Uploads a combined certificate chain to the nRF modem using nrfcredstore. The serial port and correct security tag are required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nnrfcredstore <serial port> write <sec tag> CLIENT_CERT certs/client-cert-chain.pem\n```\n\n----------------------------------------\n\nTITLE: Linker Script Configuration for QSPI XIP\nDESCRIPTION: Linker script setup for external flash memory mapping and code relocation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/qspi_xip_guide_nrf5340.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n#include <zephyr/linker/sections.h>\n#include <zephyr/devicetree.h>\n#include <zephyr/linker/linker-defs.h>\n#include <zephyr/linker/linker-tool.h>\n\nMEMORY\n{\n    EXTFLASH (wx) : ORIGIN = 0x10120200, LENGTH = 0x3FE00\n}\n\n#include <zephyr/arch/arm/cortex_m/scripts/linker.ld>\n```\n\n----------------------------------------\n\nTITLE: Generating Cache Database with Scancode-Toolkit\nDESCRIPTION: This command generates a cache database using the 'west ncs-sbom' tool, utilizing the 'scancode-toolkit' detector for license detection. The resulting database can be used for subsequent runs to speed up the process by reusing previously detected license information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n\"west ncs-sbom --input-files *files ...* --license-detectors scancode-toolkit --output-cache-database *cache-database.json*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Sensor Data Unit Tests\nDESCRIPTION: Sets up the CMake build environment for sensor data aggregator unit tests. Configures minimum CMake version, finds Zephyr package, sets up include directories for events and modules, and adds source files to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/caf/sensor_data_aggregator/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Sensor data aggregator unit tests\")\n\n# Include application event headers\nzephyr_library_include_directories(src/events)\nzephyr_library_include_directories(src/modules)\n\n# Add test sources\ntarget_sources(app PRIVATE src/main.c)\nadd_subdirectory(src/events)\nadd_subdirectory(src/modules)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory and Including Directories in Zephyr CMake\nDESCRIPTION: This CMake snippet is used in a Zephyr-based project to add a source subdirectory and specify the include directories. It depends on Zephyr's build system and requires that the 'src' directory and 'include' directory exist within the project structure. This configuration files guide the build system to include necessary directories and manage sources for the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/trusted_storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(src)\nzephyr_include_directories(\n  include\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring ADC Sequence Sample Build in CMake\nDESCRIPTION: This CMake script configures the build environment for an ADC sequence sample application. It requires CMake 3.20.0 or higher, finds the Zephyr package using environment variables, and imports all source files from Zephyr's ADC sequence sample directory to build the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/drivers/adc/adc_sequence/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(ADC)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/samples/drivers/adc/adc_sequence/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot mode: Firmware loader\nDESCRIPTION: Provides a dual-bank image firmware loading mode that allows dynamic selection of the image bank for booting the application, accommodating banks of different sizes. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_7\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"SB_CONFIG_MCUBOOT_MODE_FIRMWARE_LOADER\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_MCUBOOT_MODE_FIRMWARE_UPDATER`\"\n```\n\n----------------------------------------\n\nTITLE: Sending Private Messages with Custom Parameters in Bluetooth Mesh (C)\nDESCRIPTION: This snippet demonstrates the initialization of a message context struct for addressing private messages specifically to a targeted node, incorporating reliable transmission settings. Dependencies include mesh context struct definitions and message handling APIs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/chat_sample_walk_through.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nstruct bt_mesh_msg_ctx msg_ctx = {\n    .addr = unicast_addr,\n    .send_ttl = 0,\n    .send_rel = true,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handling Source Files\nDESCRIPTION: This snippet adds multiple event handling source files to the application target. These sources handle different types of events, thereby extending the application's event management capabilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_event_manager/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t\tsrc/events/ack_event.c\n\t\tsrc/events/config_event.c\n\t\tsrc/events/control_event.c\n\t\tsrc/events/measurement_event.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Print Shell Module Build with CMake\nDESCRIPTION: This CMake configuration adds the current directory to Zephyr's include paths and adds the print_shell.c source file to the application build. This ensures that the Print Shell module is properly compiled and linked into the final application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/print/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(.)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/print_shell.c)\n```\n\n----------------------------------------\n\nTITLE: DECT Device Scanning and Association\nDESCRIPTION: Commands for scanning beacons, starting own beacon transmission, and establishing associations between devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_30\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ dect mac beacon_scan -c 1671\ndesh:~$ dect mac associate -t 1\n```\n\n----------------------------------------\n\nTITLE: Partition Manager External Flash Example File\nDESCRIPTION: Example YAML configuration file (pm_static_release.yml) that would be needed for defining static partition layouts with Partition Manager. The exact configuration varies based on board and build type.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/memory_layout.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npm_static_${FILE_SUFFIX}.yml\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Error Code String Conversion\nDESCRIPTION: Functions for converting Bluetooth HCI and security error codes to human-readable strings\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nconst char *bt_hci_err_to_str(uint8_t err);\nconst char *bt_security_err_to_str(int err);\n```\n\n----------------------------------------\n\nTITLE: Setting Device Location Resources using LwM2M Carrier API in Console\nDESCRIPTION: This snippet demonstrates how to set the Latitude and Longitude resources of the Location object via the LwM2M Carrier API. The command is executed in a console environment, utilizing the API to configure device location parameters. The expected inputs are the latitude and longitude as decimal values, and the output confirms whether the parameters were successfully set.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_carrier/sample_description.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n\"$ carrier_api location position 63.43049 10.39506\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw Data Reception in Kconfig\nDESCRIPTION: Kconfig option required to enable Monitor mode for raw packet reception in the application\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/advanced_modes/sniffer_rx_operation.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF70_RAW_DATA_RX=y\n```\n\n----------------------------------------\n\nTITLE: Generating Matter Certification Declaration\nDESCRIPTION: This code snippet demonstrates the command used to generate a Certification Declaration (CD) using the chip-cert tool.  It outlines the required parameters such as the key, certificate, Vendor ID (VID), Product ID (PID), device type, certificate ID, and version number. This CD can be used for integration testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/configuring_cd.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"chip-cert gen-cd --key *path_to_key* --cert *path_to_cert* --out CD.der --format-version 1 --vendor-id *VID* --product-id *PID* --device-type-id *device_type* --certificate-id *CD_serial_number* --security-level 0 --security-info 0 --certification-type 1 --version-number *DCL_entry_value*\"\n```\n\n----------------------------------------\n\nTITLE: Accepting TCP Connection and Exchanging Data\nDESCRIPTION: This snippet shows how to accept a TCP connection, receive data, and send responses using AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_18\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XACCEPT=60\n\nAT#XRECV=0\n\nAT#XSEND=\"TCP1/2 received\"\n\nAT#XRECV=0\n\nAT#XSEND=\"TCP3/4/5 received\"\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory Conditionally based on Kconfig Option\nDESCRIPTION: This CMake command conditionally adds a subdirectory to the build based on the value of the specified Kconfig option.  If the Kconfig option (e.g., CONFIG_NRF_MODEM_LIB) is enabled, the corresponding subdirectory (e.g., nrf_modem_lib) is included in the build process.  This allows for modular builds where components are only included if they are enabled in the project configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory_ifdef(CONFIG_NRF_MODEM_LIB nrf_modem_lib)\"\n```\n\n----------------------------------------\n\nTITLE: Generating RCP Firmware Package for nRF52840 Dongle\nDESCRIPTION: Command to generate the RCP firmware package for nRF52840 Dongle using nRF Util.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil pkg generate --hw-version 52 --sd-req=0x00 \\\n--application build/zephyr/zephyr.hex --application-version 1 build/zephyr/zephyr.zip\n```\n\n----------------------------------------\n\nTITLE: Running NCS Toolchain Container - Shell\nDESCRIPTION: This snippet provides the command to run the NCS toolchain Docker container in both interactive and non-interactive modes, with instructions on accepting the J-Link license.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/docker/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\ndocker run -ti ghcr.io/nrfconnect/sdk-nrf-toolchain:<TAG> -v /dev:/dev --privileged -e ACCEPT_JLINK_LICENSE=1 bash\n```\n\n----------------------------------------\n\nTITLE: Performing RSSI Measurements\nDESCRIPTION: Shows examples of executing RSSI measurements with various parameters using the 'dect rssi_scan' command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndect rssi_scan\ndect rssi_scan -c 0 -t 5000\ndect rssi_scan stop\ndect rssi_scan -c 0 --verdict_type_count -t 3000 -a\ndect rssi_scan -c 1661 --verdict_type_count_details -t 6500\n```\n\n----------------------------------------\n\nTITLE: Encoding Sensor Value with Specific Precision\nDESCRIPTION: Illustrates sensor value encoding with floating-point conversion, demonstrating how sensor values are rounded and encoded according to their specified format and resolution.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/sensor.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct bt_mesh_sensor_value sensor_val;\n\n/* Sensor value: 7.3123 A */\n(void)bt_mesh_sensor_value_from_float(\n    &bt_mesh_sensor_format_electric_current,\n    7.3123f, &sensor_val);\n```\n\n----------------------------------------\n\nTITLE: Checking Modem Functional State with AT Command\nDESCRIPTION: AT command to query the current functional state of the nRF91 Series modem. The expected response should be +CFUN: 4, confirming the modem is in offline state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_cloud_certificate.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAT+CFUN?\n```\n\n----------------------------------------\n\nTITLE: Target Source Configuration\nDESCRIPTION: This snippet adds the source file 'src/main.c' to the target 'app' as a private source.  This ensures that the main application logic is compiled as part of the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_jwt/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring TF-M for Full Build in Kconfig\nDESCRIPTION: These Kconfig options enable the configurable, full TF-M build. This allows for more flexible configuration of TF-M features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_building.rst#2025-04-21_snippet_2\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BUILD_WITH_TFM=y\nCONFIG_TFM_PROFILE_TYPE_NOT_SET=y\nCONFIG_TFM_PROFILE_TYPE_MINIMAL=n\n```\n\n----------------------------------------\n\nTITLE: Starting DFU Transfer\nDESCRIPTION: This command initiates the DFU transfer, requiring application key index and slot ID as mandatory arguments. Optional arguments can adjust the immediate application of the firmware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfd start 0 0\n```\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfd start 0 0 0 0\n```\n\n----------------------------------------\n\nTITLE: Unicast OnOff CLI Commands for Matter Light Switch\nDESCRIPTION: CLI commands for directly controlling a single lighting device's state through uart console\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuart:~$ matter switch onoff on\nuart:~$ matter switch onoff off\nuart:~$ matter switch onoff toggle\n```\n\n----------------------------------------\n\nTITLE: Sending SMS Message in MoSh\nDESCRIPTION: Shows how to send an SMS message using the MoSh sms command, with automatic registration if not already done.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nsms send -n +987654321 -m testing\n```\n\n----------------------------------------\n\nTITLE: Configuring Location Library Sources in CMake\nDESCRIPTION: Defines the library sources and conditional compilation options for a location services library. Includes core location functionality and optional method-specific implementations based on configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/location/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(location.c)\nzephyr_library_sources(location_core.c)\nzephyr_library_sources(location_utils.c)\nzephyr_library_sources_ifdef(CONFIG_LOCATION_METHOD_GNSS method_gnss.c)\nzephyr_library_sources_ifdef(CONFIG_LOCATION_METHOD_WIFI scan_wifi.c)\n\nif(CONFIG_LOCATION_METHOD_CELLULAR OR CONFIG_LOCATION_METHOD_GNSS)\nzephyr_library_sources(scan_cellular.c)\nendif()\n\nif(CONFIG_LOCATION_METHOD_CELLULAR OR CONFIG_LOCATION_METHOD_WIFI)\nzephyr_library_sources(method_cloud_location.c)\nzephyr_library_sources_ifdef(CONFIG_LOCATION_SERVICE_NRF_CLOUD cloud_service.c)\nendif()\n\nzephyr_library_compile_definitions(_POSIX_C_SOURCE=200809L)\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion with CONFIG_BT_SCAN\nDESCRIPTION: This CMake snippet includes the `scan.c` source file in the build process only if the `CONFIG_BT_SCAN` configuration option is defined. `zephyr_sources_ifdef` is a Zephyr-specific macro for conditional source inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_sources_ifdef(CONFIG_BT_SCAN scan.c)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Application Task Queue in Kconfig\nDESCRIPTION: Defines Kconfig options to configure the size and maximum task size for the Matter application task queue.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/common/config.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_APP_TASK_QUEUE_SIZE\n  \"int\" - Define the maximum number of tasks the queue dedicated for application tasks that have to be run in the application thread context.\n\nCONFIG_NCS_SAMPLE_MATTER_APP_TASK_MAX_SIZE\n  \"int\" - Define the maximum size (in bytes) of an application task that can be put in the task queue.\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF52840 Development Kit for RCP\nDESCRIPTION: JLink commands to disable Mass Storage feature and force Hardware Flow Control on nRF52840 Development Kit.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nJLinkExe -device NRF52840_XXAA -if SWD -speed 4000 -autoconnect 1 -SelectEmuBySN *SEGGER_ID*\nJ-Link>MSDDisable\nProbe configured successfully.\nJ-Link>SetHWFC Force\nNew configuration applies immediately.\nJ-Link>exit\n```\n\n----------------------------------------\n\nTITLE: Initializing SUPL Client with Callback Functions in C\nDESCRIPTION: The supl_client_init function initializes the SUPL client library. It requires the user to provide the primary and secondary buffers, whose sizes are defined by LIBSUPL_PRI_BUF_SIZE and LIBSUPL_SEC_BUF_SIZE, and the pointers to the callback functions for platform independence. The callback functions are responsible for sending messages, receiving messages, and sending A-GNSS data to the GNSS module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/supl_os_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n\"Both the buffers and the pointers to the callback functions are passed to the SUPL client library through the :c:func:`supl_client_init` function.\"\n```\n\n----------------------------------------\n\nTITLE: Adding Serial Connection Configuration\nDESCRIPTION: Example of adding a new connection configuration for a serial device using the MCUmgr CLI.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmcumgr conn add acm0 type=\"serial\" connstring=\"dev=/dev/ttyACM0,baud=115200,mtu=512\"\n```\n\n----------------------------------------\n\nTITLE: Propagating Bluetooth Connection Parameter Events in CAF\nDESCRIPTION: This structure is used to inform other application modules about Bluetooth connection parameter updates and requests in the CAF Bluetooth LE state module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_state.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nble_peer_conn_params_event\n```\n\n----------------------------------------\n\nTITLE: Controlling a Simulated On/Off Light Device\nDESCRIPTION: Command syntax for controlling the state of a simulated On/Off Light bridged device. Requires specifying the new state (0=off, 1=on) and the endpoint number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_5\n\nLANGUAGE: parsed-literal\nCODE:\n```\nmatter_bridge onoff *<new_state>* *<endpoint>*\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr Bluetooth RPC Library\nDESCRIPTION: Creates a Zephyr library and links it with the Bluetooth RPC subsystem. Adds common source files and conditionally includes additional sources when Bluetooth connections are enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/rpc/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(subsys_bluetooth_rpc)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(bt_rpc_common.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(\n  CONFIG_BT_CONN\n  bt_rpc_gatt_common.c\n)\n```\n\n----------------------------------------\n\nTITLE: Writing Binding to Binding Table with Chip Tool\nDESCRIPTION: This shell snippet demonstrates writing binding information into a light switch's binding table using the Chip Tool. It is used to pair a light switch with light bulbs, allowing control over the lights via the switch. Essential parameters include fabric index, node IDs, endpoints, and cluster IDs, specifying bindings for individual or multiple devices. Ensure the Chip Tool is set up in the environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nchip-tool binding write binding '[{\"fabricIndex\": 1, \"node\": <light bulb node id>, \"endpoint\": 1, \"cluster\": 6}, {\"fabricIndex\": 1, \"node\": <light bulb node id>, \"endpoint\": 1, \"cluster\": 8}]' <light switch node id> 1\n```\n\n----------------------------------------\n\nTITLE: Unlocking Door using Chip-Tool\nDESCRIPTION: This command unlocks the door using the chip-tool with a specified node ID, endpoint, PIN code, and interaction timeout. It demonstrates a remote door unlock operation using a PIN code credential.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n\"./chip-tool doorlock unlock-door 10 1 --PINCode 12345678 --timedInteractionTimeoutMs 5000\"\n```\n\n----------------------------------------\n\nTITLE: Installing J-Link with USB Driver on Windows PowerShell\nDESCRIPTION: Command to install SEGGER J-Link version 7.94i on Windows using PowerShell with USB driver installation parameter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n.\\JLink_Windows_V794i_x86_64.exe -InstUSBDriver=1\n```\n\n----------------------------------------\n\nTITLE: Locating Zephyr RTOS for Project Integration\nDESCRIPTION: Uses find_package to locate the Zephyr RTOS, which is essential for building the embedded application. The HINTS parameter allows specifying the Zephyr base directory through an environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Set PAN ID - Custom Command Usage\nDESCRIPTION: This command sets the PAN ID used during frame filtering and acknowledgment transmission for the CMD device, requiring a specific format for the PAN ID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_22\n\nLANGUAGE: text\nCODE:\n```\ncustom lsetpanid *0x<panid>*\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr RTOS Package\nDESCRIPTION: Locates the Zephyr RTOS package using environment variables, which is required for building the project\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_counter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Scheduler User Conflict - MPSL - Documentation Format\nDESCRIPTION: This entry highlights that having multiple users in the scheduler could lead to assertion failures, especially with components like Bluetooth LE and IEEE 802.15.4 drivers, which developers should monitor for stability and proper functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_40\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-18308: More than one user of the scheduler could cause an assert Examples of users of the scheduler include Bluetooth LE, IEEE 802.15.4 radio driver, timeslot (for example, flash driver).\n```\n\n----------------------------------------\n\nTITLE: Defining Driver Kconfig Options\nDESCRIPTION: This snippet shows the structure of a Kconfig file for a driver. It includes options to enable or disable the driver and any custom configurations. This is essential for making the driver configurable in the NCS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/add_new_driver.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\n# Kconfig\nconfig MY_CUSTOM_DRIVER\n\tbool \"Enable My Custom Driver\"\n\tdefault n\n\thelp\n\t  This option enables the custom driver.\n```\n\n----------------------------------------\n\nTITLE: Getting DUT hardware version with rhardwareversion command in Shell\nDESCRIPTION: Retrieves the hardware version of the DUT device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\ncustom rhardwareversion\n```\n\n----------------------------------------\n\nTITLE: Configuring RTT Trace Backend in CMake\nDESCRIPTION: Conditionally adds the RTT subdirectory for modem trace logging when CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_RTT is enabled\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/nrf_modem_lib/trace_backends/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_RTT rtt)\n```\n\n----------------------------------------\n\nTITLE: Generating CMock Mocks for Headers in CMake\nDESCRIPTION: Generates mock implementation of a header file using CMock. Supports function and word exclusion patterns to control what gets mocked. The generated mock file is added as a source to the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/unity/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(cmock_generate header_path dst_path)\n  cmake_parse_arguments(CMOCK \"\" \"\" \"FUNC_EXCLUDE:WORD_EXCLUDE\" ${ARGN})\n  get_property(CMOCK_DIR GLOBAL PROPERTY CMOCK_DIR)\n  set(MOCK_PREFIX cmock_)\n\n  get_filename_component(file_name \"${header_path}\" NAME_WE)\n  set(MOCK_FILE ${dst_path}/${MOCK_PREFIX}${file_name}.c)\n\n  file(MAKE_DIRECTORY \"${dst_path}\")\n  configure_unity_conf_file(\"${file_name}\" \"${CMOCK_FUNC_EXCLUDE}\" \"${CMOCK_WORD_EXCLUDE}\" conf_file)\n\n  add_custom_command(OUTPUT ${MOCK_FILE}\n    COMMAND ${RUBY_EXECUTABLE}\n    ${CMOCK_DIR}/lib/cmock.rb\n    --mock_prefix=${MOCK_PREFIX}\n    --mock_path=${dst_path}\n    -o${conf_file}\n    ${header_path}\n    DEPENDS ${header_path}\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n  )\n\n  target_sources(app PRIVATE ${MOCK_FILE})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Simulated OnOff Light and Switch Support\nDESCRIPTION: Adds source files for simulated OnOff Light, Generic Switch, and OnOff Light Switch devices when BLE connectivity is not enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_BRIDGE_ONOFF_LIGHT_BRIDGED_DEVICE AND (CONFIG_BRIDGE_GENERIC_SWITCH_BRIDGED_DEVICE OR CONFIG_BRIDGE_ONOFF_LIGHT_SWITCH_BRIDGED_DEVICE))\n    target_sources(app PRIVATE\n        src/bridged_device_types/onoff_light.cpp\n        src/simulated_providers/simulated_onoff_light_data_provider.cpp\n    )\n\nif(CONFIG_BRIDGE_GENERIC_SWITCH_BRIDGED_DEVICE)\n    target_sources(app PRIVATE\n        src/bridged_device_types/generic_switch.cpp\n        src/simulated_providers/simulated_generic_switch_data_provider.cpp\n    )\nendif()\n\nif(CONFIG_BRIDGE_ONOFF_LIGHT_SWITCH_BRIDGED_DEVICE)\n    target_sources(app PRIVATE\n        src/bridged_device_types/onoff_light_switch.cpp\n        src/simulated_providers/simulated_onoff_light_switch_data_provider.cpp\n    )\nendif()\n\nendif() # CONFIG_BRIDGE_ONOFF_LIGHT_BRIDGED_DEVICE AND (CONFIG_BRIDGE_GENERIC_SWITCH_BRIDGED_DEVICE OR CONFIG_BRIDGE_ONOFF_LIGHT_SWITCH_BRIDGED_DEVICE))\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with PPP Support\nDESCRIPTION: This command compiles the MoSh sample with PPP support by specifying overlay and configuration files. It uses options like -DDTC_OVERLAY_FILE to enable PPP/dial up features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_37\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b *board_target* -- -DDTC_OVERLAY_FILE=ppp.overlay -DEXTRA_CONF_FILE=overlay-ppp.conf\n```\n\n----------------------------------------\n\nTITLE: Updating Application Configuration for Firmware Version\nDESCRIPTION: Increments the firmware version in the application's Kconfig to test key revocation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_signature_keys.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nCONFIG_FW_INFO_FIRMWARE_VERSION=2\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with Application FOTA Support\nDESCRIPTION: This command builds the MoSh sample with Application FOTA support by specifying necessary configuration options, such as -DEXTRA_CONF_FILE for enabling firmware over-the-air updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_39\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=overlay-app_fota.conf -DSB_CONFIG_BOOTLOADER_MCUBOOT=y\n```\n\n----------------------------------------\n\nTITLE: Disabling Wi-Fi Low Power Mode in Kconfig\nDESCRIPTION: Disables Wi-Fi low power mode for a Matter application by setting the CONFIG_NRF_WIFI_LOW_POWER Kconfig option to 'n' in the project configuration file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_10\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NRF_WIFI_LOW_POWER=n\n```\n\n----------------------------------------\n\nTITLE: Disabling USB Remote Wakeup in MCUboot Bootloader\nDESCRIPTION: Disables USB remote wakeup functionality in MCUboot bootloader configurations as it is not used by the bootloader.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_8\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_USB_DEVICE_REMOTE_WAKEUP=n\n```\n\n----------------------------------------\n\nTITLE: Implementing Wi-Fi Provisioning with New Libraries in C\nDESCRIPTION: Updated the wifi_provisioning sample to use the lib_wifi_credentials and wifi_prov_readme libraries for more robust Wi-Fi credential storage and provisioning capabilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_13\n\nLANGUAGE: C\nCODE:\n```\n// Example usage of lib_wifi_credentials and wifi_prov_readme libraries\n#include <wifi_credentials.h>\n#include <wifi_prov.h>\n\n// Initialize Wi-Fi credentials\nwifi_credentials_init();\n\n// Start Wi-Fi provisioning\nwifi_prov_start();\n```\n\n----------------------------------------\n\nTITLE: Adding Devicetree Node for nRF21540 GPIO Mode\nDESCRIPTION: This snippet shows the devicetree configuration needed to enable the nRF21540 in GPIO mode by defining a node that includes the necessary GPIO pin settings for TX and RX enables, along with the power-down GPIO.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf21540_gpio.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n      nrf_radio_fem: name_of_fem_node {\n         compatible  = \"nordic,nrf21540-fem\";\n         tx-en-gpios = <&gpio0 13 GPIO_ACTIVE_HIGH>;\n         rx-en-gpios = <&gpio0 14 GPIO_ACTIVE_HIGH>;\n         pdn-gpios   = <&gpio0 15 GPIO_ACTIVE_HIGH>;\n      };\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Encrypted Key Usage Scheme Support in KMU\nDESCRIPTION: Configuration settings to enable support for the Encrypted key usage scheme with CRACEN, including AES, CMAC, SP800-108 CMAC counter mode, and GCM cipher support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/cryptography.rst#2025-04-21_snippet_7\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_PSA_WANT_KEY_TYPE_AES=y\nCONFIG_PSA_WANT_AES_KEY_SIZE_256=y\nCONFIG_PSA_WANT_ALG_ECB_NO_PADDING=y\nCONFIG_PSA_WANT_ALG_CMAC=y\nCONFIG_PSA_WANT_ALG_SP800_108_COUNTER_CMAC=y\nCONFIG_PSA_WANT_ALG_GCM=y\n```\n\n----------------------------------------\n\nTITLE: Setting MCUboot Update Package Version\nDESCRIPTION: This snippet describes how to configure the MCUboot update package version to manage firmware updates effectively. It specifies the requirement to increase the version number when deploying an update to prevent MCUboot from rejecting it if the version is lower than the current firmware running. The provided configuration option influences the update validation process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/sysbuild_image_ids.rst#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nWhen MCUboot updates are enabled, the firmware embeds the |NSIB| version using the :kconfig:option:`CONFIG_FW_INFO_FIRMWARE_VERSION` Kconfig option.\nHowever, during an update, MCUboot does not check this version; it only checks the MCUboot package version.\n\nYou can set the MCUboot update package version in sysbuild with ``SB_CONFIG_SECURE_BOOT_MCUBOOT_VERSION``.\nYou must increase this version number when deploying an MCUboot update.\nIf the version in the update is lower than the current version, MCUboot will reject the update and not transfer it to the opposing secure boot firmware slot.\n\nAdditionally, make sure to load the correct update image onto the device.\nIf MCUboot is currently running from the ``s0`` slot, then you must use the ``s1`` update, and if it is running from the ``s1`` slot, then you must use the ``s0`` update.\nIf you upload to the wrong slot image, MCUboot will reject the update.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Fault Handler - C\nDESCRIPTION: Instructions for implementing a custom fault handler that must enable the CONFIG_NRF_MODEM_LIB_ON_FAULT_APPLICATION_SPECIFIC Kconfig option, with notes on running in interrupt context and re-initialization constraints.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_fault.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n// Define the custom fault handler function\nvoid my_custom_fault_handler(void) {\n    // Custom implementation for handling modem faults\n    // Note: Handle re-initialization of Modem library outside of this function.\n}\n\n// Enable specific Kconfig option to use this custom handler:\n// CONFIG_NRF_MODEM_LIB_ON_FAULT_APPLICATION_SPECIFIC\n```\n\n----------------------------------------\n\nTITLE: Displaying AMS Track Title Update in RST\nDESCRIPTION: Demonstrates how to format the output of an AMS Track Title Update in RST documentation, including entity ID, attribute ID, flags, and the song title.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ams_client/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\nAMS EU: 02,02,00 nRF52 Series song\n```\n\n----------------------------------------\n\nTITLE: TNEP Service Definition and Initialization in C\nDESCRIPTION: Example showing how to define TNEP services, register message buffers, initialize the TNEP library and start NFC tag emulation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/tag.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define NFC_TNEP_TAG_SERVICE_DEF(service_name, uri, uri_length, mode, t_wait, n_wait, mac_msg_size\n\t\t\t\t\t\t\t select_cb, deselect_cb message_cb, timeout_cb, error_cb)\n\nnfc_tnep_tx_msg_buffer_register(buffer, swap_buffer, buffer_length);\n\nnfc_tnep_init(event, event_cnt, nfc_txt_rw_payload_set);\n\nnfc_tXt_setup();\n\nnfc_tnep_tag_initial_msg_create(1, NULL);\n\nnfc_tXt_emulation_start();\n```\n\n----------------------------------------\n\nTITLE: Deprecated Zephyr Logging v1 Functions\nDESCRIPTION: The deprecated logging backend API functions from Zephyr logging v1 that need to be replaced when migrating to logging v2. These functions handle different types of log messages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_1.x_to_2.x.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n/* DEPRECATED! Functions used for logging v1. */\nvoid (*put)(const struct log_backend *const backend,\n         struct log_msg *msg);\nvoid (*put_sync_string)(const struct log_backend *const backend,\n         struct log_msg_ids src_level, uint32_t timestamp,\n         const char *fmt, va_list ap);\nvoid (*put_sync_hexdump)(const struct log_backend *const backend,\n         struct log_msg_ids src_level, uint32_t timestamp,\n         const char *metadata, const uint8_t *data, uint32_t len);\n```\n\n----------------------------------------\n\nTITLE: Specifying Scancode-Toolkit Path\nDESCRIPTION: This command-line option allows the user to specify the path to the 'scancode' executable, which is part of the Scancode-Toolkit.  This is useful when the 'scancode' command is not available in the system's PATH environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"--scancode ~/scancode-toolkit/scancode\"\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket Policy\nDESCRIPTION: JSON policy configuration for AWS S3 bucket that allows GetObject access for firmware files. This is a development-focused policy that allows public access.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_fota.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::*bucket_name*/*\"\n        }\n     ]\n}\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Options for Core Panic Handling and Hardware Keys\nDESCRIPTION: This snippet sets TFM CMake options for handling core panics (halting the core) and configuring hardware unique keys. It passes the relevant Kconfig values to the TFM build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS\n  -DCONFIG_TFM_HALT_ON_CORE_PANIC=${CONFIG_TFM_HALT_ON_CORE_PANIC}\n)\n\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS\n  -DCONFIG_HW_UNIQUE_KEY=${CONFIG_HW_UNIQUE_KEY}\n  -DCONFIG_HW_UNIQUE_KEY_RANDOM=${CONFIG_HW_UNIQUE_KEY_RANDOM}\n  -DCRYPTO_TFM_BUILTIN_KEYS_DRIVER=${CONFIG_TFM_CRYPTO_BUILTIN_KEYS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF RPC Device Info Build Components\nDESCRIPTION: CMake configuration that sets up build directories for common components and conditionally includes client and server directories based on CONFIG flags. Uses add_subdirectory commands with ifdef conditions to control component inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_rpc/dev_info/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(common)\n\nadd_subdirectory_ifdef(CONFIG_NRF_RPC_DEV_INFO_CLIENT client)\nadd_subdirectory_ifdef(CONFIG_NRF_RPC_DEV_INFO_SERVER server)\n```\n\n----------------------------------------\n\nTITLE: Testing Generic AT Commands\nDESCRIPTION: Commands to verify basic modem functionality including version check and supported command listing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_0\n\nLANGUAGE: at-commands\nCODE:\n```\nAT#XSLMVER\nAT#XCLAC\nAT#XSLEEP=?\n```\n\n----------------------------------------\n\nTITLE: Configuring FMFU Management Library Sources in CMake\nDESCRIPTION: Defines the library sources for the FMFU management functionality, including the main management module and status handling module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mgmt/fmfu/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(\n  src/fmfu_mgmt.c\n  src/fmfu_mgmt_stat.c\n  )\n```\n\n----------------------------------------\n\nTITLE: SUIT DFU Candidate Envelope Processing\nDESCRIPTION: Function calls required after storing the SUIT candidate envelope and before starting the update. These prepare the update process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/suit_dfu.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nsuit_dfu_candidate_envelope_stored();\nsuit_dfu_candidate_preprocess();\n```\n\n----------------------------------------\n\nTITLE: Including Pressure Sensor Headers\nDESCRIPTION: Header includes for pressure sensor device and data provider implementations in the bridged device factory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"pressure_sensor.h\"\n#include \"simulated_pressure_sensor_data_provider.h\"\n```\n\n----------------------------------------\n\nTITLE: Adding main source file\nDESCRIPTION: This snippet adds `src/main.c` as a source file to the `app` target.  This is the main application code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Registering Fast Pair Information Callbacks in C\nDESCRIPTION: Updated API to allow registration of multiple callbacks for Fast Pair information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-3.0.0-preview2.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nbt_fast_pair_info_cb_register()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Device Location with Default Configuration in MoSh\nDESCRIPTION: Demonstrates how to get the device's location using the default configuration with the MoSh location command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nlocation get\n```\n\n----------------------------------------\n\nTITLE: RF Tool TX Trigger\nDESCRIPTION: This command triggers the DECT RF tool to start transmitting (TX). It sets the frame repeat count to 15, specifies channel 1677 and the target frequency 39.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool -m tx --frame_repeat_count 15 -c 1677 -t 39\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Cache Streamer Integration Test\nDESCRIPTION: Sets up the CMake environment, finds the Zephyr package, defines the project, and links necessary SUIT-related libraries. It requires CMake version 3.20.0 or higher and uses a custom test template.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/integrated_fetch/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_cache_streamer)\ninclude(../cmake/test_template.cmake)\n\n# Link with the CMake target, that includes SUIT platform internal APIs header\nzephyr_library_link_libraries(suit_stream_sinks_interface)\nzephyr_library_link_libraries(suit_stream_sources_interface)\nzephyr_library_link_libraries(suit_memptr_storage_interface)\n```\n\n----------------------------------------\n\nTITLE: Activating PDN Connection with IP Family in C\nDESCRIPTION: Example of activating a PDN connection using the pdn_activate function from the PDN library. The new 'family' parameter allows specifying the IP family for the connection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.8.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nint err = pdn_activate(0, \"apn\", PDN_FAM_IPV4V6);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for GZP Dynamic Pairing Device Project\nDESCRIPTION: This CMake snippet sets up the project configuration for a GZP dynamic pairing device. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, and adds the main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/gazell/gzp_dynamic_pairing_device/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(gzp_dynamic_pairing_device)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Generating Requirements File with pip-compile\nDESCRIPTION: This snippet demonstrates how to use 'pip-compile-cross-platform' to create a consolidated requirements file for various components in the Nordic SDK. It takes multiple requirements input files and generates a fixed output file while specifying the minimum Python version and an index URL for package retrieval.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/requirements-fixed.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n#\n# This file is autogenerated by pip-compile-cross-platform\n# To update, run:\n#\n#    pip-compile-cross-platform bootloader/mcuboot/scripts/requirements.txt zephyr/scripts/requirements.txt nrf/scripts/requirements-west-ncs-sbom.txt nrf/scripts/requirements-ci.txt nrf/scripts/requirements-extra.txt nrf/scripts/requirements.txt --output-file nrf/scripts/requirements-fixed.txt --min-python-version 3.12 --index_url https://files.nordicsemi.com/artifactory/api/pypi/nordic-pypi/simple\n```\n\n----------------------------------------\n\nTITLE: Including Gazell Samples Information in reStructuredText\nDESCRIPTION: This snippet includes general information about Gazell samples from another file. It uses reStructuredText directives to specify the start and end points of the included content.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/gazell.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events using Event Manager Proxy in C\nDESCRIPTION: This snippet illustrates how to subscribe to events using the `EVENT_MANAGER_PROXY_SUBSCRIBE` macro. It includes header files for event definitions and demonstrates the use of IPC instances to subscribe to specific events, along with necessary error handling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/event_manager_proxy.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n\"#include <event1_definition_file.h>\\n#include <event2_definition_file.h>\\n\\nret = EVENT_MANAGER_PROXY_SUBSCRIBE(ipc1_instance, event1);\\n/* Error handling */\\nret = EVENT_MANAGER_PROXY_SUBSCRIBE(ipc2_instance, event2);\\n/* Error handling */\"\n```\n\n----------------------------------------\n\nTITLE: Finding the Zephyr package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr SDK. It requires the Zephyr package and uses the `ZEPHYR_BASE` environment variable as a hint to find the Zephyr installation directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hr_coded/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Cellular Location Tracking in Kconfig\nDESCRIPTION: Enables cellular location tracking. Disable CONFIG_LOCATION_TRACKING and all location tracking methods to completely disable location tracking. Defaults to enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_18\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LOCATION_TRACKING_CELLULAR\n```\n\n----------------------------------------\n\nTITLE: Updating Firmware via fwupd CLI Commands\nDESCRIPTION: Console commands for refreshing metadata from LVFS and checking/installing available firmware updates using fwupd.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/fwupd.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nfwupdmgr refresh\nfwupdmgr get-updates\n```\n\n----------------------------------------\n\nTITLE: Setting SoC Linker Script (CMake)\nDESCRIPTION: Conditionally sets the SoC linker script based on whether the ARM architecture is enabled. The script location is defined using ZEPHYR_BASE and stored in a cache variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_ARM)\n  set(SOC_LINKER_SCRIPT ${ZEPHYR_BASE}/include/zephyr/arch/arm/cortex_m/scripts/linker.ld CACHE INTERNAL \"SoC Linker script\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring FOTA Download Library Sources and Dependencies in CMake\nDESCRIPTION: Configures the Zephyr library build system for FOTA download functionality, including core sources and conditional compilation of different DFU target implementations. Sets up include paths and links against MCUboot bootutil library when enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/fota_download/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n  src/fota_download.c\n  src/util/fota_download_util.c\n)\n\nzephyr_library_sources_ifdef(CONFIG_DFU_TARGET_MCUBOOT\n  src/util/fota_download_mcuboot.c\n)\n\nzephyr_library_sources_ifdef(CONFIG_DFU_TARGET_FULL_MODEM\n  src/util/fota_download_full_modem.c\n)\n\nzephyr_library_sources_ifdef(CONFIG_DFU_TARGET_MODEM_DELTA\n  src/util/fota_download_delta_modem.c\n)\n\nzephyr_library_sources_ifdef(CONFIG_DFU_TARGET_SMP\n  src/util/fota_download_smp.c\n)\n\nzephyr_include_directories(./include)\nzephyr_include_directories_ifdef(CONFIG_SECURE_BOOT\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/dfu/include)\nzephyr_include_directories_ifdef(CONFIG_DOWNLOADER\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/include)\n\nif(CONFIG_MCUBOOT_IMG_MANAGER)\n  zephyr_library_link_libraries(MCUBOOT_BOOTUTIL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: FOTA upload command for nRF9160 DK\nDESCRIPTION: This command uploads the modem firmware binary to Coiote Device Management server for the nRF9160 DK. `1.x.x` is the latest modem release version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n\"./scripts/fota.py upload 1 mfw_nrf9160_update_from_1.x.x_to_1.x.x-FOTA-TEST.bin\"\n```\n\n----------------------------------------\n\nTITLE: Processing A-GNSS Data in Location Library\nDESCRIPTION: Demonstrates how to process A-GNSS data received from a cloud service. The location_agnss_data_process() function is used to pass the data to the Location library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/location.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nlocation_agnss_data_process()\n```\n\n----------------------------------------\n\nTITLE: Defining LwM2M Engine Structures in C\nDESCRIPTION: Declares the necessary structures required by the LwM2M engine to manage object instances, resources, and resource instances for the IPSO Digital Output object.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_client_utils.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstatic struct lwm2m_engine_obj output_obj;\nstatic struct lwm2m_engine_obj_inst inst[MAX_INSTANCE_COUNT];\nstatic struct lwm2m_engine_res res[MAX_INSTANCE_COUNT][N_RESOURCES];\nstatic struct lwm2m_engine_res_inst res_inst[MAX_INSTANCE_COUNT][N_RESOURCES];\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Locates the Zephyr build system package using environment variable hints, which is essential for Nordic Semiconductor SDK projects\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/ipuc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Memory Slab Utilization in C\nDESCRIPTION: New function added in Zephyr for getting a memory slab's maximum utilization in blocks. This is enabled by the CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nsize_t k_mem_slab_max_used_get(struct k_mem_slab *slab);\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11g PER Measurement (Transmitter)\nDESCRIPTION: Commands to set up the transmitter for 802.11g PER measurement, including channel, packet parameters, and transmission settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 11\nuart:~$ wifi_radio_test tx_pkt_tput_mode 0\nuart:~$ wifi_radio_test tx_pkt_rate 54\nuart:~$ wifi_radio_test tx_pkt_len 1024\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num 10000\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Memory Partition Configuration for CPUAPP Application in DTS\nDESCRIPTION: This snippet demonstrates the comprehensive memory configuration needed for the CPUAPP application to work with FLPR. It defines reserved memory for FLPR code, SRAM code/data regions, and CPUAPP SRAM with specific address ranges and sizes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/nrf54l_signing_with_payload.rst#2025-04-21_snippet_1\n\nLANGUAGE: dts\nCODE:\n```\n/{  \n   soc {\n            reserved-memory {\n                     #address-cells = <1>;\n                     #size-cells = <1>;\n                     cpuflpr_code_partition: image@98000 {\n                           /* FLPR core code partition */\n                     reg = <0x98000 0x20000>;\n                     };\n            };\n            cpuflpr_sram_code_data: memory@20028000 {\n                     compatible = \"mmio-sram\";\n                     reg = <0x20028000 DT_SIZE_K(96)>;\n                     #address-cells = <1>;\n                     #size-cells = <1>;\n                     ranges = <0x0 0x20028000 0x18000>;\n            };\n   };\n};\n&cpuapp_sram {\n   reg = <0x20000000 DT_SIZE_K(160)>;\n   ranges = <0x0 0x20000000 0x28000>;\n};\n```\n\n----------------------------------------\n\nTITLE: Image Update Component Lifecycle Sequence Diagram in PlantUML\nDESCRIPTION: A sequence diagram showing the lifecycle of a flash component IPUC instance. It illustrates the check operation that creates a temporary IPUC device to verify if a real creation would be possible, followed by the release of resources. The diagram includes notes explaining that checking requires a spare device instance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/flash_component_ipuc_check.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant flash_ipuc\nparticipant flash_ipuc_dev\n\n--> flash_ipuc ++ : flash_component_ipuc_check(component_id)\nflash_ipuc -> flash_ipuc ++ : flash_component_ipuc_create(component_id, NULL, NULL)\nflash_ipuc -> flash_ipuc_dev ** : get_free_dev()\nnote right\n  Checking if creating an IPUC is possible requires\n  a spare IPUC device instance\nend note\ndeactivate flash_ipuc\n\nflash_ipuc -> flash_ipuc ++: flash_ipuc_release(ipuc_dev)\nflash_ipuc -> flash_ipuc_dev : release(ipuc_dev)\ndestroy flash_ipuc_dev\ndeactivate flash_ipuc\ndeactivate flash_ipuc\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Building peripheral_lbs sample with MCUboot in direct-xip mode without revert mechanism\nDESCRIPTION: Build command for the peripheral_lbs sample with MCUboot in direct-xip mode, with FOTA updates enabled but without revert mechanism support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/fota_update.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b *board_target* -- -DSB_CONFIG_BOOTLOADER_MCUBOOT=y -DSB_CONFIG_MCUBOOT_MODE_DIRECT_XIP=y -DCONFIG_NCS_SAMPLE_MCUMGR_BT_OTA_DFU=y\n```\n\n----------------------------------------\n\nTITLE: Getting Full Scene Register of Scene Server\nDESCRIPTION: This command requests the full scene register from the Scene Server, which holds potential states or configurations that can be recalled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scene_cli.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models scene register-get\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake with Zephyr and Blinky Sources\nDESCRIPTION: This CMake snippet initializes the minimum required version of CMake, locates the Zephyr package, and sets up the 'blinky' project. It specifies the source files, highlighting the importance of having Zephyr properly installed and accessible through the environment variable. This setup is essential for building a basic blinky application using Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/basic/blinky/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(blinky)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/basic/blinky/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Up SUIT Platform Interface\nDESCRIPTION: Defines the SUIT platform interface library and specifies the include directories necessary for compilation. This setup is crucial for ensuring platform-specific APIs are accessible across components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(suit_platform_interface)\ntarget_include_directories(suit_platform_interface INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for Configurable Module - Python\nDESCRIPTION: This command displays the list of options that can be configured for a specified module. It provides flexibility in managing device configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython3 configurator_cli.py DEVICE config MODULE_NAME -h\n```\n\n----------------------------------------\n\nTITLE: Enabling NSIB Bootloader with Sysbuild in nRF Connect SDK\nDESCRIPTION: Demonstrates how to enable the nRF Secure Immutable Bootloader (NSIB) for a Zephyr or nRF Connect SDK sample using sysbuild configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 zephyr/samples/hello_world -- -DSB_CONFIG_SECURE_BOOT_APPCORE=y\n```\n\n----------------------------------------\n\nTITLE: Getting DFU Target Offset in C\nDESCRIPTION: Get the offset of already downloaded blocks to skip previously downloaded data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_target.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ndfu_target_offset_get();\n```\n\n----------------------------------------\n\nTITLE: Setting Channel for Wi-Fi Communication - Console\nDESCRIPTION: This snippet provides commands for managing the communication channel settings of the Wi-Fi, specifically for monitor or TX-Injection modes. It outlines parameters for getting and setting specific channel numbers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n| This command is used to set the channel when monitor or TX-Injection mode is enabled\\\n| Currently 20 MHz is only supported and no BW parameter is provided\\\n| parameters:\\\n| [-i : --if-index <idx>] : Interface index.\\\n| [-c : --channel] : Set a specific channel number to the lower layer.\\\n| [-g : --get] : Get current set channel number from the lower layer.\\\n| [-h : --help] : Help.\\\n| Usage: Get operation example for interface index 1\\\n| wifi channel -i1 -g\\\n| Set operation example for interface index 1 (setting channel 5)\\\n| wifi -i1 -c5\n```\n\n----------------------------------------\n\nTITLE: Basic Flash Command\nDESCRIPTION: Basic command to program an application to a device without erasing the entire flash memory. This only erases the pages that will be overwritten by the new application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/programming.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Searching for TNEP Services in C\nDESCRIPTION: Uses the nfc_tnep_poller_svc_search function to look for Service Parameters records in the initial NDEF message read from an NFC tag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/poller.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nnfc_tnep_poller_svc_search(ndef_msg);\n```\n\n----------------------------------------\n\nTITLE: Programming Command with Recovery - Python\nDESCRIPTION: Example command that includes automatic recovery and reprogramming when programming fails due to readback protection errors\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/building.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython buildprog.py -c both -b debug -d both -t unicast -p --recover_on_fail\n```\n\n----------------------------------------\n\nTITLE: Sending REST Log Messages in C using nRF Cloud Log Library\nDESCRIPTION: Example of how to send log messages using the nRF Cloud Log library with REST. This snippet shows calling the REST-specific log send function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud_log.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <nrf_cloud_log.h>\n\n// When using REST\nnrf_cloud_rest_log_send(...);\n```\n\n----------------------------------------\n\nTITLE: Polling Incoming Messages in Subscriber Thread - C\nDESCRIPTION: This snippet illustrates how a subscriber module continuously polls for incoming messages from a subscribed channel using the zbus_sub_wait function. The dedicated thread processes messages received on the 'TRIGGER_CHAN' channel, invoking a sample function accordingly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/doc/architecture.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n    static void sampler_task(void)\\n    {\\n\\t\\tconst struct zbus_channel *chan;\\n\\n\\t\\twhile (!zbus_sub_wait(&sampler, &chan, K_FOREVER)) {\\n\\n\\t\\t\\tif (&TRIGGER_CHAN == chan) {\\n\\t\\t\\t\\tsample();\\n\\t\\t\\t}\\n\\t\\t}\\n    }\\n\\n    K_THREAD_DEFINE(sampler_task_id,\\n\\t\\t\\t\\t    CONFIG_MQTT_SAMPLE_SAMPLER_THREAD_STACK_SIZE,\\n\\t\\t\\t\\tsampler_task, NULL, NULL, NULL, 3, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Terminal Output Example for Application Boot\nDESCRIPTION: Example console output showing the boot message when the application starts up, demonstrating successful initialization of the Zephyr OS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/http_update/application_update/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n***** Booting Zephyr OS v1.13.99 *****\n```\n\n----------------------------------------\n\nTITLE: Querying Zephyr commits in nRF Connect SDK using Git\nDESCRIPTION: Git commands to list upstream Zephyr commits and nRF Connect SDK specific commits incorporated since the last release.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.6.99-cs2.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline 0051731a41 ^23cf38934c\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline manifest-rev ^0051731a41\n```\n\n----------------------------------------\n\nTITLE: FMDN Extension API Usage\nDESCRIPTION: Shows the key API functions used for managing FMDN advertising sets and battery level indications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n// Create/delete advertising set\nbt_le_ext_adv_create()\nbt_le_ext_adv_delete()\n\n// Start/stop advertising\nbt_le_ext_adv_start()\nbt_le_ext_adv_stop()\n\n// Set battery level\nbt_fast_pair_fmdn_battery_level_set(/* percentage */)\n\n// Set Bluetooth identity\nbt_fast_pair_fmdn_id_set(/* id */)\n\n// Set advertising parameters\nbt_fast_pair_fmdn_adv_param_set(/* params */)\n```\n\n----------------------------------------\n\nTITLE: Building with DFU\nDESCRIPTION: Demonstrates how to build the Matter door lock sample with Device Firmware Upgrade (DFU) support enabled via SMP protocol over Bluetooth LE.  It shows an example command using west build to enable the DFU over Bluetooth SMP option, replacing placeholders for board target and build flag with actual values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"west build -b nrf52840dk/nrf52840 -- -DCONFIG_CHIP_DFU_OVER_BT_SMP=y\"\n```\n\n----------------------------------------\n\nTITLE: Adding source files to the application target\nDESCRIPTION: This snippet adds the `src/main.c` source file to the application target. This tells CMake to compile and link this file when building the application. It uses the PRIVATE keyword, indicating the source file is only used by the `app` target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/coap_client/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_sources(app PRIVATE src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Registering FMDN Information Callbacks - C\nDESCRIPTION: This snippet explains how to register information callbacks for the FMDN extension using the `bt_fast_pair_fmdn_info_cb_register` function, enabling multiple callback sets for events like provisioning state changes and clock synchronization.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n// Register information callbacks to handle provisioning state and clock sync events.\nvoid register_fmdn_info_callbacks() {\n    bt_fast_pair_fmdn_info_cb_register(&info_callbacks);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Property Value on Admin Property Server (With Acknowledgment)\nDESCRIPTION: Sets a property value with access control on the Admin Property Server and waits for a response. This command is used where access permission is required along with value setting and requires 'ID', 'Access', and 'HexStrVal'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_prop_cli.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmesh models prop admin-prop-set <ID> <Access> <HexStrVal>\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Compilation for NFC TNEP Components in CMake\nDESCRIPTION: Configures conditional compilation of NFC TNEP (Tag/NDEF Exchange Protocol) source files based on Kconfig options. Includes tag.c when CONFIG_NFC_TNEP_TAG is enabled, poller.c when CONFIG_NFC_TNEP_POLLER is enabled, and common.c when CONFIG_NFC_TNEP_CH is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nfc/tnep/ch/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_NFC_TNEP_TAG tag.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_TNEP_POLLER poller.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_TNEP_CH common.c)\n```\n\n----------------------------------------\n\nTITLE: Enabling Modem Traces with RAM Backend using West\nDESCRIPTION: Command to add the nrf91-modem-trace-ram snippet when building an application with west. This enables modem tracing with RAM storage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_snippet.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build --board *board_target* -- -D<image_name>_SNIPPET=\"nrf91-modem-trace-ram\"\n```\n\n----------------------------------------\n\nTITLE: Checking EUI-64 value using OpenThread CLI\nDESCRIPTION: This snippet shows how to check the EUI-64 value using the OpenThread Command Line Interface (CLI). The expected output is the EUI-64 address.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/configuring.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot eui64\n8877665544332211\nDone\n```\n\n----------------------------------------\n\nTITLE: Configuring L2 Wi-Fi Connection Library in CMake\nDESCRIPTION: This snippet creates a Zephyr library for the L2 Wi-Fi connection module, specifies the source file, and sets up include directories. It includes paths for Zephyr, nRF, and hostap modules, as well as the conn_mgr subsystem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/l2_wifi_if_conn/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(l2_wifi_conn.c)\n\nzephyr_library_include_directories(\n    ${ZEPHYR_BASE}/include\n    ${ZEPHYR_NRF_MODULE_DIR}/include\n    ${ZEPHYR_HOSTAP_MODULE_DIR}\n    ${ZEPHYR_BASE}/subsys/net/conn_mgr\n    )\n```\n\n----------------------------------------\n\nTITLE: Stopping Smoke Alarm and Triggering CO Alarm Command\nDESCRIPTION: Stops the smoke alarm and subsequently triggers a CO alarm on the device by sending an appropriate command. Inputs include a test event enable key and node ID. Outputs involve turning off LED2 and blinking LED3 with a given interval.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/smoke_co_alarm/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ngeneraldiagnostics test-event-trigger hex:<test_event_enable_key> 0x005c0000000000a0 <node_id> 0\n```\n\n----------------------------------------\n\nTITLE: Upgrading nRF Util Core Module\nDESCRIPTION: Command to upgrade the nRF Util core module to the latest version\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_gs.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnrfutil self-upgrade\n```\n\n----------------------------------------\n\nTITLE: GNSS Assisted Tracking Example\nDESCRIPTION: Example demonstrating GNSS operation with cloud assistance and continuous tracking\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/GNSS_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT\nCODE:\n```\nAT%XSYSTEMMODE=1,0,1,0\n\nOK\nAT+CPSMS=1,,,\"00000001\",\"00000011\"\n\nOK\nAT+CEDRXS=2,4,\"0011\"\n\nOK\nAT+CFUN=1\n\nOK\n\n+CEDRXP: 4,\"0011\",\"0011\",\"0011\"\n\nAT#XNRFCLOUD=1\n\nOK\n#XNRFCLOUD: 1,0\nAT#XGPS=1,1,0,1\n\n#XGPS: 1,1\n\nOK\n\n#XGPS: 35.457417,139.625211,162.850952,15.621976,1.418092,0.000000,\"2021-06-02 05:21:31\"\n\n#XGPS: 35.457435,139.625348,176.104797,14.245458,1.598184,69.148659,\"2021-06-02 05:21:32\"\n\n#XGPS: 35.457417,139.625415,179.132980,13.318132,1.235241,69.148659,\"2021-06-02 05:21:33\"\n\n#XGPS: 35.457410,139.625469,181.223541,12.667312,0.803951,69.148659,\"2021-06-02 05:21:34\"\nAT#XGPS=0\n\n#XGPS: 1,0\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Adding Application Source Subdirectories\nDESCRIPTION: Adds the various application source subdirectories to the build, using a modular structure with disk, events, and modules components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/connectivity_bridge/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Application sources\nadd_subdirectory(src/disk)\nadd_subdirectory(src/events)\nadd_subdirectory(src/modules)\n```\n\n----------------------------------------\n\nTITLE: Remote Control Using nRF Cloud in MoSh\nDESCRIPTION: Shows how to use the nRF Cloud Terminal to remotely execute MoSh commands on a connected device, including location requests and AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_25\n\nLANGUAGE: console\nCODE:\n```\ncloud connect\n```\n\n----------------------------------------\n\nTITLE: Writing EUI-64 to UICR Registers using nrfutil (nRF Connect SDK)\nDESCRIPTION: This snippet illustrates how to program the UICR registers with an EUI-64 value using the nrfutil tool.  Replace *serial_number* with the serial number of your debugger. The address values correspond to UICR->CUSTOMER[0] and UICR->CUSTOMER[1].\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/configuring.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device x-write --serial-number *serial_number* --address 0x10001080 --value 0x11223344\nnrfutil device x-write --serial-number *serial_number* --address 0x10001084 --value 0x55667788\nnrfutil device reset --reset-kind=RESET_PIN\n```\n\n----------------------------------------\n\nTITLE: Building nRF5340 Audio FOTA Version\nDESCRIPTION: Command line example for building the FOTA (Firmware Over The Air) version of the nRF5340 Audio application. Uses the fota configuration suffix and pristine build option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/building.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340_audio_dk/nrf5340/cpuapp --pristine -- -DEXTRA_CONF_FILE=\".\\unicast_server\\overlay-unicast_server.conf\" -DFILE_SUFFIX=fota\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic nRF Connect SDK Project\nDESCRIPTION: This CMake snippet sets up the build environment for a Nordic nRF Connect SDK project. It specifies the minimum CMake version, finds the Zephyr package, defines the project, and adds all .c files from the src directory to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_smp_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE ${app_sources})\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Ringing Source Enumeration in Fast Pair FMDN\nDESCRIPTION: Enumeration values identifying the different sources that can trigger ringing activity in Fast Pair FMDN, including FMDN GATT services and DULT sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nBT_FAST_PAIR_FMDN_RING_SRC_FMDN_BT_GATT\nBT_FAST_PAIR_FMDN_RING_SRC_DULT_BT_GATT\nBT_FAST_PAIR_FMDN_RING_SRC_DULT_MOTION_DETECTOR\n```\n\n----------------------------------------\n\nTITLE: FOTA Unsolicited Notification Syntax\nDESCRIPTION: Format for unsolicited notifications providing FOTA operation status updates including stage, status and additional info.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/FOTA_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XFOTA: <fota_stage>,<fota_status>[,<fota_info>]\n```\n\n----------------------------------------\n\nTITLE: Implementing HandleAttributeChange Method for Pressure Sensor\nDESCRIPTION: Handles attribute changes for the pressure sensor device, including basic information, identify cluster, and pressure measurements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nCHIP_ERROR PressureSensorDevice::HandleAttributeChange(chip::ClusterId clusterId, chip::AttributeId attributeId, void *data, size_t dataSize)\n{\n   CHIP_ERROR err = CHIP_NO_ERROR;\n   if (!data) {\n      return CHIP_ERROR_INVALID_ARGUMENT;\n   }\n   switch (clusterId) {\n   case Clusters::BridgedDeviceBasicInformation::Id:\n      return HandleWriteDeviceBasicInformation(clusterId, attributeId, data, dataSize);\n   case Clusters::Identify::Id:\n      return HandleWriteIdentify(attributeId, data, dataSize);\n   case Clusters::PressureMeasurement::Id: {\n      switch (attributeId) {\n      case Clusters::PressureMeasurement::Attributes::MeasuredValue::Id: {\n         int16_t value;\n\n         err = CopyAttribute(data, dataSize, &value, sizeof(value));\n\n         if (err != CHIP_NO_ERROR) {\n            return err;\n         }\n\n         SetMeasuredValue(value);\n\n         break;\n      }\n      default:\n         return CHIP_ERROR_INVALID_ARGUMENT;\n      }\n      break;\n   }\n   default:\n      return CHIP_ERROR_INVALID_ARGUMENT;\n   }\n\n   return err;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SUIT Decrypt Filter Tests\nDESCRIPTION: Sets up the CMake build environment for SUIT decrypt filter integration tests, including version requirements, project configuration, and library dependencies. Creates a fake SUIT MCI interface library and links required components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/decrypt_filter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_decrypt_filter)\ninclude(../cmake/test_template.cmake)\n\n# Create a fake suit_mci interface library so that suit_decrypt_filter can link to it\nzephyr_interface_library_named(suit_mci)\ntarget_include_directories(suit_mci INTERFACE ${ZEPHYR_NRF_MODULE_DIR}/subsys/suit/mci/include)\n\nzephyr_library_link_libraries(suit_stream_filters_interface)\nzephyr_library_link_libraries(suit_stream_sources_interface)\nzephyr_library_link_libraries(suit_mci)\nzephyr_library_link_libraries(suit_decrypt_test_utils)\n```\n\n----------------------------------------\n\nTITLE: Conditional nRFx Include Directories\nDESCRIPTION: Includes nRFx header directories when CONFIG_HAS_NRFX is enabled, allowing conditional compilation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/hal_nordic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories_ifdef(CONFIG_HAS_NRFX .)\n```\n\n----------------------------------------\n\nTITLE: Querying Generic Client Properties\nDESCRIPTION: This command retrieves a list of Generic Client Properties associated with a bound server using a starting Client Property ID within an element. It requires a valid 'ID' parameter indicating the starting point for the query.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_prop_cli.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmesh models prop cli-props-get <ID>\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Toctree Documentation\nDESCRIPTION: ReStructuredText toctree directives defining the document structure and navigation for migration guides from different versions\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\\n   :maxdepth: 1\\n   :caption: Transition from nRF Connect SDK v2.4.99-cs3\\n\\n   nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment\\n   nRF54H20_migration_2.7/migration_guide_2.4.99-cs3_to_2.7_application\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\\n   :maxdepth: 1\\n   :caption: Migrate from nRF Connect SDK v2.6.99-cs2\\n\\n   nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment\\n   nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2.7_application\n```\n\n----------------------------------------\n\nTITLE: Setting TFM CMake Options (CMake)\nDESCRIPTION: Sets properties for the `zephyr_property_target` target when building with Trusted Firmware-M (TFM). These options define the HAL Nordic path, Zephyr base, and non-secure storage configuration for TFM.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_BUILD_WITH_TFM)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS -DHAL_NORDIC_PATH=${ZEPHYR_HAL_NORDIC_MODULE_DIR}\n    APPEND PROPERTY TFM_CMAKE_OPTIONS -DZEPHYR_BASE=${ZEPHYR_BASE}\n    APPEND PROPERTY TFM_CMAKE_OPTIONS -DNRF_NS_STORAGE=${CONFIG_TFM_NRF_NS_STORAGE}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building and Running Native Simulator\nDESCRIPTION: Commands to build and run the MQTT sample in a native simulation environment provided by Zephyr. This approach is useful for development and testing without the need for actual hardware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/doc/description.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwest build -b native_sim samples/net/mqtt\nwest build -t run\n```\n\n----------------------------------------\n\nTITLE: Mapping Kconfig Options to Secure Boot Configurations for MCUboot\nDESCRIPTION: This snippet shows the correspondence between Kconfig options and Secure Boot configuration options for MCUboot and related components. It includes settings for boot modes, swap mechanisms, firmware updates, and secure boot features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/sysbuild_forced_options.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_CHIP_OTA_IMAGE_BUILD\nCONFIG_SINGLE_APPLICATION_SLOT = SB_CONFIG_MCUBOOT_MODE_SINGLE_APP\nCONFIG_BOOT_SWAP_USING_MOVE = SB_CONFIG_MCUBOOT_MODE_SWAP_WITHOUT_SCRATCH\nCONFIG_BOOT_SWAP_USING_SCRATCH = SB_CONFIG_MCUBOOT_MODE_SWAP_SCRATCH\nCONFIG_BOOT_UPGRADE_ONLY = SB_CONFIG_MCUBOOT_MODE_OVERWRITE_ONLY\nCONFIG_BOOT_DIRECT_XIP = SB_CONFIG_MCUBOOT_MODE_DIRECT_XIP\nCONFIG_BOOT_DIRECT_XIP_REVERT = SB_CONFIG_MCUBOOT_MODE_DIRECT_XIP_WITH_REVERT\nCONFIG_BOOT_FIRMWARE_LOADER = SB_CONFIG_MCUBOOT_MODE_FIRMWARE_UPDATER\nCONFIG_PCD_APP = SB_CONFIG_NETCORE_APP_UPDATE\nCONFIG_UPDATEABLE_IMAGE_NUMBER = SB_CONFIG_MCUBOOT_UPDATEABLE_IMAGES\nCONFIG_MCUBOOT_HW_DOWNGRADE_PREVENTION = SB_CONFIG_MCUBOOT_HARDWARE_DOWNGRADE_PREVENTION\nCONFIG_SECURE_BOOT_STORAGE\nCONFIG_SECURE_BOOT_CRYPTO\nCONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY = SB_CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY\nCONFIG_PM_OVERRIDE_EXTERNAL_DRIVER_CHECK = SB_CONFIG_PM_OVERRIDE_EXTERNAL_DRIVER_CHECK\nCONFIG_FW_INFO = SB_CONFIG_SECURE_BOOT_APPCORE\nCONFIG_NCS_MCUBOOT_IN_BUILD = SB_CONFIG_BOOTLOADER_MCUBOOT\nCONFIG_SECURE_BOOT = SB_CONFIG_SECURE_BOOT_APPCORE or SB_CONFIG_SECURE_BOOT_NETCORE\n```\n\n----------------------------------------\n\nTITLE: Installing J-Link Driver in Windows Command Prompt\nDESCRIPTION: Command to install SEGGER USB Driver for J-Link on Windows using Command Prompt with the InstUSBDriver parameter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJLink_Windows_V794e_x86_64.exe -InstUSBDriver=1\n```\n\n----------------------------------------\n\nTITLE: Building the Main Application with Recovery Firmware\nDESCRIPTION: Command to build the Device firmware update sample with the recovery firmware enabled using west build. This sets the SUIT_BUILD_RECOVERY sysbuild configuration option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/recovery/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp -- -DFILE_SUFFIX=bt -DSB_CONFIG_SUIT_BUILD_RECOVERY=y\n```\n\n----------------------------------------\n\nTITLE: Adding Application Source Files\nDESCRIPTION: Adds the main source file to the application target, specifying the entry point and primary application logic\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/udp/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Modem Trace AT Command\nDESCRIPTION: AT command used to set the trace level for modem tracing functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_features.rst#2025-04-21_snippet_1\n\nLANGUAGE: at\nCODE:\n```\nAT%XMODEMTRACE=1,2\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Mesh On Power Up Enumerator Restore\nDESCRIPTION: This code snippet describes the BT_MESH_ON_POWER_UP_RESTORE enumerator. When this is set, the Power Level is set to the last known Power Level (zero or otherwise).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_plvl_srv.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n\":c:enumerator:`BT_MESH_ON_POWER_UP_RESTORE` - The Power Level is set to the last known Power Level (zero or otherwise).\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Bluetooth Mesh Elements - C\nDESCRIPTION: Defines the elements for a Bluetooth Mesh network, including both Lightness and Light Control elements, ensuring they are on separate elements due to implementation constraints. The Light LC Server generates an error if on the same element.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic struct bt_mesh_elem elements[] = {\n   /* Lightness element */\n   BT_MESH_ELEM(1,\n       BT_MESH_MODEL_LIST(BT_MESH_MODEL_LIGHTNESS_SRV(&lightness_srv)),\n       BT_MESH_MODEL_NONE),\n   /* Light Control element */\n   BT_MESH_ELEM(2,\n       BT_MESH_MODEL_LIST(BT_MESH_MODEL_LIGHT_CTRL_SRV(&light_ctrl_srv)),\n       BT_MESH_MODEL_NONE),\n};\n```\n\n----------------------------------------\n\nTITLE: Building for Bluetooth Low Energy App Compatibility\nDESCRIPTION: This shell command compiles the sample in a configuration compatible with the Bluetooth Low Energy app. It requires disabling specific Bluetooth features: Privacy and High-duty directed advertising. The `west` tool and relevant Kconfig options are prerequisites.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hids_mouse/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b *board_target* -- -DCONFIG_BT_DIRECTED_ADVERTISING=n -DCONFIG_BT_PRIVACY=n\n```\n\n----------------------------------------\n\nTITLE: Registering DULT Identifier Read State Callbacks in C\nDESCRIPTION: Register callbacks for handling the identifier read state, including entering the state and retrieving the identifier payload.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/dult.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ndult_id_read_state_cb_register(&id_read_state_cb);\ndult_id_read_state_enter();\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with Cloud over CoAP Support\nDESCRIPTION: This example illustrates building the MoSh sample configured for CoAP cloud connectivity using -DEXTRA_CONF_FILE with the necessary configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_44\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=overlay-cloud_coap.conf\n```\n\n----------------------------------------\n\nTITLE: Building SUIT SMP Sample with Updated LED Blinks in Zephyr\nDESCRIPTION: Command to rebuild the sample with a configuration option to set the number of LED blinks to 2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/smp_transfer/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp -- -DCONFIG_N_BLINKS=2\n```\n\n----------------------------------------\n\nTITLE: Migrating from cbor_read_object() to zcbor_map_decode_bulk() (C)\nDESCRIPTION: This example demonstrates the transition from TinyCBOR's cbor_read_object() to zcbor's zcbor_map_decode_bulk() for processing CBOR map contents. The code shows how to define attribute structures for decoding CBOR data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_1.x_to_2.x.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint image;\nuint8_t img_data[SOME_DATA_LEN];\nsize_t data_len;\nconst struct cbor_attr_t off_attr[] = {\n    [0] = {\n        .attribute = \"image\",\n        .type = CborAttrUnsignedIntegerType,\n        .addr.uinteger = &req.image,\n        .nodefault = true\n    },\n    [1] = {\n        .attribute = \"data\",\n        .type = CborAttrByteStringType,\n        .addr.bytestring.data = img_data,\n        .addr.bytestring.len = &data_len,\n        .len = sizeof(img_data)\n    },\n    ...\n}\nrc = cbor_read_object(&ctxt->it, off_attr);\n...\n```\n\n----------------------------------------\n\nTITLE: Example of Running the MDS BLE Gateway Script\nDESCRIPTION: This example command showcases executing the script with a specific Segger chip ID and a COM port. Adjust these parameters based on the connected nRF52 device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/memfault/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\npython3 mds_ble_gateway.py --snr 68290047 --com /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Building wifi_shell_sample with nRF70 firmware patch DFU support for nRF5340 DK using West\nDESCRIPTION: West command for building the wifi_shell sample with DFU procedure for nRF70 Series firmware patch on nRF5340 DK with nRF7002 EK shield. It enables necessary configurations like external flash storage and the DFU feature.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf70_fw_patch_update.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwest build -p -b nrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf7002ek -DSB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE=y -DCONFIG_NRF_WIFI_FW_PATCH_DFU=y -Dshell_SNIPPET=nrf70-fw-patch-ext-flash\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for DECT Application in CMake\nDESCRIPTION: Adds the current directory to the private include directories for the 'app' target. This ensures that header files in the current directory can be found during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/dect/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Including CPU Load Source File in Zephyr Build\nDESCRIPTION: This CMake directive includes the 'cpu_load.c' source file in the Zephyr build process. It adds the CPU load measurement functionality to the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/debug/cpu_load/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources(cpu_load.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring the Flash Companion CMake Project\nDESCRIPTION: This CMake script sets up the flash_companion project by specifying the minimum CMake version, finding the Zephyr package, declaring the project name, and adding source files to the build. It requires the Zephyr SDK to be properly installed and configured in the environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/flash_companion/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(flash_companion)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Passkey Button Definitions\nDESCRIPTION: Example header file for defining button IDs used in passkey input handling including digits, confirmation, and deletion keys. Located in configuration/nrf52kbd_nrf52832/passkey_buttons_def.h\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/passkey.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// Example structure/format\n#define PASSKEY_DIGIT_KEYS {\n    /* Key IDs for digits 0-9 */\n}\n\n#define PASSKEY_CONFIRM_KEYS {\n    /* Key IDs for confirming input */\n}\n\n#define PASSKEY_DELETE_KEYS {\n    /* Key IDs for deleting digits */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Bluetooth Mesh\nDESCRIPTION: Specifies include directories for the application, including Bluetooth mesh subsystem headers from nRF Connect SDK and Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/light_hue/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh\n  ${ZEPHYR_BASE}/subsys/bluetooth\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardware Unique Key Sources in CMake\nDESCRIPTION: Configures library sources for hardware unique key implementation based on hardware availability. Determines whether to use Cracen KMU, CC3xx with ACL, or CC3xx with KMU implementations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/hw_unique_key/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nif (CONFIG_CRACEN_HW_PRESENT)\n  zephyr_library_sources(hw_unique_key_cracen_kmu.c)\nelse()\n  zephyr_library_sources(hw_unique_key_cc3xx.c)\n\n  if (DEFINED CONFIG_HAS_HW_NRF_ACL)\n    zephyr_library_sources(hw_unique_key_cc3xx_acl.c)\n  else()\n    zephyr_library_sources(hw_unique_key_cc3xx_kmu.c)\n  endif()\n\n  ncs_add_partition_manager_config(pm.yml.huk_cc3xx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Programming nRF5340 Application Core via Debug Probe\nDESCRIPTION: Command to program the application binary to the nRF5340 application core using an external debug probe. Requires J-Link serial number and uses jlink trait.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy91x/thingy91x_updating_fw_programmer.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --firmware <name_of_application_binary.hex> --serial-number <J-Link Serial number> --traits jlink --x-family nrf53 --core Application\n```\n\n----------------------------------------\n\nTITLE: Registering HMAC Test Case in C\nDESCRIPTION: Shows how to register a test case for HMAC cryptographic operation using ITEM_REGISTER macro with setup, execution, and teardown functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/crypto/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nITEM_REGISTER(test_case_hmac_data, test_case_t test_hmac) = {\n  .p_test_case_name = \"HMAC\",\n  .setup = hmac_setup,\n  .exec = exec_test_case_hmac,\n  .teardown = hmac_teardown,\n  .vector_type = TV_HMAC,\n  .vectors_start = __start_test_vector_hmac_data,\n  .vectors_stop = __stop_test_vector_hmac_data,\n};\n```\n\n----------------------------------------\n\nTITLE: Running plot_from_files.py to plot events from dataset\nDESCRIPTION: This shows how to use the `plot_from_files.py` script to plot events from a given dataset.  It takes the dataset name as a command-line argument and visualizes the profiled events. The visualization helps analyze performance characteristics and identify bottlenecks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/nrf_profiler.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython3 plot_from_files.py test1\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for nRF Connect SDK Project\nDESCRIPTION: This CMake script sets up the build environment for an nRF Connect SDK project. It specifies the minimum CMake version, finds the Zephyr package, defines the project, and configures source files and include directories for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/modules/mcuboot/direct_xip/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Setting Battery Level for DULT in C\nDESCRIPTION: Shows how to pass battery level information from the FMDN extension to the DULT module using the bt_fast_pair_fmdn_battery_level_set function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nbt_fast_pair_fmdn_battery_level_set(uint8_t battery_level);\n```\n\n----------------------------------------\n\nTITLE: Accessing Results from Edge Impulse Wrapper in C\nDESCRIPTION: Obtains the classification result, anomaly score, or timing data from the Edge Impulse wrapper. These functions require a successful wrapper initialization and prediction operation. Outputs are the results of the machine learning model execution, which are accessed via callbacks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/ei_wrapper.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nei_wrapper_get_next_classification_result();\nei_wrapper_get_anomaly();\nei_wrapper_get_timing();\n```\n\n----------------------------------------\n\nTITLE: Creating a Protocols table of contents in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents for protocols documentation using the reStructuredText format. It creates a hierarchical structure of documentation links to various wireless and connectivity protocols supported by Nordic Semiconductor's nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _protocols:\n\nProtocols\n#########\n\nThe following user guides describe the supported protocols.\nThey introduce you to concepts that are important to work with the protocol and guide you through developing your application.\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages:\n\n   protocols/amazon_sidewalk/index\n   protocols/bt/index\n   protocols/lte/index\n   protocols/dect/index\n   protocols/esb/index\n   protocols/gazell/index\n   protocols/matter/index\n   protocols/multiprotocol/index\n   protocols/nfc/index\n   protocols/thread/index\n   protocols/wifi/index\n   protocols/coexistence/index\n   protocols/zigbee/index\n```\n\n----------------------------------------\n\nTITLE: Generating TLS Credentials\nDESCRIPTION: OpenSSL commands to generate server and client certificates for TLS authentication. Creates RSA key pairs, self-signed certificates, and client certificates signed by the server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# Generate a new RSA key pair (private key and public key) and create a self-signed X.509 certificate for a server.\nopenssl req -newkey rsa:2048 -nodes -keyout server_private_key.pem -x509 -days 365 -out server_certificate.pem\n\n# Generate a new RSA private key for a client.\nopenssl genpkey -algorithm RSA -out client.key\n\n# Create a Certificate Signing Request (CSR) for the client using the generated private key.\nopenssl req -new -key client.key -out client.csr\n\n# Sign the client's CSR with the server's private key and certificate, creating a client certificate.\nopenssl x509 -req -in client.csr -CA server_certificate.pem -CAkey server_private_key.pem -CAcreateserial -out client.crt -days 365\n```\n\n----------------------------------------\n\nTITLE: Checking Nordic Top Manifest Version (Console)\nDESCRIPTION: Command to check the currently installed version of the Nordic top manifest.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_42\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device x-suit-manifest-info-get --known-class-id nRF54H20_nordic_top --traits jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot mode: Swap using scratch\nDESCRIPTION: Enables the dual-bank image swapping algorithm utilizing a scratch area, accommodating memories with varying erase block sizes. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_SWAP_USING_OFFSET\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_MCUBOOT_MODE_SWAP_SCRATCH`\"\n```\n\n----------------------------------------\n\nTITLE: Building LTE Sensor Gateway Sample (West)\nDESCRIPTION: This command builds the LTE Sensor Gateway sample for the nrf9160dk/nrf9160/ns board target, specifying the board version. This build command targets the main controller (nRF9160) after the board controller (nRF52840) is programmed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lte_ble_gateway/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"west build --board nrf9160dk@1.1.0/nrf9160/ns\"\n```\n\n----------------------------------------\n\nTITLE: Building Multi-image FLPR Application\nDESCRIPTION: Commands to build and flash a custom multi-image application for both cores with VPR bootstrapping disabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_flpr.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuflpr -- -DSB_CONFIG_VPR_LAUNCHER=n\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion for ML App Sensor Stub Generation in CMake\nDESCRIPTION: Adds the sensor_stub_gen.c source file to the 'app' target if CONFIG_ML_APP_SENSOR_STUB_GEN is defined. This allows for conditional compilation of the sensor stub generation functionality in the machine learning application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/common/src/modules/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_ML_APP_SENSOR_STUB_GEN\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sensor_stub_gen.c)\n```\n\n----------------------------------------\n\nTITLE: Checking Wi-Fi connection status\nDESCRIPTION: This command retrieves and displays the current status of the Wi-Fi connection.  It provides information such as the connection state, SSID, BSSID, and signal strength.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nwifi status\n```\n\n----------------------------------------\n\nTITLE: Configuring I2C Bus for nRF2220 in Devicetree\nDESCRIPTION: Sets up the I2C bus device node for controlling the nRF2220, including pin configurations and the nRF2220 TWI slave device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf2220.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\n&pinctrl {\n      i2c0_default: i2c0_default {\n            group1 {\n                  psels = <NRF_PSEL(TWIM_SDA, 0, 26)>,\n                          <NRF_PSEL(TWIM_SCL, 0, 27)>;\n            };\n      };\n\n      i2c0_sleep: i2c0_sleep {\n            group1 {\n                  psels = <NRF_PSEL(TWIM_SDA, 0, 26)>,\n                          <NRF_PSEL(TWIM_SCL, 0, 27)>;\n                  low-power-enable;\n            };\n      };\n};\n\nfem_twi: &i2c0 {\n      status = \"okay\";\n      compatible = \"nordic,nrf-twim\";\n      pinctrl-0 = <&i2c0_default>;\n      pinctrl-1 = <&i2c0_sleep>;\n      pinctrl-names = \"default\", \"sleep\";\n\n      nrf_radio_fem_twi: nrf2220_fem_twi@36 {\n            compatible = \"nordic,nrf2220-fem-twi\";\n            status = \"okay\";\n            reg = <0x36>;\n      };\n};\n```\n\n----------------------------------------\n\nTITLE: Console Output of AT Monitor Sample\nDESCRIPTION: Example console output showing the AT monitor sample execution flow. Demonstrates network registration process, signal quality monitoring, PSM status changes, and modem shutdown sequence.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/at_monitor/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nAT Monitor sample started\nSubscribing to notifications\nConnecting to network\nResuming link quality monitor for AT notifications\nWaiting for network\nLink quality: -61 dBm\nNetwork registration status: searching\nLink quality: -59 dBm\nNetwork registration status: home\nNetwork connection ready\nPausing link quality monitor for AT notifications\nReading PSM info...\n  PSM: disabled\nEnabling PSM\nReading PSM info...\n  PSM: enabled\nPeriodic TAU string: 00000110\nActive time string: 00100001\nModem response:\n+CEREG: 1,1\nOK\nShutting down modem\nNetwork registration status: no network\nBye\n```\n\n----------------------------------------\n\nTITLE: Testing UDP Socket Connection\nDESCRIPTION: Commands for testing UDP socket functionality using both XSENDTO and XCONNECT methods.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_3\n\nLANGUAGE: at-commands\nCODE:\n```\nAT#XSOCKET=1,2,0\nAT#XSENDTO=\"example.com\",1234,\"Test UDP\"\nAT#XRECVFROM=0\nAT#XSOCKET=0\n```\n\n----------------------------------------\n\nTITLE: Configuring AT Monitor CMake Build\nDESCRIPTION: Sets up the CMake build configuration for the AT monitor project. Specifies minimum CMake version, finds Zephyr package, and adds main.c source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/at_monitor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(at_monitor)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Downloading OpenThread Border Router Docker Image\nDESCRIPTION: Command to download the compatible version of the OpenThread Border Router docker image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull nrfconnect/otbr:fbde28a\n```\n\n----------------------------------------\n\nTITLE: Listing NCS Specific Commit History\nDESCRIPTION: This command fetches the commit history specific to the NCS SDK, showing all commits including those cherry-picked from upstream. This is crucial for understanding NCS specific changes and their impact on the overall codebase.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.9.0.rst#2025-04-21_snippet_7\n\nLANGUAGE: none\nCODE:\n```\ngit log --oneline manifest-rev ^45ef0d2\n```\n\n----------------------------------------\n\nTITLE: Adding sources based on CONFIG_BT_FAST_PAIR_FMDN_DULT_MOTION_DETECTOR\nDESCRIPTION: This conditional block adds the 'motion_detector.c' source file to the 'fmdn' library if the Kconfig option 'CONFIG_BT_FAST_PAIR_FMDN_DULT_MOTION_DETECTOR' is enabled. The source is added as a PRIVATE source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(CONFIG_BT_FAST_PAIR_FMDN_DULT_MOTION_DETECTOR)\n  target_sources(fmdn PRIVATE motion_detector.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: ESB Configuration Retransmit Delay Member\nDESCRIPTION: This snippet references the `esb_config.retransmit_delay` field, which specifies the delay between consecutive packet transmissions from the TX FIFO when the ESB driver is configured to never disable the transmission stage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/esb/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n\":c:member:`esb_config.retransmit_delay`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Partitions for TrustZone on nRF5340 - Console\nDESCRIPTION: This code snippet demonstrates the configuration of memory partitions for the TF-M environment on nRF5340 with a specific focus on addressing and size requirements. It sets up both secure and non-secure partitions to align with TrustZone requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_building.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ntfm_secure:\n  address: 0x4000\n  size: 0x4200\n  span: [mcuboot_pad, tfm]\nmcuboot_pad:\n  address: 0x4000\n  size: 0x200\ntfm:\n  address: 0x4200\n  size: 0x4000\ntfm_nonsecure:\n  address: 0x8200\n  size: 0x4000\n  span: [app]\napp:\n  address: 0x8200\n  size: 0x4000\n```\n\nLANGUAGE: console\nCODE:\n```\ntfm_secure:\n  address: 0x4000\n  size: 0x4000\n  span: [mcuboot_pad, tfm]\nmcuboot_pad:\n  address: 0x4000\n  size: 0x0\ntfm:\n  address: 0x4000\n  size: 0x4000\ntfm_nonsecure:\n  address: 0x8000\n  size: 0x4000\n  span: [app]\napp:\n  address: 0x8000\n  size: 0x4000\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Flash Image IPUC Creation and Release\nDESCRIPTION: This PlantUML sequence diagram illustrates the process of creating and releasing Flash Image IPUCs. It shows interactions between various components, including devicetree lookup, IPUC allocation, component ID decoding, and permission setting. The diagram also covers the release process, which includes flushing the IPUC data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/flash_image_ipuc_create.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant flash_ipuc\nparticipant devicetree\nparticipant suit_utils\nparticipant flash_ipuc_dev\nparticipant ssf\n\n--> flash_ipuc ++ : flash_image_ipuc_create(dfu_target_id, enc_info, comp_info)\nflash_ipuc -> devicetree ++ : << find dfu_target_id >>\nnote right\n  Iterates through static array, built based on device tree data:\n   - An entry for each partition with dfu_target_img_<n>: is created.\nend note\ndeactivate devicetree\n\nflash_ipuc -> ssf ++ : suit_ipuc_get_count()\ndeactivate ssf\nflash_ipuc -> flash_ipuc_dev ** : get_free_dev()\nnote right\n  Fails if CONFIG_FLASH_IPUC_COUNT IPUCs\n  are already allocated\nend note\n\nloop i < ipuc_count\n  flash_ipuc -> ssf ++ : suit_ipuc_get_info(i)\n  note right\n    Provides the associated component_id and manifest role\n  end note\n  deactivate ssf\n\n  flash_ipuc -> suit_utils ++ : suit_plat_decode_component_id(component_id)\n  note right\n    Decodes address and size of the memory region\n  end note\n  deactivate suit_utils\n\n  opt regions_match(dfu_target_id, address, size)\n    flash_ipuc -> flash_ipuc_dev ++ : << set address and size >>\n    deactivate flash_ipuc_dev\n    note right\n      The partition and the component ID must\n      describe exactly the same memory region.\n    end note\n\n    flash_ipuc -> flash_ipuc : read_access_check(ipuc[i].role)\n    note right\n      Root and application manifest components are readable on the CPUAPP.\n      Radio manifest components are readable on the CPURAD.\n    end note\n\n    flash_ipuc -> flash_ipuc_dev ++ : << set read permission >>\n    deactivate flash_ipuc_dev\n    flash_ipuc -> flash_ipuc_dev ++ : << set pending flag >>\n    deactivate flash_ipuc_dev\n    note right\n      IPUC initialization (discards memory contents) postponed\n      until the first write() API call.\n    end note\n\n  end\n\n  flash_ipuc -> flash_ipuc : i++\n  note right\n    Break the loop if component ID matches\n    addresses from the devicetree\n  end note\nend\n\ndeactivate flash_ipuc\n\n--> flash_ipuc ++: flash_image_ipuc_release(dfu_target_id)\nflash_ipuc -> flash_ipuc : << find existing ipuc based on dfu_target_id >>\nnote right\n  For consistency, only IPUC created with flash_image_ipuc_create(..)\n  API can be released.\nend note\n\nflash_ipuc -> flash_ipuc_dev ++: write(0)\nflash_ipuc_dev -> ssf ++ : suit_ipuc_write(last_chunk == true)\nnote right\n  Image IPUCs do not use flush APIs, thus are\n  automatically flushed by the release API.\nend note\ndeactivate ssf\ndeactivate flash_ipuc_dev\n\nflash_ipuc -> flash_ipuc_dev : release(ipuc_dev)\ndestroy flash_ipuc_dev\n\ndeactivate flash_ipuc\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Initializing Emergency Data Storage\nDESCRIPTION: This snippet describes the initialization of the EMDS library by calling the emds_init function and adding memory entries using emds_entry_add, ensuring the configuration is set correctly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/emds.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nemds_init(emds_store_cb_t);\n\n// Adding memory entries\nemds_entry_add(1);\nemds_entry_add(2);\n...\nemds_entry_add(n);\n```\n\n----------------------------------------\n\nTITLE: Configuring DFU Components in CMake for Nordic SDK\nDESCRIPTION: This CMake snippet conditionally adds subdirectories for DFU-related components based on configuration flags. It includes support for multi-image DFU, DFU target, and FMFU device functionality when the respective CONFIG flags are set.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dfu/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_DFU_MULTI_IMAGE dfu_multi_image)\nadd_subdirectory_ifdef(CONFIG_DFU_TARGET dfu_target)\nadd_subdirectory_ifdef(CONFIG_FMFU_FDEV fmfu_fdev)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Sources for Logging RPC\nDESCRIPTION: Conditionally adds source files to the Zephyr library based on logging RPC configuration options. Handles log forwarder, backend, and different history storage implementations including RAM and FCB (Flash Circular Buffer).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/logging/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_LOG_FORWARDER_RPC OR CONFIG_LOG_BACKEND_RPC)\n    zephyr_library()\n    zephyr_library_sources_ifdef(CONFIG_LOG_FORWARDER_RPC log_forwarder_rpc.c)\n    zephyr_library_sources_ifdef(CONFIG_LOG_BACKEND_RPC log_backend_rpc.c)\n    zephyr_library_sources_ifdef(CONFIG_LOG_BACKEND_RPC_HISTORY_STORAGE_RAM log_backend_rpc_history_ram.c)\n    zephyr_library_sources_ifdef(CONFIG_LOG_BACKEND_RPC_HISTORY_STORAGE_FCB log_backend_rpc_history_fcb.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Wi-Fi Application for Thingy:53 with nRF7002 Expansion Board\nDESCRIPTION: Command to build a Wi-Fi application for Thingy:53 using the nRF7002 Expansion Board. It sets the board target to thingy53/nrf5340/cpuapp and uses the nrf7002eb shield.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy53/building_thingy53.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b thingy53/nrf5340/cpuapp -- -DSHIELD=nrf7002eb\n```\n\n----------------------------------------\n\nTITLE: OpenSSL DTLS Client Connection (RSA)\nDESCRIPTION: OpenSSL command to perform a DTLS client connection using AES128-SHA256 cipher and RSA root certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nopenssl s_client -dtls -connect 192.0.2.1:4243 -cipher AES128-SHA256 -CAfile certs/rsa/root_cert.pem\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation using CMake\nDESCRIPTION: This CMake code snippet conditionally includes source files, include directories, and library dependencies based on the `CONFIG_APP_SMP_CLIENT_FOTA_EXTERNAL` configuration option. When enabled, it adds `client.c` as a source file, includes the `include` directory, and links the `MCUBOOT_BOOTUTIL` library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/fota_external/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_APP_SMP_CLIENT_FOTA_EXTERNAL)\n  zephyr_sources(${CMAKE_CURRENT_SOURCE_DIR}/client.c)\n  zephyr_include_directories(include)\n  zephyr_library_link_libraries(MCUBOOT_BOOTUTIL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Zephyr Clock Control API Functions\nDESCRIPTION: Core API functions from Zephyr's clock control system for managing clock domains. These functions allow requesting and releasing clock resources with specific parameters like accuracy and precision.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_architecture_clockman.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nnrf_clock_control_request()    // Request clock reservation with specified attributes\nnrf_clock_control_release()     // Release a reserved clock\nnrf_clock_control_cancel_or_release()  // Cancel a reservation request\n```\n\n----------------------------------------\n\nTITLE: Unlocking the Door Lock with PIN Code - Console\nDESCRIPTION: This command unlocks the door lock using the previously set PIN code, facilitating remote entry once authenticated. It specifies the node ID and timeout for interaction to ensure a smooth unlocking process during remote operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n./chip-tool doorlock unlock-door 10 1 --PINCode 12345678 --timedInteractionTimeoutMs 5000\n```\n\n----------------------------------------\n\nTITLE: DECT Startup Command Configuration\nDESCRIPTION: Examples of configuring startup commands to automatically establish DECT communication after device boot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_32\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ startup_cmd -t 5 --mem_slot 1 --cmd_str \"dect sett -t 1234\"\ndesh:~$ startup_cmd --mem_slot 2 --cmd_str \"dect mac beacon_start\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with Pip\nDESCRIPTION: This console command installs the necessary dependencies for the Python script required for the MDS BLE gateway using pip. Ensure a Python environment with pip is installed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/memfault/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npython3 -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Adding Receivers for DFU Transfer\nDESCRIPTION: This command adds target devices to the DFU transfer receivers list, specifying their element addresses and the corresponding image index.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfd receivers-add 0x0004,0;0x0005,0\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for RNG Project in nRF Connect SDK\nDESCRIPTION: This CMake script configures the build environment for an RNG project using the nRF Connect SDK. It sets the minimum CMake version to 3.20.0, locates the Zephyr package, defines the project name as 'rng', and adds 'src/main.c' as the main source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/rng/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(rng)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Connecting to nRF Cloud in C\nDESCRIPTION: Establishes a connection to nRF Cloud. The function may block or return immediately depending on configuration. It triggers a series of events and actions in the system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nnrf_cloud_connect();\n```\n\n----------------------------------------\n\nTITLE: Get xyL State\nDESCRIPTION: This shell command retrieves the Light xyL state value from the bound server. It allows the client to query the current lightness, x, and y values of the server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl get\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 EK with nRF5340 DK\nDESCRIPTION: Command line instruction for building the Wi-Fi Radio test sample for the nRF7002 EK with nRF5340 DK, using the SHIELD option to specify the nRF7002ek shield.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf7002ek\n```\n\n----------------------------------------\n\nTITLE: Scheduling Events at Specific Dates with bt_mesh_time_srv_mktime in C\nDESCRIPTION: This snippet demonstrates how to schedule an event (fireworks) at a specific date and time (New Year's Eve midnight) using the Time Server's mktime function which converts human-readable time to device uptime.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/time_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid schedule_fireworks(void)\n{\n   struct tm new_years_eve = {\n      .tm_year = 2021 - 1900, /* struct tm measures years since 1900 */\n      /* January 1st: */\n      .tm_mon = 0,\n      .tm_mday = 1,\n      /* Midnight: */\n      .tm_hour = 0,\n      .tm_min = 0,\n      .tm_sec = 0,\n   };\n\n   int64_t uptime = bt_mesh_time_srv_mktime(&time_srv, &new_years_eve);\n   if (uptime < 0) {\n      /* Time Server does not know */\n      return;\n   }\n\n   k_timer_start(&start_fireworks, uptime - k_uptime_get(), 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FLIH Handler in C\nDESCRIPTION: C implementation of First Level Interrupt Handler (FLIH) for timer interrupt\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\npsa_flih_result_t tfm_timer1_irq_flih(void)\n{\n        /* Application specific handling */\n\n        if (condition) {\n                return PSA_FLIH_SIGNAL;\n        } else {\n                return PSA_FLIH_NO_SIGNAL;\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking OTP Region Status\nDESCRIPTION: This console command is used to check the status of the OTP region, indicating whether it's open for reading and writing (R/W) and whether specific parameters like MAC addresses and calibration values are already programmed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n\"wifi_radio_ficr_prog otp_get_status\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Temperature Sensor Project with nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build configuration for a temperature sensor project using the nRF Connect SDK. It specifies the minimum CMake version, finds the Zephyr package, enforces the use of sysbuild for multi-image applications, and defines the project name and source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/temperature_sensor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n\nproject(temperature_sensor)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Building Update Package with Applications\nDESCRIPTION: Compiles the firmware with options to extract payloads, configuring cache size and directories for the Nordic update package, readying for subsequent deployment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_55\n\nLANGUAGE: console\nCODE:\n```\nwest build  -b nrf54h20dk/nrf54h20/cpuapp -- \\\n   -DSB_EXTRA_CONF_FILE=\\\"suit_mpi.conf\\\" \\\n   -Dab_CONFIG_N_BLINKS=5 \\\n   -DSB_CONFIG_SUIT_ENVELOPE_NORDIC_TOP_EXTRACT_PAYLOADS_TO_CACHE=y \\\n   -DSUIT_DFU_CACHE_PARTITION_1_EB_SIZE=128 \\\n   -DSB_CONFIG_SUIT_ENVELOPE_NORDIC_TOP_DIRECTORY=\\\"\\\"<path-to-the-nordic-update-package>\\\"\\\"\n```\n\n----------------------------------------\n\nTITLE: Console Output for Successful Wi-Fi Connection\nDESCRIPTION: Console output showing a successful Wi-Fi connection establishment after provisioning is complete.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/provisioning/ble/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwpa_supp: wlan0: CTRL-EVENT-CONNECTED - Connection to <AP MAC Address> completed [id=0 id_str=]\n```\n\n----------------------------------------\n\nTITLE: Including Configuration Headers\nDESCRIPTION: Adds the configuration directory to the include search path for the Zephyr library. Allows access to project-specific configuration headers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tnep_poller/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_include_directories(configuration)\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Library Linking\nDESCRIPTION: Links optional libraries based on specific configuration options for SUIT stream, sink selector, and other utility interfaces\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/app/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STREAM suit_stream_sinks_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STREAM suit_stream_sources_interface)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_platform_interface)\n```\n\n----------------------------------------\n\nTITLE: Configuring ChaCha20-Poly1305 Project with CMake\nDESCRIPTION: This CMake snippet sets up a project for ChaCha20-Poly1305 encryption using the nRF Connect SDK and Zephyr RTOS. It specifies the minimum CMake version, finds the Zephyr package, and adds the main source file to the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/chachapoly/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(chacha_poly)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Reading SoC Temperature Command\nDESCRIPTION: Command that makes the CMD device print the current SoC temperature in the format <.%02>.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_52\n\nLANGUAGE: plaintext\nCODE:\n```\ncustom lgettemp\n```\n\n----------------------------------------\n\nTITLE: Adding Kconfig Documentation Set in CMake\nDESCRIPTION: Adds the Kconfig documentation set to the build process without specifying a version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_docset(kconfig \"\")\n```\n\n----------------------------------------\n\nTITLE: Documenting a C Function in nRF Connect SDK\nDESCRIPTION: Example of documenting a C function that requests a random number. It shows the proper placement of the documentation block and how to document parameters and return values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/styleguide.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n/**\n *                     144.\n * @param[out] olen    The length of the random number provided.\n *\n * @retval 0        If the operation was successful.\n * @retval -EINVAL  If @p len is invalid. Currently, @p len must be 144.\n */\nint spm_request_random_number(uint8_t *output, size_t len, size_t *olen);\n```\n\n----------------------------------------\n\nTITLE: Info Module Constants and Macros\nDESCRIPTION: Key constants and macros used in the Info module for configuration channel handling and board name processing\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/info.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGEN_CONFIG_EVENT_HANDLERS\nBOARD_NAME_SEPARATOR\nCONFIG_BOARD\n```\n\n----------------------------------------\n\nTITLE: Velocity Information Update Command\nDESCRIPTION: AT command to set velocity information including heading, horizontal/vertical speed and uncertainties.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_6\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIER=\"velocity\",<heading>,<speed_h>,<speed_v>,<uncertainty_h>,<uncertainty_v>\n```\n\n----------------------------------------\n\nTITLE: Conditional Network Interface Source Addition\nDESCRIPTION: Conditionally adds network interface source file based on CONFIG_OPENTHREAD_RPC_NET_IF configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/rpc/client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_OPENTHREAD_RPC_NET_IF ot_rpc_if.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Reset Reason Test Project in CMake\nDESCRIPTION: Sets up a CMake project for testing reset reason functionality. It requires Zephyr, sets the project name, and includes relevant test source files from the Zephyr codebase's hwinfo reset cause test directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/boards/nrf/hwinfo/reset_cause/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(reset_reason)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/boards/nrf/hwinfo/reset_cause/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Enforce Sysbuild for Multi-Image Application\nDESCRIPTION: This conditional statement checks if the `SYSBUILD` variable is defined. If it's not, it issues a fatal error message, indicating that the application is intended to be built as a multi-image application using sysbuild. This ensures that all necessary images are prepared during the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_stm/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Source File to CMake Application Target\nDESCRIPTION: Includes the 'trigger.c' source file from the current source directory into the application compilation process using target_sources() CMake command\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/modules/trigger/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/trigger.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Watchdog Device using DeviceTree\nDESCRIPTION: DeviceTree alias configuration required to specify which watchdog instance will be used by the module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/watchdog.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\naliases {\n    watchdog0 = &<watchdog_instance>;\n};\n```\n\n----------------------------------------\n\nTITLE: Building WPA Supplicant Debug Logs with CMake\nDESCRIPTION: Command to build the Wi-Fi shell sample with WPA supplicant debugging enabled using CMake build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/debugging.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncmake -GNinja -Bbuild -DBOARD=nrf7002dk/nrf5340/cpuapp -Dnrf_wifi_shell_SNIPPET=\"wpa-supplicant-debug\" samples/wifi/shell\nninja -C build\n```\n\n----------------------------------------\n\nTITLE: Increasing ECC Thread Stack Size for LE Secure Connections\nDESCRIPTION: The Bluetooth ECC thread used during pairing with LE Secure Connections might overflow when an interrupt is triggered. The workaround sets CONFIG_BT_HCI_ECC_STACK_SIZE to 1140 to increase the stack size.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nCONFIG_BT_HCI_ECC_STACK_SIZE=1140\n```\n\n----------------------------------------\n\nTITLE: Listing Upstream Zephyr Commits in nRF Connect SDK\nDESCRIPTION: Git command to list upstream Zephyr commits incorporated into nRF Connect SDK since the previous release.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline 71ef669ea4 ^45ef0d2\n```\n\n----------------------------------------\n\nTITLE: Building Test Firmware with Health Check Failure\nDESCRIPTION: Command for building a test firmware version that emulates health check failure for testing the degraded mode functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -- \\\n   -DSB_EXTRA_CONF_FILE=\"suit_mpi.conf\" \\\n   -Dab_CONFIG_N_BLINKS=3 \\\n   -Dab_CONFIG_EMULATE_APP_HEALTH_CHECK_FAILURE=y\n```\n\n----------------------------------------\n\nTITLE: Defining mbedTLS Zephyr Library Sources\nDESCRIPTION: Defines and includes various Zephyr-specific source files related to mbedTLS, guarded by different configuration checks like CONFIG_MBEDTLS and CONFIG_USERSPACE. This ensures modular inclusion based on project needs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/zephyr/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED src_zephyr)\n  zephyr_library_named(mbedtls_zephyr)\n\n  zephyr_library_sources(${src_zephyr})\n\n  zephyr_library_compile_definitions(\n    $<TARGET_PROPERTY:${mbedcrypto_target},INTERFACE_COMPILE_DEFINITIONS>\n  )\n\n  if((NOT CONFIG_MBEDTLS) AND CONFIG_USERSPACE)\n    zephyr_library_sources(mbedtls_partition.c)\n  endif()\n\n  zephyr_library_app_memory(k_mbedtls_partition)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking SRP Client Registration Status\nDESCRIPTION: Displays the current status of the SRP client host registration, showing whether the host and its address have been successfully registered with the SRP server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_30\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot srp client host\nname:\"my-host\", state:Registered, addrs:[fdde:ad00:beef:0:e0fc:dc28:1d12:8c2]\nDone\n```\n\n----------------------------------------\n\nTITLE: Setting Up UART Elementary Project - CMake\nDESCRIPTION: This snippet defines the main project for UART elementary testing, linking the primary source file with the app target. It establishes the source file that contains the main functionality of the unit tests focusing on UART drivers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/uart/uart_elementary/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(uart_elementary)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/tests/drivers/uart/uart_elementary/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Field Sensor Initialization in NFC Tag Device - C\nDESCRIPTION: This function initializes the field sensor in the NFC Tag device. It checks if the NFC sensing is already enabled and initiates sensing if disabled. This is crucial for making the device responsive to NFC fields in order to wake it from System OFF mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/system_off/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid field_sens_start(void)\n{\n\tint key = irq_lock();\n\t/* First check if NFCT is not already sensing. */\n\tif ((NRF_NFCT->NFCTAGSTATE & NFCT_NFCTAGSTATE_NFCTAGSTATE_Msk)\n\t\t\t== NFCT_NFCTAGSTATE_NFCTAGSTATE_Disabled) {\n\t\tNRF_NFCT->TASKS_SENSE = 1;\n\t}\n\tirq_unlock(key);\n}\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 DK\nDESCRIPTION: Command to build the Wi-Fi shell sample for nRF7002 DK with nRF5340 CPU.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Updating DULT Sound State in C\nDESCRIPTION: Update the internal sound state of the DULT subsystem, specifying if sound is active and the source of the state change.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/dult.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ndult_sound_state_update(&sound_state_param);\n```\n\n----------------------------------------\n\nTITLE: Upload Confirmation Output\nDESCRIPTION: Expected output from the UART after successfully uploading the SUIT envelope to the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[00:00:07] ###### 100% [COM7] Uploaded\n```\n\n----------------------------------------\n\nTITLE: Building MoSh with Basic LwM2M Support\nDESCRIPTION: Command for building the MoSh sample with basic LwM2M configuration, specifying the board target and setting a pre-shared key for authentication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=overlay-lwm2m.conf -DCONFIG_MOSH_LWM2M_PSK=\\\"000102030405060708090a0b0c0d0e0f\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysbuild in Twister YAML\nDESCRIPTION: YAML configuration to enable sysbuild for Twister test cases.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_sysbuild.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsysbuild: true\n```\n\n----------------------------------------\n\nTITLE: Stopping and Starting fwupd Daemon on Ubuntu\nDESCRIPTION: This snippet presents commands to manage the fwupd daemon on Ubuntu, which is necessary for stopping firmware updates that can conflict with the HID configurator script's operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsudo systemctl stop fwupd\n```\n\nLANGUAGE: Python\nCODE:\n```\nsudo systemctl start fwupd\n```\n\nLANGUAGE: Python\nCODE:\n```\nsystemctl status fwupd\n```\n\n----------------------------------------\n\nTITLE: Setting Property Value on User Property Server (With Acknowledgment)\nDESCRIPTION: This command sets a property value on the User Property Server and awaits a confirmation response. It's mainly used for operations that require confirmation of changes. It requires a 'ID' and 'HexStrVal'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_prop_cli.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmesh models prop user-prop-set <ID> <HexStrVal>\n```\n\n----------------------------------------\n\nTITLE: A-GNSS Handler Callback Function in C\nDESCRIPTION: The agps_handler_t callback function is used to send the decoded SUPL data to the GNSS module. This function handles the A-GNSS data that is transferred.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/supl_os_client.rst#2025-04-21_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n\"The decoded SUPL data is sent to the GNSS module using the A-GNSS handler (:c:func:`agps_handler_t`) callback function.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TF-M Secure Partition Manager Backend in Kconfig\nDESCRIPTION: These Kconfig options allow configuring the Secure Partition Manager backend for TF-M, affecting isolation levels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_building.rst#2025-04-21_snippet_4\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_TFM_SFN=y\n# OR\nCONFIG_TFM_IPC=y\n```\n\n----------------------------------------\n\nTITLE: Getting All Light CTL Client Instances - Command Syntax\nDESCRIPTION: This command prints all instances of the Light CTL Client model on the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl instance get-all\n```\n\n----------------------------------------\n\nTITLE: Triggering Firmware Update Installation\nDESCRIPTION: Initiates the installation of uploaded firmware packages, progressing the device to run the new image sets, and confirming successful trigger with log messages on the serial interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_53\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit install --serial-port COM7\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion with CONFIG_BT_GATT_DM\nDESCRIPTION: This CMake snippet includes the `gatt_dm.c` source file in the build process only if the `CONFIG_BT_GATT_DM` configuration option is defined. `zephyr_sources_ifdef` is a Zephyr-specific macro for conditional source inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_sources_ifdef(CONFIG_BT_GATT_DM gatt_dm.c)\"\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project.  It ensures that the project is built with a compatible version of CMake, which is 3.20.0 or higher. This is crucial for using specific features and commands available in that version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/grtc_idle/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Extending Autoconf for Location Library\nDESCRIPTION: Extends the autoconf.h configuration for the nRF location library by adding conditional compilation options based on test configuration, particularly for A-GNSS testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/location/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Extend autoconf.h for nrf/lib/location\n# Allows KConfig options to be enabled for nrf/lib/location without affecting CMake\n# ..__nrf__lib__location is the name assigned to nrf/lib/location by the zephyr_library() macro in\n# zephyr/cmake/modules/extensions.cmake\n\nif (CONFIG_LOCATION_TEST_AGNSS)\n\ntarget_compile_options(\n\t..__nrf__lib__location PRIVATE\n\t\"SHELL: -imacros ${PROJECT_SOURCE_DIR}/location_lib_autoconf_ext.h\"\n\t\"SHELL: -imacros ${PROJECT_SOURCE_DIR}/location_lib_autoconf_ext_agnss.h\"\n)\nelse()\n\ntarget_compile_options(\n\t..__nrf__lib__location PRIVATE\n\t\"SHELL: -imacros ${PROJECT_SOURCE_DIR}/location_lib_autoconf_ext.h\"\n)\nendif()\n\n# Add definitions also for test application.\n# A-GNSS definitions do not distract when using tests without A-GNSS.\ntarget_compile_options(\n\tapp PRIVATE\n\t\"SHELL: -imacros ${PROJECT_SOURCE_DIR}/location_lib_autoconf_ext.h\"\n\t\"SHELL: -imacros ${PROJECT_SOURCE_DIR}/location_lib_autoconf_ext_agnss.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Partition Report via Command Line in nRF Connect SDK\nDESCRIPTION: Command to generate a partition manager report that displays the addresses and sizes of each partition in ASCII format. This is useful for analyzing memory layout after building an application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_partitioning.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -t partition_manager_report\n```\n\n----------------------------------------\n\nTITLE: Creating a SLIP interface\nDESCRIPTION: Generic command to create a SLIP interface using tunslip6 with parameters for serial port and IPv6 prefix.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n./tunslip6 -s <serial_port> -T <IPv6_prefix>\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with LwM2M Carrier Library Support\nDESCRIPTION: This snippet builds the MoSh sample with support for the LwM2M carrier library by adding the necessary configuration file using -DEXTRA_CONF_FILE option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_41\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=overlay-carrier.conf\n```\n\n----------------------------------------\n\nTITLE: Pinging a specific IP address\nDESCRIPTION: This is an example ping command to ping the IP address 192.168.1.1, verifying basic network connectivity. The output shows the ICMP responses.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nnet ping 192.168.1.1\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth Throughput Source\nDESCRIPTION: This snippet includes the Bluetooth Throughput source file if the CONFIG_BT_THROUGHPUT option is set. It is used for performance testing over Bluetooth connections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_THROUGHPUT throughput.c)\n```\n\n----------------------------------------\n\nTITLE: Installing nRF Util Device Command\nDESCRIPTION: Command to install nRF Util device command version 2.4.0 with force flag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil install device=2.4.0 --force\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Network Core Images with Kconfig.sysbuild\nDESCRIPTION: A Kconfig fragment file that defines options for selecting network core images for nRF5340 SoC. This example shows how to create a choice menu for network core images with a custom 'ABC' image option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/sysbuild_images.rst#2025-04-21_snippet_2\n\nLANGUAGE: kconfig\nCODE:\n```\nmenu \"Network core configuration\"\n    depends on SUPPORT_NETCORE\n\nconfig SUPPORT_NETCORE_ABC\n    bool\n    default y\n\nchoice NETCORE\n    prompt \"Netcore image\"\n    depends on SUPPORT_NETCORE && !EXTERNAL_CONFIGURED_NETCORE\n\nconfig NETCORE_ABC\n    bool \"ABC\"\n    help\n      Use ABC image as the network core image.\n\nendchoice\n\nif !NETCORE_NONE\n\nconfig NETCORE_IMAGE_NAME\n    default \"abc\" if NETCORE_ABC\n\nconfig NETCORE_IMAGE_PATH\n    default \"${ZEPHYR_MY_MODULE_MODULE_DIR}/<image_path>\" if NETCORE_ABC\n\nendif # !NETCORE_NONE\n\nendmenu\n\nsource \"${ZEPHYR_BASE}/share/sysbuild/Kconfig\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Bucket Policy for Public Read Access\nDESCRIPTION: This JSON snippet defines a bucket policy that allows public read access to all objects within the specified S3 bucket. It grants the s3:GetObject permission to any principal (*) for all objects in the bucket. This policy is very permissive and recommended only for testing purposes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/aws_s3_bucket.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::*bucket_name*/*\"\n        }\n     ]\n}\n```\n\n----------------------------------------\n\nTITLE: Globbing Source Files\nDESCRIPTION: This snippet uses the `FILE(GLOB)` command to find all C source files in the `src` directory.  The found files are stored in the `app_sources` variable for later use.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/throughput/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"FILE(GLOB app_sources src/*.c)\"\n```\n\n----------------------------------------\n\nTITLE: Generating Unity Test Runner in CMake\nDESCRIPTION: Generates a Unity test runner file for a given test file path. The function creates a runner for a test case using the Unity auto generator script.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/unity/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(test_runner_generate test_file_path)\n  get_property(CMOCK_DIR GLOBAL PROPERTY CMOCK_DIR)\n  set(UNITY_PRODUCTS_DIR ${APPLICATION_BINARY_DIR}/runner)\n  file(MAKE_DIRECTORY \"${UNITY_PRODUCTS_DIR}\")\n  get_filename_component(test_file_name \"${test_file_path}\" NAME)\n  set(output_file \"${UNITY_PRODUCTS_DIR}/runner_${test_file_name}\")\n  configure_unity_conf_file(\"${file_name}\" \"\" \"\" conf_file)\n\n  add_custom_command(\n    COMMAND ${RUBY_EXECUTABLE}\n    ${CMOCK_DIR}/vendor/unity/auto/generate_test_runner.rb\n    ${conf_file}\n    ${test_file_path} ${output_file}\n    DEPENDS ${test_file_path}\n    OUTPUT ${output_file}\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n  )\n\n  target_sources(app PRIVATE ${output_file})\n\n  message(STATUS \"Generating test runner ${output_file}\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Including AT Parameters Header File in C\nDESCRIPTION: This snippet shows how to include the header file for the AT parameters module in a C program. The header file contains the necessary declarations for using the module's functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_params.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n| Header file: :file:`include/modem/at_params.h`\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings for NRF Cloud AT Commands\nDESCRIPTION: Sets up the build configuration for NRF Cloud AT commands by adding include directories and source files to the app target. Includes copyright notice and Nordic Semiconductor license reference.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/src/nrfcloud/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2023 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\nzephyr_include_directories(.)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_at_nrfcloud.c)\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Scan Sample Output: Device Scan Results\nDESCRIPTION: Console output showing device scan results, including SSID, channel, RSSI, security, and BSSID information for detected access points.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/scan/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nScan requested\nNum  | SSID                             (len) | Chan | RSSI | Security | BSSID\n1    | abcdef                           6     | 1    | -37  | WPA/WPA2 | aa:aa:aa:aa:aa:aa\n2    | pqrst                            5     | 1    | -65  | WPA/WPA2 | xx:xx:xx:xx:xx:xx\n3    | AZBYCXD                          7     | 1    | -41  | WPA/WPA2 | yy:yy:yy:yy:yy:yy\nScan request done\n```\n\n----------------------------------------\n\nTITLE: Updated MRAM Partition Definition in Device Tree\nDESCRIPTION: Example of new MRAM partition definition style using nordic,owned-partitions binding under the mram1x node. Shows simplified partition configuration with separate read-execute and read-write sections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2.7_application.rst#2025-04-21_snippet_3\n\nLANGUAGE: devicetree\nCODE:\n```\n&mram1x {\n   cpuapp_rx_partitions: cpuapp-rx-partitions {\n      compatible = \"nordic,owned-partitions\", \"fixed-partitions\";\n      perm-read;\n      perm-execute;\n      perm-secure;\n      #address-cells = <1>;\n      #size-cells = <1>;\n      cpuapp_slot0_partition: partition@a6000 {\n         reg = <0xa6000 DT_SIZE_K(296)>;\n      };\n      cpuppr_code_partition: partition@f0000 {\n         reg = <0xf0000 DT_SIZE_K(64)>;\n      };\n   };\n   cpuapp_rw_partitions: cpuapp-rw-partitions {\n      compatible = \"nordic,owned-partitions\", \"fixed-partitions\";\n      perm-read;\n      perm-write;\n      perm-secure;\n      #address-cells = <1>;\n      #size-cells = <1>;\n      dfu_partition: partition@100000 {\n         reg = < 0x100000 DT_SIZE_K(892) >;\n      };\n      storage_partition: partition@1df000 {\n         reg = < 0x1df000 DT_SIZE_K(24) >;\n      };\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Framing - Shell Command\nDESCRIPTION: Shell command for setting the framing mode (unframed/framed) for a Bluetooth LE Audio broadcast subgroup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nnac framing unframed 0 0\n```\n\n----------------------------------------\n\nTITLE: Setting Mode of Light Lightness Control Server Unacknowledged - C\nDESCRIPTION: Sets the current Mode of the Light Lightness Control Server without requiring an acknowledgment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl mode-set-unack <Enable(off, on)>\n\tSet the Light Lightness Control Server's current Mode without requesting a response.\n\n\t* ``Enable`` - Mode to set.\n```\n\n----------------------------------------\n\nTITLE: Configuring SoftDevice Controller options in Kconfig\nDESCRIPTION: Sets various Kconfig options for the SoftDevice Controller to optimize performance for combined BIS and CIS operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_combined_bis_and_cis/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_BT_CTLR_SDC_CENTRAL_ACL_EVENT_SPACING_DEFAULT=10\nCONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT=2.5\nCONFIG_BT_CTLR_SDC_BIG_RESERVED_TIME_US=5000\nCONFIG_BT_CTLR_SDC_CIG_RESERVED_TIME_US=5000\n```\n\n----------------------------------------\n\nTITLE: Estimating Store Time for EMDS\nDESCRIPTION: This snippet describes the usage of the emds_store_time_get function to estimate the worst-case time required for storing data entries. It requires previous configurations to be set via Kconfig options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/emds.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nuint32_t estimated_time = emds_store_time_get();\n```\n\n----------------------------------------\n\nTITLE: Zephyr NCS Specific Commits Log Command\nDESCRIPTION: This snippet shows a git command to retrieve a list of nRF Connect SDK (NCS) specific commits, including cherry-picked commits from upstream Zephyr. This is essential for understanding the specific modifications and additions made to the Zephyr project within the nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n   git log --oneline manifest-rev ^a768a05e62\n```\n\n----------------------------------------\n\nTITLE: Script Usage with Full Arguments\nDESCRIPTION: Example command demonstrating how to use the Fast Pair provision script with full argument names for generating a hexadecimal file\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/nrf_provision/fast_pair/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 fp_provision_cli.py --out_file=provision.hex --address=0x50000 --model_id=\"0xFFFFFF\" --anti_spoofing_key=\"AbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbA=\"\n```\n\n----------------------------------------\n\nTITLE: Console Output for Network Core Update Confirmation\nDESCRIPTION: This code snippet reflects the console output after the network core update is initiated. It is essential for monitoring the bootloader's acknowledgment of the successful update process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/netboot/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nI: Starting network core update\nI: Turned on network core\nI: Turned off network core\nI: Done updating network core\nI: Bootloader chainload address offset: 0xc000\nI: Jumping to the first image slot\n*** Booting Zephyr OS build v2.7.99-ncs1-2195-g186cf4539e5a  ***\n```\n\n----------------------------------------\n\nTITLE: Creating a P-GPS Request for nRF Cloud in C\nDESCRIPTION: This function creates a P-GPS request specifically designed for nRF Cloud, enabling the use of location-based functionalities. It serves as a critical component for handling GPS requests within the cloud infrastructure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n:c:func:`nrf_cloud_obj_pgps_request_create` function that creates a P-GPS request for nRF Cloud.\n```\n\n----------------------------------------\n\nTITLE: Configuration conflict check\nDESCRIPTION: This snippet checks if both `CONFIG_CLI_SAMPLE_MULTIPROTOCOL` and `CONFIG_OPENTHREAD_BLE_TCAT` are enabled. If both are enabled, it generates a fatal error message indicating that these configurations are incompatible. This prevents the build from proceeding with an invalid configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_CLI_SAMPLE_MULTIPROTOCOL AND CONFIG_OPENTHREAD_BLE_TCAT)\n        message( FATAL_ERROR \"Multiprotocol support and TCAT functionality are not compatible.\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: nRF5340 Audio Device Configuration - JSON\nDESCRIPTION: Configuration file that specifies device settings including serial numbers, device types (headset/gateway), and channel assignments for headsets\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/building.rst#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"nrf5340_audio_dk_snr\": \"nRF5340_Audio_DK_snr\",\n    \"nrf5340_audio_dk_dev\": \"[headset|gateway]\",\n    \"channel\": \"[left|right]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Booting Process for Zephyr OS\nDESCRIPTION: This snippet illustrates the console output of the bootloader attempting to boot firmware images from different slots. It showcases the validation process, including key invalidation and signature checks that determine whether to proceed with a specific firmware image or fall back to another one.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_signature_keys.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build ...  ***\\nAttempting to boot slot 0.\\nAttempting to boot from address 0x9000.\\nKey 0 has been invalidated, try next.\\nKey 1 has been invalidated, try next.\\nVerifying signature against key 2.\\nHash: 0x19...73\\nPublic key didn't match, try next.\\nFailed to validate signature.\\nFailed to validate, permanently invalidating!\\nAttempting to boot slot 1.\\nAttempting to boot from address 0x84800.\\nKey 0 has been invalidated, try next.\\nKey 1 has been invalidated, try next.\\nVerifying signature against key 2.\\nHash: 0x19...73\\nInvalidating key 0.\\nInvalidating key 1.\\nFirmware signature verified.\\nFirmware version 2\\n*** Booting Zephyr OS build ...  ***\\n...\n```\n\n----------------------------------------\n\nTITLE: Network Reachability Testing with Ping\nDESCRIPTION: The ping command in Modem Shell allows testing of host reachability over an IP network. It can target URLs or IP addresses, supporting IPv4 and IPv6, and allows specifying payload sizes and intervals. Suitable for basic connectivity tests with output reflecting round-trip times.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nping -d ping.server.url\n```\n\nLANGUAGE: console\nCODE:\n```\nping -d 1a2b:1a2b:1a2b:1a2b::1 -6 -l 500 -i 1000\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This snippet adds multiple subdirectories to the CMake project, structuring the project into different components. Each add_subdirectory call specifies a separate component that will be included in the build system. The presence of these calls suggests modularization into sinks, sources, filters, and streamer selector components. Dependencies might include the presence of CMakeLists.txt files in each specified directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/stream/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(stream_sinks)\nadd_subdirectory(stream_sources)\nadd_subdirectory(stream_filters)\nadd_subdirectory(address_streamer_selector)\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr Library for Modem Sources\nDESCRIPTION: Creates a Zephyr library and adds modem information source files to the compilation process. Includes modem_info.c and modem_info_params.c as library sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/modem_info/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(modem_info.c)\nzephyr_library_sources(modem_info_params.c)\n```\n\n----------------------------------------\n\nTITLE: Creating Flash IPUC Driver by Device Tree Partition in C\nDESCRIPTION: Creates a flash IPUC driver instance based on the device tree partition number, supporting both read-write and read-only modes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nflash_image_ipuc_create()\n```\n\n----------------------------------------\n\nTITLE: Applying Minimal Configuration for NSIB Bootloader in nRF Connect SDK\nDESCRIPTION: Shows how to apply a minimal configuration to the NSIB bootloader to minimize flash memory usage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 zephyr/samples/hello_world -- \\\n-DSB_CONFIG_SECURE_BOOT_APPCORE=y \\\n-Db0_FILE_SUFFIX=minimal\n```\n\n----------------------------------------\n\nTITLE: Disable External Driver Check Override\nDESCRIPTION: This Kconfig option, when disabled, prevents the override of the external flash driver check. Disabling it is useful if the application has stopped using external flash for the secondary slot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_11\n\nLANGUAGE: Kconfig\nCODE:\n```\n:kconfig:option:`SB_CONFIG_PM_OVERRIDE_EXTERNAL_DRIVER_CHECK` to ``n``\n```\n\n----------------------------------------\n\nTITLE: Chat CLI Commands\nDESCRIPTION: Supported commands for the Bluetooth Mesh chat application using the shell interface. These commands allow users to send messages, set presence status, and retrieve presence information from other nodes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/chat/sample_description.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nchat --help\n   Prints help message together with the list of supported commands.\n\nchat presence set <presence>\n   Sets presence of the current client.\n   The following values are supported: available, away, dnd, inactive.\n\nchat presence get <node>\n   Gets presence of a specified chat client.\n\nchat private <node> <message>\n   Sends a private text message to a specified chat client.\n   Remember to wrap the message in double quotes if it has 2 or more words.\n\nchat msg <message>\n   Sends a text message to the chat.\n   Remember to wrap the message in double quotes if it has 2 or more words.\n```\n\n----------------------------------------\n\nTITLE: USB Power State Management Enums\nDESCRIPTION: Enumeration values representing different USB power states used to control power management behavior.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/usb_state_pm.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUSB_STATE_POWERED\nUSB_STATE_ACTIVE\nUSB_STATE_DISCONNECTED\nUSB_STATE_SUSPENDED\n```\n\n----------------------------------------\n\nTITLE: Sending Ground Fix Location Request in C\nDESCRIPTION: Sends a location request for cell-based location using the location_assistance_ground_fix_request_send function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_location_assistance.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nlocation_assistance_ground_fix_request_send();\n```\n\n----------------------------------------\n\nTITLE: Enabling TX Injection Mode in C\nDESCRIPTION: Example of using the net_eth_txinjection_mode API to enable or disable TX injection mode, which allows transmission of raw 802.11 packets. This can be used concurrently with Promiscuous mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/advanced_modes/promiscuous_operation.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nnet_eth_txinjection_mode(iface, enable);\n```\n\n----------------------------------------\n\nTITLE: Triggering system reboot in C\nDESCRIPTION: The sys_reboot() function can be used to trigger a software reset of the system. On nRF54L Series devices, this may not reset the kernel uptime counter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nsys_reboot()\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth HOGP Source\nDESCRIPTION: This code includes the HID Over GATT Profile (HOGP) source file conditionally based on the CONFIG_BT_HOGP configuration. It allows Bluetooth devices to provide HID services over GATT.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_HOGP hogp.c)\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure\nDESCRIPTION: Main RST document structure defining the headings and content organization for the nRF5340 Audio broadcast source application documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/broadcast_source/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _nrf53_audio_broadcast_source_app:\n\nnRF5340 Audio: Broadcast source\n###############################\n\n.. contents::\n   :local:\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: One-of Dictionary Usage in NRF Connect SDK - YAML\nDESCRIPTION: This example highlights the usage of the 'one_of' dictionary in partition configuration with YAML. The 'one_of' dict resolves to the first existing partition in the list, providing flexibility in span configurations. The example demonstrates equivalent configurations with and without using 'one_of'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsome_span:\n   span: [something, {one_of: [does_not_exist_0, does_not_exist_1, exists1, exists2]}]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsome_span:\n   span: [something, exists1]\n```\n\n----------------------------------------\n\nTITLE: Using Release Assistance Indication Feature\nDESCRIPTION: Code showing the addition of Release Assistance Indication (RAI) feature to help save power by releasing network connections faster on networks that support it.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.6.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nconn_mgr_all_if_connect()\n```\n\n----------------------------------------\n\nTITLE: Enabling nRF VPR Real-time Peripherals in C\nDESCRIPTION: Function to enable the VPR real-time peripherals before using them. This is a prerequisite step for working with VTIM, VIO, and other real-time peripherals.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_csr_rtperiph_enable_set()\n```\n\n----------------------------------------\n\nTITLE: Defining Info Message Structure in Protocol Buffers\nDESCRIPTION: Defines the structure of the Info message used to indicate the version of the provisioning protocol implemented on the target device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/wifi_prov.rst#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Info {\n  required uint32 version = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Console Output - LTE Metrics and Data Upload\nDESCRIPTION: Console output showing LTE connection timing metrics and the process of uploading captured data to Memfault cloud.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/debug/memfault/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n<inf> memfault_sample: Time to connect: 3602 ms\n<inf> memfault_sample: Sending already captured data to Memfault\n<dbg> mflt: memfault_platform_log: Response Complete: Parse Status 0 HTTP Status 202!\n<dbg> mflt: memfault_platform_log: Body: Accepted\n<dbg> mflt: memfault_platform_log: Response Complete: Parse Status 0 HTTP Status 202!\n<dbg> mflt: memfault_platform_log: Body: Accepted\n<dbg> mflt: memfault_platform_log: No more data to send\n```\n\n----------------------------------------\n\nTITLE: AT Command Response Example - XMONITOR Output\nDESCRIPTION: Sample output from the AT%XMONITOR command showing modem status parameters including network operator, cell ID, and signal information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/at_client/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nAT%XMONITOR\n%XMONITOR: 5,\"\",\"\",\"24201\",\"76C1\",7,20,\"0102DA03\",105,6400,53,24,\"\",\"11100000\",\"11100000\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Stopping, Setting Message, and Starting NFC via CLI\nDESCRIPTION: These commands stop the NFC interface, set a new message to be encoded, and then restart the NFC interface. The custom message will then be encoded and transmitted via NFC. Special characters in the string need to be escaped.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/server/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ nfc stop\nuart:~$ nfc set_new_msg \\\"https://www.nordicsemi.com/Products/Development-software/nRF-Connect-SDK\\\"\nuart:~$ nfc start\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenThread RPC Client Library Sources\nDESCRIPTION: Defines the main library sources for OpenThread RPC client implementation, including various modules for COAP, diagnostics, IP6, linking, messaging, and other OpenThread features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/rpc/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(\n  ot_rpc_client_common.c\n  ot_rpc_cli.c\n  ot_rpc_coap.c\n  ot_rpc_diag.c\n  ot_rpc_dataset.c\n  ot_rpc_instance.c\n  ot_rpc_ip6.c\n  ot_rpc_link.c\n  ot_rpc_link_raw.c\n  ot_rpc_message.c\n  ot_rpc_meshdiag.c\n  ot_rpc_netdata.c\n  ot_rpc_netdiag.c\n  ot_rpc_srp_client.c\n  ot_rpc_thread.c\n  ot_rpc_udp.c\n  ot_rpc_dns_client.c\n)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Persistent Key using PSA API in C\nDESCRIPTION: This snippet demonstrates the cleanup process, where the AES key is removed from the PSA crypto keystore. This is an important step for security and resource management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/persistent_key_usage/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatus = psa_destroy_key(key_handle);\n```\n\n----------------------------------------\n\nTITLE: Getting Last Known Battery Level in C\nDESCRIPTION: Use this function to access the last known battery level information stored internally by the BAS Client. Returns BT_BAS_VAL_INVALID if no value has been received from the server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/bas_client.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nbt_bas_get_last_battery_level\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Components in YAML Manifest\nDESCRIPTION: YAML configuration snippet for defining CACHE_POOL component in the SUIT manifest with a specified identifier.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_external_memory.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsuit-components:\n    ...\n- - CACHE_POOL\n  - 1\n```\n\n----------------------------------------\n\nTITLE: Opening TLS Socket and Connecting to TLS Server\nDESCRIPTION: This snippet demonstrates how to open a TLS socket using security tag 1000 and connect to a TLS server on a specified port using AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_6\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XSSOCKET=1,1,0,1000\n\nAT#XCONNECT=\"example.com\",1234\n```\n\n----------------------------------------\n\nTITLE: Programming Device Using West Flash Command\nDESCRIPTION: Command for programming a development kit using west flash with full erase option. This approach erases the full flash memory before programming, which is recommended especially when the application depends on other flash memory areas.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/vsc_build_and_run_series.txt#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest flash --erase\n```\n\n----------------------------------------\n\nTITLE: Listing nRF Connect SDK Specific Commits\nDESCRIPTION: Git command to list all nRF Connect SDK specific commits and cherry-picked commits since v2.4.0 in the Zephyr fork.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.4.1.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v3.3.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: Configuring Ed25519 Signature Type for MCUboot\nDESCRIPTION: Uses the Edwards curve digital signature algorithm with Ed25519. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_11\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_SIGNATURE_TYPE_ED25519\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_BOOT_SIGNATURE_TYPE_ED25519`\"\n```\n\n----------------------------------------\n\nTITLE: Flashing the Coexistence Sample to nRF7002 DK\nDESCRIPTION: Command for flashing the Wi-Fi and Bluetooth LE coexistence sample to the nRF7002 DK using west. The merged.hex file contains both the application and necessary configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nwest flash --dev-id <device-id> --hex-file build/merged.hex\n```\n\n----------------------------------------\n\nTITLE: Enabling Location Library Configuration\nDESCRIPTION: Configuration options required to enable the nRF Cloud location library functionality. Both the core nRF Cloud library and location-specific features must be enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud_location.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF_CLOUD=y\nCONFIG_NRF_CLOUD_LOCATION=y\n```\n\n----------------------------------------\n\nTITLE: HMAC Test Vector Registration in C\nDESCRIPTION: Example of registering a test vector for HMAC SHA256 operation with specific input parameters and expected outputs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/crypto/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nITEM_REGISTER(test_vector_hmac_data,\n\t         test_vector_hmac_t test_vector_hmac256_min_key_min_message_0) = {\n\t   .digest_type = MBEDTLS_MD_SHA256,\n\t   .expected_err_code = 0,\n\t   .expected_result = EXPECTED_TO_PASS,\n\t   .p_test_vector_name = TV_NAME(\"SHA256 key_len=1 message_len=1 zeros\"),\n\t   .p_input = \"00\",\n\t   .p_key = \"00\",\n\t   .p_expected_output =\n\t\t   \"6620b31f2924b8c01547745f41825d322336f83ebb13d723678789d554d8a3ef\"\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Sources for Machine Learning Application in CMake\nDESCRIPTION: This snippet conditionally includes different event source files based on configuration options. It uses target_sources_ifdef to add source files to the 'app' target when specific configuration flags are enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/src/events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_ML_APP_EI_DATA_FORWARDER_EVENTS app PRIVATE\n\t${CMAKE_CURRENT_SOURCE_DIR}/ei_data_forwarder_event.c\n)\n\ntarget_sources_ifdef(CONFIG_ML_APP_ML_RESULT_EVENTS app PRIVATE\n\t${CMAKE_CURRENT_SOURCE_DIR}/ml_result_event.c\n)\n\ntarget_sources_ifdef(CONFIG_ML_APP_MODE_EVENTS app PRIVATE\n\t${CMAKE_CURRENT_SOURCE_DIR}/ml_app_mode_event.c\n)\n\ntarget_sources_ifdef(CONFIG_ML_APP_SENSOR_SIM_EVENTS app PRIVATE\n\t${CMAKE_CURRENT_SOURCE_DIR}/sensor_sim_event.c\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Running SHA-256 Sample (RST)\nDESCRIPTION: Instructions for building and running the SHA-256 sample application. It specifies the sample path and includes a common build and run instruction file for non-secure applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/sha256/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |sample path| replace:: :file:`samples/crypto/sha256`\n\n.. include:: /includes/build_and_run_ns.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring UART for Modem Traces on Custom Board (DeviceTree)\nDESCRIPTION: DeviceTree configuration for setting up UART for modem traces on a custom board. It configures UART1 with specific pin assignments, sleep states, speed settings, and designates it as the modem trace UART in the chosen section.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_trace.rst#2025-04-21_snippet_0\n\nLANGUAGE: dts\nCODE:\n```\n&pinctrl {\n   uart1_default: uart1_default {\n      group1 {\n         psels = <NRF_PSEL(UART_TX, 0, 1)>,\n            <NRF_PSEL(UART_RTS, 0, 14)>;\n      };\n      group2 {\n         psels = <NRF_PSEL(UART_RX, 0, 0)>,\n            <NRF_PSEL(UART_CTS, 0, 15)>;\n         bias-pull-up;\n      };\n   };\n\n   uart1_sleep: uart1_sleep {\n      group1 {\n         psels = <NRF_PSEL(UART_TX, 0, 1)>,\n            <NRF_PSEL(UART_RX, 0, 0)>,\n            <NRF_PSEL(UART_RTS, 0, 14)>,\n            <NRF_PSEL(UART_CTS, 0, 15)>;\n         low-power-enable;\n      };\n   };\n};\n\n&uart1 {\n   status = \"okay\";\n   current-speed = <1000000>;\n   pinctrl-0 = <&uart1_default>;\n   pinctrl-1 = <&uart1_sleep>;\n   pinctrl-names = \"default\", \"sleep\";\n};\n\n/ {\n   chosen {\n      nordic,modem-trace-uart = &uart1;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Transmitting modulated waveform with lstream command in Shell\nDESCRIPTION: Starts modulated waveform transmission with configurable pulse duration, interval, and transmission duration. Set transmission_duration to 0 for infinite transmission.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\ncustom lstream *100* *200* *20000*\n```\n\n----------------------------------------\n\nTITLE: Clearing Target Nodes and Setting Phase to Idle - Shell Commands\nDESCRIPTION: These commands clear the list of Target nodes and set the distribution phase to idle before making a new firmware update attempt. They are necessary if a firmware distribution fails.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfd receivers-delete-all\n```\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfd cancel\n```\n\n----------------------------------------\n\nTITLE: Configuring SHA-384 Hash Algorithm for MCUboot\nDESCRIPTION: Selects SHA-384 as the hash algorithm for image integrity verification. Currently not utilized by |NCS|.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_16\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_HASH_ALG_SHA384\"\n```\n\n----------------------------------------\n\nTITLE: Enforcing Sysbuild Mode\nDESCRIPTION: Checks if the application is being built in sysbuild mode, which is required for this multi-image project. Raises a fatal error if not in sysbuild\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_hpu_temp_meas/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Partition Manager Configuration for External Memory\nDESCRIPTION: Example configuration for defining external memory partition to store firmware patches.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/fw_patches_ext_flash.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnrf70_wifi_fw:\n  address: 0x12f000\n  size: 0x20000\n  device: MX25R64\n  region: external_flash\n```\n\n----------------------------------------\n\nTITLE: SoC Binaries Programming Command\nDESCRIPTION: Command to program the nRF54H20 SoC binaries bundle using nRF Util.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_custom_pcb.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device x-provision-nrf54h --firmware <path-to_bundle_zip_file> --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Configuring UART and GPIO in Devicetree\nDESCRIPTION: Devicetree configuration to select UART device and GPIO for the Modem SLM library using Zephyr chosen nodes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_slm.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n   chosen {\n      ncs,slm-uart = &uart1;\n      ncs,slm-gpio = &gpio0;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: HID Keyboard LED Configuration in C\nDESCRIPTION: Configuration for HID keyboard LED indicators defining LED effects and hardware LED mapping for keyboard status indicators like Num Lock, Caps Lock etc.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/hid_state.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include \"hid_keyboard_leds.h\"\n\nstatic const struct led_effect keyboard_led_on = LED_EFFECT_LED_ON(LED_COLOR(255, 255, 255));\nstatic const struct led_effect keyboard_led_off = LED_EFFECT_LED_OFF();\n\nstatic const uint8_t keyboard_led_map[] = {\n\t[HID_KEYBOARD_LEDS_NUM_LOCK] = 2,\n\t[HID_KEYBOARD_LEDS_CAPS_LOCK] = 3,\n\t[HID_KEYBOARD_LEDS_SCROLL_LOCK] = LED_UNAVAILABLE,\n\t[HID_KEYBOARD_LEDS_COMPOSE] = LED_UNAVAILABLE,\n\t[HID_KEYBOARD_LEDS_KANA] = LED_UNAVAILABLE,\n};\n```\n\n----------------------------------------\n\nTITLE: Getting DC/DC mode with lgetdcdc command in Shell\nDESCRIPTION: Retrieves the DC/DC mode of the CMD device. Always returns 0 for unsupported boards.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\ncustom lgetdcdc\n```\n\n----------------------------------------\n\nTITLE: Adding OnOff Light Switch Bridged Device\nDESCRIPTION: Matter CLI command for adding a new OnOff Light Switch bridged device\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge add 259\n```\n\n----------------------------------------\n\nTITLE: Including Platform Header Directories\nDESCRIPTION: Adds the current directory to include paths for resolving header files during OpenThread platform compilation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/platform/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Configuring Asymmetric Signature Algorithms in nRF Security\nDESCRIPTION: Enables various asymmetric signature algorithms through Kconfig options. Supports multiple ECDSA variants, EdDSA, and RSA signature schemes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_18\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_PSA_WANT_ALG_ECDSA\nCONFIG_PSA_WANT_ALG_ECDSA_ANY\nCONFIG_PSA_WANT_ALG_DETERMINISTIC_ECDSA\nCONFIG_PSA_WANT_ALG_PURE_EDDSA\n```\n\n----------------------------------------\n\nTITLE: Linking Zephyr Library with CC3XX Platform in Bash\nDESCRIPTION: This snippet checks if HW_CC3XX configuration is enabled. If so, it sets up and builds the associated Zephyr library, specifying source files and linking against the nrf_cc3xx_platform library. Dependencies include the Zephyr build system and HW_CC3XX configuration enabled. The snippet configures the project’s build process to include necessary libraries specific to the hardware platform.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/hw_cc3xx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nif(CONFIG_HW_CC3XX)\n  zephyr_library()\n  zephyr_library_sources(hw_cc3xx.c)\n\n  # Link with the nrf_cc3xx_platform library\n  zephyr_library_link_libraries(platform_cc3xx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Function to Compute Storage Time\nDESCRIPTION: This snippet describes a function `emds_store_time_get` that, when called, computes the estimated storage time based on a predefined mathematical formula. The function streamlines the calculation process for developers working with emergency data storage in the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/emds.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nCalling the :c:func:`emds_store_time_get` function in the sample automatically computes the result of the formula and returns 30715.\n```\n\n----------------------------------------\n\nTITLE: Factory Data Write Protection Configuration\nDESCRIPTION: This Kconfig option enables write protection for the factory_data partition using the fprotect driver. Disabling it removes write protection, which is not recommended.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_6\n\nLANGUAGE: Kconfig\nCODE:\n```\n:kconfig:option:`CONFIG_CHIP_FACTORY_DATA_WRITE_PROTECT` to ``n``\n```\n\n----------------------------------------\n\nTITLE: GPIO Pin Pulse Counting in MoSh\nDESCRIPTION: Count pulses on a given GPIO pin, treating a rising edge as a pulse. Enable for one pin at a time. Configure GPIO pin as input with pull down by using the 'gpio_count enable' command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_30\n\nLANGUAGE: console\nCODE:\n```\nmosh:~$ gpio_count get\nNumber of pulses: 0\nmosh:~$ gpio_count enable 10\nmosh:~$ gpio_count get\nNumber of pulses: 42\nmosh:~$ gpio_count disable\nmosh:~$ gpio_count get\nNumber of pulses: 42\n```\n\n----------------------------------------\n\nTITLE: Specify Source Files for the Application\nDESCRIPTION: This snippet adds the source file 'src/main.c' to the app target, which contains the main application logic. This is the entry point for the application being developed in this project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n\tsrc/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from LwM2M Server in MoSh\nDESCRIPTION: Console command to disconnect from the LwM2M server in the Modem Shell application, with example output showing successful disconnection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_52\n\nLANGUAGE: console\nCODE:\n```\nmosh:~$ cloud_lwm2m disconnect\nLwM2M: Stopping LwM2M client\nLwM2M: Disconnected\n```\n\n----------------------------------------\n\nTITLE: Including Core CURL Source Files\nDESCRIPTION: This CMake command specifies a list of C source files to be compiled into a library. These files constitute the core functionality of the CURL library, covering areas such as connection handling, protocol implementations (HTTP, FTP, etc.), data encoding, and utility functions.  The explicit listing ensures control over source file order and allows for easier comparison with upstream versions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/curl/lib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library_sources(\n\taltsvc.c amigaos.c asyn-ares.c asyn-thread.c base64.c\n\tconncache.c connect.c content_encoding.c cookie.c curl_addrinfo.c\n\tcurl_ctype.c curl_des.c curl_endian.c curl_fnmatch.c curl_get_line.c\n\tcurl_gethostname.c curl_gssapi.c curl_memrchr.c curl_multibyte.c\n\tcurl_ntlm_core.c curl_ntlm_wb.c curl_path.c curl_range.c curl_rtmp.c\n\tcurl_sasl.c curl_sspi.c curl_threads.c dict.c dotdot.c easy.c escape.c\n\tfile.c fileinfo.c formdata.c ftp.c url.c ftplistparser.c getenv.c getinfo.c\n\tgopher.c hash.c hmac.c hostasyn.c hostcheck.c hostip.c hostip4.c hostip6.c\n\thostsyn.c http.c http2.c http_chunks.c http_digest.c http_negotiate.c\n\thttp_ntlm.c http_proxy.c idn_win32.c if2ip.c imap.c inet_ntop.c inet_pton.c\n\tkrb5.c ldap.c llist.c md4.c md5.c memdebug.c mime.c mprintf.c mqtt.c\n\tmulti.c netrc.c non-ascii.c nonblock.c openldap.c parsedate.c pingpong.c\n\tpop3.c progress.c psl.c doh.c rand.c rename.c rtsp.c select.c\n\tsendf.c setopt.c sha256.c share.c slist.c smb.c smtp.c socketpair.c socks.c\n\tsocks_gssapi.c socks_sspi.c speedcheck.c splay.c strcase.c strdup.c\n\tstrerror.c strtok.c strtoofft.c system_win32.c telnet.c tftp.c timeval.c\n\ttransfer.c urlapi.c version.c warnless.c wildcard.c x509asn1.c dynbuf.c\n\tversion_win32.c easyoptions.c easygetopt.c\n)\"\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Clear Channel Assessment - Custom Command Usage\nDESCRIPTION: This command enables or disables the performance of a CCA before each transmission based on a toggle argument (1 to enable, 0 to disable).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\ncustom lsetcca *<toggle>*\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake configuration for a provisioning image netcore project\nDESCRIPTION: Configures the CMake build system for a netcore provisioning image project. It specifies the minimum CMake version (3.20.0), includes the Zephyr package, defines the project name, and adds the main.c source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/provisioning_image_net_core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(provisioning_image_netcore)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Creating an NFC NDEF Record Descriptor in C\nDESCRIPTION: Demonstrates how to generate an NFC NDEF record descriptor using the NFC_NDEF_GENERIC_RECORD_DESC_DEF macro. The example shows declaration, initialization, and calculating the encoded record size.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/msg.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint err;\nuint32_t length;\n\n/// Declare record descriptor by macro - create and initialize an instance of\n///   nfc_ndef_record_desc_t.\nNFC_NDEF_GENERIC_RECORD_DESC_DEF( record,\n                               3,\n                               id_string,\n                               sizeof(id_string),\n                               type_string,\n                               sizeof(type_string),\n                               payload_constructor, // implementation provided by user\n                               &payload_constructor_data // structure depends on user implementation\n                             );\n\n// If required, get the record size to length variable.\nerr = nfc_ndef_record_encode( &NFC_NDEF_GENERIC_RECORD_DESC_DEF(record),\n                                      NDEF_MIDDLE_RECORD,\n                                      NULL,\n                                      &length);\n```\n\n----------------------------------------\n\nTITLE: Linking Oberon PSA Core with CRACEN Driver in CMake\nDESCRIPTION: Links the Oberon PSA core with the CRACEN PSA driver, integrating the CRACEN functionality into the Oberon PSA cryptography implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/cracen/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Link oberon_psa_core with this PSA crypto driver\ntarget_link_libraries(oberon_psa_core\n  PRIVATE\n    cracen_psa_driver\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Clock Control On/Off Driver Test Project in CMake\nDESCRIPTION: This CMake configuration sets up the build environment for a clock control onoff driver test. It finds the Zephyr package, initializes the project, and includes all test source files from the Zephyr test directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/clock_control/onoff/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/clock_control/onoff/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build System for Nordic SDK\nDESCRIPTION: This snippet sets up a CMake project by specifying the minimum required version and includes the Zephyr package from the system environment. It identifies application source files with a specific pattern and includes them as target sources. Additionally, it incorporates specific library directories needed for the configuration headers. Dependencies include Zephyr RTOS, Nordic SDK, and a CMake installation with version 3.20.0 or higher.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tag_reader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# Copyright (c) 2018 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\n# NORDIC SDK APP START\ntarget_sources(app  PRIVATE ${app_sources})\n# NORDIC SDK APP END\n\n# Include configuration headers\nzephyr_library_include_directories(configuration)\n```\n\n----------------------------------------\n\nTITLE: Enable Bluetooth Mesh Shell\nDESCRIPTION: To use the shell commands for the Light xyL Client, you must enable the Bluetooth Mesh shell subsystem and the Light xyL Client shell commands. This is achieved by enabling the specified Kconfig options, which make the commands available for interacting with the Light xyL Client model instantiated on a device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\n* :kconfig:option:`CONFIG_BT_MESH_SHELL`\n* :kconfig:option:`CONFIG_BT_MESH_SHELL_LIGHT_XYL_CLI`\n```\n\n----------------------------------------\n\nTITLE: Declaring FTP Client MTU Constant\nDESCRIPTION: The library downloads files in fragments sized according to NET_IPV4_MTU constant. This code reference shows the usage of the MTU size enumerator in the file download process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/ftp_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nNET_IPV4_MTU\n```\n\n----------------------------------------\n\nTITLE: Radio Test Sample TX Configuration\nDESCRIPTION: Command sequence for configuring continuous OFDM TX traffic in 11a mode with specific parameters\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/adaptivity_test_procedure.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuart:~$ wifi_radio_test init 100\nuart:~$ wifi_radio_test tx_pkt_tput_mode 0\nuart:~$ wifi_radio_test tx_pkt_rate 54\nuart:~$ wifi_radio_test tx_pkt_len 1000\nuart:~$ wifi_radio_test tx_pkt_gap 0\nuart:~$ wifi_radio_test tx_pkt_num -1\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including NRF21540 Power Model Source in Zephyr Library\nDESCRIPTION: Conditionally adds the built-in power model implementation for the nRF21540 FEM to the Zephyr library. This source is only included when the CONFIG_MPSL_FEM_POWER_MODEL_NRF21540_USE_BUILTIN configuration option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/fem/nrf21540_gpio_spi/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_MPSL_FEM_POWER_MODEL_NRF21540_USE_BUILTIN models/mpsl_fem_nrf21540_power_model_builtin.c)\n```\n\n----------------------------------------\n\nTITLE: Entering FMDN Read Mode - C\nDESCRIPTION: This snippet provides details on entering a specific read mode using the `bt_fast_pair_fmdn_read_mode_enter` function, which is required for sensitive data reading.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n// Entering the EIK recovery read mode.\nvoid enter_recovery_mode() {\n    if (bt_fast_pair_is_ready() && bt_fast_pair_fmdn_is_provisioned()) {\n        bt_fast_pair_fmdn_read_mode_enter(BT_FAST_PAIR_FMDN_READ_MODE_FMDN_RECOVERY);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for JWT App Test in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the project, includes necessary packages, and configures source files and compile options for a JWT application test. It specifically includes the app_jwt library and sets custom compile options for logging and default timestamp.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/app_jwt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(app_jwt_test)\n\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntarget_sources(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/lib/app_jwt/app_jwt.c\n  )\n\ntarget_include_directories(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/include/\n  )\n\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_APP_JWT_LOG_LEVEL=4\n  -DCONFIG_APP_JWT_DEFAULT_TIMESTAMP=1735682400\n  )\n```\n\n----------------------------------------\n\nTITLE: Debug Configuration Log Output\nDESCRIPTION: Illustrates the log output when the door lock sample is built with the debug configuration, showing how the secure PIN code for Bluetooth LE pairing is generated and displayed. This snippet indicates that the pin is randomly generated for debug builds.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"PROVIDE THE FOLLOWING CODE IN YOUR MOBILE APP: 165768\"\n```\n\n----------------------------------------\n\nTITLE: Testing ICMPv6 Echo Request with CSL\nDESCRIPTION: Sends an ICMPv6 Echo Request from the leader to the router device with CSL enabled, demonstrating the reduced latency compared to traditional data polling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_27\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot ping fe80:0:0:0:acbd:53bf:1461:a861\n16 bytes from fe80:0:0:0:acbd:53bf:1461:a861: icmp_seq=3 hlim=64 time=421ms\n1 packets transmitted, 1 packets received. Packet loss = 0.0%. Round-trip min/a\nDone\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This command uses CMake's `find_package` to locate the Zephyr RTOS package. The `REQUIRED` keyword ensures that the configuration fails if Zephyr is not found. `HINTS` and `$ENV{ZEPHYR_BASE}` help CMake locate Zephyr by specifying a path to search in the environment variable ZEPHYR_BASE.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/sensor/temp_sensor/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: SUPL Read Callback Type Definition in C\nDESCRIPTION: The supl_read_t is a callback function type definition for receiving incoming data from the SUPL server. It is one of the callback functions used for data transfer within the SUPL session.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/supl_os_client.rst#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n\"SUPL read (:c:type:`supl_read_t`): callback for receiving incoming data from the SUPL server\"\n```\n\n----------------------------------------\n\nTITLE: Sample Output - Entropy Data\nDESCRIPTION: This is a sample output of the entropy data displayed in the terminal. It represents the random data generated by the entropy driver on the network core and transmitted to the application core.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/entropy_nrf53/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n   \"Entropy sample started[APP Core].\\n    0x43  0xd1  0xd6  0x52  0x6d  0x22  0x46  0x58  0x8f  0x15\\n    0xcf  0xe1  0x1a  0xb5  0xa6  0xdb  0xe5  0xf7  0x7e  0x37\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project is at least 3.20.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_ppr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Build with nRF Modem Dependencies\nDESCRIPTION: Sets up a Zephyr library target and configures include paths for nRF modem headers. Specifies source files for ASN.1 decoding, PKCS#15 decoding, and UICC LwM2M functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/uicc_lwm2m/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_include_directories(\n  ${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/\n)\n\nzephyr_library_sources(\n    asn1_decode.c\n    pkcs15_decode.c\n    uicc_lwm2m.c\n)\n```\n\n----------------------------------------\n\nTITLE: Including Storage Headers - CMake\nDESCRIPTION: This snippet manages the inclusion of storage headers for the test binary, which is required when CONFIG_MOCK_SUIT_STORAGE is defined, adding necessary storage-related functionalities for testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_STORAGE)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_STORAGE)\n  target_include_directories(testbinary PRIVATE\n    ${SUIT_SUBSYS_DIR}/storage/include\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling hardware Secure AP-Protect using nrfutil\nDESCRIPTION: Command to enable only the hardware Secure AP-Protect mechanism by locking the UICR.SECUREAPPROTECT register. This limits CPU access to the non-secure side only, allowing debugging of NSPE while blocking SPE debugging.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/ap_protect.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device protection-set SecureRegions\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Sources for BT Mesh\nDESCRIPTION: This snippet defines the inclusion of several source files and libraries based on configuration flags for different Bluetooth Mesh models within the Zephyr project. It uses conditional compilation via the 'zephyr_library_sources_ifdef' function to include source files like 'gen_onoff_srv.c' and 'lightness_cli.c' when specific configuration options are enabled. Dependencies include the Zephyr build system and a configured BT Mesh environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/mesh/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_ONOFF_SRV gen_onoff_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_ONOFF_CLI gen_onoff_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LVL_SRV gen_lvl_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LVL_CLI gen_lvl_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_DTT_SRV gen_dtt_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_DTT_CLI gen_dtt_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_PONOFF_SRV gen_ponoff_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_PONOFF_CLI gen_ponoff_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_PLVL_SRV gen_plvl_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_PLVL_CLI gen_plvl_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_BATTERY_SRV gen_battery_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_BATTERY_CLI gen_battery_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LOC_SRV gen_loc_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LOC_CLI gen_loc_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_PROP_SRV gen_prop_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_PROP_CLI gen_prop_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHTNESS_SRV lightness_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHTNESS_CLI lightness_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_CTRL_SRV light_ctrl_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_CTRL_REG light_ctrl_reg.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_CTRL_REG_SPEC light_ctrl_reg_spec.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_CTRL_CLI light_ctrl_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SENSOR_SRV sensor_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SENSOR_CLI sensor_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_TIME_SRV time_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_TIME_CLI time_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_CTL_CLI light_ctl_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_TEMP_SRV light_temp_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_CTL_SRV light_ctl_srv.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_HSL light_hsl.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_HSL_CLI light_hsl_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_HSL_SRV light_hsl_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_SAT_SRV light_sat_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_HUE_SRV light_hue_srv.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SCENE_SRV scene_srv.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SCENE_CLI scene_cli.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_XYL_CLI light_xyl_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LIGHT_XYL_SRV light_xyl_srv.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SCHEDULER_CLI scheduler_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SCHEDULER_SRV scheduler_srv.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_BT_MESH_VENDOR_MODELS vnd)\nadd_subdirectory_ifdef(CONFIG_BT_MESH_SHELL shell)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_linker_sources(SECTIONS sensor_types.ld)\nzephyr_linker_sources(SECTIONS scene_types.ld)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_RPL_STORAGE_MODE_EMDS rpl.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_KEY_IMPORTER key_importer.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_BT_MESH_USES_MBEDTLS_PSA AND (NOT CONFIG_SOC_FAMILY_NORDIC_NRF))\n  zephyr_library_link_libraries(mbedTLS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Memfault Sample\nDESCRIPTION: Sets up the CMake build environment with required version, Zephyr package dependency, project name, and includes necessary source and configuration directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/debug/memfault/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(memfault_sample)\n\n# NORDIC SDK APP START\nadd_subdirectory(src)\n# NORDIC SDK APP END\n\nzephyr_include_directories(src)\nzephyr_include_directories(config)\n```\n\n----------------------------------------\n\nTITLE: Configuring DFU Target Library Base Sources\nDESCRIPTION: Sets up the base Zephyr library configuration and includes core DFU target source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dfu/dfu_target/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_include_directories(include)\n\nzephyr_library_sources(\n  src/dfu_target.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Group Configuration Command for Matter Light Switch\nDESCRIPTION: CHIP Tool command for configuring multiple devices in a group\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchip-tool tests TestGroupDemoConfig --nodeId <node_ID>\n```\n\n----------------------------------------\n\nTITLE: Setting Server Binding for LwM2M Carrier Library\nDESCRIPTION: AT command to configure the binding for connecting to the device management network. Accepts \"U\" for UDP, \"N\" for Non-IP, or a combination.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_15\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"binding\"[,<binding>]\n```\n\n----------------------------------------\n\nTITLE: External File License Application\nDESCRIPTION: This is an example of an external file containing license information applied to specific files based on glob patterns. The example demonstrates how to associate the Nordic 5-Clause license with '.a' and '.lib' files within the 'lib' directory and its subdirectories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n\n\"/* The following lines will apply Nordic 5-Clause license to all \\\".a\\\" files\n * and \\\".lib\\\" files in the \\\"lib\\\" directory and all its subdirectories.\n *\n * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n * NCS-SBOM-Apply-To-File: lib/**/*.a\n * NCS-SBOM-Apply-To-File: lib/**/*.lib\n */\"\n\n```\n\n----------------------------------------\n\nTITLE: Building for IoT devices profile\nDESCRIPTION: This command builds the throughput sample for the nRF7002 DK with the IoT device profile for Station mode using an overlay configuration file. The EXTRA_CONF_FILE parameter is used to specify the overlay configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DEXTRA_CONF_FILE=overlay-iot-devices.conf\n```\n\n----------------------------------------\n\nTITLE: Displaying Sample Output from AWS IoT Application - Console\nDESCRIPTION: This code snippet displays the UART output from the AWS IoT sample application, which shows the booting messages, network connection status, and published messages to the AWS IoT shadow service. The expected output provides insight into the application's operations and modem status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/aws_iot/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v3.3.99-ncs1-2858-gc9d01d05ce83 ***\n[00:00:00.252,838] <inf> aws_iot_sample: The AWS IoT sample started, version: v1.0.0\n[00:00:00.252,868] <inf> aws_iot_sample: Bringing network interface up and connecting to the network\n[00:00:02.486,297] <inf> aws_iot_sample: Network connectivity established\n[00:00:07.486,419] <inf> aws_iot_sample: Connecting to AWS IoT\n[00:00:11.061,981] <inf> aws_iot_sample: AWS_IOT_EVT_CONNECTED\n[00:00:11.062,866] <inf> aws_iot_sample: Publishing message: {\"state\":{\"reported\":{\"uptime\":11062,\"app_version\":\"v1.0.0\",\"modem_version\":\"nrf9160_1.3.4\"}}} to AWS IoT shadow\n[00:01:11.073,120] <inf> aws_iot_sample: Publishing message: {\"state\":{\"reported\":{\"uptime\":71063,\"app_version\":\"v1.0.0\",\"modem_version\":\"nrf9160_1.3.4\"}}} to AWS IoT shadow\n```\n\n----------------------------------------\n\nTITLE: Configuring Multicast Address in Thread Network\nDESCRIPTION: Adds a multicast address with a scope greater than realm-local and displays all configured multicast addresses. This triggers an MLR.req message to the Backbone Router.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot ipmaddr add ff04::1\nDone\nuart:~$ ot ipmaddr\nff04:0:0:0:0:0:0:1\nff33:40:fdde:ad00:beef:0:0:1\nff32:40:fdde:ad00:beef:0:0:1\nff02:0:0:0:0:0:0:2\nff03:0:0:0:0:0:0:2\nff02:0:0:0:0:0:0:1\nff03:0:0:0:0:0:0:1\nff03:0:0:0:0:0:0:fc\nDone\n```\n\n----------------------------------------\n\nTITLE: Adding Networking and Event Management Modules in CMake\nDESCRIPTION: This snippet adds various networking components and event management systems conditionally based on specific configuration flags. This allows for an extensible and adaptable networking architecture.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(net)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_ESB esb)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_APP_EVENT_MANAGER app_event_manager)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_APP_EVENT_MANAGER app_event_manager_profiler_tracer)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_EVENT_MANAGER_PROXY event_manager_proxy)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_CAF caf)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NRF_PROFILER nrf_profiler)\n```\n\n----------------------------------------\n\nTITLE: Checking OpenThread Border Router Status\nDESCRIPTION: Docker command to check the status of the OpenThread Border Router agent service.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nsudo docker exec -it otbr sh -c \"sudo service otbr-agent status\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Data Model\nDESCRIPTION: Sets up the Matter Data Model configuration for the application, specifying generation directories and ZAP file location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nchip_configure_data_model(app\n    INCLUDE_SERVER\n    BYPASS_IDL\n    GEN_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated\n    ZAP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/lock.zap\n)\n```\n\n----------------------------------------\n\nTITLE: Define SUIT MCI Interface Library (CMake)\nDESCRIPTION: Creates a Zephyr interface library named `suit_mci`, sets the include directory, and links it to other necessary interface libraries like `suit_platform_err` and `suit_metadata`. This allows other modules to depend on the SUIT MCI interface without directly linking to its implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/mci/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_interface_library_named(suit_mci)\n target_include_directories(suit_mci INTERFACE include)\n target_link_libraries(suit_mci INTERFACE suit_platform_err)\n target_link_libraries(suit_mci INTERFACE suit_metadata)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Composition Data - Shell Command\nDESCRIPTION: This command encodes a Composition Data header for a Target node with specified product ID, company ID, and features. It's the first step in composing DFU metadata.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfu metadata comp-add 0x59 0 0 10 7\n```\n\n----------------------------------------\n\nTITLE: CMUX Response Format\nDESCRIPTION: Format of the response when reading CMUX configuration, showing AT channel and total channel count.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CMUX_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT\nCODE:\n```\n#XCMUX: <AT_channel>,<channel_count>\n```\n\n----------------------------------------\n\nTITLE: Configuring Isochronous Channel Parameters\nDESCRIPTION: Configuration options for defining SDU interval, presentation delay, and immediate LED toggling to demonstrate time synchronization and latency measurement\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_time_sync/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_SDU_INTERVAL_US\nCONFIG_TIMED_LED_PRESENTATION_DELAY_US\nCONFIG_LED_TOGGLE_IMMEDIATELY_ON_SEND_OR_RECEIVE\n```\n\n----------------------------------------\n\nTITLE: Configuring TF-M Partition Options in Kconfig\nDESCRIPTION: These Kconfig options allow configuring different TF-M partitions and services to include in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_building.rst#2025-04-21_snippet_3\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_TFM_PARTITION_PLATFORM=y\nCONFIG_TFM_PARTITION_CRYPTO=y\nCONFIG_TFM_PARTITION_PROTECTED_STORAGE=y\nCONFIG_TFM_PARTITION_INTERNAL_TRUSTED_STORAGE=y\nCONFIG_TFM_PARTITION_INITIAL_ATTESTATION=n\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake project configuration\nDESCRIPTION: This CMake snippet sets the minimum required CMake version, appends the current source directory to the BOARD_ROOT variable, sets the SHIELD variable, finds the Zephyr package, defines the project name, and adds the 'src' subdirectory to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_one_button/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nlist(APPEND BOARD_ROOT ${CMAKE_CURRENT_SOURCE_DIR})\n\nset(SHIELD npm1300_ek)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(npm1300_one_button)\n\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option for Secure UART\nDESCRIPTION: This snippet sets a TFM CMake option to define the secure UART instance. It passes the value of CONFIG_TFM_SECURE_UART to the TFM build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS\n  -DSECURE_UART1=${CONFIG_TFM_SECURE_UART}\n)\n```\n\n----------------------------------------\n\nTITLE: BLE Advertising Module Event Flow Table\nDESCRIPTION: ASCII table showing event flow for the BLE advertising module, including source modules, input events, and output events with their respective sink modules\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n| Source Module                                 | Input Event                  | This Module | Output Event               | Sink Module                                 |\n+===============================================+==============================+=============+============================+=============================================+\n| nrf_desktop_ble_adv                    | ble_peer_event           | ble_adv |                            |                                             |\n| nrf_desktop_ble_state                  |                              |             |                            |                                             |\n| nrf_desktop_ble_bond                   | ble_peer_operation_event |             |                            |                                             |\n```\n\n----------------------------------------\n\nTITLE: Periodic Location Retrieval with GNSS and Cellular Fallback in MoSh\nDESCRIPTION: Demonstrates setting up periodic location retrieval using GNSS with a fallback to cellular positioning, specifying interval and timeout.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nlocation get --interval 3600 --method gnss --gnss_timeout 300 --method cellular\n```\n\n----------------------------------------\n\nTITLE: Matter Light Bulb Build Command\nDESCRIPTION: West build command for building the sample with AWS IoT integration enabled for the nRF7002 DK platform.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_bulb/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DEXTRA_CONF_FILE=\"overlay-aws-iot-integration.conf\"\n```\n\n----------------------------------------\n\nTITLE: Implementing GetServiceUuid Method for MyBtServiceDataProvider in C++\nDESCRIPTION: Implement the GetServiceUuid method to return the UUID of the My Bt Service Bluetooth LE service.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nstatic bt_uuid *sServiceUuid = BT_UUID_MY_BT_SERVICE;\nbt_uuid *MyBtServiceDataProvider::GetServiceUuid()\n{\n   return sServiceUuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Watchdog in Kconfig\nDESCRIPTION: Defines Kconfig options to enable and configure the watchdog feature for Matter applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/common/config.rst#2025-04-21_snippet_8\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_WATCHDOG\n\t\"bool\" - Enable the watchdog feature for Matter applications.\n\nCONFIG_NCS_SAMPLE_MATTER_WATCHDOG_PAUSE_IN_SLEEP\n  \"bool\" - Pause the watchdog feature while the CPU is in the idle state.\n\nCONFIG_NCS_SAMPLE_MATTER_WATCHDOG_PAUSE_ON_DEBUG\n  \"bool\" - Pause the watchdog feature while the CPU is halted by the debugger.\n\nCONFIG_NCS_SAMPLE_MATTER_WATCHDOG_DEFAULT\n  \"bool\" - Use the default watchdog objects that are created in the matter_init.cpp file.\n  These watchdog objects are dedicated for the Main and Matter threads, and initialized to value of the CONFIG_NCS_SAMPLE_MATTER_WATCHDOG_DEFAULT_FEED_TIME Kconfig option.\n\nCONFIG_NCS_SAMPLE_MATTER_WATCHDOG_DEFAULT_FEED_TIME\n  \"int\" - Set the default interval (in milliseconds) for calling the feeding callback, if it exists.\n\nCONFIG_NCS_SAMPLE_MATTER_WATCHDOG_TIMEOUT\n  \"int\" - Set the default maximum time window (in milliseconds) for receiving the feeding signal.\n  The feeding signal must be received from all created watchdog sources to reset the watchdog object's timer.\n\nCONFIG_NCS_SAMPLE_MATTER_WATCHDOG_EVENT_TRIGGERS\n  \"bool\" - Enable the default test event triggers that are used for watchdog-testing purposes.\n```\n\n----------------------------------------\n\nTITLE: J-Link Core Connection Commands\nDESCRIPTION: Commands to connect to a specific core using J-Link by setting the appropriate AHB-AP index\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_debugging.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexec CORESIGHT_SetIndexAHBAPToUse = <Domain AP index>\\nconnect\n```\n\n----------------------------------------\n\nTITLE: Getting Current Mode of Light Lightness Control Server - C\nDESCRIPTION: Retrieves the current Mode setting from the Light Lightness Control Server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl mode-get\n\tGet the Light Lightness Control Server's current Mode.\n```\n\n----------------------------------------\n\nTITLE: Building HTTPS Client with IPv4-only PDN Configuration\nDESCRIPTION: Command to configure IPv4-only packet data network settings for nRF91 Series development kits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/https_client/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n-DEXTRA_CONF_FILE=overlay-pdn-nrf91-ipv4.conf\n```\n\n----------------------------------------\n\nTITLE: Including SHA256 Library Sources in Zephyr CMake\nDESCRIPTION: This snippet includes the necessary sources for SHA256 hashing based on the selected configuration option. Similar to the ECDSA snippet, it checks for multiple configuration flags indicating which SHA256 implementation to include. If no valid configuration is chosen, a fatal error message is displayed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bootloader/bl_crypto/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_SB_CRYPTO_OBERON_SHA256)\n  zephyr_library_sources(bl_crypto_oberon_hash.c)\nelleif(CONFIG_SB_CRYPTO_CC310_SHA256)\n  zephyr_library_sources(\n    bl_crypto_cc310_hash.c\n    bl_crypto_cc310_common.c\n    )\nelleif(CONFIG_SB_CRYPTO_CLIENT_SHA256)\n  zephyr_library_sources(../bl_crypto_client/bl_crypto_client.c)\nelleif(CONFIG_SB_CRYPTO_NO_SHA256 OR CONFIG_SB_CRYPTO_NONE)\n  # Do nothing\nelseif(CONFIG_SB_CRYPTO_PSA_SHA512)\n  zephyr_library_sources(bl_crypto_sha512.c)\nelse()\n  message(FATAL_ERROR \"No hash implementation chosen for bootloader.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Year-day Schedule using Chip-Tool\nDESCRIPTION: This command sets a Year-day schedule for the door lock using the chip-tool, specifying the schedule index, user index, start and end times in Epoch Time, destination ID, and endpoint ID. It configures a schedule for a user to access the door lock during a specific time period of the year.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n\"./chip-tool doorlock set-year-day-schedule 1 2 1716786000 1717045200 1 1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr and Nordic SDK Project with CMake\nDESCRIPTION: The script sets the minimum required CMake version and locates the Zephyr package using the ZEPHYR_BASE environment variable. The project is entitled 'entropy_nrf53_cpunet', and source files 'src/main.c' and 'src/entropy_ser.c' are added to the target 'app' within the Nordic SDK CMake application context.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/entropy_nrf53/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(entropy_nrf53_cpunet)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n  src/entropy_ser.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Accessing Power Manager Error State in C\nDESCRIPTION: This snippet shows how to access the error state of the Power Manager module. It uses the MODULE_STATE_ERROR enumerator from the module_state_event struct to indicate an error state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/power_manager.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nMODULE_STATE_ERROR\n```\n\n----------------------------------------\n\nTITLE: Configuring SMS Test Project with CMake for nRF Connect SDK\nDESCRIPTION: CMake configuration file that sets up an SMS test project. It specifies the minimum CMake version, finds the Zephyr package, generates a test runner, handles CMock configurations for nrf_modem_at.h, and adds the necessary source files and include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/sms/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2021 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(sms_test)\n\n# generate runner for the test\ntest_runner_generate(src/sms_test.c)\n\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem_at.h\n\t     FUNC_EXCLUDE \".*nrf_modem_at_scanf\"\n\t     FUNC_EXCLUDE \".*nrf_modem_at_printf\"\n\t     WORD_EXCLUDE \"__nrf_modem_(printf|scanf)_like\\(.*\\)\")\n\n# When mocking nrf_modem_at then nrf_modem/include must manually be added\n# because CONFIG_NRF_MODEM_LINK_BINARY=n\nzephyr_include_directories(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/)\n\n# add test file\ntarget_sources(app PRIVATE src/sms_test.c)\n```\n\n----------------------------------------\n\nTITLE: Testing Throughput Performance\nDESCRIPTION: Demonstrates how to use the 'dect perf' command for testing throughput performance, including basic usage and HARQ testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndect rssi_scan -c 0\ndect sett -t 39\ndect perf -s -t 15 --channel 1671\ndect perf -s -t -1 --channel 1671\ndect perf -c --c_gap_subslots 3 --c_tx_mcs 4 --c_slots 4 --s_tx_id 39 -t 10 --channel 1671\ndect perf stop\ndect perf -s -t -1 -a --s_harq_feedback_tx_delay_subslots 2 --s_harq_feedback_tx_rx_delay_subslots 3 --channel 1671\ndect perf -c --c_gap_subslots 4 --c_tx_mcs 4 --c_slots 4 --s_tx_id 39 -t 12 --c_harq_feedback_rx_delay_subslots 2 --c_harq_feedback_rx_subslots 3 --c_harq_process_nbr_max 7 -a --channel 1671\n```\n\n----------------------------------------\n\nTITLE: XSMS Set Command Syntax\nDESCRIPTION: Basic syntax for the XSMS set command used to start/stop SMS functionality and send messages. Supports operations for stopping (0), starting (1), and sending (2) SMS messages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SMS_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT\nCODE:\n```\n#XSMS=<op>[,<number>,<text>]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Zephyr Project with CMake\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.20.0 and ensures that the Zephyr project is included using the find_package command. It checks whether the build is a sysbuild and throws a fatal error if it is not, instructing the user to use the --sysbuild argument with the west build command. It sets up a project called 'idle_gpio' and specifies 'src/main.c' as the source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_gpio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n\nproject(idle_gpio)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Mesh Light Dimmer Project\nDESCRIPTION: This CMake snippet sets up the build configuration for a mesh light dimmer project. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, and sets up source files and include directories for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/light_dimmer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(mesh_light_dimmer)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/model_handler.c)\ntarget_include_directories(app PRIVATE include)\n\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Host Core Expected Output Log\nDESCRIPTION: The console output expected from the host core after programming the sample, showing configuration events, measurement events, and statistics calculations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v2.7.99-ncs1-17-gc3208e7ff49d  ***\nEvent Manager Proxy demo started\n[00:00:00.284,881] <inf> event_manager: e:config_event init_val_1=3\n[00:00:00.285,430] <inf> event_manager: e:measurement_event val1=3 val2=3 val3=3\n[00:00:00.785,675] <inf> event_manager: e:measurement_event val1=3 val2=6 val3=9\n[00:00:01.285,949] <inf> event_manager: e:measurement_event val1=3 val2=9 val3=18\n[00:00:01.786,254] <inf> event_manager: e:measurement_event val1=3 val2=12 val3=30\n[00:00:02.286,560] <inf> event_manager: e:measurement_event val1=3 val2=15 val3=45\n[00:00:02.286,682] <inf> event_manager: e: control_event\n[00:00:02.286,682] <inf> stats: Control event count: 1\n[00:00:02.787,017] <inf> event_manager: e:measurement_event val1=-3 val2=12 val3=57\n[00:00:03.287,322] <inf> event_manager: e:measurement_event val1=-3 val2=9 val3=66\n[00:00:03.787,597] <inf> event_manager: e:measurement_event val1=-3 val2=6 val3=72\n[00:00:04.287,872] <inf> event_manager: e:measurement_event val1=-3 val2=3 val3=75\n[00:00:04.788,177] <inf> event_manager: e:measurement_event val1=-3 val2=0 val3=75\n[00:00:04.788,208] <inf> stats: Average value3: 45\n[00:00:05.288,452] <inf> event_manager: e:measurement_event val1=-3 val2=-3 val3=72\n[00:00:05.788,726] <inf> event_manager: e:measurement_event val1=-3 val2=-6 val3=66\n[00:00:06.289,031] <inf> event_manager: e:measurement_event val1=-3 val2=-9 val3=57\n[00:00:06.789,306] <inf> event_manager: e:measurement_event val1=-3 val2=-12 val3=45\n[00:00:07.289,611] <inf> event_manager: e:measurement_event val1=-3 val2=-15 val3=30\n[00:00:07.289,733] <inf> event_manager: e: control_event\n[00:00:07.289,733] <inf> stats: Control event count: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for BSIM Components\nDESCRIPTION: Adds include directories for BSIM (Bluetooth Simulator) components, specifically for utility and physical communication libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/bluetooth/bsim/nrf_auraconfig/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(\n  ${BSIM_COMPONENTS_PATH}/libUtilv1/src/\n  ${BSIM_COMPONENTS_PATH}/libPhyComv1/src/\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Negative Tests Project with CMake\nDESCRIPTION: Sets up the build environment for flash driver negative tests. It requires CMake version 3.20.0 or higher, locates the Zephyr package, defines the project name, and includes all source files from the Zephyr negative tests directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/flash/negative_tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(flash_negative_tests)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/flash/negative_tests/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Initializing DFU Target in C\nDESCRIPTION: Initialize the specific DFU target using the image type and number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_target.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ndfu_target_init(image_type, image_number);\n```\n\n----------------------------------------\n\nTITLE: Building MoSh with Modem Trace Flash Support for nRF91 Series\nDESCRIPTION: Command for building the MoSh sample for an nRF91 Series DK with modem trace flash backend support using the nrf91-modem-trace-ext-flash snippet.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nwest build -p -b *board_target* -- -Dmodem_shell_SNIPPET=\"nrf91-modem-trace-ext-flash\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up UART Interfaces for nRF9160 and nRF52840\nDESCRIPTION: This console code block outlines the required connections between the nRF9160 and nRF52840 using UART interfaces. It specifies which pins are to be connected to each other for serial communication. Dependencies include having the correct hardware setup for the nRF9160 DK and nRF52840 SoC. The code block itself is a schematic representation and does not produce direct programmatic inputs or outputs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/connecting_soc.txt#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n   /*\n      | nRF9160     |                            |    nRF52840    |\n      | UART 2      |                            | UART1          |\n      | RTS   P0.17 | -- nRF interface line 0 -- | P0.17  CTS     |\n      |       P0.18 | -- nRF interface line 1 -- | P0.20          |\n      |       P0.19 | -- nRF interface line 2 -- | P0.15          |\n      | RX    P0.21 | -- nRF interface line 3 -- | P0.22  TX      |\n      | CTS   P0.22 | -- nRF interface line 4 -- | P1.04  RTS     |\n      | TX    P0.23 | -- nRF interface line 5 -- | P1.02  RX      |\n      |       COEX0 | -- nRF interface line 6 -- | P1.13          |\n      |       COEX1 | -- nRF interface line 7 -- | P1.11          |\n      |       COEX2 | -- nRF interface line 8 -- | P1.15          |\n      |       P0.24 | -- nRF interface line 9 -- | P0.18 (nRESET) | (in v0.14.0 or later)\n   */\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysbuild for Direct-XIP Mode\nDESCRIPTION: Sysbuild configuration options for enabling QSPI XIP split image in direct-XIP mode without network core support. Enables MCUboot in direct-XIP mode and external flash secondary partitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_8\n\nLANGUAGE: cfg\nCODE:\n```\nSB_CONFIG_BOOTLOADER_MCUBOOT=y\nSB_CONFIG_MCUBOOT_MODE_DIRECT_XIP=y\nSB_CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y\nSB_CONFIG_QSPI_XIP_SPLIT_IMAGE=y\n```\n\n----------------------------------------\n\nTITLE: HID Keymap Configuration in C\nDESCRIPTION: Sample configuration showing button ID to HID usage ID mapping for keyboard keys. Defines the hid_keymap array which maps hardware key IDs to HID report and usage IDs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/hid_state.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <caf/key_id.h>\n\n#include \"hid_keymap.h\"\n#inclue \"fn_key_id.h\"\n\nstatic const struct hid_keymap hid_keymap[] = {\n\t{ KEY_ID(0x00, 0x01), 0x0014, REPORT_ID_KEYBOARD_KEYS }, /* Q */\n\t{ KEY_ID(0x00, 0x02), 0x001A, REPORT_ID_KEYBOARD_KEYS }, /* W */\n\t{ KEY_ID(0x00, 0x03), 0x0008, REPORT_ID_KEYBOARD_KEYS }, /* E */\n\t{ KEY_ID(0x00, 0x04), 0x0015, REPORT_ID_KEYBOARD_KEYS }, /* R */\n\t{ KEY_ID(0x00, 0x05), 0x0018, REPORT_ID_KEYBOARD_KEYS }, /* U */\n\n\t...\n\n\t{ FN_KEY_ID(0x06, 0x02), 0x0082, REPORT_ID_SYSTEM_CTRL },   /* sleep */\n\t{ FN_KEY_ID(0x06, 0x03), 0x0196, REPORT_ID_CONSUMER_CTRL }, /* internet */\n};\n```\n\n----------------------------------------\n\nTITLE: Set xyL State (Acknowledged)\nDESCRIPTION: This shell command sets the Light xyL state value of the bound server and waits for a response.  It takes the lightness, x, and y values as input, and optionally a transition time and delay.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl set <Light> <X> <Y> [TransTime(ms) [Delay(ms)]]\n\tSet the Light xyL state value and wait for a response.\n\n\t* ``Light`` - Lightness level to set.\n\t* ``X`` - x level to set.\n\t* ``Y`` - y level to set.\n\t* ``TransTime`` - If present, defines the transition time in the message in milliseconds.\n\t* ``Delay`` - If present, defines the delay in the message in milliseconds.\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with Zephyr Native TCP/IP Stack\nDESCRIPTION: This snippet compiles the MoSh sample for nRF91 Series DK to use the Zephyr native TCP/IP stack by specifying the appropriate configuration file for non-offloading.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_46\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=overlay-non-offloading.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF70 Series WiFi in Sysbuild\nDESCRIPTION: Kconfig options for configuring nRF70 Series WiFi operating modes and firmware storage options at the sysbuild level.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_sysbuild.rst#2025-04-21_snippet_5\n\nLANGUAGE: kconfig\nCODE:\n```\nSB_CONFIG_WIFI_NRF70\nSB_CONFIG_WIFI_NRF70_SYSTEM_MODE\nSB_CONFIG_WIFI_NRF70_SCAN_ONLY\nSB_CONFIG_WIFI_NRF70_RADIO_TEST\nSB_CONFIG_WIFI_NRF70_SYSTEM_WITH_RAW_MODES\nSB_CONFIG_WIFI_PATCHES_EXT_FLASH_DISABLED\nSB_CONFIG_WIFI_PATCHES_EXT_FLASH_XIP\nSB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE\n```\n\n----------------------------------------\n\nTITLE: Installing suit-generator with pip\nDESCRIPTION: Command to install the suit-generator Python package using pip. This package provides tools for signing SUIT envelopes outside of the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_signing.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install modules/lib/suit-generator\n```\n\n----------------------------------------\n\nTITLE: Configuring System Workqueue Stack Size in Kconfig\nDESCRIPTION: Increases the system workqueue stack size to 2048 to prevent stack overflows after booting the nRF5340 DK in the Fast Pair Input Device sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=2048\n```\n\n----------------------------------------\n\nTITLE: Adding Wi-Fi Credentials via Shell Command\nDESCRIPTION: Shell command for adding Wi-Fi network credentials including SSID, security mode, and password. The security mode is specified as a number corresponding to different authentication methods like WPA2-PSK, SAE, etc.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/wifi_credentials_shell.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwifi cred add -s NetworkSSID -k SecurityMode -p NetworkPassword\n```\n\n----------------------------------------\n\nTITLE: Container for Firmware Update Binaries\nDESCRIPTION: This snippet mentions the automatic packaging of both application and network core binaries into a zip container for ease of updates during simultaneous image management. It describes the output format expected by update tools.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/serial_recovery.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nThe build system will automatically place both the application core and the network core update binaries into a container package named :file:`dfu_application.zip`.\n```\n\n----------------------------------------\n\nTITLE: Using Power Pin Control via Shell\nDESCRIPTION: Example of using the slmsh command to toggle the power pin for sleep/wake functionality of the SLM device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_slm.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ slmsh powerpin\n[00:00:17.973,510] <inf> mdm_slm: Enable power pin\n[00:00:18.078,887] <inf> mdm_slm: Disable power pin\n\nuart:~$ slmsh powerpin\n[00:00:33.038,604] <inf> mdm_slm: Enable power pin\n[00:00:33.143,951] <inf> mdm_slm: Disable power pin\nReady\n\n[00:00:34.538,513] <inf> app: Data received (len=7): Ready\nuart:~$\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr Project\nDESCRIPTION: This snippet sets up the CMake environment for a project targeting a Nordic Semiconductor device using the Zephyr RTOS. It ensures that the required CMake version is employed, locates the Zephyr package, and defines the project source files. The ZEPHYR_BASE environment variable must be set to the Zephyr base directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/empty_app_core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(empty_app_core)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Exporting Zephyr CMake package\nDESCRIPTION: Command to export the Zephyr CMake package which loads the boilerplate code for building NCS applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwest zephyr-export\n```\n\n----------------------------------------\n\nTITLE: External Project Configuration\nDESCRIPTION: Configures Edge Impulse as an external project with custom build settings, compiler options, and dependencies. Includes download and build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/edge_impulse/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nExternalProject_Add(edge_impulse_project\n    URL              ${EI_URI_LIST}\n    HTTP_HEADER      \"Accept: application/zip\"\n                     ${EI_API_KEY_HEADER}\n    DOWNLOAD_EXTRACT_TIMESTAMP True\n    PREFIX           ${EDGE_IMPULSE_DIR}\n    SOURCE_DIR       ${EDGE_IMPULSE_SOURCE_DIR}\n    BINARY_DIR       ${EDGE_IMPULSE_BINARY_DIR}\n    STAMP_DIR        ${EDGE_IMPULSE_STAMP_DIR}\n    DOWNLOAD_NAME    edge_impulse_src.zip\n    BUILD_BYPRODUCTS ${EDGE_IMPULSE_LIBRARY}\n                     ${edge_impulse_all_headers}\n    PATCH_COMMAND    ${CMAKE_COMMAND} -E copy\n                     ${CMAKE_CURRENT_LIST_DIR}/CMakeLists.ei.template\n                     ${EDGE_IMPULSE_SOURCE_DIR}/CMakeLists.txt\n    DEPENDS          zephyr_interface\n    CMAKE_ARGS -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n               -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n               -DCMAKE_AR=${CMAKE_AR}\n               -DCMAKE_RANLIB=${CMAKE_RANLIB}\n               -DEI_COMPILE_DEFINITIONS=$<TARGET_PROPERTY:zephyr_interface,INTERFACE_COMPILE_DEFINITIONS>\n               -DEI_INCLUDE_DIRECTORIES=$<TARGET_PROPERTY:zephyr_interface,INTERFACE_INCLUDE_DIRECTORIES>\n               -DEI_SYSTEM_INCLUDE_DIRECTORIES=$<TARGET_PROPERTY:zephyr_interface,INTERFACE_SYSTEM_INCLUDE_DIRECTORIES>\n               -DEI_LIBRARY_NAME=edge_impulse\n    INSTALL_COMMAND \"\"\n    BUILD_ALWAYS True\n    USES_TERMINAL_BUILD True\n)\n```\n\n----------------------------------------\n\nTITLE: Logging Output from BME68X Sensor\nDESCRIPTION: This snippet illustrates the expected UART output after the BME68X sensor is programmed and running. It shows the initialization and sample readings for temperature, pressure, humidity, and indoor air quality (IAQ).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/sensor/bme68x_iaq/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n*** Booting Zephyr OS build v3.2.99-ncs1-1531-gaf18f6b63608 ***\n[00:00:01.285,339] <inf> app: App started\n[00:00:07.287,658] <inf> app: temp: 28.240385; press: 100043.570312; humidity: 19.981348; iaq: 50\n[00:00:10.301,391] <inf> app: temp: 28.220613; press: 100039.585937; humidity: 19.983814; iaq: 50\n[00:00:13.315,124] <inf> app: temp: 28.188013; press: 100040.007812; humidity: 20.015941; iaq: 50\n```\n\n----------------------------------------\n\nTITLE: Generating Key Pair and CSR on nRF91 Device\nDESCRIPTION: Command to generate a key pair and obtain a Certificate Signing Request (CSR) on an nRF91 series device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnrfcredstore <serial port> generate <sec tag> device_cert.csr.der\n```\n\n----------------------------------------\n\nTITLE: Ending continuous receive mode with lend command in Shell\nDESCRIPTION: Exits continuous receive mode and prints statistics about received packets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ncustom lend\n```\n\n----------------------------------------\n\nTITLE: DULT Support Configuration in Fast Pair FMDN\nDESCRIPTION: Kconfig options for enabling DULT (Device Unwanted Location Tracking) support and motion detector in Fast Pair FMDN implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_15\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_FAST_PAIR_FMDN_DULT\nCONFIG_BT_FAST_PAIR_FMDN_DULT_MOTION_DETECTOR\n```\n\n----------------------------------------\n\nTITLE: Adding Test Events Source to Build\nDESCRIPTION: CMake directive to include test_events.c source file in the application build. Uses target_sources() to add the file from the current source directory to the 'app' target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/caf/sensor_manager/src/events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_events.c)\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion (CMake)\nDESCRIPTION: This CMake snippet conditionally includes the `flash_patch.c` source file in the build process. If the `CONFIG_DISABLE_FLASH_PATCH` configuration option is enabled, the source file is added using the `zephyr_sources` command. This allows for disabling flash patching functionality at compile time.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/flash_patch/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_DISABLE_FLASH_PATCH)\n  zephyr_sources(flash_patch.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting KConfig Option for Bluetooth Mesh\nDESCRIPTION: Configuration option required in prj.conf files for Bluetooth Mesh samples supporting nRF5340 to enable Tinycrypt ECC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.4.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_TINYCRYPT_ECC\n```\n\n----------------------------------------\n\nTITLE: AT Command Update Format\nDESCRIPTION: Modified XFOTA command parameters to use integer PDN ID instead of APN name\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.8.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nUpdated the `#XFOTA` command to accept an integer parameter to specify the PDN ID to be used for the download, instead of the APN name.\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Cloud Location Result in Location Library\nDESCRIPTION: Demonstrates how to handle an unknown result from cloud location services. The location_cloud_location_ext_result_set() function is called with LOCATION_EXT_RESULT_UNKNOWN.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/location.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nlocation_cloud_location_ext_result_set(\\nLOCATION_EXT_RESULT_UNKNOWN)\n```\n\n----------------------------------------\n\nTITLE: Displaying Build File Types and Usage Scenarios in RST\nDESCRIPTION: This RST table shows the different types of build files generated for Thingy:91 X firmware and the scenarios in which they are used, including file formats and programming methods.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy91x/thingy91x_building_programming.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n+--------------------------+----------------------------------------+----------------------------------------------------------------+\n| File                     | File format                            | Programming scenario                                           |\n+==========================+========================================+================================================================+\n|:file:`merged.hex`        | Full image, HEX format                 | Using an external debug probe and nrfutil device.              |\n+--------------------------+----------------------------------------+----------------------------------------------------------------+\n|:file:`zephyr.signed.hex` | MCUboot compatible image, HEX format   | Using the built-in bootloader and nrfutil device.              |\n+--------------------------+----------------------------------------+----------------------------------------------------------------+\n|:file:`app_update.bin`    | MCUboot compatible image, binary format|* Using the built-in bootloader and mcumgr command-line tool.   |\n|                          |                                        |* For FOTA updates.                                             |\n+--------------------------+----------------------------------------+----------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: UDP Receive Data Example\nDESCRIPTION: Example of a UDP data notification showing received data from a specific IP address and port.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_22\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPDATA: 7,\"192.168.1.100\",24210\nTest OK\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup for I2S Speed Test\nDESCRIPTION: This snippet sets up a CMake project for an I2S speed test. It finds the Zephyr package, defines the project name as 'i2s_speed', and includes source files from a specified directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/i2s/i2s_speed/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(i2s_speed)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/i2s/i2s_speed/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring sysbuild with MCUboot and Network Core Support\nDESCRIPTION: Configuration options for enabling MCUboot, external flash support, and network core functionality with swap-using-move feature.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/qspi_xip_guide_nrf5340.rst#2025-04-21_snippet_0\n\nLANGUAGE: cfg\nCODE:\n```\nSB_CONFIG_BOOTLOADER_MCUBOOT=y\nSB_CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y\nSB_CONFIG_NETCORE_APP_UPDATE=y\nSB_CONFIG_SECURE_BOOT_NETCORE=y\nSB_CONFIG_QSPI_XIP_SPLIT_IMAGE=y\n\n# This will enable the hci_ipc image for the network core\nSB_CONFIG_NETCORE_HCI_IPC=y\n```\n\n----------------------------------------\n\nTITLE: App Target Include Directories\nDESCRIPTION: This snippet specifies the include directories for the app target, making the Zephyr network library available to the application. This is essential for enabling functionalities dependent on the networking capabilities of the Zephyr RTOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PUBLIC ${ZEPHYR_BASE}/subsys/net/lib)\n```\n\n----------------------------------------\n\nTITLE: Referencing RSCS Header and Source Files in C\nDESCRIPTION: Specifies the locations of the header and source files for the Running Speed and Cadence Service implementation in the nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/rscs.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n| Header file: :file:`include/bluetooth/services/rscs.h`\n| Source file: :file:`subsys/bluetooth/services/rscs.c`\n```\n\n----------------------------------------\n\nTITLE: Kconfig Configuration for UDP Data Upload Iterations\nDESCRIPTION: Configuration option for specifying the number of data transmissions to the server in the UDP sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.6.0.rst#2025-04-21_snippet_7\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_UDP_DATA_UPLOAD_ITERATIONS\n```\n\n----------------------------------------\n\nTITLE: Configuring Runner in CMakeLists.txt\nDESCRIPTION: Demonstrates how to permanently specify a flash runner in an application's CMakeLists.txt file, ensuring that the specified runner (nrfjprog in this example) is used for all flash operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/programming.rst#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BOARD_FLASH_RUNNER nrfjprog)\n```\n\n----------------------------------------\n\nTITLE: Reading OTP Value from UICR Registers using TF-M\nDESCRIPTION: This snippet demonstrates the use of TF-M IOCTL to read an OTP value from the UICR registers. The function `tfm_platform_mem_read` is utilized in the process. It requires the TF-M platform to be set up, specifically with the `CONFIG_TFM_PARTITION_PLATFORM` Kconfig option to enable the services.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/tfm/tfm_ioctl_api.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <tfm_ioctl_api.h>\n\nvoid read_otp_value(void) {\n    uint32_t otp_value;\n    int err;\n    enum tfm_platform_err_t plt_err;\n\n    plt_err = tfm_platform_mem_read(buf, (intptr_t)&NRF_UICR_S->OTP[0], sizeof(otp_value), &err);\n    if (plt_err != TFM_PLATFORM_ERR_SUCCESS || err != 0) {\n        /* Handle error */\n    }\n\n    printk(\"OTP[0]: %u\\n\", otp_value);\n}\n```\n\n----------------------------------------\n\nTITLE: GPIO Callback and Work Structure in C\nDESCRIPTION: Core structures used for handling GPIO interrupts and delayed work processing for selector state changes\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/selector.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct gpio_callback gpio_cb;\nstruct k_work_delayable work;\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Integration Test Project\nDESCRIPTION: Defines the project name for the integration test suite focused on memory pointer storage, and includes a custom test template CMake configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/suit_memptr_storage/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(integration_test_suit_memptr_storage)\ninclude(../cmake/test_template.cmake)\n```\n\n----------------------------------------\n\nTITLE: Disabling UART Peripheral using DeviceTree\nDESCRIPTION: DeviceTree configuration to disable the UART1 peripheral for reducing power consumption by disabling serial logging.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/low_power_configuration.rst#2025-04-21_snippet_3\n\nLANGUAGE: devicetree\nCODE:\n```\n&uart1 {\n    status = \"disabled\";\n};\n```\n\n----------------------------------------\n\nTITLE: Example Heart Rate Measurement Output\nDESCRIPTION: This snippet shows an example of the output received in the terminal window when a Heart Rate Measurement notification is received. It provides details about the sensor's body location, the format of the heart rate measurement value, sensor contact information, and the heart rate measurement value itself.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_and_peripheral_hr/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"Heart Rate Sensor body location: Chest\\nHeart Rate Measurement notification received:\\n\\n      Heart Rate Measurement Value Format: 8 - bit\\n      Sensor Contact detected: 1\\n      Sensor Contact supported: 1\\n      Energy Expended present: 0\\n      RR-Intervals present: 0\\n\\n      Heart Rate Measurement Value: 128 bpm\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.20.0.  This ensures that the project can be built with a compatible version of CMake.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/throughput/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Library for cJSON\nDESCRIPTION: This snippet defines the cJSON library within the Zephyr build system. It utilizes the `zephyr_library_named` function to declare the library and `zephyr_include_directories` to specify the directories containing the header files for the library. This sets up the necessary context for compiling the library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/cjson/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_named(cjson)\\nzephyr_include_directories(\\n\\t${ZEPHYR_CJSON_MODULE_DIR}\\n\\tinclude\\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Edge Impulse Data Forwarder (CMake)\nDESCRIPTION: Sets up the CMake project for the Edge Impulse data forwarder. It requires CMake 3.20.0 or higher, finds the Zephyr package, and adds the main.c source file to the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/edge_impulse/data_forwarder/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Edge Impulse data forwarder\")\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Uploading a File to Filesystem with mcumgr\nDESCRIPTION: This command uploads a specified local file to the remote filesystem, which should be properly mounted before executing this command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ mcumgr -c acm0 fs upload foo.txt /lfs/foo.txt\n```\n\n----------------------------------------\n\nTITLE: Setting IEEE 802.15.4 channel for testing\nDESCRIPTION: This command changes the IEEE 802.15.4 radio channel to listen on for testing the sniffer application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\"channel *23*\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom License Detectors\nDESCRIPTION: This command-line option allows users to specify a comma-separated list of license detectors to be used by the 'west ncs-sbom' command. This allows for customizing the license detection process by selecting specific detectors based on project requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"--license-detectors spdx-tag,scancode-toolkit\"\n```\n\n----------------------------------------\n\nTITLE: Defining RST Content Structure for Bluetooth Mesh Model Documentation\nDESCRIPTION: This RST code snippet defines the structure and content for documenting Bluetooth Mesh XYZ Server and Client models. It includes sections for overview, configuration, states, extended models, persistent storage, and API documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/mesh_model_server_client_template.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _bt_mesh_model_server_client_template:\n\nMesh server and client model template\n#####################################\n\n.. contents::\n   :local:\n   :depth: 2\n\n.. tip::\n   Use this template to create pages that describe the server or the client models of the related mesh model, or both.\n   To create the main mesh model page, use the :ref:`bt_mesh_model_main_template`.\n   Make sure the server and client model pages are nested under this main mesh model page under the ``.. toctree::`` tag.\n\n.. note::\n   Sections with * are optional.\n\nThe XYZ Server/XYZ Client provides information about the disco light.\nThe data is split into the following states: location and color.\n\nThe XYZ Server adds the following model instances in the composition data:\n\n* XYZ Server\n* XYZ Setup Server\n\nThe XYZ Server allows observation of the location states, as it only exposes get-messages for the location states.\n\n.. tip::\n   This is an overview section.\n   When describing a server model:\n\n   * Start with a general purpose of the server model.\n   * Provide basic information about the states, if the server model has any.\n   * List the model instances of the server model (if there are more than one).\n     Say what they allow in relation to states and to each other, describe usage criteria and corner cases.\n\n   When describing a client model:\n\n   * Describe the client model role and purpose in relation to the server model.\n   * Clearly explain the differences in operation of the client model as compared with the server model.\n\n   Because of the character of the client models, the description for client models will be shorter than the one for server models.\n\nConfiguration*\n**************\n\nThe following configuration parameters are associated with the XYZ Server/XYZ Client model:\n\n* ``:kconfig:PARAM_1`` - Short description of the first parameter.\n* ``:kconfig:PARAM_2`` - Short description of the second parameter.\n\n.. tip::\n   List Kconfig options associated with the model, and link to them using the `:kconfig:option:` reference.\n   This section is optional, because not all models have Kconfig parameters that allow configuration.\n   Do not go into details here, as the link will allow the reader to get the required information.\n   However, do provide a short description of each option.\n\nStates\n******\n\n.. note::\n   This section is valid for server models only.\n\nThe XYZ Server model contains the following states:\n\nGeneric Power On: `bt_mesh_template_location_state`\n    The Generic Power On state controls the default value of the disco light when the device powers up.\n    It can have the following values:\n\n    * `Value_1` - The disco light powers up and starts blinking.\n    * `Value_2` - The disco light powers up and starts with solid lighting.\n\n    Changes to the state should be exposed to the model through the XYZ callback.\n\n.. tip::\n   Describe each state using the definition list format (with header and indented definition).\n   Mention when it is used and why.\n   Provide information about variables, parameters, and values of the state.\n   If needed, describe the callback used for exposing the changes to the model.\n\nState transition patterns*\n==========================\n\nSee the following figure for the breakdown of the state transition patterns.\n\n.. tip::\n   If needed, visualize the transition patterns with an SVG image or a table.\n\nExtended models\n***************\n\n.. tip::\n   Not all models have extended models.\n   If a model does not have any extended model, write *None.* in this section.\n\nThe XYZ Server/XYZ Client extends the following models:\n\n* Model 1\n* Model 2\n\nThe Generic Power On state is bound to the Generic OnOff state of the Model 1 through its power up behavior.\nNo other state bindings are present, and the callbacks are forwarded to the application as they are.\n\n.. tip::\n   List the models that are extended by the model you are describing, and link to these models.\n   A model that extends another inherits the model's functionality and gives context to its states and messages.\n   The description that follows the list describes how the extended models are handled and how they relate.\n\nPersistent storage\n******************\n\n.. tip::\n   Not all models store information persistently.\n   If a model does not use persistent storage, write *None.* in this section.\n\nThe information about the Generic Power On state is stored persistently.\n\n.. tip::\n   Describe what information is stored persistently.\n   You can also specify where it is stored and what it is used for.\n\n\nAPI documentation\n*****************\n\n| Header file: :file:`path/to/the/header/file`\n| Source file: :file:`path/to/the/source/file`\n\n.. tip::\n   Provide paths to the header and source files of the server model API.\n   Include also the doxygen group for the server model you are describing.\n```\n\n----------------------------------------\n\nTITLE: Checking Flash IPUC Driver Creation for Cache in C\nDESCRIPTION: Checks if it's possible to create a flash IPUC driver for cache based on the minimum absolute address, requiring a spare instance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nflash_cache_ipuc_check()\n```\n\n----------------------------------------\n\nTITLE: Submitting Initial Module State Event in main.c\nDESCRIPTION: Code required to submit the first module_state_event in the main.c file. This defines the current module as 'main' and includes the necessary header for module state events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/caf_overview.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define MODULE main\n#include <caf/events/module_state_event.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for nRF WiFi Radio Test Application\nDESCRIPTION: This CMake configuration sets up a build environment for a Nordic Semiconductor WiFi radio test application. It specifies the minimum CMake version, finds the Zephyr package, defines include directories, source files, and links against the nrf-wifi-osal library. The application includes components for radio testing and FICR (Factory Information Configuration Registers) programming.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_radio_test)\n\nset(NRF_WIFI_DRV_BASE ${WEST_TOPDIR}/nrf/drivers/wifi/nrf700x)\n\ntarget_include_directories(app PRIVATE\n\tinc\n)\n\ntarget_sources(app PRIVATE\n\tsrc/nrf_wifi_radio_test_main.c\n\tsrc/nrf_wifi_radio_test_shell.c\n\tsrc/nrf_wifi_radio_ficr_shell.c\n\tsrc/ficr_prog.c\n)\n\ntarget_link_libraries(app PRIVATE nrf-wifi-osal)\n```\n\n----------------------------------------\n\nTITLE: AT Command: Remove Security Tags\nDESCRIPTION: This AT command removes the previous security tags from the modem. The `<TAG>` placeholder must be replaced with the actual security tag value. This ensures a clean slate before provisioning new credentials.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/provisioning.rst#2025-04-21_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nAT%CMNG=3,<TAG>,3\nAT%CMNG=3,<TAG>,4\n```\n\n----------------------------------------\n\nTITLE: Generating Custom ZAP Configuration using West Command\nDESCRIPTION: Command for generating custom ZAP data model files using the west tool. This command must be run to configure custom data models by selecting the specified ZAP file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/matter_snippets_note.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest zap-generate\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SD Card Test Project\nDESCRIPTION: Sets up the CMake build configuration including minimum version requirement, Zephyr package dependency, project definition, source files, and include directories. Uses components from the nRF5340 audio application to test SD card functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/nrf5340_audio/sd_card/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(test_sd_card)\n\ntarget_sources(app\n\tPRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules/sd_card.c\n\tsrc/main.c\n\t)\n\ntarget_include_directories(app PRIVATE\n\t${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/\n  ${ZEPHYR_NRF_MODULE_DIR}/modules/fs/fatfs/include/\n)\n```\n\n----------------------------------------\n\nTITLE: Continuous OFDM TX Traffic Sequence in HT 11n Mode\nDESCRIPTION: Complete command sequence for running a continuous OFDM TX traffic test in HT 802.11n mode. The configuration uses channel 11, HT frame format, 4000 byte payload, 200 μs gap, and MCS7 data rate with long guard for a 72.8% duty cycle.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 11\nuart:~$ wifi_radio_test tx_pkt_tput_mode 1\nuart:~$ wifi_radio_test tx_pkt_preamble 2\nuart:~$ wifi_radio_test tx_pkt_mcs 7\nuart:~$ wifi_radio_test tx_pkt_len 4000\nuart:~$ wifi_radio_test tx_pkt_sgi 0\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num -1\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Including BMS Header File in C\nDESCRIPTION: Header file path for including the Bond Management Service (BMS) in a C project. This file contains the necessary declarations for using the BMS functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/bms.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <bluetooth/services/bms.h>\n```\n\n----------------------------------------\n\nTITLE: HTTP GET request (Non-TLS, Cellular)\nDESCRIPTION: Sends an HTTP GET request to retrieve the state of LED 1 via a non-TLS connection for cellular networks. It uses the `http` command with the GET method to the specified URL (replace <ip> with the actual IP address) to retrieve the LED state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n\"http GET http://<ip>:80/led/1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PDN Library Sources in CMake\nDESCRIPTION: Configures the Zephyr library sources for PDN functionality, with conditional inclusion of ESM error handling based on CONFIG_PDN_ESM_STRERROR flag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/pdn/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(pdn.c)\nzephyr_library_sources_ifdef(CONFIG_PDN_ESM_STRERROR esm.c)\n```\n\n----------------------------------------\n\nTITLE: Initializing SUPL with supl_init Function in C\nDESCRIPTION: The supl_init function, part of the SUPL client OS integration library, initializes the SUPL client library. It sets up the API and buffers necessary for the initialization and subsequently calls the supl_client_init function. This function call passes the required parameters to the SUPL client library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/supl_os_client.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n\"This is done by calling the :c:func:`supl_init` function of the SUPL client OS integration library.\\nThe function sets up the API and the buffers required for initializing the SUPL client library and invokes the :c:func:`supl_client_init` function with these parameters.\"\n```\n\n----------------------------------------\n\nTITLE: Matter: Chip-Tool Read By ID\nDESCRIPTION: This snippet shows how to read the custom NordicDevkit cluster attributes using the chip-tool by specifying the cluster ID, endpoint, and attribute ID. The command is used to verify attribute values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"any read-by-id 0xFFF1FC01 *attribute-id* 1 1\"\n```\n\n----------------------------------------\n\nTITLE: Scheduling DFU Target Update in C\nDESCRIPTION: Mark the downloaded image as ready for update/installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_target.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ndfu_target_schedule_update();\n```\n\n----------------------------------------\n\nTITLE: Inserting a Bluetooth LE Authentication PIN Code\nDESCRIPTION: Command syntax for entering the PIN code needed to authenticate a Bluetooth LE device during the pairing process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_12\n\nLANGUAGE: parsed-literal\nCODE:\n```\nmatter_bridge pincode *<ble_device_index>* *<ble_pincode>*\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot Kconfig Options in nRF SDK\nDESCRIPTION: This snippet presents a structured table containing Kconfig options for managing MCUboot images in the nRF Connect SDK. It defines various image-related configurations, including application, network core, and patches, necessary for building firmware that utilizes MCUboot's capabilities. Each option corresponds to settings that control the inclusion of specific components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/sysbuild_image_ids.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Image                | Value (if all enabled)         | Kconfig option (sysbuild)                       | Kconfig option (application/MCUboot)                       |\n+======================+================================+=================================================+============================================================+\n| Application          | 0                              | ``SB_CONFIG_MCUBOOT_APPLICATION_IMAGE_NUMBER``  | :kconfig:option:`CONFIG_MCUBOOT_APPLICATION_IMAGE_NUMBER`  |\n+----------------------+--------------------------------+-------------------------------------------------+------------------------------------------------------------+\n| Network core         | 1                              | ``SB_CONFIG_MCUBOOT_NETWORK_CORE_IMAGE_NUMBER`` | :kconfig:option:`CONFIG_MCUBOOT_NETWORK_CORE_IMAGE_NUMBER` |\n+----------------------+--------------------------------+-------------------------------------------------+------------------------------------------------------------+\n| nRF7x Wi-Fi patch    | 2                              | ``SB_CONFIG_MCUBOOT_WIFI_PATCHES_IMAGE_NUMBER`` | :kconfig:option:`CONFIG_MCUBOOT_WIFI_PATCHES_IMAGE_NUMBER` |\n+----------------------+--------------------------------+-------------------------------------------------+------------------------------------------------------------+\n| QSPI XIP split image | 3                              | ``SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER``     | :kconfig:option:`CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER`     |\n+----------------------+--------------------------------+-------------------------------------------------+------------------------------------------------------------+\n| MCUboot              | 4 (only set for MCUboot image) | ``SB_CONFIG_MCUBOOT_MCUBOOT_IMAGE_NUMBER``      | :kconfig:option:`CONFIG_MCUBOOT_MCUBOOT_IMAGE_NUMBER`      |\n+----------------------+--------------------------------+-------------------------------------------------+------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Library with Source File\nDESCRIPTION: This snippet defines a Zephyr library and includes a C source file. It uses the `zephyr_library` function to create the library and `zephyr_library_sources` to specify the source file to be compiled and linked into the library. The library will be named according to the context of where this CMake snippet is included.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/modem_battery/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(modem_battery.c)\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a table of contents in reStructuredText, specifying local contents and a depth of 2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. contents::\n   :local:\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: Updating Device Shadow in nRF Cloud using REST in C\nDESCRIPTION: Example of updating the device shadow state in nRF Cloud using the new REST API function nrf_cloud_rest_shadow_state_update from the nRF Cloud REST library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.8.0.rst#2025-04-21_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nstruct nrf_cloud_rest_context rest_ctx = { ... };\nchar *payload = \"{\\\"state\\\":{\\\"reported\\\":{\\\"temperature\\\":25}}}\";\nint err = nrf_cloud_rest_shadow_state_update(&rest_ctx, payload);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for nRF Cloud REST FOTA Sample Application\nDESCRIPTION: Sets up the CMake build environment for the nRF Cloud REST FOTA Sample application. It defines the minimum CMake version, locates the Zephyr package, configures project name, adds source files, and conditionally includes SMP reset functionality for specific board configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_rest_fota/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nRF_Cloud_REST_FOTA_Sample)\nzephyr_compile_definitions(PROJECT_NAME=${PROJECT_NAME})\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n\nif(CONFIG_NRF_CLOUD_FOTA_SMP AND CONFIG_BOARD_NRF9160DK_NRF9160_NS)\n  target_sources(app PRIVATE src/smp_reset.c)\nendif()\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Implementing Sensor Descriptor in Bluetooth Mesh\nDESCRIPTION: Example of initializing a sensor descriptor structure for a temperature sensor. The descriptor contains tolerance values, sampling type, measurement period, and update interval that help other mesh nodes interpret the sensor data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/sensor.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic const struct bt_mesh_sensor_descriptor temp_sensor_descriptor = {\n    .tolerance = {\n        .negative = BT_MESH_SENSOR_TOLERANCE_ENCODE(0.75f)\n        .positive = BT_MESH_SENSOR_TOLERANCE_ENCODE(3.5f)\n    },\n    .sampling_type = BT_MESH_SENSOR_SAMPLING_ARITHMETIC_MEAN,\n    .period = 300,\n    .update_interval = 50\n};\n\nstruct bt_mesh_sensor temp_sensor = {\n    .type = &bt_mesh_sensor_present_dev_op_temp,\n    .get = temp_get,\n    .descriptor = &temp_sensor_descriptor\n};\n```\n\n----------------------------------------\n\nTITLE: Start capturing packets for testing\nDESCRIPTION: The receive command makes the sniffer enter the RX state and starts capturing packets for testing the sniffer application. LED 1 will blink with shorter intervals.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\"receive\"\n```\n\n----------------------------------------\n\nTITLE: Building LwM2M Client for MCUboot Recovery Mode without Bootstrap\nDESCRIPTION: Command for building the LwM2M client sample for nRF9160 with MCUboot recovery mode without bootstrap. Uses multiple overlay configuration files including FOTA helper, AVSystem, LwM2M 1.1, and MCUmgr client settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/sample_description.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build  --pristine -b nrf9160dk/nrf9160/ns --  -DEXTRA_CONF_FILE=\"overlay-adv-firmware.conf;overlay-fota_helper.conf;overlay-avsystem.conf;overlay-lwm2m-1.1.conf;overlay-mcumgr_client.conf; overlay-mcumgr_reset.conf\" -DEXTRA_DTC_OVERLAY_FILE=\"nrf9160dk_mcumgr_client_uart2.overlay;nrf9160dk_recovery.overlay\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SUIT Storage Integration Test\nDESCRIPTION: Sets up CMake build configuration with minimum version requirement, finds Zephyr package, defines project name, and links required SUIT-related libraries. The configuration includes copyright information and license details for Nordic Semiconductor ASA.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/fetch_integrated_payload_flash/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2022 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_fetch_integrated_payload_flash)\ninclude(../cmake/test_template.cmake)\n\nzephyr_library_link_libraries(suit_storage_interface)\nzephyr_library_link_libraries(suit_execution_mode)\n```\n\n----------------------------------------\n\nTITLE: J-Link Configuration Script\nDESCRIPTION: Script template for configuring J-Link target settings with correct AP index\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_debugging.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvoid ConfigTargetSettings(void) {\\nJ-Link_CORESIGHT_AddAP(<Domain AP index>, CORESIGHT_AHB_AP);\\nCORESIGHT_IndexAHBAPToUse = <Domain AP index>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TF-M Logging Level in Kconfig\nDESCRIPTION: These Kconfig options control the logging level for TF-M, including an option to disable logging entirely.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_building.rst#2025-04-21_snippet_5\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_TFM_LOG_LEVEL=<level>\n# OR to disable logging\nCONFIG_TFM_LOG_LEVEL_SILENCE=y\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Forwarder for nRF53 Series\nDESCRIPTION: Adds a GPIO forwarder node to pass control over specific pins from the application core to the network core in nRF53 Series devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf2220.rst#2025-04-21_snippet_2\n\nLANGUAGE: devicetree\nCODE:\n```\n&gpio_fwd {\n   nrf2220-gpio-if {\n      gpios = <&gpio0 10 0>,   /* cs-gpios */\n              <&gpio0 8 0>;    /* md-gpios */\n   };\n   nrf2220-twi-if {\n      gpios = <&gpio0 26 0>,   /* TWIM_SDA */\n              <&gpio0 27 0>;   /* TWIM_SCL */\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Cleanup Response\nDESCRIPTION: Defines the CBOR data structure for the response to a cleanup request that erases the DFU partition and DFU cache partitions. It simply includes a return code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_14\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str)\"rc\"                          : (uint)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Static IP Configuration\nDESCRIPTION: This code snippet sets the default static IP configuration in the `prj.conf` file for networks lacking DHCP servers. Make sure to customize the IP address, netmask, and gateway for your network topology. These values are overridden if a DHCP server is present and accessible.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/sta/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nCONFIG_NET_CONFIG_MY_IPV4_ADDR=\\\"192.168.1.98\\\"\nCONFIG_NET_CONFIG_MY_IPV4_NETMASK=\\\"255.255.255.0\\\"\nCONFIG_NET_CONFIG_MY_IPV4_GW=\\\"192.168.1.1\\\"\n```\n\n----------------------------------------\n\nTITLE: Updated PM Static YAML Configuration for TF-M Storage\nDESCRIPTION: This snippet illustrates a refined version of the memory configuration for the tfm_storage partition after optimization, aligning it appropriately with the flash region size and redefining the size of the associated partitions for better memory usage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_services.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n    app:\n      address: 0x40000\n      end_address: 0xf8000\n      region: flash_primary\n      size: 0xb8000\n    tfm_nonsecure:\n      address: 0x40000\n      end_address: 0xf8000\n      orig_span: &id004\n      - app\n      region: flash_primary\n      size: 0xb8000\n      span: *id004\n    tfm_its:\n      address: 0xf8000\n      end_address: 0xfa000\n      inside:\n      - tfm_storage\n      placement:\n        before:\n        - tfm_otp_nv_counters\n      region: flash_primary\n      size: 0x2000\n    tfm_otp_nv_counters:\n      address: 0xfa000\n      end_address: 0xfc000\n      inside:\n      - tfm_storage\n      placement:\n        before:\n        - tfm_ps\n      region: flash_primary\n      size: 0x2000\n    tfm_storage:\n      address: 0xf8000\n      end_address: 0x100000\n      orig_span: &id006\n      - tfm_ps\n      - tfm_its\n      - tfm_otp_nv_counters\n      region: flash_primary\n      size: 0x8000\n      span: *id006\n```\n\n----------------------------------------\n\nTITLE: Continuous OFDM TX Traffic Sequence in HE-ER-SU 11ax Mode\nDESCRIPTION: Complete command sequence for running a continuous OFDM TX traffic test in HE-ER-SU 802.11ax mode. The configuration uses channel 100, HE-ERSU frame format, 1000 byte payload, 200 μs gap, MCS0 data rate, 3.2 μs guard interval, and 4xHELTF for an 85.5% duty cycle.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 100\nuart:~$ wifi_radio_test tx_pkt_tput_mode 4\nuart:~$ wifi_radio_test tx_pkt_mcs 0\nuart:~$ wifi_radio_test tx_pkt_len 1000\nuart:~$ wifi_radio_test he_ltf 2\nuart:~$ wifi_radio_test he_gi 2\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num -1\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Enabling Wi-Fi Location Tracking in Kconfig\nDESCRIPTION: Enables Wi-Fi location tracking. Disable CONFIG_LOCATION_TRACKING and all location tracking methods to completely disable location tracking. Requires the use of an nRF7002 companion chip. Defaults to disabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_19\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LOCATION_TRACKING_WIFI\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Volume Renderer Source\nDESCRIPTION: Adds the Bluetooth volume renderer implementation to the build sources if the corresponding Kconfig option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_rendering_and_capture/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_BT_VCP_VOL_REND)\ntarget_sources(app PRIVATE\n\t        ${CMAKE_CURRENT_SOURCE_DIR}/volume/bt_vol_rend.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: FOTA Set Command Syntax\nDESCRIPTION: Basic syntax for the #XFOTA set command that performs FOTA operations. Includes operation code and optional parameters for file URL, security tag, and PDN ID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/FOTA_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XFOTA=<op>[,<file_url>[,<sec_tag>[,<pdn_id>]]]\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for LTE Link Control API Test in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the project, finds the Zephyr package, generates a test runner, handles function mocking, and configures include directories and source files for the LTE Link Control API test.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/lte_lc_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(lte_lc_api_test)\n\n# generate runner for the test\ntest_runner_generate(src/lte_lc_api_test.c)\n\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem_at.h\n\t     FUNC_EXCLUDE \".*nrf_modem_at_scanf\"\n\t     FUNC_EXCLUDE \".*nrf_modem_at_printf\"\n\t     WORD_EXCLUDE \"__nrf_modem_(printf|scanf)_like\\(.*\\)\")\n\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_socket.h)\n\n# When mocking nrf_modem_at then nrf_modem/include must manually be added\n# because CONFIG_NRF_MODEM_LINK_BINARY=n\nzephyr_include_directories(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/)\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/lib/lte_link_control/)\n\n# add test file\ntarget_sources(app PRIVATE src/lte_lc_api_test.c)\n```\n\n----------------------------------------\n\nTITLE: Verifying and Testing Image with MCUmgr\nDESCRIPTION: This code snippet shows the commands to verify the signed image and test it with MCUmgr before it is swapped on the next reset. It ensures that the image is correctly prepared for deployment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/extxip_smp_svr/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nimgtool verify build/zephyr/<signed_upload.bin>\n```\n\nLANGUAGE: console\nCODE:\n```\nsudo mcumgr <connection string> image test <hash of image>\n```\n\n----------------------------------------\n\nTITLE: Project Definition for idle_grtc\nDESCRIPTION: This snippet defines the project named idle_grtc and includes conditional compiling based on specific configurations for different CPU power management modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_grtc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(idle_grtc)\n\nif((DEFINED CONFIG_SOC_NRF54H20_CPUPPR) OR (DEFINED CONFIG_SOC_NRF54H20_ENGB_CPUPPR))\n\tmessage(STATUS \"Power Mode handler for RISC V is included.\")\n\ttarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/tests/benchmarks/multicore/common/power_off.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Zigbee Leave Signal in C\nDESCRIPTION: This snippet demonstrates handling Zigbee leave signals by checking leave types and resetting ZCL reporting parameters if necessary. It relies on the Zigbee stack's signal handling API and assumes the presence of initialized signal handlers and default handlers. Key inputs are Zigbee signal parameters, and outputs are adjusted stack reporting configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nzb_zdo_signal_leave_params_t *leave_params =\\n    ZB_ZDO_SIGNAL_GET_PARAMS(sig_hndler, zb_zdo_signal_leave_params_t);\\n\\nif (leave_params->leave_type == ZB_NWK_LEAVE_TYPE_RESET) {\\n   /* Workaround for NCSIDB-1411 - clearing ZCL Reporting parameters. */\\n   zb_zcl_init_reporting_info();\\n}\\n\\n/* Call default signal handler. */\\nZB_ERROR_CHECK(zigbee_default_signal_handler(bufid));\\nbreak;\n```\n\n----------------------------------------\n\nTITLE: Stopping packet transmission with ltxend command in Shell\nDESCRIPTION: Stops the current burst transmission of packets on the CMD device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncustom ltxend\n```\n\n----------------------------------------\n\nTITLE: LwM2M LTE Link Event Macros\nDESCRIPTION: These C macros define events for LTE link up and down, used to indicate network connection and disconnection, which applications need to prioritize for the LwM2M carrier library. The LwM2M carrier library stores keys into the modem, requiring LTE link disconnections and connections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/requirements.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\"LWM2M_CARRIER_EVENT_LTE_LINK_UP\"\n```\n\nLANGUAGE: c\nCODE:\n```\n\"LWM2M_CARRIER_EVENT_LTE_LINK_DOWN\"\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF2220 FEM Node in Devicetree\nDESCRIPTION: Adds a devicetree node for the nRF2220 front-end module, specifying GPIO pins for CS and MD signals, I2C interface, and output power.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf2220.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n      nrf_radio_fem: name_of_fem_node {\n         compatible = \"nordic,nrf2220-fem\";\n         cs-gpios = <&gpio1 10 GPIO_ACTIVE_HIGH>;\n         md-gpios = <&gpio1 8 GPIO_ACTIVE_HIGH>;\n         twi-if = <&nrf_radio_fem_twi>;\n         output-power-dbm = <10>;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet finds the Zephyr package required for the project setup based on the provided hints.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/kernel_freq_change/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Glob Source Files for Application\nDESCRIPTION: This snippet uses the GLOB command to collect all source files in the 'src' directory and store them in the variable 'app_sources'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project for Decompression\nDESCRIPTION: Sets up the project name for decompression testing on ARM Thumb architecture\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_compress/decompression/arm_thumb/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(decompression_arm_thumb)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required version of CMake for the project to version 3.20.0, ensuring compatibility with the build system features used.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/coap_server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring RTT Console for Logging in Zephyr\nDESCRIPTION: Configuration settings to override the default UART console with SEGGER's Real-Time Transfer (RTT) for viewing logging output. This enables RTT console and disables the standard UART console.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_USE_SEGGER_RTT=y\nCONFIG_RTT_CONSOLE=y\nCONFIG_UART_CONSOLE=n\n```\n\n----------------------------------------\n\nTITLE: Setting up Board Overlay for QSPI External Flash\nDESCRIPTION: Device tree overlay file for nRF5340 DK that configures the external flash device for use with QSPI XIP functionality. Specifies the Partition Manager's chosen external flash device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_3\n\nLANGUAGE: dts\nCODE:\n```\n../../../../samples/nrf5340/extxip_smp_svr/boards/nrf5340dk_nrf5340_cpuapp.overlay\n```\n\n----------------------------------------\n\nTITLE: Generic Power Level to Generic Level Mapping\nDESCRIPTION: This code snippet demonstrates the relationship between the Generic Power Level state and the Generic Level state. The Generic Power Level is calculated by adding 32768 to the Generic Level.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_plvl_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"Generic Power Level = Generic Level + 32768\"\n```\n\n----------------------------------------\n\nTITLE: Calculating TX Packet Memory Size for nRF70 Series\nDESCRIPTION: Formula to calculate the size of TX packet memory in the nRF70 Series device based on maximum data size, tokens, and aggregation settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/stack_configuration.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n(CONFIG_NRF70_TX_MAX_DATA_SIZE + 52 ) * CONFIG_NRF70_MAX_TX_TOKENS * CONFIG_NRF70_MAX_TX_AGGREGATION\n```\n\n----------------------------------------\n\nTITLE: Resetting nRF54H20 Device After Lifecycle Changes\nDESCRIPTION: Command to reset the nRF54H20 device after changing its lifecycle state, ensuring the changes take effect properly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device reset --reset-kind RESET_PIN --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: MRAM Partition Definition Example - Legacy Configuration\nDESCRIPTION: Shows the previous method of defining MRAM partitions using nordic,allocatable-mram binding with fixed partitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.4.99-cs3_to_2.7_application.rst#2025-04-21_snippet_2\n\nLANGUAGE: devicetree\nCODE:\n```\n&mram_controller {\n   mram0: mram@e0a6000 {\n      compatible = \"nordic,allocatable-mram\", \"soc-nv-flash\";\n      reg = <0xe0a6000 DT_SIZE_K(360)>;\n      erase-block-size = <4096>;\n      write-block-size = <1>;\n      perm-read;\n      perm-execute;\n      perm-secure;\n      partitions {\n         compatible = \"fixed-partitions\";\n         #address-cells = <1>;\n         #size-cells = <1>;\n         slot0_partition: partition@a6000 {\n            reg = <0xa6000 DT_SIZE_K(296)>;\n         };\n         ppr_code_partition: partition@f0000 {\n            reg = <0xf0000 DT_SIZE_K(64)>;\n         };\n      };\n   };\n   mram1: mram@e100000 {\n      compatible = \"nordic,allocatable-mram\", \"soc-nv-flash\";\n      reg = <0xe100000 DT_SIZE_K(916)>;\n      erase-block-size = <4096>;\n      write-block-size = <1>;\n      perm-read;\n      perm-write;\n      partitions {\n         compatible = \"fixed-partitions\";\n         #address-cells = <1>;\n         #size-cells = <1>;\n         dfu_partition: partition@100000\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing with VPR Bootstrapping\nDESCRIPTION: Command to build and flash both application and FLPR cores using the minimal sample for VPR bootstrapping. This approach automatically programs the FLPR core with dedicated bootstrapping firmware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/building_nrf54l.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54l15dk/nrf54l15/cpuflpr\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Rebuilding with Updated LED Blink Count\nDESCRIPTION: Command to rebuild the sample with an updated configuration that increases the number of LED blinks to indicate a new version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -- -DSB_EXTRA_CONF_FILE=\"suit_mpi.conf\" -Dab_CONFIG_N_BLINKS=2\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for DFU Support\nDESCRIPTION: Conditionally adds Device Firmware Update (DFU) support by including dfu.c source file only when CONFIG_APP_DFU is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_APP_DFU)\n  target_sources(app PRIVATE src/dfu.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Pinging a Host using AT command\nDESCRIPTION: This AT command pings a remote host (either by hostname or IP address) to test network connectivity. It takes parameters like hostname/IP, payload size, timeout, number of pings, and interval.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_36\n\nLANGUAGE: text\nCODE:\n```\n**AT#XPING=\"www.google.com\",45,5000,5,1000**\nOK\n#XPING: 0.637 seconds\n#XPING: 0.585 seconds\n#XPING: 0.598 seconds\n#XPING: 0.598 seconds\n#XPING: 0.599 seconds\n#XPING: average 0.603 seconds\n```\n\nLANGUAGE: text\nCODE:\n```\n**AT#XPING=\"ipv6.google.com\",45,5000,5,1000**\nOK\n#XPING: 0.140 seconds\n#XPING: 0.109 seconds\n#XPING: 0.113 seconds\n#XPING: 0.118 seconds\n#XPING: 0.112 seconds\n#XPING: average 0.118 seconds\n```\n\nLANGUAGE: text\nCODE:\n```\n**AT#XPING=\"172.217.174.100\",45,5000,5,1000**\nOK\n#XPING: 0.873 seconds\n#XPING: 0.576 seconds\n#XPING: 0.599 seconds\n#XPING: 0.623 seconds\n#XPING: 0.577 seconds\n#XPING: average 0.650 seconds\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Data Length in Kconfig\nDESCRIPTION: Sets the length of data sent through the notification mechanism, allowing customization of power profiling data transmission.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_power_profiling/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_BT_POWER_PROFILING_DATA_LENGTH\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for DFU Lock\nDESCRIPTION: Kconfig options available for configuring the DFU lock utility, including enabling the utility and setting log levels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dfu_lock.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DESKTOP_DFU_LOCK\nCONFIG_DESKTOP_CONFIG_CHANNEL_DFU_ENABLE\nCONFIG_DESKTOP_DFU_MCUMGR_ENABLE\nCONFIG_DESKTOP_DFU_LOCK_LOG_LEVEL\n```\n\n----------------------------------------\n\nTITLE: Installing correct lxml dependency on macOS\nDESCRIPTION: Commands to uninstall and reinstall the lxml package on macOS to ensure compatibility.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall -y lxml\npip install lxml\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for MBOX IPC Sample on nRF54L Series\nDESCRIPTION: Complete CMake configuration file that sets up the build environment for the MBOX IPC sample. It verifies board compatibility (nRF54L09PDK or nRF54L20PDK), enforces sysbuild for multi-image building, and sources the main code from Zephyr's MBOX driver sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/drivers/mbox/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nset(REMOTE_ZEPHYR_DIR ${CMAKE_CURRENT_BINARY_DIR}/../remote/zephyr)\n\nif(CONFIG_BOARD_NRF54L09PDK_NRF54L09_CPUAPP OR\n   CONFIG_BOARD_NRF54L20PDK_NRF54L20_CPUAPP)\n  message(STATUS \"${BOARD}${BOARD_QUALIFIERS} compile as Main in this sample\")\nelse()\n  message(FATAL_ERROR \"${BOARD}${BOARD_QUALIFIERS} is not supported for this sample\")\nendif()\n\nif(NOT SYSBUILD)\n  message(FATAL_ERROR\n    \" This is a multi-image application that should be built using sysbuild.\\n\"\n    \" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n\nproject(mbox_ipc)\n\nenable_language(C ASM)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/drivers/mbox/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Shell Command Response for SUIT Manifests Information\nDESCRIPTION: Shows an example of the human-readable output from the 'newtmgr' tool when retrieving information about SUIT manifests. This example demonstrates the response format for both installed and damaged/missing manifests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./newtmgr -c serial0 suit manifests\nManifests:\n\n class ID:  3f6a3a4d-cdfa-58c5-acce-f9f584c41124 (nRF54H20_sample_root)\n vendor ID: 7617daa5-71fd-5a85-8f94-e28d735ce9f4 (nordicsemi.com)\n   role: 0x20 (Root Manifest)\n   digest: d0b69723..15d7140d (sha-256)\n   signature check passed\n   sequence number: 2\n   semantic version: 1.17.5-rc.2\n\n class ID:  00112233-4455-5577-8899-aabbccddeeff\n vendor ID: 00110011-0011-0011-0011-001100110011\n   role: 0x21 (Application Recovery Manifest)\n   Manifest not installed or damaged!\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for DMIC Project in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the project configuration for a DMIC application. It specifies the minimum CMake version, finds the Zephyr package, and adds the main source file to the project. The Zephyr package is required and its location is hinted using an environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/audio/dmic_dump_buffer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(dmic)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: RF Tool RX/TX Configuration with More Data (Client)\nDESCRIPTION: This command configures the DECT RF tool for simultaneous RX/TX operation on the client side with specific configurations for data transfer.  It sets RX/TX subslot and idle subslot counts, the modulation and coding scheme (MCS), the transmit power (TX PWR), the frame repeat count, specifies channel 1677, and targets frequency 39.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_20\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool -m rx_tx --rx_subslot_count 9 --rx_idle_subslot_count 4 --tx_subslot_count 8 --tx_idle_subslot_count 4 --tx_mcs 4 --frame_repeat_count 15 -c 1677 --tx_pwr 15 -t 39\n```\n\n----------------------------------------\n\nTITLE: UDP Send Data Command\nDESCRIPTION: Command to send UDP data to specific host and port.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_15\n\nLANGUAGE: AT\nCODE:\n```\nAT#XSENDTO=\"test.server.com\",1234,\"Test UDP\"\n#XSENDTO: 8\nOK\n```\n\n----------------------------------------\n\nTITLE: Find Zephyr package\nDESCRIPTION: Finds the Zephyr package using CMake's `find_package` command, requiring Zephyr to be present and using the environment variable `ZEPHYR_BASE` as a hint for its location. This step is crucial for integrating the project with the Zephyr RTOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Configure CRACEN Microcode Loading\nDESCRIPTION: This snippet configures CRACEN microcode loading. If `SB_CONFIG_CRACEN_MICROCODE_LOAD_ONCE` is enabled, it checks if `SB_CONFIG_CRACEN_MICROCODE_LOAD_B0` or `SB_CONFIG_CRACEN_MICROCODE_LOAD_MCUBOOT` are enabled. It sets `CONFIG_CRACEN_LOAD_MICROCODE` to `y` for either the `b0` image or the `mcuboot` image, and disables it for the other. It also disables microcode loading for the default image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\n \"if(SB_CONFIG_CRACEN_MICROCODE_LOAD_ONCE)\n    if(SB_CONFIG_CRACEN_MICROCODE_LOAD_B0)\n      set_config_bool(b0 CONFIG_CRACEN_LOAD_MICROCODE y)\n\n      if(SB_CONFIG_BOOTLOADER_MCUBOOT)\n        set_config_bool(mcuboot CONFIG_CRACEN_LOAD_MICROCODE n)\n      endif()\n    elseif(SB_CONFIG_CRACEN_MICROCODE_LOAD_MCUBOOT)\n      if(SB_CONFIG_SECURE_BOOT_APPCORE)\n        set_config_bool(b0 CONFIG_CRACEN_LOAD_MICROCODE n)\n      endif()\n\n      set_config_bool(mcuboot CONFIG_CRACEN_LOAD_MICROCODE y)\n    endif()\n\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_CRACEN_LOAD_MICROCODE n)\n  endif()\"\n```\n\n----------------------------------------\n\nTITLE: LwM2M Shell Command to Pause Client\nDESCRIPTION: Shell command to pause the LwM2M client operation. This is part of the testing procedures for verifying shell functionality with the LwM2M client.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/sample_description.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ lwm2m pause\n```\n\n----------------------------------------\n\nTITLE: Implementing Recovery Mode Check in C\nDESCRIPTION: C code implementation for checking recovery mode conditions and handling recovery mode entry logic.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_recovery.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nstatic int should_enter_recovery_check(void)\n{\n   suit_boot_mode_t mode = SUIT_BOOT_MODE_INVOKE_RECOVERY;\n   suit_ssf_err_t err = SUIT_PLAT_SUCCESS;\n   int ret = 0;\n\n   err = suit_boot_mode_read(&mode);\n\n   if (err != SUIT_PLAT_SUCCESS) {\n      suit_invoke_confirm(-EPIPE);\n      return -EPIPE;\n   }\n\n   if (mode == SUIT_BOOT_MODE_INVOKE) {\n      if (/* add the condition here */) {\n         err = suit_foreground_dfu_required();\n      }\n   }\n\n   if (err != SUIT_PLAT_SUCCESS) {\n      ret = -EPIPE;\n   }\n\n   (void)suit_invoke_confirm(ret);\n\n   return ret;\n}\n\nSYS_INIT(should_enter_recovery_check, APPLICATION, CONFIG_APPLICATION_INIT_PRIORITY);\n```\n\n----------------------------------------\n\nTITLE: TFTP Client Example Operations\nDESCRIPTION: Examples of TFTP read and write operations showing successful transfers and error handling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/FTP_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT\nCODE:\n```\nAT#XTFTP=2,\"tftp-server.com\",69,\"test_put_01.txt\",\"octet\",\"test send TFTP PUT\"\nAT#XTFTP=1,\"tftp-server.com\",69,\"test_put_01.txt\"\nAT#XTFTP=1,\"tftp-server.com\",69,\"test_put_not_exist.txt\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for QDEC Sensor in nRF Connect SDK\nDESCRIPTION: Sets up a CMake build environment for a QDEC (Quadrature Decoder) sensor project. The file specifies CMake version requirements, imports the Zephyr package, names the project, and collects source files from Zephyr's QDEC test directory to be included in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/boards/nrf/qdec/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(qdec_sensor)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/boards/nrf/qdec/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Generating Partition Manager's ASCII Representation with West Build\nDESCRIPTION: This command generates an ASCII representation of the Partition Manager's memory layout tables for a specific board target using the west build tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/hw_requirements.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -t partition_manager_report\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package and Configuring Sources\nDESCRIPTION: This snippet finds the Zephyr package and includes all source files related to the I2C BME688 test. It ensures that the necessary dependencies are resolved and the source files are properly configured within the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/i2c/i2c_bme688/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(i2c_bme688)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/i2c/i2c_bme688/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Active Devices for Matter Subscriptions\nDESCRIPTION: This snippet describes how to configure the maximum number of subscriptions that can be simultaneously re-established by the end device using the `CONFIG_CHIP_MAX_ACTIVE_DEVICES` Kconfig option. Adjusting this value affects the speed of reconnection after an outage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_7\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_MAX_ACTIVE_DEVICES`\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up bh1749 Project\nDESCRIPTION: This snippet initializes the bh1749 project through the CMake project command and specifies the source files to be included in the application. It gathers all C source files from the 'src' directory to be part of the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/sensor/bh1749/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(bh1749)\n\nFILE(GLOB app_sources src/*.c)\n```\n\n----------------------------------------\n\nTITLE: RST Include Statement for Event Propagation\nDESCRIPTION: RST include directive for pulling in event propagation documentation between specific markers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/power_manager.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: event_propagation.rst\\n    :start-after: table_power_manager_start\\n    :end-before: table_power_manager_end\n```\n\n----------------------------------------\n\nTITLE: Initializing Matter Stack in C++\nDESCRIPTION: Code to initialize the Matter stack using the new PrepareServer method. This replaces the previous lengthy initialization code with a simpler call.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\n/* Initialize Matter stack */\nReturnErrorOnFailure(Nrf::Matter::PrepareServer(MatterEventHandler));\n```\n\n----------------------------------------\n\nTITLE: Configuring Continuous Tone Transmission\nDESCRIPTION: Sequence of commands to configure and transmit a continuous tone on channel 144 with 10 dBm TX power and 2 MHz tone frequency, useful for radio testing and calibration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test init 144\nwifi_radio_test tx_power 10\nwifi_radio_test tx_tone_freq 2\nwifi_radio_test tx_tone 1\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Sign Script with CMake\nDESCRIPTION: CMake code to set a custom SUIT sign script by defining a global property. This allows users to specify a path to their own signing script rather than using the default one.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_signing.rst#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(GLOBAL PROPERTY SUIT_SIGN_SCRIPT <sign_script_path>)\n```\n\n----------------------------------------\n\nTITLE: Conditional Return if CJSON Library Not Configured\nDESCRIPTION: This snippet checks if the CJSON library is configured in the project. If it is not configured, the function returns early, preventing any further actions. It ensures the library dependencies are properly managed based on the build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/cjson/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CONFIG_CJSON_LIB)\\n  return()\\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Sample for nRF54H20 Radio Core\nDESCRIPTION: Command to build the sample for the nRF54H20 SoC radio core configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_uart/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpurad\n```\n\n----------------------------------------\n\nTITLE: SUIT Installation Procedure Example with CAND_IMG Component\nDESCRIPTION: Demonstrates an installation procedure that uses the CAND_IMG component to verify image coherency before installation. The process includes fetching the image, performing a digest check, and copying to the final location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_components.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncomponents: [\n[MEM/2/0xeff8000/0x10000],\n[CAND_IMG/0]\n]\n\ninstall: [\n   directive-set-component-index 1,\n   directive-override-parameters {\n     uri: '#file.bin'\n     image-digest: [\n       algorithm-id: \"sha256\",\n       digest-bytes: '00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'\n     ]\n   },\n   directive-fetch,\n   condition-image-match,\n   directive-set-component-index 0,\n   directive-override-parameters {\n         source-component: 1\n   },\n   directive-copy\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Scancode-Toolkit Dependencies (Ubuntu)\nDESCRIPTION: This command installs the necessary dependencies for the Scancode-Toolkit on an Ubuntu system using the apt package manager. These dependencies are required for the ncs-sbom command to utilize Scancode-Toolkit for license detection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"sudo apt install python-dev bzip2 xz-utils zlib1g libxml2-dev libxslt1-dev libpopt0\"\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure Definition\nDESCRIPTION: RST markup defining the document structure with title, heading, and table of contents tree for Wi-Fi documentation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ug_wifi:\n\nWi-Fi\n#####\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Subpages:\n\n   wifi.rst\n   wifi_certification\n   station_mode/index\n   scan_mode/index\n   sap_mode/index\n   advanced_modes/index\n   provisioning/index\n   regulatory_support\n   debugging\n   stack_configuration\n   regulatory_certification/index\n```\n\n----------------------------------------\n\nTITLE: Stopping and Releasing NFC via CLI\nDESCRIPTION: These commands stop the NFC interface and release the NFC frontend on the server device. This effectively disables the NFC functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/server/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ nfc stop\nuart:~$ nfc release\n```\n\n----------------------------------------\n\nTITLE: Configuring DFU Multi-Image Library Options in Kconfig\nDESCRIPTION: Kconfig options for enabling and configuring the DFU multi-image library, including maximum image count and package build options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_multi_image.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DFU_MULTI_IMAGE=y\nCONFIG_DFU_MULTI_IMAGE_MAX_IMAGE_COUNT=<value>\nSB_CONFIG_DFU_MULTI_IMAGE_PACKAGE_BUILD=y\nSB_CONFIG_DFU_MULTI_IMAGE_PACKAGE_APP=y\nSB_CONFIG_DFU_MULTI_IMAGE_PACKAGE_NET=y\nSB_CONFIG_DFU_MULTI_IMAGE_PACKAGE_MCUBOOT=y\nSB_CONFIG_DFU_MULTI_IMAGE_PACKAGE_WIFI_FW_PATCH=y\nSB_CONFIG_SUIT_MULTI_IMAGE_PACKAGE_BUILD=y\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Libraries in CMake\nDESCRIPTION: This snippet configures a Zephyr library by specifying source files and include directories. It utilizes the CMake functions `zephyr_library` and `zephyr_library_sources` to include C files for AT command parsing. It also specifies directories to be included in the compilation process using `zephyr_include_directories`. This setup is specific to projects using the Zephyr RTOS and its build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/at_parser/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tat_parser.c\n\tgenerated/at_match.c\n)\n\nzephyr_include_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Prefix in Thread Network\nDESCRIPTION: Adds a domain prefix to the Thread network and registers it to the Thread Network Data. This prefix is used for Domain Unicast Addresses (DUA) in Thread 1.2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot prefix add fd00:7d03:7d03:7d03::/64 prosD med\nDone\nuart:~$ ot netdata register\nDone\n```\n\n----------------------------------------\n\nTITLE: Modem Provisioning Configuration\nDESCRIPTION: This snippet provides guidance on configuring LwM2M provisioning to avoid re-writing credentials to the modem when the application starts. It includes steps for modifying settings using the Visual Studio Code (VSC) and adjusting the Kconfig option in the prj.conf file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/sample_description.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#. Select :guilabel:`Observe` or :guilabel:`Monitoring` from the dropdown menu.\n\n   * Selecting :guilabel:`Observe` will only update the Value field of the resource when it receives a notification.\n   * Selecting :guilabel:`Monitoring` will additionally create a graph of the logged datapoints.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n1. In the |nRFVSC|, `build the sample <How to build an application_>`_.\n#. Under **Actions**, click :guilabel:`Kconfig`.\n#. Click :guilabel:`Application sample`.\n#. Under **LwM2M objects**, remove the key value next to :guilabel:`LwM2M pre-shared key for communication`.\n#. Save and close the configuration.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nThe provisioning can also be prevented by setting the :kconfig:option:`CONFIG_APP_LWM2M_PSK` Kconfig option to an empty string in the :file:`prj.conf` file.\nYou can also edit this configuration using menuconfig.\n```\n\n----------------------------------------\n\nTITLE: Sysbuild Configuration for Device Firmware Update\nDESCRIPTION: Configures Device Firmware Update (DFU) functionality through sysbuild configuration options\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\nSB_CONFIG_APP_DFU\nCONFIG_APP_DFU\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr NFC RPC Library Sources\nDESCRIPTION: Creates and configures a Zephyr library with NFC RPC source files. Includes two source files: nfc_rpc_group.c for RPC group implementations and nfc_rpc_common.c for common RPC functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nfc/rpc/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(\n  nfc_rpc_group.c\n  nfc_rpc_common.c\n)\n```\n\n----------------------------------------\n\nTITLE: nRF5340 DK Configuration for Samples\nDESCRIPTION: This configuration is for samples using the nRF5340 DK with PCA10095, specifying both the cpuapp and cpunet targets. It's important to select the correct target depending on which core the application is intended to run.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/boardname_tables/sample_boardnames.txt#2025-04-21_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n+--------------------------------+-----------+-----------------------------------------------+--------------------------------+\n|Hardware platforms              |PCA        |Board name                                     |Board target                    |\n+================================+===========+===============================================+================================+\n|:ref:`nRF5340 DK <ug_nrf5340>`  |PCA10095   |:ref:`nrf5340dk <nrf5340dk_nrf5340>`           |``nrf5340dk/nrf5340/cpuapp``    |\n|                                |           |                                               |                                |\n|                                |           |                                               |``nrf5340dk/nrf5340/cpunet``    |\n+--------------------------------+-----------+-----------------------------------------------+--------------------------------+\n\n```\n\n----------------------------------------\n\nTITLE: Radio Notification Connection Callback API Files in C\nDESCRIPTION: Header and source file locations for the Bluetooth Radio Notification connection callback API. These files contain the implementation and interface definitions for the callback functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/radio_notification_conn_cb.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nHeader file: include/bluetooth/radio_notification_cb.h\nSource file: subsys/bluetooth/host_extensions/radio_notification_conn_cb.c\n```\n\n----------------------------------------\n\nTITLE: PIN Code Authentication Success Output\nDESCRIPTION: Example output shown after successfully authenticating a Bluetooth LE device with a PIN code, including pairing completion and endpoint assignment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nI: Pairing completed: E3:9D:5E:51:AD:14 (random), bonded: 1\n\nI: Security changed: level 4\nI: The GATT discovery completed\nI: Added device to dynamic endpoint 3 (index=0)\nI: Added device to dynamic endpoint 4 (index=1)\nI: Created 0x100 device type on the endpoint 3\nI: Created 0xf device type on the endpoint 4\n```\n\n----------------------------------------\n\nTITLE: DVFS Operating Points Configuration for nRF54H20\nDESCRIPTION: Defines the available DVFS operating points with their corresponding frequencies and voltages for the nRF54H20 SoC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dvfs.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nDVFS_FREQ_HIGH    // 320 MHz, 0.8 V\nDVFS_FREQ_MEDLOW  // 128 MHz, 0.6V\nDVFS_FREQ_LOW     // 64 MHz, 0.5V\n```\n\n----------------------------------------\n\nTITLE: Reading SUIT Manifests via UART on nRF54H20\nDESCRIPTION: Command to read the sequence number of the installed root manifest using nrfutil over UART.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/smp_transfer/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit manifests --serial-port COM7\n```\n\n----------------------------------------\n\nTITLE: Writing ACL to the Light Bulb Device\nDESCRIPTION: Uses the CHIP Tool to write Access Control List (ACL) configuration to a light bulb device. The command grants the bridge node appropriate privileges to control the light bulb's on/off and level control clusters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_24\n\nLANGUAGE: console\nCODE:\n```\nchip-tool accesscontrol write acl '[{\"fabricIndex\": 1, \"privilege\": 5, \"authMode\": 2, \"subjects\": [112233], \"targets\": null}, {\"fabricIndex\": 1, \"privilege\": 3, \"authMode\": 2, \"subjects\": [*<bridge_node_ID>*], \"targets\": [{\"cluster\": 6, \"endpoint\": 1, \"deviceType\": null}, {\"cluster\": 8, \"endpoint\": 1, \"deviceType\": null}]}]' *<light_bulb_node_ID>* 0\n```\n\n----------------------------------------\n\nTITLE: Creating Zephyr Library\nDESCRIPTION: This CMake snippet defines a Zephyr library. It serves as a container for the source code and build configurations needed for the WFA QT control application library. This function is core to defining a module that can be used with the Zephyr RTOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/wfa-qt/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n```\n\n----------------------------------------\n\nTITLE: Configuring WiFi Ready Library in CMake\nDESCRIPTION: Creates and names a Zephyr library called WIFI_READY_LIB and specifies wifi_ready.c as its source file. This configuration is part of the Nordic nRF Connect SDK for WiFi functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/wifi_ready/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_named(WIFI_READY_LIB)\nzephyr_library_sources(wifi_ready.c)\n```\n\n----------------------------------------\n\nTITLE: Updating OpenThread Libraries without Debug Symbols\nDESCRIPTION: Commands to build and install OpenThread libraries without debug symbols. This builds two versions (with and without debug symbols) but only installs the stripped version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/prebuilt_libs.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 -- -DOPENTHREAD_BUILD_OUTPUT_STRIPPED=y\nwest build -d build/cli -t install_openthread_libraries\n```\n\n----------------------------------------\n\nTITLE: Configuring GNSS for Continuous Tracking with Power Saving in MoSh\nDESCRIPTION: Shows how to disable LTE, enable all GNSS output, and start continuous tracking with power saving enabled using MoSh commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nlink funmode --lteoff\ngnss output 2 1 1\ngnss mode cont\ngnss config powersave perf\ngnss start\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target\nDESCRIPTION: This snippet adds the source file `src/main.c` to the `app` target.  `target_sources` command with `PRIVATE` visibility means that the source files are only used for building this specific target and are not exposed to other dependent targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_mds/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n  src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Completing DFU Target Download in C\nDESCRIPTION: Indicate that the DFU image download process has completed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_target.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ndfu_target_done();\n```\n\n----------------------------------------\n\nTITLE: Running iPerf Server for Wi-Fi UDP Throughput Testing\nDESCRIPTION: Command to configure an iPerf server on the test PC to measure UDP throughput. The server listens for incoming UDP connections and reports statistics every second.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\niperf -s -i 1 -u\n```\n\n----------------------------------------\n\nTITLE: Including Mesh Device Provisioning Instructions\nDESCRIPTION: This snippet includes external content for mesh device provisioning instructions, likely containing common steps for provisioning a device in a Bluetooth Mesh network.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/sensor_server/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n.. include:: /includes/mesh_device_provisioning.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Cloud REST Device Message Sample in Kconfig\nDESCRIPTION: Configuration options for the nRF Cloud REST Device Message sample, including LED settings for indicating LTE connection status and REST request transmission, and an option to enable just-in-time provisioning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_rest_device_message/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_REST_DEVICE_MESSAGE_LTE_LED_NUM - LTE LED number\n   This configuration option defines which LED is used to indicate LTE connection success.\n\nCONFIG_REST_DEVICE_MESSAGE_SEND_LED_NUM - Send LED number\n   This configuration option defines which LED is used to indicate a REST request is being sent.\n\nCONFIG_REST_DEVICE_MESSAGE_DO_JITP - Enable prompt to perform JITP over REST\n   This configuration option defines whether the application prompts the user for just-in-time provisioning on startup.\n```\n\n----------------------------------------\n\nTITLE: Initiating Firmware Over-the-Air Update in Azure IoT Hub\nDESCRIPTION: This console output documents the process involved in initiating a FOTA update in the Azure IoT Hub sample, starting from the firmware download to the update application. It includes logs for TLS setup, file download, and the scheduling of the new firmware application upon a device reset. Dependencies include secure downloading mechanisms and credentials setup. This process ensures that the latest firmware is applied securely and effectively.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/azure_iot_hub/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_TWIN_RESULT_SUCCESS, ID: 140\n<inf> azure_fota: Attempting to download firmware (version 'v0.0.2-dev') from example.com/firmware/app_update.bin\n<inf> downloader: Downloading: firmware/app_update.bin [0]\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_FOTA_START\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_TWIN_DESIRED_RECEIVED\n<inf> downloader: Setting up TLS credentials, sec tag count 1\n<inf> downloader: Connecting to example.com\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_TWIN_RESULT_SUCCESS, ID: 190\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_TWIN_RESULT_SUCCESS, ID: 190\n<inf> downloader: Downloaded 1800/674416 bytes (0%)\n...\n<inf> downloader: Downloaded 674416/674416 bytes (100%)\n<inf> downloader: Download complete\n<inf> dfu_target_mcuboot: MCUBoot image-0 upgrade scheduled. Reset device to apply\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_FOTA_DONE\n<inf> azure_iot_hub_sample: The device will reboot in 5 seconds to apply update\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_TWIN_RESULT_SUCCESS, ID: 109\n```\n\n----------------------------------------\n\nTITLE: Setting L2CAP TX Buffer Count for GATT Requests\nDESCRIPTION: GATT requests might deadlock the RX thread when all TX buffers are taken and RX thread tries to allocate a TX buffer for a response. This workaround sets CONFIG_BT_L2CAP_TX_BUF_COUNT to be greater than or equal to CONFIG_BT_ATT_TX_MAX + 2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nCONFIG_BT_L2CAP_TX_BUF_COUNT >= CONFIG_BT_ATT_TX_MAX + 2\n```\n\n----------------------------------------\n\nTITLE: Setting Group Key Set on Light Bulb\nDESCRIPTION: Configures the same group key set information on the Light Bulb device as was set on the Light Switch.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./chip-tool groupkeymanagement key-set-write '{\"groupKeySetID\":\"258\",\"groupKeySecurityPolicy\":0,\"epochKey0\":\"a0a1a2a3a4a5a6a7a8a9aaabacad7531\",\"epochStartTime0\":\"1110000\",\"epochKey1\":\"b0b1b2b3b4b5b6b7b8b9babbbcbd7531\",\"epochStartTime1\":\"1110001\",\"epochKey2\":\"c0c1c2c3c4c5c6c7c8c9cacbcccd7531\",\"epochStartTime2\":\"1110002\"}' 2 0\n```\n\n----------------------------------------\n\nTITLE: Configuring iPerf Server for UDP Testing\nDESCRIPTION: Command to start an iPerf server in UDP mode with 1-second interval reporting\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/adaptivity_test_procedure.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\niperf -s -i 1 -u\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Direction Finding Connectionless Project in Nordic nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build configuration for a direction finding connectionless project. It specifies the minimum CMake version, finds the Zephyr package, and defines the project name and source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/direction_finding_connectionless_tx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(direction_finding_connectionless)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Generating ECDSA-P256 Key Pair with OpenSSL\nDESCRIPTION: Uses OpenSSL to generate an ECDSA-P256 private key and save it to priv.pem. This key type is supported by both nRF Secure Immutable Bootloader and MCUboot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_signature_keys.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nopenssl ecparam -name prime256v1 -genkey -noout -out priv.pem\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control Source Files\nDESCRIPTION: Sets up a list of source files related to access control functionality, with conditional inclusion based on configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(access_srcs src/access/access_data_types.cpp\n              src/access/access_manager_credentials.cpp\n              src/access/access_manager_users.cpp\n              src/access/access_manager.cpp\n              src/access/access_storage.cpp\n              )\n\nif(CONFIG_LOCK_SCHEDULES)\n    LIST(APPEND access_srcs src/access/access_manager_schedules.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling Serial Recovery Protocol for MCUboot\nDESCRIPTION: Enables serial recovery protocols compatible with MCUmgr, allowing device programming via serial connection instead of J-Link. This feature allows direct upload of applications to the executable image bank and, depending on configuration, to other banks as well.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_18\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_MCUBOOT_SERIAL\"\n```\n\n----------------------------------------\n\nTITLE: Building Door Lock Application with Switched Thread and Wi-Fi\nDESCRIPTION: This command builds the door lock application with switched Thread and Wi-Fi configuration using west build. It specifies the board, file suffix, shield, and enables the Wi-Fi configuration for nRF70.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n\"west build -b nrf5340dk/nrf5340/cpuapp -- -DFILE_SUFFIX=thread_wifi_switched -Dlock_SHIELD=nrf7002ek  -DSB_CONFIG_WIFI_NRF70=y\"\n```\n\n----------------------------------------\n\nTITLE: Resolve Hostname Command\nDESCRIPTION: Command to resolve hostnames to IPv4/IPv6 addresses with optional address family hint.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_18\n\nLANGUAGE: AT\nCODE:\n```\nAT#XGETADDRINFO=\"google.com\"\n#XGETADDRINFO: \"142.251.42.142\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target\nDESCRIPTION: This snippet uses the `target_sources` command to add the source files to the application target. The source files are added as private, meaning they are only used for building the application itself and are not exposed to other targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/throughput/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"# NORDIC SDK APP START\\ntarget_sources(app PRIVATE\\n\\t${app_sources}\\n)\\n# NORDIC SDK APP END\"\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines an include directory for the 'zephyr_interface' target using the target_include_directories() CMake function. The 'BEFORE INTERFACE' keyword ensures that the specified include directory is added before any interface include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/mpsl/clock_control/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_include_directories(zephyr_interface BEFORE INTERFACE\\n    ${CMAKE_CURRENT_SOURCE_DIR})\"\n```\n\n----------------------------------------\n\nTITLE: Sending A-GNSS Assistance Request in C\nDESCRIPTION: Sends an A-GNSS assistance data request using the location_assistance_agnss_request_send function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_location_assistance.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nlocation_assistance_agnss_request_send();\n```\n\n----------------------------------------\n\nTITLE: Flashing SMP Server Sample (Zephyr)\nDESCRIPTION: Command to flash the SMP Server sample onto a development kit. This is part of the testing procedure to set up the server for the client to connect to.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_smp_client/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Peripheral Device Output Log\nDESCRIPTION: Sample terminal output showing latency measurements from the peripheral device perspective, including device initialization, advertising, connection and service discovery.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/radio_notification_cb/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nStarting radio notification callback sample.\nI: SoftDevice Controller build revision:\nI: d6 da c7 ae 08 db 72 6f |......ro\nI: 2a a3 26 49 2a 4d a8 b3 |*.&I*M..\nI: 98 0e 07 7f             |....\nI: HW Platform: Nordic Semiconductor (0x0002)\nI: HW Variant: nRF52x (0x0002)\nI: Firmware: Standard Bluetooth controller (0x00) Version 214.51162 Build 1926957230\nI: Identity: CF:99:32:A5:4B:11 (random)\nI: HCI: version 5.4 (0x0d) revision 0x11fb, manufacturer 0x0059\nI: LMP: version 5.4 (0x0d) subver 0x11fb\nChoose device role - type c (central) or p (peripheral):\nPeripheral. Starting advertising\nAdvertising started\nConnected: FA:BB:79:57:D6:45 (random)\nService discovery completed\nLatency: 3649 us, round trip: 53649 us\n```\n\n----------------------------------------\n\nTITLE: Replacing Device Name in Markdown\nDESCRIPTION: This snippet uses a Markdown replacement directive to set the device name to 'Mesh Sensor' for use in the documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/sensor_server/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n.. |device name| replace:: :guilabel:`Mesh Sensor`\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Channel Sounding RAS Reflector in Nordic SDK\nDESCRIPTION: This CMake configuration sets up the build environment for a Channel Sounding RAS Reflector application. It requires CMake 3.20.0 or newer, locates the Zephyr package using ZEPHYR_BASE environment variable, and adds the main.c source file to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/channel_sounding_ras_reflector/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(channel_sounding_ras_reflector)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Getting DUT software version with rsoftwareversion command in Shell\nDESCRIPTION: Retrieves the software version of the DUT device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\ncustom rsoftwareversion\n```\n\n----------------------------------------\n\nTITLE: Renaming Enhanced ShockBurst subsystem in C\nDESCRIPTION: The Enhanced ShockBurst subsystem was renamed from 'enhanced_shockburst' to 'esb' and moved to a new directory. Header files and data types were also renamed accordingly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.3.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/* Old location */\n#include <enhanced_shockburst/esb.h>\n\n/* New location */\n#include <esb/esb.h>\n```\n\n----------------------------------------\n\nTITLE: Disabling CPURAD RW Partitions for nRF54H20 Bluetooth RPC Configuration\nDESCRIPTION: Workaround for the Bluetooth LE applications built with the nordic-bt-rpc snippet that don't work on nRF54H20 devices. The fix involves adding a status disabled line to the cpurad-rw-partitions node.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatus = \"disabled\";\n```\n\n----------------------------------------\n\nTITLE: Disabling UART0 for nRF21540 SPI Functionality (Devicetree)\nDESCRIPTION: Devicetree snippet to disable the UART0 node in the network core's devicetree file, allowing the SPI part of the nRF21540 interface to be functional on nRF53 devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/21540ek_dev_guide.rst#2025-04-21_snippet_4\n\nLANGUAGE: devicetree\nCODE:\n```\n&uart0 {\n    status = \"disabled\";\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring LTE Band Lock in prj.conf\nDESCRIPTION: This snippet shows how to enable the LTE Link Control library and configure band locking in the project configuration file. It sets the LTE_LOCK_BANDS option and specifies a band lock mask.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_features.rst#2025-04-21_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nCONFIG_LTE_LINK_CONTROL=y\nCONFIG_LTE_LOCK_BANDS=y\nCONFIG_LTE_LOCK_BAND_MASK=\"10000001000000001100\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Core with Kconfig - Kconfig\nDESCRIPTION: This Kconfig snippet defines the configuration options for network core images within the Zephyr module. It includes conditional menu items and image selections based on dependencies. Key parameters include 'NETCORE_IMAGE_NAME' and 'NETCORE_IMAGE_PATH', which are dynamically set based on the chosen network core image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/sysbuild_images.rst#2025-04-21_snippet_5\n\nLANGUAGE: kconfig\nCODE:\n```\n\"menu 'Network core configuration'\\n    depends on SUPPORT_NETCORE\\n\\nconfig SUPPORT_NETCORE_ABC\\n    bool\\n    default y\\n\\nchoice NETCORE\\n    prompt 'Netcore image'\\n    depends on SUPPORT_NETCORE && !EXTERNAL_CONFIGURED_NETCORE\\n\\nconfig NETCORE_ABC\\n    bool 'ABC'\\n    help\\n      Use ABC image as the network core image.\\n\\nendchoice\\n\\nif !NETCORE_NONE\\n\\nconfig NETCORE_IMAGE_NAME\\n    default 'abc' if NETCORE_ABC\\n\\nconfig NETCORE_IMAGE_PATH\\n    default '${ZEPHYR_MY_MODULE_MODULE_DIR}/<image_path>' if NETCORE_ABC\\n\\nendif # !NETCORE_NONE\\n\\nendmenu\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Wi-Fi Channel Regulations Table in Markdown\nDESCRIPTION: This code snippet represents a markdown table showing Wi-Fi channel regulations for different countries. It includes country names, ISO codes, and maximum transmit power values for various Wi-Fi channels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_support.rst#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Country name                           | CH/Code      | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   | 10  | 11  | 12  | 13  | 14  | 36  | 40  | 44  | 48  | 52           | 56           | 60           | 64           | 100          | 104          | 108          | 112          | 116          | 120          | 124          | 128          | 132          | 136          | 140          | 144          | 149          | 153          | 157          | 161          | 165          | 169          | 173          |177  |\nn| Kazakhstan                             | KZ           | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | -\\  | 23  | 23  | 23  | 23  | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | -\\           | 20           | 20           | 20           | 20           | 20           | -\\           | -\\           | -\\  |\nn| Kenya                                  | KE           | 33  | 33  | 33  | 33  | 33  | 33  | 33  | 33  | 33  | 33  | 33  | 33  | 33  | -\\  | 17  | 17  | 17  | 17  | 17\\ :sup:`*` | 17\\ :sup:`*` | 17\\ :sup:`*` | 17\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | -\\           | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | -\\  |\nn| North Korea                            | KP           | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | -\\  | 20  | 20  | 20  | 20  | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | -\\           | -\\           | -\\           | -\\           | -\\           | 30           | 30           | 30           | 30           | -\\           | -\\           | -\\           | -\\  |\nn| South Korea                            | KR           | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | -\\  | 23  | 23  | 23  | 17  | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | -\\           | 23           | 23           | 23           | 23           | 23           | -\\           | -\\           | -\\  |\nn| Kuwait                                 | KW           | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | -\\  | 23  | 23  | 23  | 23  | 17\\ :sup:`*` | 17\\ :sup:`*` | 17\\ :sup:`*` | 17\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | 24\\ :sup:`*` | -\\           | -\\           | -\\           | -\\  |\nn| Macau                                  | MO           | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | 23  | -\\  | 23  | 23  | 23  | 23  | 23\\ :sup:`*` | 23\\ :sup:`*` | 23\\ :sup:`*` | 23\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30           | 30           | 30           | 30           | 30           | -\\           | -\\           | -\\  |\n+----------------------------------------+--------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+-----+\n| Malay Archipelago                      | MY           | 27  | 27  | 27  | 27  | 27  | 27  | 27  | 27  | 27  | 27  | 27  | 27  | 27  | -\\  | 30  | 30  | 30  | 30  | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | 30\\ :sup:`*` | -\\           | -\\           | -\\           | -\\           | 30           | 30           | 30           | 30           | 30           | -\\           | -\\           | -\\  |\nn| Maldives                               | MV           | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | -\\  | 23  | 23  | 23  | 23  | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | 20           | 20           | 20           | 20           | 20           | -\\           | -\\           | -\\  |\nn| Morocco                                | MA           | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | -\\  | 20  | 20  | 20  | 20  | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\           | -\\  |\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Development Kits\nDESCRIPTION: Command to list all connected development kits and their serial numbers using nrfutil.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device list\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option to Share Secure UART Instance for Logging\nDESCRIPTION: This snippet sets the TFM CMake option to configure if the secure UART instance should be shared for logging. It passes the value of CONFIG_TFM_SECURE_UART_SHARE_INSTANCE to the TFM build as CONFIG_TFM_LOG_SHARE_UART.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS\n  -DCONFIG_TFM_LOG_SHARE_UART=${CONFIG_TFM_SECURE_UART_SHARE_INSTANCE}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysbuild for QSPI XIP without Network Core Support\nDESCRIPTION: Sysbuild configuration options for enabling QSPI XIP split image with swap-using-move mode without network core support. Enables MCUboot and external flash secondary partitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_7\n\nLANGUAGE: cfg\nCODE:\n```\nSB_CONFIG_BOOTLOADER_MCUBOOT=y\nSB_CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y\nSB_CONFIG_QSPI_XIP_SPLIT_IMAGE=y\n```\n\n----------------------------------------\n\nTITLE: Defining Library and Sources in Zephyr CMake\nDESCRIPTION: This snippet initializes a Zephyr library and adds source files to be included during the build process. Required dependencies include the Zephyr environment set up properly. The specified C files 'pmw3360.c' and 'pmw3360_priv.c' are included in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/sensor/pmw3360/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(pmw3360.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(pmw3360_priv.c)\n```\n\n----------------------------------------\n\nTITLE: Getting All Light LC Client Instances - C\nDESCRIPTION: Prints all instances of the Light LC Client model on the device, useful for debugging and setup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl instance get-all\n\tPrint all instances of the Light LC Client model on the device.\n```\n\n----------------------------------------\n\nTITLE: Opening FTP connection and retrieve info using AT commands\nDESCRIPTION: These AT commands open ftp connection with speedtest.tele2.net server and retrieve information about the existing files and folders.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_38\n\nLANGUAGE: text\nCODE:\n```\n**AT#XFTP=\"open\",,,\"speedtest.tele2.net\"**\n220 (vsFTPd 3.0.3)\n200 Always in UTF8 mode.\n331 Please specify the password.\n230 Login successful.\nOK\n\n**AT#XFTP=\"pwd\"**\n257 \"/\" is the current directory\nOK\n```\n\n----------------------------------------\n\nTITLE: Getting best DUT RX antenna ID with rgetbestrxantenna command in Shell\nDESCRIPTION: Retrieves the last best antenna selected for RX operations by the antenna diversity algorithm on the DUT device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\ncustom rgetbestrxantenna\n```\n\n----------------------------------------\n\nTITLE: Connecting UART_1 of DK to UART_2 of nRF91 Series DK\nDESCRIPTION: Table showing pin connections for UART communication between different development kits (nRF52840 DK, nRF5340 DK, nRF7002 DK) and nRF91 Series DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/slm_shell/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. tabs::\n\n   .. group-tab:: nRF52840 DK\n\n      .. list-table::\n         :header-rows: 1\n\n         * - nRF52840 DK\n           - nRF91 Series DK\n         * - UART TX P1.02\n           - UART RX P0.11\n         * - UART RX P1.01\n           - UART TX P0.10\n         * - GPIO OUT P0.11 (Button1)\n           - GPIO IN P0.31\n         * - GPIO IN P0.13 (LED1 optional)\n           - GPIO OUT P0.30 (optional)\n         * - GPIO GND\n           - GPIO GND\n\n      .. note::\n         The GPIO output level on the nRF91 Series device side must be 3 V to work with the nRF52 Series DK.\n\n         * For nRF91x1 DK, you can set the VDD voltage with the `Board Configurator app`_.\n         * For nRF9160 DK, you can set the VDD voltage with the **VDD IO** switch (**SW9**).\n           See the `VDD supply rail section in the nRF9160 DK User Guide`_ for more information related to nRF9160 DK.\n\n   .. group-tab:: nRF5340 DK\n\n      .. list-table::\n         :header-rows: 1\n\n         * - nRF5340 DK\n           - nRF91 Series DK\n         * - UART TX P1.04\n           - UART RX P0.11\n         * - UART RX P1.05\n           - UART TX P0.10\n         * - GPIO OUT P0.23 (Button1)\n           - GPIO IN P0.31\n         * - GPIO IN P0.28 (LED1 optional)\n           - GPIO OUT P0.30 (optional)\n         * - GPIO GND\n           - GPIO GND\n\n      .. note::\n         The GPIO output level on the nRF91 Series device side must be 3 V to work with the nRF53 Series DK.\n\n         * For nRF91x1 DK, you can set the VDD voltage with the `Board Configurator app`_.\n         * For nRF9160 DK, you can set the VDD voltage with the **VDD IO** switch (**SW9**).\n           See the `VDD supply rail section in the nRF9160 DK User Guide`_ for more information related to nRF9160 DK\n\n   .. group-tab:: nRF7002 DK\n\n      .. list-table::\n         :header-rows: 1\n\n         * - nRF7002 DK\n           - nRF91 Series DK\n         * - UART TX P1.04\n           - UART RX P0.11\n         * - UART RX P1.05\n           - UART TX P0.10\n         * - GPIO OUT P0.31\n           - GPIO IN P0.31\n         * - GPIO IN P0.30 (optional)\n           - GPIO OUT P0.30 (optional)\n         * - GPIO GND\n           - GPIO GND\n\n      .. note::\n         The GPIO output level on the nRF91 Series device side must be 1.8 V to work with the nRF7002 DK.\n\n         * For nRF91x1 DK, you can set the VDD voltage with the `Board Configurator app`_.\n         * For nRF9160 DK, you can set the VDD voltage with the **VDD IO** switch (**SW9**).\n           See the `VDD supply rail section in the nRF9160 DK User Guide`_ for more information related to nRF9160 DK.\n```\n\n----------------------------------------\n\nTITLE: Initializing west with NCS revision\nDESCRIPTION: Command to initialize west with the specific revision of NCS v2.6.99-cs2 from the customer sampling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwest init -m https://github.com/nrfconnect/sdk-nrf --mr v2.6.99-cs2\n```\n\n----------------------------------------\n\nTITLE: Configuring SSF Client Notification Test Build\nDESCRIPTION: CMake configuration that sets up the build environment for testing SSF client notifications. It includes test runner generation, mock creation, source file inclusion, and compile options setting. The configuration targets the Zephyr RTOS environment and sets up necessary paths and dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/sdfw_services/client_notif/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(ssf_client_notif_test)\n\nset(SSF_DIR ${ZEPHYR_NRF_MODULE_DIR}/subsys/sdfw_services)\n\n# generate runner for the test\ntest_runner_generate(src/ssf_client_notif_test.c)\n\n# create mocks\ncmock_handle(${SSF_DIR}/transport/include/ssf_client_transport.h)\n\n# add test file\ntarget_sources(app PRIVATE src/ssf_client_notif_test.c)\n\n# add file under test\ntarget_sources(app\n  PRIVATE\n  ${SSF_DIR}/ssf_client.c\n  ${SSF_DIR}/ssf_client_notif.c\n  ${SSF_DIR}/os/ssf_client_zephyr.c\n)\n\ntarget_include_directories(app\n  PRIVATE\n  ${SSF_DIR}/os\n)\n\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_SSF_CLIENT_DOMAIN_ID=2\n  -DCONFIG_SSF_CLIENT_LOG_LEVEL=2\n  -DCONFIG_SSF_CLIENT_REGISTERED_LISTENERS_MAX=2\n  -DCONFIG_SSF_CLIENT_ZCBOR_MAX_BACKUPS=1\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling UARTE0 in Network Core Device Tree\nDESCRIPTION: This code snippet disables the UARTE0 node in the nRF53 Series device tree to ensure that the SPI part of the nRF21540 interface functions correctly, as the SPIM0 and UARTE0 are mutually exclusive AHB bus masters. This provides a necessary configuration step for compatibility.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf21540_gpio_spi.rst#2025-04-21_snippet_3\n\nLANGUAGE: device tree\nCODE:\n```\n&uart0 {\n   status = \"disabled\";\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Wi-Fi Samples Section in reStructuredText\nDESCRIPTION: This snippet defines the Wi-Fi samples section in the documentation using reStructuredText syntax. It sets up the section title, includes general sample information, and creates a table of contents for subpages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/wifi.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _wifi_samples:\n\nWi-Fi samples\n#############\n\nThis section lists the available |NCS| samples for the :ref:`Wi-Fi® <ug_wifi>` protocol.\n\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n\n|filter_samples_by_board|\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/wifi/*/README\n   wifi_radiotest\n   wifi_provisioning\n   wifi_zephyr\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Sources for Modem SLM\nDESCRIPTION: Sets up a Zephyr library and specifies source files for compilation. Includes configuration for modem SLM core functionality and monitor component, with special linker instructions for RAM placement of monitor data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/modem_slm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(modem_slm.c)\nzephyr_library_sources(modem_slm_monitor.c)\n# SLM monitor's data must be in RAM\nzephyr_linker_sources(RWDATA modem_slm_monitor.ld)\n```\n\n----------------------------------------\n\nTITLE: TFTP Client Command Syntax\nDESCRIPTION: The basic syntax for the #XTFTP AT command that implements TFTP operations based on RFC1350. Includes parameters for operation type, URL, port, and file path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/FTP_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT\nCODE:\n```\nAT#XTFTP=<op>,<url>,<port>,<file_path>[,<mode>,<data>]\n```\n\n----------------------------------------\n\nTITLE: Kconfig Configuration Option\nDESCRIPTION: Configuration option for chip ICD DSLS support in Matter protocol.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.9.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_CHIP_ICD_DSLS_SUPPORT\n```\n\n----------------------------------------\n\nTITLE: Specifying Header and Source Files for GATT Profile in reStructuredText\nDESCRIPTION: This snippet specifies the locations of the header and source files for the GATT Profile library in the nRF Connect SDK project structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/gattp.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n| Header file: :file:`include/bluetooth/services/gattp.h`\n| Source file: :file:`subsys/bluetooth/services/gattp.c`\n```\n\n----------------------------------------\n\nTITLE: Enabling CIS Bidirectional Communication in Kconfig\nDESCRIPTION: Sets the CONFIG_STREAM_BIDIRECTIONAL Kconfig option to enable bidirectional mode in the nRF5340 Audio application. This configuration can be applied to both debug and release versions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/configuration.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_STREAM_BIDIRECTIONAL=y\n```\n\n----------------------------------------\n\nTITLE: Modeling Nordic DFU Update Decision Flow with PlantUML\nDESCRIPTION: A flowchart diagram that illustrates the decision tree for updating firmware components in a Nordic system. It checks for component compatibility, validates URIs, and processes different update sets based on version requirements before fetching, validating, and processing the updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/img/ab_root_candidate_verification.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nstart\n\n: SET_TO_UPDATE_MIRROR := SET_TO_UPDATE ;\n\nif (Uri('#top') present and valid) then (yes)\n\nif (SET_TO_UPDATE_MIRROR == SET_B) then (yes)\nif (Version(Application A) >= MIN_COMPATIBLE_APP_VERSION_FOR_NORDIC_TOP) then (yes)\nif (Version(Radio A) >= MIN_COMPATIBLE_RAD_VERSION_FOR_NORDIC_TOP) then (yes)\n: fetch('#top') ;\n: check_integrity('#top') ;\n: process('#top') ;\nstop\n\nendif\nendif\nendif\n: abort() ;\nstop\n\nelse (no)\nif (Version(Intalled Nordic Top) >= MIN_NORDIC_TOP_VERSION) then (yes)\nif (SET_TO_UPDATE_MIRROR == SET_A) then (yes)\n: fetch('#radio') ;\n: check_integrity('#radio') ;\n: process('#radio') ;\n\n: fetch('#application') ;\n: check_integrity('#application') ;\n: process('#application') ;\nstop\nelseif (SET_TO_UPDATE_MIRROR == SET_B) then (yes)\n: fetch('#radio_b') ;\n: check_integrity('#radio_b') ;\n: process('#radio_b') ;\n\n: fetch('#application_b') ;\n: check_integrity('#application_b') ;\n: process('#application_b') ;\nstop\nelse (no)\n: abort() ;\nstop\nendif\n\nelse (no)\n: abort() ;\nstop\nendif\n\nendif\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Library in CMake\nDESCRIPTION: Conditional compilation of RPC library sources based on CONFIG_APP_RPC configuration. Includes source directory and sets up Zephyr library with optional source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/modules/app_rpc/zephyr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_APP_RPC)\n\nzephyr_library()\nzephyr_include_directories(include)\nzephyr_library_sources_ifdef(CONFIG_NRF_RPC src/app_rpc.c)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11ac PER Measurement (Transmitter)\nDESCRIPTION: Commands to set up the transmitter for 802.11ac PER measurement, including channel, packet parameters, and transmission settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 40\nuart:~$ wifi_radio_test tx_pkt_tput_mode 2\nuart:~$ wifi_radio_test tx_pkt_mcs 7\nuart:~$ wifi_radio_test tx_pkt_len 4000\nuart:~$ wifi_radio_test tx_pkt_sgi 0\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num 10000\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Initializing Sensor Timer in C++\nDESCRIPTION: This snippet initializes a Zephyr timer for periodic sensor measurement updates. The timer is started with a given timeout and can be stopped and managed through specific functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/adding_clusters.rst#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n   k_timer sSensorTimer;\n\n   void SensorTimerHandler(k_timer *timer)\n   {\n           Nrf::PostTask([] { AppTask::SensorMeasureHandler(); });\n   }\n\n   void StartSensorTimer(uint32_t aTimeoutMs)\n   {\n           k_timer_start(&sSensorTimer, K_MSEC(aTimeoutMs), K_MSEC(aTimeoutMs));\n   }\n\n   void StopSensorTimer()\n   {\n           k_timer_stop(&sSensorTimer);\n   }\n\n   CHIP_ERROR AppTask::Init()\n   {\n           /*\n           ... Original content\n           */\n\n           k_timer_init(&sSensorTimer, &SensorTimerHandler, nullptr);\n           k_timer_user_data_set(&sSensorTimer, this);\n           return Nrf::Matter::StartServer();\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Application Sources\nDESCRIPTION: Configures application source files and include directories. Includes common Matter sources and sets up specific application source files for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/cmake/source_common.cmake)\n\ntarget_include_directories(app PRIVATE\n    src\n    ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}\n)\n\ntarget_sources(app PRIVATE\n    src/app_task.cpp\n    src/zcl_callbacks.cpp\n    src/main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: TLS Certificate Processing\nDESCRIPTION: Conditionally processes TLS certificate files if the `CONFIG_NET_SOCKETS_SOCKOPT_TLS` option is enabled.  This involves creating .inc files from .pem certificates and defining compiler macros to include certificate data into the application build. This section also includes a warning regarding the use of non-secure memory for credentials.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_NET_SOCKETS_SOCKOPT_TLS)\n\tmessage(WARNING \"Credentials are exposed in non-secure memory. This should be avoided in production.\")\n\n\tset(app_certs_binary_dir ${APPLICATION_BINARY_DIR}/credentials)\n\n\t# Function to process a certificate file and create a corresponding .inc file and compiler definition\n\t# used to assign C variables that are used in main.c.\n\tfunction(process_certificate definition_name file_name)\n\t\tset(cert_file ${APPLICATION_SOURCE_DIR}/credentials/${file_name})\n\t\tif(EXISTS ${cert_file})\n\t\t\tmessage(STATUS \"${file_name} found\")\n\n\t\t\tget_filename_component(file_base_name ${file_name} NAME_WE)\n\t\t\tset(inc_file_name ${file_base_name}.inc)\n\n\t\t\tset(inc_file_path ${app_certs_binary_dir}/${inc_file_name})\n\t\t\tgenerate_inc_file_for_target(app ${cert_file} ${inc_file_path})\n\n\t\t\t# Define a compiler macro with the path to the generated .inc file,\n\t\t\t# allowing it to be included in the source code.\n\t\t\tadd_definitions(-D${definition_name}=\"${inc_file_path}\")\n\t\tendif()\n\tendfunction()\n\n\t# Process each certificate file by generating a .inc file and defining a corresponding macro.\n\tprocess_certificate(\"HTTP_SERVER_CA_CERT\" \"server_certificate.pem\")\n\tprocess_certificate(\"HTTP_SERVER_PRIVATE_KEY\" \"server_private_key.pem\")\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Provider Factory\nDESCRIPTION: Lambda function for creating new MyBtServiceDataProvider instances in the device factory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\n{ ServiceUuid::MyBtService, [](UpdateAttributeCallback updateClb, InvokeCommandCallback commandClb) {\n   return chip::Platform::New<MyBtServiceDataProvider>(updateClb, commandClb);\n} },\n```\n\n----------------------------------------\n\nTITLE: Setting Power Manager Level in C\nDESCRIPTION: When there's at least one active connection, the power level is limited to POWER_MANAGER_LEVEL_SUSPENDED. The limitation is removed when there are no active connections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_state_pm.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nPOWER_MANAGER_LEVEL_SUSPENDED\n```\n\n----------------------------------------\n\nTITLE: Set Default xyL Value (Unacknowledged)\nDESCRIPTION: This shell command sets the default xyL state value on the server without requesting a response. It requires the default lightness, x, and y values as input.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl default-set-unack <Light> <X> <Y>\n\tSet the Default xyL state value of the server without requesting a response.\n\n\t* ``Light`` - Default lightness level to be set.\n\t* ``X`` - Default x level to be set.\n\t* ``Y`` - Default y level to be set.\n```\n\n----------------------------------------\n\nTITLE: Get DNS and MTU Parameters - C\nDESCRIPTION: The function `pdn_dynamic_params_get` has been updated to make the `dns4_pri`, `dns4_sec`, and `ipv4_mtu` parameters optional. If the MTU is not reported by the SIM card, the `ipv4_mtu` parameter is set to zero.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Defining Digital Output Object Constants\nDESCRIPTION: Example showing how to define constants for a new IPSO Digital Output object type including object and resource IDs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_client_utils.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define IPSO_DIGITAL_OUTPUT_ID        3201\n#define OUTPUT_DIGITAL_STATE_ID        5550\n#define RESOURCE_PATH &LWM2M_OBJ(IPSO_DIGITAL_OUTPUT_ID, 0, OUTPUT_DIGITAL_STATE_ID)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake and Bluetooth HCI LPUART Setup\nDESCRIPTION: This snippet configures the minimum CMake version, finds the required Zephyr SDK package, and defines the project name. It also specifies the source files needed for the Bluetooth HCI UART application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/hci_lpuart/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# SPDX-License-Identifier: Apache-2.0\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(hci_lpuart)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/bluetooth/hci_uart/src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for DECT PHY App\nDESCRIPTION: Specifies the source files to be compiled and linked into the 'app' target. These files implement different functionalities of the DECT PHY application, such as shell commands, control logic, scanning, and receiving data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/dect/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_shell.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_ctrl.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_ctrl_scheduler_integration.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_scan.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_rx.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Signature Key for NSIB Bootloader in nRF Connect SDK\nDESCRIPTION: Demonstrates how to specify a custom signature key file for the NSIB bootloader using Kconfig and command line options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\nSB_CONFIG_SECURE_BOOT_SIGNING_KEY_FILE=\"<path_to>/priv.pem\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n-DSB_CONFIG_SECURE_BOOT_SIGNING_KEY_FILE=\\\"<path_to>/priv.pem\\\"\n```\n\n----------------------------------------\n\nTITLE: DECT MAC Setting Reset\nDESCRIPTION: This command resets the DECT settings to their default values. It is often used as a starting point for configuring the DECT MAC layer.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_21\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ dect sett --reset\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Test Event Triggers in Kconfig\nDESCRIPTION: Defines Kconfig options to enable and configure test event triggers for Matter applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/common/config.rst#2025-04-21_snippet_7\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_TEST_EVENT_TRIGGERS\n  \"bool\" - Enable support for test event triggers.\n\nCONFIG_NCS_SAMPLE_MATTER_TEST_EVENT_TRIGGERS_MAX\n  \"int\" - Define the maximum number of event triggers.\n\nCONFIG_NCS_SAMPLE_MATTER_TEST_EVENT_TRIGGERS_REGISTER_DEFAULTS\n  \"bool\" - Automatically register default event triggers, such as factory reset, device reboot, and OTA start query.\n\nCONFIG_NCS_SAMPLE_MATTER_TEST_EVENT_TRIGGERS_MAX_TRIGGERS_DELEGATES\n  \"int\" - Define the maximum number of implementations of the TestEventTriggerDelegate class to be registered in the nRF test event triggers class.\n```\n\n----------------------------------------\n\nTITLE: Adding WiFi Doxygen Documentation Set in CMake\nDESCRIPTION: Adds the WiFi Doxygen documentation set as a standalone set to the build process, using the Zephyr nRF WiFi module directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_doxygen_docset(wifi ${ZEPHYR_NRF_WIFI_MODULE_DIR} \"\" STANDALONE)\n```\n\n----------------------------------------\n\nTITLE: Image Confirmation Log Output\nDESCRIPTION: Console log output showing the process of testing and confirming the application image variant A after programming.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n<inf> AB: Image set A not confirmed yet, testing...\n<inf> AB: Confirming...\n<inf> AB: Confirmed\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Audio Module Structure in CMake\nDESCRIPTION: This CMake snippet organizes Bluetooth audio functionality by adding subdirectories for key components and configuring include paths. It structures the codebase into four logical modules: management, rendering and capture, content control, and streaming.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(bt_management)\nadd_subdirectory(bt_rendering_and_capture)\nadd_subdirectory(bt_content_control)\nadd_subdirectory(bt_stream)\n\nzephyr_library_include_directories(\n    bt_management\n    bt_rendering_and_capture\n    bt_content_control\n    bt_stream\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Profiling Modules for NRF Connect SDK\nDESCRIPTION: This CMake snippet configures the build system to include various profiling and debugging modules. It unconditionally adds the coredump module and conditionally includes cpu_load, etb_trace, and ppi_trace modules based on their respective configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/debug/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(coredump)\nadd_subdirectory_ifdef(CONFIG_CPU_LOAD\t\tcpu_load)\nadd_subdirectory_ifdef(CONFIG_ETB_TRACE\t\tetb_trace)\nadd_subdirectory_ifdef(CONFIG_PPI_TRACE\t\tppi_trace)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This command searches for the Zephyr package and makes it available for use in the project. The REQUIRED keyword ensures that the build process will fail if the Zephyr package is not found. The HINTS parameter specifies a location to search for the package, using the ZEPHYR_BASE environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/record_launch_app/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Querying Link Metrics Forward Tracking Series\nDESCRIPTION: Retrieves the collected Link Metrics data from the Forward Tracking Series, showing PDU counter, LQI, margin, and RSSI values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot linkmetrics query fe80:0:0:0:10b1:93ea:c0ee:eeb7 forward 1\nDone\nReceived Link Metrics Report from: fe80:0:0:0:10b1:93ea:c0ee:eeb7\n- PDU Counter: 13 (Count/Summation)\n- LQI: 212 (Exponential Moving Average)\n- Margin: 60 (dB) (Exponential Moving Average)\n- RSSI: -40 (dBm) (Exponential Moving Average)\n```\n\n----------------------------------------\n\nTITLE: Provisioning the Device with West\nDESCRIPTION: This command uploads the public key for application image signature verification to the device using the West provisioning tool. It requires the SoC name and the key file based on the specified algorithm.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwest ncs-provision upload -s <soc> -k sysbuild/configuration/<board_target>/boot_signature_key_file_<algorithm>.pem --keyname UROT_PUBKEY\n```\n\n----------------------------------------\n\nTITLE: Triggering Matter Test Event Using chip-tool Console Command\nDESCRIPTION: This console command demonstrates how to trigger a specific event on a Matter device using the chip-tool. It requires the device's enable key, activation code, and node ID. The example shows triggering a Reboot event with a 5 ms delay on a Matter Template device with node ID 1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/test_event_triggers.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n./chip-tool generaldiagnostics test-event-trigger hex:<enable key> <activation code> <node id> 0\n```\n\nLANGUAGE: console\nCODE:\n```\n./chip-tool generaldiagnostics test-event-trigger hex:00112233445566778899AABBCCDDEEFF 0xFFFFFFFF10000005 1 0\n```\n\n----------------------------------------\n\nTITLE: Requesting P-GPS data via custom download transport\nDESCRIPTION: When using CONFIG_NRF_CLOUD_PGPS_DOWNLOAD_TRANSPORT_CUSTOM with CONFIG_NRF_CLOUD_PGPS_TRANSPORT_NONE, call these functions to manage the full flow of data outside the P-GPS library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud_pgps.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n1. nrf_cloud_pgps_begin_update\n#. nrf_cloud_pgps_process_update\n#. nrf_cloud_pgps_finish_update\n```\n\n----------------------------------------\n\nTITLE: Starting OpenThread Control Interface\nDESCRIPTION: Command to start the OpenThread control interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nsudo ./build/posix/src/posix/ot-ctl\n```\n\n----------------------------------------\n\nTITLE: Conditional Bluetooth Radio Notification Source\nDESCRIPTION: Conditionally adds radio_notification_conn_cb.c to the build when Bluetooth radio notification connection callback configuration is enabled. This allows optional compilation of Bluetooth-specific connection notification handling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/host_extensions/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_RADIO_NOTIFICATION_CONN_CB radio_notification_conn_cb.c)\n```\n\n----------------------------------------\n\nTITLE: UART Async Adapter Usage Example in C\nDESCRIPTION: This code snippet demonstrates how to use the UART async adapter library. It initializes the adapter if the UART device does not natively support the asynchronous API, allowing the application to interact with the UART device using a consistent asynchronous interface.  The example checks for asynchronous API support and initializes the adapter accordingly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/uart_async_adapter.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <uart_async_adapter.h>\n\n...\n/* Get the UART device we want to use */\nstatic const struct device *uart = DEVICE_DT_GET([UART node identifier]);\n\n/* Create UART async adapter instance */\nUART_ASYNC_ADAPTER_INST_DEFINE(async_adapter);\n\n/* UART initialization (called before any UART usage) */\nstatic int uart_init(void)\n{\n    if (!uart_test_async_api(uart)) {\n\t\t/* Implement API adapter */\n\t\tuart_async_adapter_init(async_adapter, uart);\n\t\tuart = async_adapter;\n\t}\n\t/* Continue initialization using asynchronous API on uart device */\n\t(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr Project with CMake\nDESCRIPTION: This snippet initializes a Zephyr-based project using CMake. It sets the minimum required version of CMake, finds the Zephyr package, and links with specific libraries necessary for platform testing. Dependencies include Zephyr SDK and the SUIT platform internal API headers. It's crucial to have the ZEPHYR_BASE environment variable set.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/ram_sink/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(platform_test)\ninclude(../cmake/test_template.cmake)\n\n# Link with the CMake target, that includes SUIT platform internal APIs header\nzephyr_library_link_libraries(suit_stream_sinks_interface)\nzephyr_library_link_libraries(suit_utils)\n```\n\n----------------------------------------\n\nTITLE: Importing PyAudio for Audio Stream Processing\nDESCRIPTION: PyAudio library for cross-platform audio input and output, enabling real-time audio streaming and playback\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/requirements_music_led_stream.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npyaudio\n```\n\n----------------------------------------\n\nTITLE: Defining BT Service Data Provider Headers\nDESCRIPTION: Header file declarations for MyBtServiceDataProvider class including characteristic handles and GATT subscription parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nuint16_t mCharacteristicHandle;\nuint16_t mCccHandle;\nbt_gatt_subscribe_params mGattSubscribeParams{};\n```\n\n----------------------------------------\n\nTITLE: Displaying Console Output for TF-M Hello World Sample\nDESCRIPTION: This code snippet shows the expected console output after programming and running the TF-M Hello World sample. It demonstrates reading secure memory, calculating IPC overhead, accessing FICR registers, and generating a random number using TF-M.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_hello_world/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nHello World! nrf5340dk/nrf5340/cpuapp/ns\nReading some secure memory that NS is allowed to read\nApproximate IPC overhead us: 65\nFICR->INFO.FLASH: 0x00000400\nGenerating random number\n0x03607cef3bdcbbec52edebeb7a0e80756b96d647c82fab068f26d436ff078152\nExample finished successfully!\n```\n\n----------------------------------------\n\nTITLE: Cloning project repositories with west update\nDESCRIPTION: Command to clone all the project repositories defined in the manifest file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nwest update\n```\n\n----------------------------------------\n\nTITLE: Configuring Download Client Library Sources in CMake\nDESCRIPTION: Sets up the Download Client library, specifying core source files and conditionally including CoAP and shell support based on configuration flags. It also defines the include directory for the library headers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/download_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tsrc/download_client.c\n\tsrc/parse.c\n\tsrc/http.c\n\tsrc/sanity.c\n)\n\nzephyr_library_sources_ifdef(\n\tCONFIG_COAP\n\tsrc/coap.c\n)\n\nzephyr_library_sources_ifdef(\n\tCONFIG_DOWNLOAD_CLIENT_SHELL\n\tsrc/shell.c\n)\n\nzephyr_include_directories(./include)\n```\n\n----------------------------------------\n\nTITLE: Configuration Change for nRF Cloud MQTT Transport\nDESCRIPTION: Configuration updates for IPv4/IPv6 handling in nRF Cloud MQTT transport. Replaces static IP configuration with automatic DNS lookup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NRF_CLOUD_IPV6\nCONFIG_NET_IPV4\nCONFIG_NET_IPV6\n```\n\n----------------------------------------\n\nTITLE: Configuring ISO Time Sync Project with Conditional Source Inclusion in CMake\nDESCRIPTION: This CMake configuration sets up the iso_time_sync project with conditional source file inclusion based on Bluetooth ISO features and SoC compatibility. It includes different controller timing implementations depending on the target Nordic SoC series (nRF52, nRF53, or nRF54).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_time_sync/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(iso_time_sync)\n\ntarget_include_directories(app PRIVATE include)\ntarget_sources(app PRIVATE src/main.c src/timed_led_toggle.c)\n\nif (CONFIG_BT_ISO_BROADCASTER)\n    target_sources(app PRIVATE src/bis_transmitter.c)\nendif()\n\nif (CONFIG_BT_ISO_SYNC_RECEIVER)\n    target_sources(app PRIVATE src/bis_receiver.c)\nendif()\n\nif (CONFIG_BT_ISO_CENTRAL)\n    target_sources(app PRIVATE src/cis_central.c)\nendif()\n\nif (CONFIG_BT_ISO_PERIPHERAL)\n    target_sources(app PRIVATE src/cis_peripheral.c)\nendif()\n\nif (CONFIG_BT_ISO_TX_BUF_COUNT)\n    target_sources(app PRIVATE src/iso_tx.c)\nendif()\n\nif (CONFIG_BT_ISO_RX_BUF_COUNT)\n    target_sources(app PRIVATE src/iso_rx.c)\nendif()\n\nif (CONFIG_SOC_COMPATIBLE_NRF52X)\n    target_sources(app PRIVATE src/controller_time_nrf52.c)\nelseif (CONFIG_SOC_COMPATIBLE_NRF5340_CPUAPP)\n    target_sources(app PRIVATE src/controller_time_nrf53_app.c)\nelseif (CONFIG_SOC_SERIES_NRF54LX OR CONFIG_SOC_SERIES_NRF54HX)\n    target_sources(app PRIVATE src/controller_time_nrf54.c)\nelse()\n    MESSAGE(FATAL_ERROR \"Unsupported series\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing west with Specific Revision\nDESCRIPTION: Initializes the west tool with a specified revision of the nRF Connect SDK (NCS). The revision identifier is specified twice: once for the checkout and once as the workspace directory name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwest init -m https\\://github.com/nrfconnect/sdk-nrf --mr *nRFConnectSDK_revision* *nRFConnectSDK_revision*\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project, ensuring compatibility with the CMake features used.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Creating External Project for TFM Regression Test App in CMake\nDESCRIPTION: Sets up an external project for building the TFM regression test application. It configures the build with the appropriate toolchain settings, paths to dependencies, and build options. The project depends on the main TFM build and produces binary and hex outputs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_regression_test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(ExternalProject)\n\nExternalProject_Add(tfm_regression_test_app\n    SOURCE_DIR ${TFM_TEST_REPO_PATH}/tests_reg\n    BINARY_DIR ${PROJECT_BINARY_DIR}/tfm_ns\n    CONFIGURE_COMMAND\n        ${CMAKE_COMMAND}\n                -G ${CMAKE_GENERATOR}\n                -S ${TFM_TEST_REPO_PATH}/tests_reg\n                -B ${PROJECT_BINARY_DIR}/tfm_ns\n                -DCONFIG_SPE_PATH=${TFM_BINARY_DIR}/api_ns\n                -DTFM_TOOLCHAIN_FILE=cmake/${TFM_TOOLCHAIN_NS_FILE}\n                -DCROSS_COMPILE=${TFM_TOOLCHAIN_PATH}/${TFM_TOOLCHAIN_PREFIX}\n                -DQCBOR_PATH${QCBOR_PATH_TYPE}=${CONFIG_TFM_QCBOR_PATH}\n                -DCMAKE_BUILD_TYPE=RelWithDebInfo\n                -DZEPHYR_NRF_MODULE_DIR=${ZEPHYR_NRF_MODULE_DIR}\n                -DNRF_CONFIG_CPU_FREQ_MHZ=${CONFIG_TFM_CPU_FREQ_MHZ}\n    BUILD_COMMAND ${CMAKE_COMMAND} --build .\n    INSTALL_COMMAND \"\"\n    BUILD_ALWAYS True\n    USES_TERMINAL_BUILD True\n    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/tfm_ns\n    DEPENDS tfm\n    BUILD_BYPRODUCTS\n        ${TFM_NS_HEX_FILE}\n        ${TFM_NS_BIN_FILE}\n        ${TFM_NS_SIGNED_BIN_FILE}\n)\n\nadd_dependencies(app tfm_regression_test_app)\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 DK\nDESCRIPTION: Command line instruction for building the Wi-Fi Radio test sample for the nRF7002 DK with nRF5340 processor.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets the minimum required CMake version, finds the Zephyr package, and declares the project name. It is the basic setup for a Zephyr-based application using CMake.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/lpuart/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(low_power_uart)\n```\n\n----------------------------------------\n\nTITLE: SEGGER RTT Control Block Address Configuration\nDESCRIPTION: Configuration for RTT Viewer/Logger when auto-search fails to find control block. Address can be set to 0 for bottom-up search or found in zephyr.map file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_33\n\nLANGUAGE: C\nCODE:\n```\n_SEGGER_RTT\n```\n\n----------------------------------------\n\nTITLE: Matter CLI Command to Turn Off Light Devices\nDESCRIPTION: These Matter CLI commands permit users to turn off the state-indication LED on bound light bulb devices, applicable to individual or grouped lights. Necessary conditions include a properly configured Matter environment and a connected terminal emulator. Device-specific parameters must align with existing configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nmatter switch onoff off\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmatter switch groups onoff off\n```\n\n----------------------------------------\n\nTITLE: Critical Low Battery Console Output\nDESCRIPTION: Displays console output when battery voltage reaches critically low levels, showing power-off warning and NVM operation warnings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/battery/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nBattery voltage: 3175\nBattery voltage: 3175\nModem Event Battery LOW:\n******************************************************************\n* Attention! Do not attempt to write to NVM while in this state. *\n* The NVM operation will sometimes appear to finish successfully *\n* without actually being executed at all.                        *\n* The modem has been set to Offline.                             *\n******************************************************************\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth LE Audio Build in CMake\nDESCRIPTION: This CMake snippet configures the build system for Bluetooth LE Audio functionality. It sets up include directories, adds the bt_le_audio_tx subdirectory, and conditionally includes source files based on enabled Kconfig options for broadcast sink/source and unicast client/server modes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_stream/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_include_directories(\n    broadcast\n    unicast\n    bt_le_audio_tx\n)\n\nadd_subdirectory(bt_le_audio_tx)\n\ntarget_sources(app PRIVATE\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/le_audio.c)\n\nif (CONFIG_BT_BAP_BROADCAST_SINK)\n\ttarget_sources(app PRIVATE\n\t\t\t${CMAKE_CURRENT_SOURCE_DIR}/broadcast/broadcast_sink.c)\nendif()\n\nif (CONFIG_BT_BAP_BROADCAST_SOURCE)\n\ttarget_sources(app PRIVATE\n\t\t\t${CMAKE_CURRENT_SOURCE_DIR}/broadcast/broadcast_source.c)\nendif()\n\nif (CONFIG_BT_BAP_UNICAST_CLIENT)\n\ttarget_sources(app PRIVATE\n\t\t\t${CMAKE_CURRENT_SOURCE_DIR}/unicast/unicast_client.c)\nendif()\n\nif (CONFIG_BT_BAP_UNICAST_SERVER)\n\ttarget_sources(app PRIVATE\n\t\t\t${CMAKE_CURRENT_SOURCE_DIR}/unicast/unicast_server.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Bluetooth Connections in CAF Bluetooth LE State Module\nDESCRIPTION: This snippet demonstrates the structure used for handling Bluetooth connection callbacks in the CAF Bluetooth LE state module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_state.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbt_conn_cb\n```\n\n----------------------------------------\n\nTITLE: Measuring RF RSSI with wifi_radio_test\nDESCRIPTION: This snippet demonstrates how to use the `wifi_radio_test` command to measure the RF RSSI status on a specified channel. It initializes the radio on channel 144 and then retrieves the RF RSSI value.  The output shows the RF RSSI value, which indicates the level of saturation at the LNA output.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test init 144\nwifi_radio_test get_rf_rssi\n```\n\n----------------------------------------\n\nTITLE: Scanning Bluetooth LE Devices for Matter Bridge\nDESCRIPTION: CLI command to scan and discover available Bluetooth LE devices that can be bridged\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/matter_bridge_testing.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmatter_bridge scan\n```\n\n----------------------------------------\n\nTITLE: Retrieving Command Type with AT Parser in C\nDESCRIPTION: Demonstrates how to get the command type using the new AT Parser.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nenum at_parser_cmd_type type;\nat_parser_cmd_type_get(&at_parser, &type);\n```\n\n----------------------------------------\n\nTITLE: Setting Light CTL State - Command Syntax\nDESCRIPTION: Sets the Light CTL state value with an option to define transition time and delay, waiting for a response from the server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl set <Light> <Temp> <Dlt> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: Extracting Common Name (CN) from a Certificate Using OpenSSL\nDESCRIPTION: Extracts the CN from a PEM certificate file, which is critical for device identification in Azure IoT Hub. Requires OpenSSL.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nopenssl x509 -in certs/client-cert.pem -noout -subject\n```\n\n----------------------------------------\n\nTITLE: Enabling Location Tracking in Kconfig\nDESCRIPTION: Enables location tracking. Enable at least one location tracking method to avoid a build error.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LOCATION_TRACKING\n```\n\n----------------------------------------\n\nTITLE: WiFi Power Save Shell Commands and Network Management APIs\nDESCRIPTION: A comprehensive set of shell commands and network management APIs for controlling power save operations, including enabling/disabling power save mode, configuring DTIM/listen interval modes, and managing TWT sessions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/station_mode/powersave.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwifi ps on\nwifi ps off\nwifi ps_mode legacy\nwifi ps_mode wmm\nwifi ps_timeout\nwifi ps_listen_interval\nwifi ps_wakeup_mode dtim\nwifi ps_wakeup_mode listen_interval\nwifi twt setup 0 0 1 1 0 1 1 1 65000 524000\nwifi twt teardown 0 0 1 1\nwifi twt teardown_all\n```\n\n----------------------------------------\n\nTITLE: Adding a Bluetooth LE Bridged Device\nDESCRIPTION: Command syntax for adding a discovered Bluetooth LE device to the Matter bridge. Requires the device index from the scan results and optional node label.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_9\n\nLANGUAGE: parsed-literal\nCODE:\n```\nmatter_bridge add *<ble_device_index>* *[\"node label\"]*\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Size in C\nDESCRIPTION: Retrieves the size of a parameter or checks if a parameter exists at a specified index in the list.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_parser.rst#2025-04-21_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nat_params_size_get();\n```\n\n----------------------------------------\n\nTITLE: Scanning Beacon on Client Side - Console\nDESCRIPTION: This command initiates a beacon scan on a specified channel, providing details about the scanning results, including RSSI measurements and received data parameters. This requires the DECT command-line interface to execute the scanning process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_26\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ dect mac beacon_scan -c 1659\n      -----------------------------------------------------------------------------\n      Beacon scan started.\n      Starting RX: channel 1659, rssi_level 0, duration 4 secs.\n      -----------------------------------------------------------------------------\n      RSSI scanning results (meas #1 mdm time 16806798765):\n      channel                               1659\n      total scanning count                  102\n      highest RSSI                          -105\n      lowest RSSI                           -112\n      PCC received (stf start time 16878096625): status: \"valid - PDC can be received\", snr 97, RSSI-2 -121 (RSSI -60)\n      phy header: short nw id 120 (0x78), transmitter id 27462\n      len 1, MCS 0, TX pwr: 0 dBm\n      PDC received (stf start time 16878096625): snr 99, RSSI-2 -122 (RSSI -61), len 50\n      DECT NR+ MAC PDU:\n      MAC header:\n         Version: 0\n         Security: MAC security is not used\n         Type: Beacon Header\n            Network ID (24bit MSB):  1193046 (0x123456)\n            Transmitter ID:          1234 (0x000004d2)\n```\n\n----------------------------------------\n\nTITLE: Power Performance Penalty in Radio Notification - MPSL - Documentation Format\nDESCRIPTION: This issue describes the power consumption impact introduced by the Radio Notification feature, indicating an additional current consumption of about 600 µA, which developers should be aware of when deploying applications using radio notifications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_38\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-14153: Radio Notification power performance penalty The Radio Notification feature has a power performance penalty proportional to the notification distance. This means an additional average current consumption of about 600 µA for the duration of the radio notification.\n```\n\n----------------------------------------\n\nTITLE: Building Multicore Idle Test on nRF54H20 DK\nDESCRIPTION: This command builds the multicore idle test application for the nRF54H20 development kit's application and radio cores. It uses the 'west' build tool with specific board and test configuration to achieve minimal power consumption without console output.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -T benchmarks.multicore.idle.nrf54h20dk_cpuapp_cpurad.s2ram .\n```\n\n----------------------------------------\n\nTITLE: Lower Edge Backoff Kconfig Parameters\nDESCRIPTION: Kconfig parameters for configuring lower edge transmission power backoff across different frequency bands and frame types. These parameters are used to reduce power at the lower edge of frequency bands to meet regulatory requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/band_edge_compensation.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF70_BAND_2G_LOWER_EDGE_BACKOFF_DSSS\nCONFIG_NRF70_BAND_2G_LOWER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_2G_LOWER_EDGE_BACKOFF_HE\nCONFIG_NRF70_BAND_UNII_1_LOWER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_UNII_1_LOWER_EDGE_BACKOFF_HE\nCONFIG_NRF70_BAND_UNII_2A_LOWER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_UNII_2A_LOWER_EDGE_BACKOFF_HE\nCONFIG_NRF70_BAND_UNII_2C_LOWER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_UNII_2C_LOWER_EDGE_BACKOFF_HE\nCONFIG_NRF70_BAND_UNII_3_LOWER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_UNII_3_LOWER_EDGE_BACKOFF_HE\nCONFIG_NRF70_BAND_UNII_4_LOWER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_UNII_4_LOWER_EDGE_BACKOFF_HE\n```\n\n----------------------------------------\n\nTITLE: Calculating Estimated Storage Time Using Formula\nDESCRIPTION: This snippet presents a mathematical formula to estimate storage time for emergency data storage based on various parameters. It outlines the formula in LaTeX format for clarity and precision. The provided calculations illustrate how the storage time can be derived from given constants and variable sizes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/emds.rst#2025-04-21_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\n.. math::\n   \\begin{aligned}\n   t_\\text{store} = 9000\\text{ µs} &+ \\left( 300\\text{ µs} + 41\\text{ µs} \\times \\left( \\left\\lceil\\frac{8\\text{ B}}{4\\text{ B}}\\right\\rceil + \\left\\lceil\\frac{2040\\text{ B}}{4\\text{ B}}\\right\\rceil \\right) \\right) \\\n   &+ \\left( 300\\text{ µs} + 41\\text{ µs} \\times \\left( \\left\\lceil\\frac{8\\text{ B}}{4\\text{ B}}\\right\\rceil + \\left\\lceil\\frac{3\\text{ B}}{4\\text{ B}}\\right\\rceil \\right) \\right) \\\n   &= 30715\\text{ µs}\n   \\end{aligned}\n```\n\n----------------------------------------\n\nTITLE: RX/TX Testing with RF Tool\nDESCRIPTION: Shows how to use the 'dect rf_tool' command for RX/TX testing, including frame configuration and bi-directional testing setup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndect rssi_scan -c 0\ndect sett -t 39\ndect rf_tool -m rx_tx --rx_find_sync --frame_repeat_count 15 --frame_repeat_count_intervals 10 -c 1677\n```\n\n----------------------------------------\n\nTITLE: Implementing Location Library Cloud Request Handling in C\nDESCRIPTION: Updated the Location library to combine neighbor cell measurements and Wi-Fi scan results into a single cloud request. This change affects API functions and event handling for cloud location requests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_15\n\nLANGUAGE: C\nCODE:\n```\n// New function replacing cellular_ext_result_set and wifi_ext_result_set\nint location_cloud_location_ext_result_set(const struct location_ext_result *result);\n\n// Updated event structure\nstruct location_event_data {\n    // ...\n    struct location_cloud_location_request cloud_location_request;\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet specifies the minimum required version of CMake for the project, ensuring compatibility with features used in the build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_decrypt_filter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Triggering a continuous level change without response\nDESCRIPTION: Triggers a continuous level change for the server without waiting for a response, with optional transition time and delay.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_lvl_cli.rst#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmesh models lvl move-set-unack <Dlt> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: Power Manager Level Enums\nDESCRIPTION: Enumeration values defining different power management levels that can be imposed on the system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/usb_state_pm.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPOWER_MANAGER_LEVEL_SUSPENDED\nPOWER_MANAGER_LEVEL_ALIVE\n```\n\n----------------------------------------\n\nTITLE: Setting Number of Subgroups with Shell Command\nDESCRIPTION: Command to set the number of subgroups for a Broadcast Isochronous Group. The maximum number is configured via CONFIG_BT_BAP_BROADCAST_SRC_SUBGROUP_COUNT.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnac num_subgroups <number> <BIG index>\n```\n\n----------------------------------------\n\nTITLE: Light HSL Shell Command Examples\nDESCRIPTION: Demonstrating various shell commands for interacting with Light HSL Client model, including getting and setting light states, ranges, and individual components\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_hsl_cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmesh models hsl get\nmesh models hsl set 100 50 75\nmesh models hsl default-set 255 128 200\n```\n\n----------------------------------------\n\nTITLE: Querying TCP Server Status using AT command\nDESCRIPTION: This AT command queries the status of the TCP server. The response provides information about the server's configuration, such as connection parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n**AT#XTCPSVR?**\n#XTCPSVR: -1,-1,0\nOK\n```\n\n----------------------------------------\n\nTITLE: Terminal Log: Clock Synchronization Confirmation\nDESCRIPTION: Console message indicating successful clock synchronization between development kit and Android device using authenticated Bluetooth peer\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: log\nCODE:\n```\nFMDN: clock information synchronized with the authenticated Bluetooth peer\n```\n\n----------------------------------------\n\nTITLE: Programming BICR Firmware to nRF54H20 DK\nDESCRIPTION: Command to program the BICR firmware to an nRF54H20 DK using nrfutil. The command preserves existing data by using the ERASE_NONE option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7_99-cs2.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device program --options chip_erase_mode=ERASE_NONE --firmware <path_to_bicr.hex> --core Application --serial-number <serialnumber>\n```\n\n----------------------------------------\n\nTITLE: Managing Simple VPR Timer Counters in C\nDESCRIPTION: API functions for controlling individual 16-bit timers in standalone mode. These functions allow getting/setting counter values, reload values, and managing counter behavior.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_cst_vtim_simple_counter_get()\nnrf_vpr_cst_vtim_simple_counter_set()\nnrf_vpr_cst_vtim_simple_counter_top_get()\nnrf_vpr_cst_vtim_simple_counter_top_set()\nnrf_vpr_cst_vtim_simple_counter_add_set()\nnrf_vpr_cst_vtim_simple_counter_wait_set()\n```\n\n----------------------------------------\n\nTITLE: Code Relocation to External Flash\nDESCRIPTION: Relocates specific Bluetooth and MCUmgr libraries to external flash (EXTFLASH_TEXT) without copying\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/extxip_smp_svr/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_code_relocate(FILES ${ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src/bluetooth.c LOCATION EXTFLASH_TEXT NOCOPY)\nzephyr_code_relocate(LIBRARY subsys__mgmt__mcumgr__mgmt LOCATION EXTFLASH_TEXT NOCOPY)\n# Additional library relocations...\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Integration Test Flash Sink in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the project configuration for an integration test of flash sink functionality. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, includes a test template, and links necessary libraries for SUIT (Software Update for Internet of Things) utilities and stream sinks interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/flash_sink/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_flash_sink)\ninclude(../cmake/test_template.cmake)\n\n# Link with the CMake target, that includes suit platform internal apis header\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_stream_sinks_interface)\n```\n\n----------------------------------------\n\nTITLE: HTTP Connection Response Syntax\nDESCRIPTION: Response format for HTTP connection status command showing connection state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/HTTPC_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT\nCODE:\n```\n#XHTTPCCON: <state>\n```\n\n----------------------------------------\n\nTITLE: Setting Target Value in Illuminance Regulator\nDESCRIPTION: This snippet illustrates how to set the desired target value within the illuminance regulator. It explains the use of the transition time to interpolate the target value from the previous to the new setting.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_reg.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbt_mesh_light_ctrl_reg_target_set(&regulator, target_value, transition_time);\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Modem Library in C\nDESCRIPTION: Function to shut down the Modem library. It encapsulates the nrf_modem_shutdown call.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_wrapper.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nnrf_modem_lib_shutdown()\n```\n\n----------------------------------------\n\nTITLE: Defining Sensor Configurations in C\nDESCRIPTION: Example configuration for sensors using the CAF Sensor Manager. This snippet defines a configuration for an LIS2DH12 accelerometer.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/sensor_manager.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic const struct sm_sensor_config sensor_configs[] = {\n        {\n                .dev_name = \"LIS2DH12-ACCEL\",\n                .event_descr = \"accel_xyz\",\n                .chans = accel_chan,\n                .chan_cnt = ARRAY_SIZE(accel_chan),\n                .sampling_period_ms = 20,\n                .active_events_limit = 3,\n        },\n};\n```\n\n----------------------------------------\n\nTITLE: Using SMP Command Function in C for Bluetooth DFU\nDESCRIPTION: This code snippet demonstrates using the bt_dfu_smp_command function to send a command to an SMP server. The command is provided as a raw binary buffer consisting of a bt_dfu_smp_header and the payload.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/dfu_smp.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbt_dfu_smp_command(/* command parameters */)\n```\n\n----------------------------------------\n\nTITLE: Schedule Register Structure - C\nDESCRIPTION: This snippet defines the Schedule Register structure used by the Scheduler Server, detailing the fields such as Year, Month, Day, Hour, Minute, Second, DayOfWeek, Action, Transition Time, and Scene Number. Each field includes value ranges and descriptions to ensure proper configuration of scheduled events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scheduler_srv.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSchedule Register: :c:type:`bt_mesh_schedule_entry`\n   The Scheduler Server model offers a Schedule Register that contains up to sixteen registered action entries.\n\nEach entry has the following fields:\n\n* Year: 2 least significant digits of the year\n\n  +---------------------------------------+----------------------------------------+\n  | Value                                 | Description                            |\n  +---------------------------------------+----------------------------------------+\n  | 0x00-0x63                             | 2 least significant digits of the year |\n  +---------------------------------------+----------------------------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_ANY_YEAR` | Any year                               |\n  +---------------------------------------+----------------------------------------+\n  | All other values                      | Prohibited                             |\n  +---------------------------------------+----------------------------------------+\n\n* Month: Bitmask of the months in the year in which the scheduled event is enabled :c:enum:`bt_mesh_scheduler_month`\n\n* Day: The day of the month the scheduled event occurs\n\n  +--------------------------------------+------------------+\n  | Value                                | Description      |\n  +--------------------------------------+------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_ANY_DAY` | Any day          |\n  +--------------------------------------+------------------+\n  | 0x01-0x1F                            | Day of the month |\n  +--------------------------------------+------------------+\n\n* Hour: The hour when the scheduled event occurs\n\n  +-----------------------------------------+----------------------------------+\n  | Value                                   | Description                      |\n  +-----------------------------------------+----------------------------------+\n  | 0x00-0x17                               | Hour of the day (00 to 23 hours) |\n  +-----------------------------------------+----------------------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_ANY_HOUR`   | Any hour of the day              |\n  +-----------------------------------------+----------------------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_ONCE_A_DAY` | Once a day (at a random hour)    |\n  +-----------------------------------------+----------------------------------+\n  | All other values                        | Prohibited                       |\n  +-----------------------------------------+----------------------------------+\n\n* Minute: The minute when the scheduled event occurs\n\n  +-----------------------------------------------+----------------------------------------------------------+\n  | Value                                         | Description                                              |\n  +-----------------------------------------------+----------------------------------------------------------+\n  | 0x00-0x3B                                     | Minute of the hour (00 to 59)                            |\n  +-----------------------------------------------+----------------------------------------------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_ANY_MINUTE`       | Any minute of the hour                                   |\n  +-----------------------------------------------+----------------------------------------------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_EVERY_15_MINUTES` | Every 15 minutes (minute modulo 15 is 0) (0, 15, 30, 45) |\n  +-----------------------------------------------+----------------------------------------------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_EVERY_20_MINUTES` | Every 20 minutes (minute modulo 20 is 0) (0, 20, 40)     |\n  +-----------------------------------------------+----------------------------------------------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_ONCE_AN_HOUR`     | Once an hour (at a random minute)                        |\n  +-----------------------------------------------+----------------------------------------------------------+\n\n* Second: The second when the scheduled event occurs\n\n  +-----------------------------------------------+----------------------------------------------------------+\n  | Value                                         | Description                                              |\n  +-----------------------------------------------+----------------------------------------------------------+\n  | 0x00-0x3B                                     | Second of the minute (00 to 59)                          |\n  +-----------------------------------------------+----------------------------------------------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_ANY_SECOND`       | Any second of the minute                                 |\n  +-----------------------------------------------+----------------------------------------------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_EVERY_15_SECONDS` | Every 15 seconds (second modulo 15 is 0) (0, 15, 30, 45) |\n  +-----------------------------------------------+----------------------------------------------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_EVERY_20_SECONDS` | Every 20 seconds (second modulo 20 is 0) (0, 20, 40)     |\n  +-----------------------------------------------+----------------------------------------------------------+\n  | :c:macro:`BT_MESH_SCHEDULER_ONCE_A_MINUTE`    | Once a minute (at a random second)                       |\n  +-----------------------------------------------+----------------------------------------------------------+\n\n* DayOfWeek: Bitmask of the days of the week when the scheduled event is enabled :c:enum:`bt_mesh_scheduler_wday`\n\n* Action: Action to be executed for a scheduled event :c:enum:`bt_mesh_scheduler_action`\n\n* Transition Time: Transition time for the action\n\n  * Step count: 6 bits (range `0x00` to `0x3e`)\n  * Step resolution: 2 bits\n\n* Scene Number: Scene number to be used for the action\n\n  +------------------+--------------+\n  | Value            | Description  |\n  +------------------+--------------+\n  | 0x0000           | No scene     |\n  +------------------+--------------+\n  | All other values | Scene number |\n  +------------------+--------------+\n```\n\n----------------------------------------\n\nTITLE: VPR Co-processor IRQ Mapping in Device Tree\nDESCRIPTION: Demonstrates the updated approach for mapping global peripheral interrupts to a VPR using standard devicetree properties instead of custom global-irqs property.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.4.99-cs3_to_2.7_application.rst#2025-04-21_snippet_5\n\nLANGUAGE: devicetree\nCODE:\n```\n&spi130 {\n   status = \"reserved\";\n   interrupt-parent = <&cpuppr_clic>;\n};\n```\n\n----------------------------------------\n\nTITLE: Building WPA Supplicant Debug Logs with West\nDESCRIPTION: Command to build the Wi-Fi shell sample with WPA supplicant debugging enabled using West build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/debugging.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp samples/wifi/shell -- -Dnrf_wifi_shell_SNIPPET=\"wpa-supplicant-debug\"\n```\n\n----------------------------------------\n\nTITLE: Example: Setting channel 23\nDESCRIPTION: This example shows how to set the IEEE 802.15.4 radio channel to 23 using the channel command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"channel *23*\"\n```\n\n----------------------------------------\n\nTITLE: OpenThread Build Report for Pre-built Libraries\nDESCRIPTION: Example of an OpenThread build report showing library details, device information, and version tracking for Thread certification purposes\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/certification.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n################### OPENTHREAD REPORT ###################\n+ Target device: nrf54l15\n+ Thread version: v1.4\n+ OpenThread library feature set: Minimal Thread Device (MTD)\n+ Thread device type: Sleepy End Device (SED)\n+ OpenThread Library: openthread/lib/nrf54l15_cpuapp/soft-float/v1.4/mtd/\n+ OpenThread NCS revision: ncs-thread-reference-20241002-dirty\n+ OpenThread NCS SHA: ee86dc26d\n+ NCS revision: v2.8.0-preview1-434-g49bcdd3c6d6-dirty\n+ NCS SHA: 49bcdd3c6d6\n+ No differences in the used Thread library in comparison to the NCS v2.8.0 release\n###################        END        ###################\n```\n\n----------------------------------------\n\nTITLE: Disable Fallback Recovery\nDESCRIPTION: This Kconfig option disables the fallback recovery mechanism in MCUboot. When enabled, MCUboot will not roll back to the last valid firmware image if a firmware upgrade fails.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_8\n\nLANGUAGE: Kconfig\nCODE:\n```\nMCUboot's ``SB_CONFIG_MCUBOOT_MODE_OVERWRITE_ONLY`` Kconfig option\n```\n\n----------------------------------------\n\nTITLE: Remote Core Expected Output Log\nDESCRIPTION: The console output expected from the remote core after programming the sample, showing how events are received, processed, and generated on the remote core.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v2.7.99-ncs1-17-gc3208e7ff49d  ***\nEvent Manager Proxy remote_core started\n[00:00:00.010,864] <inf> event_manager: e:config_event init_val_1=3\n[00:00:00.011,047] <inf> event_manager: e:measurement_event val1=3 val2=3 val3=3\n[00:00:00.511,322] <inf> event_manager: e:measurement_event val1=3 val2=6 val3=9\n[00:00:01.011,566] <inf> event_manager: e:measurement_event val1=3 val2=9 val3=18\n[00:00:01.511,871] <inf> event_manager: e:measurement_event val1=3 val2=12 val3=30\n[00:00:02.012,176] <inf> event_manager: e:measurement_event val1=3 val2=15 val3=45\n[00:00:02.012,298] <inf> event_manager: e: control_event\n[00:00:02.012,451] <inf> event_manager: e: ack_event\n[00:00:02.512,634] <inf> event_manager: e:measurement_event val1=-3 val2=12 val3=57\n[00:00:03.012,939] <inf> event_manager: e:measurement_event val1=-3 val2=9 val3=66\n[00:00:03.513,244] <inf> event_manager: e:measurement_event val1=-3 val2=6 val3=72\n[00:00:04.013,488] <inf> event_manager: e:measurement_event val1=-3 val2=3 val3=75\n[00:00:04.513,793] <inf> event_manager: e:measurement_event val1=-3 val2=0 val3=75\n[00:00:05.014,099] <inf> event_manager: e:measurement_event val1=-3 val2=-3 val3=72\n[00:00:05.514,343] <inf> event_manager: e:measurement_event val1=-3 val2=-6 val3=66\n[00:00:06.014,648] <inf> event_manager: e:measurement_event val1=-3 val2=-9 val3=57\n[00:00:06.514,953] <inf> event_manager: e:measurement_event val1=-3 val2=-12 val3=45\n[00:00:07.015,197] <inf> event_manager: e:measurement_event val1=-3 val2=-15 val3=30\n[00:00:07.015,350] <inf> event_manager: e: control_event\n[00:00:07.015,502] <inf> event_manager: e: ack_event\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Project\nDESCRIPTION: This snippet initializes a new CMake project called 'i2s_api', setting the minimum required version for CMake. This sets up the necessary environment for the project to be built.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/i2s/i2s_api/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(i2s_api)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Bluetooth Content Control in CMake\nDESCRIPTION: Sets up the include directory for media-related header files to be used in the Bluetooth content control component.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_content_control/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_include_directories(\n    media\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling UARTs for Power Measurement in MoSh\nDESCRIPTION: Demonstrates how to temporarily disable UARTs for power measurement purposes using the MoSh uart command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_26\n\nLANGUAGE: console\nCODE:\n```\nuart disable 30\n```\n\n----------------------------------------\n\nTITLE: Importing Zephyr Framework\nDESCRIPTION: Locates and imports the Zephyr real-time operating system using environment variables, which is required for building the project\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/timer/nrf_grtc_timer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Fast Pair Crypto\nDESCRIPTION: This snippet specifies public include directories for the Fast Pair crypto library, enabling access to common headers required for its functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fp_crypto/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntarget_include_directories(fp_crypto PUBLIC include)\ntarget_include_directories(fp_crypto PUBLIC ../include/common)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Finds the Zephyr SDK package. It sets the `Zephyr` variable, making Zephyr-related functions and variables available. It also specifies that the Zephyr package is required and provides a hint for its location using the `ZEPHYR_BASE` environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_pwm_loopback/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Example Output of Location Sample in Console\nDESCRIPTION: This code snippet showcases the sample output printed to the console when the Location sample is executed, including various positioning method requests and their results.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/location/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nLocation sample started\n\nConnecting to LTE...\nConnected to LTE\n\nRequesting location with short GNSS timeout to trigger fallback to cellular...\n[00:00:06.481,262] <wrn> location: Timeout occurred\n[00:00:06.487,335] <wrn> location: Failed to acquire location using 'GNSS', trying with 'Cellular' next\nGot location:\nmethod: cellular\nlatitude: 12.887095\nlongitude: 55.580397\naccuracy: 1250.0 m\nGoogle maps URL: https://maps.google.com/?q=12.887095,55.580397\n\nRequesting location with the default configuration...\nGot location:\nmethod: GNSS\nlatitude: 12.893736\nlongitude: 55.575859\naccuracy: 4.4 m\ndate: 2021-10-28\ntime: 13:36:29.072 UTC\nGoogle maps URL: https://maps.google.com/?q=12.893736,55.575859\n\nRequesting location with high GNSS accuracy...\nGot location:\nmethod: GNSS\nlatitude: 12.893755\nlongitude: 55.575879\naccuracy: 2.8 m\ndate: 2021-10-28\ntime: 13:36:32.339 UTC\nGoogle maps URL: https://maps.google.com/?q=12.893755,55.575879\n\nRequesting Wi-Fi location with GNSS and cellular fallback...\nGot location:\nmethod: GNSS\nlatitude: 12.893770\nlongitude: 55.575884\naccuracy: 4.5 m\ndate: 2021-10-28\ntime: 13:36:45.895 UTC\nGoogle maps URL: https://maps.google.com/?q=12.893770,55.575884\n\nRequesting 30s periodic GNSS location...\nGot location:\nmethod: GNSS\nlatitude: 12.893765\nlongitude: 55.575912\naccuracy: 4.4 m\ndate: 2021-10-28\ntime: 13:36:47.536 UTC\nGoogle maps URL: https://maps.google.com/?q=12.893765,55.575912\n\nGot location:\nmethod: GNSS\nlatitude: 12.893892\nlongitude: 55.576090\naccuracy: 8.4 m\ndate: 2021-10-28\ntime: 13:37:17.685 UTC\nGoogle maps URL: https://maps.google.com/?q=12.893892,55.576090\n```\n\n----------------------------------------\n\nTITLE: Configuring MPSL Library Build in CMake\nDESCRIPTION: Creates a Zephyr library and adds the MPSL initialization source file to the build. This configuration is part of the Nordic SDK's Multi-Protocol Service Layer implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/init/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(mpsl_init.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version and Zephyr Integration\nDESCRIPTION: Sets the minimum required CMake version and finds the Zephyr RTOS package for project compilation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lte_ble_gateway/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(lte-ble-gateway)\n```\n\n----------------------------------------\n\nTITLE: OpenThread Function References in C\nDESCRIPTION: Key function references used in OpenThread integration including network receive handlers and data transmission functions. These functions handle packet routing between OpenThread and Zephyr's networking stack.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/ot_integration.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nnet_recv_data()\nnet_ipv6_input()\nopthread_recv()\not_receive_handler()\nnrf_802154_received_timestamp_raw()\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Diagnostic Logs in Kconfig\nDESCRIPTION: Defines Kconfig options to enable and configure diagnostic logs support for Matter applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/common/config.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_DIAGNOSTIC_LOGS\n  \"bool\" - Enable support for diagnostics logs.\n  Diagnostics logs allow the Matter controller to read end-user, network, and crash logs from the Matter device.\n\nCONFIG_NCS_SAMPLE_MATTER_DIAGNOSTIC_LOGS_MAX_SIMULTANEOUS_SESSIONS\n  \"int\" - Define the maximum number of simultaneous sessions.\n\nCONFIG_NCS_SAMPLE_MATTER_DIAGNOSTIC_LOGS_CRASH_LOGS\n  \"bool\" - Enable support for storing crash logs when the crash occurs.\n\nCONFIG_NCS_SAMPLE_MATTER_DIAGNOSTIC_LOGS_REMOVE_CRASH_AFTER_READ\n  \"bool\" - Set whether the last crash log is removed after it is read.\n  Disable this option to read the last crash log multiple times.\n\nCONFIG_NCS_SAMPLE_MATTER_DIAGNOSTIC_LOGS_END_USER_LOGS\n\t\"bool\" - Enable support for capturing end-user diagnostic logs.\n\nCONFIG_NCS_SAMPLE_MATTER_DIAGNOSTIC_LOGS_NETWORK_LOGS\n\t\"bool\" - Enable support for capturing network diagnostic logs.\n\nONFIG_NCS_SAMPLE_MATTER_DIAGNOSTIC_LOGS_TEST\n\t\"bool\" - Enable the testing module for the diagnostic logs cluster.\n\nCONFIG_NCS_SAMPLE_MATTER_DIAGNOSTIC_LOGS_REDIRECT\n\t\"bool\" - Enable the redirection of logs to the diagnostic logs module.\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name for Nordic Semiconductor Build\nDESCRIPTION: Sets the project name to 'NONE'. This is likely a placeholder and may be replaced with an actual project name in a real implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/llpm/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: New AT Parser Function Call\nDESCRIPTION: Updated function call to use at_parser_cmd_type_get instead of at_parser_at_cmd_type_get to prevent name collision in AT command parsing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nat_parser_cmd_type_get()\n```\n\n----------------------------------------\n\nTITLE: Finding the Zephyr package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr RTOS. It is required for building applications targeting the Zephyr RTOS and utilizes the ZEPHYR_BASE environment variable as a hint to find the Zephyr installation path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/coap_client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: XSMS Test Command Response Syntax\nDESCRIPTION: Expected response format for the test command showing supported operations and parameter types.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SMS_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: AT\nCODE:\n```\n#XSMS: <list of op value>,<number>,<text>\n```\n\n----------------------------------------\n\nTITLE: Setting Light CTL Temperature Range State - Command Syntax\nDESCRIPTION: Sets the Light CTL Temperature Range state while waiting for a response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl temp-range-set <Min> <Max>\n```\n\n----------------------------------------\n\nTITLE: Defining OpenThread Platform Library\nDESCRIPTION: Creates a named Zephyr library for OpenThread platform implementation with core source files that are always compiled\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/platform/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_named(openthread_platform)\nzephyr_library_sources(\n  alarm.c\n  entropy.c\n  misc.c\n  platform.c\n  radio.c\n  spi.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting OpenThread Include Directories\nDESCRIPTION: Configures the include directories for the OpenThread RPC library, adding the common directory to the include path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_include_directories(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../common\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for UART Async Project with Zephyr\nDESCRIPTION: This CMake snippet sets up the project configuration for a UART async application using the Zephyr RTOS. It specifies the minimum CMake version, finds the Zephyr package, sets include directories, and defines the project name and source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/uart_async/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nzephyr_include_directories(include)\n\nproject(uart_async)\n\ntarget_sources(app PRIVATE ./../common/main.c)\ntarget_sources(app PRIVATE src/driver_test.c)\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth AMS Client Source\nDESCRIPTION: This snippet includes the AMS client source file if the CONFIG_BT_AMS_CLIENT configuration option is set. It is part of the Zephyr Bluetooth subsystem used for Advanced Message Service functionalities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_AMS_CLIENT ams_client.c)\n```\n\n----------------------------------------\n\nTITLE: Reading Battery Voltage with wifi_radio_test\nDESCRIPTION: This snippet demonstrates how to read the battery voltage using the `wifi_radio_test` command. It executes the `get_voltage` subcommand. The output shows the current battery voltage in volts.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test get_voltage\n```\n\n----------------------------------------\n\nTITLE: Configuring FPU Library Dependencies in CMake\nDESCRIPTION: Sets up floating-point library dependencies based on FPU configuration. Determines the appropriate floating-point implementation (hard, soft, or softfp) and links the corresponding chmap filter library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/src/util/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_DESKTOP_BLE_QOS_ENABLE)\n  if(CONFIG_FPU)\n    if(CONFIG_FP_HARDABI)\n      set(float_dir hard-float)\n    elseif(CONFIG_FP_SOFTABI)\n      set(float_dir softfp-float)\n    else()\n      assert(0 \"Unreachable code\")\n    endif()\n  else()\n    set(float_dir soft-float)\n  endif()\n  zephyr_link_libraries(${CMAKE_CURRENT_SOURCE_DIR}/chmap_filter/lib/${GCC_M_CPU}/${float_dir}/libchmapfilt.a)\n  target_include_directories(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/chmap_filter/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting SDU Size - Shell Command\nDESCRIPTION: Shell command for setting the Service Data Unit (SDU) size in octets for a Bluetooth LE Audio broadcast subgroup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nnac sdu 60 0 0\n```\n\n----------------------------------------\n\nTITLE: Computing Optimal XO Value with wifi_radio_test\nDESCRIPTION: This snippet shows how to compute the optimal XO (crystal oscillator) value using the `wifi_radio_test` command. It initializes the radio on channel 64 and then executes the `compute_optimal_xo_val` command. The output displays the best XO value, requiring a cabled setup with a VSG continuously generating a 0.5 MHz tone at 5320.5 MHz with a power level between -40 dBm and -50 dBm.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test init 64\nwifi_radio_test compute_optimal_xo_val\n```\n\n----------------------------------------\n\nTITLE: Configuring Static IP Address in prj.conf for Wi-Fi TWT Sample\nDESCRIPTION: Default static IP configuration that can be modified in the prj.conf file. These settings are used as fallback if DHCP is not available.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/twt/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NET_CONFIG_MY_IPV4_ADDR=\"192.168.1.98\"\nCONFIG_NET_CONFIG_MY_IPV4_NETMASK=\"255.255.255.0\"\nCONFIG_NET_CONFIG_MY_IPV4_GW=\"192.168.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Build Settings for SLM\nDESCRIPTION: Sets up build configuration for MQTT functionality in SLM project. Includes the current directory in the build path and conditionally adds the MQTT source file when CONFIG_SLM_MQTTC is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/src/mqtt_c/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(.)\ntarget_sources_ifdef(CONFIG_SLM_MQTTC app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_at_mqtt.c)\n```\n\n----------------------------------------\n\nTITLE: Building NCS Documentation with Ninja\nDESCRIPTION: This command builds the complete NCS documentation using Ninja. It should be run in the '_build' directory after generating the build files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/build.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nninja\n```\n\n----------------------------------------\n\nTITLE: Configuring SSF Client Build in CMake\nDESCRIPTION: Configures the build system for SSF client by specifying include directories, source files, and required submodules. Sets up compilation of core SSF client components and supporting files for the Zephyr RTOS integration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(os)\n\nzephyr_sources(ssf_client.c)\nzephyr_sources(ssf_client_notif.c)\nzephyr_sources(os/ssf_client_zephyr.c)\n\nadd_subdirectory(zcbor)\nadd_subdirectory(services)\nadd_subdirectory(transport)\n```\n\n----------------------------------------\n\nTITLE: Finding Required Zephyr Package\nDESCRIPTION: This snippet ensures that the Zephyr package is found during the build process, using the specified minimum version and hints for the base path. It is a prerequisite for configuring the project correctly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_combined_bis_and_cis/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Building Application Core with STM Logging\nDESCRIPTION: Command to build the application for the application core with STM logging enabled using the nordic-log-stm snippet.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_logging.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp -S nordic-log-stm\n```\n\n----------------------------------------\n\nTITLE: Implementing GATT Discovery Parser\nDESCRIPTION: Function to parse discovered GATT services and configure notifications for the BT service characteristic.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nint MyBtServiceDataProvider::ParseDiscoveredData(bt_gatt_dm *discoveredData)\n{\n   const bt_gatt_dm_attr *gatt_chrc;\n   const bt_gatt_dm_attr *gatt_desc;\n   gatt_chrc = bt_gatt_dm_char_by_uuid(discoveredData, sUuidChar);\n   if (!gatt_chrc) {\n      return -EINVAL;\n   }\n\n   gatt_desc = bt_gatt_dm_desc_by_uuid(discoveredData, gatt_chrc, sUuidChar);\n   if (!gatt_desc) {\n      return -EINVAL;\n   }\n   mCharacteristicHandle = gatt_desc->handle;\n\n   gatt_desc = bt_gatt_dm_desc_by_uuid(discoveredData, gatt_chrc, sUuidCcc);\n   if (!gatt_desc) {\n      return -EINVAL;\n   }\n   mCccHandle = gatt_desc->handle;\n\n   VerifyOrReturn(mDevice.mConn, LOG_ERR(\"Invalid connection object\"));\n\n   /* Configure subscription for the button characteristic */\n   mGattSubscribeParams.ccc_handle = mCccHandle;\n   mGattSubscribeParams.value_handle = mCharacteristicHandle;\n   mGattSubscribeParams.value = BT_GATT_CCC_NOTIFY;\n   mGattSubscribeParams.notify = MyBtServiceDataProvider::GattNotifyCallback;\n   mGattSubscribeParams.subscribe = nullptr;\n   return bt_gatt_subscribe(mDevice.mConn, &mGattSubscribeParams);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking DFU Transfer Progress\nDESCRIPTION: This command retrieves the current progress of the DFU transfer for specified receivers, returning details about each target's transfer status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfd receivers-get 0 2\n```\n\n----------------------------------------\n\nTITLE: RST Device Reference Table Structure\nDESCRIPTION: A reStructuredText table showing the mapping between Nordic Semiconductor devices, their getting started methods, and documentation links. The table includes various development kits and devices like Thingy:91 X, nRF series boards, and evaluation kits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/gsg_guides.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n+----------------------+--------------------------------------------------------------------+---------------------------------------+\n| Device               | Getting started method                                             | Device user guide                     |\n+======================+====================================================================+=======================================+\n| Nordic Thingy:91 X   |                                                                    | `Nordic Thingy:91 X User Guide`_      |\n+----------------------+                                                                    +---------------------------------------+\n| nRF9161 DK           |                                                                    | `nRF9161 DK Hardware`_                |\n+----------------------+                                                                    +---------------------------------------+\n| nRF9160 DK           |                                                                    | `nRF9160 DK Hardware`_                |\n+----------------------+                                                                    +---------------------------------------+\n| nRF9151 DK           |                                                                    | `nRF9151 DK Hardware`_                |\n+----------------------+                                                                    +---------------------------------------+\n| nRF54L15 DK          |  `Quick Start app`_                                                | `nRF54L15 DK User Guide`_             |\n+----------------------+                                                                    +---------------------------------------+\n| nRF5340 DK           |                                                                    | `nRF5340 DK User Guide`_              |\n+----------------------+                                                                    +---------------------------------------+\n| nRF52840 DK          |                                                                    | `nRF52840 DK User Guide`_             |\n+----------------------+                                                                    +---------------------------------------+\n| nRF52833 DK          |                                                                    | `nRF52833 DK User Guide`_             |\n+----------------------+                                                                    +---------------------------------------+\n| nRF52 DK             |                                                                    | `nRF52 DK User Guide`_                |\n+----------------------+--------------------------------------------------------------------+---------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Sample Output with LTE and Debug Logging on Thingy:91\nDESCRIPTION: Shows serial UART output for a configuration using LTE on Thingy:91 device with TLS and debug logging enabled. Highlighting state transitions and MQTT broker communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/doc/description.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v3.2.99-ncs2-34-gf8f113382356 ***\n[00:00:00.286,254] <inf> network: Bringing network interface up and connecting to the network\n[00:00:00.286,621] <dbg> mqtt_helper: mqtt_state_set: State transition: MQTT_STATE_UNINIT --> MQTT_STATE_DISCONNECTED\n[00:00:00.310,028] <dbg> mqtt_helper: mqtt_helper_poll_loop: Waiting for connection_poll_sem\n[00:00:04.224,426] <inf> network: Network connectivity established\n[00:00:09.233,612] <dbg> mqtt_helper: broker_init: Resolving IP address for test.mosquitto.org\n[00:00:10.541,839] <dbg> mqtt_helper: broker_init: IPv6 Address found 2001:41d0:1:925e::1 (AF_INET6)\n[00:00:10.541,900] <dbg> mqtt_helper: mqtt_state_set: State transition: MQTT_STATE_DISCONNECTED --> MQTT_STATE_TRANSPORT_CONNECTING\n```\n\n----------------------------------------\n\nTITLE: Building MCUmgr SMP Client Library in nRF Connect SDK with CMake\nDESCRIPTION: Configuration for building the MCUmgr SMP client library. The build includes core client implementation files and conditionally adds shell support when CONFIG_NRF_MCUMGR_SMP_CLIENT_SHELL is enabled. The library is linked with MCUBOOT_BOOTUTIL and includes headers from the include directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/mcumgr_smp_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n  src/mcumgr_smp_client.c\n  )\n\nzephyr_library_sources_ifdef(CONFIG_NRF_MCUMGR_SMP_CLIENT_SHELL\n  src/mcumgr_smp_client_shell.c\n  )\n\nzephyr_library_link_libraries(MCUBOOT_BOOTUTIL)\nzephyr_include_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Address and PSK in prj.conf\nDESCRIPTION: These code snippets show how to set server URIs and other configuration parameters in the prj.conf file for different LwM2M servers. The configurations include URIs for Leshan and Coiote servers and setup instructions for PSK storage and server selection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_carrier/sample_description.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\\n* For `Leshan Demo Server`_ - \\\"coaps://leshan.eclipseprojects.io:5684\\\" (`public Leshan Demo Server`_).\\n* For `Coiote Device Management`_ - \\\"coaps://eu.iot.avsystem.cloud:5684\\\" (`Coiote Device Management server`_).\\n* For `Leshan Bootstrap Server Demo web UI <public Leshan Bootstrap Server Demo_>`_ - \\\"coaps://leshan.eclipseprojects.io:5784\\\"\\n* For Coiote bootstrap server - \\\"coaps://eu.iot.avsystem.cloud:5694\\\"\n```\n\n----------------------------------------\n\nTITLE: Registering Neighborhood Cell Measurement Handler in C\nDESCRIPTION: Registers a listener for neighborhood cell measurements using the lwm2m_ncell_handler_register function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_location_assistance.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nlwm2m_ncell_handler_register();\n```\n\n----------------------------------------\n\nTITLE: Disabling AT Command Notifications\nDESCRIPTION: Command to disable notifications for AT commands in the shell.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_shell.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nat events_disable\n```\n\n----------------------------------------\n\nTITLE: Initializing Fabric Table Delegate in C++\nDESCRIPTION: Demonstrates how to call the 'AppFabricTableDelegate::Init' method after initializing the CHIP server. This setup is necessary to enable the predefined reactions to Matter fabric removal within the 'AppTask::Init' method.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/last_fabric_removal_delegate.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nAppFabricTableDelegate::Init();\n```\n\n----------------------------------------\n\nTITLE: Getting Week-day Schedule using Chip-Tool\nDESCRIPTION: This command retrieves the Week-day schedule from the door lock using the chip-tool, specifying the schedule index, user index, destination ID, and endpoint ID. It queries the device for the settings of a specific week day schedule.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n\"./chip-tool doorlock get-week-day-schedule *weekday-index* *user-index* *destination-id* *endpoint-id*\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Bluetooth Mesh Model Publication Context\nDESCRIPTION: Demonstrates static initialization of a Bluetooth mesh model publication context with a pre-allocated message buffer.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/dev_overview.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstatic struct bt_mesh_model_pub pub_ctx = {\n    .msg = NET_BUF_SIMPLE(BT_MESH_MODEL_BUF_LEN(MESSAGE_SET_OPCODE,\n                                                MESSAGE_SET_MAXLEN)),\n}\n```\n\n----------------------------------------\n\nTITLE: Globbing Application Source Files\nDESCRIPTION: Finds and collects all C source files located in the src/ directory, preparing them for compilation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/record_text/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring NFC Type 2 Tag Parser Library in CMake\nDESCRIPTION: Declares a Zephyr library and conditionally adds the parser.c source file to the build if the CONFIG_NFC_T2T_PARSER configuration option is enabled. This allows for conditional compilation of the NFC Type 2 Tag parser functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nfc/t2t/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources_ifdef(CONFIG_NFC_T2T_PARSER parser.c)\n```\n\n----------------------------------------\n\nTITLE: Module ID Reference Function\nDESCRIPTION: The module_id_get function returns a module reference from a dedicated section instead of the module name. This is part of the unified module ID reference system in CAF modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.9.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nmodule_id_get\n```\n\n----------------------------------------\n\nTITLE: Sending Data to UDP Socket using AT command\nDESCRIPTION: This AT command sends data to a specified UDP socket. It requires the destination IP address or hostname and the port number. The response indicates the number of bytes sent.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n**AT#XSENDTO=\"**\\ *example.com*\\ **\",**\\ *1234*\\ **,\"UDP1/2 received\"**\n#XSENDTO: 15\nOK\n```\n\n----------------------------------------\n\nTITLE: Using the Latency Client Request Function in C\nDESCRIPTION: The bt_latency_request function is used to asynchronously request latency data from the Latency Characteristic. The request data must remain valid until the operation is completed via callback.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/latency_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbt_latency_request\n```\n\n----------------------------------------\n\nTITLE: Configuring Three-Wire Radio Coexistence\nDESCRIPTION: Devicetree configuration for three-wire radio coexistence interface defining REQUEST, PRIORITY, and GRANT GPIO signals.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/wifi_coex.rst#2025-04-21_snippet_2\n\nLANGUAGE: devicetree\nCODE:\n```\nstatus = \"okay\";\ncompatible = \"generic-radio-coex-three-wire\";\nreq-gpios =     <&gpio0 24 (GPIO_ACTIVE_HIGH)>;\npri-dir-gpios = <&gpio0 14 (GPIO_ACTIVE_HIGH)>;\ngrant-gpios =   <&gpio0 25 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Device in Devicetree\nDESCRIPTION: Configuration for setting the chosen Wi-Fi device in devicetree for location services.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/location.rst#2025-04-21_snippet_5\n\nLANGUAGE: devicetree\nCODE:\n```\nchosen {\n    ncs,location-wifi = &mywifi;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Weather Station Build System with CMake\nDESCRIPTION: This CMake script sets up the build environment for a Matter-based weather station project. It includes necessary Matter modules, configures the data model, and specifies source files needed for the weather station application including app_task, main, battery and buzzer components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_weather_station/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(matter-weather-station)\n\n# Enable GNU STD support and initialize the Matter Data Model.\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/nrfconnect/app/enable-gnu-std.cmake)\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/src/app/chip_data_model.cmake)\n\n# NORDIC SDK APP START\n\n# Include all source files that are located in the Matter common directory.\ninclude(${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/cmake/source_common.cmake)\n\ntarget_include_directories(app PRIVATE\n    src\n    ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}\n)\n\ntarget_sources(app PRIVATE\n    src/app_task.cpp\n    src/main.cpp\n    src/battery.cpp\n    src/buzzer.cpp\n)\n\nchip_configure_data_model(app\n    INCLUDE_SERVER\n    BYPASS_IDL\n    GEN_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated\n    ZAP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/weather-station.zap\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Defining Network States in C for CAF Network State Module\nDESCRIPTION: Enumerates the possible network states used by the CAF Network State module. These states represent different conditions of the network interface, from disabled to fully connected.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/net_state.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nenum net_state {\n    NET_STATE_DISABLED,\n    NET_STATE_DISCONNECTED,\n    NET_STATE_CONNECTED\n};\n```\n\n----------------------------------------\n\nTITLE: HID Report Queue Header File Path\nDESCRIPTION: Header file location containing the HID report queue API declarations\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/hid_reportq.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\napplications/nrf_desktop/src/util/hid_reportq.h\n```\n\n----------------------------------------\n\nTITLE: OpenSSL DTLS Server (ECDSA)\nDESCRIPTION: OpenSSL command to start a DTLS server using ECDHE-ECDSA-AES128-SHA256 cipher and ECDSA certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nopenssl s_server -dtls -accept 4243 -cipher ECDHE-ECDSA-AES128-SHA256 -cert certs/ecdsa/cert.pem -key certs/ecdsa/cert.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Pair Module Dependencies in Kconfig\nDESCRIPTION: Required Kconfig options for enabling and configuring the Fast Pair module functionality, including advertising provider and Bluetooth common events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/fast_pair_app.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_ADV_PROV_FAST_PAIR\nCONFIG_CAF_BLE_COMMON_EVENTS\nCONFIG_DESKTOP_FAST_PAIR\nCONFIG_CAF_BLE_STATE_MAX_LOCAL_ID_BONDS\nCONFIG_DESKTOP_FAST_PAIR_LIMIT_NORMAL_PAIRING\nCONFIG_DESKTOP_BLE_DONGLE_PEER_ENABLE\nCONFIG_DESKTOP_BLE_DONGLE_PEER_ID_INFO\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Diagnostics in nRF Modem Library\nDESCRIPTION: Configuration options for enabling memory diagnostics features in the nRF Modem Library. Includes options for statistics retrieval, periodic reporting, and allocation logging.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_diagnostic.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF_MODEM_LIB_MEM_DIAG\n```\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF_MODEM_LIB_MEM_DIAG_DUMP\n```\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF_MODEM_LIB_MEM_DIAG_ALLOC\n```\n\n----------------------------------------\n\nTITLE: Building PPR Core Test with MRAM Execution on nRF54H20\nDESCRIPTION: This command builds a sample for the nRF54H20 development kit to execute code from MRAM on the PPR core. It uses the 'west' build tool and requires the configuration option CONFIG_XIP for execution from non-volatile memory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -T benchmarks.multicore.idle.nrf54h20dk_cpuapp_cpuppr_xip .\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Group\nDESCRIPTION: Creates a resource group in Azure for hosting IoT Hub resources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\naz group create --name <resource_name> --location westus\n```\n\n----------------------------------------\n\nTITLE: INIT Clock Configuration Issues - MPSL - Documentation Format\nDESCRIPTION: This entry notes that if the Low Frequency Clock is started before initializing MPSL, specific configuration options will not work, a critical detail for developers to ensure correct operational order.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_48\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-15176: :kconfig:option:`CONFIG_SYSTEM_CLOCK_NO_WAIT` is ignored when Low Frequency Clock is started before initializing MPSL If the application starts the Low Frequency Clock before calling the :c:func:`mpsl_init` function, the clock configuration option :kconfig:option:`CONFIG_SYSTEM_CLOCK_NO_WAIT` has no effect.\n```\n\n----------------------------------------\n\nTITLE: Motion Module States - Constants\nDESCRIPTION: State constants used by the motion module to track its current operating mode\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/motion.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nSTATE_IDLE\nSTATE_FETCHING\n```\n\n----------------------------------------\n\nTITLE: Building Thread CLI Sample for DUT Node (bash)\nDESCRIPTION: Commands to build the Thread CLI sample firmware in low power mode for the Device Under Test (DUT) board.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/power_consumption.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ncs/nrf/samples/openthread/cli/\nwest build -b *board_target* -- -Dcli_SNIPPET=\"ci;low_power\"\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Candidate Envelope Upload Response\nDESCRIPTION: Defines the CBOR data structure for the response to a SUIT envelope upload request. It includes the return code and the current offset of the write pointer after the operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_8\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str)\"rc\"         : (uint)\n    (str)\"off\"        : (uint)\n}\n```\n\n----------------------------------------\n\nTITLE: GNSS Data Deletion Example\nDESCRIPTION: Example showing how to delete GNSS cached data from non-volatile memory\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/GNSS_AT_commands.rst#2025-04-21_snippet_5\n\nLANGUAGE: AT\nCODE:\n```\nAT%XSYSTEMMODE=0,0,1,0\nOK\nAT+CFUN=31\nOK\nAT#XGPSDEL=511\nOK\nAT+CFUN=0\nOK\n```\n\n----------------------------------------\n\nTITLE: Received packet example\nDESCRIPTION: Example output of a captured packet, showing the data, signal power, link quality indicator (LQI), and timestamp.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n\"received: 49a85d41a5fffff4110f10270000369756e65619d09428a04b301951821db234460aa5ec4ff506631ef8adb22674683700 power: -39 lqi: 220 time: 15822687\"\n```\n\n----------------------------------------\n\nTITLE: Listing nRF Connect SDK Specific Commits\nDESCRIPTION: Git command to list nRF Connect SDK specific commits, including cherry-picked upstream commits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^71ef669ea4\n```\n\n----------------------------------------\n\nTITLE: Controlling VIO Pin Output in C\nDESCRIPTION: Functions to set VPR IO pin output values and to toggle existing output settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_csr_vio_out_set()\nnrf_vpr_csr_vio_out_toggle_set()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This CMake code includes multiple subdirectories into the current CMake project. Some subdirectories are included unconditionally (entropy, flash, gpio, hw_cc3xx, serial), while others are conditionally included based on the values of CMake variables (CONFIG_MPSL_FEM_ONLY, CONFIG_MSPI, CONFIG_NETWORKING, CONFIG_SENSOR).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory(entropy)\nadd_subdirectory(flash)\nadd_subdirectory(gpio)\nadd_subdirectory(hw_cc3xx)\nif(NOT CONFIG_MPSL_FEM_ONLY)\n  add_subdirectory(mpsl)\nendif()\nadd_subdirectory_ifdef(CONFIG_MSPI mspi)\nadd_subdirectory_ifdef(CONFIG_NETWORKING net)\nadd_subdirectory_ifdef(CONFIG_SENSOR sensor)\nadd_subdirectory(serial)\"\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Finding Zephyr\nDESCRIPTION: Establishes the minimum required CMake version and locates the Zephyr framework using environment variables\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/i2c/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Implementing HandleWrite Method for Pressure Sensor Device\nDESCRIPTION: Implements the HandleWrite method to manage write operations for pressure sensor attributes. Since no attributes support write operations, it returns an unsupported feature error.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nCHIP_ERROR PressureSensorDevice::HandleWrite(chip::ClusterId clusterId, chip::AttributeId attributeId, uint8_t *buffer) {\n   return CHIP_ERROR_UNSUPPORTED_CHIP_FEATURE;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unsigned Short Parameter in C\nDESCRIPTION: Retrieves an unsigned short integer parameter from the parsed AT command list.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_parser.rst#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nat_params_unsigned_short_get();\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake with Zephyr for a Remote Project\nDESCRIPTION: The CMake configuration initializes the build setup for a project using Zephyr RTOS. It requires CMake version 3.20 or higher and the Zephyr package. The configuration includes logic to add source files conditionally based on specific environment configurations for different CPU power modes. It finds required Zephyr hints and conditionally handles additional source files for RISC V power mode if certain configurations are defined.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_ppr/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(remote)\n\ntarget_sources(app PRIVATE ../src/main.c)\n\nif((DEFINED CONFIG_SOC_NRF54H20_CPUPPR) OR (DEFINED CONFIG_SOC_NRF54H20_ENGB_CPUPPR))\n\tmessage(STATUS \"Power Mode handler for RISC V is included.\")\n\ttarget_sources(app PRIVATE ../../common/power_off.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Public Include Directory in CMake for nRF Connect SDK\nDESCRIPTION: This CMake command adds the current source directory as a public include directory for the 'app' target. This allows the compiler to find header files in the current directory during the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/event_manager_proxy/common_config/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: OpenSSL TLS 1.2 Server (RSA)\nDESCRIPTION: OpenSSL command to start a TLS 1.2 server using AES128-SHA256 cipher and RSA certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nopenssl s_server -accept 4243 -cipher AES128-SHA256 -cert certs/rsa/cert.pem -key certs/rsa/cert.key\n```\n\n----------------------------------------\n\nTITLE: Initializations for Node Composition Data in Bluetooth Mesh (C)\nDESCRIPTION: This piece of code initializes node composition data with a macro that embeds the model context. A key dependency is ensuring the type safety and proper memory allocation for the model context.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/chat_sample_walk_through.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define BT_MESH_MODEL_CHAT_CLI(context) \\\n    BT_MESH_MODEL_VND_CB(COMPANY_ID, MODEL_ID, opcodes, \\\n    &context->pub, context, &model_cb)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring NFC Platform Library Sources in CMake\nDESCRIPTION: Sets up a Zephyr library with conditional inclusion of NFC platform source files based on configuration flags. The implementation chooses between thread-based callbacks or IRQ-based callbacks depending on the CONFIG_NFC_THREAD_CALLBACK option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nfc/lib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nif(CONFIG_NFC_PLATFORM)\n  zephyr_library_sources(platform.c)\n  zephyr_library_sources_ifdef(CONFIG_NFC_THREAD_CALLBACK platform_internal_thread.c)\n  zephyr_library_sources_ifndef(CONFIG_NFC_THREAD_CALLBACK platform_internal_irq.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Selecting Analog Jack Input Using I2S in Kconfig\nDESCRIPTION: Sets the CONFIG_AUDIO_SOURCE_I2S Kconfig option to switch from USB to 3.5 mm jack analog input using I2S in the nRF5340 Audio application. This configuration can be applied to both debug and release versions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/configuration.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_AUDIO_SOURCE_I2S=y\n```\n\n----------------------------------------\n\nTITLE: Setting OnOff State of Light Control Server - C\nDESCRIPTION: Sets the OnOff state for the Light Lightness Control Server with acknowledgment required, including optional transition and delay parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl light-onoff-set <OnOff> [TransTime(ms) [Delay(ms)]]\n\tTell the Light Lightness Control Server to turn the light on or off, and wait for a response.\n\n\t* ``OnOff`` - OnOff state value to set. Use *on*, *enable*, or any non-zero value to enable the state.\n\t* ``TransTime`` - If present, defines the transition time in the message in milliseconds.\n\t* ``Delay`` - If present, defines the delay in the message in milliseconds.\n```\n\n----------------------------------------\n\nTITLE: Setting TFM Build Properties\nDESCRIPTION: Configures Trusted Firmware-M build options with firmware magic numbers when BUILD_WITH_TFM is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/fw_info/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_BUILD_WITH_TFM)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n      -DFIRMWARE_INFO_MAGIC=${FIRMWARE_INFO_MAGIC}\n      -DEXT_API_MAGIC=${EXT_API_MAGIC}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Multi-Image Application Build Requirement Check\nDESCRIPTION: This snippet checks whether the application is being built with the sysbuild option. If not, it terminates the configuration process and provides instructions on how to correctly build the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_outside_of_main/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Opening DTLS Socket and Connecting to DTLS Server\nDESCRIPTION: This snippet demonstrates how to open a DTLS socket using security tag 1001 and connect to a DTLS server on a specified port using AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_12\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XSSOCKET=1,2,0,1001\n\nAT#XCONNECT=\"example.com\",1234\n```\n\n----------------------------------------\n\nTITLE: Enabling SRP Server\nDESCRIPTION: Activates the Service Registration Protocol (SRP) server functionality on the leader device, allowing clients to register their services for discovery.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_28\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot srp server enable\nDone\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library with Source Files in CMake\nDESCRIPTION: Creates a Zephyr library target and specifies data_fifo.c as the source file to be compiled. This is a standard CMake configuration pattern used in Zephyr projects to define library components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/data_fifo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tdata_fifo.c\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Device UUID using hwinfo Driver\nDESCRIPTION: This code snippet describes usage of `hwinfo_get_device_id` function. It is used to generate a unique, deterministic UUID for each device, this UUID is later used for identifying device by provisioners before the provisioning process starts.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/dk_prov.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\"hwinfo_get_device_id\"\n```\n\n----------------------------------------\n\nTITLE: Printing all instances of the Generic Level Client model\nDESCRIPTION: Prints all instances of the Generic Level Client model on the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_lvl_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmesh models lvl instance get-all\n```\n\n----------------------------------------\n\nTITLE: Adding Bootloader Subdirectory\nDESCRIPTION: This code snippet adds the 'bl_boot' subdirectory to the build process, which is essential for including bootloader specific functionalities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bootloader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(bl_boot)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version and Finding Zephyr\nDESCRIPTION: This snippet configures the minimum version of CMake required for the project and includes the Zephyr package necessary for building the application. It ensures that the project utilizes the required framework effectively.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/remote_shell/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Sample Terminal Output for SMS Reception and Sending on nRF91 Series Device\nDESCRIPTION: Shows the expected console output when running the SMS sample application, including startup messages, sending confirmation, and the format of a received SMS message display.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/sms/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v2.4.99-ncs1-1818-g54dea0b2b530  ***\n\nSMS sample starting\nSMS sample is ready for receiving messages\nSending SMS: number=1234567890, text=\"SMS sample: testing\"\nSMS status report received\n\nSMS received:\n      Time:   21-04-12 15:42:52\n      Text:   'Testing'\n      Length: 7\n```\n\n----------------------------------------\n\nTITLE: Source Selection for External Flash Disabled Configuration\nDESCRIPTION: Selects firmware loading source file based on whether external flash is disabled. If disabled, uses the built-in source from Zephyr, otherwise uses an external flash loading implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/nrf70_fw_ext/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_NRF_WIFI_PATCHES_EXT_FLASH_DISABLED)\n  # The C source is same as that for built-in\n  zephyr_library_sources(${ZEPHYR_BASE}/drivers/wifi/nrf_wifi/src/fw_load.c)\nelse()\n  zephyr_library_sources(ext_fw_load.c)\n  if(CONFIG_NRF_WIFI_PATCHES_EXT_FLASH_XIP)\n    # Run patches from the external flash (XIP). No need to copy.\n    zephyr_code_relocate(FILES ext_fw_load.c LOCATION EXTFLASH_RODATA NOCOPY)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking DECT Settings for Long and Short RD IDs - Console\nDESCRIPTION: This command retrieves the common settings from the DECT device, including the network ID, long RD ID, and short RD ID. It ensures the correct IDs are set for communication and indicates the band number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_25\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ dect sett -r\n      Common settings:\n      network id (32bit).............................305419896 (0x12345678)\n      transmitter id (long RD ID)....................1234 (0x000004d2)\n      short RD ID....................................27462 (0x6b46)\n      band number....................................1\n```\n\n----------------------------------------\n\nTITLE: Event Flow Documentation in RST Format\nDESCRIPTION: Structured representation of module interactions, input/output events, and event sources and sinks in the nRF Desktop project\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n+-----------------------------------------------+------------------------+---------------+--------------------------------+---------------------------------------------+\n| Source Module                                 | Input Event            | This Module   | Output Event                   | Sink Module                                 |\n+===============================================+========================+===============+================================+=============================================+\n| :ref:`nrf_desktop_module_state_event_sources` | ``module_state_event`` | ``ble_state`` |                                |                                             |\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription Resumption Minimum Retry Interval for Matter\nDESCRIPTION: This snippet describes how to configure the minimum wait time in seconds before the first subscription resumption retry using the `CONFIG_CHIP_SUBSCRIPTION_RESUMPTION_MIN_RETRY_INTERVAL` Kconfig option. This parameter affects the responsiveness of the device after a disconnection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_8\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_SUBSCRIPTION_RESUMPTION_MIN_RETRY_INTERVAL`\"\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.20.0. This ensures that the CMake version used is compatible with the project's CMakeLists.txt file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/entropy_nrf53/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Thread Output Power in Kconfig\nDESCRIPTION: Kconfig option added to set the default Thread output power.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nOPENTHREAD_DEFAULT_TX_POWER\n```\n\n----------------------------------------\n\nTITLE: Building an Application with MCUboot Software-based Downgrade Prevention\nDESCRIPTION: Command-line example for building an application with software-based downgrade protection using MCUboot. This demonstrates how to enable the necessary configuration options through west build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_downgrade_protection.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b *board_target* *application* -- \\\n-DSB_CONFIG_BOOTLOADER_MCUBOOT=y \\\n-DSB_CONFIG_MCUBOOT_MODE_OVERWRITE_ONLY=y \\\n-DCONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION=\\\"0.1.2\\+3\\\" \\\n-Dmcuboot_CONFIG_MCUBOOT_DOWNGRADE_PREVENTION=y\n```\n\n----------------------------------------\n\nTITLE: Specifying Application Source Files\nDESCRIPTION: Adds main application source files to the target, including conditionally added files based on configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n    src/app_task.cpp\n    src/bolt_lock_manager.cpp\n    src/main.cpp\n    src/zcl_callbacks.cpp\n    ${access_srcs}\n)\n\nif(CONFIG_THREAD_WIFI_SWITCHING)\n    target_sources(app PRIVATE\n        src/thread_wifi_switch.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Trace Backend in CMake\nDESCRIPTION: Conditionally adds the flash subdirectory for modem trace logging when CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_FLASH is enabled\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/nrf_modem_lib/trace_backends/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_FLASH flash)\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI Motion Sensor in DTS\nDESCRIPTION: DTS configuration for PMW3360 motion sensor connected via SPI bus, including pin assignments and bus settings. Shows how to define SPI device properties and sensor-specific configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/integration.rst#2025-04-21_snippet_0\n\nLANGUAGE: DTS\nCODE:\n```\n&spi1 {\n   compatible = \"nordic,nrf-spim\";\n   status = \"okay\";\n   cs-gpios = <&gpio0 13 0>;\n\n pinctrl-0 = <&spi1_default_alt>;\n pinctrl-1 = <&spi1_sleep_alt>;\n pinctrl-names = \"default\", \"sleep\";\n     pmw3360@0 {\n       compatible = \"pixart,pmw3360\";\n       reg = <0>;\n       irq-gpios = <&gpio0 21 0>;\n       spi-max-frequency = <2000000>;\n     };\n};\n```\n\n----------------------------------------\n\nTITLE: Generating ECDSA-P256 Key Pair with Imgtool\nDESCRIPTION: Uses MCUboot's Imgtool Python script to generate an ECDSA-P256 private key and save it to priv.pem. This key type is supported by both nRF Secure Immutable Bootloader and MCUboot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_signature_keys.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npython3 bootloader/mcuboot/scripts/imgtool.py keygen -t ecdsa-p256 -k priv.pem\n```\n\n----------------------------------------\n\nTITLE: Settings ZMS Sector Count Configuration\nDESCRIPTION: This Kconfig option configures the number of sectors used by the ZMS (Zephyr Memory Storage) backend for Zephyr settings storage. It must be set appropriately to cover the entire settings partition area.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_5\n\nLANGUAGE: Kconfig\nCODE:\n```\n:kconfig:option:`CONFIG_SETTINGS_ZMS_SECTOR_COUNT` for the ZMS\n```\n\n----------------------------------------\n\nTITLE: Configuring Gazell Library in CMake for Nordic SDK\nDESCRIPTION: This CMake script sets up the Gazell library by defining the core source files and conditionally including additional pairing functionality based on configuration options. It supports the base protocol implementation plus optional device-side and host-side pairing modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/gazell/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(gzll_glue.c)\nzephyr_library_sources_ifdef(CONFIG_GAZELL_PAIRING        gzp.c)\nzephyr_library_sources_ifdef(CONFIG_GAZELL_PAIRING_DEVICE gzp_device.c)\nzephyr_library_sources_ifdef(CONFIG_GAZELL_PAIRING_HOST   gzp_host.c)\n```\n\n----------------------------------------\n\nTITLE: UDP Client Test Command Syntax\nDESCRIPTION: Syntax for the test command that provides information about the UDP client command and its parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_16\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPCLI: <list of ops>,<url>,<port>,<sec_tag>,<use_dtls_cid>,<peer_verify>,<hostname_verify>\n```\n\n----------------------------------------\n\nTITLE: Configuring QDEC in DeviceTree\nDESCRIPTION: Device Tree configuration example showing QDEC alias specification for boards with multiple QDEC instances\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/wheel.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\nnrfdesktop-wheel-qdec\n```\n\n----------------------------------------\n\nTITLE: Configuring Wheel Module in Kconfig\nDESCRIPTION: Kconfig options for enabling the wheel module and configuring wheel sensor value conversion\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/wheel.rst#2025-04-21_snippet_2\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DESKTOP_WHEEL_ENABLE\\nCONFIG_DESKTOP_WHEEL_SENSOR_VALUE_DIVIDER\\nCONFIG_DESKTOP_WHEEL_SENSOR_IDLE_TIMEOUT\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Channel Sensor Series in Bluetooth Mesh\nDESCRIPTION: Example of implementing a three-channel sensor (average ambient temperature in a period of day) as a sensor series with static columns. The implementation includes column initialization, sensor configuration, and a getter callback.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/sensor.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n/* Macro for statically initializing time_decihour_8.\n * Raw is computed by multiplying by 10 according to\n * the resolution specified in the GATT Specification\n * Supplement.\n */\n#define TIME_DECIHOUR_8_INIT(_hours) {                \\\n    .format = &bt_mesh_sensor_format_time_decihour_8, \\\n    .raw = { (_hours) * 10 }                          \\\n}\n\n#define COLUMN_INIT(_start, _width) { \\\n    TIME_DECIHOUR_8_INIT(_start),     \\\n    TIME_DECIHOUR_8_INIT(_width)      \\\n}\n\n/* 4 columns representing different hours in a day */\nstatic const struct bt_mesh_sensor_column columns[] = {\n    COLUMN_INIT(0, 6),\n    COLUMN_INIT(6, 6),\n    COLUMN_INIT(12, 6),\n    COLUMN_INIT(18, 6)\n};\n\nstatic struct bt_mesh_sensor temp_sensor = {\n    .type = &bt_mesh_sensor_avg_amb_temp_in_day,\n    .series = {\n        columns,\n        ARRAY_SIZE(columns),\n        getter,\n    },\n};\n\n/** Sensor data is divided into columns and filled elsewhere */\nstatic float avg_temp[ARRAY_SIZE(columns)];\n\nstatic int getter(struct bt_mesh_sensor *sensor, struct bt_mesh_msg_ctx *ctx,\n                  uint32_t column_index, struct bt_mesh_sensor_value *value)\n{\n    int err = bt_mesh_sensor_value_from_float(\n        sensor->type->channels[0].format, &avg_temp[column_index], &value[0]);\n\n    if (err) {\n        return err;\n    }\n    value[1] = columns[column_index].start;\n\n    /* Compute end value from column start and width: */\n    int64_t start, width;\n    enum bt_mesh_sensor_value_status status;\n\n    status = bt_mesh_sensor_value_to_micro(&columns[column_index].start, &start);\n    if (!bt_mesh_sensor_status_is_numeric(status)) {\n        return -EINVAL;\n    }\n    status = bt_mesh_sensor_value_to_micro(&columns[column_index].width, &width);\n    if (!bt_mesh_sensor_value_status_is_numeric(status)) {\n        return -EINVAL;\n    }\n    return bt_mesh_sensor_value_from_micro(\n        bt_mesh_sensor_column_format_get(sensor),\n        start + width, &value[2]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for nRF Event Manager Proxy Remote\nDESCRIPTION: Sets up the CMake build environment for the event manager proxy remote application. Specifies minimum CMake version, finds Zephyr package, defines project name, and adds required subdirectories for common configurations, events, and modules. Includes the main application source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/event_manager_proxy/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(event_manager_proxy_remote)\nmessage(STATUS \"ZEPHYR_BASE: $ENV{ZEPHYR_BASE}\")\n\nadd_subdirectory(\"../common_config\" \"${CMAKE_CURRENT_BINARY_DIR}/common_config\")\nadd_subdirectory(\"../common_events\" \"${CMAKE_CURRENT_BINARY_DIR}/common_events\")\nadd_subdirectory(\"../modules\"       \"${CMAKE_CURRENT_BINARY_DIR}/modules\")\n\ntarget_sources(app PRIVATE main.c)\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth NSMS Source\nDESCRIPTION: This code includes the Notification Service Management Service (NSMS) source file when CONFIG_BT_NSMS is defined. It manages notifications over Bluetooth.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_NSMS nsms.c)\n```\n\n----------------------------------------\n\nTITLE: Updating RSA Key Size Configuration\nDESCRIPTION: Example of enabling 2048-bit RSA keys which are no longer enabled by default. This configuration is required if using RSA keys in samples with CONFIG_NRF_SECURITY.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_application.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nCONFIG_PSA_WANT_RSA_KEY_SIZE_2048=y\n```\n\n----------------------------------------\n\nTITLE: Late Initialization of psa_crypto_init in Zephyr\nDESCRIPTION: Ensures that psa_crypto_init.c is appended to the Zephyr source list, providing a fallback for initializing PSA cryptography. This setup allows late initialization support when linked with other systems.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/zephyr/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND src_zephyr\n  psa_crypto_init.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with Conditional BLE Source Files\nDESCRIPTION: Sets up a CMake project with Zephyr framework integration and conditionally includes BLE central or peripheral source files based on configuration flags. Defines minimum CMake version, finds Zephyr package, and specifies source files for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/radio_notification_cb/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nzephyr_sources_ifdef(CONFIG_BT_CENTRAL src/central.c)\nzephyr_sources_ifdef(CONFIG_BT_PERIPHERAL src/peripheral.c)\n\ntarget_sources(app PRIVATE\n  src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: RST markup defining the structure and content of the nRF70 Series development guide, including tables of compatible hardware and documentation references.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ug_nrf70:\n.. _ug_nrf70_developing:\n\nDeveloping with nRF70 Series\n############################\n\n.. |nrf_series| replace:: devices of the nRF70 Series\n\n.. include:: /includes/guides_complementary_to_app_dev.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Build for Tone Module\nDESCRIPTION: Creates and configures a Zephyr library target that compiles the tone.c source file. This is part of the Nordic SDK NRF framework and uses the Zephyr build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/tone/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\ttone.c\n)\n```\n\n----------------------------------------\n\nTITLE: Linking LWM2M Carrier Library\nDESCRIPTION: This snippet defines the target for the LWM2M Carrier library and links it with the modem interface. It also configures the partition manager and includes relevant directories and sources for zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/bin/lwm2m_carrier/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(                    LWM2M_CARRIER_TARGET liblwm2m_carrier)\nzephyr_library_import(${LWM2M_CARRIER_TARGET} ${LWM2M_CARRIER_LIB_PATH}/liblwm2m_carrier.a)\ntarget_link_libraries(${LWM2M_CARRIER_TARGET} INTERFACE modem)\n\nncs_add_partition_manager_config(pm.yml.lwm2m_carrier)\n\nzephyr_include_directories(include)\nzephyr_library()\nzephyr_library_sources(\n  os/lwm2m_carrier.c\n  os/lwm2m_os.c\n)\n\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CARRIER_SETTINGS os/lwm2m_settings.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CARRIER_SHELL os/lwm2m_shell.c)\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth HRS Client Source\nDESCRIPTION: This snippet includes the Heart Rate Service (HRS) client source if CONFIG_BT_HRS_CLIENT is defined. It allows access to heart rate measures from Bluetooth devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_HRS_CLIENT hrs_client.c)\n```\n\n----------------------------------------\n\nTITLE: Setting up SoftAP Wi-Fi Provisioning Library with CMake\nDESCRIPTION: Creates and configures the SoftAP Wi-Fi provisioning Zephyr library, including server certificate conversion from PEM to C header files when certificate registration is enabled, and sets up Nanopb protobuf dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/softap_wifi_provision/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nzephyr_library_named(softap_wifi_provision)\nzephyr_library_sources(softap_wifi_provision.c)\n\nif (CONFIG_SOFTAP_WIFI_PROVISION_SERVER_CERTIFICATE_REGISTER)\n\tmessage(WARNING \"SoftAP Wi-Fi provision: Credentials are exposed in non-secure memory. \"\n\t\t\t\"This should be avoided in production.\")\n\n\t# Convert imported server certificate from PEM format to HEX format that can be included in\n\t# C code during provisioning.\n\n\tset(gen_dir ${CMAKE_CURRENT_BINARY_DIR}/certs)\n\tzephyr_include_directories(${gen_dir})\n\tgenerate_inc_file_for_target(\n\t\tapp\n\t\t${APPLICATION_SOURCE_DIR}/${CONFIG_SOFTAP_WIFI_PROVISION_SERVER_CERTIFICATES_FOLDER}/server_certificate.pem\n\t\t${gen_dir}/server_certificate.pem.inc\n\t)\n\n\tgenerate_inc_file_for_target(\n\t\tapp\n\t\t${APPLICATION_SOURCE_DIR}/${CONFIG_SOFTAP_WIFI_PROVISION_SERVER_CERTIFICATES_FOLDER}/server_private_key.pem\n\t\t${gen_dir}/server_private_key.pem.inc\n\t)\n\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH ${ZEPHYR_BASE}/modules/nanopb)\ninclude(nanopb)\n\nset(NANOPB_GENERATE_CPP_STANDALONE OFF)\n\nzephyr_nanopb_sources(softap_wifi_provision\n\tproto/common.proto\n)\n```\n\n----------------------------------------\n\nTITLE: Building Specific NCS Documentation Set\nDESCRIPTION: These commands demonstrate how to build a specific documentation set (e.g., 'nrf') and its dependencies using Ninja.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/build.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nninja nrf-all\n```\n\nLANGUAGE: console\nCODE:\n```\nninja nrf\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Application Event Manager Unit Tests in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the project for Application Event Manager unit tests. It specifies the minimum CMake version, finds the Zephyr package, sets include directories for event headers, and adds source files and subdirectories to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/app_event_manager/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Application Event Manager unit tests\")\n\n# Include application event headers\nzephyr_library_include_directories(src/events)\nzephyr_library_include_directories(src/modules)\nzephyr_library_include_directories(src/utils)\n\n# Add test sources\ntarget_sources(app PRIVATE src/main.c)\nadd_subdirectory(src/events)\nadd_subdirectory(src/modules)\nadd_subdirectory(src/utils)\n```\n\n----------------------------------------\n\nTITLE: Using West SBOM Utility for License Reports in Nordic Connect SDK\nDESCRIPTION: Example showing how to use the west ncs-sbom utility to generate license reports for Nordic Connect SDK. This tool can create reports for the entire SDK, specific applications, or individual files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/licenses.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nYou can use the west :ref:`ncs-sbom <west_sbom>` utility to generate a license report.\nIt allows you to generate a report for the |NCS|, built application, or specific files.\nThe tool is highly configurable.\nIt uses several detection methods, such as:\n\n * Search based on SPDX tags.\n * Search license information in files.\n * The `Scancode-Toolkit`_.\n\nDepending on your configuration, the report is generated in HTML or SPDX, or in both formats.\nSee the :ref:`west_sbom` script documentation for more information.\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Input for Thread Test Harness\nDESCRIPTION: XML configuration for adding Nordic Semiconductor devices to the Thread Test Harness device input fields, specifying serial port and baud rate settings\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/certification.rst#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<DEVICE name=\"nRF_Connect_SDK_11_12\" thumbnail=\"nRF_Connect_SDK.jpg\" description = \"Nordic Semiconductor: NCS Baudrate:115200\" THCI=\"nRF_Connect_SDK_11_12\">\n   <ITEM label=\"Serial Line\"\n      type=\"text\"\n      forParam=\"SerialPort\"\n      validation=\"COM\"\n      hint=\"eg: COM1\">COM\n   </ITEM>\n   <ITEM label=\"Speed\"\n      type=\"text\"\n      forParam=\"SerialBaudRate\"\n      validation=\"baud-rate\"\n      hint=\"eg: 115200\">115200\n   </ITEM>\n</DEVICE>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Board Library in CMake\nDESCRIPTION: Creates and configures a Zephyr library for board-specific code. Adds board.c as a source file to be compiled into the library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/boards/nordic/nrf52833dongle/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(board.c)\n```\n\n----------------------------------------\n\nTITLE: Boot Status Flow Control in PlantUML\nDESCRIPTION: A state diagram that defines the boot sequence based on the BOOT_STATUS flag. It handles various states including normal boot modes (A/B), degraded modes, and radio-less modes, with confirmation flag management for newly installed applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/img/ab_root_invoke.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nstart\n\nif (BOOT_STATUS == BOOT_A)then (yes)\nif (CONFIRM_SET_A == JUST_INSTALLED) then (yes)\n: CONFIRM_SET_A := NOT_CONFIRMED;\nendif\n: Start Application A;\n: Start Radio A;\nelseif (BOOT_STATUS == BOOT_B) then (yes)\nif (CONFIRM_SET_B == JUST_INSTALLED) then (yes)\n: CONFIRM_SET_B := NOT_CONFIRMED;\nendif\n: Start Application B;\n: Start Radio B;\nelseif (BOOT_STATUS == BOOT_A_DEGRADED) then (yes)\n: Start Application A;\n: Start Radio A;\nelseif (BOOT_STATUS == BOOT_B_DEGRADED) then (yes)\n: Start Application B;\n: Start Radio B;\nelseif (BOOT_STATUS == BOOT_A_NO_RADIO) then (yes)\n: Start Application A;\nelseif (BOOT_STATUS == BOOT_B_NO_RADIO) then (yes)\n: Start Application B;\nendif\n\nstop\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Motion Module Macros and Options\nDESCRIPTION: C macro definitions used to specify configuration options including CPI settings, sleep timeouts, and module variants for motion sensors.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/motion.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nOPT_DESCR_MODULE_VARIANT\n```\n\n----------------------------------------\n\nTITLE: Clearing ZCL Reporting Data on Zigbee Leave Network (C)\nDESCRIPTION: This code snippet demonstrates a workaround for the NCSIDB-1411 issue where ZCL Reporting data is not fully cleared when processing the Leave Network command in Zigbee.  The workaround involves adding a call to `zb_zcl_init_reporting_info` in the `ZB_ZDO_SIGNAL_LEAVE` handler to ensure complete clearing of the ZCL Reporting parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_16\n\nLANGUAGE: C\nCODE:\n```\n     case ZB_ZDO_SIGNAL_LEAVE:\n         /* Device leaves the network. */\n         if (status == RET_OK) {\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Library and Sources\nDESCRIPTION: This snippet sets up a Zephyr library and specifies its source files. The primary source file related to modem antennas is included, allowing for its functions to be utilized within the Zephyr environment. No specific dependencies are mentioned outside the Zephyr framework requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/modem_antenna/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(modem_antenna.c)\n```\n\n----------------------------------------\n\nTITLE: Simulated Pressure Sensor Data Provider Header\nDESCRIPTION: Defines the SimulatedPressureSensorDataProvider class that inherits from BridgedDeviceDataProvider to handle simulated pressure measurements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n#pragma once\n\n#include \"bridged_device_data_provider.h\"\n\n#include <zephyr/kernel.h>\n\nclass SimulatedPressureSensorDataProvider : public Nrf::BridgedDeviceDataProvider {\npublic:\n   SimulatedPressureSensorDataProvider(UpdateAttributeCallback updateCallback, InvokeCommandCallback commandCallback) : Nrf::BridgedDeviceDataProvider(updateCallback, commandCallback) {}\n   ~SimulatedPressureSensorDataProvider() {}\n\n   static constexpr uint16_t kMeasurementsIntervalMs = 10000;\n   static constexpr int16_t kMinRandomPressure = 95;\n   static constexpr int16_t kMaxRandomPressure = 101;\n\n   static void TimerTimeoutCallback(k_timer *timer);\n   k_timer mTimer;\n   int16_t mPressure = 0;\n\n   void Init() override;\n   void NotifyUpdateState(chip::ClusterId clusterId, chip::AttributeId attributeId, void *data, size_t dataSize) override;\n   CHIP_ERROR UpdateState(chip::ClusterId clusterId, chip::AttributeId attributeId, uint8_t *buffer) override;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Provider Factory Method\nDESCRIPTION: Implementation of the GetDataProviderFactory method to create SimulatedPressureSensorDataProvider instances with callback handlers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n{ PressureSensorDevice::kPressureSensorDeviceTypeId,\n[](UpdateAttributeCallback updateClb, InvokeCommandCallback commandClb) {\n   return chip::Platform::New<SimulatedPressureSensorDataProvider>(updateClb, commandClb);\n} },\n```\n\n----------------------------------------\n\nTITLE: Creating Oberon PSA Core Static Library\nDESCRIPTION: Creates a static library target for the Oberon PSA core and adds the Nordic PSA crypto driver wrapper source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/core/nrf_oberon/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(oberon_psa_core STATIC\n    ${src_crypto_core_oberon}\n)\n\ntarget_sources(oberon_psa_core\n  PRIVATE\n    ${NRF_SECURITY_ROOT}/src/psa_crypto_driver_wrappers.c\n)\n```\n\n----------------------------------------\n\nTITLE: RF Tool Stop Command\nDESCRIPTION: This command stops the current DECT RF tool operation. It is used to halt continuous RX to generate a report.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool stop\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project with CMake and Zephyr\nDESCRIPTION: This CMake configuration file initializes the 'nfc_idle' project. It requires CMake version 3.20.0 or higher and utilizes the Zephyr framework, which must be found in the environment variable 'ZEPHYR_BASE'. The project's source file 'src/main.c' is added as a private target source for the application. Dependencies include having Zephyr correctly set up in the environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/nfc_idle/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(nfc_idle)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Including CMake Template\nDESCRIPTION: This snippet includes a custom CMake template to formulate the integration test setup, ensuring proper configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/memptr_sink/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(../cmake/test_template.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Zephyr Bootloader Utility as Subdirectory\nDESCRIPTION: This CMake command adds the Zephyr bootloader utility as a subdirectory to the current project. It takes the source directory for the bootloader utility and the binary directory where the compiled output will be placed as arguments. The source directory is defined by the `ZEPHYR_MCUBOOT_MODULE_DIR` variable, while the binary directory is set to a location within the current binary directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/mcuboot/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${ZEPHYR_MCUBOOT_MODULE_DIR}/boot/bootutil/zephyr\n                 ${CMAKE_CURRENT_BINARY_DIR}/boot/bootutil/zephyr\n)\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving Data over DTLS Connection\nDESCRIPTION: This snippet shows how to send plaintext data to a DTLS server and retrieve the response using AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_13\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XSEND=\"Test DTLS client\"\n\nAT#XRECV=0\n```\n\n----------------------------------------\n\nTITLE: Getting Holiday Schedule using Chip-Tool\nDESCRIPTION: This command retrieves the Holiday schedule from the door lock using the chip-tool, specifying the schedule index, destination ID, and endpoint ID. It queries the device for the settings of a specific holiday schedule.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n\"./chip-tool doorlock get-holiday-schedule *holiday-index* *destination-id* *endpoint-id*\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Workspace Application Repository with West\nDESCRIPTION: Command to initialize a workspace application repository using west. It clones the specified GitHub repository to the given workspace directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/create_application.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwest init -m https:\\/\\/github.com/your-name/your-application your-app-workspace\n```\n\n----------------------------------------\n\nTITLE: Settings Storage Configuration Example\nDESCRIPTION: YAML configuration example showing how to define the settings storage partition in the pm_static file for a Matter device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nsettings_storage:\n    address: 0xf8000\n    size: 0x8000\n    region: flash_primary\n```\n\n----------------------------------------\n\nTITLE: Enabling Raw Data Transmission in Kconfig\nDESCRIPTION: Kconfig option required to enable TX injection mode for raw packet transmission\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/advanced_modes/sniffer_rx_operation.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF70_RAW_DATA_TX=y\n```\n\n----------------------------------------\n\nTITLE: Linker Options Configuration\nDESCRIPTION: Configures Zephyr linker options to allow multiple symbol definitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/scheduler_model/action_planning/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_ld_options(\n    ${LINKERFLAGPREFIX},--allow-multiple-definition\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Toctree in reStructuredText\nDESCRIPTION: This snippet shows how to create a toctree in reStructuredText, specifying a maximum depth of 2 and including a caption for subpages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Subpages:\n\n   tfm_supported_services\n   tfm_architecture\n   processing_environments\n   tfm_building\n   tfm_services\n   tfm_provisioning\n   tfm_logging\n```\n\n----------------------------------------\n\nTITLE: OpenSSL DTLS Server (RSA)\nDESCRIPTION: OpenSSL command to start a DTLS server using AES128-SHA256 cipher and RSA certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nopenssl s_server -dtls -accept 4243 -cipher AES128-SHA256 -cert certs/rsa/cert.pem -key certs/rsa/cert.key\n```\n\n----------------------------------------\n\nTITLE: Configuration Option: CONFIG_BT_BUF_ACL_RX_SIZE\nDESCRIPTION: This snippet describes a potential issue with extended scanning when `CONFIG_BT_BUF_ACL_RX_SIZE` is set to a value less than 251.  The suggested workaround is to set `CONFIG_BT_BUF_EVT_RX_SIZE` to 255 when extended scanning is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_59\n\nLANGUAGE: none\nCODE:\n```\nDRGN-16650: Undefined behavior when extended scanning is enabled\n  When extended scanning is enabled and :kconfig:option:`CONFIG_BT_BUF_ACL_RX_SIZE` is set to a value less than 251, it might result in asserts or undefined behavior.\n\n  **Workaround:** Set :kconfig:option:`CONFIG_BT_BUF_EVT_RX_SIZE` to 255 when extended scanning is enabled.\n\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Get State of Images Response in SUIT SMP Protocol\nDESCRIPTION: Defines the CBOR response format for the 'Get state of images' request in the SMP protocol. This structure contains information about the installed SUIT manifests including image number, slot, version, and hash details.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_0\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n(str)\"images\" : [\n    {\n        (str,opt)\"image\"      : (int)       //SUIT - always 0.\n        (str)\"slot\"           : (int)       //SUIT - 0 - \"primary\" - installed Root manifest, 1 - update candidate manifest in the DFU partition.\n        (str)\"version\"        : (str)       //SUIT - sequence-number from root manifest.\n        (str)\"hash\"           : (byte str)  //SUIT - digest of root manifest.\n    }\n    ...\n]}\n```\n\n----------------------------------------\n\nTITLE: CoreMark Heap Memory Configuration\nDESCRIPTION: Configuration for using heap memory method in CoreMark, allocating 4KB of heap memory pool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/coremark.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nCONFIG_COREMARK_MEMORY_METHOD_MALLOC=y\nCONFIG_HEAP_MEM_POOL_SIZE=4096\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Channel Event Subscription in C\nDESCRIPTION: Code showing how to subscribe an application module to configuration channel events using the APP_EVENT_SUBSCRIBE_EARLY macro.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/config_channel.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nAPP_EVENT_LISTENER(MODULE, app_event_handler);\n#if CONFIG_DESKTOP_CONFIG_CHANNEL_ENABLE\nAPP_EVENT_SUBSCRIBE_EARLY(MODULE, config_event);\n#endif\n```\n\n----------------------------------------\n\nTITLE: Specify Target Sources\nDESCRIPTION: This snippet specifies the source files for the application. It uses the target_sources command to add 'src/main.c' as a private source file for the 'app' target.  This links the C source file to the executable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_uarte/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_sources(app PRIVATE src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure for nRF Desktop Modules\nDESCRIPTION: RST format document structure showing the table of contents and module documentation organization for nRF Desktop internal modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/modules.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _nrf_desktop_app_internal_modules:\n\nnRF Desktop: Application internal modules\n#########################################\n\n.. contents::\n   :local:\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Ringing Components with Kconfig Options\nDESCRIPTION: Kconfig options for selecting the number of ringing components supported in a Fast Pair FMDN application. Options range from no components to three components (left bud, right bud, and case).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_9\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_FAST_PAIR_FMDN_RING_COMP_NONE\nCONFIG_BT_FAST_PAIR_FMDN_RING_COMP_ONE\nCONFIG_BT_FAST_PAIR_FMDN_RING_COMP_TWO\nCONFIG_BT_FAST_PAIR_FMDN_RING_COMP_THREE\n```\n\n----------------------------------------\n\nTITLE: TWI Write Example\nDESCRIPTION: Example showing write operation to BME680 device (address 0x76) on Thingy:91.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TWI_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XTWIW=2,\"76\",\"D0\"\nOK\n```\n\n----------------------------------------\n\nTITLE: GPIO Write Operation Example\nDESCRIPTION: Example of writing a high logic value to GPIO pin 2\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/GPIO_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XGPIO=0,2,1\nOK\n```\n\n----------------------------------------\n\nTITLE: UDP Sample Terminal Output Example\nDESCRIPTION: Sample console log showing successful network connection and UDP packet transmission with timestamp and network details\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/udp/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK v2.4.99-dev2-114-g305275323644 ***\\n[00:00:00.268,920] <inf> udp_sample: UDP sample has started\\n[00:00:00.268,951] <inf> udp_sample: Bringing network interface up and connecting to the network\\n[00:00:05.557,800] <inf> udp_sample: Network connectivity established\\n[00:00:05.558,715] <inf> udp_sample: Transmitting UDP/IP payload of 38 bytes to the IP address 8.8.8.8, port number 2469\n```\n\n----------------------------------------\n\nTITLE: Updated PWM LED Devicetree Definitions\nDESCRIPTION: Updated PWM LED devicetree definitions for Zephyr v3.x.x with the new format that includes channel number, period, and polarity flag. These replace the deprecated format.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_1.x_to_2.x.rst#2025-04-21_snippet_8\n\nLANGUAGE: devicetree\nCODE:\n```\n/* updated definitions */\npwm_led0: pwm_led_0 {\n    pwms = <&pwm0 0 PWM_MSEC(20) PWM_POLARITY_INVERTED>;\n};\npwm_led1: pwm_led_1 {\n    pwms = <&pwm0 3 PWM_MSEC(20) PWM_POLARITY_NORMAL>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating AWS IoT Thing\nDESCRIPTION: AWS CLI command to create a new Thing in AWS IoT Core with a specified name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\naws iot create-thing --thing-name <thing name>\n```\n\n----------------------------------------\n\nTITLE: Board-Specific Include Directories\nDESCRIPTION: Adds board-specific Common Application Framework (CAF) definition files to include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(\n  configuration/${NORMALIZED_BOARD_TARGET}\n  )\n```\n\n----------------------------------------\n\nTITLE: Importing NumPy for Numerical Computing\nDESCRIPTION: NumPy library for numerical and mathematical operations, commonly used in scientific computing and audio signal processing\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/requirements_music_led_stream.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nnumpy\n```\n\n----------------------------------------\n\nTITLE: Configuring UART Interrupt Project with CMake\nDESCRIPTION: Sets up the project configuration for a UART interrupt application using the nRF Connect SDK and Zephyr RTOS. It specifies the minimum CMake version, finds the Zephyr package, sets include directories, and adds source files to the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/uart_interrupt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nzephyr_include_directories(include)\n\nproject(uart_interrupt)\n\ntarget_sources(app PRIVATE ./../common/main.c)\ntarget_sources(app PRIVATE src/driver_test.c)\n```\n\n----------------------------------------\n\nTITLE: Setting MCUboot Modes in CMake\nDESCRIPTION: Defines available MCUboot modes and corresponding application modes, then sets the appropriate mode based on configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(mcuboot_modes \"CONFIG_SINGLE_APPLICATION_SLOT;CONFIG_BOOT_SWAP_USING_MOVE;CONFIG_BOOT_SWAP_USING_SCRATCH;CONFIG_BOOT_UPGRADE_ONLY;CONFIG_BOOT_DIRECT_XIP;CONFIG_BOOT_DIRECT_XIP_REVERT;CONFIG_BOOT_FIRMWARE_LOADER\")\nset(application_mcuboot_modes \"CONFIG_MCUBOOT_BOOTLOADER_MODE_SINGLE_APP;CONFIG_MCUBOOT_BOOTLOADER_MODE_SWAP_WITHOUT_SCRATCH;CONFIG_MCUBOOT_BOOTLOADER_MODE_SWAP_SCRATCH;CONFIG_MCUBOOT_BOOTLOADER_MODE_OVERWRITE_ONLY;CONFIG_MCUBOOT_BOOTLOADER_MODE_DIRECT_XIP;CONFIG_MCUBOOT_BOOTLOADER_MODE_DIRECT_XIP_WITH_REVERT;CONFIG_MCUBOOT_BOOTLOADER_MODE_FIRMWARE_UPDATER\")\n\nif(SB_CONFIG_MCUBOOT_MODE_SINGLE_APP)\n  set(mcuboot_mode CONFIG_SINGLE_APPLICATION_SLOT)\n  set(application_mcuboot_mode CONFIG_MCUBOOT_BOOTLOADER_MODE_SINGLE_APP)\nelseif(SB_CONFIG_MCUBOOT_MODE_SWAP_WITHOUT_SCRATCH)\n  set(mcuboot_mode CONFIG_BOOT_SWAP_USING_MOVE)\n  set(application_mcuboot_mode CONFIG_MCUBOOT_BOOTLOADER_MODE_SWAP_WITHOUT_SCRATCH)\nelseif(SB_CONFIG_MCUBOOT_MODE_SWAP_SCRATCH)\n  set(mcuboot_mode CONFIG_BOOT_SWAP_USING_SCRATCH)\n  set(application_mcuboot_mode CONFIG_MCUBOOT_BOOTLOADER_MODE_SWAP_SCRATCH)\nelseif(SB_CONFIG_MCUBOOT_MODE_OVERWRITE_ONLY)\n  set(mcuboot_mode CONFIG_BOOT_UPGRADE_ONLY)\n  set(application_mcuboot_mode CONFIG_MCUBOOT_BOOTLOADER_MODE_OVERWRITE_ONLY)\nelseif(SB_CONFIG_MCUBOOT_MODE_DIRECT_XIP)\n  set(mcuboot_mode CONFIG_BOOT_DIRECT_XIP)\n  set(application_mcuboot_mode CONFIG_MCUBOOT_BOOTLOADER_MODE_DIRECT_XIP)\nelseif(SB_CONFIG_MCUBOOT_MODE_DIRECT_XIP_WITH_REVERT)\n  set(mcuboot_mode CONFIG_BOOT_DIRECT_XIP;CONFIG_BOOT_DIRECT_XIP_REVERT)\n  set(application_mcuboot_mode CONFIG_MCUBOOT_BOOTLOADER_MODE_DIRECT_XIP_WITH_REVERT)\nelseif(SB_CONFIG_MCUBOOT_MODE_FIRMWARE_UPDATER)\n  set(mcuboot_mode CONFIG_BOOT_FIRMWARE_LOADER)\n  set(application_mcuboot_mode CONFIG_MCUBOOT_BOOTLOADER_MODE_FIRMWARE_UPDATER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering a Direct AT Monitor in C\nDESCRIPTION: Shows how to register a handler that receives +CEREG notifications directly in an interrupt service routine.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_monitor.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n/* AT monitor for +CEREG notifications, dispatched in ISR */\nAT_MONITOR_ISR(network_registration, \"+CEREG\", cereg_mon);\n\nint cereg_mon(const char *notif)\n{\n\tprintf(\"Received +CEREG notification in ISR\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for SUIT Platform Variant\nDESCRIPTION: Configures the build to include additional subdirectories based on the selected SUIT platform variant, ensuring only relevant components are included. An error is shown if no valid variant is selected.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_SUIT_PLATFORM_VARIANT_APP)\n\tadd_subdirectory(app)\nelseif(CONFIG_SUIT_PLATFORM_VARIANT_SDFW)\n\tadd_subdirectory(sdfw)\nelse()\n  message(FATAL_ERROR \"Please select one of the supported SUIT platform variants\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linux PPP Setup Command\nDESCRIPTION: Command for setting up PPP connection on Linux using pppd utility with specific configuration parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/PPP_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo pppd -detach <PPP_UART_dev> <baud_rate> noauth crtscts novj nodeflate nobsdcomp debug +ipv6 usepeerdns noipdefault defaultroute defaultroute6 ipv6cp-restart 5 ipcp-restart 5\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Channel Power Limits Table\nDESCRIPTION: ASCII table displaying maximum permitted Wi-Fi transmission power levels by country and channel number. Values are in dBm with asterisks indicating special regulatory conditions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_support.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| Country name                           | CH/Code      | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   | 10  | 11  | 12  | 13  | 14  | 36           | 40           | 44           | 48           | 52           | 56           | 60           | 64           | 100          | 104          | 108          | 112          | 116          | 120          | 124          | 128          | 132          | 136          | 140          | 144          | 149           | 153           | 157           | 161           | 165           | 169           | 173           |177  |\nn```\n\n----------------------------------------\n\nTITLE: UML Sequence Diagram for Host Power Management Flow\nDESCRIPTION: A UML sequence diagram illustrating the interaction flow between Zephyr, Application, HPF driver, VPR driver, and FLPR for power management. The diagram shows initialization, configuration, data transfer, and power state transitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/power_management.rst#2025-04-21_snippet_0\n\nLANGUAGE: uml\nCODE:\n```\n@startuml\nskinparam sequence {\nDividerBackgroundColor #8DBEFF\nDividerBorderColor #8DBEFF\nLifeLineBackgroundColor #13B6FF\nLifeLineBorderColor #13B6FF\nParticipantBackgroundColor #13B6FF\nParticipantBorderColor #13B6FF\nBoxBackgroundColor #C1E8FF\nBoxBorderColor #C1E8FF\nGroupBackgroundColor #8DBEFF\nGropuBorderColor #8DBEFF\n}\n\nskinparam note {\nBackgroundColor #ABCFFF\nBorderColor #2149C2\n}\n\nparticipant Zephyr\nparticipant Application\nparticipant \"HPF driver\"\nparticipant \"VPR driver\"\nparticipant FLPR\n\nactivate Zephyr\nZephyr -> Zephyr : post kernel initialization\nactivate Zephyr\nZephyr -> \"VPR driver\" : Initialize drivers\nactivate \"VPR driver\"\nrnote over \"VPR driver\"\nPower on FLPR RAM\nendrnote\nrnote over \"VPR driver\"\nIf non-XIP:\nCopy code to RAM\nendrnote\nrnote over \"VPR driver\"\nStart FLPR\nendrnote\n\n\"VPR driver\" -> \"VPR driver\" : Initialize IPC\nactivate \"VPR driver\"\n\"VPR driver\" -> FLPR\nactivate FLPR\nrnote over FLPR\nBoot\nendrnote\nrnote over FLPR\nInitialize IPC\nendrnote\nreturn\ndeactivate \"VPR driver\"\n\n\"VPR driver\" -> \"VPR driver\" : Initialize FLPR\nactivate \"VPR driver\"\n\"VPR driver\" -> FLPR : FLPR_INIT\nactivate FLPR\nrnote over FLPR\nInitialize HW, peripherals, etc\nendrnote\nreturn FLPR_INITD\ndeactivate \"VPR driver\"\nreturn\ndeactivate \"VPR driver\"\n\n\ndeactivate Zephyr\nZephyr -> Application : Start application\nactivate Application\nApplication -> \"HPF driver\" : hpf_driver_config(...)\nactivate \"HPF driver\"\n\"HPF driver\" -> \"HPF driver\" : HPF driver initialization\nactivate \"HPF driver\"\n\"HPF driver\" -> \"VPR driver\" : pm_device_runtime_get(&flpr)\nactivate \"VPR driver\"\n\"VPR driver\" -> FLPR : FLPR_RESUME\nactivate FLPR\nrnote over FLPR\nEnter RESUME state\nendrnote\nreturn FLPR_RESUMED\nreturn\n\n\"HPF driver\" -> FLPR : HPF_APP_CONFIGURE\nactivate FLPR\nrnote over FLPR\nConfigure HPF application\nendrnote\nreturn HPF_APP_CONFIGURED\ndeactivate \"HPF driver\"\nreturn\n...\n\n\nApplication -> \"HPF driver\" : hpf_driver_transcieve(...)\nactivate \"HPF driver\"\n\"HPF driver\" -> FLPR : HPF_APP_XFER\nactivate FLPR\nrnote over FLPR\nExecute transfer\nendrnote\nreturn HPF_APP_XFERD\nreturn\n...\n\n\nApplication -> \"HPF driver\" : hpf_driver_config(...)\nactivate \"HPF driver\"\n\"HPF driver\" -> \"HPF driver\" : HPF driver deinitialization\nactivate \"HPF driver\"\n\"HPF driver\" -> FLPR : HPF_APP_DECONFIGURE\nactivate FLPR\nrnote over FLPR\nDeconfigure HPF application\nendrnote\nreturn HPF_APP_DECONFIGURED\n\n\"HPF driver\" -> \"VPR driver\" : pm_device_runtime_put(&flpr)\nactivate \"VPR driver\"\n\"VPR driver\" -> FLPR : FLPR_SUSPEND\nactivate FLPR\nrnote over FLPR\nEnter SUSPENDED state\nendrnote\nreturn FLPR_SUSPENDED\nreturn\ndeactivate \"HPF driver\"\nreturn\nreturn\n\n\nZephyr -> Zephyr : power off procedure\nactivate Zephyr\n\"Zephyr\" -> \"VPR driver\" : power off\nactivate \"VPR driver\"\n\"VPR driver\" -> \"VPR driver\" : FLPR shutdown\nactivate \"VPR driver\"\n\"VPR driver\" -> FLPR : FLPR_SHUTDOWN_PREPARE\nactivate FLPR\nrnote over FLPR\nDeinitialize HW peripherals, etc\nendrnote\nreturn FLPR_SHUTDOWN_PREPARED\ndeactivate \"VPR driver\"\nrnote over \"VPR driver\"\nPower off FLPR\nendrnote\nrnote over \"VPR driver\"\nPower off FLPR RAM\nendrnote\nreturn\ndeactivate Zephyr\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Sources with Conditional Retention Memory\nDESCRIPTION: Adds main source file and optionally includes retention memory source file based on configuration options\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/system_off/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/boards/nordic/system_off/src/main.c)\nif(CONFIG_APP_USE_NRF_RETENTION OR CONFIG_APP_USE_RETAINED_MEM)\n  target_sources(app PRIVATE ${ZEPHYR_BASE}/samples/boards/nordic/system_off/src/retained.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Inclusion for Machine Learning Application in CMake\nDESCRIPTION: This snippet conditionally includes source files based on configuration flags. When CONFIG_ML_APP_EI_DATA_FORWARDER is enabled, it includes the Edge Impulse data forwarder implementation. When CONFIG_ML_APP_ADV_PROV_UUID128_ALL is enabled, it includes the Bluetooth LE advertisement provider that uses 128-bit UUIDs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/src/util/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_ML_APP_EI_DATA_FORWARDER\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ei_data_forwarder.c)\n\ntarget_sources_ifdef(CONFIG_ML_APP_ADV_PROV_UUID128_ALL\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/bt_le_adv_prov_uuid128.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring UART0 Pins Using Old Method\nDESCRIPTION: Example of configuring UART0 RX pin using the deprecated pin properties method. This approach will be removed in future Zephyr releases.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/pin_control.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n&uart0 {\n    ...\n    rx-pin = <33>;\n    rx-pull-up;\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Log Messages in C using nRF Cloud Log Library\nDESCRIPTION: Example of how to send log messages using the nRF Cloud Log library. This snippet demonstrates including the necessary header file and calling the log send function when connected to nRF Cloud via MQTT or CoAP.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud_log.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <nrf_cloud_log.h>\n\n// When connected to nRF Cloud via MQTT or CoAP\nnrf_cloud_log_send(...);\n```\n\n----------------------------------------\n\nTITLE: Response Format for SC Control Point\nDESCRIPTION: Structure of response messages from the SC Control Point, including response codes, operation codes, status, and optional data fields.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_rscs/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n10    # Response Code\nxx    # Required Op Code\nxx    # Status: 01=Success, 02=Op Code not supported, 03=Invalid Operand, 04=Operation Failed\ndata  # Optional response data\n```\n\n----------------------------------------\n\nTITLE: Programming Thingy:91 Using Command Line\nDESCRIPTION: Command to flash a built firmware image to the Thingy:91 device using the west tool after setting up the hardware connections and build environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy91/thingy91_building_programming.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Library (Coremark)\nDESCRIPTION: Defines a Zephyr library named 'coremark'. This specifies a module that can be linked against other Zephyr applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/coremark/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library_named(coremark)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Matter Window App CMake Project\nDESCRIPTION: Sets up the basic CMake project configuration including minimum version requirement and Zephyr package finding.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/window_covering/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr HINTS $ENV{ZEPHYR_BASE})\n\nproject(matter-window-app)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11ac PER Measurement (Receiver)\nDESCRIPTION: Commands to initialize the Wi-Fi radio test in channel 40 and set it to receive mode for 802.11ac PER measurement.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 40\nuart:~$ wifi_radio_test rx 1  #this will clear the earlier stats and wait for packets\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS 1.2 PRF Key Derivation Function in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for the TLS 1.2 PRF (Pseudorandom Function) algorithm within the PSA Cryptography API. This function is used to generate keying material in TLS 1.2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_12\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_TLS12_PRF`\"\n```\n\n----------------------------------------\n\nTITLE: Radio Sleep Mode Command\nDESCRIPTION: Command to put the radio of the CMD device into sleep mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_53\n\nLANGUAGE: plaintext\nCODE:\n```\ncustom lsleep\n```\n\n----------------------------------------\n\nTITLE: Building with Raw TX Support\nDESCRIPTION: Command to build the Wi-Fi shell sample with raw TX support for nRF7002 DK using overlay configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -DEXTRA_CONF_FILE=overlay-raw-tx.conf\n```\n\n----------------------------------------\n\nTITLE: Setting ACL for Group Communication with chip-tool\nDESCRIPTION: This command adds a new group to the device and sets the access control list (ACL) to allow communication from a specific group ID. It's crucial for regulating which groups can communicate within the network.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n./chip-tool groups add-group 0xdcba Custom_Group 1 1\n```\n\n----------------------------------------\n\nTITLE: Kconfig Library Configuration Options\nDESCRIPTION: Configuration options for nRF Modem Library including logging and trace handling features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.0.rst#2025-04-21_snippet_8\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NRF_MODEM_LIB_LOG_FW_VERSION_UUID\nCONFIG_NRF_MODEM_LIB_TRACE_THREAD_PROCESSING\nCONFIG_NRF_MODEM_LIB_ON_FAULT\n```\n\n----------------------------------------\n\nTITLE: Automated Provisioning: Run Provisioning Script with Leshan\nDESCRIPTION: This command executes the `provision.py` script in Leshan mode. The script clears security tags and stores PSK credentials.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/provisioning.rst#2025-04-21_snippet_5\n\nLANGUAGE: Console\nCODE:\n```\n# Run\n[nrf@dev]:~/scripts# ./provision.py --leshan\n[INFO] provision.py - Identity: urn:imei:351358814369747\n[INFO] device.py - Security tag 35724861 cleared\n[INFO] device.py - Security tag 35724862 cleared\n[INFO] device.py - PSK credentials stored to sec_tag 35724862\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Credentials Backend Library for nRF Modem in CMake\nDESCRIPTION: This CMake script creates a Zephyr library for the TLS credentials backend specifically for nRF modem integration. It includes the necessary TLS credentials headers from Zephyr and conditionally builds the nRF modem implementation when CONFIG_TLS_CREDENTIALS_BACKEND_NRF_MODEM is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/tls_credentials/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_include_directories(${ZEPHYR_BASE}/subsys/net/lib/tls_credentials)\n\nzephyr_library_sources_ifdef(CONFIG_TLS_CREDENTIALS_BACKEND_NRF_MODEM\n  tls_credentials_nrf_modem.c\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Zephyr Library Sources (CMake)\nDESCRIPTION: Adds source files for validating base addresses, binding headers, and enabled instances within the Nordic SoC. These files are located within the ZEPHYR_BASE directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(\n  ${ZEPHYR_BASE}/soc/nordic/validate_base_addresses.c\n  ${ZEPHYR_BASE}/soc/nordic/validate_binding_headers.c\n  ${ZEPHYR_BASE}/soc/nordic/validate_enabled_instances.c\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Program Info - Shell Command\nDESCRIPTION: Shell command for setting program info metadata for a Bluetooth LE Audio broadcast subgroup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nnac program_info \"Mathematics 101\" 0 0\n```\n\n----------------------------------------\n\nTITLE: Verifying IPUC Digest in C\nDESCRIPTION: Uses the suit_check_installed_component_digest SSF service to verify the digest of new contents written into the IPUC after the last write operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nsuit_check_installed_component_digest()\n```\n\n----------------------------------------\n\nTITLE: HTTPS PUT request (TLS with server and client auth, Wi-Fi)\nDESCRIPTION: Sends an HTTPS PUT request to update the state of LED 1 using TLS with both server and client authentication. It includes `--verify`, `--cert`, and `--cert-key` flags to specify the server certificate, client certificate, and client key respectively.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n\"https PUT https://httpserver.local:443/led/1 --raw=\\\"1\\\" --verify server_certificate.pem --cert client.crt --cert-key client.key\"\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option to Allow Non-Secure Fault Handling\nDESCRIPTION: This snippet sets the NRF_ALLOW_NON_SECURE_FAULT_HANDLING CMake option to True if CONFIG_TFM_ALLOW_NON_SECURE_FAULT_HANDLING is enabled. This allows the non-secure side to handle certain faults.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_ALLOW_NON_SECURE_FAULT_HANDLING)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DNRF_ALLOW_NON_SECURE_FAULT_HANDLING=True\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling nRF Desktop Debug Features\nDESCRIPTION: Application-specific Kconfig options added to simplify debug configurations for Logging and Shell subsystems in nRF Desktop.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_DESKTOP_LOG\nCONFIG_DESKTOP_SHELL\n```\n\n----------------------------------------\n\nTITLE: Include Directories for Application\nDESCRIPTION: This snippet specifies the directories to include for the application, which are necessary for OpenThread RPC command IDs and related functionalities in the project's build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE\n  # Needed to access OpenThread RPC command IDs.\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/openthread/rpc/common\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/openthread/rpc/server\n  ../common\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Application Source Files in CMake\nDESCRIPTION: This snippet specifies the source files for the Nordic SDK application. It includes the main application source file and an additional source file for handling carrier certificates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_carrier/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\ntarget_sources(app PRIVATE src/carrier_certs.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Using Shell Commands for Bluetooth Mesh Battery Client in C\nDESCRIPTION: Provides shell commands to interact with the Bluetooth Mesh Generic Battery Client model instantiated on a device. Requires enabling the Kconfig options 'CONFIG_BT_MESH_SHELL' and 'CONFIG_BT_MESH_SHELL_BATTERY_CLI'. Commands include getting model instances and selecting them for message sending, as well as querying the battery status of the bound server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_battery_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmesh models battery instance get-all\n\tPrint all instances of the Generic Battery Client model on the device.\n```\n\nLANGUAGE: shell\nCODE:\n```\nmesh models battery instance set <ElemIdx>\n\tSelect the Generic Battery Client model instantiated on the specified element ID.\n\tThis instance will be used in message sending.\n\tIf no model instance is selected, the first model instance found on the device will be used by default.\n\n\t* ``ElemIdx`` - Element index where the model instance is found.\n```\n\nLANGUAGE: shell\nCODE:\n```\nmesh models battery get\n\tGet the battery status of the bound server.\n```\n\n----------------------------------------\n\nTITLE: Disconnecting DTLS Client\nDESCRIPTION: This snippet shows how to disconnect a DTLS client from the server using AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_15\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XUDPCLI=0\n```\n\n----------------------------------------\n\nTITLE: Defining File Header and Group in Doxygen\nDESCRIPTION: Illustrates the correct way to define a file header and group in Doxygen, including the use of @file, @defgroup, and @brief tags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/styleguide.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/**\n * @file\n * @defgroup bt_gatt_pool BLE GATT attribute pool API\n * @{\n * @brief BLE GATT attribute pools.\n */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#include <zephyr/bluetooth/gatt.h>\n#include <zephyr/bluetooth/uuid.h>\n\n/**\n *  @brief Register a primary service descriptor.\n *\n *  @param _svc GATT service descriptor.\n *  @param _svc_uuid_init Service UUID.\n */\n#define BT_GATT_POOL_SVC_GET(_svc, _svc_uuid_init)   \\\n{                                                    \\\n   struct bt_uuid *_svc_uuid = _svc_uuid_init;       \\\n   bt_gatt_pool_svc_get(_svc, _svc_uuid);            \\\n}\n\n[...]\n/** @brief Return a CCC descriptor to the pool.\n *\n *  @param attr Attribute describing the CCC descriptor to be returned.\n */\nvoid bt_gatt_pool_ccc_put(struct bt_gatt_attr const *attr);\n\n#if CONFIG_BT_GATT_POOL_STATS != 0\n/** @brief Print basic module statistics (containing pool size usage).\n */\nvoid bt_gatt_pool_stats_print(void);\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n\n/**\n * @}\n */\n```\n\n----------------------------------------\n\nTITLE: Checking Thread Network State\nDESCRIPTION: Displays the current state of the device in the Thread network, showing if the device is operating as a leader or other role.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot state\nleader\nDone\n```\n\n----------------------------------------\n\nTITLE: SUIT Orchestrator SDFW Implementation\nDESCRIPTION: Defines the SUIT Orchestrator library for SDFW using `zephyr_library`. It specifies the source files and links the library to its dependencies, including SUIT core modules and interface libraries. The target `suit_orchestrator_sdfw.c` is the main source file for the implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/orchestrator/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(src/suit_orchestrator_sdfw.c)\n\nzephyr_library_link_libraries(suit)\nzephyr_library_link_libraries(suit_orchestrator_interface)\nzephyr_library_link_libraries(suit_storage_interface)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_mci)\nzephyr_library_link_libraries(suit_platform_err)\nzephyr_library_link_libraries(suit_execution_mode)\nzephyr_library_link_libraries(suit_cache_interface)\nzephyr_library_link_libraries(suit_validator)\n```\n\n----------------------------------------\n\nTITLE: Zephyr Library Definition\nDESCRIPTION: This snippet defines a Zephyr library. It uses zephyr_library() to declare the library and then conditionally includes source files and include directories based on Kconfig options. This allows for modular inclusion of Memfault features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/memfault-firmware-sdk/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(memfault_integration.c)\n\nzephyr_library_include_directories(include)\n\nzephyr_library_sources_ifdef(\n        CONFIG_MEMFAULT_NCS_USE_DEFAULT_METRICS\n        memfault_ncs_metrics.c)\n\nzephyr_library_sources_ifdef(\n        CONFIG_MEMFAULT_NCS_INTERNAL_FLASH_BACKED_COREDUMP\n        memfault_flash_coredump_storage.c)\n\nzephyr_library_sources_ifdef(\n        CONFIG_MEMFAULT_NCS_LTE_METRICS\n        memfault_lte_metrics.c\n)\n\nzephyr_library_sources_ifdef(\n        CONFIG_MEMFAULT_NCS_LOCATION_METRICS\n        memfault_location_metrics.c\n)\n\nzephyr_library_sources_ifdef(\n        CONFIG_MEMFAULT_NCS_BT_METRICS\n        memfault_bt_metrics.c)\n\nzephyr_library_sources_ifdef(\n        CONFIG_MEMFAULT_NCS_POST_COREDUMP_ON_NETWORK_CONNECTED\n        memfault_lte_coredump.c)\n\nzephyr_library_sources_ifdef(\n        CONFIG_MEMFAULT_NCS_POST_MODEM_TRACE_ON_COREDUMP\n        memfault_lte_coredump_modem_trace.c)\n\nzephyr_library_sources_ifdef(\n        CONFIG_MEMFAULT_NCS_ETB_CAPTURE\n        memfault_etb_trace_capture.c)\n\nzephyr_include_directories_ifdef(\n        CONFIG_MEMFAULT_METRICS_EXTRA_DEFS_FILE\n        config)\n\nzephyr_include_directories_ifdef(\n        CONFIG_MEMFAULT_PLATFORM_EXTRA_CONFIG_FILE\n        config)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Listener for Network Channel Changes - C\nDESCRIPTION: This snippet demonstrates how to define a callback function for a listener module to react to changes in the 'NETWORK' channel. It processes network status updates to toggle an LED based on connection status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/doc/architecture.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n    void led_callback(const struct zbus_channel *chan)\\n    {\\n\\t\\tint err = 0;\\n\\t\\tconst enum network_status *status;\\n\\n\\t\\tif (&NETWORK_CHAN == chan) {\\n\\n\\t\\t\\t/* Get network status from channel. */\\n\\t\\t\\tstatus = zbus_chan_const_msg(chan);\\n\\n\\t\\t\\tswitch (*status) {\\n\\t\\t\\tcase NETWORK_CONNECTED:\\n\\t\\t\\t\\t\\terr = led_on(led_device, LED_1_GREEN);\\n\\t\\t\\t\\t\\tif (err) {\\n\\t\\t\\t\\t\\t\\tLOG_ERR(\"led_on, error: %d\", err);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase NETWORK_DISCONNECTED:\\n\\t\\t\\t\\t\\terr = led_off(led_device, LED_1_GREEN);\\n\\t\\t\\t\\t\\tif (err) {\\n\\t\\t\\t\\t\\t\\tLOG_ERR(\"led_off, error: %d\", err);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tLOG_ERR(\"Unknown event: %d\", *status);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n    }\\n\\n    ZBUS_LISTENER_DEFINE(led, led_callback);\n```\n\n----------------------------------------\n\nTITLE: GPIO Pin Access (#XGPIO)\nDESCRIPTION: Command for writing, reading, or toggling GPIO pin states. Supports operations like setting output value, reading input state, and toggling output state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/GPIO_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XGPIO=<op>,<pin>[,<value>]\n```\n\n----------------------------------------\n\nTITLE: Executing MCUmgr Image Upload Command\nDESCRIPTION: Command to upload a new firmware image to the device using MCUmgr CLI tool over serial connection. Uses the signed binary file and targets a specific serial port with a 60-second timeout.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/bootloader_dfu.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmcumgr -t 60 --conntype serial --connstring=/dev/ttyACM0 image upload build/nrf_desktop/zephyr/zephyr.signed.bin\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing DMIC Test for nrf54l15dk\nDESCRIPTION: Commands to build and flash the dmic_dump_buffer test for the nrf54l15dk board. This compiles the test and flashes it to the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/audio/dmic_dump_buffer/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b nrf54l15dk/nrf54l15/cpuapp --pristine --test-item drivers.audio.dmic_dump_buffer .\nwest flash --erase\n```\n\n----------------------------------------\n\nTITLE: Querying Connection Evaluation Parameters in LTE\nDESCRIPTION: This code retrieves connection evaluation parameters, which can be used to estimate the energy efficiency of the current cell. This enables an application to postpone network operations when energy consumption is high. It uses the `lte_lc_conn_eval_params_get` function and checks for errors during the process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/lte/psm.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct lte_lc_conn_eval_params params = {0};\n   int err = lte_lc_conn_eval_params_get(&params);\n   if (err) {\n      printk(\"lte_lc_conn_eval_params_get, error: %d\\n\", err);\n      return;\n    }\n```\n\n----------------------------------------\n\nTITLE: Including Thread Samples in reStructuredText Documentation\nDESCRIPTION: This snippet demonstrates how to include Thread samples in a reStructuredText document. It uses directives to include general sample information and create a table of contents for sample subpages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/thread.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n\n|filter_samples_by_board|\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/openthread/*/README\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package with CMake\nDESCRIPTION: This snippet defines the minimum required CMake version and finds the Zephyr package using environment variables. Dependencies include Zephyr, which is a real-time operating system framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/system_off/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Under Test for nRF9x Sockets\nDESCRIPTION: Adds the nRF9x sockets implementation file as a source for the test application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/nrf9x_sockets/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/nrf9x_sockets.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Continuous Array Project with CMake in nRF Connect SDK\nDESCRIPTION: This CMake script configures a project named 'contin_array' in the nRF Connect SDK. It requires CMake 3.20.0 or later, finds the Zephyr package, and adds all C source files from the src directory to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/contin_array/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(contin_array)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Updating SUIT Envelope Sequence Number\nDESCRIPTION: This snippet shows how to update the SUIT envelope sequence number in the VERSION file. This is used to indicate a new version of the firmware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/smp_transfer/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAPP_ROOT_SEQ_NUM = 2\n```\n\n----------------------------------------\n\nTITLE: Running LC3 Test with Twister on nRF5340\nDESCRIPTION: Command to execute LC3 codec test using Zephyr's Twister testing framework. Requires specifying the device serial port, platform target, and test directory. The command enables device testing mode with verbose output.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/nrf5340_audio/sw_codec_lc3/readme.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzephyr/scripts/twister --device-testing --device-serial /dev/ttyACM2 --platform nrf5340dk/nrf5340/cpuapp -T nrf/tests/nrf5340_audio/sw_codec_lc3 -v\n```\n\n----------------------------------------\n\nTITLE: Defining Input Data for Machine Learning Model\nDESCRIPTION: Defining input data array in the input_data.h header file for machine learning model prediction\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/edge_impulse/wrapper/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n// Example input data definition in input_data.h\nstatic const float input_data[] = {\n    // Raw features copied from Edge Impulse studio\n    0.1, 0.2, 0.3, ...\n};\n```\n\n----------------------------------------\n\nTITLE: Installing nrfutil device v2.4.6\nDESCRIPTION: Command to install the nRF Util device command version 2.4.6 with force flag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7_99-cs1.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil install device=2.4.6 --force\n```\n\n----------------------------------------\n\nTITLE: Configuring Unity Configuration File in CMake\nDESCRIPTION: Creates a Unity configuration YAML file based on provided parameters for mocking. It handles generating configuration with or without function exclusions and strippables for CMock.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/unity/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(configure_unity_conf_file mock_name exclude_fn_list exclude_word_list out_config_file)\n  set(unity_config_template unity_cfg.yaml.template)\n  set(unity_config_file_name unity_cfg.yaml)\n  set(out_dir ${APPLICATION_BINARY_DIR}/mocks)\n\n  if(\"${mock_name}\" STREQUAL \"\")\n    configure_file(${ZEPHYR_NRF_MODULE_DIR}/tests/unity/${unity_config_template}\n                   ${out_dir}/${unity_config_file_name}\n    )\n    set(${out_config_file} ${out_dir}/${unity_config_file_name})\n  elseif(\"${exclude_fn_list}\" STREQUAL \"\" AND \"${exclude_word_list}\" STREQUAL \"\")\n    # Just return the common file.\n    set(${out_config_file} ${out_dir}/${unity_config_file_name})\n  else()\n    set(CMOCK_STRIPPABLES \":strippables:\\n\")\n    foreach(ex ${exclude_fn_list})\n      string(CONFIGURE \"        - '(?:${ex}\\\\s*\\\\(+.*?\\\\)+)'\\n\" strip_regex)\n      set(CMOCK_STRIPPABLES \"${CMOCK_STRIPPABLES}${strip_regex}\")\n    endforeach()\n    foreach(ex ${exclude_word_list})\n      string(CONFIGURE \"        - '(?:${ex})'\\n\" strip_word)\n      set(CMOCK_STRIPPABLES \"${CMOCK_STRIPPABLES}${strip_word}\")\n    endforeach()\n    set(${out_config_file} ${out_dir}/${mock_name}.${unity_config_file_name})\n    configure_file(${ZEPHYR_NRF_MODULE_DIR}/tests/unity/${unity_config_template} ${${out_config_file}})\n    set(CMOCK_STRIPPABLES)\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Mesh DFU Target Project with CMake\nDESCRIPTION: This CMake script sets up a Bluetooth Mesh DFU target project. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, and includes necessary directories and source files. It also conditionally includes additional sources for MCUMGR Bluetooth OTA DFU support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/dfu/target/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n\ncmake_minimum_required(VERSION 3.13.1)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(mesh_dfu_target)\n\nset(dfu_common_dir ${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/mesh/dfu/common/src)\n\ninclude_directories(\n\t${dfu_common_dir}\n\t${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/mesh/common\n)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources}\n\t${dfu_common_dir}/dfu_target.c\n)\n\ntarget_sources_ifdef(CONFIG_NCS_SAMPLE_MCUMGR_BT_OTA_DFU app PRIVATE ${app_sources}\n\t${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/mesh/common/smp_bt.c\n)\n```\n\n----------------------------------------\n\nTITLE: XMODEM Initialization Notification Format\nDESCRIPTION: Format of the unsolicited notification sent when libmodem is re-initialized. Includes a result code (integer) indicating the result of the initialization operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/Generic_AT_commands.rst#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n#XMODEM: INIT,<result>\n```\n\n----------------------------------------\n\nTITLE: Registering SubscriptionApplicationCallback in Matter Application\nDESCRIPTION: Registers the SubscriptionApplicationCallback class implementation to make InteractionModelEngine use it for handling subscription requests in a Matter application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\n#include <app/InteractionModelEngine.h>\n\nSubscriptionApplicationCallback myClassInstance;\n\nchip::app::InteractionModelEngine::GetInstance()->RegisterReadHandlerAppCallback(&myClassInstance);\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS FOTA Library Build in CMake\nDESCRIPTION: Creates a Zephyr library for AWS FOTA functionality, specifies the source files to compile, and sets the include directory path. The library handles AWS-based firmware over-the-air updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/aws_fota/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tsrc/aws_fota.c\n\tsrc/aws_fota_json.c\n)\nzephyr_include_directories(./include)\n```\n\n----------------------------------------\n\nTITLE: Defining Button Characteristic UUID in C\nDESCRIPTION: The 128-bit UUID for the Button Characteristic, which allows reading button state and enabling notifications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/lbs.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n\"00001524-1212-EFDE-1523-785FEABCD123\"\n```\n\n----------------------------------------\n\nTITLE: Stopping UDP Download Server with zperf\nDESCRIPTION: Shows how to stop the UDP download server using the zperf command line tool. This command terminates the UDP server instance that was previously started for throughput testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ zperf udp download stop\nUDP server stopped\n```\n\n----------------------------------------\n\nTITLE: DFU Target Function Relocation\nDESCRIPTION: Function renamed and moved from lib_dfu_target to lib_fota_download library for improved organization.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\ndfu_ctx_mcuboot_set_b1_file -> fota_download_parse_dual_resource_locator\n```\n\n----------------------------------------\n\nTITLE: Displaying Repository Application Directory Structure\nDESCRIPTION: Shows the directory structure for a repository application in the nRF Connect SDK, using the Bluetooth Peripheral UART sample as an example.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/create_application.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n<home>/\n├─── .west/\n├─── bootloader/\n├─── mbedtls/\n├─── modules/\n├─── nrf/\n│    ├─── applications/\n│    ├─── ...\n│    └─── samples/\n│       ├─── ...\n│       ├─── bluetooth/\n│       │  ├── ...\n│       │  └── peripheral_uart/   <--- <app> directory\n│       └─── ...\n├─── nrfxlib/\n├─── test/\n├─── tools/\n└─── zephyr/\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Scan Sample Output: 5 GHz Non-DFS Channel Scan\nDESCRIPTION: Console output displaying scan results for non-DFS channels in the 5 GHz band.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/scan/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nScan requested\nNum | SSID                           (len) | Chan | RSSI | Security | BSSID\n1   | ABCDEFG                          7   | 36   | -70  | Open     | 48:5D:35:9C:4A:0B\n2   | PQRST                            5   | 161  | -78  | Open     | 50:EB:F6:08:E1:6C\n3   | abcd                             4   | 165  | -78  | WPA/WPA2 | 08:86:3B:8B:52:9E\n4   | KLMNO                            5   | 40   | -90  | Open     | E8:94:F6:C7:D8:8E\nScan request done\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Locates the Zephyr RTOS SDK and sets up the environment for building Zephyr applications. The `REQUIRED` keyword ensures that the build process fails if Zephyr is not found. The `HINTS` variable suggests locations to search for Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/netboot/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Defining Hardware Compatibility Table in RST\nDESCRIPTION: This RST code defines a table structure for listing hardware platform compatibility information. It includes columns for hardware platforms, PCA numbers, board names, and board targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/boardname_tables/sample_boardnames.txt#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n+--------------------------------+-----------+------------------------------------------------+-------------------------------+\n|Hardware platforms              |PCA        |Board name                                    |Board target                 |\n+================================+===========+================================================+===============================+\n|:ref:`nRF52840 DK <ug_nrf52>`   |PCA10056   |:ref:`nrf52840dk <nrf52840dk_nrf52840>`         |``nrf52840dk/nrf52840``        |\n+--------------------------------+-----------+------------------------------------------------+-------------------------------+\n|:ref:`nRF52 DK <ug_nrf52>`      |PCA10040   |:ref:`nrf52dk <nrf52dk_nrf52832>`               |``nrf52dk/nrf52832``           |\n+--------------------------------+-----------+------------------------------------------------+-------------------------------+\n```\n\n----------------------------------------\n\nTITLE: PWM Pin Controller Configuration in Devicetree\nDESCRIPTION: Example of PWM pin controller configuration in devicetree showing how to set up different PWM channels with polarity settings. This is used as a reference for the updated PWM LED definitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_1.x_to_2.x.rst#2025-04-21_snippet_10\n\nLANGUAGE: devicetree\nCODE:\n```\npwm0_default: pwm0_default {\n    group1 {\n        psels = <NRF_PSEL(PWM_OUT0, 0, 11)>;\n        nordic,invert;\n    };\n    group2 {\n        psels = <NRF_PSEL(PWM_OUT3, 1, 5)>;\n    };\n};\n\npwm0_sleep: pwm0_sleep {\n    group1 {\n        psels = <NRF_PSEL(PWM_OUT0, 0, 11)>,\n                <NRF_PSEL(PWM_OUT3, 1, 5)>;\n        low-power-enable;\n    };\n};\n\n&pwm0 {\n    status = \"okay\";\n    pinctrl-0 = <&pwm0_default>;\n    pinctrl-1 = <&pwm0_sleep>;\n    pinctrl-names = \"default\", \"sleep\";\n};\n```\n\n----------------------------------------\n\nTITLE: Running bt_nus_shell.py with specified parameters\nDESCRIPTION: This command executes the bt_nus_shell.py script with specific parameters, including the advertising name of the device, the COM port of the development kit, the chip family, and the SEGGER board ID. These parameters are essential for the script to connect to the correct device and forward NUS traffic.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/shell/shell_bt_nus.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nbt_nus_shell.py --name BT_NUS_shell --com COM237 --family NRF52 --snr 682560213\n```\n\n----------------------------------------\n\nTITLE: Renamed Bluetooth Scanning Option in nRF Desktop (C)\nDESCRIPTION: The Bluetooth scanning enable option in nRF Desktop has been renamed for clarity.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.2.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nCONFIG_DESKTOP_BLE_SCAN_ENABLE\n```\n\n----------------------------------------\n\nTITLE: Power Saving Mode Control\nDESCRIPTION: The #XSLEEP command controls power saving modes - Sleep mode (1) terminates SLM and LTE, Idle mode (2) maintains connections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/Generic_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XSLEEP=<sleep_mode>\n```\n\n----------------------------------------\n\nTITLE: ZMS Settings Subsystem Configuration\nDESCRIPTION: Kconfig options for enabling ZMS through the Settings subsystem with cache configuration for optimal performance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/zms.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_ZMS=y\nCONFIG_SETTINGS_ZMS=y\nCONFIG_ZMS_LOOKUP_CACHE=y\nCONFIG_ZMS_LOOKUP_CACHE_SIZE=<size>\nCONFIG_ZMS_LOOKUP_CACHE_FOR_SETTINGS=y\n```\n\n----------------------------------------\n\nTITLE: Showing Supported Channel Modules and Options - Python\nDESCRIPTION: This command lists the supported configuration channel modules and options for the connected device. It is part of the initial setup and identification process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npython3 configurator_cli.py DEVICE show\n```\n\n----------------------------------------\n\nTITLE: Resetting Device Remotely with MCUmgr\nDESCRIPTION: This snippet allows a user to reset the device remotely after verifying that the images have been upgraded. It utilizes the MCUmgr command to initiate a reset.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/extxip_smp_svr/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsudo mcumgr <connection string> reset\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to CMake Targets\nDESCRIPTION: This snippet adds two source files, lte_net_if.c and lte_ip_addr_helper.c, to the app target in a CMake project. This is necessary for compiling LTE-related functionality within the project. The ${CMAKE_CURRENT_SOURCE_DIR} variable ensures paths are relative to the directory containing the CMakeLists.txt.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/nrf_modem_lib/lte_net_if/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lte_net_if.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lte_ip_addr_helper.c)\n```\n\n----------------------------------------\n\nTITLE: Programming BICR HEX File using nRF Util\nDESCRIPTION: This command uses nRF Util to program the BICR HEX file onto the nRF54H20 device. It specifies chip erase mode, firmware file, core, and serial number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device program --options chip_erase_mode=ERASE_NONE --firmware bicr_ext_loadcap.hex --core Secure --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Console Output for Identity Key Generation\nDESCRIPTION: Expected terminal output showing the successful generation and storage of hardware unique keys and identity key in KMU. The output indicates the three main steps: generating random HUK keys, writing the identity key, and confirmation of success.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/keys/identity_key_generation/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nGenerating random HUK keys\nWriting the identity key to KMU\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Sending Messages in Bluetooth Mesh with C\nDESCRIPTION: Details the process of sending messages within the mesh by setting up a message buffer with an opcode and using an appropriate context to send it with specified parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/dev_overview.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nBT_MESH_MODEL_BUF_DEFINE(buf, MESSAGE_SET_OPCODE, MESSAGE_SET_LEN);\n```\n\nLANGUAGE: C\nCODE:\n```\nbt_mesh_model_msg_init(&buf, MESSAGE_SET_OPCODE);\n```\n\nLANGUAGE: C\nCODE:\n```\nstatic int send_message(struct bt_mesh_model *model, uint16_t addr)\n{\n    struct bt_mesh_msg_ctx ctx = {\n            .addr = addr,\n            .app_idx = model->keys[0],\n            .send_ttl = BT_MESH_TTL_DEFAULT,\n    };\n\n    BT_MESH_MODEL_BUF_DEFINE(buf, MESSAGE_SET_OPCODE, MESSAGE_SET_LEN);\n    bt_mesh_model_msg_init(&buf, MESSAGE_SET_OPCODE);\n\n    // Fill the message buffer here\n\n    return bt_mesh_model_send(model, &ctx, &buf, NULL, NULL);\n}\n```\n\nLANGUAGE: C\nCODE:\n```\nstatic void handle_message_set(struct bt_mesh_model *model,\n                               struct bt_mesh_msg_ctx *ctx,\n                               struct net_buf_simple *buf)\n{\n    BT_MESH_MODEL_BUF_DEFINE(reply, MESSAGE_ACK_OPCODE, MESSAGE_ACK_LEN);\n    bt_mesh_model_msg_init(&reply, MESSAGE_ACK_OPCODE);\n\n    // Fill the reply buffer here\n\n    (void) bt_mesh_model_send(model, ctx, &reply, NULL, NULL);\n}\n```\n\nLANGUAGE: C\nCODE:\n```\nstatic struct bt_mesh_model_pub pub_ctx;\n\nBT_MESH_MODEL_VND_CB(YOUR_COMPANY_ID,\n                     YOUR_MODEL_ID,\n                     _opcode_list,\n                     &pub_ctx,\n                     NULL,\n                     NULL)\n```\n\n----------------------------------------\n\nTITLE: Initializing Matter Smoke and CO Alarm Project in CMake\nDESCRIPTION: Sets up the CMake project for a Matter-based smoke and CO alarm, including required packages, GNU STD support, and Matter Data Model initialization. It also includes common Matter source files and configures project-specific sources and include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/smoke_co_alarm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr HINTS $ENV{ZEPHYR_BASE})\n\nproject(matter-smoke-co-alarm)\n\n# Enable GNU STD support and initialize the Matter Data Model.\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/nrfconnect/app/enable-gnu-std.cmake)\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/src/app/chip_data_model.cmake)\n\n# NORDIC SDK APP START\n\n# Include all source files that are located in the Matter common directory.\ninclude(${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/cmake/source_common.cmake)\n\ntarget_include_directories(app PRIVATE\n    src\n    ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}\n)\n\ntarget_sources(app PRIVATE\n    src/app_task.cpp\n    src/main.cpp\n    src/zcl_callbacks.cpp\n)\n\nchip_configure_data_model(app\n    INCLUDE_SERVER\n    BYPASS_IDL\n    GEN_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated\n    ZAP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/smoke_co_alarm.zap\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Volume Controller Source\nDESCRIPTION: Adds the Bluetooth volume controller implementation to the build sources if the corresponding Kconfig option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_rendering_and_capture/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_BT_VCP_VOL_CTLR)\n\ttarget_sources(app PRIVATE\n\t        ${CMAKE_CURRENT_SOURCE_DIR}/volume/bt_vol_ctlr.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Current Local Location Value\nDESCRIPTION: This command fetches the current local location value of the Generic Location state without any input parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_loc_cli.rst#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models loc local-get\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Carrier Configurations\nDESCRIPTION: This snippet shows how to display current configurations related to the carrier settings by using the 'carrier_config print' command in the LwM2M carrier shell. The output details the initialization parameters and custom settings for the connected devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/app_integration.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ carrier_config print\nAutomatic startup                No\nCustom carrier settings          Yes\n  Carriers enabled               Verizon (1), T-Mobile (3), SoftBank (4), Bell Canada (5)\n  Server settings\n    Server URI\n      Is bootstrap server        No  (Not used without server URI)\n    PSK security tag             0\n    Server lifetime              0\n    Server binding               Not set\n  Auto register                  Yes\n  Bootstrap from smartcard       Yes\n  Queue mode                     Yes\n  Session idle timeout           60\n  CoAP confirmable interval      86400\n  APN\n    PDN type                     IPv4v6\n  Service code\n  Device Serial Number type      1\n  Firmware download timeout      0 (disabled)\nCustom carrier device settings   No\n  Manufacturer\n  Model number\n  Device type\n  Hardware version\n  Software version\n```\n\n----------------------------------------\n\nTITLE: Configuring AES CCM Project with CMake\nDESCRIPTION: This CMake script configures a project for AES CCM cryptographic operations. It requires CMake 3.20.0 or higher, finds the Zephyr package using the ZEPHYR_BASE environment variable, and adds the main.c source file to the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/aes_ccm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(aes_ccm)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Mock Subdirectories in CMake\nDESCRIPTION: This snippet conditionally adds subdirectories for mocking nRF modem AT commands and nRF RPC based on configuration options. It uses the add_subdirectory_ifdef command to include the directories only if the respective CONFIG options are set.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/mocks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_MOCK_NRF_MODEM_AT nrf_modem_at)\nadd_subdirectory_ifdef(CONFIG_MOCK_NRF_RPC nrf_rpc)\n```\n\n----------------------------------------\n\nTITLE: Enabling Matter Shell Commands in C\nDESCRIPTION: Enables Matter shell commands for all build types except 'release' in Matter samples.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n#if !defined(CONFIG_CHIP_BUILD_TYPE_RELEASE)\nCONFIG_CHIP_SHELL=y\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Input Device Project with Nordic SDK and Zephyr\nDESCRIPTION: This CMake snippet sets up the project configuration for an input device using the Nordic Semiconductor SDK and Zephyr RTOS. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, and sets the target sources and include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/input_device/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(input_device)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n  src/bt_adv_helper.c\n  src/hids_helper.c\n  src/bt_le_adv_prov_uuid16.c\n  src/battery_module.c\n)\n\ntarget_include_directories(app PRIVATE include)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Generating Repository Revisions Table in reStructuredText\nDESCRIPTION: Uses a custom directive 'manifest-revisions-table' to generate a table of repository revisions. It specifies certain repositories to be shown first in the table.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/repository_revisions.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. manifest-revisions-table::\n   :show-first: zephyr, nrfxlib, mcuboot, trusted-firmware-m, find-my, matter, nrf-802154, mbedtls, memfault-firmware-sdk\n```\n\n----------------------------------------\n\nTITLE: Getting Property Value of Light Control Server - C\nDESCRIPTION: Retrieves a specified property value from the Light Lightness Control Server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl prop-get <ID>\n\tGet a property value of the Light Lightness Control Server.\n\n\t* ``ID`` - ID of the property to get. See :c:enum:`bt_mesh_light_ctrl_prop` for a list of supported properties.\n```\n\n----------------------------------------\n\nTITLE: Stopping TCP Server using AT command\nDESCRIPTION: This AT command stops a previously started TCP server. It returns a status indicating the server has stopped.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n**AT#XTCPSVR=0**\n#XTCPSVR:0,\"stopped\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Handling Zigbee Status Indication Signal in C\nDESCRIPTION: This code snippet handles status indication signals in a Zigbee network, specifically checking for a bad key sequence and optionally triggering a rejoin procedure. It uses Zigbee-specific signal and status structures, and assumes an active Zigbee environment where checking network connectivity is possible.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nvoid zboss_signal_handler(zb_bufid_t bufid)\\n{\\n    zb_zdo_app_signal_hdr_t *sig_hndler = NULL;\\n    zb_zdo_app_signal_type_t sig = zb_get_app_signal(bufid, &sig_hndler);\\n\\n    /* Update network status LED. */\\n    zigbee_led_status_update(bufid, ZIGBEE_NETWORK_STATE_LED);\\n\\n    switch (sig) {\\n\\ncase ZB_NLME_STATUS_INDICATION:\\n    zb_zdo_signal_nlme_status_indication_params_t *nlme_status_ind = ZB_ZDO_SIGNAL_GET_PARAMS(sig_hndler, zb_zdo_signal_nlme_status_indication_params_t);\\n\\n    if (nlme_status_ind->nlme_status.status == ZB_NWK_COMMAND_STATUS_BAD_KEY_SEQUENCE_NUMBER) {\\n        // optional check connection\\n        // optional rejoin if necessary\\n    }\\n    break;\\n\\ndefault:\\n    /* Call default signal handler. */\\n    ZB_ERROR_CHECK(zigbee_default_signal_handler(bufid));\\n    break;\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Inaccurate Timestamps from Delayed Operations - 802.15.4 - Documentation Format\nDESCRIPTION: This entry warns about inaccuracies in timestamps reported by the nRF 802.15.4 Radio Driver during delayed operations, which may lead to unexpected behavior in timing-sensitive applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_52\n\nLANGUAGE: plaintext\nCODE:\n```\nKRKNWK-18589: Timestamps for delayed operations triggering very shortly after a sleep request may be very inaccurate It was observed that the nRF 802.15.4 Radio Driver reported a too big timestamp by approximately ``UINT32_MAX``.\n```\n\n----------------------------------------\n\nTITLE: Adding source files to the application target\nDESCRIPTION: Adds the source files found by `FILE(GLOB)` to the application target. The `target_sources` command links the source files to the `app` target as private sources, ensuring that they are compiled and linked into the final application binary.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/writable_ndef_msg/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_sources(app  PRIVATE ${app_sources})\"\n```\n\n----------------------------------------\n\nTITLE: Gazell Pairing Power Macro\nDESCRIPTION: This macro is used to set the transmit power to a low level during the System Address exchange stage.  It is part of the proximity detection mechanism to ensure pairing only occurs when devices are close to the host. Setting TX power to low levels helps the host estimate the relative proximity of the requesting device by measuring the received signal strength.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/gazell/gzp.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\":c:macro:`GZP_POWER`\"\n```\n\n----------------------------------------\n\nTITLE: Set Interval Between Provisioning Attempts - C\nDESCRIPTION: This snippet refers to the function `nrf_provisioning_set_interval`, which is used to set the interval between provisioning attempts in the nRF provisioning library. This allows for customization of the provisioning retry strategy.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Bluetooth Mesh On Power Up Enumerator OFF\nDESCRIPTION: This code snippet describes the BT_MESH_ON_POWER_UP_OFF enumerator. When this is set, the Power Level is set to 0 on power-up.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_plvl_srv.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n\":c:enumerator:`BT_MESH_ON_POWER_UP_OFF` - The Power Level is set to 0 on power-up.\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for nRF Connect SDK on Windows\nDESCRIPTION: Commands to install required Python packages for Zephyr, nRF, and MCUBoot components of the nRF Connect SDK on Windows.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r zephyr/scripts/requirements.txt\npip3 install -r nrf/scripts/requirements.txt\npip3 install -r bootloader/mcuboot/scripts/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: SUIT DFU Initialization Function Call\nDESCRIPTION: Function call required to initialize the SUIT DFU module before using any SUIT functionality. Must be called once after device drivers are ready.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/suit_dfu.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsuit_dfu_initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuration Option: CONFIG_BT_EXT_ADV\nDESCRIPTION: This snippet describes a rare issue on nRF53 Series devices where an assert can occur or corrupted advertising reports are generated while scanning using HCI LE Set Scan Enable.  The suggested workaround is to use extended scanning commands by setting `CONFIG_BT_EXT_ADV` to use HCI LE Set Extended Scan Enable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_62\n\nLANGUAGE: none\nCODE:\n```\nDRGN-15852: In rare cases on nRF53 Series devices, an assert can occur while scanning\n  This only occurs when the host started scanning using HCI LE Set Scan Enable.\n  This is default configuration of the Bluetooth host.\n\n  **Affected platforms:** nRF5340, Thingy:53\n\n  **Workaround:** Use extended scanning commands.\n  That is, set :kconfig:option:`CONFIG_BT_EXT_ADV` to use HCI LE Set Extended Scan Enable instead.\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Low Power UART Communication\nDESCRIPTION: Sample configuration demonstrating low-power UART implementation with specific pin configurations for multiple Nordic development kits, disabling console and logging to minimize power consumption\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/lpuart/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table:: Pin connections.\n   :widths: auto\n   :header-rows: 1\n\n   * - Development Kit\n     - nRF52 DK\n     - nRF52833 DK\n     - nRF52840 DK\n     - nRF21540 DK\n     - nRF5340 DK pins\n     - nRF54L15 DK pins\n     - nRF9160 DK pins\n   * - Request-Response Pins\n     - P0.24-P0.25\n     - P0.22-P0.23\n     - P1.14-P1.15\n     - P1.07-P1.08\n     - P1.14-P1.15\n     - P1.08-P1.09\n     - P0.12-P0.13\n   * - UART RX-TX Pins\n     - P0.22-P0.23\n     - P0.20-P0.21\n     - P1.12-P1.13\n     - P1.05-P1.06\n     - P1.12-P1.13\n     - P1.10-P1.11\n     - P0.10-P0.11\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot mode: Direct-XIP\nDESCRIPTION: Facilitates dual-bank image execution directly from storage, updating by uploading a new image to an alternate bank, eliminating the need for swapping or overwriting NVM. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_5\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_DIRECT_XIP\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_BOOT_DIRECT_XIP`\"\n```\n\n----------------------------------------\n\nTITLE: Installing nrfutil device command\nDESCRIPTION: Command to install the nrfutil device command, which is used for flashing applications to Nordic boards.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_3.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil install device\n```\n\n----------------------------------------\n\nTITLE: Table of Contents in RST Format\nDESCRIPTION: reStructuredText directive for generating local table of contents with depth of 3 levels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. contents::\n   :local:\n   :depth: 3\n```\n\n----------------------------------------\n\nTITLE: UDP Client Set Command Syntax\nDESCRIPTION: Syntax for the set command to create a UDP/DTLS client and connect to a server, including all possible parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_11\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPCLI=<op>[,<url>,<port>[,<sec_tag>[,<use_dtls_cid>[,peer_verify[,hostname_verify]]]]]\n```\n\n----------------------------------------\n\nTITLE: Controlling a Simulated Light Switch Device\nDESCRIPTION: Command syntax for controlling the state of a simulated On/Off Light Switch bridged device. Requires specifying the new state and endpoint number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_7\n\nLANGUAGE: parsed-literal\nCODE:\n```\nmatter_bridge onoff_switch *<new_state>* *<endpoint>*\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements for nRF Connect SDK\nDESCRIPTION: Defines specific package dependencies with machine architecture constraints for x86_64 platforms\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/requirements-west-ncs-sbom.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\njinja2\nscancode-toolkit[full]==31.2.6 ; platform_machine == \"x86_64\"\n```\n\n----------------------------------------\n\nTITLE: Setting Wi-Fi TX Rate using Shell Commands\nDESCRIPTION: Command to fix the data transmission rate for the Wi-Fi connection. It takes frame format and rate value as parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/using_wifi_shell_sample.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ nrf70 util tx_rate <frame_format> <rate_val>\n```\n\n----------------------------------------\n\nTITLE: Setting up Remote Project with Zephyr and Board-Specific Configuration in CMake\nDESCRIPTION: This CMake script configures a remote project build. It verifies that the target board is supported by checking for board-specific configuration files, sets up include paths for Common Application Framework (CAF) definition files, and includes common modules from a shared location. The script requires Zephyr and validates board support before proceeding with the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\n################################################################################\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nif (NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/configuration/${NORMALIZED_BOARD_TARGET}\")\n  message(FATAL_ERROR\n          \"Board ${BOARD} is not supported.\\n\"\n          \"Please make sure board specific configuration files are added to \"\n          \"${CMAKE_CURRENT_SOURCE_DIR}/configuration/${BOARD}\")\nendif()\n\nset(REMOTE_INC_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/configuration/${NORMALIZED_BOARD_TARGET}\")\nstring(CONFIGURE ${REMOTE_INC_DIR} REMOTE_INC_DIR)\n\nproject(remote)\n\ntarget_sources(app PRIVATE src/main.c)\n\n# Add include directory for board specific CAF def files\nzephyr_include_directories(\n  ../configuration/common\n  /configuration\n  ${REMOTE_INC_DIR})\n\n# Add subdirectory from common part.\nadd_subdirectory(../common/src/modules ${CMAKE_CURRENT_BINARY_DIR}/common/src/module)\n```\n\n----------------------------------------\n\nTITLE: Creating mcuboot_secondary partition for nRF70 firmware updates\nDESCRIPTION: Defines the secondary MCUboot partition used for storing new firmware patches during the DFU procedure. This partition has the same size as the primary partition and is located immediately after it in the external memory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf70_fw_patch_update.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nmcuboot_secondary_2:\n    address: 0x150000\n    size: 0x21000\n    device: MX25R64\n    region: external_flash\n```\n\n----------------------------------------\n\nTITLE: Retrieving nRF Connect SDK v2.4.2 Specific Commits\nDESCRIPTION: Git command to list all nRF Connect SDK specific commits and cherry-picked commits since v2.4.0 in the Zephyr fork.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.4.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v3.3.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: Implementing Sensor Data Access Callback in Bluetooth Mesh\nDESCRIPTION: Example of a sensor getter callback implementation that accesses the correct format for encoding sensor response data. This function is called when the sensor data is requested by the mesh network.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/sensor.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic int get_cb(struct bt_mesh_sensor *sensor,\n                  struct bt_mesh_msg_ctx *ctx,\n                  struct bt_mesh_sensor_value *rsp)\n{\n    /* Get the correct format to use for encoding rsp[0]: */\n    const struct_bt_mesh_sensor_format *channel_0_format =\n        sensor->type->channels[0].format;\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Event Manager Proxy Sample to Device\nDESCRIPTION: Command to program both the cores of the development kit with the built application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Console Output for Client Connection to SoftAP\nDESCRIPTION: Console log showing a client connecting to the device's SoftAP network, which is a necessary step before Wi-Fi credentials can be provisioned.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/provisioning/softap/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n[00:01:18.940,307] <dbg> softap_wifi_provision: net_mgmt_wifi_event_handler: NET_EVENT_WIFI_AP_STA_CONNECTED\n[00:01:18.950,469] <dbg> softap_wifi_provision: print_mac: Client STA connected, MAC: 04:00:91:9E:31:EA\n[00:01:18.960,174] <inf> softap_wifi_provision_sample: Client connected\n```\n\n----------------------------------------\n\nTITLE: Adding Event Source Files to NRF SDK Application Build\nDESCRIPTION: This CMake snippet adds multiple .c files as source files to the application build. Each line specifies a different event-related source file to be included in the compilation process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/app_event_manager/src/events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/data_event.c)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/multicontext_event.c)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/name_style_events.c)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/order_event.c)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sized_events.c)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_events.c)\n```\n\n----------------------------------------\n\nTITLE: Get All xyL Client Instances\nDESCRIPTION: This shell command prints all instances of the Light xyL Client model that exist on the device. It provides a way to discover and list all available Light xyL Client models in the mesh network.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl instance get-all\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Cache for Image\nDESCRIPTION: This CMake function configures the cache for a given image by setting variables in the CMakeCache if they have changed. Dependencies include a binary directory and the function updates only variables formatted as '@VAR_NAME@'. Parameter 'IMAGE' is required and denotes the targeted cache.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(configure_cache)\n  set(single_args IMAGE)\n  cmake_parse_arguments(CONFIGURE_CACHE \"\" \"${single_args}\" \"\" ${ARGN})\n\n  zephyr_check_arguments_required(configure_cache CONFIGURE_CACHE IMAGE)\n\n  ExternalProject_Get_Property(${CONFIGURE_CACHE_IMAGE} BINARY_DIR)\n\n  zephyr_file_copy(\"${BINARY_DIR}/CMakeCache.txt\" \"${BINARY_DIR}/CMakeCache.tmp\" ONLY_IF_DIFFERENT)\n  configure_file(\"${BINARY_DIR}/CMakeCache.tmp\" \"${BINARY_DIR}/CMakeCache.txt.tmp\" @ONLY)\n  zephyr_file_copy(\"${BINARY_DIR}/CMakeCache.txt.tmp\" \"${BINARY_DIR}/CMakeCache.txt\" ONLY_IF_DIFFERENT)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Bluetooth LLPM Console Output - Peripheral Device\nDESCRIPTION: Console output showing boot sequence, Bluetooth initialization, connection establishment and latency measurements for a peripheral device. Includes SoftDevice controller info, connection parameters, and transmission latency statistics.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/llpm/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n*** Booting Zephyr OS build v3.3.99-ncs1-2858-gc9d01d05ce83 ***\nStarting Bluetooth LLPM sample\nI: SoftDevice Controller build revision:\nI: 01 2d a8 d4 0d e5 25 cf |.-....%.\nI: a3 48 8d 2f 56 e0 59 c8 |.H./V.Y.\nI: 24 df 3d 58             |$.=X\nI: HW Platform: Nordic Semiconductor (0x0002)\nI: HW Variant: nRF52x (0x0002)\nI: Firmware: Standard Bluetooth controller (0x00) Version 1.43053 Build 635768276\nI: Identity: C3:06:3D:25:7F:73 (random)\nI: HCI: version 5.4 (0x0d) revision 0x10b7, manufacturer 0x0059\nI: LMP: version 5.4 (0x0d) subver 0x10b7\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Key Library Build\nDESCRIPTION: Configures the Zephyr library build settings for identity key management, including source files and conditional warning messages for dummy key usage in development environments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/identity_key/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(identity_key.c)\n\nif (CONFIG_IDENTITY_KEY_DUMMY)\n  message(WARNING \"\n      ----------------------------------------------------------\n      --- WARNING: A dummy identity key will be written to   ---\n      --- the KMU. DO NOT USE THIS KEY IN PRODUCTION!        ---\n      ----------------------------------------------------------\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Selecting Thread Radio Channel\nDESCRIPTION: Selects channel 11 (lowest channel) for Thread radio transmission. The command can be modified to select channel 18 (mid channel) or channel 26 (high channel) as needed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/thread_radio_testing.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstart_channel 11\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Nordic SDK Machine Learning Application\nDESCRIPTION: Sets up a CMake project for a machine learning application using the Nordic SDK. Configures build requirements, source files, and include directories for the application. Requires CMake 3.20.0 or higher and the Zephyr RTOS framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\n################################################################################\n\n# The application uses the configuration/<board> scheme for configuration files.\nset(APPLICATION_CONFIG_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/configuration/\\${NORMALIZED_BOARD_TARGET}\")\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Machine learning\"\n        VERSION 0.1)\n\n################################################################################\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n\n# Include application events and configuration headers\ntarget_include_directories(app PRIVATE\n  src/events\n  src/util\n)\n\nzephyr_include_directories(\n  configuration/common\n  ${APPLICATION_CONFIG_DIR}\n)\n\n# Application sources\nadd_subdirectory(common/src/modules)\nadd_subdirectory(src/events)\nadd_subdirectory(src/modules)\nadd_subdirectory(src/util)\n```\n\n----------------------------------------\n\nTITLE: Delete All Stored Wi-Fi Credentials - C\nDESCRIPTION: This snippet refers to the function `wifi_credentials_delete_all`, which allows you to delete all stored Wi-Fi credentials. It is used to clear the storage of Wi-Fi credentials.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Creating Main Build Target for All Documentation in CMake\nDESCRIPTION: Defines the main 'build-all' target that includes all documentation sets and custom targets, representing the complete documentation build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(build-all ALL)\nadd_dependencies(build-all\n    copy-extra-content\n    merge-search-indexes\n    nrf-all\n    nrfx\n    nrfxlib-all\n    zephyr-all\n    mcuboot-all\n    tfm-all\n    matter-all\n    kconfig-all\n    wifi\n)\nif (EXISTS \"${ZEPHYR_DOC_INTERNAL_MODULE_DIR}\" )\n  add_dependencies(build-all internal-all)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking SUIT Platform Libraries\nDESCRIPTION: Links various libraries related to the SUIT platform, ensuring all necessary components are included during the build process. Some libraries are linked conditionally based on configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(suit)\nzephyr_library_link_libraries(suit_platform_err)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_platform_interface)\nzephyr_library_link_libraries(suit_memory_layout_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STREAM suit_stream_sinks_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STREAM suit_stream_sources_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_MEMPTR_STORAGE suit_memptr_storage_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_SINK_SELECTOR suit_sink_selector_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STREAM_FILTER_DECRYPT suit_stream_filters_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STREAM_FILTER_DECOMPRESS suit_stream_filters_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_MANIFEST_VARIABLES suit_manifest_variables)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_IPUC suit_ipuc)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STORAGE suit_storage_interface)\n```\n\n----------------------------------------\n\nTITLE: NVS Settings Usage Configuration - Parsed-literal\nDESCRIPTION: This parsed-literal snippet configures Kconfig options to facilitate non-volatile storage (NVS) settings usage measurement in Matter applications. Key options include enabling minimal shell and NVS settings support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_5\n\nLANGUAGE: parsed-literal\nCODE:\n```\nCONFIG_SHELL=y\nCONFIG_NCS_SAMPLE_MATTER_SETTINGS_SHELL=y\nCONFIG_SHELL_MINIMAL=n\nCONFIG_SETTINGS_SHELL=y\n```\n\n----------------------------------------\n\nTITLE: Write to TWI Device Command Format\nDESCRIPTION: AT command format for writing data to a TWI peripheral device. Includes index, device address and data parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TWI_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XTWIW=<index>,<dev_addr>,<data>\n```\n\n----------------------------------------\n\nTITLE: Setting Property Value of Light Control Server Unacknowledged - C\nDESCRIPTION: Sets a specified property value for the Light Lightness Control Server without requesting a response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl prop-set-unack <ID> <Val>\n\tSet a property value of the Light Lightness Control Server without requesting a response.\n\n\t* ``ID`` - ID of the property to set. See :c:enum:`bt_mesh_light_ctrl_prop` for a list of supported properties.\n\t* ``Val`` - The new value of the property.\n```\n\n----------------------------------------\n\nTITLE: Extracting Git Version for Azure FOTA\nDESCRIPTION: Uses Git to extract version information if AZURE_FOTA_APP_VERSION is not defined. It runs 'git describe' command and handles any potential errors.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/azure_fota/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Git QUIET)\nif(NOT AZURE_FOTA_APP_VERSION AND GIT_FOUND)\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} describe\n    WORKING_DIRECTORY                ${ZEPHYR_NRF_MODULE_DIR}\n    OUTPUT_VARIABLE                  AZURE_FOTA_APP_VERSION\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    ERROR_STRIP_TRAILING_WHITESPACE\n    ERROR_VARIABLE                   stderr\n    RESULT_VARIABLE                  return_code\n  )\n  if(return_code)\n    message(STATUS \"git describe failed: ${stderr};\n    AZURE_FOTA_APP_VERSION is left undefined\")\n  elseif(CMAKE_VERBOSE_MAKEFILE)\n    message(STATUS \"git describe stderr: ${stderr}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: UDP Server Read Command Response Syntax\nDESCRIPTION: Response syntax for the UDP server read command showing handle and IP family.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_7\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPSVR: <handle>,<family>\n```\n\n----------------------------------------\n\nTITLE: Replacing Download Client with Downloader Initialization\nDESCRIPTION: Code showing how to initialize the new Downloader library, replacing the deprecated Download Client initialization code. Includes buffer setup and configuration structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_3.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nstatic struct downloader dl;\nstatic int callback(const struct downloader_evt *event);\nstatic char dl_buf[2048]; /* Use buffer size set by CONFIG_DOWNLOAD_CLIENT_BUF_SIZE previously */\nstatic struct downloader_cfg dl_cfg = {\n   .callback = callback,\n   .buf = dl_buf,\n   .buf_size = sizeof(dl_buf),\n};\n\ndownloader_init(&dl, &dl_cfg);\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional GPIO Controls for nRF21540 FEM\nDESCRIPTION: Devicetree properties for controlling additional GPIO pins of the nRF21540 FEM, including antenna selection and mode control.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nRF21540_optional_properties.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\nant-sel-gpios = <&gpio0 10 GPIO_ACTIVE_HIGH>;\nmode-gpios = <&gpio0 11 GPIO_ACTIVE_HIGH>;\n```\n\n----------------------------------------\n\nTITLE: Listing Available TWI Interfaces\nDESCRIPTION: Uses the AT#XTWILS command to list available TWI interfaces. The response indicates that TWI2 is available for sensor communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_44\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XTWILS\n#XTWILS: 2\nOK\n```\n\n----------------------------------------\n\nTITLE: Reading Enable Key from Factory Data in Matter (C++)\nDESCRIPTION: This snippet demonstrates how to read the enable key from the factory data and set it for the TestEventTrigger instance. It initializes the factory data provider, prepares a buffer for the enable key, loads the key value from the factory data, and then calls the SetEnableKey method to load the value into the TestEventTrigger class. This is necessary for secure operation and unique device identification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/test_event_triggers.rst#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n/* Prepare the factory data provider */\nstatic chip::DeviceLayer::FactoryDataProvider<chip::DeviceLayer::InternalFlashFactoryData> sFactoryDataProvider;\nsFactoryDataProvider.Init();\n\n/* Prepare the buffer for enable key data */\nuint8_t enableKeyData[chip::TestEventTriggerDelegate::kEnableKeyLength] = {};\nMutableByteSpan enableKey(enableKeyData);\n\n/* Load the enable key value from the factory data */\nsFactoryDataProvider.GetEnableKey(enableKey);\n\n/* Call SetEnableKey method to load the read value to the TestEventTrigger class. */\nNrf::Matter::TestEventTrigger::Instance().SetEnableKey(enableKey);\n```\n\n----------------------------------------\n\nTITLE: Enabling Wi-Fi Power Save Mode in NRF Connect SDK\nDESCRIPTION: Configuration option to enable low power mode for Wi-Fi devices using Kconfig. This setting allows the Station (STA) device to spend most of its time in a sleep state and periodically wake up to check for pending traffic.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/optimizing/power_general.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NRF_WIFI_LOW_POWER = y\n```\n\n----------------------------------------\n\nTITLE: Stopping the Broadcaster with Shell Command\nDESCRIPTION: Command to stop the broadcaster. An optional BIG_index parameter can be specified to stop a specific Broadcast Isochronous Group.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnac stop [BIG_index]\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Zephyr Library\nDESCRIPTION: CMake configuration that adds source files dm_rpc_common.c and serialize.c to a Zephyr library build. These files appear to handle DM RPC common functionality and serialization operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dm/rpc/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(\n  dm_rpc_common.c\n  serialize.c\n)\n```\n\n----------------------------------------\n\nTITLE: Building Single-Core RPMsg Sending Tests for nRF5340\nDESCRIPTION: Console commands to build the sample for testing one-way RPMsg communication on nRF5340 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/ipc/ipc_service/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf5340dk/nrf5340/cpuapp -T sample.ipc.ipc_service.nrf5340dk_rpmsg_cpuapp_sending .\nwest build -p -b nrf5340dk/nrf5340/cpuapp -T sample.ipc.ipc_service.nrf5340dk_rpmsg_cpunet_sending .\n```\n\n----------------------------------------\n\nTITLE: Sample Partition Layout for MCUboot on nRF52840dk\nDESCRIPTION: Example output showing the partition layout for a basic application using MCUboot on the nRF52840dk board. It displays the memory allocation for mcuboot, primary slot, and secondary slot, including their respective addresses and sizes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_partitioning.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n(0x100000 - 1024.0kB):\n+-----------------------------------------+\n| 0x0: mcuboot (0xc000)                   |\n+---0xc000: mcuboot_primary (0x7a000)-----+\n| 0xc000: mcuboot_pad (0x200)             |\n+---0xc200: mcuboot_primary_app (0x79e00)-+\n| 0xc200: app (0x79e00)                   |\n| 0x86000: mcuboot_secondary (0x7a000)    |\n+-----------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Listing Images on a Device\nDESCRIPTION: Command to list available images on a device using the MCUmgr CLI.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nmcumgr <connection-options> image list\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to a Channel - C\nDESCRIPTION: This snippet shows how to publish a message to the 'PAYLOAD_CHAN' channel using the zbus_chan_pub function. It handles potential errors encountered during the publishing process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/doc/architecture.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n    int err;\\n    struct payload payload = \"Some payload\";\\n\\n    err = zbus_chan_pub(&PAYLOAD_CHAN, &payload, K_SECONDS(1));\\n    if (err) {\\n    \\tLOG_ERR(\"zbus_chan_pub, error: %d\", err);\\n    }\n```\n\n----------------------------------------\n\nTITLE: Building IPC Service Sample for nRF54H20\nDESCRIPTION: Console command to build the sample using the default ICBMSG backend for nRF54H20 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/ipc/ipc_service/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Payload Fetch for Application Core\nDESCRIPTION: YAML configuration for suit-payload-fetch sequence that handles application binary fetching with component index 2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_external_memory.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsuit-payload-fetch:\n- suit-directive-set-component-index: 2\n- suit-directive-override-parameters:\n    suit-parameter-uri: 'file://{{ app[\\'binary\\'] }}'\n- suit-directive-fetch:\n  - suit-send-record-failure\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Modem Trace Backend in C\nDESCRIPTION: Implementation template for a custom modem trace backend, showing required functions that must be implemented to conform to the trace_backend.h interface. The implementation includes initialization, writing data, reading stored data, and other optional functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_trace.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* my_trace_backend.c */\n\n#include <modem/trace_backend.h>\n\nint trace_backend_init(void)\n{\n     /* initialize transport backend here */\n     return 0;\n}\n\nint trace_backend_deinit(void)\n{\n     /* optional deinitialization code here */\n     return 0;\n}\n\nint trace_backend_write(const void *data, size_t len)\n{\n     /* forward or store trace data here */\n     /* return the number of bytes written or stored, or a negative error code on failure */\n     return 0;\n}\n\nsize_t trace_backend_data_size(void)\n{\n   /* If trace data is stored when calling `trace_backend_write()`\n    * this function returns the size of the stored trace data.\n    *\n    * If not applicable for the trace backend, set to NULL in the `trace_backend` struct.\n    */\n}\n\nint trace_backend_read(uint8_t *buf, size_t len)\n{\n   /* If trace data is stored when calling `trace_backend_write()`\n    * this function allows the application to read back the trace data.\n    *\n    * If not applicable for the trace backend, set to NULL in the `trace_backend` struct.\n    */\n}\n\nint trace_backend_clear(void)\n{\n   /* This function allows the backend to clear all stored traces in the backend. For instance\n    * this can be erasing a flash partition to prepare for writing new data.\n    *\n    * If not applicable for the trace backend, set to NULL in the `trace_backend` struct.\n    */\n}\n\nint trace_backend_suspend(void)\n{\n   /* This function allows the trace module to suspend the trace backend. When suspended,\n    * the backend cannot be used by the trace module until it is resumed by calling\n    * `trace_backend_resume()`.\n    *\n    * If not applicable for the trace backend, set to NULL in the `trace_backend` struct.\n    */\n}\n\nint trace_backend_resume(void)\n{\n   /* This function allows the trace module to resume the trace backend after it is suspended.\n    *\n    * If not applicable for the trace backend, set to NULL in the `trace_backend` struct.\n    */\n}\n\nstruct nrf_modem_lib_trace_backend trace_backend = {\n   .init = trace_backend_init,\n   .deinit = trace_backend_deinit,\n   .write = trace_backend_write,\n   .data_size = trace_backend_data_size, /* Set to NULL if not applicable. */\n   .read = trace_backend_read, /* Set to NULL if not applicable. */\n   .clear = trace_backend_clear, /* Set to NULL if not applicable. */\n   .suspend = trace_backend_suspend, /* Set to NULL if not applicable. */\n   .resume = trace_backend_resume, /* Set to NULL if not applicable. */\n};\n```\n\n----------------------------------------\n\nTITLE: C++ Header Removals for Matter App Task\nDESCRIPTION: Legacy code that needs to be removed from app_task.h when migrating to the new board module in Matter samples.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"app_event.h\"\n#include \"led_widget.h\"\n\nstatic void PostEvent(const AppEvent &event);\nvoid CancelTimer();\nvoid StartTimer(uint32_t timeoutInMs);\n\nstatic void DispatchEvent(const AppEvent &event);\nstatic void UpdateLedStateEventHandler(const AppEvent &event);\nstatic void FunctionHandler(const AppEvent &event);\nstatic void FunctionTimerEventHandler(const AppEvent &event);\nstatic void ButtonEventHandler(uint32_t buttonState, uint32_t hasChanged);\nstatic void LEDStateUpdateHandler(LEDWidget &ledWidget);\nstatic void FunctionTimerTimeoutCallback(k_timer *timer);\nstatic void UpdateStatusLED();\n\nFunctionEvent mFunction = FunctionEvent::NoneSelected;\nbool mFunctionTimerActive = false;\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure CLI\nDESCRIPTION: Authenticates the Azure CLI tool to use your Azure account in the default browser.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Buttons in Devicetree for DK Library\nDESCRIPTION: Example devicetree configuration showing different ways to define buttons for use with the DK Buttons and LEDs library. Demonstrates configuring up to four buttons with various GPIO configurations including pull-up/down resistors and active states.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/dk_buttons_and_leds.rst#2025-04-21_snippet_0\n\nLANGUAGE: DTS\nCODE:\n```\n/ {\n        buttons {\n                compatible = \"gpio-keys\";\n                /*\n                 * Add up to 4 total buttons in child nodes as shown here.\n                 */\n                button0: button_0 {\n                        /* Button 0 on P0.11. Enable internal SoC pull-up\n                         * resistor and treat low level as pressed button. */\n                        gpios = <&gpio0 11 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;\n                        label = \"Button 0\";\n                };\n                button1: button_1 {\n                        /* Button 1 on P0.12. Enable internal pull-down resistor.\n                         * Treat high level as pressed button. */\n                        gpios = <&gpio0 12 (GPIO_PULL_DOWN | GPIO_ACTIVE_HIGH)>;\n                        label = \"Button 1\";\n                };\n                button2: button_2 {\n                        /* Button 2 on P1.12, enable internal pull-up,\n                         * low level is pressed. */\n                        gpios = <&gpio1 12 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;\n                        label = \"Button 2\";\n                };\n                button3: button_3 {\n                        /* Button 3 on P1.15, no internal pull resistor,\n                         * low is pressed. */\n                        gpios = <&gpio1 15 GPIO_ACTIVE_LOW>;\n                        label = \"Button 3\";\n                };\n        };\n};\n```\n\n----------------------------------------\n\nTITLE: Observing Clock Synchronization in Terminal (kconfig)\nDESCRIPTION: This snippet shows the terminal output confirming clock synchronization between the Android device and the development kit after FMDN provisioning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: kconfig\nCODE:\n```\nFMDN: clock information synchronized with the authenticated Bluetooth peer\n```\n\n----------------------------------------\n\nTITLE: Sample UART Output: LZMA2 Only Compression\nDESCRIPTION: Console output showing a firmware update compressed using LZMA2 without additional filtering, offering a good but not optimal compression ratio.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_compress/mcuboot_update/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nSecondary slot image is LZMA2 compressed\n```\n\n----------------------------------------\n\nTITLE: HTTPS GET request (TLS with server and client auth, Cellular)\nDESCRIPTION: Sends an HTTPS GET request to retrieve the state of LED 1 using TLS with both server and client authentication for cellular networks. It includes `--verify`, `--cert`, and `--cert-key` flags to specify the server certificate, client certificate, and client key respectively.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n\"https GET https://<ip>:443/led/1 --verify server_certificate.pem --cert client.crt --cert-key client.key\"\n```\n\n----------------------------------------\n\nTITLE: Setting TF-M Merged Hex File Path in CMake\nDESCRIPTION: Defines the output path for the signed and merged TF-M and Zephyr binary. This specifies where the final hex file will be generated after the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\nset(BYPRODUCT_KERNEL_SIGNED_HEX_NAME \"${CMAKE_BINARY_DIR}/zephyr/tfm_merged.hex\"\n    CACHE FILEPATH \"Kernel hex file\" FORCE\n)\n```\n\n----------------------------------------\n\nTITLE: DUT Device Find Command\nDESCRIPTION: Command used to find and establish communication with a DUT (Device Under Test) device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_58\n\nLANGUAGE: plaintext\nCODE:\n```\ncustom find\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for Custom QSPI Settings\nDESCRIPTION: CMake setup for using custom QSPI configuration when flashing Thingy:53.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/qspi_xip_guide_nrf5340.rst#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nmacro(app_set_runner_args)\n  if(CONFIG_BOARD_THINGY53_NRF5340_CPUAPP)\n    # Use alternative QSPI configuration file when flashing Thingy53\n```\n\n----------------------------------------\n\nTITLE: TCP Client Script in Python\nDESCRIPTION: This Python script acts as a TCP client, connecting to a specified IP address and port, sending multiple messages, and receiving responses.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nimport socket\nimport time\n\nhost_addr = '000.000.000.00'\nhost_port = 1234\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((host_addr, host_port))\ntime.sleep(1)\nprint(\"Sending: 'Hello, TCP#1!\")\ns.send(b\"Hello, TCP#1!\")\ntime.sleep(1)\nprint(\"Sending: 'Hello, TCP#2!\")\ns.send(b\"Hello, TCP#2!\")\ndata = s.recv(1024)\nprint(data)\n\ntime.sleep(1)\nprint(\"Sending: 'Hello, TCP#3!\")\ns.send(b\"Hello, TCP#3!\")\ntime.sleep(1)\nprint(\"Sending: 'Hello, TCP#4!\")\ns.send(b\"Hello, TCP#4!\")\ntime.sleep(1)\nprint(\"Sending: 'Hello, TCP#5!\")\ns.send(b\"Hello, TCP#5!\")\ntime.sleep(1)\ndata = s.recv(1024)\nprint(data)\n\nprint(\"Closing connection\")\ns.close()\n```\n\n----------------------------------------\n\nTITLE: Defining toctree in reStructuredText for NCS Documentation\nDESCRIPTION: This snippet defines a table of contents (toctree) for the NCS documentation subpages. It specifies the maximum depth, caption, and lists the included subpages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Subpages:\n\n   documentation/structure\n   documentation/doc_build_process\n   documentation/build\n   documentation/styleguide\n   documentation/templates\n```\n\n----------------------------------------\n\nTITLE: Setting Presentation Delay - Shell Command\nDESCRIPTION: Shell command for setting the presentation delay in microseconds for a Bluetooth LE Audio broadcast subgroup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_25\n\nLANGUAGE: console\nCODE:\n```\nnac pd 40000 0 0\n```\n\n----------------------------------------\n\nTITLE: Adding Bluetooth LE Bridged Device\nDESCRIPTION: CLI command to add a specific Bluetooth LE device from the scan results by its index\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/matter_bridge_testing.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmatter_bridge add 1\n```\n\n----------------------------------------\n\nTITLE: Erasing Flash IPUC in C\nDESCRIPTION: Employs the flash_erase API to erase a part or the whole IPUC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nflash_erase()\n```\n\n----------------------------------------\n\nTITLE: Referencing API Documentation Files in reStructuredText\nDESCRIPTION: Provides file paths for the header and source files of the GATT Throughput Service API. This information is crucial for developers who want to implement or use the service in their projects.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/throughput.rst#2025-04-21_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n| Header file: :file:`include/bluetooth/services/throughput.h`\n| Source file: :file:`subsys/bluetooth/services/throughput.c`\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Finds the Zephyr package necessary for the project. It uses an environment variable to locate the base path of Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_spim/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Adding Zephyr Library Sources\nDESCRIPTION: Specifies the source files to be included in the Zephyr library. This line tells the Zephyr build system to compile `src/main.c` and link it into the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/netboot/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library_sources(src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Library in CMake for nRF Connect SDK\nDESCRIPTION: Sets up a custom UI library named 'app_ui' for an nRF Connect SDK project. It configures include directories, adds common source files, and includes platform-specific implementations based on the selected platform (DK or Thingy). Also adds a custom linker section.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/src/ui/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_named(app_ui)\n\ntarget_include_directories(app_ui PUBLIC include)\ntarget_include_directories(app_ui PRIVATE include_priv)\n\ntarget_sources(app_ui PRIVATE common.c)\n\nif(CONFIG_APP_PLATFORM_DK)\n  target_sources(app_ui PRIVATE platform_dk.c)\nelseif(CONFIG_APP_PLATFORM_THINGY)\n  target_sources(app_ui PRIVATE\n    platform_thingy.c\n    platform_thingy_speaker.c\n  )\nelse()\n  message(FATAL_ERROR \"Unsupported platform\")\nendif()\n\nzephyr_linker_sources(DATA_SECTIONS request_listener.ld)\n```\n\n----------------------------------------\n\nTITLE: Including Header File in CMake\nDESCRIPTION: This snippet configures the CMake build system to include the header file 'message_channel.h' for the application. It ensures that the directory containing the file is part of the include path for the compiler to find the necessary definitions during the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Configuring CAF Components with CMake\nDESCRIPTION: Checks if CAF (Common Application Framework) is enabled via CONFIG_CAF and conditionally adds subdirectories for events and modules. This is part of the Nordic SDK's build system configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/caf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_CAF)\n        add_subdirectory(events)\n        add_subdirectory(modules)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling NDEF Read Completion in C\nDESCRIPTION: Informs the library about completion of the NDEF read procedure using nfc_tnep_poller_on_ndef_read. This is used after asynchronous read operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/poller.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nnfc_tnep_poller_on_ndef_read(ndef_msg);\n```\n\n----------------------------------------\n\nTITLE: Installing Platform Configuration Files\nDESCRIPTION: Uses CMake install() commands to copy platform-specific configuration and architecture files to designated installation directories\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf9160/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES       ${CMAKE_CURRENT_LIST_DIR}/ns/cpuarch_ns.cmake\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR}\n        RENAME      cpuarch.cmake)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES       ${Trusted\\ Firmware\\ M_SOURCE_DIR}/platform/ext/target/nordic_nrf/common/nrf9160/cpuarch.cmake\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR}/common/nrf9160)\n```\n\n----------------------------------------\n\nTITLE: Referencing Click Enum in C\nDESCRIPTION: C enum reference for the click types used in configuring bond erasure. This enum defines different click types like short, long, and double clicks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_bond.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nenum click {\n    CLICK_SHORT,\n    CLICK_LONG,\n    CLICK_DOUBLE\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the CMake project\nDESCRIPTION: Defines the CMake project with the name 'NONE'. This is a placeholder project name, likely intended to be overridden or configured by a higher-level build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/writable_ndef_msg/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(NONE)\"\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth Latency Client Source\nDESCRIPTION: This snippet includes the latency client source file when CONFIG_BT_LATENCY_CLIENT is defined. It allows clients to manage and monitor latency in Bluetooth operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_LATENCY_CLIENT latency_client.c)\n```\n\n----------------------------------------\n\nTITLE: Building with Coexistence Disabled\nDESCRIPTION: Command to build the sample with coexistence functionality disabled, suitable for Wi-Fi only, Thread only, or concurrent testing without coexistence.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/thread_coex/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_MPSL_CX=n -Dipc_radio_CONFIG_MPSL_CX=n\n```\n\n----------------------------------------\n\nTITLE: Including Wi-Fi Mode API Header File for nRF70 Series Wi-Fi Driver\nDESCRIPTION: This snippet shows the header file inclusion for the Wi-Fi mode API of the nRF70 Series Wi-Fi driver. The Wi-Fi mode API is used for normal operation of the nRF70 Series device in STA mode and other future supported modes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/wifi/low_level_api.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include \"nrf_wifi/fw_if/umac_if/inc/default/fmac_api.h\"\n```\n\n----------------------------------------\n\nTITLE: Configuration Option: BT_CTLR_TX_PWR\nDESCRIPTION: This snippet describes an issue where the `BT_CTLR_TX_PWR` Kconfig option is ignored by the SoftDevice Controller. As a workaround, it suggests using the HCI command Zephyr Write Tx Power Level to dynamically set the TX power.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_57\n\nLANGUAGE: none\nCODE:\n```\n\nDRGN-15903: :kconfig:option:`BT_CTLR_TX_PWR` is ignored by the SoftDevice Controller\n  Using :kconfig:option:`BT_CTLR_TX_PWR` does not set TX power.\n\n  **Workaround:** Use the HCI command Zephyr Write Tx Power Level to dynamically set TX power.\n\n```\n\n----------------------------------------\n\nTITLE: Adding YAML Build Configuration for Sysbuild - YAML\nDESCRIPTION: This YAML configuration snippet specifies the build settings for a Zephyr module when integrating images. It declares necessary Kconfig and CMakeLists references for sysbuild integration. The key parameters include 'sysbuild-cmake' which defines the CMakeLists.txt file, and 'sysbuild-kconfig' which points to the Kconfig file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/sysbuild_images.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"build:\\n  sysbuild-cmake: sysbuild  # Only needed if a sysbuild CMakeLists.txt file is being added\\n  sysbuild-kconfig: sysbuild/Kconfig.sysbuild\"\n```\n\n----------------------------------------\n\nTITLE: Defining GATT Throughput Service UUID in reStructuredText\nDESCRIPTION: Specifies the 128-bit UUID for the custom GATT Throughput Service. This UUID is used to uniquely identify the service in Bluetooth communications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/throughput.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nThe 128-bit service UUID is ``0483DADD-6C9D-6CA9-5D41-03AD4FFF4ABB``.\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: This command defines the name of the CMake project as 'remote'. This name is used by CMake for various tasks, such as generating build files and setting up the build environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/multicore_system_off/remote/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(remote)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for bt_nus_shell.py\nDESCRIPTION: This command installs the necessary Python dependencies for the bt_nus_shell.py script. It uses pip, the Python package installer, to install packages listed in the requirements.txt file. The --user flag installs the packages in the user's home directory, avoiding potential permission issues.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/shell/shell_bt_nus.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install --user -r scripts/shell/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Adding Core Source Files for Matter Bridge\nDESCRIPTION: Adds the core source files for the Matter Bridge application, including application task, main function, shell interface, ZCL callbacks, and common bridge functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n    src/app_task.cpp\n    src/main.cpp\n    src/bridge_shell.cpp\n    src/zcl_callbacks.cpp\n    ${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/src/bridge/bridge_manager.cpp\n    ${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/src/bridge/matter_bridged_device.cpp\n    ${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/src/bridge/bridge_storage_manager.cpp\n    ${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/src/bridge/bridged_device_data_provider.cpp\n    ${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/src/bridge/binding/binding_handler.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Image Upload Request in SUIT SMP Protocol\nDESCRIPTION: Defines the CBOR request format for uploading a SUIT envelope to the DFU partition or DFU cache partition. This structure includes fields for specifying the target image, length, offset, and the actual binary data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_1\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str,opt)\"image\"    : (uint)     //SUIT - 0 - DFU partition, 1 to n - DFU cache partition 0 to n-1.\n    (str,opt)\"len\"      : (uint)\n    (str)\"off\"          : (uint)\n    (str,opt)\"data\"     : (byte str)\n}\n```\n\n----------------------------------------\n\nTITLE: OTA Client MinimumBlockPeriod Configuration\nDESCRIPTION: Code to restore default MinimumBlockPeriod attribute value in OTA Client implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n/* Variable that store new value for MinimumBlockPeriod attribute. */\nzb_uint16_t minimum_block_period_new_value = NEW_VALUE;\n/* Set attribute value. */\nzb_uint8_t status = zb_zcl_set_attr_val(\n        CONFIG_ZIGBEE_FOTA_ENDPOINT,\n        ZB_ZCL_CLUSTER_ID_OTA_UPGRADE,\n        ZB_ZCL_CLUSTER_CLIENT_ROLE,\n        ZB_ZCL_ATTR_OTA_UPGRADE_MIN_BLOCK_REQUE_ID,\n        (zb_uint8_t*)&minimum_block_period_new_value,\n        ZB_FALSE);\n/* Check if new value was set correctly. */\nif (status != ZB_ZCL_STATUS_SUCCESS) {\n        LOG_ERR(\"Failed to update Minimum Block Period attribute\");\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping RX Test Mode\nDESCRIPTION: Command to stop the Wi-Fi radio from receiving packets, which should be executed after the signal generator has completed transmitting packets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test rx 0\n```\n\n----------------------------------------\n\nTITLE: Generating Include Files from PEM Files - CMake\nDESCRIPTION: This series of commands generates header files from various PEM certificate files if they exist. It sets up include directories for the generated files, allowing the application to reference them during compilation for secure connections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/modules/transport/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_MODEM_KEY_MGMT)\n\tset(gen_dir ${CMAKE_CURRENT_BINARY_DIR}/certs)\n\tzephyr_include_directories(${gen_dir})\n\tif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/credentials/ca-cert.pem)\n\t\tgenerate_inc_file_for_target(app credentials/ca-cert.pem ${gen_dir}/ca-cert.pem)\n\tendif()\n\tif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/credentials/client-cert.pem)\n\t\tgenerate_inc_file_for_target(app credentials/client-cert.pem ${gen_dir}/client-cert.pem)\n\tendif()\n\tif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/credentials/private-key.pem)\n\t\tgenerate_inc_file_for_target(app credentials/private-key.pem ${gen_dir}/private-key.pem)\n\tendif()\n\tif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/credentials/ca-cert-2.pem)\n\t\tgenerate_inc_file_for_target(app credentials/ca-cert-2.pem ${gen_dir}/ca-cert-2.pem)\n\tendif()\n\tif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/credentials/client-cert-2.pem)\n\t\tgenerate_inc_file_for_target(app credentials/client-cert-2.pem ${gen_dir}/client-cert-2.pem)\n\tendif()\n\tif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/credentials/private-key-2.pem)\n\t\tgenerate_inc_file_for_target(app credentials/private-key-2.pem ${gen_dir}/private-key-2.pem)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Timeout Configuration for DULT Ringing Sources\nDESCRIPTION: Kconfig options for configuring timeout values for different DULT ringing sources in Fast Pair FMDN implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_14\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_FAST_PAIR_FMDN_RING_REQ_TIMEOUT_DULT_BT_GATT\nCONFIG_BT_FAST_PAIR_FMDN_RING_REQ_TIMEOUT_DULT_MOTION_DETECTOR\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Flash Patch\nDESCRIPTION: This line adds the 'flash_patch' directory as a subdirectory to the current CMake project. This step ensures that the CMakeLists.txt file located within the 'flash_patch' directory is processed, integrating any specified build rules or configurations into the main build process.  'flash_patch' probably contains logic for updating the flash memory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(flash_patch)\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Replacements in RST\nDESCRIPTION: Demonstrates how to define and use text replacements in RST documents for reusing content either on a single page or across multiple pages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/styleguide.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |tag| replace:: replacement\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Source Files for Location Service in CMake\nDESCRIPTION: Sets up include directories and adds source files to the 'app' target. Conditionally includes additional source files based on configuration options for location data details and external location services.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/location/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/location_shell.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/location_cmd_utils.c)\ntarget_sources_ifdef(CONFIG_LOCATION_DATA_DETAILS app PRIVATE location_details.c)\n\nif(CONFIG_LOCATION_SERVICE_EXTERNAL)\n\ttarget_sources_ifdef(CONFIG_MOSH_CLOUD_MQTT app PRIVATE\n\t\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/location_srv_ext_nrf_cloud.c)\n\ttarget_sources_ifdef(CONFIG_MOSH_CLOUD_LWM2M app PRIVATE\n\t\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/location_srv_ext_lwm2m.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding UART Shell Source to CMake Application Target\nDESCRIPTION: Adds the uart_shell.c source file from the current directory to the 'app' target, ensuring it's compiled and linked into the final application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/uart/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/uart_shell.c)\n```\n\n----------------------------------------\n\nTITLE: Building with LPN Configuration\nDESCRIPTION: The command builds the light switch sample with the LPN feature enabled by setting the EXTRA_CONF_FILE to overlay-lpn.conf, designed to minimize power consumption. Prerequisites include installed nRF Connect SDK and setting target development kit. This builds the sample suitable for devices ensuring low power operations in mesh networks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/light_switch/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b *board_target* -p -- -DEXTRA_CONF_FILE=\\\"overlay-lpn.conf\\\"\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Queue Mode Operation\nDESCRIPTION: AT command to configure whether the library should inform the server about potential extended disconnection periods. Uses 0 to disable or 1 to enable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_14\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"queue_mode\"[,<0|1>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11g PER Measurement (Receiver)\nDESCRIPTION: Commands to initialize the Wi-Fi radio test in channel 11 and set it to receive mode for 802.11g PER measurement.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwifi_radio_test init 11\nwifi_radio_test rx 1     #this will clear the earlier stats and wait for packets\n```\n\n----------------------------------------\n\nTITLE: Start Burst Transmission of Packets - Custom Command Usage\nDESCRIPTION: This command initiates the transfer of multiple packets with a random or predefined payload, enabling burst transmission capabilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_24\n\nLANGUAGE: text\nCODE:\n```\ncustom ltx\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Nordic Trusted Firmware\nDESCRIPTION: This snippet configures a CMake project by specifying source directories, setting certain policies, and adding necessary targets. It includes setting up includes for partitioning and board specifics, adding libraries for platform definitions, and handling specific platform compile definitions when available. Dependencies include Trusted Firmware-M and Nordic Semiconductor's modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/ns/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0076 NEW)\nset(CMAKE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR})\nset(NRF_BOARD_SELECTED True)\nset(NRF_TFM_BOARD ${ZEPHYR_NRF_MODULE_DIR}/modules/trusted-firmware-m/tfm_boards)\n\nadd_library(platform_ns STATIC)\n\nset(partition_includes\n    ${NRF_TFM_BOARD}/partition\n    ${CMAKE_BINARY_DIR}/../zephyr/include/generated\n)\n\nset(board_includes\n    ${CMAKE_BINARY_DIR}/../zephyr/misc/generated/syscalls_links/include\n    ${ZEPHYR_NRF_MODULE_DIR}/include/tfm\n    ${ZEPHYR_NRF_MODULE_DIR}/include\n)\n\ntarget_include_directories(platform_region_defs\n    INTERFACE\n        ${partition_includes}\n)\n\ntarget_include_directories(platform_ns\n    PUBLIC\n        ${partition_includes}\n        ${board_includes}\n)\n\n# Disabling UART stdout not supported in NS Image, which is always built even when not needed.\ntarget_sources(platform_ns\n  PRIVATE\n  $<$<NOT:$<BOOL:${PLATFORM_DEFAULT_UART_STDOUT}>>:${NRF_TFM_BOARD}/common/dummy_uart_stdout.c>\n)\n\n# Get the value of HAL_NORDIC_PATH\ninclude(${CMAKE_CURRENT_LIST_DIR}/common/core/config_nordic_nrf_spe.cmake)\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}/common/${NRF_SOC_VARIANT} ${NRF_SOC_VARIANT})\n\ntarget_include_directories(platform_ns\n    PUBLIC\n        ${CMAKE_CURRENT_LIST_DIR}\n)\n\nif(TFM_PARTITION_PLATFORM)\n    target_compile_definitions(platform_ns\n        PUBLIC\n        FIRMWARE_INFO_MAGIC=${FIRMWARE_INFO_MAGIC}\n        EXT_API_MAGIC=${EXT_API_MAGIC}\n        NRF_CONFIG_CPU_FREQ_MHZ=${NRF_CONFIG_CPU_FREQ_MHZ}\n    )\n\n    target_sources(platform_ns\n        PRIVATE\n        ${NRF_TFM_BOARD}/src/tfm_ioctl_ns_api.c\n    )\nendif()\n\ntarget_link_libraries(platform_ns\n    PUBLIC\n        platform_region_defs\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Recovery Button Node in DeviceTree\nDESCRIPTION: Device tree overlay snippet that assigns a button node as the recovery button through the chosen property. The button0 node is specified as the recovery button via the ncs,recovery-button property.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_recovery.rst#2025-04-21_snippet_8\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n   chosen {\n      ncs,recovery-button = &button0;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Startup Command Source Files to NRF Connect SDK App\nDESCRIPTION: Adds three source files (startup_cmd_ctrl.c, startup_cmd_shell.c, and startup_cmd_settings.c) to the 'app' target for compilation. These files likely contain implementations for control, shell, and settings functionalities in the startup process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/startup_cmd/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/startup_cmd_ctrl.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/startup_cmd_shell.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/startup_cmd_settings.c)\n```\n\n----------------------------------------\n\nTITLE: Boot Preference Change Log Output\nDESCRIPTION: Console log output showing the change of boot preference from variant A to variant B after pressing Button 3.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n<inf> AB: Changing a boot preference (a -> B)\n<inf> AB: restart the device to enforce\n```\n\n----------------------------------------\n\nTITLE: Setting Up NRF Security Configuration for TF-M\nDESCRIPTION: This snippet initializes key CMake variables and settings necessary for building NRF Security as part of the TF-M project. It processes configurations from the NRF_SECURITY_SETTINGS variable, parses them into CMake variables, and sets various configurations required for building NRF security components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/tfm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nseparate_arguments(NRF_SECURITY_SETTINGS)\n\nforeach(setting ${NRF_SECURITY_SETTINGS})\n  string(REGEX MATCH \"^([^=]*)=(.*)\" ignore ${setting})\n  set(${CMAKE_MATCH_1} ${CMAKE_MATCH_2})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ECDH Project with Zephyr RTOS\nDESCRIPTION: Sets up a CMake build configuration for an ECDH (Elliptic Curve Diffie-Hellman) cryptography project using Zephyr RTOS. It specifies the minimum CMake version, locates the Zephyr package, defines the project name, and includes the main source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/ecdh/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(ecdh)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Send Data Command\nDESCRIPTION: Command to send data over TCP/UDP connections with response showing bytes sent.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_13\n\nLANGUAGE: AT\nCODE:\n```\nAT#XSEND=\"Test TCP\"\n#XSEND: 8\nOK\n```\n\n----------------------------------------\n\nTITLE: Defining Library Sources in Zephyr\nDESCRIPTION: This snippet includes various C source files into the Zephyr library build process. It ensures the necessary modules for the Nordic SDK are incorporated based on the configuration settings. The snippets include both unconditional inclusions and conditional inclusions based on specific CONFIG settings for LTE modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/lte_link_control/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources(cereg.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources(cfun.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources(cscon.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources(mdmev.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources(redmob.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources(xfactoryreset.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources(xsystemmode.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_LTE_LC_CONN_EVAL_MODULE coneval.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_LTE_LC_EDRX_MODULE edrx.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_LTE_LC_NEIGHBOR_CELL_MEAS_MODULE ncellmeas.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_LTE_LC_PSM_MODULE psm.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_LTE_LC_RAI_MODULE rai.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_LTE_LC_PERIODIC_SEARCH_MODULE periodicsearchconf.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_LTE_LC_MODEM_SLEEP_MODULE xmodemsleep.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_LTE_LC_TAU_PRE_WARNING_MODULE xt3412.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_LTE_LC_DNS_FALLBACK_MODULE dns.c)\n```\n\n----------------------------------------\n\nTITLE: Initializing AT Command Parser List in C\nDESCRIPTION: Initializes a list of AT command/response parameters. This must be done before using the AT command parser.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_parser.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nat_params_list_init();\n```\n\n----------------------------------------\n\nTITLE: Handling Turbo Poll in Zigbee Sleepy End Device\nDESCRIPTION: Workaround for disabling turbo poll during Zigbee device commissioning process to prevent device halting\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nswitch(sig)\n{\ncase ZB_BDB_SIGNAL_DEVICE_REBOOT:\ncase ZB_BDB_SIGNAL_STEERING:\n        if (status == RET_OK) {\n                zb_zdo_pim_permit_turbo_poll(0);\n                zb_zdo_pim_set_long_poll_interval(2000);\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: LwM2M Carrier Command Syntax\nDESCRIPTION: Defines the syntax for sending commands to the LwM2M carrier library using the #XCARRIER command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIER=<cmd>[,<param1>[,<param2>]..]\n```\n\n----------------------------------------\n\nTITLE: Including Source File Conditionally in Zephyr Build\nDESCRIPTION: This snippet uses Zephyr's build system to conditionally include the source file 'trace.c' into the build if the 'CONFIG_NRF_MODEM_LIB_SHELL_TRACE' configuration flag is set. It enables selective compilation of source files based on configuration settings, which can help in managing build dependencies and reducing the final binary size.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/nrf_modem_lib/shell/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_NRF_MODEM_LIB_SHELL_TRACE trace.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial Port Settings\nDESCRIPTION: Configuration settings for the modem serial port and baud rate in the script files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/PPP_linux.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nMODEM=/dev/ttyACM0\nBAUD=115200\n```\n\n----------------------------------------\n\nTITLE: Triggering Smoke Alarm via General Diagnostics Command\nDESCRIPTION: Invokes a smoke alarm on the device by sending a command within the General Diagnostics cluster. Requires a test event enable key and node ID as parameters, affecting LED2's behavior. Output expects LED2 to blink with a 300 ms interval.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/smoke_co_alarm/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ngeneraldiagnostics test-event-trigger hex:<test_event_enable_key> 0x005c00000000009c <node_id> 0\n```\n\n----------------------------------------\n\nTITLE: Generating Subordinate CA Certificate\nDESCRIPTION: Generates a subordinate CA certificate signed by the root CA using the cert_tool.py script.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_8\n\nLANGUAGE: Console\nCODE:\n```\ncert_tool.py sub_ca\n```\n\n----------------------------------------\n\nTITLE: Building Wi-Fi Firmware on External Memory - NRF5340 DK\nDESCRIPTION: This snippet illustrates the command to build the Matter door lock sample for the NRF5340 DK with external memory configurations for Wi-Fi firmware, enabling additional space on-chip.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -p -- -Dlock_SHIELD=nrf7002ek  -DFILE_SUFFIX=thread_wifi_switched -DSB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE=y -DSB_CONFIG_MCUBOOT_UPDATEABLE_IMAGES=3 -DCONFIG_CHIP_DFU_OVER_BT_SMP=y -DSB_CONFIG_WIFI_NRF70=y -DSB_CONFIG_DFU_MULTI_IMAGE_PACKAGE_WIFI_FW_PATCH=y\n```\n\n----------------------------------------\n\nTITLE: FOTA Implementation Examples\nDESCRIPTION: Examples showing application firmware download, modem DFU info reading, modem firmware updates and DFU area operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/FOTA_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT Commands\nCODE:\n```\napplication firmware download and update\nAT#XFOTA=1,\"http://remote.host/fota/slm_app_update.bin\"\nOK\n#XFOTA: 1,0,0\n...\n#XFOTA: 4,0\nAT#XRESET\nOK\nReady\n#XFOTA: 5,0\n\nread modem DFU info\nAT#XFOTA=7\n#XFOTA: 294912,0\nOK\n\nmodem firmware download and update\nAT#XFOTA=2,\"http://remote.host/fota/mfw_nrf9160_update_from_1.3.4_to_1.3.5.bin\"\nOK\n#XFOTA: 1,0,0\n...\n#XFOTA: 4,0\nAT#XMODEMRESET\n#XFOTA: 5,0\n#XMODEMRESET: 0\nOK\n\nread modem DFU info\nAT#XFOTA=7\n#XFOTA: 294912,2621440\nOK\n\nerase modem DFU area for next modem delta update (optional)\nAT#XFOTA=9\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting Auto Startup for LwM2M Carrier\nDESCRIPTION: This snippet demonstrates how to set the auto startup configuration for the LwM2M carrier library using the command 'carrier_config auto_startup y'. It allows configurations to be applied before the library initialization process starts.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/app_integration.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ carrier_config auto_startup y\nSet auto startup: Yes\n```\n\n----------------------------------------\n\nTITLE: Subscribing to UserButton Attribute\nDESCRIPTION: Subscribes to the UserButton attribute to monitor button state changes with a 120-second timeout\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: matter-cli\nCODE:\n```\nany subscribe-by-id 0xFFF1FC01 0xFFF10002 0 120 1 1\n```\n\n----------------------------------------\n\nTITLE: Providing Input Data to Edge Impulse Wrapper in C\nDESCRIPTION: Adds input data to the Edge Impulse wrapper's buffer, preparing it for model prediction. Key dependencies are the configuration of the data buffer size via Kconfig. Inputs must match the model's frame size requirements, otherwise an error is returned. There are no direct outputs but successful data buffering.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/ei_wrapper.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nei_wrapper_add_data(data);\n```\n\n----------------------------------------\n\nTITLE: Setting Modem Date and Time Establishment Timeout in Kconfig\nDESCRIPTION: Sets the timeout for modem date and time establishment (in seconds). The sample waits for this number of seconds for the modem to determine the current date and time before giving up and moving on.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_DATE_TIME_ESTABLISHMENT_TIMEOUT_SECONDS\n```\n\n----------------------------------------\n\nTITLE: Describing Throughput Characteristic in reStructuredText\nDESCRIPTION: Defines the Throughput characteristic (0x1524) of the GATT Throughput Service. It explains the write and read operations available on this characteristic, including how to measure throughput and retrieve metrics.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/throughput.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\nThroughput (``0x1524``)\n=======================\n\nWrite Without Response\n   * Write any data to the characteristic to measure throughput.\n   * Write one byte to the characteristic to reset the metrics.\n\nRead\n   The read operation returns 3*4 bytes (12 bytes) that contain the metrics:\n\n   * Four bytes unsigned: Number of GATT writes received\n   * Four bytes unsigned: Total bytes received\n   * Four bytes unsigned: Throughput in bits per second\n```\n\n----------------------------------------\n\nTITLE: Displaying AMS Remote Command Output in RST\nDESCRIPTION: Shows how to format the output of an AMS Remote Command in RST documentation, including the hexadecimal command values and their interpretation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ams_client/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nAMS RC: 00,01,02,03,04,05,06,07,08,09,0A,0B,0C\n```\n\n----------------------------------------\n\nTITLE: Degraded Mode Boot Status Log\nDESCRIPTION: Log output showing the device entering degraded mode after reboot, with neither variant A nor B confirmed but still attempting to boot from variant A.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_28\n\nLANGUAGE: console\nCODE:\n```\nBoot preference: set B\nBoot status: image set A active, degraded mode\nConfirm status set A: not confirmed\nConfirm status set B: not confirmed\n```\n\n----------------------------------------\n\nTITLE: Setting Binding on Light Switch\nDESCRIPTION: Configures the binding on the Light Switch to use the group communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./chip-tool binding write binding '[{\"fabricIndex\":\"1\",\"group\":\"30001\"}]' 1 1\n```\n\n----------------------------------------\n\nTITLE: Building with MCUboot in Direct-XIP Mode with Revert Support\nDESCRIPTION: Command to build the Peripheral LBS sample with MCUboot in direct-xip mode with revert mechanism support and FOTA support enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf52/fota_update.rst#2025-04-21_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nwest build -b *board_target* -- -DSB_CONFIG_BOOTLOADER_MCUBOOT=y -DSB_CONFIG_MCUBOOT_MODE_DIRECT_XIP_WITH_REVERT=y -DCONFIG_NCS_SAMPLE_MCUMGR_BT_OTA_DFU=y\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Hardware ID Test Build\nDESCRIPTION: Complete CMake configuration for hardware ID testing project. Sets up project requirements, includes necessary source files, configures include directories, and handles optional configuration overrides. Requires CMake 3.20.0 or higher and Zephyr SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/hw_id/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(hw_id_test)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntest_runner_generate(src/main.c)\n\ntarget_sources(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/lib/hw_id/hw_id.c\n)\n\nzephyr_include_directories(src/)\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/include/)\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/include/net)\nzephyr_include_directories(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/)\nzephyr_include_directories(${ZEPHYR_BASE}/include/zephyr/)\nzephyr_include_directories(${ZEPHYR_BASE}/subsys/testsuite/include)\n\nif(KCONFIG_OVERRIDE_FILE)\n  add_definitions(-include ${KCONFIG_OVERRIDE_FILE})\nelseif(CONFIG_HW_ID_OVERRIDE_FILE)\n  add_definitions(-include ${CONFIG_HW_ID_OVERRIDE_FILE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring PPP UART Settings in MoSh\nDESCRIPTION: Shows how to set custom baudrate and hardware flow control for PPP UART using MoSh commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nppp uartconf --baudrate 921600\nppp uartconf --flowctrl rts_cts\n```\n\n----------------------------------------\n\nTITLE: Building Wi-Fi and Bluetooth LE Sample with Coexistence Disabled\nDESCRIPTION: Command for building the sample with coexistence disabled. This configuration can be used for Wi-Fi throughput only, Bluetooth LE throughput only, or concurrent operation without coexistence.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_MPSL_CX=n -Dipc_radio_CONFIG_MPSL_CX=n\n```\n\n----------------------------------------\n\nTITLE: BICR Programming Command Using nrfutil\nDESCRIPTION: Command to program the BICR binary to the SoC using nRF Util. The BICR contains critical configuration for power and clock delivery.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_custom_pcb.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device program --options chip_erase_mode=ERASE_NONE --firmware bicr.hex --core Application --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Capturing STM Logs with nrfutil\nDESCRIPTION: Command to capture and decode STM logs using nrfutil trace with domain-specific dictionary configuration and serial port settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_logging.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil trace stm --database-config <domain_id>:build/<app_name>/zephyr/log_dictionary.json --input-serialport <port> --baudrate 115200 --stdout ascii\n```\n\n----------------------------------------\n\nTITLE: Uploading Cache Partition to External Flash on nRF54H20\nDESCRIPTION: Command to upload a cache partition file to the external flash using nrfutil over UART.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/smp_transfer/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-cache-raw --serial-port COM7 --cache-file dfu_cache_partition_1.bin --pool 1\n```\n\n----------------------------------------\n\nTITLE: Defining GPIO Pin State Structure in C\nDESCRIPTION: Definition of pin_state struct containing pin number and value for individual GPIO pin configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/board.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nstruct pin_state {\n    uint32_t pin;    /* Pin number */\n    uint32_t val;    /* Pin value */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker for OpenThread Border Router\nDESCRIPTION: Commands to install and start the Docker daemon on Ubuntu for running OpenThread Border Router.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt install docker.io\nsudo systemctl start docker\n```\n\n----------------------------------------\n\nTITLE: Uploading SUIT Envelope to nRF54H20 Device\nDESCRIPTION: Command for uploading a SUIT envelope file to an nRF54H20 device connected via serial port. This is the first step in the firmware update process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-envelope --serial-port COM7 --envelope-file build/DFU/root.suit\n```\n\n----------------------------------------\n\nTITLE: Building CoreMark with Static Memory Configuration\nDESCRIPTION: Command to build the CoreMark benchmark using static memory allocation method.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/benchmarks/coremark/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b *board_target* -- -DFILE_SUFFIX=static_memory\n```\n\n----------------------------------------\n\nTITLE: Button Simulation Event Flow Table in RST\nDESCRIPTION: Table documenting the flow of button simulation events between nRF Desktop components, including power management and wake up events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_11\n\nLANGUAGE: rst\nCODE:\n```\n+-----------------------------------------------+------------------------+-----------------+------------------------+---------------------------------------------+\n| Source Module                                 | Input Event            | This Module     | Output Event           | Sink Module                                 |\n+===============================================+========================+=================+========================+=============================================+\n| :ref:`nrf_desktop_buttons`                    | ``button_event``       | ``buttons_sim`` |                        |                                             |\n+-----------------------------------------------+                        |                 |                        |                                             |\n| :ref:`nrf_desktop_buttons_sim`                |                        |                 |                        |                                             |\n+-----------------------------------------------+                        |                 |                        |                                             |\n| :ref:`nrf_desktop_fn_keys`                    |                        |                 |                        |                                             |\n+-----------------------------------------------+------------------------+                 |                        |                                             |\n| :ref:`nrf_desktop_module_state_event_sources` | ``module_state_event`` |                 |                        |                                             |\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for wakeup_trigger SPI Slave Application\nDESCRIPTION: Sets up the CMake build environment for the wakeup_trigger application that's part of the Nordic SPI Slave wakeup sample. It defines the minimum CMake version required, locates the Zephyr package, names the project, and includes all C source files from the specific path in the Zephyr base directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/boards/nordic/spis_wakeup/wakeup_trigger/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(wakeup_trigger)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/samples/boards/nordic/spis_wakeup/wakeup_trigger/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Generating CMock Test Mocks\nDESCRIPTION: Creates mock implementations of various modem-related header files for testing, excluding specific functions and words\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/lte_net_if/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/modem/lte_lc.h\n\tFUNC_EXCLUDE \".*(lte_lc_rai_req|lte_lc_rai_param_set)\"\n\tWORD_EXCLUDE \"__deprecated\")\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/modem/nrf_modem_lib.h FUNC_EXCLUDE \".*nrf_modem_lib_shutdown_wait\")\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/modem/pdn.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem_at.h\n\tFUNC_EXCLUDE \".*nrf_modem_at_scanf\"\n\tWORD_EXCLUDE \"__nrf_modem_(printf|scanf)_like\\(.*\\)\")\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_socket.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_errno.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_gai_errors.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem_os.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Main Application Source\nDESCRIPTION: Specifies the main application source file, 'src/main.c', as part of the project target sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_usb/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Recursive SUIT Envelope Signing\nDESCRIPTION: JSON configuration file structure for the suit-generator sign recursive command. This defines signing keys, algorithms, and dependencies for signing SUIT envelopes outside of the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_signing.rst#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"key-name\": \"<KEY_NAME>\",\n   \"key-id\": \"<KEY_ID>\",\n   \"alg\": \"<SIGNATURE_ALGORITHM>\",\n   \"context\": \"<CONTEXT>\",\n   \"sign-script\": \"<SIGN_SCRIPT path>\",\n   \"kms-script\": \"<KMS_SCRIPT path>\",\n   \"omit-signing\": false,\n   \"already-signed-action\": \"<ACTION>\",\n   \"dependencies\" : {\n       \"<DEP1_NAME>\" : {\n         \"key-name\": \"<KEY_NAME_DEP1>\",\n         \"key-id\": \"<KEY_ID_DEP1>\",\n         \"<OTHER_PARAMETERS>\"\n       },\n       \"<DEP2_NAME>\" : {\n         \"key-name\": \"<KEY_NAME_DEP2>\",\n         \"key-id\": \"<KEY_ID_DEP2>\",\n         \"<OTHER_PARAMETERS>\"\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing IPUC Creation and Release Workflow with PlantUML\nDESCRIPTION: This PlantUML sequence diagram illustrates the process of creating and releasing an Image Processing Unit Cache (IPUC). It shows the interactions between flash_ipuc, flash_ipuc_dev, ssf, and suit_utils components, detailing steps such as IPUC allocation, access permission checks, memory range selection, and resource release.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/flash_cache_ipuc_create.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant flash_ipuc\nparticipant flash_ipuc_dev\nparticipant ssf\nparticipant suit_utils\n\n--> flash_ipuc ++ : flash_cache_ipuc_create(min_address)\nflash_ipuc -> ssf ++ : suit_ipuc_get_count()\ndeactivate ssf\nflash_ipuc -> flash_ipuc_dev ** : get_free_dev()\nnote right\n  Fails if CONFIG_FLASH_IPUC_COUNT IPUCs\n  are already allocated\nend note\n\nloop i < ipuc_count\n  flash_ipuc -> ssf ++ : suit_ipuc_get_info(i)\n  note right\n    Provides the associated component_id and manifest role\n  end note\n  deactivate ssf\n  flash_ipuc -> flash_ipuc : read_access_check(ipuc[i].role)\n  note right\n    Root and application manifest components are readable on the CPUAPP.\n    Radio manifest components are readable on the CPURAD.\n  end note\n  alt IPUC readable\n    flash_ipuc -> suit_utils ++ : suit_plat_decode_component_id(component_id)\n    note right\n      Decodes address and size of the memory region\n    end note\n    deactivate suit_utils\n    flash_ipuc -> flash_ipuc : << find usable range within IPUC >>\n    note right\n      Returns a memory range, defined by component_id,\n      with the lower boundary adjusted to be not lower\n      than min_address.\n    end note\n    alt range_adjusted > range_max\n      flash_ipuc -> flash_ipuc : max_idx := i\n      note right\n        The IPUC with maximum usable range size is selected\n      end note\n    end\n  else\n    flash_ipuc -> flash_ipuc : i++\n  end\n\n  flash_ipuc -> ssf ++ : suit_ipuc_get_info(max_idx)\n  deactivate ssf\n  flash_ipuc -> flash_ipuc_dev ++ : << set component_id >>\n  deactivate flash_ipuc_dev\n\n  flash_ipuc -> suit_utils ++ : suit_plat_decode_component_id(ipuc[max_idx].component_id)\n  deactivate suit_utils\n  flash_ipuc -> flash_ipuc : << find usable range within IPUC >>\n  flash_ipuc -> flash_ipuc_dev ++ : << set address and size >>\n  deactivate flash_ipuc_dev\n\n  flash_ipuc -> flash_ipuc_dev ++: << mark as readable >>\n  deactivate flash_ipuc_dev\n  flash_ipuc -> flash_ipuc_dev ++: << set pending flag >>\n  deactivate flash_ipuc_dev\n  note right\n    IPUC initialization (discards memory contents) postponed\n    until the first write() API call.\n  end note\nend\n\ndeactivate flash_ipuc\n\n--> flash_ipuc ++ : flash_ipuc_release()\nflash_ipuc -> flash_ipuc_dev : release(ipuc_dev)\ndestroy flash_ipuc_dev\n\ndeactivate flash_ipuc\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Sending Device Information to nRF Cloud\nDESCRIPTION: Use the 'cloud_rest shadow_update' command to send device updates to nRF Cloud. The response data might take some time to appear on the cloud UI.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_34\n\nLANGUAGE: console\nCODE:\n```\nmosh:~$ cloud_rest shadow_update\n```\n\n----------------------------------------\n\nTITLE: Referencing Click Event Struct in C\nDESCRIPTION: C struct reference for the click_event used to detect button clicks for bond erasure. This struct is part of the Common Application Framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_bond.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct click_event\n```\n\n----------------------------------------\n\nTITLE: Gazell Pairing Data Pipe Macro\nDESCRIPTION: This macro represents the data pipe used for requesting the Host ID after the Device has obtained the System Address. The Host ID is used to generate subsequent Dynamic Keys for encrypted data transfer. The secret Host ID is transmitted on this encrypted pipe using the shared Secret Key.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/gazell/gzp.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\":c:macro:`GZP_DATA_PIPE`\"\n```\n\n----------------------------------------\n\nTITLE: Setting Bluetooth Device Name and Appearance in Kconfig\nDESCRIPTION: Configures default values for Bluetooth device name and appearance based on nRF Desktop product name or device role and type combination.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_7\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_BT_DEVICE_NAME=\"nRF Desktop Product Name\"\nCONFIG_BT_DEVICE_APPEARANCE=keyboard\n```\n\n----------------------------------------\n\nTITLE: MCUboot Failure Log Due to Sector Size Issues\nDESCRIPTION: Sample error log showing a typical MCUboot failure due to insufficient BOOT_MAX_IMG_SECTORS configuration. This happens when the maximum number of image sectors that MCUboot can handle is set too low, especially when using external flash.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_partitioning.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v3.1.99-ncs1-... ***\nI: Starting bootloader\nW: Failed reading sectors; BOOT_MAX_IMG_SECTORS=512 - too small?\nW: Cannot upgrade: not a compatible amount of sectors\nI: Bootloader chainload address offset: 0x10000\nI: Jumping to the first image slot\n```\n\n----------------------------------------\n\nTITLE: Target Sources for Application\nDESCRIPTION: Specifies the source files for the application, indicating that 'src/main.c' is a private source file for this project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_spim/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This command uses CMake's `find_package` to locate the Zephyr RTOS package. It requires the Zephyr package and uses the environment variable `ZEPHYR_BASE` as a hint for the Zephyr installation directory.  This is a crucial step to ensure Zephyr RTOS is found before building the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/watchdog/wdt_error_cases/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Images to Recovery Firmware in Sysbuild\nDESCRIPTION: CMake configuration for adding additional components to the recovery image, such as a Bluetooth HCI IPC application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_recovery.rst#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nExternalZephyrProject_Add(\n   APPLICATION recovery_hci_ipc\n   SOURCE_DIR  \"${ZEPHYR_BASE}/samples/bluetooth/hci_ipc\"\n   BOARD       ${BOARD}/${SB_CONFIG_SOC}/${SB_CONFIG_NETCORE_REMOTE_BOARD_TARGET_CPUCLUSTER}\n   BOARD_REVISION ${BOARD_REVISION}\n)\n\nadd_overlay_config(recovery_hci_ipc ${CMAKE_CURRENT_LIST_DIR}/sysbuild/hci_ipc.conf)\nadd_overlay_dts(recovery_hci_ipc ${CMAKE_CURRENT_LIST_DIR}/sysbuild/hci_ipc.overlay)\n```\n\n----------------------------------------\n\nTITLE: Using Connection Handover Record Parser in C\nDESCRIPTION: This code snippet demonstrates how to use the Connection Handover record parser library. It shows the process of parsing raw NDEF message data, searching for Connection NDEF records, and parsing them to print their content.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/ch_rec_parser.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n.. literalinclude:: ../../../../../samples/nfc/tag_reader/src/main.c\n    :language: c\n    :start-after: include_startingpoint_ch_rec_parser_rst\n    :end-before: include_endpoint_ch_rec_parser_rst\n```\n\n----------------------------------------\n\nTITLE: Initializing Modem Library\nDESCRIPTION: This snippet initializes the modem library by calling the nrf_modem initialization function. It provides feedback via output messages, which indicate the initialization status. The function is critical for preparing the modem for subsequent operations such as setting functional modes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_callbacks/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid modem_init() {\n    int ret = nrf_modem_lib_init();\n    printf(\"Initializing modem library\\n\");\n    if (ret == 0) {\n        printf(\"> Initialized with value %d\\n\", ret);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying UDP Server Configuration using AT command\nDESCRIPTION: This AT command queries the possible configuration options for the UDP server. It lists available settings, such as port and security tag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n**AT#XUDPSVR=?**\n#XUDPSVR: (0,1,2),<port>,<sec_tag>\nOK\n```\n\n----------------------------------------\n\nTITLE: Cirrus Logic Module Integration\nDESCRIPTION: Adds Cirrus Logic codec support if enabled, with error handling for missing dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_HW_CODEC_CIRRUS_LOGIC)\n    if (ZEPHYR_CIRRUS_LOGIC_MODULE_DIR)\n        add_subdirectory(${ZEPHYR_CIRRUS_LOGIC_MODULE_DIR} cirrus_logic_bin_dir)\n    else()\n        message(FATAL_ERROR \"Cirrus Logic/sdk-mcu-drivers repository not found\\n\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: FTP Directory Navigation\nDESCRIPTION: Commands for changing directories and checking current working directory using cd and pwd commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_40\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XFTP=\"cd\",\"upload\"\nAT#XFTP=\"pwd\"\nAT#XFTP=\"cd\", \"..\"\n```\n\n----------------------------------------\n\nTITLE: Get Boolean Value from Object - C\nDESCRIPTION: This snippet refers to the function `nrf_cloud_obj_bool_get`, which allows you to retrieve a boolean value from an object within the nRF Cloud library. It is useful for extracting boolean configuration settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Thread Stack Usage Statistics Example\nDESCRIPTION: Example output showing stack usage statistics for various threads in a Matter device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n0x20011568 CHIP                             (real size 6144):\tunused 3952\tusage 2192 / 6144 (35 %)\n0x200069e8 BT RX WQ                         (real size 1216):\tunused 1040\tusage  176 / 1216 (14 %)\n0x20006930 BT TX                            (real size 1536):\tunused 1080\tusage  456 / 1536 (29 %)\n0x20006d08 rx_q[0]                          (real size 1536):\tunused 1384\tusage  152 / 1536 ( 9 %)\n0x20006e18 openthread                       (real size 4096):\tunused 3432\tusage  664 / 4096 (16 %)\n0x20007be8 ot_radio_workq                   (real size 1024):\tunused  848\tusage  176 / 1024 (17 %)\n0x20006768 shell_uart                       (real size 3200):\tunused 2104\tusage 1096 / 3200 (34 %)\n0x20002580 nrf5_rx                          (real size 1024):\tunused  832\tusage  192 / 1024 (18 %)\n0x2000d510 sysworkq                         (real size 1152):\tunused  880\tusage  272 / 1152 (23 %)\n0x20007b10 MPSL Work                        (real size 1024):\tunused  808\tusage  216 / 1024 (21 %)\n0x2000d3a0 idle                             (real size  320):\tunused  272\tusage   48 /  320 (15 %)\n0x2000d458 main                             (real size 6144):\tunused 4584\tusage 1560 / 6144 (25 %)\n0x20025d00 IRQ 00                           (real size 2048):\tunused 1120\tusage  928 / 2048 (45 %)\n```\n\n----------------------------------------\n\nTITLE: Updated Sensor Channel String Function\nDESCRIPTION: Replacement of bt_mesh_sensor_ch_str_real macro with bt_mesh_sensor_ch_str function implementation in Bluetooth Mesh.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nbt_mesh_sensor_ch_str\n```\n\n----------------------------------------\n\nTITLE: Conditionally adding a source file in Zephyr using CMake\nDESCRIPTION: This CMake code conditionally adds the `sensor_module.c` source file to the build process if the `CONFIG_SENSOR_MODULE` option is enabled.  The `target_sources_ifdef` command checks for this configuration option. If the option is set, the source file is added as a private source to the `app` target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/modules/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_sources_ifdef(CONFIG_SENSOR_MODULE\n    app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sensor_module.c\n    )\"\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: Sets the project name for the external radio Bluetooth coexistence sample\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/radio_coex_1wire/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(\"External radio Bluetooth coexistence sample\")\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option for nRF Provisioning\nDESCRIPTION: This snippet sets the NRF_PROVISIONING CMake option to ON if the CONFIG_TFM_NRF_PROVISIONING Kconfig option is enabled.  It also prints a message indicating that TF-M provisioning has been enabled and instructing the user to provision the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_NRF_PROVISIONING)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DNRF_PROVISIONING=ON\n  )\n\n  message(\"\\n  TF-M Provisioning has been enabled\\n  The device must be correctly provisioned in order to boot.\\n  See TF-M: Provisioning image sample on how to provision the device for TF-M.\\n  \")\nendif()\n```\n\n----------------------------------------\n\nTITLE: PINCTRL Workaround for I2C TWIM Driver\nDESCRIPTION: Code modification required to fix compilation of I2C TWIM driver when PINCTRL is disabled. Wraps pinctrl_apply_state() call in a CONFIG_PINCTRL conditional block.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_67\n\nLANGUAGE: C\nCODE:\n```\n#ifdef CONFIG_PINCTRL\npinctrl_apply_state()\n#endif\n```\n\n----------------------------------------\n\nTITLE: RF Tool RX/TX Duty Cycle Configuration (Server)\nDESCRIPTION: This command configures the DECT RF tool for simultaneous receive and transmit (RX/TX) operation on the server side for duty cycle testing. It enables RX find sync, sets RX/TX subslot and idle subslot counts, sets frame repeat count, and specifies channel 1677.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool -m rx_tx --rx_find_sync --rx_subslot_count 9 --rx_idle_subslot_count 3 --tx_subslot_count 8 --tx_idle_subslot_count 3 --frame_repeat_count 15 -c 1677\n```\n\n----------------------------------------\n\nTITLE: Building with netUSB support\nDESCRIPTION: Command to build the QuickTrack application for nRF7002 DK with the network USB overlay configuration for USB-based communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -DEXTRA_CONF_FILE=overlay-netusb.conf\n```\n\n----------------------------------------\n\nTITLE: Transferring GPIO Pin Control to VPR in C\nDESCRIPTION: Function to change ownership of a GPIO pin to the VPR, required for routing signals between VPR and physical pins on nRF54L15.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nnrf_gpio_pin_control_select(pin, NRF_GPIO_PIN_SEL_VPR);\n```\n\n----------------------------------------\n\nTITLE: Adding NFC Modules in CMake\nDESCRIPTION: This snippet adds various NFC-related subdirectories only if specific NFC-related configurations are enabled, facilitating the inclusion of NFC capabilities in the project based on user requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_NFC_T2T_NRFXLIB OR CONFIG_NFC_T4T_NRFXLIB OR CONFIG_NFC_T2T_PARSER OR CONFIG_NFC_NDEF_PARSER OR CONFIG_NFC_T4T_ISODEP OR CONFIG_NFC_T4T_APDU OR CONFIG_NFC_T4T_CC_FILE OR CONFIG_NFC_T4T_HL_PROCEDURE OR CONFIG_NFC_TNEP_TAG OR CONFIG_NFC_TNEP_POLLER OR CONFIG_NFC_RPC) add_subdirectory(nfc) endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring NRF54LX Specific Settings in CMake\nDESCRIPTION: Sets up PSA crypto, signature types, and various driver configurations for NRF54LX series. Includes conditional logic for different signature types and encryption options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(SB_CONFIG_SOC_SERIES_NRF54LX)\n  if(SB_CONFIG_BOOT_SIGNATURE_TYPE_NONE)\n    set_config_bool(mcuboot CONFIG_NRF_SECURITY y)\n  elseif(SB_CONFIG_BOOT_SIGNATURE_TYPE_ED25519)\n    set_config_bool(mcuboot CONFIG_NRF_SECURITY y)\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_BOOTLOADER_SIGNATURE_TYPE_ED25519 y)\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_BOOTLOADER_USES_SHA512 y)\n\n    set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_AEAD_DRIVER n)\n    set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_PAKE_DRIVER n)\n    if(SB_CONFIG_BOOT_ENCRYPTION)\n      set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_CIPHER_DRIVER y)\n      set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_MAC_DRIVER y)\n      set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_KEY_AGREEMENT_DRIVER y)\n      set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_KEY_DERIVATION_DRIVER y)\n    else()\n      set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_CIPHER_DRIVER n)\n      set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_MAC_DRIVER n)\n      set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_KEY_AGREEMENT_DRIVER n)\n      set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_KEY_DERIVATION_DRIVER n)\n    endif()\n\n    if(SB_CONFIG_MCUBOOT_SIGNATURE_USING_KMU)\n      set_config_bool(mcuboot CONFIG_BOOT_SIGNATURE_USING_KMU y)\n    else()\n      set_config_bool(mcuboot CONFIG_BOOT_SIGNATURE_USING_KMU n)\n    endif()\n\n    if(SB_CONFIG_BOOT_SIGNATURE_TYPE_PURE)\n      set_config_bool(mcuboot CONFIG_BOOT_SIGNATURE_TYPE_PURE y)\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_BOOTLOADER_SIGNATURE_TYPE_PURE y)\n    else()\n      set_config_bool(mcuboot CONFIG_BOOT_SIGNATURE_TYPE_PURE n)\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_BOOTLOADER_SIGNATURE_TYPE_PURE n)\n    endif()\n\n    if(SB_CONFIG_MCUBOOT_SIGNATURE_USING_KMU AND SB_CONFIG_BOOT_SIGNATURE_TYPE_PURE)\n      set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_HASH_DRIVER n)\n      set_config_bool(mcuboot CONFIG_BOOT_IMG_HASH_ALG_SHA512 n)\n    else()\n      set_config_bool(mcuboot CONFIG_PSA_USE_CRACEN_HASH_DRIVER y)\n      set_config_bool(mcuboot CONFIG_BOOT_IMG_HASH_ALG_SHA512 y)\n    endif()\n  else()\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_BOOTLOADER_SIGNATURE_TYPE_ED25519 n)\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_BOOTLOADER_USES_SHA512 n)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Thingy:53 Application from Command Line\nDESCRIPTION: Command to build a Thingy:53 application from the command line using west. It specifies the board target and output directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy53/building_thingy53.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b *board_target* -d *destination_directory_name*\n```\n\n----------------------------------------\n\nTITLE: Configuring Battery Project with CMake and Zephyr\nDESCRIPTION: Basic CMake configuration that sets up a battery project using Zephyr RTOS. It specifies the minimum CMake version 3.20.0, locates the Zephyr package using environment variables, and adds the main.c source file to the project build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/battery/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(battery)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Creating SUIT Execution Mode Implementation Library\nDESCRIPTION: Defines a Zephyr library for the SUIT execution mode implementation, specifying source files and linking against the interface library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/execution_mode/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(src/suit_execution_mode.c)\n\nzephyr_library_link_libraries(suit_execution_mode)\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Client and Connecting to Server\nDESCRIPTION: This snippet shows how to create a TLS client and connect to a server using AT commands, specifying the server address, port, and security tag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_9\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XTCPCLI=1,\"example.com\",1234,1000\n\nAT#XTCPCLI?\n```\n\n----------------------------------------\n\nTITLE: Configuring TFM PSA Template Project in CMake\nDESCRIPTION: Sets up a CMake project for TFM PSA template including minimum CMake version, Zephyr package requirement, project definition, source files, and TFM include directories. Requires CMake 3.20.0 or higher and Zephyr SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_psa_template/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(tfm_psa_template)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n\n\ntarget_include_directories(app PRIVATE\n  $<TARGET_PROPERTY:tfm,TFM_BINARY_DIR>/api_ns/interface/include\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO LED Indication in Kconfig\nDESCRIPTION: Use the Zephyr gpio-leds driver for LED indication. Defaults to enabled if there is a compatible devicetree entry, and the Thingy:91 is not the target. Defaults to enabled on the nRF91 Series DKs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_23\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LED_INDICATION_GPIO\n```\n\n----------------------------------------\n\nTITLE: Adding Core Source Files to nrf_auraconfig Application\nDESCRIPTION: Adds essential source files for audio synchronization and LED control to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules/audio_sync_timer.c)\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules/led.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring AES-CTR Application with CMake for Zephyr\nDESCRIPTION: This CMake configuration file sets up a Zephyr application named 'aes_ctr'. It specifies the minimum CMake version required (3.20.0), finds the Zephyr package, and configures the application with main.c as the source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/aes_ctr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(aes_ctr)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: RF Tool Configuration for RX/TX\nDESCRIPTION: This command configures the DECT RF tool for simultaneous receive and transmit (RX/TX) operation. It sets the frame repeat count to 15 and the frame repeat count intervals to 10, targets frequency 39, and uses channel 1677.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool -m rx_tx --frame_repeat_count 15 --frame_repeat_count_intervals 10 -t 39 -c 1677\n```\n\n----------------------------------------\n\nTITLE: Checking EMDS Readiness\nDESCRIPTION: This snippet shows how to check if the EMDS is ready for storing data using the emds_is_ready function, which returns a boolean indicating readiness.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/emds.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nif (emds_is_ready()) {\n    // Ready to store data\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysbuild for KMU Keys Storage\nDESCRIPTION: Kconfig options for enabling secure boot on the application core and using KMU for key storage and revocation policy handling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_signature_keys.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nSB_CONFIG_SECURE_BOOT_APPCORE=y\nb0_CONFIG_SB_CRYPTO_KMU_KEYS_REVOCATION=y\n```\n\n----------------------------------------\n\nTITLE: Programming Network Core Update Image with nRF Util\nDESCRIPTION: This snippet provides the command used to program the network core update image using nRF Util. It outlines how to properly execute the command for updating the firmware in the network core of the nRF5340.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/netboot/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --options chip_erase_mode=ERASE_RANGES_TOUCHED_BY_FIRMWARE --firmware zephyr/net_core_app_moved_test_update.hex\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Sources for SLM in CMake\nDESCRIPTION: CMake configuration that includes the current directory in the include path and conditionally adds the GPIO source file when CONFIG_SLM_GPIO is enabled. This is part of the Serial LTE Modem (SLM) implementation in the Nordic SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/src/gpio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(.)\ntarget_sources_ifdef(CONFIG_SLM_GPIO app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_at_gpio.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Kconfig Options for Serial Recovery\nDESCRIPTION: This snippet outlines the Kconfig options to enable serial recovery for the network core in MCUboot. It includes selecting certain configurations and disabling a specific setting crucial for proper memory access while enabling recovery features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/serial_recovery.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* select :kconfig:option:`CONFIG_BOOT_IMAGE_ACCESS_HOOK`\n* select :kconfig:option:`CONFIG_FLASH_SIMULATOR`\n* select :kconfig:option:`CONFIG_FLASH_SIMULATOR_DOUBLE_WRITES`\n* disable :kconfig:option:`CONFIG_FLASH_SIMULATOR_STATS`\n* select :kconfig:option:`CONFIG_MCUBOOT_SERIAL_DIRECT_IMAGE_UPLOAD`\n* select :kconfig:option:`CONFIG_NRF53_RECOVERY_NETWORK_CORE`\n```\n\n----------------------------------------\n\nTITLE: Managing Bluetooth Connection References in CAF\nDESCRIPTION: These function calls are used to manage references to Bluetooth connection objects in the CAF Bluetooth LE state module, ensuring they remain valid when accessed by other modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_state.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nbt_conn_ref()\nbt_conn_unref()\n```\n\n----------------------------------------\n\nTITLE: Enabling nrf_cracen Cipher Driver in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables the `nrf_security_drivers_cracen` driver for all supported cipher algorithms. The Cracen driver provides an alternative implementation of cryptographic algorithms.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_USE_CRACEN_CIPHER_DRIVER`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library\nDESCRIPTION: This snippet sets up a Zephyr library and includes its source file, enabling the compilation of the sensor stub within the project. It requires Zephyr and is essential for building and integrating features related to the sensor functionalities in the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/sensor/sensor_stub/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(sensor_stub.c)\n```\n\n----------------------------------------\n\nTITLE: Globbing Application Source Files\nDESCRIPTION: Automatically discovers and collects all C source files in the 'src' directory, enabling dynamic source file inclusion for the Nordic SDK project\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hids_keyboard/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: OpenThread Diagnostic Channel Command\nDESCRIPTION: This command sets the radio channel for the diagnostic module, configuring the frequency for communication during diagnostic tests. It requires a channel number as input.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot diag channel 11\nset channel to 11\nstatus 0x00\nDone\n```\n\n----------------------------------------\n\nTITLE: West Flash Command for Network Core Erase and Programming\nDESCRIPTION: Command to erase flash memory and program the network sample using west tool for nRF5340 DK\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/building_nrf53.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest flash --erase\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Credentials Test Project in CMake\nDESCRIPTION: Sets up a CMake project for testing TLS credentials. It specifies the minimum CMake version, finds the Zephyr package, sets include directories, defines compilation flags, and adds source files to the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/tls_credentials_nrf_modem/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(tls_credentials_test)\n\ntarget_include_directories(app PRIVATE\n  ${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/\n  ${ZEPHYR_BASE}/subsys/net/lib/tls_credentials\n)\n\ntarget_compile_definitions(app PRIVATE\n  CONFIG_TLS_MAX_CREDENTIALS_NUMBER=10\n  CONFIG_TLS_CREDENTIALS_LOG_LEVEL=3\n)\n\ntarget_sources(app PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/tls_credentials/tls_credentials_nrf_modem.c\n  main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Wi-Fi Credentials and Management in C\nDESCRIPTION: Updated the wifi_shell_sample to use the lib_wifi_credentials and wifi_mgmt_ext libraries for improved Wi-Fi credential management and extended Wi-Fi management functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_12\n\nLANGUAGE: C\nCODE:\n```\n// Example usage of lib_wifi_credentials and wifi_mgmt_ext libraries\n#include <wifi_credentials.h>\n#include <wifi_mgmt_ext.h>\n\n// Initialize Wi-Fi credentials\nwifi_credentials_init();\n\n// Use extended Wi-Fi management functions\nwifi_mgmt_ext_connect();\n```\n\n----------------------------------------\n\nTITLE: Setting Config Value for Secondary Variant\nDESCRIPTION: Command line parameter to set configuration values for the secondary variant (slot B) of an image\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n-Dab_slot_b_CONFIG_N_BLINKS=2\n```\n\n----------------------------------------\n\nTITLE: Conditional MCUMgr OS Management Module Inclusion\nDESCRIPTION: Conditionally adds the os_mgmt subdirectory to the build if CONFIG_MCUMGR_GRP_OS is defined. This controls whether the OS management functionality is included in the firmware build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mgmt/mcumgr/grp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_MCUMGR_GRP_OS os_mgmt)\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Boot for Application Core in CMake\nDESCRIPTION: Sets up secure boot configuration for the application core, including board settings, cryptographic options, and MCUboot integration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(SB_CONFIG_SECURE_BOOT_APPCORE)\n  if(NOT DEFINED b0_BOARD AND DEFINED board_target_secure)\n    set_target_properties(b0 PROPERTIES BOARD ${board_target_secure})\n\n    if(SB_CONFIG_BOOTLOADER_MCUBOOT)\n      set_target_properties(s1_image PROPERTIES BOARD ${board_target_secure})\n    endif()\n  endif()\n\n  if(SB_CONFIG_BOOTLOADER_MCUBOOT)\n    add_overlay_config(mcuboot ${ZEPHYR_NRF_MODULE_DIR}/subsys/bootloader/image/log_minimal.conf)\n    set_config_bool(mcuboot CONFIG_SECURE_BOOT y)\n    set_config_bool(mcuboot CONFIG_FW_INFO y)\n\n    if(SB_CONFIG_BOOT_SIGNATURE_TYPE_ECDSA_P256)\n      if(SB_CONFIG_SOC_SERIES_NRF54LX)\n        set_config_bool(mcuboot CONFIG_BOOT_ECDSA_TINYCRYPT y)\n      else()\n        if(SB_CONFIG_BOOT_SHARED_CRYPTO_ECDSA_P256)\n          add_overlay_config(\n            mcuboot\n            ${ZEPHYR_MCUBOOT_MODULE_DIR}/boot/zephyr/external_crypto.conf\n            )\n        endif()\n      endif()\n    else()\n      message(WARNING \"MCUboot and secure boot (application core) are enabled but MCUboot signing key type is not set to ECDSA-P256, this is a non-optimal configuration\")\n    endif()\n  else()\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_SECURE_BOOT y)\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_FW_INFO y)\n  endif()\n\n  # Apply configuration for hashing\n  if(SB_CONFIG_SECURE_BOOT_HASH_TYPE_SHA256 AND NOT SB_CONFIG_SECURE_BOOT_APPCORE_HASH_TYPE_NONE)\n    if(SB_CONFIG_SECURE_BOOT_APPCORE_HASH_TYPE_HARDWARE)\n      set_config_bool(b0 CONFIG_SB_CRYPTO_CC310_SHA256 y)\n    elseif(SB_CONFIG_SECURE_BOOT_APPCORE_HASH_TYPE_SOFTWARE)\n      set_config_bool(b0 CONFIG_SB_CRYPTO_OBERON_SHA256 y)\n    elseif(SB_CONFIG_SECURE_BOOT_APPCORE_HASH_TYPE_UNUSED)\n      set_config_bool(b0 CONFIG_SB_CRYPTO_NO_SHA256 y)\n    endif()\n  elseif(SB_CONFIG_SECURE_BOOT_HASH_TYPE_NONE OR SB_CONFIG_SECURE_BOOT_APPCORE_HASH_TYPE_NONE)\n    set_config_bool(b0 CONFIG_SB_CRYPTO_NONE y)\n  endif()\n\n  if(SB_CONFIG_SECURE_BOOT_SIGNATURE_TYPE_ED25519)\n    if(SB_CONFIG_SECURE_BOOT_APPCORE_SIGNATURE_TYPE_HARDWARE)\n      set_config_bool(b0 CONFIG_NRF_SECURITY y)\n      set_config_bool(b0 CONFIG_SB_CRYPTO_PSA_ED25519 y)\n    endif()\n  elseif(SB_CONFIG_SECURE_BOOT_SIGNATURE_TYPE_ECDSA)\n    if(SB_CONFIG_SECURE_BOOT_APPCORE_SIGNATURE_TYPE_HARDWARE)\n      set_config_bool(b0 CONFIG_SB_CRYPTO_CC310_ECDSA_SECP256R1 y)\n    elseif(SB_CONFIG_SECURE_BOOT_APPCORE_SIGNATURE_TYPE_SOFTWARE)\n      set_config_bool(b0 CONFIG_SB_CRYPTO_OBERON_ECDSA_SECP256R1 y)\n    elseif(SB_CONFIG_SECURE_BOOT_APPCORE_SIGNATURE_TYPE_UNUSED)\n      set_config_bool(b0 CONFIG_SB_CRYPTO_NO_ECDSA_SECP256R1 y)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for UDP Sample\nDESCRIPTION: Key configuration options that control UDP packet transmission size, frequency, server address, and port settings\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/udp/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nCONFIG_UDP_SAMPLE_DATA_UPLOAD_SIZE_BYTES\nCONFIG_UDP_SAMPLE_DATA_UPLOAD_FREQUENCY_SECONDS\nCONFIG_UDP_SAMPLE_SERVER_ADDRESS_STATIC\nCONFIG_UDP_SAMPLE_SERVER_PORT\n```\n\n----------------------------------------\n\nTITLE: Checking out Main Branch with west\nDESCRIPTION: Checks out the main branch of the nRF Connect SDK using the west tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nwest init -m https://github.com/nrfconnect/sdk-nrf --mr main main\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Device Kconfig Options\nDESCRIPTION: Kconfig options for configuring Matter device behavior, including unique identifier generation, fabric removal reactions, and storage functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_25\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_CHIP_DEVICE_GENERATE_ROTATING_DEVICE_UID=n\nCONFIG_CHIP_LAST_FABRIC_REMOVED_NONE=y\nCONFIG_CHIP_LAST_FABRIC_REMOVED_ERASE_ONLY=y\nCONFIG_CHIP_LAST_FABRIC_REMOVED_ERASE_AND_PAIRING_START=y\nCONFIG_CHIP_LAST_FABRIC_REMOVED_ERASE_AND_REBOOT=y\nCONFIG_CHIP_FACTORY_RESET_ERASE_SETTINGS=y\nCONFIG_CHIP_LAST_FABRIC_REMOVED_ACTION_DELAY=1000\n```\n\n----------------------------------------\n\nTITLE: Defining Chat Client Model in Composition Data Structure\nDESCRIPTION: This snippet demonstrates how to declare the Chat Client model in a node's composition data. The model is added as a vendor model in the third argument of the BT_MESH_ELEM macro.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/chat/chat_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic struct bt_mesh_elem elements[] = {\n    BT_MESH_ELEM(1,\n        BT_MESH_MODEL_LIST(\n            BT_MESH_MODEL_CFG_SRV(&cfg_srv),\n            BT_MESH_MODEL_HEALTH_SRV(&health_srv, &health_pub)),\n        BT_MESH_MODEL_LIST(\n            BT_MESH_MODEL_CHAT_CLI(&chat))),\n};\n```\n\n----------------------------------------\n\nTITLE: Estimating Total Charge with Network Behavior Compensation\nDESCRIPTION: Formula for estimating the total charge consumption by adjusting cDRX charge with a compensation factor to match real-world network behavior.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/optimizing/power_nrf91.rst#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n(Total charge - cDRX charge) + cDRX charge * 1.5 = (99.59 mC - 68.89 mC) + 68.89 mC * 1.5 = 134.04 mC (which is close to the 116.57 mC from the Power Profiler Kit II measurements).\n```\n\n----------------------------------------\n\nTITLE: Set CMD Radio Channel - Custom Command Usage\nDESCRIPTION: This command sets the radio channel of the CMD device using four byte arguments representing channel page and number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ncustom lsetchannel *<channel:3>* *<channel:2>* *<channel:1>* *<channel:0>*\n```\n\n----------------------------------------\n\nTITLE: Triggering Device Self-Test Command in Console\nDESCRIPTION: Triggers a self-test on the Smoke CO Alarm device using specified node and endpoint IDs. No additional dependencies are required. Expected inputs are the node and endpoint IDs, while the outputs include sequential LED flash indications for 5 seconds.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/smoke_co_alarm/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n./chip-tool smokecoalarm self-test-request <node_id> <endpoint_id>\n```\n\n----------------------------------------\n\nTITLE: Lock State Update Sources\nDESCRIPTION: Describes the multiple sources capable of updating the lock state in the system, including NUS (Nordic UART Service), physical buttons, and Matter stack integration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nThe new lock state is updated after changing the state from any of the following sources: NUS, buttons, Matter stack.\n```\n\n----------------------------------------\n\nTITLE: Getting CMD TX antenna ID with lgettxantenna command in Shell\nDESCRIPTION: Retrieves the antenna currently used by the CMD device for TX operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\ncustom lgettxantenna\n```\n\n----------------------------------------\n\nTITLE: GPIO Control Command Example\nDESCRIPTION: Example command to control GPIO pin 28 to turn on LED 1 on the nRF5340 DK by setting the pin state to low (0).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_57\n\nLANGUAGE: plaintext\nCODE:\n```\ncustom lsetgpio *28* 0\n```\n\n----------------------------------------\n\nTITLE: Including Stats Module Source File in Nordic SDK (C)\nDESCRIPTION: This snippet conditionally includes the source file 'stats.c' if the configuration flag 'CONFIG_APP_MODULE_STATS_ENABLE' is defined. This allows the integration of statistical features into the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/modules/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\ntarget_sources_ifdef(CONFIG_APP_MODULE_STATS_ENABLE            app PRIVATE stats.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Hardware Unique Key Partition Property in CMake\nDESCRIPTION: Sets a global property for the hardware unique key partition hex file path. This property points to a dummy HUK (Hardware Unique Key) hex file located in the current directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/fprotect/negative/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(GLOBAL PROPERTY\n  hw_unique_key_partition_PM_HEX_FILE ${CMAKE_CURRENT_LIST_DIR}/dummy_huk.hex\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Section and Including External Content in reStructuredText\nDESCRIPTION: This snippet defines a section for nRF5340 samples, sets up a table of contents, and includes external content from a separate file. It uses reStructuredText directives to structure the document.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/nrf5340.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _nrf5340_samples:\n\nnRF5340 samples\n###############\n\nThis section lists the |NCS| samples specific to :ref:`developing with the nRF5340 SoC <ug_nrf53>`.\n\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/nrf5340/*/README\n   ../../../samples/nrf_rpc/entropy_nrf53/README\n```\n\n----------------------------------------\n\nTITLE: Setting ACL on Light Bulb\nDESCRIPTION: Configures the Access Control List on the Light Bulb to allow group-based access to the on/off cluster endpoint.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./chip-tool accesscontrol write acl '[{\"fabricIndex\":1,\"privilege\":5,\"authMode\":2,\"subjects\":[112233],\"targets\":null},{\"fabricIndex\":1,\"privilege\":3,\"authMode\":3,\"subjects\":[30001],\"targets\":[{\"cluster\":null,\"endpoint\":1,\"deviceType\":null}]}]' 2 0\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for SUIT Directive Fetch\nDESCRIPTION: A YAML snippet for configuring the SUIT manifest to fetch an image using a URI matching the CONFIG_SUIT_DFU_CACHE_EXTRACT_IMAGE_URI Kconfig option. This ensures the fetch directive uses the same URI that was used when pushing the image to the DFU cache partition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_push.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- suit-directive-override-parameters:\n   suit-parameter-uri: \"{{ application['config']['CONFIG_SUIT_DFU_CACHE_EXTRACT_IMAGE_URI'] }}\"\n- suit-directive-fetch:\n  - suit-send-record-failure\n```\n\n----------------------------------------\n\nTITLE: Ensure Update of TF-M Configuration on Zephyr Changes\nDESCRIPTION: This snippet configures CMake to re-run the TF-M configuration if any Zephyr configuration changes, ensuring that the build reflects the latest settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/tfm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${ZEPHYR_AUTOCONF})\nset_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${ZEPHYR_DOTCONFIG})\n```\n\n----------------------------------------\n\nTITLE: Telemetry Message Format in JSON\nDESCRIPTION: Example JSON structure for telemetry messages sent from the device to Azure IoT Hub. Contains temperature readings and device uptime timestamp.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/azure_iot_hub/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"temperature\": 25.2,\n  \"timestamp\": 151325\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UART Device for AT Host in Devicetree\nDESCRIPTION: This devicetree snippet demonstrates how to change the UART device used by the AT Host library from the default uart0 to uart1 using the ncs,at-host-uart choice.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_host.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n   chosen {\n      ncs,at-host-uart = &uart1;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Stopping zperf UDP/TCP download\nDESCRIPTION: This command stops the ongoing zperf UDP or TCP download. It is used to terminate the download process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nzperf <udp/tcp> download stop\n```\n\n----------------------------------------\n\nTITLE: Building CoreMark with Heap Memory Configuration\nDESCRIPTION: Command to build the CoreMark benchmark using heap memory allocation method.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/benchmarks/coremark/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b *board_target* -- -DFILE_SUFFIX=heap_memory\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot Direct-XIP Mode Rejection in Kconfig\nDESCRIPTION: Kconfig option to enable rejection of update image uploads for invalid slots when using MCUboot in direct-xip mode. This helps prevent invalid firmware updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_smp.rst#2025-04-21_snippet_2\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MCUMGR_GRP_IMG_REJECT_DIRECT_XIP_MISMATCHED_SLOT=y\n```\n\n----------------------------------------\n\nTITLE: Uploading a New Image\nDESCRIPTION: Command to upload a new image to a device using the MCUmgr CLI.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nmcumgr <connection-options> image upload [-n] [-e] [-u] [-w] <signed-bin>\n```\n\n----------------------------------------\n\nTITLE: Include CMake Modules\nDESCRIPTION: These CMake commands append the path to custom modules and include several CMake files containing specific functionality. This imports necessary functions and configurations for building and managing the application, netcore, secure boot, mcuboot, SUIT, and HPF (High-Performance Firmware) components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH ${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/modules)\ninclude(ncs_sysbuild_extensions)\ninclude(${CMAKE_CURRENT_LIST_DIR}/extensions.cmake)\ninclude(${CMAKE_CURRENT_LIST_DIR}/appcore.cmake)\ninclude(${CMAKE_CURRENT_LIST_DIR}/netcore.cmake)\ninclude(${CMAKE_CURRENT_LIST_DIR}/secureboot.cmake)\ninclude(${CMAKE_CURRENT_LIST_DIR}/mcuboot.cmake)\ninclude(${CMAKE_CURRENT_LIST_DIR}/suit.cmake)\ninclude(${CMAKE_CURRENT_LIST_DIR}/hpf.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring PWM Node in Devicetree\nDESCRIPTION: This snippet shows how to enable and configure the PWM0 node by setting its status to \"okay\" and assigning pins to its channels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/add_new_led_example.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n&pwm0 {\n        status = \"okay\"; // Status\n        ch0-pin = <6>; // Pin assignment for channel 0\n        ch1-pin = <7>; // Pin assignment for channel 1\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies\nDESCRIPTION: This snippet lists the Python dependencies required for the project. It includes pynrfjprog for Nordic Semiconductor programming, matplotlib for data visualization, and numpy for numerical computations. These dependencies need to be installed to ensure proper project functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/nrf_profiler/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n\"pynrfjprog\\nmatplotlib>=3.5.2\\nnumpy\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving EUI64 Identifier in CLI Sample\nDESCRIPTION: Command to get the EUI64 identifier of the Joiner device in the OpenThread CLI sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot eui64\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for HID State Power Manager\nDESCRIPTION: Documentation defining the structure and functionality of the HID state power manager module, including configuration options, event handling, and implementation details.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/hid_state_pm.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _nrf_desktop_hid_state_pm:\n\nHID state power manager module\n##############################\n\n.. contents::\n   :local:\n   :depth: 2\n\nThe |hid_state_pm| is a minor module that prevents suspending the device when HID reports are exchanged with the host.\n\nModule events\n*************\n\n.. include:: event_propagation.rst\n    :start-after: table_hid_state_pm_start\n    :end-before: table_hid_state_pm_end\n\n.. note::\n    |nrf_desktop_module_event_note|\n\nConfiguration\n*************\n\nThe module is enabled by :ref:`CONFIG_DESKTOP_HID_STATE_PM_ENABLE <config_desktop_app_options>` Kconfig option.\nThe option depends on the :kconfig:option:`CONFIG_CAF_POWER_MANAGER` and :ref:`CONFIG_DESKTOP_HID_STATE_ENABLE <config_desktop_app_options>` Kconfig options.\nThe option is enabled by default.\n\nImplementation details\n**********************\n\nThe module relies on :c:struct:`hid_report_event` to detect HID report exchange.\n\n.. note::\n   In the nRF Desktop application, most of the HID reports are broadcasted as :c:struct:`hid_report_event`, but there are exceptions.\n   For example, the :ref:`nrf_desktop_config_channel` uses HID feature reports or HID output reports as transport and the configuration channel data is broadcasted using :c:struct:`config_event` in the application.\n   Hence, the |hid_state_pm| does not prevent suspending the device when the configuration channel is in use.\n```\n\n----------------------------------------\n\nTITLE: Source Files Configuration for LwM2M Testing\nDESCRIPTION: Configures source files for the application, including LwM2M registry, firmware object, and utility files from Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/lwm2m_fota_utils/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources src/*.c )\ntarget_sources(app\n  PRIVATE\n    ${app_sources}\n    ${ZEPHYR_BASE}/subsys/net/lib/lwm2m/lwm2m_registry.c\n    ${ZEPHYR_BASE}/subsys/net/lib/lwm2m/lwm2m_obj_firmware.c\n    ${ZEPHYR_BASE}/subsys/net/lib/lwm2m/lwm2m_util.c\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Timing Function Sources (CMake)\nDESCRIPTION: Conditionally adds timing function source files if timing functions are enabled and the board does not have them. If the DWT is not present, a Nordic-specific timing implementation is used.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_SOC_HAS_TIMING_FUNCTIONS AND NOT CONFIG_BOARD_HAS_TIMING_FUNCTIONS)\n  if(CONFIG_TIMING_FUNCTIONS)\n    # Use nRF-specific timing calculations only if DWT is not present\n    if(NOT CONFIG_CORTEX_M_DWT)\n      zephyr_library_sources(${ZEPHYR_BASE}/soc/nordic/timing.c)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Verifying Device Lifecycle State\nDESCRIPTION: Command to check the lifecycle state of the nRF54H20 device\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-adac-discovery --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: LTE Link Control with Modem Shell\nDESCRIPTION: Use the LTE link control commands within the Modem Shell to manage and query LTE connection states, modify functional modes, and handle advanced features like eDRX and PSM. Dependencies include the LTE link control driver. Commands are executed in sequence, affecting modem configurations like switching modes and managing PDP contexts.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nlink funmode -4\nlink sysmode -n\nlink funmode -1\nlink status\n```\n\nLANGUAGE: console\nCODE:\n```\nlink connect -a internet.operator.com\nlink status\nlink disconnect -I 1\n```\n\nLANGUAGE: console\nCODE:\n```\nlink edrx -e --ltem_edrx 0010 --nbiot_edrx 0010\n```\n\nLANGUAGE: console\nCODE:\n```\nlink tau --subscribe\nlink msleep --subscribe\nlink psm -e --rptau 01100100 --rat 00100010\n```\n\nLANGUAGE: console\nCODE:\n```\nlink nmodeauto --disable\n```\n\nLANGUAGE: console\nCODE:\n```\nlink funmode --poweroff\nlink nmodeat --mem1 \"at%xbandlock=2,\\\"100\\\"\"\nlink funmode --normal\n```\n\nLANGUAGE: console\nCODE:\n```\nlink search --write --search_cfg=\"0,1,1\" --search_pattern_table=\"10,10,30\" --search_pattern_range=\"50,300,10,20\"\nlink search --read\nlink search --start\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT SMP Transfer Project in CMake\nDESCRIPTION: Sets up the CMake project for SUIT SMP Transfer, including required Zephyr dependencies, source files, and conditional Bluetooth transport support. The file includes the main.c source and references code from the Zephyr SDK's MCUmgr SMP server sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/smp_transfer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(suit_smp_transfer)\n\ntarget_sources(app PRIVATE src/main.c)\n\n# This project uses orginal sdk-zephyr C source code\ntarget_include_directories(app PRIVATE $ENV{ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src)\ntarget_sources_ifdef(CONFIG_MCUMGR_TRANSPORT_BT app PRIVATE $ENV{ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src/bluetooth.c)\n```\n\n----------------------------------------\n\nTITLE: Rebooting to bootloader mode\nDESCRIPTION: The bootloader command reboots the device in bootloader mode. Note: This command is only available for the `nrf52840dongle/nrf52840` board.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"bootloader\"\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Project\nDESCRIPTION: These commands add the specified C source files ('main.c', 'combined_bis_cis.c', 'iso_tx.c', and 'iso_rx.c') to the target 'app,' which compiles them as part of this application's build. This ensures that all necessary functionality is included.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_combined_bis_and_cis/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/combined_bis_cis.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/iso_tx.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/iso_rx.c)\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Set State of Images Request in SUIT SMP Protocol\nDESCRIPTION: Defines the CBOR request format for triggering the installation process of a SUIT envelope stored in the DFU partition. This simple structure requires the 'confirm' field to be set to true to initiate the installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_2\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str)\"confirm\" : (bool) //Must be set to \"true\".\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Child/Parent Images in Twister YAML\nDESCRIPTION: YAML configuration to use child/parent images for Twister test cases. Note that this is deprecated in NCS 2.7 and will be removed in NCS 2.9.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_sysbuild.rst#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsysbuild: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Server as Bootstrap Server\nDESCRIPTION: AT command to indicate if the custom server is a bootstrap server. Uses 0 for non-bootstrap or 1 for bootstrap server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_16\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"is_bootstrap\"[,<0|1>]\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package and Setting Sources\nDESCRIPTION: This snippet configures the CMake project by specifying the minimum required version, finding the Zephyr package, and listing the source files for the application. It uses a glob pattern to include all C source files from the 'src' directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/peripheral_load/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(periph_stress)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Adding Application Sources\nDESCRIPTION: This code snippet finds all C source files within the specified directory and adds them to the `app` target as private sources. `FILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/watchdog/wdt_error_cases/src/*.c)` finds all .c files and then `target_sources(app PRIVATE ${app_sources})` includes them.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/watchdog/wdt_error_cases/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"FILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/watchdog/wdt_error_cases/src/*.c)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_sources(app PRIVATE ${app_sources})\"\n```\n\n----------------------------------------\n\nTITLE: Command for Uploading Networking Image\nDESCRIPTION: This command snippet details the usage of the 'mcumgr' tool for uploading the networking image to the network core. It defines required parameters like build directory, image name, and serial connection configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/serial_recovery.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n./mcumgr image upload <build_dir_path>/signed_by_mcuboot_and_b0_<app_name>.bin -e -n 3 -c serial_conn\n```\n\n----------------------------------------\n\nTITLE: DFU Status Macros in C\nDESCRIPTION: Constants defining the possible states of the DFU process during firmware updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dfu.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nDFU_STATE_ACTIVE_OTHER\nDFU_STATE_CLEANING\nDFU_STATE_STORING\nDFU_STATE_ACTIVE_CONFIG_CHANNEL\nDFU_STATE_INACTIVE\n```\n\n----------------------------------------\n\nTITLE: Application Core Channel Assignments\nDESCRIPTION: Channel ID assignments for PPR and FLPR when owned by the Application core\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_architecture_ipc.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPPR                12\nFLPR               13\n```\n\n----------------------------------------\n\nTITLE: AT Command String Parameter Format\nDESCRIPTION: Shows the required format for string type parameters in AT commands, which must be enclosed in quotation marks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT Commands\nCODE:\n```\n\"string\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Images with Kconfig.sysbuild\nDESCRIPTION: A Kconfig fragment file that defines options for enabling custom images in a sysbuild project. This example shows how to create configuration options for a custom image named 'ABC'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/sysbuild_images.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nconfig MY_APP_IMAGE_ABC\n    bool \"Include ABC image\"\n    depends on SOC_SERIES_NRF53X\n    default y if BOARD_NRF5340DK_NRF5340_CPUAPP\n    help\n      Will include the ABC image in the build, which will...\n\nsource \"${ZEPHYR_BASE}/share/sysbuild/Kconfig\"\n```\n\n----------------------------------------\n\nTITLE: Compiler Options Configuration\nDESCRIPTION: Sets compiler options for Bluetooth mesh configuration including model counts, log levels, timeouts, and security settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/scheduler_model/action_planning/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_BT_MESH_MODEL_KEY_COUNT=5\n  -DCONFIG_BT_MESH_MODEL_GROUP_COUNT=5\n  -DCONFIG_BT_LOG_LEVEL=0\n  -DCONFIG_BT_MESH_SCHEDULER_SRV=1\n  -DCONFIG_BT_MESH_MODEL_LOG_LEVEL=0\n  -DCONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE=0\n  -DCONFIG_BT_MESH_MOD_ACKD_TIMEOUT_PER_HOP=0\n  -DCONFIG_BT_MESH_USES_MBEDTLS_PSA=1\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial LTE Modem Auto-Connect in Kconfig\nDESCRIPTION: New Kconfig option added to support automatic LTE connection at start-up or reset in the Serial LTE Modem application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.6.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_SLM_AUTO_CONNECT\n```\n\n----------------------------------------\n\nTITLE: Data Mode Read Command\nDESCRIPTION: Command to check the current time limit configuration and minimum required value based on UART baud rate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_data_mode.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XDATACTRL?\n```\n\n----------------------------------------\n\nTITLE: Configuring Project for Integration Test Manifest Variables\nDESCRIPTION: Defines the project name and includes a custom CMake test template for integration testing of manifest variables\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/manifest_variables/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(integration_test_manifest_variables)\ninclude(../cmake/test_template.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Partitions for Flash Companion in DeviceTree\nDESCRIPTION: This snippet demonstrates how to create a dedicated partition in non-volatile memory for the flash companion and adjust the main application's partition size. It also shows how to enable the SPI NOR devicetree node for nRF54H20 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/flash_companion/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n&cpuapp_rx_partitions {\n    cpuapp_slot0_partition: partition@a6000 {\n        reg = <0xa6000 DT_SIZE_K(324)>;\n    };\n    companion_partition: partition@f7000 {\n        reg = <0xf7000 DT_SIZE_K(36)>;\n    };\n};\n\n&mx25uw63 {\n    status = \"okay\";\n};\n```\n\n----------------------------------------\n\nTITLE: Project Setup and Firmware Info Generation\nDESCRIPTION: Sets up the project name and generates firmware information file using template substitution.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(NRF5340_AUDIO)\n\nstring(TIMESTAMP NRF5340_AUDIO_CORE_APP_COMP_DATE \"%a %b %d %H:%M:%S %Y\")\n\n# Generate fw_info_app.c\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/utils/fw_info_app.c.in\"\n               \"${CMAKE_BINARY_DIR}/fw_info_app.c\"\n               @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Firmware Patch DFU in Kconfig\nDESCRIPTION: New Kconfig option added to enable DFU support for nRF70 Series devices, allowing firmware patches for signed images to be sent over Wi-Fi.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.6.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NRF_WIFI_FW_PATCH_DFU\n```\n\n----------------------------------------\n\nTITLE: Setting Reduced Mobility Mode with nRF Modem AT Commands in C\nDESCRIPTION: Shows how to set the reduced mobility mode using nRF Modem AT commands, replacing the deprecated lte_lc_reduced_mobility_set function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_17\n\nLANGUAGE: C\nCODE:\n```\n#include <nrf_modem_at.h>\n\nerr = nrf_modem_at_printf(\"AT%%REDMOB=0\");\n```\n\n----------------------------------------\n\nTITLE: Configuring WiFi Support for Thingy91X NRF9151\nDESCRIPTION: Adds WiFi support library sources when WiFi is enabled for Thingy91X NRF9151 boards\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/boards/nordic/thingy91x/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_WIFI_NRF70)\n  if(CONFIG_BOARD_THINGY91X_NRF9151 OR CONFIG_BOARD_THINGY91X_NRF9151_NS)\n    zephyr_library()\n    zephyr_library_sources(nrf70_support.c)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Wi-Fi and Bluetooth LE Sample with Coexistence Enabled\nDESCRIPTION: Command for building the sample with coexistence enabled. Use this configuration for testing concurrent Wi-Fi and Bluetooth LE throughput with the coexistence mechanism active.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_MPSL_CX=y -Dipc_radio_CONFIG_MPSL_CX=y\n```\n\n----------------------------------------\n\nTITLE: Processing SMP Response in C for Bluetooth DFU\nDESCRIPTION: This code demonstrates how to process SMP responses. Use bt_dfu_smp_rsp_state to access the current part of the response data and bt_dfu_smp_rsp_total_check to verify if this is the last part of the response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/dfu_smp.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbt_dfu_smp_rsp_state(/* response parameters */)\nbt_dfu_smp_rsp_total_check(/* check parameters */)\n```\n\n----------------------------------------\n\nTITLE: Radio Notification Connection Callback Timing Constant in C\nDESCRIPTION: Recommended timing constant for configuring the prepare callback when using peripheral latency. This constant ensures sufficient time for the Bluetooth stack to start high frequency clock and radio peripheral if needed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/radio_notification_conn_cb.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nBT_RADIO_NOTIFICATION_CONN_CB_PREPARE_DISTANCE_US_RECOMMENDED\n```\n\n----------------------------------------\n\nTITLE: Setting LED Color for nRF54L05/nRF54L10 PWM Hardware Peripheral Limitation\nDESCRIPTION: Code example showing how to set LED color to ensure the PWM peripheral is not used for specific LEDs (LED 0 and LED 2) on the nRF54L05/nRF54L10 SoCs due to GPIO1 port limitations for PWM output.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/board_configuration.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nLED_COLOR(255, 255, 255)\n```\n\nLANGUAGE: c\nCODE:\n```\nLED_COLOR(0, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Adding Firmware Loader Application in CMake\nDESCRIPTION: This CMake code snippet demonstrates how to add the firmware loader application to the build using ExternalZephyrProject_Add. The APPLICATION variable is set to firmware_loader, which corresponds to the name of the partition defined in the static partition file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n\"ExternalZephyrProject_Add(\\n  APPLICATION firmware_loader\\n  SOURCE_DIR <path_to_firmware_loader_application>\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Running Minicom for DTM Serial Communication\nDESCRIPTION: Command to run Minicom terminal for Direct Test Mode communication, specifying the DTM serial port and entering setup mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/direct_test_mode/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo minicom -D /dev/serial/by-id/usb-SEGGER_J-Link_000683580193-if00 -s\n```\n\n----------------------------------------\n\nTITLE: Programming SoC binaries for nRF54H20 Engineering B DK\nDESCRIPTION: Command for programming the SoC binaries on an nRF54H20 Engineering B development kit using the SUIT DFU method.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-suit-dfu --firmware nrf54h20_soc_binaries_v0.7.0_<revision>.zip --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: MTU Negotiation for Bluetooth DFU SMP\nDESCRIPTION: This snippet demonstrates the need for MTU negotiation in the exchange process. Most DFU operations require a larger MTU size than the default, calling for explicit MTU negotiation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/dfu_smp.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nbt_gatt_exchange_mtu(/* parameters */)\n```\n\n----------------------------------------\n\nTITLE: Checking for nRF Platform Compatibility\nDESCRIPTION: Verifies that the code is running on an nRF platform by checking the SOC_FAMILY_NORDIC_NRF configuration flag. Returns early if not on a Nordic platform as this implementation only works with nRF security.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/hostap_crypto/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED CONFIG_SOC_FAMILY_NORDIC_NRF)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Debug Pins in Devicetree\nDESCRIPTION: Devicetree configuration to enable output pin state changes for debugging Distance Measurement module timing. This helps visualize ranging requests and timeslot assignments using logic analyzers or oscilloscopes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/dm.rst#2025-04-21_snippet_1\n\nLANGUAGE: DTS\nCODE:\n```\n/ {\n   dm_gpio {\n      compatible = \"gpio-leds\";\n      dm_ranging: dm-ranging {\n         gpios = <&gpio0 27 GPIO_ACTIVE_LOW>;\n         label = \"DM Ranging Pin\";\n      };\n      dm_add_request: dm-add-request {\n         gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;\n         label = \"DM Add request Pin\";\n      };\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Fix Acquired with GNSS Module in Console\nDESCRIPTION: Displays the GNSS tracking information and NMEA strings upon acquiring a fix. It outputs detailed positioning data such as latitude, longitude, altitude, and accuracy.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/gnss/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nTracking:  7 Using:  5 Unhealthy: 0\n-----------------------------------\nLatitude:       61.491275\nLongitude:      23.771611\nAltitude:       116.3 m\nAccuracy:       4.2 m\nSpeed:          0.0 m/s\nSpeed accuracy: 0.8 m/s\nHeading:        0.0 deg\nDate:           2020-03-06\nTime (UTC):     05:48:24\nPDOP:           3.1\nHDOP:           2.1\nVDOP:           2.3\nTDOP:           1.8\n\nNMEA strings:\n\n$GPGGA,054824.58,6129.28608,N,02346.17887,E,1,07,2.05,116.27,M,0,,*22\n$GPGLL,6129.28608,N,02346.17887,E,054824.58,A,A*6B\n$GPGSA,A,3,10,12,17,24,28,,,,,,,,3.05,2.05,2.25,1*13\n$GPGSV,2,1,7,17,50,083,41,24,68,250,38,10,14,294,46,28,23,071,38,1*56\n$GPGSV,2,2,7,12,29,240,36,19,00,000,32,1,00,000,33,1*50\n$GPRMC,054824.58,A,6129.28608,N,02346.17887,E,0.08,0.00,030620,,,A,V*29\n---------------------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring TF-M for Minimal Build in Kconfig\nDESCRIPTION: This Kconfig option enables the minimal TF-M build, which uses a 32 kB image and is enabled by default on nRF53 and nRF91 Series devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_building.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_TFM_PROFILE_TYPE_MINIMAL=y\n```\n\n----------------------------------------\n\nTITLE: TCP Accept Connection Command\nDESCRIPTION: Command to accept incoming TCP connections with timeout parameter and response showing connected client IP.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_12\n\nLANGUAGE: AT\nCODE:\n```\nAT#XACCEPT=60\n#XACCEPT: 2,\"192.168.0.2\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 DK\nDESCRIPTION: Command to build the sample for nRF7002 DK using west build system\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/offloaded_raw_tx/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Globbing SUIT Manifest Source Files\nDESCRIPTION: Uses FILE(GLOB) to collect manifest source files and adds them to the application target along with nRF54H20-specific storage implementation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/orchestrator/orchestrator_sdfw_nrf54h20/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB manifest_sources ../manifest/src/*.c)\ntarget_sources(app PRIVATE\n  ${manifest_sources}\n  # Use nRF54H20-specific implementation.\n  ${SUIT_SUBSYS_DIR}/storage/src/suit_storage_nrf54h20.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Generating Root CA Certificate\nDESCRIPTION: Generates a self-signed root CA certificate and private key using the cert_tool.py script.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_7\n\nLANGUAGE: Console\nCODE:\n```\ncert_tool.py root_ca\n```\n\n----------------------------------------\n\nTITLE: Building for memory-optimized profile\nDESCRIPTION: This command builds the throughput sample for the nRF7002 DK with the memory-optimized profile for Station mode. It utilizes the `overlay-memory-optimized.conf` configuration file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DEXTRA_CONF_FILE=overlay-memory-optimized.conf\n```\n\n----------------------------------------\n\nTITLE: Console Output - CoAP Response Format\nDESCRIPTION: Demonstrates the format of CoAP responses including the response code and payload containing timestamp data from the server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/coap_client/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nCoAP GET request sent sent to californium.eclipseprojects.io, resource: obs\nCoAP response: code: 0x45, payload: 15:29:45\n```\n\n----------------------------------------\n\nTITLE: Bypassing Regulatory Domain with wifi_radio_test\nDESCRIPTION: This snippet demonstrates how to bypass the regulatory domain using the `wifi_radio_test` command. It sets the `bypass_reg_domain` parameter to 1.  The `show_config` subcommand then displays the configured regulatory domain and bypass status, confirming the setting.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test bypass_reg_domain 1\n```\n\n----------------------------------------\n\nTITLE: SUIT Manifests Information Output\nDESCRIPTION: Sample output from the nrfutil command showing manifest information including classId, vendorId, policies, and sequence numbers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nrole(10) (Nordic Top)\n   classId: f03d385e-a731-5605-b15d-037f6da6097f (nRF54H20_nordic_top)\n   vendorId: 7617daa5-71fd-5a85-8f94-e28d735ce9f4 (nordicsemi.com)\n   downgradePreventionPolicy: downgrade forbidden\n   independentUpdateabilityPolicy: independent update allowed\n   signatureVerificationPolicy: signature verification on update and boot\n   digest: 3e979cf7bf71f980c1b29f3479eb62399bec20127b4fc41664e98cac60499445\n   digestAlgorithm: sha256\n   signatureCheck: signature check passed\n   sequenceNumber: 590592\n   semantic version: 0.9.3\n\n...\n\nrole(20) (Root Manifest)\n   classId: 3f6a3a4d-cdfa-58c5-acce-f9f584c41124 (nRF54H20_sample_root)\n   vendorId: 7617daa5-71fd-5a85-8f94-e28d735ce9f4 (nordicsemi.com)\n   downgradePreventionPolicy: downgrade forbidden\n   independentUpdateabilityPolicy: independent update allowed\n   signatureVerificationPolicy: signature verification on update and boot\n```\n\n----------------------------------------\n\nTITLE: Including Directories in DECT PHY App\nDESCRIPTION: Adds the current directory to the include directories of the 'app' target. This allows the application to find header files located in the current directory during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/dect/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Impulse Wrapper Application Build in CMake\nDESCRIPTION: Complete CMake configuration for building an Edge Impulse wrapper sample application using the Nordic SDK and Zephyr RTOS. It sets the minimum CMake version to 3.20.0, finds the Zephyr package, defines the project name, and specifies include directories and source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/edge_impulse/wrapper/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2021 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Edge Impulse wrapper sample\")\n\n# NORDIC SDK APP START\ntarget_include_directories(app PRIVATE src/include)\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring the HIDS Client Library with Kconfig\nDESCRIPTION: These Kconfig options enable the HIDS Client library and configure the maximum number of reports it can handle. The CONFIG_BT_HOGP option activates the library, while CONFIG_BT_HOGP_REPORTS_MAX sets the memory allocation for report storage across all HIDS Client instances.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/hogp.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_HOGP - Enable the library in the application build.\nCONFIG_BT_HOGP_REPORTS_MAX - Set the maximum number of total reports supported by the library.\n```\n\n----------------------------------------\n\nTITLE: Including Fabric Table Delegate Header in C++\nDESCRIPTION: This snippet shows how to include the 'fabric_table_delegate.h' header in the 'app_task.cpp' project file to enable predefined reactions to Matter fabric removal. It is a prerequisite step for implementing fabric removal behaviors.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/last_fabric_removal_delegate.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include \"fabric_table_delegate.h\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic SDK Project\nDESCRIPTION: Sets up the basic CMake configuration for a Nordic SDK project. Specifies minimum CMake version, finds the Zephyr package, and adds the main source file to the build target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_uart/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2018 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Deleting a Scene\nDESCRIPTION: This command deletes an existing scene identified by the given scene number, confirming the deletion with a response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scene_cli.rst#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models scene delete <Scene>\n```\n\n----------------------------------------\n\nTITLE: TF-M Build Support in Zephyr\nDESCRIPTION: Configures directories related to TF-M if CONFIG_BUILD_WITH_TFM is enabled. It sets up TFM_BINARY_DIR and includes necessary headers for API NS interfaces, enhancing security integration with Trusted Firmware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/zephyr/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_BUILD_WITH_TFM)\n  set(TFM_BINARY_DIR ${CMAKE_BINARY_DIR}/tfm)\n\n  zephyr_include_directories(\n    ${TFM_BINARY_DIR}/api_ns/interface/include\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Light CTL Client Instance - Command Syntax\nDESCRIPTION: Selects the Light CTL Client model instantiated on the specified element ID for message sending.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl instance set <ElemIdx>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include SUIT MCI Implementation (CMake)\nDESCRIPTION: Conditionally includes a source file based on the `CONFIG_SUIT_MCI_IMPL_SDFW` configuration option. If this option is enabled, it includes a source file named `src/suit_mci_${CONFIG_SOC}.c`, likely containing the SoC-specific implementation of the SUIT MCI.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/mci/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(CONFIG_SUIT_MCI_IMPL_SDFW)\n  zephyr_library_sources(src/suit_mci_${CONFIG_SOC}.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Crypto and PSA Implementation\nDESCRIPTION: Sets up include directories and source files for legacy cryptography implementations or PSA (Platform Security Architecture) based implementations. Includes core crypto functions and optional enterprise or test features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/hostap_crypto/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED CONFIG_HOSTAP_CRYPTO_ALT_LEGACY OR\n   DEFINED CONFIG_HOSTAP_CRYPTO_ALT_LEGACY_PSA)\n  zephyr_include_directories(\n    ${HOSTAP_BASE}/port/mbedtls\n  )\n\n  zephyr_library_sources(\n    ${HOSTAP_SRC_BASE}/crypto/crypto_mbedtls_alt.c\n    ${HOSTAP_SRC_BASE}/crypto/rc4.c\n    ${HOSTAP_SRC_BASE}/crypto/aes-wrap.c\n    ${HOSTAP_SRC_BASE}/crypto/aes-unwrap.c\n    ${HOSTAP_SRC_BASE}/crypto/aes-internal-dec.c\n    ${HOSTAP_SRC_BASE}/crypto/aes-internal.c\n    ${HOSTAP_SRC_BASE}/crypto/aes-internal-enc.c\n  )\n\n  zephyr_library_sources_ifdef(CONFIG_HOSTAP_CRYPTO_MBEDTLS_PSA\n    ${HOSTAP_BASE}/port/mbedtls/supp_psa_api.c\n  )\n\n  zephyr_library_sources_ifdef(CONFIG_HOSTAP_CRYPTO_ENTERPRISE\n    ${HOSTAP_SRC_BASE}/crypto/des-internal.c\n    ${HOSTAP_SRC_BASE}/crypto/ms_funcs.c\n    ${HOSTAP_SRC_BASE}/crypto/aes-eax.c\n    ${HOSTAP_SRC_BASE}/crypto/md4-internal.c\n    ${HOSTAP_SRC_BASE}/crypto/sha1-internal.c\n    ${HOSTAP_SRC_BASE}/crypto/fips_prf_internal.c\n    ${HOSTAP_SRC_BASE}/crypto/milenage.c\n    ${HOSTAP_SRC_BASE}/crypto/tls_mbedtls_alt.c\n  )\n\n  zephyr_library_sources_ifndef(CONFIG_HOSTAP_CRYPTO_ENTERPRISE\n    ${HOSTAP_SRC_BASE}/crypto/tls_none.c\n  )\n\n\n  zephyr_library_sources_ifdef(CONFIG_HOSTAP_CRYPTO_TEST\n    ${HOSTAP_SRC_BASE}/crypto/crypto_module_tests.c\n    ${HOSTAP_SRC_BASE}/crypto/fips_prf_internal.c\n    ${HOSTAP_SRC_BASE}/crypto/sha1-internal.c\n    ${HOSTAP_SRC_BASE}/crypto/sha1-tlsprf.c\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling Motion Detector Test Mode (kconfig)\nDESCRIPTION: This Kconfig option enables the test mode for the motion detector, which shortens the activation periods for testing purposes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DULT_MOTION_DETECTOR_TEST_MODE\n```\n\n----------------------------------------\n\nTITLE: Showing Current Configuration with Shell Command\nDESCRIPTION: Command to display the current configuration of all configured Broadcast Isochronous Groups, including streaming status, names, packing type, encryption status, and stream parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnac show\n```\n\n----------------------------------------\n\nTITLE: Script for Creating Device Credentials\nDESCRIPTION: A Python script that generates device credentials using self-signed CA certificates. It requires 'create_device_credentials.py', specific CA certificate files, and generates PEM files necessary for device onboarding. Can only be used if proper security measures are in place as hard-coded credentials pose security risks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\npython3 create_device_credentials.py -ca \"self\\_\\ *self_cert_serial*\\ \\_ca.pem\" -ca_key \"self\\_\\ *self_cert_serial*\\ \\_prv.pem\" -c US -cn \"\\ *device_id*\\ \" -f cred\\_ -embed_save\n```\n\n----------------------------------------\n\nTITLE: Adding FOTA Source Files to Application Build in CMake\nDESCRIPTION: Specifies two FOTA-related source files to be compiled and linked as part of the 'app' target. This includes the main FOTA implementation file and a shell interface file for FOTA operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/fota/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/fota.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/fota_shell.c)\n```\n\n----------------------------------------\n\nTITLE: Measure RSSI - Custom Command Usage\nDESCRIPTION: This command retrieves the Received Signal Strength Indicator (RSSI) in dBm for the CMD device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_19\n\nLANGUAGE: text\nCODE:\n```\ncustom lgetrssi\n```\n\n----------------------------------------\n\nTITLE: Scanning for Bluetooth LE Devices\nDESCRIPTION: Matter CLI command for scanning available Bluetooth LE devices\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge scan\n```\n\n----------------------------------------\n\nTITLE: Building WiFi Shell Sample for nRF54L15 DK\nDESCRIPTION: Command to build the WiFi shell sample for nRF54L15 DK with nRF7002-EB II shield and nRF70-wifi snippet enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf7002eb2_dev_guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54l15dk/nrf54l15/cpuapp -- -Dshell_SHIELD=\"nrf7002eb2\" -Dshell_SNIPPET=nrf70-wifi\n```\n\n----------------------------------------\n\nTITLE: Calling RAM Power Down Function in C++\nDESCRIPTION: Function call to power down unused RAM sections in Matter applications. This is automatically called during the initialization process in the matter_init.cpp file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/low_power_configuration.rst#2025-04-21_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\npower_down_unused_ram();\n```\n\n----------------------------------------\n\nTITLE: Configure CMake with Zephyr in CMake\nDESCRIPTION: This CMake snippet sets the minimum required CMake version to 3.20.0 and locates the Zephyr package using the ZEPHYR_BASE environment variable. It defines a project named 'central_and_peripheral_hr'. Files from the 'src/main.c' source are included in the NORDIC SDK app, enabling development for Bluetooth central and peripheral roles using Nordic's SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_and_peripheral_hr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(central_and_peripheral_hr)\n\ntarget_sources(app PRIVATE\n  src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Factory Reset Configuration Options in Kconfig\nDESCRIPTION: Key Kconfig options required to enable and configure the factory reset module including configuration channel support, Fast Pair integration, and Bluetooth bond management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/factory_reset.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DESKTOP_CONFIG_CHANNEL_ENABLE\nCONFIG_BT_FAST_PAIR\nCONFIG_CAF_BLE_BOND_SUPPORTED\nCONFIG_DESKTOP_FACTORY_RESET\nCONFIG_BT_FAST_PAIR_STORAGE_USER_RESET_ACTION\nCONFIG_REBOOT\n```\n\n----------------------------------------\n\nTITLE: Parsing AT Command String in C\nDESCRIPTION: Parses a returned AT command string into a structured list of parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_parser.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nat_parser_params_from_str(returned_at_command_string);\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for IPSO Digital Output in C\nDESCRIPTION: Defines the basic data structure for the output data, which contains a boolean state field, and creates an array of these structures to support multiple instances.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_client_utils.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstruct output_data {\n   bool state;\n};\nstatic struct output_data output_data[MAX_INSTANCE_COUNT];\n```\n\n----------------------------------------\n\nTITLE: Boot Status Log for Variant A Update (Console)\nDESCRIPTION: Log message showing boot status after uploading and confirming variant A.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_41\n\nLANGUAGE: console\nCODE:\n```\nBoot preference: set A\nBoot status: image set A active\nConfirm status set A: not confirmed\nConfirm status set B: confirmed\n\n<inf> AB: Image set A not confirmed yet, testing...\n<inf> AB: Confirming...\n<inf> AB: Confirmed\n```\n\n----------------------------------------\n\nTITLE: Code Reference to FOTA Download Function\nDESCRIPTION: Reference to FOTA download function used as a workaround for connection loss during firmware updates. The function needs to be called again with same arguments to resume download.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.1.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nfota_download_start\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for MCUmgr SMP Client Test\nDESCRIPTION: Defines and sets the include directories for the project, including both local and SDK-specific paths.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/mcumgr_smp_client/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(includes\n\"src/\"\n${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/include\n)\n\ntarget_include_directories(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/dfu/include\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/fota_download/include\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/mcumgr_smp_client/include\n  ${includes}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring PWM Loopback Project with CMake\nDESCRIPTION: This CMake configuration sets up a PWM loopback project in the nRF Connect SDK environment. It requires CMake version 3.20.0 or higher, locates the Zephyr package using the ZEPHYR_BASE environment variable, and adds all C source files from the src directory to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/pwm/gpio_loopback/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(pwm_loopback)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Development Kits with nrfutil\nDESCRIPTION: Command to list all connected development kits and display their serial numbers, which are needed for device programming operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7_99-cs2.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device list\n```\n\n----------------------------------------\n\nTITLE: PDN Default Configuration AT Commands\nDESCRIPTION: AT command examples used by the PDN library for configuring PDP contexts and handling notifications\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/pdn.rst#2025-04-21_snippet_2\n\nLANGUAGE: ATCommands\nCODE:\n```\nAT+CGEREP=1\nAT+CNEC=16\nAT%XNEWCID\nAT+CGDCONT\nAT+CGACT\nAT%XGETPDNID\nAT+CGAUTH\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for SHA256 Project with nRF Connect SDK and Zephyr\nDESCRIPTION: This CMake script sets up the build environment for a SHA256 project. It requires CMake 3.20.0 or later, finds the Zephyr package, and adds the main.c source file to the project. The script is designed for use with the nRF Connect SDK and Zephyr RTOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/sha256/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(sha256)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor Simulator in Devicetree\nDESCRIPTION: Devicetree configuration snippet showing how to define instances of the sensor simulator. This configuration enables toggle-based acceleration signal generation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/sensor_sim.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\nsensor-sim {\n        compatible = \"nordic,sensor-sim\";\n        acc-signal = \"toggle\";\n};\n```\n\n----------------------------------------\n\nTITLE: AT Monitor Function Updates\nDESCRIPTION: Conversion of AT monitor macros to proper functions that take a pointer to the AT monitor entry.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nat_monitor_pause\nat_monitor_resume\n```\n\n----------------------------------------\n\nTITLE: Firmware Update Decision Flow Diagram in PlantUML\nDESCRIPTION: This PlantUML diagram defines the decision flow for firmware updates in the nRF Connect SDK. It determines which firmware set to update (A or B) based on the current boot status, checks version compatibility requirements, and processes the appropriate update packages (#top, #radio, #application) based on the conditions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/img/ab_root_payload_fetch.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nstart\n\nif (BOOT_STATUS == BOOT_A) then (yes)\n: SET_TO_UPDATE := SET_B ;\nelseif (BOOT_STATUS == BOOT_A_DEGRADED) then (yes)\n: SET_TO_UPDATE := SET_B ;\nelseif (BOOT_STATUS == BOOT_STATUS_A_NO_RADIO) then (yes)\n: SET_TO_UPDATE := SET_B ;\nelse (no)\n: SET_TO_UPDATE := SET_A ;\nendif\n\n\nif (Uri('#top') present and valid) then (yes)\n\nif (SET_TO_UPDATE == SET_B) then (yes)\nif (Version(Application A) >= MIN_COMPATIBLE_APP_VERSION_FOR_NORDIC_TOP) then (yes)\nif (Version(Radio A) >= MIN_COMPATIBLE_RAD_VERSION_FOR_NORDIC_TOP) then (yes)\n: fetch('#top') ;\n: check_integrity('#top') ;\n: process('#top') ;\nstop\n\nendif\nendif\nendif\n: abort() ;\nstop\n\nelse (no)\nif (Version(Intalled Nordic Top) >= MIN_NORDIC_TOP_VERSION) then (yes)\nif (SET_TO_UPDATE == SET_A) then (yes)\n: fetch('#radio') ;\n: check_integrity('#radio') ;\n: process('#radio') ;\n\n: fetch('#application') ;\n: check_integrity('#application') ;\n: process('#application') ;\nstop\nelseif (SET_TO_UPDATE == SET_B) then (yes)\n: fetch('#radio_b') ;\n: check_integrity('#radio_b') ;\n: process('#radio_b') ;\n\n: fetch('#application_b') ;\n: check_integrity('#application_b') ;\n: process('#application_b') ;\nstop\nelse (no)\n: abort() ;\nstop\nendif\n\nelse (no)\n: abort() ;\nstop\nendif\n\nendif\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requirements for ncs-sbom (Windows)\nDESCRIPTION: This command installs the required Python packages for the 'ncs-sbom' command using pip3. It reads the package list from the 'requirements-west-ncs-sbom.txt' file located in the 'nrf/scripts' directory within the 'ncs' folder.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"pip3 install -r nrf/scripts/requirements-west-ncs-sbom.txt\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Network Core Event Handler Function in C\nDESCRIPTION: This code snippet defines a custom override for the weak event handler function 'ncm_net_core_event_handler' to handle network core events. The function checks the event type and performs actions accordingly, such as printing messages when a reset or freeze event occurs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/network_core_monitor.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include \"net_core_monitor.h\"\n...\n/* This is the override for the __weak handler. */\nvoid ncm_net_core_event_handler(enum ncm_event_type event, uint32_t reset_reas)\n{\n   switch (event) {\n   case NCM_EVT_NET_CORE_RESET:\n      printk(\"The network core reset.\\n\");\n      /* do something */\n      break;\n   case NCM_EVT_NET_CORE_FREEZE:\n      printk(\"The network core is not responding.\\n\");\n      /* do something */\n      break;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to nrf_auraconfig Project\nDESCRIPTION: Adds source files to the project, conditionally including some based on configuration options. It includes core files for the nrf_auraconfig application, as well as mock and main source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/bluetooth/bsim/nrf_auraconfig/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/bluetooth bluetooth_build)\n\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_SD_CARD_MODULE app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules/sd_card.c)\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_SD_CARD_LC3_FILE app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules/lc3_file.c)\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_SD_CARD_LC3_STREAMER app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules/lc3_streamer.c)\n\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/nrf_auraconfig/src/nrf_auraconfig.c)\n\ntarget_sources(app PRIVATE src/audio_sync_timer_mock.c)\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project for HID Mouse\nDESCRIPTION: Defines the project name as 'hid-mouse', which will be used for build configuration and target naming\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/usb/hid-mouse/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(hid-mouse)\n```\n\n----------------------------------------\n\nTITLE: Programming Command with nrfutil\nDESCRIPTION: Command to program firmware image with patches stored in external memory using nrfutil tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/fw_patches_ext_flash.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --x-family nrf53 --options chip_erase_mode=ERASE_RANGES_TOUCHED_BY_FIRMWARE,qspi_erase_mode=ERASE_ALL,verify=VERIFY_HASH,reset=RESET_SOFT --firmware build/merged.hex\n```\n\n----------------------------------------\n\nTITLE: Bluetooth State Event Flow Table\nDESCRIPTION: Table showing event flow between Bluetooth advertising, state management and other modules. Maps ble_peer_event, ble_peer_conn_params_event and module_state_event to their respective handlers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n+-----------------------------------------------+------------------------+               |                                |                                             |\n| :ref:`nrf_desktop_ble_adv`                    | ``ble_peer_event``     |               |                                |                                             |\n+-----------------------------------------------+                        |               |                                |                                             |\n| :ref:`nrf_desktop_ble_state`                  |                        |               |                                |                                             |\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Fast Pair Configuration Options\nDESCRIPTION: New Kconfig options for Bluetooth Fast Pair library, enabling advanced pairing and notification features\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_4\n\nLANGUAGE: kconfig\nCODE:\n```\nconfig CONFIG_BT_FAST_PAIR_BN\n    bool \"Enable Battery Notification extension\"\n    help\n      Enables support for Battery Notification in Fast Pair\n```\n\nLANGUAGE: kconfig\nCODE:\n```\nconfig CONFIG_BT_FAST_PAIR_USE_CASE\n    choice\n    prompt \"Fast Pair Use Case\"\n    config CONFIG_BT_FAST_PAIR_USE_CASE_UNKNOWN\n    config CONFIG_BT_FAST_PAIR_USE_CASE_INPUT_DEVICE\n    config CONFIG_BT_FAST_PAIR_USE_CASE_LOCATOR_TAG\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Data Model\nDESCRIPTION: Configures the Matter data model for the application using the ZAP file, setting up the server and generation directory for ZAP-generated files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nchip_configure_data_model(app\n    INCLUDE_SERVER\n    BYPASS_IDL\n    GEN_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated\n    ZAP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/bridge.zap\n)\n```\n\n----------------------------------------\n\nTITLE: Getting DUT RX antenna ID with rgetrxantenna command in Shell\nDESCRIPTION: Retrieves the antenna currently used by the DUT device for RX operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\ncustom rgetrxantenna\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Manager Stay On Option in Kconfig\nDESCRIPTION: This Kconfig option determines whether the system should stay on after an error. It is ignored when entering system off after an error.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/power_manager.rst#2025-04-21_snippet_4\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_CAF_POWER_MANAGER_STAY_ON\n```\n\n----------------------------------------\n\nTITLE: Adding nRF21540 EK Shield in CMakeLists.txt (CMake)\nDESCRIPTION: CMake instruction to set the SHIELD option to nrf21540ek in the project's CMakeLists.txt file, enabling the nRF21540 EK shield for the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/21540ek_dev_guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SHIELD nrf21540ek)\n```\n\n----------------------------------------\n\nTITLE: Setting Device Manufacturer with AT Command\nDESCRIPTION: AT command to configure the Manufacturer resource of the Device object. The manufacturer name must be provided as a string in double quotes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_8\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"manufacturer\"[,<manufacturer>]\n```\n\n----------------------------------------\n\nTITLE: Adding SMP Service Advertisement to Bluetooth Mesh Application\nDESCRIPTION: This snippet includes the code required to add SMP service advertisement to your Bluetooth Mesh application. This is a prerequisite step to ensure that the device can be discovered when using the nRF Connect Device Manager.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_ble.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n.. literalinclude:: ../../../../../samples/bluetooth/mesh/common/smp_bt.c\n      :language: c\n      :start-after: include_startingpoint_mesh_smp_dfu_rst_1\n      :end-before: include_endpoint_mesh_smp_dfu_rst_1\n```\n\n----------------------------------------\n\nTITLE: Finding Required Zephyr Package for Nordic Project\nDESCRIPTION: This snippet uses the 'find_package' command to locate the Zephyr package which is essential for building applications compliant with Nordic Semiconductor's architecture. It utilizes the ZEPHYR_BASE environment variable to aid in locating the package.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_callbacks/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Test Firmware B Upload Success Output\nDESCRIPTION: Expected output from UART showing successful upload and installation of test firmware variant B.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n[00:01:01] ###### 100% [COM7] Uploaded\n✔️ Serving images done\n✔️ Uploaded hci_ipc_variant_b.bin\n✔️ Uploaded ab_variant_b.bin\n```\n\n----------------------------------------\n\nTITLE: Configuring PCM Mix Application Project in CMake\nDESCRIPTION: This CMake script configures the PCM Mix application project. It sets the minimum required CMake version, finds the Zephyr package, defines the project name, and includes all source files from the src directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/pcm_mix/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(pcm_mix)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Source Files for Application\nDESCRIPTION: This snippet specifies additional source files for the application, including files from the common directory such as 'net_l2_openthread.c' and 'nrf_rpc_single_thread.c'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ../common/net_l2_openthread.c\n  ../common/nrf_rpc_single_thread.c\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose LED Status Indication in Kconfig\nDESCRIPTION: Show more detailed LED status updates. Show a pattern when device messages are successfully sent, and when the initial connection to nRF Cloud is lost. Defaults to enabled if LED indication is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_27\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LED_VERBOSE_INDICATION\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Storage Sources and Subdirectories in CMake\nDESCRIPTION: This CMake snippet sets up inclusion of source files and subdirectories based on whether specific configuration options are enabled. It uses conditional directives to determine which components related to trusted storage are added during the build process. This setup requires the Zephyr build environment and specific configuration flags such as CONFIG_TRUSTED_STORAGE_STORAGE_BACKEND_SETTINGS, CONFIG_PSA_PROTECTED_STORAGE, CONFIG_PSA_INTERNAL_TRUSTED_STORAGE, and CONFIG_TRUSTED_STORAGE_BACKEND_AEAD.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/trusted_storage/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_TRUSTED_STORAGE_STORAGE_BACKEND_SETTINGS\n\tstorage_backend_settings.c\n)\n\nadd_subdirectory_ifdef(CONFIG_PSA_PROTECTED_STORAGE protected_storage)\nadd_subdirectory_ifdef(CONFIG_PSA_INTERNAL_TRUSTED_STORAGE internal_trusted_storage)\nadd_subdirectory_ifdef(CONFIG_TRUSTED_STORAGE_BACKEND_AEAD aead)\n```\n\n----------------------------------------\n\nTITLE: Cloning the net-tools repository\nDESCRIPTION: Command to clone the Zephyr net-tools repository required for SLIP interface testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/zephyrproject-rtos/net-tools.git\n```\n\n----------------------------------------\n\nTITLE: Including Platform Internal Headers - CMake\nDESCRIPTION: This snippet incorporates platform internal headers when CONFIG_MOCK_SUIT_PLATFORM_INTERNAL is defined, allowing access to internal platform functionalities for the test binary.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_PLATFORM_INTERNAL)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_PLATFORM)\n  target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/platform/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Power-off Warning\nDESCRIPTION: Function to configure power-off warning threshold using predefined levels (3000mV to 3300mV). Available in modem firmware v1.3.1 and higher.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_battery.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nmodem_battery_pofwarn_enable(POFWARN_3000); // For 3000mV\nmodem_battery_pofwarn_enable(POFWARN_3100); // For 3100mV\nmodem_battery_pofwarn_enable(POFWARN_3200); // For 3200mV\nmodem_battery_pofwarn_enable(POFWARN_3300); // For 3300mV\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIOTE Interrupt\nDESCRIPTION: Devicetree configuration for GPIOTE interrupt settings with IRQ number and priority level.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/wifi_coex.rst#2025-04-21_snippet_4\n\nLANGUAGE: devicetree\nCODE:\n```\n&gpiote {\n  interrupts = < 6 1 >;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Wi-Fi Offloaded Raw TX Project with CMake\nDESCRIPTION: Defines the CMake configuration for building an nRF Wi-Fi offloaded raw transmission example. Sets minimum CMake version, finds the Zephyr package, names the project, and specifies the main.c source file to be included in the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/offloaded_raw_tx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_offloaded_raw_tx)\n\ntarget_sources(app PRIVATE\n\tsrc/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Variant B Boot Status Log\nDESCRIPTION: Log output showing the boot status after rebooting with variant B as the active image, confirming both variants are properly confirmed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nBoot preference: set B\nBoot status: image set B active\nConfirm status set A: confirmed\nConfirm status set B: confirmed\n```\n\n----------------------------------------\n\nTITLE: AT Command: Get Device IMEI\nDESCRIPTION: This AT command retrieves the IMEI (International Mobile Equipment Identity) of the device. The IMEI is a unique identifier used to create the device identity for LwM2M registration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/provisioning.rst#2025-04-21_snippet_1\n\nLANGUAGE: None\nCODE:\n```\nAT+CGSN\n352656100367872\nOK\n```\n\n----------------------------------------\n\nTITLE: List Settings Entries - Console\nDESCRIPTION: This console command lists all available settings entries, useful for identifying specific entries by name for size measurement. The output includes various configuration parameters managed within the Matter device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ settings list\nmt/g/im/ec\nmt/g/gdc\nmt/g/gcc\nmt/g/lkgt\nmt/ctr/reboot-count\nmt/cfg/unique-id\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Fast Pair Ring Component\nDESCRIPTION: Conditionally adds ring.c source file when Fast Pair Find My Device Network (FMDN) ring component is configured to be used.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT CONFIG_BT_FAST_PAIR_FMDN_RING_COMP_NONE)\n  target_sources(app PRIVATE src/ring.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building with Custom Project Configurations for Bootloaders - Console\nDESCRIPTION: This snippet demonstrates how to build a Zephyr application for the NRF52840 DK with custom project configurations for bootloaders and a sample application. It uses the west build command with flags specifying suffixes for the bootloader and application images.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_config.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 zephyr/samples/hello_world -- \\\n   -Db0_FILE_SUFFIX=immutable \\\n   -Dmcuboot_FILE_SUFFIX=upgradable \\\n   -Dapp_FILE_SUFFIX=app\n```\n\n----------------------------------------\n\nTITLE: Sending DTM Commands via Echo\nDESCRIPTION: Command to send Direct Test Mode commands using echo with hexadecimal encoding to the specified DTM serial port.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/direct_test_mode/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo echo -ne \"\\x00\\x00\" > /dev/serial/by-id/usb-SEGGER_J-Link_000683580193-if00\n```\n\n----------------------------------------\n\nTITLE: Configuring Kconfig Options for Modem JWT\nDESCRIPTION: Required Kconfig options that must be set to enable the Modem JWT library functionality. CONFIG_MODEM_JWT enables the library while CONFIG_MODEM_JWT_MAX_LEN sets the maximum JWT length.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_jwt.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MODEM_JWT\nCONFIG_MODEM_JWT_MAX_LEN\n```\n\n----------------------------------------\n\nTITLE: Building MSPI Tests for nRF54L15\nDESCRIPTION: Command for building MSPI tests on the nRF54L15 development kit. This compiles the test applications that verify the functionality of the MSPI driver.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/hpf/mspi/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54l15dk_nrf54l15_cpuapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Sources for CMake - C\nDESCRIPTION: This snippet specifies the source files for the Nordic Semiconductor application's build process. The function 'target_sources' is used to declare 'main.c' and 'fuel_gauge.c' as private source files for the app target, which indicates that these files will be compiled as part of the application but will not be exposed as part of its interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_fuel_gauge/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE main.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE fuel_gauge.c)\n```\n\n----------------------------------------\n\nTITLE: Device UUID Query\nDESCRIPTION: The #XUUID command returns the unique device identifier.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/Generic_AT_commands.rst#2025-04-21_snippet_6\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUUID\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Persistent Storage in Kconfig\nDESCRIPTION: Defines Kconfig options to enable and configure persistent storage for Matter applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/common/config.rst#2025-04-21_snippet_6\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_PERSISTENT_STORAGE\n  \"bool\" - Enable Matter persistent storage support.\n\nCONFIG_NCS_SAMPLE_MATTER_SETTINGS_STORAGE_BACKEND\n  \"bool\" - Enable a Zephyr settings-based storage implementation for Matter applications.\n\nCONFIG_NCS_SAMPLE_MATTER_SECURE_STORAGE_BACKEND\n  \"bool\" - Enable the ARM PSA Protected Storage API implementation that imitates Zephyr Settings' key-value data format.\n\nCONFIG_NCS_SAMPLE_MATTER_STORAGE_MAX_KEY_LEN\n\t\"int\" - Set the maximum length (in bytes) of the key under which the asset can be stored.\n\nCONFIG_NCS_SAMPLE_MATTER_SECURE_STORAGE_MAX_ENTRY_NUMBER\n\t\"int\" - Set the maximum number of entries that can be stored securely.\n\nCONFIG_NCS_SAMPLE_MATTER_SECURE_STORAGE_PSA_KEY_VALUE_OFFSET\n\t\"hex\" - Set the PSA key offset dedicated for the Matter application.\n```\n\n----------------------------------------\n\nTITLE: Enabling Auracast (Broadcast) Mode in Kconfig\nDESCRIPTION: Sets the CONFIG_TRANSPORT_BIS Kconfig option to enable Auracast (broadcast) mode for working with broadcast sources and sinks in the nRF5340 Audio application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/configuration.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_TRANSPORT_BIS=y\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Devices with nRF Util\nDESCRIPTION: Command to list connected devices and their traits using nRF Util. This is used to identify the Thingy:91 X or external debug probe before firmware update.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy91x/thingy91x_updating_fw_programmer.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device list\n```\n\n----------------------------------------\n\nTITLE: OpenThread Diagnostic Start Command\nDESCRIPTION: This command initiates the diagnostic mode in OpenThread, enabling hardware-related checks without running a Thread network.  It is used to test radio communication and other functionalities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot diag start\nstart diagnostics mode\nstatus 0x00\nDone\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: This command defines the project name as 'idle_adc'. This name is used by CMake to organize the build process and generate build artifacts.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_adc/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(idle_adc)\"\n```\n\n----------------------------------------\n\nTITLE: Reading Hardware Clock for Motion Data - C Function Calls\nDESCRIPTION: Shows the functions used to read hardware clock timestamps for motion calculations. The module uses k_cycle_get_64 if available, otherwise falls back to k_cycle_get_32.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/motion.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nk_cycle_get_64()\nk_cycle_get_32()\n```\n\n----------------------------------------\n\nTITLE: Enabling Bluetooth in CAF Bluetooth LE State Module\nDESCRIPTION: This snippet shows the function call used by the CAF Bluetooth LE state module to enable Bluetooth functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_state.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbt_enable()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Sources for SLM Components\nDESCRIPTION: Configures build settings by including the current directory in include path and adding source files for certificate management and native TLS functionality to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/src/nativetls/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(.)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_at_cmng.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_native_tls.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Including Directories\nDESCRIPTION: This snippet defines the project name and specifies the include directories for private dependencies required for the SUIT decryption filter functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_decrypt_filter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(suit_decrypt_filter)\ntarget_include_directories(testbinary PRIVATE\n    ${SUIT_SUBSYS_DIR}/stream/stream_filters/include\n    ${SUIT_SUBSYS_DIR}/utils/include/\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom KMS Script with CMake\nDESCRIPTION: CMake code to set a custom Key Management System script by defining a global property. This allows integration with external key management systems for signing SUIT envelopes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_signing.rst#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(GLOBAL PROPERTY SUIT_KMS_SCRIPT <kms_script_path>)\n```\n\n----------------------------------------\n\nTITLE: Glob and Target Sources\nDESCRIPTION: This snippet globs all C source files in the 'src' directory and adds them to the app's target sources, specifying that they are private to the app.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/kernel_freq_change/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Setting DUT TX antenna ID with rsettxantenna command in Shell\nDESCRIPTION: Sets the antenna used by the DUT device for TX operations only. Antenna ID can be either 0 or 1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\ncustom rsettxantenna *1*\n```\n\n----------------------------------------\n\nTITLE: Installing West Globally on macOS\nDESCRIPTION: Command to install or update the west tool globally on macOS using pip3.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U west\n```\n\n----------------------------------------\n\nTITLE: Triggering a differential level state change without response\nDESCRIPTION: Triggers a differential level state change for the server without waiting for a response, with optional transition time and delay.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_lvl_cli.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmesh models lvl delta-set-unack <Dlt> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: CoreMark Benchmark Console Output (Multi-domain Logging)\nDESCRIPTION: Example console output for CoreMark benchmark execution with multi-domain logging mode. Shows initialization and results for multiple cores.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/benchmarks/coremark/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK v2.8.99-f9add8e14565 ***\n*** Using Zephyr OS v3.7.99-02718211f9a9 ***\n[00:00:00.208,166] <inf> app/app: Multi-domain logging mode\n[00:00:00.208,168] <inf> app/app: This core is used to output logs from all cores to terminal over UART\n\n[00:00:00.208,441] <inf> ppr/app: CoreMark sample for nrf54h20dk@0.9.0/nrf54h20/cpuppr\n[00:00:00.208,496] <inf> ppr/app: CoreMark started! CPU FREQ: 16000000 Hz, threads: 1, data size: 2000; iterations: 500\n\n[00:00:01.186,256] <inf> rad/app: CoreMark sample for nrf54h20dk@0.9.0/nrf54h20/cpurad\n[00:00:01.186,305] <inf> rad/app: Press Push button 1 to start the test ...\n\n[00:00:01.285,614] <inf> app/app: CoreMark sample for nrf54h20dk@0.9.0/nrf54h20/cpuapp\n[00:00:01.285,654] <inf> app/app: Press Push button 0 to start the test ...\n\n[00:00:04.984,744] <inf> app/app: Push button 0 pressed!\n[00:00:04.984,753] <inf> app/app: CoreMark started! CPU FREQ: 320000000 Hz, threads: 1, data size: 2000; iterations: 10000\n\n[00:00:04.984,755] <inf> app/app: Logging is blocked for all cores until this core finishes the CoreMark benchmark\n\n[00:00:05.714,470] <inf> rad/app: Push button 1 pressed!\n[00:00:05.714,486] <inf> rad/app: CoreMark started! CPU FREQ: 256000000 Hz, threads: 1, data size: 2000; iterations: 10000\n\n2K performance run parameters for coremark.\nCoreMark Size    : 666\nTotal ticks      : 13471150\nTotal time (secs): 13.471000\nIterations/Sec   : 37.116769\nIterations       : 500\nCompiler version : GCC12.2.0\nCompiler flags   : -O3 + see compiler flags added by Zephyr\nMemory location  : STACK\nseedcrc          : 0xe9f5\n[0]crclist       : 0xe714\n[0]crcmatrix     : 0x1fd7\n[0]crcstate      : 0x8e3a\n[0]crcfinal      : 0xa14c\nCorrect operation validated. See README.md for run and reporting rules.\nCoreMark 1.0 : 37.116769 / GCC12.2.0 -O3 + see compiler flags added by Zephyr / STACK\n[00:00:13.595,072] <inf> ppr/app: CoreMark finished! Press the reset button to restart...\n\n2K performance run parameters for coremark.\nCoreMark Size    : 666\nTotal ticks      : 11436744\nTotal time (secs): 11.436000\nIterations/Sec   : 874.431619\nIterations       : 10000\nCompiler version : GCC12.2.0\nCompiler flags   : -O3 + see compiler flags added by Zephyr\nMemory location  : STACK\nseedcrc          : 0xe9f5\n[0]crclist       : 0xe714\n[0]crcmatrix     : 0x1fd7\n[0]crcstate      : 0x8e3a\n[0]crcfinal      : 0x988c\nCorrect operation validated. See README.md for run and reporting rules.\nCoreMark 1.0 : 874.431619 / GCC12.2.0 -O3 + see compiler flags added by Zephyr / STACK\n[00:00:16.446,916] <inf> app/app: CoreMark finished! Press Push button 0 to restart ...\n\n2K performance run parameters for coremark.\nCoreMark Size    : 666\nTotal ticks      : 14290211\nTotal time (secs): 14.290000\nIterations/Sec   : 699.790063\nIterations       : 10000\nCompiler version : GCC12.2.0\nCompiler flags   : -O3 + see compiler flags added by Zephyr\nMemory location  : STACK\nseedcrc          : 0xe9f5\n[0]crclist       : 0xe714\n[0]crcmatrix     : 0x1fd7\n[0]crcstate      : 0x8e3a\n[0]crcfinal      : 0x988c\nCorrect operation validated. See README.md for run and reporting rules.\nCoreMark 1.0 : 699.790063 / GCC12.2.0 -O3 + see compiler flags added by Zephyr / STACK\n[00:00:19.911,390] <inf> rad/app: CoreMark finished! Press Push button 1 to restart ...\n```\n\n----------------------------------------\n\nTITLE: Scheduler locking for secure service calls\nDESCRIPTION: Code demonstrating how to safely lock/unlock the Zephyr kernel scheduler when calling secure services to prevent thread preemption issues.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.3.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nk_sched_lock();\n// Secure service call goes here\nk_sched_unlock();\n```\n\n----------------------------------------\n\nTITLE: Targeting Source Files with CMake\nDESCRIPTION: This code snippet demonstrates the use of the CMake command `target_sources` to add source files to a build target. The specified file `led.c` is made private to the `app` target, which restricts its visibility to other targets. There are no additional dependencies, but `CMAKE_CURRENT_SOURCE_DIR` must be set to a valid directory path containing `led.c`.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/modules/led/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/led.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Cloud Service Info in Kconfig\nDESCRIPTION: New Kconfig options added to configure sending of service info for FOTA and UI to nRF Cloud.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.6.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NRF_CLOUD_SEND_SERVICE_INFO_FOTA\nCONFIG_NRF_CLOUD_SEND_SERVICE_INFO_UI\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Wi-Fi network\nDESCRIPTION: This command connects to a specified Wi-Fi network using the provided SSID, key management, and passphrase.  Placeholders `<SSID>`, `<key_management>`, and `<passphrase>` must be replaced with actual values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nwifi connect -s <SSID> -k <key_management> -p <passphrase>\n```\n\n----------------------------------------\n\nTITLE: Adding DM RPC Host Source to Zephyr Library\nDESCRIPTION: CMake command to include the dm_rpc_host.c source file in the Zephyr library build process. This adds Device Management RPC host functionality to the project build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dm/rpc/host/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(dm_rpc_host.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot Image Compression Support in CMake\nDESCRIPTION: Enables and configures image compression support for MCUboot, including LZMA compression and decompression options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(SB_CONFIG_MCUBOOT_COMPRESSED_IMAGE_SUPPORT)\n  set_config_bool(mcuboot CONFIG_NRF_COMPRESS y)\n  set_config_bool(mcuboot CONFIG_NRF_COMPRESS_DECOMPRESSION y)\n  set_config_bool(mcuboot CONFIG_NRF_COMPRESS_LZMA y)\n  set_config_bool(mcuboot CONFIG_NRF_COMPRESS_LZMA_VERSION_LZMA2 y)\n  set_config_bool(mcuboot CONFIG_NRF_COMPRESS_ARM_THUMB y)\n  set_config_bool(mcuboot CONFIG_NRF_COMPRESS_CLEANUP y)\n  set_config_bool(mcuboot CONFIG_BOOT_DECOMPRESSION y)\n  set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_COMPRESSED_IMAGE_SUPPORT_ENABLED y)\nelse()\n  set_config_bool(mcuboot CONFIG_BOOT_DECOMPRESSION n)\n  set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_COMPRESSED_IMAGE_SUPPORT_ENABLED n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Entropy Remote Get Function\nDESCRIPTION: The entropy_remote_get function is used for obtaining the entropy data from the network core to the application core via RPC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/entropy_nrf53/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\":c:func:`entropy_remote_get`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr Project in CMake\nDESCRIPTION: This CMake file initializes a project called 'accel_polling' using Zephyr. It requires CMake version 3.20.0 or higher and locates the Zephyr package from an environment variable. The project sources are specified to include an accelerometer polling example main file from Zephyr's sample directory. This setup acts as the foundation for building with Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/sensor/accel_polling/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(accel_polling)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/sensor/accel_polling/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Data Mode Control AT Command\nDESCRIPTION: AT command for configuring the time limit used to trigger data transmissions in data mode. Allows setting timeout values and querying current configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_data_mode.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XDATACTRL=<time_limit>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth LE Advertising Duration for Matter\nDESCRIPTION: This snippet describes how to configure the duration for which the device will advertise Matter service over Bluetooth LE using the `CONFIG_CHIP_BLE_ADVERTISING_DURATION` Kconfig option. The duration is specified in minutes and cannot exceed 15 minutes unless Extended Announcement is enabled. This option allows control over the advertising time window.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_BLE_ADVERTISING_DURATION` to a value of time in minutes\"\n```\n\n----------------------------------------\n\nTITLE: Device Tree Configuration for SLM on nRF91 Series DKs\nDESCRIPTION: Device tree overlay configuration for UART interfaces used by the Serial LTE Modem application, setting up UART2 for communication while disabling UART0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_description.rst#2025-04-21_snippet_4\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n    chosen {\n             ncs,slm-uart = &uart2;\n           }\n  };\n\n&uart0 {\n   status = \"disabled\";\n};\n\n&uart2 {\n   compatible = \"nordic,nrf-uarte\";\n   current-speed = <115200>;\n   status = \"okay\";\n   hw-flow-control;\n\n   pinctrl-0 = <&uart2_default_alt>;\n   pinctrl-1 = <&uart2_sleep_alt>;\n   pinctrl-names = \"default\", \"sleep\";\n};\n```\n\n----------------------------------------\n\nTITLE: Set Global Property for Non-Secure Application HEX File\nDESCRIPTION: This snippet sets a global property, `app_PM_HEX_FILE`, to the TFM_NS_HEX_FILE target property of the 'tfm' target, effectively making the path to the non-secure application's HEX file available globally. This is used when the configuration includes TF-M Non-Secure application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_USE_NS_APP)\n  set_property(GLOBAL PROPERTY\n    app_PM_HEX_FILE $<TARGET_PROPERTY:tfm,TFM_NS_HEX_FILE>\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Linking Options for Single-Threaded RPC\nDESCRIPTION: This snippet enforces single-threaded nRF RPC command processing by wrapping the nrf_rpc_os_init and nrf_rpc_os_thread_pool_send functions. This is achieved using linker options that redirect calls to these functions to custom implementations, ensuring that RPC commands are processed in a single thread.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_rpc/dev_info/server/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_link_options(app PUBLIC\n  -Wl,--wrap=nrf_rpc_os_init,--wrap=nrf_rpc_os_thread_pool_send\n)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Bluetooth Mesh DK Provisioning\nDESCRIPTION: This code snippet describes the initialization function for the Bluetooth Mesh DK provisioning handler. It is enabled via the CONFIG_BT_MESH_DK_PROV Kconfig option and needs to be called in the main function of the application. The initialization sets up the necessary components for the provisioning process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/dk_prov.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\"bt_mesh_dk_prov_init\"\n```\n\n----------------------------------------\n\nTITLE: Uploading SUIT Envelope via UART on nRF54H20\nDESCRIPTION: Command to upload a SUIT envelope file to the device using nrfutil over UART.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/smp_transfer/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-envelope --serial-port COM7 --envelope-file root.suit\n```\n\n----------------------------------------\n\nTITLE: LG U+ Configuration Structure\nDESCRIPTION: This C structure defines the LG U+ configurations that the application must set when using the LwM2M carrier library on the LG U+ network. The structure is named `lwm2m_carrier_lg_uplus_config_t` and the values for the config need to be provided by the carrier or Nordic Semiconductor sales representative.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/requirements.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n\"lwm2m_carrier_lg_uplus_config_t\"\n```\n\n----------------------------------------\n\nTITLE: Adding Core Source Files to nRF Cloud Multi-Service Project\nDESCRIPTION: Adds the main source files for the nRF Cloud multi-service application, including core functionality like cloud connection, message queue, temperature sensing, and LED control.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\ntarget_sources(app PRIVATE src/application.c)\ntarget_sources(app PRIVATE src/cloud_connection.c)\ntarget_sources(app PRIVATE src/message_queue.c)\ntarget_sources(app PRIVATE src/temperature.c)\ntarget_sources(app PRIVATE src/fota_support.c)\ntarget_sources(app PRIVATE src/led_control.c)\ntarget_sources(app PRIVATE src/sample_reboot.c)\ntarget_sources(app PRIVATE src/shadow_config.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for project configuration and compatibility with Zephyr SDK\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_clock_control/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring LED Effects in nRF Desktop (C)\nDESCRIPTION: Added a configuration option to specify the file defining LED effects in the nRF Desktop application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.2.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nCONFIG_DESKTOP_LED_STATE_DEF_PATH\n```\n\n----------------------------------------\n\nTITLE: Linking PSA Interface Libraries with Zephyr\nDESCRIPTION: This CMakelist snippet links the PSA interface libraries to the Zephyr build system for cryptographic operations. The dependencies include the psa_crypto_config_chosen and psa_interface libraries. It specifically avoids including psa_crypto_library_config to prevent setting certain configurations. No additional inputs or outputs are expected as it modifies the link interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/zephyr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(zephyr_interface\n  INTERFACE\n    psa_crypto_config_chosen\n    psa_interface\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw Packet Transmit Header Structure\nDESCRIPTION: Defines the structure for raw packet transmission header including magic number, data rate, packet length, transmission mode, queue settings and flags. Located in fmac_structs.h.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/advanced_modes/raw_tx_operation.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nraw_tx_pkt_header {\n    uint32_t magic_num;     // Set to 0x12345678\n    uint32_t data_rate;     // Transmission data/MCS rate\n    uint32_t packet_length; // Raw packet length excluding header\n    uint32_t tx_mode;       // VHT/HT/HE/Legacy mode\n    uint32_t queue;         // Wi-Fi access category\n    uint32_t raw_tx_flag;   // Raw transmission flag\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for TF-M Hello World\nDESCRIPTION: Configures the CMake build system for a TF-M hello world application. Sets minimum CMake version, finds Zephyr package, defines project name, and adds source files to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_hello_world/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(tfm_hello_world)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Light xyL Client API Header\nDESCRIPTION: This defines the header file that exposes the API for the Light xyL Client model in the Bluetooth Mesh implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_13\n\nLANGUAGE: C\nCODE:\n```\n| Header file: :file:`include/bluetooth/mesh/light_xyl_cli.h`\n```\n\n----------------------------------------\n\nTITLE: Updating SUIT Envelope Sequence Number (Console)\nDESCRIPTION: Instructions to update the SUIT envelope sequence number in the VERSION file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_36\n\nLANGUAGE: console\nCODE:\n```\nAPP_ROOT_SEQ_NUM = 4\nAPP_LOCAL_1_SEQ_NUM = 4\n```\n\n----------------------------------------\n\nTITLE: Setting up toctree for Migration Guides in reStructuredText\nDESCRIPTION: This snippet configures a table of contents (toctree) for migration guides. It uses the maxdepth, glob, and reversed directives to automatically include all files from the migration directory in reverse chronological order.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration_guides.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :reversed:\n   :caption: Subpages:\n\n   migration/*\n```\n\n----------------------------------------\n\nTITLE: Including Source Files\nDESCRIPTION: This snippet collects all .c source files from the src directory and adds them to the target sources for the app, facilitating modular development.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/coap_server/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth NUS Client Source\nDESCRIPTION: This code conditionally includes the NUS client source file based on CONFIG_BT_NUS_CLIENT. It allows for UART service management as a client.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_NUS_CLIENT nus_client.c)\n```\n\n----------------------------------------\n\nTITLE: Initializing Nordic SDK Project\nDESCRIPTION: Sets up the project name and specifies the main application source file for compilation in the Nordic SDK environment\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_lbs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(NONE)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n  src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing IPUC for Writing in C\nDESCRIPTION: Uses the suit_setup_write_ipuc SSF service to initialize an IPUC before writing data, binding it to the SSF client remote ID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nsuit_setup_write_ipuc()\n```\n\n----------------------------------------\n\nTITLE: Configuring SLM Shell Project with CMake\nDESCRIPTION: Sets up the CMake configuration for the SLM Shell project. It specifies the minimum CMake version, finds the Zephyr package, and adds the main source file to the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/slm_shell/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(slm_shell)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF SDK Build Directories in CMake\nDESCRIPTION: CMake configuration that adds subdirectories for nrfxlib and nRF IEEE 802.15.4 radio driver components. Sets up the build structure for Nordic Semiconductor's SDK components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/nrfxlib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${ZEPHYR_CURRENT_MODULE_DIR} nrfxlib)\nadd_subdirectory(nrf_802154)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources and Include Directories\nDESCRIPTION: Specifies the source files for the application target 'app' and sets the include directories for the project, allowing the compiler to find necessary header files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\ntarget_sources(app PRIVATE src/credentials_provision.c)\ntarget_include_directories(app PRIVATE src)\n```\n\n----------------------------------------\n\nTITLE: Bellboard IRQ Configuration in Device Tree\nDESCRIPTION: Shows configuration for cpuapp_bellboard with interrupt mappings and multiple IRQ lines. Demonstrates the new approach to configuring bellboard instances with direct IRQ information attachment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.4.99-cs3_to_2.7_application.rst#2025-04-21_snippet_4\n\nLANGUAGE: devicetree\nCODE:\n```\n&cpuapp_bellboard {\n   interrupts = <96 NRF_DEFAULT_IRQ_PRIORITY>, <97 NRF_DEFAULT_IRQ_PRIORITY>;\n   interrupt-names = \"irq0\", \"irq1\";\n   nordic,interrupt-mapping = <0x0000000f 0>, /* irq0 (#96) handles channels 0-3 */\n                             <0x000000f0 1>; /* irq1 (#97) handles channels 4-7 */\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting nRF54H20 Device\nDESCRIPTION: Command to reset the nRF54H20 device using nrfutil after lifecycle state transition. Requires the device serial number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device reset --reset-kind RESET_PIN --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements Configuration\nDESCRIPTION: Detailed package requirements specification for the nrfconnect/sdk-nrf project. Includes version pinning, Python version constraints (3.12+), and platform-specific dependencies. Contains essential development tools, testing frameworks, and utility libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/requirements-fixed.txt#2025-04-21_snippet_2\n\nLANGUAGE: pip\nCODE:\n```\npyelftools==0.30 ; python_version >= \"3.12\" and python_version < \"4.0\"\npygit2==1.15.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\npygithub==2.4.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\npygmars==0.9.0 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\npygments==2.16.1 ; python_version >= \"3.12\" and python_version < \"4.0\"\npyjwt[crypto]==2.8.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\npykwalify==1.8.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\npylink-square==1.3.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\npylint==3.0.2 ; python_version >= \"3.12\" and python_version < \"4.0\"\npymaven-patch==0.3.2 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\npynacl==1.5.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\npyocd==0.35.1 ; python_version >= \"3.12\" and python_version < \"4.0\"\npyparsing==3.2.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\npyserial==3.5 ; python_version >= \"3.12\" and python_version < \"4.0\"\npytest==8.3.3 ; python_version >= \"3.12\" and python_version < \"4.0\"\npython-can==4.4.2 ; python_version >= \"3.12\" and python_version < \"4.0\"\npython-dateutil==2.8.2 ; python_version >= \"3.12\" and python_version < \"4.0\"\npython-magic-bin==0.4.14 ; python_version >= \"3.12\" and python_version < \"4.0\" and sys_platform == \"win32\"\npython-magic==0.4.27 ; python_version >= \"3.12\" and python_version < \"4.0\"\npython-stdnum==1.20 ; python_version >= \"3.12\" and python_version < \"4.0\"\npytz==2024.2 ; python_version >= \"3.12\" and python_version < \"4.0\"\npyusb==1.2.1 ; python_version >= \"3.12\" and python_version < \"4.0\"\npywin32==306 ; platform_system == \"Windows\" and platform_python_implementation == \"CPython\" and python_version >= \"3.12\" and python_version < \"4.0\"\npyyaml==6.0.1 ; python_version >= \"3.12\" and python_version < \"4.0\"\nqrcode==8.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\nrdflib==7.1.0 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\nreferencing==0.30.2 ; python_version >= \"3.12\" and python_version < \"4.0\"\nregex==2024.9.11 ; python_version >= \"3.12\" and python_version < \"4.0\"\nrequests==2.32.3 ; python_version >= \"3.12\" and python_version < \"4.0\"\nrequests[use-chardet-on-py3]==2.32.3 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\nrpds-py==0.20.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\nruamel-yaml==0.17.32 ; python_version >= \"3.12\" and python_version < \"4.0\"\nruff==0.8.1 ; python_version >= \"3.12\" and python_version < \"4.0\"\nsaneyaml==0.6.1 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\nscancode-toolkit[full]==31.2.6 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\nsemver==3.0.2 ; python_version >= \"3.12\" and python_version < \"4.0\"\nsetuptools==75.2.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\nsh==1.14.3 ; python_version >= \"3.12\" and python_version < \"4.0\" and sys_platform != \"win32\"\nsix==1.16.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\nsmmap==5.0.1 ; python_version >= \"3.12\" and python_version < \"4.0\"\nsortedcontainers==2.4.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\nsoupsieve==2.6 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\nspdx-tools==0.7.0a3 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\nsphinx-lint==1.0.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\nstringcase==1.2.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\nsvada==2.2.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\ntabulate==0.9.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\ntext-unidecode==1.3 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\ntoml==0.10.2 ; python_version >= \"3.12\" and python_version < \"4.0\"\ntomlkit==0.12.1 ; python_version >= \"3.12\" and python_version < \"4.0\"\ntypecode-libmagic==5.39.210531 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\ntypecode==30.0.2 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\ntypecode[full]==30.0.2 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\ntyping-extensions==4.8.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\nunidiff==0.7.5 ; python_version >= \"3.12\" and python_version < \"4.0\"\nurllib3==2.2.2 ; python_version >= \"3.12\" and python_version < \"4.0\"\nurlpy==0.5 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\nwcwidth==0.2.6 ; python_version >= \"3.12\" and python_version < \"4.0\"\nwebencodings==0.5.1 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\nwest==1.2.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\nwget==3.2 ; python_version >= \"3.12\" and python_version < \"4.0\"\nwindows-curses==2.4.0 ; python_version >= \"3.12\" and python_version < \"4.0\" and sys_platform == \"win32\"\nwrapt==1.15.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\nxmltodict==0.14.2 ; python_version >= \"3.12\" and python_version < \"4.0\" and platform_machine == \"x86_64\"\nyamllint==1.35.1 ; python_version >= \"3.12\" and python_version < \"4.0\"\nzcbor==0.8.1 ; python_version >= \"3.12\" and python_version < \"4.0\"\nzipp==3.17.0 ; python_version >= \"3.12\" and python_version < \"4.0\"\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr SDK Base Path\nDESCRIPTION: Locates the Zephyr SDK base directory using environment variables, which is required for project configuration and build process\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/record_text/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Adding Sources to Application Target\nDESCRIPTION: Adds the gathered source files to the application target, enabling them to be compiled into the final executable\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/usb/hid-mouse/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Setting DUT antenna ID with rsetantenna command in Shell\nDESCRIPTION: Sets the antenna used by the DUT device for both TX and RX operations. Antenna ID can be either 0 or 1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\ncustom rsetantenna *1*\n```\n\n----------------------------------------\n\nTITLE: MQTT Publish with QoS 2 on nRF9160 SLM\nDESCRIPTION: Example of publishing a message with Quality of Service 2 (highest QoS) using data mode. The response includes events type 4 (PUBREC) and 6 (PUBCOMP) with result 0, indicating successful message handling with the highest delivery guarantee.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/MQTT_AT_commands.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nAT#XMQTTPUB=\"nrf91/slm/mqtt/topic2\",\"\",2,0\nOK\nTest message with QoS 2+++\n#XDATAMODE: 0\n#XMQTTEVT: 4,0\n#XMQTTEVT: 6,0\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Libraries Documentation in RST\nDESCRIPTION: ReStructuredText configuration for binary libraries documentation structure. Sets up a labeled section and includes a toctree directive to organize subpages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _lib_bin:\n\nBinary libraries\n################\n\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   */index\n```\n\n----------------------------------------\n\nTITLE: Writing to BME680 Sensor\nDESCRIPTION: Demonstrates writing to the BME680 sensor using AT#XTWIW command. It writes the value 'D0' to the device address 0x76.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_45\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XTWIW=2,\"76\",\"D0\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr Project\nDESCRIPTION: This CMake snippet is configuring the environment to build a Zephyr project named 'coremark'. It requires a minimum CMake version of 3.20.0 and finds the Zephyr package via the ZEPHIR_BASE environment variable. The project's source files are defined with the target_sources command, notably including a main.c file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/benchmarks/coremark/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(coremark)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Device Tree Overlay for Application Core Recovery Image\nDESCRIPTION: DTS overlay needed for the application core recovery image, setting the code partition to the recovery partition and enabling required IPC interfaces.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_recovery.rst#2025-04-21_snippet_1\n\nLANGUAGE: dts\nCODE:\n```\n/ {\n   chosen {\n      zephyr,code-partition = &cpuapp_recovery_partition;\n      nrf,tz-secure-image = &cpuapp_recovery_partition;\n   };\n};\n\n&cpusec_cpuapp_ipc {\n   status = \"okay\";\n};\n\n&cpusec_bellboard {\n   status = \"okay\";\n};\n```\n\n----------------------------------------\n\nTITLE: Reading Current Battery Level in C\nDESCRIPTION: Use this function to read the current battery level. It can be called to retrieve the current value even when there is no change in notifications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/bas_client.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbt_bas_read_battery_level\n```\n\n----------------------------------------\n\nTITLE: Configuring UICC LwM2M Library in Kconfig\nDESCRIPTION: To enable the UICC LwM2M library, the CONFIG_UICC_LWM2M Kconfig option must be configured. This snippet shows the Kconfig option that needs to be set.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/uicc_lwm2m.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_UICC_LWM2M\n```\n\n----------------------------------------\n\nTITLE: Adding suit-payload-fetch Sequence to Application Manifest\nDESCRIPTION: YAML code snippet showing how to add the suit-payload-fetch sequence to the application manifest. This sequence defines how the application should fetch the payload using the file URI scheme.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_fetch.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsuit-payload-fetch:\n- suit-directive-set-component-index: 2\n- suit-directive-override-parameters:\n    suit-parameter-uri: 'file://{{ app[\\'binary\\'] }}'\n- suit-directive-fetch:\n  - suit-send-record-failure\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Scan Sample Output: 2.4 GHz Non-Overlapping Channel Scan\nDESCRIPTION: Console output showing scan results for non-overlapping channels in the 2.4 GHz band (channels 1, 6, and 11).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/scan/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nScan requested\nNum  | SSID                           (len) | Chan | RSSI | Security | BSSID\n1    | abcdefg                          7   | 11   | -39  | Open     | BC:A5:11:A2:B1:E2\n2    | mnopq                            5   | 6    | -75  | Open     | F0:1D:2D:73:C4:C1\n3    | pqrst                            5   | 1    | -77  | Open     | DC:33:3D:AB:D1:A8\nScan request done\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Bluetooth Management in nRF Connect SDK\nDESCRIPTION: Sets up the include directories for Bluetooth management components including advertising, controller configuration, DFU, scanning, and Zephyr's Bluetooth host subsystem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_management/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_include_directories(\n    advertising\n    controller_config\n    dfu\n    scanning\n    ${ZEPHYR_BASE}/subsys/bluetooth/host/\n)\n```\n\n----------------------------------------\n\nTITLE: Including IPUC Headers - CMake\nDESCRIPTION: This snippet handles the inclusion of IPUC headers in the test binary when CONFIG_MOCK_SUIT_IPUC is defined, integrating required functionalities related to IPUC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_IPUC)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_IPUC)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_PLATFORM_VARIANT_SDFW)\n  target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/ipuc/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter LEDs and Shell Options in Kconfig\nDESCRIPTION: Defines Kconfig options to enable LED module usage and shell command support for settings and testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/common/config.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_LEDS\n  \"bool\" - Enable the LEDs module to be used.\n\nCONFIG_NCS_SAMPLE_MATTER_SETTINGS_SHELL\n  \"bool\" - Enable using ug_matter_configuring_settings_shell.\n\nCONFIG_NCS_SAMPLE_MATTER_TEST_SHELL\n  \"bool\" - Enable support for test-specific shell commands in Matter applications.\n```\n\n----------------------------------------\n\nTITLE: Defining Compilation Macros for nRF Modem Library\nDESCRIPTION: Manually adds a Kconfig definition used by the unit under test, simulating CONFIG_NRF_MODEM_LIB being enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/nrf9x_sockets/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_definitions(CONFIG_NRF_MODEM_LIB_SENDMSG_BUF_SIZE=8)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Thread Single Protocol Memory Table\nDESCRIPTION: Table showing memory requirements for single protocol Thread 1.4 implementation including ROM and RAM allocations for OpenThread stack, application, and free memory\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/memory_tables/nrf54l15.txt#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. table:: nRF54L15 single protocol Thread 1.4 memory requirements\n\n         +-----------------------------+----------+-------+-------+\n         |                             |   master |   FTD |   MTD |\n         +=============================+==========+=======+=======+\n         | ROM OT stack + App [kB]     |      478 |   365 |   312 |\n         +-----------------------------+----------+-------+-------+\n         | ROM Bluetooth LE stack [kB] |        0 |     0 |     0 |\n         +-----------------------------+----------+-------+-------+\n         | Persistent storage [kB]     |       32 |    32 |    32 |\n         +-----------------------------+----------+-------+-------+\n         | Free ROM [kB]               |     1014 |  1127 |  1180 |\n         +-----------------------------+----------+-------+-------+\n         | RAM OT stack + App [kB]     |      103 |    93 |    79 |\n         +-----------------------------+----------+-------+-------+\n         | RAM Bluetooth LE stack [kB] |        0 |     0 |     0 |\n         +-----------------------------+----------+-------+-------+\n         | Free RAM [kB]               |      153 |   163 |   177 |\n         +-----------------------------+----------+-------+-------+\n```\n\n----------------------------------------\n\nTITLE: Enabling SFLOAT Library Configuration in C\nDESCRIPTION: To enable the SFLOAT library in your project, set the CONFIG_SFLOAT Kconfig option to 'y' in the prj.conf file. This configuration is necessary to include the library functionality in your build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/sfloat.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nCONFIG_SFLOAT=y\n```\n\n----------------------------------------\n\nTITLE: Installing CMake Configuration Files\nDESCRIPTION: These install commands copy cmake files to specified destinations during the build process. These files contain configuration information necessary for building the Non-Secure (NS) side.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf5340_cpuapp/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES       ${CMAKE_CURRENT_LIST_DIR}/ns/cpuarch_ns.cmake\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR}\n        RENAME      cpuarch.cmake)\n\ninstall(FILES       config.cmake\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR})\n\ninstall(FILES       ../common/config.cmake\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR}/../common/)\n```\n\n----------------------------------------\n\nTITLE: Shield Options for nRF7002 EK\nDESCRIPTION: Additional shield options required when building the sample for the nRF7002 EK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-Dble_coex_SHIELD=\"nrf7002ek;nrf7002ek_coex\"\n-Dipc_radio_SHIELD=\"nrf7002ek_coex\"\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option for PSA Framework MM IOVEC\nDESCRIPTION: This snippet sets the PSA_FRAMEWORK_HAS_MM_IOVEC CMake option to ON if the CONFIG_TFM_PSA_FRAMEWORK_HAS_MM_IOVEC Kconfig option is enabled, indicating support for scatter-gather lists in the PSA framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_PSA_FRAMEWORK_HAS_MM_IOVEC)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DPSA_FRAMEWORK_HAS_MM_IOVEC=ON\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Executing AT Query Command\nDESCRIPTION: Example showing how to send an AT read command using the shell command syntax. This command queries the CEREG (cellular network registration) status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_shell.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nat AT+CEREG?\n```\n\n----------------------------------------\n\nTITLE: Setting Static Partition Layout for NRF9151 NS\nDESCRIPTION: Configures static partition layout for NRF9151 NS to maintain consistency after DFU updates\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/boards/nordic/thingy91x/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_BOARD_THINGY91X_NRF9151_NS)\n  set(PM_STATIC_YML_FILE ${CMAKE_CURRENT_LIST_DIR}/thingy91x_nrf9151_pm_static.yml CACHE INTERNAL \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: This command defines the project name as 'NONE'. While 'NONE' is used here, a more descriptive name would be used for a real project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hids_mouse/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(NONE)\"\n```\n\n----------------------------------------\n\nTITLE: Creating DFU Multi-Image Package using Python Script\nDESCRIPTION: Executes a Python script to create a DFU multi-image package from the generated test binary files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/dfu/dfu_multi_image/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nexecute_process(\n  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n  COMMAND ${Python3_EXECUTABLE}\n    ${ZEPHYR_NRF_MODULE_DIR}/scripts/bootloader/dfu_multi_image_tool.py\n    create\n    --image -1 update1.bin\n    --image 1000000 update2.bin\n    dfu_package.bin\n  )\n```\n\n----------------------------------------\n\nTITLE: RF Tool RX Single Shot Mode\nDESCRIPTION: This command configures the DECT RF tool in receive (RX) single-shot mode. It enables the RX find sync feature, sets the frame repeat count to 15, and specifies channel 1677 after setting the target to frequency 39.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndect sett -t 39\ndect rf_tool -m rx --rx_find_sync --frame_repeat_count 15 -c 1677\n```\n\n----------------------------------------\n\nTITLE: Enabling Both Modem Traces and TF-M Logs using West\nDESCRIPTION: Command to activate both modem traces with UART backend and TF-M logs when building an application with west. This directs TF-M logs to the application's UART (UART0).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_snippet.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nwest build --board *board_target* -S nrf91-modem-trace-uart -S tfm-enable-share-uart\n```\n\n----------------------------------------\n\nTITLE: Setting Language with Shell Command\nDESCRIPTION: Command to set the language metadata for a subgroup using a three-letter ISO 639-2 language code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnac lang <language> <BIG index> <Subgroup index>\n```\n\n----------------------------------------\n\nTITLE: Setting Partition Management Configuration for Thingy91\nDESCRIPTION: Configures static partition management settings for different build scenarios including factory, secure boot, and LwM2M carrier configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/boards/nordic/thingy91/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_THINGY91_STATIC_PARTITIONS_FACTORY)\n  set(PM_STATIC_YML_FILE ${CMAKE_CURRENT_LIST_DIR}/thingy91_pm_static.yml CACHE INTERNAL \"\")\nendif()\n\nif(CONFIG_THINGY91_STATIC_PARTITIONS_SECURE_BOOT)\n  set(PM_STATIC_YML_FILE ${CMAKE_CURRENT_LIST_DIR}/thingy91_pm_static_secure_boot.yml CACHE INTERNAL \"\")\nendif()\n\nif(CONFIG_THINGY91_STATIC_PARTITIONS_LWM2M_CARRIER)\n  set(PM_STATIC_YML_FILE ${CMAKE_CURRENT_LIST_DIR}/thingy91_pm_static_lwm2m_carrier.yml CACHE INTERNAL \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Logging Connected Device Information in C\nDESCRIPTION: This code snippet logs information about a successful Bluetooth connection, including the device address and Channel Sounding (CS) configuration status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/channel_sounding_ras_reflector/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nI: Connected to xx.xx.xx.xx.xx.xx (random) (err 0x00)\nI: CS capability exchange completed.\nI: CS config creation complete. ID: 0\nI: CS security enabled.\nI: CS procedures enabled.\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Matter Template in CMake\nDESCRIPTION: Adds specific source files (app_task.cpp and main.cpp) to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/template/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n    src/app_task.cpp\n    src/main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring RAM Power Down Project with CMake\nDESCRIPTION: CMake configuration that sets up a RAM power down project with Zephyr dependencies. Defines minimum CMake version, finds Zephyr package, and compiles all .c source files from the src directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/ram_pwrdn/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(ram_pwrdn)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Devices with nrfutil\nDESCRIPTION: Command to check available devices using nrfutil, which returns information about connected development kits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device list\n```\n\n----------------------------------------\n\nTITLE: Get CMD Radio Power - Custom Command Usage\nDESCRIPTION: This command retrieves the current transmission power setting of the CMD device for validation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ncustom lgetpower\n```\n\n----------------------------------------\n\nTITLE: Updating nRF5340 Firmware via USB and MCUboot\nDESCRIPTION: Command to update both application and network core of nRF5340 using a multi-image DFU file over USB. Requires the device serial number and uses MCUboot trait.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy91x/thingy91x_updating_fw_programmer.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --firmware dfu_application.zip --serial-number <Thingy:91 X Serial number> --traits mcuboot --x-family nrf53\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Platform Manifest Retrieval Test in CMake\nDESCRIPTION: Sets up a test project for SUIT platform manifest retrieval functionality in nRFConnect SDK. The configuration includes required source files from the SUIT subsystem, particularly focusing on the platform-specific and SDFW-specific implementation of manifest retrieval. It also handles conditional inclusion of mock memory layout configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_retrieve_manifest/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(plat_retrieve_manifest)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_retrieve_manifest.c\n  ${SUIT_SUBSYS_DIR}/platform/sdfw/src/suit_plat_retrieve_manifest_sdfw_specific.c\n)\n\nif (CONFIG_MOCK_SUIT_MEMORY_LAYOUT)\n  target_include_directories(testbinary PRIVATE .)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding PSA Crypto Service Source Files in Zephyr\nDESCRIPTION: Configures Zephyr build to include source files for PSA crypto service encoding and decoding. Adds two source files and sets the include directory to the current directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/psa_crypto/zcbor_generated/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources(\n\tpsa_crypto_service_decode.c\n\tpsa_crypto_service_encode.c\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Simulating RPU Recovery\nDESCRIPTION: Simulate the RPU recovery process to test the resilience of the network connection in case of an RPU hang. Ensure that the sample is built with `CONFIG_SHELL` and `CONFIG_NRF70_UTIL` Kconfig options enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/sta/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnrf70 util rpu_recovery_test\n```\n\n----------------------------------------\n\nTITLE: Determining and Linking OpenThread Libraries Based on Configuration\nDESCRIPTION: Logic to determine which OpenThread libraries should be linked based on the project configuration (FTD, MTD, RCP, NCP modes). Sets up the appropriate dependencies for the selected OpenThread configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Determine which libs should be linked in\nset(ot_libs \"\")\n\nif(CONFIG_OPENTHREAD_FTD)\nset(cli_lib openthread-cli-ftd)\nelseif(CONFIG_OPENTHREAD_MTD)\nset(cli_lib openthread-cli-mtd)\nendif()\n\nif(CONFIG_OPENTHREAD_SHELL)\nlist(APPEND ot_libs ${cli_lib})\nendif()\n\nif(CONFIG_OPENTHREAD_COPROCESSOR_RCP)\nlist(APPEND ot_libs openthread-rcp)\nendif()\n\nif(CONFIG_OPENTHREAD_COPROCESSOR_NCP)\nif(CONFIG_OPENTHREAD_FTD)\nlist(APPEND ot_libs openthread-ncp-ftd)\nelseif(CONFIG_OPENTHREAD_MTD)\nlist(APPEND ot_libs openthread-ncp-mtd)\nendif()\nendif()\n\nif(NOT CONFIG_OPENTHREAD_COPROCESSOR_RCP)\nif(CONFIG_OPENTHREAD_FTD)\nlist(APPEND ot_libs openthread-ftd)\nelseif(CONFIG_OPENTHREAD_MTD)\nlist(APPEND ot_libs openthread-mtd)\nendif()\nendif()\n\nif(CONFIG_HDLC_RCP_IF)\nlist(APPEND ot_libs\n  ot-config\n  openthread-platform\n  openthread-radio-spinel\n  openthread-spinel-ncp\n  openthread-url\n  openthread-hdlc\n)\nendif()\n\nif(CONFIG_OPENTHREAD_SETTINGS_RAM)\n  target_compile_options(openthread-platform-utils PRIVATE\n    $<TARGET_PROPERTY:zephyr_interface,INTERFACE_COMPILE_OPTIONS>\n    $<TARGET_PROPERTY:compiler,no_builtin>)\n  add_dependencies(openthread-platform-utils syscall_list_h_target)\n\n  list(APPEND ot_libs openthread-platform-utils-static)\nendif()\n\nzephyr_link_libraries(${ot_libs})\n```\n\n----------------------------------------\n\nTITLE: Data Transfer Measurement with Iperf3\nDESCRIPTION: Utilize iperf3 within Modem Shell to measure data transfer performance over TCP or UDP in both uplink and downlink directions. Provides options for detailed output and payload size configuration; does not support certain functionalities like TCP option tuning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\niperf3 --client 111.222.111.222 --port 10000 -l 3540 --time 30 -V -R\n```\n\nLANGUAGE: console\nCODE:\n```\niperf3 -c 111.222.111.222 -p 10000 -l 708 -t 30 --pdn_id 2\n```\n\nLANGUAGE: console\nCODE:\n```\niperf3 --client 111.222.111.222 --port 10000 -l 1240 --time 60 -u -V -d\n```\n\nLANGUAGE: console\nCODE:\n```\niperf3 --client 1a2b:1a2b:1a2b:1a2b::1 --port 20000 --time 10 -R -6\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Toolchain Bundle\nDESCRIPTION: Command for installing a specific toolchain bundle using a custom ID\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnrfutil sdk-manager toolchain install --toolchain-bundle-id *custom_bundle_ID*\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr Project in CMake\nDESCRIPTION: This snippet configures a CMake project that utilizes the Zephyr framework and sets the minimum required CMake version to 3.20.0. It specifies the path to the Zephyr base environment variable for locating the Zephyr package and defines a project named \\'remote\\'. The \\'target_sources\\' command adds the main source file from a relative path to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_ipc/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\\n\\nfind_package(Zephyr REQUIRED HINTS \\$ENV{ZEPHYR_BASE})\\nproject(remote)\\n\\ntarget_sources(app PRIVATE ../src/main.c)\n```\n\n----------------------------------------\n\nTITLE: PPP Status Read Command\nDESCRIPTION: AT command syntax for reading current PPP status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/PPP_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: at-commands\nCODE:\n```\nAT#XPPP?\n```\n\n----------------------------------------\n\nTITLE: CRACEN KMU Seed Key Usage Scheme Macro\nDESCRIPTION: Macro definition for Seed usage scheme in CRACEN KMU, used for slots pushed to CRACEN's SEED registers, typically for platform keys.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/cryptography.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nCRACEN_KMU_KEY_USAGE_SCHEME_SEED\n```\n\n----------------------------------------\n\nTITLE: Logging Bluetooth Anchor Points and Trigger Times\nDESCRIPTION: This snippet shows log output from a Bluetooth application, displaying anchor points with timestamps and counters, along with trigger times and corresponding values. It demonstrates the timing and synchronization aspects of the Bluetooth communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/conn_time_sync/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nReceived: c_anchor point (time=22487336, counter=30), c_trigger_time 22534862, value 1\nReceived: c_anchor point (time=22627336, counter=44), c_trigger_time 22672893, value 0\nReceived: c_anchor point (time=22767336, counter=58), c_trigger_time 22810894, value 1\nReceived: c_anchor point (time=22907336, counter=72), c_trigger_time 22948833, value 0\nReceived: c_anchor point (time=23037336, counter=85), c_trigger_time 23086773, value 1\nReceived: c_anchor point (time=23177336, counter=99), c_trigger_time 23224865, value 0\nReceived: c_anchor point (time=23317336, counter=113), c_trigger_time 23362957, value 1\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Configures include paths for the library, including current directory, common directory, and OpenThread module includes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/rpc/client/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_include_directories(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/../common\n)\n\nzephyr_include_directories(${ZEPHYR_OPENTHREAD_MODULE_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: NMEA-only Output Mode in Console\nDESCRIPTION: Shows only NMEA string outputs in the console when NMEA-only mode is enabled. Useful for integration with third-party visualization tools.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/gnss/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$GPGGA,000000.00,,,,,0,,99.99,,M,0,,*37\n```\n\n----------------------------------------\n\nTITLE: Swift Pair Module Configuration Options\nDESCRIPTION: Kconfig options required to enable and configure the Swift Pair module functionality\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/swift_pair_app.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DESKTOP_SWIFT_PAIR\nCONFIG_DESKTOP_BLE_DONGLE_PEER_ID_INFO\nCONFIG_BT_ADV_PROV_SWIFT_PAIR\nCONFIG_CAF_BLE_COMMON_EVENTS\nCONFIG_DESKTOP_BLE_DONGLE_PEER_ENABLE\nCONFIG_DESKTOP_SWIFT_PAIR_ADV_DONGLE_PEER\nCONFIG_DESKTOP_SWIFT_PAIR_ADV_GENERAL_PEER\n```\n\n----------------------------------------\n\nTITLE: Adding Mandatory Module Subdirectories\nDESCRIPTION: Adds subdirectories for the mandatory modules (trigger, sampler, network, transport, and error) to the build. These modules are essential for the core functionality of the MQTT project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(src/modules/trigger)\"\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(src/modules/sampler)\"\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(src/modules/network)\"\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(src/modules/transport)\"\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(src/modules/error)\"\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Scan Sample Output: Raw Scan Results\nDESCRIPTION: Console output displaying raw scan results, including length, frequency, RSSI, and raw data for each detected access point.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/scan/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nScan requested\nNum  | len   | Frequency | RSSI | RAW_DATA(32 bytes)\n1    | 299   | 2412 | -44  | 50 00 3A 01 F4 CE 36 00 10 CE D4 BD 4F E1 F5 33 D4 BD 4F E1 F5 33 A0 7F 0B 05 75 7F D8 00 00 00\n2    | 430   | 2412 | -37  | 50 00 3A 01 F4 CE 36 00 10 CE 3C 7C 3F DA DF 38 3C 7C 3F DA DF 38 90 11 69 36 EC 8A 02 00 00 00\n3    | 284   | 2412 | -45  | 50 00 3A 01 F4 CE 36 00 10 CE D4 BD 4F 21 F5 38 D4 BD 4F 21 F5 38 20 CF 7B 20 75 7F D8 00 00 00\n4    | 299   | 2412 | -43  | 50 00 3A 01 F4 CE 36 00 10 CE D4 BD 4F E1 F5 33 D4 BD 4F E1 F5 33 B0 7F EC 2B 75 7F D8 00 00 00\n5    | 409   | 2412 | -38  | 50 00 3A 01 F4 CE 36 00 10 CE A0 36 BC 56 41 E0 A0 36 BC 56 41 E0 60 E2 C7 A5 0F 90 0D 00 00 00\nScan request done\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet uses the find_package command to locate the Zephyr package, which is necessary for building applications on the Zephyr RTOS framework. It provides a hint to help locate the package using an environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_fuel_gauge/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Test Build Sources\nDESCRIPTION: Configures include directories and source files for Zephyr test build system. Includes test files for IKG identity key signing, key derivation, and KMU operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/psa_crypto/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src\n)\nzephyr_sources(test_ikg_identity_key_sign_verify.c)\nzephyr_sources(test_ikg_key_derivation.c)\nzephyr_sources(test_kmu_write.c)\nzephyr_sources(test_kmu_use.c)\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for Matter\nDESCRIPTION: This snippet explains how to enable logging for Matter using the `CONFIG_LOG` option, which enables logging for both the Matter stack and Zephyr's logging API. Enabling this option is essential for debugging and monitoring Matter applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_10\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_LOG`\"\n```\n\n----------------------------------------\n\nTITLE: Setting CMD TX antenna ID with lsettxantenna command in Shell\nDESCRIPTION: Sets the antenna used by the CMD device for TX operations only. Antenna ID can be either 0 or 1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ncustom lsettxantenna *1*\n```\n\n----------------------------------------\n\nTITLE: Include TF-M Include Directories\nDESCRIPTION: This snippet adds TF-M specific include directories to the project. It includes the `include/tfm` directory within the Zephyr nRF module directory, providing necessary header files for TF-M integration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/include/tfm)\n```\n\n----------------------------------------\n\nTITLE: Console Output on Button 1 Press\nDESCRIPTION: Console output when Button 1 is pressed, showing Wi-Fi initialization and network scanning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shutdown/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n[00:00:29.141,357] <inf> wifi_nrf: Firmware (v1.2.8.1) booted successfully\n\n[00:00:29.269,165] <inf> scan: Interface up\n[00:00:29.272,521] <inf> scan: Scan requested\n\nNum  | SSID                             (len) | Chan | RSSI | Security | BSSID\n1    | abcdef                           6     | 1    | -37  | WPA/WPA2 | aa:aa:aa:aa:aa:aa\n2    | pqrst                            5     | 1    | -65  | WPA/WPA2 | xx:xx:xx:xx:xx:xx\n3    | AZBYCXD                          7     | 1    | -41  | WPA/WPA2 | yy:yy:yy:yy:yy:yy\n[00:00:34.092,285] <inf> scan: Scan request done\n```\n\n----------------------------------------\n\nTITLE: Describing AWS IoT Endpoint - Console\nDESCRIPTION: This command is used to describe the AWS IoT endpoint necessary for communication with the AWS IoT services. The endpoint must be obtained before setting the Kconfig options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\naws iot describe-endpoint --endpoint-type iot:Data-ATS\n```\n\n----------------------------------------\n\nTITLE: Checking Current Battery Model via Shell Command\nDESCRIPTION: Demonstrates using the shell command 'battery_model' to query the currently active battery model configuration in the fuel gauge application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm2100_fuel_gauge/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ battery_model\nBattery model: Alkaline AA\n```\n\n----------------------------------------\n\nTITLE: Adding USB Initialization Source File\nDESCRIPTION: Adds the USB device initialization source file to the target, making sure that the USB functionality is included in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_usb/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources($ENV{ZEPHYR_BASE}/samples/subsys/usb/common/sample_usbd_init.c)\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Application with West (nRF Connect SDK)\nDESCRIPTION: This snippet shows how to build and flash an application for a nRF52840dk board using the West tool. It includes erasing the whole memory. Replace *serial_number* with the actual serial number of your debugger.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/configuring.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 -p always\nwest flash --snr *serial_number* --erase\n```\n\n----------------------------------------\n\nTITLE: Implementing nRF70 Series Wi-Fi Coexistence in Devicetree\nDESCRIPTION: Devicetree node configuration for enabling Wi-Fi coexistence with the nRF70 Series device. This configuration defines the GPIO pins for the request, status, and grant signals needed for the coexistence interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/wifi_coex.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n      nrf_radio_coex: nrf7002-coex {\n         status = \"okay\";\n         compatible = \"nordic,nrf700x-coex\";\n         req-gpios =     <&gpio0 24 (GPIO_ACTIVE_HIGH)>;\n         status0-gpios = <&gpio0 14 (GPIO_ACTIVE_HIGH)>;\n         grant-gpios =   <&gpio0 25 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for I2C RTIO Loopback Project in Zephyr\nDESCRIPTION: This snippet contains the CMake configuration for building an I2C RTIO Loopback project. It sets the minimum CMake version to 3.20.0, finds the Zephyr package, defines the project name, and includes the main source file from the Zephyr samples directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/drivers/i2c/rtio_loopback/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(i2c_rtio_loopback)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/drivers/i2c/rtio_loopback/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF700x RPC Support\nDESCRIPTION: Adds RPC support for nRF700x coexistence when using nRF53 series SOCs with RPC enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/cx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_MPSL_CX_NRF700X AND CONFIG_SOC_SERIES_NRF53X AND CONFIG_NRF_RPC)\n  zephyr_library_sources(nrf700x/mpsl_cx_nrf700x_rpc.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering DULT Sound Callbacks in C\nDESCRIPTION: Register callbacks for handling sound start and stop requests from different sources like Bluetooth GATT and motion detector.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/dult.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ndult_sound_cb_register(&sound_cb);\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Source Files for ExtMem Service\nDESCRIPTION: Adds CBOR encoding and decoding source files to the Zephyr build system and configures include directories. The files were generated using a CMake macro for CBOR file generation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/extmem/zcbor_generated/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources(\n\textmem_service_decode.c\n\textmem_service_encode.c\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Set Default xyL Value (Acknowledged)\nDESCRIPTION: This shell command sets the default xyL value on the server and waits for a response. It requires the default lightness, x, and y values as input.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl default-set <Light> <X> <Y>\n\tSet the default xyL value of the server and wait for a response.\n\n\t* ``Light`` - Default lightness level to be set.\n\t* ``X`` - Default x level to be set.\n\t* ``Y`` - Default y level to be set.\n```\n\n----------------------------------------\n\nTITLE: Configuring PAW3212 Sensor in Devicetree\nDESCRIPTION: Example Devicetree configuration for the PAW3212 motion sensor, including SPI and GPIO settings. It shows how to set up pinctrl, SPI bus, and the sensor node with required properties.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/paw3212.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n&pinctrl {\n    spi0_default_alt: spi0_default_alt {\n        group1 {\n            psels = <NRF_PSEL(SPI_SCK, 0, 10)>,\n                    <NRF_PSEL(SPI_MISO, 0, 12)>,\n                    <NRF_PSEL(SPI_MOSI, 0, 13)>;\n        };\n    };\n\n    spi0_sleep_alt: spi0_sleep_alt {\n        group1 {\n            psels = <NRF_PSEL(SPI_SCK, 0, 16)>,\n                    <NRF_PSEL(SPI_MISO, 0, 15)>,\n                    <NRF_PSEL(SPI_MOSI, 0, 17)>;\n            low-power-enable;\n      };\n    };\n};\n\n&spi0 {\n    compatible = \"nordic,nrf-spim\";\n    status = \"okay\";\n    pinctrl-0 = <&spi0_default_alt>;\n    pinctrl-1 = <&spi0_sleep_alt>;\n    pinctrl-names = \"default\", \"sleep\";\n    cs-gpios = <&gpio0 15 GPIO_ACTIVE_LOW>;\n\n    paw3212@0 {\n        compatible = \"pixart,paw3212\";\n        reg = <0>;\n        irq-gpios = <&gpio0 14 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;\n        spi-max-frequency = <2000000>;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: nRF53 CPUNET Management Code\nDESCRIPTION: This C file contains the code responsible for managing the network core (CPUNET) on the nRF5340. It handles the starting and GPIO pin configuration of the network core.  This is important even when the firmware is running only on the network core.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/features_nrf53.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n\":file:`zephyr/soc/nordic/nrf53/nrf53_cpunet_mgmt.c`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version for Nordic NRF Project\nDESCRIPTION: Sets the minimum required CMake version for the project, ensuring compatibility with the build system requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_counter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for NRF Modem AT Mock in CMake\nDESCRIPTION: Sets up a Zephyr library for mocking NRF modem AT commands. It specifies the source file, defines manual mocks for scanf and printf functions, and configures linking options to use the mocked versions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/mocks/nrf_modem_at/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(mock_nrf_modem_at.c)\n# Manually handled mock.\nset(mock_function_scanf nrf_modem_at_scanf)\nset(mock_function_printf nrf_modem_at_printf)\nzephyr_library_link_libraries(\"-Wl,--defsym,${mock_function_scanf}=__cmock_${mock_function_scanf}\")\nzephyr_library_link_libraries(\"-Wl,--defsym,${mock_function_printf}=__cmock_${mock_function_printf}\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Audio File with Shell Command\nDESCRIPTION: Command to select an LC3 format audio file from the SD card to be used as the audio source for a specific stream, identified by BIG index, subgroup index, and BIS index.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnac file select <file> <BIG index> <subgroup index> <BIS index>\n```\n\n----------------------------------------\n\nTITLE: Enabling PBKDF2-HMAC Key Derivation Function in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for the PBKDF2-HMAC (Password-Based Key Derivation Function 2 with HMAC) algorithm within the PSA Cryptography API. This function is typically used to derive keys from passwords.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_10\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_PBKDF2_HMAC`\"\n```\n\n----------------------------------------\n\nTITLE: Locating Zephyr SDK and Initializing Project\nDESCRIPTION: Finds the Zephyr SDK using environment variables and initializes the project with a placeholder name, preparing for Nordic SDK application development\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hids_keyboard/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: Configuring ECJPAKE Project with CMake\nDESCRIPTION: Basic CMake configuration for an ECJPAKE project that sets up the build environment, finds the Zephyr package, defines the project name, and specifies the main source file to be compiled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/ecjpake/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(ecjpake)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Ping DUT Device - Custom Command Usage\nDESCRIPTION: This command sends a PING to the DUT device and waits for a reply, facilitating device connectivity checks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncustom rping\n```\n\n----------------------------------------\n\nTITLE: Legacy SRAM Region Definition in Device Tree\nDESCRIPTION: Example of old SRAM region definition style using nordic,allocatable-ram binding under the soc node. Shows memory region configuration with IPC shared memory areas.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2.7_application.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n   soc {\n      ram0x: memory@2f000000 {\n         reg = <0x2f000000 DT_SIZE_K(768)>;\n         ranges = <0 0x2f000000 0xc0000>;\n         ...\n         cpuapp_ram0x_s: memory@10000 {\n            compatible = \"nordic,allocatable-ram\";\n            reg = <0x10000 DT_SIZE_K(260)>;\n            perm-read;\n            perm-write;\n            perm-secure;\n            #address-cells = <1>;\n            #size-cells = <1>;\n            ranges = <0x0 0x10000 0x41000>;\n            ipc_shm_area_cpusec_cpuapp: memory@0 {\n               reg = <0x0 DT_SIZE_K(4)>;\n               #address-cells = <1>;\n               #size-cells = <1>;\n               ranges = <0x0 0x0 DT_SIZE_K(4)>;\n               ipc_shm_cpusec_cpuapp: memory@0 {\n                  reg = <0x0 DT_SIZE_K(2)>;\n               };\n               ipc_shm_cpuapp_cpusec: memory@800 {\n                  reg = <0x800 DT_SIZE_K(2)>;\n               };\n            };\n         };\n      };\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Twister on Windows for Specific Board\nDESCRIPTION: Command for running unit tests using Twister tool on Windows for a specific target board (qemu_cortex_m3). The -p parameter specifies the target board platform.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/test_framework/running_unit_tests.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n<Zephyr_path>/scripts/twister -T . -p qemu_cortex_m3\n```\n\n----------------------------------------\n\nTITLE: Adding Core Cryptography Test Sources in CMake\nDESCRIPTION: Adds source files for various cryptographic algorithm tests including SHA, HMAC, ECDH, ECDSA, AES, and AEAD. These files contain the core test implementations for each algorithm.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/crypto/test_cases/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources(test_sha_256.c)\nzephyr_sources(test_sha_512.c)\nzephyr_sources(test_hmac.c)\nzephyr_sources(test_hkdf.c)\nzephyr_sources(test_ecdh.c)\nzephyr_sources(test_ecdsa.c)\nzephyr_sources(test_aes_ecb.c)\nzephyr_sources(test_aead.c)\nzephyr_sources(test_ecjpake.c)\nzephyr_sources(test_aes_cbc.c)\nzephyr_sources(test_aes_cbc_mac.c)\nzephyr_sources(test_aes_ecb_mac.c)\nzephyr_sources(test_aes_ctr.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name\nDESCRIPTION: Initializes the project with 'NONE' name, which is a placeholder indicating no specific project name is set\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/record_text/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: Adding Sources to Application Target\nDESCRIPTION: Adds the globbed source files to the application target for compilation, enabling the build process to include all discovered source files\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/record_text/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app  PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Erasing the Device with nRFUtil\nDESCRIPTION: Before provisioning with the Key Management Unit (KMU), this command ensures that the device is fully erased. It uses the nRFUtil tool for device management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device erase --all\n```\n\n----------------------------------------\n\nTITLE: Building SMP Server Sample for nRF54L SoCs\nDESCRIPTION: Build command for the SMP server sample on nRF54L SoCs with Bluetooth transport enabled via overlay configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/fota_update.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b *board_target* -- -DEXTRA_CONF_FILE=overlay-bt.conf\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Installing west in Virtual Environment on Windows\nDESCRIPTION: Installs the west tool inside the virtual environment on Windows.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_20\n\nLANGUAGE: bat\nCODE:\n```\npip3 install west\n```\n\n----------------------------------------\n\nTITLE: Building for nRF9161 DK\nDESCRIPTION: Command to build the Wi-Fi shell sample for nRF9161 DK with scan-only configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf9161dk/nrf9161/ns -- -DEXTRA_CONF_FILE=overlay-scan-only.conf -DSHIELD=nrf7002ek\n```\n\n----------------------------------------\n\nTITLE: Configuring SMS Library Options in Kconfig\nDESCRIPTION: Kconfig options for enabling the SMS subscriber library and setting the maximum number of SMS subscribers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/sms.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_SMS - Enables the SMS subscriber library.\nCONFIG_SMS_SUBSCRIBERS_MAX_CNT - Sets the maximum number of SMS subscribers.\n```\n\n----------------------------------------\n\nTITLE: Set Ping Timeout - Custom Command Usage\nDESCRIPTION: This command sets the timeout (in milliseconds) for receiving responses from the DUT device using two byte arguments. It requires higher and lower bytes for timeout definition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncustom lpingtimeout *<timeout:1>* *<timeout:0>*\n```\n\n----------------------------------------\n\nTITLE: Defining Matter Device Type in XML\nDESCRIPTION: Example of defining a Matter device type configuration including name, domain, profile ID, device ID, and cluster requirements. Specifies a simple endpoint-scoped device with specific cluster inclusions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/custom_clusters.rst#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<deviceType>\n   <name>my-new-device</name>\n   <domain>CHIP</domain>\n   <typeName>My new device</typeName>\n   <profileId editable=\"false\">0x0104</profileId>\n   <deviceId editable=\"false\">0xfff10001</deviceId>\n   <class>Simple</class>\n   <scope>Endpoint</scope>\n   <clusters lockOthers=\"true\">\n   <include cluster=\"MyNewCluster\" client=\"true\" server=\"true\" clientLocked=\"false\" serverLocked=\"false\"/>\n      <requireAttribute>MY_ATTRIBUTE</requireAttribute>\n      <requireCommand>MyCommand</requireCommand>\n   </clusters>\n</deviceType>\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Operational Keys Migration in Kconfig\nDESCRIPTION: Defines Kconfig options to enable and configure migration of operational keys to PSA ITS secure storage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/common/config.rst#2025-04-21_snippet_5\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_OPERATIONAL_KEYS_MIGRATION_TO_ITS\n  \"bool\" - Enable migration of the operational keys stored in the persistent storage to the PSA ITS secure storage.\n\nCONFIG_NCS_SAMPLE_MATTER_FACTORY_RESET_ON_KEY_MIGRATION_FAILURE\n  \"bool\" - Enable the device to perform a factory reset if the operational key for the fabric has not been migrated properly to the PSA ITS secure storage.\n```\n\n----------------------------------------\n\nTITLE: Building for MCUboot Recovery Mode\nDESCRIPTION: Command for building the sample with MCUboot recovery mode enabled for nRF9160dk/nRF52840 hardware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/smp_svr/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build --pristine -b nrf9160dk/nrf52840 -- -DEXTRA_DTC_OVERLAY_FILE=\"nrf9160dk_nrf52840_recovery.overlay\"\n```\n\n----------------------------------------\n\nTITLE: Registering LwM2M Object Type with Engine in C\nDESCRIPTION: Initializes the IPSO Digital Output object with field definitions, maximum instance count, and creation callback, then registers it with the LwM2M engine and creates a default instance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_client_utils.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstatic int ipso_output_init(void)\n{\n   output_obj.obj_id = IPSO_DIGITAL_OUTPUT_ID;\n   output_obj.fields = fields;\n   output_obj.field_count = ARRAY_SIZE(fields);\n   output_obj.max_instance_count = ARRAY_SIZE(inst);\n   output_obj.create_cb = output_create;\n   lwm2m_register_obj(&output_obj);\n   lwm2m_create_obj_inst(&LWM2M_OBJ(3201, 0));\n   lwm2m_register_post_write_callback(RESOURCE_PATH, on_off_cb);\n   return 0;\n}\nLWM2M_OBJ_INIT(ipso_output_init);\n```\n\n----------------------------------------\n\nTITLE: Configuring BT_LE_ADV_OPT_DIR_ADDR_RPA Option - C\nDESCRIPTION: The BT_LE_ADV_OPT_DIR_ADDR_RPA option must be set when advertising towards a privacy-enabled peer, regardless of privacy settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nBT_LE_ADV_OPT_DIR_ADDR_RPA\n```\n\n----------------------------------------\n\nTITLE: Bootloader Update File Path Parsing - C\nDESCRIPTION: This snippet refers to the function `fota_download_b1_file_parse`, which is used to parse a bootloader update file path. This helps in managing and processing bootloader update files during FOTA updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Tearing Down TWT Sessions in Wi-Fi Shell\nDESCRIPTION: Commands for tearing down Target Wake Time (TWT) sessions using the Wi-Fi shell. These commands allow you to terminate a single TWT session or all active TWT sessions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/station_mode/powersave.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwifi twt teardown\nwifi twt teardown_all\n```\n\n----------------------------------------\n\nTITLE: Updating nRF9151 Modem Firmware via Debug Probe\nDESCRIPTION: Command to program the modem firmware on the nRF9151 SiP using an external debug probe. Requires J-Link serial number and uses jlink trait.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy91x/thingy91x_updating_fw_programmer.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --firmware <modem.zip> --serial-number <J-Link Serial number> --traits jlink --x-family nrf91\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific OpenThread Components\nDESCRIPTION: Adds platform-specific OpenThread components to the build by including the platform subdirectory. This allows OpenThread to work with specific hardware platforms supported by Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(platform)\n```\n\n----------------------------------------\n\nTITLE: Documenting Event Module Relationships in RST\nDESCRIPTION: ReStructuredText document listing the source and sink modules for various events in the nRF Desktop system. Each section details which modules can generate (source) and handle (sink) specific events like BLE peer events, configuration events, HID reports, module states, power management and wake-up events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_rel_modules.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _nrf_desktop_event_rel_modules:\\n\\nSource and sink module lists\\n############################\\n\\n.. contents::\\n   :local:\\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for SUIT A/B Project in Zephyr\nDESCRIPTION: Sets up the CMake configuration for the SUIT A/B project. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, adds source files, includes directories, and links necessary libraries. It also conditionally includes Bluetooth transport for MCUmgr if enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(suit_ab)\n\ntarget_sources(app PRIVATE src/main.c)\ntarget_sources(app PRIVATE src/suit_manifests_state.c)\ntarget_sources(app PRIVATE src/suit_components_state.c)\ntarget_sources(app PRIVATE src/device_management.c)\nzephyr_library_include_directories(src)\n\nzephyr_library_link_libraries(suit_manifest_variables)\nzephyr_library_link_libraries(suit_ipuc)\n\n# This project uses orginal sdk-zephyr C source code\ntarget_include_directories(app PRIVATE $ENV{ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src)\ntarget_sources_ifdef(CONFIG_MCUMGR_TRANSPORT_BT app PRIVATE $ENV{ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src/bluetooth.c)\n```\n\n----------------------------------------\n\nTITLE: Building Certification Image for OpenThread CLI Sample\nDESCRIPTION: Command-line instructions for building a Thread certification image using the OpenThread CLI sample with specific build configuration options for nRF52840 Development Kit\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/certification.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ncs/nrf/samples/openthread/cli/\nwest build -b nrf52840dk/nrf52840 -- -Dcli_SNIPPET=\"ci;multiprotocol\"  -DCONFIG_OPENTHREAD_LIBRARY=y\n```\n\n----------------------------------------\n\nTITLE: Enabling ZZHC Library in Kconfig\nDESCRIPTION: This snippet shows the required Kconfig options to enable the ZZHC library in a project. It includes setting CONFIG_ZZHC to y, enabling non-secure execution, setting heap size, and configuring networking and settings options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/zzhc.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_ZZHC=y\nCONFIG_TRUSTED_EXECUTION_NONSECURE=y\nCONFIG_HEAP_MEM_POOL_SIZE=2560\nCONFIG_NETWORKING=y\nCONFIG_NET_NATIVE=n\nCONFIG_NET_SOCKETS=y\nCONFIG_NET_SOCKETS_OFFLOAD=y\nCONFIG_FLASH=y\nCONFIG_FLASH_PAGE_LAYOUT=y\nCONFIG_FLASH_MAP=y\nCONFIG_MPU_ALLOW_FLASH_WRITE=y\nCONFIG_NVS=y\nCONFIG_SETTINGS_NVS_SECTOR_COUNT=6\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to DECT PHY RF Tool Application in CMake\nDESCRIPTION: Adds the dect_phy_rf_tool.c source file from the current directory to the app target's source files. This specifies which source files should be compiled into the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/dect/rf_tool/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_rf_tool.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing nrfutil device command version 2.7.2\nDESCRIPTION: Command to install the required nrfutil device command version 2.7.2 using the force option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil install device=2.7.2 --force\n```\n\n----------------------------------------\n\nTITLE: Building Matter Bridge with Extended BLE Connections (Wi-Fi)\nDESCRIPTION: Command for building Matter bridge over Wi-Fi with increased Bluetooth LE connections (up to 19 bridged devices) by adjusting buffer sizes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -p -- -Dmatter_bridge_SHIELD=nrf7002ek -DSB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE=y -DSB_CONFIG_DFU_MULTI_IMAGE_PACKAGE_WIFI_FW_PATCH=y -DSB_CONFIG_WIFI_NRF70=y -Dmcuboot_CONFIG_UPDATEABLE_IMAGE_NUMBER=3 -DCONFIG_BRIDGED_DEVICE_BT=y -DEXTRA_CONF_FILE=\"overlay-bt_max_connections_app.conf\" -Dipc_radio_EXTRA_CONF_FILE=\"overlay-bt_max_connections_net.conf\" -DFILE_SUFFIX=nrf70ek\n```\n\n----------------------------------------\n\nTITLE: Configuring Oberon PSA Core Source Files\nDESCRIPTION: Appends platform and core crypto source files from the Oberon PSA library path to build variables.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/core/nrf_oberon/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nappend_with_prefix(src_crypto_core_oberon ${OBERON_PSA_CORE_PATH}/library/\n  platform.c\n  platform_util.c\n)\n\nappend_with_prefix(src_crypto_core_oberon ${OBERON_PSA_CORE_PATH}/library/\n  psa_crypto.c\n  psa_crypto_client.c\n  psa_crypto_slot_management.c\n  psa_crypto_storage.c\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing TF-M Provisioning Section in RST\nDESCRIPTION: This RST directive creates a reference label for the TF-M provisioning section, allowing it to be linked from other parts of the documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_provisioning.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ug_tfm_provisioning:\n```\n\n----------------------------------------\n\nTITLE: CDDL Schema for Modem Firmware Serialization\nDESCRIPTION: The CDDL (Concise Data Definition Language) scheme that defines the serialization format used for modem firmware updates. This format is used to structure the firmware data and metadata stored in the flash device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/fmfu_fdev.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nmodem_update_decode.c\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Cipher Suites Console Output\nDESCRIPTION: Sample console output showing the testing of various TLS cipher suites against example.com, including connection attempts and a summary of supported and unsupported cipher suites.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/ciphersuites/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nTLS ciphersuites sample started\ncertificate match\nwaiting for network.. OK\ntrying all ciphersuites to find out which ones are supported...\ntrying ciphersuite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\nconnecting to example.com... connect() failed, err: 95, Operation not supported on socket\ntrying ciphersuite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\nconnecting to example.com... connect() failed, err: 95, Operation not supported on socket\ntrying ciphersuite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\nconnecting to example.com... connect() failed, err: 95, Operation not supported on socket\ntrying ciphersuite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\nconnecting to example.com... connect() failed, err: 95, Operation not supported on socket\ntrying ciphersuite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\nconnecting to example.com... Connected.\ntrying ciphersuite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\nconnecting to example.com... Connected.\ntrying ciphersuite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\nconnecting to example.com... Connected.\ntrying ciphersuite: TLS_PSK_WITH_AES_256_CBC_SHA\nconnecting to example.com... connect() failed, err: 95, Operation not supported on socket\ntrying ciphersuite: TLS_PSK_WITH_AES_128_CBC_SHA256\nconnecting to example.com... connect() failed, err: 95, Operation not supported on socket\ntrying ciphersuite: TLS_PSK_WITH_AES_128_CBC_SHA\nconnecting to example.com... connect() failed, err: 95, Operation not supported on socket\ntrying ciphersuite: TLS_PSK_WITH_AES_128_CCM_8\nconnecting to example.com... connect() failed, err: 95, Operation not supported on socket\ntrying ciphersuite: TLS_EMPTY_RENEGOTIATIONINFO_SCSV\nconnecting to example.com... connect() failed, err: 95, Operation not supported on socket\n\nCiphersuite support summary for host `example.com`:\nTLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: No\nTLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: No\nTLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: No\nTLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: No\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: Yes\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: Yes\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: Yes\nTLS_PSK_WITH_AES_256_CBC_SHA: No\nTLS_PSK_WITH_AES_128_CBC_SHA256: No\nTLS_PSK_WITH_AES_128_CBC_SHA: No\nTLS_PSK_WITH_AES_128_CCM_8: No\nTLS_EMPTY_RENEGOTIATIONINFO_SCSV: No\n\nfinished.\n```\n\n----------------------------------------\n\nTITLE: HID Report ID Enumeration\nDESCRIPTION: Enumeration constants used for identifying different types of HID reports, particularly for boot protocol report identification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/hid_forward.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nenum {\n    REPORT_ID_RESERVED,\n    REPORT_ID_BOOT_KEYBOARD,\n    REPORT_ID_BOOT_MOUSE\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Resources for LwM2M Object Type in C\nDESCRIPTION: Defines the resources for the IPSO Digital Output object type with a single boolean resource for digital state that supports read and write operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_client_utils.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define N_RESOURCES        1\nstatic struct lwm2m_engine_obj_field fields[] = {\n   OBJ_FIELD(OUTPUT_DIGITAL_STATE_ID, RW, BOOL),\n};\n```\n\n----------------------------------------\n\nTITLE: DVFS State Tracking Constants\nDESCRIPTION: Defines the application states that DVFS module tracks for frequency management. Each state represents different operational modes requiring specific frequency levels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dvfs.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nDVFS_STATE_INITIALIZING    // Application initialization\nDVFS_STATE_LLPM_CONNECTED   // BLE Low Latency Packet Mode connection\nDVFS_STATE_USB_CONNECTED    // USB connection\nDVFS_STATE_CONFIG_CHANNEL   // Config channel active\nDVFS_STATE_SMP_TRANSFER     // DFU image transfer over BLE SMP\n```\n\n----------------------------------------\n\nTITLE: Conditional nRF Cloud Services Compilation\nDESCRIPTION: Checks for various nRF Cloud service configurations and adds the nrf_cloud subdirectory if any of them are defined. Includes support for MQTT, AGNSS, PGPS, REST, FOTA, COAP, and location services.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (DEFINED CONFIG_NRF_CLOUD_MQTT OR\n    DEFINED CONFIG_NRF_CLOUD_AGNSS OR\n    DEFINED CONFIG_NRF_CLOUD_PGPS OR\n    DEFINED CONFIG_NRF_CLOUD_REST OR\n    DEFINED CONFIG_NRF_CLOUD_FOTA OR\n    DEFINED CONFIG_NRF_CLOUD_COAP OR\n    DEFINED CONFIG_NRF_CLOUD_LOCATION)\n        add_subdirectory(nrf_cloud)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum CMake Version and Finding Zephyr Package\nDESCRIPTION: This snippet sets the minimum required version of CMake and searches for the Zephyr package necessary for building the project. It ensures the environment variable ZEPHYR_BASE is used to locate the Zephyr installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_outside_of_main/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Channel ID Assignments for Signal Originators\nDESCRIPTION: Table showing channel ID assignments for different signal originators in the IPC system\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_architecture_ipc.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSecDom                        0\nSecDom: signal to a debugger  1\nSystem Controller             6\nApplication                   12\nRadio                         18\n```\n\n----------------------------------------\n\nTITLE: Building for nRF9160 DK\nDESCRIPTION: Command to build the Wi-Fi shell sample for nRF9160 DK with scan-only configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf9160dk/nrf9160/ns -- -DEXTRA_CONF_FILE=overlay-scan-only.conf -DSHIELD=nrf7002ek\n```\n\n----------------------------------------\n\nTITLE: Disabling Thread Network in Coprocessor Sample\nDESCRIPTION: Command to leave the current WPAN in the OpenThread Coprocessor sample, which is necessary before starting the manual commissioning process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwpanctl:device_if> leave\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version for SUIT Integration Test\nDESCRIPTION: Specifies the minimum required CMake version for the project, ensuring compatibility with build requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/suit_memptr_storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Building an Application with Nordic SoC Binaries for SUIT Update\nDESCRIPTION: Command for building an application while pointing to the directory containing the nordic_top.suit envelope by setting the SUIT_ENVELOPE_NORDIC_TOP_DIRECTORY sysbuild configuration option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_soc_binaries.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp -- -DSB_CONFIG_SUIT_ENVELOPE_NORDIC_TOP_DIRECTORY=\"\\\"<NORDIC_TOP_DIRECTORY>\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Heap Usage Measurement Configuration - Parsed-literal\nDESCRIPTION: The following parsed-literal snippet configures various Kconfig options to measure heap usage in Matter applications. Key parameters include enabling CHIP_STATISTICS and heap watermark support, which are prerequisites for understanding dynamic memory allocation during operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_2\n\nLANGUAGE: parsed-literal\nCODE:\n```\nCONFIG_SHELL=y\nCONFIG_CHIP_STATISTICS=y\nCONFIG_CHIP_MALLOC_SYS_HEAP_WATERMARKS_SUPPORT=y\nCONFIG_CHIP_MALLOC_SYS_HEAP=y\nCONFIG_SYS_HEAP_RUNTIME_STATS=y\n```\n\n----------------------------------------\n\nTITLE: Disabling Printk for Memory Constrained Applications in Kconfig\nDESCRIPTION: Configuration settings to disable printk functionality and boot banner for memory optimization on PPR or FLPR cores. These settings help reduce memory usage in constrained environments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_logging.rst#2025-04-21_snippet_3\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_PRINTK=n\nCONFIG_BOOT_BANNER=n\n```\n\n----------------------------------------\n\nTITLE: Installing Script Requirements with pip\nDESCRIPTION: Command to install required Python dependencies for the Fast Pair provision script using pip\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/nrf_provision/fast_pair/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Modem Trace Backend Project in CMake\nDESCRIPTION: Sets up the CMake project for modem trace backend, including version requirements, Zephyr package finding, and project naming.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_trace_backend/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(modem_trace_backend)\n```\n\n----------------------------------------\n\nTITLE: Building Application Core Image from Command Line\nDESCRIPTION: Command to build the application core image with the nordic-flpr snippet for separate image builds. The snippet is required for proper FLPR integration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/building_nrf54l.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54l15dk/nrf54l15/cpuapp -S nordic-flpr --no-sysbuild\n```\n\n----------------------------------------\n\nTITLE: Defining pyhidapi dependency\nDESCRIPTION: Specifies the 'hid' library as a dependency with version constraints. It requires version 1.0.3 or higher but strictly less than 1.0.5. This constraint ensures compatibility and avoids potential issues with newer or older versions of the library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"hid>=1.0.3, <1.0.5\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Bluetooth Central Functionality\nDESCRIPTION: Required modules and their functions for implementing Bluetooth Central functionality in nRF Desktop application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/bluetooth.rst#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* nrf_desktop_ble_scan - Controls Bluetooth scanning\n* nrf_desktop_ble_conn_params - Controls connection parameters\n* nrf_desktop_ble_discovery - Handles GATT Characteristics\n* nrf_desktop_hid_forward - Manages HID reports subscription\n```\n\n----------------------------------------\n\nTITLE: Setting include directories for Zephyr\nDESCRIPTION: This command adds the current directory to the list of include directories used by the Zephyr build system. This allows the compiler to find header files located within the current project directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/app_event_manager/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_include_directories(.)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Core ICMP Ping Source Files in CMake\nDESCRIPTION: Adds the main ICMP ping implementation and shell interface source files to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/ping/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/icmp_ping.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/icmp_ping_shell.c)\n```\n\n----------------------------------------\n\nTITLE: Device Tree Overlay for Radio Core Recovery Image\nDESCRIPTION: DTS overlay for radio core recovery image, specifying the code partition and secure image settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_recovery.rst#2025-04-21_snippet_2\n\nLANGUAGE: dts\nCODE:\n```\n/ {\n   chosen {\n      zephyr,code-partition = &cpurad_recovery_partition;\n      nrf,tz-secure-image = &cpurad_recovery_partition;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Include Directories for Azure SDK\nDESCRIPTION: This CMake command specifies the include directories for the Azure SDK.  It adds the path to the Azure SDK's include directory, allowing the Zephyr project to access the necessary header files for compiling the Azure SDK components. This ensures that the compiler can find the definitions and declarations needed from the Azure SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/azure-sdk-for-c/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/inc\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing TF-M Secure Partition Size - Console\nDESCRIPTION: This snippet provides information on analyzing the size of the 'tfm_secure' partition from the build output, highlighting the memory regions used by the TF-M and their respective sizes. It demonstrates how to derive insights regarding memory usage and optimize configuration settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_building.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n[71/75] Linking C executable bin/tfm_s.axf\nMemory region   Used Size  Region Size  %age Used\n  FLASH:       31972 B       256 KB     12.20%\n  RAM:         4804 B        88 KB      5.33%\n```\n\n----------------------------------------\n\nTITLE: Building Wi-Fi Shutdown Sample for nRF7000 EK\nDESCRIPTION: Command to build the Wi-Fi shutdown sample for the nRF5340dk board with nRF7002ek_nrf7000 shield.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shutdown/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf7002ek_nrf7000\n```\n\n----------------------------------------\n\nTITLE: Building with Kconfig Overlays Using West Command\nDESCRIPTION: This snippet illustrates how to build the LwM2M carrier sample with specific Kconfig overlays using the west build command. It shows examples for using shell and SoftBank configurations, which takes precedence over prj.conf if overlapping options exist. This requires knowledge of CMake options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_carrier/sample_description.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\\nwest build -b *board_target* -- -DEXTRA_CONF_FILE=overlay-shell.conf\\n\n```\n\nLANGUAGE: console\nCODE:\n```\n\\nwest build -b *board_target* -- -DEXTRA_CONF_FILE=overlay-softbank.conf -DSB_CONF_FILE=sysbuild-softbank.conf\\n\n```\n\n----------------------------------------\n\nTITLE: Parsing an NDEF Message in C\nDESCRIPTION: Example code demonstrating how to parse an NDEF message after reading NFC data using the T2T parser. It allocates memory for the message descriptor, parses the NDEF message, and prints out the message content if successful.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/msg_parser.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint  err;\nuint8_t desc_buf[NFC_NDEF_PARSER_REQUIRED_MEM(MAX_NDEF_RECORDS)];\nsize_t desc_buf_len = sizeof(desc_buf);\n\nerr = nfc_ndef_msg_parse(desc_buf,\n                        &desc_buf_len,\n\t\t\tndef_msg_buff,\n\t\t\t&nfc_data_len);\n\nif (err) {\n     printk(\"Error during parsing an NDEF message, err: %d.\\n\", err);\n}\n\nnfc_ndef_msg_printout((struct nfc_ndef_msg_desc *) desc_buf);\n```\n\n----------------------------------------\n\nTITLE: Configuring Static IP Network Settings\nDESCRIPTION: Configuration settings for static IP address, netmask and gateway when DHCP is not available.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/raw_tx_packet/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nCONFIG_NET_CONFIG_MY_IPV4_ADDR=\"192.168.1.98\"\nCONFIG_NET_CONFIG_MY_IPV4_NETMASK=\"255.255.255.0\"\nCONFIG_NET_CONFIG_MY_IPV4_GW=\"192.168.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Storage AEAD Backend Sources\nDESCRIPTION: Conditionally includes source files for Trusted Storage AEAD backend based on compile-time configuration options using Zephyr's zephyr_sources_ifdef macro\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/trusted_storage/src/aead/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_TRUSTED_STORAGE_BACKEND_AEAD\n\ttrusted_backend_aead.c\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_TRUSTED_STORAGE_BACKEND_AEAD_CRYPTO_PSA_CHACHAPOLY\n\taead_crypt_psa_chachapoly.c\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_TRUSTED_STORAGE_BACKEND_AEAD_NONCE_PSA_SEED_COUNTER\n\taead_ctr_nonce.c\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_TRUSTED_STORAGE_BACKEND_AEAD_KEY_HASH_UID\n\taead_key_hash.c\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_TRUSTED_STORAGE_BACKEND_AEAD_KEY_DERIVE_FROM_HUK\n\taead_key_huk.c\n)\n```\n\n----------------------------------------\n\nTITLE: Matter: Interactive Mode Chip-Tool Start\nDESCRIPTION: This snippet shows how to start the chip-tool in interactive mode to communicate with the Matter device for commissioning and control.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"chip-tool interactive start\"\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with Zephyr BT Shell Support\nDESCRIPTION: Provides commands for building the MoSh sample with Zephyr Bluetooth shell support. This involves specific configurations for Bluetooth operations like scanning and advertising.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_47\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf9160dk/nrf9160/ns -- -DDTC_OVERLAY_FILE=\"bt.overlay\" -DEXTRA_CONF_FILE=\"overlay-bt.conf\"\n\nwest build -p -b nrf9160dk/nrf52840\n\nmosh:~$ bt init\nBluetooth initialized\nSettings Loaded\nmosh:~$ bt name mosh-scanner\nmosh:~$ bt name\nBluetooth Local Name: mosh-scanner\nmosh:~$ bt scan-filter-set name mosh-adv\nmosh:~$ bt scan on\nBluetooth active scan enabled\n[DEVICE]: 11:22:33:44:55:66(random), AD evt type 4, RSSI -42 mosh-adv C:0 S:1 D:0 SR:1 E:0 Prim: LE 1M, Secn: No packets, Interval: 0x0000 (0 ms), SID: 0xff\n\nmosh:~$ bt scan off\nScan successfully stopped\nmosh:~$\n```\n\n----------------------------------------\n\nTITLE: Defining Matter Enum Type in XML\nDESCRIPTION: Example of defining an enumerated type with two values associated with a specific cluster code. The enum is of type uint8 and defines two values: EnumValue1 (0) and EnumValue2 (1).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/custom_clusters.rst#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<enum name=\"MyNewEnum\" type=\"uint8\">\n   <cluster code=\"0xFFF1FC01\" />\n   <item name=\"EnumValue1\" value=\"0\" />\n   <item name=\"EnumValue2\" value=\"1\" />\n</enum>\n```\n\n----------------------------------------\n\nTITLE: XMODEM Fault Notification Format\nDESCRIPTION: Format of the unsolicited notification sent when a modem fault is detected. Includes a reason code (hexadecimal integer) and program count address (hexadecimal integer) of the fault.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/Generic_AT_commands.rst#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n#XMODEM: FAULT,<reason>,<program_count>\n```\n\n----------------------------------------\n\nTITLE: Dependencies Configuration for Matter Lock Sample\nDESCRIPTION: Lists the required dependencies for the Matter lock sample, including Matter library, NCS platform components, and Zephyr system libraries\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nDependencies\n************\n\nThis sample uses the Matter library that includes the |NCS| platform integration layer:\n\n* `Matter`_\n\nIn addition, the sample uses the following |NCS| components:\n\n* :ref:`dk_buttons_and_leds_readme`\n* :ref:`nfc_uri`\n* :ref:`lib_nfc_t2t`\n\nThe sample depends on the following Zephyr libraries:\n\n* :ref:`zephyr:logging_api`\n* :ref:`zephyr:kernel_api`\n```\n\n----------------------------------------\n\nTITLE: Using DECT Ping Command\nDESCRIPTION: Illustrates the usage of the 'dect ping' command for testing reachability, measuring round-trip time, and demonstrating HARQ.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndect rssi_scan -c 0\ndect sett -t 39\ndect ping -s --channel 1677\ndect ping -c --s_tx_id 39 --channel 1677\ndect ping -c --s_tx_id 39 --c_tx_pwr 7 -i 3 -t 2000 -l 4 --c_tx_mcs 4 --c_count 10 --channel 1677\ndect ping stop\ndect ping -s --tx_pwr_ctrl_auto --tx_pwr_ctrl_pdu_rx_exp_rssi_level -55 --channel 1677\ndect ping -c --s_tx_id 39 --tx_pwr_ctrl_auto --tx_pwr_ctrl_pdu_rx_exp_rssi_level -55 --channel 1677\ndect ping -c --s_tx_id 39 --channel 1677 -a\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Supported Development Kits in reStructuredText\nDESCRIPTION: This snippet defines a table listing the supported development kits for the cryptography tests using a custom reStructuredText directive.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/crypto/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. table-from-rows:: /includes/sample_board_rows.txt\n   :header: heading\n   :rows: nrf52840dk_nrf52840, nrf5340dk_nrf5340_cpuapp, nrf9151dk_nrf9151, nrf9160dk_nrf9160, nrf9161dk_nrf9161\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Manager Proxy Linker Script\nDESCRIPTION: Adds the em_proxy.ld linker script to RAM sections with a specific sort key to ensure it's processed after the main event manager linker script.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/event_manager_proxy/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_linker_sources(RAM_SECTIONS em_proxy.ld SORT_KEY 'zzz_place_after_em_ld_file')\n```\n\n----------------------------------------\n\nTITLE: Enabling LED PWM Nodes in DTS for CAF LEDs Module\nDESCRIPTION: This snippet demonstrates how to enable LED PWM nodes in the devicetree for the CAF LEDs module. It shows both enabling existing nodes and creating new ones for RGB and monochromatic LEDs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/leds.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\npwmleds0 {\n\tcompatible = \"pwm-leds\";\n\tstatus = \"okay\";\n\n\tpwm_led0: led_pwm_0 {\n\t\tstatus = \"okay\";\n\t\tpwms = <&pwm0 0 PWM_MSEC(1) PWM_POLARITY_INVERTED>;\n\t\tlabel = \"LED0 red\";\n\t};\n\n\tpwm_led1: led_pwm_1 {\n\t\tstatus = \"okay\";\n\t\tpwms = <&pwm0 1 PWM_MSEC(1) PWM_POLARITY_INVERTED>;\n\t\tlabel = \"LED0 green\";\n\t};\n\n\tpwm_led2: led_pwm_2 {\n\t\tstatus = \"okay\";\n\t\tpwms = <&pwm0 2 PWM_MSEC(1) PWM_POLARITY_INVERTED>;\n\t\tlabel = \"LED0 blue\";\n\t};\n};\n\npwmleds1 {\n\tcompatible = \"pwm-leds\";\n\tstatus = \"okay\";\n\n\tpwm_led3: led_pwm_3 {\n\t\tstatus = \"okay\";\n\t\tpwms = <&pwm1 0 PWM_MSEC(20) PWM_POLARITY_NORMAL>;\n\t\tlabel = \"LED1\";\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Viewing DECT Shell Command Structure\nDESCRIPTION: Shows the main command structure for the DECT shell application, including subcommands for activation, settings, radio mode, scanning, and MAC operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndect\n  activate\n  deactivate\n  sett\n  radio_mode\n  rssi_scan\n  ping\n  perf\n  rf_tool\n  status\n  rx\n  mac\n    beacon_scan\n    beacon_start\n    beacon_stop\n    rach_tx\n    associate\n    dissociate\n    status\n```\n\n----------------------------------------\n\nTITLE: Doxygen group\nDESCRIPTION: This snippet refers to the doxygen group that documents the API for the Generic Battery Server model.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_battery_srv.rst#2025-04-21_snippet_4\n\nLANGUAGE: None\nCODE:\n```\n.. doxygengroup:: bt_mesh_battery_srv\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Zephyr Project\nDESCRIPTION: This snippet adds the current directory as an include directory for the Zephyr build configuration. This allows the compiler to find header files located in the same directory as the source files, ensuring proper compilation of the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/enc_fw/zcbor_generated/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Building Project Path Definition\nDESCRIPTION: Defines the sample project path using reStructuredText substitution syntax.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/spake2p/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |sample path| replace:: :file:`samples/crypto/spake2p`\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Locates the Zephyr SDK using the `find_package` command.  It requires the Zephyr package and uses the environment variable `ZEPHYR_BASE` as a hint for the package location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_ppr/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion with CONFIG_BT_CHANNEL_SOUNDING\nDESCRIPTION: This CMake snippet includes the `cs_de` subdirectory in the build process only if the `CONFIG_BT_CHANNEL_SOUNDING` configuration option is defined. `add_subdirectory_ifdef` is used for conditional subdirectory inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory_ifdef(CONFIG_BT_CHANNEL_SOUNDING cs_de)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Zephyr-based Nordic Semiconductor NRF Project with CMake\nDESCRIPTION: Sets up the build environment for a Nordic Semiconductor NRF project using the Zephyr RTOS. It specifies CMake minimum version 3.20.0, locates the Zephyr package using the ZEPHYR_BASE environment variable, and adds the main.c source file to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/lpuart/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\ntarget_sources(app PRIVATE\n  src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Linking FLPR Memory Configuration for CPUAPP Application in DTS\nDESCRIPTION: This code snippet configures the CPUAPP application to recognize where FLPR code is placed and executed from. It links the execution-memory to the defined SRAM region and source-memory to the FLPR code partition in RRAM.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/nrf54l_signing_with_payload.rst#2025-04-21_snippet_2\n\nLANGUAGE: dts\nCODE:\n```\n&cpuflpr_vpr {\n      execution-memory = <&cpuflpr_sram_code_data>;\n      source-memory = <&cpuflpr_code_partition>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SUIT MCI Implementation in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for a custom SUIT MCI implementation. It creates a library named 'mci_test', sets its sources, and links it with necessary SUIT libraries. If mbedTLS is enabled, it also links with the mbedTLS library for PSA crypto APIs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/common/mci_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_SUIT_MCI_IMPL_CUSTOM)\n  zephyr_library_named(mci_test)\n  zephyr_library_sources(mci_test.c)\n  zephyr_library_link_libraries(suit_mci)\n  zephyr_library_link_libraries(suit_metadata)\n  zephyr_library_link_libraries(suit_execution_mode)\n\n  if (CONFIG_MBEDTLS)\n    # Link MCI (incl. crypto) module with mbedTLS library, that provides PSA crypto APIs.\n    zephyr_library_link_libraries(mbedTLS)\n  endif() # CONFIG_MBEDTLS\n\n  target_link_libraries(app PUBLIC mci_test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Receiving Device for BLE Radio Test\nDESCRIPTION: Commands to configure a receiving device (DK or EK) to receive packets with a known access address at 2400 MHz. Sets the data rate to 1Mbit, transmit pattern to 11110000, and starts receiving on channel 0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/ble_radio_test_for_per_measurements.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ data_rate ble_1Mbit\nuart:~$ transmit_pattern pattern_11110000\nuart:~$ start_channel 0\nuart:~$ parameters_print\nuart:~$ start_rx\n```\n\n----------------------------------------\n\nTITLE: Setting CMD RX antenna ID with lsetrxantenna command in Shell\nDESCRIPTION: Sets the antenna used by the CMD device for RX operations only. Antenna ID can be either 0 or 1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\ncustom lsetrxantenna *1*\n```\n\n----------------------------------------\n\nTITLE: Handling Location Library Events for A-GPS/P-GPS (C)\nDESCRIPTION: A-GPS/P-GPS requests are now handled based on Location library events rather than application triggers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.2.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nLOCATION_EVT_GNSS_ASSISTANCE_REQUEST\n```\n\nLANGUAGE: C\nCODE:\n```\nLOCATION_EVT_GNSS_PREDICTION_REQUEST\n```\n\n----------------------------------------\n\nTITLE: Executing real-time plotting script\nDESCRIPTION: Executes the `real_time_plot.py` script. This script plots events received from a device in real time and saves the data to files. It requires Python 3 and potentially plotting libraries to be installed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/nrf_profiler/readme.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"python3 real_time_plot.py\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Platform Version Test Project in CMake\nDESCRIPTION: Sets up a CMake project for testing SUIT platform version functionality. It defines the minimum CMake version, includes a test template, and specifies the source files needed for the test binary, including the main implementation and platform-specific components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_version_app_specific/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(plat_version)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_version.c\n  ${SUIT_SUBSYS_DIR}/platform/app/src/suit_plat_version_app_specific.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for nRF Decompression\nDESCRIPTION: Sets up the CMake project configuration including minimum version requirement, Zephyr package dependency, and project name definition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_compress/decompression/lzma/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(decompression)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Defining the project name\nDESCRIPTION: This snippet defines the name of the project as `peripheral_hr`. This name is used to identify the project throughout the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hr_coded/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(peripheral_hr)\"\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Project Setup with Zephyr\nDESCRIPTION: Sets up CMake minimum version and initializes a Zephyr project with required package finding.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: Defining Interrupt Sources in YAML\nDESCRIPTION: YAML configuration to define interrupt sources and handling types in the partition manifest\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"irqs\": [\n        {\n                \"source\": \"TFM_TIMER1_IRQ\",\n                \"name\": \"TFM_TIMER1_IRQ\",\n                \"handling\": \"FLIH\"\n        },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Peripherals in prj.conf\nDESCRIPTION: Configuration settings to enable peripherals for use in the Secure Processing Environment (SPE)\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCONFIG_NRF_TIMER1_SECURE=y\nCONFIG_NRF_SPIM3_SECURE=y\nCONFIG_NRF_GPIOTE0_SECURE=y\n```\n\n----------------------------------------\n\nTITLE: Using zap-append Command\nDESCRIPTION: Illustrates using the zap-append command to facilitate adding new custom clusters in the Matter ZCL database, converting XML cluster definitions into JSON and adding them to the data model. Outputs include updated or new JSON files for cluster definitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/tools.rst#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Configuring Matter Support in Sysbuild\nDESCRIPTION: Kconfig options for enabling Matter support, factory data generation and OTA firmware updates at the sysbuild level.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_sysbuild.rst#2025-04-21_snippet_4\n\nLANGUAGE: kconfig\nCODE:\n```\nSB_CONFIG_MATTER\nSB_CONFIG_MATTER_FACTORY_DATA_GENERATE\nSB_CONFIG_MATTER_FACTORY_DATA_MERGE_WITH_FIRMWARE\nSB_CONFIG_MATTER_OTA\nSB_CONFIG_MATTER_OTA_IMAGE_FILE_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Impulse URI for Downloading from Public Project\nDESCRIPTION: Example configuration for downloading an Edge Impulse model directly from a public project in Edge Impulse studio. This requires setting the EDGE_IMPULSE_URI Kconfig option with the public project ID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/edge_impulse.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_EDGE_IMPULSE_URI=\"https://studio.edgeimpulse.com/v1/api/XYZ/deployment/download?type=zip&modelType=int8\"\n```\n\n----------------------------------------\n\nTITLE: Listing Statistics with mcumgr\nDESCRIPTION: This command lists all available statistics sections that can be managed by mcumgr, useful for monitoring device metrics.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ mcumgr <connection-options> stat list\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Ready Library in Kconfig\nDESCRIPTION: Kconfig option required to enable the Wi-Fi ready library functionality in the application\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/wifi_ready.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_WIFI_READY_LIB\n```\n\n----------------------------------------\n\nTITLE: Building Application Core with Dictionary-based STM Logging\nDESCRIPTION: Command to build the application for the application core with dictionary-based STM logging enabled using the nordic-log-stm-dict snippet.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_logging.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp -S nordic-log-stm-dict\n```\n\n----------------------------------------\n\nTITLE: Enabling QDEC Driver in Kconfig\nDESCRIPTION: Kconfig option to enable the QDEC driver functionality required for wheel module operation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/wheel.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_QDEC_NRFX\n```\n\n----------------------------------------\n\nTITLE: Configuration Overlay Files for IPC Radio Firmware\nDESCRIPTION: The application provides predefined configuration overlay files for typical use cases. These include configurations for IEEE 802.15.4, Bluetooth Low Energy over HCI, and Bluetooth Low Energy over RPC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/ipc_radio/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\n* :file:`overlay-802154.conf` - Configuration file enabling IEEE 802.15.4.\n* :file:`overlay-bt_hci_ipc.conf` - Configuration file enabling Bluetooth Low Energy over HCI.\n* :file:`overlay-bt_rpc.conf` - Configuration file enabling Bluetooth Low Energy over RPC.\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Server Lifetime\nDESCRIPTION: AT command to configure the lifetime of the custom server in seconds. This setting is ignored for bootstrap servers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_17\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"lifetime\"[,<lifetime>]\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Desktop HID State Subscriber Count in Kconfig\nDESCRIPTION: New Kconfig option added to configure the maximum number of simultaneously supported HID data subscribers in the nRF Desktop application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.6.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_DESKTOP_HID_STATE_SUBSCRIBER_COUNT\n```\n\n----------------------------------------\n\nTITLE: Updating OpenThread Libraries with Debug Symbols\nDESCRIPTION: Commands to build and install OpenThread libraries with debug symbols included. This builds and installs the full version of the libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/prebuilt_libs.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b nrf52840dk/nrf52840\nwest build -d build/cli -t install_openthread_libraries\n```\n\n----------------------------------------\n\nTITLE: Hardware Key Generation and Initialization Output\nDESCRIPTION: Console output showing the successful writing of random keys to the Key Management Unit (KMU).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/keys/hw_unique_key/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nWriting random keys to KMU\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Configuring Iperf3 with Zephyr in CMake\nDESCRIPTION: This CMakeLists.txt snippet sets up the iperf3 tool as a Zephyr interface library and specifies its include directories. It also includes source files necessary for implementing iperf3 functionalities on the NRF platform. Key functionality includes library declaration, setting include paths, and linking source files. It depends on having a Zephyr environment set up and configured.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/iperf3/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(iperf3)\n\ntarget_include_directories(iperf3 INTERFACE .)\n\nzephyr_library()\n\nzephyr_library_sources(\n  dscp.c\n  iperf_api.c\n  iperf_auth.c\n  iperf_client_api.c\n  iperf_error.c\n  iperf_locale.c\n  iperf_main.c\n  iperf_sctp.c\n  iperf_server_api.c\n  iperf_tcp.c\n  iperf_time.c\n  iperf_udp.c\n  iperf_util.c\n  net.c\n  tcp_info.c\n  timer.c\n  units.c\n)\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for Upstream Zephyr Commits\nDESCRIPTION: Command to retrieve a list of upstream Zephyr commits incorporated into the nRF Connect SDK since the most recent release\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline ea02b93eea ^23cf38934c\n```\n\n----------------------------------------\n\nTITLE: Adding source files to the application target\nDESCRIPTION: This snippet adds the source files `src/main.c` and `src/entropy_ser.c` to the application target.  These source files will be compiled and linked into the final application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/entropy_nrf53/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n  src/main.c\n  src/entropy_ser.c\n)\n```\n\n----------------------------------------\n\nTITLE: Creating HOSTAP Crypto Interface Library\nDESCRIPTION: Creates a named interface library for HOSTAP cryptography components. This provides a target that other components can link against to use cryptography functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/hostap_crypto/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_interface_library_named(hostap_crypto)\n```\n\n----------------------------------------\n\nTITLE: Python Script Output for Wi-Fi Network Selection\nDESCRIPTION: Output from the Python provisioning script showing the list of available Wi-Fi networks and prompting for network selection and password input.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/provisioning/softap/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\npython3 provision.py --certificate ../certs/server_certificate.pem\n0: SSID: cia-linksys, BSSID: d8ec5e8f6619, RSSI: -49, Band: BAND_5_GHZ, Channel: 112, Auth: WPA_WPA2_PSK\n1: SSID: cia-asusgold, BSSID: c87f54de23b8, RSSI: -49, Band: BAND_2_4_GHZ, Channel: 9, Auth: WPA_WPA2_PSK\n2: SSID: cia-linksys, BSSID: d8ec5e8f6618, RSSI: -50, Band: BAND_5_GHZ, Channel: 44, Auth: WPA_WPA2_PSK\n3: SSID: NORDIC-GUEST, BSSID: 2436da11c0af, RSSI: -52, Band: BAND_5_GHZ, Channel: 60, Auth: WPA_WPA2_PSK\n4: SSID: NORDIC-INTERNAL, BSSID: 2436da11c0ae, RSSI: -53, Band: BAND_5_GHZ, Channel: 60, Auth: WPA_WPA2_PSK\nSelect the network (number): 1\nEnter the passphrase for the network: xxxxxxxxxxxxxxx\nLength of serialized data:  47\nConfiguration successful!\n```\n\n----------------------------------------\n\nTITLE: Binding a UDP Socket to a Port using AT command\nDESCRIPTION: This AT command binds an open UDP socket to a specified port. This allows the socket to receive data sent to that particular port.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n**AT#XBIND=**\\ *1234*\nOK\n```\n\n----------------------------------------\n\nTITLE: nRF5340 DK Configuration for nRF RPC Entropy Sample\nDESCRIPTION: This snippet defines the hardware platform configuration for the nRF RPC Entropy sample using the nRF5340 DK. It specifies the PCA10095 board with the nrf5340dk board name and the nrf5340dk/nrf5340/cpunet board target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/boardname_tables/sample_boardnames.txt#2025-04-21_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n\"+--------------------------------+-----------+------------------------------------------------+--------------------------------+\n|Hardware platforms              |PCA        |Board name                                      |Board target                    |\n+================================+===========+================================================+================================+\n|:ref:`nRF5340 DK <ug_nrf5340>`  |PCA10095   |:ref:`nrf5340dk <nrf5340dk_nrf5340>`            |``nrf5340dk/nrf5340/cpunet``    |\n+--------------------------------+-----------+------------------------------------------------+--------------------------------+\"\n```\n\n----------------------------------------\n\nTITLE: Building for Continuous Packet Transmission in Non-Connected Mode\nDESCRIPTION: Command for building the sample for continuous raw 802.11 packet transmission in non-connected Station mode\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/raw_tx_packet/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_RAW_TX_PKT_SAMPLE_NON_CONNECTED_MODE=y -DCONFIG_RAW_TX_PKT_SAMPLE_TX_MODE_CONTINUOUS=y\n```\n\n----------------------------------------\n\nTITLE: OpenThread Network Name Command\nDESCRIPTION: This command retrieves the name of the Thread network. It's useful for confirming the network identity.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot networkname\nOpenThread\nDone\n```\n\n----------------------------------------\n\nTITLE: Minimum CMake Version Requirement for Zephyr\nDESCRIPTION: This snippet specifies the minimum required version of CMake and finds the Zephyr package. It ensures that the necessary build environment is set up before proceeding.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_grtc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Programming BICR Firmware\nDESCRIPTION: Command to program the BICR firmware to the device with specific chip erase mode and core selection options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7_99-cs1.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device program --options chip_erase_mode=ERASE_NONE --firmware <path_to_bicr.hex> --core Application --serial-number <serialnumber>\n```\n\n----------------------------------------\n\nTITLE: Defining Project\nDESCRIPTION: This snippet defines the project name as 'openthread_coap_server', which serves as a primary identifier for the build process in CMake.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/coap_server/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(openthread_coap_server)\n```\n\n----------------------------------------\n\nTITLE: Write-Read TWI Device Command Format\nDESCRIPTION: AT command format for writing data to a TWI device and then reading the response. Combines write and read operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TWI_AT_commands.rst#2025-04-21_snippet_6\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XTWIW=<index>,<dev_addr>,<data>,<num_read>\n```\n\n----------------------------------------\n\nTITLE: Saving Onboarding CSV File\nDESCRIPTION: Console output indicating success after executing a script that saves the onboarding data to 'onboard.csv'. This CSV file is used for device onboarding on the nRF Cloud Portal. It doesn't require additional dependencies and expects the script to create this file when run successfully.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_43\n\nLANGUAGE: console\nCODE:\n```\nSaving device onboarding CSV file onboard.csv...\\nOnboarding CSV file saved, row count: 1\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets up the CMake project for the SUIT metadata test application. It specifies the minimum CMake version, includes a test template, and sets the project name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_metadata/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(suit_metadata)\"\n```\n\n----------------------------------------\n\nTITLE: Cancelling Firmware Distribution in Bluetooth Mesh - Shell Command\nDESCRIPTION: This command can cancel firmware distribution on a specified Target node by sending a Firmware Update Cancel message. It requires the unicast address of the Target node as an argument.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfu cli cancel\n```\n\n----------------------------------------\n\nTITLE: FOTA Test Command Syntax and Response\nDESCRIPTION: Test command format to verify command existence and parameter types, along with its expected response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/FOTA_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XFOTA=?\n\n#XFOTA: (0,1,2,3,7,9),<file_url>,<sec_tag>,<apn>\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Configuring CRACEN Driver Dependencies in CMake\nDESCRIPTION: Links the CRACEN PSA driver with required PSA crypto libraries and interfaces, including configuration, interface components, and utility functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/cracen/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(cracen_psa_driver\n  PRIVATE\n    psa_crypto_library_config\n    psa_interface\n    mbedcrypto_base\n    nrf_security_utils\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping Group Key Set to Group ID on Light Switch\nDESCRIPTION: Associates the previously set group key set with a specific group ID on the Light Switch device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./chip-tool groupkeymanagement write group-key-map '[{\"groupId\":\"30001\",\"groupKeySetID\":\"258\",\"fabricIndex\":\"1\"}]' 1 0\n```\n\n----------------------------------------\n\nTITLE: Sample Console Output\nDESCRIPTION: Expected console output from the Hello World sample on the nRF54H20 DK\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_gs.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK zephyr-v3.5.0-3517-g9458a1aaf744 ***\nHello world from nrf54h20dk/nrf54h20/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Function References in Failsafe Module Documentation\nDESCRIPTION: References to key Zephyr API functions used in the failsafe module for handling reset causes and hardware information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/failsafe.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:c:func:`hwinfo_get_reset_cause`\n```\n\nLANGUAGE: rst\nCODE:\n```\n:c:func:`hwinfo_clear_reset_cause`\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Source Files for DECT PHY Ping in CMake\nDESCRIPTION: Sets up the include path to the current directory and adds the DECT PHY Ping source files to the application build. The configuration targets two specific implementation files: dect_phy_ping.c and dect_phy_ping_pdu.c.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/dect/ping/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n\ntarget_sources(app PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_ping.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_ping_pdu.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in reStructuredText\nDESCRIPTION: This code block shows how to create a table in reStructuredText format, specifically listing modem-related libraries and their version information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. list-table:: Modem-related libraries and versions\n   :widths: 15 10\n   :header-rows: 1\n\n   * - Library name\n     - Version information\n   * - Modem library\n     - `Changelog <Modem library changelog for v2.0.0_>`_\n   * - LwM2M carrier library\n     - `Changelog <LwM2M carrier library changelog for v2.0.0_>`_\n```\n\n----------------------------------------\n\nTITLE: Writing UICR Value for Left Headset Configuration\nDESCRIPTION: Command to write value 0 to UICR address 0x00FF80F4 to configure a device as left headset.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/building.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device x-write --address 0x00FF80F4 --value 0\n```\n\n----------------------------------------\n\nTITLE: Gathering Application Source Files\nDESCRIPTION: This snippet uses the 'file' command to glob all .c source files belonging to the HID keyboard application, referencing them in the project's sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/usb/hid-keyboard/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources ${ZEPHYR_BASE}/samples/subsys/usb/hid-keyboard/src/*.c)\n```\n\n----------------------------------------\n\nTITLE: UDP Send Command Example\nDESCRIPTION: Example of sending data over UDP connection and the response indicating bytes sent.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_20\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XUDPSEND=\"Test UDP by hostname\"\n#XUDPSEND: 20\nOK\n```\n\n----------------------------------------\n\nTITLE: Implementing Bridged Device Factory Method\nDESCRIPTION: Implementation of the GetBridgedDeviceFactory method to create PressureSensorDevice instances with unique ID and label validation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n{ PressureSensorDevice::kPressureSensorDeviceTypeId,\n[checkUniqueID, checkLabel](const char *nodeLabel) -> Nrf::MatterBridgedDevice * {\n   if (!checkUniqueID(uniqueID) || !checkLabel(nodeLabel)) {\n      return nullptr;\n   }\n   return chip::Platform::New<PressureSensorDevice>(uniqueID, nodeLabel);\n} },\n```\n\n----------------------------------------\n\nTITLE: Configuring Promiscuous Mode for Wi-Fi - Console\nDESCRIPTION: This snippet outlines the command to enable or disable promiscuous mode in Wi-Fi, providing options for its operational mode and associated valid values. This command plays a crucial role in monitoring and packet capture scenarios.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n``promiscuous_set`` is an extension to the Wi-Fi command line.\\\nIt adds the following subcommand to configure Promiscuous mode:\\\n.. list-table:: Promiscuous mode shell subcommand\\\n   :header-rows: 1\\\n   * - Subcommand\\\n     - Description\\\n     - Valid values\\\n   * - mode\\\n     - | Enable or Disable Promiscuous mode\\\n       | [-h, --help]: Print out the help for the mode command\\\n     - | Valid values:\\\n       | 1 - Enable\\\n       | 0 - Disable\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 EK\nDESCRIPTION: Command to build the sample for nRF7002 EK using appropriate shield configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/offloaded_raw_tx/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf7002ek\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping GNSS Tracking in MoSh\nDESCRIPTION: Demonstrates how to start and stop GNSS tracking using the MoSh gnss command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\ngnss start\ngnss stop\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Provisioning Library Build with CMake\nDESCRIPTION: Defines the build configuration for Nordic Semiconductor's nRF Provisioning library. It creates a library target and conditionally adds source files based on enabled Kconfig options, handling dependencies for features like CBOR, HTTP, CoAP, JWT, and custom AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/nrf_provisioning/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources_ifdef(CONFIG_NRF_PROVISIONING_CBOR src/nrf_provisioning_cbor_decode.c)\nzephyr_library_sources_ifdef(CONFIG_NRF_PROVISIONING_CBOR src/nrf_provisioning_cbor_encode.c)\nzephyr_library_sources_ifdef(CONFIG_NRF_PROVISIONING_CODEC src/nrf_provisioning_codec.c)\nzephyr_library_sources_ifdef(CONFIG_NRF_PROVISIONING_HTTP src/nrf_provisioning_http.c)\nzephyr_library_sources_ifdef(CONFIG_NRF_PROVISIONING_SHELL src/nrf_provisioning_shell.c)\nzephyr_library_sources_ifdef(CONFIG_NRF_PROVISIONING_WITH_CERT src/cert_amazon_root_ca1.c src/cert_coap_root_ca.c)\nzephyr_library_sources_ifdef(CONFIG_NRF_PROVISIONING_COAP src/nrf_provisioning_coap.c)\nzephyr_library_sources_ifdef(CONFIG_NRF_PROVISIONING_CUSTOM_AT src/nrf_provisioning_custom_at.c)\nzephyr_library_sources(src/nrf_provisioning.c src/nrf_provisioning_at.c src/nrf_provisioning_jwt.c)\nzephyr_include_directories(./include)\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for NCS Changes\nDESCRIPTION: Command to display the complete list of NCS specific commits and cherry-picked commits since v2.4.0\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.4.4.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline manifest-rev ^v3.3.99-ncs1-3\n```\n\n----------------------------------------\n\nTITLE: Adding Simulated Bridged Device in Matter\nDESCRIPTION: CLI command to add a new bridged device with a specific Matter device type, such as an On/Off Light\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/matter_bridge_testing.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmatter_bridge add 256\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Platform Secure Partition\nDESCRIPTION: This snippet links the 'tfm_sprt' library to the 'platform_s' target to provide essential functionalities required for the secure partition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(platform_s\n  PRIVATE\n  tfm_sprt\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenThread Dependencies\nDESCRIPTION: Command to bootstrap OpenThread dependencies installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n./script/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Zephyr Library Build\nDESCRIPTION: CMake directives that specify source files to be compiled into the Zephyr library. Includes event handler, helpers, and work queue implementation files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/lte_link_control/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(event_handler_list.c)\nzephyr_library_sources(helpers.c)\nzephyr_library_sources(work_q.c)\n```\n\n----------------------------------------\n\nTITLE: Initializing Illuminance Regulator\nDESCRIPTION: This snippet describes the initialization of an abstract illuminance regulator using the bt_mesh_light_ctrl_reg struct. It outlines setting up the init, start, and stop functions as per user requirements for a new regulator implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_reg.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct bt_mesh_light_ctrl_reg regulator = {\n    .init = my_regulator_init,\n    .start = my_regulator_start,\n    .stop = my_regulator_stop,\n};\n```\n\n----------------------------------------\n\nTITLE: Kconfig External API Definition\nDESCRIPTION: Defines an external API in a Kconfig file, specifying ID, flags, and source template. Assumes a structured environment for Kconfig files in Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/cheat_sheet.rst#2025-04-21_snippet_6\n\nLANGUAGE: Kconfig\nCODE:\n```\n   EXT_API = MY\n   id = 0xBEEF\n   flags = 0\n   ver = 1\n   source \"${ZEPHYR_BASE}/../nrf/subsys/fw_info/Kconfig.template.fw_info_ext_api\"\n```\n\n----------------------------------------\n\nTITLE: Clearing current time in Date-Time module\nDESCRIPTION: Functions added to clear the current time in the Date-Time module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.4.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ndate_time_clear()\ndate_time_timestamp_clear()\n```\n\n----------------------------------------\n\nTITLE: Building Sample for Bluetooth LE Update\nDESCRIPTION: This command builds the sample for Bluetooth LE updates, setting the file suffix and number of LED blinks. It demonstrates how to configure the build process for specific features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/smp_transfer/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -- -DFILE_SUFFIX=bt -DCONFIG_N_BLINKS=1\n```\n\n----------------------------------------\n\nTITLE: Heap Usage Statistics in MoSh\nDESCRIPTION: Display kernel and system heap usage statistics to monitor the memory usage of the system. The command does not take additional parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_29\n\nLANGUAGE: console\nCODE:\n```\nmosh:~$ heap\nkernel heap statistics:\nfree:             7804\nallocated:         272\nmax. allocated:   1056\n\nsystem heap statistics:\nmax. size:       81400\nsize:              248\nfree:              160\nallocated:          88\n```\n\n----------------------------------------\n\nTITLE: Boot Status Log for Recovery Mode (Console)\nDESCRIPTION: Log message showing boot status after entering recovery mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_35\n\nLANGUAGE: console\nCODE:\n```\nBoot in RECOVERY mode, probably the root manifest is damaged!\nBoot preference: set B\nBoot status: app image A active, no radio, degraded mode\nConfirm status set A: not confirmed\nConfirm status set B: not confirmed\n```\n\n----------------------------------------\n\nTITLE: Setting Selected Generic Location Client Model Instance\nDESCRIPTION: This command allows the selection of the Generic Location Client model instantiated on the specified element ID for message sending. It uses the Element index as a parameter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_loc_cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models loc instance set <ElemIdx>\n\n```\n\n----------------------------------------\n\nTITLE: Building the SUIT AB Sample with Command Line\nDESCRIPTION: Command to build the SUIT AB sample for nRF54H20 DK with specific configuration options for SUIT manifest preparation and LED blink count.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -- -DSB_EXTRA_CONF_FILE=\"suit_mpi.conf\" -Dab_CONFIG_N_BLINKS=1\n```\n\n----------------------------------------\n\nTITLE: Setting Property Value on User Property Server (Without Acknowledgment)\nDESCRIPTION: Sets a property value on the User Property Server without requesting a confirmation response. This command speeds up operations where acknowledgment is not necessary. It needs 'ID' and 'HexStrVal'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_prop_cli.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmesh models prop user-prop-set-unack <ID> <HexStrVal>\n```\n\n----------------------------------------\n\nTITLE: Publishing Device Shadow JSON Message Format\nDESCRIPTION: JSON message structure published to AWS IoT Device Shadow Service containing application version, modem version, and device uptime.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/aws_iot/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"state\": {\n\t\t\"reported\": {\n\t\t\t\"app_version\": \"v1.0.0\",\n\t\t\t\"modem_version\": \"nrf9160-1.3.4\",\n\t\t\t\"uptime\": 2469\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HKDF-Expand Key Derivation Function in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for the HKDF-Expand algorithm within the PSA Cryptography API. This is the expand stage of HKDF, used to generate output keying material of a desired length.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_9\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_HKDF_EXPAND`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BLE Validation Library in CMake for nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up a Zephyr library for Bluetooth Low Energy validation. It includes a custom CMake file for validation magic and specifies the source file for the library. This configuration is part of the Nordic Semiconductor nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bootloader/bl_validation/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_LIST_DIR}/../cmake/bl_validation_magic.cmake)\nzephyr_library()\nzephyr_library_sources(bl_validation.c)\n```\n\n----------------------------------------\n\nTITLE: TF-M Specific CRACEN Driver Configuration in CMake\nDESCRIPTION: Adds TF-M specific libraries when building inside TF-M, providing access to CMSIS, nrfx, and MDK for nRF event references.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/cracen/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Give access to cmsis, nrfx and MDK inside TF-M build\n# to allow for referencing nRF events. Note that \n# tfm_sp_log needs to be added because __assert.h requires\n# it\nif(BUILD_INSIDE_TFM)\n  target_link_libraries(cracen_psa_driver\n    PRIVATE\n      platform_s\n      tfm_sp_log\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting compiler options for nRF Cloud logging\nDESCRIPTION: Sets a compiler option to explicitly set the nRF Cloud log level to DEBUG.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/cloud/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(app\n  PRIVATE\n  # Set the macro explicitly to log level DBG\n  -DCONFIG_NRF_CLOUD_LOG_LEVEL=4\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up nrf_clock_calibration Project with CMake\nDESCRIPTION: Configures the build for the nrf_clock_calibration project by setting the minimum CMake version, finding the Zephyr package, and importing source files from the Zephyr test directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/clock_control/nrf_clock_calibration/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_clock_calibration)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/clock_control/nrf_clock_calibration/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Running Bluetooth Event Trigger Sample on Serial Terminal\nDESCRIPTION: This snippet shows the output format of the Bluetooth Event Trigger sample when run on a serial terminal. It includes device role selection, connection establishment, and event trigger logs with timestamps.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/event_trigger/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n*** Booting nRF Connect SDK v3.4.99-ncs1-4802-g41e34920abf4 ***\nStarting Event Trigger Sample.\nI: SoftDevice Controller build revision:\nI: ba cb 53 9c e2 c9 de b6 |..S.....\nI: 82 1d 9c b3 eb de c5 1f |........\nI: 22 d8 45 99             |\"..E.\nI: HW Platform: Nordic Semiconductor (0x0002)\nI: HW Variant: nRF52x (0x0002)\nI: Firmware: Standard Bluetooth controller (0x00) Version 186.21451 Build 3737772700\nI: Identity: DA:1A:7B:0E:CC:5E (random)\nI: HCI: version 5.4 (0x0d) revision 0x1174, manufacturer 0x0059\nI: LMP: version 5.4 (0x0d) subver 0x1174\nChoose device role - type c (central) or p (peripheral):\nPeripheral. Starting advertising\nAdvertising successfully started\nConnected: FB:8F:24:2D:84:79 (random)\nConnection established.\nPress any key to switch to a 10ms connection interval and set up event trigger:\nSuccessfully configured event trigger\nConnection parameters updated. New interval: 10 ms\nSuccessfully configured event trigger\nPrinting event trigger log.\n+-------------+----------------+----------------------------------+\n| Trigger no. | Timestamp (us) | Time since previous trigger (us) |\n|           1 |   199381378 us |                          9979 us |\n|           2 |   199391388 us |                         10010 us |\n|           3 |   199401398 us |                         10010 us |\n|           4 |   199411377 us |                          9979 us |\n|           5 |   199421387 us |                         10010 us |\n|           6 |   199431396 us |                         10009 us |\n|           7 |   199441376 us |                          9980 us |\n|           8 |   199451385 us |                         10009 us |\n|           9 |   199461395 us |                         10010 us |\n|          10 |   199471375 us |                          9980 us |\n|          11 |   199481384 us |                         10009 us |\n|          12 |   199491394 us |                         10010 us |\n|          13 |   199501373 us |                          9979 us |\n|          14 |   199511383 us |                         10010 us |\n|          15 |   199521393 us |                         10010 us |\n|          16 |   199531372 us |                          9979 us |\n|          17 |   199541382 us |                         10010 us |\n|          18 |   199551392 us |                         10010 us |\n|          19 |   199561371 us |                          9979 us |\n|          20 |   199571381 us |                         10010 us |\n|          21 |   199581390 us |                         10009 us |\n|          22 |   199591370 us |                          9980 us |\n|          23 |   199601379 us |                         10009 us |\n|          24 |   199611389 us |                         10010 us |\n|          25 |   199621399 us |                         10010 us |\n|          26 |   199631378 us |                          9979 us |\n|          27 |   199641388 us |                         10010 us |\n|          28 |   199651398 us |                         10010 us |\n|          29 |   199661377 us |                          9979 us |\n|          30 |   199671387 us |                         10010 us |\n|          31 |   199681519 us |                         10132 us |\n|          32 |   199691376 us |                          9857 us |\n|          33 |   199701385 us |                         10009 us |\n|          34 |   199711395 us |                         10010 us |\n|          35 |   199721375 us |                          9980 us |\n|          36 |   199731384 us |                         10009 us |\n|          37 |   199741394 us |                         10010 us |\n|          38 |   199751373 us |                          9979 us |\n|          39 |   199761383 us |                         10010 us |\n|          40 |   199771393 us |                         10010 us |\n|          41 |   199781372 us |                          9979 us |\n|          42 |   199791382 us |                         10010 us |\n|          43 |   199801392 us |                         10010 us |\n|          44 |   199811371 us |                          9979 us |\n|          45 |   199821381 us |                         10010 us |\n|          46 |   199831390 us |                         10009 us |\n|          47 |   199841400 us |                         10010 us |\n|          48 |   199851379 us |                          9979 us |\n|          49 |   199861389 us |                         10010 us |\n+-------------+----------------+----------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Getting GPIO pin value with lgetgpio command in Shell\nDESCRIPTION: Reconfigures a selected GPIO pin to INPUT mode and reads its value on the CMD device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\ncustom lgetgpio *29*\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AT Parser with Zephyr\nDESCRIPTION: Sets up CMake build configuration for an AT parser project using the Zephyr RTOS. Specifies minimum CMake version, finds Zephyr package, and includes all C source files from the src directory into the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/at_parser/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(at_parser)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Write-and-Read Operation on BME680 Sensor\nDESCRIPTION: Demonstrates a write-then-read operation on the BME680 sensor using AT#XTWIWR command. It writes 'D0' and then reads 1 byte to get the CHIP ID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_47\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XTWIWR=2,\"76\",\"D0\",1\n\n#XTWIWR: 61\nOK\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Paths and Build Settings\nDESCRIPTION: Sets up include directories, compilation definitions, source files, and compiler options for the location test application, including special handling for double precision floating point numbers in Unity tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/location/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include)\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/include)\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/include/net)\n\n# The test uses double precision floating point numbers. This is not enabled by default in unity\n# unless we set the following define.\nzephyr_compile_definitions(UNITY_INCLUDE_DOUBLE)\n\ntarget_sources(app PRIVATE src/location_test.c)\n\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/include/net)\n\n# This is needed due to parsing issues in CMock for static inline declarations\n# and caused by declaration of net_if_flag_is_set():\n# [41/147] Building C object CMakeFiles/app.dir/mocks/cmock_net_if.c.obj\n# In file included from nrf/tests/lib/location/build/mocks/cmock_net_if.h:6,\n#                  from nrf/tests/lib/location/build/mocks/cmock_net_if.c:5:\n# nrf/tests/lib/location/build/mocks/net_if.h:540:20: warning: 'net_if_tx_lock'\n#         declared 'static' but never defined [-Wunused-function]\n#   540 | static inline void net_if_tx_lock(struct net_if *iface);\ntarget_compile_options(app PRIVATE \"-Wno-unused-function\")\n```\n\n----------------------------------------\n\nTITLE: Adding EnOcean Callback Function Definition\nDESCRIPTION: Code structure showing added decommissioned callback member to the bt_enocean_callbacks struct for handling EnOcean switch decommissioning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbt_enocean_callbacks.decommissioned\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for nRF7002 EK Shield\nDESCRIPTION: CMake configuration to add support for the nRF7002 EK shield in a project's CMakeLists.txt file. This enables the standard nRF7002 IC functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf7002ek_dev_guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nset(SHIELD nrf7002ek)\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Platform Version Test Project in CMake\nDESCRIPTION: This CMake script configures a test project for the SUIT platform version component. It specifies the minimum CMake version, includes a test template, sets up the project, adds source files including the SUIT platform version implementation, and configures conditional include directories based on configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_version/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(plat_version)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_version.c\n  ${SUIT_SUBSYS_DIR}/platform/sdfw/src/suit_plat_version_sdfw_specific.c\n)\n\nif (CONFIG_MOCK_SUIT_MEMORY_LAYOUT)\n  target_include_directories(testbinary PRIVATE .)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Library for Getopt\nDESCRIPTION: This snippet initializes the creation of a library for the Getopt functionality within the Zephyr environment, allowing for modular build management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/freebsd-getopt/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n```\n\n----------------------------------------\n\nTITLE: Defining the Project\nDESCRIPTION: This snippet defines the CMake project with the name 'NONE'. This sets up the basic project structure for the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/throughput/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(NONE)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced VIO Output Shifting in C\nDESCRIPTION: Function to configure advanced settings for VIO output shifting operations, used for serialized output with minimal CPU overhead.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_csr_vio_config_set()\n```\n\n----------------------------------------\n\nTITLE: SUIT Firmware Update Process using PlantUML\nDESCRIPTION: This PlantUML diagram illustrates the sequence of operations involved in the SUIT firmware update process. It shows the interactions between suitfu, suit_dfu_cache, flash_ipuc, and flash_ipuc_dev, including creating, erasing, writing, and releasing firmware images using device tree information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/images/suit_ipuc/ipuc_push_raw_img.txt#2025-04-21_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n\"@startuml\nautonumber\nparticipant suitfu\nparticipant suit_dfu_cache\nparticipant flash_ipuc\nparticipant flash_ipuc_dev\n\n--> suitfu ++ : suitfu_mgmt_suit_cache_raw_upload(id)\nsuitfu -> flash_ipuc ++ : flash_image_ipuc_create(id)\nflash_ipuc -> flash_ipuc_dev ** : get_free_dev()\nflash_ipuc -> devicetree ++ : << find dfu_target_id >>\ndeactivate devicetree\ndeactivate flash_ipuc\n\nsuitfu -> flash_ipuc_dev ++ : erase(ipuc_dev, size)\ndeactivate flash_ipuc_dev\n\nsuitfu -> flash_ipuc_dev ++ : write(ipuc_dev, offset, size)\ndeactivate flash_ipuc_dev\n\nsuitfu -> flash_ipuc ++ : flash_image_ipuc_release(ipuc_dev)\n\nflash_ipuc -> flash_ipuc_dev ++ : write(ipuc_dev, 0, 0)\ndeactivate flash_ipuc_dev\n\nflash_ipuc -> flash_ipuc_dev : release()\ndestroy flash_ipuc_dev\ndeactivate flash_ipuc\n\ndeactivate suitfu\n\n\n@enduml\"\n```\n\n----------------------------------------\n\nTITLE: Building Basic Driver Debug with CMake\nDESCRIPTION: Command to build with basic driver debugging enabled using CMake build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/debugging.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncmake -GNinja -Bbuild -DBOARD=nrf7002dk/nrf5340/cpuapp -Dnrf_wifi_shell_SNIPPET=\"nrf70-driver-debug\" samples/wifi/shell\nninja -C build\n```\n\n----------------------------------------\n\nTITLE: Vendor Model IDs Table\nDESCRIPTION: List of vendor model identifiers allocated by Nordic Semiconductor for various Bluetooth Mesh models\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/overview/reserved_ids.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n+-----------------------------+-----------------+\n| Model name                  | Vendor Model ID |\n+=============================+=================+\n| Simple OnOff Server         | 0x0000          |\n| Simple OnOff Client         | 0x0001          |\n| Rssi Server                 | 0x0005          |\n| Rssi Client                 | 0x0006          |\n| Rssi Util                   | 0x0007          |\n| Thingy52 Server             | 0x0008          |\n| Thingy52 Client             | 0x0009          |\n| Chat Client                 | 0x000A          |\n| Distance Measurement Server | 0x000B          |\n| Distance Measurement Client | 0x000C          |\n| LE Pairing Initiator        | 0x000D          |\n| LE Pairing Responder        | 0x000E          |\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. Ensures that the CMake version used is at least 3.20.0, which is necessary for the project's build process to function correctly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/writable_ndef_msg/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Starting Event Manager Proxy in C\nDESCRIPTION: This code shows how to start the Event Manager Proxy after all events have been subscribed. The `event_manager_proxy_start()` function is called to activate the proxy and enable event transmission between cores. Error handling is included after the function call.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/event_manager_proxy.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n\"ret = event_manager_proxy_start();\\n/* Error handling */\"\n```\n\n----------------------------------------\n\nTITLE: Running OpenThread CLI\nDESCRIPTION: Command to run the OpenThread CLI with UART connection to RCP and ethernet backbone link.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nsudo ./build/posix/src/posix/ot-cli 'spinel+hdlc+uart:///dev/ttyACM0?uart-baudrate=1000000' --verbose -B eth0\n```\n\n----------------------------------------\n\nTITLE: Building peripheral_lbs sample with MCUboot in direct-xip mode with revert mechanism\nDESCRIPTION: Build command for the peripheral_lbs sample with MCUboot in direct-xip mode, with FOTA updates and revert mechanism support enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/fota_update.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b *board_target* -- -DSB_CONFIG_BOOTLOADER_MCUBOOT=y -DSB_CONFIG_MCUBOOT_MODE_DIRECT_XIP_WITH_REVERT=y -DCONFIG_NCS_SAMPLE_MCUMGR_BT_OTA_DFU=y\n```\n\n----------------------------------------\n\nTITLE: Project Initialization and Source Configuration\nDESCRIPTION: Defines project name and specifies main source file for compilation, linking primary application source\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_clock_control/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nproject(idle_clock_control)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Getting DUT TX antenna ID with rgettxantenna command in Shell\nDESCRIPTION: Retrieves the antenna currently used by the DUT device for TX operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\ncustom rgettxantenna\n```\n\n----------------------------------------\n\nTITLE: Nordic Raw 802.11 Wireshark Dissector Implementation in Lua\nDESCRIPTION: A Lua script that creates a custom Wireshark dissector for analyzing IEEE 802.11 packets from Nordic devices. The dissector handles the Nordic Raw 802.11 header and processes packet metadata including frequency, signal strength, and rate flags before passing the payload to the standard IEEE 802.11 dissector.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/offline_net_capture.txt#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Create a new dissector\nlocal nordic_raw_80211 = Proto(\"nordic_raw_80211\", \"Nordic Raw 802.11 dissector\")\n\n-- No built-in helper to convert a number to a signed char in Lua\nfunction toSignedChar(value)\n   if value > 127 then\n      return value - 256\n   else\n      return value\n   end\nend\n\nlocal nordic_rate_flags = {\n   NORD_RATE_FLAG_LEGACY = 0,\n   NORD_RATE_FLAG_HT = 1,\n   NORD_RATE_FLAG_VHT = 2,\n   NORD_RATE_FLAG_HE_SU = 3,\n   NORD_RATE_FLAG_HE_ER_SU = 4,\n   NORD_RATE_FLAG_MAX = 5\n}\n\nfunction getRateFlags(rate_flags)\n   local rate_flags_str = \"\"\n   if rate_flags == nordic_rate_flags.NORD_RATE_FLAG_LEGACY then\n      rate_flags_str = \"Legacy\"\n   elseif rate_flags == nordic_rate_flags.NORD_RATE_FLAG_HT then\n      rate_flags_str = \"HT\"\n   elseif rate_flags == nordic_rate_flags.NORD_RATE_FLAG_VHT then\n      rate_flags_str = \"VHT\"\n   elseif rate_flags == nordic_rate_flags.NORD_RATE_FLAG_HE_SU then\n      rate_flags_str = \"HE-SU\"\n   elseif rate_flags == nordic_rate_flags.NORD_RATE_FLAG_HE_ER_SU then\n      rate_flags_str = \"HE-ER-SU\"\n   else\n      rate_flags_str = \"Unknown\"\n   end\n   return rate_flags_str\nend\n\nfunction getRate(rate_flags, rate)\n   local rate_str = \"\"\n   -- Lgeacy rates\n   if rate_flags == 0x00 then\n      if rate == 55 then\n            rate_str = \"Data rate: 5.5 Mbps\"\n      else\n            rate_str = \"Data rate: \" .. rate .. \" Mbps\"\n      end\n   else\n      rate_str = \"MCS Index\" .. rate\n   end\n   return rate_str\nend\n\n-- This function will dissect the packet\nfunction nordic_raw_80211.dissector(buffer, pinfo, tree)\n   -- Dissect the first 6 bytes (Raw RX custom header)\n   local payload = buffer(6):tvb()\n   local subtree = tree:add(nordic_raw_80211, buffer(), \"Nordic Raw 802.11 Dissector\")\n   subtree:add(buffer(0, 2), \"Frequency: \" .. buffer(0, 2):le_uint())\n   -- Convert mBm to dBm and display as signed char\n   local mBm = buffer(2, 2):le_int()\n   local dBm = toSignedChar(mBm / 100)\n   subtree:add(buffer(2, 2), \"Signal (dBm): \" .. dBm)\n   subtree:add(buffer(4, 1), \"Rate Flags: \" .. getRateFlags(buffer(4, 1):uint()))\n   subtree:add(buffer(5, 1), getRate(buffer(4, 1):uint(), buffer(5, 1):uint()))\n\n   local wlan_dissector_name = \"wlan\"\n   local wlan_dissector = Dissector.get(wlan_dissector_name)\n   if wlan_dissector == nil then\n      print(\"Error: No dissector found for \" .. wlan_dissector_name)\n      return\n   end\n   -- Call IEEE 802.11 dissector\n   wlan_dissector:call(payload, pinfo, tree)\nend\n\n-- Register the dissector\nlocal netcapture_udp_port = 4242\nlocal udp_port = DissectorTable.get(\"udp.port\")\nudp_port:add(netcapture_udp_port, nordic_raw_80211)\n```\n\n----------------------------------------\n\nTITLE: LwM2M Carrier Library Required NCS Module List\nDESCRIPTION: List of required Nordic Connect SDK modules that must be included for the LwM2M carrier library functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/app_integration.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* at_monitor_readme\n* lib_downloader\n* sms_readme\n* pdn_readme\n* lib_dfu_target\n* lib_uicc_lwm2m\n```\n\n----------------------------------------\n\nTITLE: Linking Zephyr Library\nDESCRIPTION: This snippet links the CMake target with the SUIT platform's internal APIs, facilitating access to the required libraries for the integration test.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/memptr_sink/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(suit_stream_sinks_interface)\n```\n\n----------------------------------------\n\nTITLE: Asserting Timeslot Request Type - MPSL - Documentation Format\nDESCRIPTION: This entry describes a scenario that can lead to an assert when requesting timeslots with the type `MPSL_TIMESLOT_REQ_TYPE_EARLIEST`, which must be handled carefully to prevent runtime issues in applications using MPSL.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_41\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-18555: Requesting timeslots with type ``MPSL_TIMESLOT_REQ_TYPE_EARLIEST`` can cause an assert When requesting timeslots with type ``MPSL_TIMESLOT_REQ_TYPE_EARLIEST``, an assert could occur in MPSL, indicating that there is already an ``EARLIEST`` request pending.\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for nRF RPC Device Info Client Test\nDESCRIPTION: Sets up the CMake build configuration including minimum version, project definition, source files, include directories, and linker options for single-threaded nRF RPC command processing. Includes specific paths for nRF RPC device info modules and common components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_rpc/dev_info/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_rpc_dev_info_client_test)\n\nFILE(GLOB app_sources src/*.c)\n\ntarget_include_directories(app PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/nrf_rpc/dev_info/common\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/nrf_rpc/dev_info/client\n  ../common\n)\n\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ../common/nrf_rpc_single_thread.c\n)\n\n# Enforce single-threaded nRF RPC command processing.\ntarget_link_options(app PUBLIC\n  -Wl,--wrap=nrf_rpc_os_init,--wrap=nrf_rpc_os_thread_pool_send\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mesh Light Switch Project with CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for a mesh light switch project. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, and adds source files and include directories to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/light_switch/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(mesh_light_switch)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/model_handler.c)\ntarget_include_directories(app PRIVATE include)\n\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Sending REST Request with Custom Headers in MoSh\nDESCRIPTION: Demonstrates how to send a HEAD REST request with custom headers using the MoSh rest command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nrest -d example.com -l 1024 -m head -H \"X-foo1: bar1\\x0D\\x0A\" -H \"X-foo2: bar2\\x0D\\x0A\"\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with West for native_sim Board\nDESCRIPTION: Specific command for running unit tests using west build on the native_sim board. This builds the test and executes it in a simulated environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/test_framework/running_unit_tests.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwest build -b native_sim -t run\n```\n\n----------------------------------------\n\nTITLE: Deprecated PWM LED Devicetree Definitions\nDESCRIPTION: Example of PWM LED devicetree definitions using the old format that will no longer work in Zephyr v3.x.x. These definitions only specify the PWM controller and pin number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_1.x_to_2.x.rst#2025-04-21_snippet_7\n\nLANGUAGE: devicetree\nCODE:\n```\n/* old definitions that will no longer work */\npwm_led0: pwm_led_0 {\n    pwms = <&pwm0 11>;\n};\npwm_led1: pwm_led_1 {\n    pwms = <&pwm0 37>;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding WFA-QT Subdirectory\nDESCRIPTION: Unconditionally adds the wfa-qt subdirectory to the project\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(wfa-qt)\n```\n\n----------------------------------------\n\nTITLE: Building LwM2M Client with Bootstrap Support\nDESCRIPTION: Command to build the LwM2M Client sample with bootstrap support using a configuration overlay file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/sample_description.rst#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nwest build -b *board_target* -- -DEXTRA_CONF_FILE=overlay-leshan-bootstrap.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for nRF Wi-Fi TWT Project in CMake\nDESCRIPTION: This CMake script configures the build environment for the nRF Wi-Fi TWT project. It sets the minimum CMake version, finds the Zephyr package, defines include directories for networking components and traffic generation, adds the traffic generator module, and specifies the main source file to compile.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/twt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_twt)\n\ntarget_include_directories(app PUBLIC ${ZEPHYR_BASE}/subsys/net/ip)\ntarget_include_directories(app PRIVATE modules/traffic_gen/inc)\n\nadd_subdirectory(modules/traffic_gen)\n\ntarget_sources(app PRIVATE\n\tsrc/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Runner Properties for Binary Formats\nDESCRIPTION: Iterates through different binary formats (BIN, HEX, ELF) and sets up runner properties for each type if defined in the system build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(runner_ext BIN HEX ELF)\n  zephyr_get(NCS_RUNNER_${runner_ext} SYSBUILD)\n  if(DEFINED NCS_RUNNER_${runner_ext})\n    string(TOLOWER \"${runner_ext}\" type)\n    set_target_properties(runners_yaml_props_target PROPERTIES\n                          \"${type}_file\" \"${NCS_RUNNER_${runner_ext}}\"\n    )\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Project with Zephyr in CMake\nDESCRIPTION: This code snippet configures a CMake project to work with Zephyr RTOS, requiring CMake version 3.20.0 or higher. It finds the Zephyr package based on the ZEPHYR_BASE environment variable and specifies the main source file for the SPI Flash project. This setup is essential for compiling an application that utilizes the Zephyr RTOS framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/drivers/spi_flash/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(spi_flash)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/drivers/spi_flash/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring RCP Application Build for nRF52840 Development Kit (UART transport)\nDESCRIPTION: Command to build the OpenThread Co-Processor sample for nRF52840 Development Kit using UART transport.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwest build -p always -b nrf52840dk/nrf52840 nrf/samples/openthread/coprocessor/\n```\n\n----------------------------------------\n\nTITLE: Concurrent Scanning and Connection Sample Output\nDESCRIPTION: Example console output showing the concurrent scanning and connection process timing, demonstrating faster connection establishment to 16 devices using concurrent operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/scanning_while_connecting/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nI: CONCURRENT_SCAN_AND_CONNECT:\nI: starting sample benchmark\nI: Connected to F0:27:5B:37:0F:4B (random), number of connections 1\n[...]\nI: 7 seconds to create 16 connections\n```\n\n----------------------------------------\n\nTITLE: Example SLIP interface creation\nDESCRIPTION: Example command showing how to create a SLIP interface on a specific device with an IPv6 address and subnet prefix.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n./tunslip6 -s /dev/ttyACM4 -T 2001:db8::1/64\n```\n\n----------------------------------------\n\nTITLE: Building BUS Interface Debug with West\nDESCRIPTION: Command to build with verbose BUS interface debugging enabled using West build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/debugging.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp samples/wifi/shell -- -Dnrf_wifi_shell_SNIPPET=\"nrf70-driver-verbose-debug\"\n```\n\n----------------------------------------\n\nTITLE: Defining toctree for Wi-Fi Advanced Modes in reStructuredText\nDESCRIPTION: This snippet defines a table of contents (toctree) for the Wi-Fi advanced modes documentation. It specifies the maximum depth of the tree, sets a caption for the subpages, and lists the individual documentation files to be included.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/advanced_modes/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages:\n\n   mem_requirements_raw\n   raw_tx_operation\n   sniffer_rx_operation\n   promiscuous_operation\n   offloaded_raw_tx\n```\n\n----------------------------------------\n\nTITLE: Building Thread CLI Sample for Leader Node (bash)\nDESCRIPTION: Commands to build the Thread CLI sample firmware for an nRF52840 DK board to be used as a Thread leader.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/power_consumption.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ncs/nrf/samples/openthread/cli/\nwest build -b nrf52840dk/nrf52840 -- -Dcli_SNIPPET=\"ci;logging\"\n```\n\n----------------------------------------\n\nTITLE: Loading Application Source Files\nDESCRIPTION: This snippet uses the FILE command to load all C source files from the specified directory into the project. This is crucial for building the application code as part of the Zephyr project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/system_off/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Isochronous Channels Sample Structure\nDESCRIPTION: Sample code structure for implementing Bluetooth ISO time synchronization across different device roles and topologies, including transmitter and receiver configurations for nRF52, nRF53, and nRF54 development kits\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_time_sync/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Main sample structure across multiple source files\n// Files include: main.c, bis_transmitter.c, bis_receiver.c, cis_central.c, cis_peripheral.c, iso_rx.c\n```\n\n----------------------------------------\n\nTITLE: Querying Group Settings with chip-tool\nDESCRIPTION: This command allows users to manage and view group settings and keysets in the Matter networking model. It provides insights into group memberships and the security setup within the network.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n./chip-tool groupsettings\n\n     * show-groups\n     * add-group\n     * remove-group\n     * show-keysets\n     * bind-keyset\n     * unbind-keyset\n     * add-keysets\n     * remove-keyset\n```\n\n----------------------------------------\n\nTITLE: Memory Configuration for Zigbee Coordinator\nDESCRIPTION: Code snippet showing how to configure scheduler queue and buffer pool sizes to prevent coordinator device assertion during multiple device commissioning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n/* Now if you REALLY know what you do, you can study zb_mem_config_common.h and redefine some configuration parameters, like:\n#undef ZB_CONFIG_SCHEDULER_Q_SIZE\n#define ZB_CONFIG_SCHEDULER_Q_SIZE 56\n*/\n```\n\nLANGUAGE: c\nCODE:\n```\n/* Increase Scheduler queue size. */\nundef ZB_CONFIG_SCHEDULER_Q_SIZE\ndefine ZB_CONFIG_SCHEDULER_Q_SIZE XYZ\n/* Increase buffer pool size. */\nundef ZB_CONFIG_IOBUF_POOL_SIZE\ndefine ZB_CONFIG_IOBUF_POOL_SIZE XYZ\n```\n\n----------------------------------------\n\nTITLE: Enabling Commissionable Device Type for Matter Discovery\nDESCRIPTION: This snippet describes how to include an optional device type subtype in the commissionable node discovery record by enabling the `CONFIG_CHIP_COMMISSIONABLE_DEVICE_TYPE` Kconfig option. This enables filtering discovery results.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_20\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_COMMISSIONABLE_DEVICE_TYPE`\"\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Setup for Bluetooth Mesh Scheduler Test\nDESCRIPTION: Establishes minimum CMake version and finds Zephyr package for building the Bluetooth Mesh Scheduler test project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/scheduler_model/action_planning/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bt_mesh_scheduler_model_action_plan_test)\n```\n\n----------------------------------------\n\nTITLE: Rebooting Device - Python\nDESCRIPTION: This command reboots the connected device, which is necessary after certain operations or configurations. It ensures that the device is refreshed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npython3 configurator_cli.py DEVICE fwreboot\n```\n\n----------------------------------------\n\nTITLE: Peripheral Device Console Output\nDESCRIPTION: Console output showing the initialization, connection establishment and latency measurements from the peripheral device perspective.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/subrating/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK v2.7.99-9539f0a1a59b ***\n*** Using Zephyr OS v3.6.99-766b306bcbe8 ***\nStarting Bluetooth Subrating sample\nI: SoftDevice Controller build revision:\nI: 0f 3f c8 4a 7e 8d b6 7a |.?.J~..z\nI: 64 7f 04 47 8b 3c 4b ae |d..G.<K.\nI: 95 16 0d 96             |....\nI: HW Platform: Nordic Semiconductor (0x0002)\nI: HW Variant: nRF52x (0x0002)\nI: Firmware: Standard Bluetooth controller (0x00) Version 15.51263 Build 3062726218\nI: Identity: FD:AA:B8:5A:36:E2 (random)\nI: HCI: version 5.4 (0x0d) revision 0x1224, manufacturer 0x0059\nI: LMP: version 5.4 (0x0d) subver 0x1224\n```\n\n----------------------------------------\n\nTITLE: Initializing PSA API for EC J-PAKE in RST\nDESCRIPTION: This snippet outlines the first step in the sample's operation, which is initializing the Platform Security Architecture (PSA) API. This is crucial for setting up the security environment for the J-PAKE protocol.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/ecjpake/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n1. Initializes the Platform Security Architecture (PSA) API.\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Integration Test Suite Cache in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the project configuration for an integration test suite cache. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, and includes a custom test template.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/cache/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_cache)\ninclude(../cmake/test_template.cmake)\n```\n\n----------------------------------------\n\nTITLE: Unlocking nRF7002 Device for Firmware Loading\nDESCRIPTION: Command to unlock the nRF7002 device and disable read back protection before loading firmware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/test_setup.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nrfutil device recover\n```\n\n----------------------------------------\n\nTITLE: Building SMP Server with DTS Partitioning\nDESCRIPTION: Build command for the SMP server sample on nRF54L15 DK with DTS partitioning and external SPI Flash.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/fota_update.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b nrf54l15dk/nrf54l15/cpuapp -d build/smp_svr_54l_d zephyr/samples/subsys/mgmt/mcumgr/smp_svr -T sample.mcumgr.smp_svr.bt.nrf54l15dk.ext_flash.pure_dts\n```\n\n----------------------------------------\n\nTITLE: Work Structure Declaration\nDESCRIPTION: Structure used for delayed work execution during DFU process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dfu.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nk_work_delayable\n```\n\n----------------------------------------\n\nTITLE: Configuring Heap Memory Pool Size in Kconfig\nDESCRIPTION: Increases the heap memory pool size for nRF5340 DK configurations to prevent Event Manager out of memory errors.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_HEAP_MEM_POOL_SIZE=<increased_value>\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot mode: Overwrite\nDESCRIPTION: Employs a straightforward dual-bank image overwrite algorithm that directly replaces the image. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_UPGRADE_ONLY\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_BOOT_UPGRADE_ONLY`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Thread Stack Size in Kconfig\nDESCRIPTION: Sets the stack size (in bytes) for the application thread of the sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_APPLICATION_THREAD_STACK_SIZE\n```\n\n----------------------------------------\n\nTITLE: Storing Current State as Scene Without Acknowledgement\nDESCRIPTION: This command allows storing the current state of the Scene Client as a scene without waiting for confirmation, optimizing for situations where immediate response is not crucial.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scene_cli.rst#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models scene store-unack <Scene>\n```\n\n----------------------------------------\n\nTITLE: Test Firmware B Health Check Failure Log\nDESCRIPTION: Log output showing that the application domain is not healthy after installing test firmware variant B, indicating health check failure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n<inf> AB: Image set B not confirmed yet, testing...\n<err> AB: App domain is NOT healthy\n<err> AB: Reboot the device to try to boot from previous firmware\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This line specifies the minimum required version of CMake for the project. It ensures that the CMake version used to build the project is at least 3.20.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_adc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Checking Public Key Against Auto-Generated Key\nDESCRIPTION: This command compares the extracted public key from the private key with MCUboot's auto-generated public key file. This verifies that the custom private key was successfully included in the bootloader image.  Requires `imgtool.py` to be available in the specified relative path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n\"diff build/mcuboot/zephyr/autogen-pubkey.c <(python3 bootloader/mcuboot/scripts/imgtool.py getpub -k priv.pem)\"\n```\n\n----------------------------------------\n\nTITLE: Defining the project\nDESCRIPTION: This snippet defines the project name as \"coap-client\". This name is used throughout the build process to identify the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/coap_client/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(coap-client)\"\n```\n\n----------------------------------------\n\nTITLE: Setting SUIT DFU Buffer in C\nDESCRIPTION: Allocate a buffer for SUIT-style firmware updates before initialization.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_target.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ndfu_target_suit_set_buf(buffer, buffer_size);\n```\n\n----------------------------------------\n\nTITLE: Event Routing ASCII Table\nDESCRIPTION: ASCII-formatted table showing mapping between event types like wake_up_event and wheel_event to their respective destination modules in the nRF Desktop application framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n|                                               |                        |             +------------------------+---------------------------------------------+\n|                                               |                        |             | ``wake_up_event``      | :ref:`nrf_desktop_wake_up_event_sinks`      |\n|                                               |                        |             +------------------------+---------------------------------------------+\n|                                               |                        |             | ``wheel_event``        | :ref:`nrf_desktop_hid_state`                |\n+-----------------------------------------------+------------------------+-------------+------------------------+---------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Building with modem trace snippet\nDESCRIPTION: Builds the application with a snippet to enable modem traces for debugging network traffic, specifically for the nRF9161 DK. This utilizes the west build tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n\"west build -p -b nrf9161dk/nrf9161/ns -- -Dhttp_server_SNIPPET=\\\"nrf91-modem-trace-uart\\\"\"\n```\n\n----------------------------------------\n\nTITLE: ZAP GUI Launch Command\nDESCRIPTION: West command to launch the ZAP tool GUI for Matter application data model configuration. Supports custom file paths, Matter SDK location, and cluster addition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/tools.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwest zap-gui\n```\n\n----------------------------------------\n\nTITLE: Adding Firmware Slot for DFU\nDESCRIPTION: This command adds a firmware slot to the Distributor's DFU model, registering the size, firmware ID, and optional parameters like metadata and URI.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfu slot add 241236 0200000000000000 020000000000000094cf24017c26f3710100\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Core Images with sysbuild.cmake\nDESCRIPTION: A CMake script that configures a network core image with custom settings. This example shows how to add overlay configuration files, devicetree overlays, and set Kconfig options for a network core image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/sysbuild_images.rst#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(SB_CONFIG_MY_APP_IMAGE_ABC)\n  # Project can optionally be configured here if needed\n\n  # This will add a Kconfig fragment file, named `my_extra.conf` from the application directory\n  add_overlay_config(${SB_CONFIG_NETCORE_IMAGE_NAME} ${SB_CONFIG_NETCORE_IMAGE_PATH}/my_extra.conf)\n  # This will add a devicetree overlay file, named `my_extra.dts` from the application directory\n  add_overlay_dts(${SB_CONFIG_NETCORE_IMAGE_NAME} ${SB_CONFIG_NETCORE_IMAGE_PATH}/my_extra.dts)\n  # This will set a bool Kconfig option in the image (note: sysbuild forces this setting, it cannot be overwritten by changing the application configuration)\n  set_config_bool(${SB_CONFIG_NETCORE_IMAGE_NAME} CONFIG_MY_CUSTOM_CONFIG y)\n  # This will set a string (or numeric) Kconfig option in the image (note: sysbuild forces this setting, it cannot be overwritten by changing the application configuration)\n  set_property(TARGET ${SB_CONFIG_NETCORE_IMAGE_NAME} APPEND_STRING PROPERTY CONFIG \"CONFIG_CUSTOM_STRING=my_custom_value\\n\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Bluetooth Mesh Model Callback Structure (C)\nDESCRIPTION: This snippet shows the initialization of callback structures for the Chat Client model to handle model publishing and data storage events. Required dependencies include mesh model APIs and proper provisioning of the storage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/chat_sample_walk_through.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic const struct bt_mesh_model_cb model_cb = {\n    .init = model_init,\n    .start = model_start,\n    .settings_set = model_settings_set,\n    .reset = model_reset,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Code Relocation to RAM\nDESCRIPTION: Relocates the same Bluetooth and MCUmgr libraries to RAM, providing additional flexibility in memory management\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/extxip_smp_svr/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_code_relocate(FILES ${ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src/bluetooth.c LOCATION RAM_DATA)\nzephyr_code_relocate(LIBRARY subsys__mgmt__mcumgr__mgmt LOCATION RAM_DATA)\n# Additional library relocations...\n```\n\n----------------------------------------\n\nTITLE: Configuring DECT PHY Performance Test Application in CMake\nDESCRIPTION: Sets up the build configuration for a DECT physical layer performance testing application. The configuration includes private include directories and specifies the source files that make up the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/dect/perf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n\ntarget_sources(app PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_perf_pdu.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_perf.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Programming Firmware with nRF Util\nDESCRIPTION: Uses nRF Util to program a signed firmware image directly into a slot for testing purposes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_signature_keys.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --x-family nrf52 --options chip_erase_mode=ERASE_RANGES_TOUCHED_BY_FIRMWARE,verify=VERIFY_HASH,reset=RESET_SOFT --firmware build/signed_by_b0_<app_name>.hex\n```\n\n----------------------------------------\n\nTITLE: Configuring ECC Curves in Kconfig for C\nDESCRIPTION: This section details how to enable specific ECC curves within the nrfconnect SDK. It lists various curves and their corresponding Kconfig options, explaining that the choice of backend affects which curves can be enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/backend_config.rst#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Curve                       | Configurations                                             | Note                     |\n|=============================|============================================================|==========================|\n| NIST secp192r1              | :kconfig:option:`CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED`  |                          |\n| NIST secp224r1              | :kconfig:option:`CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED`  |                          |\n| NIST secp256r1              | :kconfig:option:`CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED`  |                          |\n| NIST secp384r1              | :kconfig:option:`CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED`  |                          |\n| NIST secp521r1              | :kconfig:option:`CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED`  |                          |\n| Koblitz secp192k1           | :kconfig:option:`CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED`  |                          |\n| Koblitz secp224k1           | :kconfig:option:`CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED`  |                          |\n| Koblitz secp256k1           | :kconfig:option:`CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED`  |                          |\n| Curve25519                  | :kconfig:option:`CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED` |                          |\n```\n\n----------------------------------------\n\nTITLE: MCUboot Serial Recovery Configuration Options\nDESCRIPTION: Essential Kconfig options required to enable USB serial recovery DFU mode in MCUboot bootloader\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/bootloader_dfu.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MCUBOOT_SERIAL=y\nCONFIG_BOOT_SERIAL_CDC_ACM=y\n```\n\n----------------------------------------\n\nTITLE: Adding Group to Light Bulb Endpoint\nDESCRIPTION: Adds the configured group to a specific endpoint on the Light Bulb device that includes the on/off cluster.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./chip-tool groups add-group 30001 Test_Group_30001 2 1\n```\n\n----------------------------------------\n\nTITLE: Ringing Trigger Types Enumeration in Fast Pair FMDN\nDESCRIPTION: Enumeration values for different triggers that can change the ringing state, including start, stop, and failure conditions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nBT_FAST_PAIR_FMDN_RING_TRIGGER_STARTED\nBT_FAST_PAIR_FMDN_RING_TRIGGER_FAILED\nBT_FAST_PAIR_FMDN_RING_TRIGGER_TIMEOUT_STOPPED\nBT_FAST_PAIR_FMDN_RING_TRIGGER_UI_STOPPED\nBT_FAST_PAIR_FMDN_RING_TRIGGER_GATT_STOPPED\n```\n\n----------------------------------------\n\nTITLE: Enabling HKDF Key Derivation Function in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for the HKDF (HMAC-based Key Derivation Function) algorithm within the PSA Cryptography API. HKDF is used to derive one or more secret keys from a single initial secret.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_7\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_HKDF`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NFC RPC Build Directories in CMake\nDESCRIPTION: CMake configuration that adds subdirectories for NFC RPC components. It unconditionally includes common code and conditionally includes client and server implementations based on CONFIG_NFC_RPC_CLIENT and CONFIG_NFC_RPC_SERVER flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nfc/rpc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(common)\nadd_subdirectory_ifdef(CONFIG_NFC_RPC_CLIENT client)\nadd_subdirectory_ifdef(CONFIG_NFC_RPC_SERVER server)\n```\n\n----------------------------------------\n\nTITLE: Adding Zephyr Options for CRACEN Driver in CMake\nDESCRIPTION: Applies Zephyr-specific options to the CRACEN PSA driver using the nrf_security_add_zephyr_options_library function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/cracen/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nnrf_security_add_zephyr_options_library(cracen_psa_driver)\n```\n\n----------------------------------------\n\nTITLE: Adding source files and include directories for nRF Cloud Test\nDESCRIPTION: Adds the main source file, includes necessary directories, and conditionally adds nrf_cloud.c when the poll thread is disabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/cloud/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources src/main.c)\ntarget_sources(app PRIVATE ${app_sources})\n\nif (NOT CONFIG_NRF_CLOUD_CONNECTION_POLL_THREAD)\n\ttarget_sources(app\n\t\tPRIVATE\n\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud.c\n\t)\nendif()\n\ntarget_include_directories(app\n\tPRIVATE\n\tsrc\n\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/include\n\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src\n\t${ZEPHYR_BASE}/subsys/testsuite/include\n\t${ZEPHYR_CJSON_MODULE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Fix for RPA Change with Extended Advertising Enabled\nDESCRIPTION: Code snippet referring to a fix for an issue where Random Private Address (RPA) would not be changed when it should while the CONFIG_BT_EXT_ADV Kconfig option was enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.3.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nCONFIG_BT_EXT_ADV\n```\n\n----------------------------------------\n\nTITLE: Displaying PMIC Device Status - Console\nDESCRIPTION: This console output snippet shows the status information of the PMIC device including voltage, current, temperature, state of charge, time to empty, and time to full. It is used to verify the initialization of the fuel gauge application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_fuel_gauge/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n   PMIC device ok\\n   V: 4.101, I: 0.000, T: 23.06, SoC: 93.09, TTE: nan, TTF: nan\n```\n\n----------------------------------------\n\nTITLE: Receive Data Command\nDESCRIPTION: Command to receive data over TCP/UDP connections with timeout parameter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_14\n\nLANGUAGE: AT\nCODE:\n```\nAT#XRECV=10\n#XRECV: 7\nTest OK\nOK\n```\n\n----------------------------------------\n\nTITLE: Configuring Modem Key Management Project in CMake\nDESCRIPTION: This CMake configuration sets up a modem key management project using the nRF Connect SDK. It includes the necessary source files from the SDK's modem key management library and sets up include paths for the nRF modem headers. It also configures the log level for the modem key management module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/modem_key_mgmt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(modem_key_mgmt)\n\ntarget_sources(app PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/lib/modem_key_mgmt/modem_key_mgmt.c\n  src/main.c\n)\n\nzephyr_include_directories(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/)\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/include/modem/)\n\ntarget_compile_options(app PRIVATE\n  -DCONFIG_MODEM_KEY_MGMT_LOG_LEVEL=3\n)\n```\n\n----------------------------------------\n\nTITLE: Programming Command with Script - Python\nDESCRIPTION: Example command for building and programming both the unicast headset and gateway applications with debug version binaries for both cores\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/building.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython buildprog.py -c both -b debug -d both -t unicast -p\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Project\nDESCRIPTION: This line defines the name of the CMake project. It sets the project name to `wdt_error_cases`, which is used for identifying the project in the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/watchdog/wdt_error_cases/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(wdt_error_cases)\"\n```\n\n----------------------------------------\n\nTITLE: Switching to Latest Development Branch\nDESCRIPTION: Commands to switch NCS repositories to the main branch for latest development state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/updating.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngit fetch origin\ngit checkout origin/main\nwest update\n```\n\n----------------------------------------\n\nTITLE: Setting up Include Directories and Module Dependencies\nDESCRIPTION: Configures include directories and adds subdirectories for UI and battery modules, linking them to the main application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PRIVATE include)\n\nadd_subdirectory(src/ui)\ntarget_link_libraries(app PRIVATE app_ui)\n\nadd_subdirectory(src/battery)\ntarget_link_libraries(app PRIVATE app_battery)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment for nRF Connect Location Library\nDESCRIPTION: Sets up the CMake project for location testing, including test runner generation, dependency mocking, and configuration of build options for the nRF Connect SDK location library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/location/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(location_test)\n\n# Generate runner for the test\ntest_runner_generate(src/location_test.c)\n\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/modem/modem_key_mgmt.h)\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/net/rest_client.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem_gnss.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem_at.h\n\t     FUNC_EXCLUDE \".*nrf_modem_at_printf\"\n             FUNC_EXCLUDE \".*nrf_modem_at_scanf\"\n\t     WORD_EXCLUDE \"__nrf_modem_(printf|scanf)_like\\(.*\\)\")\n\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/net/nrf_cloud.h\n\t     FUNC_EXCLUDE \".*nrf_cloud_obj_shadow_update\")\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/net/nrf_cloud_agnss.h)\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/net/nrf_cloud_rest.h)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package and Configuring Sources\nDESCRIPTION: This snippet sets the minimum version of CMake, searches for the Zephyr package, and includes all C source files from the src directory into the target application. It ensures that the project environment is prepared for building an application based on the Nordic SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_nfc_pairing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\n# NORDIC SDK APP START\ntarget_sources(app  PRIVATE ${app_sources})\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for building the project.  This ensures compatibility with the CMake features used in the build script.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_pwm_loopback/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Linker Sources for Cryptography Tests in CMake\nDESCRIPTION: Sets up include directories for the test suite and adds a custom linker file for read-only data. This ensures proper file inclusion and memory allocation for the tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/crypto/test_cases/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src\n    ${CMAKE_CURRENT_SOURCE_DIR}/../include_override\n)\nzephyr_linker_sources(RODATA\n    ${CMAKE_CURRENT_SOURCE_DIR}/custom-rodata.ld\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Cloud Library Components in CMake\nDESCRIPTION: This CMake configuration defines the build settings for the nRF Cloud library in the Nordic SDK. It conditionally includes source files based on enabled features through Zephyr's configuration system, supporting various nRF Cloud capabilities like MQTT, A-GNSS, P-GPS, FOTA, REST, and CoAP.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/nrf_cloud/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tsrc/nrf_cloud_codec_internal.c\n\tsrc/nrf_cloud_log.c\n\tsrc/nrf_cloud_codec.c\n\tsrc/nrf_cloud_mem.c\n\tsrc/nrf_cloud_client_id.c\n\tsrc/nrf_cloud_sec_tag.c\n\tsrc/nrf_cloud_info.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_ALERT\n\tsrc/nrf_cloud_alert.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_LOG_BACKEND\n\tsrc/nrf_cloud_log_backend.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_MODEM_JWT\n\tsrc/nrf_cloud_jwt.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_JWT_SOURCE_CUSTOM\n\tsrc/nrf_cloud_jwt.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_MQTT\n\tsrc/nrf_cloud.c\n\tsrc/nrf_cloud_fsm.c\n\tsrc/nrf_cloud_transport.c\n\tsrc/nrf_cloud_dns.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_AGNSS\n\tsrc/nrf_cloud_agnss.c\n\tsrc/nrf_cloud_agnss_utils.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_PGPS\n\tsrc/nrf_cloud_agnss.c\n\tsrc/nrf_cloud_agnss_utils.c\n\tsrc/nrf_cloud_pgps.c\n\tsrc/nrf_cloud_pgps_utils.c\n\tsrc/nrf_cloud_download.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_LOCATION\n\tsrc/nrf_cloud_location.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_FOTA\n\tsrc/nrf_cloud_fota.c\n\tsrc/nrf_cloud_fota_common.c\n\tsrc/nrf_cloud_download.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_FOTA_POLL\n\tsrc/nrf_cloud_download.c\n\tsrc/nrf_cloud_fota_common.c\n\tsrc/nrf_cloud_fota_poll.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_REST\n\tsrc/nrf_cloud_rest.c)\nzephyr_compile_definitions_ifdef(\n\tCONFIG_NRF_CLOUD_COAP)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_COAP\n\tcoap/src/agnss_encode.c\n\tcoap/src/nrf_cloud_coap_transport.c\n\tcoap/src/coap_codec.c\n\tcoap/src/nrfc_dtls.c\n\tcoap/src/ground_fix_encode.c\n\tcoap/src/ground_fix_decode.c\n\tcoap/src/msg_encode.c\n\tcoap/src/nrf_cloud_coap.c\n\tcoap/src/pgps_decode.c\n\tcoap/src/pgps_encode.c\n\tsrc/nrf_cloud_dns.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_CHECK_CREDENTIALS\n\tsrc/nrf_cloud_credentials.c)\nzephyr_library_sources_ifdef(\n\tCONFIG_NRF_CLOUD_PROVISION_CERTIFICATES\n\tsrc/nrf_cloud_credentials.c)\nzephyr_include_directories(./include coap/include)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the Oberon PSA Core Static Library in CMake\nDESCRIPTION: Defines a static library for the Oberon PSA core implementation, adding source files and linking dependencies. The library includes psa_core_lite.c and the PSA crypto driver wrappers, and is configured with Zephyr-specific security options before being linked to the main mbedcrypto target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/core/lite/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(oberon_psa_core STATIC\n  psa_core_lite.c\n  ${NRF_SECURITY_ROOT}/src/psa_crypto_driver_wrappers.c\n)\n\ntarget_link_libraries(oberon_psa_core\n  PRIVATE\n    psa_crypto_library_config\n)\n\nnrf_security_add_zephyr_options_library(oberon_psa_core)\n\ntarget_link_libraries(${mbedcrypto_target}\n  PRIVATE\n    oberon_psa_core\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for BME68x\nDESCRIPTION: The code configures the Zephyr build system to include necessary directories and sources for the BME68x sensor from Bosch Sensortec. It defines compile-time options for various sensor sampling rates and imports BSEC libraries based on the architecture and floating-point configuration. Dependencies include the Zephyr build system and the specified source and header files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/sensor/bme68x_iaq/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_include_directories(${ZEPHYR_BASE}/../modules/lib/bsec/src/inc)\nzephyr_library_include_directories(${ZEPHYR_BASE}/../modules/lib/bme68x/src/bme68x)\nzephyr_library_sources(${ZEPHYR_BASE}/../modules/lib/bme68x/src/bme68x/bme68x.c)\n\nzephyr_library_compile_definitions_ifdef(CONFIG_BME68X_IAQ_SAMPLE_RATE_ULTRA_LOW_POWER\n  BSEC_SAMPLE_RATE=BSEC_SAMPLE_RATE_ULP\n  BSEC_GAS_SAMPLE_RATE=BSEC_SAMPLE_RATE_ULP\n  BSEC_SAMPLE_PERIOD_S=300\n)\nzephyr_library_compile_definitions_ifdef(CONFIG_BME68X_IAQ_SAMPLE_RATE_LOW_POWER\n  BSEC_SAMPLE_RATE=BSEC_SAMPLE_RATE_LP\n  BSEC_GAS_SAMPLE_RATE=BSEC_SAMPLE_RATE_LP\n  BSEC_SAMPLE_PERIOD_S=3\n)\nzephyr_library_compile_definitions_ifdef(CONFIG_BME68X_IAQ_SAMPLE_RATE_CONTINUOUS\n  BSEC_SAMPLE_RATE=BSEC_SAMPLE_RATE_CONT\n  BSEC_GAS_SAMPLE_RATE=BSEC_SAMPLE_RATE_CONT\n  BSEC_SAMPLE_PERIOD_S=1\n)\nzephyr_library_compile_definitions_ifdef(CONFIG_BME68X_IAQ_SAMPLE_RATE_QUICK_ULTRA_LOW_POWER\n  BSEC_SAMPLE_RATE=BSEC_SAMPLE_RATE_LP\n  BSEC_GAS_SAMPLE_RATE=BSEC_SAMPLE_RATE_ULP\n  BSEC_SAMPLE_PERIOD_S=3\n)\n\nif (CONFIG_FP_HARDABI)\n  if (CONFIG_CPU_CORTEX_M33)\n    zephyr_library_import(bsec_lib ${ZEPHYR_BASE}/../modules/lib/bsec/src/cortex-m33/fpv5-sp-d16-hard/libalgobsec.a)\n  elseif(CONFIG_CPU_CORTEX_M4)\n    zephyr_library_import(bsec_lib ${ZEPHYR_BASE}/../modules/lib/bsec/src/cortex-m4/fpv4-sp-d16-hard/libalgobsec.a)\n  else()\n    assert(0 \"Unsupported configuration.\")\n  endif()\nelse()\n  zephyr_library_compile_definitions(BME68X_DO_NOT_USE_FPU)\n  if (CONFIG_CPU_CORTEX_M33 OR CONFIG_CPU_CORTEX_M4)\n    zephyr_library_import(bsec_lib ${ZEPHYR_BASE}/../modules/lib/bsec/src/cortex-m4/libalgobsec.a)\n  else()\n    assert(0 \"Unsupported configuration.\")\n  endif()\nendif()\nzephyr_library_sources(bme68x_iaq.c)\n```\n\n----------------------------------------\n\nTITLE: Building Event Manager Proxy Sample for nRF54H20 DK\nDESCRIPTION: Command to build the application code for the nRF54H20 Development Kit, which automatically includes a snippet for running the PPR core.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Simulated Device Providers\nDESCRIPTION: Adds source files for simulated device providers when Bluetooth connectivity is not enabled, including factory class and include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n    target_sources(app PRIVATE\n        src/simulated_providers/simulated_bridged_device_factory.cpp\n    )\n    target_include_directories(app PRIVATE src/simulated_providers)\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter GNU Support and Data Model\nDESCRIPTION: Includes necessary CMake files for GNU standard support and Matter Data Model initialization.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/nrfconnect/app/enable-gnu-std.cmake)\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/src/app/chip_data_model.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Bluetooth Mesh\nDESCRIPTION: Configures include directories for the application, specifically pointing to the Bluetooth Mesh subsystem directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/sensor_subsys/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PUBLIC\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh\n  )\n```\n\n----------------------------------------\n\nTITLE: Executing Mesh Initialization in Shell\nDESCRIPTION: Command to initialize the Bluetooth Mesh functionality through the shell interface before interacting with the sensor client.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/sensor_client/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmesh init\n```\n\n----------------------------------------\n\nTITLE: Setting a Regulatory Domain with wifi_radio_test\nDESCRIPTION: This snippet demonstrates how to set the regulatory domain using the `wifi_radio_test` command. It sets the regulatory domain to \"US\" using the `reg_domain` subcommand. The `show_config` subcommand then displays the configured regulatory domain, confirming the setting.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test reg_domain US\n```\n\n----------------------------------------\n\nTITLE: Python Command for nRF91x1 DK Firmware Update\nDESCRIPTION: Command line examples for updating modem firmware on nRF91x1 DK using different baud rates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/fmfu_smp_svr/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython update_modem.py mfw_nrf91x1_2.0.0.zip /dev/ttyACM0 115200\npython update_modem.py mfw_nrf91x1_2.0.0.zip /dev/ttyACM0 1000000\n```\n\n----------------------------------------\n\nTITLE: SUIT DFU Update Initiation\nDESCRIPTION: Function call to start the firmware update process by resetting the device and transferring control to the Secure Domain.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/suit_dfu.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nsuit_dfu_update_start();\n```\n\n----------------------------------------\n\nTITLE: Defining Result Message Structure in Protocol Buffers\nDESCRIPTION: Defines the structure of the Result message used by the target to provide asynchronous feedback on Wi-Fi status to the configurator, including scan records, connection state, and failure reasons.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/wifi_prov.rst#2025-04-21_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Result {\n  optional message scan_record = 1;\n  optional enum state = 2;\n  optional enum reason = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Unsupported Configuration for nRF5340 - MPSL - Documentation Format\nDESCRIPTION: This documentation states that certain clock options are unsupported for nRF5340 devices, which developers should avoid to prevent configuration errors.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_47\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-15223: :kconfig:option:`CONFIG_SYSTEM_CLOCK_NO_WAIT` is not supported for nRF5340 Using :kconfig:option:`CONFIG_SYSTEM_CLOCK_NO_WAIT` with nRF5340 devices might not work as expected.\n```\n\n----------------------------------------\n\nTITLE: Accessing clock_gettime() in C\nDESCRIPTION: The clock_gettime() function is used to get the current time, but may return incorrect values after one week of uptime due to an issue on nRF9160 and nRF52840 platforms.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nclock_gettime()\n```\n\n----------------------------------------\n\nTITLE: Referencing BLE Peer Operation Event Struct in C\nDESCRIPTION: C struct reference for the ble_peer_operation_event, which is not used by this module but mentioned in the implementation details.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_bond.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstruct ble_peer_operation_event\n```\n\n----------------------------------------\n\nTITLE: Requesting Wi-Fi Access Point Scan in C\nDESCRIPTION: Requests a Wi-Fi access point scan using the lwm2m_wifi_request_scan function when CONFIG_LWM2M_CLIENT_UTILS_WIFI_AP_SCANNER is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_location_assistance.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nlwm2m_wifi_request_scan();\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-Channel Sensor Series in Bluetooth Mesh\nDESCRIPTION: Example of implementing a single-channel sensor (motion sensed) as a sensor series. This shows a simpler implementation where no column array is needed for sensors with only one or two channels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/sensor.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define COLUMN_COUNT 10\n\nstatic struct bt_mesh_sensor motion_sensor = {\n    .type = &bt_mesh_sensor_motion_sensed,\n    .series = {\n         /* Note: no column array necessary for 1 or 2 channel sensors */\n         .column_count = COLUMN_COUNT,\n         .get = getter,\n     },\n};\n\n/** Sensor data is divided into columns and filled elsewhere */\nstatic uint8_t motion[COLUMN_COUNT];\n\nstatic int getter(struct bt_mesh_sensor *sensor, struct bt_mesh_msg_ctx *ctx,\n                  uint32_t column_index, struct bt_mesh_sensor_value *value)\n{\n    return bt_mesh_sensor_value_from_micro(\n        sensor->type->channels[0].format,\n        motion[column_index] * 1000000LL, &value[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Device Mode - Custom Command Usage\nDESCRIPTION: This command changes the device mode between DUT and CMD. It requires an argument that specifies the mode (0 for DUT, 1 for CMD). Example usage includes changing mode to CMD (1).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncustom changemode *<mode>*\n```\n\n----------------------------------------\n\nTITLE: Removing a Bridged Device\nDESCRIPTION: Command syntax for removing a previously added bridged device from the Matter bridge. Requires specifying the endpoint ID of the device to remove.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_15\n\nLANGUAGE: parsed-literal\nCODE:\n```\nmatter_bridge remove *<bridged_device_endpoint_id>*\n```\n\n----------------------------------------\n\nTITLE: Querying Git Log for Zephyr Commits in C\nDESCRIPTION: Git commands to list Zephyr commits incorporated into NCS since the last release, and NCS-specific commits. These commands should be run from the ncs/zephyr repository after running 'west update'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline ff720cd9b343 ^v2.4.0-ncs1\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline manifest-rev ^ff720cd9b343\n```\n\n----------------------------------------\n\nTITLE: Opening FTP connection using AT commands\nDESCRIPTION: These AT commands open, check status, change transfer mode(ascii and binary) and close ftp connection with speedtest.tele2.net server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_37\n\nLANGUAGE: text\nCODE:\n```\n**AT#XFTP=\"open\",,,\"speedtest.tele2.net\"**\n220 (vsFTPd 3.0.3)\n200 Always in UTF8 mode.\n331 Please specify the password.\n230 Login successful.\nOK\n\n**AT#XFTP=\"status\"**\n215 UNIX Type: L8\n211-FTP server status:\n     Connected to ::ffff:202.238.218.44\n     Logged in as ftp\n     TYPE: ASCII\n     No session bandwidth limit\n     Session timeout in seconds is 300\n     Control connection is plain text\n     Data connections will be plain text\n     At session startup, client count was 38\n     vsFTPd 3.0.3 - secure, fast, stable\n211 End of status\nOK\n\n**AT#XFTP=\"ascii\"**\n200 Switching to ASCII mode.\nOK\n\n**AT#XFTP=\"binary\"**\n200 Switching to Binary mode.\nOK\n\n**AT#XFTP=\"close\"**\n221 Goodbye.\nOK\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: This command defines the name of the CMake project as `nrf_wifi_thread_coex`. This name is used internally by CMake to identify the project and for generating build artifacts. It is a string identifier for the overall project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/thread_coex/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(nrf_wifi_thread_coex)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Suit Memory Layout Interface - CMake\nDESCRIPTION: This snippet defines the Suit Memory Layout Interface and includes necessary directories, library sources, and links. It sets up the interface for further usage in projects depending on this module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/memory_layout/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_interface_library_named(suit_memory_layout_interface)\n\ntarget_include_directories(suit_memory_layout_interface INTERFACE include)\n\nzephyr_library()\nzephyr_library_sources(src/suit_memory_layout.c)\n\nzephyr_library_link_libraries(suit_memory_layout_interface)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic Bootloader\nDESCRIPTION: Sets up CMake build configuration for a bootloader project, including minimum CMake version, Zephyr package requirements, and source files to compile. Requires CMake 3.20.0 or higher and the Zephyr RTOS framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bootloader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bootloader)\n\nzephyr_library_sources(src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Building Sample with BLE RPC Interface\nDESCRIPTION: Command to build the sample with Bluetooth Low Energy Remote Procedure Call interface enabled\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_uart/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build samples/bluetooth/peripheral_uart -b board_name --sysbuild -S nordic-bt-rpc -- -DFILE_SUFFIX=bt_rpc\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Boot for Network Core in CMake\nDESCRIPTION: Sets up secure boot configuration for the network core, including cryptographic options and MCUboot integration for network core application updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(SB_CONFIG_SECURE_BOOT_NETCORE)\n  if(NOT SB_CONFIG_NETCORE_NONE)\n    set_config_bool(${SB_CONFIG_NETCORE_IMAGE_NAME} CONFIG_SECURE_BOOT y)\n  endif()\n\n  # Apply configuration for hashing\n  if(SB_CONFIG_SECURE_BOOT_HASH_TYPE_SHA256 AND NOT SB_CONFIG_SECURE_BOOT_NETCORE_HASH_TYPE_NONE)\n    if(SB_CONFIG_SECURE_BOOT_NETCORE_HASH_TYPE_SOFTWARE)\n      set_config_bool(b0n CONFIG_SB_CRYPTO_OBERON_SHA256 y)\n    elseif(SB_CONFIG_SECURE_BOOT_NETCORE_HASH_TYPE_UNUSED)\n      set_config_bool(b0n CONFIG_SB_CRYPTO_NO_SHA256 y)\n    endif()\n  elseif(SB_CONFIG_SECURE_BOOT_HASH_TYPE_NONE OR SB_CONFIG_SECURE_BOOT_NETCORE_HASH_TYPE_NONE)\n    set_config_bool(b0n CONFIG_SB_CRYPTO_NONE y)\n  endif()\n\n  if(SB_CONFIG_SECURE_BOOT_SIGNATURE_TYPE_ECDSA)\n    if(SB_CONFIG_SECURE_BOOT_NETCORE_SIGNATURE_TYPE_SOFTWARE)\n      set_config_bool(b0n CONFIG_SB_CRYPTO_OBERON_ECDSA_SECP256R1 y)\n    elseif(SB_CONFIG_SECURE_BOOT_NETCORE_SIGNATURE_TYPE_UNUSED)\n      set_config_bool(b0n CONFIG_SB_CRYPTO_NO_ECDSA_SECP256R1 y)\n    endif()\n  endif()\n\n  if(SB_CONFIG_BOOTLOADER_MCUBOOT)\n    if(SB_CONFIG_NETCORE_APP_UPDATE)\n      set_config_bool(mcuboot CONFIG_PCD_APP y)\n\n      add_overlay_dts(\n        mcuboot\n        ${ZEPHYR_NRF_MODULE_DIR}/modules/mcuboot/flash_sim.overlay\n        )\n      if(SB_CONFIG_SECURE_BOOT_BUILD_S1_VARIANT_IMAGE)\n        add_overlay_dts(\n          s1_image\n          ${ZEPHYR_NRF_MODULE_DIR}/modules/mcuboot/flash_sim.overlay\n          )\n      endif()\n    else()\n      set_config_bool(mcuboot CONFIG_PCD_APP n)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Application\nDESCRIPTION: Sets up the include directories for the Zephyr library, including event definitions and the generated readme header location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/connectivity_bridge/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Include application events and disk files\nzephyr_library_include_directories(\n  src/events\n  ${CMAKE_BINARY_DIR}/generated/readme\n  )\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for nrf_auraconfig\nDESCRIPTION: Sets up the CMake project with minimum version requirement, finds the Zephyr package, and declares the project name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_auraconfig)\n```\n\n----------------------------------------\n\nTITLE: Opening a UDP Socket using AT command\nDESCRIPTION: This AT command opens a UDP socket with specified parameters. The response confirms the socket creation and provides its identifier and associated type.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n**AT#XSOCKET=1,2,1**\n#XSOCKET: 0,2,17\nOK\n```\n\n----------------------------------------\n\nTITLE: Workaround for UART Hardware Flow Control Configuration in Serial LTE Modem\nDESCRIPTION: This Kconfig overlay enables hardware flow control for UART1 to address NCSDK-20457 issue where modem traces are corrupted when capturing both UART and RTT logs simultaneously.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_24\n\nLANGUAGE: kconfig\nCODE:\n```\n&uart1 {\n hw-flow-control;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing nrfutil-trace version 2.11.0\nDESCRIPTION: Command to install the required nrfutil trace command version 2.11.0 using the force option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil install trace=2.11.0 --force\n```\n\n----------------------------------------\n\nTITLE: Defining the Project and Specifying Source Files\nDESCRIPTION: This snippet defines the project name and specifies the source files that will be compiled as part of the application. It utilizes the 'target_sources' command to include C source files necessary for the app functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/remote_shell/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(NONE)\n\ntarget_sources(app PRIVATE\n  src/main.c\n  src/shell_ipc_host.c\n)\n```\n\n----------------------------------------\n\nTITLE: Continuous OFDM TX Traffic Sequence in HE-TB-PPDU 11ax Mode\nDESCRIPTION: Complete command sequence for running a continuous OFDM TX traffic test in HE-TB-PPDU 802.11ax mode. The configuration uses channel 100, HE-TB frame format, 1024 byte payload, 200 μs gap, MCS7 data rate, 3.2 μs guard interval, 106 Tone, 4xHELTF, and RU Index 2 for a 62.4% duty cycle.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 100\nuart:~$ wifi_radio_test tx_pkt_tput_mode 5\nuart:~$ wifi_radio_test tx_pkt_mcs 7\nuart:~$ wifi_radio_test ru_tone 106\nuart:~$ wifi_radio_test ru_index 2\nuart:~$ wifi_radio_test tx_pkt_len 1024\nuart:~$ wifi_radio_test he_ltf 2\nuart:~$ wifi_radio_test he_gi 2\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num -1\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Installing New Firmware via UART on nRF54H20\nDESCRIPTION: Command to start the installation of new firmware using nrfutil over UART.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/smp_transfer/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit install --serial-port COM7\n```\n\n----------------------------------------\n\nTITLE: Reading Heart Rate Sensor Location in C\nDESCRIPTION: This function reads the heart rate sensor location from the remote device. The possible locations are defined in the bt_hrs_client_sensor_location enum.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/hrs_client.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbt_hrs_client_sensor_location_read\n```\n\n----------------------------------------\n\nTITLE: Building Zephyr Wi-Fi sample for nRF7002 DK\nDESCRIPTION: This command builds a Zephyr networking sample for the nRF7002 DK using the nrf7002dk/nrf5340/cpuapp board target and the wifi-ipv4 snippet configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/wifi_zephyr.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -S wifi-ipv4\n```\n\n----------------------------------------\n\nTITLE: Button Handler Event Flow Table\nDESCRIPTION: Table documenting button-related event flow, showing how power management and wake-up events are handled by the buttons module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n+-----------------------------------------------+------------------------+-------------+------------------------+---------------------------------------------+\n| Source Module                                 | Input Event            | This Module | Output Event           | Sink Module                                 |\n+===============================================+========================+=============+========================+=============================================+\n| :ref:`nrf_desktop_power_manager`              | ``power_down_event``   | ``buttons`` |                        |                                             |\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Flash IPUC Project in CMake\nDESCRIPTION: This snippet adds the main source file and the Flash IPUC driver to the project. It also includes the Zephyr flash driver directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/flash/flash_ipuc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n  src/main.c\n  ${ZEPHYR_NRF_MODULE_DIR}/drivers/flash/flash_ipuc/flash_ipuc.c\n)\nzephyr_include_directories(${ZEPHYR_BASE}/drivers/flash)\n```\n\n----------------------------------------\n\nTITLE: Managing DECT Application Settings\nDESCRIPTION: Demonstrates how to view, reset, and modify persistent application settings using the 'dect sett' command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndect sett -?\ndect sett -r\ndect sett --reset\ndect sett --tx_pwr -16\ndect sett -b 2\n```\n\n----------------------------------------\n\nTITLE: Initializing Project without Specific Name\nDESCRIPTION: Sets the project name to NONE, indicating a default or minimal project configuration in the Nordic SDK build system\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/shell/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: Conditional LED State Module Addition\nDESCRIPTION: Conditionally adds LED state module source file based on CONFIG_CAF_SAMPLE_LED_STATE configuration option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_CAF_SAMPLE_LED_STATE\n  app PRIVATE src/modules/led_state.c)\n```\n\n----------------------------------------\n\nTITLE: Flashing Application with West\nDESCRIPTION: After resolving UICR configuration conflicts, this command uses the West tool to flash the application onto the nRF54H20 SoC. It assumes that all configurations have been successfully reset and the environment is prepared for programming.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/nRF54H20_erase_UICR.txt#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Setting up MbedCrypto Static Library\nDESCRIPTION: Creates and configures the main mbedcrypto static library target with necessary source files and dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${mbedcrypto_target}\n  STATIC\n    ${src_crypto}\n)\n\ntarget_link_libraries(${mbedcrypto_target}\n  INTERFACE\n    psa_crypto_config_chosen\n    psa_interface\n)\n```\n\n----------------------------------------\n\nTITLE: ASCII File Transfer Operations\nDESCRIPTION: Commands for switching to ASCII mode and creating text files with specified content.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_42\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XFTP=\"ascii\"\nAT#XFTP=\"put\",\"upload.txt\",1,\"TEXTDATA\"\n```\n\n----------------------------------------\n\nTITLE: UDP Receive Data Notification Format\nDESCRIPTION: Format of the notification sent when UDP data is received, showing size, source IP, port, and data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_21\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPDATA: <size>,<ip_addr>,<port>\n<data>\n```\n\n----------------------------------------\n\nTITLE: CMake Project Configuration\nDESCRIPTION: This snippet configures the CMake build system for the settings sample application. It includes setting the minimum required CMake version, finding the Zephyr package, defining the project name, and specifying the source files to compile.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/settings/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(settings_sample)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/subsys/settings/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Python FOTA Script Environment\nDESCRIPTION: This snippet sets up the environment variables for the FOTA script, requiring credentials for the AVSystem's Coiote Device Management server as prerequisites. The setup involves exporting the username and password for authentication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota_external_mcu.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# Setup phase\nexport COIOTE_PASSWD='my-password'\nexport COIOTE_USER='my-username'\n\n```\n\n----------------------------------------\n\nTITLE: Generating Security Keys for Firmware Update\nDESCRIPTION: Commands to generate ECDSA-P256 keys for MCUboot and NSIB using Imgtool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_psa_template/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmkdir _keys\npython3 bootloader/mcuboot/scripts/imgtool.py keygen -t ecdsa-p256 -k ~/ncs/_keys/mcuboot_priv.pem\npython3 bootloader/mcuboot/scripts/imgtool.py keygen -t ecdsa-p256 -k ~/ncs/_keys/nsib_priv.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring PSA Crypto Settings for TF-M and Non-TF-M Builds in CMake\nDESCRIPTION: Sets up initial variables and includes necessary config files for the nrf_security integration in the NCS build system. It configures the PSA Crypto key ID encoding based on whether SSF server PSA crypto service is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# This file is nrf_security's entry-point for the NCS build system\n# Set SPM to false as we are not in a secure image build\nset(CONFIG_MBEDTLS_PSA_CRYPTO_SPM False)\n\n# Include generic macros\ninclude(cmake/extensions.cmake)\n\nset(mbedcrypto_target mbedcrypto)\n\n# Generate the file containing all static paths and configurations used both in\n# TF-M and non TF-M builds\nconfigure_file(${CMAKE_CURRENT_LIST_DIR}/configs/config_extra.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/cmake/config_extra.cmake\n)\n\n# Include files with standard paths like oberon-psa-core and nrf_security root\ninclude(${CMAKE_CURRENT_BINARY_DIR}/cmake/config_extra.cmake)\n\nif(CONFIG_SSF_SERVER_PSA_CRYPTO_SERVICE_ENABLED)\n  # Inside the SSF server, when the PSA crypto service is enabled we need to\n  # use the OWNER id to give key ownership to the differrent domains.\n  set(CONFIG_MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER     True)\nelse()\n  # MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER must be disabled for Zephyr\n  # builds or when MBEDTLS_USE_PSA_CRYPTO is enabled (e.g. for TLS/DTLS\n  # and x.509 support) Note: This configuration is internal and may be\n  # removed with a new mbed TLS version\n  set(CONFIG_MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER     False)\nendif()\n```\n\n----------------------------------------\n\nTITLE: SUIT Integration Function Call\nDESCRIPTION: Function call used to trigger the SUIT update process instead of direct system reboot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dfu.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nsuit_trigger_update\n```\n\n----------------------------------------\n\nTITLE: Isochronous Broadcaster Console Output\nDESCRIPTION: Sample console output for a device configured as an isochronous broadcaster, showing connection parameters and transmission timestamps.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_time_sync/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nBluetooth ISO Time Sync Demo\nChoose role - cis_central (c) / cis_peripheral (p) / bis_transmitter (b) / bis_receiver (r) : b\nChoose retransmission number [0..30] : 2\nChoose max transport latency in ms [5..4000] : 20\nStarting BIS transmitter with BIS indices [1..4], RTN: 2, max transport latency 20 ms\nBIS transmitter started\nISO channel index 0 connected: interval: 10 ms, NSE: 3, BN: 1, IRC: 2, PTO: 1, transport latency: 12418 us\nISO channel index 1 connected: interval: 10 ms, NSE: 3, BN: 1, IRC: 2, PTO: 1, transport latency: 12418 us\nISO channel index 2 connected: interval: 10 ms, NSE: 3, BN: 1, IRC: 2, PTO: 1, transport latency: 12418 us\nSent SDU counter 0 with timestamp 2329536 us, controller_time 2330444 us, btn_val: 0 LED will be set in 16510 us\n```\n\n----------------------------------------\n\nTITLE: Include Directories Configuration\nDESCRIPTION: Sets up public include directories for the application, including Bluetooth mesh subsystem paths and common test directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/scheduler_model/action_planning/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PUBLIC\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh\n  ${ZEPHYR_BASE}/subsys/bluetooth\n  ../common\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Context Metadata with Shell Command\nDESCRIPTION: Command to set the context metadata for a subgroup. The supported contexts can be listed with the 'nac context print' command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnac context <context> <BIG index> <Subgroup index>\n```\n\n----------------------------------------\n\nTITLE: Generating CBOR Files from CDDL for Firmware Service\nDESCRIPTION: CMake function call to generate CBOR encoder/decoder files from enc_fw_service.cddl specification. Creates files for handling firmware request (enc_fw_req) and response (enc_fw_rsp) messages using the zcbor generator.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/enc_fw/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_and_add_cbor_files(enc_fw_service.cddl zcbor_generated\n  enc_fw_req\n  enc_fw_rsp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeslot Period in Gazell\nDESCRIPTION: Function to set the timeslot period, which serves as the internal 'heartbeat' for Gazell communication protocol. Controls the timing of packet transmissions and channel switching.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/gazell/gzll.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nnrf_gzll_set_timeslot_period()\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Module Template Project with CMake\nDESCRIPTION: This CMake snippet sets up the project configuration for an Audio Module Template. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, adds source files, and configures include directories for the nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/audio/audio_module_template/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Audio module Template\")\n\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/template_test.c\n)\n\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/subsys/audio/audio_module_template)\n```\n\n----------------------------------------\n\nTITLE: Defining FS_MOUNT_FLAG_NO_FORMAT Flag in C\nDESCRIPTION: Adds a flag to remove formatting capabilities from FAT/exFAT file system driver and prevent unformatted devices from being formatted on mount attempt.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nFS_MOUNT_FLAG_NO_FORMAT\n```\n\n----------------------------------------\n\nTITLE: Generating RSA-2048 Key Pair with Imgtool\nDESCRIPTION: Uses MCUboot's Imgtool Python script to generate an RSA-2048 private key and save it to priv.pem. This key type is supported by MCUboot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_signature_keys.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\npython3 bootloader/mcuboot/scripts/imgtool.py keygen -t rsa-2048 -k priv.pem\n```\n\n----------------------------------------\n\nTITLE: Capturing AGC Adjusted Baseband Samples after WLAN Packet Detection\nDESCRIPTION: This snippet demonstrates how to capture AGC-adjusted baseband samples after WLAN packet detection using the `wifi_radio_test` command. It initializes the radio on channel 144, sets the capture length to 64, sets a capture timeout of 10, and then captures the baseband samples using `rx_cap 2`.  The VSG should continuously transmit WLAN packets and packet detection will timeout if a WLAN packet isn't detected within the timeout period.  The output either displays the captured samples or indicates packet detection failure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test init 144\nwifi_radio_test rx_capture_length 64\nwifi_radio_test rx_capture_timeout 10\nwifi_radio_test rx_cap 2\n```\n\n----------------------------------------\n\nTITLE: Selecting a Generic Property Client Model Instance by Element Index\nDESCRIPTION: This command selects a specific Generic Property Client model instance by the given element index on the device. If no instance is selected, it defaults to the first available model instance. It is necessary for directing subsequent operations to the correct model.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_prop_cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmesh models prop instance set <ElemIdx>\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing TCP Server\nDESCRIPTION: This snippet demonstrates how to create a TCP server, check its status, and handle incoming connections and data using AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_19\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XTCPSVR=?\n\nAT#XTCPSVR?\n\nAT#XTCPSVR=1,1234\n\nAT#XTCPSVR?\n\nAT#XTCPSEND=\"TCP1/2 received\"\n\nAT#XTCPSEND=\"TCP3/4/5 received\"\n```\n\n----------------------------------------\n\nTITLE: Get CMD Radio Channel - Custom Command Usage\nDESCRIPTION: This command retrieves the currently configured channel of the CMD device, facilitating monitoring and verification of settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ncustom lgetchannel\n```\n\n----------------------------------------\n\nTITLE: Isochronous Broadcast Receiver Console Output\nDESCRIPTION: Sample console output for a device configured as an isochronous broadcast receiver, showing sync status and reception timestamps.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_time_sync/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nBluetooth ISO Time Sync Demo\nChoose role - cis_central (c) / cis_peripheral (p) / bis_transmitter (b) / bis_receiver (r) : r\nChoose bis index [1..31] : 2\nStarting BIS receiver, BIS index 2\nScanning for periodic advertiser\nWaiting for BigInfo\nSynced to periodic advertiser\nBigInfo received\nSyncing to BIG index 2\nISO Channel connected: interval: 10 ms, NSE: 3, BN: 1, IRC: 2, PTO: 1, transport latency: 12418 us\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket Offloading in nRF Modem Library\nDESCRIPTION: The socket offloading functionality is controlled through the CONFIG_NET_SOCKETS_OFFLOAD Kconfig option. When enabled, BSD socket calls are redirected to the modem firmware. When disabled, calls use Zephyr's native TCP/IP stack.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_socket_offloading.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NET_SOCKETS_OFFLOAD=y\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Hash Algorithms with Kconfig for C\nDESCRIPTION: This segment gives an overview of how to enable various secure hash algorithms through Kconfig options in the nrfconnect SDK. Each algorithm requires specific configuration options to be enabled for use.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/backend_config.rst#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Algorithm    | Support            | Backend selection                           |\n|==============|====================|=============================================|\n| SHA-1        |                    | :kconfig:option:`CONFIG_MBEDTLS_SHA1_C`     |\n| SHA-224      |                    | :kconfig:option:`CONFIG_MBEDTLS_SHA224_C`   |\n| SHA-256      |                    | :kconfig:option:`CONFIG_MBEDTLS_SHA256_C`   |\n| SHA-384      |                    | :kconfig:option:`CONFIG_MBEDTLS_SHA384_C`   |\n| SHA-512      |                    | :kconfig:option:`CONFIG_MBEDTLS_SHA512_C`   |\n```\n\n----------------------------------------\n\nTITLE: Including Suit Processor Library - CMake\nDESCRIPTION: When CONFIG_MOCK_SUIT_PROCESSOR is enabled, the script adds the suit-processor directory, compiles options for it, and includes necessary directories, thus integrating the suite processor functionalities into the test binary.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_PROCESSOR)\n  # Include suit-processor directory, so manifest and cose libraries get generated.\n  add_subdirectory(${ZEPHYR_SUIT_PROCESSOR_MODULE_DIR} suit_processor)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_PROCESSOR)\n  target_include_directories(testbinary PRIVATE\n    ${ZEPHYR_SUIT_PROCESSOR_MODULE_DIR}/include\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MPSL Clock Control Zephyr Library in CMake\nDESCRIPTION: Creates a Zephyr library for the MPSL clock control module and specifies mpsl_clock_ctrl.c as the source file to be compiled. This is part of the Nordic nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/clock_ctrl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(mpsl_clock_ctrl.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring SDFW Implementation Libraries\nDESCRIPTION: Conditional configuration for SDFW implementation that creates a library with SDFW-specific source files and links against required SUIT interfaces and utilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/ipuc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_SUIT_IPUC_IMPL_SDFW)\n  zephyr_library()\n  zephyr_library_sources(src/suit_ipuc_sdfw.c)\n\n  zephyr_library_link_libraries(suit_ipuc)\n  zephyr_library_link_libraries(suit_utils)\n  zephyr_library_link_libraries(suit_memory_layout_interface)\n  zephyr_library_link_libraries(suit_source_selector_interface)\n  zephyr_library_link_libraries(suit_stream_sources_interface)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr Project\nDESCRIPTION: This CMakeLists.txt file configures a Zephyr project in C. It sets the minimum required CMake version to 3.20.0 and finds the Zephyr package using an environment variable. It then defines the project called 'Sensor manager sample' and specifies 'src/main.c' as the source file. Board-specific configuration files are included via the `zephyr_include_directories` command, and an additional module directory is added with `add_subdirectory`. No external dependencies are explicitly stated aside from Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf_sensor_manager/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#\\n# Copyright (c) 2022 Nordic Semiconductor\\n#\\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\\n#\\ncmake_minimum_required(VERSION 3.20.0)\\n\\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\\nproject(\"Sensor manager sample\")\\n\\ntarget_sources(app PRIVATE src/main.c)\\n\\n# Add include directory for board specific CAF def files\\nzephyr_include_directories(\\n  configuration/\\n  configuration/${NORMALIZED_BOARD_TARGET}\\n)\\n\\nadd_subdirectory(src/modules)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for FOTA Download in nRF Connect SDK\nDESCRIPTION: Defines the include directories for the FOTA download project, including local and SDK-specific paths.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/fota_download/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app\n  PRIVATE\n  src\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/fota_download/include\n  ${ZEPHYR_NRF_MODULE_DIR}/include/net/\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/dfu/include\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/include\n  . # To get 'pm_config.h'\n  )\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Command Syntax\nDESCRIPTION: AT command syntax for sending HTTP requests. Includes parameters for method, resource, headers, content type, content length and chunked transfer.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/HTTPC_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT\nCODE:\n```\nAT#XHTTPCREQ=<method>,<resource>[,<headers>[,<content_type>,<content_length>[,<chunked_transfer>]]]\n```\n\n----------------------------------------\n\nTITLE: Configuring LwM2M Client Unit Test Project in CMake\nDESCRIPTION: Sets up the LwM2M client unit test project, including minimum CMake version, Zephyr package, project name, and source files. It also configures linker sources and compiler options for LwM2M, LTE, and networking features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/lwm2m_client_utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(lwm2m_client_unittest)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app\n  PRIVATE\n    ${app_sources}\n    ${ZEPHYR_BASE}/subsys/net/lib/lwm2m/lwm2m_util.c\n)\nzephyr_linker_sources(SECTIONS src/iterables.ld)\n\nset(options\n  -DCONFIG_LWM2M_ENGINE_MAX_PENDING=5\n  -DCONFIG_LWM2M_ENGINE_MAX_REPLIES=5\n  -DCONFIG_LWM2M_ENGINE_VALIDATION_BUFFER_SIZE=100\n  -DCONFIG_LWM2M_DTLS_SUPPORT\n  -DCONFIG_LWM2M_COAP_BLOCK_SIZE=512\n  -DCONFIG_LWM2M_COAP_MAX_MSG_SIZE=512\n  -DCONFIG_LWM2M_ENGINE_MESSAGE_HEADER_SIZE=10\n  -DCONFIG_LWM2M_RD_CLIENT_SUPPORT_BOOTSTRAP\n  -DCONFIG_LWM2M_CLIENT_UTILS_NEIGHBOUR_CELL_LISTENER\n  -DCONFIG_LWM2M_CLIENT_UTILS_CONN_MON_OBJ_SUPPORT\n  -DCONFIG_LWM2M_CLIENT_UTILS_SIGNAL_MEAS_INFO_OBJ_SUPPORT\n  -DCONFIG_LTE_LC_TAU_PRE_WARNING_NOTIFICATIONS\n  -DCONFIG_LTE_PSM_REQ_RPTAU=\"10101010\"\n  -DCONFIG_LTE_PSM_REQ_RAT=\"00001111\"\n  -DCONFIG_LTE_EDRX_REQ_VALUE_LTE_M=\"0001\"\n  -DCONFIG_LTE_PTW_VALUE_LTE_M=\"0000\"\n  -DCONFIG_DOWNLOADER_STACK_SIZE=4096\n  -DCONFIG_DOWNLOADER_MAX_HOSTNAME_SIZE=128\n  -DCONFIG_DOWNLOADER_MAX_FILENAME_SIZE=128\n  -DCONFIG_DOWNLOADER_TRANSPORT_PARAMS_SIZE=256\n  -DCONFIG_LWM2M_FIRMWARE_UPDATE_OBJ_SUPPORT\n  -DCONFIG_LWM2M_FIRMWARE_UPDATE_PULL_SUPPORT\n  -DCONFIG_DFU_TARGET_MCUBOOT\n  -DCONFIG_FOTA_DOWNLOAD_MCUBOOT_FLASH_BUF_SZ=512\n  -DCONFIG_LTE_PTW_VALUE_NBIOT=\"0000\"\n  -DCONFIG_LTE_EDRX_REQ_VALUE_NBIOT=\"0010\"\n  -DCONFIG_NET_MGMT_EVENT_INFO\n  -DCONFIG_NET_MGMT_EVENT\n  -DCONFIG_LWM2M_CLIENT_UTILS_RAI\n  -DCONFIG_LWM2M_ENGINE_DEFAULT_LIFETIME=43200\n  -DCONFIG_LWM2M_CLIENT_UTILS_DTLS_CON_MANAGEMENT\n  -DCONFIG_LTE_LC_EDRX_MODULE=1\n  -DCONFIG_LTE_LC_NEIGHBOR_CELL_MEAS_MODULE=1\n  -DCONFIG_LTE_LC_PSM_MODULE=1\n  -DCONFIG_LTE_LC_TAU_PRE_WARNING_MODULE=1\n)\n\ntarget_compile_options(app\n  PRIVATE\n  ${options}\n)\ntarget_compile_options(..__nrf__subsys__net__lib__lwm2m_client_utils\n  PRIVATE\n  ${options}\n)\n\nset(includes\n\"${ZEPHYR_BASE}/subsys/net/lib/lwm2m/\"\n\"${ZEPHYR_BASE}/../nrfxlib/nrf_modem/include/\"\n\"${ZEPHYR_BASE}/../modules/lib/cjson/\"\n\"${ZEPHYR_BASE}/../nrf/subsys/net/lib/nrf_cloud/include/\"\n\"${ZEPHYR_BASE}/../nrf/subsys/net/lib/fota_download/include/\"\n\"src/\"\n)\n\ntarget_include_directories(..__nrf__subsys__net__lib__lwm2m_client_utils\n  PRIVATE\n  ${includes}\n)\n\ntarget_include_directories(app\n  PRIVATE\n  ${includes}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: Sets the name of the CMake project. This name is used for various build-related tasks and outputs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/netboot/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(network_core_bootloader)\"\n```\n\n----------------------------------------\n\nTITLE: Compile Definitions for OpenThread\nDESCRIPTION: This snippet sets a compile definition for the size of the OpenThread packet list, which will be used during compilation to define the structure of the packets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_compile_definitions(\n  CONFIG_OPENTHREAD_PKT_LIST_SIZE=1\n)\n```\n\n----------------------------------------\n\nTITLE: Running Hardware Model v2 Conversion Script\nDESCRIPTION: Example command for converting a hypothetical out-of-tree board 'plank_nrf52840' using the hardware model conversion script. The script converts board definitions from v1 to v2 format, creating new board files in the specified vendor directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_hwmv2.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd my-repo\npython ../zephyr/scripts/utils/board_v1_to_v2.py --board-root . -b plank_nrf52840 -n plank -s nrf52840 -g acme -v acme\n```\n\n----------------------------------------\n\nTITLE: Globbing Application Sources\nDESCRIPTION: This snippet uses the `FILE(GLOB)` command to find all C source files in the `src` directory, specifically `main.c`, and stores them in the `app_sources` variable. This is a common way to include all source files without explicitly listing them.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/client_id/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"FILE(GLOB app_sources src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This line specifies the minimum required version of CMake for the project. It ensures that the CMake version used is at least 3.20.0, preventing compatibility issues with older versions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/watchdog/wdt_error_cases/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Zephyr Peripheral Project\nDESCRIPTION: Sets up the CMake build environment for a Nordic Semiconductor peripheral device project. Requires CMake 3.20.0 or higher and depends on the Zephyr RTOS framework. Adds main.c as the primary source file to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_with_multiple_identities/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(peripheral_with_multiple_identities)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Define Project\nDESCRIPTION: This snippet defines the project name as 'idle_uarte'. It uses the project command to set the project name, which is used by CMake for various build-related tasks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_uarte/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(idle_uarte)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Provisioning Sample with CMake\nDESCRIPTION: This CMake configuration file sets up the nRF Provisioning Sample project. It requires CMake 3.20.0 or higher, finds the Zephyr package, defines the project name, sets up compilation definitions, includes the necessary header directories, and adds the main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_provisioning/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nRF_Provisioning_Sample)\n\nzephyr_compile_definitions(PROJECT_NAME=${PROJECT_NAME})\nzephyr_include_directories(include/)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Programming BICR on nRF54H20 DK\nDESCRIPTION: Command to program the BICR (Board Information and Configuration Region) HEX file to the nRF54H20 development kit using nRF Util. Uses the chip_erase_mode option to prevent erasing existing content.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device program --options chip_erase_mode=ERASE_NONE --firmware bicr_ext_loadcap.hex --core Secure --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Sample Output Log\nDESCRIPTION: Example console output showing the initialization and operation of the WiFi sample\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/raw_tx_packet/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n[00:00:00.469,940] <err> wifi_nrf: Firmware (v1.2.8.99) booted successfully\n\n*** Booting nRF Connect SDK 9a9ffb5ebb5b ***\n[00:00:00.618,713] <inf> net_config: Initializing network\n[00:00:00.618,713] <inf> net_config: Waiting interface 1 (0x20001570) to be up...\n[00:00:00.618,835] <inf> net_config: IPv4 address: 192.168.1.99\n[00:00:00.618,896] <inf> net_config: Running dhcpv4 client...\n[00:00:00.619,140] <inf> raw_tx_packet: Starting nrf7002dk/nrf5340/cpuapp with CPU frequency: 64 MHz\n[00:00:01.619,293] <inf> raw_tx_packet: Static IP address (overridable): 192.168.1.99/255.255.255.0 -> 192.168.1.1\n[00:00:01.632,507] <inf> raw_tx_packet: Wi-Fi channel set to 6\n[00:00:01.632,598] <inf> raw_tx_packet: Sending 25 number of raw tx packets\n[00:00:01.730,010] <inf> net_config: IPv6 address: fe80::f6ce:36ff:fe00:2282\n```\n\n----------------------------------------\n\nTITLE: Compiler Options Configuration for LwM2M and FOTA\nDESCRIPTION: Sets up extensive compiler options for LwM2M engine, FOTA download, and LTE connection configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/lwm2m_fota_utils/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(options\n  -DCONFIG_LWM2M_ENGINE_MAX_PENDING=5\n  -DCONFIG_LWM2M_ENGINE_MAX_REPLIES=5\n  -DCONFIG_LWM2M_ENGINE_VALIDATION_BUFFER_SIZE=100\n  -DCONFIG_LWM2M_DTLS_SUPPORT\n  -DCONFIG_LWM2M_COAP_BLOCK_SIZE=512\n  -DCONFIG_LWM2M_COAP_MAX_MSG_SIZE=512\n  -DCONFIG_LWM2M_ENGINE_MESSAGE_HEADER_SIZE=10\n  -DCONFIG_LWM2M_RD_CLIENT_SUPPORT_BOOTSTRAP\n  -DCONFIG_LWM2M_CLIENT_UTILS_NEIGHBOUR_CELL_LISTENER\n  -DCONFIG_LWM2M_CLIENT_UTILS_CONN_MON_OBJ_SUPPORT\n  -DCONFIG_LTE_LC_TAU_PRE_WARNING_NOTIFICATIONS\n  -DCONFIG_DOWNLOADER_STACK_SIZE=4096\n  -DCONFIG_DOWNLOADER_MAX_HOSTNAME_SIZE=128\n  -DCONFIG_DOWNLOADER_MAX_FILENAME_SIZE=128\n  -DCONFIG_DOWNLOADER_TRANSPORT_PARAMS_SIZE=256\n  -DCONFIG_LWM2M_FIRMWARE_UPDATE_OBJ_SUPPORT\n  -DCONFIG_LWM2M_FIRMWARE_UPDATE_PULL_SUPPORT\n  -DCONFIG_DFU_TARGET_MCUBOOT=y\n  -DCONFIG_DFU_TARGET_MODEM_DELTA=y\n  -DCONFIG_FOTA_DOWNLOAD_MCUBOOT_FLASH_BUF_SZ=512\n  -DCONFIG_LWM2M_VERSION_1_0=y\n  -DCONFIG_LWM2M_ENGINE_DEFAULT_LIFETIME=43200\n  -D_POSIX_C_SOURCE=200809L\n  -DCONFIG_LTE_LC_CONN_EVAL_MODULE=1\n  -DCONFIG_LTE_LC_EDRX_MODULE=1\n  -DCONFIG_LTE_LC_NEIGHBOR_CELL_MEAS_MODULE=1\n  -DCONFIG_LTE_LC_PERIODIC_SEARCH_MODULE=1\n  -DCONFIG_LTE_LC_PSM_MODULE=1\n  -DCONFIG_LTE_LC_RAI_MODULE=1\n  -DCONFIG_LTE_LC_MODEM_SLEEP_MODULE=1\n  -DCONFIG_LTE_LC_TAU_PRE_WARNING_MODULE=1\n)\n```\n\n----------------------------------------\n\nTITLE: Selecting TF-M PSA Test Suite Based on Configuration\nDESCRIPTION: This snippet determines which PSA test suite to run based on the enabled configuration options. It supports Crypto, Protected Storage, Internal Trusted Storage, Storage, and Initial Attestation test suites.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_psa_test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_TFM_PSA_TEST_CRYPTO)\n  set(TFM_PSA_TEST_SUITE CRYPTO)\nelseif (CONFIG_TFM_PSA_TEST_PROTECTED_STORAGE)\n  set(TFM_PSA_TEST_SUITE PROTECTED_STORAGE)\nelseif (CONFIG_TFM_PSA_TEST_INTERNAL_TRUSTED_STORAGE)\n  set(TFM_PSA_TEST_SUITE INTERNAL_TRUSTED_STORAGE)\nelseif (CONFIG_TFM_PSA_TEST_STORAGE)\n  set(TFM_PSA_TEST_SUITE STORAGE)\nelseif (CONFIG_TFM_PSA_TEST_INITIAL_ATTESTATION)\n  set(TFM_PSA_TEST_SUITE INITIAL_ATTESTATION)\nendif()\n\nif (NOT DEFINED TFM_PSA_TEST_SUITE)\n  message(FATAL_ERROR \"Please define witch test suite to run:\n    CONFIG_TFM_PSA_TEST_CRYPTO\n    CONFIG_TFM_PSA_TEST_PROTECTED_STORAGE\n    CONFIG_TFM_PSA_TEST_INTERNAL_TRUSTED_STORAGE\n    CONFIG_TFM_PSA_TEST_STORAGE\n    CONFIG_TFM_PSA_TEST_INITIAL_ATTESTATION\")\nendif()\nset(TEST_PSA_API \"${TFM_PSA_TEST_SUITE}\")\n```\n\n----------------------------------------\n\nTITLE: Pre-CMake Configuration for Nordic Sysbuild Module\nDESCRIPTION: This function prepares the environment for CMake by restoring stored variables and configuring options for partition management, build outputs, and MCUboot integrations. The process involves conditional configurations based on system settings and calculated board targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(${SYSBUILD_CURRENT_MODULE_NAME}_pre_cmake)\n  cmake_parse_arguments(PRE_CMAKE \"\" \"\" \"IMAGES\" ${ARGN})\n  restore_ncs_vars()\n\n  foreach(image ${PRE_CMAKE_IMAGES})\n    if(SB_CONFIG_PARTITION_MANAGER)\n      set_config_bool(${image} CONFIG_PARTITION_MANAGER_ENABLED y)\n    else()\n      set_config_bool(${image} CONFIG_PARTITION_MANAGER_ENABLED n)\n    endif()\n\n    if(SB_CONFIG_BUILD_OUTPUT_BIN)\n      set_config_bool(${image} CONFIG_BUILD_OUTPUT_BIN y)\n    else()\n      set_config_bool(${image} CONFIG_BUILD_OUTPUT_BIN n)\n    endif()\n\n    if(SB_CONFIG_BUILD_OUTPUT_HEX)\n      set_config_bool(${image} CONFIG_BUILD_OUTPUT_HEX y)\n    else()\n      set_config_bool(${image} CONFIG_BUILD_OUTPUT_HEX n)\n    endif()\n  endforeach()\n\n  if(SB_CONFIG_PARTITION_MANAGER AND SB_CONFIG_BOOTLOADER_MCUBOOT)\n    if(SB_CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY)\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY y)\n      set_config_bool(mcuboot CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY y)\n    else()\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY n)\n      set_config_bool(mcuboot CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY n)\n    endif()\n  endif()\n\n  string(REPLACE \"/\" \";\" split_board_qualifiers \"${BOARD_QUALIFIERS}\")\n  list(GET split_board_qualifiers 1 target_soc)\n\n  if(SB_CONFIG_SOC_SERIES_NRF53X OR SB_CONFIG_SOC_SERIES_NRF54LX)\n    list(LENGTH split_board_qualifiers target_length)\n\n    if(\"${target_length}\" GREATER \"3\")\n      list(GET split_board_qualifiers 2 target_cpucluster)\n      list(GET split_board_qualifiers 3 target_variant)\n\n      if(\"${target_cpucluster}\" STREQUAL \"cpuapp\" AND \"${target_variant}\" STREQUAL \"ns\")\n        set(board_qualifiers_secure \"${target_soc}/cpuapp\")\n      endif()\n    endif()\n  elseif(SB_CONFIG_SOC_SERIES_NRF91X)\n    list(LENGTH split_board_qualifiers target_length)\n\n    if(\"${target_length}\" GREATER \"2\")\n      list(GET split_board_qualifiers 2 target_variant)\n      if(\"${target_variant}\" STREQUAL \"ns\")\n        set(board_qualifiers_secure \"${target_soc}\")\n      endif()\n    endif()\n  endif()\n\n  if(DEFINED board_qualifiers_secure)\n    if(DEFINED BOARD_REVISION)\n      set(board_target_secure \"${BOARD}@${BOARD_REVISION}/${board_qualifiers_secure}\")\n    else()\n      set(board_target_secure \"${BOARD}/${board_qualifiers_secure}\")\n    endif()\n  endif()\n\n  set(split_board_qualifiers)\n  set(target_cpucluster)\n  set(target_variant)\n  set(target_length)\n\n  if(SB_CONFIG_BOOTLOADER_MCUBOOT)\n    if(SB_CONFIG_PARTITION_MANAGER)\n      set_target_properties(mcuboot PROPERTIES BUILD_ONLY true)\n\n      if(DEFINED board_qualifiers_secure)\n        if(SB_CONFIG_MCUBOOT_USE_ALL_AVAILABLE_RAM)\n          set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_USE_ALL_AVAILABLE_RAM y)\n          set_config_bool(mcuboot CONFIG_MCUBOOT_USE_ALL_AVAILABLE_RAM y)\n          set_config_bool(mcuboot CONFIG_MCUBOOT_NRF_CLEANUP_NONSECURE_RAM y)\n        else()\n          set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_USE_ALL_AVAILABLE_RAM n)\n          set_config_bool(mcuboot CONFIG_MCUBOOT_USE_ALL_AVAILABLE_RAM n)\n        endif()\n      endif()\n    endif()\n\n    math(EXPR mcuboot_total_images \"${SB_CONFIG_MCUBOOT_UPDATEABLE_IMAGES} + ${SB_CONFIG_MCUBOOT_ADDITIONAL_UPDATEABLE_IMAGES}\")\n    set_config_int(mcuboot CONFIG_UPDATEABLE_IMAGE_NUMBER ${mcuboot_total_images})\n\n    if(SB_CONFIG_MCUBOOT_APP_SYNC_UPDATEABLE_IMAGES)\n      set_config_int(${DEFAULT_IMAGE} CONFIG_UPDATEABLE_IMAGE_NUMBER ${SB_CONFIG_MCUBOOT_UPDATEABLE_IMAGES})\n    endif()\n\n    \n\n```\n\n----------------------------------------\n\nTITLE: Enabling Systick Node in Device Tree Overlay\nDESCRIPTION: Device tree overlay file to enable the systick node as a workaround for SPM build failures on certain boards. Used when CONFIG_CORTEX_M_SYSTICK is enabled but systick node is disabled in devicetree.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_69\n\nLANGUAGE: devicetree\nCODE:\n```\n&systick {\n  status = \"okay\";\n};\n```\n\n----------------------------------------\n\nTITLE: Programming BICR with nRF Util\nDESCRIPTION: Command to program the Board Information Configuration Registers using nRF Util\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_gs.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --options chip_erase_mode=ERASE_NONE --firmware bicr.hex --core Application --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Nordic SDK Application\nDESCRIPTION: This snippet adds the main source file 'main.c' from the src directory to the application's build process. It ensures that the main functionality of the modem callbacks is compiled and linked when building the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_callbacks/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Getting Reduced Mobility Mode with nRF Modem AT Commands in C\nDESCRIPTION: Demonstrates how to retrieve the reduced mobility mode using nRF Modem AT commands, replacing the deprecated lte_lc_reduced_mobility_get function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_16\n\nLANGUAGE: C\nCODE:\n```\n#include <nrf_modem_at.h>\n\nuint16_t mode;\n\nret = nrf_modem_at_scanf(\"AT%REDMOB?\", \"%%REDMOB: %hu\", &mode);\nif (ret != 1) {\n   /* Handle failure. */\n} else {\n   /* Handle success. */\n}\n```\n\n----------------------------------------\n\nTITLE: Static Partition Manager Layout for nRF5340\nDESCRIPTION: Example YAML configuration for the static Partition Manager layout on nRF5340, defining boot and slot partitions for image compression.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_image_compression.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: ../../../../samples/nrf_compress/mcuboot_update/pm_static_nrf5340dk_nrf5340_cpuapp.yml\n     :language: yaml\n```\n\n----------------------------------------\n\nTITLE: Set xyL Client Instance\nDESCRIPTION: This shell command selects a specific Light xyL Client model instance on the device by its element index. Subsequent message sending will use this selected instance. If no instance is selected, the first one found will be used by default.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl instance set <ElemIdx>\n\tSelect the Light xyL Client model instantiated on the specified element ID.\n\tThis instance will be used in message sending.\n\tIf no model instance is selected, the first model instance found on the device will be used by default.\n\n\t* ``ElemIdx`` - Element index where the model instance is found.\n```\n\n----------------------------------------\n\nTITLE: Including Downloader Header\nDESCRIPTION: Code snippet showing how to include the new Downloader library header file, replacing the deprecated Download Client header.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_3.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#include <net/downloader.h>\n```\n\n----------------------------------------\n\nTITLE: Writing Binding Table for Thermostat and Temperature Sensor\nDESCRIPTION: Command to write a binding table to the thermostat, informing the device about the temperature sensor endpoint using CHIP Tool\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/thermostat/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nchip-tool binding write binding '[{\"fabricIndex\": 1, \"node\": <temperature_sensor_node_ID>, \"endpoint\": <temperature_sensor_endpoint_ID>, \"cluster\": 1026}]' <thermostat_node_ID> 1\n```\n\n----------------------------------------\n\nTITLE: Modem Reset Command\nDESCRIPTION: The #XMODEMRESET command resets the modem while keeping SLM running. Sets modem to minimal function mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/Generic_AT_commands.rst#2025-04-21_snippet_5\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XMODEMRESET\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library in CMake\nDESCRIPTION: This CMake configuration snippet sets up the inclusion of various suit-related source files into the Zephyr project. It conditionally includes and links source files and libraries based on predefined configuration options. Dependencies such as 'CONFIG_SUIT_PROCESSOR' and 'CONFIG_SUIT_STREAM_SOURCE_IPC' are important for conditional operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/suit_service/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\\n\\nzephyr_library_sources(suit_service.c)\\nzephyr_library_sources(suit_update.c)\\nzephyr_library_sources(suit_mci.c)\\nzephyr_library_sources(suit_invoke.c)\\nzephyr_library_sources_ifdef(CONFIG_SUIT_PROCESSOR suit_auth.c)\\nzephyr_library_sources_ifdef(CONFIG_SUIT_MANIFEST_VARIABLES suit_mfst_var.c)\\nzephyr_library_sources_ifdef(CONFIG_SUIT_IPUC suit_ipuc.c)\\n\\nzephyr_library_link_libraries(suit_utils)\\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_MANIFEST_VARIABLES suit_manifest_variables)\\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_IPUC suit_ipuc)\\n\\nif(CONFIG_SUIT_STREAM_SOURCE_IPC)\\n  zephyr_library_link_libraries(suit_stream_sources_interface)\\n  zephyr_library_link_libraries(suit_stream_sinks_interface)\\nendif()\\n\\ngenerate_and_add_cbor_files(suit_service.cddl zcbor_generated\\n  suit_req\\n  suit_rsp\\n  suit_nfy\\n)\n```\n\n----------------------------------------\n\nTITLE: Adding sources based on CONFIG_BT_FAST_PAIR_FMDN_AUTH\nDESCRIPTION: This conditional block adds the 'auth.c' source file to the 'fmdn' library if the Kconfig option 'CONFIG_BT_FAST_PAIR_FMDN_AUTH' is enabled. The source is added as a PRIVATE source, meaning it's not visible to other libraries linking against 'fmdn'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(CONFIG_BT_FAST_PAIR_FMDN_AUTH)\n  target_sources(fmdn PRIVATE auth.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Adding sources based on CONFIG_BT_FAST_PAIR_FMDN_CLOCK\nDESCRIPTION: This conditional block adds the 'clock.c' source file to the 'fmdn' library if the Kconfig option 'CONFIG_BT_FAST_PAIR_FMDN_CLOCK' is enabled. The source is added as a PRIVATE source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(CONFIG_BT_FAST_PAIR_FMDN_CLOCK)\n  target_sources(fmdn PRIVATE clock.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Getting All Scene Client Model Instances\nDESCRIPTION: This command prints all instances of the Scene Client model present on the device. It is useful for identifying available model instances before performing operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scene_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models scene instance get-all\n```\n\n----------------------------------------\n\nTITLE: Setting Retransmits - Shell Command\nDESCRIPTION: Shell command for setting the number of retransmissions for a Bluetooth LE Audio broadcast subgroup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nnac rtn 2 0 0\n```\n\n----------------------------------------\n\nTITLE: Ringing Volume Level Enumeration in Fast Pair FMDN\nDESCRIPTION: Enumeration values for different volume levels available in Fast Pair FMDN when the volume feature is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nBT_FAST_PAIR_FMDN_RING_VOLUME_LOW\nBT_FAST_PAIR_FMDN_RING_VOLUME_MEDIUM\nBT_FAST_PAIR_FMDN_RING_VOLUME_HIGH\nBT_FAST_PAIR_FMDN_RING_VOLUME_DEFAULT\n```\n\n----------------------------------------\n\nTITLE: Disabling Regulatory Domain and Setting TX Power\nDESCRIPTION: Commands to bypass regulatory domain restrictions and manually set the transmit power. This allows setting power levels outside the regulatory domain limits, which should only be done in controlled test environments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test bypass_reg_domain 1\nuart:~$ wifi_radio_test tx_power <X>\n```\n\n----------------------------------------\n\nTITLE: Configuring PSA Crypto Alternative Implementation\nDESCRIPTION: Sets up the PSA (Platform Security Architecture) based cryptography implementation when CONFIG_HOSTAP_CRYPTO_ALT_PSA is defined. Includes necessary preprocessor definitions, include directories, and source files for PSA-based crypto.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/hostap_crypto/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED CONFIG_HOSTAP_CRYPTO_ALT_PSA)\n  # Source code still uses the original symbol\n  zephyr_compile_definitions(\n    CONFIG_WIFI_NM_WPA_SUPPLICANT_CRYPTO_MBEDTLS_PSA\n  )\n\n  zephyr_include_directories(\n    ${HOSTAP_BASE}/port/mbedtls\n  )\n\n  zephyr_library_sources(\n    ${HOSTAP_SRC_BASE}/crypto/aes-wrap.c\n    ${HOSTAP_SRC_BASE}/crypto/aes-unwrap.c\n    ${HOSTAP_SRC_BASE}/crypto/aes-internal-dec.c\n    ${HOSTAP_SRC_BASE}/crypto/aes-internal.c\n    ${HOSTAP_SRC_BASE}/crypto/aes-internal-enc.c\n    ${HOSTAP_SRC_BASE}/crypto/rc4.c\n    ${HOSTAP_SRC_BASE}/crypto/crypto_mbedtls_alt.c\n    ${HOSTAP_SRC_BASE}/crypto/sha256-kdf.c\n    ${HOSTAP_BASE}/port/mbedtls/supp_psa_api.c\n    ${HOSTAP_SRC_BASE}/crypto/tls_none.c\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Notification Attribute Response Example\nDESCRIPTION: Example UART output showing the received notification attributes including title and message.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ancs_client/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nTitle: nRF\nMessage: 52\n```\n\n----------------------------------------\n\nTITLE: Including Source Files Based on Bluetooth Provider Configuration in Zephyr\nDESCRIPTION: This set of configuration directives conditionally includes various C source files based on the enabled Bluetooth advertising provider configuration in a Zephyr project. These include 'fast_pair.c', 'flags.c', 'gap_appearance.c', 'device_name.c', 'swift_pair.c', and 'tx_power.c'. Each directive relies on a specific CONFIG_BT_ADV_PROV_* flag to determine whether to include the associated source file. Proper configuration of these flags is essential for customization and implementation of desired Bluetooth features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/adv_prov/providers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Zephyr Configuration\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_ADV_PROV_FAST_PAIR\tfast_pair.c)\nzephyr_sources_ifdef(CONFIG_BT_ADV_PROV_FLAGS\tflags.c)\nzephyr_sources_ifdef(CONFIG_BT_ADV_PROV_GAP_APPEARANCE\tgap_appearance.c)\nzephyr_sources_ifdef(CONFIG_BT_ADV_PROV_DEVICE_NAME\tdevice_name.c)\nzephyr_sources_ifdef(CONFIG_BT_ADV_PROV_SWIFT_PAIR\tswift_pair.c)\nzephyr_sources_ifdef(CONFIG_BT_ADV_PROV_TX_POWER\ttx_power.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for ICMP Ping Application in CMake\nDESCRIPTION: Sets the include directory for the application to the current directory, allowing access to local header files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/ping/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Adding Matter Kconfig Options in nRF Connect SDK\nDESCRIPTION: Configuration options for Matter samples, including ZAP file path specification, LED control, and device-specific settings\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_3\n\nLANGUAGE: kconfig\nCODE:\n```\nconfig CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH\n    string \"ZAP files location\"\n    default \"src/default_zap\"\n```\n\nLANGUAGE: kconfig\nCODE:\n```\nconfig CONFIG_NCS_SAMPLE_MATTER_LEDS\n    bool \"Enable Matter sample LEDs\"\n    default y\n```\n\n----------------------------------------\n\nTITLE: Using Distance Measurement Client Shell Commands\nDESCRIPTION: Shell commands to interact with the Distance Measurement Client model, including listing instances, selecting models, configuring parameters, starting measurements, and retrieving results.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/vnd/dm_cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dm instance get-all\nmesh models dm instance set <ElemIdx>\nmesh models dm cfg [<TTL> <Timeout(100ms steps)> <Delay(µs)>]\nmesh models dm start <Mode> <Addr> [<ReuseTransaction> [<TTL> <Timeout(100ms steps)> <Delay(µs)>]]\nmesh models dm result-get <EntryCnt>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Sfloat Project\nDESCRIPTION: Sets up CMake build configuration including minimum version requirement, Zephyr package dependency, project name, and source file compilation. Requires CMake 3.20.0 or higher and Zephyr RTOS framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/sfloat/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(sfloat)\n\nFILE(GLOB app_sources src/main.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Building with Memfault Overlay in West\nDESCRIPTION: West build command to include a Memfault configuration overlay file for an nRF9160 DK project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/memfault.rst#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nwest build -b nrf9160dk/nrf9160/ns -- -DEXTRA_CONF_FILE=overlay-memfault.conf\n```\n\n----------------------------------------\n\nTITLE: Checking out Specific Release with west\nDESCRIPTION: Checks out a specific release of the nRF Connect SDK using the west tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nwest init -m https\\://github.com/nrfconnect/sdk-nrf --mr |release| |release|\n```\n\n----------------------------------------\n\nTITLE: Configuring LwM2M Client Utilities Build in CMake\nDESCRIPTION: This CMake configuration sets up the LwM2M client utilities library for Nordic SDK. It conditionally includes various source files based on configuration options for different LwM2M objects and features, such as firmware updates, connection monitoring, device management, and location services.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/lwm2m_client_utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_FIRMWARE_UPDATE_OBJ_SUPPORT lwm2m/lwm2m_firmware.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_CONN_MON_OBJ_SUPPORT lwm2m/lwm2m_connmon.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_DEVICE_OBJ_SUPPORT lwm2m/lwm2m_device.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_SECURITY_OBJ_SUPPORT lwm2m/lwm2m_security.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_SIGNAL_MEAS_INFO_OBJ_SUPPORT\n\t\t\t     lwm2m/ecid_signal_meas_info.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_CELL_CONN_OBJ_SUPPORT\n\t\t\t     lwm2m/lwm2m_cellconn_obj.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_GROUND_FIX_OBJ_SUPPORT\n\t\t\t     lwm2m/ground_fix_obj.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_GNSS_ASSIST_OBJ_SUPPORT\n\t\t\t     lwm2m/gnss_assistance_obj.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_LOCATION_ASSISTANCE\n\t\t\t     location/location_assistance.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_LOCATION_ASSISTANCE\n\t\t\t     location/location_retry_timer.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_RAI\n\t\t\t     lwm2m/lwm2m_rai.c)\nzephyr_library_sources(lwm2m/lwm2m_lte_notification.c)\nzephyr_library_sources(lwm2m/lwm2m_utils_con_management.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_ADV_FIRMWARE_UPDATE_OBJ_SUPPORT lwm2m/lwm2m_adv_firmware.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_WIFI_AP_SCANNER location/location_wifi_ap_scanner.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_VISIBLE_WIFI_AP_OBJ_SUPPORT lwm2m/visible_wifi_ap.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_CLIENT_UTILS_LTE_CONNEVAL lwm2m/lwm2m_conneval.c)\nzephyr_library_sources_ifdef(CONFIG_LWM2M_LOCATION_OBJ_SUPPORT lwm2m_obj_location_optional.c)\nzephyr_include_directories(lwm2m/include)\n\n# For strnlen()\nzephyr_library_compile_definitions(_POSIX_C_SOURCE=200809L)\n```\n\n----------------------------------------\n\nTITLE: Building Wi-Fi with BLE TX Power Configuration for nRF7002 DK\nDESCRIPTION: West build command for nrf7002dk with Wi-Fi and Bluetooth LE TX power set to +3 dBm using the hci_ipc configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/transmission_power.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -Dhci_ipc_CONFIG_BT_CTLR_TX_PWR_PLUS_3=y\n```\n\n----------------------------------------\n\nTITLE: Programming nRF5340 Network Core via Debug Probe\nDESCRIPTION: Command to program the network core binary to the nRF5340 network core using an external debug probe. Requires J-Link serial number and uses jlink trait.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy91x/thingy91x_updating_fw_programmer.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --firmware <name_of_network_core_binary.hex> --serial-number <J-Link Serial number> --traits jlink --x-family nrf53 --core Network\n```\n\n----------------------------------------\n\nTITLE: Configuring FEM API Availability Without Physical Module\nDESCRIPTION: Enables the MPSL FEM API when no physical RF Front-End module is connected, ensuring API compatibility\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_mpsl_fem_only.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MPSL_FEM_API_AVAILABLE=y\n```\n\n----------------------------------------\n\nTITLE: Removing Disabled Log Module Configuration in C\nDESCRIPTION: This code snippet shows the line to remove from the chip_project_config.h header file to enable logging for the AppServer module in the Matter Bridge application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n#define CHIP_CONFIG_LOG_MODULE_AppServer_PROGRESS 0\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet adds an include directory to the testbinary target. This allows the compiler to find header files located in the specified directory during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/plat_devconfig/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/platform/include)\n```\n\n----------------------------------------\n\nTITLE: Displaying HID Report Rate Statistics over USB CDC ACM\nDESCRIPTION: Example output showing the HID report rate statistics with timestamp printed by the QoS module when statistics printout is enabled. The rate is displayed as the number of packets per time interval.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/ble_qos.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n[05399493]Rate:0455\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Shell Sources with Conditions\nDESCRIPTION: The code snippet demonstrates the conditional inclusion of shell source files for a Zephyr project based on specific configuration parameters. Dependencies include the CONFIG_SHELL_BT_NUS, CONFIG_SHELL_IPC, and CONFIG_SHELL_NFC configurations in the Zephyr build system. The inputs are conditional variables that determine which shell sources are included. There are no outputs, but it influences the build process based on configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/shell/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_SHELL_BT_NUS shell_bt_nus.c)\nzephyr_sources_ifdef(CONFIG_SHELL_IPC shell_ipc.c)\nzephyr_sources_ifdef(CONFIG_SHELL_NFC shell_nfc.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Transport Latency - Shell Command\nDESCRIPTION: Shell command for setting the maximum transport latency in milliseconds for a Bluetooth LE Audio broadcast subgroup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_23\n\nLANGUAGE: console\nCODE:\n```\nnac mtl 10 0 0\n```\n\n----------------------------------------\n\nTITLE: Conditional MPSL Component Build Configuration in CMake\nDESCRIPTION: CMake script that conditionally includes different MPSL component subdirectories based on configuration flags. Controls building of initialization code, FEM support, power management, clock control, and debug features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_MPSL AND NOT CONFIG_MPSL_FEM_ONLY)\n  add_subdirectory(init)\nendif()\n\nif(CONFIG_MPSL_FEM OR CONFIG_MPSL_FEM_PIN_FORWARDER OR CONFIG_MPSL_FEM_API_AVAILABLE)\n  add_subdirectory(fem)\nendif()\n\nadd_subdirectory(cx)\n\nif(CONFIG_MPSL_USE_ZEPHYR_PM)\n  add_subdirectory(pm)\nendif()\n\nif(CONFIG_MPSL_USE_EXTERNAL_CLOCK_CONTROL)\n  add_subdirectory(clock_ctrl)\nendif()\n\nadd_subdirectory_ifdef(CONFIG_MPSL_PIN_DEBUG pin_debug)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Migration Documentation Header\nDESCRIPTION: ReStructuredText formatting for the migration guide header and version compatibility information\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _migration_nrf54h20_to_2.7:\\n\\nMigration notes for |NCS| v2.7.0 and the nRF54H20 DK\\n####################################################\n```\n\n----------------------------------------\n\nTITLE: Configuring Access for Manufacturer Property Server Property (Without Acknowledgment)\nDESCRIPTION: Sets appropriate access control flags on a property for the Manufacturer Property Server without seeking acknowledgment, streamlining scenarios where immediate confirmation isn’t required. It requires 'ID' and 'Access'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_prop_cli.rst#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmesh models prop mfr-prop-set-unack <ID> <Access>\n```\n\n----------------------------------------\n\nTITLE: Enabling FOTA with CoAP in Kconfig\nDESCRIPTION: The sample periodically checks for pending FOTA jobs. The sample performs the FOTA update when received.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_35\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_COAP_FOTA\n```\n\n----------------------------------------\n\nTITLE: Setting Client ID at Runtime - C\nDESCRIPTION: Illustrates how to set the AWS IoT client ID at runtime using the aws_iot_config structure during the connection process. The client ID must be a null-terminated string.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n// Example code to set client_id in aws_iot_config structure before calling aws_iot_connect\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO NFCT Test Project Build with CMake\nDESCRIPTION: Sets up the build configuration for a GPIO NFCT test project. Requires CMake 3.20.0 or higher and the Zephyr SDK. Includes source files from the nRF Connect SDK test directory and adds them to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/gpio/gpio_nfct/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(gpio_nfct)\n\nFILE(GLOB app_sources ${ZEPHYR_NRF_MODULE_DIR}/tests/drivers/gpio/gpio_more_loops/src/main.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Reading Wi-Fi Chip Temperature\nDESCRIPTION: Command to read the current temperature of the Wi-Fi chip in degrees Celsius, useful for monitoring thermal conditions during testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test get_temperature\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Bluetooth Mesh Time Model Test\nDESCRIPTION: Sets up a CMake project for testing Bluetooth Mesh Time Model. It defines the project, includes necessary directories, specifies source files, and sets compile options for the Bluetooth Mesh implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/time_model/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bt_mesh_time_model_test)\n\ntarget_include_directories(app PUBLIC\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh\n  ${ZEPHYR_BASE}/subsys/bluetooth\n  ../common\n  )\n\nFILE(GLOB app_sources src/*.c)\n\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/time_srv.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/time.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/time_util.c\n  )\n\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_BT_MESH_MODEL_KEY_COUNT=5\n  -DCONFIG_BT_MESH_MODEL_GROUP_COUNT=5\n  -DCONFIG_BT_LOG_LEVEL=0\n  -DCONFIG_BT_MESH_TIME_SRV=1\n  -DCONFIG_BT_MESH_TIME_SRV_CLOCK_ACCURACY=500\n  -DCONFIG_BT_MESH_TIME_MESH_HOP_UNCERTAINTY=30\n  -DCONFIG_BT_MESH_USES_MBEDTLS_PSA=1\n  )\n\nzephyr_ld_options(\n    ${LINKERFLAGPREFIX},--allow-multiple-definition\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing Required TFM Components for Tests in CMake\nDESCRIPTION: Copies necessary t_cose library and initial attestation headers required by the TFM regression tests. These components are needed for proper compilation and execution of the test suite.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_regression_test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Install t_cose\n\nfile(COPY   ${ZEPHYR_TRUSTED_FIRMWARE_M_MODULE_DIR}/lib/ext/t_cose\n     DESTINATION ${TFM_BINARY_DIR}/api_ns)\n\n# Initial attestation headers are needed for the tests\nset(TFM_SECURE_FW_SRC_DIR ${ZEPHYR_TRUSTED_FIRMWARE_M_MODULE_DIR}/secure_fw)\nfile(COPY           ${TFM_SECURE_FW_SRC_DIR}/partitions/initial_attestation\n     DESTINATION    ${TFM_BINARY_DIR}/api_ns\n     FILES_MATCHING PATTERN \"*.h\")\n\nfile(COPY           ${TFM_SECURE_FW_SRC_DIR}/spm/include/boot/tfm_boot_status.h\n     DESTINATION    ${TFM_BINARY_DIR}/api_ns/initial_attestation)\n```\n\n----------------------------------------\n\nTITLE: Generating Composition Data Hash - Shell Command\nDESCRIPTION: This command generates a hash of the added Composition Data using the previously encoded parameters. The output hash is used when encoding the metadata.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfu metadata comp-hash-get\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Impulse Test Environment in CMake\nDESCRIPTION: Sets up the CMake environment for Edge Impulse testing, including version requirements, package dependencies, and custom zip file generation. Validates the Edge Impulse URI configuration and sets up proper file paths and build targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/edge_impulse/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2021 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nset(EI_URI ${CONFIG_EDGE_IMPULSE_URI})\n\nif(${EI_URI} MATCHES \"^[a-z]+://\")\n   message(FATAL_ERROR \"Unit test must generate the zip file with mocked Edge Impulse library\"\n                       \" on local hard drive.\")\nendif()\n\nstring(CONFIGURE ${EI_URI} EI_URI)\nif(NOT IS_ABSOLUTE ${EI_URI})\n  set(EI_URI ${APPLICATION_SOURCE_DIR}/${EI_URI})\nendif()\n\nadd_custom_target(create_zip COMMAND\n    ${CMAKE_COMMAND} -E tar \"cf\"\n    ${EI_URI} --format=zip\n    \"./\"\n    WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/src/edge_impulse_zip/\")\n\n# Ensure that zip will be packed before Edge Impulse archive is unzipped.\nadd_dependencies(edge_impulse_project create_zip)\n\nproject(\"Edge Impulse test\")\n\ntarget_sources(app PRIVATE src/main.cpp)\n# Test uses ei_test_params.h file from edge_impuse_zip directory to verify if\n# ei_wrapper properly forwards the data between application and EI library.\ntarget_include_directories(app PRIVATE src/edge_impulse_zip/)\n```\n\n----------------------------------------\n\nTITLE: Set xyL State (Unacknowledged)\nDESCRIPTION: This shell command sets the Light xyL state value of the bound server without requesting a response.  It takes the lightness, x, and y values as input, and optionally a transition time and delay.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl set-unack <Light> <X> <Y> [TransTime(ms) [Delay(ms)]]\n\tSet the Light xyL state value without requesting a response.\n\n\t* ``Light`` - Lightness level to set.\n\t* ``X`` - x level to set.\n\t* ``Y`` - y level to set.\n\t* ``TransTime`` - If present, defines the transition time in the message in milliseconds.\n\t* ``Delay`` - If present, defines the delay in the message in milliseconds.\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Jobs Library Build in CMake\nDESCRIPTION: Creates and configures a Zephyr library target for AWS Jobs functionality. Specifies the source files to be compiled into the library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/aws_jobs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tsrc/aws_jobs.c\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Sources for Getopt Library\nDESCRIPTION: This snippet lists the source files that will be compiled into the Getopt library, including 'getopt.c' and 'getopt_long.c', which provide command-line parsing capabilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/freebsd-getopt/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(\n  getopt.c\n  getopt_long.c\n)\n```\n\n----------------------------------------\n\nTITLE: ASCII Regulatory Table for Wi-Fi Channel Power Levels\nDESCRIPTION: ASCII-formatted table showing Wi-Fi channel power configurations by country. The table maps countries to their maximum allowed power levels (in dBm) across different Wi-Fi channels, with special regulatory requirements marked by asterisks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_support.rst#2025-04-21_snippet_4\n\nLANGUAGE: ascii\nCODE:\n```\nn| Country name                           | CH/Code      | 1            | 2            | 3            | 4            | 5            | 6            | 7            | 8             | 9            | 10           | 11           | 12           | 13           | 14  | 36           | 40           | 44           | 48           | 52           | 56           | 60           | 64           | 100          | 104          | 108          | 112          | 116          | 120          | 124          | 128          | 132          | 136          | 140          | 144          | 149          | 153          | 157          | 161          | 165          | 169          | 173          |177           |\nn```\n\n----------------------------------------\n\nTITLE: Complete CMock Integration Handler for Zephyr Headers\nDESCRIPTION: Primary interface for handling CMock integration with headers. This function prepares headers, generates mocks, and sets up linker wrapping. It supports path offsets for handling headers with directories and includes options for excluding functions and words from mocking.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/unity/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(cmock_handle header_file)\n  cmake_parse_arguments(CMOCK \"\" \"\" \"EXCLUDE;FUNC_EXCLUDE;WORD_EXCLUDE\" ${ARGN})\n  get_property(CMOCK_DIR GLOBAL PROPERTY CMOCK_DIR)\n  set(CMOCK_PRODUCTS_DIR ${APPLICATION_BINARY_DIR}/mocks)\n\n  if (DEFINED CMOCK_EXCLUDE)\n    message(DEPRECATION \" cmock_handle(EXCLUDE) is deprecated, use FUNC_EXCLUDE instead\")\n    list(APPEND CMOCK_FUNC_EXCLUDE ${CMOCK_EXCLUDE})\n  endif()\n\n  #get optional offset macro\n  set (extra_macro_args ${CMOCK_UNPARSED_ARGUMENTS})\n  list(LENGTH extra_macro_args num_extra_args)\n  if (NOT ${num_extra_args} EQUAL 0)\n    list(GET extra_macro_args 0 optional_offset)\n    set(dst_path \"${CMOCK_PRODUCTS_DIR}/${optional_offset}\")\n  else()\n    set(dst_path \"${CMOCK_PRODUCTS_DIR}\")\n  endif()\n\n  file(MAKE_DIRECTORY \"${dst_path}/internal\")\n\n  get_filename_component(header_name \"${header_file}\" NAME)\n  set(mod_header_path \"${dst_path}/${header_name}\")\n  set(wrap_header \"${dst_path}/internal/${header_name}\")\n\n  cmock_headers_prepare(${header_file} ${mod_header_path} ${wrap_header})\n  cmock_generate(${wrap_header} ${dst_path} FUNC_EXCLUDE ${CMOCK_FUNC_EXCLUDE} WORD_EXCLUDE ${CMOCK_WORD_EXCLUDE})\n\n  cmock_linker_wrap_trick(${mod_header_path} FUNC_EXCLUDE ${CMOCK_FUNC_EXCLUDE})\n\n  target_include_directories(app BEFORE PRIVATE ${CMOCK_PRODUCTS_DIR})\n  message(STATUS \"Generating cmock for header ${header_file}\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Pins for CAF Buttons Module in C\nDESCRIPTION: Example configuration file showing how to define GPIO pins for button matrix rows and columns. Demonstrates pin setup with port and pin numbers for both matrix columns and rows.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/buttons.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <caf/gpio_pins.h>\n\nstatic const struct gpio_pin col[] = {\n\t{ .port = 0, .pin = 31 },\n\t{ .port = 0, .pin = 24 },\n};\n\nstatic const struct gpio_pin row[] = {\n\t{ .port = 0, .pin = 9  },\n\t{ .port = 0, .pin = 8  },\n\t{ .port = 1, .pin = 15 },\n\t{ .port = 1, .pin = 14 },\n};\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Sample Output Log\nDESCRIPTION: Console output showing the HTTPS client sample execution flow over Wi-Fi connection with IPv4.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/https_client/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nHTTPS client sample started\nBringing network interface up\nProvisioning certificate\nConnecting to the network\n<add your wifi configuration using shell here if not pre-provisioned>\n<inf> wifi_mgmt_ext: Connection requested\nNetwork connectivity established and IP address assigned\nLooking up example.com\nResolved 93.184.215.14 (AF_INET)\nConnecting to example.com:443\nSent 61 bytes\nReceived 377 bytes\n\n>        HTTP/1.1 200 OK\n\nFinished, closing socket.\nNetwork connectivity lost\nDisconnected from the network\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zephyr Library Sources with Conditional Compilation in CMake\nDESCRIPTION: This CMake snippet specifies the library source files to be compiled based on the CONFIG_BT_CGMS configuration option. It conditionally includes three source files (cgms.c, cgms_socp.c, cgms_racp.c) pertinent to the Bluetooth CGMS functionality. The use of zephyr_library_sources_ifdef ensures that these files are only included when the CONFIG_BT_CGMS flag is set, allowing for modular compilation based on project requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/cgms/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(\\n  CONFIG_BT_CGMS\\n  cgms.c\\n  cgms_socp.c\\n  cgms_racp.c)\n```\n\n----------------------------------------\n\nTITLE: Example Provisioning Command\nDESCRIPTION: This command provides an example of how to provision the nRF54L15DK board target with a specific key file for the ed25519 algorithm. It exemplifies the use of placeholders for dynamic parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwest ncs-provision upload -s nrf54l15 -k sysbuild/configuration/nrf54l15dk_nrf54l15_cpuapp/boot_signature_key_file_ed25519.pem --keyname UROT_PUBKEY\n```\n\n----------------------------------------\n\nTITLE: Listing Connected nRF Devices\nDESCRIPTION: Command to list connected nRF devices and their associated COM ports.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/test_setup.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ nrfutil device list\n```\n\n----------------------------------------\n\nTITLE: Listing Available Azure Locations\nDESCRIPTION: Lists available Azure locations for creating resources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\naz account list-locations -o table\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for GNSS Application in CMake\nDESCRIPTION: Adds the current directory to the include path for the 'app' target, allowing source files to access header files in the same directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/gnss/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Configuring Download Client Project in CMake\nDESCRIPTION: Sets up the Download Client project, including source files, include directories, and library configurations. It also defines compile options and definitions for the download client library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/download_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(download_client)\n\nFILE(GLOB app_sources src/mock/*.c src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntarget_include_directories(app\n        PRIVATE\n        ${ZEPHYR_NRF_MODULE_DIR}/include/net/\n        ${ZEPHYR_BASE}/subsys/net/ip/\n        ${ZEPHYR_BASE}/subsys/net/lib/sockets\n        src/\n        )\n\nadd_library(download_client STATIC\n        ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/download_client/src/download_client.c\n        ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/download_client/src/parse.c\n        )\ntarget_include_directories(download_client\n        PRIVATE\n        ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/download_client/include\n        )\n\ntarget_link_libraries(download_client PUBLIC zephyr_interface)\ntarget_link_libraries(app PRIVATE download_client)\n\nzephyr_append_cmake_library(download_client)\n\nzephyr_compile_options(\n        -DCONFIG_DOWNLOAD_CLIENT_BUF_SIZE=0x40\n        -DCONFIG_DOWNLOAD_CLIENT_STACK_SIZE=2048\n)\n\ntarget_compile_definitions(\n        download_client PRIVATE\n        -DCONFIG_COAP=1\n        -DCONFIG_DOWNLOAD_CLIENT_LOG_LEVEL=4\n        -DCONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE=256\n        -DCONFIG_DOWNLOAD_CLIENT_MAX_HOSTNAME_SIZE=32\n        -DCONFIG_DOWNLOAD_CLIENT_MAX_FILENAME_SIZE=64\n        -DCONFIG_DOWNLOAD_CLIENT_TCP_SOCK_TIMEO_MS=0\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories with Conditions in CMake\nDESCRIPTION: This CMake snippet adds subdirectories to a project using conditional compilation flags. It uses custom CMake functions like 'add_subdirectory_ifdef' to include specific submodules based on whether certain configuration options are defined. These options are typically defined in project configuration settings (e.g., CONFIG_SUIT_*). Each directory corresponds to a module or functionality area within a Nordic Semiconductor project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(app_tools)\nadd_subdirectory_ifdef(CONFIG_SUIT plat_err)\nadd_subdirectory_ifdef(CONFIG_SUIT memory_layout)\nadd_subdirectory_ifdef(CONFIG_SUIT_ORCHESTRATOR orchestrator)\nadd_subdirectory_ifdef(CONFIG_SUIT_PLATFORM platform)\nadd_subdirectory_ifdef(CONFIG_SUIT_MEMPTR_STORAGE memptr_storage)\nadd_subdirectory_ifdef(CONFIG_SUIT_STORAGE storage)\nadd_subdirectory_ifdef(CONFIG_SUIT_STREAM stream)\nadd_subdirectory_ifdef(CONFIG_SUIT_MCI mci)\nadd_subdirectory_ifdef(CONFIG_SUIT_METADATA metadata)\nadd_subdirectory_ifdef(CONFIG_SUIT_UTILS utils)\nadd_subdirectory_ifdef(CONFIG_SUIT_CACHE cache)\nadd_subdirectory_ifdef(CONFIG_SUIT_DFU orchestrator_app)\nadd_subdirectory_ifdef(CONFIG_SUIT_ENVELOPE_INFO envelope_info)\nadd_subdirectory_ifdef(CONFIG_SUIT_EXECUTION_MODE execution_mode)\nadd_subdirectory_ifdef(CONFIG_SUIT_VALIDATOR validator)\nadd_subdirectory_ifdef(CONFIG_SUIT_EVENTS events)\nadd_subdirectory_ifdef(CONFIG_SUIT_MANIFEST_VARIABLES manifest_variables)\nadd_subdirectory_ifdef(CONFIG_SUIT_IPUC ipuc)\n```\n\n----------------------------------------\n\nTITLE: Library Include Configuration\nDESCRIPTION: Sets up include directories for Edge Impulse library, including all necessary SDK components and third-party dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/edge_impulse/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(edge_impulse INTERFACE\n                           ${EDGE_IMPULSE_SOURCE_DIR}\n                           ${EDGE_IMPULSE_SOURCE_DIR}/tflite-model\n                           ${EDGE_IMPULSE_SOURCE_DIR}/model-parameters\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/third_party/ruy\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/third_party/gemmlowp\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/third_party/flatbuffers/include\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/third_party\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/tensorflow\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/dsp\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/classifier\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/anomaly\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/CMSIS/NN/Include\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/CMSIS/DSP/PrivateInclude\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/CMSIS/DSP/Include\n                           ${EDGE_IMPULSE_SOURCE_DIR}/edge-impulse-sdk/CMSIS/Core/Include\n)\n```\n\n----------------------------------------\n\nTITLE: Project Declaration and Source File Specification\nDESCRIPTION: This snippet declares the project name and specifies the source files that are part of the application. Only the main source file 'src/main.c' is included as a private source for the target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_exmif/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(idle_exmif)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Keys on nRF91 Device\nDESCRIPTION: Command to list the installed keys on an nRF91 series device using the nrfcredstore tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnrfcredstore <serial port> list\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Application\nDESCRIPTION: This snippet adds the necessary source files to the application target for the I2C target API test. It specifies the common and main source files required for the application build. The paths to these source files should be adjusted according to the Zephyr project's structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/i2c/i2c_target_api/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/tests/drivers/i2c/i2c_target_api/common/i2c_virtual.c)\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/tests/drivers/i2c/i2c_target_api/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Programming SDFW and SCFW on nRF54H20 DK\nDESCRIPTION: Command to program the Secure Domain Firmware (SDFW) and System Controller Firmware (SCFW) using nrfutil. Requires the SoC binaries bundle and the device serial number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-provision-nrf54h --firmware <path-to_bundle_zip_file> --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name and Including CMake Template\nDESCRIPTION: This snippet defines the project name as 'integration_test_suit_storage_nrf54h20' and includes a CMake template for test configuration. This provides base settings and structures for the test project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/storage_nrf54h20/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(integration_test_suit_storage_nrf54h20)\ninclude(../cmake/test_template.cmake)\n```\n\n----------------------------------------\n\nTITLE: Building with nRF2220 EK Shield for nRF52840 DK\nDESCRIPTION: Command-line example showing how to build an application for nRF52840 Development Kit with the nRF2220 EK shield using west build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/2220ek_dev_guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 -- -DSHIELD=nrf2220ek\n```\n\n----------------------------------------\n\nTITLE: Include Directory Configuration\nDESCRIPTION: Sets up include directories for the application, including nRF Cloud libraries and test suite headers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/fota_common/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app\n\tPRIVATE\n\tsrc\n\t${NRF_SDK_DIR}/subsys/net/lib/nrf_cloud/include\n\t${NRF_SDK_DIR}/subsys/net/lib/nrf_cloud/src\n\t${ZEPHYR_BASE}/subsys/testsuite/include\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup for Zephyr Timer Tests\nDESCRIPTION: This snippet sets up a CMake project to compile and test timer functionalities within the Zephyr RTOS. It finds the Zephyr package, specifies the minimum CMake version, and includes the source files for the timer behavior tests. The `target_sources` command links the application's source files to the executable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/kernel/timer/timer_behavior/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(timer_behavior)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/kernel/timer/timer_behavior/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr RTOS Package\nDESCRIPTION: Locates the Zephyr RTOS package using environment variable hints, which is essential for building embedded projects in the nRF Connect SDK\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/manifest_variables/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: CMake Minimum Version Requirement\nDESCRIPTION: Defines the minimum CMake version required for building the project. Ensures compatibility with necessary features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_spim/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Enabling nrf_cracen Key Agreement Driver in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables the `nrf_security_drivers_cracen` driver for all supported key agreement algorithms. The Cracen driver offers an alternative software implementation of key agreement protocols.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_6\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_USE_CRACEN_KEY_AGREEMENT_DRIVER`\"\n```\n\n----------------------------------------\n\nTITLE: Installing West Globally with User Path Configuration\nDESCRIPTION: Commands to install west globally for the current user and add it to the PATH environment variable in the bash configuration file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npip3 install --user -U west\necho 'export PATH=~/.local/bin:\"$PATH\"' >> ~/.bashrc\nsource ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Configuration for nRF Connect SDK Project\nDESCRIPTION: This CMake snippet configures a basic nRF Connect SDK project by setting the minimum CMake version, finding the Zephyr package, configuring the project with no specific name, and setting up source files and include directories for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/fprotect/app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files\nDESCRIPTION: Specifies the source files to be compiled for the application. `src/main.c` is added as a private source file, meaning it's only used within the `app` target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_ppr/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Defining CC3XX Entropy Driver Documentation Structure in RST\nDESCRIPTION: RST code for defining the structure of the CC3XX entropy driver documentation, including a table of contents.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/entropy_cc3xx.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nCC3XX entropy driver\n####################\n\n.. contents::\n   :local:\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Pair Crypto Sources\nDESCRIPTION: This snippet conditionally adds source files to the Fast Pair crypto library based on configuration options for various cryptographic implementations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fp_crypto/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_named(fp_crypto)\n\nif(CONFIG_BT_FAST_PAIR_CRYPTO)\n  target_sources(fp_crypto PRIVATE fp_crypto_common.c)\nendif()\nif(CONFIG_BT_FAST_PAIR_CRYPTO_OBERON)\n  target_sources(fp_crypto PRIVATE fp_crypto_oberon.c)\n  target_link_libraries(fp_crypto PRIVATE nrfxlib_crypto)\nendif()\nif(CONFIG_BT_FAST_PAIR_CRYPTO_TINYCRYPT)\n  target_sources(fp_crypto PRIVATE fp_crypto_tinycrypt.c)\nendif()\nif(CONFIG_BT_FAST_PAIR_CRYPTO_PSA)\n  target_sources(fp_crypto PRIVATE fp_crypto_psa.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Calculating Light Level from Generic Level State\nDESCRIPTION: Demonstrates the relationship between Generic Level State and Light State in the Bluetooth Mesh Light Lightness Server model\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/lightness_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nLight (Actual) = Generic Level + 32768\n```\n\n----------------------------------------\n\nTITLE: SDFW Boot Steps Definitions\nDESCRIPTION: Constants defining the various boot steps in the Secure Domain Firmware boot process\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_debugging.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n#define BOOTSTATUS_STEP_START_GRTC 0x06\\n#define BOOTSTATUS_STEP_SDFW_UPDATE 0x30\\n#define BOOTSTATUS_STEP_BELLBOARD_CONFIG 0x4F\\n#define BOOTSTATUS_STEP_SUIT_INIT 0x6F\\n#define BOOTSTATUS_STEP_DOMAIN_ALLOCATE 0x8F\\n#define BOOTSTATUS_STEP_MEMORY_FINALIZE 0x91\\n#define BOOTSTATUS_STEP_TRACEHOST_INIT 0x93\\n#define BOOTSTATUS_STEP_CURRENT_LIMITED 0xA0\\n#define BOOTSTATUS_STEP_BICR_VALIDATE 0xA1\\n#define BOOTSTATUS_STEP_DOMAIN_BOOT 0xAF\\n#define BOOTSTATUS_STEP_ADAC 0xC0\\n#define BOOTSTATUS_STEP_SERVICES 0xCF\n```\n\n----------------------------------------\n\nTITLE: Enabling ANT Protocol Repository in NCS with West CLI\nDESCRIPTION: Command sequence to enable and fetch the private ANT protocol repository that is disabled by default in the NCS manifest using west's project groups feature.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/ncs_distro.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwest config manifest.group-filter +ant\nwest update\n```\n\n----------------------------------------\n\nTITLE: Configuring TF-M Parameters from Zephyr Configurations in CMake\nDESCRIPTION: This CMake code sets up TF-M configuration variables with values from Zephyr CONFIG variables. It covers platform service settings, crypto module configurations, firmware update settings, attestation parameters, and internal trusted storage properties.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\n# Default values from config_base.h in TF-M.\nset(PLATFORM_SERVICE_INPUT_BUFFER_SIZE     ${CONFIG_TFM_PLATFORM_SERVICE_INPUT_BUFFER_SIZE})\nset(PLATFORM_SERVICE_OUTPUT_BUFFER_SIZE    ${CONFIG_TFM_PLATFORM_SERVICE_OUTPUT_BUFFER_SIZE})\nset(PLATFORM_SP_STACK_SIZE                 ${CONFIG_TFM_PLATFORM_SP_STACK_SIZE})\nset(PLATFORM_NV_COUNTER_MODULE_DISABLED    ${CONFIG_TFM_PLATFORM_NV_COUNTER_MODULE_DISABLED})\nset(CRYPTO_ENGINE_BUF_SIZE                 ${CONFIG_TFM_CRYPTO_ENGINE_BUF_SIZE})\nset(CRYPTO_CONC_OPER_NUM                   ${CONFIG_TFM_CRYPTO_CONC_OPER_NUM})\nset(CRYPTO_RNG_MODULE_ENABLED              ${CONFIG_TFM_CRYPTO_RNG_MODULE_ENABLED})\nset(CRYPTO_KEY_MODULE_ENABLED              ${CONFIG_TFM_CRYPTO_KEY_MODULE_ENABLED})\nset(CRYPTO_AEAD_MODULE_ENABLED             ${CONFIG_TFM_CRYPTO_AEAD_MODULE_ENABLED})\nset(CRYPTO_MAC_MODULE_ENABLED              ${CONFIG_TFM_CRYPTO_MAC_MODULE_ENABLED})\nset(CRYPTO_HASH_MODULE_ENABLED             ${CONFIG_TFM_CRYPTO_HASH_MODULE_ENABLED})\nset(CRYPTO_CIPHER_MODULE_ENABLED           ${CONFIG_TFM_CRYPTO_CIPHER_MODULE_ENABLED})\nset(CRYPTO_ASYM_SIGN_MODULE_ENABLED        ${CONFIG_TFM_CRYPTO_ASYM_SIGN_MODULE_ENABLED})\nset(CRYPTO_ASYM_ENCRYPT_MODULE_ENABLED     ${CONFIG_TFM_CRYPTO_ASYM_ENCRYPT_MODULE_ENABLED})\nset(CRYPTO_KEY_DERIVATION_MODULE_ENABLED   ${CONFIG_TFM_CRYPTO_KEY_DERIVATION_MODULE_ENABLED})\nset(CRYPTO_PAKE_MODULE_ENABLED             ${CONFIG_TFM_CRYPTO_PAKE_MODULE_ENABLED})\nset(CRYPTO_IOVEC_BUFFER_SIZE               ${CONFIG_TFM_CRYPTO_IOVEC_BUFFER_SIZE})\nset(CRYPTO_NV_SEED                         0)\nset(CRYPTO_SINGLE_PART_FUNCS_DISABLED      ${CONFIG_TFM_CRYPTO_SINGLE_PART_FUNCS_DISABLED})\nset(CRYPTO_STACK_SIZE                      ${CONFIG_TFM_CRYPTO_PARTITION_STACK_SIZE})\nset(CRYPTO_LIBRARY_ABI_COMPAT              ON)\nset(TFM_FWU_BUF_SIZE                       0)\nset(FWU_STACK_SIZE                         0)\nset(ATTEST_INCLUDE_OPTIONAL_CLAIMS         ${CONFIG_TFM_ATTEST_INCLUDE_OPTIONAL_CLAIMS})\nset(ATTEST_INCLUDE_COSE_KEY_ID             ${CONFIG_TFM_ATTEST_INCLUDE_COSE_KEY_ID})\nset(ATTEST_STACK_SIZE                      ${CONFIG_TFM_ATTEST_STACK_SIZE})\nset(ATTEST_TOKEN_PROFILE_PSA_IOT_1         ${CONFIG_TFM_ATTEST_TOKEN_PROFILE_PSA_IOT_1})\nset(ATTEST_TOKEN_PROFILE_PSA_2_0_0         ${CONFIG_TFM_ATTEST_TOKEN_PROFILE_PSA_2_0_0})\nset(ATTEST_TOKEN_PROFILE_ARM_CCA           ${CONFIG_TFM_ATTEST_TOKEN_PROFILE_ARM_CCA})\nset(ITS_CREATE_FLASH_LAYOUT                ${CONFIG_TFM_ITS_CREATE_FLASH_LAYOUT})\nset(ITS_RAM_FS                             ${CONFIG_TFM_ITS_RAM_FS})\nset(ITS_VALIDATE_METADATA_FROM_FLASH       ${CONFIG_TFM_ITS_VALIDATE_METADATA_FROM_FLASH})\nset(ITS_MAX_ASSET_SIZE                     ${CONFIG_TFM_ITS_MAX_ASSET_SIZE})\nset(ITS_BUF_SIZE                           ${CONFIG_TFM_ITS_BUF_SIZE})\nset(ITS_NUM_ASSETS                         ${CONFIG_TFM_ITS_NUM_ASSETS})\nset(ITS_STACK_SIZE                         ${CONFIG_TFM_ITS_STACK_SIZE})\nset(PS_CREATE_FLASH_LAYOUT                 ${CONFIG_TFM_PS_CREATE_FLASH_LAYOUT})\nset(PS_RAM_FS                              ${CONFIG_TFM_PS_RAM_FS})\nset(PS_ROLLBACK_PROTECTION                 ${CONFIG_TFM_PS_ROLLBACK_PROTECTION})\nset(PS_VALIDATE_METADATA_FROM_FLASH        ${CONFIG_TFM_PS_VALIDATE_METADATA_FROM_FLASH})\nset(PS_MAX_ASSET_SIZE                      ${CONFIG_TFM_PS_MAX_ASSET_SIZE})\nset(PS_NUM_ASSETS                          ${CONFIG_TFM_PS_NUM_ASSETS})\nset(PS_STACK_SIZE                          ${CONFIG_TFM_PS_STACK_SIZE})\nset(CONFIG_TFM_DOORBELL_API                ${CONFIG_TFM_DOORBELL_API})\n```\n\n----------------------------------------\n\nTITLE: Reading from BME680 Sensor\nDESCRIPTION: Shows how to read 1 byte from the BME680 sensor using AT#XTWIR command. The response '61' indicates the CHIP ID of the sensor.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_46\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XTWIR=2,\"76\",1\n\n#XTWIR: 61\nOK\n```\n\n----------------------------------------\n\nTITLE: Macro Registration in nRF Modem Library\nDESCRIPTION: New registration macros for modem initialization and shutdown callbacks, implemented in C. These macros allow compile-time registration of handlers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nNRF_MODEM_LIB_ON_INIT\n```\n\nLANGUAGE: C\nCODE:\n```\nNRF_MODEM_LIB_ON_SHUTDOWN\n```\n\n----------------------------------------\n\nTITLE: Modem Key Management Updates\nDESCRIPTION: Functions added to the modem key management library for handling credentials and reading certificates. Includes clear function for security tags and buffer size handling improvements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nmodem_key_mgmt_clear()\nmodem_key_mgmt_read()\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Library Sources\nDESCRIPTION: This snippet declares a Zephyr library and specifies the source files to be included in the build process for the SUIT Sink Selector module. The C source file 'suit_sdfw_sink_selector.c' will be compiled as part of this library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/sink_selector/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(src/suit_sdfw_sink_selector.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory\nDESCRIPTION: This snippet adds a subdirectory called 'src' to the project, indicating where the source files for the project are located. This helps in organizing code modules effectively.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_fuel_gauge/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Purging nRF54H20 device cores during SoC binaries update\nDESCRIPTION: Commands to recover the Application and Network cores on an nRF54H20 device as part of the SoC binaries update process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device recover --core Application --serial-number <serial_number>\nnrfutil device recover --core Network --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Specifying Zephyr Library Sources\nDESCRIPTION: This snippet specifies the source files to be included in a Zephyr library. It lists a series of C source files related to tools and utilities, likely used within the Zephyr project or a related ecosystem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/curl/tool/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library_sources(\n  slist_wc.c\n  tool_binmode.c\n  tool_bname.c\n  tool_cb_dbg.c\n  tool_cb_hdr.c\n  tool_cb_prg.c\n  tool_cb_rea.c\n  tool_cb_see.c\n  tool_cb_wrt.c\n  tool_cfgable.c\n  tool_convert.c\n  tool_dirhie.c\n  tool_doswin.c\n  tool_easysrc.c\n  tool_filetime.c\n  tool_formparse.c\n  tool_getparam.c\n  tool_getpass.c\n  tool_help.c\n  tool_helpers.c\n  tool_homedir.c\n  tool_libinfo.c\n  tool_main.c\n  tool_metalink.c\n  tool_msgs.c\n  tool_operate.c\n  tool_operhlp.c\n  tool_panykey.c\n  tool_paramhlp.c\n  tool_parsecfg.c\n  tool_progress.c\n  tool_strdup.c\n  tool_setopt.c\n  tool_sleep.c\n  tool_urlglob.c\n  tool_util.c\n  tool_vms.c\n  tool_writeout.c\n  tool_writeout_json.c\n  tool_xattr.c)\"\n```\n\n----------------------------------------\n\nTITLE: Changing Battery Model via Shell Command\nDESCRIPTION: Shows how to use the shell command 'battery_model' to change the active battery type to a different supported model (Lithium CR2032) with the resulting confirmation message.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm2100_fuel_gauge/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ battery_model Lithium_CR2032\nFuel gauge initialised for Lithium CR2032 battery.\n```\n\n----------------------------------------\n\nTITLE: Setting PROJECT_NAME Compiler Definition\nDESCRIPTION: Defines PROJECT_NAME as a compiler definition based on CMAKE_PROJECT_NAME if it's not already defined.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/azure_fota/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT PROJECT_NAME)\n  zephyr_compile_definitions(\n    PROJECT_NAME=${CMAKE_PROJECT_NAME}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Append syscall include directories\nDESCRIPTION: Appends the application's RPC syscall include directory to the list of syscall include directories. This ensures that the necessary header files for the custom RPC syscalls are available during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND SYSCALL_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/modules/app_rpc/zephyr)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Bluetooth Mesh Light Hue Test\nDESCRIPTION: Sets up the CMake project configuration including minimum version, package dependencies, and project name. Requires CMake 3.20.0 and Zephyr package.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/light_hue/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bt_mesh_ligth_hue_subsystem_test)\n```\n\n----------------------------------------\n\nTITLE: Set Extended Address - Custom Command Usage\nDESCRIPTION: This command defines an extended address for the CMD device for frame filtering, requiring a specific long address format.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_21\n\nLANGUAGE: text\nCODE:\n```\ncustom lsetextended *0x<extended_address>*\n```\n\n----------------------------------------\n\nTITLE: Including Source Directory in nRF Cloud Project\nDESCRIPTION: Adds the src directory to the include path for the project, ensuring all header files are accessible.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(src)\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Security Extra Settings for TF-M\nDESCRIPTION: Sets up additional nRF security configurations for TF-M by generating a config_extra.cmake file from a template and adding it to the TF-M build options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${NRF_DIR}/subsys/nrf_security/configs/config_extra.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/config_extra.cmake\n)\n\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS\n  -DTFM_EXTRA_CONFIG_PATH=\"${CMAKE_CURRENT_BINARY_DIR}/config_extra.cmake\"\n)\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option to Disable Default UART Standard Output\nDESCRIPTION: This snippet disables the platform default UART standard output for TF-M if CONFIG_TFM_LOG_LEVEL_SILENCE is enabled, preventing log output.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_LOG_LEVEL_SILENCE)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DPLATFORM_DEFAULT_UART_STDOUT=OFF\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Link Oberon PSA Core Dependencies\nDESCRIPTION: Links the Oberon PSA core with required CC3XX libraries and the C standard library. This establishes the necessary dependencies for the cryptographic implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/nrf_cc3xx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(oberon_psa_core\n  INTERFACE\n    nrf_cc3xx_psa_crypto_imported\n    nrf_cc3xx_core_imported\n    c\n)\n```\n\n----------------------------------------\n\nTITLE: Partition Manager Flash Map Configuration Check\nDESCRIPTION: Checks if custom flash map is enabled when partition manager is enabled and includes the partition manager flash map source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/partition_manager/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_PARTITION_MANAGER_ENABLED)\n  if (NOT CONFIG_FLASH_MAP_CUSTOM)\n    message(FATAL_ERROR \"CONFIG_FLASH_MAP_CUSTOM must be set when \\\n      CONFIG_PARTITION_MANAGER_ENABLED is set\")\n  endif()\n  zephyr_sources(flash_map_partition_manager.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Memory Map Layout Tables - System Configuration\nDESCRIPTION: ASCII tables showing memory partition layouts including offsets, sizes and elements for various memory regions including flash, SRAM, external flash, network core memory and OTP regions. Tables provide detailed memory addressing and allocation information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/hw_requirements.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+-----------------------------------------+---------------------+-------------------+---------------------+-----------------+-------------------+\n| Factory data (factory_data)             | 988kB (0xf7000)     | 4kB (0x1000)      |-                    |-                |-                  |\n+-----------------------------------------+---------------------+-------------------+---------------------+-----------------+-------------------+\n| Non-volatile storage (settings_storage) | 992kB (0xf8000)     | 32kB (0x8000)     |-                    |-                |-                  |\n+-----------------------------------------+---------------------+-------------------+---------------------+-----------------+-------------------+\n```\n\n----------------------------------------\n\nTITLE: Building for Continuous Packet Transmission in Connected Station Mode\nDESCRIPTION: Command for building the sample for continuous raw 802.11 packet transmission in connected Station mode\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/raw_tx_packet/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_RAW_TX_PKT_SAMPLE_CONNECTION_MODE=y -DCONFIG_RAW_TX_PKT_SAMPLE_TX_MODE_CONTINUOUS=y\n```\n\n----------------------------------------\n\nTITLE: Checking MAC Status for DECT Beacon - Console\nDESCRIPTION: This command checks the MAC status of the DECT beacon, reporting its operational status, including the beacon running state, channel, transmission power, interval, and payload size. It requires the DECT command-line tools to execute.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_24\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ dect mac status\n      dect-phy-mac status:\n      Cluster beacon status:\n         Beacon running:                yes\n         Beacon channel:                1659\n         Beacon tx power:               0 dBm\n         Beacon interval:               2000 ms\n         Beacon payload PDU byte count: 50\n      Client status:\n      Neighbor list status:\n```\n\n----------------------------------------\n\nTITLE: Configuring Long Polling Period for Power Saving\nDESCRIPTION: Sets a longer polling period (240 seconds) on the Sleepy End Device to reduce power consumption by minimizing the frequency of wakeups for data polls.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_25\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot pollperiod 240000\nDone\n```\n\n----------------------------------------\n\nTITLE: Configuring ST25R3911B NFC Library Components in CMake\nDESCRIPTION: Defines the Zephyr library components for the ST25R3911B NFC reader driver. Includes source files for SPI communication, common functionality, interrupt handling, and NFC-A protocol support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/st25r3911b/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(st25r3911b_spi.c)\nzephyr_library_sources(st25r3911b_common.c)\nzephyr_library_sources(st25r3911b_interrupt.c)\nzephyr_library_sources(st25r3911b_nfca.c)\n```\n\n----------------------------------------\n\nTITLE: Building Matter Template Release Configuration\nDESCRIPTION: Command to build the Matter template sample in release configuration with internal memory support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/template/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54l15dk/nrf54l15/cpuapp -- -DCONFIG_CHIP_DFU_OVER_BT_SMP=y -DFILE_SUFFIX=internal -Dtemplate_EXTRA_CONF_FILE=prj_release.conf\n```\n\n----------------------------------------\n\nTITLE: Generating Memory Reports for TF-M - Console\nDESCRIPTION: This snippet describes command line instructions to generate RAM and ROM memory usage reports for TF-M using specific build targets. It allows developers to analyze the memory utilization of the TF-M partitions and understand the effects of configuration adjustments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_building.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nwest build -d build/tfm_hello_world -t tfm_ram_report\n```\n\n----------------------------------------\n\nTITLE: Scanning for Bluetooth LE Devices\nDESCRIPTION: Command to scan for available Bluetooth LE devices that can be bridged to Matter. This provides a list of devices with their indices, addresses, and UUIDs for selection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_28\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge scan\n```\n\n----------------------------------------\n\nTITLE: Adding SUIT DFU Cache Source Files\nDESCRIPTION: Configures Zephyr library with core source files for SUIT DFU cache implementation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/cache/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(src/suit_dfu_cache.c)\nzephyr_library_sources(src/suit_dfu_cache_helpers.c)\n```\n\n----------------------------------------\n\nTITLE: Stop capturing packets for testing\nDESCRIPTION: The sleep command disables the radio and ends the receive process for testing the sniffer application. LED 1 will start blinking with longer intervals.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n\"sleep\"\n```\n\n----------------------------------------\n\nTITLE: Zigbee End Device Rejoin Recovery Implementation\nDESCRIPTION: Implementation of a recovery mechanism for broken rejoin procedures in Zigbee End Devices using signal handling and status monitoring.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n/* Add helper variable that will be used for detecting broken rejoin procedure. */\n/* Flag indicating if joining signal has been received since restart or leave with rejoin. */\nbool joining_signal_received = false;\n/* Extend the zigbee_default_signal_handler() function. */\ncase ZB_BDB_SIGNAL_DEVICE_FIRST_START:\n    ...\n    joining_signal_received = true;\n    break;\ncase ZB_BDB_SIGNAL_DEVICE_REBOOT:\n    ...\n    joining_signal_received = true;\n    break;\ncase ZB_BDB_SIGNAL_STEERING:\n    ...\n    joining_signal_received = true;\n    break;\ncase ZB_ZDO_SIGNAL_LEAVE:\n    if (status == RET_OK) {\n        zb_zdo_signal_leave_params_t *leave_params = ZB_ZDO_SIGNAL_GET_PARAMS(sig_hndler, zb_zdo_signal_leave_params_t);\n        LOG_INF(\"Network left (leave type: %d)\", leave_params->leave_type);\n\n        /* Set joining_signal_received to false so broken rejoin procedure can be detected correctly. */\n        if (leave_params->leave_type == ZB_NWK_LEAVE_TYPE_REJOIN) {\n            joining_signal_received = false;\n        }\n    ...\n    break;\ncase ZB_NLME_STATUS_INDICATION: {\n    zb_zdo_signal_nlme_status_indication_params_t *nlme_status_ind =\n        ZB_ZDO_SIGNAL_GET_PARAMS(sig_hndler, zb_zdo_signal_nlme_status_indication_params_t);\n    if (nlme_status_ind->nlme_status.status == ZB_NWK_COMMAND_STATUS_PARENT_LINK_FAILURE) {\n\n        /* Check for broken rejoin procedure and restart the device to recover. */\n        if (stack_initialised && !joining_signal_received) {\n            zb_reset(0);\n        }\n    }\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Init Method for MyBtServiceDataProvider in C++\nDESCRIPTION: Implement the Init method to prepare the data provider for operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nvoid MyBtServiceDataProvider::Init()\n{\n    /* Do nothing in this case */\n}\n```\n\n----------------------------------------\n\nTITLE: Key Sequence Definition - C Configuration\nDESCRIPTION: Configuration file that defines the output key ID sequence for simulated button presses. The mapping from key IDs to HID report ID and usage ID is defined separately in hid_keymap_def.h.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/buttons_sim.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// buttons_sim_def.h\n// Located in board-specific directory under configuration/\n```\n\n----------------------------------------\n\nTITLE: Removing Application Binary from Integrated Payloads\nDESCRIPTION: Diff showing how to remove the application binary from the integrated payloads section of the application manifest as it's not necessary in the fetch model-based firmware upgrade.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_fetch.rst#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- suit-integrated-payloads:\n-   '#{{ app[\\'name\\'] }}': {{ app[\\'binary\\'] }}\n+ suit-integrated-payloads: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Light HSL and Light xyL Servers Together\nDESCRIPTION: Shows how to initialize Light Lightness, Light HSL, and Light xyL Servers on the same element, along with separate Hue and Saturation Servers on different elements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_srv.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic struct bt_mesh_lightness_srv lightess_srv =\n\tBT_MESH_LIGHTNESS_SRV_INIT(&lightness_cb);\n\nstatic struct bt_mesh_light_hsl_srv hsl_srv =\n\tBT_MESH_LIGHT_HSL_SRV_INIT(&lightness_srv, &hue_cb, &sat_cb);\n\nstatic struct bt_mesh_light_xyl_srv xyl_srv =\n\tBT_MESH_LIGHT_XYL_SRV_INIT(&lightness_srv, &xyl_handlers);\n\nstatic struct bt_mesh_elem elements[] = {\n\tBT_MESH_ELEM(\n\t\t1, BT_MESH_MODEL_LIST(\n\t\t   BT_MESH_MODEL_LIGHTNESS_SRV(&lightness_srv),\n\t\t   BT_MESH_MODEL_LIGHT_HSL_SRV(&hsl_srv),\n\t\t   BT_MESH_MODEL_LIGHT_XYL_SRV(&xyl_srv)),\n\t\tBT_MESH_MODEL_NONE),\n\tBT_MESH_ELEM(\n\t\t2, BT_MESH_MODEL_LIST(BT_MESH_MODEL_LIGHT_HUE_SRV(&hsl_srv.hue)),\n\t\tBT_MESH_MODEL_NONE),\n\tBT_MESH_ELEM(\n\t\t3, BT_MESH_MODEL_LIST(BT_MESH_MODEL_LIGHT_SAT_SRV(&hsl_srv.sat)),\n\t\tBT_MESH_MODEL_NONE),\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Received Packet Count\nDESCRIPTION: Command to display the number of successfully received packets on the receiving device. The RX success count is shown as \"Number of packets:\".\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/ble_radio_test_for_per_measurements.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ print_rx\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Sources and Includes\nDESCRIPTION: Sets up test runner generation, includes source directories, and adds test and implementation source files\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/lte_net_if/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntest_runner_generate(src/main.c)\n\n# Add source folder\ntarget_include_directories(app PRIVATE src)\n\n# Add test file\ntarget_sources(app PRIVATE src/main.c)\n\n# Add UUT\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/lte_net_if/lte_net_if.c)\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/lte_net_if/lte_ip_addr_helper.c)\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/nrf9x_sockets.c)\n\ntarget_include_directories(app PRIVATE\n                           ${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/lte_net_if\n                           ${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include\n                           ${ZEPHYR_BASE}/subsys/net/lib/sockets\n                          )\n```\n\n----------------------------------------\n\nTITLE: Configuring TWI Module Build Settings in CMake\nDESCRIPTION: Sets up include directories and conditionally adds TWI source files to the build based on the CONFIG_SLM_TWI configuration option. This is part of the Serial LTE Modem (SLM) application build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/src/twi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(.)\ntarget_sources_ifdef(CONFIG_SLM_TWI app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_at_twi.c)\n```\n\n----------------------------------------\n\nTITLE: Library Migration and Module Configuration\nDESCRIPTION: Overview of library reorganization focusing on modular configuration and replacing deprecated components\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LTE_LC_CONN_EVAL_MODULE\nCONFIG_LTE_LC_EDRX_MODULE\nCONFIG_LTE_LC_NEIGHBOR_CELL_MEAS_MODULE\n```\n\n----------------------------------------\n\nTITLE: Out-of-Band Data Function Call\nDESCRIPTION: Function to trigger RPA rotation and reset RPA timeout before advertising starts.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/fast_pair.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nbt_le_oob_get_local\n```\n\n----------------------------------------\n\nTITLE: Converting End Line Symbols with dos2unix\nDESCRIPTION: Command to convert end line symbols in the captured audio file using dos2unix. This ensures compatibility with Unix-like systems.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/audio/dmic_dump_buffer/README.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndos2unix -f /home/user/sound_capture.raw\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Measurement in Kconfig\nDESCRIPTION: Core configuration options for enabling the CPU measurement module and setting its parameters. Includes options for enabling the module, selecting the CPU_LOAD library, and configuring measurement period.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/cpu_meas.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DESKTOP_CPU_MEAS_ENABLE\nCONFIG_CPU_LOAD\nCONFIG_DESKTOP_CPU_MEAS_PERIOD\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to MCUmgr SMP Client Test Project\nDESCRIPTION: Collects all source files from the src directory and adds them to the project. It also includes specific source files from the nRF Connect SDK modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/mcumgr_smp_client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntarget_sources(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/mcumgr_smp_client/src/mcumgr_smp_client.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/fota_download/src/util/fota_download_util.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/fota_download/src/util/fota_download_smp.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/src/dl_parse.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Public Key Storage in KMU\nDESCRIPTION: Enables the Key Management Unit (KMU) to be used for public key storage. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_13\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_MCUBOOT_SIGNATURE_USING_KMU`\"\n```\n\n----------------------------------------\n\nTITLE: Building with Coexistence Enabled\nDESCRIPTION: Command to build the sample with coexistence functionality enabled, suitable for concurrent Wi-Fi and Thread throughput testing with coexistence support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/thread_coex/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_MPSL_CX=y -Dipc_radio_CONFIG_MPSL_CX=y\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Broadcast ID - Shell Command\nDESCRIPTION: Shell command for setting a fixed three-octet broadcast ID for a Bluetooth LE Audio broadcast group.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_26\n\nLANGUAGE: console\nCODE:\n```\nnac broadcast_id fixed 0 0xAA1234\n```\n\n----------------------------------------\n\nTITLE: Including Application Event Headers\nDESCRIPTION: This snippet includes the directory containing the application event headers required for the application. It is essential for accessing event-related functionalities within the application code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_event_manager/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_include_directories(src/events)\n```\n\n----------------------------------------\n\nTITLE: Building to custom directory (Command line)\nDESCRIPTION: West command to build an application and specify a custom output directory for build files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/building.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 -d local_build\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for PCD Test Project in nRF Connect SDK\nDESCRIPTION: This CMake script sets up a test project for the PCD module. It checks for the existence of the PCD source file, sets compile definitions for MCUboot compatibility, and configures the project sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/pcd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\n# This check is needed since CMake does not fail when performing\n# 'set_source_files_properties' to a source file which does not exist.\nset(pcd_dir ${ZEPHYR_NRF_MODULE_DIR}/subsys/pcd)\nset(pcd_source ${pcd_dir}/src/pcd.c)\nif (NOT EXISTS ${pcd_source})\n  message(FATAL_ERROR \"Unable to find source being tested\")\nendif()\n\n# Set 'CONFIG_MCUBOOT' in order to include code which is conditionally included.\nset_source_files_properties(\n  ${pcd_source}\n  DIRECTORY ${pcd_dir}\n  PROPERTIES COMPILE_DEFINITIONS\n  \"CONFIG_MCUBOOT\")\n\nproject(pcd_test)\n\nFILE(GLOB app_sources src/*.c)\n\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files\nDESCRIPTION: Specifies the source files to be included in the Zephyr library using the zephyr_library_sources() CMake function. The function takes a list of source files as arguments, in this case 'nrfx_clock_mpsl.c'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/mpsl/clock_control/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library_sources(nrfx_clock_mpsl.c)\"\n```\n\n----------------------------------------\n\nTITLE: HIDS API Function Reference\nDESCRIPTION: Reference to the bt_hids API function for sending input reports. This function allows applications to send notifications of Input Report characteristics to connected clients.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/hids.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbt_hids_inp_rep_send\n```\n\n----------------------------------------\n\nTITLE: Generating Key Pair and CSR Using nrfcredstore\nDESCRIPTION: Generates a key pair and CSR on an nRF91 device. A serial port for the device and an unused security tag matching `CONFIG_MQTT_HELPER_SEC_TAG` is required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nnrfcredstore <serial port> generate <sec tag> certs/client-csr.der\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Helper Library with Certificate Provisioning in CMake\nDESCRIPTION: This CMake script sets up the MQTT Helper library and handles certificate provisioning if enabled. It defines a function to process certificate files, generating .inc files and compiler definitions that can be used in the C code. A warning is displayed about credentials being exposed in non-secure memory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/mqtt_helper/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(mqtt_helper.c)\n\nif (CONFIG_MQTT_HELPER_PROVISION_CERTIFICATES)\n\tmessage(WARNING \"Credentials are exposed in non-secure memory. This should be avoided in production.\")\n\n\t# Define the directory where certificate include files will be stored.\n\tset(app_certs_binary_dir ${APPLICATION_BINARY_DIR}/certs)\n\tzephyr_include_directories(cert)\n\n\t# Function to process a certificate file and create a corresponding .inc file and compiler definition\n\t# used in certs/mqtt-certs.h to assign C variables that are used in mqtt_helper.c.\n\tfunction(process_certificate definition_name file_name)\n\t\tset(cert_file ${APPLICATION_SOURCE_DIR}/${CONFIG_MQTT_HELPER_CERTIFICATES_FOLDER}/${file_name})\n\t\tif(EXISTS ${cert_file})\n\t\t\tmessage(STATUS \"${file_name} found\")\n\n\t\t\tget_filename_component(file_base_name ${file_name} NAME_WE)\n\t\t\tset(inc_file_name ${file_base_name}.inc)\n\n\t\t\tset(inc_file_path ${app_certs_binary_dir}/${inc_file_name})\n\t\t\tgenerate_inc_file_for_target(app ${cert_file} ${inc_file_path})\n\n\t\t\t# Define a compiler macro with the path to the generated .inc file,\n\t\t\t# allowing it to be included in the source code.\n\t\t\tadd_definitions(-D${definition_name}=\"${inc_file_path}\")\n\t\tendif()\n\tendfunction()\n\n\t# Process each certificate file by generating a .inc file and defining a corresponding macro.\n\tprocess_certificate(\"MQTT_HELPER_CA_CERT\" \"ca-cert.pem\")\n\tprocess_certificate(\"MQTT_HELPER_CLIENT_CERT\" \"client-cert.pem\")\n\tprocess_certificate(\"MQTT_HELPER_PRIVATE_KEY\" \"private-key.pem\")\n\tprocess_certificate(\"MQTT_HELPER_CA_CERT_2\" \"ca-cert-2.pem\")\n\tprocess_certificate(\"MQTT_HELPER_CLIENT_CERT_2\" \"client-cert-2.pem\")\n\tprocess_certificate(\"MQTT_HELPER_PRIVATE_KEY_2\" \"private-key-2.pem\")\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing the SUPL client\nDESCRIPTION: This snippet shows how to initialize the SUPL client library before starting a SUPL session. The function :c:func:`supl_init` prepares the client for subsequent operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/supl_os_client.rst#2025-04-21_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n/* Call to initialize the SUPL client */\nsupl_init();\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for nRF Provisioning\nDESCRIPTION: Defines a set of compiler options for the nRF Provisioning project, including memory diagnostics and JWT configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_provisioning/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(options\n  -DCONFIG_NRF_MODEM_LIB_MEM_DIAG=y\n  -DCONFIG_NRF_PROVISIONING_JWT_MAX_VALID_TIME_S=300\n  -DCONFIG_MODEM_JWT_MAX_LEN=850\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Profiler Tests\nDESCRIPTION: Sets up the CMake build configuration for Profiler unit tests. Requires CMake 3.20.0 or higher, finds the Zephyr package using environment variables, and adds the main source file to the build target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_profiler/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Profiler unit tests\")\n\n# Add test sources\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding MCUboot Hooks Subdirectory\nDESCRIPTION: Adds the MCUboot hooks subdirectory when CONFIG_MCUBOOT is enabled in the configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_MCUBOOT mcuboot/hooks)\n```\n\n----------------------------------------\n\nTITLE: Configuring CAF Event Sources in CMake\nDESCRIPTION: CMake configuration that conditionally includes various event source files based on configuration flags. Each source file is only included if its corresponding CONFIG flag is enabled. The file also includes a linker script for module ID list.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/caf/events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_CAF_MODULE_STATE_EVENTS\n\tmodule_state_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_PM_EVENTS\n\tpower_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_BLE_COMMON_EVENTS\n\tble_common_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_BUTTON_EVENTS\n\tbutton_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_CLICK_EVENTS\n\tclick_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_FACTORY_RESET_EVENTS\n\tfactory_reset_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_FORCE_POWER_DOWN_EVENTS\n\tforce_power_down_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_KEEP_ALIVE_EVENTS\n\tkeep_alive_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_LED_EVENTS\n\tled_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_NET_STATE_EVENTS\n\tnet_state_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_POWER_MANAGER_EVENTS\n\tpower_manager_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_SENSOR_EVENTS\n\tsensor_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_BLE_SMP_TRANSFER_EVENTS\n\tble_smp_event.c\n)\n\nzephyr_sources_ifdef(CONFIG_CAF_SENSOR_DATA_AGGREGATOR_EVENTS\n\tsensor_data_aggregator_event.c\n)\n\nzephyr_linker_sources(SECTIONS module_id_list.ld)\n```\n\n----------------------------------------\n\nTITLE: Test Firmware A Health Check Failure Log\nDESCRIPTION: Log output showing that the application domain is not healthy after installing test firmware variant A, indicating health check failure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n<inf> AB: Image set A not confirmed yet, testing...\n<err> AB: App domain is NOT healthy\n<err> AB: Reboot the device to try to boot from previous firmware\n```\n\n----------------------------------------\n\nTITLE: UDP Server Test Command Response Syntax\nDESCRIPTION: Response syntax for the UDP server test command showing available operations, port, and security tag parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_9\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPSVR: <list of ops>,<port>,<sec_tag>\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet locates the Zephyr package required for the project, setting the appropriate hints for its base directory. This is crucial for ensuring that all necessary Zephyr components are included in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/i2s/i2s_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: PPP Status Notification Format\nDESCRIPTION: Unsolicited notification format showing PPP running status and peer connection status. Reports whether PPP is running (1/0) and if a peer is connected (1/0).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/PPP_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: at-commands\nCODE:\n```\n#XPPP: <running>,<peer_connected>\n```\n\n----------------------------------------\n\nTITLE: Pushing Application Image 'B'\nDESCRIPTION: Successfully uploads application image 'B' using cache raw upload method, confirming the image is loaded onto the specified partition with complete data transfer.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_51\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-cache-raw --serial-port COM7 --cache-file ./build/ab_variant_b/zephyr/zephyr.bin  --pool 22\n```\n\n----------------------------------------\n\nTITLE: Start capturing packets\nDESCRIPTION: The receive command makes the sniffer enter the RX state and starts capturing packets.  The received packets will be printed to the command-line with data, power, lqi, and timestamp.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"receive\"\n```\n\n----------------------------------------\n\nTITLE: Zephyr Library Setup and Install Target\nDESCRIPTION: Creates a Zephyr library target and sets up an installation target for the generated decoder files. Includes formatting of installed files using clang-format.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dfu/fmfu_fdev/cddl/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(${decode_c})\nzephyr_include_directories(${include_out})\n\nadd_custom_target(\n  fmfu_cddl_modem_update_install\n  COMMAND ${CMAKE_COMMAND} -E copy ${decode_c} ${src_install_dir}/${decode_c_name}\n  COMMAND ${CMAKE_COMMAND} -E copy ${decode_h} ${include_install_dir}/${decode_h_name}\n  COMMAND ${CMAKE_COMMAND} -E copy ${types_h}  ${include_install_dir}/${types_h_name}\n  COMMAND ${CLANG_FORMAT} -i ${src_install_dir}/${decode_c_name} ${include_install_dir}/${decode_h_name} ${include_install_dir}/${types_h_name}\n  DEPENDS\n  ${decode_c} ${decode_h} ${types_h}\n  COMMENT\n  \"Installing Modem Update CDDL decoder files\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet finds the Zephyr package and sets the required configuration for building the SPI controller peripheral tests. It uses the environment variable ZEPHYR_BASE to locate the framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/spi/spi_controller_peripheral/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Defining Project\nDESCRIPTION: This snippet defines the CMake project named `nrf_wfa_qt_app`. This command specifies the name of the project, which is used for generating build targets and other project-related files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(nrf_wfa_qt_app)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version to ensure compatibility with the project's build requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/radio_coex_1wire/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring USB HID Log Level in C\nDESCRIPTION: Sets the maximum compiled-in log level for the USB HID class to 'warning' to avoid flooding logs during USB state changes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_USB_HID_LOG_LEVEL_CHOICE=\"warning\"\n```\n\n----------------------------------------\n\nTITLE: Configuration Reference in Release Notes\nDESCRIPTION: Configuration flags referenced in the release notes for enabling specific functionality like secure boot and MCUboot variants.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.1.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: ReStructuredText\nCODE:\n```\nCONFIG_SECURE_BOOT=y\nCONFIG_MCUBOOT_BUILD_S1_VARIANT=y\nCONFIG_NET_NATIVE=n\n```\n\n----------------------------------------\n\nTITLE: Enabling Fast Pair for Mouse Devices in Kconfig\nDESCRIPTION: Sets up Fast Pair configuration for mouse devices. This option automatically selects the appropriate Fast Pair settings for the mouse use case, which is a specific variant of the input device category.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_22\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_FAST_PAIR_USE_CASE_MOUSE\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Finding Zephyr Package\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.20 and searches for the Zephyr package. The found package is necessary for building applications using the Zephyr Real-Time Operating System. It assumes that the environment variable ZEPHYR_BASE is set correctly to locate the package.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/location/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr Project with CMake\nDESCRIPTION: This CMake script initializes a Zephyr project named 'integration_test_copy' and ensures it is built using the necessary SUIT libraries. It requires Zephyr to be installed and available in the system path. The main functionality involves linking a series of SUIT-related libraries, which are essential for executing the integration tests specific to storage, manifest, platform interface, et al. The snippet ensures these libraries are available during the build process, facilitating testing of embedded systems with Nordic's SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/write/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_copy)\ninclude(../cmake/test_template.cmake)\n\nzephyr_library_link_libraries(suit)\nzephyr_library_link_libraries(suit_platform_interface)\nzephyr_library_link_libraries(suit_memptr_storage_interface)\nzephyr_library_link_libraries(suit_sink_selector_interface)\nzephyr_library_link_libraries(suit_memory_layout_interface)\nzephyr_library_link_libraries(suit_storage_interface)\nzephyr_library_link_libraries(suit_manifest_variables)\nzephyr_library_link_libraries(suit_ipuc)\nzephyr_library_link_libraries(suit_decrypt_test_utils)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Modem Battery in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the project configuration for the modem_battery application. It defines the minimum CMake version, finds the Zephyr package, sets up the project, includes source files, and configures build options specific to the modem battery functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/modem_battery/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(modem_battery)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntest_runner_generate(src/main.c)\n\ntarget_sources(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/lib/modem_battery/modem_battery.c\n)\n\nzephyr_include_directories(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/)\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/include/modem/)\nzephyr_include_directories(${ZEPHYR_BASE}/subsys/testsuite/include)\n\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_MODEM_BATTERY_LOW_LEVEL=3300\n  -DCONFIG_MODEM_BATTERY_POFWARN_VOLTAGE=30\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Custom Memory Management Functions\nDESCRIPTION: Links custom implementations of k_malloc and k_free functions for the nRF Provisioning library target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_provisioning/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(..__nrf__subsys__net__lib__nrf_provisioning\n  PRIVATE\n  \"-Wl,--wrap=k_malloc,--wrap=k_free\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring DULT Library Build in CMake\nDESCRIPTION: Defines the DULT library build configuration including library name, include directories, and conditional source file compilation based on CONFIG flags. Each source file is conditionally included based on its corresponding configuration option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dult/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_named(dult)\n\nzephyr_library_include_directories(include)\n\nzephyr_library_sources_ifdef(CONFIG_DULT_BATTERY battery.c)\nzephyr_library_sources_ifdef(CONFIG_DULT_BT_ANOS bt/anos.c)\nzephyr_library_sources_ifdef(CONFIG_DULT_ID id.c)\nzephyr_library_sources_ifdef(CONFIG_DULT_MOTION_DETECTOR motion_detector.c)\nzephyr_library_sources_ifdef(CONFIG_DULT_NEAR_OWNER_STATE near_owner_state.c)\nzephyr_library_sources_ifdef(CONFIG_DULT_SOUND sound.c)\nzephyr_library_sources_ifdef(CONFIG_DULT_USER user.c)\n```\n\n----------------------------------------\n\nTITLE: Building FLPR Core with Minimal Sample\nDESCRIPTION: Commands to build and flash the FLPR core with dedicated bootstrapping firmware using west build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_flpr.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuflpr\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Defining Project\nDESCRIPTION: This snippet defines the project name as 'static_pm_file', establishing the context for the build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/partition_manager/static_pm_file/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(static_pm_file)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Nordic Semiconductor Application Target\nDESCRIPTION: Adds the collected source files to the 'app' target. This is wrapped in comments indicating it's part of the Nordic SDK application configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/llpm/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\t${app_sources}\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Build\nDESCRIPTION: This CMake snippet conditionally includes the library based on the `CONFIG_WFA_QT_CONTROL_APP` configuration option. If the configuration is not enabled, the function returns, effectively skipping the library build. It is a prerequisite for all other snippets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/wfa-qt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT CONFIG_WFA_QT_CONTROL_APP)\n\treturn()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building IPC Service Sample for nRF5340 with ICMSG Backend\nDESCRIPTION: Console command to build the sample using the ICMSG backend for nRF5340 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/ipc/ipc_service/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf5340dk/nrf5340/cpuapp -T sample.ipc.ipc_service.nrf5340dk_icmsg_default .\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for nRF WiFi Monitor\nDESCRIPTION: Sets up the CMake build environment for the nRF WiFi monitor application. Specifies minimum CMake version 3.20.0, finds the Zephyr package, sets up the project, and configures include directories and source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/monitor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2024 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_monitor)\n\ntarget_include_directories(\n\tapp\n\tPRIVATE\n\t${ZEPHYR_BASE}/../nrfxlib/)\n\ntarget_sources(app PRIVATE\n\tsrc/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Formatted Device Onboarding CSV Example\nDESCRIPTION: A CSV file format with a device ID and certificate required for onboarding devices to nRF Cloud. This format includes the device ID and the full device certificate for proper onboarding. Each row represents one device's information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_46\n\nLANGUAGE: none\nCODE:\n```\n698d4c11-0ccc-4f04-89cd-6882724e3f6f,,,,\"-----BEGIN CERTIFICATE-----\\nsCC8AtbNQhzbp4y01FEzXaf5Fko3Qdq0o5LbuNpVA7S6AKAkjt17QzKJAiGWHakh\\nRnwzoA2dF4wR0rMP5vR6dqBblaGAA5hN7GE2vPBHTDNZGJ6tZ9dnO6446dg9gGds\\neeadE1HdVnUj8nb+7CGm39vJ4fuNk9vogH0nMdxjCnXAinoOMRx8EklQsR747+Gz\\nsxcdVYuNEb/E2vWBHTDNZGJ6tZC1JC9d6/RC3Vb1JC4tWnK9mk/Jw984ZuYugpMc\\n1t9umoGFYCz0nMdxjCnXAbnoOMC5A0RxcWPzxfC5A0RH+j+mwoMxwhgfFY4EhVxp\\noCC8labNQhzRC3Vc1JC4tWnK9mpVA7k/o5LbuNpVA7S6AKAkjt17QzKJAiGWHakh\\nRXwcoAndF4wPzxfC5A0RHponmwBHTDoM7GE2vPBHTDNZGJ6tZ9dnO6446dg9gGds\\neefdE1HcVnULbuNpVA7S6AKAkjxjCnt1gH0nMdxjCnXAinoOMRx8EklQsR747+Fz\\nsrm/VYaNEb/E2vPBHTDNZGJ6tZc1JC9d6/RC3Vc1JC4tWnK9mk/Jr984ZuYugpMc\\nnt9uZTGFYCzZD0FFAA5NAC4i1PARStFycWPzxfC5A0RqodhswoMxwhgfFY4EhVx=\\n-----END CERTIFICATE-----\\n\"\n```\n\n----------------------------------------\n\nTITLE: Adding PWM LED Controller Node in Devicetree\nDESCRIPTION: This code adds a PWM LED controller node to the devicetree with two LED nodes, each configured to use specific pins on GPIO port 0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/add_new_led_example.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/ { // Devicetree root\n        // ...\n        pwmleds { // Controller node\n                compatible = \"pwm-leds\"; // Compatible binding\n                led_pwm_1 {\n                        pwms = <&pwm0 6>; // Pin assigned to GPIO port 0 for LED 1\n                        label = \"PWM LED 1\";\n                };\n\n                led_pwm_2 {\n                        pwms = <&pwm0 7>; // Pin assigned to GPIO port 0 for LED 2\n                        label = \"PWM LED 2\";\n                };\n        };\n};\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi TX Rate Value Parameters\nDESCRIPTION: Parameter description for the rate_val parameter of the tx_rate command, listing the valid rate values for different frame formats.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/using_wifi_shell_sample.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n<rate_val>: The TX data rate value to be set, valid values are:\n\nLegacy : <1, 2, 55, 11, 6, 9, 12, 18, 24, 36, 48, 54>\nNon-legacy: <MCS index value between 0 - 7>\nAUTO: <No value needed>\n```\n\n----------------------------------------\n\nTITLE: Console Output - PMIC Initialization\nDESCRIPTION: This code snippet represents the expected console output when the PMIC device initialization is successful. It displays a confirmation message indicating that the PMIC device is operational.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm2100_one_button/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"PMIC device ok\"\n```\n\n----------------------------------------\n\nTITLE: Modem Library Trace Function\nDESCRIPTION: Function to configure modem trace level settings for power optimization and debugging.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nnrf_modem_lib_trace_level_set()\n```\n\n----------------------------------------\n\nTITLE: Setting Light CTL State Without Acknowledgement - Command Syntax\nDESCRIPTION: Sets the Light CTL state value without waiting for a response, useful for real-time adjustments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl set-unack <Light> <Temp> <Dlt> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: Setting CoAP Shadow Check Rate in Kconfig\nDESCRIPTION: How many seconds between requests for any change (delta) in the device shadow.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_33\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_COAP_SHADOW_CHECK_RATE_SECONDS\n```\n\n----------------------------------------\n\nTITLE: Adding SMS Source Files to Application Build in CMake\nDESCRIPTION: Specifies two source files, 'sms_shell.c' and 'sms.c', to be compiled and linked as part of the 'app' target. These files contain the implementation of SMS-related functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/sms/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sms_shell.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sms.c)\n```\n\n----------------------------------------\n\nTITLE: RST Include Directive for Click Detector Events\nDESCRIPTION: RST directive to include event propagation documentation specific to the click detector module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/click_detector.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: event_propagation.rst\n    :start-after: table_click_detector_start\n    :end-before: table_click_detector_end\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version for Nordic Semiconductor Project\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures compatibility with the necessary CMake features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/llpm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Documenting C Structs in nRF Connect SDK\nDESCRIPTION: Example of documenting a C struct with a preceding documentation block. This example shows the documentation for an event header structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/styleguide.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n/** @brief Event header structure.\n *\n * @warning When an event structure is defined, application event header must be placed\n *          as the first field.\n */\nstruct app_event_header {\n\n        /** Linked list node used to chain events. */\n   sys_dlist_t node;\n\n        /** Pointer to the event type object. */\n   const struct event_type *type_id;\n};\n```\n\n----------------------------------------\n\nTITLE: Uploading Image Variant B (Console)\nDESCRIPTION: Command to upload the image variant B using nrfutil.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_38\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-envelope --serial-port COM7 --envelope-file root.suit --install --serve-images 60\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Thread Multiprotocol Memory Table\nDESCRIPTION: Table showing memory requirements for multiprotocol Thread 1.4 implementation including ROM and RAM allocations for OpenThread stack, Bluetooth LE stack, application, and free memory\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/memory_tables/nrf54l15.txt#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. table:: nRF54L15 multiprotocol Thread 1.4 memory requirements\n\n         +-----------------------------+----------+-------+-------+\n         |                             |   master |   FTD |   MTD |\n         +=============================+==========+=======+=======+\n         | ROM OT stack + App [kB]     |      478 |   365 |   312 |\n         +-----------------------------+----------+-------+-------+\n         | ROM Bluetooth LE stack [kB] |       85 |    85 |    85 |\n         +-----------------------------+----------+-------+-------+\n         | Persistent storage [kB]     |       32 |    32 |    32 |\n         +-----------------------------+----------+-------+-------+\n         | Free ROM [kB]               |      929 |  1042 |  1095 |\n         +-----------------------------+----------+-------+-------+\n         | RAM OT stack + App [kB]     |      103 |    93 |    79 |\n         +-----------------------------+----------+-------+-------+\n         | RAM Bluetooth LE stack [kB] |       15 |    15 |    15 |\n         +-----------------------------+----------+-------+-------+\n         | Free RAM [kB]               |      138 |   148 |   162 |\n         +-----------------------------+----------+-------+-------+\n```\n\n----------------------------------------\n\nTITLE: Logging Turn Off Action Console Output\nDESCRIPTION: Console output showing the logging messages when the light bulb turn off action is initiated and completed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_bulb/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nI: Turn Off Action has been initiated\nI: Turn Off Action has been completed\n```\n\n----------------------------------------\n\nTITLE: MPSL Support Limitation for nRF21540 - MPSL - Documentation Format\nDESCRIPTION: This documentation notes that MPSL does not support revisions of the nRF21540 that are version 1 or older, which is critical for developers to consider in compatibility and application development.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_39\n\nLANGUAGE: plaintext\nCODE:\n```\nKRKNWK-8842: MPSL does not support nRF21540 revision 1 or older This also applies to kits that contain this device.\n```\n\n----------------------------------------\n\nTITLE: ACL Configuration Command for Matter Light Switch\nDESCRIPTION: CHIP Tool command for configuring Access Control List (ACL) for single light bulb device\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_switch/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchip-tool accesscontrol write acl '[{\"fabricIndex\": 1, \"privilege\": 5, \"authMode\": 2, \"subjects\": [112233], \"targets\": null}, {\"fabricIndex\": 1, \"privilege\": 3, \"authMode\": 2, \"subjects\": [<light_switch_node_ID>], \"targets\": [{\"cluster\": 6, \"endpoint\": 1, \"deviceType\": null}, {\"cluster\": 8, \"endpoint\": 1, \"deviceType\": null}]}]' <light_bulb_node_ID> 0\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This command specifies the minimum required version of CMake for the project. It ensures that the CMake version used is at least 3.20.0 to support the project's features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/record_launch_app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Model Callbacks Association with Vendor Model\nDESCRIPTION: Shows how to associate model callbacks with a vendor model using the BT_MESH_MODEL_VND_CB macro.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/dev_overview.rst#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nstatic struct bt_mesh_model_cb model_cbs;\n\nBT_MESH_MODEL_VND_CB(YOUR_COMPANY_ID,\n                     YOUR_MODEL_ID,\n                     _opcode_list,\n                     &pub_ctx,\n                     NULL,\n                     &model_cbs)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for SUIT Functionality\nDESCRIPTION: This snippet links the necessary libraries that provide internal APIs for the SUIT platform. It is essential for the integration and functionality of various storage operations in the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/storage_nrf54h20/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_update_magic_values)\n```\n\n----------------------------------------\n\nTITLE: Defining Lightness, Temperature, Delta UV States - C\nDESCRIPTION: This snippet outlines the definitions of Lightness, Temperature, and Delta UV states as part of the Light CTL Server's functionality in managing the emitted light's properties. The states are essential for controlling the lighting characteristics within the Bluetooth Mesh system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_srv.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n       Represented Delta UV = (Light CTL Delta UV) / 32768\n```\n\n----------------------------------------\n\nTITLE: OpenSSL Cipher List\nDESCRIPTION: Command to display a list of available cipher suites for OpenSSL.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nopenssl ciphers\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories in CMake\nDESCRIPTION: This CMake command configures the include directories for a specific target labeled 'app'. It uses a local directory as a private include directory, which means only the specified target can access it. There are no external dependencies, and the input is the target name, while the output is the modified CMake build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/modules/transport/client_id/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Referencing BMS Source File in C\nDESCRIPTION: Source file path for the Bond Management Service (BMS) implementation. This file contains the actual implementation of the BMS functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/bms.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nsubsys/bluetooth/services/bms.c\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr Library for NRF Radio Configuration\nDESCRIPTION: This snippet checks if the NRF 802.15.4 radio configuration flag is set and, if so, initializes the Zephyr library, including the source file 'nrf_802154_configurator.c'. This ensures that the necessary library components are compiled only when required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/ieee802154/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_NRF_802154_RADIO_CONFIG)\\n  zephyr_library()\\n\\n  zephyr_library_sources(\\n    nrf_802154_configurator.c\\n    )\\endif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flash Partition for LwM2M Carrier in YAML\nDESCRIPTION: YAML configuration for defining a legacy NVS partition for the LwM2M carrier library in the pm_static.yml file. This ensures persistent configuration is preserved across library versions during device updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/CHANGELOG.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlwm2m_carrier:\n  address: 0xfa000\n  size: 0x3000\nfree:\n  address: 0xfd000\n  size: 0x3000\n```\n\n----------------------------------------\n\nTITLE: SUIT Component Digest Verification Sequence Diagram in PlantUML\nDESCRIPTION: A sequence diagram that documents the flow for verifying a component digest in SUIT (Software Update for Internet of Things) implementation. It shows interactions between the software secure framework (ssf), IPUC handlers, and digest verification utilities when checking a component's integrity.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/suit_check_installed_component_digest.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant ssf\nparticipant sdfw_ipuc\nparticipant ipuc_entry\nparticipant suit_utils\nparticipant generic_address_streamer\n\n--> ssf ++ : suit_check_installed_component_digest(\\n    component_id,\\n    alg_id,\\n    digest\\n)\n\nopt component_id declared as IPUC\nssf -> sdfw_ipuc ++ : suit_ipuc_sdfw_digest_compare(\\n    component_id,\\n    alg_id,\\n    digest\\n)\n\nsdfw_ipuc -> ipuc_entry ** : ipuc_entry_from_component_id(component_id)\nrnote over ipuc_entry\n  IPUC_IPC_IN_PLACE_UPDATE\nend note\nnote right\n  IPUC must be in the IPUC_IPC_IN_PLACE_UPDATE state.\\n  Remote ID is not checked.\nend note\n\nsdfw_ipuc -> ipuc_entry ++ : << check if last chunk stored >>\ndeactivate ipuc_entry\nnote right\n  Last chunk flag set.\\n  If not set, exits with an error code.\nend note\n\nsdfw_ipuc -> suit_utils ++ : suit_plat_decode_component_type(component_id)\ndeactivate suit_utils\nsdfw_ipuc -> suit_utils ++ : suit_plat_decode_address_size(component_id)\ndeactivate suit_utils\n\nsdfw_ipuc -> digest_sink ** : suit_digest_sink_get(alg_id, digest)\nsdfw_ipuc -> generic_address_streamer ++: suit_generic_address_streamer_stream(address, size)\ngeneric_address_streamer -> digest_sink ++ : write(data)\ndeactivate digest_sink\ndeactivate generic_address_streamer\nsdfw_ipuc -> digest_sink ++ : digest_match()\ndeactivate digest_sink\nsdfw_ipuc -> digest_sink : release()\ndestroy digest_sink\n\ndeactivate sdfw_ipuc\nend\nopt IPUC not found\nssf -> digest_cache ++ : suit_plat_digest_cache_compare(component_id, alg_id, digest)\ndeactivate digest_cache\nend\n\ndeactivate sdfw_ipuc\ndeactivate ssf\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Example ICACHE Enable Command\nDESCRIPTION: Example showing how to enable the ICACHE by passing value 1 to the lseticache command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_51\n\nLANGUAGE: plaintext\nCODE:\n```\ncustom lseticache *1*\n```\n\n----------------------------------------\n\nTITLE: Creating nrf70_wifi_fw partition for firmware patch\nDESCRIPTION: Defines the partition for storing the nRF70 Series firmware patch in external memory. This partition starts after the MCUboot header and has a size of 128 kB to accommodate the firmware patch.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf70_fw_patch_update.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnrf70_wifi_fw:\n    address: 0x12f200\n    size: 0x20000\n    device: MX25R64\n    region: external_flash\n```\n\n----------------------------------------\n\nTITLE: Erasing an Image\nDESCRIPTION: Command to erase an image on a device using the MCUmgr CLI.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nmcumgr <connection-options> image erase\n```\n\n----------------------------------------\n\nTITLE: Converting Router to Sleepy End Device\nDESCRIPTION: Configures the router device as a Sleepy End Device (SED) by setting a polling period and changing the device mode. This enables power-saving operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot pollperiod 3000\nDone\nuart:~$ ot mode -\nDone\n```\n\n----------------------------------------\n\nTITLE: Project Declaration for Idle USB\nDESCRIPTION: Declares the project name 'idle_usb', serving as the main target for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_usb/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nproject(idle_usb)\n```\n\n----------------------------------------\n\nTITLE: Defining Project for Application Event Manager\nDESCRIPTION: This snippet defines the project's name as 'Application Event Manager Profiler sample', which organizes the build environment under a specific project name and context within Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_event_manager_profiler_tracer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(\"Application Event Manager Profiler sample\")\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for Radio Test Application\nDESCRIPTION: Collects all required source files for the radio test application including main components, radio test functionality, and WiFi-specific implementations using file globbing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/single_domain/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources\n\t${PERIP_RT_DIR}/src/main.c\n\t${PERIP_RT_DIR}/src/radio_test.c\n\t${PERIP_RT_DIR}/src/radio_cmd.c\n\t${MULTI_DOMAIN_RT_DIR}/src/nrf_wifi_radio_test_shell.c\n\t${MULTI_DOMAIN_RT_DIR}/src/nrf_wifi_radio_ficr_shell.c\n\t${MULTI_DOMAIN_RT_DIR}/src/ficr_prog.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUBoot Storage Library Sources in CMake\nDESCRIPTION: Defines a Zephyr library and its source files for bootloader storage functionality. Conditionally includes hardware downgrade prevention source when CONFIG_MCUBOOT_HW_DOWNGRADE_PREVENTION is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bootloader/bl_storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(bl_storage.c)\n\nif(CONFIG_MCUBOOT_HW_DOWNGRADE_PREVENTION)\n  # NB: This option can only be enabled for the MCUBoot image\n  zephyr_library_sources(nrf_nv_counters.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Application Source Files\nDESCRIPTION: Includes the main source file for the application in the CMake build configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/radio_coex_1wire/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n  src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Semiconductor Project\nDESCRIPTION: This CMake script sets up the build environment for a Nordic Semiconductor project. It finds the Zephyr package, sets the project name, enables compile commands export, and configures source files and include directories. It also adds a subdirectory for test cases.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/crypto/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(NONE)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nFILE(GLOB app_src src/*.c)\n\ntarget_sources(app PRIVATE ${app_src})\ntarget_include_directories(app PRIVATE src)\n\nadd_subdirectory(test_cases)\n```\n\n----------------------------------------\n\nTITLE: Board Control Event Flow Table\nDESCRIPTION: Table showing board-level event handling including power management events and module state events. Maps various input events from multiple source modules to board module processing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n+-----------------------------------------------+------------------------+-------------+------------------------+---------------------------------------------+\n| Source Module                                 | Input Event            | This Module | Output Event           | Sink Module                                 |\n+===============================================+========================+=============+========================+=============================================+\n| :ref:`nrf_desktop_module_state_event_sources` | ``module_state_event`` | ``board``   |                        |                                             |\n```\n\n----------------------------------------\n\nTITLE: Configuring VPR Timer Counter Reload Value in C\nDESCRIPTION: Functions to set the reload value for timers in reload mode. Available for both simple counters and combined 32-bit counter configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_cst_vtim_simple_counter_top_set()\nnrf_vpr_cst_vtim_combined_counter_top_set()\n```\n\n----------------------------------------\n\nTITLE: Checking Thread Node Status\nDESCRIPTION: Docker command to check the state of the Thread node running in the container.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nsudo docker exec -it otbr sh -c \"sudo ot-ctl state\"\n```\n\n----------------------------------------\n\nTITLE: West Build OpenThread Libraries\nDESCRIPTION: These commands are used to update the OpenThread libraries provided by the nrfxlib. The first command builds the nrf52840dk/nrf52840 board, and the second command installs the OpenThread libraries into the build directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840\n```\n\nLANGUAGE: console\nCODE:\n```\nwest build -d build/cli -t install_openthread_libraries\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Locator Tag Project\nDESCRIPTION: Adds the main source files to the application target including main.c, factory_reset.c, and fp_adv.c (Fast Pair advertisement functionality).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n  src/factory_reset.c\n  src/fp_adv.c\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler Function in C\nDESCRIPTION: This snippet demonstrates the implementation of an event handler function that processes events of a specific type in an event-driven system. The function checks if the event matches the specified type and handles the event data accordingly. Key functionality includes event type checking and casting to specific event data structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/app_event_manager.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#include \"sample_event.h\"\n\nstatic bool app_event_handler(const struct app_event_header *aeh)\n{\n\tif (is_sample_event(aeh)) {\n\n\t\t/* Accessing event data. */\n\t\tstruct sample_event *event = cast_sample_event(aeh);\n\n\t\tint8_t v1 = event->value1;\n\t\tint16_t v2 = event->value2;\n\t\tint32_t v3 = event->value3;\n\n\t\t/* Actions when received given event type. */\n\t\tfoo(v1, v2, v3);\n\n\t\treturn false;\n\t}\n\n\treturn false;\n}\n\nAPP_EVENT_LISTENER(sample_module, app_event_handler);\nAPP_EVENT_SUBSCRIBE(sample_module, sample_event);\n```\n\n----------------------------------------\n\nTITLE: Signing Application and Bootloader with MCUboot's imgtool (Console)\nDESCRIPTION: These commands use MCUboot's imgtool script to sign and merge an application with a bootloader. The script generates both .hex and .bin files with specific alignment, slot size, and header parameters. Users need to adjust the slot size, version, and key values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/nrf54l_signing_with_payload.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\npython3 ${ZEPHYR_BASE}/bootloader/mcuboot/scripts/imgtool.py sign --version <version> --align 16 --slot-size 0xac000 --pad-header --header-size 0x800 -k <key> app_and_flpr_merged.hex app_and_flpr_merged.signed.hex\npython3 ${ZEPHYR_BASE}/bootloader/mcuboot/scripts/imgtool.py sign --version <version> --align 16 --slot-size 0xac000 --pad-header --header-size 0x800 -k <key> app_and_flpr_merged.hex app_and_flpr_merged.signed.bin\n```\n\n----------------------------------------\n\nTITLE: Bluetooth State Power Management Table\nDESCRIPTION: Table documenting power management related event flow for Bluetooth state handling. Shows how ble_peer_events are processed and result in keep_alive and power_manager_restrict events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n+------------------------------+--------------------+------------------+----------------------------------+----------------------------------+\n| Source Module                | Input Event        | This Module      | Output Event                     | Sink Module                      |\n+==============================+====================+==================+==================================+==================================+\n| :ref:`nrf_desktop_ble_adv`   | ``ble_peer_event`` | ``ble_state_pm`` |                                  |                                  |\n```\n\n----------------------------------------\n\nTITLE: Shield Options for nRF7001 EK\nDESCRIPTION: Additional shield options required when building the sample for the nRF7001 EK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n-Dble_coex_SHIELD=\"nrf7002ek_nrf7001;nrf7002ek_coex\"\n-Dipc_radio_SHIELD=\"nrf7002ek_coex\"\n```\n\n----------------------------------------\n\nTITLE: Initializing High-Frequency Clock for ESB Communication\nDESCRIPTION: Configures and starts the high-frequency clock, which is a prerequisite for ESB radio communication. Ensures the clock is running before initiating radio transmission or reception.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/esb/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nNRF_CLOCK->EVENTS_HFCLKSTARTED = 0;\nNRF_CLOCK->TASKS_HFCLKSTART = 1;\nwhile (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0);\n```\n\n----------------------------------------\n\nTITLE: Console Output - CoAP Client Basic Response\nDESCRIPTION: Shows the basic terminal output when starting the CoAP client sample application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/coap_client/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nThe CoAP client sample started\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Gazell Device and Host Roles in C\nDESCRIPTION: Code example showing how to configure Gazell protocol parameters to emulate legacy Device role 2 and Host role 0 behavior. Sets up channel table, timeslot periods, and device channel selection policy.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/gazell/gzll.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n/* On Host and Device */\ntimeslots_per_channel = 2;\nchannel_table_size = 3;\nnrf_gzll_set_timeslot_period(GZLL_RX_PERIOD / 2);\nnrf_gzll_set_channel_table(my_channel_table, channel_table_size);\nnrf_gzll_set_timeslots_per_channel(timeslots_per_channel);\n/* On the Device */\nnrf_gzll_set_timeslots_per_channel_when_device_out_of_sync(channel_table_size*timeslots_per_channel);\nnrf_gzll_set_device_channel_selection_policy(NRF_GZLL_DEVICE_CHANNEL_SELECTION_POLICY_USE_SUCCESSFUL);\n```\n\n----------------------------------------\n\nTITLE: Appending Board Root Directory\nDESCRIPTION: This snippet appends the current source directory of the project to the BOARD_ROOT variable. It allows for proper referencing of board-specific files and configurations during the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_fuel_gauge/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND BOARD_ROOT ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Compiling External Memory Remote Source\nDESCRIPTION: Adds extmem_remote.c source file to the Zephyr build system for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/extmem/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources(extmem_remote.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Fast Pair Storage\nDESCRIPTION: The CMake script configures a custom Zephyr library named fp_storage, conditionally including source files and setting include directories based on various CONFIG_BT_FAST_PAIR_STORAGE_* options. It uses conditional logic to include different source files for handling fast pair storage scenarios and adjusts the exposure of private APIs via the include_priv directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fp_storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# Copyright (c) 2022 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\nzephyr_library_named(fp_storage)\n\nif(CONFIG_BT_FAST_PAIR_STORAGE_MANAGER)\n  zephyr_linker_sources(SECTIONS fp_storage_manager.ld)\n  target_sources(fp_storage PRIVATE fp_storage_manager.c)\nendif()\nif(CONFIG_BT_FAST_PAIR_STORAGE_AK_BACKEND_STANDARD)\n  target_sources(fp_storage PRIVATE fp_storage_ak.c)\nendif()\nif(CONFIG_BT_FAST_PAIR_STORAGE_AK_BACKEND_MINIMAL)\n  target_sources(fp_storage PRIVATE fp_storage_ak_minimal.c)\nendif()\nif(CONFIG_BT_FAST_PAIR_STORAGE_PN)\n  target_sources(fp_storage PRIVATE fp_storage_pn.c)\nendif()\nif(CONFIG_BT_FAST_PAIR_STORAGE_USER_RESET_ACTION)\n  target_sources(fp_storage PRIVATE fp_storage_user_reset_action.c)\nendif()\nif(CONFIG_BT_FAST_PAIR_STORAGE_FMDN_CLOCK)\n  target_sources(fp_storage PRIVATE fp_storage_clock.c)\nendif()\nif(CONFIG_BT_FAST_PAIR_STORAGE_FMDN_EIK)\n  target_sources(fp_storage PRIVATE fp_storage_eik.c)\nendif()\n\ntarget_include_directories(fp_storage PUBLIC include)\ntarget_include_directories(fp_storage PUBLIC ../include/common)\nif(CONFIG_BT_FAST_PAIR_STORAGE_EXPOSE_PRIV_API)\n  target_include_directories(fp_storage PUBLIC include_priv)\nelse()\n  target_include_directories(fp_storage PRIVATE include_priv)\nendif()\n\n# For strnlen()\nzephyr_library_compile_definitions(_POSIX_C_SOURCE=200809L)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IoT Library Build in CMake\nDESCRIPTION: This CMake snippet sets up the AWS IoT library build for the Nordic nRF Connect SDK. It creates a Zephyr library and specifies the source file to be compiled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/aws_iot/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tsrc/aws_iot.c\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Immediate Rendering Flag with Shell Command\nDESCRIPTION: Command to set the immediate rendering flag for a subgroup, which controls whether audio should be rendered immediately upon reception.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnac immediate <0/1> <BIG index> <Subgroup index>\n```\n\n----------------------------------------\n\nTITLE: Terminating Thread Radio Transmission\nDESCRIPTION: Cancels the ongoing radio transmission that was previously started. This command should be used to stop the test after gathering the required data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/thread_radio_testing.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncancel\n```\n\n----------------------------------------\n\nTITLE: Defining SPI Controller Peripheral Project\nDESCRIPTION: This snippet defines the project 'spi_controller_peripheral' within the CMake configuration, which will compile the source files for the SPI controller tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/spi/spi_controller_peripheral/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(spi_controller_peripheral)\n```\n\n----------------------------------------\n\nTITLE: Applying temporary Kconfig changes via command line\nDESCRIPTION: Command to run menuconfig for temporary Kconfig changes when programming from the command line.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/kconfig/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -t menuconfig\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package with CMake\nDESCRIPTION: This snippet sets the required minimum version for CMake and finds the Zephyr package necessary for this project. It uses an environment variable to locate the Zephyr base directory, ensuring that the required components are available for the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/empty_net_core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Erasing Network Core UICR with nrfutil\nDESCRIPTION: This command is used to erase the UICR for the radio core of the nRF54H20 SoC. It should be executed if the sample uses the radio core and requires the nrfutil tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/nRF54H20_erase_UICR.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device recover --core Network\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion for DM RPC Support in CMake\nDESCRIPTION: Conditionally adds the RPC subdirectory to the build when the Distance Measurement module's RPC functionality is enabled via CONFIG_DM_MODULE_RPC configuration option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_DM_MODULE_RPC rpc)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for NFC RPC T2T Client Test\nDESCRIPTION: Sets up CMake project configuration including version requirements, dependencies, source files, include directories, and linker options. Enforces single-threaded processing for nRF RPC commands through linker wrapping.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nfc/rpc/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nfc_rpc_t2t_client_test)\n\nFILE(GLOB app_sources src/*.c)\n\ntarget_include_directories(app PRIVATE\n  # Needed to access OpenThread RPC command IDs.\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/nfc/rpc/common\n  ../common\n)\n\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ../common/nrf_rpc_single_thread.c\n)\n\n# Enforce single-threaded nRF RPC command processing.\ntarget_link_options(app PUBLIC\n  -Wl,--wrap=nrf_rpc_os_init,--wrap=nrf_rpc_os_thread_pool_send\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic SDK Project\nDESCRIPTION: Sets up the basic CMake configuration for a Nordic Semiconductor project. Specifies minimum CMake version, finds the Zephyr package, and adds the main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_rscs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet finds the Zephyr package required for building the application and ensures it is available in the specified path. It is essential for resolving dependencies and linking the appropriate libraries during the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/boards/nordic/spis_wakeup/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: CDDL Decoder Generation Command\nDESCRIPTION: Creates a custom command to generate decoder files using zcbor.py script. Generates C source and header files from CDDL specifications with specified entry types and maximum quantity settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dfu/fmfu_fdev/cddl/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${decode_c} ${decode_h} ${types_h}\n  COMMAND\n  ${PYTHON_EXECUTABLE}\n  ${ZEPHYR_ZCBOR_MODULE_DIR}/zcbor/zcbor.py\n  code\n  -c ${cddl_file}\n  --default-max-qty 128 # TNSW-33521\n  --oc ${decode_c}\n  --oh ${decode_h}\n  --oht ${types_h}\n  -t ${entry_types}\n  -d # Decode\n  COMMAND\n  ${CMAKE_COMMAND} -DFILES=\"${decode_c}\\;${decode_h}\\;${types_h}\" -P ${license}\n  COMMENT\n  \"Generating files based on ${cddl_file}\"\n  DEPENDS ${license} ${cddl_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for JSON Testing in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up a project for JSON testing in the nRF Connect SDK. It includes necessary packages, configures source files, and sets up include directories and compiler options for AWS FOTA and HTTP parsing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/aws_fota/aws_fota_json/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(json)\n\ntest_runner_generate(src/main.c)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntarget_sources(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/aws_fota/src/aws_fota_json.c\n  ${ZEPHYR_BASE}/subsys/net/lib/http/http_parser_url.c\n  )\n\ntarget_include_directories(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/aws_fota/include/\n  ${ZEPHYR_BASE}/include/zephyr/net/http/\n  )\n\n# Do this in a non-standard way as the Kconfig options of \"aws_jobs/Kconfig\"\n# is not executed. Hence these can not be set through prj.conf.\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_DOWNLOADER_MAX_HOSTNAME_SIZE=1024\n  -DCONFIG_DOWNLOADER_MAX_FILENAME_SIZE=1024\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake project for nRF Cloud Init/Uninit Test\nDESCRIPTION: Initializes the CMake project, sets the minimum required version, finds the Zephyr package, and defines the project name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/cloud/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_cloud_init_uninit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Documentation Set in CMake\nDESCRIPTION: Function to add a new Doxygen documentation set with configurable standalone mode. Creates build targets for running Doxygen and cleaning artifacts.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_doxygen_docset name sources version)\n  cmake_parse_arguments(DOXYGEN \"STANDALONE\" \"\" \"\" ${ARGN})\n  set(DOCSET_BUILD_DIR ${CMAKE_BINARY_DIR}/html/${name})\n  set(DOCSET_SOURCE_BASE ${sources})\n  set(DOCSET_VERSION ${version})\n\n  if(NOT DOXYGEN_STANDALONE)\n    set(SUFFIX \"-doxygen\")\n    set(DOCSET_BUILD_DIR ${DOCSET_BUILD_DIR}/doxygen)\n  endif()\n\n  configure_file(${CMAKE_CURRENT_LIST_DIR}/${name}/${name}.doxyfile.in ${CMAKE_BINARY_DIR}/${name}.doxyfile)\n\n  add_custom_target(\n    ${name}${SUFFIX}\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${DOCSET_BUILD_DIR}\n    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_BINARY_DIR}/${name}.doxyfile\n    USES_TERMINAL\n    COMMENT \"Building ${name} Doxygen docset...\"\n  )\n\n  add_custom_target(\n    ${name}${SUFFIX}-clean\n    COMMAND ${CMAKE_COMMAND} -E rm -rf ${DOCSET_BUILD_DIR}\n  )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Device 2 Console Output for DECT NR+ PHY Communication\nDESCRIPTION: Sample console output showing the transmission and reception of DECT NR+ messages from Device 2. The device transmits counter values and receives messages from Device 1 with associated RSSI values until reaching the configured maximum number of transmissions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/hello_dect/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK v3.5.99-ncs1 ***\n[00:00:00.407,287] <inf> app: Dect NR+ PHY Hello sample started\n[00:00:00.719,238] <inf> app: Dect NR+ PHY initialized, device ID: 67890\n[00:00:00.719,268] <inf> app: Transmitting 0\n[00:00:02.254,211] <inf> app: Received header from device ID 12345\n[00:00:02.254,547] <inf> app: Received data (RSSI: -54.5): Hello DECT! 3\n[00:00:05.725,646] <inf> app: Transmitting 1\n[00:00:07.260,620] <inf> app: Received header from device ID 12345\n[00:00:07.260,955] <inf> app: Received data (RSSI: -54.5): Hello DECT! 4\n...\n[00:02:10.885,284] <inf> app: Transmitting 26\n[00:02:12.420,318] <inf> app: Received header from device ID 12345\n[00:02:12.420,654] <inf> app: Received data (RSSI: -54.5): Hello DECT! 29\n[00:02:15.891,693] <inf> app: Transmitting 27\n[00:02:20.898,071] <inf> app: Transmitting 28\n[00:02:25.904,449] <inf> app: Transmitting 29\n[00:02:25.904,541] <inf> app: Reached maximum number of transmissions (30)\n[00:02:25.904,571] <inf> app: Shutting down\n[00:02:25.921,325] <inf> app: Bye!\n```\n\n----------------------------------------\n\nTITLE: Adding a DFU Cache Partition to External Flash\nDESCRIPTION: A device tree snippet that demonstrates how to add a DFU cache partition to external flash memory. This example creates partition number 1 with a size of 1024 kilobytes at offset 0 in the mx25uw63 flash memory device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_push.rst#2025-04-21_snippet_1\n\nLANGUAGE: dts\nCODE:\n```\n&mx25uw63 {\n   status = \"okay\";\n   partitions {\n      compatible = \"fixed-partitions\";\n      #address-cells = <1>;\n      #size-cells = <1>;\n\n      dfu_cache_partition_1: partition@0 {\n         reg = <0x0 DT_SIZE_K(1024)>;\n      };\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Device 1 Console Output for DECT NR+ PHY Communication\nDESCRIPTION: Sample console output showing the transmission and reception of DECT NR+ messages from Device 1. The device transmits counter values and receives messages from Device 2 with associated RSSI values until reaching the configured maximum number of transmissions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/hello_dect/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK v3.5.99-ncs1 ***\n[00:00:00.378,784] <inf> app: Dect NR+ PHY Hello sample started\n[00:00:00.691,375] <inf> app: Dect NR+ PHY initialized, device ID: 12345\n[00:00:00.691,406] <inf> app: Transmitting 0\n[00:00:05.697,784] <inf> app: Transmitting 1\n[00:00:10.704,193] <inf> app: Transmitting 2\n[00:00:14.186,553] <inf> app: Received header from device ID 67890\n[00:00:14.186,889] <inf> app: Received data (RSSI: -54.5): Hello DECT! 0\n[00:00:15.710,571] <inf> app: Transmitting 3\n[00:00:19.192,932] <inf> app: Received header from device ID 67890\n[00:00:19.193,267] <inf> app: Received data (RSSI: -54.5): Hello DECT! 1\n[00:00:20.716,949] <inf> app: Transmitting 4\n...\n[00:02:24.352,661] <inf> app: Received header from device ID 67890\n[00:02:24.352,996] <inf> app: Received data (RSSI: -54.5): Hello DECT! 26\n[00:02:25.876,739] <inf> app: Transmitting 29\n[00:02:25.876,831] <inf> app: Reached maximum number of transmissions (30)\n[00:02:25.876,831] <inf> app: Shutting down\n[00:02:25.893,554] <inf> app: Bye!\n```\n\n----------------------------------------\n\nTITLE: Updating Key Refresh Phase Using NCS API - C\nDESCRIPTION: This snippet demonstrates how to set the Key Refresh Phase for all nodes in a Bluetooth Mesh network. It sends the Config Key Refresh Phase Set message to transition the Key Refresh Phase, allowing nodes to decrypt messages using both the old and new keys during the changeover process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/node_removal.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n    static uint8_t send_key_refresh_phase_set(struct bt_mesh_cdb_node *node, void *user_data)\\n    {\\n        struct bt_mesh_cdb_subnet *subnet = user_data;\\n        uint8_t phase;\\n        uint8_t status;\\n        int err;\\n\\n        err = bt_mesh_cfg_cli_krp_set(node->net_idx, node->addr, subnet->net_idx, subnet->kr_phase,\\n                                      &status, &phase);\\n        if (err || status) {\\n            printk(\"Unable to set Key Refresh Phase on %#x (err %d, status %u)\\n\",\\n                   node->addr, err, status);\\n        } else {\\n            printk(\"Set Key Refresh Phase to %u on %#x\\n\", phase, node->addr);\\n        }\\n\\n        return BT_MESH_CDB_ITER_CONTINUE;\\n    }\\n\\n    static int update_key_refresh_phase(uint8_t net_idx, uint8_t phase) {\\n        struct bt_mesh_cdb_subnet *subnet;\\n\\n        subnet = bt_mesh_cdb_subnet_get(net_idx);\\n        if (!subnet) {\\n            printk(\"Unable to get subnet\\n\");\\n            return -EINVAL;\\n        }\\n\\n        subnet->kr_phase = phase;\\n        bt_mesh_cdb_subnet_store(subnet);\\n\\n        bt_mesh_cdb_node_foreach(send_key_refresh_phase_set, subnet);\\n        return 0;\\n    }\\n\\n    ...\\n\\n    update_key_refresh_phase(BT_MESH_NET_PRIMARY, BT_MESH_KR_PHASE_2);\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Envelope Info Library in CMake\nDESCRIPTION: Creates and configures a Zephyr interface library for SUIT envelope information processing. Sets up include directories and links required dependencies for the SUIT platform functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/envelope_info/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_interface_library_named(suit_envelope_info)\ntarget_include_directories(suit_envelope_info INTERFACE include)\ntarget_link_libraries(suit_envelope_info INTERFACE suit_platform_err)\n```\n\n----------------------------------------\n\nTITLE: Uploading Image Variant A (Console)\nDESCRIPTION: Command to upload the image variant A using nrfutil.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_40\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-envelope --serial-port COM7 --envelope-file root.suit --install --serve-images 60\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for DMIC Sample in nRF Connect SDK\nDESCRIPTION: Sets up the CMake build configuration for the DMIC (Digital Microphone) sample application. It specifies the minimum CMake version requirement, locates the Zephyr package using the ZEPHYR_BASE environment variable, names the project, and includes the main source file from the Zephyr samples directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/drivers/audio/dmic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(dmic)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/drivers/audio/dmic/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Adding MPSL FEM NRF21540 GPIO SPI Source Files to Zephyr Library in CMake\nDESCRIPTION: Adds the main MPSL FEM (Front-End Module) NRF21540 GPIO SPI implementation to the Zephyr library being built. This file implements the interface for controlling the nRF21540 radio front-end module using GPIO and SPI.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/fem/nrf21540_gpio_spi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(mpsl_fem_nrf21540_gpio_spi.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Heart Rate Service in C\nDESCRIPTION: This function configures the remote Heart Rate Service by writing specific values to the Heart Rate Control Point characteristic. The possible values for the Heart Rate Control Point characteristic are defined in the bt_hrs_client_cp_value enum.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/hrs_client.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nbt_hrs_client_control_point_write\n```\n\n----------------------------------------\n\nTITLE: Defining Peripheral Samples Section in reStructuredText\nDESCRIPTION: This snippet defines the 'Peripheral samples' section of the documentation using reStructuredText syntax. It includes a section header, a brief description, and a directive to include content from another file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/peripheral.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _peripheral_samples:\n\nPeripheral samples\n##################\n\nThis section lists available |NCS| samples for various peripherals and test tools.\n\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n\n|filter_samples_by_board|\n```\n\n----------------------------------------\n\nTITLE: Assigning Signed HEX Files to Partitions in CMake\nDESCRIPTION: Example of how to assign a cryptographically signed HEX file built by the sign_target build target to the root application using CMake global properties.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(\n  GLOBAL PROPERTY\n  app_PM_HEX_FILE # Must match \"*_PM_HEX_FILE\"\n  ${PROJECT_BINARY_DIR}/signed.hex\n)\n\nset_property(\n  GLOBAL PROPERTY\n  app_PM_TARGET # Must match \"*_PM_TARGET\"\n  sign_target\n)\n```\n\n----------------------------------------\n\nTITLE: Generic Three-Wire Coexistence Devicetree Configuration\nDESCRIPTION: Partial devicetree configuration for the generic three-wire coexistence interface that follows Thread Radio Coexistence recommendations. The snippet shows the beginning of the node definition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/wifi_coex.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n      nrf_radio_coex: radio_coex_three_wire {\n```\n\n----------------------------------------\n\nTITLE: Including Common API Header File for nRF70 Series Wi-Fi Driver\nDESCRIPTION: This snippet shows the header file inclusion for the common API of the nRF70 Series Wi-Fi driver. The common API is used for both normal operation and Radio Test mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/wifi/low_level_api.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include \"nrf_wifi/fw_if/umac_if/inc/fmac_structs_common.h\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Map File for Target Analysis\nDESCRIPTION: Example of how to provide a custom .map file for a specific target when using the ncs-sbom tool for build directory analysis.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n-d build_directory target.elf:file.map\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: Defines the name of the project as 'mqtt'. This name is used for various build system tasks and artifacts.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(mqtt)\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Reset Command Help\nDESCRIPTION: Command to display detailed help information about the nrfutil device reset command and its available options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_architecture_reset.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device reset --help\n```\n\n----------------------------------------\n\nTITLE: Generating Include Files for Thingy91 CDC ACM in CMake\nDESCRIPTION: This snippet sets the generation directory and uses CMake functions to generate include files for Thingy91 CDC ACM driver. It creates .cat and .inf files as C include files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/connectivity_bridge/src/disk/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(gen_dir ${ZEPHYR_BINARY_DIR}/include/generated/)\ngenerate_inc_file_for_target(app thingy91_cdc_acm.cat ${gen_dir}/thingy91_cdc_acm.cat.inc)\ngenerate_inc_file_for_target(app thingy91_cdc_acm.inf ${gen_dir}/thingy91_cdc_acm.inf.inc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Build with CMake\nDESCRIPTION: Creates a Zephyr library and adds board.c as a source file. Used for building board-specific functionality in the Nordic nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/boards/nordic/nrf52820dongle/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(board.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources in CMake for Nordic SDK\nDESCRIPTION: This snippet defines the sources that should be compiled for the application, specifically adding 'main.c' as a private target source. This is essential for ensuring that the necessary source files are utilized during the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_one_button/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot mode: Single application\nDESCRIPTION: Supports a single application image mode, utilized when only one application image is necessary and dual-bank operations are not required. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_8\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_MCUBOOT_MODE_SINGLE_APP\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_MCUBOOT_MODE_SINGLE_APP`\"\n```\n\n----------------------------------------\n\nTITLE: Installing New Firmware (Console)\nDESCRIPTION: Command to start the installation of the new firmware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_45\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit install --serial-port COM7 --serve-images 60 --images-path build/DFU/\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for Platform\nDESCRIPTION: This snippet adds include directories for the platform, making header files available to the compiler. It includes directories related to CRACEN PSA drivers and other relevant modules within the Zephyr RTOS environment. `ZEPHYR_NRF_MODULE_DIR` and `ZEPHYR_BASE` are assumed to be CMake variables pointing to the relevant directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf54l15_cpuapp/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(platform_s\n  PUBLIC\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/nrf_security/src/drivers/cracen/cracenpsa/include\n  )\n```\n\n----------------------------------------\n\nTITLE: Updating sysbuild.conf with Signing Keys\nDESCRIPTION: Configuration snippet to set private signing keys for MCUboot and NSIB in sysbuild.conf file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_psa_template/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nSB_CONFIG_BOOT_SIGNATURE_KEY_FILE=\"/home/user/ncs/_keys/mcuboot_priv.pem\"\nSB_CONFIG_SECURE_BOOT_SIGNING_KEY_FILE=\"/home/user/ncs/_keys/nsib_priv.pem\"\n```\n\n----------------------------------------\n\nTITLE: Uploading and Testing New Bootloader Image\nDESCRIPTION: mcumgr commands to list current images, upload a new bootloader image, and flag it for testing on next reboot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_psa_template/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nmcumgr --conntype serial --connstring dev=/dev/ttyACM1,baud=115200,mtu=512 image list\nmcumgr --conntype serial --connstring dev=/dev/ttyACM1,baud=115200,mtu=512 image upload \\\nbuild_update/signed_by_mcuboot_and_b0_s1_image.bin\nmcumgr --conntype serial --connstring dev=/dev/ttyACM1,baud=115200,mtu=512 image test <hash>\n```\n\n----------------------------------------\n\nTITLE: Checking Package Versions - macOS Console Command\nDESCRIPTION: Command to list installed packages and their versions on macOS using Homebrew package manager.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/recommended_versions.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nbrew list --versions\n```\n\n----------------------------------------\n\nTITLE: Zephyr Commit Log Command\nDESCRIPTION: This snippet provides a git command to retrieve a list of upstream Zephyr commits incorporated into the nRF Connect SDK since the most recent release. This is crucial for understanding the changes and updates that have been integrated from the Zephyr project into the nRF Connect SDK's Zephyr fork.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_11\n\nLANGUAGE: none\nCODE:\n```\n   git log --oneline a768a05e62 ^4bbd91a908\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Count with AT Parser in C\nDESCRIPTION: Shows how to retrieve the parameter count using the new AT Parser.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nsize_t count;\nat_parser_cmd_count_get(&at_parser, &count);\n```\n\n----------------------------------------\n\nTITLE: Installation Success Output\nDESCRIPTION: Expected output indicating the successful triggering of installation and serving of image files to the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n✔️ Installation triggered\n✔️ Serving images done\n✔️ Uploaded hci_ipc.bin\n✔️ Uploaded ab.bin\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for SPI Project with nRF Connect SDK and Zephyr\nDESCRIPTION: This CMake configuration sets up the build environment for an SPI project using the nRF Connect SDK and Zephyr RTOS. It specifies the minimum CMake version, finds the Zephyr package, sets up include directories, and defines the project sources including a common main file and a driver test file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/spi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nzephyr_include_directories(include)\n\nproject(spi)\n\ntarget_sources(app PRIVATE ./../common/main.c)\ntarget_sources(app PRIVATE src/driver_test.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Linker and Compiler Flags\nDESCRIPTION: Sets up linker flags to use nosys.specs for systems without OS support and defines compiler flags to handle missing syscall names, which is common in embedded environments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/hostap_crypto/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS \"--specs=nosys.specs -lnosys\")\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -DMISSING_SYSCALL_NAMES\")\n```\n\n----------------------------------------\n\nTITLE: Define Compile Definition for ICACHE\nDESCRIPTION: This snippet defines a compile definition `__ICACHE_PRESENT=1` for the platform, enabling the I-Cache functionality. This is a workaround because `nrf54l15_application.h` isn't defining `__ICACHE_PRESENT` directly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf54l15_cpuapp/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(platform_s\n  PRIVATE\n  __ICACHE_PRESENT=1\n  )\n```\n\n----------------------------------------\n\nTITLE: Repository Versioning Configuration in RST\nDESCRIPTION: RST table defining the component repositories and their corresponding version tags for the nRF Connect SDK v0.3.0 release.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-0.3.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n\n   * - Component\n     - Tag\n   * - `sdk-nrf <https://github.com/nrfconnect/sdk-nrf>`_\n     - v0.3.0\n   * - `nrfxlib <https://github.com/nrfconnect/nrfxlib>`_\n     - v0.3.0\n   * - `sdk-zephyr <https://github.com/nrfconnect/sdk-zephyr>`_\n     - v1.13.99-ncs2\n   * - `sdk-mcuboot <https://github.com/nrfconnect/sdk-mcuboot>`_\n     - v1.2.99-ncs2\n```\n\n----------------------------------------\n\nTITLE: Getting best CMD RX antenna ID with lgetbestrxantenna command in Shell\nDESCRIPTION: Retrieves the last best antenna selected for RX operations by the antenna diversity algorithm on the CMD device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\ncustom lgetbestrxantenna\n```\n\n----------------------------------------\n\nTITLE: Defining File Path in reStructuredText\nDESCRIPTION: This snippet demonstrates how to reference a file path in reStructuredText documentation using the :file: role.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:file:`west.yml`\n```\n\n----------------------------------------\n\nTITLE: XPING Command Syntax\nDESCRIPTION: AT command syntax for sending ICMP Echo Requests. Supports configuring the target host, buffer size, timeout, count, interval, and PDN parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/ICMP_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT\nCODE:\n```\n#XPING=<url>,<length>,<timeout>[,<count>[,<interval>[,<pdn>]]]\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version and Zephyr Integration\nDESCRIPTION: Sets the minimum required CMake version and finds the Zephyr build system, which is essential for Nordic nRF SDK projects. Establishes the project name as 'qdec_sensor'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/sensor/qdec/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(qdec_sensor)\n```\n\n----------------------------------------\n\nTITLE: Adding Startup Command Source Files to Application\nDESCRIPTION: Adds the startup command module source files to the application build target. These include controller, shell interface, and settings components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/startup_cmd/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/startup_cmd_ctrl.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/startup_cmd_shell.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/startup_cmd_settings.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot Hardware Downgrade Prevention in CMake\nDESCRIPTION: Sets configuration options for MCUboot hardware downgrade prevention, including enabling the feature and setting counter slots and values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(SB_CONFIG_MCUBOOT_HARDWARE_DOWNGRADE_PREVENTION)\n  set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_HARDWARE_DOWNGRADE_PREVENTION y)\n  set_config_int(${DEFAULT_IMAGE} CONFIG_MCUBOOT_HW_DOWNGRADE_PREVENTION_COUNTER_SLOTS ${SB_CONFIG_MCUBOOT_HW_DOWNGRADE_PREVENTION_COUNTER_SLOTS})\n  set_config_int(${DEFAULT_IMAGE} CONFIG_MCUBOOT_HW_DOWNGRADE_PREVENTION_COUNTER_VALUE ${SB_CONFIG_MCUBOOT_HW_DOWNGRADE_PREVENTION_COUNTER_VALUE})\n\n  set_config_bool(mcuboot CONFIG_MCUBOOT_HW_DOWNGRADE_PREVENTION y)\n  set_config_bool(mcuboot CONFIG_SECURE_BOOT_STORAGE y)\n  set_config_bool(mcuboot CONFIG_SECURE_BOOT_CRYPTO y)\nelse()\n  set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUBOOT_HARDWARE_DOWNGRADE_PREVENTION n)\n  set_config_bool(mcuboot CONFIG_MCUBOOT_HW_DOWNGRADE_PREVENTION n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Bluetooth Mesh Model Operation Callback\nDESCRIPTION: Updated model opcode callback signature to return error codes for failed message processing. Part of Bluetooth mesh model migration changes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.7.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbt_mesh_model_op.func\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for Modem Attestation Token\nDESCRIPTION: Creates and configures a Zephyr library for the modem attestation token functionality. Adds the modem_attest_token.c source file to the library build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/modem_attest_token/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(modem_attest_token.c)\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for Zephyr Commits\nDESCRIPTION: Shell command to display NCS specific commits and cherry-picked commits since v2.5 in the Zephyr fork\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v3.4.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: Delta UV Calculation\nDESCRIPTION: This code snippet shows the formula for calculating the represented Delta UV value from the Light CTL Delta UV state. It illustrates how the 16-bit signed integer Delta UV value is scaled to represent a value between -1 and +1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_temp_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"Represented Delta UV = (Light CTL Delta UV) / 32768\"\n```\n\n----------------------------------------\n\nTITLE: Displaying AMS Track Duration Update in RST\nDESCRIPTION: Shows how to format the output of an AMS Track Duration Update in RST documentation, including entity ID, attribute ID, flags, and duration value.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ams_client/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nAMS EU: 02,03,00 120.000\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Bluetooth RAS Request Source File\nDESCRIPTION: Uses zephyr_library_sources_ifdef to include ras_rreq.c source file when BT_RAS_RREQ configuration is enabled. This allows optional compilation of Bluetooth Remote Attestation Service request handling code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/ras/rreq/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(\n  CONFIG_BT_RAS_RREQ\n  ras_rreq.c)\n```\n\n----------------------------------------\n\nTITLE: Generating Test Binary Files for DFU Package\nDESCRIPTION: Creates two test binary files (update1.bin and update2.bin) with sample content for the DFU package.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/dfu/dfu_multi_image/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(WRITE\n  ${PROJECT_BINARY_DIR}/update1.bin\n  \"somecontent\"\n  )\n\nfile(WRITE\n  ${PROJECT_BINARY_DIR}/update2.bin\n  \"anothercontent\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Building for nRF54H20 DK (Single-core)\nDESCRIPTION: Command to build the nRF Machine Learning application for the nRF54H20 DK with sensor sampling done by the Application core (single-core application).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/app_desc.rst#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp -- -Dmachine_learning_SHIELD=pca63566 -DFILE_SUFFIX=\"singlecore\"\n```\n\n----------------------------------------\n\nTITLE: CoAP Transport Configuration\nDESCRIPTION: Conditionally includes CoAP transport implementation if CONFIG_DOWNLOADER_TRANSPORT_COAP is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/downloader/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(\n\tCONFIG_DOWNLOADER_TRANSPORT_COAP\n\tsrc/transports/coap.c\n)\n```\n\n----------------------------------------\n\nTITLE: Memfault Shell Commands Display\nDESCRIPTION: Shows available shell commands in the Memfault-enabled console interface, including core system commands and Memfault-specific functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/debug/memfault/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nuart:~$\n  clear              device             flash              help\n  history            kernel             log                mcuboot\n  mflt               mflt_nrf           nrf_clock_control  resize\n  shell\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Carrier Shell Commands\nDESCRIPTION: This snippet describes how to query help for available shell commands in the LwM2M carrier shell. Specifying a command group displays help related to that specific group, while omitting it shows general help.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/app_integration.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n> [*group*] help\n```\n\n----------------------------------------\n\nTITLE: LwM2M Carrier Configuration Options\nDESCRIPTION: Kconfig options for configuring the LwM2M carrier library behavior including timeouts, server settings, and carrier-specific options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/app_integration.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_LWM2M_CARRIER_SESSION_IDLE_TIMEOUT\nCONFIG_LWM2M_CARRIER_COAP_CON_INTERVAL\nCONFIG_LWM2M_CARRIER_CUSTOM_APN\nCONFIG_LWM2M_CARRIER_PDN_TYPE\nCONFIG_LWM2M_CARRIER_GENERIC\nCONFIG_LWM2M_CARRIER_VERIZON\nCONFIG_LWM2M_CARRIER_BELL_CA\nCONFIG_LWM2M_CARRIER_LG_UPLUS\nCONFIG_LWM2M_CARRIER_T_MOBILE\nCONFIG_LWM2M_CARRIER_SOFTBANK\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for NRF 802154 Platform\nDESCRIPTION: This snippet defines compile-time flags for the nrf-802154-platform target, ensuring that specific parameters related to peripherals are validated against MPSL when the configuration allows it. Also, it handles the configuration of precise acknowledgment timeout if specified.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/nrfxlib/nrf_802154/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MPSL)\n    target_compile_definitions(nrf-802154-platform PUBLIC NRF_802154_VERIFY_PERIPHS_ALLOC_AGAINST_MPSL=1)\n  endif()\n\n  if (CONFIG_NRF_802154_ACK_TIMEOUT_CUSTOM_US)\n    target_compile_definitions(zephyr-802154-interface\n      INTERFACE\n        NRF_802154_PRECISE_ACK_TIMEOUT_DEFAULT_TIMEOUT=${CONFIG_NRF_802154_ACK_TIMEOUT_CUSTOM_US})\n  endif ()\n```\n\n----------------------------------------\n\nTITLE: Limited Lifetime Watchdog Source Implementation\nDESCRIPTION: Example implementation of a limited lifetime watchdog source within a function scope. Shows creation, installation, periodic feeding, and automatic cleanup of the watchdog source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/watchdog.rst#2025-04-21_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nvoid DoTask()\n{\n    Nrf::Watchdog::WatchdogSource watchdogSource;\n\n    if(!Nrf::Watchdog::InstallSource(myWatchdog))\n    {\n        LOG_ERR(\"Watchdog source cannot be installed.\");\n    }\n\n    {\n        while(condition)\n        {\n            /* Do some time-critical operations and break loop */\n            watchdogSource.Feed();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Terminating Receiving Process\nDESCRIPTION: Command to stop the receiving process on the transmitting device after completion of the test.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/ble_radio_test_for_per_measurements.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ cancel\n```\n\n----------------------------------------\n\nTITLE: Building for Thingy:91 X\nDESCRIPTION: Series of commands to build and flash the Wi-Fi shell sample for Thingy:91 X using nRF5340 as host chip.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwest build -b thingy91x/nrf5340/cpuapp -- -DSB_CONFIG_THINGY91X_STATIC_PARTITIONS_NRF53_EXTERNAL_FLASH=y\n# Set SWD switch to nRF91 and check if you are connected to an nRF91:\nnrfutil device device-info\n# If you see deviceVersion as NRF9120_xxAA_REV3 in the above output, proceed with erasing:\nnrfutil device --recover\n# Flip the SWD switch back to nRF53.\nnrfutil device device-info\n# If you see deviceVersion as NRF5340_xxAA_REV1 in the above output, proceed with flashing:\nwest flash --erase\n```\n\n----------------------------------------\n\nTITLE: Mapping Group Key Set to Group ID on Light Bulb\nDESCRIPTION: Associates the group key set with the same group ID on the Light Bulb device as was done on the Light Switch.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/overview/group_communication.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./chip-tool groupkeymanagement write group-key-map '[{\"groupId\":\"30001\",\"groupKeySetID\":\"258\",\"fabricIndex\":\"1\"}]' 2 0\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option for nRF Trace Port\nDESCRIPTION: This snippet sets the CONFIG_NRF_TRACE_PORT CMake option using the value of CONFIG_NRF_TRACE_PORT. This allows TF-M to use the specified trace port for debugging.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_NRF_TRACE_PORT)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DCONFIG_NRF_TRACE_PORT=${CONFIG_NRF_TRACE_PORT}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Core Audio Source Files in CMake for nRF5340 Audio Project\nDESCRIPTION: This snippet adds the core audio source files to the application target. These files include audio I2S, USB audio, button handling, LED control, and audio synchronization timer implementations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/audio_i2s.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/audio_usb.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/button_handler.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/led.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/audio_sync_timer.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Nordic SDK\nDESCRIPTION: Sets up a CMake project for Nordic Semiconductor SDK with minimum CMake version requirement, Zephyr package dependency, and source file configuration. Includes a check to prevent building on unsupported nRF53 application core.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/mpsl/timeslot/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nif (CONFIG_SOC_NRF5340_CPUAPP)\n  message(FATAL_ERROR \"This sample is not supported on the nRF53 application core\")\nendif()\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\nzephyr_library_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Conditional Network Services Compilation\nDESCRIPTION: Configures conditional compilation for various network-related services and utilities using add_subdirectory_ifdef commands. Each service is only included if its corresponding CONFIG flag is defined.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_REST_CLIENT rest_client)\nadd_subdirectory_ifdef(CONFIG_AWS_JOBS aws_jobs)\nadd_subdirectory_ifdef(CONFIG_AWS_FOTA aws_fota)\nadd_subdirectory_ifdef(CONFIG_AWS_IOT aws_iot)\nadd_subdirectory_ifdef(CONFIG_AZURE_FOTA azure_fota)\nadd_subdirectory_ifdef(CONFIG_AZURE_IOT_HUB azure_iot_hub)\nadd_subdirectory_ifdef(CONFIG_DOWNLOAD_CLIENT download_client)\nadd_subdirectory_ifdef(CONFIG_DOWNLOADER downloader)\nadd_subdirectory_ifdef(CONFIG_FOTA_DOWNLOAD fota_download)\nadd_subdirectory_ifdef(CONFIG_ZZHC zzhc)\nadd_subdirectory_ifdef(CONFIG_ICAL_PARSER icalendar_parser)\nadd_subdirectory_ifdef(CONFIG_FTP_CLIENT ftp_client)\nadd_subdirectory_ifdef(CONFIG_COAP_UTILS coap_utils)\nadd_subdirectory_ifdef(CONFIG_LWM2M_CLIENT_UTILS lwm2m_client_utils)\nadd_subdirectory_ifdef(CONFIG_TLS_CREDENTIALS tls_credentials)\nadd_subdirectory_ifdef(CONFIG_SOFTAP_WIFI_PROVISION softap_wifi_provision)\nadd_subdirectory_ifdef(CONFIG_WIFI_READY_LIB wifi_ready)\nadd_subdirectory_ifdef(CONFIG_MQTT_HELPER mqtt_helper)\nadd_subdirectory_ifdef(CONFIG_NRF_PROVISIONING nrf_provisioning)\nadd_subdirectory_ifdef(CONFIG_NRF_MCUMGR_SMP_CLIENT mcumgr_smp_client)\nadd_subdirectory_ifdef(CONFIG_WIFI_NRF70 nrf70_fw_ext)\nadd_subdirectory_ifdef(CONFIG_WIFI_NM_WPA_SUPPLICANT hostap_crypto)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Integration Test Suite in nRF Connect SDK\nDESCRIPTION: This CMake script sets up the project configuration for an integration test suite invocation. It specifies the minimum CMake version, locates the Zephyr package, defines the project name, and includes a test template file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/invoke/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_invoke)\ninclude(../cmake/test_template.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Service Code for LG U+ Device\nDESCRIPTION: AT command to configure the Service Code registered for the device with LG U+. The code must be specified as a string in double quotes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_12\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"service_code\"[,<service_code>]\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the project, ensuring compatibility with the build system requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/timer/nrf_grtc_timer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Starting a UDP Server using AT command\nDESCRIPTION: This AT command starts a UDP server on a specified port. The response confirms that the server has started successfully.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n**AT#XUDPSVR=1,**\\ *1234*\n#XUDPSVR: 0,\"started\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This command specifies the minimum required CMake version for the project, ensuring compatibility with the CMake features used.  It prevents the project from being built with older, potentially incompatible CMake versions.  The version is set to 3.20.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/thread_coex/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Entering Recovery Mode (Console)\nDESCRIPTION: Command to modify the root manifest to enter recovery mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_34\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device x-write --address 0x0e1ef400 --value 0xFFFFFF --traits jlink\n```\n\n----------------------------------------\n\nTITLE: Adding Main Source File for QDEC Sensor Application\nDESCRIPTION: Adds the main source file for the QDEC sensor application from the Zephyr samples directory to the application target. Uses the PRIVATE keyword to limit source file visibility.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/sensor/qdec/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/sensor/qdec/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Including Sink Stream Headers - CMake\nDESCRIPTION: This snippet conditionally adds sink stream headers when CONFIG_MOCK_DIGEST_SINK is enabled. It prepares the test binary to handle stream functionalities effectively.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_DIGEST_SINK)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_STREAM)\n  target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/stream/stream_sinks/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for Hardware ID Component\nDESCRIPTION: Creates and configures a Zephyr library for the hardware ID functionality by specifying the source file hw_id.c to be compiled into the library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/hw_id/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(hw_id.c)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package and Configuring Watchdog Project\nDESCRIPTION: This snippet finds the required Zephyr package and sets up the CMake project named 'watchdog'. It ensures that necessary source files for the project are included from a specified directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/drivers/watchdog/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(watchdog)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/samples/drivers/watchdog/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Setting Floating Point ABI and Library Path\nDESCRIPTION: This snippet configures the floating-point ABI based on the CPU settings and sets the library path for LWM2M Carrier. It checks if the required library path exists, warning the user if it doesn’t.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/bin/lwm2m_carrier/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_FPU)\n  if(CONFIG_FP_HARDABI)\n    set(float_dir hard-float)\n  elseif(CONFIG_FP_SOFTABI)\n    set(float_dir softfp-float)\n  else()\n    assert(0 \"Unreachable code\")\n  endif()\nelse()\n  set(float_dir soft-float)\nendif()\n\nassert(GCC_M_CPU \"GCC_M_CPU must be set to find correct lib.\")\n\nset(lib_path lib/${GCC_M_CPU}/${float_dir})\n\nset(LWM2M_CARRIER_LIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${lib_path})\n\nif(NOT EXISTS ${LWM2M_CARRIER_LIB_PATH})\n  message(WARNING \"This combination of SoC and floating point ABI is not supported by liblwm2m_carrier.\\n                  (${LWM2M_CARRIER_LIB_PATH} doesn't exist.)\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking Flash IPUC Driver Creation Possibility in C\nDESCRIPTION: Checks if it's possible to create a flash IPUC driver based on the component ID, requiring a spare flash IPUC driver instance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nflash_component_ipuc_check()\n```\n\n----------------------------------------\n\nTITLE: Listing Files on SD Card with Shell Command\nDESCRIPTION: Command to list files and directories on the SD card. If no directory is specified, it lists the contents of the root directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnac file list [directory]\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Inclusion\nDESCRIPTION: Conditionally adds source files to the application target based on specific configuration options, enabling modular compilation of different event-related source files\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/common_events/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_APP_ACK_EVENT         app PRIVATE ack_event.c)\ntarget_sources_ifdef(CONFIG_APP_CONFIG_EVENT      app PRIVATE config_event.c)\ntarget_sources_ifdef(CONFIG_APP_CONTROL_EVENT     app PRIVATE control_event.c)\ntarget_sources_ifdef(CONFIG_APP_MEASUREMENT_EVENT app PRIVATE measurement_event.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories\nDESCRIPTION: Adds the source directory to the include path, allowing header files to be discovered during compilation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/udp/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(src)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Source Files for Print Shell Module in CMake\nDESCRIPTION: This CMake snippet configures the build settings for the Print Shell module. It adds the current directory to the include path and specifies the print_shell.c source file to be compiled into the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/print/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(.)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/print_shell.c)\n```\n\n----------------------------------------\n\nTITLE: Include HPF Configuration\nDESCRIPTION: This snippet includes a file containing HPF-related configuration if `SB_CONFIG_HPF` is enabled. It calls the `include_hpf()` function, presumably defined elsewhere.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\n \"if(SB_CONFIG_HPF)\n    include_hpf()\n  endif()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AT Command Custom Project\nDESCRIPTION: Sets up the CMake build configuration including minimum version requirement, Zephyr package dependency, project definition, and source file compilation. Requires CMake 3.20.0 or higher and the Zephyr RTOS framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/at_cmd_custom/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2022 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(at_cmd_custom)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Renaming Certificate Files for Flashing Using mv Command\nDESCRIPTION: Renames and organizes certificate files using the `mv` command to ensure they can be correctly flashed and processed on the device. Suitable for Unix-like environments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nmv certs/client-cert.pem certs/client-cert.pem.bk\nmv certs/client-cert-chain.pem certs/client-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Viewing TF-M Regression Test Output in Console\nDESCRIPTION: Sample console output showing the execution of TF-M regression tests for both secure and non-secure areas. The output displays test suite names, individual test cases with descriptions, and final summary of passed tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_regression_test/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nNon-Secure system starting...\n\n#### Execute test suites for the Secure area ####\n\n[...]\n\nRunning Test Suite PS reliability tests (TFM_PS_TEST_3XXX)...\n> Executing 'TFM_PS_TEST_3001'\nDescription: 'repetitive sets and gets in/from an asset'\n> Iteration 15 of 15\nTEST: TFM_PS_TEST_3001 - PASSED!\n> Executing 'TFM_PS_TEST_3002'\nDescription: 'repetitive sets, gets and removes'\n> Iteration 15 of 15\nTEST: TFM_PS_TEST_3002 - PASSED!\nTESTSUITE PASSED!\n\n[...]\n\n*** Secure test suites summary ***\nTest suite 'PSA protected storage S interface tests (TFM_PS_TEST_2XXX)' has  PASSED\nTest suite 'PS reliability tests (TFM_PS_TEST_3XXX)' has  PASSED\nTest suite 'PS rollback protection tests (TFM_PS_TEST_4XXX)' has  PASSED\nTest suite 'PSA internal trusted storage S interface tests (TFM_ITS_TEST_2XXX)' has  PASSED\nTest suite 'ITS reliability tests (TFM_ITS_TEST_3XXX)' has  PASSED\nTest suite 'Crypto secure interface tests (TFM_CRYPTO_TEST_5XXX)' has  PASSED\nTest suite 'Initial Attestation Service secure interface tests(TFM_ATTEST_TEST_1XXX)' has  PASSED\nTest suite 'Platform Service Secure interface tests(TFM_PLATFORM_TEST_1XXX)' has  PASSED\nTest suite 'IPC secure interface test (TFM_IPC_TEST_1XXX)' has  PASSED\n\n*** End of Secure test suites ***\n\n#### Execute test suites for the Non-secure area ####\n\n[...]\n\nRunning Test Suite Core non-secure positive tests (TFM_CORE_TEST_1XXX)...\n> Executing 'TFM_CORE_TEST_1001'\nDescription: 'Test service request from NS thread mode'\nTEST: TFM_CORE_TEST_1001 - PASSED!\n> Executing 'TFM_CORE_TEST_1003'\nDescription: 'Test the success of service init'\nTEST: TFM_CORE_TEST_1003 - PASSED!\n> Executing 'TFM_CORE_TEST_1007'\nDescription: 'Test secure service buffer accesses'\nTEST: TFM_CORE_TEST_1007 - PASSED!\n> Executing 'TFM_CORE_TEST_1008'\nDescription: 'Test secure service to service call'\nTEST: TFM_CORE_TEST_1008 - PASSED!\n> Executing 'TFM_CORE_TEST_1010'\nDescription: 'Test secure service to service call with buffer handling'\nTEST: TFM_CORE_TEST_1010 - PASSED!\n> Executing 'TFM_CORE_TEST_1015'\nDescription: 'Test service parameter sanitization'\nTEST: TFM_CORE_TEST_1015 - PASSED!\n> Executing 'TFM_CORE_TEST_1016'\nDescription: 'Test outvec write'\nTEST: TFM_CORE_TEST_1016 - PASSED!\nTESTSUITE PASSED!\n\n[...]\n\n*** Non-secure test suites summary ***\nTest suite 'PSA protected storage NS interface tests (TFM_PS_TEST_1XXX)' has  PASSED\nTest suite 'PSA internal trusted storage NS interface tests (TFM_ITS_TEST_1XXX)' has  PASSED\nTest suite 'Crypto non-secure interface test (TFM_CRYPTO_TEST_6XXX)' has  PASSED\nTest suite 'Platform Service Non-Secure interface tests(TFM_PLATFORM_TEST_2XXX)' has  PASSED\nTest suite 'Initial Attestation Service non-secure interface tests(TFM_ATTEST_TEST_2XXX)' has  PASSED\nTest suite 'QCBOR regression test(TFM_QCBOR_TEST_7XXX)' has  PASSED\nTest suite 'T_COSE regression test(TFM_T_COSE_TEST_8XXX)' has  PASSED\nTest suite 'Core non-secure positive tests (TFM_CORE_TEST_1XXX)' has  PASSED\nTest suite 'IPC non-secure interface test (TFM_IPC_TEST_1XXX)' has  PASSED\n\n*** End of Non-secure test suites ***\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Battery Level Notifications in C\nDESCRIPTION: Use this function to receive notifications from the connected Battery Service. The notifications are passed to the provided callback function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/bas_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbt_bas_subscribe_battery_level\n```\n\n----------------------------------------\n\nTITLE: Adding IPv6 Route for Thread Network\nDESCRIPTION: Command to add an IPv6 route for Thread network traffic through the OpenThread Border Router container.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nsudo ip -6 route add fd11:22::/64 dev otbr0 via fd11:db8:1::2\n```\n\n----------------------------------------\n\nTITLE: Checking nRF Util Version\nDESCRIPTION: Command to verify the installed version of nRF Util\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_gs.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnrfutil --version\n```\n\n----------------------------------------\n\nTITLE: Position Data Configuration Command\nDESCRIPTION: AT command to configure location telemetry values including latitude, longitude, altitude, timestamp and uncertainty.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIER=\"position\",<latitude>,<longitude>,<altitude>,<timestamp>,<uncertainty>\n```\n\n----------------------------------------\n\nTITLE: Flashing with Specific Runner\nDESCRIPTION: Command to flash an application using a specific runner (nrfjprog in this example) instead of the default runner.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/programming.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest flash -r nrfjprog\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdirectories for Nordic Semiconductor SDK Components\nDESCRIPTION: This CMake snippet adds subdirectories for various components of the Nordic Semiconductor SDK. It includes conditional additions for OpenThread RPC, Wi-Fi connectivity, OpenThread reporting, and OpenThread settings check based on configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(lib)\nadd_subdirectory_ifdef(CONFIG_OPENTHREAD_RPC openthread/rpc)\nadd_subdirectory_ifdef(CONFIG_L2_WIFI_CONNECTIVITY l2_wifi_if_conn)\nadd_subdirectory_ifdef(CONFIG_OPENTHREAD_REPORT openthread/report)\nadd_subdirectory_ifdef(CONFIG_NET_L2_OPENTHREAD openthread/settings_check)\n```\n\n----------------------------------------\n\nTITLE: Configuring MPSL Coexistence Library Sources\nDESCRIPTION: Conditionally includes source files for different MPSL coexistence implementations based on configuration flags. Handles 3-wire, 1-wire, BT 1-wire, nRF700x, and software coexistence implementations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/cx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_MPSL_CX_3WIRE OR\n   CONFIG_MPSL_CX_1WIRE OR\n   CONFIG_MPSL_CX_BT_1WIRE OR\n   CONFIG_MPSL_CX_NRF700X OR\n   CONFIG_MPSL_CX_SOFTWARE)\n   zephyr_library()\n\n   zephyr_library_sources_ifdef(CONFIG_MPSL_CX_3WIRE 3wire/mpsl_cx_3wire.c)\n   zephyr_library_sources_ifdef(CONFIG_MPSL_CX_BT_1WIRE 1wire/mpsl_cx_1wire.c)\n   zephyr_library_sources_ifdef(CONFIG_MPSL_CX_1WIRE 1wire/mpsl_cx_1wire.c)\n   zephyr_library_sources_ifdef(CONFIG_MPSL_CX_NRF700X nrf700x/mpsl_cx_nrf700x.c)\n   zephyr_library_sources_ifdef(CONFIG_MPSL_CX_SOFTWARE_RPC software/mpsl_cx_software_rpc.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Device Credentials for MQTT over Wi-Fi\nDESCRIPTION: This Python command uses the device_credentials_installer.py script to install device and server credentials for MQTT over Wi-Fi connectivity. It includes options for TLS Credentials Shell and local certificate generation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\npython3 device_credentials_installer.py --ca self_self_cert_serial_ca.pem --ca_key self_self_cert_serial_prv.pem --id_str \"device_id\" -s -d --verify --local_cert --cmd_type tls_cred_shell --port device_port\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion for ML App Event Proxy in CMake\nDESCRIPTION: Adds the event_proxy.c source file to the 'app' target if CONFIG_ML_APP_EVENT_PROXY is defined. This allows for conditional compilation of the event proxy functionality in the machine learning application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/common/src/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_ML_APP_EVENT_PROXY\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/event_proxy.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CAF Buttons PM Keep Alive Module in Kconfig\nDESCRIPTION: Kconfig options required to enable and use the CAF buttons power manager keep alive module. This includes enabling the module itself, the CAF buttons module, and the CAF power manager module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/buttons_pm_keep_alive.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_CAF_BUTTONS_PM_KEEP_ALIVE\nCONFIG_CAF_BUTTONS\nCONFIG_CAF_POWER_MANAGER\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for nRF7002 EK Shield with nRF7001 Emulation\nDESCRIPTION: CMake configuration to add support for the nRF7002 EK shield in emulation mode for the nRF7001 IC variant in a project's CMakeLists.txt file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf7002ek_dev_guide.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nset(SHIELD nrf7002ek_nrf7001)\n```\n\n----------------------------------------\n\nTITLE: Document Structure Definition\nDESCRIPTION: Sets up the document structure with table of contents and depth settings using reStructuredText directives.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/spake2p/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. contents::\n   :local:\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: C++ Implementation Removals for Matter App Task\nDESCRIPTION: Legacy code that needs to be removed from app_task.cpp when migrating to the new board module in Matter samples. Includes namespace definitions, LED constants, and event handlers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"app_config.h\"\n#include \"led_util.h\"\n#include \"board_util.h\"\n#include <dk_buttons_and_leds.h>\n\nnamespace {\nconstexpr size_t kAppEventQueueSize = 10;\nconstexpr uint32_t kFactoryResetTriggerTimeout = 6000;\n\nK_MSGQ_DEFINE(sAppEventQueue, sizeof(AppEvent), kAppEventQueueSize, alignof(AppEvent));\nk_timer sFunctionTimer;\n\nLEDWidget sStatusLED;\n#if NUMBER_OF_LEDS == 2\nFactoryResetLEDsWrapper<1> sFactoryResetLEDs{ { FACTORY_RESET_SIGNAL_LED } };\n#else\nFactoryResetLEDsWrapper<3> sFactoryResetLEDs{ { FACTORY_RESET_SIGNAL_LED, FACTORY_RESET_SIGNAL_LED1,\n\t\tFACTORY_RESET_SIGNAL_LED2 } };\n#endif\n\nbool sIsNetworkProvisioned = false;\nbool sIsNetworkEnabled = false;\nbool sHaveBLEConnections = false;\n} /* namespace */\n\nnamespace LedConsts {\nnamespace StatusLed {\n  namespace Unprovisioned {\n    constexpr uint32_t kOn_ms{ 100 };\n    constexpr uint32_t kOff_ms{ kOn_ms };\n  } /* namespace Unprovisioned */\n  namespace Provisioned {\n    constexpr uint32_t kOn_ms{ 50 };\n    constexpr uint32_t kOff_ms{ 950 };\n  } /* namespace Provisioned */\n} /* namespace StatusLed */\n} /* namespace LedConsts */\n\nvoid AppTask::ButtonEventHandler(uint32_t buttonState, uint32_t hasChanged)\n{\n  AppEvent button_event;\n  button_event.Type = AppEventType::Button;\n\n  if (FUNCTION_BUTTON_MASK & hasChanged) {\n    button_event.ButtonEvent.PinNo = FUNCTION_BUTTON;\n    button_event.ButtonEvent.Action =\n      static_cast<uint8_t>((FUNCTION_BUTTON_MASK & buttonState) ? AppEventType::ButtonPushed :\n                        AppEventType::ButtonReleased);\n    button_event.Handler = FunctionHandler;\n    PostEvent(button_event);\n  }\n}\n\nvoid AppTask::FunctionTimerTimeoutCallback(k_timer *timer)\n{\n  if (!timer) {\n    return;\n  }\n\n  AppEvent event;\n  event.Type = AppEventType::Timer;\n  event.TimerEvent.Context = k_timer_user_data_get(timer);\n  event.Handler = FunctionTimerEventHandler;\n  PostEvent(event);\n}\n\nvoid AppTask::FunctionTimerEventHandler(const AppEvent &)\n{\n  if (Instance().mFunction == FunctionEvent::FactoryReset) {\n    Instance().mFunction = FunctionEvent::NoneSelected;\n    LOG_INF(\"Factory Reset triggered\");\n\n    sStatusLED.Set(true);\n    sFactoryResetLEDs.Set(true);\n\n    chip::Server::GetInstance().ScheduleFactoryReset();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package for Nordic Semiconductor Project\nDESCRIPTION: Locates the Zephyr package, which is required for the project. It uses the ZEPHYR_BASE environment variable as a hint for the package location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/llpm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Setting Device Product ID for Matter\nDESCRIPTION: This snippet describes how to set the product identifier using the `CONFIG_CHIP_DEVICE_PRODUCT_ID` Kconfig option. This identifier is assigned by the product manufacturer.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_18\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_DEVICE_PRODUCT_ID`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure IoT Hub Zephyr Library in CMake\nDESCRIPTION: Configures the Azure IoT Hub library for Zephyr, including source files and include directories. The file conditionally includes Device Provisioning Service (DPS) functionality based on configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/azure_iot_hub/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(\n\tsrc/azure_iot_hub.c\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Device Vendor ID for Matter\nDESCRIPTION: This snippet describes how to set the device manufacturer identifier using the `CONFIG_CHIP_DEVICE_VENDOR_ID` Kconfig option. This identifier is assigned by the Connectivity Standards Alliance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_17\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_DEVICE_VENDOR_ID`\"\n```\n\n----------------------------------------\n\nTITLE: Device Registration - Coiote Device Management\nDESCRIPTION: Detailed instructions for registering an LwM2M device to the Coiote Device Management server using pre-shared key authentication, with options for direct server connection or bootstrap server\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/lwm2m_common_server_setup.txt#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nEndpoint - urn\\:imei\\:*your Device IMEI*\nFriendly Name - *recognizable name*\nSecurity mode - psk (Pre-Shared Key)\nKey - your key (for example, \"000102030405060708090a0b0c0d0e0f\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Rotating Device ID for Matter\nDESCRIPTION: This snippet describes how to enable the rotating device identifier feature using the `CONFIG_CHIP_ROTATING_DEVICE_ID` Kconfig option. This provides an additional unique identifier that changes periodically to protect against long-term tracking.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_21\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_ROTATING_DEVICE_ID`\"\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Test Binary\nDESCRIPTION: This snippet specifies the source files that will be compiled into the test binary. These files include the main test file (src/main.c), platform-specific code (suit_plat_check_image_match_sdfw_specific.c), and generic platform code (suit_plat_check_image_match.c and suit_plat_error_convert.c).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_check_image_match/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/sdfw/src/suit_plat_check_image_match_sdfw_specific.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_check_image_match.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_error_convert.c\n)\n```\n\n----------------------------------------\n\nTITLE: Starting SUPL Session with supl_session Function in C\nDESCRIPTION: The supl_session function initiates the SUPL session. It is called with a copy of the nrf_modem_gnss_agnss_data_frame data received from the GNSS module. The function generates necessary parameters such as supl_session_ctx_t, lte_params_t, and device_id, which are then used to start the SUPL session.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/supl_os_client.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n\"The application can then begin the SUPL session by calling the :c:func:`supl_session` function with a copy of the :c:type:`nrf_modem_gnss_agnss_data_frame` data that was received through the A-GNSS data request event from the GNSS module.\"\n```\n\n----------------------------------------\n\nTITLE: Full Zephyr Logs Example\nDESCRIPTION: Example output of full Zephyr logs showing timestamps, severity levels, and module names with corresponding messages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/logging.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n[00013022] <dbg> sample_app: Debug message'\n[00013023] <inf> sample_app: Info message'\n[00013023] <wrn> sample_app: Warning message'\n[00013023] <err> sample_app: Error message'\n```\n\n----------------------------------------\n\nTITLE: Displaying AMS Entity Update Output in RST\nDESCRIPTION: Demonstrates how to format the output of an AMS Entity Update in RST documentation, including entity ID, attribute ID, flags, and value interpretation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ams_client/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nAMS EU: 00,01,00 0,0.0,0.000\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Queue Thread Stack Size in Kconfig\nDESCRIPTION: Sets the stack size (in bytes) for the message queue processing thread of the sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_MESSAGE_THREAD_STACK_SIZE\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for SoftAP Wi-Fi Provisioning Sample Project\nDESCRIPTION: Sets up the CMake build configuration for a SoftAP Wi-Fi provisioning sample application. It requires CMake 3.20.0 or higher, locates the Zephyr package using the ZEPHYR_BASE environment variable, and adds the main.c source file to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/provisioning/softap/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(softap_wifi_provision_sample)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Bluetooth Mesh Source Files in CMake\nDESCRIPTION: Conditionally adds Bluetooth Mesh source files when the BT_MESH configuration is enabled. This includes mesh core functionality, model implementations, and model handlers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/bluetooth/tester/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_BT_MESH)\ntarget_sources(app PRIVATE src/mesh.c)\ntarget_sources(app PRIVATE src/mmdl.c)\ntarget_sources(app PRIVATE src/model_handler.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: UDP Send Command Response Syntax\nDESCRIPTION: Response syntax for the UDP send command showing the number of bytes sent.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_19\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPSEND: <size>\n```\n\n----------------------------------------\n\nTITLE: Adding sources based on CONFIG_BT_FAST_PAIR_FMDN_RING\nDESCRIPTION: This conditional block adds the 'ring.c' source file to the 'fmdn' library if the Kconfig option 'CONFIG_BT_FAST_PAIR_FMDN_RING' is enabled. The source is added as a PRIVATE source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(CONFIG_BT_FAST_PAIR_FMDN_RING)\n  target_sources(fmdn PRIVATE ring.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Building Multicore Idle Test on nRF5340 DK\nDESCRIPTION: This command builds the multicore idle test application for the nRF5340 development kit's application and network cores. It uses the 'west' build tool and specifies the appropriate board and test configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf5340dk/nrf5340/cpuapp -T benchmarks.multicore.idle.nrf5340dk_cpuapp_cpunet .\n```\n\n----------------------------------------\n\nTITLE: Defining Buttons Table in reStructuredText\nDESCRIPTION: reStructuredText table defining the functionality of various buttons including volume controls, playback controls, and configuration options\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/user_interface.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n+---------------+-----------------------------------------------------------------------------------------------------------+---------------------------------------------+\n| Button        | Function                                                                                                  | Applications                                |\n+===============+===========================================================================================================+=============================================+\n| **VOL-**      | Long-pressed during startup: Changes the headset to the left channel one.                                 | * :ref:`nrf53_audio_broadcast_sink_app`     |\n|               |                                                                                                           | * :ref:`nrf53_audio_unicast_server_app`     |\n|               +-----------------------------------------------------------------------------------------------------------+---------------------------------------------+\n|               | Pressed on the headset or the CIS gateway during playback: Turns the playback volume down.                | * :ref:`nrf53_audio_broadcast_sink_app`     |\n|               |                                                                                                           | * :ref:`nrf53_audio_unicast_server_app`     |\n|               |                                                                                                           | * :ref:`nrf53_audio_unicast_client_app`     |\n+---------------+-----------------------------------------------------------------------------------------------------------+---------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Console Output on Button 2 Press\nDESCRIPTION: Console output when Button 2 is pressed, showing Wi-Fi interface shutdown.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shutdown/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n[00:00:48.313,354] <inf> scan : Interface down\n```\n\n----------------------------------------\n\nTITLE: XPING Command Usage Example\nDESCRIPTION: Complete example showing XPING command usage with both IPv4 and IPv6 addresses, including response notifications and average time calculation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/ICMP_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT\nCODE:\n```\nAT#XPING=\"5.189.130.26\",45,5000,5,1000\nOK\n#XPING: 0.386 seconds\n#XPING: 0.341 seconds\n#XPING: 0.353 seconds\n#XPING: 0.313 seconds\n#XPING: 0.313 seconds\n#XPING: average 0.341 seconds\nAT#XGETADDRINFO=\"ipv6.google.com\"\n#XGETADDRINFO: \"2404:6800:4006:80e::200e\"\nOK\nAT#XPING=\"ipv6.google.com\",45,5000,5,1000\nOK\n#XPING: 0.286 seconds\n#XPING: 0.077 seconds\n#XPING: 0.110 seconds\n#XPING: 0.037 seconds\n#XPING: 0.106 seconds\n#XPING: average 0.123 seconds\nAT#XPING=\"5.189.130.26\",45,5000,5,1000,1\nOK\n#XPING: 1.612 seconds\n#XPING: 0.349 seconds\n#XPING: 0.334 seconds\n#XPING: 0.278 seconds\n#XPING: 0.278 seconds\n#XPING: average 0.570 seconds\n```\n\n----------------------------------------\n\nTITLE: Fixing Multi-Evaluation of k_fifo and k_lifo Data Parameters\nDESCRIPTION: When using CONFIG_SEGGER_SYSVIEW, the data parameter in k_fifo_put, k_fifo_alloc_put, k_lifo_put, and k_lifo_alloc_put macros is evaluated multiple times. This can cause problems if the data parameter increments a reference counter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nk_fifo_put\nk_fifo_alloc_put\nk_lifo_put\nk_lifo_alloc_put\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for LC3 Streamer Test in nRF5340 Audio Application\nDESCRIPTION: Sets up the CMake project for testing the LC3 streamer module. It includes necessary source files, defines compilation flags, and sets include directories for the nRF5340 audio application test environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/nrf5340_audio/lc3_streamer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(test_lc3_streamer)\n\n# lc3_streamer source must be added manually as kconfigs and CMakeLists in nRF5340 audio application\n# is not available from here.\ntarget_sources(app\n\tPRIVATE\n\tsrc/main.c\n\t${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules/lc3_streamer.c\n\t${ZEPHYR_NRF_MODULE_DIR}/tests/nrf5340_audio/fakes/lc3_file/lc3_file_fake.c\n\t${ZEPHYR_NRF_MODULE_DIR}/tests/nrf5340_audio/fakes/lc3_file/lc3_file_fake_data.c\n\t${ZEPHYR_NRF_MODULE_DIR}/tests/nrf5340_audio/fakes/k_work/k_work_fake.c\n)\n\ntarget_compile_definitions(app PRIVATE CONFIG_MODULE_SD_CARD_LC3_STREAMER_LOG_LEVEL=3)\ntarget_compile_definitions(app PRIVATE CONFIG_SD_CARD_LC3_STREAMER_STACK_SIZE=500)\ntarget_compile_definitions(app PRIVATE CONFIG_SD_CARD_LC3_STREAMER_THREAD_PRIO=4)\ntarget_compile_definitions(app PRIVATE CONFIG_SD_CARD_LC3_STREAMER_MAX_NUM_STREAMS=3)\ntarget_compile_definitions(app PRIVATE CONFIG_SD_CARD_LC3_STREAMER_MAX_FRAME_SIZE=251)\ntarget_compile_definitions(app PRIVATE CONFIG_FS_FATFS_MAX_LFN=40)\n\ntarget_include_directories(app PRIVATE\n\t${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src\n\t${ZEPHYR_NRF_MODULE_DIR}/tests/nrf5340_audio/fakes)\n```\n\n----------------------------------------\n\nTITLE: Setting AZURE_FOTA_APP_VERSION Compiler Definition\nDESCRIPTION: Defines AZURE_FOTA_APP_VERSION as a compiler definition if it was successfully extracted from Git.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/azure_fota/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(AZURE_FOTA_APP_VERSION)\n  zephyr_compile_definitions(\n    AZURE_FOTA_APP_VERSION=${AZURE_FOTA_APP_VERSION}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth-Related Directories in CMake\nDESCRIPTION: Adds include directories for Bluetooth and Bluetooth Mesh functionality from both Zephyr and nRF Connect SDK. This ensures all necessary headers are available during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/bluetooth/tester/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_include_directories(${ZEPHYR_BASE}/samples/bluetooth)\nzephyr_library_include_directories(${ZEPHYR_BASE}/subsys/bluetooth/mesh)\nzephyr_library_include_directories(${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh)\n```\n\n----------------------------------------\n\nTITLE: Required Tools Configuration in RST\nDESCRIPTION: RST table specifying the required tools and their versions needed to work with the nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-0.3.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n\n   * - Tool\n     - Version\n     - Download link\n   * - SEGGER J-Link\n     - V6.40\n     - `J-Link Software and Documentation Pack`_\n   * - nRF5x Command Line Tools\n     - v9.8.1\n     - * `nRF5x Command Line Tools Linux 32`_\n       * `nRF5x Command Line Tools Linux 64`_\n       * `nRF5x Command Line Tools Windows 32`_\n       * `nRF5x Command Line Tools Windows 64`_\n       * `nRF5x Command Line Tools OSX`_\n   * - dtc (Linux only)\n     - v1.4.6 or later\n     - :ref:`gs_installing_tools`\n```\n\n----------------------------------------\n\nTITLE: Adding OTA Image Confirmation Logic for nRF5340\nDESCRIPTION: Adds logic to confirm the new OTA image before initializing the factory data module on nRF5340 platforms to prevent crashes after OTA updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\n#include <platform/CHIPDeviceLayer.h>\n#include <zephyr/dfu/mcuboot.h>\n\n#ifndef CONFIG_SOC_SERIES_NRF53X\n  VerifyOrReturn(mcuboot_swap_type() == BOOT_SWAP_TYPE_REVERT);\n#endif\n\nOTAImageProcessorImpl &imageProcessor = GetOTAImageProcessor();\nif(!boot_is_img_confirmed()){\n  CHIP_ERROR err = System::MapErrorZephyr(boot_write_img_confirmed());\n  if (CHIP_NO_ERROR == err) {\n    imageProcessor.SetImageConfirmed();\n    ChipLogProgress(SoftwareUpdate, \"New firmware image confirmed\");\n  } else {\n    ChipLogError(SoftwareUpdate, \"Failed to confirm firmware image, it will be reverted on the next boot\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Socket Options in AT Commands\nDESCRIPTION: This AT command sets a socket option, specifically setting the receive timeout to 30 seconds. It demonstrates how to use the #XSOCKETOPT command to configure socket behavior.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_5\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XSOCKETOPT=1,20,30\nOK\n```\n\n----------------------------------------\n\nTITLE: MCUboot Shell Command Output\nDESCRIPTION: Example terminal output showing the mcuboot command that displays information about the primary boot area, including version, image size, and swap status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/smp_svr/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ mcuboot\nswap type: none\nconfirmed: 1\n\nprimary area (2):\n   version: 1.0.0+0\n   image size: 70136\n   magic: unset\n   swap type: none\n   copy done: unset\n   image ok: unset\n\nfailed to read secondary area (5) header: -5\nuart:~$\n```\n\n----------------------------------------\n\nTITLE: Initializing Downloader Library in C\nDESCRIPTION: This snippet demonstrates how to initialize the downloader library by calling the downloader_init function. It sets up a callback function, allocates a buffer, and configures the downloader.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/downloader.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint err;\n\nstatic int dl_callback(const struct downloader_evt *event);\nchar dl_buf[2048];\nstruct downloader dl;\nstruct downloader_cfg dl_cfg = {\n      .callback = dl_callback,\n      .buf = dl_buf,\n      .buf_size,\n};\n\nerr = downloader_init(&dl, &dl_cfg);\nif (err) {\n      printk(\"downloader init failed, err %d\\n\", err);\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Fast Pair Subsystem Linking\nDESCRIPTION: Conditionally adds and links additional subsystems like cryptography, storage, and FMDN (Find My Device Network) based on configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_BT_FAST_PAIR_CRYPTO)\n  add_subdirectory(fp_crypto)\n  target_link_libraries(fast_pair PRIVATE fp_crypto)\nendif()\n\nif(CONFIG_BT_FAST_PAIR_STORAGE)\n  add_subdirectory(fp_storage)\n  target_link_libraries(fast_pair PRIVATE fp_storage)\nendif()\n\nif(CONFIG_BT_FAST_PAIR_FMDN)\n  add_subdirectory(fmdn)\n  target_link_libraries(fast_pair PRIVATE fmdn)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining a Zephyr Library\nDESCRIPTION: This snippet defines a Zephyr library.  The `zephyr_library()` command creates the library, and `zephyr_library_sources()` specifies the C source file to be included in the library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/modem_jwt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library()\\nzephyr_library_sources(modem_jwt.c)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling MCUboot Bootloader with Sysbuild in nRF Connect SDK\nDESCRIPTION: Demonstrates how to enable the MCUboot bootloader for a Zephyr or nRF Connect SDK sample using sysbuild configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 zephyr/samples/hello_world -- -DSB_CONFIG_BOOTLOADER_MCUBOOT=y\n```\n\n----------------------------------------\n\nTITLE: Sample console output for Bluetooth ISO Combined BIS and CIS\nDESCRIPTION: Displays the console output of the sample, showing the initialization process, connection establishment, and data transmission over CIS and BIS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_combined_bis_and_cis/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n[00:00:00.454,589] <inf> bt_hci_core: HW Platform: Nordic Semiconductor (0x0002)\n[00:00:00.454,620] <inf> bt_hci_core: HW Variant: nRF53x (0x0003)\n[00:00:00.454,650] <inf> bt_hci_core: Firmware: Standard Bluetooth controller (0x00) Version ... Build ...\n[00:00:00.456,329] <inf> bt_hci_core: Identity: FD:DD:D6:88:AF:D4 (random)\n[00:00:00.456,359] <inf> bt_hci_core: HCI: version 5.4 (0x0d) revision ..., manufacturer 0x0059\n[00:00:00.456,390] <inf> bt_hci_core: LMP: version 5.4 (0x0d) subver ...\n[00:00:00.456,390] <inf> app_main:\nBluetooth ISO Combined BIS and CIS sample\n\nThe sample demonstrates data transfer over Bluetooth ISO\nCIS and BIS using the following topology:\n\n┌------┐     ┌-------┐      ┌--------┐\n|      |ISO  |  CIS  | ISO  |        |\n| CIS  ├----►|Central├-----►|BIS Sink|\n|Periph|CIS  |+ BIS  | BIS  |        |\n|      |     |Source |      |        |\n└------┘     └-------┘      └--------┘\n  (1)           (2)            (3)\nThe sample only operates as a device 2: Combined CIS Central + BIS Source\nPlease, use other samples as a CIS Peripheral (TX) and BIS Sink (RX) devices.\n\n[00:00:00.456,420] <inf> app_main: Starting combined CIS Central + BIS Source\n[00:00:00.459,777] <inf> app_bis_cis: CIS central started scanning for peripheral(s)\n[00:00:00.593,078] <inf> app_bis_cis: Connected: FB:DC:75:C0:18:0A (random)\n[00:00:00.593,597] <inf> app_bis_cis: Connecting ISO channel\n[00:00:00.600,189] <inf> app_bis_cis: BIS transmitter started\n[00:00:00.607,879] <inf> app_iso_tx: ISO TX Channel connected\n[00:00:00.608,459] <inf> app_iso_tx: Sent SDU, counter: 0\n[00:00:00.741,577] <inf> app_iso_rx: ISO RX Channel connected\n[00:00:01.449,615] <inf> app_iso_tx: Sent SDU, counter: 100\n[00:00:01.731,140] <inf> app_iso_rx: Received SDU: 100, empty SDU: 0, missed SDU: 0\n[00:00:02.449,645] <inf> app_iso_tx: Sent SDU, counter: 200\n[00:00:02.731,140] <inf> app_iso_rx: Received SDU: 200, empty SDU: 0, missed SDU: 0\n[00:00:03.449,615] <inf> app_iso_tx: Sent SDU, counter: 300\n[00:00:03.731,140] <inf> app_iso_rx: Received SDU: 300, empty SDU: 0, missed SDU: 0\n[00:00:04.449,615] <inf> app_iso_tx: Sent SDU, counter: 400\n[00:00:04.731,140] <inf> app_iso_rx: Received SDU: 400, empty SDU: 0, missed SDU: 0\n[00:00:05.449,645] <inf> app_iso_tx: Sent SDU, counter: 500\n```\n\n----------------------------------------\n\nTITLE: Stopping Continuous Tone Transmission\nDESCRIPTION: Command to stop the transmission of a continuous tone, which should only be used after a continuous tone transmission has been started.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test tx_tone 0\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for SUIT Decompression Filter Test in nRF Connect SDK\nDESCRIPTION: Sets up a CMake project for testing the SUIT decompression filter. It defines the minimum CMake version, finds the Zephyr package, sets the project name, includes a test template, generates an include file from compressed data, and links necessary libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/decompress_filter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_decompress_filter)\ninclude(../cmake/test_template.cmake)\n\ngenerate_inc_file_for_target(\n  app\n  ${ZEPHYR_NRFXLIB_MODULE_DIR}/tests/subsys/nrf_compress/decompression/dummy_data_input.txt.lzma\n  ${ZEPHYR_BINARY_DIR}/include/generated/dummy_data_input.inc\n  )\n\nzephyr_library_link_libraries(suit_stream_filters_interface)\nzephyr_library_link_libraries(suit_stream_sources_interface)\n```\n\n----------------------------------------\n\nTITLE: Enabling Fast Pair for Locator Tags in Kconfig\nDESCRIPTION: Configures Fast Pair for locator tag devices. This option selects the appropriate Fast Pair settings according to the locator tag use case requirements, activating necessary features and extensions while restricting unsupported ones.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_21\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_FAST_PAIR_USE_CASE_LOCATOR_TAG\n```\n\n----------------------------------------\n\nTITLE: Listing Open Sockets in MoSh\nDESCRIPTION: Shows how to list open sockets using the MoSh sock command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nsock list\n```\n\n----------------------------------------\n\nTITLE: Error Message - West Command Not Found\nDESCRIPTION: Example console output when the West command is not recognized due to incorrect command line environment setup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/updating.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest is not recognized as an internal or external command\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking and Linker Script Inclusion\nDESCRIPTION: Conditionally links MCUBOOT_BOOTUTIL library and includes a custom linker script based on configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_IMG_MANAGER)\n  zephyr_library_link_libraries(MCUBOOT_BOOTUTIL)\nendif()\n\nif(CONFIG_DESKTOP_CONFIG_CHANNEL_ENABLE)\n  zephyr_linker_sources(SECTIONS nrf_desktop.ld)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Swift Pair Module Event Structures\nDESCRIPTION: C structures used for handling Bluetooth peer operations and dongle peer events in the Swift Pair module\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/swift_pair_app.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nble_peer_operation_event\nble_dongle_peer_event\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT IPUC Interface Library\nDESCRIPTION: Creates and configures the main SUIT IPUC interface library with necessary include directories and dependencies. Links against suit_platform_err and suit_metadata libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/ipuc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_interface_library_named(suit_ipuc)\ntarget_include_directories(suit_ipuc INTERFACE include)\ntarget_link_libraries(suit_ipuc INTERFACE suit_platform_err)\ntarget_link_libraries(suit_ipuc INTERFACE suit_metadata)\n```\n\n----------------------------------------\n\nTITLE: Validating Secure Storage Configuration\nDESCRIPTION: Checks for incompatible configuration settings related to secure storage and partition management. Raises a fatal error if both ZMS store implementation and partition manager are enabled simultaneously.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/secure_storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_SECURE_STORAGE_ITS_STORE_IMPLEMENTATION_ZMS AND CONFIG_PARTITION_MANAGER_ENABLED)\n  message(FATAL_ERROR \"\n    CONFIG_SECURE_STORAGE_ITS_STORE_IMPLEMENTATION_ZMS is\n    not supported when partition manager is enabled.\n    \")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Platform-Specific Source Inclusion in CMake\nDESCRIPTION: This code snippet conditionally includes platform-specific source files for the 'app_battery' library. It checks configuration flags to determine whether to include sources for 'platform_dk' or 'platform_thingy'. If neither platform is supported, it raises a fatal error. Key dependencies are the configuration flags 'CONFIG_APP_PLATFORM_DK' and 'CONFIG_APP_PLATFORM_THINGY'. Expected behavior includes correct linking of sources based on configuration, with an error if no platform is supported.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/src/battery/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app_battery PRIVATE common.c)\n\nif(CONFIG_APP_PLATFORM_DK)\n  target_sources(app_battery PRIVATE platform_dk.c)\n  target_link_libraries(app_battery PRIVATE app_ui)\nelif(CONFIG_APP_PLATFORM_THINGY)\n  target_sources(app_battery PRIVATE platform_thingy.c)\nelse()\n  message(FATAL_ERROR \"Unsupported platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for the Application\nDESCRIPTION: This snippet adds the main source file for the application, enabling the build system to compile the indicated C source code in the specified path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_grtc/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Settings Loader Module\nDESCRIPTION: ReStructuredText documentation defining the settings loader module configuration and implementation details for nRF Desktop devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/settings_loader.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _nrf_desktop_settings_loader:\\n\\nSettings loader module\\n######################\\n\\n.. contents::\\n   :local:\\n   :depth: 2\\n\\nUse the settings loader module to trigger loading the data from non-volatile memory.\\nThe settings loader module is by default enabled, along with all of the required dependencies for every nRF Desktop device.\\n\\nModule events\\n*************\\n\\n.. include:: event_propagation.rst\\n    :start-after: table_settings_loader_start\\n    :end-before: table_settings_loader_end\\n\\n.. note::\\n    |nrf_desktop_module_event_note|\\n\\nConfiguration\\n*************\\n\\nSettings backend\\n================\\n\\nSettings load in a separate thread\\n==================================\\n\\nImplementation details\\n**********************\n```\n\n----------------------------------------\n\nTITLE: Set Common Radio Channel - Custom Command Usage\nDESCRIPTION: This command defines a common radio channel for both DUT and CMD devices using four octet arguments representing channel page and number. Example usage involves setting a specific channel.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncustom setchannel *<channel:3>* *<channel:2>* *<channel:1>* *<channel:0>*\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.20.0. This ensures that the build process uses a compatible CMake version with the project's requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_uarte/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories\nDESCRIPTION: This line adds the `memfault_config` directory to the include path for the Zephyr project. The `zephyr_include_directories` command is used to specify include directories that are specific to Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_mds/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(memfault_config)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Toolchain URL\nDESCRIPTION: Commands for configuring a custom toolchain URL source\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnrfutil sdk-manager config toolchain-index add *index-name* *custom_toolchain_URL*\nnrfutil sdk-manager config toolchain-index set *index-name*\n```\n\n----------------------------------------\n\nTITLE: Managing Partition Span Properties in NRF Connect SDK - YAML\nDESCRIPTION: This snippet demonstrates various span configurations for partitions using YAML in the NRF Connect SDK. It includes examples of valid and invalid span configurations and illustrates how the Partition Manager orders partitions based on span constraints. The dependencies include mcuboot, tfm, and app configurations that specify their placement or span lists, and the Partition Manager processes these configurations to determine valid partition orders.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmcuboot:\n   placement:\n      before: [tfm, app]\n\ntfm:\n   placement:\n      before: [app]\n\nfoo:\n   span: [mcuboot, app]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmcuboot:\n   placement:\n\ntfm:\n   placement:\n      after: [mcuboot]\n\napp:\n   placement:\n      after: [mcuboot]\n\nfoo:\n   span: [mcuboot, app]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmcuboot:\n   placement:\n\ntfm:\n   placement:\n      after: [mcuboot]\n\napp:\n   placement:\n      after: [mcuboot]\n\nfoo:\n   span: [mcuboot, app]\n\nbar:\n   span: [mcuboot, tfm]\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Peripheral CGMS Project in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build environment for a peripheral CGMS project. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, and adds the main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_cgms/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(peripheral_cgms)\n\ntarget_sources(app PRIVATE\n  src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional inclusion of power management code\nDESCRIPTION: Conditionally includes the `power_off.c` source file if either `CONFIG_SOC_NRF54H20_CPUFLPR` or `CONFIG_SOC_NRF54H20_ENGB_CPUFLPR` is defined. This is for specific nRF54H20 SoC configurations and includes a power mode handler for RISC-V.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_flpr/remote/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"if((DEFINED CONFIG_SOC_NRF54H20_CPUFLPR) OR (DEFINED CONFIG_SOC_NRF54H20_ENGB_CPUFLPR))\n\\tmessage(STATUS \\\"Power Mode handler for RISC V is included.\\\")\n\\ttarget_sources(app PRIVATE ../../common/power_off.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Destroying Radio Firmware for Variant A (Console)\nDESCRIPTION: Command to modify the radio firmware variant A to enter degraded mode in application variant B.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_29\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device x-write --address 0xe054000 --value 0xFFFFFF --core Network --traits jlink\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr RTOS package. It requires the package and uses the environment variable `ZEPHYR_BASE` as a hint for the package location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Checking for Multi-Image Build Requirement\nDESCRIPTION: Checks if the build is executed with sysbuild; if not, it raises a fatal error with a message prompting the user to add the necessary argument.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_usb/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options for Bluetooth Mesh Light Control Server\nDESCRIPTION: This snippet defines numerous compile options for the Bluetooth Mesh Light Control Server, including model counts, timing parameters, light levels, and regulatory settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/light_ctrl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_BT_MESH_MODEL_KEY_COUNT=5\n  -DCONFIG_BT_MESH_MODEL_GROUP_COUNT=5\n  -DCONFIG_BT_LOG_LEVEL=0\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV=1\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_RESUME_DELAY=0\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_TIME_MANUAL=5\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_OCCUPANCY_MODE=1\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_OCCUPANCY_DELAY=0\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_TIME_FADE_ON=1000\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_TIME_ON=60\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_TIME_FADE_PROLONG=5000\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_TIME_FADE_STANDBY_AUTO=5000\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_TIME_PROLONG=3\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_TIME_FADE_STANDBY_MANUAL=700\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_LVL_STANDBY=700\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_LVL_ON=20000\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_LVL_PROLONG=10000\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_REG=1\n  -DCONFIG_BT_MESH_LIGHT_CTRL_REG=1\n  -DCONFIG_BT_MESH_LIGHT_CTRL_REG_SPEC=1\n  -DCONFIG_BT_MESH_LIGHT_CTRL_REG_SPEC_INTERVAL=100\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_REG_KIU=250\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_REG_KID=25\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_REG_KPU=80\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_REG_KPD=80\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_REG_ACCURACY=2\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_REG_LUX_ON=500\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_REG_LUX_PROLONG=200\n  -DCONFIG_BT_MESH_LIGHT_CTRL_SRV_REG_LUX_STANDBY=100\n  -DCONFIG_BT_MESH_LIGHT_CTRL_AMB_LIGHT_LEVEL_TIMEOUT=20\n  -DCONFIG_BT_MESH_SENSOR_CHANNELS_MAX=1\n  -DCONFIG_BT_MESH_SENSOR_CHANNEL_ENCODED_SIZE_MAX=4\n  -DCONFIG_BT_MESH_USES_MBEDTLS_PSA=1\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet locates the Zephyr package required for the project build, utilizing CMake's find_package function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/shell_bt_nus/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Running data_collector.py to collect profiling data\nDESCRIPTION: This shows how to use the `data_collector.py` script to collect profiling data for a specified duration and dataset name. It connects to the device using RTT, retrieves the data, and saves it to files. The collected data can then be analyzed and visualized.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/nrf_profiler.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython3 data_collector.py 5 test1\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Module Documentation\nDESCRIPTION: RST toctree directive listing all available module documentation pages as subpages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/modules.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages:\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring Suit Stream Sources Interface in CMake\nDESCRIPTION: This code snippet defines the `suit_stream_sources_interface`, adds include directories, sets up linking to other interfaces, and configures conditional source inclusion for different SUIT components. Dependencies include Zephyr and specific SUIT configuration options. Inputs are configuration flags like CONFIG_SUIT_STREAM_SOURCE_CACHE, and outputs result in the inclusion of corresponding source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/stream/stream_sources/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(suit_stream_sources_interface)\ntarget_include_directories(suit_stream_sources_interface INTERFACE include)\ntarget_link_libraries(suit_stream_sources_interface INTERFACE suit_platform_err)\ntarget_link_libraries(suit_stream_sources_interface INTERFACE suit_stream_sinks_interface)\n\nzephyr_library()\n\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SOURCE_CACHE src/suit_dfu_cache_streamer.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SOURCE_MEMPTR src/suit_memptr_streamer.c)\n\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_IPC_REQUESTOR src/suit_ipc_streamer_requestor.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_IPC_PROVIDER src/suit_ipc_streamer_provider.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_FETCH_SOURCE_MGR src/suit_fetch_source_mgr.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SOURCE_EXTMEM src/suit_extmem_streamer.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_SOURCE_FLASH src/suit_flash_streamer.c)\nzephyr_library_sources(src/suit_generic_address_streamer.c)\n\nzephyr_library_link_libraries(suit_stream_sources_interface)\nzephyr_library_link_libraries(suit_memory_layout_interface)\nzephyr_library_link_libraries(suit_source_selector_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STREAM_SOURCE_CACHE suit_cache_interface)\n```\n\n----------------------------------------\n\nTITLE: Battery Charger Event Table in RST\nDESCRIPTION: Table showing event propagation for the Battery Charger module, including power, USB state, and wake-up events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. table_battery_charger_start\n\n+-----------------------------------------------+------------------------+---------------------+-------------------------+---------------------------------------------+\n| Source Module                                 | Input Event            | This Module         | Output Event            | Sink Module                                 |\n+===============================================+========================+=====================+=========================+=============================================+\n| :ref:`nrf_desktop_power_manager`              | ``power_down_event``   | ``battery_charger`` |                         |                                             |\n+-----------------------------------------------+------------------------+                     |                         |                                             |\n| :ref:`nrf_desktop_module_state_event_sources` | ``module_state_event`` |                     |                         |                                             |\n+-----------------------------------------------+------------------------+                     |                         |                                             |\n| :ref:`nrf_desktop_usb_state`                  | ``usb_state_event``    |                     |                         |                                             |\n+-----------------------------------------------+------------------------+                     |                         |                                             |\n| :ref:`nrf_desktop_ble_adv`                    | ``wake_up_event``      |                     |                         |                                             |\n+-----------------------------------------------+                        |                     |                         |                                             |\n| :ref:`nrf_desktop_buttons`                    |                        |                     |                         |                                             |\n+-----------------------------------------------+                        |                     |                         |                                             |\n| :ref:`nrf_desktop_hid_forward`                |                        |                     |                         |                                             |\n+-----------------------------------------------+                        |                     |                         |                                             |\n| :ref:`nrf_desktop_motion`                     |                        |                     |                         |                                             |\n+-----------------------------------------------+                        |                     |                         |                                             |\n| :ref:`nrf_desktop_power_manager`              |                        |                     |                         |                                             |\n+-----------------------------------------------+                        |                     |                         |                                             |\n| :ref:`nrf_desktop_wheel`                      |                        |                     |                         |                                             |\n+-----------------------------------------------+------------------------+                     +-------------------------+---------------------------------------------+\n|                                               |                        |                     | ``battery_state_event`` | :ref:`nrf_desktop_led_state`                |\n|                                               |                        |                     +-------------------------+---------------------------------------------+\n|                                               |                        |                     | ``module_state_event``  | :ref:`nrf_desktop_module_state_event_sinks` |\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Impulse Machine Learning Model URI\nDESCRIPTION: Configuration step to set the URI for a custom machine learning model using Kconfig option\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/edge_impulse/wrapper/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_EDGE_IMPULSE_URI=\"your_model_uri\"\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet specifies a minimum version for CMake and includes a command to find the Zephyr package, which is crucial for building applications in the Zephyr OS. The command uses the ZEPHYR_BASE environment variable to locate the Zephyr installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm2100_fuel_gauge/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Disable Threading for TF-M SPM Image\nDESCRIPTION: This snippet disables threading options in MBEDTLS for building the Secure Partition Manager (SPM) image of TF-M, ensuring compatibility with the architecture.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/tfm/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CONFIG_MBEDTLS_THREADING_ALT                    False)\nset(CONFIG_MBEDTLS_THREADING_C                      False)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom AT Commands for GCF SMS in C\nDESCRIPTION: The GCF SMS Library implements custom AT commands for SMS functionality using the nrf_modem_at_cmd function. It includes commands for message storage, service settings, service center address, character set, message deletion, sending, writing, and format setting.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/gcf_sms_lib.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nAT+CPMS\nAT+CSMS\nAT+CSCA\nAT+CSCS\nAT+CMGD\nAT+CMSS\nAT+CMMS\nAT+CMGW\nAT+CMGF=0\n```\n\n----------------------------------------\n\nTITLE: Writing to OTP Region\nDESCRIPTION: This console command demonstrates how to write specific parameters to the OTP region. The example shows writing MAC0 address to F0:CE:36:00:00:4A at specified memory locations (0x120).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n\"wifi_radio_ficr_prog otp_write_params 0x120 0x0036CEF0 0x4A00\"\n```\n\n----------------------------------------\n\nTITLE: Defining Application Sources\nDESCRIPTION: This snippet specifies the source files for the application component, allowing the build system to compile the main application logic and various event handling modules. It structures the source code organization in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_event_manager/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Defining a Zephyr Library - C\nDESCRIPTION: This snippet defines a Zephyr library using the 'zephyr_library' macro and specifies 'paw3212.c' as its source file. This is crucial for organizing code into reusable libraries within the Zephyr ecosystem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/sensor/paw3212/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources(paw3212.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Secure Bootloader Components in CMake\nDESCRIPTION: This series of directives conditionally includes multiple secure bootloader components based on configuration options. Each component is only added if its corresponding configuration is defined, allowing for selective feature support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_IS_SECURE_BOOTLOADER bootloader)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_SECURE_BOOT_CRYPTO bootloader/bl_crypto)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_SECURE_BOOT_VALIDATION bootloader/bl_validation)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_SECURE_BOOT_STORAGE bootloader/bl_storage)\n```\n\n----------------------------------------\n\nTITLE: Power Management Function Signatures\nDESCRIPTION: System functions for managing power management latency requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/usb_state_pm.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\npm_policy_latency_request_add()\npm_policy_latency_request_remove()\n```\n\n----------------------------------------\n\nTITLE: Including Current Directory in Build Path for CMake\nDESCRIPTION: Adds the current directory to the include search path for the 'app' target, allowing header files in this directory to be found during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/uart/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Get xyL Range State\nDESCRIPTION: This shell command retrieves the Light xyL Range state value from the bound server, providing information on the allowed range of x and y values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl range-get\n```\n\n----------------------------------------\n\nTITLE: Initializing MPSL Clock Configuration in C\nDESCRIPTION: New clock configuration option added to MPSL for skipping the wait for Low Frequency Clock start. This is defined in the mpsl_clock_lfclk_cfg_t struct.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct mpsl_clock_lfclk_cfg_t {\n    // ...\n    bool skip_wait_lfclk_started;\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option to Disable Crypto Storage\nDESCRIPTION: This snippet disables TF-M crypto storage when MBEDTLS_PSA_CRYPTO_STORAGE_C is not enabled, working around a known issue (NCSDK-13530) to allow TF-M crypto without ITS dependency when PSA crypto storage is disabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CONFIG_MBEDTLS_PSA_CRYPTO_STORAGE_C)\n  # Workaround: NCSDK-13530\n  # Allow TF-M crypto to not depend on ITS when PSA crypto storage is disabled.\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DCRYPTO_STORAGE_DISABLED=TRUE\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Inclusion for Nordic SDK Components\nDESCRIPTION: Conditionally adds source files to the build based on configuration flags. Includes event proxy, sensor stub generator, and workload simulation modules when their respective CONFIG options are enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf_sensor_manager/src/modules/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_EVENT_MANAGER_PROXY app PRIVATE event_proxy_init.c)\ntarget_sources_ifdef(CONFIG_APP_SENSOR_STUB_GEN app PRIVATE sensor_stub_gen.c)\ntarget_sources_ifdef(CONFIG_APP_WORKLOAD_SIM app PRIVATE workload_sim.c)\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Key Definitions\nDESCRIPTION: Example YAML configuration file structure for defining multiple keys and their policies for uploading to the device\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/kmu_provision.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- keyname: UROT_PUBKEY\n    keys: [\"/path/private-key1.pem\", \"/path/private-key2.pem\"]\n    policy: lock\n- keyname: APP_PUBKEY\n    keys: [\"/path/private-key3.pem\", \"/path/private-key4.pem\"]\n    policy: lock\n```\n\n----------------------------------------\n\nTITLE: Configuring Transmitting Device for BLE Radio Test\nDESCRIPTION: Commands to configure a transmitting device (DK or EK) to send 10000 packets with a matching access address at 2400 MHz. Sets the data rate to 1Mbit, transmit pattern to 11110000, and starts transmitting on channel 0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/ble_radio_test_for_per_measurements.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ data_rate ble_1Mbit\nuart:~$ transmit_pattern pattern_11110000\nuart:~$ start_channel 0\nuart:~$ parameters_print\nuart:~$ start_tx_modulated_carrier 10000\n```\n\n----------------------------------------\n\nTITLE: External Flash Partition Configuration\nDESCRIPTION: Example of configuring an external flash partition in YAML format. Shows how to specify the partition name, region and size configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# Name of partition\nexternal_plz:\n  region: external_flash\n  size: CONFIG_EXTERNAL_PLZ_SIZE\n```\n\n----------------------------------------\n\nTITLE: Including Platform Compatibility Checks - CMake\nDESCRIPTION: This snippet is responsible for including platform compatibility check headers when CONFIG_MOCK_SUIT_PLAT_CHECK_COMPONENT_COMPATIBILITY is set. It ensures that platform components are compatible during testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_PLAT_CHECK_COMPONENT_COMPATIBILITY)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_PLAT_CHECK_COMPONENT_ID)\n  target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/platform/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining the OpenThread CLI project\nDESCRIPTION: This snippet defines the project name as `openthread_cli`. It is the main identifier for the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(openthread_cli)\n```\n\n----------------------------------------\n\nTITLE: Terminal Output for Fuel Gauge Initialization\nDESCRIPTION: Shows the console output after successful initialization of the fuel gauge, displaying the PMIC status, nRF Fuel Gauge version, initialized battery type, and battery measurements including voltage, temperature, and state of charge.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm2100_fuel_gauge/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nPMIC device ok\nnRF Fuel Gauge version: 1.0.0\nFuel gauge initialised for Alkaline AA battery.\nV: 1.188, T: 20.62, SoC: 25.00\n```\n\n----------------------------------------\n\nTITLE: Installing HIDAPI and Required Python Libraries\nDESCRIPTION: This snippet outlines the installation process for the HIDAPI library and Python dependencies necessary for running the HID configurator on Windows. The user is instructed to install required packages using pip, specifically for the GUI and LED functionalities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npy -3 -m pip install -r requirements.txt\n```\n\nLANGUAGE: Python\nCODE:\n```\npy -3 -m pip install -r requirements_music_led_stream.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot mode: Direct-XIP with revert\nDESCRIPTION: Enables dual-bank image execution directly from storage with additional support for reverting to a previous image if necessary, enhancing system reliability. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_6\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_MCUBOOT_MODE_DIRECT_XIP_WITH_REVERT\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_MCUBOOT_MODE_DIRECT_XIP_WITH_REVERT`\"\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Transmission Power in Kconfig\nDESCRIPTION: Configures the transmission output power for Matter over Thread using the OpenThread default TX power option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_10\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_OPENTHREAD_DEFAULT_TX_POWER=<power_value>\n```\n\n----------------------------------------\n\nTITLE: Enabling Commissionable Device Type for Amazon FFS\nDESCRIPTION: This snippet shows how to enable the Commissionable Device Type for Amazon Frustration-Free Setup by setting the `CONFIG_CHIP_COMMISSIONABLE_DEVICE_TYPE` Kconfig option to ``y``. This is a prerequisite for FFS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_22\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_COMMISSIONABLE_DEVICE_TYPE` to ``y``.`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for QDEC Project in nRF Connect SDK\nDESCRIPTION: Sets up the CMake project for a QDEC application. It defines the minimum CMake version, finds the Zephyr package, enforces sysbuild usage for multi-image applications, and specifies the project name and source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/qdec/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n\nproject(qdec)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Buck Discharge Resistor in C\nDESCRIPTION: Added configuration option for the buck discharge resistor in the ADP536X driver header file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.1.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\ninclude/drivers/adp536x.h\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet uses the find_package command to locate the Zephyr package necessary for building the project, utilizing an environment variable to hint its base path. It's essential for integrating Zephyr features into the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: AT Shell Command Processing\nDESCRIPTION: Updates to AT shell library for handling multiline commands and line feed character processing. New configuration option added for line feed unescaping.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nat_shell()\n/* When CONFIG_AT_SHELL_UNESCAPE_LF enabled: \\n -> <CR><LF> */\n```\n\n----------------------------------------\n\nTITLE: Using LwM2M Carrier Shell Commands for Testing\nDESCRIPTION: Console commands to store PSK, configure server URI, and enable server configuration using the LwM2M carrier shell. These commands assist in setting up the communication parameters for the nRF91 Series DK post-build and require AT command support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_carrier/sample_description.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\\n$ at AT+CFUN=4\\nOK\\n$ at AT%CMNG=0,450,3,\\\"000102030405060708090a0b0c0d0e0f\\\"\\nOK\\n$ at AT+CFUN=1\\nOK\\n\n```\n\nLANGUAGE: console\nCODE:\n```\n\\n$ carrier_config server uri coaps://leshan.eclipseprojects.io:5784\\nSet server URI: coaps://leshan.eclipseprojects.io:5784\\n$ carrier_config server sec_tag 450\\nSet security tag: 450\\n\n```\n\nLANGUAGE: console\nCODE:\n```\n\\n$ carrier_config server enable\\nEnabled custom server config\\n\n```\n\nLANGUAGE: console\nCODE:\n```\n\\n$ carrier_config auto_startup y\\nSet auto startup: Yes\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: This command defines the name of the CMake project as \"temp_sensor\". This name is used internally by CMake and can be referenced in other CMake commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/sensor/temp_sensor/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(temp_sensor)\"\n```\n\n----------------------------------------\n\nTITLE: Target Sources\nDESCRIPTION: This snippet specifies the source files to be compiled for the testbinary target. It includes the main.c file and the suit_metadata.c file from the SUIT metadata module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_metadata/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/metadata/src/suit_metadata.c\n)\"\n```\n\n----------------------------------------\n\nTITLE: Updating ZCBOR State Initialization\nDESCRIPTION: Example showing updated parameters for zcbor state initialization functions. New parameters were added for unordered map decoding support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_application.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nZCBOR_STATE_D(state, 0, payload, len, 1, 0, NULL, 0)\n```\n\n----------------------------------------\n\nTITLE: Generating Ninja Build Files for NCS Documentation\nDESCRIPTION: This command generates the Ninja build files for the documentation. It should be run in the 'ncs/nrf/doc' directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/build.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncmake -GNinja -S. -B_build\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required version for CMake, ensuring compatibility with the project requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/memptr_sink/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Initializing nRF Cloud Library in C\nDESCRIPTION: Initializes the nRF Cloud library before using any other APIs. This must be called before starting timers, sensor drivers, or communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nnrf_cloud_init();\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This CMake snippet sets the include directories for the Zephyr library. It includes the WFA QT base directory, allowing the library to access header files from that location. This is essential for compiling the library with the necessary dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/wfa-qt/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(\n\t${WFA_QT_BASE}\n)\n```\n\n----------------------------------------\n\nTITLE: Compilation Error for Missing Device Driver Reference\nDESCRIPTION: Example of a compilation error that occurs when the external flash driver is improperly configured. This linker error indicates that a referenced device driver is not available in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_partitioning.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nundefined reference to '__device_dts_ord_<digits>'\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration Update\nDESCRIPTION: This snippet describes a change in the logging verbosity level for allowed power states within the Common Application Framework (CAF) power manager module. The log level has been reduced from 'info' to 'debug', which likely aims to reduce the amount of log output during normal operation, making it easier to focus on more critical information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n\t* :ref:`caf_power_manager`:\n\n  * Reduced verbosity of logs denoting allowed power states from ``info`` to ``debug``.\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for NRF Connect SDK App\nDESCRIPTION: Sets the include directory for the 'app' target to the current directory, allowing access to local header files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/startup_cmd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Semiconductor Project\nDESCRIPTION: This CMake script sets up the build environment for a Nordic Semiconductor project. It requires CMake 3.20.0 or later, finds the Zephyr package, defines the project, and configures source files and include directories for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bootloader/bl_validation_ff_key/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Generating SUIT In-Place Component Update Sequence Diagram with PlantUML\nDESCRIPTION: This PlantUML code defines a sequence diagram for the SUIT in-place component update process. It shows the interactions between various components, including SSF, SDFW IPUC, IPUC entry, SUIT utils, and different types of sinks and streamers. The diagram illustrates the flow from initial setup to potential memory erasure and update of the IPUC entry.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/suit_setup_write_ipuc.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant ssf\nparticipant sdfw_ipuc\nparticipant ipuc_entry\nparticipant suit_utils\nparticipant generic_address_streamer\nparticipant streamer\nparticipant ram_sink\nparticipant flash_sink\n\n--> ssf ++ : suit_ipuc_write_setup(\\n    component_id,\\n    enc_info,\\n    comp_info\\n)\nssf -> sdfw_ipuc ++ : suit_ipuc_sdfw_write_setup(\\n    ssf_remote,\\n    component_id,\\n    enc_info,\\n    comp_info\\n)\nsdfw_ipuc -> suit_utils ++ : suit_plat_decode_component_type(component_id)\ndeactivate suit_utils\nsdfw_ipuc -> suit_utils ++ : suit_plat_decode_address_size(component_id)\ndeactivate suit_utils\nsdfw_ipuc -> ipuc_entry ** : ipuc_entry_from_component_id(component_id)\nrnote over ipuc_entry\n  IPUC_UNUSED\nend note\nnote right\n  If IPUC entry is used, remote must match\n  the remote from the previous calls\nend note\n\ngroup Check if IPUC should be erased\n  sdfw_ipuc -> ram_sink ++ : suit_ram_sink_get(tmp_buffer)\n  ram_sink -> ram_sink_entry ** : get_new_ctx()\n  deactivate ram_sink\n  loop offset < size\n    sdfw_ipuc -> generic_address_streamer ++ : suit_address_streamer_select_by_address(address + offset)\n    generic_address_streamer -> streamer ** : << select streamer >>\n    deactivate generic_address_streamer\n    sdfw_ipuc -> ram_sink_entry ++ : seek(0)\n    deactivate ram_sink_entry\n    sdfw_ipuc -> streamer ++ : stream(address + offset, tmp_buffer)\n    streamer -> ram_sink_entry ++ : write(data)\n    deactivate ram_sink_entry\n    deactivate streamer\n    sdfw_ipuc -> sdfw_ipuc : memcmp(tmp_buffer, 0xFF..FF)\n    sdfw_ipuc -> sdfw_ipuc : offset += sizeof(tmp_buffer)\n  end\n\n  sdfw_ipuc -> ram_sink_entry : release()\n  destroy ram_sink_entry\nend\n\n\nopt not erased\n  sdfw_ipuc -> flash_sink ++ : suit_flash_sink_is_address_supported(address)\n  deactivate flash_sink\n  sdfw_ipuc -> flash_sink ++ : suit_flash_sink_get(address, size)\n  flash_sink -> flash_sink_entry ** : get_new_ctx()\n  deactivate flash_sink\n\n  sdfw_ipuc -> digest_cache ++ : suit_plat_digest_cache_remove(component_id)\n  deactivate digest_cache\n  sdfw_ipuc -> flash_sink_entry : release()\n  destroy flash_sink_entry\nend\n\nsdfw_ipuc -> ipuc_entry ++ : << store SSF remote client ID >>\ndeactivate ipuc_entry\nrnote over ipuc_entry\n  IPUC_IPC_IN_PLACE_UPDATE\nend note\n\ndeactivate sdfw_ipuc\n\ndeactivate ssf\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Optional Modules in CMake for nRF5340 Audio Project\nDESCRIPTION: This snippet conditionally adds optional module source files to the application target based on configuration flags. It includes support for the CS47L63 codec driver, power measurement, SD card module, LC3 file handling, SD card playback, and LC3 streaming.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/modules/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_CS47L63_DRIVER app PRIVATE\n                     ${CMAKE_CURRENT_SOURCE_DIR}/hw_codec.c)\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_POWER_MEASUREMENT app PRIVATE\n                     ${CMAKE_CURRENT_SOURCE_DIR}/power_meas.c)\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_SD_CARD_MODULE app PRIVATE\n                     ${CMAKE_CURRENT_SOURCE_DIR}/sd_card.c)\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_SD_CARD_LC3_FILE app PRIVATE\n                     ${CMAKE_CURRENT_SOURCE_DIR}/lc3_file.c)\ntarget_sources_ifdef(CONFIG_SD_CARD_PLAYBACK app PRIVATE\n                     ${CMAKE_CURRENT_SOURCE_DIR}/sd_card_playback.c)\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_SD_CARD_LC3_STREAMER app PRIVATE\n                     ${CMAKE_CURRENT_SOURCE_DIR}/lc3_streamer.c)\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option for Python Executable\nDESCRIPTION: This snippet sets the TFM CMake option to pass the Zephyr Python executable path to TF-M to ensure both use the same Python interpreter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS\n  # Pass Zephyr Python to TF-M so both uses identical Python.\n  -DPython3_EXECUTABLE=${Python3_EXECUTABLE}\n)\n```\n\n----------------------------------------\n\nTITLE: Submitting Button Event in CAF Shell\nDESCRIPTION: This command submits a button_event in the CAF Shell. It requires two arguments: button_id (a decimal number representing the button ID) and pressed (either 'y' or 'n' to indicate the button press state).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/caf_shell.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncaf_events button_event [button_id] [pressed]\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Methods for MyBtServiceDataProvider in C++\nDESCRIPTION: Declare the required methods that need to be implemented in the MyBtServiceDataProvider class.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nvoid Init() override;\nvoid NotifyUpdateState(chip::ClusterId clusterId, chip::AttributeId attributeId, void *data,\n            size_t dataSize) override;\nCHIP_ERROR UpdateState(chip::ClusterId clusterId, chip::AttributeId attributeId, uint8_t *buffer) override;\nbt_uuid *GetServiceUuid() override;\nint ParseDiscoveredData(bt_gatt_dm *discoveredData) override;\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr SDK Package\nDESCRIPTION: Locates the Zephyr SDK package using environment variables, which is essential for building Nordic Semiconductor NRF Connect SDK applications\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_lbs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF QSPI NOR Flash Test Project in CMake\nDESCRIPTION: Sets up a CMake project for testing the Nordic QSPI NOR flash driver using Zephyr's common flash testing framework. The configuration requires a minimum CMake version of 3.20.0, locates the Zephyr package, and adds the common flash test source file to the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/flash/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_qspi_nor)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/tests/drivers/flash/common/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Comparator GPIO Loopback Test Project\nDESCRIPTION: This CMake script initializes a Zephyr-based project for comparator GPIO loopback testing. It requires CMake 3.20.0 or higher, finds the Zephyr package using environment variables, and imports the source files from the Zephyr test directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/comparator/gpio_loopback/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(comparator_gpio_loopback)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/comparator/gpio_loopback/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Semiconductor Project\nDESCRIPTION: This CMake script sets up the build environment for a Nordic Semiconductor project. It requires CMake 3.20.0 or higher, finds the Zephyr package, and adds all .c files from the src directory to the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bootloader/bl_validation_neg/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Global Location Value\nDESCRIPTION: This command retrieves the current global location value from the Generic Location state. It does not take any parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_loc_cli.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models loc global-get\n\n```\n\n----------------------------------------\n\nTITLE: Checking Installed Nordic Manifest Version\nDESCRIPTION: Retrieves and verifies the current Nordic top manifest information using nrfutil, ensuring the correct version and integrity with signature checks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_54\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device x-suit-manifest-info-get --known-class-id nRF54H20_nordic_top --traits jlink\n```\n\n----------------------------------------\n\nTITLE: Linking SUIT Libraries - CMake\nDESCRIPTION: These snippets link multiple libraries that are critical for the integration test suite, specifically those related to SUIT functionalities such as utilities, storage interfaces, and update magic values. This allows the project to use APIs defined in the linked libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/storage/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(suit_utils)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(suit_storage_interface)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(suit_update_magic_values)\n```\n\n----------------------------------------\n\nTITLE: Building with Motion Detector Test Mode Enabled\nDESCRIPTION: This command builds the application while enabling the motion detector test mode, which alters the timeout periods for testing purposes. It is useful for expedited testing of motion detector features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b *board_target* -- -DCONFIG_DULT_MOTION_DETECTOR_TEST_MODE=y\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Links for Nordic Products\nDESCRIPTION: RST-formatted hyperlinks to Nordic Semiconductor product documentation resources, organized by product family including nRF91x1, nRF54L15, nRF53, nRF52, nRF70, Thingy devices and nPM power management solutions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/links.txt#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _`nRF91x1 battery voltage low level %XVBATLOWLVL`: https://docs.nordicsemi.com/bundle/ref_at_commands_nrf91x1/page/REF/at_commands/mob_termination_ctrl_status/xvbatlvl.html\n.. _`nRF91x1 credential storage management %CMNG`: https://docs.nordicsemi.com/bundle/ref_at_commands_nrf91x1/page/REF/at_commands/security/cmng.html\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Flash Memory Regions in CMake\nDESCRIPTION: Examples of defining internal OTP and primary flash memory regions using add_region() in partition_manager.cmake. Shows configuration of region name, size, base address, placement strategy and device settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_region(                           # Define region without device name\n  NAME otp                            # Name\n  SIZE 756                           # Size\n  BASE 0xff8108                       # Base address\n  PLACEMENT start_to_end              # Placement strategy\n  )\n\nadd_region(                           # Define region with device name\n  NAME flash_primary                  # Name\n  SIZE ${flash_size}                  # Size\n  BASE ${CONFIG_FLASH_BASE_ADDRESS}   # Base address\n  PLACEMENT complex                   # Placement strategy\n  DEVICE flash_controller             # DTS node label of flash controller\n  DEFAULT_DRIVER_KCONFIG             # Kconfig option that should be set for\n                                     # the driver to be compiled in\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Bluetooth LE Broadcaster and Central Application\nDESCRIPTION: This CMake file sets up the build configuration for a dual-role Bluetooth LE application. It specifies the minimum required CMake version, finds the Zephyr package, defines the project name, and includes the necessary source files for ISO broadcast source/sink, central, and peripheral functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/bluetooth/iso/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(broadcaster_and_central)\n\ntarget_sources(app PRIVATE\n    src/main.c\n    modules/iso_broadcast_src.c\n    modules/iso_broadcast_sink.c\n    modules/central.c\n    modules/peripheral.c)\nzephyr_include_directories(modules)\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Modules in CMake\nDESCRIPTION: This section includes various additional modules such as logging, shell, and debug. It also checks for certain configurations before adding specific subdirectories like the partition manager and NRF RPC, providing organized code management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(logging)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(shell)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(debug)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_PARTITION_MANAGER_ENABLED partition_manager)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NRF_RPC nrf_rpc)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NRF_802154_RADIO_DRIVER ieee802154)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NRF_DM dm)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_EMDS emds)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NET_CORE_MONITOR net_core_monitor)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_AUDIO_MODULE audio_module)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_AUDIO_MODULE_TEMPLATE audio/audio_module_template)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_UART_ASYNC_ADAPTER uart_async_adapter)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_SDFW_SERVICES_ENABLED sdfw_services)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(suit)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_MGMT_SUITFU mgmt/suitfu)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_DULT dult)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NRF_COMPRESS nrf_compress)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(mgmt/mcumgr)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_SETTINGS settings)\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Options Based on Kconfig\nDESCRIPTION: These CMake commands add compile options to the `suit_sdfw_mocks` interface library based on Kconfig options. If `CONFIG_MOCK_SDFW_ARBITER`, `CONFIG_MOCK_SDFW_RESET_MGR`, or `CONFIG_MOCK_SDFW_VPRS` are enabled, corresponding `-D` flags are added, defining preprocessor macros.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/mocks/sdfw/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_MOCK_SDFW_ARBITER)\n  target_compile_options(suit_sdfw_mocks INTERFACE -DCONFIG_SDFW_ARBITER)\nendif()\nif(CONFIG_MOCK_SDFW_RESET_MGR)\n  target_compile_options(suit_sdfw_mocks INTERFACE -DCONFIG_SDFW_RESET_HANDLING_ENABLED)\nendif()\nif(CONFIG_MOCK_SDFW_VPRS)\n  target_compile_options(suit_sdfw_mocks INTERFACE -DCONFIG_SDFW_VPRS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Required Zephyr Package\nDESCRIPTION: Finds the required Zephyr package and provides a hint for its base directory using the environment variable 'ZEPHYR_BASE'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_usb/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Enabling SP 800-108r1 CMAC w/counter KDF in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for the SP 800-108r1 CMAC with counter key derivation function.  This KDF is based on NIST Special Publication 800-108r1 using CMAC (Cipher-based Message Authentication Code) with a counter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_15\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_SP800_108_COUNTER_CMAC`\"\n```\n\n----------------------------------------\n\nTITLE: Define Pre-CMake Configuration Function\nDESCRIPTION: This snippet defines a CMake function named `${SYSBUILD_CURRENT_MODULE_NAME}_pre_cmake`. This function serves as a hook for performing pre-CMake configurations within the sysbuild module. The actual content of this function has been previously covered in other code snippets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\n \"endfunction(${SYSBUILD_CURRENT_MODULE_NAME}_pre_cmake)\"\n```\n\n----------------------------------------\n\nTITLE: Including Project Directories\nDESCRIPTION: Adds include directories to the project and sets up the project name for compilation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/i2c/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(include)\n\nproject(i2c)\n```\n\n----------------------------------------\n\nTITLE: Define and Execute Post-CMake Function\nDESCRIPTION: This CMake function, named `${SYSBUILD_CURRENT_MODULE_NAME}_post_cmake`, is the main entry point for post-cmake operations within the sysbuild process. It parses arguments, restores NCS variables, sets global properties, and conditionally includes other CMake files based on Kconfig options. The function concludes by configuring the cache for each image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(${SYSBUILD_CURRENT_MODULE_NAME}_post_cmake)\n  cmake_parse_arguments(POST_CMAKE \"\" \"\" \"IMAGES\" ${ARGN})\n  restore_ncs_vars()\n\n  set(SYSBUILD y)\n\n  set_property(GLOBAL PROPERTY DOMAIN_APP_APP ${DEFAULT_IMAGE})\n\n  # Include any files that need to merge files with uicr_merged.hex before including suit\n  if(SB_CONFIG_BT_FAST_PAIR_PROV_DATA AND NOT SB_CONFIG_PARTITION_MANAGER)\n    # The DTS partition for the Fast Pair hex file is available in the post-CMake stage.\n    include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/fast_pair/hex.cmake)\n  endif()\n\n  if(SB_CONFIG_MATTER_FACTORY_DATA_GENERATE)\n    include(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/nrfconnect/chip-module/generate_factory_data_sysbuild.cmake)\n    nrfconnect_generate_factory_data()\n  endif()\n\n  include_packaging()\n  if(NOT SB_CONFIG_SOC_NRF54H20_IRON)\n    include_suit_provisioning()\n    include_suit()\n  endif()\n\n  if(SB_CONFIG_SECURE_BOOT OR SB_CONFIG_MCUBOOT_HARDWARE_DOWNGRADE_PREVENTION)\n    include_provision_hex()\n  endif()\n\n  if(SB_CONFIG_MATTER_OTA)\n    include(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/zephyr/ota-image_sysbuild.cmake)\n    if(SB_CONFIG_DFU_MULTI_IMAGE_PACKAGE_BUILD OR SB_CONFIG_SUIT_MULTI_IMAGE_PACKAGE_BUILD)\n      chip_ota_image(chip-ota-image\n        INPUT_FILES ${CMAKE_BINARY_DIR}/dfu_multi_image.bin\n        OUTPUT_FILE ${CMAKE_BINARY_DIR}/${SB_CONFIG_MATTER_OTA_IMAGE_FILE_NAME}\n      )\n    endif()\n  endif()\n\n  if(SB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE)\n    include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/nrf700x.cmake)\n  endif()\n\n  if(SB_CONFIG_SECURE_BOOT_BOOTCONF_LOCK_WRITES)\n    include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/bootconf.cmake)\n  endif()\n\n  if(SB_CONFIG_DFU_ZIP)\n    if(SB_CONFIG_BOOTLOADER_MCUBOOT)\n      include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/zip.cmake)\n    else()\n      include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/b0_packaging.cmake)\n    endif()\n  endif()\n\n  if(SB_CONFIG_DFU_ZIP_BLUETOOTH_MESH_METADATA)\n    include(${ZEPHYR_NRF_MODULE_DIR}/cmake/mesh_dfu_metadata.cmake)\n  endif()\n\n  if(SB_CONFIG_LWM2M_CARRIER_DIVIDED_DFU)\n    include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/lwm2m_carrier_divided_dfu.cmake)\n  endif()\n\n  include(${ZEPHYR_NRF_MODULE_DIR}/cmake/extensions.cmake)\n  if(SB_CONFIG_PARTITION_MANAGER)\n    # Run partition manager for each image before running CMake.\n    include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/partition_manager.cmake OPTIONAL)\n\n    # Set PM variables up that applications need prior to PM having ran\n    get_property(PM_MCUBOOT_PRIMARY_SIZE TARGET partition_manager PROPERTY PM_MCUBOOT_PRIMARY_SIZE)\n    get_property(PM_MCUBOOT_PAD_SIZE TARGET partition_manager PROPERTY PM_MCUBOOT_PAD_SIZE)\n\n    if(SB_CONFIG_MCUBOOT_MODE_DIRECT_XIP OR SB_CONFIG_MCUBOOT_MODE_DIRECT_XIP_WITH_REVERT)\n      get_property(PM_MCUBOOT_PRIMARY_ADDRESS TARGET partition_manager PROPERTY PM_MCUBOOT_PRIMARY_ADDRESS)\n      get_property(PM_MCUBOOT_SECONDARY_ADDRESS TARGET partition_manager PROPERTY PM_MCUBOOT_SECONDARY_ADDRESS)\n    endif()\n\n    if(SB_CONFIG_MATTER_FACTORY_DATA_GENERATE)\n      get_property(PM_FACTORY_DATA_ADDRESS TARGET partition_manager PROPERTY PM_FACTORY_DATA_ADDRESS)\n      get_property(PM_FACTORY_DATA_OFFSET TARGET partition_manager PROPERTY PM_FACTORY_DATA_OFFSET)\n    endif()\n\n    if(SB_CONFIG_SUPPORT_NETCORE AND NOT SB_CONFIG_NETCORE_EMPTY)\n      get_property(PM_MCUBOOT_PRIMARY_${SB_CONFIG_MCUBOOT_NETWORK_CORE_IMAGE_NUMBER}_SIZE TARGET partition_manager PROPERTY PM_MCUBOOT_PRIMARY_${SB_CONFIG_MCUBOOT_NETWORK_CORE_IMAGE_NUMBER}_SIZE)\n    endif()\n\n    if(SB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE)\n      get_property(PM_NRF70_WIFI_FW_OFFSET TARGET partition_manager PROPERTY PM_NRF70_WIFI_FW_OFFSET)\n      get_property(PM_NRF70_WIFI_FW_SIZE TARGET partition_manager PROPERTY PM_NRF70_WIFI_FW_SIZE)\n    endif()\n\n    if(SB_CONFIG_QSPI_XIP_SPLIT_IMAGE)\n      get_property(PM_MCUBOOT_PRIMARY_${SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER}_ADDRESS TARGET partition_manager PROPERTY PM_MCUBOOT_PRIMARY_${SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER}_ADDRESS)\n      get_property(PM_MCUBOOT_PRIMARY_${SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER}_SIZE TARGET partition_manager PROPERTY PM_MCUBOOT_PRIMARY_${SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER}_SIZE)\n      get_property(PM_MCUBOOT_SECONDARY_${SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER}_ADDRESS TARGET partition_manager PROPERTY PM_MCUBOOT_SECONDARY_${SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER}_ADDRESS)\n      get_property(PM_MCUBOOT_SECONDARY_${SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER}_SIZE TARGET partition_manager PROPERTY PM_MCUBOOT_SECONDARY_${SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER}_SIZE)\n    elseif(SB_CONFIG_MCUBOOT_MODE_FIRMWARE_UPDATER)\n      get_property(PM_MCUBOOT_SECONDARY_ADDRESS TARGET partition_manager PROPERTY PM_MCUBOOT_SECONDARY_ADDRESS)\n      get_property(PM_MCUBOOT_SECONDARY_SIZE TARGET partition_manager PROPERTY PM_MCUBOOT_SECONDARY_SIZE)\n    endif()\n\n    # If the network core image is enabled on nRF53, ensure it is flashed before the main application\n    if(SB_CONFIG_SUPPORT_NETCORE AND NOT SB_CONFIG_NETCORE_NONE)\n      sysbuild_add_dependencies(FLASH ${DEFAULT_IMAGE} ${SB_CONFIG_NETCORE_IMAGE_NAME})\n    endif()\n\n    if(SB_CONFIG_QSPI_XIP_SPLIT_IMAGE AND SB_CONFIG_SOC_NRF52840)\n      # Emit a warning to the user to not relocate interrupts as this can brick nRF52840 devices\n      message(WARNING \"\\n      --------------------------------------------------------------------------------------------\\n      --- WARNING: SB_CONFIG_QSPI_XIP_SPLIT_IMAGE is enabled and target device is an nRF52840: ---\\n      --- Care must be taken to not relocate any interrupts to the QSPI XIP flash as this can  ---\\n      --- cause the SoC to enter an undefined operation state, causing the debug access port   ---\\n      --- to become blocked, potentially bricking the device.                                  ---\\n      --------------------------------------------------------------------------------------------\\n      \")\n    endif()\n  endif()\n  foreach(image ${IMAGES})\n    configure_cache(IMAGE ${image})\n  endforeach()\n\n  # Add a dependency on the main image's .config file to ensure Kconfig values that have been read\n  # and used to generate tasks are not stale, add similar dependencies on other images which have\n  # configuration that is read if required options are enabled\n  ExternalProject_Get_Property(${DEFAULT_IMAGE} BINARY_DIR)\n  set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${BINARY_DIR}/zephyr/.config)\n\n  if(NCS_SYSBUILD_PARTITION_MANAGER)\n    if(SB_CONFIG_SECURE_BOOT AND SB_CONFIG_SECURE_BOOT_APPCORE AND SB_CONFIG_BOOTLOADER_MCUBOOT)\n      ExternalProject_Get_Property(mcuboot BINARY_DIR)\n      set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${BINARY_DIR}/zephyr/.config)\n    endif()\n\n    if(SB_CONFIG_SECURE_BOOT_NETCORE)\n      get_property(main_app GLOBAL PROPERTY DOMAIN_APP_CPUNET)\n      ExternalProject_Get_Property(${main_app} BINARY_DIR)\n      set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${BINARY_DIR}/zephyr/.config)\n    endif()\n  endif()\nendfunction(${SYSBUILD_CURRENT_MODULE_NAME}_post_cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring source file properties for nRF Cloud and Modem Library\nDESCRIPTION: Sets various source files as header-only based on configuration options to prevent multiple inclusions and handle conditional compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/cloud/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_NRF_CLOUD_MQTT OR CONFIG_NRF_CLOUD_FOTA OR CONFIG_NRF_MODEM_LIB)\n\n\tif (CONFIG_NRF_CLOUD_MQTT OR CONFIG_NRF_CLOUD_FOTA)\n\n\t\tset_source_files_properties(\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud.c\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud_mem.c\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud_fota.c\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud_fota_common.c\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud_codec_internal.c\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud_fsm.c\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud_transport.c\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud_codec.c\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud_info.c\n\t\t\tDIRECTORY ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/\n\t\t\tPROPERTIES HEADER_FILE_ONLY ON\n\t\t)\n\n\t\tset_source_files_properties(\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/src/downloader.c\n\t\t\tDIRECTORY ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/\n\t\t\tPROPERTIES HEADER_FILE_ONLY ON\n\t\t)\n\n\tendif()\n\n\tif (CONFIG_NRF_MODEM_LIB)\n\n\t\tset_source_files_properties(\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/sanity.c\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/nrf9x_sockets.c\n\t\t\tDIRECTORY ${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/\n\t\t\tPROPERTIES HEADER_FILE_ONLY ON\n\t\t)\n\n\telse()\n\n\t\tset_source_files_properties(\n\t\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/dfu/dfu_target/src/dfu_target_modem_delta.c\n\t\t\tDIRECTORY ${ZEPHYR_NRF_MODULE_DIR}/subsys/dfu/dfu_target/\n\t\t\tPROPERTIES HEADER_FILE_ONLY ON\n\t\t)\n\n\tendif()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking IoT Hub to DPS Instance\nDESCRIPTION: Links an existing IoT Hub to the DPS instance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_6\n\nLANGUAGE: Console\nCODE:\n```\naz iot dps linked-hub create --dps-name <dps_name> --hub-name <hub_name> --resource-group <resource_name>\n```\n\n----------------------------------------\n\nTITLE: Launching Toolchain on Windows\nDESCRIPTION: Launches the nRF toolchain environment in a terminal window for Windows OS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnrfutil sdk-manager toolchain launch --terminal\n```\n\n----------------------------------------\n\nTITLE: Getting PDN Dynamic Information in C\nDESCRIPTION: New function added to the PDN library to replace the deprecated pdn_dynamic_params_get function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-3.0.0-preview2.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\npdn_dynamic_info_get()\n```\n\n----------------------------------------\n\nTITLE: Creating AWS IoT Policy using AWS CLI\nDESCRIPTION: AWS CLI command to create an IoT policy using the policy document stored in a JSON file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\naws iot create-policy --policy-name my-policy --policy-document file://policy.json\n```\n\n----------------------------------------\n\nTITLE: Including Provisioning Scripts in CMake\nDESCRIPTION: Includes various provisioning and packaging CMake scripts to support build configurations. Details dependencies on specific paths within the Zephyr NRF module directory, and targets provisioning and MCUboot packaging functionalities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(include_provision_hex)\n  include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/provision_hex.cmake)\nendfunction()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(include_suit)\n  include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/suit.cmake)\nendfunction()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(include_suit_provisioning)\n  include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/suit_provisioning.cmake)\nendfunction()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(include_packaging)\n  include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/b0_mcuboot_signing.cmake)\n  include(${ZEPHYR_NRF_MODULE_DIR}/subsys/bootloader/cmake/packaging.cmake)\nendfunction()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(include_hpf)\n  include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/hpf.cmake)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Main Source File to Application\nDESCRIPTION: Adds the main source file (main.c) to the application's target sources for compilation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_hr_coded/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n  src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Application Core Console Output Example\nDESCRIPTION: Example console output showing throughput metrics from the application core, displaying packet counts and bit rates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/ipc/ipc_service/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v3.0.99-ncs1  ***\nIPC-service nrf5340dk/nrf5340/cpuapp demo started\nΔpkt: 9391 (100 B/pkt) | throughput: 7512800 bit/s\nΔpkt: 9389 (100 B/pkt) | throughput: 7511200 bit/s\nΔpkt: 9388 (100 B/pkt) | throughput: 7510400 bit/s\nΔpkt: 9390 (100 B/pkt) | throughput: 7512000 bit/s\nΔpkt: 9396 (100 B/pkt) | throughput: 7516800 bit/s\n```\n\n----------------------------------------\n\nTITLE: Configuring Project with CMake\nDESCRIPTION: This CMake snippet configures a project named 'adc_async' to run with the Zephyr RTOS framework. It requires a minimum CMake version of 3.13.1 and ensures the Zephyr package is found using the ZEPHYR_BASE environment hint. The include directory is added to the project, and two source files, 'main.c' and 'driver_test.c', are specified for the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/adc_async/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# Copyright (c) 2024 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.13.1)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nzephyr_include_directories(include)\n\nproject(adc_async)\n\ntarget_sources(app PRIVATE ./../common/main.c)\ntarget_sources(app PRIVATE src/driver_test.c)\n```\n\n----------------------------------------\n\nTITLE: High Battery Voltage Console Output\nDESCRIPTION: Shows console output when battery voltage is at normal/high levels, displaying voltage readings and DNS lookup operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/battery/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nBattery sample started\nInitializing modem library\nBattery voltage: 5019\nSetting modem to normal mode...\nNormal mode set.\nInitializing modem and connecting...\nConnected.\nBattery voltage: 4977\nExecuting DNS lookup for 'example.com'...\nBattery voltage: 5015\nExecuting DNS lookup for 'google.com'...\nBattery voltage: 4989\nExecuting DNS lookup for 'apple.com'...\nBattery voltage: 4977\nExecuting DNS lookup for 'amazon.com'...\nBattery voltage: 5019\nExecuting DNS lookup for 'microsoft.com'...\n```\n\n----------------------------------------\n\nTITLE: Defining imgtool dependency\nDESCRIPTION: Declares 'imgtool' as a dependency with a minimum version requirement. It mandates version 1.7.0 or newer. This ensures that the necessary features and functionalities of 'imgtool' are available for the SDK's operations, particularly related to image processing and signing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/requirements.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"imgtool>=1.7.0\"\n```\n\n----------------------------------------\n\nTITLE: Rebuilding the SMP Server Sample with Updated Configuration\nDESCRIPTION: Rebuild the sample after updating the CONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION to 1.1.0, and then copy the resulting binary to the lwm2m_client folder for further processing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota_external_mcu.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build\ncp build/zephyr/app_update.bin ../lwm2m_client/app_update52.bin\ncd ..\n\n```\n\n----------------------------------------\n\nTITLE: Writing a Binding Table to the Bridge\nDESCRIPTION: Sets up a binding relationship between the bridge and light bulb endpoints. This binding allows the bridge to control the light bulb's on/off cluster (cluster 6) from the bridged light switch endpoint.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_25\n\nLANGUAGE: console\nCODE:\n```\nchip-tool binding write binding '[{\"fabricIndex\": 1, \"node\": *<light_bulb_node_ID>*, \"endpoint\": 1, \"cluster\": 6}]' *<bridge_node_ID>* *<bridged_light_switch_endpoint_ID>*\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr RTOS Package\nDESCRIPTION: Locates the Zephyr RTOS package using environment variables, which is essential for building embedded applications\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/usb/hid-mouse/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Enabling RAM Power Down Library in Kconfig for Matter\nDESCRIPTION: Kconfig option to enable the RAM Power Down Library in Matter applications. This allows disabling unused RAM sections to save power in low-power applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/low_power_configuration.rst#2025-04-21_snippet_6\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_RAM_POWER_DOWN_LIBRARY\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version for Nordic SDK Project\nDESCRIPTION: Specifies the minimum required CMake version for the project, ensuring compatibility with Zephyr and Nordic SDK build requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hids_keyboard/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Stopping ETB Trace Capture in C\nDESCRIPTION: Calls the etb_trace_stop function to stop the trace capture process, allowing the captured traces to be read out from the ETB buffer.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/debug/etb_trace.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\netb_trace_stop();\n```\n\n----------------------------------------\n\nTITLE: Listing NCS-specific Zephyr commits (Shell)\nDESCRIPTION: Shell command to list all NCS-specific commits in the Zephyr repository.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.7.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^14f09a3b00\n```\n\n----------------------------------------\n\nTITLE: Updating nRF Connect SDK Contents with West\nDESCRIPTION: Command to download and update the contents of nRF Connect SDK using west update.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/create_application.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwest update\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Test Project for SUIT Platform\nDESCRIPTION: Sets up a CMake project for testing SUIT platform class functionality with specific source files and minimum CMake version requirement\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_class_check/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(../cmake/test_template.cmake)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nproject(suit_plat_class_check)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_class_check.c\n  ${SUIT_SUBSYS_DIR}/platform/sdfw/src/suit_plat_manifest_info.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_error_convert.c\n)\n```\n\n----------------------------------------\n\nTITLE: Globbing Source Files for Nordic Semiconductor Application\nDESCRIPTION: Uses the FILE(GLOB) command to collect all .c files in the src directory. This creates a list of source files to be compiled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/llpm/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\n----------------------------------------\n\nTITLE: Example of Controlling a Light Switch Device\nDESCRIPTION: Example CLI command showing how to set a simulated On/Off Light Switch to on state on endpoint 3.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge onoff_switch 1 3\n```\n\n----------------------------------------\n\nTITLE: Script Usage with Short Arguments\nDESCRIPTION: Example command demonstrating how to use the Fast Pair provision script with short argument names for generating a hexadecimal file\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/nrf_provision/fast_pair/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 fp_provision_cli.py -o=provision.hex -a=0x50000 -m=\"0xFFFFFF\" -k=\"AbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbA=\"\n```\n\n----------------------------------------\n\nTITLE: Defining Generic On Power Up States\nDESCRIPTION: Enum definition for specifying initial power-up behavior in Bluetooth Mesh devices, controlling how devices initialize their OnOff state\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_ponoff_srv.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nenum bt_mesh_on_power_up {\n    BT_MESH_ON_POWER_UP_OFF,\n    BT_MESH_ON_POWER_UP_ON,\n    BT_MESH_ON_POWER_UP_RESTORE\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Wi-Fi Radio Test Configuration in Shell\nDESCRIPTION: This command shows the current configuration of the Wi-Fi radio test. It should be used before setting 'tx' or 'rx' to '1'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test show_config\n```\n\n----------------------------------------\n\nTITLE: Including ECDSA Library Sources in Zephyr CMake\nDESCRIPTION: This snippet includes the necessary sources for ECDSA signature generation based on the selected configuration option. It checks for several configuration flags (e.g., CONFIG_SB_CRYPTO_OBERON_ECDSA_SECP256R1) and includes the respective source files if the conditions are met. If none of the conditions are satisfied, a fatal error message is generated.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bootloader/bl_crypto/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_SB_CRYPTO_OBERON_ECDSA_SECP256R1)\n  zephyr_library_sources(bl_crypto_oberon_ecdsa.c)\nelleif(CONFIG_SB_CRYPTO_CC310_ECDSA_SECP256R1)\n  zephyr_library_sources(\n    bl_crypto_cc310_ecdsa.c\n    bl_crypto_cc310_common.c\n    )\nelleif(CONFIG_SB_CRYPTO_CLIENT_ECDSA_SECP256R1)\n  zephyr_library_sources(../bl_crypto_client/bl_crypto_client.c)\nelleif(CONFIG_SB_CRYPTO_NO_ECDSA_SECP256R1)\n  # Do nothing\nelseif(CONFIG_SB_CRYPTO_PSA_ED25519)\n  zephyr_library_sources(bl_crypto_ed25519.c)\nelse()\n  message(FATAL_ERROR \"No signature implementation chosen for bootloader.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Starting DECT Beacon and Sending Data\nDESCRIPTION: Shows commands for starting a beacon transmission on device 1, scanning from device 2, and establishing two-way communication. Includes configuration reset, beacon start/stop, and channel selection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_29\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ dect sett --reset\ndesh:~$ dect sett -t 1\ndesh:~$ dect mac beacon_start\n...\nChannel 1671 was chosen for the beacon.\nBeacon TX started.\n```\n\n----------------------------------------\n\nTITLE: Adding Subsystem Configuration for Partition Manager - CMake\nDESCRIPTION: This CMake code snippet conditionally adds a Partition Manager configuration based on selected settings. It ensures that the defined configuration adheres to system requirements and is included only if specific settings are enabled, which allows for a managed approach to partition definitions in a build environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_SETTINGS_FCB OR CONFIG_SETTINGS_NVS)\n    ncs_add_partition_manager_config(pm.yml.settings)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Boot Status Log for Degraded Mode (Console)\nDESCRIPTION: Log message showing boot status after entering degraded mode with radio support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_31\n\nLANGUAGE: console\nCODE:\n```\nBoot preference: set B\nBoot status: app image B active, degraded mode\nConfirm status set A: not confirmed\nConfirm status set B: not confirmed\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package for Nordic SDK\nDESCRIPTION: This snippet finds the required Zephyr package using CMake and sets the minimum version to 3.20. It is a prerequisite for building the Nordic SDK project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/gazell/gzp_dynamic_pairing_host/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Including CBOR Parser Generator CMake Script\nDESCRIPTION: Includes an external CMake script (gen_cbor_parsers.cmake) responsible for generating CBOR parser code. The file includes standard Nordic Semiconductor copyright and licensing information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/zcbor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2024 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ninclude(gen_cbor_parsers.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.20.0. This ensures that the CMake version used to build the project supports the features and commands used in the CMakeLists.txt file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/plat_devconfig/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the project, ensuring compatibility with build system requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/usb/hid-mouse/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO LED Node in DeviceTree\nDESCRIPTION: Device tree configuration for GPIO LED nodes. Defines a green LED with active low polarity on GPIO0 pin 13.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/leds.rst#2025-04-21_snippet_3\n\nLANGUAGE: devicetree\nCODE:\n```\ncompatible = \"gpio-leds\";\nlabel = \"Green LED\";\nstatus = \"okay\";\n\nled0: led_0 {\n\tgpios = <&gpio0 13 GPIO_ACTIVE_LOW>;\n\tlabel = \"Green LED 0\";\n};\n```\n\n----------------------------------------\n\nTITLE: Building Event Manager Proxy Sample for nRF5340 DK\nDESCRIPTION: Command to build the application code for both the host and remote cores on the nRF5340 Development Kit.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Building with West and Network Core Selection\nDESCRIPTION: Command for building a Zephyr sample with west build tool while specifying the Bluetooth HCI IPC network core image. This is suitable for samples requiring Bluetooth functionality on nRF53 devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/zephyr_samples_sysbuild.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b *board_target* -- -DSB_CONFIG_NETCORE_HCI_IPC=y\n```\n\n----------------------------------------\n\nTITLE: SUIT Target Configuration\nDESCRIPTION: Configures SUIT (Software Update for Internet of Things) target support with necessary library dependencies and optional cache interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dfu/dfu_target/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_DFU_TARGET_SUIT)\n  zephyr_library_sources(src/dfu_target_suit.c)\n  zephyr_library_link_libraries(suit_memory_layout_interface)\n  zephyr_library_link_libraries(suit_envelope_info)\n  zephyr_library_link_libraries_ifdef(CONFIG_SUIT_CACHE_RW suit_cache_interface)\n\n  if(CONFIG_SSF_SUIT_SERVICE_ENABLED)\n    zephyr_library_link_libraries(suit_utils)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Sending UDP Packet via CLI\nDESCRIPTION: This command sends a UDP packet to a specified IPv6 address and port. The example shows sending a packet to the address fe80:0:0:0:6c26:956a:813:1e34 on port 5555 with the payload \"AAAA\".\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/server/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ net udp send fe80:0:0:0:6c26:956a:813:1e34 5555 AAAA\nMessage sent\n```\n\n----------------------------------------\n\nTITLE: Configuring ISO Time Sync CMake Project for Nordic Semiconductor Devices\nDESCRIPTION: Sets up a CMake project for an ISO time synchronization application with conditional compilation based on device type and Bluetooth role. The project includes core files (main.c, timed_led_toggle.c) and selects the appropriate controller implementation based on the target SoC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/conn_time_sync/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(iso_time_sync)\n\ntarget_include_directories(app PRIVATE include)\ntarget_sources(app PRIVATE src/main.c src/timed_led_toggle.c)\n\nif (CONFIG_BT_CENTRAL)\n    target_sources(app PRIVATE src/central.c)\nendif()\n\nif (CONFIG_BT_PERIPHERAL)\n    target_sources(app PRIVATE src/peripheral.c)\nendif()\n\nif (CONFIG_SOC_COMPATIBLE_NRF52X)\n    target_sources(app PRIVATE src/controller_time_nrf52.c)\nelseif (CONFIG_SOC_COMPATIBLE_NRF5340_CPUAPP)\n    target_sources(app PRIVATE src/controller_time_nrf53_app.c)\nelseif (CONFIG_SOC_SERIES_NRF54LX OR CONFIG_SOC_SERIES_NRF54HX)\n    target_sources(app PRIVATE src/controller_time_nrf54.c)\nelse()\n    MESSAGE(FATAL_ERROR \"Unsupported series\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for NRF5340 and TFM Board\nDESCRIPTION: These lines add subdirectories to the build process, including the NRF5340 specific directory and the generic tfm_board directory. This includes source code from these locations into the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf5340_cpuapp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${Trusted\\ Firmware\\ M_SOURCE_DIR}/platform/ext/target/nordic_nrf/common/nrf5340 nrf5340)\n\nadd_subdirectory(.. tfm_board)\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option for Specific Secure UART Instance\nDESCRIPTION: These snippets set the `NRF_SECURE_UART_INSTANCE` CMake option based on different `CONFIG_TFM_SECURE_UARTXX` Kconfig options, where XX represents the UART instance number (0, 1, 00, 20, 21, 22, 30). These snippets are mutually exclusive, configuring a single UART instance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_SECURE_UART0)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DNRF_SECURE_UART_INSTANCE=0\n  )\nendif()\n\nif(CONFIG_TFM_SECURE_UART1)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DNRF_SECURE_UART_INSTANCE=1\n  )\nendif()\n\nif(CONFIG_TFM_SECURE_UART00)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DNRF_SECURE_UART_INSTANCE=00\n  )\nendif()\n\nif(CONFIG_TFM_SECURE_UART20)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DNRF_SECURE_UART_INSTANCE=20\n  )\nendif()\n\nif(CONFIG_TFM_SECURE_UART21)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DNRF_SECURE_UART_INSTANCE=21\n  )\nendif()\n\nif(CONFIG_TFM_SECURE_UART22)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DNRF_SECURE_UART_INSTANCE=22\n  )\nendif()\n\nif(CONFIG_TFM_SECURE_UART30)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DNRF_SECURE_UART_INSTANCE=30\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Development Kits in nRF Util\nDESCRIPTION: Command to list all connected Nordic development kits with their serial numbers using nRF Util. This helps identify the specific device to program.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device list\n```\n\n----------------------------------------\n\nTITLE: Disable PCD for Network Core\nDESCRIPTION: This CMake snippet disables the PCD (Platform Configuration Database) application configuration if secure boot is not enabled for the network core and MCUboot is used as the bootloader. This is done by setting the `CONFIG_PCD_APP` option to `n` for the `mcuboot` image using the `set_config_bool` function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n \"if(SB_CONFIG_SUPPORT_NETCORE AND NOT SB_CONFIG_SECURE_BOOT_NETCORE AND SB_CONFIG_BOOTLOADER_MCUBOOT)\n    # Disable PCD if there is no secure boot enabled for the network core\n    set_config_bool(mcuboot CONFIG_PCD_APP n)\n  endif()\"\n```\n\n----------------------------------------\n\nTITLE: Building for nRF52840 DK with nRF21540 EK Shield (Console)\nDESCRIPTION: Command-line instruction for building an application for nRF52840 DK with the nRF21540 EK shield using west build. This sets the SHIELD CMake option to nrf21540ek.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/21540ek_dev_guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 -- -DSHIELD=nrf21540ek\n```\n\n----------------------------------------\n\nTITLE: Disabling UART0 for nRF53 Series Network Core\nDESCRIPTION: Disables the UART0 node in the network core's devicetree file to allow the I2C part of the nRF2220 interface to be functional.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf2220.rst#2025-04-21_snippet_3\n\nLANGUAGE: devicetree\nCODE:\n```\n&uart0 {\n   status = \"disabled\";\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Modem Traces with Flash Backend using West\nDESCRIPTION: Command to add the nrf91-modem-trace-ext-flash snippet when building an application with west. This enables modem tracing with external flash storage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_snippet.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build --board *board_target* -- -D<image_name>_SNIPPET=\"nrf91-modem-trace-ext-flash\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for CoAP Utilities in CMake\nDESCRIPTION: This snippet creates a Zephyr library, adds the coap_utils.c source file, and sets up the include directory. It's part of the build configuration for CoAP utilities in the nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/coap_utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(coap_utils.c)\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Target Compilation Options Assignment\nDESCRIPTION: Applies the defined compiler options to multiple targets including the main app and LwM2M client utilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/lwm2m_fota_utils/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(app\n  PRIVATE\n  ${options}\n)\ntarget_compile_options(..__nrf__subsys__net__lib__lwm2m_client_utils\n  PRIVATE\n  ${options}\n)\n\ntarget_compile_options(..__nrf__subsys__dfu__dfu_target\n  PRIVATE\n  ${options}\n)\n```\n\n----------------------------------------\n\nTITLE: Writing Random Keys in C\nDESCRIPTION: This C function enables writing random keys and its dependencies. It uses the configuration option `CONFIG_HW_UNIQUE_KEY_RANDOM`. The generated random keys can be used with the HUK library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/hw_unique_key.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n:c:func:`hw_unique_key_write_random`\n```\n\n----------------------------------------\n\nTITLE: Parsing MCUboot Version for Secure Boot in CMake\nDESCRIPTION: Parses the MCUboot version string into major, minor, revision, and build number components for secure boot configuration. Sets these values as MCUboot configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(SB_CONFIG_SECURE_BOOT_APPCORE)\n  string(REPLACE \".\" \";\" s0_s1_package_version ${SB_CONFIG_SECURE_BOOT_MCUBOOT_VERSION})\n  string(REPLACE \"+\" \";\" s0_s1_package_version \"${s0_s1_package_version}\")\n\n  list(GET s0_s1_package_version 0 s0_s1_package_version_major)\n  list(GET s0_s1_package_version 1 s0_s1_package_version_minor)\n  list(GET s0_s1_package_version 2 s0_s1_package_version_revision)\n  list(GET s0_s1_package_version 3 s0_s1_package_version_build_number)\n\n  set_config_int(mcuboot CONFIG_MCUBOOT_MCUBOOT_S0_S1_VERSION_MAJOR ${s0_s1_package_version_major})\n  set_config_int(mcuboot CONFIG_MCUBOOT_MCUBOOT_S0_S1_VERSION_MINOR ${s0_s1_package_version_minor})\n  set_config_int(mcuboot CONFIG_MCUBOOT_MCUBOOT_S0_S1_VERSION_REVISION ${s0_s1_package_version_revision})\n  set_config_int(mcuboot CONFIG_MCUBOOT_MCUBOOT_S0_S1_VERSION_BUILD_NUMBER ${s0_s1_package_version_build_number})\n\n  set(s0_s1_package_version)\n  set(s0_s1_package_version_major)\n  set(s0_s1_package_version_minor)\n  set(s0_s1_package_version_revision)\n  set(s0_s1_package_version_build_number)\nelse()\n  set_config_int(mcuboot CONFIG_MCUBOOT_MCUBOOT_S0_S1_VERSION_MAJOR -1)\n  set_config_int(mcuboot CONFIG_MCUBOOT_MCUBOOT_S0_S1_VERSION_MINOR -1)\n  set_config_int(mcuboot CONFIG_MCUBOOT_MCUBOOT_S0_S1_VERSION_REVISION -1)\n  set_config_int(mcuboot CONFIG_MCUBOOT_MCUBOOT_S0_S1_VERSION_BUILD_NUMBER -1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building SUIT Sample with West\nDESCRIPTION: Command to build the SUIT sample application for nRF54H20 SoC using West build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_customize_qsg.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp nrf/samples/suit/smp_transfer\n```\n\n----------------------------------------\n\nTITLE: Documenting C Typedefs in nRF Connect SDK\nDESCRIPTION: Example of documenting a C typedef with a preceding documentation block. This example shows the documentation for a download client asynchronous event handler.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/styleguide.rst#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n/**\n * @brief Download client asynchronous event handler.\n *\n * Through this callback, the application receives events, such as\n * download of a fragment, download completion, or errors.\n *\n * If the callback returns a non-zero value, the download stops.\n * To resume the download, use @ref download_client_start().\n *\n * @param[in] event   The event.\n *\n * @retval 0 The download continues.\n * @retval non-zero The download stops.\n */\ntypedef int (*download_client_callback_t)(const struct download_client_evt *event);\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11b PER Measurement (Receiver)\nDESCRIPTION: Commands to initialize the Wi-Fi radio test in channel 1 and set it to receive mode for 802.11b PER measurement.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 1\nuart:~$ wifi_radio_test rx 1 #this will clear the earlier stats and wait for packets\n```\n\n----------------------------------------\n\nTITLE: Creating nrf70_wifi_fw_mcuboot_pad partition for MCUboot header\nDESCRIPTION: Defines the partition for the MCUboot header in external memory with a specific address and size. This partition is positioned at the first available address in external memory and sized to accommodate the MCUboot image header.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf70_fw_patch_update.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnrf70_wifi_fw_mcuboot_pad:\n    address: 0x12f000\n    size: 0x200\n    device: MX25R64\n    region: external_flash\n```\n\n----------------------------------------\n\nTITLE: Configuring Transmitter Device for Thread Radio PER Test\nDESCRIPTION: Commands to configure the transmitting device to send 10000 packets on channel 18 using IEEE 802.15.4 250Kbit data rate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/thread_radio_test_for_per_measurements.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ data_rate ieee802154_250Kbit\nuart:~$ start_channel 18\nuart:~$ parameters_print\nuart:~$ start_tx_modulated_carrier 10000\n```\n\n----------------------------------------\n\nTITLE: Connecting to Server in AT Commands\nDESCRIPTION: This AT command connects to a server using a hostname and port. It demonstrates how to use the #XCONNECT command to establish a connection to a remote TCP or UDP server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_9\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCONNECT=\"test.server.com\",1234\n#XCONNECT: 1\nOK\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option for MCUboot Bootloader\nDESCRIPTION: This snippet sets the CONFIG_BOOTLOADER_MCUBOOT CMake option to TRUE if the CONFIG_BOOTLOADER_MCUBOOT Kconfig option is enabled.  This allows the TF-M build to recognize the use of MCUboot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_BOOTLOADER_MCUBOOT)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DCONFIG_BOOTLOADER_MCUBOOT=TRUE\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for nRF9x Sockets Test\nDESCRIPTION: Sets up the CMake project for nRF9x sockets testing. It defines the minimum CMake version, finds the Zephyr package, and sets the project name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/nrf9x_sockets/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf9x_sockets_test)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Configuration\nDESCRIPTION: This snippet configures a CMake project for a UART application using the Zephyr RTOS. It sets the minimum CMake version, locates the Zephyr package, and defines the project name as \"uart_mix_fifo_poll\". It also specifies the main source file for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/uart/uart_mix_fifo_poll/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(uart_mix_fifo_poll)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/tests/drivers/uart/uart_mix_fifo_poll/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Binary Output\nDESCRIPTION: This line adds the 'bin' directory as a subdirectory to the current CMake project.  This means the CMakeLists.txt file in the 'bin' directory will be processed as part of the overall build process. Typically, this directory contains the compiled binary output of the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(bin)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version for Zephyr Project\nDESCRIPTION: This snippet sets the minimum required version of CMake to 3.20.0 for the project. CMake is a build system generator that is required to structure the project build environment appropriately.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring QSPI Memory Programming in CMake\nDESCRIPTION: CMake macro configuration for setting up QSPI external memory programming using nrfutil. This enables successful programming of the target board using the 'west flash' command by specifying an external memory configuration file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(app_set_runner_args)\n  # Replace with the filename of your json file\n  board_runner_args(nrfutil \"--ext-mem-config-file=${CMAKE_CURRENT_SOURCE_DIR}/qspi_nrfutil.json\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Handling CMock for nRF9x Sockets Test Dependencies\nDESCRIPTION: Sets up CMock handling for nRF socket and modem OS header files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/nrf9x_sockets/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_socket.h)\ncmock_handle(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/nrf_modem_os.h)\n```\n\n----------------------------------------\n\nTITLE: Enabling Walkie-Talkie Demo in Kconfig\nDESCRIPTION: Sets the CONFIG_WALKIE_TALKIE_DEMO Kconfig option to enable the walkie-talkie demo in the nRF5340 Audio application. This configuration can be applied to both debug and release versions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/configuration.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_WALKIE_TALKIE_DEMO=y\n```\n\n----------------------------------------\n\nTITLE: Defining Wi-Fi Drivers Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for Wi-Fi driver documentation using reStructuredText syntax. It includes sections for nRF70 native and portable drivers, as well as low-level API documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/wifi.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _wifi_drivers:\n\nWi-Fi drivers\n#############\n\n.. toctree::\n   :maxdepth: 2\n\n   wifi/nrf70_native\n   wifi/nrf70_portable\n   wifi/low_level_api\n```\n\n----------------------------------------\n\nTITLE: Setting include directories for fmdn\nDESCRIPTION: These commands set the include directories for the 'fmdn' library.  'include' is PUBLIC, meaning it is visible to other libraries, while 'include_priv' and '../include/common' are PRIVATE, not visible to other libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_include_directories(fmdn PUBLIC include)\ntarget_include_directories(fmdn PRIVATE include_priv)\ntarget_include_directories(fmdn PRIVATE ../include/common)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Project\nDESCRIPTION: This line defines the CMake project named 'NONE'. The `project` command is used to set the name of the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_mds/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: Conditional Zephyr Source Inclusion\nDESCRIPTION: This snippet conditionally includes the `settings_zms_legacy.c` source file into the Zephyr build process. It checks if the Kconfig option `CONFIG_SETTINGS_ZMS_LEGACY` is enabled. If it is, then the source file is included; otherwise, it is not.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/settings/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_SETTINGS_ZMS_LEGACY settings_zms_legacy.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic Provisioning Image\nDESCRIPTION: Sets up the CMake build configuration for a provisioning image project. Specifies minimum CMake version, finds Zephyr package, adds source files and include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/provisioning_image/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2022 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(provisioning_image)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n\ntarget_include_directories(app PRIVATE src)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Configuration\nDESCRIPTION: This snippet configures a CMake project for a Zephyr application. It sets the minimum CMake version to 3.20.0, finds the Zephyr package, defines the project name as `spi_dt_spec`, and adds the main source file for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/spi/dt_spec/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(spi_dt_spec)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/tests/drivers/spi/dt_spec/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Edge Impulse Directory Configuration\nDESCRIPTION: Sets up directory paths for Edge Impulse build artifacts including source, binary, and stamp directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/edge_impulse/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(EDGE_IMPULSE_DIR        ${CMAKE_BINARY_DIR}/edge_impulse)\nset(EDGE_IMPULSE_SOURCE_DIR ${EDGE_IMPULSE_DIR}/src/edge_impulse_project)\nset(EDGE_IMPULSE_BINARY_DIR ${EDGE_IMPULSE_DIR}/src/edge_impulse_project-build)\nset(EDGE_IMPULSE_STAMP_DIR  ${EDGE_IMPULSE_DIR}/src/edge_impulse_project-stamp)\nset(EDGE_IMPULSE_LIBRARY    ${EDGE_IMPULSE_BINARY_DIR}/libedge_impulse.a)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources\nDESCRIPTION: This command specifies the source files that should be included in the application target. The PRIVATE keyword indicates that the source files are only used within this target and are not exposed to other targets. src/main.c is the main source file for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/record_launch_app/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_sources(app  PRIVATE src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Console Output for SoftAP Wi-Fi Provisioning Initialization\nDESCRIPTION: Console log demonstrating the startup sequence of the SoftAP Wi-Fi provisioning sample, including certificate registration, network interface initialization, and entering provisioning mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/provisioning/softap/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n*** Using Zephyr OS v3.6.99-25fbeabe9004 ***\n[00:00:00.662,811] <inf> softap_wifi_provision_sample: SoftAP Wi-Fi provision sample started\n[00:00:00.673,187] <dbg> softap_wifi_provision: init_entry: Registering self-signed server certificate\n[00:00:08.612,731] <dbg> softap_wifi_provision: certificate_register: Self-signed server certificate provisioned\n[00:00:08.652,038] <inf> softap_wifi_provision_sample: Network interface brought up\n[00:00:08.660,858] <dbg> softap_wifi_provision: process_tcp4: Waiting for IPv4 HTTP connections on port 443\n[00:00:08.671,020] <dbg> softap_wifi_provision: wifi_scan: Scanning for Wi-Fi networks...\n[00:00:13.301,605] <dbg> softap_wifi_provision: net_mgmt_wifi_event_handler: NET_EVENT_WIFI_SCAN_DONE\n[00:00:13.311,401] <dbg> softap_wifi_provision: unprovisioned_exit: Scanning for Wi-Fi networks completed, preparing protobuf payload\n[00:00:13.324,523] <dbg> softap_wifi_provision: unprovisioned_exit: Protobuf payload prepared, scan results encoded, size: 212\n[00:00:13.336,212] <dbg> softap_wifi_provision: provisioning_entry: Enabling AP mode to allow client to connect and provide Wi-Fi credentials.\n[00:00:13.349,273] <dbg> softap_wifi_provision: provisioning_entry: Waiting for Wi-Fi credentials...\n[00:00:14.034,057] <dbg> softap_wifi_provision: net_mgmt_wifi_event_handler: NET_EVENT_WIFI_AP_ENABLE_RESULT\n[00:00:14.046,051] <inf> softap_wifi_provision_sample: Provisioning started\n[00:00:14.054,565] <dbg> softap_wifi_provision: dhcp_server_start: IPv4 address added to interface\n[00:00:14.063,964] <dbg> softap_wifi_provision: dhcp_server_start: IPv4 netmask set\n[00:00:14.072,296] <dbg> softap_wifi_provision: dhcp_server_start: DHCPv4 server started\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Components with mbedTLS in CMake\nDESCRIPTION: The CMake script sets up the build environment for SUIT firmware update components. It adds subdirectories for tests, configures inclusion paths, and conditionally links mbedTLS libraries to various SUIT components based on configuration flags. It also includes a workaround for mbedTLS build script issues.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(mci_test)\nadd_subdirectory(validator_test)\nadd_subdirectory_ifdef(CONFIG_SUIT_STREAM_FILTER_DECRYPT decrypt_utils)\nzephyr_include_directories(${CMAKE_CURRENT_LIST_DIR}/include)\n\nif(CONFIG_MBEDTLS)\n  if(CONFIG_SUIT_PLATFORM)\n    # Link SUIT platform (incl. crypto) module with mbedTLS library, that provides PSA crypto APIs.\n    target_link_libraries(suit_platform_interface INTERFACE mbedTLS)\n  endif()\n\n  if(CONFIG_SUIT_STREAM_SINK_DIGEST)\n    target_link_libraries(suit_stream_sinks_interface INTERFACE mbedTLS)\n  endif()\n\n  if(CONFIG_SUIT_STREAM_FILTER_DECRYPT)\n    target_link_libraries(suit_stream_filters_interface INTERFACE mbedTLS)\n    target_link_libraries(suit_decrypt_test_utils PUBLIC mbedTLS)\n  endif()\n\n  if(CONFIG_SUIT_STORAGE_LAYOUT_SOC)\n    target_link_libraries(suit_storage_interface INTERFACE mbedTLS)\n  endif()\n\n  # Fix the mbedTLS build scripts:\n  #   The \"mbedtls/library/psa_crypto_cipher.c\" file includes \"<psa_crypto_cipher.h>\",\n  #   but this header is not a part of mbedTLS public API, thus it is not found and\n  #   the compiler reports this as an error.\n  target_include_directories(mbedTLS INTERFACE ${ZEPHYR_MBEDTLS_MODULE_DIR}/library)\nendif()\n\nif(CONFIG_SUIT_DEFAULT_MBEDTLS_CONFIG)\n  # Add include path for the default, customized mbedTLS configuration header.\n  zephyr_include_directories(${CMAKE_CURRENT_LIST_DIR}/tls_config)\nendif()\n\nzephyr_interface_library_named(suit_update_magic_values)\ntarget_include_directories(suit_update_magic_values INTERFACE .)\n```\n\n----------------------------------------\n\nTITLE: Executing Azure IoT Hub Sample on Zephyr\nDESCRIPTION: This console output shows the steps during boot-up and connection to the Azure IoT Hub on a device running the Zephyr OS. The logs indicate successful initialization, network connectivity establishment, and event transmission to the IoT Hub. Key parameters include device ID and event data sent. This output is crucial for verifying the device's successful integration with Azure IoT services.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/azure_iot_hub/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v2.3.0-rc1-ncs1-1453-gf41496cd30d5  ***\n<inf> azure_iot_hub_sample: Azure IoT Hub sample started\n<inf> azure_iot_hub_sample: Bringing network interface up and connecting to the network\n<inf> azure_iot_hub_sample: Device ID: my-device\n<inf> azure_iot_hub_sample: Connecting...\n<inf> azure_iot_hub_sample: Network connectivity established and IP address assigned\n<inf> azure_fota: Current firmware version: 0.0.1-dev\n<inf> azure_iot_hub_sample: Azure IoT Hub library initialized\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_CONNECTING\n<inf> azure_iot_hub_sample: Connection request sent to IoT Hub\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_CONNECTED\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_READY\n<inf> azure_iot_hub_sample: Sending event:\n<inf> azure_iot_hub_sample: {\"temperature\":25.9,\"timestamp\":16849}\n<inf> azure_iot_hub_sample: Event was successfully sent\n<inf> azure_iot_hub_sample: Next event will be sent in 60 seconds\n```\n\n----------------------------------------\n\nTITLE: Configuring NFC NDEF Library Components in CMake\nDESCRIPTION: This CMake configuration conditionally includes various NFC NDEF source files based on enabled configuration options. It sets up a Zephyr library with components for message handling, record creation, parsing, and specific record types including Bluetooth LE Out-of-Band, text records, URI records, and connection handover records.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nfc/ndef/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_MSG msg.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_RECORD record.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_LE_OOB_REC le_oob_rec.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_LE_OOB_REC_PARSER le_oob_rec_parser.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_TEXT_RECORD text_rec.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_URI_MSG uri_msg.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_URI_REC uri_rec.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_CH_REC ch.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_CH_MSG ch_msg.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_PARSER msg_parser.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_PARSER msg_parser_local.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_PAYLOAD_TYPE_COMMON payload_type_common.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_PARSER record_parser.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_TNEP_RECORD tnep_rec.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_CH_PARSER ch_rec_parser.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_LAUNCHAPP_MSG launchapp_msg.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_NDEF_LAUNCHAPP_REC launchapp_rec.c)\n```\n\n----------------------------------------\n\nTITLE: Setting NRF Board Selected Variable\nDESCRIPTION: This snippet sets the NRF_BOARD_SELECTED variable to True, indicating that a Nordic board is being used.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf5340_cpuapp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(NRF_BOARD_SELECTED True)\n```\n\n----------------------------------------\n\nTITLE: Including Source Files Conditionally in Zephyr Projects using CMake\nDESCRIPTION: This snippet demonstrates how to conditionally include a C source file (`cs_de.c`) in a Zephyr project using the Zephyr build system. It requires the `CONFIG_BT_CS_DE` configuration option to be defined for inclusion. This pattern is typical for enabling features based on user-defined configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/cs_de/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_CS_DE cs_de.c)\n```\n\n----------------------------------------\n\nTITLE: Including Volume Directory Headers in CMake\nDESCRIPTION: Adds the volume directory to the include path for the Zephyr library to make header files accessible.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_rendering_and_capture/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_include_directories(\n    volume\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Manager Proxy Project with CMake\nDESCRIPTION: Sets up the CMake configuration for the Event Manager Proxy project. It sets the minimum CMake version requirement, finds the Zephyr package, adds subdirectories for components, and includes the main source file in the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(event_manager_proxy)\n\nadd_subdirectory(common_events)\nadd_subdirectory(modules)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Tool Version Requirements Table in RST\nDESCRIPTION: Documentation of required tool versions using RST table syntax with header rows and multiple columns.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.2.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\n.. list-table::\\n   :header-rows: 1\\n\\n   * - Tool\\n     - Version\\n     - Download link\\n   * - SEGGER J-Link\\n     - V6.60e\\n     - `J-Link Software and Documentation Pack`_\\n   * - nRF Command Line Tools\\n     - v10.6.0\\n     - `nRF Command Line Tools`_\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Power Model Getter Function in C\nDESCRIPTION: Function to provide a custom FEM power model. This should return a pointer to an mpsl_fem_power_model_t structure containing model callbacks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_power_models.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nmpsl_fem_power_model_t* mpsl_fem_power_model_to_use_get(void)\n```\n\n----------------------------------------\n\nTITLE: Checking Out And Updating NCS Repositories\nDESCRIPTION: Git and West commands to update NCS repositories to a particular revision or branch.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/updating.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit fetch origin\ngit checkout *next_revision*\nwest update\n```\n\n----------------------------------------\n\nTITLE: Console Output: UICC LwM2M Sample Execution\nDESCRIPTION: Example console output showing a successful execution of the UICC LwM2M sample. It displays the initialization message, confirmation that bootstrap data was found (including its length), and a hexadecimal dump of the retrieved bootstrap data which includes a CoAP server URL.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/uicc_lwm2m/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nUICC LwM2M sample started\nLwM2M bootstrap data found, length: 256\n\n0000  00 01 00 36 00 00 00 00  31 08 00 2e c8 00 25 63   ...6.... 1.....%c\n0010  6f 61 70 3a 2f 2f 6c 65  73 68 61 6e 2e 65 63 6c   oap://le shan.ecl\n0020  69 70 73 65 70 72 6f 6a  65 63 74 73 2e 69 6f 3a   ipseproj ects.io:\n0030  35 37 38 33 c1 01 01 c1  02 03 ff ff ff ff ff ff   5783.... ........\n0040  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n0050  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n0060  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n0070  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n0080  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n0090  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n00a0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n00b0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n00c0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n00d0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n00e0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n00f0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory\nDESCRIPTION: This snippet adds a subdirectory to the build process. It includes the `common` directory located in `${ZEPHYR_BASE}/soc/nordic/common` and makes it available in the build under `${CMAKE_BINARY_DIR}/common`.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/nrf71/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${ZEPHYR_BASE}/soc/nordic/common ${CMAKE_BINARY_DIR}/common)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This command uses CMake's `find_package` function to locate the Zephyr SDK. It requires the Zephyr package and provides a hint for the location of the Zephyr base directory using the environment variable `ZEPHYR_BASE`.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_adc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Input Files with Exclusion\nDESCRIPTION: This command-line option is used with 'west ncs-sbom' to specify input files using glob patterns including exclusion. It allows including multiple files that match a specific pattern, while excluding others that match another pattern.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"--input-files '**/*.c' '!**/main.c'\"\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for MCUmgr SMP Client Test\nDESCRIPTION: Sets up the CMake project, finds the Zephyr package, and defines the project name. It also specifies the minimum required CMake version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/mcumgr_smp_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(mcumgr_smp_client_test)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to nRF Desktop Project\nDESCRIPTION: Adds various subdirectories containing application sources to the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Application sources\nadd_subdirectory(src/events)\nadd_subdirectory(src/hw_interface)\nadd_subdirectory(src/modules)\nadd_subdirectory(src/util)\n```\n\n----------------------------------------\n\nTITLE: Listing Upstream Zephyr Commit History\nDESCRIPTION: This command retrieves the commit history of the upstream Zephyr repository starting from a specific revision, filtering out commits that have already been integrated into the NCS SDK. It is essential for tracking changes and maintaining the integrity of the codebase during updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.9.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: none\nCODE:\n```\ngit log --oneline 45ef0d2 ^zephyr-v2.7.0\n```\n\n----------------------------------------\n\nTITLE: Generating Factory Data for Matter Weather Station\nDESCRIPTION: Command to build the application with factory data support enabled and generate new factory data set for the target board.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_weather_station/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b thingy53/nrf5340/cpuapp -- -DEXTRA_CONF_FILE=overlay-factory_data.conf -DSB_CONFIG_MATTER_FACTORY_DATA_GENERATE=y -DFILE_SUFFIX=factory_data\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Set in CMake\nDESCRIPTION: Function used in nrf/doc/CMakeLists.txt to create targets for building different documentation sets, including regular builds, inventory builds, link checking, and cleaning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/doc_build_process.rst#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_docset\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Options Enum and Descriptors\nDESCRIPTION: Example showing how to define an enum for module options and create a corresponding array of option descriptors.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/config_channel.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nenum test_module_opt {\n    TEST_MODULE_OPT_FILTER_PARAM,\n    TEST_MODULE_OPT_PARAM_BLE,\n    TEST_MODULE_OPT_PARAM_WIFI,\n\n    TEST_MODULE_OPT_COUNT\n};\n\nstatic const char * const opt_descr[] = {\n    [TEST_MODULE_OPT_FILTER_PARAM] = \"filter_param\",\n    [TEST_MODULE_OPT_PARAM_BLE] = \"param_ble\",\n    [TEST_MODULE_OPT_PARAM_WIFI] = \"param_wifi\"\n};\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for Board and Task Executor\nDESCRIPTION: CMake configuration for including board and task executor modules in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n    ${COMMON_ROOT}/src/app/task_executor.cpp\n    ${COMMON_ROOT}/src/board/board.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Handling NDEF Write Completion in C\nDESCRIPTION: Informs the library about completion of the NDEF write procedure using nfc_tnep_poller_on_ndef_write. This is used after asynchronous write operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/poller.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nnfc_tnep_poller_on_ndef_write();\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option for Connection Handle Maximum Number\nDESCRIPTION: This snippet sets the `CONFIG_TFM_DOORBELL_API` CMake option using the value of `CONFIG_TFM_CONN_HANDLE_MAX_NUM` if `CONFIG_TFM_CONN_HANDLE_MAX_NUM` is defined. This value dictates the maximum number of secure services connected/requested concurrently when IPC mode is used.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_CONN_HANDLE_MAX_NUM)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DCONFIG_TFM_DOORBELL_API=${CONFIG_TFM_CONN_HANDLE_MAX_NUM}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Socket Response Format\nDESCRIPTION: Response format for socket operations showing handle, type and protocol information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT\nCODE:\n```\n#XSOCKET: <handle>,<type>,<protocol>\\n#XSOCKET: <result>,\"closed\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of Custom Trace Backend in CMake\nDESCRIPTION: Adds the custom trace backend source file to compilation only if the NRF_MODEM_LIB_TRACE and NRF_MODEM_LIB_TRACE_BACKEND_CUSTOM configs are enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_trace_backend/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_NRF_MODEM_LIB_TRACE)\n\n# Only add 'custom' backend to compilation when selected.\nzephyr_library_sources_ifdef(\n  CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_CUSTOM\n  src/trace_print_stats.c\n)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Source File to the Project\nDESCRIPTION: This snippet adds the source file 'src/main.c' to the application's private sources.  This makes the code in `src/main.c` part of the executable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/uarte_suspend/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_sources(app PRIVATE src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Configure KMU Slots\nDESCRIPTION: This configures the number of KMU slots available. You can manage these features through the ``CONFIG_BOOT_SIGNATURE_KMU_SLOTS`` and ``CONFIG_BOOT_SIGNATURE_KMU_SLOTS`` MCUboot Kconfig options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_14\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_SIGNATURE_KMU_SLOTS\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_SIGNATURE_KMU_SLOTS\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Cache Pool Digest Integration Test in CMake\nDESCRIPTION: This CMake configuration sets up an integration test for the SUIT cache pool digest functionality. It establishes the minimum CMake version, finds the Zephyr package, defines the project, includes a test template, and links against various SUIT libraries needed for the integration test.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/cache_pool_digest/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_cache_pool_digest)\ninclude(../cmake/test_template.cmake)\n\nzephyr_library_link_libraries(suit_stream_sinks_interface)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_platform_interface)\nzephyr_library_link_libraries(suit_execution_mode)\nzephyr_library_link_libraries(suit_memptr_storage_interface)\nzephyr_library_link_libraries(suit_memory_layout_interface)\n```\n\n----------------------------------------\n\nTITLE: Running ZAP GUI with Custom Cluster\nDESCRIPTION: Command to start the ZAP GUI tool with a custom cluster XML file. It copies the original zcl.json file, adds the custom cluster, and uses the modified file as input to the ZAP tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/custom_clusters.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nwest zap-gui -j ./zcl.json --clusters ./MyCluster.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring a Nordic nRF Connect SDK Application with CMake\nDESCRIPTION: This CMake configuration sets up a Zephyr-based application for the Nordic nRF Connect SDK. It specifies the minimum CMake version required (3.20.0), locates the Zephyr package using environment variables, defines the project name as 'hpf_app_fault_timer', and adds the main.c source file to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/mspi/app_fault_timer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(hpf_app_fault_timer)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot mode: Swap using move\nDESCRIPTION: Executes a dual-bank image swapping algorithm by moving sectors, offering greater efficiency than scratch-based swaps, suitable only for memories with consistent erase block sizes. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_SWAP_USING_MOVE\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_BOOT_SWAP_USING_MOVE`\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Nordic SDK Project\nDESCRIPTION: Sets the project name to NONE, which is a placeholder value often used when the project name is not explicitly required. Prepares the CMake environment for the Nordic SDK application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tnep_tag/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options\nDESCRIPTION: Sets compiler options to disable specific warnings for the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(app PRIVATE -Wno-error=maybe-uninitialized)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Twister on Linux for Specific Board\nDESCRIPTION: Command for running unit tests using Twister tool on Linux for a specific target board (qemu_cortex_m3). The -p parameter specifies the target board platform.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/test_framework/running_unit_tests.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n<Zephyr_path>/scripts/twister -T . -p qemu_cortex_m3\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Multiple Advertising Sets Project in CMake\nDESCRIPTION: This CMake script sets up the project configuration for a Nordic Semiconductor application using multiple advertising sets. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, and adds the main source file to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/multiple_adv_sets/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(multiple_adv_sets)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for FMFU SMP Server\nDESCRIPTION: Sets up the CMake build environment for the FMFU SMP server application. Requires CMake 3.20.0 or higher, finds the Zephyr package, and adds main.c as the primary source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/fmfu_smp_svr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(fmfu_smp_svr)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Making the AppImage executable on Linux\nDESCRIPTION: This code snippet provides the command to make the downloaded AppImage file executable on Linux systems. This step is required before the application can be run.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/manufacturer_cluster_editor_tool.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"chmod +x ./nrfconnect-matter-manufacturer-cluster-editor_linux.AppImage\"\n```\n\n----------------------------------------\n\nTITLE: Setting AT Command Request Response Buffer Length in Kconfig\nDESCRIPTION: Sets the size of the buffer for storing responses to modem AT commands before they are forwarded to the cloud. Modem responses longer than this length will be replaced with an error code message (-NRF_E2BIG). Cannot be less than 40 bytes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_31\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_AT_CMD_REQUEST_RESPONSE_BUFFER_LENGTH\n```\n\n----------------------------------------\n\nTITLE: Programming nRF9151 Application Core via Debug Probe\nDESCRIPTION: Command to program the application binary to the nRF9151 application core using an external debug probe. Requires J-Link serial number and uses jlink trait.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy91x/thingy91x_updating_fw_programmer.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --firmware <name_of_application_binary.hex> --serial-number <J-Link Serial number> --traits jlink --x-family nrf91 --core Application\n```\n\n----------------------------------------\n\nTITLE: Sending AT Commands via SLM Shell\nDESCRIPTION: Examples of sending AT commands through the SLM shell interface, showing both command and response formats.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_slm.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ slm AT%XPTW=4,\\\"0001\\\"\n\nOK\n\nuart:~$ slm at%ptw?\n\n%XPTW: 4,\"0001\"\n%XPTW: 5,\"0011\"\n\nOK\n```\n\n----------------------------------------\n\nTITLE: TWI List Instance Example\nDESCRIPTION: Example showing TWI instance listing for Thingy:91, where TWI2 (i2c2) is available.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TWI_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XTWILS\n#XTWILS: 2\nOK\n```\n\n----------------------------------------\n\nTITLE: Adding UI Buzzer Source Files in CMake\nDESCRIPTION: Conditionally adds UI buzzer source file based on CONFIG_UI_BUZZER configuration option\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/ui/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_UI_BUZZER\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ui_buzzer.c)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr RTOS package. It is essential to have Zephyr installed and the `ZEPHYR_BASE` environment variable set for this to work correctly. The `REQUIRED` argument ensures the build fails if Zephyr is not found.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/client_id/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Adding Core Bluetooth Management Source Files in nRF Connect SDK\nDESCRIPTION: Adds the core Bluetooth management source files to the application build. These files are always included regardless of the Bluetooth configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_management/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/bt_mgmt.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/controller_config/bt_mgmt_ctlr_cfg.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic Power Profiling Application\nDESCRIPTION: Sets up the CMake build environment for a power profiling peripheral application. Requires Zephyr SDK and includes main application source files and power service implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_power_profiling/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2022 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(peripheral_power_profiling)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n  src/pwr_service.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Source Files in CMake for Nordic Semiconductor Project\nDESCRIPTION: This CMake snippet sets up the include directories and source files for the 'app' target. It includes the current directory and adds various source files, some conditionally based on configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/at/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n\ntarget_sources(app PRIVATE at_shell.c)\ntarget_sources_ifdef(CONFIG_MOSH_AT_CMD_MODE app PRIVATE at_cmd_mode.c)\ntarget_sources_ifdef(CONFIG_MOSH_AT_CMD_MODE app PRIVATE at_cmd_mode_sett.c)\ntarget_sources_ifdef(CONFIG_MOSH_AT_CMD_MODE app PRIVATE at_cmd_mode_custom.c)\n```\n\n----------------------------------------\n\nTITLE: Set target include directories\nDESCRIPTION: Sets the include directories for the `app` target to include the specified directories. This ensures that the compiler can find the necessary header files during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE\n    include\n    include/internal\n    include/internal/ctrl\n    include/internal/rf)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Source Files with CMake\nDESCRIPTION: This snippet conditionally includes various source files based on specific LwM2M application configurations, provided as preprocessor definitions. It leverages CMake's conditional directives.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/lwm2m/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_LWM2M_APP_LIGHT_CONTROL\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_light_control.c)\n\ntarget_sources_ifdef(CONFIG_LWM2M_APP_BUZZER\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_buzzer.c)\n\ntarget_sources_ifdef(CONFIG_LWM2M_APP_PUSH_BUTTON\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_push_button.c)\n\ntarget_sources_ifdef(CONFIG_LWM2M_APP_ONOFF_SWITCH\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_onoff_switch.c)\n\ntarget_sources_ifdef(CONFIG_LWM2M_APP_LIGHT_SENSOR\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_light_sensor.c)\n\ntarget_sources_ifdef(CONFIG_LWM2M_APP_TEMP_SENSOR\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_temp_sensor.c)\n\ntarget_sources_ifdef(CONFIG_LWM2M_APP_PRESS_SENSOR\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_press_sensor.c)\n\ntarget_sources_ifdef(CONFIG_LWM2M_APP_HUMID_SENSOR\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_humid_sensor.c)\n\ntarget_sources_ifdef(CONFIG_LWM2M_APP_GAS_RES_SENSOR\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_gas_res_sensor.c)\n\ntarget_sources_ifdef(CONFIG_LWM2M_APP_ACCELEROMETER\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_accelerometer.c)\n\ntarget_sources_ifdef(CONFIG_LWM2M_PORTFOLIO_OBJ_SUPPORT\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_portfolio_object.c)\n```\n\n----------------------------------------\n\nTITLE: Uploading and Installing Test Firmware Variant A\nDESCRIPTION: Combined command for uploading, installing, and serving images for the test firmware variant A that does not confirm its correctness.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-envelope --serial-port COM7 --envelope-file root.suit --install --serve-images 60\n```\n\n----------------------------------------\n\nTITLE: Enabling GPIO Entrance for Firmware Loader in Kconfig\nDESCRIPTION: This Kconfig fragment enables the GPIO entrance method for entering the firmware loader application. When this option is set, the firmware loader application will be booted when a specific GPIO pin is held upon device reboot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_14\n\nLANGUAGE: cfg\nCODE:\n```\n\"CONFIG_BOOT_FIRMWARE_LOADER_ENTRANCE_GPIO=y\"\n```\n\n----------------------------------------\n\nTITLE: DECT Data Transmission Commands\nDESCRIPTION: Commands for sending periodic JSON-formatted data between associated devices using random access channels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_31\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ dect mac rach_tx -t 2 -d \"Data from device 1\" -i 10 -j\n```\n\n----------------------------------------\n\nTITLE: TCP Server Response Syntax\nDESCRIPTION: Response format for TCP server operations showing success/failure status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: plain text\nCODE:\n```\n#XTCPSVR: <handle>,\"started\"\n\n#XTCPSVR: <error>,\"not started\"\n```\n\n----------------------------------------\n\nTITLE: Preparing Headers for CMock Processing in CMake\nDESCRIPTION: Prepares two versions of a header file for CMock processing: one with system calls removed and static inline functions converted to standard functions, and another with a __cmock_ prefix added to all functions for generating the mock implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/unity/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(cmock_headers_prepare in_header out_header wrap_header)\n  execute_process(\n    COMMAND\n    ${PYTHON_EXECUTABLE}\n    ${ZEPHYR_NRF_MODULE_DIR}/scripts/unity/header_prepare.py\n    \"--input\" ${in_header}\n    \"--output\" ${out_header}\n    \"--wrap\" ${wrap_header}\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n    RESULT_VARIABLE op_result\n    OUTPUT_VARIABLE output_result\n  )\n\n  if (NOT ${op_result} EQUAL 0)\n    message(SEND_ERROR \"${output_result}\")\n    message(FATAL_ERROR \"Failed to parse header ${in_header}\")\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for DFU Target Stream Test in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build environment for a DFU target stream test application. It requires CMake 3.20.0 or higher, finds the Zephyr package, sets the project name, and includes all .c files from the src directory as source files for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/dfu/dfu_target_stream/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(test_dfu_target_stream)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Create Zephyr Library (CMake)\nDESCRIPTION: Creates a Zephyr library, which is a collection of source files compiled into a reusable module. This is a standard Zephyr CMake function for creating libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/mci/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AT Command Parser Project in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build configuration for the AT command parser project. It specifies the minimum CMake version, locates the Zephyr package, defines the project name, and includes all source files from the src directory into the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/at_cmd_parser/at_cmd_parser/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(at_cmd_parser)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Establishes the minimum required CMake version for the project, ensuring compatibility with recent CMake features\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/extxip_smp_svr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kconfig Settings for Recovery Applications\nDESCRIPTION: Configuration settings required for recovery applications, including enabling SUIT recovery mode and disabling UICR and BICR generation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_recovery.rst#2025-04-21_snippet_0\n\nLANGUAGE: cfg\nCODE:\n```\nCONFIG_SUIT_RECOVERY=y\nCONFIG_NRF_REGTOOL_GENERATE_UICR=n\nCONFIG_SOC_NRF54H20_GENERATE_BICR=n\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Motion Detector Module\nDESCRIPTION: Conditionally adds and links the motion detector module when Fast Pair Find My Device Network (FMDN) device utilization low-threshold motion detector is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_BT_FAST_PAIR_FMDN_DULT_MOTION_DETECTOR)\n  add_subdirectory(src/motion_detector)\n  target_link_libraries(app PRIVATE app_motion_detector)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This command sets the minimum required CMake version to 3.20.0. It ensures that the CMake version used to build the project meets the specified requirement for compatibility and feature availability.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hids_mouse/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Locating and Adding Test Source Files\nDESCRIPTION: Discovers and adds C source files from the Zephyr timer test directory to the application target, enabling compilation of test components\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/timer/nrf_grtc_timer/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/timer/nrf_grtc_timer/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Adding Linker Sections for Factory Reset and Fast Pair Advertisement\nDESCRIPTION: Configures custom linker sections for factory reset callbacks and Fast Pair advertisement triggers by adding specific linker files to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_linker_sources(SECTIONS src/factory_reset_callbacks.ld)\n\nzephyr_linker_sources(DATA_SECTIONS src/fp_adv_trigger.ld)\n```\n\n----------------------------------------\n\nTITLE: Setting Sysbuild Configuration Directory in CMake\nDESCRIPTION: Defines the directory for sysbuild configuration files based on the normalized board target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/sysbuild/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SB_APPLICATION_CONFIG_DIR\n    \"${CMAKE_CURRENT_LIST_DIR}/configuration/\\${NORMALIZED_BOARD_TARGET}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Events Library in CMake\nDESCRIPTION: Sets up a named interface library for SUIT Events, configures include directories, and builds the library from source files. The configuration creates both an interface library and a standard library, linking them together.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# SUIT Events API\nzephyr_interface_library_named(suit_events)\ntarget_include_directories(suit_events INTERFACE include)\n\nzephyr_library()\nzephyr_library_sources(src/suit_events.c)\nzephyr_library_link_libraries(suit_events)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name - CMake\nDESCRIPTION: This line defines the project name for the CMake configuration, indicating that this is a profiler sample application. It sets the context for the build system and related configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_profiler/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(\"Profiler sample\")\n```\n\n----------------------------------------\n\nTITLE: Configure Wi-Fi NRF70\nDESCRIPTION: This snippet configures Wi-Fi-related settings for the NRF70. It sets `CONFIG_WIFI_NRF70` to `y` if `SB_CONFIG_WIFI_NRF70` is enabled. It also iterates through a list of configuration options (`WIFI_PATCHES_EXT_FLASH_DISABLED`, `WIFI_PATCHES_EXT_FLASH_XIP`, `WIFI_PATCHES_EXT_FLASH_STORE`) and sets corresponding `CONFIG_NRF_*` options based on their respective `SB_CONFIG_*` values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n \"if(SB_CONFIG_WIFI_NRF70)\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_WIFI_NRF70 y)\n\n    foreach(config WIFI_PATCHES_EXT_FLASH_DISABLED WIFI_PATCHES_EXT_FLASH_XIP\n            WIFI_PATCHES_EXT_FLASH_STORE)\n      if(${SB_CONFIG_${config}})\n        set_config_bool(${DEFAULT_IMAGE} CONFIG_NRF_${config} ${SB_CONFIG_${config}})\n      endif()\n    endforeach()\n\n    if(NOT DEFINED SB_CONFIG_WIFI_PATCHES_EXT_FLASH_DISABLED)\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_NRF_WIFI_PATCHES_BUILTIN n)\n    endif()\n\n    foreach(config NRF70_SYSTEM_MODE NRF70_SCAN_ONLY NRF70_RADIO_TEST\n            NRF70_SYSTEM_WITH_RAW_MODES)\n      if(${SB_CONFIG_WIFI_${config}})\n        set_config_bool(${DEFAULT_IMAGE} CONFIG_${config} ${SB_CONFIG_WIFI_${config}})\n      endif()\n    endforeach()\n\n    if(NOT DEFINED SB_CONFIG_DFU_MULTI_IMAGE_PACKAGE_WIFI_FW_PATCH)\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_NRF_WIFI_FW_PATCH_DFU n)\n    else()\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_NRF_WIFI_FW_PATCH_DFU ${SB_CONFIG_DFU_MULTI_IMAGE_PACKAGE_WIFI_FW_PATCH})\n    endif()\n  else()\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_WIFI_NRF70 n)\n  endif()\"\n```\n\n----------------------------------------\n\nTITLE: Scanning for Wi-Fi Networks using Shell Commands\nDESCRIPTION: Command to scan for all available Wi-Fi access points in the vicinity. This displays a list of detected networks with their details.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/using_wifi_shell_sample.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi scan\n```\n\n----------------------------------------\n\nTITLE: Creating CRACEN PSA Driver Static Library in CMake\nDESCRIPTION: Defines a static library for the CRACEN PSA driver using the previously collected source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/cracen/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(cracen_psa_driver STATIC\n  ${cracen_driver_sources}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake with Target Sources\nDESCRIPTION: This CMake snippet sets up a source file path for the CMake build system, specifically targeting 'network.c' in the current source directory for a private build in the application target. It assumes prior CMake installation. The primary operations involve setting the target source file, interpreted within the context of a CMakeLists.txt setup. The snippet is intended for C projects needing nuanced build subsystems.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/modules/network/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/network.c)\n```\n\n----------------------------------------\n\nTITLE: Defining the project\nDESCRIPTION: Defines the project name as \"remote\". This name is used to identify the project in the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_flpr/remote/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(remote)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Property Value of Light Control Server - C\nDESCRIPTION: Sets a specified property value for the Light Lightness Control Server and waits for a response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl prop-set <ID> <Val>\n\tSet a property value of the Light Lightness Control Server and wait for a response.\n\n\t* ``ID`` - ID of the property to set. See :c:enum:`bt_mesh_light_ctrl_prop` for a list of supported properties.\n\t* ``Val`` - The new value of the property.\n```\n\n----------------------------------------\n\nTITLE: Setting up Build Environment on Windows\nDESCRIPTION: Sets up the command-line build environment by executing the Zephyr environment script for Windows.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_15\n\nLANGUAGE: bat\nCODE:\n```\nzephyr\\zephyr-env.cmd\n```\n\n----------------------------------------\n\nTITLE: Setting Pre-defined Use Case with Shell Command\nDESCRIPTION: Command to set a pre-defined use case configuration. A use case is a set of configurations commonly used together. All available use cases can be listed with 'nac usecase print'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnac usecase <use_case>\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name for the multi-image application. It establishes 'idle_spim' as the project's identifier.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_spim/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nproject(idle_spim)\n```\n\n----------------------------------------\n\nTITLE: Starting ControlAppC Service on OpenWRT AP - Console\nDESCRIPTION: This snippet shows the command needed to start the ControlAppC service on an OpenWRT access point (AP) as part of the test execution prerequisites. It ensures the OpenWRT AP is operational before executing test cases.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n/usr/sbin/run.sh platform\n```\n\n----------------------------------------\n\nTITLE: Complete Matter Cluster Configuration Example\nDESCRIPTION: Complete example of a Matter cluster configuration file including cluster definition, attributes, commands, events, enums, structs, and device type definitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/custom_clusters.rst#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<configurator>\n   <cluster>\n      <domain>General</domain>\n      <name>MyNewCluster</name>\n      <code>0xFFF1FC01</code>\n      <define>MY_NEW_CLUSTER</define>\n      <description>The MyNewCluster cluster showcases a cluster manufacturer extensions</description>\n      <attribute side=\"server\" code=\"0xFFF10000\" define=\"MY_ATTRIBUTE\" type=\"boolean\" writable=\"true\" default=\"false\" optional=\"false\">MyAttribute</attribute>\n      <command source=\"client\" code=\"0xFFF10000\" name=\"MyCommand\" optional=\"false\">\n         <description>Command that takes two uint8 arguments and returns their sum.</description>\n         <arg name=\"arg1\" type=\"int8u\"/>\n         <arg name=\"arg2\" type=\"int8u\"/>\n      </command>\n      <event side=\"server\" code=\"0xFFF10000\" name=\"MyEvent\" priority=\"info\" optional=\"false\">\n         <description>Event that is generated by the server.</description>\n         <arg name=\"arg1\" type=\"int8u\"/>\n      </event>\n   </cluster>\n   <clusterExtension code=\"0x0028\">\n      <attribute side=\"server\" code=\"0x17\" define=\"EXTENDED_ATTRIBUTE\" type=\"boolean\" writable=\"true\" default=\"false\" optional=\"false\">ExtendedAttribute</attribute>\n      <command source=\"client\" code=\"0x00\" name=\"ExtendedCommand\" response=\"ExtendedCommandResponse\" optional=\"false\">\n         <description>Command that takes two uint8 arguments and returns their sum.</description>\n         <arg name=\"arg1\" type=\"int8u\"/>\n         <arg name=\"arg2\" type=\"int8u\"/>\n      </command>\n      <event side=\"server\" code=\"0x04\" name=\"ExtendedEvent\" priority=\"info\" optional=\"false\">\n         <description>Event that is generated by the server.</description>\n         <arg name=\"arg1\" type=\"int8u\"/>\n      </event>\n   </clusterExtension>\n</configurator>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thread Network Operational Dataset via CLI\nDESCRIPTION: This command retrieves the active operational dataset of the Thread network. It's executed via the UART interface and the output is a hexadecimal representation of the dataset.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/server/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot dataset active -x\n0e080000000000000000000300000b35060004001fffe00208dead00beef00cafe0708fddead00beef00000510f7893f15a55d8adeacad288c38bf32cc030a4f70656e546872656164010240120410d48d777a474f80e61aa5680de764bd6d0c0402a0f7f8\nDone\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for PPP Module in CMake\nDESCRIPTION: Adds the current directory to the private include directories for the 'app' target, allowing access to header files in the same directory as the source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/ppp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Secure Domain Core Channel Assignments\nDESCRIPTION: Special channel ID assignments for signals received by the Secure Domain core\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_architecture_ipc.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSystem Controller's debugger  7\nApplication's debugger        13\nRadio's debugger              19\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure for Integration Documentation\nDESCRIPTION: RST markup defining the structure of the integration documentation, including toctree directives for subpages and integration guides.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/integrations.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _integrations:\\n\\nIntegrations\\n############\\n\\n.. toctree::\\n   :maxdepth: 1\\n   :caption: Subpages:\\n\\n   external_comp/bt_fast_pair\\n   external_comp/edge_impulse\\n   external_comp/memfault\\n   external_comp/avsystem\\n   external_comp/nrf_cloud\\n   external_comp/coremark\\n   external_comp/dult\n```\n\n----------------------------------------\n\nTITLE: RF Tool RX Continuous with TX Peer Info 2 (Server)\nDESCRIPTION: This command configures the DECT RF tool for continuous receive (RX) mode on the server side, using information about the transmitting (TX) peer. It specifies the TX subslot and idle subslot counts, enables RX find sync, and sets the channel to 1677.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_18\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool -m rx_cont --rf_mode_peer tx --tx_subslot_count 16 --tx_idle_subslot_count 3 --rx_find_sync -c 1677\n```\n\n----------------------------------------\n\nTITLE: Finding the Zephyr package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr RTOS package. It requires the Zephyr package and provides a hint to the location using the `ZEPHYR_BASE` environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet finds the required Zephyr package for the project. It ensures the necessary dependencies are met before proceeding with the project configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/storage_nrf54h20/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flash Application\nDESCRIPTION: This snippet configures a CMake project suitable for building a flash application with the nRF Connect SDK. Dependencies include Zephyr, which must be present in the specified environment variable path. The snippet includes headers from the 'include' directory and specifies source files for the application. Zephyr's build system is used to integrate Nordic hardware-specific functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/flash/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nzephyr_include_directories(include)\n\nproject(flash)\n\ntarget_sources(app PRIVATE ./../common/main.c)\ntarget_sources(app PRIVATE src/driver_test.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Local Domain Lifecycle States\nDESCRIPTION: Commands to transition local domains to DEPLOYED state, which is required for signature verification. Includes commands for both application and radio core domains.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_signing.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-adac-local-domain-lcs-set --life-cycle ld-rot --x-domain application --serial-number <dk_serial_number>\nnrfutil device x-adac-local-domain-lcs-set --life-cycle ld-rot --x-domain radiocore --serial-number <dk_serial_number>\nnrfutil device x-adac-local-domain-lcs-set --life-cycle ld-deployed --x-domain application --serial-number <dk_serial_number>\nnrfutil device x-adac-local-domain-lcs-set --life-cycle ld-deployed --x-domain radiocore --serial-number <dk_serial_number>\n```\n\n----------------------------------------\n\nTITLE: Defining Library Sources for Shell Utilities in Zephyr (C)\nDESCRIPTION: This snippet uses the `zephyr_library_sources` and `zephyr_library_sources_ifdef` macros to conditionally include multiple source files related to Bluetooth Mesh shell commands depending on the configuration settings. It allows for modular inclusion of functionalities, such as on/off control, level control, and more, depending on the defined configuration constants. The resulting library can be linked as part of a larger application that employs these shell utilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/mesh/shell/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(shell_utils.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_ONOFF_CLI shell_onoff_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_LVL_CLI shell_lvl_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_DTT_CLI shell_dtt_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_PONOFF_CLI shell_ponoff_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_PLVL_CLI shell_plvl_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_BATTERY_CLI shell_bat_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_LOC_CLI shell_loc_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_PROP_CLI shell_prop_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_LIGHTNESS_CLI shell_lightness_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_LIGHT_CTL_CLI shell_ctl_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_LIGHT_HSL_CLI shell_hsl_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_LIGHT_XYL_CLI shell_xyl_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_LIGHT_CTRL_CLI shell_ctrl_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_TIME_CLI shell_time_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_SCENE_CLI shell_scene_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_SCHEDULER_CLI shell_scheduler_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_SENSOR_CLI shell_sensor_cli.c)\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SHELL_DM_CLI shell_dm_cli.c)\n```\n\n----------------------------------------\n\nTITLE: Listing NCS-Specific Commits\nDESCRIPTION: Git command to show NCS-specific commits added on top of Zephyr\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.4.1.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline manifest-rev ^7a3b253ced\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for nRF Connect SDK on Linux\nDESCRIPTION: Commands to install required Python packages for Zephyr, nRF, and MCUBoot components of the nRF Connect SDK on Linux.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r zephyr/scripts/requirements.txt\npip3 install -r nrf/scripts/requirements.txt\npip3 install -r bootloader/mcuboot/scripts/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for SUIT Platform Test in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the project configuration for a SUIT platform test. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, includes a test template, and links necessary SUIT-related libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/fetch_source_mgr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(platform_test)\ninclude(../cmake/test_template.cmake)\n\n# Link with the CMake target, that includes SUIT platform internal APIs header\nzephyr_library_link_libraries(suit_stream_sources_interface)\nzephyr_library_link_libraries(suit_stream_sinks_interface)\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Authentication Function Call\nDESCRIPTION: Function to overlay Bluetooth authentication callbacks for handling Fast Pair specific pairing flow.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/fast_pair.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbt_conn_auth_cb_overlay\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for PPI Trace Sample\nDESCRIPTION: Sets up the CMake project configuration with minimum version requirement and Zephyr package dependency. Configures source files including main.c and conditional inclusion of bluetooth.c based on CONFIG_USE_BLUETOOTH_RADIO_EVENTS flag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/debug/ppi_trace/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"PPI trace sample\")\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\ntarget_sources_ifdef(\n\tCONFIG_USE_BLUETOOTH_RADIO_EVENTS\n\tapp PRIVATE src/bluetooth.c\n)\n```\n\n----------------------------------------\n\nTITLE: Container Partition Definition - YAML\nDESCRIPTION: This YAML snippet shows how to define a container partition that spans multiple existing partitions. Thespan property allows the Partition Manager to logically group partitions for organization in the flash memory layout, providing flexibility in partition management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncontainer_partition_name:\n  span: [partition_1, partition_2, ..., partition_n]\n```\n\n----------------------------------------\n\nTITLE: Kconfig Slow Poll Limit Setting\nDESCRIPTION: Configuration option to set slow polling interval limit for devices in SIT mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.9.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_CHIP_ICD_SIT_SLOW_POLL_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Flashing the Coexistence Sample\nDESCRIPTION: Command to flash the built coexistence sample to a specific nRF development kit.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/thread_coex/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwest flash --dev-id <device-id> --hex-file build/merged.hex\n```\n\n----------------------------------------\n\nTITLE: UUID Constants for Wi-Fi Provisioning Service\nDESCRIPTION: Service and characteristic UUID definitions for the Wi-Fi Provisioning BLE service. Includes main service UUID and characteristic UUIDs for Information, Operation Control Point, and Data Out.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/wifi_prov.rst#2025-04-21_snippet_4\n\nLANGUAGE: uuid\nCODE:\n```\n14387800-130c-49e7-b877-2881c89cb258 // Service UUID\n14387801-130c-49e7-b877-2881c89cb258 // Information Characteristic\n14387802-130c-49e7-b877-2881c89cb258 // Operation Control Point\n14387803-130c-49e7-b877-2881c89cb258 // Data Out\n```\n\n----------------------------------------\n\nTITLE: Defining TLS_SESSION_CACHE Socket Option in C\nDESCRIPTION: Adds a socket option for TLS session caching in the BSD sockets interface extensions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nTLS_SESSION_CACHE\n```\n\n----------------------------------------\n\nTITLE: Configuring Continuous OFDM TX Traffic on Channel 11\nDESCRIPTION: Sequence of commands to configure and run a continuous OFDM TX traffic with specific parameters including channel, frame length, power, and timing settings with regulatory domain bypass.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test init 11\nwifi_radio_test bypass_reg_domain 1\nwifi_radio_test tx_pkt_rate 12\nwifi_radio_test tx_pkt_len 4000\nwifi_radio_test tx_power 4\nwifi_radio_test tx_pkt_gap 4200\nwifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for SUIT IPUC Write Process in PlantUML\nDESCRIPTION: This PlantUML code defines a sequence diagram that illustrates the SUIT In-Place Update Component (IPUC) write process. It shows interactions between ssf, sdfw_ipuc, arbiter, sys_cache, suit_utils, ipuc_entry, and flash_sink components, detailing the steps from initiating the write operation to storing the last chunk.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/suit_write_ipuc.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant ssf\nparticipant sdfw_ipuc\nparticipant arbiter\nparticipant sys_cache\nparticipant suit_utils\n\n\n--> ssf ++ : suit_ipuc_write(\\n    component_id,\\n    offset,\\n    addr,\\n    size,\\n    last_chunk\\n)\nssf -> ssf : << check if addr aligned with cache lines >>\nssf -> ssf : << extend size to full cache lines >>\n\nssf -> arbiter ++ : arbiter_mem_access_check(ssf_remote, addr, size)\ndeactivate arbiter\n\nssf -> sys_cache ++ : sys_cache_data_invd_range(addr, size)\ndeactivate sys_cache\n\nssf -> sdfw_ipuc ++ : suit_ipuc_sdfw_write(\\n    ssf_remote,\\n    component_id,\\n    offset,\\n    addr,\\n    size,\\n    last_chunk\\n)\n\nsdfw_ipuc -> suit_utils ++ : suit_plat_decode_component_type(component_id)\ndeactivate suit_utils\nsdfw_ipuc -> suit_utils ++ : suit_plat_decode_address_size(component_id)\ndeactivate suit_utils\n\nsdfw_ipuc -> ipuc_entry ** : ipuc_entry_from_component_id(component_id)\nrnote over ipuc_entry\n  IPUC_IPC_IN_PLACE_UPDATE\nend note\n\nnote right\n  Remote must match the remote from\n  the previous suit_ipuc_write_setup(..) call\nend note\n\nsdfw_ipuc -> ipuc_entry ++: << check if last chunk stored >>\nnote right\n  Last chunk flag not set.\n  If set, exits with an error code.\nend note\ndeactivate ipuc_entry\n\nopt size > 0\n\n  sdfw_ipuc -> flash_sink ** : suit_flash_sink_get(address, size)\n  sdfw_ipuc -> ipuc_entry ++ : << read write peek offset >>\n  deactivate ipuc_entry\n  opt offset > write_peek_offset\n    sdfw_ipuc -> flash_sink ++ : seek(write_peek_offset)\n    deactivate flash_sink\n    sdfw_ipuc -> flash_sink ++ : erase(offset - write_peek_offset)\n    deactivate flash_sink\n  end\n  sdfw_ipuc -> flash_sink ++ : seek (offset)\n  deactivate flash_sink\n  sdfw_ipuc -> flash_sink ++ : write(adr, size)\n  deactivate flash_sink\n  sdfw_ipuc -> flash_sink : release()\n  destroy flash_sink\n  sdfw_ipuc -> ipuc_entry ++ : << update write peek offset >>\n  deactivate ipuc_entry\nend\n\nopt last_chunk == true\n  sdfw_ipuc -> ipuc_entry ++ : << last chunk stored >>\n  deactivate ipuc_entry\nend\n\ndeactivate sdfw_ipuc\ndeactivate ssf\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Setting Occupancy Mode of Light Control Server Unacknowledged - C\nDESCRIPTION: Sets the current Occupancy Mode of the Light Lightness Control Server without requiring an acknowledgment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl occupancy-set-unack <Enable(off, on)>\n\tSet the Light Lightness Control Server's current Occupancy Mode without requesting a response.\n\n\t* ``Enable`` - Occupancy Mode to set.\n```\n\n----------------------------------------\n\nTITLE: Enabling GNSS Location Tracking in Kconfig\nDESCRIPTION: Enables GNSS location tracking. Disable CONFIG_LOCATION_TRACKING and all location tracking methods to completely disable location tracking. Defaults to enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_17\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LOCATION_TRACKING_GNSS\n```\n\n----------------------------------------\n\nTITLE: Sample Output of QuickTrack Application\nDESCRIPTION: Console output showing the initialization and running of the QuickTrack control application, including network interface setup and DHCP client execution.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK 48f33c9870f1 ***\nStarting nrf7002dk/nrf5340/cpuapp with CPU frequency: 128 MHz\n[00:00:00.330,932] <inf> net_config: Initializing network\n[00:00:00.330,932] <inf> net_config: Waiting interface 2 (0x20007a58) to be up...\n[00:00:00.331,085] <inf> wpa_supp: Successfully initialized wpa_supplicant\n[00:00:00.331,237] <inf> wfa_qt: Welcome to use QuickTrack Control App DUT version v2.1\n\n[00:00:00.331,268] <inf> wfa_qt: QuickTrack control app running at: 9004\n[00:00:00.331,268] <inf> wfa_qt: Wireless Interface: wlan0\n[00:00:00.757,965] <inf> net_config: Interface 1 (0x20007940) coming up\n[00:00:00.758,087] <inf> net_config: Running dhcpv4 client...\n[00:00:00.763,732] <inf> usb_ecm: Set Interface 0 Packet Filter 0x000c not supported\n[00:00:00.830,627] <inf> usb_ecm: Set Interface 0 Packet Filter 0x000e not supported\n[00:00:00.832,214] <inf> usb_ecm: Set Interface 0 Packet Filter 0x000e not supported\n[00:00:00.832,519] <inf> usb_ecm: Set Interface 0 Packet Filter 0x000e not supported\n[00:00:00.834,594] <inf> usb_ecm: Set Interface 0 Packet Filter 0x000e not supported\n[00:00:00.835,021] <inf> usb_ecm: Set Interface 0 Packet Filter 0x000e not supported\n[00:00:00.835,327] <inf> usb_ecm: Set Interface 0 Packet Filter 0x000e not supported\n[00:00:00.835,937] <inf> usb_ecm: Set Interface 0 Packet Filter 0x000e not supported\n```\n\n----------------------------------------\n\nTITLE: LED Color Argument Passing Macro\nDESCRIPTION: The LED_COLOR_ARG_PASS macro is used to pass color arguments between macro calls in the CAF LED module. This simplifies the creation and manipulation of LED effects.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.9.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nLED_COLOR_ARG_PASS\n```\n\n----------------------------------------\n\nTITLE: OpenThread Pre-built Library Report\nDESCRIPTION: Displays configuration details for a pre-built OpenThread library including target device (nrf54l15), Thread version (v1.4), device type (SED), and relevant SHA hashes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/certification.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n################### OPENTHREAD REPORT ###################\n+ Target device: nrf54l15\n+ Thread version: v1.4\n+ OpenThread library feature set: Minimal Thread Device (MTD)\n+ Thread device type: Sleepy End Device (SED)\n+ OpenThread Library: openthread/lib/nrf54l15_cpuapp/soft-float/v1.4/mtd/\n+ OpenThread NCS revision: ncs-thread-reference-20241002-dirty\n+ OpenThread NCS SHA: ee86dc26d\n+ NCS revision: v2.8.0-preview1-434-g49bcdd3c6d6-dirty\n+ NCS SHA: 49bcdd3c6d6\n+ Found differences in the nrfxlib repository in comparison to the NCS v2.8.0 release. See the ot_report.txt report file to learn more.\n###################        END        ###################\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and Zephyr Dependency\nDESCRIPTION: This snippet initializes the CMake project, specifies the minimum required CMake version, and finds the Zephyr SDK as a required dependency. It uses the environment variable ZEPHYR_BASE as a hint for locating the Zephyr installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_rpc/dev_info/server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_rpc_dev_info_server_test)\"\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package for SUIT Testing\nDESCRIPTION: Locates the Zephyr package using environment variable hints, which is essential for building the project within the Zephyr ecosystem\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/suit_memptr_storage/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Perform Energy Detection - Custom Command Usage\nDESCRIPTION: This command initiates the energy detection process and returns the results as two hexadecimal bytes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_17\n\nLANGUAGE: text\nCODE:\n```\ncustom lgeted\n```\n\n----------------------------------------\n\nTITLE: CoreMark Stack Memory Configuration\nDESCRIPTION: Configuration for using stack memory method in CoreMark, requiring 4KB of stack size allocation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/coremark.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nCONFIG_COREMARK_MEMORY_METHOD_STACK=y\nCONFIG_MAIN_STACK_SIZE=4096\n```\n\n----------------------------------------\n\nTITLE: Configuring SSF Client NRF RPC Source Compilation\nDESCRIPTION: Adds ssf_client_nrf_rpc.c source file to the Zephyr build system using zephyr_sources CMake function. Part of the Nordic Semiconductor SDK build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/transport/nrf_rpc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources(ssf_client_nrf_rpc.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Shield in CMakeLists.txt\nDESCRIPTION: CMake command to set the nRF7002-EB II shield in the project's CMakeLists.txt file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf7002eb2_dev_guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nset(SHIELD nrf7002eb2)\n```\n\n----------------------------------------\n\nTITLE: Network Core Console Output Example\nDESCRIPTION: Example console output showing throughput metrics from the network core, displaying packet counts and bit rates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/ipc/ipc_service/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v3.0.99-ncs1  ***\nIPC-service nrf5340dk/nrf5340/cpunet demo started\nΔpkt: 6665 (100 B/pkt) | throughput: 5332000 bit/s\nΔpkt: 6664 (100 B/pkt) | throughput: 5331200 bit/s\nΔpkt: 6658 (100 B/pkt) | throughput: 5326400 bit/s\nΔpkt: 6665 (100 B/pkt) | throughput: 5332000 bit/s\nΔpkt: 6671 (100 B/pkt) | throughput: 5336800 bit/s\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Options for Hardware Initialization and Reset\nDESCRIPTION: This snippet sets TFM CMake options related to hardware initialization and reset. It configures whether to reset the hardware on boot and whether to initialize nRF peripherals based on the corresponding Kconfig options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_HW_INIT_RESET_ON_BOOT)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DNRF_HW_INIT_RESET_ON_BOOT=ON\n  )\n\n  if(CONFIG_TFM_HW_INIT_NRF_PERIPHERALS)\n    set_property(TARGET zephyr_property_target\n      APPEND PROPERTY TFM_CMAKE_OPTIONS\n      -DNRF_HW_INIT_NRF_PERIPHERALS=ON\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Library Linking for nRF70 WiFi\nDESCRIPTION: Links required libraries for nRF70 WiFi functionality, specifically the bus library and WiFi shim components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/nrf70_fw_ext/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_link_libraries(nrf70-buslib nrf-wifi-shim)\n```\n\n----------------------------------------\n\nTITLE: Enabling MPSL FEM-only Configuration\nDESCRIPTION: Configuration steps to use only the FEM driver provided by MPSL for simple radio protocols without concurrent protocol support\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_mpsl_fem_only.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MPSL=y\nCONFIG_MPSL_FEM_ONLY=y\n```\n\n----------------------------------------\n\nTITLE: Setting Light CTL Temperature Range State Without Acknowledgement - Command Syntax\nDESCRIPTION: Sets the Light CTL Temperature Range state without waiting for a response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl temp-range-set-unack <Min> <Max>\n```\n\n----------------------------------------\n\nTITLE: Software Maturity Level Table\nDESCRIPTION: RST table defining maturity levels (Supported, Experimental, Not supported) with detailed criteria for technical support, bug fixing, implementation completeness, API stability, maturity, and verification levels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/software_maturity.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table:: Software maturity\n   :header-rows: 1\n   :align: center\n   :widths: auto\n\n   * -\n     - Supported\n     - Experimental\n     - Not supported\n   * - **Technical support**\n     - Customer issues raised for features supported for developing end products on tagged |NCS| releases are handled by technical support on DevZone.\n     - Customer issues raised for experimental features on tagged |NCS| releases are handled by technical support on DevZone.\n     - Not available.\n```\n\n----------------------------------------\n\nTITLE: Configuring Wakeup-Blocked GPIO Pins in C\nDESCRIPTION: Configuration example showing how to specify which matrix rows and columns should not trigger application wakeup by setting the wakeup_blocked flag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/buttons.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <caf/gpio_pins.h>\n\nstatic const struct gpio_pin col[] = {\n\t{ .port = 0, .pin = 31, .wakeup_blocked = true },\n\t{ .port = 0, .pin = 24 },\n};\n\nstatic const struct gpio_pin row[] = {\n\t{ .port = 0, .pin = 9, .wakeup_blocked = true },\n\t{ .port = 0, .pin = 8, .wakeup_blocked = true },\n\t{ .port = 1, .pin = 15 },\n\t{ .port = 1, .pin = 14 },\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package and Defining Project\nDESCRIPTION: Finds the Zephyr RTOS package, setting up the necessary environment and dependencies for Zephyr-based development, and defines the project name as 'http_server'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(http_server)\n```\n\n----------------------------------------\n\nTITLE: Finding Sysbuild Package in CMake\nDESCRIPTION: Locates the Sysbuild package using the ZEPHYR_BASE environment variable as a hint.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/sysbuild/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Sysbuild REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Installing SDK Manager via nrfutil\nDESCRIPTION: Command to install the SDK manager component using nrfutil CLI tool\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnrfutil install sdk-manager\n```\n\n----------------------------------------\n\nTITLE: Starting Continuous Thread Radio Transmission\nDESCRIPTION: Initiates continuous packet transmission with a high duty cycle on the previously selected channel. This command is used for radio testing to evaluate transmission capabilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/thread_radio_testing.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstart_tx_modulated_carrier\n```\n\n----------------------------------------\n\nTITLE: Set DUT Radio Channel - Custom Command Usage\nDESCRIPTION: This command sets the radio channel of the DUT device using a single channel number argument.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ncustom rsetchannel *<channel>*\n```\n\n----------------------------------------\n\nTITLE: Including General Sample Information in reStructuredText\nDESCRIPTION: This snippet includes general information about samples from another file, specifically the content between two markers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/dect.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n```\n\n----------------------------------------\n\nTITLE: Observing Memfault Chunk Counter\nDESCRIPTION: This snippet shows the console output indicating the status of data being sent from the Memfault SDK to the cloud. It reflects the chunk count of the data being forwarded, which is important for verifying data transmission.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_mds/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nSending..\\nForwarded 2 Memfault Chunks\n```\n\n----------------------------------------\n\nTITLE: Adding Zephyr Library Sources Based on Configuration\nDESCRIPTION: This snippet conditionally includes source files for the Zephyr library based on build configuration. It selects the source file using `src/suit_storage_${CONFIG_SOC}.c` when `CONFIG_SUIT_STORAGE_LAYOUT_SOC` is enabled, otherwise it uses `src/suit_storage_test.c` for testing configuration. The configuration depends on build variables `CONFIG_SOC` and `CONFIG_SUIT_STORAGE_LAYOUT_TEST`. The file also lists several source files always included as part of the SUIT storage library. This setup allows flexibility in building the project for different environments or testing purposes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/storage/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n\nif(CONFIG_SUIT_STORAGE_LAYOUT_SOC)\n  zephyr_library_sources(src/suit_storage_${CONFIG_SOC}.c)\nelseif(CONFIG_SUIT_STORAGE_LAYOUT_TEST)\n  zephyr_library_sources(src/suit_storage_test.c)\nendif()\n\nzephyr_library_sources(src/suit_storage_update.c)\nzephyr_library_sources(src/suit_storage_encode.c)\nzephyr_library_sources(src/suit_storage_envelope.c)\nzephyr_library_sources(src/suit_storage_mpi.c)\nzephyr_library_sources(src/suit_storage_nvv.c)\nzephyr_library_sources(src/suit_storage_report.c)\nzephyr_library_sources(src/suit_storage_flags.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name and Target Source File\nDESCRIPTION: This snippet defines the project name as 'idle_pwm_led' and specifies the source file for the application. It is essential for organizing the project's files and linking the correct application code during the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_pwm_led/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(idle_pwm_led)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Zephyr Library Definition using CMake\nDESCRIPTION: This CMake snippet defines a Zephyr library. `zephyr_library()` declares the library itself, while `zephyr_library_sources()` specifies the source files that comprise the library. In this case, the library includes the C source file `src/pcd.c`.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/pcd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(\n  src/pcd.c\n  )\n```\n\n----------------------------------------\n\nTITLE: XSMS Test Command Example\nDESCRIPTION: Complete example of test command usage and its response showing supported operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SMS_AT_commands.rst#2025-04-21_snippet_5\n\nLANGUAGE: AT\nCODE:\n```\nat#xsms=?\n#XSMS: (0,1,2),<number>,<text>\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for SUIT Storage\nDESCRIPTION: This snippet defines configuration constants for the SUIT storage module. These constants specify the number of update regions, envelopes, and sizes for various storage components, which are critical for proper operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/storage_nrf54h20/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_compile_definitions(\n  CONFIG_SUIT_STORAGE_N_UPDATE_REGIONS=7\n  CONFIG_SUIT_STORAGE_N_ENVELOPES=10\n  CONFIG_SUIT_STORAGE_ENVELOPE_SIZE=2048\n  CONFIG_SUIT_STORAGE_CONFIG_SIZE=128\n)\n```\n\n----------------------------------------\n\nTITLE: Including MPSL FEM Driver Source in CMake Build\nDESCRIPTION: Adds the MPSL FEM NRF2220 driver source file to the Zephyr library build process. This CMake directive ensures the driver is compiled as part of the project build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/fem/nrf2220/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(mpsl_fem_nrf2220.c)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets up a CMake project, specifying the minimum required CMake version, finding the Zephyr package, and defining the project name. It is a standard CMake configuration for a Zephyr-based application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/uart/uart_async_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(uart_high_level_api)\n```\n\n----------------------------------------\n\nTITLE: Project Declaration\nDESCRIPTION: This snippet declares the project name for the integration test, providing a context for the CMake build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/memptr_sink/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(integration_test_memptr_sink)\n```\n\n----------------------------------------\n\nTITLE: Radio Receive Mode Command\nDESCRIPTION: Command to put the radio of the CMD device into receive mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_54\n\nLANGUAGE: plaintext\nCODE:\n```\ncustom lreceive\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with SEGGER RTT Support\nDESCRIPTION: Command to build MoSh with SEGGER's Real Time Transfer (RTT) support. It utilizes -DEXTRA_CONF_FILE to change the shell backend to RTT instead of UART.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_48\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=overlay-rtt.conf\n```\n\n----------------------------------------\n\nTITLE: Processing Headers for Linker Wrapping in CMock\nDESCRIPTION: Extracts function names from a header file and generates a list for linker wrapping. The function uses a Python script to parse the header and generate a function list file, then passes it to cmock_linker_trick.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/unity/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(cmock_linker_wrap_trick header_file_path)\n  cmake_parse_arguments(CMOCK \"\" \"\" \"FUNC_EXCLUDE\" ${ARGN})\n  set(flist_file \"${header_file_path}.flist\")\n\n  if(DEFINED CMOCK_FUNC_EXCLUDE)\n    string(JOIN \";--exclude;\" exclude_arg ${CMOCK_FUNC_EXCLUDE})\n    set(exclude_arg \"--exclude\" ${exclude_arg})\n  endif()\n\n  execute_process(\n    COMMAND\n    ${PYTHON_EXECUTABLE}\n    ${ZEPHYR_NRF_MODULE_DIR}/scripts/unity/func_name_list.py\n    --input ${header_file_path}\n    --output ${flist_file}\n    ${exclude_arg}\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n    RESULT_VARIABLE op_result\n    OUTPUT_VARIABLE output_result\n  )\n\n  if (NOT ${op_result} EQUAL 0)\n    message(SEND_ERROR \"${output_result}\")\n    message(FATAL_ERROR \"Failed to parse header ${header_file_path}\")\n  endif()\n  cmock_linker_trick(${flist_file})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Registering Device in Azure IoT Hub Without DPS\nDESCRIPTION: Registers a device directly in Azure IoT Hub using the Azure CLI, making sure the device ID aligns with the certificate's CN for identification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_18\n\nLANGUAGE: console\nCODE:\n```\naz iot hub device-identity create -n <iothub_name> -d <device_id> --am x509_ca\n```\n\n----------------------------------------\n\nTITLE: Referencing CC3XX Entropy Driver in RST\nDESCRIPTION: RST labels for referencing the CC3XX entropy driver documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/entropy_cc3xx.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _lib_entropy_cc310:\n.. _lib_entropy_cc3xx:\n```\n\n----------------------------------------\n\nTITLE: Adding Client ID Helper Library - CMake\nDESCRIPTION: This snippet adds the Client ID helper library to the project by referencing a subdirectory containing its source files. It is crucial for handling client identifiers within the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/modules/transport/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(client_id)\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum CMake Version and Finding Zephyr Package\nDESCRIPTION: This snippet sets the minimum required version for CMake to 3.20.0 and finds the Zephyr package necessary for the project. It is crucial for ensuring the build system is using a compatible version of CMake and has access to the required Zephyr libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/sensor/bh1749/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Initializing SUIT Platform Error Handling in CMake\nDESCRIPTION: This snippet initializes the SUIT platform error handling module using CMake in the Nordic Semiconductor SDK. It defines a library target named 'suit_platform_err' and includes the necessary directories for interface definitions. Make sure CMake and Zephyr are properly installed and configured in your environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/plat_err/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(suit_platform_err)\ntarget_include_directories(suit_platform_err INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for SUIT Integration Test\nDESCRIPTION: Links necessary libraries for the SUIT IPUC integration test, including IPUC and memory layout interface libraries\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/ipuc/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(suit_ipuc)\nzephyr_library_link_libraries(suit_memory_layout_interface)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library in CMake\nDESCRIPTION: This snippet configures a Zephyr library in a CMake build system. It specifies the source file 'pcm_mix.c' to be included in the library and sets the current directory as an include directory for header files. There are no additional dependencies, and the configuration is designed for use with the Nordic Semiconductor's SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/pcm_mix/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tpcm_mix.c\n)\n\nzephyr_include_directories(.)\n\n```\n\n----------------------------------------\n\nTITLE: Building wifi_shell_sample with nRF70 firmware patch DFU support for nRF5340 DK using CMake\nDESCRIPTION: CMake command for building the wifi_shell sample with DFU procedure for nRF70 Series firmware patch on nRF5340 DK with nRF7002 EK shield. Sets up the build configuration with necessary options for external flash storage and DFU support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf70_fw_patch_update.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncmake -GNinja -Bbuild -DBOARD=nrf5340dk/nrf5340/cpuapp -DSHIELD=nrf7002ek -DSB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE=y -DCONFIG_NRF_WIFI_FW_PATCH_DFU=y -Dshell_SNIPPET=nrf70-fw-patch-ext-flash -DAPP_DIR=*app_path* *path_to_zephyr*/share/sysbuild\nninja -C build\n```\n\n----------------------------------------\n\nTITLE: Adding Source File to Target\nDESCRIPTION: Adds the source file `src/main.c` to the application's target. This makes the source file part of the build process and links it into the final executable. The `PRIVATE` keyword indicates that this source file is only used within the `app` target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/uart_idle/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_sources(app PRIVATE src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: SoftDevice Controller Front-End API Limitation - MPSL - Documentation Format\nDESCRIPTION: This entry indicates the current limitation of the front-end module API, which only supports the 802.15.4 setup, impacting developers who require functionality for SoftDevice Controller.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_50\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-11059: Front-end module API not implemented for SoftDevice Controller Front-end module API is currently not implemented for SoftDevice Controller.\n```\n\n----------------------------------------\n\nTITLE: Firmware Patch Selection Based on Device Mode\nDESCRIPTION: Configures firmware patch binary paths based on the selected device operating mode. Sets up firmware binary location for different modes including system mode, raw mode, radio test, scan only, and offloaded raw transmission.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/nrf70_fw_ext/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED CONFIG_NRF_WIFI_PATCHES_EXT_FLASH_DISABLED OR\n   DEFINED CONFIG_NRF_WIFI_PATCHES_EXT_FLASH_XIP)\n  # NCS doesn't rely on hal_nordic blobs for nRF70 device driver\n  set(FW_BINS_BASE ${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_wifi/bin/ncs)\n  # RPU FW patch binaries based on the selected configuration\n  if(CONFIG_NRF70_SYSTEM_MODE)\n    if(CONFIG_NRF70_SYSTEM_WITH_RAW_MODES)\n      set(NRF70_PATCH ${FW_BINS_BASE}/system_with_raw/nrf70.bin)\n    else()\n      set(NRF70_PATCH ${FW_BINS_BASE}/default/nrf70.bin)\n    endif()\n  elseif(CONFIG_NRF70_RADIO_TEST)\n    set(NRF70_PATCH ${FW_BINS_BASE}/radio_test/nrf70.bin)\n  elseif(CONFIG_NRF70_SCAN_ONLY)\n    set(NRF70_PATCH ${FW_BINS_BASE}/scan_only/nrf70.bin)\n  elseif(CONFIG_NRF70_OFFLOADED_RAW_TX)\n    set(NRF70_PATCH ${FW_BINS_BASE}/offloaded_raw_tx/nrf70.bin)\n  else()\n    # Error\n    message(FATAL_ERROR \"Unsupported nRF70 patch configuration\")\n  endif()\n\n  set(gen_inc_dir ${ZEPHYR_BINARY_DIR}/misc/generated)\n  zephyr_include_directories(${gen_inc_dir})\n  set(gen_dir ${gen_inc_dir}/nrf70_fw_patch)\n  generate_inc_file_for_target(\n    nrf_wifi\n    ${NRF70_PATCH}\n    ${gen_dir}/nrf70.bin.inc\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IoT Test Build Environment in CMake\nDESCRIPTION: CMake configuration that sets up the build environment for AWS IoT unit testing. It includes test runner generation, mock creation, source file inclusion, and compilation options for AWS IoT specific settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/aws_iot/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(aws_iot_test)\n\n# Generate runner for the test\ntest_runner_generate(src/aws_iot_test.c)\n\n# Create mock\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/net/mqtt_helper.h)\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/net/aws_fota.h)\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/dfu/dfu_target.h)\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/net/mqtt.h)\n\n# Add Unit Under Test source files\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/aws_iot/src/aws_iot.c)\n\n# Add test source file\ntarget_sources(app PRIVATE src/aws_iot_test.c)\n\n# Include paths\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/aws_iot/include/)\ntarget_include_directories(app PRIVATE src)\n\n# Preinclude file to the UUT to redefine IS_ENABLED().\nset_property(SOURCE ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/aws_iot/src/aws_iot.c\n\t     PROPERTY COMPILE_FLAGS \"-include redefinitions.h\")\n\n# Options that cannot be passed through Kconfig fragments.\ntarget_compile_options(app PRIVATE\n\t-DCONFIG_AWS_IOT_BROKER_HOST_NAME=\"test.amazonaws.com\"\n\t-DCONFIG_AWS_IOT_CLIENT_ID_STATIC=\"test-client-id\"\n\t-DCONFIG_AWS_IOT_CLIENT_ID_MAX_LEN=40\n\t-DCONFIG_AWS_IOT_CONNECT_TIMEOUT_SECONDS=30\n\t-DCONFIG_AWS_IOT_AUTO_DEVICE_SHADOW_REQUEST=y\n\t-DCONFIG_AWS_IOT_APP_SUBSCRIPTION_LIST_COUNT=9\n\t-DCONFIG_AWS_IOT_TOPIC_GET_ACCEPTED_SUBSCRIBE=y\n\t-DCONFIG_AWS_IOT_TOPIC_GET_REJECTED_SUBSCRIBE=y\n\t-DCONFIG_AWS_IOT_TOPIC_UPDATE_ACCEPTED_SUBSCRIBE=y\n\t-DCONFIG_AWS_IOT_TOPIC_UPDATE_REJECTED_SUBSCRIBE=y\n\t-DCONFIG_AWS_IOT_TOPIC_UPDATE_DELTA_SUBSCRIBE=y\n\t-DCONFIG_AWS_IOT_TOPIC_DELETE_ACCEPTED_SUBSCRIBE=y\n\t-DCONFIG_AWS_IOT_TOPIC_DELETE_REJECTED_SUBSCRIBE=y\n\t-DCONFIG_AWS_IOT_LAST_WILL=y\n\t-DCONFIG_AWS_IOT_LAST_WILL_MESSAGE=\"{\\\"lastwill\\\": \\\"offline\\\"}\"\n\t-DCONFIG_AWS_IOT_LAST_WILL_TOPIC=\"lastwilltopic\"\n\t-DCONFIG_MQTT_HELPER_PORT=8883\n\t-DCONFIG_MQTT_HELPER_SEND_TIMEOUT_SEC=60\n\t-DCONFIG_MQTT_HELPER_STATIC_IP_ADDRESS=\"\"\n\t-DCONFIG_MQTT_HELPER_RX_TX_BUFFER_SIZE=256\n\t-DCONFIG_MQTT_HELPER_PAYLOAD_BUFFER_LEN=2304\n\t-DCONFIG_MQTT_HELPER_SEC_TAG=1\n\t-DCONFIG_MQTT_HELPER_STACK_SIZE=2560\n)\n```\n\n----------------------------------------\n\nTITLE: Defining 802.15.4 Sniffer Project\nDESCRIPTION: Initializes the project with a specific name, setting up the basic project configuration for the 802.15.4 sniffer application within the Zephyr build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(802154_sniffer)\n```\n\n----------------------------------------\n\nTITLE: High Frequency Clock Holding Active - MPSL - Documentation Format\nDESCRIPTION: This issue outlines that the High Frequency Clock may remain active if powered on during timing events, which developers must take into account when designing power-sensitive applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_45\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-17014: High Frequency Clock staying active The High Frequency Clock will stay active if it is turned on between timing events. This could occur during Low Frequency Clock calibration when using the RC oscillator as the Low Frequency Clock source.\n```\n\n----------------------------------------\n\nTITLE: Configuration and Building RST Documentation\nDESCRIPTION: Documentation for configuring and building the Bluetooth Peripheral Status sample. It describes the configuration option for enabling Bluetooth LE security and building instructions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_status/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nCONFIG_BT_STATUS_SECURITY_ENABLED - Enable Bluetooth® LE security\n  This configuration enables Bluetooth® LE security implementation for Nordic Status Message instances.\n  When you enable this option, one of the status messages will be displayed only when the connection is secure.\n```\n\n----------------------------------------\n\nTITLE: Including Zephyr Directories\nDESCRIPTION: This directive sets up the include directories for the Zephyr framework, ensuring that all required headers are accessible during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bootloader/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(include)\n```\n\n----------------------------------------\n\nTITLE: NCS Directory Structure\nDESCRIPTION: Example directory structure showing toolchain installation layout\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nncs\n└─── toolchains\n   └─── <toolchain-installation>\n```\n\n----------------------------------------\n\nTITLE: Linking SUIT Dependencies\nDESCRIPTION: Links the required SUIT-related libraries including envelope info, utilities, and memory layout interface to the main library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/envelope_info/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_link_libraries(suit_envelope_info)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_memory_layout_interface)\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Candidate Envelope Upload Request\nDESCRIPTION: Defines the CBOR data structure for uploading a SUIT envelope to a device. The structure includes fields for length, installation deferral option, offset, and the actual data chunk to be delivered.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_7\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str,opt)\"len\"            : (uint)\n    (str,opt)\"defer_install\"  : (bool)\n    (str)\"off\"                : (uint)\n    (str)\"data\"               : (byte str)\n}\n```\n\n----------------------------------------\n\nTITLE: Function Call: sdc_enable\nDESCRIPTION: This snippet describes an issue where the host callback provided to the `sdc_enable` function is always called after every advertising event, potentially leading to increased power consumption.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_60\n\nLANGUAGE: c\nCODE:\n```\nDRGN-16394: The host callback provided to :c:func:`sdc_enable` is always called after every advertising event\n  This will cause slightly increased power consumption.\n\n```\n\n----------------------------------------\n\nTITLE: LwM2M Carrier Event Notification Syntax\nDESCRIPTION: Defines the syntax for carrier event notifications that indicate events from the LwM2M carrier library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XCARRIEREVT: <evt_type>,<param1>[,<param2>[,<param3>]..]\n```\n\n----------------------------------------\n\nTITLE: Sending Update Candidate (Console)\nDESCRIPTION: Command to send the update candidate to the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_44\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-envelope --serial-port COM7 --envelope-file build/DFU/root.suit\n```\n\n----------------------------------------\n\nTITLE: Enforcing Sysbuild\nDESCRIPTION: Checks if the `SYSBUILD` variable is defined. If not, it issues a fatal error message instructing the user to build the application using the sysbuild tool. This ensures that the application is built as a multi-image application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_pwm_loopback/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Programming SoC Binaries\nDESCRIPTION: Command to program the nordic_top.suit firmware using x-suit-dfu command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7_99-cs1.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-suit-dfu --firmware nordic_top.suit --serial-number <serialnumber>\n```\n\n----------------------------------------\n\nTITLE: Displaying Experimental Warnings in CMake\nDESCRIPTION: This code snippet shows the warning message printed during CMake configure time when an experimental feature is enabled. It's related to the Kconfig option that warns users when experimental configurations are activated, particularly useful for maintaining awareness of feature stability while developing applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/config_and_build_system.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n   warning: Experimental symbol BT_EXT_ADV is enabled.\n```\n\n----------------------------------------\n\nTITLE: Initializing Modem Library with Shared Memory Boundaries\nDESCRIPTION: Function call used by the integration layer to initialize the Modem library with the boundaries of each shared memory region. This function is called automatically when the Modem library is initialized in nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_pm_integration.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nnrf_modem_lib_init()\n```\n\n----------------------------------------\n\nTITLE: Install Configuration Files\nDESCRIPTION: This snippet installs the `config.cmake` file from the current directory and the `config.cmake` file from the `../common` directory into the `${INSTALL_PLATFORM_NS_DIR}` and `${INSTALL_PLATFORM_NS_DIR}/../common/` directories, respectively.  These configuration files are essential for the proper setup and build of the platform. \nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf54l15_cpuapp/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES       config.cmake\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR})\n\ninstall(FILES       ../common/config.cmake\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR}/../common/)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Input Value for Regulator\nDESCRIPTION: The snippet demonstrates how to retrieve the current target value for the regulator. This is important for understanding the desired state that the regulator should aim to achieve.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_reg.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\ncurrent_target_value = bt_mesh_light_ctrl_reg_input_get(&regulator);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SUIT Platform Digest Cache Tests\nDESCRIPTION: This CMake configuration sets up a test project for the SUIT platform digest cache. It specifies the minimum required CMake version, includes a test template, defines the project name, and adds the necessary source files to the test binary including the suit_plat_memptr_size_update.c implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_memptr_size_update/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(suit_plat_digest_cache)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_memptr_size_update.c\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion with CONFIG_BT_NRF_SERVICES\nDESCRIPTION: This CMake snippet includes the `services` subdirectory in the build process only if the `CONFIG_BT_NRF_SERVICES` configuration option is defined. `add_subdirectory_ifdef` is used for conditional subdirectory inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory_ifdef(CONFIG_BT_NRF_SERVICES services)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to CMake Build\nDESCRIPTION: CMake configuration to include pressure sensor implementation files in the compilation process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n  src/bridged_device_types/pressure_sensor.cpp\n  src/simulated_providers/simulated_pressure_sensor_data_provider.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Set NRF Board Selected Flag\nDESCRIPTION: This snippet sets the NRF_BOARD_SELECTED variable to True, indicating that a Nordic board is being used in the build process. This flag can be used by other CMake scripts to conditionally include board-specific configurations or code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf54l15_cpuapp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(NRF_BOARD_SELECTED True)\n```\n\n----------------------------------------\n\nTITLE: Adding a Simulated OnOff Light Switch Device\nDESCRIPTION: Command to add a simulated OnOff Light Switch as a bridged device with device type 259. This creates a virtual light switch device on a dynamic endpoint that can control other Matter devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_29\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge add 259\n```\n\n----------------------------------------\n\nTITLE: Building Single-Core Configuration Command\nDESCRIPTION: Command to build the application for single-core configuration using west build system. This is specifically for multicore MCUs that can also support single-core operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf_sensor_manager/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -DFILE_SUFFIX=singlecore\n```\n\n----------------------------------------\n\nTITLE: Configuring Battery Notification Extension\nDESCRIPTION: Demonstrates how to enable and configure the Fast Pair Battery Notification extension through Kconfig and API calls.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nCONFIG_BT_FAST_PAIR_BN=y\n\nbt_fast_pair_battery_set(/* battery info */)\n\nstruct bt_fast_pair_adv_config {\n    .battery_mode = BT_FAST_PAIR_ADV_BATTERY_MODE_SHOW_UI_IND\n    /* or */\n    .battery_mode = BT_FAST_PAIR_ADV_BATTERY_MODE_HIDE_UI_IND\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Motion Detector Backoff Period (kconfig)\nDESCRIPTION: This Kconfig option sets the backoff period for the motion detector before it can be activated again in Unwanted Tracking Protection mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DULT_MOTION_DETECTOR_SEPARATED_UT_BACKOFF_PERIOD\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Wi-Fi Shell Application with CMake\nDESCRIPTION: This CMake script configures the build for an nRF Wi-Fi shell application. It sets up the project, includes the Zephyr package, and conditionally adds source files based on configuration options for raw data transmission and promiscuous mode reception.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_shell)\n\ntarget_sources_ifdef(CONFIG_NRF70_RAW_DATA_TX\n\tapp\n\tPRIVATE\n\tsrc/wifi_raw_tx_pkt_shell.c)\n\ntarget_sources_ifdef(CONFIG_NRF70_PROMISC_DATA_RX\n\tapp\n\tPRIVATE\n\tsrc/wifi_promiscuous_shell.c)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Confirmation of Data Write (Console)\nDESCRIPTION: Expected output after writing data to the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\n✔️ Data written to <snr>\n```\n\n----------------------------------------\n\nTITLE: Enabling Modem Traces with RTT Backend using West\nDESCRIPTION: Command to add the nrf91-modem-trace-rtt snippet when building an application with west. This enables modem tracing with RTT output.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_snippet.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nwest build --board *board_target* -- -D<image_name>_SNIPPET=\"nrf91-modem-trace-rtt\"\n```\n\n----------------------------------------\n\nTITLE: Initializing SUIT App Platform Interface Library\nDESCRIPTION: Creates a Zephyr interface library for SUIT app platform with include directories and dependency linking to suit library\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(suit_app_platform)\ntarget_include_directories(suit_app_platform INTERFACE include)\ntarget_link_libraries(suit_app_platform INTERFACE suit)\n```\n\n----------------------------------------\n\nTITLE: Application Core Board Target Configurations in Zephyr\nDESCRIPTION: Zephyr board target configurations for the application core processor with options for CMSE (Cortex-M Security Extensions) enabled and disabled\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/features_nrf53.rst#2025-04-21_snippet_1\n\nLANGUAGE: zephyr\nCODE:\n```\nnrf5340dk\\/nrf5340\\/cpuapp\n```\n\nLANGUAGE: zephyr\nCODE:\n```\nnrf5340dk\\/nrf5340\\/cpuapp\\/ns\n```\n\n----------------------------------------\n\nTITLE: Adding Event Manager Proxy Source Files in CMake\nDESCRIPTION: Adds the event_manager_proxy.c source file to the Zephyr build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/event_manager_proxy/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources(event_manager_proxy.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Emergency Data Storage API Tests in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build configuration for EMDS API tests. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, includes all source files from the src directory, and sets up the necessary include paths.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/emds/emds_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Emergency data storage API tests\")\n\nFILE(GLOB app_sources src/*.c)\n\ntarget_sources(app PRIVATE ${app_sources})\n\ntarget_include_directories(app PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/emds\n  )\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 EK with nRF5340 DK using Command Line\nDESCRIPTION: Command to build an application for nRF5340 DK with nRF7002 EK shield support using the west build system. This specifies the board target and adds the shield option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf7002ek_dev_guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf7002ek\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 EK Board\nDESCRIPTION: Command for changing the board target to nRF7002 EK\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/raw_tx_packet/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf7002ek\n```\n\n----------------------------------------\n\nTITLE: Reading Temperature Measurement from Environmental Sensor\nDESCRIPTION: Command to read temperature measurement from a bridged environmental sensor endpoint\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/matter_bridge_testing.txt#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./chip-tool temperaturemeasurement read measured-value <bridge_node_ID> <bridged_device_endpoint_ID>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysbuild Options for MCUboot Compressed Image Support\nDESCRIPTION: Configuration options for enabling MCUboot compressed image support in the sysbuild system. These options enable the bootloader, set it to overwrite-only mode, and activate compressed image support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_image_compression.rst#2025-04-21_snippet_3\n\nLANGUAGE: cfg\nCODE:\n```\nSB_CONFIG_BOOTLOADER_MCUBOOT=y\nSB_CONFIG_MCUBOOT_MODE_OVERWRITE_ONLY=y\nSB_CONFIG_MCUBOOT_COMPRESSED_IMAGE_SUPPORT=y\n```\n\n----------------------------------------\n\nTITLE: Enabling hardware AP-Protect for nRF5340 devices using nrfutil\nDESCRIPTION: Commands to enable hardware AP-Protect on nRF5340 devices by locking the UICR.APPROTECT register for both Network and Application cores. This sequence first protects the Network core before the Application core.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/ap_protect.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device protection-set All --core Network\nnrfutil device protection-set All\n```\n\n----------------------------------------\n\nTITLE: West Command for Displaying DFU Metadata in Console\nDESCRIPTION: This command prints the generated Bluetooth Mesh DFU metadata to the console for easy access. It should be run after generating metadata with the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nwest build -t ble_mesh_dfu_metadata\n```\n\n----------------------------------------\n\nTITLE: Querying Wi-Fi Credentials (C)\nDESCRIPTION: Functions for retrieving Wi-Fi credentials from the library. These include methods to get credentials by SSID and to iterate over all stored credentials.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/wifi_credentials.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nwifi_credentials_get_by_ssid_personal()\nwifi_credentials_get_by_ssid_personal_struct()\nwifi_credentials_for_each_ssid()\n```\n\n----------------------------------------\n\nTITLE: Mapping UART Pins on nRF5340 DK v1.0.0\nDESCRIPTION: This snippet demonstrates how to map the RX, TX, CTS, and RTS pins to UART for logging on the nRF5340 DK v1.0.0. It utilizes devicetree overlays to configure pin assignments and UART settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/logging_nrf5340.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n.. code-block:: devicetree\n\n      &pinctrl {\n         uart0_default_alt: uart0_default_alt {\n            group1 {\n               psels = <NRF_PSEL(UART_TX, 0, 20)>,\n                       <NRF_PSEL(UART_RX, 0, 21)>,\n                       <NRF_PSEL(UART_RTS, 0, 18)>,\n                       <NRF_PSEL(UART_CTS, 0, 16)>;\n            };\n         };\n\n         uart0_sleep_alt: uart0_sleep_alt {\n            group1 {\n               psels = <NRF_PSEL(UART_TX, 0, 20)>,\n                       <NRF_PSEL(UART_RX, 0, 21)>,\n                       <NRF_PSEL(UART_RTS, 0, 18)>,\n                       <NRF_PSEL(UART_CTS, 0, 16)>;\n               low-power-enable;\n            };\n         };\n      };\n\n      &uart0 {\n         status = \"okay\";\n         compatible = \"nordic,nrf-uarte\";\n         current-speed = <115200>;\n         pinctrl-0 = <&uart0_default_alt>;\n         pinctrl-1 = <&uart0_sleep_alt>;\n         pinctrl-names = \"default\", \"sleep\";\n      };\n```\n\n----------------------------------------\n\nTITLE: Starting Wi-Fi Transmission\nDESCRIPTION: Final command to initiate Wi-Fi transmission after all parameters have been configured. This must be the last command issued in the sequence.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Enabling TCAT in OpenThread CLI Sample\nDESCRIPTION: This command enables Thread Commissioning Over Authenticated TLS (TCAT) in the OpenThread CLI sample. It should be executed after flashing the sample to the device with the TCAT snippet enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tcat.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot tcat start\n```\n\n----------------------------------------\n\nTITLE: Enabling Modem Traces with RTT Backend using CMake\nDESCRIPTION: Command to add the nrf91-modem-trace-rtt snippet when building an application with CMake. This enables modem tracing with RTT output.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_snippet.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n-D<image_name>_SNIPPET=\"nrf91-modem-trace-rtt\" [...]\n```\n\n----------------------------------------\n\nTITLE: DeviceTree Configuration Structure\nDESCRIPTION: Configuration file structure for hardware configuration using DTS files to define board-specific settings\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/app_desc.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napplications/machine_learning/configuration/<board_name>/\n  - prj_<build_type>.conf\n  - app.overlay\n  - *_def files\n```\n\n----------------------------------------\n\nTITLE: Installing Azure IoT Hub Dependencies\nDESCRIPTION: Installs the required dependencies for using the Azure IoT Hub library and nrfcredstore tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\npip3 install -r nrf/scripts/requirements-extra.txt\n```\n\n----------------------------------------\n\nTITLE: Removing Wi-Fi Credentials (C)\nDESCRIPTION: Function for deleting Wi-Fi credentials from the library based on the SSID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/wifi_credentials.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nwifi_credentials_delete_by_ssid()\n```\n\n----------------------------------------\n\nTITLE: XSMS Unsolicited Notification Syntax\nDESCRIPTION: Format for notifications received when an SMS message arrives. Includes datetime stamp, sender number, and message text.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SMS_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT\nCODE:\n```\n#XSMS: <datetime>,<number>,<text>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Downloader in nRF Connect SDK\nDESCRIPTION: Sets up the CMake project for the downloader, including finding Zephyr, adding source files, and configuring include directories. It also adds specific compiler options and linker sources for the downloader functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/downloader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(downloader)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntest_runner_generate(src/main.c)\n\ntarget_sources(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/src/downloader.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/src/dl_socket.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/src/dl_parse.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/src/sanity.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/src/transports/coap.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/src/transports/http.c\n)\n\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/include/net/)\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/include/)\nzephyr_include_directories(${ZEPHYR_BASE}/subsys/net/ip/)\nzephyr_include_directories(${ZEPHYR_BASE}/subsys/net/lib/sockets)\nzephyr_include_directories(${ZEPHYR_BASE}/subsys/testsuite/include)\n\nzephyr_linker_sources(RODATA ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/downloader/dl_transports.ld)\n\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_DOWNLOADER_MAX_HOSTNAME_SIZE=256\n  -DCONFIG_DOWNLOADER_MAX_FILENAME_SIZE=256\n  -DCONFIG_DOWNLOADER_TRANSPORT_PARAMS_SIZE=256\n  -DCONFIG_DOWNLOADER_STACK_SIZE=2048\n  -DCONFIG_NET_IPV6=y\n  -DCONFIG_NET_IPV4=y\n  -DCONFIG_COAP_MAX_RETRANSMIT=2\n  -DCONFIG_COAP_INIT_ACK_TIMEOUT_MS=100\n  -DCONFIG_COAP_BACKOFF_PERCENT=5\n  -DCONFIG_COAP_BLOCK_SIZE=5\n  -DCONFIG_DOWNLOADER_MAX_REDIRECTS=1\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion for mbedTLS Debugging\nDESCRIPTION: This snippet conditionally includes source files related to mbedTLS debugging into the Zephyr library if CONFIG_MBEDTLS_DEBUG is enabled. It specifies debug.c and debug_init.c and adds necessary include directories. This automatically integrates debugging capabilities only when needed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/zephyr/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MBEDTLS_DEBUG)\n  zephyr_library_sources(${ZEPHYR_BASE}/modules/mbedtls/debug.c)\n  zephyr_library_sources(debug_init.c)\n  zephyr_include_directories(${ZEPHYR_BASE}/modules/mbedtls/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum CMake Version and Finding Zephyr Package\nDESCRIPTION: This snippet sets the minimum required version of CMake and locates the Zephyr package necessary for the project. Proper installation of the Zephyr environment is a prerequisite for successful execution.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Initializing zcbor State for Decoding in C\nDESCRIPTION: Example of initializing a zcbor state for decoding CBOR data. The code creates a state array, defines a buffer for storing encoded data, and sets up the decoding state with parameters for the maximum expected encoded elements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_1.x_to_2.x.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define N   20              /* Max expected encoded elements */\nzcbor_state_t zs[2];\nuint8_t buffer[SOME_SIZE];\n/* Read some data to the buffer */\n...\nzcbor_new_decode_state(zs, ARRAY_SIZE(zs), buffer, ARRAY_SIZE(buffer), N);\n/* Decode data from the buffer with zs state */\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Impulse SDK Path and Build Settings in CMake\nDESCRIPTION: Sets up the Edge Impulse SDK integration by defining the SDK folder path, adding include directories, and including the mock classifier implementation source file\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/edge_impulse/src/edge_impulse_zip/edge-impulse-sdk/cmake/zephyr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(EI_SDK_FOLDER ../../)\n\ntarget_include_directories(app PRIVATE\n    ${EI_SDK_FOLDER}\n    ${EI_SDK_FOLDER}/..\n)\n\ntarget_sources(app PRIVATE ${EI_SDK_FOLDER}/ei_run_classifier_mock.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with Modem FOTA Support\nDESCRIPTION: This command compiles the MoSh sample to enable full modem FOTA support, using specific device tree overlays and configuration files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_40\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf9161dk/nrf9161/ns -- -DEXTRA_CONF_FILE=overlay-modem_fota_full.conf -DDTC_OVERLAY_FILE=nrf9161dk_ext_flash.overlay\n```\n\n----------------------------------------\n\nTITLE: Generating CBOR Files from CDDL\nDESCRIPTION: Generates CBOR serialization code from CDDL specification file for request, response and notification message types used in external memory service.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/extmem/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_and_add_cbor_files(extmem_service.cddl zcbor_generated\n  extmem_req\n  extmem_rsp\n  extmem_nfy\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum CMake Version for Nordic SDK\nDESCRIPTION: Sets the minimum required CMake version to ensure compatibility with the Nordic Semiconductor SDK build system. Ensures a baseline version that supports the project's build requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tnep_tag/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Library\nDESCRIPTION: This snippet defines a Zephyr library for the Nordic nRF Connect SDK. It specifies the source file 'modem_key_mgmt.c' to be included in the library's build process. The core function here is to facilitate the modular arrangement of the code and enable easier management of dependencies in the SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/modem_key_mgmt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(modem_key_mgmt.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Source Files for GPIO Count App in CMake\nDESCRIPTION: This CMake snippet sets up the include directories and adds source files for a GPIO count application. It includes the current directory and specifies two source files: gpio_count.c and gpio_count_shell.c.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/gpio_count/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/gpio_count.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/gpio_count_shell.c)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr RTOS Package\nDESCRIPTION: Locates the Zephyr RTOS package using environment variable hints. This is crucial for setting up the build environment and project dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tnep_poller/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Adding Linker Script for AT Command Custom Module\nDESCRIPTION: Includes a custom linker script in the RWDATA section for memory allocation and management\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/at_cmd_custom/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_linker_sources(RWDATA at_cmd_custom.ld)\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Gazell Libraries in reStructuredText\nDESCRIPTION: This snippet creates a table of contents (toctree) for Gazell libraries documentation. It sets the maximum depth to 1, includes all files in the current directory, and labels the section as 'Subpages'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/gazell/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   *\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for RAM Power Down\nDESCRIPTION: Creates and configures a Zephyr library including the RAM power down source file. Uses standard Zephyr CMake commands to set up the build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/ram_pwrdn/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(ram_pwrdn.c)\n```\n\n----------------------------------------\n\nTITLE: Generating Include Files from PEM Certificates using CMake\nDESCRIPTION: This snippet generates include files for three specific PEM certificate files, allowing them to be included in the build process. It uses CMake directives to set up paths and generate the necessary files for the specified target application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_carrier/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(gen_dir ${CMAKE_CURRENT_BINARY_DIR}/certs)\nzephyr_include_directories(${gen_dir})\ngenerate_inc_file_for_target(\n    app\n    certs/DigiCertGlobalRootCA.pem\n    ${gen_dir}/DigiCertGlobalRootCA.pem.inc\n    )\ngenerate_inc_file_for_target(\n    app\n    certs/DigiCertGlobalRootG2.pem\n    ${gen_dir}/DigiCertGlobalRootG2.pem.inc\n    )\ngenerate_inc_file_for_target(\n    app\n    certs/DSTRootCA-X3.pem\n    ${gen_dir}/DSTRootCA-X3.pem.inc\n    )\n```\n\n----------------------------------------\n\nTITLE: Initialization and Configuration Flow\nDESCRIPTION: Flow sequence showing the interactions between User Application, Zephyr RTOS MSPI API, HPF eMSPI driver, HPF FLPR APP, and HRT during initialization and configuration phases.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/hpf/mspi/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nskinparam sequence {\nDividerBackgroundColor #8DBEFF\nDividerBorderColor #8DBEFF\nLifeLineBackgroundColor #13B6FF\nLifeLineBorderColor #13B6FF\nParticipantBackgroundColor #13B6FF\nParticipantBorderColor #13B6FF\nBoxBackgroundColor #C1E8FF\nBoxBorderColor #C1E8FF\nGroupBackgroundColor #8DBEFF\nGropuBorderColor #8DBEFF\n}\n\nskinparam note {\nBackgroundColor #ABCFFF\nBorderColor #2149C2\n}\n\nbox \"Application\"\nparticipant \"User\\nApplication\" as t\nparticipant \"Zephyr RTOS\\nMSPI API\" as a\nparticipant \"HPF eMSPI driver\" as d\nend box\nbox \"FLPR\"\nparticipant \"HPF FLPR APP\" as f\nparticipant \"HRT\" as h\nend box\n\n== Initialization ==\n...\n```\n\n----------------------------------------\n\nTITLE: Scheduling Actions on Weekdays with Bluetooth Mesh Scheduler\nDESCRIPTION: This C code snippet demonstrates how to schedule actions on weekdays using the Bluetooth Mesh Scheduler Client. It defines a function `schedule_on_weekdays` that creates a schedule entry for a specific action at a given time on any day of the year, but only on Monday to Friday.  It uses `bt_mesh_scheduler_cli_action_set_unack` to send the schedule entry without requiring an acknowledgement.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scheduler_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic int schedule_on_weekdays(enum bt_mesh_scheduler_action action,\n                                  uint8_t idx, uint8_t hour, uint8_t minute)\n{\n   const struct bt_mesh_schedule_entry entry = {\n      .action = action,\n      .minute = minute,\n      .hour = hour,\n      .day = BT_MESH_SCHEDULER_ANY_DAY,\n      .month = (BT_MESH_SCHEDULER_JAN | BT_MESH_SCHEDULER_FEB |\n                BT_MESH_SCHEDULER_MAR | BT_MESH_SCHEDULER_APR |\n                BT_MESH_SCHEDULER_MAY | BT_MESH_SCHEDULER_JUN |\n                BT_MESH_SCHEDULER_JUL | BT_MESH_SCHEDULER_AUG |\n                BT_MESH_SCHEDULER_SEP | BT_MESH_SCHEDULER_OCT |\n                BT_MESH_SCHEDULER_NOV | BT_MESH_SCHEDULER_DEC),\n      .year = BT_MESH_SCHEDULER_ANY_YEAR,\n      .day_of_week = (BT_MESH_SCHEDULER_MON | BT_MESH_SCHEDULER_TUE |\n                      BT_MESH_SCHEDULER_WED | BT_MESH_SCHEDULER_THU |\n                      BT_MESH_SCHEDULER_FRI),\n   };\n\n   return bt_mesh_scheduler_cli_action_set_unack(&scheduler_cli, NULL, idx, &entry);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Environment for nRF Connect SDK Unit Test with CMock\nDESCRIPTION: This CMake configuration sets up a unit test environment in the nRF Connect SDK. It establishes the minimum CMake version, finds the Zephyr package, generates a test runner, creates mocks using CMock with word exclusions, and configures source files and include directories for the test modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/unity/wrap_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(wrap_test)\n\n# generate runner for the test\ntest_runner_generate(src/wrap_test.c)\n\n# create mocks for test_code functions\ncmock_handle(src/test_code/test_code.h test_code\n  WORD_EXCLUDE \"IGNORE_ME\"\n)\n\n# add module test_code\ntarget_sources(app PRIVATE src/test_code/test_code.c)\ntarget_include_directories(app PRIVATE src)\n\n# add module call\ntarget_sources(app PRIVATE src/call/call.c)\ntarget_include_directories(app PRIVATE ./src/call)\n\n# add test file\ntarget_sources(app PRIVATE src/wrap_test.c)\ntarget_include_directories(app PRIVATE .)\ntarget_include_directories(app PRIVATE src/test_code)\n```\n\n----------------------------------------\n\nTITLE: Sending Association Request to DECT Beacon - Console\nDESCRIPTION: This command sends an association request to a DECT beacon with a specific long RD ID. The command initiates a sequence to establish communication and requires prior scanning to obtain necessary identifiers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_28\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ dect mac associate -t 1234\n      Sending association_req to FT 1234's random access resource\n      Scheduled random access data TX/RX:\n      target long rd id 1234 (0x000004d2), short rd id 27462 (0x6b46),\n      target 32bit nw id 305419896 (0x12345678), tx pwr 0 dbm,\n      channel 1659, payload PDU byte count: 50,\n      beacon interval 2000, frame time 24205018225, beacon received 17016336625\n      Association request TX started.\n      TX for Association Request completed.\n```\n\n----------------------------------------\n\nTITLE: Configuring ZCBOR Decode Test Build\nDESCRIPTION: CMake configuration that sets up a ZCBOR decode test project. It finds required dependencies, generates C source files from CDDL specifications using the zcbor tool, and configures build targets with appropriate sources and include paths.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/modules/lib/zcbor/decode/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(test_zcbor_decode)\n\nfind_program(ZCBOR zcbor REQUIRED)\n\nset(zcbor_args\n  code\n  -c ${CMAKE_CURRENT_LIST_DIR}/../cddl/test.cddl\n  --output-c ${PROJECT_BINARY_DIR}/src/test_decode.c\n  --output-h ${PROJECT_BINARY_DIR}/include/test_decode.h\n  -t Test\n  -d\n  )\n\nadd_custom_command(\n  OUTPUT\n  ${PROJECT_BINARY_DIR}/src/test_decode.c\n  ${PROJECT_BINARY_DIR}/include/test_decode.h\n  DEPENDS\n  ${CMAKE_CURRENT_LIST_DIR}/../cddl/test.cddl\n  COMMAND\n  ${ZCBOR} ${zcbor_args}\n  )\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources} ${PROJECT_BINARY_DIR}/src/test_decode.c)\ntarget_include_directories(app PRIVATE ${PROJECT_BINARY_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Specifying File Paths in reStructuredText\nDESCRIPTION: This snippet demonstrates how to specify file paths for header and source files in reStructuredText. It uses the :file: directive to format the paths.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/mesh_model_main_README.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n| Header file: :file:`path/to/the/header/file`\n| Source file: :file:`path/to/the/source/file`\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Nordic SDK\nDESCRIPTION: Sets up the minimum CMake version requirement and finds the Zephyr build system. Configures the project name and discovers application source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/radio_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\nLANGUAGE: cmake\nCODE:\n```\nproject(NONE)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t${app_sources}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory\nDESCRIPTION: This snippet adds the 'src' directory of the project, instructing CMake to include any source files located in this directory within the build process. This is a common practice to organize project source code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm2100_fuel_gauge/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Fetching Git Commits for nRF Connect SDK v2.6.4\nDESCRIPTION: Git command to list all nRF Connect SDK specific commits and cherry-picked commits since v2.6.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.6.4.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v3.5.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: Installing NCS toolchain using bootstrap script\nDESCRIPTION: Command for downloading and running the bootstrap-toolchain.sh script to install the v2.6.99-cs2 toolchain for nRF54H20 DK development.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://files.nordicsemi.com/artifactory/swtools/external/scripts/bootstrap-toolchain.sh | NCS_TOOLCHAIN_VERSION=v2.6.99-cs2 sh\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to nRF Connect SDK Application in CMake\nDESCRIPTION: Adds multiple source files to the 'app' target. These files include utilities for printing, networking, and string operations, which are part of the application's core functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/utils/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/mosh_print.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/net_utils.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/str_utils.c)\n```\n\n----------------------------------------\n\nTITLE: Scanning All Channels on Client Side - Console\nDESCRIPTION: This command scans all channels within a specified band for a beacon, allowing identification of beacons that may not be operating on a known channel. The command is critical for network discovery and requires DECT command-line tools.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_27\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ dect mac beacon_scan -c 0\n```\n\n----------------------------------------\n\nTITLE: Handling Copying of Platform Configuration Files to Install Directory\nDESCRIPTION: This snippet copies necessary platform configuration files to the installation directory for the platform's non-secure image, ensuring proper setup for deployment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES       ns/CMakeLists.txt\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR})\n\nif(TFM_PARTITION_PLATFORM)\n  file(COPY board/device_cfg.h\n            board/RTE_Device.h\n       DESTINATION ${INSTALL_INTERFACE_INC_DIR})\nendif()\n\nfile(COPY ${CMAKE_CURRENT_LIST_DIR}/common\n     DESTINATION ${INSTALL_PLATFORM_NS_DIR})\n```\n\n----------------------------------------\n\nTITLE: Generating Wave Signal Value in C\nDESCRIPTION: This function generates the value of the wave signal based on the specified parameters and the current time. It takes wave parameters and time as arguments and returns the computed signal value.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/wave_gen.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint wave_gen_generate_value(struct wave_gen_param *param, int time) {\n    // Calculate wave value based on the parameters and current time\n    return (param->amplitude * sin(2 * M_PI * param->frequency * time)) + param->offset;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Counter via Device Shadow in JSON\nDESCRIPTION: JSON configuration snippet for enabling or disabling the test counter via the device shadow. The counterEnable property can be set to true or false to control the test counter functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"desired\": {\n   \"config\": {\n      \"counterEnable\": true\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FLPR Partitions for FLPR Application in DTS\nDESCRIPTION: This code snippet shows how to define the memory region for the FLPR core in DTS. It specifies the starting address (0x98000) and size (0x20000) for the FLPR RRAM partition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/nrf54l_signing_with_payload.rst#2025-04-21_snippet_0\n\nLANGUAGE: dts\nCODE:\n```\n&cpuflpr_rram {\n      reg = <0x98000 0x20000>;\n};\n```\n\n----------------------------------------\n\nTITLE: Assigning Peripheral to Partition in YAML\nDESCRIPTION: YAML configuration to assign secure peripheral access permissions in the partition manifest\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"mmio_regions\": [\n        {\n                \"name\": \"TFM_PERIPHERAL_TIMER1\",\n                \"permission\": \"READ-WRITE\"\n        },\n]\n```\n\n----------------------------------------\n\nTITLE: Including Distance Measurement Common Header in Bluetooth Mesh\nDESCRIPTION: Specifies the header file location for common types used in Distance Measurement vendor models.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/vnd/dm.rst#2025-04-21_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n| Header file: :file:`include/bluetooth/mesh/vnd/dm_common.h`\n```\n\n----------------------------------------\n\nTITLE: Device Channel Selection Policy Configuration\nDESCRIPTION: Configure the policy for selecting initial transmission channel when synchronized with a Host. Supports using the last successful channel or current believed channel.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/gazell/gzll.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nnrf_gzll_set_device_channel_selection_policy(NRF_GZLL_DEVICE_CHANNEL_SELECTION_POLICY_USE_SUCCESSFUL)\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.20.0 for the project. This ensures that the CMake features used in the script are supported.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This command uses CMake's `find_package` function to locate the Zephyr RTOS package. It marks Zephyr as a required dependency and provides a hint for its location using the environment variable `$ENV{ZEPHYR_BASE}`. This is crucial for accessing Zephyr's libraries and build system functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/thread_coex/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Devices with Minicom\nDESCRIPTION: Commands for connecting to development kits via serial port using minicom with the appropriate port and baud rate settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nminicom -D /dev/ttyACM1 -b 115200\nminicom -D /dev/ttyACM3 -b 115200\n```\n\n----------------------------------------\n\nTITLE: Set CMake Try Compile Target Type\nDESCRIPTION: This command sets the CMake try compile target type to STATIC_LIBRARY. This is used for probing features at configure time.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot Backend Options\nDESCRIPTION: Configuration options specific to using MCUboot as the DFU backend, including image management handlers and bootutil library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dfu_mcumgr.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MCUMGR_GRP_IMG=y\nCONFIG_MCUMGR_GRP_IMG_MUTEX=y\nCONFIG_IMG_MANAGER=y\nCONFIG_STREAM_FLASH=y\nCONFIG_MCUBOOT_BOOTUTIL_LIB=y\nSB_CONFIG_BOOTLOADER_MCUBOOT=y\n```\n\n----------------------------------------\n\nTITLE: Store NCS Variables\nDESCRIPTION: This CMake command calls the `store_ncs_vars()` function. This is used for saving all of the NCS related environment variables. \nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nstore_ncs_vars()\n```\n\n----------------------------------------\n\nTITLE: Starting Periodic Battery Level Reading in C\nDESCRIPTION: Use this function to periodically read the battery level with a given time interval. It can only be called when notification support is not enabled in BAS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/bas_client.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nbt_bas_start_per_read_battery_level\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi TX Rate Frame Format Parameters\nDESCRIPTION: Parameter description for the frame_format parameter of the tx_rate command, listing the available TX data rate types and their corresponding numeric values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/using_wifi_shell_sample.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n<frame_format>: The TX data rate type to be set,\n\nwhere:\n\n0 - LEGACY\n1 - HT\n2 - VHT\n3 - HE_SU\n4 - HE_ER_SU\n5 - AUTO\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wi-Fi Radio RX Statistics\nDESCRIPTION: Command to display reception statistics after running RX tests, showing RSSI values and packet counts for both OFDM and DSSS transmissions with CRC pass/fail statistics.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test get_stats\n```\n\n----------------------------------------\n\nTITLE: Initializing Core CMake Configuration\nDESCRIPTION: Sets up initial CMake configuration including minimum version requirement and basic compile definitions for headset/gateway modes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\n# Flag which defines whether application is compiled as gateway/dongle or headset\nadd_compile_definitions(HEADSET=1)\nadd_compile_definitions(GATEWAY=2)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth MDS Source\nDESCRIPTION: This code conditionally includes the Medical Device Service (MDS) source file when CONFIG_BT_MDS is defined. It supports medical devices' interactions via Bluetooth.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_MDS mds.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version for Zephyr Project\nDESCRIPTION: This snippet sets the minimum required version of CMake to 3.20.0, which is essential for the project to ensure compatibility with specific features used in the configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_stm/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Adding API Documentation Section in RST\nDESCRIPTION: This snippet demonstrates how to properly reference and document the API in a library documentation page. It includes placeholders for header and source file paths, as well as the Doxygen group name that should be replaced with actual values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/library_template_README.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n| Header file: :file:`*provide_the_path*`\n| Source files: :file:`*provide_the_path*`\n\n.. doxygengroup:: *doxygen_group_name*\n```\n\n----------------------------------------\n\nTITLE: NMEA GNSS Output Parsing\nDESCRIPTION: Sample demonstrates NMEA sentence output from GNSS module, showing various positioning and satellite information messages\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/gnss/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: nmea\nCODE:\n```\n$GPGLL,,,,,000000.00,V,A*45\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings Loader Thread Stack Size in Kconfig\nDESCRIPTION: Increases the stack size of the thread responsible for loading settings to 1200 in nrf52kbd_nrf52832 configurations to prevent stack overflows on initial boot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_CAF_SETTINGS_LOADER_THREAD_STACK_SIZE=1200\n```\n\n----------------------------------------\n\nTITLE: Viewing Network Settings in NCP Sample\nDESCRIPTION: Command to display the status and network settings in the OpenThread NCP sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwpanctl:leader_if> status\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Optional Features to nRF Cloud Project\nDESCRIPTION: Adds optional source files based on configuration flags, including location tracking, CoAP shadow and FOTA support, and provisioning support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_LOCATION_TRACKING)\ntarget_sources(app PRIVATE src/location_tracking.c)\nendif()\n\nif(CONFIG_COAP_SHADOW)\ntarget_sources(app PRIVATE src/shadow_support_coap.c)\nendif()\n\nif(CONFIG_COAP_FOTA)\ntarget_sources(app PRIVATE src/fota_support_coap.c)\nendif()\n\nif(CONFIG_NRF_PROVISIONING)\ntarget_sources(app PRIVATE src/provisioning_support.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring ESB Library Build with PPI/DPPI Support\nDESCRIPTION: CMake configuration that sets up the ESB library build, including core ESB functionality and conditional compilation of either PPI or DPPI support based on hardware capabilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/esb/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(esb.c)\n\nzephyr_library_sources_ifdef(CONFIG_HAS_HW_NRF_PPI esb_ppi.c)\nzephyr_library_sources_ifndef(CONFIG_HAS_HW_NRF_PPI esb_dppi.c)\n```\n\n----------------------------------------\n\nTITLE: Sample Console Output on Boot\nDESCRIPTION: Console output showing the initial boot sequence, firmware version, and Wi-Fi scan results.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shutdown/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v3.3.99-ncs1-26-ge405279d2134 ***\n[00:00:00.440,460] <inf> wifi_nrf: Firmware (v1.2.8.1) booted successfully\n\n[00:00:00.638,397] <inf> scan: Starting nrf5340dk/nrf5340/cpuapp with CPU frequency: 64 MHz\n\n[00:00:00.642,608] <inf> scan: Scan requested\n\nNum  | SSID                             (len) | Chan | RSSI | Security | BSSID\n1    | abcdef                           6     | 1    | -37  | WPA/WPA2 | aa:aa:aa:aa:aa:aa\n2    | pqrst                            5     | 1    | -65  | WPA/WPA2 | xx:xx:xx:xx:xx:xx\n3    | AZBYCXD                          7     | 1    | -41  | WPA/WPA2 | yy:yy:yy:yy:yy:yy\n[00:00:05.445,739] <inf> scan: Scan request done\n\n[00:00:05.452,423] <inf> scan: Interface down\n```\n\n----------------------------------------\n\nTITLE: Building Event Manager Proxy Sample with Twister Test for nRF54H20\nDESCRIPTION: Alternative command to build the sample for nRF54H20 using the twister test case specification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp -T sample.event_manager_proxy.nrf54h20dk_cpuapp .\n```\n\n----------------------------------------\n\nTITLE: Compiling PSA Crypto Service Source\nDESCRIPTION: Adds the PSA crypto service source file to the Zephyr build system using zephyr_sources CMake function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/psa_crypto/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources(psa_crypto_service.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring PSA Crypto Library Include Directories in CMake\nDESCRIPTION: Sets up the include directories for the PSA crypto library configuration, including common headers and CRACEN driver specific include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/cracen/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Add include-directories\ntarget_include_directories(psa_crypto_library_config\n  INTERFACE\n    ${CMAKE_CURRENT_LIST_DIR}/common/include/\n    ${cracen_driver_include_dirs}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MPSL FEM Library and Sources in CMake\nDESCRIPTION: CMake configuration script that conditionally includes FEM-related source files and directories based on different configuration options. Handles various FEM implementations including API initialization, common utilities, TWI driver support, and specific FEM modules like nRF21540, simple GPIO, nRF2220, and nRF2240.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/fem/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_MPSL_FEM_API_AVAILABLE OR CONFIG_MPSL_FEM_NCS_SUPPORTED_FEM_USED)\n  zephyr_library()\nendif()\n\nzephyr_library_sources_ifdef(CONFIG_MPSL_FEM_API_AVAILABLE api_init/mpsl_fem_api_init.c)\n\nif(CONFIG_MPSL_FEM_NCS_SUPPORTED_FEM_USED)\n  zephyr_library_include_directories_ifdef(CONFIG_MPSL_FEM common/include)\n  zephyr_library_sources_ifdef(CONFIG_MPSL_FEM common/mpsl_fem_utils.c)\n  zephyr_library_sources_ifdef(CONFIG_MPSL_FEM_USE_TWI_DRV common/mpsl_fem_twi_drv.c)\n\n  zephyr_library_sources_ifdef(CONFIG_MPSL_FEM_NRF21540_GPIO nrf21540_gpio/mpsl_fem_nrf21540_gpio.c)\n\n  add_subdirectory_ifdef(CONFIG_MPSL_FEM_NRF21540_GPIO_SPI nrf21540_gpio_spi)\n\n  zephyr_library_sources_ifdef(CONFIG_MPSL_FEM_SIMPLE_GPIO simple_gpio/mpsl_fem_simple_gpio.c)\n\n  add_subdirectory_ifdef(CONFIG_MPSL_FEM_NRF2220 nrf2220)\n\n  add_subdirectory_ifdef(CONFIG_MPSL_FEM_NRF2240 nrf2240)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing CLAMP Macro in C\nDESCRIPTION: Adds a CLAMP macro to the system, likely for constraining a value within a specified range.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nCLAMP\n```\n\n----------------------------------------\n\nTITLE: TCP Server Command Syntax (AT#XTCPSVR)\nDESCRIPTION: Command syntax for starting/stopping TCP/TLS server with options for IPv4/IPv6 and port configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n#XTCPSVR=<op>[<port>[,<sec_tag>]]\n```\n\n----------------------------------------\n\nTITLE: Installing Device Credentials for CoAP over LTE\nDESCRIPTION: This Python command uses the device_credentials_installer.py script to install device and server credentials for CoAP over LTE connectivity. It includes the --coap option to install the CoAP root CA certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\npython3 device_credentials_installer.py --ca self_self_cert_serial_ca.pem --ca_key self_self_cert_serial_prv.pem --id_str nrf- --id_imei -s -d --verify --coap\n```\n\n----------------------------------------\n\nTITLE: Setting Random Broadcast ID - Shell Command\nDESCRIPTION: Shell command for setting a random broadcast ID that changes each time the broadcaster starts.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_27\n\nLANGUAGE: console\nCODE:\n```\nnac broadcast_id random 0\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding sdfw Subdirectory\nDESCRIPTION: Adds the sdfw subdirectory only when CONFIG_MOCK_SDFW configuration is enabled. This provides flexibility in including the sdfw component based on specific build requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/mocks/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_MOCK_SDFW sdfw)\n```\n\n----------------------------------------\n\nTITLE: Git Command for Listing nRF Connect SDK Specific Commits\nDESCRIPTION: Git command to list all nRF Connect SDK specific commits and cherry-picked commits since v2.1.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.3.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v3.1.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Cache Raw Image Upload Request\nDESCRIPTION: Defines the CBOR data structure for uploading a raw image to the device cache. It includes fields for target ID, length, offset, and the actual image chunk data to be cached.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_12\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str,opt)\"target_id\"              : (uint)\n    (str,opt)\"len\"                    : (uint)\n    (str)\"off\"                        : (uint)\n    (str)\"data\"                       : (byte str)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for nRF Provisioning Unit Tests\nDESCRIPTION: Sets up the CMake project, defines minimum CMake version, finds Zephyr package, and initializes the project name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_provisioning/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(nrf_provisioning_unittest)\n```\n\n----------------------------------------\n\nTITLE: Testing SAP Mode Commands - Console\nDESCRIPTION: This snippet details commands to configure and test Wi-Fi SAP (Station Access Point) mode by setting regulatory domains, managing SAP interface IP addresses, and checking connections. It includes commands for verifying connections to stations and performing connectivity tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n|test_sample|\\\n#. |connect_kit|\\\n#. |connect_terminal|\\\n#. Set the appropriate regulatory domain using the following command:\\\n   .. code-block:: console\\\n      wifi reg_domain <ISO/IEC 3166-1 alpha2>\\\n   For example, to set the regulatory domain to IN, use the following command:\\\n   .. code-block:: console\\\n      wifi reg_domain IN\\\n#. Set an IP address for the SAP interface using the following command:\\\n   .. code-block:: console\\\n      net ipv4 add 1 192.168.1.1 255.255.255.0\\\n#. Enable the Access Point mode using the following command:\\\n   .. code-block:: console\\\n      wifi ap enable -s <SSID> -c <channel> -k <key_management> -p <psk>\\\n   ``<SSID>`` is the SSID of the network you want to connect to, ``<psk>`` is its passphrase, and the ``<key_management>`` is the security type used by the network.\\\n#. Check the SAP status after a while, using the following command:\\\n   .. code-block:: console\\\n        wifi status\\\n   If the SAP is established, you should see an output similar to the following:\\\n   .. code-block:: console\\\n        Status: successful\\\n        ==================\\\n        State: COMPLETED\\\n        Interface Mode: ACCESS POINT\\\n        Link Mode: UNKNOWN\\\n        SSID: testing\\\n        BSSID: F4:CE:36:00:22:C6\\\n        Band: 2.4GHz\\\n        Channel: 1\\\n        Security: OPEN\\\n        MFP: Disable\\\n        Beacon Interval: 0\\\n        DTIM: 2\\\n        TWT: Not supported\\\n#. Connect a station to the SAP using a static IP address and verify the connection using the following command:\\\n   .. code-block:: console\\\n        wifi ap stations\\\n   If the station is connected, you should see an output similar to the following:\\\n   .. code-block:: console\\\n        AP stations:\\\n        ============\\\n        Station 1:\\\n        ==========\n        MAC: 62:26:54:D9:1C:6E\\\n        Link mode: WIFI 4 (802.11n/HT)\\\n        TWT: Not supported\\\n#. Verify connectivity by pinging the Station from the SAP using the following command:\\\n   .. code-block:: console\\\n      net ping <station IP address>\\\n   See the following example:\\\n   .. code-block:: console\\\n      net ping 192.168.1.88\\\n        PING 192.168.1.88\\\n        28 bytes from 192.168.1.88 to 192.168.1.1: icmp_seq=1 ttl=64 time=5 ms\\\n        28 bytes from 192.168.1.88 to 192.168.1.1: icmp_seq=2 ttl=64 time=5 ms\\\n        28 bytes from 192.168.1.88 to 192.168.1.1: icmp_seq=3 ttl=64 time=5 ms\\\n#. Disable the Access Point mode using the following command:\\\n   .. code-block:: console\\\n      wifi ap disable\n```\n\n----------------------------------------\n\nTITLE: Adding Application Sources to Target\nDESCRIPTION: This snippet uses the `target_sources` command to add the source files listed in `app_sources` to the `app` target. The `PRIVATE` keyword means that these sources are only used for building the `app` target and are not exposed to other targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/client_id/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_sources(app PRIVATE ${app_sources})\"\n```\n\n----------------------------------------\n\nTITLE: Updating Modem Library Trace Backend Interface in C\nDESCRIPTION: Modified the trace backend interface to be exposed to the modem_trace_module using the nrf_modem_lib_trace_backend struct. This update supports backends that store trace data for later retrieval.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nstruct nrf_modem_lib_trace_backend {\n    int (*init)(void);\n    int (*deinit)(void);\n    int (*write)(const void *data, size_t len);\n    int (*read)(void *buf, size_t len);\n    // ... other members\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Main Source File to NRF Connect SDK Build\nDESCRIPTION: This CMake snippet adds the main.c source file from the current directory to the application build. It uses the target_sources command to include the file in the 'app' target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/unicast_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Modem Trace Flash Project in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build configuration for the modem_trace_flash project. It specifies the minimum CMake version, finds the Zephyr package, and adds the main.c source file to the project. The Zephyr package is required and its location is hinted using the ZEPHYR_BASE environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_trace_flash/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(modem_trace_flash)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Registering an Existing Test Event Trigger Handler in Matter (C++)\nDESCRIPTION: This snippet demonstrates how to register an existing test event trigger handler. It creates an instance of the TestEventTriggerHandler class and registers it using the RegisterTestEventTriggerHandler method. It also includes checking the CHIP_ERROR return code to handle potential errors such as memory allocation failures. This is for integrating existing Matter SDK trigger handlers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/test_event_triggers.rst#2025-04-21_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n/* Create the Trigger Handler object */\nstatic TestEventTriggerHandler existingTriggerHandler;\nCHIP_ERROR err = Nrf::Matter::TestEventTrigger::Instance().RegisterTestEventTriggerHandler(&existingTriggerHandler);\n\n/* Remember to check the CHIP_ERROR return code */\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Volatile Storage Log Level in C\nDESCRIPTION: Sets the maximum compiled-in log level for Non-Volatile Storage to 'warning' to avoid flooding logs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NVS_LOG_LEVEL=\"warning\"\n```\n\n----------------------------------------\n\nTITLE: LwM2M Carrier Configuration Command\nDESCRIPTION: AT command to configure various LwM2M carrier library settings including APN, auto-registration, startup behavior, and carrier selection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_5\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=<cmd>[,<param1>[,<param2>]..]\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version for Nordic Semiconductor Project\nDESCRIPTION: Specifies the minimum required CMake version for the project, ensuring compatibility with build system requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_hpu_temp_meas/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth BAS Client Source\nDESCRIPTION: This snippet includes the Battery Service (BAS) client source file conditionally based on the CONFIG_BT_BAS_CLIENT option. It facilitates battery state monitoring in Bluetooth devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_BAS_CLIENT bas_client.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring QoS Test Project Build with CMake\nDESCRIPTION: This CMake script sets up the build configuration for a QoS (Quality of Service) test application. It specifies the minimum CMake version, finds the Zephyr package, generates a test runner for the qos_test.c file, and includes the necessary source files and directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/qos/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(qos_test)\n\n# generate runner for the test\ntest_runner_generate(src/qos_test.c)\n\ntarget_include_directories(app PRIVATE src)\n\n# add test file\ntarget_sources(app PRIVATE src/qos_test.c)\n```\n\n----------------------------------------\n\nTITLE: Adding source files to the application\nDESCRIPTION: Adds the `src/main.c` source file to the application.  This defines the main entry point of the Zephyr application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_flpr/remote/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_sources(app PRIVATE src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for EdDSA Project in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build configuration for an EdDSA project. It specifies the minimum CMake version, locates the Zephyr package, defines the project name, and adds the main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/eddsa/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(eddsa)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Applying Device Tree Overlay to MCUboot with Network Core\nDESCRIPTION: CMake configuration for sysbuild to apply the device tree overlay to MCUboot with network core support. Adds the application overlay file to MCUboot's device tree compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND mcuboot_EXTRA_DTC_OVERLAY_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/app.overlay\")\n```\n\n----------------------------------------\n\nTITLE: Defining SUIT Memory Pointer Storage Library (CMake)\nDESCRIPTION: This snippet defines a Zephyr library. It specifies the source file (`src/suit_memptr_storage.c`) and links it against the `suit_memptr_storage_interface` library, ensuring that the implementation has access to the interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/memptr_storage/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library()\n\n zephyr_library_sources(src/suit_memptr_storage.c)\n\n zephyr_library_link_libraries(suit_memptr_storage_interface)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.20.0. This ensures that the CMake features used in the file are supported by the CMake version used for building.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/client_id/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources for Application\nDESCRIPTION: In this snippet, the function 'target_sources' is used to link the main application source code for the SPI controller peripheral test located in the specified source directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/spi/spi_controller_peripheral/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE \\${ZEPHYR_BASE}/tests/drivers/spi/spi_controller_peripheral/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Core Source Files to Bluetooth Test Application in CMake\nDESCRIPTION: Adds the main source files required for the Bluetooth testing application. These include the main program, the Bluetooth tester framework, and the GAP protocol implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/bluetooth/tester/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n    src/main.c\n    src/bttester.c\n    src/gap.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version for Nordic SDK\nDESCRIPTION: Specifies the minimum required CMake version for the Nordic Semiconductor SDK project. Ensures compatibility with build system requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tnep_poller/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Including Private Directory in CMake for nRF Connect SDK\nDESCRIPTION: Adds the current directory to the private include directories for the 'app' target. This ensures that header files in the current directory are accessible to the application code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/cloud/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Legacy MRAM Partition Definition in Device Tree\nDESCRIPTION: Example of old MRAM partition definition style using nordic,allocatable-mram binding under the mram_controller node. Shows partition configuration with permissions and sizes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2.7_application.rst#2025-04-21_snippet_2\n\nLANGUAGE: devicetree\nCODE:\n```\n&mram_controller {\n   mram0: mram@e0a6000 {\n      compatible = \"nordic,allocatable-mram\", \"soc-nv-flash\";\n      reg = <0xe0a6000 DT_SIZE_K(360)>;\n      erase-block-size = <4096>;\n      write-block-size = <1>;\n      perm-read;\n      perm-execute;\n      perm-secure;\n      partitions {\n         compatible = \"fixed-partitions\";\n         #address-cells = <1>;\n         #size-cells = <1>;\n         slot0_partition: partition@a6000 {\n            reg = <0xa6000 DT_SIZE_K(296)>;\n         };\n         ppr_code_partition: partition@f0000 {\n            reg = <0xf0000 DT_SIZE_K(64)>;\n         };\n      };\n   };\n   mram1: mram@e100000 {\n      compatible = \"nordic,allocatable-mram\", \"soc-nv-flash\";\n      reg = <0xe100000 DT_SIZE_K(916)>;\n      erase-block-size = <4096>;\n      write-block-size = <1>;\n      perm-read;\n      perm-write;\n      partitions {\n         compatible = \"fixed-partitions\";\n         #address-cells = <1>;\n         #size-cells = <1>;\n         dfu_partition: partition@100000 {\n            reg = < 0x100000 DT_SIZE_K(892) >;\n         };\n         storage_partition: partition@1df000 {\n            reg = < 0x1df000 DT_SIZE_K(24) >;\n         };\n      };\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring QoS Library Build in CMake\nDESCRIPTION: Configures the build system to create a library from qos.c source file using Zephyr's CMake build system. Uses zephyr_library() to create a new library target and adds the QoS source file to it.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/qos/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(qos.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11a PER Measurement (Receiver)\nDESCRIPTION: Commands to initialize the Wi-Fi radio test in channel 36 and set it to receive mode for 802.11a PER measurement.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nwifi_radio_test init 36\nwifi_radio_test rx 1     #this will clear the earlier stats and wait for packets\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for nRF5340 Network Core\nDESCRIPTION: Adds net_core.c to the Zephyr library sources when building for the nRF5340 network core.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net_core_monitor/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_SOC_NRF5340_CPUNET)\n\tzephyr_library_sources(net_core.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding GRP Subdirectory in CMake Build System\nDESCRIPTION: CMake directive to include the 'grp' subdirectory in the build process. This ensures that CMake processes any build configurations present in the grp directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mgmt/mcumgr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(grp)\n```\n\n----------------------------------------\n\nTITLE: Adding TF-M Documentation Set in CMake\nDESCRIPTION: Adds the TF-M (Trusted Firmware-M) documentation set with version 2.1.0 to the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_docset(tfm \"2.1.0\")\n```\n\n----------------------------------------\n\nTITLE: Creating Zephyr Library named fmdn\nDESCRIPTION: This command creates a Zephyr library named 'fmdn'. This library will be built as part of the Zephyr RTOS build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"zephyr_library_named(fmdn)\"\n```\n\n----------------------------------------\n\nTITLE: Zephyr Library Configuration (CMake)\nDESCRIPTION: This snippet configures the Zephyr library by specifying the source files to be included. It uses `zephyr_library_sources` to include the selected flash protection source file (`${FPROTECT_SRC}`). Additionally, it conditionally includes `sys_init_fprotect.c` if the `CONFIG_FPROTECT_APP` option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/fprotect/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library()\nzephyr_library_sources(${FPROTECT_SRC})\nzephyr_library_sources_ifdef(CONFIG_FPROTECT_APP sys_init_fprotect.c)\"\n```\n\n----------------------------------------\n\nTITLE: Find DUT - Custom Command Usage\nDESCRIPTION: This command cycles through all channels (11-26) in an attempt to PING the DUT device until a response is received.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\ncustom find\n```\n\n----------------------------------------\n\nTITLE: Define TF-M API Library for Nordic nRF\nDESCRIPTION: This snippet defines a named Zephyr library `tfm_api_nrf` and includes source files for the non-secure API, specifically `tfm_ioctl_ns_api.c`, when building for Nordic nRF devices with TF-M partitioning enabled. It avoids using the typical CMake install mechanism and directly refers to source files for convenience.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_PARTITION_PLATFORM AND CONFIG_SOC_FAMILY_NORDIC_NRF)\n  zephyr_library_named(tfm_api_nrf)\n\n  # The non-secure API files are located in a folder associated with the TF-M\n  # build system. Usually the cmake INSTALL mechanism is used to move these\n  # API source files to be built by the zephyr build system.\n  # For convenience we instead refer directly to the source files here.\n  set(src_dir ${CMAKE_CURRENT_LIST_DIR}/tfm_boards/src)\n\n  zephyr_library_sources(\n    ${src_dir}/tfm_ioctl_ns_api.c\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for DK Buttons and LEDs\nDESCRIPTION: Creates and configures a Zephyr library module for DK buttons and LEDs functionality. Specifies the source file to be compiled into the library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/dk_buttons_and_leds/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(dk_buttons_and_leds.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Watchdog Test Project\nDESCRIPTION: CMake script that configures a Zephyr project for watchdog driver testing, specifying minimum CMake version, finding Zephyr framework, and setting up source files\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/watchdog/wdt_basic_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\nLANGUAGE: cmake\nCODE:\n```\nproject(wdt_basic_api)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/watchdog/wdt_basic_api/src/*.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: FOTA Update Device Twin JSON\nDESCRIPTION: Example of the firmware update configuration in the device twin's desired properties. Specifies the firmware version, job ID, download location and fragment size for FOTA updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/azure_iot_hub/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"firmware\": {\n        \"fwVersion\": \"v0.0.2-dev\",\n        \"jobId\": \"ca186d4b-4171-4209-a49d-700c35567d1d\",\n        \"fwLocation\": {\n            \"host\": \"example.com\",\n            \"path\": \"firmware/my-app-update.bin\"\n        },\n        \"fwFragmentSize\": 1800\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Firmware A Upload Success Output\nDESCRIPTION: Expected output from UART showing successful upload and installation of test firmware variant A.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n[00:01:01] ###### 100% [COM7] Uploaded\n✔️ Serving images done\n✔️ Uploaded hci_ipc.bin\n✔️ Uploaded ab.bin\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to CMake Target for NRF Connect SDK\nDESCRIPTION: These CMake commands add two source files (sock_shell.c and sock.c) to the 'app' target. The files are located in the current source directory, which is referenced using the CMAKE_CURRENT_SOURCE_DIR variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/sock/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sock_shell.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sock.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake with Zephyr and Azure IoT Hub in CMakeLists.txt\nDESCRIPTION: This CMake configuration file sets the minimum required CMake version to 3.20.0, finds the Zephyr package using an environment variable, and specifies the project as 'azure_iot_hub'. It includes source files from 'src/main.c' and configures the inclusion directories using the Zephyr build system. Dependencies include Zephyr OS and the relevant CMake environment set up. The primary function is to prepare the build environment for a Nordic Semiconductor application targeting Azure IoT Hub.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/azure_iot_hub/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(azure_iot_hub)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n\nzephyr_include_directories(src)\n```\n\n----------------------------------------\n\nTITLE: Managing QSPI NOR Flash Power State\nDESCRIPTION: C++ implementation for controlling the power state of QSPI NOR external flash device, allowing suspension during inactivity periods and resumption when needed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/low_power_configuration.rst#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include <zephyr/pm/device.h>\n\nconst auto * qspi_dev = DEVICE_DT_GET(DT_INST(0, nordic_qspi_nor));\nif (device_is_ready(qspi_dev))\n{\n    // Put the peripheral into suspended state.\n    pm_device_action_run(qspi_dev, PM_DEVICE_ACTION_SUSPEND);\n\n    // Resume the peripheral from the suspended state.\n    pm_device_action_run(qspi_dev, PM_DEVICE_ACTION_RESUME);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Wave Module for WAV File Handling\nDESCRIPTION: Python standard library module for reading and writing WAV audio files, enabling audio file manipulation and processing\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/requirements_music_led_stream.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwave\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Peripheral Samples in reStructuredText\nDESCRIPTION: This snippet creates a table of contents for the peripheral samples documentation using the 'toctree' directive in reStructuredText. It specifies the depth, caption, and glob pattern for including sample README files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/peripheral.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/peripheral/*/README\n```\n\n----------------------------------------\n\nTITLE: Including General Sample Information in reStructuredText\nDESCRIPTION: This snippet includes general information about samples from another file. It uses specific start and end markers to include only a portion of the referenced file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/mesh.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Protocols Serialization Server\nDESCRIPTION: Defines the minimum required CMake version, includes essential Zephyr packages, and configures project specific settings for building the protocols serialization server. It conditionally adds sources and linker options based on configuration flags tailored for error handling and OpenThread support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(protocols_serialization_server)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n\nif(CONFIG_NRF_PS_SERVER_FATAL_ERROR_TRIGGER)\n  target_sources(app PRIVATE src/fatal_error_trigger.c)\nendif()\n\nif(CONFIG_NRF_PS_SERVER_RPC_ALIVE_LED)\n  # Wrap z_fatal_error to turn off the RPC alive LED on fatal error\n  target_link_options(app INTERFACE -Wl,--wrap=z_fatal_error)\nendif()\n# NORDIC SDK APP END\n\n# Link OpenThread CLI even though OPENTHREAD_SHELL is not selected\nif(CONFIG_OPENTHREAD_RPC)\n  zephyr_link_libraries(openthread-cli-ftd)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Project Name Compilation Definition\nDESCRIPTION: Sets a compilation definition for PROJECT_NAME using the CMake project name if no project name is already defined. Ensures consistent project naming across the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/modem_info/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT PROJECT_NAME)\n  zephyr_compile_definitions(\n    PROJECT_NAME=${CMAKE_PROJECT_NAME}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: ZMS Direct Configuration Options\nDESCRIPTION: Kconfig options for enabling ZMS directly and configuring the lookup cache for improved performance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/zms.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_ZMS=y\nCONFIG_ZMS_LOOKUP_CACHE=y\nCONFIG_ZMS_LOOKUP_CACHE_SIZE=<size>\n```\n\n----------------------------------------\n\nTITLE: Conditional Unity Test Framework Subdirectory\nDESCRIPTION: Adds the Unity test framework subdirectory only if CONFIG_UNITY configuration option is enabled, supporting optional test framework integration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_UNITY\tunity)\n```\n\n----------------------------------------\n\nTITLE: Combining Device and CA Certificates Using cat Command\nDESCRIPTION: Combines a device's certificate with its subordinate CA's certificate chain to form a complete chain required for Azure. Utilizes the `cat` command available in Unix-based systems.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\ncat certs/client-cert.pem ca/sub-ca-cert.pem > certs/client-cert-chain.pem\n```\n\n----------------------------------------\n\nTITLE: Kconfig SSED Receive Window Configuration\nDESCRIPTION: Configuration options affecting the receive window size and timing parameters for SSEDs, which impact power consumption.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/sed_ssed.rst#2025-04-21_snippet_2\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_OPENTHREAD_CSL_RECEIVE_TIME_AHEAD\nCONFIG_OPENTHREAD_MIN_RECEIVE_ON_AHEAD\nCONFIG_OPENTHREAD_MIN_RECEIVE_ON_AFTER\nCONFIG_OPENTHREAD_PLATFORM_CSL_UNCERT\n```\n\n----------------------------------------\n\nTITLE: Adding source files for Zephyr\nDESCRIPTION: This command specifies the source files that should be compiled and linked into the Zephyr application. The `app_event_manager.c` file is always included, while `app_event_manager_shell.c` is conditionally included based on whether the `CONFIG_APP_EVENT_MANAGER_SHELL` Kconfig option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/app_event_manager/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_sources(app_event_manager.c)\"\n\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_sources_ifdef(CONFIG_APP_EVENT_MANAGER_SHELL app_event_manager_shell.c)\"\n```\n\n----------------------------------------\n\nTITLE: Settings Command\nDESCRIPTION: Shell command to display available settings subcommands and their usage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nsettings - Settings shell commands\nSubcommands:\nlist    : List all settings in a subtree (omit to list all)\n        Usage: settings list [subtree]\nread    : Read a specific setting\n        Usage: settings read [type] <name>\n        type: string or hex (default: hex)\nwrite   : Write to a specific setting\n        Usage: settings write [type] <name> <value>\n        type: string or hex (default: hex)\ndelete  : Delete a specific setting\n        Usage: settings delete <name>\n```\n\n----------------------------------------\n\nTITLE: Project Declaration\nDESCRIPTION: This snippet declares the project name for the CMake build system, which is necessary for defining project-specific settings and configurations for the npm2100 fuel gauge application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm2100_fuel_gauge/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(npm2100_fuel_gauge)\n```\n\n----------------------------------------\n\nTITLE: Launching Toolchain on macOS\nDESCRIPTION: Launches the nRF toolchain environment in a shell for macOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nnrfutil sdk-manager toolchain launch --shell\n```\n\n----------------------------------------\n\nTITLE: Creating Initial TNEP Message Callback in C\nDESCRIPTION: Example of a callback function for encoding additional NDEF records into the initial TNEP message. The callback defines records and uses nfc_tnep_initial_msg_encode to insert them.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/tag.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n.. literalinclude:: ../../../../../samples/nfc/tnep_tag/src/main.c\n    :language: c\n    :start-after: include_startingpoint_initial_msg_cb_rst\n    :end-before: include_endpoint_initial_cb_msg_rst\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Recovery Application Path in Kconfig\nDESCRIPTION: Kconfig configuration for setting up a custom SUIT recovery application path and selection options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_recovery.rst#2025-04-21_snippet_5\n\nLANGUAGE: kconfig\nCODE:\n```\nif SUIT_BUILD_RECOVERY\n\nchoice SUIT_RECOVERY_APPLICATION\n   prompt \"Select SUIT recovery application\"\n\nconfig SUIT_RECOVERY_APPLICATION_CUSTOM\n   bool \"Use the custom recovery application\"\n\nendchoice\n\nconfig SUIT_RECOVERY_APPLICATION_PATH\n   string\n   default \"<custom_recovery path>\" if SUIT_RECOVERY_APPLICATION_CUSTOM\n\nendif # SUIT_BUILD_RECOVERY\n```\n\n----------------------------------------\n\nTITLE: Configuring MPSL Header File Path\nDESCRIPTION: Header file path definition for accessing MPSL library control functionality. Located in the include/mpsl directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/mpsl/mpsl_lib.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ninclude/mpsl/mpsl_lib.h\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requirements for ncs-sbom (macOS)\nDESCRIPTION: This command installs the required Python packages for the 'ncs-sbom' command using pip3. It reads the package list from the 'requirements-west-ncs-sbom.txt' file located in the 'nrf/scripts' directory within the 'ncs' folder.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"pip3 install -r nrf/scripts/requirements-west-ncs-sbom.txt\"\n```\n\n----------------------------------------\n\nTITLE: HUK Test Post-Build Configuration\nDESCRIPTION: Configures post-build commands for HUK testing, including board serial number validation and Python script execution.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/hw_unique_key_tfm/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${CONFIG_HUK_TEST_BOARD_SNR}\" STREQUAL \"\")\n  message(WARNING \"If it is to be run on target, this test requires setting \"\n      \"CONFIG_HUK_TEST_BOARD_SNR\")\nelse()\n  add_custom_command(TARGET app\n    POST_BUILD\n    COMMAND\n    ${PYTHON_EXECUTABLE}\n    ${CMAKE_CURRENT_LIST_DIR}/write_kmu.py\n    --family ${family_arg}\n    --snr ${CONFIG_HUK_TEST_BOARD_SNR}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Scan Sample Output: Default Scan Results\nDESCRIPTION: Console output displaying default scan results, including open networks in both 2.4 GHz and 5 GHz bands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/scan/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nScan requested\nNum  | SSID                           (len) | Chan | RSSI | Security | BSSID\n1    |                                  0   | 11   | -39  | Open     | C2:A5:11:A2:B1:E2\n2    | abcdefg                          7   | 11   | -39  | Open     | BC:A5:11:A2:B1:E2\n3    | hijklmno                         8   | 48   | -43  | Open     | 00:22:CF:E6:AE:99\nScan request done\n```\n\n----------------------------------------\n\nTITLE: Sample UART Output: Uncompressed Image\nDESCRIPTION: Console log indicating an uncompressed firmware update, which is considered suboptimal for firmware transfer and update processes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_compress/mcuboot_update/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nSecondary slot image is uncompressed\n```\n\n----------------------------------------\n\nTITLE: Conditional RNG Driver Source Addition in CMake\nDESCRIPTION: Checks if the Nordic RNG entropy driver is needed (PSA_NEED_NRF_RNG_ENTROPY_DRIVER flag) and adds the nrf_rng_entropy.c source file to the oberon_psa_core target if required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/zephyr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (PSA_NEED_NRF_RNG_ENTROPY_DRIVER)\n  target_sources(oberon_psa_core\n    PRIVATE\n      nrf_rng_entropy.c\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Capturing Baseband Samples with Fixed RX Gain\nDESCRIPTION: This snippet demonstrates how to capture baseband samples with a fixed RX gain using the `wifi_radio_test` command. It initializes the radio on channel 144, sets the LNA gain to 2, the BB gain to 10, the capture length to 64, and then captures the baseband samples using `rx_cap 1`. A cabled setup with a VSG transmitting a tone or packets between -35 dBm and -45 dBm is required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test init 144\nwifi_radio_test rx_lna_gain 2\nwifi_radio_test rx_bb_gain 10\nwifi_radio_test rx_capture_length 64\nwifi_radio_test rx_cap 1\n```\n\n----------------------------------------\n\nTITLE: Disabling LED Indication in Kconfig\nDESCRIPTION: Completely disable LED indication. Defaults to enabled if both CONFIG_LED_INDICATION_PWM and CONFIG_LED_INDICATION_GPIO are disabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_24\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LED_INDICATION_DISABLED\n```\n\n----------------------------------------\n\nTITLE: Subscribing to MQTT Topic\nDESCRIPTION: Command to subscribe to an MQTT topic with specified Quality of Service (QoS) level\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/MQTT_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT\nCODE:\n```\nAT#XMQTTSUB=\"nrf91/slm/mqtt/topic0\",0\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Helper Unit Test Build in CMake\nDESCRIPTION: CMake configuration that sets up the build environment for MQTT Helper unit tests. It includes test runner generation, mock creation for MQTT and socket interfaces, source file inclusion, and compilation options for MQTT configuration parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/mqtt_helper/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(mqtt_helper_test)\n\n# Generate runner for the test\ntest_runner_generate(src/mqtt_helper_test.c)\n\n# Create mock\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/net/mqtt.h)\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/net/socket.h zephyr/net)\n\n# Add Unit Under Test source files\ntarget_sources(app PRIVATE\n        ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/mqtt_helper/mqtt_helper.c\n)\n\n# Add test source file\ntarget_sources(app PRIVATE src/mqtt_helper_test.c)\n\n# Include paths\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/include/zephyr/net/)\n\n# Options that cannot be passed through Kconfig fragments.\ntarget_compile_options(app PRIVATE\n        -DCONFIG_MQTT_LIB_TLS=1\n        -DCONFIG_POSIX_API=1\n        -DCONFIG_MQTT_HELPER_HOSTNAME=\"test-some-hostname.com\"\n        -DCONFIG_MQTT_HELPER_STATIC_IP_ADDRESS=\"\"\n        -DCONFIG_MQTT_HELPER_PORT=8883\n        -DCONFIG_MQTT_HELPER_TIMEOUT_SEC=60\n        -DCONFIG_MQTT_HELPER_RX_TX_BUFFER_SIZE=256\n        -DCONFIG_MQTT_HELPER_PAYLOAD_BUFFER_LEN=2304\n        -DCONFIG_MQTT_HELPER_STACK_SIZE=2560\n        -DCONFIG_MQTT_HELPER_SEC_TAG=1\n        -DCONFIG_MQTT_HELPER_SECONDARY_SEC_TAG=-1\n        -DCONFIG_MQTT_HELPER_SEND_TIMEOUT_SEC=60\n        -DCONFIG_MQTT_HELPER_LAST_WILL=y\n        -DCONFIG_MQTT_HELPER_LAST_WILL_MESSAGE=\"lastwillmessage\"\n        -DCONFIG_MQTT_HELPER_LAST_WILL_TOPIC=\"lastwilltopic\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SSF Client Tests\nDESCRIPTION: Complete CMake configuration that sets up the test environment for SSF client. It includes test runner generation, mock creation, source file inclusion, and compilation options setting. The configuration requires Zephyr SDK and sets various SSF client parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/sdfw_services/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(ssf_client_test)\n\nset(SSF_DIR ${ZEPHYR_NRF_MODULE_DIR}/subsys/sdfw_services)\n\n# generate runner for the test\ntest_runner_generate(src/ssf_client_test.c)\n\n# create mocks\ncmock_handle(${SSF_DIR}/transport/include/ssf_client_transport.h)\n\n# add test file\ntarget_sources(app PRIVATE src/ssf_client_test.c)\n\n# add file under test\ntarget_sources(app\n  PRIVATE\n  ${SSF_DIR}/ssf_client.c\n  ${SSF_DIR}/ssf_client_notif.c\n  ${SSF_DIR}/os/ssf_client_zephyr.c\n)\n\ntarget_include_directories(app\n  PRIVATE\n  ${SSF_DIR}/os\n  ${NRFXLIB_DIR}/nrf_rpc/include\n)\n\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_SSF_CLIENT_DOMAIN_ID=2\n  -DCONFIG_SSF_CLIENT_LOG_LEVEL=2\n  -DCONFIG_SSF_CLIENT_REGISTERED_LISTENERS_MAX=2\n  -DCONFIG_SSF_CLIENT_ZCBOR_MAX_BACKUPS=1\n)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from nRF Cloud in C\nDESCRIPTION: Disconnects the device from nRF Cloud. This is typically used after receiving a user association request to update permissions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nnrf_cloud_disconnect();\n```\n\n----------------------------------------\n\nTITLE: Adding FOTA Download Source Files in nRF Connect SDK\nDESCRIPTION: Specifies additional source files for the FOTA download functionality from the nRF Connect SDK module directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/fota_download/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/fota_download/src/fota_download.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/fota_download/src/util/fota_download_util.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Audio System Source Files to CMake Build\nDESCRIPTION: Adds core audio system source files to the application build target using CMake's target_sources command. Includes audio system core, audio datapath, software codec selection, and LE audio reception implementation files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/audio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/audio_system.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/audio_datapath.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/sw_codec_select.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/le_audio_rx.c\n)\n```\n\n----------------------------------------\n\nTITLE: Build Command with CMake for nRF5340 DK\nDESCRIPTION: Command to build WiFi shell sample with external flash patch support using CMake build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/fw_patches_ext_flash.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncmake -GNinja -Bbuild -DBOARD=nrf5340dk/nrf5340/cpuapp -Dnrf_wifi_shell_SHIELD=nrf7002ek -Dnrf_wifi_shell_SNIPPET=\"nrf70-fw-patch-ext-flash\"\nninja -C build\n```\n\n----------------------------------------\n\nTITLE: Enabling LED PWM Driver in Project Configuration\nDESCRIPTION: This configuration snippet enables the LED PWM driver by adding the necessary Kconfig option to the project configuration file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/add_new_led_example.rst#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nCONFIG_LED_PWM=y\n```\n\n----------------------------------------\n\nTITLE: Adding SPI Bus Device Node in Device Tree\nDESCRIPTION: This code snippet adds an SPI bus device node for the nRF21540 in the device tree configuration, including different pin control configurations for normal and low-power modes. It sets up GPIOs for the SPI communication and configures the maximum SPI frequency for the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf21540_gpio_spi.rst#2025-04-21_snippet_1\n\nLANGUAGE: device tree\nCODE:\n```\n&pinctrl {\n   spi3_default_alt: spi3_default_alt {\n      group1 {\n         psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,\n                 <NRF_PSEL(SPIM_MISO, 1, 14)>,\n                 <NRF_PSEL(SPIM_MOSI, 1, 13)>;\n      };\n   };\n\n   spi3_sleep_alt: spi3_sleep_alt {\n      group1 {\n         psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,\n                 <NRF_PSEL(SPIM_MISO, 1, 14)>,\n                 <NRF_PSEL(SPIM_MOSI, 1, 13)>;\n         low-power-enable;\n      };\n   };\n};\n\nfem_spi: &spi3 {\n   status = \"okay\";\n   pinctrl-0 = <&spi3_default_alt>;\n   pinctrl-1 = <&spi3_sleep_alt>;\n   pinctrl-names = \"default\", \"sleep\";\n   cs-gpios = <&gpio0 21 GPIO_ACTIVE_LOW>;\n\n   nrf_radio_fem_spi: nrf21540_fem_spi@0 {\n      compatible = \"nordic,nrf21540-fem-spi\";\n      status = \"okay\";\n      reg = <0>;\n      spi-max-frequency = <8000000>;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Table Generation Directive\nDESCRIPTION: reStructuredText directive that generates a table from sample YAML configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/smoke_co_alarm/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. table-from-sample-yaml::\n```\n\n----------------------------------------\n\nTITLE: Adding Test Events Source to CMake Build\nDESCRIPTION: Adds the test_events.c source file from the current directory to the application build target. Uses CMake's target_sources command to include the file in compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/caf/sensor_data_aggregator/src/events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_events.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring SLM FTP/TFTP Build Sources in CMake\nDESCRIPTION: Sets up build configuration for Serial LTE Modem (SLM) FTP and TFTP clients. Includes the current directory in the include path and conditionally adds source files based on CONFIG_SLM_FTPC and CONFIG_SLM_TFTPC configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/src/ftp_c/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(.)\ntarget_sources_ifdef(CONFIG_SLM_FTPC app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_at_ftp.c)\ntarget_sources_ifdef(CONFIG_SLM_TFTPC app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_at_tftp.c)\n```\n\n----------------------------------------\n\nTITLE: Updating pigweed submodule URL for Matter samples\nDESCRIPTION: Commands to update the pigweed submodule URL to resolve access issues from certain regions when building Matter samples.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit -C modules/lib/matter submodule set-url third_party/pigweed/repo https://github.com/google/pigweed.git\ngit -C modules/lib/matter submodule sync third_party/pigweed/repo\nwest update\n```\n\n----------------------------------------\n\nTITLE: Configuring LwM2M Power Optimizations\nDESCRIPTION: New Kconfig options for optimizing LwM2M Client power consumption. Enables DTLS Connection Identifier and tickless operation mode for improved power efficiency.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.5.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_LWM2M_CLIENT_UTILS_DTLS_CID=y\nCONFIG_LWM2M_TICKLESS=y\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Inclusion in CMake for Nordic SDK\nDESCRIPTION: This CMake snippet conditionally includes source files based on configuration options. It uses target_sources_ifdef to add source files to the 'app' target only when specific configuration flags are enabled, allowing for modular component selection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/connectivity_bridge/src/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_POWEROFF\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/power_handler.c)\n\ntarget_sources_ifdef(CONFIG_SERIAL\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/uart_handler.c)\n\ntarget_sources_ifdef(CONFIG_BRIDGE_CDC_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/usb_cdc_handler.c)\n\ntarget_sources_ifdef(CONFIG_BRIDGE_BLE_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ble_handler.c)\n\ntarget_sources_ifdef(CONFIG_BRIDGE_MSC_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/fs_handler.c)\n\ntarget_sources_ifdef(CONFIG_BRIDGE_CMSIS_DAP_BULK_ENABLE\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/usb_bulk_interface.c)\n\ntarget_sources_ifdef(CONFIG_BRIDGE_CMSIS_DAP_NORDIC_COMMANDS\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/usb_bulk_commands.c)\n```\n\n----------------------------------------\n\nTITLE: Azure SDK Configuration Check\nDESCRIPTION: This CMake code block checks if the `CONFIG_AZURE_SDK` is enabled. If not, it immediately returns, skipping the Azure SDK configuration. This ensures that the Azure SDK is only included when explicitly enabled in the Zephyr project configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/azure-sdk-for-c/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CONFIG_AZURE_SDK)\n\treturn()\nendif()\n```\n\n----------------------------------------\n\nTITLE: FTP Client Basic Command Syntax\nDESCRIPTION: The basic syntax for the #XFTP AT command that allows sending FTP commands. Shows the general command structure with optional parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/FTP_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT\nCODE:\n```\n#AT#XFTP=<cmd>[,<param1>[<param2]..]]\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr build system. It specifies that Zephyr is a required dependency and provides a hint for locating Zephyr based on the ZEPHYR_BASE environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_mds/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Compilation for Fast Pair Components\nDESCRIPTION: Conditionally includes various source files based on configuration options, allowing modular compilation of Fast Pair library components like advertising, authentication, GATT service, and storage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_FAST_PAIR_ADVERTISING\t\tfp_advertising.c)\nzephyr_library_sources_ifdef(CONFIG_BT_FAST_PAIR_AUTH\t\t\tfp_auth.c)\nzephyr_library_sources_ifdef(CONFIG_BT_FAST_PAIR_GATT_SERVICE\t\tfp_gatt_service.c)\nzephyr_library_sources_ifdef(CONFIG_BT_FAST_PAIR_KEYS\t\t\tfp_keys.c)\nzephyr_library_sources_ifdef(CONFIG_BT_FAST_PAIR_REGISTRATION_DATA\tfp_registration_data.c)\nzephyr_library_sources_ifdef(CONFIG_BT_FAST_PAIR_BATTERY\t\tfp_battery.c)\nzephyr_library_sources_ifdef(CONFIG_BT_FAST_PAIR_STORAGE_INTEGRATION\tfp_storage_integration.c)\nzephyr_library_sources_ifdef(CONFIG_BT_FAST_PAIR_BOND_MANAGER\t\tfp_bond_manager.c)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion\nDESCRIPTION: Adds subdirectories for CURL library and tool based on configuration settings\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/curl/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NRF_CURL_LIB lib)\nadd_subdirectory_ifdef(CONFIG_NRF_CURL_TOOL tool)\n```\n\n----------------------------------------\n\nTITLE: Defining the project\nDESCRIPTION: This snippet defines the project name as `entropy_nrf53_cpuapp`. This name is used to identify the project within the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/entropy_nrf53/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(entropy_nrf53_cpuapp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Workspace to Enable Sysbuild in West\nDESCRIPTION: This command configures west to use sysbuild by default for building all projects in the current workspace, setting the build.sysbuild configuration to True locally.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/sysbuild_configuring_west.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwest config --local build.sysbuild True\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Mesh Restrictions Configuration\nDESCRIPTION: Configuration snippets showing Kconfig options that need to be set to avoid potential deadlocks and system issues in Bluetooth Mesh implementations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\nCONFIG_BT_BUF_ACL_RX_COUNT > CONFIG_BT_MAX_CONN\nCONFIG_BT_HCI_ACL_FLOW_CONTROL=y\nCONFIG_BT_CONN_TX_NOTIFY_WQ=y\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (Coremark)\nDESCRIPTION: Sets the include directories for the 'coremark' library. This allows the compiler to find the necessary header files during compilation.  `${ZEPHYR_COREMARK_MODULE_DIR}` represents the path to the CoreMark module directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/coremark/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_include_directories(${ZEPHYR_COREMARK_MODULE_DIR} .)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.20.0. This ensures that the build process uses a compatible CMake version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/uarte_suspend/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: This snippet specifies the minimum version of CMake required for building the project. It ensures that the build system is compatible with newer features of CMake introduced in version 3.20.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_fuel_gauge/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Ethernet RTT Source File in Zephyr\nDESCRIPTION: Includes eth_rtt.c source file only when CONFIG_ETH_RTT configuration option is enabled during build process\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/net/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_ETH_RTT eth_rtt.c)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding CoreMark Subdirectory\nDESCRIPTION: Adds the CoreMark subdirectory when CONFIG_COREMARK is enabled in the configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_COREMARK coremark)\n```\n\n----------------------------------------\n\nTITLE: Zephyr Linker Sources Configuration (KMU)\nDESCRIPTION: This conditional snippet configures linker sources specifically for the KMU (Key Management Unit) peripheral when building without TFM (Trusted Firmware-M) and when the KMU driver is required. It adds `kmu_push_area_section.ld` to the `RAM_SECTIONS SORT_KEY !` category to reserve a static memory location for the KMU to use, ensuring the file is included first.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/nrf71/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CONFIG_BUILD_WITH_TFM AND CONFIG_PSA_NEED_CRACEN_KMU_DRIVER)\n  # Exclamation mark is printable character with the lowest number in ASCII table.\n  # We are sure that this file will be included first.\n  zephyr_linker_sources(RAM_SECTIONS SORT_KEY ! kmu_push_area_section.ld)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including libcurl Header\nDESCRIPTION: This snippet demonstrates the syntax to include the main libcurl header file in C projects, ensuring compatibility with the curl subdirectory structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/curl/include/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include \"curl.h\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library in CMake\nDESCRIPTION: This CMake snippet configures a Zephyr library by specifying its source files and include directories. It is part of a Nordic Semiconductor project and requires a Zephyr environment. The snippet sets up a library and includes a source file named 'multithreading_lock.c'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/multithreading_lock/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tmultithreading_lock.c\n)\n\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Specifying source files\nDESCRIPTION: This snippet specifies the source files to be compiled into the application. The `target_sources` command adds the `src/main.c` file to the `app` target as a private source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hr_coded/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_sources(app PRIVATE\n  src/main.c\n)\"\n```\n\n----------------------------------------\n\nTITLE: Continuous OFDM TX Traffic Sequence in 11g Mode\nDESCRIPTION: Complete command sequence for running a continuous OFDM TX traffic test in 802.11g mode. The configuration uses channel 11, 4000 byte payload, 200 μs gap, and 6 Mbps data rate for a 96.4% duty cycle.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 11\nuart:~$ wifi_radio_test tx_pkt_tput_mode 0\nuart:~$ wifi_radio_test tx_pkt_rate 6\nuart:~$ wifi_radio_test tx_pkt_len 4000\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num -1\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Displaying LwM2M Carrier Library Size Table for Version 0.8.1+build1\nDESCRIPTION: Shows a table with flash and RAM sizes for the LwM2M Carrier library version 0.8.1+build1 in binary and reference application formats.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/CHANGELOG.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n+-------------------------+---------------+------------+\n|                         | Flash (Bytes) | RAM (Bytes)|\n+-------------------------+---------------+------------+\n| Library size            | 44856         | 7546       |\n| (binary)                |               |            |\n+-------------------------+---------------+------------+\n| Library size            | 64680         | 28128      |\n| (reference application) |               |            |\n+-------------------------+---------------+------------+\n```\n\n----------------------------------------\n\nTITLE: Checking installed dependency versions on macOS\nDESCRIPTION: Command to list the versions of installed Homebrew packages to ensure they match the requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew list --versions\n```\n\n----------------------------------------\n\nTITLE: Configure Zephyr Sources\nDESCRIPTION: This directive includes 'device_info_service.c' as a source file in the Zephyr build system. The file is added to the build process to compile and link for the target firmware or application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/device_info/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: other\nCODE:\n```\nzephyr_sources(device_info_service.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring RX Test Mode on Channel 11\nDESCRIPTION: Commands to configure the Wi-Fi radio in receive mode on channel 11, allowing the device to receive packets from a signal generator for testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test init 11\nwifi_radio_test rx 1\n```\n\n----------------------------------------\n\nTITLE: Running Memfault BLE Gateway Script\nDESCRIPTION: This snippet demonstrates how to start the Memfault BLE gateway script with specific parameters such as the serial number and communication port. This action initiates the connection with the development kit, allowing for diagnostic data to be sent to the cloud.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_mds/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npython3 mds_ble_gateway.py --snr 682900407 --com COM0\n```\n\n----------------------------------------\n\nTITLE: Checking for NVS Settings Backend with nRF54L/H SoCs in CMake\nDESCRIPTION: A conditional check that displays a warning message when NVS backend is used with nRF54L or nRF54H SoCs. The warning explains that NVS is not optimal for these SoCs and may negatively impact the non-volatile RRAM or MRAM lifetime, recommending ZMS as the preferred backend.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/settings_check/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif((CONFIG_SOC_SERIES_NRF54LX OR CONFIG_SOC_SERIES_NRF54HX) AND CONFIG_SETTINGS_NVS)\n    message(WARNING \" ###################################################################################\\n\"\n                    \" #                                                                                 #\\n\"\n                    \" # Your application uses NVS backend for the settings storage that is not          #\\n\"\n                    \" # optimal solution for the nRF54L or the nRF54H SoC family and it may negatively  #\\n\"\n                    \" # impact the non-volatile RRAM or MRAM life-time.                                 #\\n\"\n                    \" #                                                                                 #\\n\"\n                    \" # The recommended settings backend for nRF54L or nRF54H SoC family is ZMS.        #\\n\"\n                    \" # You can enable it by selecting CONFIG_SETTINGS_ZMS=y and CONFIG_ZMS=y.          #\\n\"\n                    \" # Please note that the other Kconfig options related to NVS like cache            #\\n\"\n                    \" # or block size will require alignment on the ZMS side as well.                   #\\n\"\n                    \" #                                                                                 #\\n\"\n                    \" ###################################################################################\\n\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for TF-M PSA Architecture Tests\nDESCRIPTION: This CMake configuration sets up the TF-M PSA Architecture tests. It defines the necessary build parameters, paths to TF-M modules and PSA test repositories, and configures the test suite based on the selected test configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_psa_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nif(${CMAKE_MAJOR_VERSION} EQUAL \"3\" AND ${CMAKE_MINOR_VERSION} EQUAL \"25\")\nmessage(FATAL_ERROR \"CMake versions 3.25.x are not compatible wth the PSA architecture tests.\\n\"\n                    \"Use an earlier (<= 3.24.x) or later (>= 3.26.x) version of CMake.\")\nendif()\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(tfm_psa_test)\n\ntarget_sources(app PRIVATE src/main.c)\n\nget_target_property(TFM_BINARY_DIR           tfm TFM_BINARY_DIR)\nget_target_property(TFM_NS_BIN_FILE          tfm TFM_NS_BIN_FILE)\nget_target_property(TFM_NS_HEX_FILE          tfm TFM_NS_HEX_FILE)\nget_target_property(TFM_NS_SIGNED_BIN_FILE   tfm TFM_NS_SIGNED_BIN_FILE)\n\nget_target_property(TFM_TOOLCHAIN_PATH       tfm TFM_TOOLCHAIN_PATH)\nget_target_property(TFM_TOOLCHAIN_PREFIX     tfm TFM_TOOLCHAIN_PREFIX)\nget_target_property(TFM_TOOLCHAIN_NS_FILE    tfm TFM_TOOLCHAIN_NS_FILE)\n\nset(TFM_TEST_REPO_PATH ${ZEPHYR_TRUSTED_FIRMWARE_M_MODULE_DIR}/../tf-m-tests)\nset(TFM_PSA_ARCHTEST_REPO_PATH ${ZEPHYR_TRUSTED_FIRMWARE_M_MODULE_DIR}/../psa-arch-tests)\n\nset(TFM_TEST_DIR         \"${TFM_TEST_REPO_PATH}/tests_psa_arch/spe/partitions\")\nset(PSA_ARCH_TESTS_CONFIG_FILE \"${TFM_TEST_REPO_PATH}/tests_psa_arch/spe/config/config_test_psa_api.cmake\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Documentation Targets in CMake\nDESCRIPTION: Helper function to create custom documentation targets with support for both individual and complete builds. Creates two targets for each documentation component.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_doc_target name)\n  add_custom_target(${name} ${ARGN})\n  add_custom_target(${name}-all ${ARGN})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: RST Module Reference Label\nDESCRIPTION: RST label definition for the constant latency module documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/constlat.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _nrf_desktop_constlat:\n```\n\n----------------------------------------\n\nTITLE: Setting Shield Variable\nDESCRIPTION: This snippet defines a variable called SHIELD, which is set to the value 'npm1300_ek'. This variable can be used to identify the specific hardware shield being used in the project, facilitating conditional configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_fuel_gauge/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SHIELD npm1300_ek)\n```\n\n----------------------------------------\n\nTITLE: HTTPS GET request (TLS with server and client auth, Wi-Fi)\nDESCRIPTION: Sends an HTTPS GET request to retrieve the state of LED 1 using TLS with both server and client authentication. It includes `--verify`, `--cert`, and `--cert-key` flags to specify the server certificate, client certificate, and client key respectively.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n\"https GET https://httpserver.local:443/led/1 --verify server_certificate.pem --cert client.crt --cert-key client.key\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Partition Manager and QSPI XIP in CMake\nDESCRIPTION: Sets up partition manager, QSPI XIP split image support, and related configurations for MCUboot and the default image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(SB_CONFIG_PARTITION_MANAGER)\n  if(SB_CONFIG_QSPI_XIP_SPLIT_IMAGE)\n    set(${DEFAULT_IMAGE}_SIGNING_SCRIPT \"${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/image_signing_split.cmake\" CACHE INTERNAL \"MCUboot signing script\" FORCE)\n\n    if(SB_CONFIG_MCUBOOT_BUILD_DIRECT_XIP_VARIANT)\n      set(mcuboot_secondary_app_SIGNING_SCRIPT \"${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/image_signing_split.cmake\" CACHE INTERNAL \"MCUboot signing script\" FORCE)\n    endif()\n\n    set(${DEFAULT_IMAGE}_QSPI_XIP_IMAGE_NUMBER ${SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER} CACHE INTERNAL \"QSPI XIP image number\" FORCE)\n\n    if(SB_CONFIG_MCUBOOT_BUILD_DIRECT_XIP_VARIANT)\n      set(mcuboot_secondary_app_QSPI_XIP_IMAGE_NUMBER ${SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER} CACHE INTERNAL \"QSPI XIP image number\" FORCE)\n    endif()\n\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_FLASH y)\n    set_config_bool(mcuboot CONFIG_FLASH y)\n    set_config_bool(mcuboot CONFIG_MULTITHREADING y)\n    set_config_bool(mcuboot CONFIG_MCUBOOT_VERIFY_IMG_ADDRESS n)\n\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_XIP y)\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_CODE_DATA_RELOCATION y)\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_HAVE_CUSTOM_LINKER_SCRIPT y)\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_BUILD_NO_GAP_FILL y)\n\n    if(SB_CONFIG_MCUBOOT_MODE_DIRECT_XIP)\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUMGR_GRP_IMG_QSPI_XIP_SPLIT_IMAGE y)\n    else()\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUMGR_GRP_IMG_QSPI_XIP_SPLIT_IMAGE n)\n    endif()\n\n    if(NOT DEFINED SB_CONFIG_PM_OVERRIDE_EXTERNAL_DRIVER_CHECK)\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_NORDIC_QSPI_NOR y)\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_NORDIC_QSPI_NOR_XIP y)\n      set_config_bool(mcuboot CONFIG_NORDIC_QSPI_NOR y)\n      set_config_bool(mcuboot CONFIG_NORDIC_QSPI_NOR_XIP y)\n    endif()\n  else()\n    set(${DEFAULT_IMAGE}_SIGNING_SCRIPT \"${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/image_signing.cmake\" CACHE INTERNAL \"MCUboot signing script\" FORCE)\n\n    if(SB_CONFIG_MCUBOOT_BUILD_DIRECT_XIP_VARIANT)\n      set(mcuboot_secondary_app_SIGNING_SCRIPT \"${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/image_signing.cmake\" CACHE INTERNAL \"MCUboot signing script\" FORCE)\n    elseif(SB_CONFIG_MCUBOOT_MODE_FIRMWARE_UPDATER)\n      set(firmware_loader_SIGNING_SCRIPT \"${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/image_signing_firmware_loader.cmake\" CACHE INTERNAL \"MCUboot signing script\" FORCE)\n\n      set_target_properties(firmware_loader PROPERTIES\n        IMAGE_CONF_SCRIPT ${ZEPHYR_NRF_MODULE_DIR}/sysbuild/image_configurations/firmware_loader_image_default.cmake\n      )\n    endif()\n\n    set_config_bool(${DEFAULT_IMAGE} CONFIG_MCUMGR_GRP_IMG_QSPI_XIP_SPLIT_IMAGE n)\n  endif()\n\n  if(SB_CONFIG_PM_OVERRIDE_EXTERNAL_DRIVER_CHECK)\n    add_overlay_config(mcuboot ${ZEPHYR_NRF_MODULE_DIR}/subsys/bootloader/bl_override/override_external_mcuboot.conf)\n\n    if(NOT SB_CONFIG_MCUBOOT_MODE_SINGLE_APP)\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_PM_OVERRIDE_EXTERNAL_DRIVER_CHECK y)\n    endif()\n  endif()\n\n  if(SB_CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY)\n    add_overlay_config(mcuboot ${ZEPHYR_NRF_MODULE_DIR}/subsys/partition_manager/ext_flash_mcuboot_secondary.conf)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing nrf-regtool version 8.0.0\nDESCRIPTION: Command to install the required nrf-regtool version 8.0.0 using pip.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install nrf-regtool==8.0.0\n```\n\n----------------------------------------\n\nTITLE: Reading Humidity Measurement Value\nDESCRIPTION: Command to read humidity sensor value from the Matter weather station device using CHIP Tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_weather_station/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nchip-tool relativehumiditymeasurement read measured-value <Device ID> 2\n```\n\n----------------------------------------\n\nTITLE: Handling Interrupt Signals in C\nDESCRIPTION: C code demonstrating how to handle different types of interrupt signals\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nif (signals & TFM_TIMER1_IRQ_SIGNAL) {\n        /* Application specific handling */\n\n        /* FLIH: Reset signal */\n        psa_reset_signal(TFM_TIMER1_IRQ_SIGNAL);\n}\n\nif (signals & TFM_SPIM3_IRQ_SIGNAL) {\n        /* Application specific handling */\n\n        /* SLIH: End of Interrupt signal */\n        psa_eoi(TFM_SPIM3_IRQ_SIGNAL);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Network Interface Source Configuration\nDESCRIPTION: Adds network interface source file when OPENTHREAD_RPC_NET_IF is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_OPENTHREAD_RPC_NET_IF ot_rpc_if.c)\n```\n\n----------------------------------------\n\nTITLE: Displaying Hardware ID in Console\nDESCRIPTION: This snippet shows the console output of the Hardware ID sample when it successfully retrieves a hardware ID. It indicates that the hardware ID is correctly fetched and printed to the console. In case of an error, a specific error message with a code is displayed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/hw_id/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhw_id: DEADBEEF00112233\n```\n\nLANGUAGE: console\nCODE:\n```\nhw_id_get failed (err -5)\nhw_id: unsupported\n```\n\n----------------------------------------\n\nTITLE: Building for TX prioritized profile\nDESCRIPTION: This command builds the throughput sample for the nRF7002 DK with the TX prioritized profile for Station mode. The configuration is set via the `overlay-tx-prio.conf` overlay file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DEXTRA_CONF_FILE=overlay-tx-prio.conf\n```\n\n----------------------------------------\n\nTITLE: Building Thread CLI Sample with TF-M Support for nRF54L15\nDESCRIPTION: Command to build the Thread CLI sample for nRF54L15 DK with Trusted Firmware-M support. Uses west build system with specific board target variant for secure processing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/security.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54l15dk/nrf54l15/cpuapp/ns samples/openthread/cli\n```\n\n----------------------------------------\n\nTITLE: Python Command for nRF9160 DK Firmware Update\nDESCRIPTION: Command line examples for updating modem firmware on nRF9160 DK using different baud rates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/fmfu_smp_svr/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython update_modem.py mfw_nrf9160_1.3.5.zip /dev/ttyACM0 115200\npython update_modem.py mfw_nrf9160_1.3.5.zip /dev/ttyACM0 1000000\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Sample Subpages in reStructuredText\nDESCRIPTION: This snippet creates a table of contents for DECT NR+ sample subpages, using a glob pattern to include all README files in the samples/dect directory structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/dect.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/dect/*/*/README\n```\n\n----------------------------------------\n\nTITLE: Navigating to net-tools directory\nDESCRIPTION: Command to change directory to the net-tools folder after cloning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncd net-tools/\n```\n\n----------------------------------------\n\nTITLE: Launching toolchain environment for macOS\nDESCRIPTION: Command to open a new shell window with the NCS toolchain environment on macOS systems.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n/Users/*yourusername*/ncs-lcs/nrfutil toolchain-manager launch --shell --chdir \"/Users/*yourusername*/ncs-lcs/work-dir\" --ncs-version v2.6.99-cs2\n```\n\n----------------------------------------\n\nTITLE: Building Location Sample with P-GPS Support in C\nDESCRIPTION: This snippet shows the command used to build the Location sample with P-GPS support, ensuring that the necessary configuration overlay is applied.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/location/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=overlay-pgps.conf\n```\n\n----------------------------------------\n\nTITLE: Capturing ADC Samples with Fixed RX Gain\nDESCRIPTION: This snippet demonstrates how to capture ADC samples with a fixed RX gain using the `wifi_radio_test` command. It initializes the radio on channel 144, sets the LNA gain to 2, the BB gain to 10, the capture length to 64, and then captures the ADC samples using `rx_cap 0`.  A cabled setup with a VSG transmitting a tone or packets between -35 dBm and -45 dBm is required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test init 144\nwifi_radio_test rx_lna_gain 2\nwifi_radio_test rx_bb_gain 10\nwifi_radio_test rx_capture_length 64\nwifi_radio_test rx_cap 0\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories for Azure IoT Hub in CMake\nDESCRIPTION: Specifies the include directories for the Azure IoT Hub Zephyr library, making header files available to other components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/azure_iot_hub/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(\n\tinclude\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Console Output from Boot Chain Hello World\nDESCRIPTION: Basic console output showing successful execution of the Hello World application after boot chain completion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bootloader/boot_chains/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nHello World! ARM\n```\n\n----------------------------------------\n\nTITLE: ESB TX Failed Event Macro\nDESCRIPTION: This snippet references the `ESB_EVENT_TX_FAILED` macro, which indicates one or more failed transmission operations. This macro is used for event handling in the Enhanced ShockBurst protocol.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/esb/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n\":c:macro:`ESB_EVENT_TX_FAILED`\"\n```\n\n----------------------------------------\n\nTITLE: Zephyr OS Boot Log\nDESCRIPTION: This is a sample log output from the Zephyr OS, indicating that the system has booted successfully. This is a typical indicator that the application is starting up correctly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lte_ble_gateway/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"***** Booting Zephyr OS build v3.0.99-ncs1-9-g8ffc2ab25eaa *****\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TF-M Partition Dependencies in YAML\nDESCRIPTION: YAML configuration to specify dependencies on other TF-M partitions\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  - name: \"TFM_SP_PS\"\n```\n\n----------------------------------------\n\nTITLE: MCUboot minimal configuration - Kconfig.sysbuild\nDESCRIPTION: The Kconfig.sysbuild file located in each sample's directory provides Kconfig options to configure the MCUboot bootloader during the sysbuild process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":file:`Kconfig.sysbuild` file located in each sample's directory.\"\n```\n\n----------------------------------------\n\nTITLE: Project Initialization in CMake\nDESCRIPTION: This snippet initializes a CMake project without a specified name indicating a Zephyr application. It is essential for setting up the project environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/system_off/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr Project\nDESCRIPTION: Defines the project name for the Zephyr application, which is used for build configuration and project identification\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/udp/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(udp)\n```\n\n----------------------------------------\n\nTITLE: Manifest Information Output\nDESCRIPTION: Expected output showing detailed information about the installed manifests, including class IDs, vendor IDs, signature verification status, and sequence numbers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nrole(10) (Nordic Top)\n   classId: f03d385e-a731-5605-b15d-037f6da6097f (nRF54H20_nordic_top)\n   vendorId: 7617daa5-71fd-5a85-8f94-e28d735ce9f4 (nordicsemi.com)\n   downgradePreventionPolicy: downgrade forbidden\n   independentUpdateabilityPolicy: independent update allowed\n   signatureVerificationPolicy: signature verification on update and boot\n   digest: ab6e57a7a88bbee073b101480c566fb444d101852dc31e09112acf8a5d179c03\n   digestAlgorithm: sha256\n   signatureCheck: signature check passed\n   sequenceNumber: 590592\n   semantic version: 0.9.3\n\n...\n\nrole(20) (Root Manifest)\n   classId: 3f6a3a4d-cdfa-58c5-acce-f9f584c41124 (nRF54H20_sample_root)\n   vendorId: 7617daa5-71fd-5a85-8f94-e28d735ce9f4 (nordicsemi.com)\n   downgradePreventionPolicy: downgrade forbidden\n   independentUpdateabilityPolicy: independent update allowed\n   signatureVerificationPolicy: signature verification on update and boot\n   digest: e9315a664071b851097f438052fec60ab68627f17447b231d873e5e0dc416ac0\n   digestAlgorithm: sha256\n   signatureCheck: signature check not performed\n   sequenceNumber: 2\n   semantic version: 0.1.0\n\n...\n\nrole(22) (Application Local Manifest)\n   classId: 08c1b599-55e8-5fbc-9e76-7bc29ce1b04d (nRF54H20_sample_app)\n   vendorId: 7617daa5-71fd-5a85-8f94-e28d735ce9f4 (nordicsemi.com)\n   downgradePreventionPolicy: downgrade allowed\n   independentUpdateabilityPolicy: independent update forbidden\n   signatureVerificationPolicy: signature verification on update and boot\n   digest: 8a84780635900fe566f045e072c6ed16441bc4cf351a9dfef59b2a9e4f7654fe\n   digestAlgorithm: sha256\n   signatureCheck: signature check not performed\n   sequenceNumber: 2\n   semantic version: 0.1.0\nrole(23) (Application Local Manifest)\n   classId: 51de10b8-ee2e-5b4b-80ee-534a4a3c04fc Unknown class id\n   vendorId: 7617daa5-71fd-5a85-8f94-e28d735ce9f4 (nordicsemi.com)\n   downgradePreventionPolicy: downgrade allowed\n   independentUpdateabilityPolicy: independent update forbidden\n   signatureVerificationPolicy: signature verification on update and boot\n   digest: e5e145ceed48ca59a085e234c558f95ee098c2a9ce1d0d4d7c41ddca7a095eb5\n   digestAlgorithm: sha256\n   signatureCheck: signature check not performed\n   sequenceNumber: 1\n   semantic version: 0.1.0\n```\n\n----------------------------------------\n\nTITLE: Building with Disabled Auto-start Wi-Fi Driver\nDESCRIPTION: Command to build the sample with disabled automatic Wi-Fi interface startup, requiring manual activation via Button 1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shutdown/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf7002ek_nrf7000 -DCONFIG_NRF_WIFI_IF_AUTO_START=n\n```\n\n----------------------------------------\n\nTITLE: Including Assembly Management in Application\nDESCRIPTION: Command to include assembly management in an application's CMakeLists.txt file. This command specifies a C file containing Hard Real-Time (HRT) functions to be managed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/assembly_management.rst#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nhpf_assembly_install(app \"${CMAKE_SOURCE_DIR}/file.c\")\n```\n\n----------------------------------------\n\nTITLE: Adding Test Source Files to CMake Build Target\nDESCRIPTION: Configures multiple test source files to be compiled and linked into the application target. Uses target_sources CMake command to add .c files from the current source directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/app_event_manager/src/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_basic.c)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_data.c)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_multicontext.c)\n\ntarget_sources(app PRIVATE\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/test_multicontext_handler.c)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_name_style_sorting.c)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_oom.c)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_subs.c)\n```\n\n----------------------------------------\n\nTITLE: Creating IPv6 Network for OpenThread Border Router Docker Container\nDESCRIPTION: Command to create an IPv6 network for the OpenThread Border Router container in Docker.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker network create --ipv6 --subnet fd11:db8:1::/64 -o com.docker.network.bridge.name=otbr0 otbr\n```\n\n----------------------------------------\n\nTITLE: Generating JWT for nRF Cloud in C\nDESCRIPTION: Example of generating a JSON Web Token (JWT) for nRF Cloud authentication using the new nrf_cloud_jwt_generate function from the nRF Cloud library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.8.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nchar jwt_buffer[256];\nsize_t jwt_len = sizeof(jwt_buffer);\nint err = nrf_cloud_jwt_generate(jwt_buffer, &jwt_len);\n```\n\n----------------------------------------\n\nTITLE: Installing New Firmware with Image Serving\nDESCRIPTION: Command for triggering the installation of new firmware while serving the necessary image files from a local directory for 60 seconds.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit install --serial-port COM7 --serve-images 60 --images-path build/DFU/\n```\n\n----------------------------------------\n\nTITLE: Configuring Data FIFO Project with CMake for nRF Connect SDK\nDESCRIPTION: This CMake script configures the data_fifo project build settings. It requires CMake 3.20.0 or higher, finds the Zephyr package using environment variables, and adds all C source files from the src directory to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/data_fifo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(data_fifo)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IoT Integration Build Settings in CMake\nDESCRIPTION: Sets up build configuration for AWS IoT integration, including include directories and source files. Conditionally includes codec-related files when AWS IoT integration is enabled through CONFIG_AWS_IOT_INTEGRATION.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_bulb/src/aws_iot_integration/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\n\nif (CONFIG_AWS_IOT_INTEGRATION)\n\ttarget_include_directories(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/codec)\n\n\ttarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/aws_iot_integration.c)\n\ttarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/codec/codec.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Build with sfloat Source\nDESCRIPTION: CMake commands to create and configure a Zephyr library that includes sfloat.c as its source file. Used within the Nordic SDK build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/sfloat/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(sfloat.c)\n```\n\n----------------------------------------\n\nTITLE: Kconfig Stack Size Configuration\nDESCRIPTION: Configuration setting to fix SMP Server sample initialization failure by increasing the main stack size.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_68\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_MAIN_STACK_SIZE=2048\n```\n\n----------------------------------------\n\nTITLE: Sample NIDD Console Output\nDESCRIPTION: Example console output showing the NIDD sample execution flow, including configuration, network connection, socket operations, and data transmission. This demonstrates the expected behavior when the sample runs successfully.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nidd/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nNIDD sample started\nConfigured Non-IP for APN \"iot.nidd\"\nLTE cell changed: Cell ID: 21657858, Tracking area: 40401\nRRC mode: Connected\nNetwork registration status: Connected - roaming\nGet PDN ID 0\nCreated socket 0\nSent 13 bytes\nReceived 14 bytes: Hello, Device!\nClosed socket 0\nLTE cell changed: Cell ID: -1, Tracking area: -1\nRRC mode: Idle\nNIDD sample done\n```\n\n----------------------------------------\n\nTITLE: Configuring Gazell Pairing in C\nDESCRIPTION: New Kconfig options added to allow using a user-specific file as the Gazell pairing configuration header to override the default configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.6.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_GAZELL_PAIRING_USER_CONFIG_ENABLE\nCONFIG_GAZELL_PAIRING_USER_CONFIG_FILE\n```\n\n----------------------------------------\n\nTITLE: Importing nPM2100 Configuration Overlay in Devicetree\nDESCRIPTION: Instructions for importing a configuration overlay for the nPM2100 EK exported from the nPM PowerUP app. The overlay should be included as app.overlay in the application folder or appended to an existing overlay file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/pmic/npm2100.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\napp.overlay\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding TrustedFirmware-M Subdirectory\nDESCRIPTION: Adds the trusted-firmware-m subdirectory when CONFIG_BUILD_WITH_TFM is enabled in the configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_BUILD_WITH_TFM trusted-firmware-m)\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Project and Dependencies\nDESCRIPTION: Initializes CMake project with minimum version requirement and finds Zephyr package dependency\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/lte_net_if/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(lte_net_if)\n\n# Turn off warnings of deprecated declarations\nzephyr_compile_options(-Wno-deprecated-declarations)\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw TX Packets in Wi-Fi - Console\nDESCRIPTION: This snippet details commands for configuring the raw transmission (TX) mode for Wi-Fi, including settings for enabling/disabling TX injection, configuring packet headers, and sending raw TX packets. Each command includes necessary parameters for correct implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shell/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n``raw_tx`` is an extension to the Wi-Fi command line.\\\nIt adds the following subcommands to configure and send raw TX packets:\\\n.. list-table:: raw TX shell subcommands\\\n   :header-rows: 1\\\n   * - Subcommands\\\n     - Description\\\n     - Valid values\\\n   * - mode\\\n     - | Enable or Disable TX injection mode\\\n       | [-h, --help]: Print out the help for the mode command\\\n     - | Valid values:\\\n       | 1 - Enable\\\n       | 0 - Disable\\\n   * - configure\\\n     - | Configure the raw TX packet header with the following parameters:\\\n       | [-f, --rate-flags]: Rate flag value\\\n       | [-d, --data-rate]: Data rate value\\\n       | [-q, --queue-number]: Queue number\\\n       | [-h, --help]: Print out the help for the configure command\\\n     - | Valid Rate flag values:\\\n       | 0 - Legacy\\\n       | 1 - HT mode\\\n       | 2 - VHT mode\\\n       | 3 - HE (SU) mode\\\n       | 4 - HE (ERSU) mode\\\n       |\\\n       | Valid Data rate values:\\\n       | Legacy: 1, 2, 55, 11, 6, 9, 12, 18, 24, 36, 48, 54\\\n       | Non-Legacy: MCS index need to be used (0 - 7)\\\n       |\\\n       | Valid Queue numbers:\\\n       | 0 - Background\\\n       | 1 - Best effort\\\n       | 2 - Video\\\n       | 3 - Voice\\\n       | 4 - Beacon\\\n   * - send\\\n     - | Send raw TX packets\\\n       | parameters:\\\n       | [-m, --mode]: Mode of transmission (either continuous or fixed)\\\n       | [-n, --number-of-pkts]: Number of packets to be transmitted\\\n       | [-t, --inter-frame-delay]: Delay between frames or packets in milliseconds\\\n       | [-h, --help]: Print out the help for the send command\\\n     - | N/A\n```\n\n----------------------------------------\n\nTITLE: Specifying Input Files with Globs\nDESCRIPTION: This command-line option is used with 'west ncs-sbom' to specify input files using glob patterns. It allows including multiple files that match a specific pattern. Make sure to have correct quotes around globs, to not have the glob resolved by your shell, and go untouched to the command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"--input-files '**/*.c'\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion with CONFIG_BT_ENOCEAN\nDESCRIPTION: This CMake snippet includes the `enocean.c` source file in the build process only if the `CONFIG_BT_ENOCEAN` configuration option is defined. `zephyr_sources_ifdef` is a Zephyr-specific macro for conditional source inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_sources_ifdef(CONFIG_BT_ENOCEAN enocean.c)\"\n```\n\n----------------------------------------\n\nTITLE: Defining SUIT Source Selector Interface Library (CMake)\nDESCRIPTION: This CMake command defines a Zephyr interface library named 'suit_source_selector_interface'. Interface libraries are used to propagate usage requirements, such as include directories, to dependent targets without creating an actual library file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/stream/address_streamer_selector/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_interface_library_named(suit_source_selector_interface)\ntarget_include_directories(suit_source_selector_interface INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Setting up RST Documentation Structure for MPSL Libraries\nDESCRIPTION: Configures a Sphinx documentation toctree for MPSL libraries, using RST formatting. Sets up maxdepth of 1, includes a caption, and uses glob pattern to include all relevant subpages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/mpsl/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _lib_mpsl_libraries:\n\nMultiprotocol Service Layer libraries\n#####################################\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages:\n   :glob:\n\n   *\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for Bluetooth Mesh Components\nDESCRIPTION: Sets up Zephyr library with conditional inclusion of Bluetooth Mesh source files based on specific configuration options. Includes directories and sources for different Bluetooth Mesh services and components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/mesh/vnd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_include_directories(${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_SILVAIR_ENOCEAN_SRV silvair_enocean_srv.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_DM_SRV dm_srv.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_DM_CLI dm_cli.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_BT_MESH_LE_PAIR_RESP le_pair_resp.c)\n```\n\n----------------------------------------\n\nTITLE: Enabling BSEC Library Download with West Commands\nDESCRIPTION: Commands to accept the BSEC license and enable downloading the Bosch Sensor Environmental Cluster library, which is required for the BME68X IAQ driver but distributed under a proprietary license.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/bme68x_iaq.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwest config manifest.group-filter +bsec\nwest update\n```\n\n----------------------------------------\n\nTITLE: SUIT DFU Cache Upload Sequence Diagram in PlantUML\nDESCRIPTION: Sequence diagram showing the flow of SUIT DFU cache raw upload process, including device info retrieval, flash erase and write operations. The diagram notes that Cache IPUCs are never released.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/images/suit_ipuc/ipuc_push_raw_cache.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant suitfu\nparticipant suit_dfu_cache\nparticipant flash_cache_ipuc_dev\n\n--> suitfu ++ : suitfu_mgmt_suit_cache_raw_upload(id)\nsuitfu -> suit_dfu_cache ++ : suit_dfu_cache_rw_device_info_get(id)\ndeactivate suit_dfu_cache\n\nsuitfu -> flash_cache_ipuc_dev ++ : erase(ipuc_dev, size)\ndeactivate flash_cache_ipuc_dev\nsuitfu -> flash_cache_ipuc_dev ++ : write(ipuc_dev, offset, size)\ndeactivate flash_cache_ipuc_dev\n\ndeactivate suitfu\n\nrnote over flash_cache_ipuc_dev\n  Cache IPUCs are never released.\nend note\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth Latency Source\nDESCRIPTION: This line includes the latency management source file if CONFIG_BT_LATENCY is set. It assists in managing latency in Bluetooth connections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_LATENCY latency.c)\n```\n\n----------------------------------------\n\nTITLE: Enabling USB-next Stack in Kconfig\nDESCRIPTION: The new USB-next stack can be enabled in the nRF Desktop application using the CONFIG_DESKTOP_USB_STACK_NEXT Kconfig option. This option is now enabled by default in the nRF54H20 DK configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.4.99-cs3_to_2.7_application.rst#2025-04-21_snippet_7\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DESKTOP_USB_STACK_NEXT=y\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Locates the Zephyr RTOS package using environment variables, which is essential for building Zephyr-based applications\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/udp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding nrfx Subdirectory\nDESCRIPTION: Adds the nrfx subdirectory only when CONFIG_MOCK_NRFX configuration is enabled. This allows for optional inclusion of the nrfx component based on build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/mocks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_MOCK_NRFX nrfx)\n```\n\n----------------------------------------\n\nTITLE: Configure Zephyr Library for Fatal Error Reset in CMake\nDESCRIPTION: This CMake snippet checks the configuration flag CONFIG_RESET_ON_FATAL_ERROR to conditionally include the fatal_error.c source file in the Zephyr library. This setup is intended for scenarios where the library should reset on encountering fatal errors. No additional dependencies are required for compilation, and the primary file of interest is fatal_error.c.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/fatal_error/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_RESET_ON_FATAL_ERROR)\n  zephyr_library()\n  zephyr_library_sources(fatal_error.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Get SUIT Manifests List Response in SUIT SMP Extension\nDESCRIPTION: Defines the CBOR response format for the 'Get SUIT manifests list' request in the SUIT SMP protocol extension. This structure contains a list of supported manifest roles on the device along with a return code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_3\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str)\"rc\"        : (uint)\n    (str)\"manifests\" : [\n        {\n            (str)\"role\"                     : (uint)\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Boot Selection Logic Flow in PlantUML\nDESCRIPTION: This PlantUML code defines a flow diagram for boot selection logic. It checks various conditions such as boot preference, confirmation status, and validity of applications and radios to determine the appropriate boot status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/img/ab_root_validate.txt#2025-04-21_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n@startuml\nstart\n\nif (BOOT_PREFERENCE == SET_B)then (no)\nelseif (CONFIRM_SET_B != NOT_CONFIRMED) then (no)\nelseif (Application B valid) then (no)\nelseif (Radio B valid) then (no)\nelse (yes)\n  : BOOT_STATUS := BOOT_B;\n  stop\nendif\n\nif (CONFIRM_SET_A != NOT_CONFIRMED) then (no)\nelseif (Application A valid) then (no)\nelseif (Radio A valid) then (no)\nelse (yes)\n  : BOOT_STATUS := BOOT_A;\n  stop\nendif\n\nif (CONFIRM_SET_B != NOT_CONFIRMED) then (no)\nelseif (Application B valid) then (no)\nelseif (Radio B valid) then (no)\nelse(yes)\n  : BOOT_STATUS := BOOT_B;\n  stop\nendif\n\nif (Application A valid) then (no)\nelseif (Radio A valid) then (no)\nelse (yes)\n  : BOOT_STATUS := BOOT_A_DEGRADED;\n  stop\nendif\n\nif (Application B valid) then (no)\nelseif (Radio B valid) then (no)\nelse (yes)\n  : BOOT_STATUS := BOOT_B_DEGRADED;\n  stop\nendif\n\nif (Application A valid) then (no)\nelse (yes)\n  if (Radio A valid) then\n  endif\n  : BOOT_STATUS := BOOT_A_NO_RADIO;\n  stop\nendif\n\nif (Application B valid) then (no)\nelse (yes)\n  if (Radio B valid) then\n  endif\n  : BOOT_STATUS := BOOT_B_NO_RADIO;\n  stop\nendif\n\n: BOOT_STATUS := CANNOT_BOOT;\n\nstop\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Downloading Files using MCUmgr\nDESCRIPTION: Demonstrates how to download a file from the remote system to the local system using mcumgr fs download command and verify its contents using cat\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ mcumgr -c acm0 fs download /lfs/bar.txt bar.txt\n0\n9\nDone\n$ cat bar.txt\nABCD1234\n```\n\n----------------------------------------\n\nTITLE: RST Directive for Documentation Templates\nDESCRIPTION: RST toctree directive that defines the structure for documentation template subpages, including maxdepth and glob parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/templates.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   ../../templates/*_README\n```\n\n----------------------------------------\n\nTITLE: Setting up Build Environment on Linux\nDESCRIPTION: Sets up the command-line build environment by executing the Zephyr environment script for Linux.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsource zephyr/zephyr-env.sh\n```\n\n----------------------------------------\n\nTITLE: Event Management Implementation in C++\nDESCRIPTION: Handles event posting and dispatching in the application task system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nvoid AppTask::PostEvent(const AppEvent &event)\n{\n  if (k_msgq_put(&sAppEventQueue, &event, K_NO_WAIT) != 0) {\n    LOG_INF(\"Failed to post event to app task event queue\");\n  }\n}\n\nvoid AppTask::DispatchEvent(const AppEvent &event)\n{\n  if (event.Handler) {\n    event.Handler(event);\n  } else {\n    LOG_INF(\"Event received with no handler. Dropping event.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shell Output - Peer Device Configuration\nDESCRIPTION: Terminal output showing the initialization and connection process for the peer (peripheral) device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/throughput/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n*** Booting Zephyr OS build v3.0.99-ncs1  ***\nStarting Bluetooth Throughput sample\nI: SoftDevice Controller build revision:\nI: 33 78 2a 18 20 f5 61 61 |3x*. .aa\nI: a6 8b 77 60 62 83 39 2a |..w`b.9*\nI: 7c f1 14 e4             ||...\n[...]\nPeripheral. Starting advertising\nConnected as peripheral\nConn. interval is 320 units\nLE PHY updated: TX PHY LE 2M, RX PHY LE 2M\n```\n\n----------------------------------------\n\nTITLE: String Logging Length Limitation - Kconfig\nDESCRIPTION: Configuration option for controlling log printk behavior, which has default value changed from n to y in NCS v2.3.0. Maximum string length is limited to 1022 bytes when using %s qualifier.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_32\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LOG_PRINTK=y\n```\n\n----------------------------------------\n\nTITLE: Building Bootloader with Updated Version\nDESCRIPTION: Command to build a bootloader with an incremented firmware version for update purposes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_psa_template/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp/ns nrf/samples/tfm/tfm_psa_template -d build_update \\\n-Dmcuboot_CONFIG_FW_INFO_FIRMWARE_VERSION=2\n```\n\n----------------------------------------\n\nTITLE: Installing nRF Util Device Command\nDESCRIPTION: Command to install a specific version of the nRF Util device command\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_gs.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnrfutil install device=2.7.16 --force\n```\n\n----------------------------------------\n\nTITLE: Disabling DPD Hardware Block\nDESCRIPTION: Command to disable the Digital Pre-Distortion (DPD) hardware block when it's no longer needed for tone transmission testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test dpd 0\n```\n\n----------------------------------------\n\nTITLE: Defining Firmware Magic Compilation Definitions\nDESCRIPTION: Sets up compiler definitions for firmware and API magic numbers to be used during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/fw_info/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_compile_definitions(\n  FIRMWARE_INFO_MAGIC=${FIRMWARE_INFO_MAGIC}\n  EXT_API_MAGIC=${EXT_API_MAGIC}\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Private Include Directories for Platform\nDESCRIPTION: This snippet sets the private include directories for the platform library or executable, making header files available during compilation, but not exposing them to other libraries that depend on this one. It includes CMSIS headers, NRF54L specific headers, and common Nordic headers. `ZEPHYR_BASE` is a CMake variable pointing to the Zephyr base directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf54l15_cpuapp/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(platform_s\n  PRIVATE\n  ${ZEPHYR_BASE}/modules/cmsis/\n  ${ZEPHYR_BASE}/soc/nordic/nrf54l\n  ${ZEPHYR_BASE}/soc/nordic/common\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Nordic SDK Sample with nRF21540 EK Shield\nDESCRIPTION: Command for building a sample application for nRF5340 DK with an attached nRF21540 EK front-end module. Uses west build system with specific board target and shield configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/sample_dtm_radio_test_fem.txt#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpunet -- -DSHIELD=nrf21540ek\n```\n\n----------------------------------------\n\nTITLE: Enabling Continuous LED Status Indication in Kconfig\nDESCRIPTION: Show an idle pattern, rather than turn the LEDs off, when the sample is idle. Defaults to enabled if LED indication is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_28\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LED_CONTINUOUS_INDICATION\n```\n\n----------------------------------------\n\nTITLE: Displaying LwM2M Carrier Library Size Table\nDESCRIPTION: Shows a table with flash and RAM sizes for the LwM2M Carrier library in binary and reference application formats.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/CHANGELOG.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n+-------------------------+---------------+------------+\n|                         | Flash (Bytes) | RAM (Bytes)|\n+-------------------------+---------------+------------+\n| Library size            | 61450         | 9541       |\n| (binary)                |               |            |\n+-------------------------+---------------+------------+\n| Library size            | 92750         | 30992      |\n| (reference application) |               |            |\n+-------------------------+---------------+------------+\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion in Zephyr\nDESCRIPTION: This Kconfig fragment conditionally includes the `nrf53_cpunet_enable.c` source file when the `CONFIG_SOC_NRF5340_CPUAPP` configuration option is enabled in the Zephyr RTOS build system. This ensures that the source file is only compiled and linked into the application if the target is the nRF5340 application core.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/rpc/soc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_SOC_NRF5340_CPUAPP nrf53_cpunet_enable.c)\n```\n\n----------------------------------------\n\nTITLE: Bluetooth UUID Macro Usage\nDESCRIPTION: The BT_UUID_16_ENCODE macro is used for encoding 16-bit UUIDs in Bluetooth applications. This macro simplifies the process of creating UUID values in the correct format.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.9.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nBT_UUID_16_ENCODE\n```\n\n----------------------------------------\n\nTITLE: Workaround for HFCLK Ramp Up Time Setting - MPSL - Documentation Format\nDESCRIPTION: This workaround suggests using the enumerator `MPSL_CLOCK_HF_LATENCY_TYPICAL` instead of `MPSL_CLOCK_HF_LATENCY_BEST` when configuring the time required for the High Frequency Clock to stabilize. It is important for developers to ensure the correct selection of latency settings to optimize clock performance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_36\n\nLANGUAGE: plaintext\nCODE:\n```\n**Workaround:** Use :c:enumerator:`MPSL_CLOCK_HF_LATENCY_TYPICAL` instead of :c:enumerator:`MPSL_CLOCK_HF_LATENCY_BEST` when setting the time it takes for the HFCLK to ramp up.\n```\n\n----------------------------------------\n\nTITLE: Defining Toctree for Bluetooth Mesh Chat Documentation in reStructuredText\nDESCRIPTION: This snippet defines a toctree directive in reStructuredText, specifying subpages for the Bluetooth Mesh chat sample documentation. It includes links to the sample description and chat CLI pages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/chat/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages:\n\n   sample_description.rst\n   chat_cli.rst\n```\n\n----------------------------------------\n\nTITLE: Starting LED Stream Playback - Python\nDESCRIPTION: This command initiates the LED stream playback on the device by sending color data. It allows customization for LED ID and frequency, enhancing visual feedback.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npython3 configurator_cli.py DEVICE led_stream LED_ID FREQUENCY --file WAVE_FILE\n```\n\n----------------------------------------\n\nTITLE: Update Shadow with Device Rejection - C\nDESCRIPTION: This snippet refers to the function `nrf_cloud_coap_shadow_desired_update`, which enables devices to reject invalid shadow deltas. This allows a device to avoid corrupted states.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SUIT Integration Test\nDESCRIPTION: Sets up CMake project configuration for SUIT integration testing, including version requirements, Zephyr package dependency, and linking of SUIT-related libraries. The configuration establishes necessary build parameters and library linkages for cache fetch testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/cache_sink/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2023 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_cache_fetch)\ninclude(../cmake/test_template.cmake)\n\n# Link with the CMake target, that includes SUIT platform internal APIs header\nzephyr_library_link_libraries(suit_stream_sinks_interface)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_memory_layout_interface)\n```\n\n----------------------------------------\n\nTITLE: Using Partition Manager Configuration Files in nRF Connect SDK\nDESCRIPTION: Demonstrates how to use partition manager configuration files with the new build system, allowing for fallback to files without additional suffixes when using FILE_SUFFIX.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.7.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npm_static_nrf52840dk_nrf52840.yaml\n```\n\n----------------------------------------\n\nTITLE: Referencing Key ID Encoding in Button Events\nDESCRIPTION: Shows how function key status is encoded in the button_event key_id member when function keys are enabled through CONFIG_DESKTOP_FN_KEYS_ENABLE. This represents a reference to code structure rather than a complete code snippet.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/buttons.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbutton_event.key_id\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Sources\nDESCRIPTION: This snippet sets the project name as 'spis_wakeup' and collects all source files from the defined directory. The gathered sources are then linked to the project, enabling compilation of the SPIS wakeup application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/boards/nordic/spis_wakeup/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(spis_wakeup)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/samples/boards/nordic/spis_wakeup/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Integrating mbedTLS Heap Library for Zephyr\nDESCRIPTION: This snippet conditionally appends the mbedtls_heap.c source file to the Zephyr source list if CONFIG_MBEDTLS_ENABLE_HEAP is enabled, facilitating dynamic memory allocation within the mbedTLS environment under Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/zephyr/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_MBEDTLS_ENABLE_HEAP)\n  list(APPEND src_zephyr\n    mbedtls_heap.c\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Partition Manager Configuration for FLPR and MCUboot\nDESCRIPTION: This snippet shows how to configure the Partition Manager static definitions for both the FLPR partition and the MCUboot primary application area. It ensures FLPR is recognized as part of the MCUboot primary application image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/nrf54l_signing_with_payload.rst#2025-04-21_snippet_3\n\nLANGUAGE: dts\nCODE:\n```\nflpr0:\n  address: 0x98000\n  end_address: 0xb8000\n  region: flash_primary\n  size: 0x20000\n```\n\nLANGUAGE: dts\nCODE:\n```\nmcuboot_primary_app:\n  address: 0xc800\n  end_address: 0xb8000\n  orig_span: &id002\n  - app\n  - flpr0\n  region: flash_primary\n  size: 0xab800\n  span: *id002\n```\n\n----------------------------------------\n\nTITLE: LwM2M Carrier Library Size Matrix\nDESCRIPTION: Memory size requirements for the LwM2M carrier library version 3.7.0, showing both binary and reference application sizes for flash and RAM.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/CHANGELOG.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+-------------------------+---------------+------------+\n|                         | Flash (Bytes) | RAM (Bytes)|\n+-------------------------+---------------+------------+\n| Library size            | 78147         | 18828      |\n| (binary)                |               |            |\n+-------------------------+---------------+------------+\n| Library size            | 98144         | 34568      |\n| (reference application) |               |            |\n+-------------------------+---------------+------------+\n```\n\n----------------------------------------\n\nTITLE: UART Output Configuration in prj.conf\nDESCRIPTION: This configuration snippet shows how to switch the console output from Segger RTT to UART in the `prj.conf` file. This change disables RTT-based logging and enables UART-based logging for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_description.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"# Segger RTT\nCONFIG_USE_SEGGER_RTT=n\nCONFIG_RTT_CONSOLE=n\nCONFIG_UART_CONSOLE=y\nCONFIG_LOG_BACKEND_RTT=n\nCONFIG_LOG_BACKEND_UART=y\"\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Matter Bridge Application\nDESCRIPTION: Configures the include directories for the application to access necessary header files, including bridge-specific functionality and bridged device types.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE\n    src\n    src/bridged_device_types\n    ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}\n    ${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/src/bridge/\n    ${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/src/bridge/util\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring hpf_app_trap_handler Project in CMake\nDESCRIPTION: Sets up the CMake build configuration for the hpf_app_trap_handler application. It requires CMake 3.20.0 or higher, finds the Zephyr package using the ZEPHYR_BASE environment variable, and adds src/main.c as the primary source file for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/mspi/trap_handler/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(hpf_app_trap_handler)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Finding Certification Declaration Byte Array\nDESCRIPTION: This snippet shows how to locate the array of bytes related to the Certification Declaration (CD) by running a search command on the CD.der file.  This is useful for identifying the CD data within the firmware image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/configuring_cd.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"cat CD.der | xxd -i\"\n```\n\n----------------------------------------\n\nTITLE: UDP Client Test Command Example\nDESCRIPTION: Example of the UDP client test command and its response showing available operations and parameter placeholders.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_17\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XUDPCLI=?\n#XUDPCLI: (0,1,2),<url>,<port>,<sec_tag>,<use_dtls_cid>,<peer_verify>,<tls_hostname_verify>\nOK\n```\n\n----------------------------------------\n\nTITLE: Handling LwM2M Carrier Events in C\nDESCRIPTION: This C code snippet demonstrates a function `lwm2m_carrier_event_handler` that handles various LwM2M carrier events. Specifically, it shows how to provision carrier certificates upon the `LWM2M_CARRIER_EVENT_INIT` event. This handler receives a pointer to a `lwm2m_carrier_event_t` structure containing information about the event.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/lwm2m_carrier_library.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n   int lwm2m_carrier_event_handler(const lwm2m_carrier_event_t *event)\n   {\n           switch (event->type) {\n           case LWM2M_CARRIER_EVENT_INIT:\n                   carrier_cert_provision();\n           ...\n\n```\n\n----------------------------------------\n\nTITLE: Creating Project\nDESCRIPTION: This snippet creates the project named 'gpio_idle'.  This establishes the project context for subsequent CMake commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/gpio_idle/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(gpio_idle)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Build for SUIT Platform Components in CMake\nDESCRIPTION: This CMake script configures a test project for SUIT platform components. It includes the test template, defines the project, adds required source files from the SUIT subsystem, sets compiler options to enable the SUIT platform, and configures include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_components/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(suit_plat_suit_plat_components)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_components.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_error_convert.c\n)\ntarget_compile_options(test_interface INTERFACE -DCONFIG_SUIT_PLATFORM)\ntarget_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/platform/include)\n```\n\n----------------------------------------\n\nTITLE: Setting DUT RX antenna ID with rsetrxantenna command in Shell\nDESCRIPTION: Sets the antenna used by the DUT device for RX operations only. Antenna ID can be either 0 or 1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\ncustom rsetrxantenna *1*\n```\n\n----------------------------------------\n\nTITLE: Defining replacements in reStructuredText\nDESCRIPTION: Defines replacements for '|DK|' with 'nRF9160 DK' and custom LED indicator descriptions for cloud association and data publishing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_cloud_connecting.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |DK| replace:: nRF9160 DK\n\n.. |led_cloud_association| replace:: the **LED3** double pulse blinks\n.. |led_publishing_data| replace:: blinking of **LED3**\n```\n\n----------------------------------------\n\nTITLE: Encoding NFC NDEF Message in C\nDESCRIPTION: This snippet demonstrates how to encode an NDEF message into a buffer. The encoded message can then be transmitted via NFC. The function includes error checking to ensure successful encoding.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/text_rec.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nerr = nfc_ndef_msg_encode(&NFC_NDEF_MSG(nfc_text_msg),\n\t\t\t\t         buffer,\n\t\t\t\t         len);\nif (err < 0) {\n\tprintk(\"Cannot encode message!\\n\");\n        return err;\n}\n```\n\n----------------------------------------\n\nTITLE: Building with MCUboot as Upgradable Bootloader\nDESCRIPTION: This command builds the project with MCUboot enabled as an upgradable bootloader. The SB_CONFIG_BOOTLOADER_MCUBOOT option is used to include MCUboot in the boot chain.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n\"west build -b nrf52840dk/nrf52840 zephyr/samples/hello_world -- \\\n      -DSB_CONFIG_SECURE_BOOT_APPCORE=y \\\n      -DSB_CONFIG_BOOTLOADER_MCUBOOT=y\"\n```\n\n----------------------------------------\n\nTITLE: Setting Week-day Schedule using Chip-Tool\nDESCRIPTION: This command sets a Week-day schedule for the door lock using the chip-tool, specifying the schedule index, user index, days mask, start and end times, destination ID, and endpoint ID. It configures a recurring schedule for a user to access the door lock during specific days and times of the week.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n\"./chip-tool doorlock set-week-day-schedule 1 2 84 7 30 10 30 1 1\"\n```\n\n----------------------------------------\n\nTITLE: Enabling RGB LED Status Indication in Kconfig\nDESCRIPTION: Use an on-board RGB LED for status indication. Defaults to enabled on the Thingy:91.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_25\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LED_INDICATOR_RGB\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Sysbuild Enable for West\nDESCRIPTION: This command configures west to use sysbuild by default for building all projects across all workspaces, setting the build.sysbuild configuration to True globally.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/sysbuild_configuring_west.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwest config --global build.sysbuild True\n```\n\n----------------------------------------\n\nTITLE: Function Reference in Release Notes Document\nDESCRIPTION: Code function references used in release notes documentation to reference specific functions like spm_firmware_info() and fota_download_start().\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.1.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: ReStructuredText\nCODE:\n```\n:c:func:`spm_firmware_info`\n:c:func:`fota_download_start`\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version for Nordic Project\nDESCRIPTION: This snippet specifies the minimum version of CMake required for the project, ensuring compatibility with modern features used in the project's configuration. CMake version 3.20.0 is specified as a prerequisite.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_callbacks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Generating Flash IPUC Creation and Release Sequence Diagram with PlantUML\nDESCRIPTION: This PlantUML code generates a sequence diagram showing the process of creating and releasing a flash IPUC. It includes interactions between flash_ipuc, flash_ipuc_dev, ssf, and suit_utils components, detailing the steps from IPUC creation to release.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/flash_component_ipuc_create.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant flash_ipuc\nparticipant flash_ipuc_dev\nparticipant ssf\nparticipant suit_utils\n\n--> flash_ipuc ++ : flash_component_ipuc_create(component_id, enc_info, comp_info)\nflash_ipuc -> ssf ++ : suit_ipuc_get_count()\ndeactivate ssf\nflash_ipuc -> flash_ipuc_dev ** : get_free_dev()\nnote right\n  Fails if CONFIG_FLASH_IPUC_COUNT IPUCs\n  are already allocated\nend note\n\nloop i < ipuc_count\n  flash_ipuc -> ssf ++ : suit_ipuc_get_info(i)\n  note right\n    Provides the associated component_id and manifest role\n  end note\n  deactivate ssf\n  flash_ipuc -> flash_ipuc : memcmp(ipuc[i].component_id, component_id)\n  note right\n    Component IDs must be equal.\n  end note\n  opt component ID matches\n    flash_ipuc -> flash_ipuc_dev ++ : << set component_id >>\n    deactivate flash_ipuc_dev\n    flash_ipuc -> suit_utils ++ : suit_plat_decode_component_id(component_id)\n    note right\n      Decodes address and size of the memory region\n    end note\n    deactivate suit_utils\n    flash_ipuc -> flash_ipuc_dev ++ : << set address and size >>\n    deactivate flash_ipuc_dev\n    flash_ipuc -> flash_ipuc : read_access_check(ipuc[i].role)\n    note right\n      Root and application manifest components are readable on the CPUAPP.\n      Radio manifest components are readable on the CPURAD.\n    end note\n    flash_ipuc -> flash_ipuc_dev ++ : << set read_access >>\n    deactivate flash_ipuc_dev\n    flash_ipuc -> flash_ipuc_dev ++ : << set pending flag >>\n    deactivate flash_ipuc_dev\n    note right\n      IPUC initialization (discards memory contents) postponed\n      until the first write() API call.\n    end note\n  end\n  flash_ipuc -> flash_ipuc : i++\n  note right\n    Break the loop if component ID found\n  end note\nend\n\ndeactivate flash_ipuc\n\n--> flash_ipuc ++ : flash_ipuc_release()\nflash_ipuc -> flash_ipuc_dev : release(ipuc_dev)\ndestroy flash_ipuc_dev\n\ndeactivate flash_ipuc\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Link Module in CMake\nDESCRIPTION: Sets up the include directory for the Link module compilation. This ensures that the compiler can find necessary header files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/link/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Mocks Subdirectory Configuration\nDESCRIPTION: Unconditionally adds the 'mocks' subdirectory to the build, ensuring mock implementations are always included\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(mocks)\n```\n\n----------------------------------------\n\nTITLE: Defining SUIT Memory Layout Compile Options\nDESCRIPTION: Sets compile-time constants for SUIT update area address and size, defining memory layout parameters for firmware updates\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/ipuc/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(suit_memory_layout_interface INTERFACE -DSDFW_UPDATE_AREA_ADDR=0x1000)\ntarget_compile_options(suit_memory_layout_interface INTERFACE -DSDFW_UPDATE_AREA_SIZE=0xFFFFE000)\n```\n\n----------------------------------------\n\nTITLE: Compiling Firmware with Custom Kconfig Options\nDESCRIPTION: This command rebuilds the firmware, specifying the number of LED blinks and additional configuration through Kconfig options. It outputs a new root.suit file containing updated firmware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_48\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -- \\\n   -DSB_EXTRA_CONF_FILE=\\\"suit_mpi.conf\\\" \\\n   -Dab_CONFIG_N_BLINKS=5\n```\n\n----------------------------------------\n\nTITLE: Battery Measurement Event Table in RST\nDESCRIPTION: Table showing event propagation for the Battery Measurement module, including power management and wake-up events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. table_battery_meas_start\n\n+-----------------------------------------------+------------------------+------------------+-------------------------+---------------------------------------------+\n| Source Module                                 | Input Event            | This Module      | Output Event            | Sink Module                                 |\n+===============================================+========================+==================+=========================+=============================================+\n| :ref:`nrf_desktop_power_manager`              | ``power_down_event``   | ``battery_meas`` |                         |                                             |\n+-----------------------------------------------+------------------------+                  |                         |                                             |\n| :ref:`nrf_desktop_module_state_event_sources` | ``module_state_event`` |                  |                         |                                             |\n+-----------------------------------------------+------------------------+                  |                         |                                             |\n| :ref:`nrf_desktop_ble_adv`                    | ``wake_up_event``      |                  |                         |                                             |\n+-----------------------------------------------+                        |                  |                         |                                             |\n| :ref:`nrf_desktop_buttons`                    |                        |                  |                         |                                             |\n+-----------------------------------------------+                        |                  |                         |                                             |\n| :ref:`nrf_desktop_hid_forward`                |                        |                  |                         |                                             |\n+-----------------------------------------------+                        |                  |                         |                                             |\n| :ref:`nrf_desktop_motion`                     |                        |                  |                         |                                             |\n+-----------------------------------------------+                        |                  |                         |                                             |\n| :ref:`nrf_desktop_power_manager`              |                        |                  |                         |                                             |\n+-----------------------------------------------+                        |                  |                         |                                             |\n| :ref:`nrf_desktop_wheel`                      |                        |                  |                         |                                             |\n+-----------------------------------------------+------------------------+                  +-------------------------+---------------------------------------------+\n|                                               |                        |                  | ``battery_level_event`` | :ref:`nrf_desktop_bas`                      |\n|                                               |                        |                  +-------------------------+---------------------------------------------+\n|                                               |                        |                  | ``module_state_event``  | :ref:`nrf_desktop_module_state_event_sinks` |\n```\n\n----------------------------------------\n\nTITLE: Configuring Application for Custom Linker File\nDESCRIPTION: Kconfig option that must be added to the application's prj.conf file to use the custom linker script for QSPI XIP functionality. Points the build system to the custom linker file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_5\n\nLANGUAGE: cfg\nCODE:\n```\n# Update the filename here if you have given it a different name\nCONFIG_CUSTOM_LINKER_SCRIPT=\"linker_arm_extxip.ld\"\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package - CMake\nDESCRIPTION: This snippet finds the Zephyr package, which is required for building the project. It leverages an environment variable to locate the base directory of the Zephyr installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_profiler/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Uploading and Installing Test Firmware Variant B\nDESCRIPTION: Combined command for uploading, installing, and serving images for the test firmware variant B that also does not confirm its correctness.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_25\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-envelope --serial-port COM7 --envelope-file root.suit --install --serve-images 60\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Process for plat_version\nDESCRIPTION: This CMake script configures the build system for the 'plat_version' project. It mandates a minimum version of CMake, includes a test template, adds the mocks directory, and sets up source and include directories. Key dependencies include the 'suit_subsys_dir' defining paths for project source files and headers. The expected input is the CMake build environment, outputting a configured build directory with the relevant project binaries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_run_nrf54h20/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\nadd_subdirectory(\\\"${CMAKE_CURRENT_LIST_DIR}/../../mocks\\\" \\\"${PROJECT_BINARY_DIR}/test_mocks_sdfw\\\")\n\nproject(plat_version)\n\ntarget_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/platform/include)\ntarget_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/platform/sdfw/include)\ntarget_compile_options(test_interface INTERFACE -DCONFIG_SUIT_PLATFORM)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/sdfw/src/runners/suit_run_nrf54h20.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Basic API Test Project with CMake for Nordic Semiconductor nRF SDK\nDESCRIPTION: This CMake configuration sets up a GPIO test project for the nRF Connect SDK. It establishes the minimum CMake version, finds the Zephyr package using the environment variable, defines the project name as 'hpf_gpio_basic_api', and adds all test source files from the src directory to the compilation target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/gpio/hpf_gpio_basic_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(hpf_gpio_basic_api)\n\nFILE(GLOB app_sources src/test*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Modem Library Build in CMake\nDESCRIPTION: Configures the Zephyr library build system with core and optional source files for the nRF modem library. Includes conditional compilation based on device series, networking features, and diagnostic capabilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/nrf_modem_lib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(nrf_modem_lib.c)\nzephyr_library_sources(nrf_modem_os.c)\nzephyr_library_sources_ifdef(CONFIG_SOC_SERIES_NRF92X nrf_modem_os_rpc.c)\nzephyr_library_sources_ifdef(CONFIG_NRF_MODEM_LIB_CFUN_HOOKS cfun_hooks.c)\nzephyr_library_sources_ifdef(CONFIG_NRF_MODEM_LIB_MEM_DIAG diag.c)\nzephyr_library_sources_ifdef(CONFIG_NET_SOCKETS nrf9x_sockets.c)\nzephyr_library_include_directories_ifdef(CONFIG_NET_SOCKETS ${ZEPHYR_BASE}/subsys/net/lib/sockets)\n\nadd_subdirectory_ifdef(CONFIG_NRF_MODEM_LIB_NET_IF lte_net_if)\nadd_subdirectory_ifdef(CONFIG_SHELL shell)\n\nif(CONFIG_NRF_MODEM_LIB_TRACE)\n  zephyr_library_sources(nrf_modem_lib_trace.c)\n  add_subdirectory(trace_backends)\nendif()\n\nzephyr_library_sources(fault.c)\nzephyr_library_sources(sanity.c)\n\nzephyr_linker_sources(RODATA nrf_modem_lib.ld)\nzephyr_linker_sources_IFDEF(CONFIG_NRF_MODEM_LIB_CFUN_HOOKS RODATA cfun_hooks.ld)\n```\n\n----------------------------------------\n\nTITLE: Using Saved Connection Configuration\nDESCRIPTION: Example of using a saved connection configuration with the MCUmgr CLI.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nmcumgr -c acm0\n```\n\n----------------------------------------\n\nTITLE: Hardware Configurations for Low Power UART Driver Sample\nDESCRIPTION: This configuration lists multiple hardware platforms and their corresponding board targets for the low power UART driver sample. It includes configurations for nRF9160 DK, nRF52840 DK, nRF52 DK, and nRF5340 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/boardname_tables/sample_boardnames.txt#2025-04-21_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n+--------------------------------+-----------+------------------------------------------------+-------------------------------+\n|Hardware platforms              |PCA        |Board name                                      |Board target                   |\n+================================+===========+================================================+===============================+\n|:ref:`nRF9160 DK <ug_nrf9160>`  |PCA10090   |:ref:`nrf9160dk <nrf9160dk_nrf9160>`            |``nrf9160dk/nrf9160``          |\n+--------------------------------+-----------+------------------------------------------------+-------------------------------+\n|:ref:`nRF52840 DK <ug_nrf52>`   |PCA10056   |:ref:`nrf52840dk <nrf52840dk_nrf52840>`         |``nrf52840dk/nrf52840``        |\n+--------------------------------+-----------+------------------------------------------------+-------------------------------+\n|:ref:`nRF52 DK <ug_nrf52>`      |PCA10040   |:ref:`nrf52dk <nrf52dk_nrf52832>`               |``nrf52dk/nrf52832``           |\n+--------------------------------+-----------+------------------------------------------------+-------------------------------+\n|:ref:`nRF5340 DK <ug_nrf5340>`  |PCA10095   |:ref:`nrf5340dk <nrf5340dk_nrf5340>`            |``nrf5340dk/nrf5340/cpuapp``   |\n+--------------------------------+-----------+------------------------------------------------+-------------------------------+\n\n```\n\n----------------------------------------\n\nTITLE: Defining LEDs Table in reStructuredText\nDESCRIPTION: reStructuredText table describing LED indicators and their meanings for different application states\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/user_interface.rst#2025-04-21_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n+--------------------------+-----------------------------------------------------------------------------------------------------------+---------------------------------------------+\n| LED                      |Indication                                                                                                 | Applications                                |\n+==========================+===========================================================================================================+=============================================+\n| **LED1**                 | Off - No Bluetooth connection.                                                                            | All                                         |\n|                          +-----------------------------------------------------------------------------------------------------------+---------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Setting CMD antenna ID with lsetantenna command in Shell\nDESCRIPTION: Sets the antenna used by the CMD device for both TX and RX operations. Antenna ID can be either 0 or 1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\ncustom lsetantenna *1*\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Platform Secure Partition\nDESCRIPTION: This snippet adds source files to the 'platform_s' target based on various compilation conditions. It helps in managing the source files that will be used during the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(platform_s\n  PRIVATE\n  common/tfm_hal_platform.c\n  $<$<OR:$<BOOL:${TFM_PARTITION_INITIAL_ATTESTATION}>,$<BOOL:${NRF_PROVISIONING}>>:${CMAKE_CURRENT_SOURCE_DIR}/common/attest_hal.c>\n  $<$<OR:$<BOOL:${TFM_PARTITION_INITIAL_ATTESTATION}>,$<BOOL:${NRF_PROVISIONING}>>:${ZEPHYR_NRF_MODULE_DIR}/subsys/bootloader/bl_storage/bl_storage.c>\n  common/assert.c\n  $<$<NOT:$<BOOL:${PLATFORM_DEFAULT_OTP}>>:${CMAKE_CURRENT_SOURCE_DIR}/common/dummy_otp.c>\n  $<$<NOT:$<BOOL:${PLATFORM_DEFAULT_SYSTEM_RESET_HALT}>>:${CMAKE_CURRENT_SOURCE_DIR}/common/tfm_hal_reset_halt.c>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Timer Waiting Project with Zephyr\nDESCRIPTION: This CMake snippet sets up the project configuration for a timer waiting application. It specifies the minimum CMake version, finds the Zephyr package, sets include directories, defines the project name, and adds the source files to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/timer_waiting/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nzephyr_include_directories(include)\n\nproject(timer_waiting)\n\ntarget_sources(app PRIVATE src/driver_test.c)\n```\n\n----------------------------------------\n\nTITLE: SUPL Write Callback Type Definition in C\nDESCRIPTION: The supl_write_t is a callback function type definition for sending outgoing data to the SUPL server. It is one of the callback functions used for data transfer within the SUPL session.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/supl_os_client.rst#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n\"SUPL write (:c:type:`supl_write_t`): callback for sending outgoing data to the SUPL server\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Device Methods\nDESCRIPTION: Implementation of the required virtual methods for handling device operations including read operations and device type identification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nCHIP_ERROR PressureSensorDevice::HandleRead(ClusterId clusterId, AttributeId attributeId, uint8_t *buffer, uint16_t maxReadLength) {\n   switch (clusterId) {\n   case Clusters::PressureMeasurement::Id:\n      return HandleReadPressureMeasurement(attributeId, buffer, maxReadLength);\n   default:\n      return CHIP_ERROR_INVALID_ARGUMENT;\n   }\n}\n\nCHIP_ERROR PressureSensorDevice::HandleReadPressureMeasurement(AttributeId attributeId, uint8_t *buffer, uint16_t maxReadLength) {\n   switch (attributeId) {\n   case Clusters::PressureMeasurement::Attributes::MeasuredValue::Id: {\n      int16_t value = GetMeasuredValue();\n```\n\n----------------------------------------\n\nTITLE: Adding Entropy Polling Source for mbedTLS\nDESCRIPTION: The entropy_poll.c file is appended to the Zephyr sources if CONFIG_MBEDTLS_ENTROPY_POLL is defined, which is essential for gathering hardware random data sources for cryptographic operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/zephyr/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_MBEDTLS_ENTROPY_POLL)\n  list(APPEND src_zephyr\n    ${NRF_SECURITY_ROOT}/src/zephyr/entropy_poll.c\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Mapping UART Interfaces to CDC ACM Ports in RST\nDESCRIPTION: This RST table shows the mapping of UART interfaces to CDC ACM ports for the Connectivity bridge application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/connectivity_bridge/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :align: center\n\n   * - UART Interface\n     - CDC ACM port\n   * - UART_0\n     - CDC_0\n   * - UART_1\n     - CDC_1\n```\n\n----------------------------------------\n\nTITLE: Building for Fixed Packet Transmission in Non-Connected Mode\nDESCRIPTION: Command for building the sample for fixed number of raw 802.11 packet transmission in non-connected Station mode\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/raw_tx_packet/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_RAW_TX_PKT_SAMPLE_NON_CONNECTED_MODE=y -DCONFIG_RAW_TX_PKT_SAMPLE_TX_MODE_FIXED=y -DCONFIG_RAW_TX_PKT_SAMPLE_FIXED_NUM_PACKETS=<number of packets to be sent>\n```\n\n----------------------------------------\n\nTITLE: SUIT IPUC Get Count Sequence Diagram in PlantUML\nDESCRIPTION: This PlantUML code defines a sequence diagram for the SUIT IPUC get count operation. It shows the interaction between the ssf and sdfw_ipuc components, with ssf initiating the count retrieval process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/suit_get_ipuc_count.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant ssf\nparticipant sdfw_ipuc\n\n--> ssf ++ : suit_ipuc_get_count()\nssf -> sdfw_ipuc : suit_ipuc_sdfw_get_count()\ndeactivate ssf\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Thread Stack Size in Kconfig\nDESCRIPTION: Sets the stack size (in bytes) for the connection thread of the sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_CONNECTION_THREAD_STACK_SIZE\n```\n\n----------------------------------------\n\nTITLE: Running FICR Update Script for nRF54H20\nDESCRIPTION: Command to execute the J-Link script for updating the Factory Information Configuration Registers (FICR) on the nRF54H20 SoC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nJLinkExe -CommanderScript nrf54h20es_trim_adjust.jlink\n```\n\n----------------------------------------\n\nTITLE: UDP Server Test Command Example\nDESCRIPTION: Example of the UDP server test command and its response showing available operations and parameter placeholders.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_10\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XUDPSVR=?\n#XUDPSVR: (0,1,2),<port>,<sec_tag>\nOK\n```\n\n----------------------------------------\n\nTITLE: Configuring Thingy:91 Partition Layout using Kconfig Options\nDESCRIPTION: These Kconfig options define different partition layouts for the Thingy:91 device. They control the firmware update compatibility and storage allocation for various features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy91/thingy91_updating_fw_programmer.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_THINGY91_STATIC_PARTITIONS_FACTORY\nCONFIG_THINGY91_STATIC_PARTITIONS_SECURE_BOOT\nCONFIG_THINGY91_STATIC_PARTITIONS_LWM2M_CARRIER\nCONFIG_THINGY91_NO_PREDEFINED_LAYOUT\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Management RPC Module Build in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the Device Management RPC module. It adds the common subdirectory and conditionally includes client and host subdirectories based on configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dm/rpc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(common)\nadd_subdirectory_ifdef(CONFIG_DM_MODULE_RPC_CLIENT client)\nadd_subdirectory_ifdef(CONFIG_DM_MODULE_RPC_HOST host)\n```\n\n----------------------------------------\n\nTITLE: Set minimum CMake version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project is compatible with the CMake commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Debug Symbols in CMakeLists.txt\nDESCRIPTION: Adds a missing debug symbol to the application's CMakeLists.txt file to resolve issues with missing debug symbols in the library model.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_66\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_link_libraries(-Wl,--undefined=my_missing_debug_symbol)\n```\n\n----------------------------------------\n\nTITLE: Including General Sample Information in reStructuredText\nDESCRIPTION: This snippet includes general information about samples from another file, starting and ending at specific points. It's used to provide common information across multiple sample documentations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/keys.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n```\n\n----------------------------------------\n\nTITLE: Adding Matter Documentation Set in CMake\nDESCRIPTION: Adds the Matter documentation set with version 1.4.1 to the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_docset(matter \"1.4.1\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Partitions in PM Static YAML for TF-M\nDESCRIPTION: This snippet shows the meaningful parts of the default configuration for the 'tfm_its', 'tfm_ps', and 'tfm_otp_nv_counters' partitions for the nRF9151 SoC. It specifies the addresses, sizes, and placement of each partition within the flash memory, demonstrating the alignment requirements necessary for effective partitioning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_services.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n    EMPTY_0:\n      address: 0xfc000\n      end_address: 0x100000\n      placement:\n        after:\n        - tfm_ps\n      region: flash_primary\n      size: 0x4000\n    EMPTY_1:\n      address: 0xf2000\n      end_address: 0xf8000\n      placement:\n        after:\n        - tfm_otp_nv_counters\n      region: flash_primary\n      size: 0x6000\n    EMPTY_2:\n      address: 0xea000\n      end_address: 0xf0000\n      placement:\n        after:\n        - tfm_its\n      region: flash_primary\n      size: 0x6000\n    app:\n      address: 0x40000\n      end_address: 0xe8000\n      region: flash_primary\n      size: 0xa8000\n    tfm_nonsecure:\n      address: 0x40000\n      end_address: 0xe8000\n      orig_span: &id004\n      - app\n      region: flash_primary\n      size: 0xa8000\n      span: *id004\n    tfm_its:\n      address: 0xe8000\n      end_address: 0xea000\n      inside:\n      - tfm_storage\n      placement:\n        align:\n          start: 0x8000\n        before:\n        - tfm_otp_nv_counters\n      region: flash_primary\n      size: 0x2000\n    tfm_otp_nv_counters:\n      address: 0xf0000\n      end_address: 0xf2000\n      inside:\n      - tfm_storage\n      placement:\n        align:\n          start: 0x8000\n        before:\n        - tfm_ps\n      region: flash_primary\n      size: 0x2000\n    tfm_ps:\n      address: 0xf8000\n      end_address: 0xfc000\n      inside:\n      - tfm_storage\n      placement:\n        align:\n          start: 0x8000\n        before:\n        - end\n      region: flash_primary\n      size: 0x4000\n    tfm_storage:\n      address: 0xe8000\n      end_address: 0xfc000\n      orig_span: &id006\n      - tfm_ps\n      - tfm_its\n      - tfm_otp_nv_counters\n      region: flash_primary\n      size: 0x14000\n      span: *id006\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Interface Library for SUIT Storage\nDESCRIPTION: This snippet defines a named interface library for SUIT storage in a Zephyr project. It specifies the include directories and links with necessary libraries such as `suit_metadata`, `suit_platform_err`, and `suit_utils`. These configurations are crucial for integrating SUIT storage functionalities with the Zephyr build system. The main dependencies include Zephyr and the aforementioned libraries. The required input is a properly configured environment with access to these libraries while the output will be a correctly linked interface library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(suit_storage_interface)\ntarget_include_directories(suit_storage_interface INTERFACE include)\ntarget_link_libraries(suit_storage_interface INTERFACE suit_metadata)\ntarget_link_libraries(suit_storage_interface INTERFACE suit_platform_err)\ntarget_link_libraries(suit_storage_interface INTERFACE suit_utils)\n```\n\n----------------------------------------\n\nTITLE: Boot Status Log for Variant B Update (Console)\nDESCRIPTION: Log message showing boot status after uploading and confirming variant B.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_39\n\nLANGUAGE: console\nCODE:\n```\nBoot preference: set B\nBoot status: image set B active\nConfirm status set A: not confirmed\nConfirm status set B: not confirmed\n\n<inf> AB: Image set B not confirmed yet, testing...\n<inf> AB: Confirming...\n<inf> AB: Confirmed\n```\n\n----------------------------------------\n\nTITLE: Image B Confirmation Log Output\nDESCRIPTION: Console log output showing the process of testing and confirming the application image variant B after rebooting.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n<inf> AB: Image set B not confirmed yet, testing...\n<inf> AB: Confirming...\n<inf> AB: Confirmed\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: This line sets the minimum required version of CMake for the project to 3.20.0. This ensures that the CMake features used in the build scripts are supported by the CMake version used.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_stm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Launching Toolchain on Linux\nDESCRIPTION: Launches the nRF toolchain environment in a shell for Linux OS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nnrfutil sdk-manager toolchain launch --shell\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for nRF Machine Learning Documentation\nDESCRIPTION: This snippet defines a table of contents (toctree) in reStructuredText format for the nRF Machine Learning application documentation. It specifies subpages to be included in the documentation structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages:\n\n   app_desc\n   config_options\n   internal_module\n   api\n```\n\n----------------------------------------\n\nTITLE: Executing data collection script\nDESCRIPTION: Executes the `data_collector.py` script. This script collects events from a device and saves them to files for later analysis.  It's a standalone script that requires Python 3 to run.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/nrf_profiler/readme.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"python3 data_collector.py\"\n\n```\n\n----------------------------------------\n\nTITLE: Building RPC Host with Peripheral UART Sample\nDESCRIPTION: Command for building the sample with Peripheral UART configuration using sysbuild and nordic-bt-rpc snippet.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/rpc_host/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -S nordic-bt-rpc -- -DSB_CONFIG_NETCORE_RPC_HOST=y\n```\n\n----------------------------------------\n\nTITLE: Compiling PPI Trace Source in CMake for nRF Connect SDK\nDESCRIPTION: This CMake command adds the ppi_trace.c source file to the Zephyr build system. It's part of the PPI Trace module configuration in the nRF Connect SDK, used for Nordic Semiconductor devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/debug/ppi_trace/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources(ppi_trace.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring HPF GPIO Project with CMake\nDESCRIPTION: This CMake configuration file sets up a HPF GPIO project. It defines minimum CMake version, finds the Zephyr package, installs an HPF assembly from HRT source, and conditionally includes backend implementation files depending on the selected backend configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/hpf/gpio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(hpf_gpio)\n\nhpf_assembly_install(app \"${CMAKE_SOURCE_DIR}/src/hrt/hrt.c\")\n\ntarget_sources(app PRIVATE src/main.c)\n\ntarget_sources_ifdef(CONFIG_HPF_GPIO_BACKEND_ICMSG app PRIVATE src/backend/backend_icmsg.c)\ntarget_sources_ifdef(CONFIG_HPF_GPIO_BACKEND_ICBMSG app PRIVATE src/backend/backend_icmsg.c)\ntarget_sources_ifdef(CONFIG_HPF_GPIO_BACKEND_MBOX app PRIVATE  src/backend/backend_mbox.c)\n```\n\n----------------------------------------\n\nTITLE: Enabling TCAT Functionality in OpenThread CLI Sample (conf)\nDESCRIPTION: Demonstrates how to enable Thread Commissioning over Authenticated TLS (TCAT) functionality in the OpenThread CLI sample. The configuration is located in the tcat.conf file within the snippets/tcat/ directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/supported_features.rst#2025-04-21_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\ntcat.conf\n```\n\n----------------------------------------\n\nTITLE: Handling Provisioning Source Files for Platform Secure Partition\nDESCRIPTION: This snippet conditionally adds provisioning source files to the 'platform_s' target based on whether provisioning is enabled or not. It chooses between a dummy provisioning file and a real provisioning file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT ${PLATFORM_DEFAULT_PROVISIONING})\n  if(NRF_PROVISIONING)\n    target_compile_definitions(platform_s PUBLIC NRF_PROVISIONING)\n    set(provisioning_source nrf_provisioning.c)\n  else()\n    set(provisioning_source dummy_provisioning.c)\n  endif()\n\n  target_sources(platform_s\n    PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}/common/${provisioning_source}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Error Code Macro Definition\nDESCRIPTION: This snippet references the `NRF_ERROR_INVALID_PARAM` macro, which is returned when an invalid parameter, such as a zero address, is passed to an ESB function. This indicates a specific error condition within the nRF Connect SDK environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/esb/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\":c:macro:`NRF_ERROR_INVALID_PARAM`\"\n```\n\n----------------------------------------\n\nTITLE: Encoding Shadow Delta Response in C\nDESCRIPTION: This function encodes the response for desired settings in the device shadow, helping applications accept or reject these settings effectively.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n:c:func:`nrf_cloud_shadow_delta_response_encode()` to help accept or reject shadow delta desired settings.\n```\n\n----------------------------------------\n\nTITLE: CoreMark Static Memory Configuration\nDESCRIPTION: Configuration for using static memory method in CoreMark.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/coremark.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nCONFIG_COREMARK_MEMORY_METHOD_STATIC=y\n```\n\n----------------------------------------\n\nTITLE: Programming BICR on nRF54H20 DK\nDESCRIPTION: Command to program the Board Information Configuration Registers (BICR) using nrfutil. Requires the BICR binary file and the device serial number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device program --options chip_erase_mode=ERASE_NONE --firmware bicr_ext_loadcap.hex --core Secure --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Installing west Globally on Windows\nDESCRIPTION: Installs the west tool globally on Windows.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_21\n\nLANGUAGE: bat\nCODE:\n```\npip3 install -U west\n```\n\n----------------------------------------\n\nTITLE: Configuring PWM Ports in DTS for CAF LEDs Module\nDESCRIPTION: This snippet shows how to enable and configure PWM ports in the devicetree for use with the CAF LEDs module. It sets up pin control configurations and enables PWM ports.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/leds.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n&pinctrl {\n\tpwm0_default_alt: pwm0_default_alt {\n\t\tgroup1 {\n\t\t\tpsels = <NRF_PSEL(PWM_OUT0, 0, 8)>;\n\t\t};\n\t};\n\n\tpwm0_sleep_alt: pwm0_sleep_alt {\n\t\tgroup1 {\n\t\t\tpsels = <NRF_PSEL(PWM_OUT0, 0, 8)>;\n\t\t\tlow-power-enable;\n\t\t};\n\t};\n};\n\n&pwm0 {\n\tstatus = \"okay\";\n\tpinctrl-0 = <&pwm0_default_alt>;\n\tpinctrl-1 = <&pwm0_sleep_alt>;\n\tpinctrl-names = \"default\", \"sleep\";\n};\n```\n\n----------------------------------------\n\nTITLE: IPUC Write Operation Sequence Diagram in PlantUML\nDESCRIPTION: A sequence diagram that illustrates the flow of a write operation to an IPUC (In-Place Update Component). The diagram shows interactions between flash_ipuc_dev, sys_cache, and ssf components, handling setup pending conditions, zero-length writes as flush requests, and memory alignment requirements for cache-line operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/flash_ipuc_write.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant flash_ipuc_dev\nparticipant sys_cache\nparticipant ssf\n\n--> flash_ipuc_dev ++ : write(offset, data, len)\n\nflash_ipuc_dev -> flash_ipuc_dev : verify(offset + len < ipuc_size)\n\nopt setup_pending == true\n  rnote over flash_ipuc_dev\n    The suit_ipuc_write_setup(..) API ensures that the\n    existing memory content will be overwritten by the write(..) API.\n  end note\n  flash_ipuc_dev -> ssf ++ : suit_ipuc_write_setup(component_id, NULL, NULL)\n  deactivate ssf\n  flash_ipuc_dev -> flash_ipuc_dev : << clear pending flag >>\nend\n\nalt len == 0\n  note over flash_ipuc_dev\n    Any write with the size set to zero is interpreted as the \"flush\" request.\n  end note\n  flash_ipuc_dev -> ssf ++ : suit_ipuc_write(component_id, offset, 0, 0, true)\n  deactivate ssf\nelse\n  flash_ipuc_dev -> flash_ipuc_dev : memcpy(aligned_buf, data, unaligned_bytes)\n  note right\n    All buffers passed through SSF API must be aligned to the cache lines.\n    Use stack-allocated buffer to split write request into two parts:\n     - First use internal, aligned buffer to align input data address.\n     - Afterwards pass truncated, aligned input data.\n  end note\n\n  flash_ipuc_dev -> sys_cache ++ : sys_cache_data_flush_range(aligned_buf, sizeof(aligned_buf))\n  deactivate sys_cache\n  flash_ipuc_dev -> ssf ++ : suit_ipuc_write(component_id, offset, aligned_buf, unaligned_bytes, false)\n  deactivate ssf\n\n  flash_ipuc_dev -> sys_cache ++ : sys_cache_data_flush_range(&data[unaligned_bytes], len)\n  deactivate sys_cache\n  flash_ipuc_dev -> ssf ++ : suit_ipuc_write(component_id, offset + unaligned_bytes, &data[unaligned_bytes], len - unaligned_bytes, false)\n  deactivate ssf\nend\n\ndeactivate flash_ipuc_dev\n\nrnote over flash_ipuc_dev\n  The flash device instance remains allocated until\n  flash_ipuc_release() or flash_image_ipuc_release() API call.\nend note\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Data Model Generation\nDESCRIPTION: Sets up the Matter data model generation configuration using the ZAP file for the window application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/window_covering/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nchip_configure_data_model(app\n    INCLUDE_SERVER\n    BYPASS_IDL\n    GEN_DIR ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/zap-generated\n    ZAP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}/window-app.zap\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr Library for AT Monitor\nDESCRIPTION: Creates a Zephyr library and adds AT monitor source file with specific linker configuration to ensure data is stored in RAM\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/at_monitor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(at_monitor.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_linker_sources(RWDATA at_monitor.ld)\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot Image Version in Kconfig\nDESCRIPTION: Sets the image version for MCUboot using the CONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION Kconfig option. This example sets the version to '0.1.2+3' following semantic versioning conventions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_dfu_image_versions.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION=\"0.1.2+3\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Linker Wrapping for CMock Functions in CMake\nDESCRIPTION: Adds linker wrapping options for functions listed in a file. This redirects calls from the original function to the mocked version using the --wrap linker option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/unity/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(cmock_linker_trick func_name_path)\n  file(STRINGS ${func_name_path} contents)\n  if (contents)\n    set(linker_str \"-Wl\")\n  endif()\n  foreach(src ${contents})\n    set(linker_str \"${linker_str},--defsym,${src}=__cmock_${src}\")\n  endforeach()\n  zephyr_link_libraries(${linker_str})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target\nDESCRIPTION: Specifies the source file 'src/main.c' as part of the application target. This inclusion allows the build system to compile the main application logic alongside other specified components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/common/remote_sleep_forever/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Define Project\nDESCRIPTION: This command defines the project name as 'idle_stm'. This name is used to identify the project within the CMake environment and in generated build files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_stm/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nproject(idle_stm)\n```\n\n----------------------------------------\n\nTITLE: Initializing SUIT Envelope Sequence Numbers\nDESCRIPTION: This snippet updates the SUIT envelope sequence number by modifying variables in the VERSION file. It is important to ensure the new sequence numbers are saved for correct version tracking.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_47\n\nLANGUAGE: console\nCODE:\n```\nAPP_ROOT_SEQ_NUM = 5\nAPP_LOCAL_1_SEQ_NUM = 5\n```\n\n----------------------------------------\n\nTITLE: Including Directories for Application\nDESCRIPTION: This line includes the 'include' directory for the application, allowing the compiler to find header files specified in the source code. It is marked as private, meaning it is only accessible within this target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_combined_bis_and_cis/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE include)\n```\n\n----------------------------------------\n\nTITLE: Adding Remote IPC Instances in C\nDESCRIPTION: This code snippet demonstrates how to add remote IPC instances to the Event Manager Proxy. The `event_manager_proxy_add_remote` function is used to register each IPC instance, enabling communication with other cores.  Error handling is included after each call to `event_manager_proxy_add_remote`.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/event_manager_proxy.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\"ret = event_manager_proxy_add_remote(ipc1_instance);\\n/* Error handling */\\nret = event_manager_proxy_add_remote(ipc2_instance);\\n/* Error handling */\"\n```\n\n----------------------------------------\n\nTITLE: Building Sample with External Flash and BLE Support\nDESCRIPTION: This command builds the sample with both external flash and Bluetooth LE transport enabled. It demonstrates combining multiple features in the build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/smp_transfer/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp -T ./sample.suit.smp_transfer.cache_push.extflash.bt\n```\n\n----------------------------------------\n\nTITLE: Verifying Derived Keys in EC J-PAKE in RST\nDESCRIPTION: This snippet outlines the final step of the sample, which is verifying that the keys derived through the J-PAKE process are the same on both sides. This verification ensures the success of the key exchange protocol.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/ecjpake/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: RST\nCODE:\n```\n3. Verifies that the derived keys are the same.\n```\n\n----------------------------------------\n\nTITLE: Adding sources based on CONFIG_BT_FAST_PAIR_FMDN_BEACON_ACTIONS\nDESCRIPTION: This conditional block adds the 'beacon_actions.c' source file to the 'fmdn' library if the Kconfig option 'CONFIG_BT_FAST_PAIR_FMDN_BEACON_ACTIONS' is enabled. The source is added as a PRIVATE source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(CONFIG_BT_FAST_PAIR_FMDN_BEACON_ACTIONS)\n  target_sources(fmdn PRIVATE beacon_actions.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Battery Voltage Rise Console Output\nDESCRIPTION: Shows console output when battery voltage recovers from low to high levels, displaying the transition back to normal operation mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/battery/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nBattery low level: 3214\nBattery voltage: 3421\nBattery voltage: 3421\nEnergy estimate: 8\nSetting modem to normal mode...\nNormal mode set.\nBattery voltage: 3457\nExecuting DNS lookup for 'google.com'...\nBattery voltage: 3421\nExecuting DNS lookup for 'apple.com'...\nBattery voltage: 3421\nExecuting DNS lookup for 'amazon.com'...\n```\n\n----------------------------------------\n\nTITLE: Testing UDP Client Service\nDESCRIPTION: Commands for using the UDP client service including connection setup, data transfer, and disconnection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_4\n\nLANGUAGE: at-commands\nCODE:\n```\nAT#XUDPCLI=1,\"example.com\",1234\nAT#XUDPSEND=\"Test UDP\"\nAT#XUDPCLI=0\n```\n\n----------------------------------------\n\nTITLE: Including DFU Cache Streamer Headers - CMake\nDESCRIPTION: This snippet includes the headers necessary for the DFU cache streamer functionalities conditioned on CONFIG_MOCK_DFU_CACHE_STREAMER, preparing the test binary for handling DFU cache operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_DFU_CACHE_STREAMER)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_STREAM -DCONFIG_SUIT_CACHE_RW)\n  target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/stream/stream_sources/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: GNSS Periodic Tracking Example\nDESCRIPTION: Example showing periodic GNSS tracking with defined intervals and timeouts\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/GNSS_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: AT\nCODE:\n```\nAT%XSYSTEMMODE=1,0,1,0\n\nOK\nAT+CPSMS=1,,,\"00000001\",\"00000011\"\n\nOK\nAT+CEDRXS=2,4,\"0011\"\n\nOK\nAT+CFUN=1\n\nOK\nAT#XNRFCLOUD=1\n\nOK\n#XNRFCLOUD: 1,0\nAT#XGPS=1,0,1,30\n\n#XGPS: 1,1\n\nOK\n\n#XGPS: 1,2\n\n#XGPS: 1,4\n\n#XGPS: 35.457243,139.625435,149.005020,28.184258,10.431827,281.446014,\"2021-06-24 04:35:52\"\n\n#XGPS: 1,2\n\n#XGPS: 1,4\n\n#XGPS: 35.457189,139.625602,176.811203,43.015198,0.601837,281.446014,\"2021-06-24 04:36:32\"\n\n#XGPS: 1,2\n\n#XGPS: 1,4\n\n#XGPS: 35.457498,139.625422,168.243591,31.753956,0.191195,281.446014,\"2021-06-24 04:37:12\"\n\n#XGPS: 1,2\n\n#XGPS: 1,4\n\n#XGPS: 35.457524,139.624667,100.745979,25.324850,6.347160,94.699837,\"2021-06-24 04:37:52\"\nAT#XGPS=0\n\n#XGPS: 1,0\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Multi-image Build Configuration\nDESCRIPTION: Sysbuild configuration structure for multi-image builds including MCUboot bootloader and IPC Radio\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/app_desc.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\napplications/machine_learning/sysbuild/<image_name>/boards/<configuration_file>\n```\n\n----------------------------------------\n\nTITLE: Configuring FTP client module build in CMake for nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build configuration for the FTP client module. It creates a Zephyr library and adds the main FTP client implementation source file to be compiled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/ftp_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tsrc/ftp_client.c\n)\n```\n\n----------------------------------------\n\nTITLE: ESB Payload Pipe Member\nDESCRIPTION: This snippet references the `esb_payload.pipe` member, which indicates a packet's pipe. For received packets, this field specifies from which pipe the packet came. For transmitted packets, it specifies through which pipe the packet will be sent.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/esb/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n\":c:member:`esb_payload.pipe`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for nrf_auraconfig\nDESCRIPTION: Adds include directories for the application, including headers from nRF Connect SDK samples and applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_include_directories(app PRIVATE\n    ${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/nrf_auraconfig/include\n    ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/include\n    ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/bluetooth\n    ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules\n    ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/utils/macros\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of NFC Components Using CMake\nDESCRIPTION: Controls the inclusion of various NFC (Near Field Communication) component directories based on Kconfig configuration options. The file conditionally adds subdirectories for NDEF, T2T parser, T4T protocols, NFC libraries, TNEP functionality, and RPC support depending on which features are enabled in the project configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nfc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_NFC_NDEF OR\n    CONFIG_NFC_NDEF_PARSER)\n        add_subdirectory(ndef)\nendif()\n\nadd_subdirectory_ifdef(CONFIG_NFC_T2T_PARSER t2t)\n\nif (CONFIG_NFC_T4T_ISODEP OR\n    CONFIG_NFC_T4T_APDU OR\n    CONFIG_NFC_T4T_CC_FILE OR\n    CONFIG_NFC_T4T_HL_PROCEDURE OR\n    CONFIG_NFC_T4T_NDEF_FILE)\n\tadd_subdirectory(t4t)\nendif()\n\n\nif (CONFIG_NFC_T2T_NRFXLIB OR\n    CONFIG_NFC_T4T_NRFXLIB)\n\tadd_subdirectory(lib)\nendif()\n\nif (CONFIG_NFC_TNEP_TAG OR\n    CONFIG_NFC_TNEP_POLLER)\n\tadd_subdirectory(tnep)\nendif()\n\nadd_subdirectory_ifdef(CONFIG_NFC_RPC rpc)\n```\n\n----------------------------------------\n\nTITLE: Function Button Event Handler Implementation in C++\nDESCRIPTION: Handles function button events for factory reset functionality, including button push and release actions with LED status updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nvoid AppTask::FunctionHandler(const AppEvent &event)\n{\n  if (event.ButtonEvent.PinNo != FUNCTION_BUTTON)\n    return;\n\n  if (event.ButtonEvent.Action == static_cast<uint8_t>(AppEventType::ButtonPushed)) {\n    Instance().StartTimer(kFactoryResetTriggerTimeout);\n    Instance().mFunction = FunctionEvent::FactoryReset;\n  } else if (event.ButtonEvent.Action == static_cast<uint8_t>(AppEventType::ButtonReleased)) {\n    if (Instance().mFunction == FunctionEvent::FactoryReset) {\n      sFactoryResetLEDs.Set(false);\n      UpdateStatusLED();\n      Instance().CancelTimer();\n      Instance().mFunction = FunctionEvent::NoneSelected;\n      LOG_INF(\"Factory Reset has been Canceled\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BLE RPC Build Configuration\nDESCRIPTION: Command to build an application with Bluetooth Low Energy RPC support, using the nordic-bt-rpc snippet to apply necessary configurations for both cores.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/rpc.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b *board_name* -S nordic-bt-rpc -- -DSB_CONFIG_NETCORE_IPC_RADIO=y -DSB_CONFIG_NETCORE_IPC_RADIO_BT_RPC=y\n```\n\n----------------------------------------\n\nTITLE: HID Report Queue Implementation Example\nDESCRIPTION: Example implementation file showing HID report queue integration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/hid_reportq.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nsrc/modules/hid_forward.c\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Processing Commands\nDESCRIPTION: Console output showing the sample execution when processing commands from the server. It demonstrates the complete provisioning cycle including network disconnection/reconnection handling, time acquisition, command processing, and system reboot after completion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_provisioning/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n<inf> nrf_provisioning_sample: Establishing LTE link ...\n<inf> nrf_provisioning_sample: Provisioning started\n<inf> nrf_provisioning_http: Requesting commands\n<inf> nrf_provisioning_http: Connected\n<inf> nrf_provisioning_http: Processing commands\n<inf> nrf_provisioning: Disconnected from network - provisioning paused\n<inf> nrf_provisioning: Connected; home network - provisioning resumed\n<inf> nrf_provisioning_sample: Modem connection restored\n<inf> nrf_provisioning_sample: Waiting for modem to acquire network time...\n<inf> nrf_provisioning_sample: Network time obtained\n<inf> nrf_provisioning_http: Sending response to server\n<inf> nrf_provisioning_http: Requesting commands\n<inf> nrf_provisioning_http: Connected\n<inf> nrf_provisioning_http: No more commands to process on server side\n<inf> nrf_provisioning_sample: Provisioning stopped\n<inf> nrf_provisioning_sample: Provisioning done, rebooting...\n<inf> nrf_provisioning: Disconnected from network - provisioning paused\n```\n\n----------------------------------------\n\nTITLE: Configuring Project and Test Template\nDESCRIPTION: Sets the project name for the integration test and includes a custom CMake test template for consistent build configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/ipuc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(integration_test_ipuc)\ninclude(../cmake/test_template.cmake)\n```\n\n----------------------------------------\n\nTITLE: Reading Currently Set Module Option Value - Python\nDESCRIPTION: This command allows the user to read the current value of an option for a specified module, necessary for understanding existing configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npython3 configurator_cli.py DEVICE config MODULE_NAME OPTION_NAME\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Inclusion for Event Types\nDESCRIPTION: Conditionally includes different event source files based on configuration flags. Handles data events, simple events, and test events separately.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/event_manager_proxy/common_events/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_APP_DATA_EVENT   app PRIVATE data_events.c)\ntarget_sources_ifdef(CONFIG_APP_SIMPLE_EVENT app PRIVATE simple_events.c)\ntarget_sources_ifdef(CONFIG_APP_TEST_EVENT   app PRIVATE test_events.c)\n```\n\n----------------------------------------\n\nTITLE: Zephyr Logging v2 Backend Function\nDESCRIPTION: The new logging backend function used in Zephyr logging v2 that replaces the three deprecated functions from logging v1. This single function handles all log message types.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_1.x_to_2.x.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/* Logging v2 function. */\nvoid (*process)(const struct log_backend *const backend,\n        union log_msg2_generic *msg);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding SD Card and LC3 Codec Source Files\nDESCRIPTION: Adds source files for SD card support and LC3 codec functionality based on configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_SD_CARD_MODULE app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules/sd_card.c)\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_SD_CARD_LC3_FILE app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules/lc3_file.c)\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_SD_CARD_LC3_STREAMER app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules/lc3_streamer.c)\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Modules Function for CAF Settings Loader in C\nDESCRIPTION: Example implementation of the get_req_modules function that specifies which modules must be initialized before settings are loaded. This function sets the appropriate bits in the module_flags structure, ensuring proper initialization sequence.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/settings_loader.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <caf/events/module_state_event.h>\n\nstatic inline void get_req_modules(struct module_flags *mf)\n{\n        module_flags_set_bit(mf, MODULE_IDX(main));\n#if CONFIG_CAF_BLE_ADV\n        module_flags_set_bit(mf, MODULE_IDX(ble_adv));\n#endif\n};\n```\n\n----------------------------------------\n\nTITLE: Encryption Process Console Output\nDESCRIPTION: Console output showing the complete encryption process including IV generation, key derivation, and encryption of a sample text. Displays hexadecimal representations of the IV, derived key, plaintext, and resulting ciphertext with authentication tag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/keys/hw_unique_key/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nGenerating random IV\nIV:\nab8e7c595d6de7d297a00b6c\n\nDeriving key\nKey:\n8d6e8ad32f5dffc10df1de38a2556ba0e01cf4ed56ac1294b9c57965cddc519a\nKey ID: 0x7fffffe0\n\nEncrypting\nPlaintext:\n\"Lorem ipsum dolor sit amet. This will be encrypted.\"\n4c6f72656d20697073756d20646f6c6f722073697420616d65742e2054686973\n2077696c6c20626520656e637279707465642e\nCiphertext (with authentication tag):\nea696bf71e106f7c74adfc3296556f4f25ac2c999e453e28c52fb41085ef7b89\n3cbadee1a505cf3ce1901f4bc2fcca4fb86ec68e4b5f1344bb66ef5ce733f47a\n33788a\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for WiFi/BLE Radio Test\nDESCRIPTION: Sets up the CMake project configuration including minimum version requirement, Zephyr package dependency, and project name. Defines directory paths for multi-domain and peripheral radio test components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/single_domain/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(wifi_ble_radio_test)\n\nset(MULTI_DOMAIN_RT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../multi_domain)\nset(PERIP_RT_DIR ${ZEPHYR_BASE}/../nrf/samples/peripheral/radio_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Watchdog Timer using Kconfig\nDESCRIPTION: Key Kconfig options required to enable and configure the watchdog module. The watchdog timeout defines the period after which the device will restart if the timer is not reset.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/watchdog.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_DESKTOP_WATCHDOG_ENABLE=y\nCONFIG_WATCHDOG=y\nCONFIG_DESKTOP_WATCHDOG_TIMEOUT=<timeout_in_ms>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Flash IPUC Project in CMake\nDESCRIPTION: This snippet sets up the CMake environment for a Flash IPUC project. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, and configures include directories and compile definitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/flash/flash_ipuc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(flash_ipuc)\n\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/subsys/suit/ipuc/include)\ntarget_include_directories(app PRIVATE mocks)\n\nzephyr_compile_definitions(CONFIG_FLASH_IPUC_COUNT=2)\nzephyr_compile_definitions(CONFIG_FLASH_IPUC_LOG_LEVEL)\nzephyr_compile_definitions(CONFIG_FLASH_IPUC_LOG_LEVEL_DBG)\n# Pretend to call API as nRF54H20 application FW\nzephyr_compile_definitions(CONFIG_SOC_NRF54H20_CPUAPP)\n```\n\n----------------------------------------\n\nTITLE: Configure Secondary Partition as Non-Secure for MCUboot\nDESCRIPTION: This snippet configures the secondary partition to be non-secure or secure based on the mcuboot single slot configuration. It checks if single slot updates are enabled and sets the NRF_NS_SECONDARY CMake option accordingly. It applies these configurations if MCUboot is enabled but not using external flash for the secondary slot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_BOOTLOADER_MCUBOOT AND NOT CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY)\n  # Configure the secondary partition to be non-secure\n  function(mcuboot_single_check val)\n    import_kconfig(CONFIG_ \"${CMAKE_BINARY_DIR}/../mcuboot/zephyr/.config\")\n    set(${val} \"${CONFIG_SINGLE_APPLICATION_SLOT}\" PARENT_SCOPE)\n  endfunction()\n\n  set(mcuboot_single_slot)\n  mcuboot_single_check(mcuboot_single_slot)\n\n  if(mcuboot_single_slot)\n    set_property(TARGET zephyr_property_target\n      APPEND PROPERTY TFM_CMAKE_OPTIONS\n      -DNRF_NS_SECONDARY=n\n    )\n  else()\n    set_property(TARGET zephyr_property_target\n      APPEND PROPERTY TFM_CMAKE_OPTIONS\n      -DNRF_NS_SECONDARY=y\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Source Files and Include Paths\nDESCRIPTION: Adds device info service encode and decode source files to the Zephyr build system and configures the current directory as an include path. Uses zephyr_sources() and zephyr_include_directories() CMake functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/device_info/zcbor_generated/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources(\n\tdevice_info_service_decode.c\n\tdevice_info_service_encode.c\n)\n\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Displaying Application Output in Console\nDESCRIPTION: An example of how to display application console output in the documentation using a code block. This snippet shows sample Zigbee application initialization output.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/application_README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\n[00:00:02.029,174] <inf> zigbee_app_utils: Zigbee stack initialized\n```\n\n----------------------------------------\n\nTITLE: FPROTECT Block Size Configuration\nDESCRIPTION: This Kconfig option defines the block size for the fprotect driver, which is used to write-protect the factory_data partition. The partition layout must adhere to the block size requirements for effective write protection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_7\n\nLANGUAGE: Kconfig\nCODE:\n```\n:kconfig:option:`CONFIG_FPROTECT_BLOCK_SIZE`\n```\n\n----------------------------------------\n\nTITLE: Linking Zephyr Libraries for SUIT Components\nDESCRIPTION: Links various SUIT-related Zephyr libraries to the application target, including storage, orchestrator, and update interfaces\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/orchestrator/orchestrator_sdfw_nrf54h20/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_link_libraries(suit)\nzephyr_library_link_libraries(suit_orchestrator_interface)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_storage_interface)\nzephyr_library_link_libraries(suit_update_magic_values)\nzephyr_library_link_libraries(suit_cache_interface)\nzephyr_library_link_libraries(suit_execution_mode)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for NRF LF Clock Start Testing\nDESCRIPTION: Sets up the CMake environment for building the nrf_lf_clock_start test application. It requires CMake 3.20.0 or higher, locates the Zephyr package, defines the project, and includes source files from the Zephyr test directory for Nordic's low-frequency clock control testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/clock_control/nrf_lf_clock_start/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_lf_clock_start)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/clock_control/nrf_lf_clock_start/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet locates the Zephyr package required for the project using the defined environmental variable ZEPHYR_BASE, which must be set prior to project configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_stm/remote/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Configuring ZZHC Library Build in CMake for Nordic SDK\nDESCRIPTION: Sets up a Zephyr library for the ZZHC (China IoT certification) module and conditionally includes source files based on the CONFIG_ZZHC Kconfig option. This allows the ZZHC code to be included in the build only when the feature is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/zzhc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources_ifdef(CONFIG_ZZHC zzhc.c zzhc_port.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring LED Effects in C\nDESCRIPTION: This snippet defines default LED effects used in the application. It lists the various LED effects like BLINK, BREATH, and CLOCK with specific periods and RGB color settings. Users can modify these configurations by altering entries in the led_effect table. There are no external dependencies except including appropriate headers for CAF.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nstatic const struct led_effect led_effect[] = {\n   [LED_EFFECT_ID_OFF] = LED_EFFECT_LED_OFF(),\n   [LED_EFFECT_ID_BLINK] = LED_EFFECT_LED_BLINK(200, LED_COLOR(255, 255, 255)),\n   [LED_EFFECT_ID_BREATH] = LED_EFFECT_LED_BREATH(200, LED_COLOR(255, 255, 255)),\n   [LED_EFFECT_ID_CLOCK] = LED_EFFECT_LED_CLOCK(3, LED_COLOR(255, 255, 255)),\n};\n```\n\n----------------------------------------\n\nTITLE: Querying IPv6 Network Configuration\nDESCRIPTION: Shell command to check IPv6 address assignment on the Wi-Fi interface. Shows interface details including address type, state, lifetime and assigned addresses.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ net ipv6\n...\nIPv6 addresses for interface 1 (0x200190d0) (WiFi)\n================================================\nType            State           Lifetime (sec)  Address\nautoconf        preferred       infinite        fe80::f7ce:37ff:fe00:1971/128\nautoconf        preferred       9250            2001:8c0:5140:895:f7ce:37ff:fe00:1971/64\n```\n\n----------------------------------------\n\nTITLE: Reading GPIO Configuration\nDESCRIPTION: Command to list all configured GPIO pins and their functions\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/GPIO_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XGPIOCFG?\n```\n\n----------------------------------------\n\nTITLE: Initializing Location Assistance Retry Handler in C\nDESCRIPTION: Initializes the retry handler for temporary errors using the location_assistance_retry_init function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_location_assistance.rst#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nlocation_assistance_retry_init();\n```\n\n----------------------------------------\n\nTITLE: Resetting nRF54H20 Device\nDESCRIPTION: This command uses nRF Util to reset the nRF54H20 device after the lifecycle state transition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device reset --reset-kind RESET_PIN --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Enabling Coordinated Sampled Listening\nDESCRIPTION: Activates Coordinated Sampled Listening (CSL) on the Sleepy End Device with a 0.5-second period, allowing for more efficient downlink communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_26\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot csl period 500000\nDone\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Bluetooth Mesh Project in Nordic nRF Connect SDK\nDESCRIPTION: This CMake configuration file sets up a Bluetooth Mesh project using the Nordic nRF Connect SDK. It establishes the minimum CMake version, finds the Zephyr package, includes common mesh directories, defines project source files, and conditionally adds SMP over Bluetooth functionality for Device Firmware Update (DFU).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/light/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\ninclude_directories(\n\t${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/mesh/common\n)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/model_handler.c)\ntarget_include_directories(app PRIVATE\n\tinclude\n\t${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/mesh/common\n)\n\n# Preinitialization related to DFU over SMP\ntarget_sources_ifdef(CONFIG_MCUMGR_TRANSPORT_BT app PRIVATE\n\t${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/mesh/common/smp_bt.c)\n\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Applying MCUboot Configurations in CMake\nDESCRIPTION: Applies the selected MCUboot mode configurations to both MCUboot and the application using loops and conditional statements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(mode ${mcuboot_modes})\n  if(\"${mode}\" IN_LIST mcuboot_mode)\n    set_config_bool(mcuboot ${mode} y)\n  else()\n    set_config_bool(mcuboot ${mode} n)\n  endif()\nendforeach()\n\nforeach(mode ${application_mcuboot_modes})\n  if(\"${mode}\" IN_LIST application_mcuboot_mode)\n    set_config_bool(${DEFAULT_IMAGE} ${mode} y)\n  else()\n    set_config_bool(${DEFAULT_IMAGE} ${mode} n)\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Flash IPUC Device Read Operation\nDESCRIPTION: This PlantUML sequence diagram shows the flow of a read operation on a flash IPUC device. It illustrates access control verification, conditional data reading based on access rights, and notes about device lifecycle management. The diagram covers offset validation, role-based access control, and memory operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/flash_ipuc_read.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant flash_ipuc_dev\n\n--> flash_ipuc_dev ++ : read(offset, data, len)\n\nflash_ipuc_dev -> flash_ipuc_dev : verify(offset + len < ipuc_size)\n\nalt read_access == true\n  rnote over flash_ipuc_dev\n    Read access is deduced, based on\n    the manifest role, that declared IPUC.\n  end note\n\n  flash_ipuc_dev -> flash_ipuc_dev : memcpy(data, &ipuc_address[offset], len)\n\n  rnote over flash_ipuc_dev\n    The read API will always return 0xFF,\n    if the setup_pending flag is set.\n  end note\nelse\n  rnote over flash_ipuc_dev\n    Access denied.\n    There is a high chance that an attempt to read\n    the memory will result in a bus fault.\n  end note\nend\n\ndeactivate flash_ipuc_dev\n\nrnote over flash_ipuc_dev\n  The flash device instance remains allocated until\n  flash_ipuc_release() or flash_image_ipuc_release() API call.\nend note\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Modifying Ambient Light Level Sensor Get Function - C\nDESCRIPTION: This snippet showcases the modification of the ambient light level sensor's data retrieval function to incorporate the usage of bt_mesh_sensor_value for processing float values. It emphasizes the importance of encoding sensor data using the updated methods to ensure accuracy and correctness.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nstatic int amb_light_level_get(struct bt_mesh_sensor_srv *srv,\n                                          struct bt_mesh_sensor *sensor,\n                                          struct bt_mesh_msg_ctx *ctx,\n           -                               struct sensor_value *rsp)\n           +                               struct bt_mesh_sensor_value *rsp)\n           {\n                   int err;\n\n                   /* Report ambient light as dummy value, and changing it by pressing\n                    * a button. The logic and hardware for measuring the actual ambient\n                    * light usage of the device should be implemented here.\n                    */\n           -        double reported_value = amb_light_level_gain * dummy_ambient_light_value;\n           +        float reported_value = amb_light_level_gain * dummy_ambient_light_value;\n\n           -        err = sensor_value_from_double(rsp, reported_value);\n           +        err = bt_mesh_sensor_value_from_float(sensor->type->channels[0].format,\n           +                                              reported_value, rsp);\n           -        if (err) {\n           +        if (err && err != -ERANGE) {\n                           printk(\"Error encoding ambient light level sensor data (%d)\\n\", err);\n                           return err;\n                   }\n                   return 0;\n           }\n```\n\n----------------------------------------\n\nTITLE: Transitioning nRF54H20 to Root of Trust Lifecycle State\nDESCRIPTION: Command to transition the nRF54H20 device's lifecycle state from EMPTY to Root of Trust (RoT). This is a permanent change required for normal operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-adac-lcs-change --life-cycle rot --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Building the Multicore PWM Test with West\nDESCRIPTION: This command demonstrates how to build the multicore PWM test using the West build tool. It specifies the board, the test case configuration from the testcase.yaml file, and the current directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_pwm_led/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -T benchmarks.multicore.idle_pwm_led.nrf54h20dk_cpuapp_cpurad.s2ram .\n```\n\n----------------------------------------\n\nTITLE: Logging Zephyr commits in NCS\nDESCRIPTION: Git commands to list Zephyr commits incorporated into NCS since the last release.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.4.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline 7a3b253ced ^v2.3.0-rc1-ncs1\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Stream Filters in Zephyr with CMake\nDESCRIPTION: This CMake script defines and configures interfaces and libraries for SUIT stream filters within a Zephyr project. It specifies include directories, links libraries based on certain SUIT configuration flags, and conditionally includes source files for decrypting, unwrapping keys, and decompressing operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/stream/stream_filters/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(suit_stream_filters_interface)\ntarget_include_directories(suit_stream_filters_interface INTERFACE include)\ntarget_link_libraries(suit_stream_filters_interface INTERFACE suit_platform_err)\ntarget_link_libraries(suit_stream_filters_interface INTERFACE suit_stream_sinks_interface)\ntarget_link_libraries(suit_stream_filters_interface INTERFACE suit)\n\nzephyr_library()\n\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_FILTER_DECRYPT src/suit_decrypt_filter.c)\n# TODO: use AES KW unwrap algorithm from PSA API\nzephyr_library_sources_ifdef(CONFIG_SUIT_AES_KW_MANUAL src/suit_aes_key_unwrap_manual.c)\n\nzephyr_library_include_directories_ifdef(CONFIG_SUIT_STREAM_FILTER_DECOMPRESS ${NRF_DIR}/subsys/nrf_compress/lzma)\nzephyr_library_sources_ifdef(CONFIG_SUIT_STREAM_FILTER_DECOMPRESS src/suit_decompress_filter.c)\n\nzephyr_library_link_libraries(suit_stream_filters_interface)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STREAM_FILTER_DECRYPT suit_mci)\n```\n\n----------------------------------------\n\nTITLE: Get Default xyL Value\nDESCRIPTION: This shell command retrieves the default xyL value from the bound server, providing the client with the server's defined default settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl default-get\n```\n\n----------------------------------------\n\nTITLE: Directory Listing with FTP\nDESCRIPTION: Basic and detailed directory listing commands showing file sizes and permissions using AT#XFTP \"ls\" commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_39\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XFTP=\"ls\"\nAT#XFTP=\"ls\",\"-l\"\n```\n\n----------------------------------------\n\nTITLE: Source File Discovery\nDESCRIPTION: This snippet uses the FILE(GLOB) command to find all C source files in the 'src' directory and stores them in the 'app_sources' variable. This makes it easy to include all the necessary source files for the application in a single step.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/lpuart/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\n----------------------------------------\n\nTITLE: Getting Regulator Coefficient from Light Control Server - C\nDESCRIPTION: Retrieves a specified Regulator Coefficient value from the Light Lightness Control Server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl coeff-get <ID>\n\tGet a Regulator Coefficient value of the Light Lightness Control Server.\n\n\t* ``ID`` - ID of the coefficient to get. See :c:enum:`bt_mesh_light_ctrl_coeff` for a list of supported coefficients.\n```\n\n----------------------------------------\n\nTITLE: Adding Bluetooth Subdirectory to nrf_auraconfig Build\nDESCRIPTION: Includes the Bluetooth-related source files from the nRF5340 Audio application in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/bluetooth bluetooth_build)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Mesh Compile Options\nDESCRIPTION: Sets compilation definitions for Bluetooth mesh timing parameters, logging levels, and security settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/light_hue/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE=3000\n  -DCONFIG_BT_MESH_MOD_ACKD_TIMEOUT_PER_HOP=50\n  -DCONFIG_BT_LOG_LEVEL=0\n  -DCONFIG_BT_MESH_USES_MBEDTLS_PSA=1\n)\n```\n\n----------------------------------------\n\nTITLE: Installing J-Link Driver in Windows PowerShell\nDESCRIPTION: Command to install SEGGER USB Driver for J-Link on Windows using PowerShell with the InstUSBDriver parameter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n.\\JLink_Windows_V794e_x86_64.exe -InstUSBDriver=1\n```\n\n----------------------------------------\n\nTITLE: Running Local Python Web Server for NCS Documentation\nDESCRIPTION: This command starts a Python web server in the documentation build folder to test the documentation locally.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/build.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for DECT NRF Project\nDESCRIPTION: Configures the CMake build system for a 'hello_dect' project. The script sets the minimum CMake version, finds the Zephyr package, creates the project, and adds the main.c source file to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/hello_dect/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(hello_dect)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Setting GPIO pin value with lsetgpio command in Shell\nDESCRIPTION: Sets the value (high or low) of a selected GPIO output pin on the CMD device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\ncustom lsetgpio *29* *0*\n```\n\n----------------------------------------\n\nTITLE: Transitioning nRF54H20 to Root of Trust State\nDESCRIPTION: Command to change the lifecycle state of the nRF54H20 SoC to Root of Trust (RoT) using nrfutil. Requires the device serial number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-adac-lcs-change --life-cycle rot --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Setting Beacon Transmission Interval\nDESCRIPTION: Command to build the sample with a specified beacon transmission interval of 200ms\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/offloaded_raw_tx/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_BEACON_INTERVAL=200\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Source File Inclusion in CMake\nDESCRIPTION: Conditionally includes source files based on configuration flags for various features like HID reporting, hardware ID, BLE advertising, DFU lock, and config channel functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/src/util/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_DESKTOP_HID_REPORTQ\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/hid_reportq.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_HWID\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/hwid.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_ADV_PROV_UUID16_ALL\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/bt_le_adv_prov_uuid16.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_DFU_LOCK\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/dfu_lock.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_CONFIG_CHANNEL_ENABLE app\n\t\t\tPRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/config_channel_transport.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for DFU Multi-Image in CMake\nDESCRIPTION: This CMake snippet sets up a Zephyr library for DFU multi-image functionality. It creates the library and specifies the source file to be included.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dfu/dfu_multi_image/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(src/dfu_multi_image.c)\n```\n\n----------------------------------------\n\nTITLE: Terminating Receiver Operation\nDESCRIPTION: Command to stop the receiving operation on the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/thread_radio_test_for_per_measurements.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ cancel\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name in CMake\nDESCRIPTION: This snippet declares the project name 'protocols_serialization_client' within the CMake configuration. This helps in identifying the project during the build process and sets up the context for dependencies and targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/client/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(protocols_serialization_client)\n```\n\n----------------------------------------\n\nTITLE: Navigating to OpenThread Directory\nDESCRIPTION: Command to change directory to OpenThread source location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ncd modules/lib/openthread\n```\n\n----------------------------------------\n\nTITLE: XSMS Test Command Syntax\nDESCRIPTION: Test command syntax to verify command existence and parameter types.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SMS_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT\nCODE:\n```\n#XSMS=?\n```\n\n----------------------------------------\n\nTITLE: Building RPC Host with Debug Configuration\nDESCRIPTION: Command for building the sample with debugging configuration enabled using the overlay-debugging.conf file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/rpc_host/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build samples/bluetooth/rpc_host -- -DEXTRA_CONF_FILE=overlay-debugging.conf\n```\n\n----------------------------------------\n\nTITLE: PSA Test Suite Console Output\nDESCRIPTION: Example console output from running the PSA Architecture Test Suite for Storage. The output shows test case execution, results for individual checks, and a summary report of passed, failed, and skipped tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_psa_test/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build zephyr-v2.5.0-456-g06f4da459a99  ***\n\n***** PSA Architecture Test Suite - Version 1.0 *****\n\nRunning.. Storage Suite\n******************************************\n\nTEST: 401 | DESCRIPTION: UID not found check\n[Info] Executing tests from non-secure\n\n[Info] Executing ITS tests\n[Check 1] Call get API for UID 6 which is not set\n[Check 2] Call get_info API for UID 6 which is not set\n[Check 3] Call remove API for UID 6 which is not set\n[Check 4] Call get API for UID 6 which is removed\n[Check 5] Call get_info API for UID 6 which is removed\n[Check 6] Call remove API for UID 6 which is removed\nSet storage for UID 6\n[Check 7] Call get API for different UID 5\n[Check 8] Call get_info API for different UID 5\n[Check 9] Call remove API for different UID 5\n\n[Info] Executing PS tests\n[Check 1] Call get API for UID 6 which is not set\n[Check 2] Call get_info API for UID 6 which is not set\n[Check 3] Call remove API for UID 6 which is not set\n[Check 4] Call get API for UID 6 which is removed\n[Check 5] Call get_info API for UID 6 which is removed\n[Check 6] Call remove API for UID 6 which is removed\nSet storage for UID 6\n[Check 7] Call get API for different UID 5\n[Check 8] Call get_info API for different UID 5\n[Check 9] Call remove API for different UID 5\n\nTEST RESULT: PASSED\n\n******************************************\n\n[...]\n\nTEST: 417 | DESCRIPTION: Storage asset capacity modification check\n[Info] Executing tests from non-secure\n\n[Info] Executing PS tests\nTest Case skipped as Optional PS APIs are not supported.\n\nTEST RESULT: SKIPPED (Skip Code=0x0000002B)\n\n******************************************\n\n************ Storage Suite Report **********\nTOTAL TESTS     : 17\nTOTAL PASSED    : 11\nTOTAL SIM ERROR : 0\nTOTAL FAILED    : 0\nTOTAL SKIPPED   : 6\n******************************************\n\nEntering standby..\n```\n\n----------------------------------------\n\nTITLE: Creating SUIT SDFW Mocks Library Interface\nDESCRIPTION: This CMake command creates an interface library named `suit_sdfw_mocks`. Interface libraries are used to group compile-time information like include directories and compile options without producing any object files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/mocks/sdfw/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(suit_sdfw_mocks INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Reverting NFC NDEF CH Record Parser\nDESCRIPTION: This code snippet shows how to revert the subsys/nfc/ndef/ch_record_parser.c file to the state from the ncs_release_notes_210. This is a workaround for the peripheral_nfc_pairing and central_nfc_pairing samples that cannot pair using OOB data due to invalid AC record parsing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\n\"cd <NCS_root_directory>\\ngit checkout v2.1.0 -- subsys/nfc/ndef/ch_record_parser.c\"\n```\n\n----------------------------------------\n\nTITLE: Defining Target Include Directories for Platform Region Definitions in CMake\nDESCRIPTION: This snippet configures target include directories for the 'platform_region_defs' target. It specifies the directories where header files are located for proper compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(platform_region_defs INTERFACE ${partition_includes})\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. It ensures that the CMake version used to build the project is at least 3.20.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/coap_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Button Press Configuration for Development Kits\nDESCRIPTION: Configures button interactions for battery level decrement and button press actions on development kits\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_APP_BATTERY_LEVEL_DECREMENT\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Get Handler Function\nDESCRIPTION: Example implementation of a configuration get handler function that retrieves data for different option IDs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/config_channel.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstatic void config_get(const uint8_t opt_id, uint8_t *data, size_t *size)\n{\n    switch (opt_id) {\n    case TEST_MODULE_OPT_FILTER_PARAM:\n        /* Fill the buffer under the \"data\" pointer with\n         * requested data. Number of written bytes must be\n         * reflected by the value under the \"size\" pointer.\n         */\n        memcpy(data, filter_param, sizeof(filter_param));\n        *size = sizeof(filter_param);\n        break;\n\n    case TEST_MODULE_OPT_PARAM_BLE:\n        /* Handle the request. */\n        ....\n        break;\n\n    /* Handlers for other option IDs. */\n    ....\n\n    default:\n        /* The option is not supported by the module. */\n        LOG_WRN(\"Unknown opt: %\" PRIu8, opt_id);\n        break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gathering Application Source Files\nDESCRIPTION: This snippet uses the FILE command to collect all C source files located in the 'src' directory of the project. The gathered source files are intended for inclusion in the build process, making it easier to manage multiple source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_nfc_pairing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\n----------------------------------------\n\nTITLE: Deinitializing Downloader Library in C\nDESCRIPTION: This snippet shows how to deinitialize the downloader library by calling the downloader_deinit function. It frees up the resources used by the library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/downloader.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint err;\nstruct downloader dl;\n\n/* downloader is initialized */\n\nerr = downloader_deinit(&dl);\nif (err) {\n      printk(\"downloader deinit failed, err %d\\n\", err);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Emergency Data Storage Flash Tests in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build environment for Emergency Data Storage (EMDS) flash tests. It specifies the minimum CMake version, locates the Zephyr package, defines the project name, adds the main test source file, and includes the necessary EMDS directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/emds/emds_flash/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Emergency data storage flash tests\")\n\n# Add test sources\ntarget_sources(app PRIVATE src/main.c)\n\ntarget_include_directories(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/emds/\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Cooldown Time After Max Consecutive Send Failures in Kconfig\nDESCRIPTION: Sets the cooldown time (in seconds) after the maximum number of consecutive send failures is exceeded. If a connection reset is triggered by too many failed device messages, the sample waits for this long (in seconds) before trying again.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_CONSECUTIVE_SEND_FAILURE_COOLDOWN_SECONDS\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for UART Polling Project with Nordic nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build environment for a UART polling project. It specifies the minimum CMake version, includes the Zephyr package, sets include directories, and defines the project name and source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/uart_polling/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nzephyr_include_directories(include)\n\nproject(uart_polling)\n\ntarget_sources(app PRIVATE ./../common/main.c)\ntarget_sources(app PRIVATE src/driver_test.c)\n```\n\n----------------------------------------\n\nTITLE: SUIT Orchestrator Interface Definition\nDESCRIPTION: Defines the SUIT Orchestrator interface library using `zephyr_interface_library_named`. It also sets the include directory for the interface, making the headers available for other modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/orchestrator/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(suit_orchestrator_interface)\ntarget_include_directories(suit_orchestrator_interface INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Azure IoT Hub DPS Source in CMake\nDESCRIPTION: Conditionally adds the Azure IoT Hub Device Provisioning Service source file to the build when CONFIG_AZURE_IOT_HUB_DPS is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/azure_iot_hub/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_AZURE_IOT_HUB_DPS\n\tsrc/azure_iot_hub_dps.c\n)\n```\n\n----------------------------------------\n\nTITLE: List TWI Instances Command Format\nDESCRIPTION: AT command format for listing available TWI instances. Returns indexes corresponding to TWI0-TWI3.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TWI_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XTWILS: <index>[[[,<index>],<index>],<index>]\n```\n\n----------------------------------------\n\nTITLE: Device Reset Command\nDESCRIPTION: The #XRESET command performs a soft reset of the nRF91 Series SiP.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/Generic_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XRESET\n```\n\n----------------------------------------\n\nTITLE: Adding suit-payload-fetch Sequence to Root Manifest\nDESCRIPTION: YAML code snippet showing how to add the suit-payload-fetch sequence to the root manifest file. This sequence instructs the SUIT processor to fetch the required candidate images during envelope processing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_fetch.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsuit-payload-fetch:\n  - suit-directive-set-component-index: 0\n  - suit-directive-override-parameters:\n      suit-parameter-uri: '#{{ app[\\'name\\'] }}'\n  - suit-directive-fetch:\n    - suit-send-record-failure\n  - suit-condition-dependency-integrity:\n    - suit-send-record-success\n    - suit-send-record-failure\n    - suit-send-sysinfo-success\n    - suit-send-sysinfo-failure\n  - suit-directive-process-dependency:\n    - suit-send-record-success\n    - suit-send-record-failure\n    - suit-send-sysinfo-success\n    - suit-send-sysinfo-failure\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version for Zephyr\nDESCRIPTION: Sets the minimum required CMake version for the project, ensuring compatibility with Zephyr features and modules. The version check prevents the use of unsupported CMake versions that might break the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/common/remote_sleep_forever/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Workspace to Disable Sysbuild in West\nDESCRIPTION: This command configures west not to use sysbuild by default for building all projects in the current workspace, setting the build.sysbuild configuration to False locally.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/sysbuild_configuring_west.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest config --local build.sysbuild False\n```\n\n----------------------------------------\n\nTITLE: Generic Pattern for Removing Unused FEM GPIO Controls\nDESCRIPTION: General syntax for removing unused GPIO pin declarations from devicetree files. This pattern applies to all properties with the -gpios suffix for both nRF21540 and SKY66112-11 FEM modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_incomplete_connections.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\nX-gpios = < .. >;\n```\n\n----------------------------------------\n\nTITLE: Adding DFU and Other Modules in CMake\nDESCRIPTION: This snippet conditionally adds the DFU (Device Firmware Update) subdirectory as well as other modules that are dependent on specific configuration flags, enhancing the device's upgradability.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(dfu)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_PCD OR CONFIG_PCD_APP OR CONFIG_PCD_NET) add_subdirectory(pcd) endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of SUPL Support in GNSS Application\nDESCRIPTION: Conditionally adds the SUPL support source file (gnss_supl_support.c) to the 'app' target if the CONFIG_SUPL_CLIENT_LIB option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/gnss/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_SUPL_CLIENT_LIB app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/gnss_supl_support.c)\n```\n\n----------------------------------------\n\nTITLE: Setting RTOS Mutex and Abort Handling in C\nDESCRIPTION: Added support for setting RTOS-specific mutex and abort handling in Arm CC310 crypto libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.1.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nnrf_cc310_platform_readme\n```\n\n----------------------------------------\n\nTITLE: Updating Bluetooth LE Service UUID Array in C++\nDESCRIPTION: Update the sUuidServices array in the app_task.cpp file to include the new Bluetooth LE service UUID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstatic bt_uuid *sUuidMyBtService = BT_UUID_MY_BT_SERVICE;\nstatic bt_uuid *sUuidServices[] = { sUuidLbs, sUuidEs, sUuidMyBtService};\n```\n\n----------------------------------------\n\nTITLE: Installing Minicom on Ubuntu for DTM Testing\nDESCRIPTION: Command to install the Minicom terminal on Ubuntu for use in Direct Test Mode testing with Bluetooth Low Energy devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/direct_test_mode/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install minicom\n```\n\n----------------------------------------\n\nTITLE: Adding GPIO Forwarder Node for nRF53 Series\nDESCRIPTION: This code snippet adds a GPIO forwarder node for the nRF53 Series device to pass control over the GPIO pins from the application core to the network core. It specifies the GPIOs for controlling TX_EN, RX_EN, PDN, and additional features of the nRF21540 device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf21540_gpio_spi.rst#2025-04-21_snippet_2\n\nLANGUAGE: device tree\nCODE:\n```\n&gpio_fwd {\n   nrf21540-gpio-if {\n      gpios = <&gpio0 11 0>,   /* tx-en-gpios */\n              <&gpio0 12 0>,   /* rx-en-gpios */\n              <&gpio0 13 0>,   /* pdn-gpios */\n              <&gpio0 14 0>,   /* ant-sel-gpios */\n              <&gpio0 15 0>;   /* mode-gpios */\n   };\n   nrf21540-spi-if {\n      gpios = <&gpio0 21 0>,   /* cs-gpios */\n              <&gpio1 15 0>,   /* SPIM_SCK */\n              <&gpio1 14 0>,   /* SPIM_MISO */\n              <&gpio1 13 0>;   /* SPIM_MOSI */\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying SDFW version with nrfutil\nDESCRIPTION: This command uses the `nrfutil` tool to retrieve the Software Delivery Firmware (SDFW) version from a specified firmware slot (`uslot`) on a device, identified by its serial number.  The command requires the `nrfutil` tool to be installed and configured. Replace `<serial_number>` with the actual serial number of the device you want to query.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_custom_pcb.rst#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnrfutil device x-sdfw-version-get --firmware-slot uslot --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Setting Enable Key Directly in Code for Matter (C++)\nDESCRIPTION: This snippet shows how to set the enable key directly in the code for the TestEventTrigger. It prepares a buffer with a predefined enable key value and then uses the SetEnableKey method to load this value into the TestEventTrigger class. This approach is useful for testing purposes or when factory data is not available.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/test_event_triggers.rst#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n/* Prepare Buffer for Test Event Trigger data which contains your \"enable key\" */\nuint8_t enableKeyData[chip::TestEventTriggerDelegate::kEnableKeyLength] = {\n    0x00, 0x11, 0x22, 0x33, 0x44, 0x55,\n    0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb,\n    0xcc, 0xdd, 0xee, 0xff\n};\n\n/* Call SetEnableKey method to load the prepared value to the TestEventTrigger class. */\nNrf::Matter::TestEventTrigger::Instance().SetEnableKey(ByteSpan {enableKeyData});\n```\n\n----------------------------------------\n\nTITLE: Provisioning Device with nRF Cloud Provisioning Service (CoAP)\nDESCRIPTION: This Python command uses the claim_and_provision_device.py script to provision and onboard a device to nRF Cloud using CoAP. It includes the --coap option to install the CoAP root CA certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\npython3 claim_and_provision_device.py --api_key \"your_api_key\" --ca=\"self_self_cert_serial_ca.pem\" --ca_key=\"self_self_cert_serial_prv.pem\" --install_ca --unclaim --id_imei --id_str \"nrf-\" --coap\n```\n\n----------------------------------------\n\nTITLE: Set Source Files for Platform\nDESCRIPTION: This snippet specifies the source files to be compiled for the platform library or executable. It includes `soc.c`, which likely contains system-on-chip (SoC) specific initialization code for the Nordic NRF54L series. `ZEPHYR_BASE` is a CMake variable that points to the root directory of the Zephyr RTOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf54l15_cpuapp/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(platform_s\n  PRIVATE\n  ${ZEPHYR_BASE}/soc/nordic/nrf54l/soc.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Inter-Packet Gap to Zero\nDESCRIPTION: Command to explicitly set the inter-packet gap to zero for continuous transmission. This can be used when a specific timing between packets is required in testing scenarios.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ wifi_radio_test tx_pkt_gap 0\n```\n\n----------------------------------------\n\nTITLE: Linking fmdn with other libraries\nDESCRIPTION: These commands link the 'fmdn' library with the 'fp_crypto' and 'fp_storage' libraries. These are PRIVATE dependencies, meaning the linking is not exposed to downstream consumers of the 'fmdn' library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_link_libraries(fmdn PRIVATE fp_crypto)\ntarget_link_libraries(fmdn PRIVATE fp_storage)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories\nDESCRIPTION: Specifies include directories for the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE\n    src\n    ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: RF Tool RX/TX Duty Cycle Configuration 2 (Server)\nDESCRIPTION: This command configures the DECT RF tool for simultaneous receive and transmit (RX/TX) operation on the server side with different subslot counts. It enables RX find sync, sets RX/TX subslot and idle subslot counts, sets frame repeat count, and specifies channel 1677.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool -m rx_tx --rx_find_sync --rx_subslot_count 17 --rx_idle_subslot_count 3 --tx_subslot_count 16 --tx_idle_subslot_count 4 --frame_repeat_count 15 -c 1677\n```\n\n----------------------------------------\n\nTITLE: Enabling USB Remote Wakeup in nRF Desktop (C)\nDESCRIPTION: Added a Kconfig option to enable USB wakeup functionality in the nRF Desktop application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.2.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nCONFIG_DESKTOP_USB_REMOTE_WAKEUP\n```\n\n----------------------------------------\n\nTITLE: Enabling Matter Smart Plugin Functionality\nDESCRIPTION: Command for enabling the Matter smart plugin functionality with a specified board target\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nwest build -b *board_target* -p -- -Dmatter_bridge_SNIPPET=onoff_plug\n```\n\n----------------------------------------\n\nTITLE: Exposing firmware info API in C\nDESCRIPTION: The fw_info_ext_api_provide function was exposed as an external API to allow MCUboot to provide external APIs from the bootloader to its images.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.3.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nfw_info_ext_api_provide(...);\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Information Client Library in nRF Connect SDK with CMake\nDESCRIPTION: This CMake snippet creates a Zephyr library for the device information client component. It specifies the source file 'dev_info_client.c' to be compiled and includes the common directory as an include path. The library is part of the Nordic Semiconductor nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_rpc/dev_info/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(\n  dev_info_client.c\n)\n\nzephyr_library_include_directories(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../common\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Platform Check Content Integration Test with CMake\nDESCRIPTION: This CMake script sets up an integration test suite for SUIT platform check content functionality. It defines the minimum CMake version, finds the Zephyr package, sets up the project, includes test templates, and links several SUIT-related libraries necessary for testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/check_content/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_plat_check_content)\ninclude(../cmake/test_template.cmake)\n\nzephyr_library_link_libraries(suit_platform_interface)\nzephyr_library_link_libraries(suit_memptr_storage_interface)\nzephyr_library_link_libraries(suit_stream_sinks_interface)\nzephyr_library_link_libraries(suit_manifest_variables)\n```\n\n----------------------------------------\n\nTITLE: Linker Script Configuration\nDESCRIPTION: Adds custom linker sections from the iterables.ld file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/lwm2m_fota_utils/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_linker_sources(SECTIONS src/iterables.ld)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Pair Provisioning Parameters in Windows\nDESCRIPTION: Command to provide Fast Pair Model ID and Anti-Spoofing Private Key as build parameters on Windows. The parameters use the new sysbuild Kconfig options format.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_3.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-DSB_CONFIG_BT_FAST_PAIR_MODEL_ID=0xFFFFFF -DSB_CONFIG_BT_FAST_PAIR_ANTI_SPOOFING_PRIVATE_KEY='\"AbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbA=\"'\n```\n\n----------------------------------------\n\nTITLE: Authenticating Bluetooth LE Bridged Device\nDESCRIPTION: CLI command to enter the authentication pincode for a Bluetooth LE bridged device\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/matter_bridge_testing.txt#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmatter_bridge pincode 1 350501\n```\n\n----------------------------------------\n\nTITLE: Building CoreMark with Multiple Thread Configuration\nDESCRIPTION: Command to build the CoreMark benchmark using multiple threads during execution.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/benchmarks/coremark/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -b *board_target* -- -DFILE_SUFFIX=multiple_threads\n```\n\n----------------------------------------\n\nTITLE: Building HPF GPIO with ICMSG Backend\nDESCRIPTION: Command sequence for building and flashing the HPF GPIO application with ICMSG backend support. The build command includes necessary sysbuild configurations and overlay file specifications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/hpf/gpio/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf54l15dk/nrf54l15/cpuapp -- -DSB_CONFIG_PARTITION_MANAGER=n -DSB_CONFIG_HPF=y -DSB_CONFIG_HPF_GPIO=y -DSB_CONFIG_HPF_GPIO_BACKEND_ICMSG=y -DEXTRA_DTC_OVERLAY_FILE=\"./boards/nrf54l15dk_nrf54l15_cpuapp_hpf_gpio.overlay\"\nwest flash\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This CMake snippet initializes the project by specifying the minimum CMake version, including a test template, defining the project name, and setting the source files for the test binary. It includes the main test file and the SUIT platform authentication implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_authorize_component_id/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(suit_plat_authorize_component_id)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/sdfw/src/suit_plat_authenticate.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum CMake Version and Finding Zephyr Package\nDESCRIPTION: This snippet configures the minimum version of CMake required and locates the Zephyr package needed for building the project. It sets up the project environment for the remote application using CMake's capabilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_counter/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Automatic Installation of ZAP Tool\nDESCRIPTION: The snippet details automatic installation steps for the ZAP tool using Matter west commands, specifying how to set the Matter SDK path and install the appropriate ZAP version. Constraints mention potential errors when SDK versions mismatch. The result includes a downloaded ZAP tool in the .zap-install directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/tools.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest zap-gui\n```\n\nLANGUAGE: console\nCODE:\n```\nwest zap-gui -m <path_to_Matter_SDK>\n```\n\n----------------------------------------\n\nTITLE: CMake Include Directories Setup\nDESCRIPTION: This snippet configures the include directories for the application, ensuring that the necessary header files for nRF RPC device information server and common components are available during compilation. It adds include paths for the nRF RPC modules and the common directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_rpc/dev_info/server/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_include_directories(app PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/nrf_rpc/dev_info/common\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/nrf_rpc/dev_info/server\n  ../common\n)\"\n```\n\n----------------------------------------\n\nTITLE: Checking Out Release Tag in nRF Connect SDK\nDESCRIPTION: Commands to check out the v2.4.1 release tag in the nRF Connect SDK manifest repository and update the west workspace.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.4.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest update\n```\n\n----------------------------------------\n\nTITLE: Configuring DFU Target Test Project in CMake\nDESCRIPTION: Sets up a CMake project for testing DFU target functionality. Configures required version, finds Zephyr package, adds source files, and sets up compilation options including buffer size and logging levels for MCUboot-based DFU.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/dfu/dfu_target/mcuboot_bootloader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(dfu_target_test)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntarget_sources(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/dfu/dfu_target/src/dfu_target.c\n  )\n\ntarget_include_directories(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/dfu/include\n  )\n\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_IMG_BLOCK_BUF_SIZE=4096\n  -DCONFIG_DFU_TARGET_LOG_LEVEL=2\n  -DCONFIG_DFU_TARGET_MCUBOOT=1\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding BLE Humidity and Temperature Sensor Support\nDESCRIPTION: Adds source files for Humidity and Temperature sensor bridged devices, and environmental data provider when both sensors are enabled with BLE connectivity.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_BRIDGE_HUMIDITY_SENSOR_BRIDGED_DEVICE)\n    target_sources(app PRIVATE\n        src/bridged_device_types/humidity_sensor.cpp\n    )\nendif() # CONFIG_BRIDGE_HUMIDITY_SENSOR_BRIDGED_DEVICE\n\nif(CONFIG_BRIDGE_TEMPERATURE_SENSOR_BRIDGED_DEVICE)\n    target_sources(app PRIVATE\n        src/bridged_device_types/temperature_sensor.cpp\n    )\nendif() # CONFIG_BRIDGE_TEMPERATURE_SENSOR_BRIDGED_DEVICE\n\n# Assume it makes no sense to support BLE environmental sensor without all Matter counterparts\nif(CONFIG_BRIDGE_TEMPERATURE_SENSOR_BRIDGED_DEVICE AND CONFIG_BRIDGE_HUMIDITY_SENSOR_BRIDGED_DEVICE)\n    target_sources(app PRIVATE\n        src/ble_providers/ble_environmental_data_provider.cpp\n    )\nendif() # CONFIG_BRIDGE_TEMPERATURE_SENSOR_BRIDGED_DEVICE AND CONFIG_BRIDGE_HUMIDITY_SENSOR_BRIDGED_DEVICE\n```\n\n----------------------------------------\n\nTITLE: Finding the Zephyr package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr development environment.  It requires the Zephyr package and uses the environment variable `ZEPHYR_BASE` as a hint for the location of the Zephyr installation.  Successfully finding Zephyr is a prerequisite for building Zephyr applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/grtc_idle/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for DFU Multi-Image Test Project\nDESCRIPTION: Sets up the CMake project with Zephyr, defines source files, and configures the project name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/dfu/dfu_multi_image/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(dfu_multi_image_test)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Storing Current State as a Scene\nDESCRIPTION: This command stores the current state of the Scene Client as a scene and waits for a response, facilitating state management within the mesh.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scene_cli.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models scene store <Scene>\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth DFU SMP Source\nDESCRIPTION: This snippet includes the Secure Management Protocol for Device Firmware Update (DFU) source file when CONFIG_BT_DFU_SMP is defined. This enables secure firmware updates over Bluetooth.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_DFU_SMP dfu_smp.c)\n```\n\n----------------------------------------\n\nTITLE: Writing UICR Value for Right Headset Configuration\nDESCRIPTION: Command to write value 1 to UICR address 0x00FF80F4 to configure a device as right headset.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/building.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device x-write --address 0x00FF80F4 --value 1\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SUIT Component Compatibility Test\nDESCRIPTION: Configures CMake build environment for SUIT component compatibility testing. Sets minimum CMake version, includes Zephyr package, defines project parameters, and configures build targets with necessary include paths and source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/component_compatibility_check/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_suit_component_compatibility_check)\ninclude(../cmake/test_template.cmake)\n\ntarget_include_directories(app PRIVATE\n  ${SUIT_SUBSYS_DIR}/mci/include\n  ${SUIT_SUBSYS_DIR}/storage/include\n)\n\ntarget_sources(app PRIVATE\n  # Use nRF54H20-specific MCI implementation.\n  ${SUIT_SUBSYS_DIR}/mci/src/suit_mci_nrf54h20.c\n  ${SUIT_SUBSYS_DIR}/platform/sdfw/src/suit_plat_component_compatibility.c\n  ${SUIT_SUBSYS_DIR}/storage/src/suit_storage_nrf54h20.c\n)\n\n# Link with the CMake target, that includes SUIT platform internal APIs header\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_storage_interface)\nzephyr_library_link_libraries(suit_platform_interface)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenThread Network Parameters via CLI\nDESCRIPTION: Demonstrates configuring essential Thread network parameters using OpenThread CLI commands. Sets the channel to 11, PAN ID to 0xabcd, and network key to a 32-character hexadecimal value. These parameters must be consistent across all nodes in the Thread network.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/thread_configure_network.txt#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot channel 11\nDone\nuart:~$ ot panid 0xabcd\nDone\nuart:~$ ot networkkey 00112233445566778899aabbccddeeff\nDone\n```\n\n----------------------------------------\n\nTITLE: Including Sensor Source Files using CMake in Zephyr\nDESCRIPTION: This CMake script conditionally includes C source files for different sensors in a Zephyr app based on specific configuration options. Dependencies include the Zephyr build environment and relevant sensor source files located in the same directory. Key functionalities involve checking for configuration options like CONFIG_ACCELEROMETER and including corresponding sensor source files. The script requires a Zephyr project setup with appropriate configurations for sensor integrations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/sensors/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(include)\n\ntarget_sources_ifdef(CONFIG_ACCELEROMETER\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/accelerometer.c)\n\ntarget_sources_ifdef(CONFIG_ENVIRONMENT_SENSOR\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/env_sensor.c)\n\ntarget_sources_ifdef(CONFIG_LIGHT_SENSOR\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/light_sensor.c)\n\ntarget_sources_ifdef(CONFIG_GNSS\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/gnss_module.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: This snippet initializes the project with the name 'npm1300_fuel_gauge'. It is required for CMake to manage the build process for the specified project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_fuel_gauge/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nproject(npm1300_fuel_gauge)\n```\n\n----------------------------------------\n\nTITLE: Configuring toctree for DFU Libraries Documentation in reStructuredText\nDESCRIPTION: This snippet sets up a toctree directive to include all subpages related to DFU libraries. It configures the toctree to display a maximum depth of 1, include all files using a glob pattern, and sets a caption for the subpages section.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   *\n```\n\n----------------------------------------\n\nTITLE: Building for nRF5340 Multicore Board with nRF2220 EK Shield\nDESCRIPTION: Command-line example showing how to build for the nRF5340 Development Kit (multicore) with the nRF2220 EK shield using west build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/2220ek_dev_guide.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf2220ek\n```\n\n----------------------------------------\n\nTITLE: NIDD Network Configuration Example\nDESCRIPTION: Sample configuration code for NIDD (Non-IP Data Delivery) connection in the slm_auto_connect.h file, showing network-specific default system mode and PDN configuration parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_description.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Network-specific default system mode configured by %XSYSTEMMODE (refer to AT command manual) */\n0,        /* LTE support */\n1,        /* NB-IoT support */\n0,        /* GNSS support, also define CONFIG_MODEM_ANTENNA if not Nordic DK */\n0,        /* LTE preference */\n/* Network-specific default PDN configured by +CGDCONT and +CGAUTH (refer to AT command manual) */\ntrue,     /* PDP context definition required or not */\n\"Non-IP\", /* PDP type: \"IP\", \"IPV6\", \"IPV4V6\", \"Non-IP\" */\n\"\",       /* Access point name */\n0,        /* PDP authentication protocol: 0(None), 1(PAP), 2(CHAP) */\n\"\",       /* PDN connection authentication username */\n\"\"        /* PDN connection authentication password */\n```\n\n----------------------------------------\n\nTITLE: Target Include Directories\nDESCRIPTION: This snippet adds the SUIT metadata include directory to the target's private include paths. This ensures that the header files for the SUIT metadata module are available during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_metadata/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/metadata/include)\"\n```\n\n----------------------------------------\n\nTITLE: Updating external_flash partition configuration\nDESCRIPTION: Reconfigures the external_flash partition to allocate all available memory space after the MCUboot partitions. This ensures efficient use of the external memory device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf70_fw_patch_update.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nexternal_flash:\n    address: 0x171000\n    size: 0x68F000\n    device: MX25R64\n    region: external_flash\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Properties Configuration\nDESCRIPTION: Sets properties for various source files based on different configuration options like FOTA download, MCUboot, and full modem update support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/fota_common/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_FOTA_DOWNLOAD)\nset_source_files_properties(\n\t${NRF_SDK_DIR}/subsys/net/lib/fota_download/src/fota_download.c\n\tDIRECTORY ${NRF_SDK_DIR}/subsys/net/lib/fota_download/\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\nendif()\n\nif (CONFIG_MCUBOOT_IMG_MANAGER)\nset_source_files_properties(\n\t${ZEPHYR_BASE}/subsys/dfu/boot/mcuboot.c\n\tDIRECTORY ${ZEPHYR_BASE}/subsys/dfu/boot/\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\nendif()\n\nif (CONFIG_NRF_CLOUD_FOTA_FULL_MODEM_UPDATE)\nset_source_files_properties(\n\t${NRF_SDK_DIR}/subsys/dfu/dfu_target/src/dfu_target_full_modem.c\n\tDIRECTORY ${NRF_SDK_DIR}/subsys/dfu/dfu_target/\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\n\nset_source_files_properties(\n\t${NRF_SDK_DIR}/subsys/dfu/fmfu_fdev/src/fmfu_fdev.c\n\tDIRECTORY ${NRF_SDK_DIR}/subsys/dfu/fmfu_fdev/\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\n\nset_source_files_properties(\n\t${NRF_SDK_DIR}/lib/nrf_modem_lib/nrf_modem_lib.c\n\tDIRECTORY ${NRF_SDK_DIR}/lib/nrf_modem_lib/\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr Project with CMake\nDESCRIPTION: This CMake script initializes a Zephyr project, specifying the minimum required CMake version and handling multi-image applications using sysbuild. It includes a check that enforces the use of sysbuild via a command-line argument. The project is set to 'idle_comp', with the main source file located at 'src/main.c'. Dependencies include Zephyr and a specific CMake version (3.20.0 or higher).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_comp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# Copyright (c) 2024 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n\nproject(idle_comp)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Increased Current Consumption When Using Non-Guaranteed HFCLK - MPSL - Documentation Format\nDESCRIPTION: This entry warns that using a specified macro can lead to unexpectedly high current consumption during timeslot events, indicating that developers should consider alternate macros for optimal power management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_46\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-16506: Higher current consumption between timeslot events made with :c:macro:`MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE` When timeslot requests are made with :c:macro:`MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE`, the current consumption between events is higher than expected.\n```\n\n----------------------------------------\n\nTITLE: Peak Heap Usage Reset Command - Console\nDESCRIPTION: This console command resets the current peak memory usage values, providing a clean slate for heap usage measurement. No additional dependencies are required, and the expected output will indicate successful resetting of peak values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/memory_optimization.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter stat reset\n```\n\n----------------------------------------\n\nTITLE: Enabling Modem Traces with Flash Backend using CMake\nDESCRIPTION: Command to add the nrf91-modem-trace-ext-flash snippet when building an application with CMake. This enables modem tracing with external flash storage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_snippet.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n-D<image_name>_SNIPPET=\"nrf91-modem-trace-ext-flash\" [...]\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion in CMake\nDESCRIPTION: Illustrates conditional inclusion of a source file in CMake based on configuration options. Requires understanding of CMake syntax and project structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/cheat_sheet.rst#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n   if(CONFIG_NRF_MODEM_LIB_TRACE)\n\n   zephyr_library()\n   # Only add 'custom' backend to compilation when selected.\n   zephyr_library_sources_ifdef(\n     CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_MY_TRACE_BACKEND\n     path/to/my_trace_backend.c\n   )\n\n   endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional DFU Target Source Inclusions\nDESCRIPTION: Conditionally includes various DFU target implementation source files based on configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dfu/dfu_target/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_DFU_TARGET_STREAM\n  src/dfu_target_stream.c\n  )\nzephyr_library_sources_ifdef(CONFIG_DFU_TARGET_MODEM_DELTA\n  src/dfu_target_modem_delta.c\n  )\nzephyr_library_sources_ifdef(CONFIG_DFU_TARGET_FULL_MODEM\n  src/dfu_target_full_modem.c\n  )\nzephyr_library_sources_ifdef(CONFIG_DFU_TARGET_MCUBOOT\n  src/dfu_target_mcuboot.c\n  )\nzephyr_library_sources_ifdef(CONFIG_DFU_TARGET_SMP\n  src/dfu_target_smp.c\n  )\nzephyr_library_sources(src/dfu_stream_flatten.c)\n```\n\n----------------------------------------\n\nTITLE: Sample Console Output for Modem Firmware Update\nDESCRIPTION: Example console output showing the progress and status of a modem firmware update operation, including verification steps and timing information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/fmfu_smp_svr/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nrf91 Series modem firmware upgrade over serial port example started.\n{\n\"duration\": 406,\n\"error_code\": \"Ok\",\n\"operation\": \"open_uart\",\n\"outcome\": \"success\",\n\"progress_percentage\": 100\n}\nProgramming modem bootloader.\n...\nFinished with file.\nVerifying memory range 1 of 3\nVerifying memory range 2 of 3\nVerifying memory range 3 of 3\nVerification success.\n{\n\"duration\": 5,\n\"error_code\": \"Ok\",\n\"operation\": \"close_uart\",\n\"outcome\": \"success\",\n\"progress_percentage\": 100\n}\n------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Defining a Message Sequence Chart in RST\nDESCRIPTION: This RST snippet shows how to define a Message Sequence Chart (MSC) using the ``.. msc::`` directive. MSCs are used for illustrating interactions in a sequence diagram format. The snippet includes the layout and content structure needed for creating an MSC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/cheat_sheet.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n.. msc::\n    hscale = \"1.3\";\n    Module,Application;\n    Module<<Application      [label=\"nrf_cloud_connect() returns successfully\"];\n    Module>>Application      [label=\"NRF_CLOUD_EVT_TRANSPORT_CONNECTED\"];\n    Module>>Application      [label=\"NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST\"];\n    Module<<Application      [label=\"nrf_cloud_user_associate()\"];\n    Module>>Application      [label=\"NRF_CLOUD_EVT_USER_ASSOCIATED\"];\n    Module>>Application      [label=\"NRF_CLOUD_EVT_READY\"];\n    Module>>Application      [label=\"NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED\"];\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Property Value from a Server\nDESCRIPTION: Fetches the value of a specified property from a target server, defined by its 'Kind' and 'ID'. This is useful for reading property values needed for various client-side operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_prop_cli.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmesh models prop prop-get <Kind> <ID>\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for nrf_auraconfig\nDESCRIPTION: Sets up the CMake project, finds the Zephyr package, and links with the babblekit library. It also configures include directories for various components of the nRF5340 Audio application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/bluetooth/bsim/nrf_auraconfig/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_auraconfig)\n\nadd_subdirectory(${ZEPHYR_BASE}/tests/bsim/babblekit babblekit)\ntarget_link_libraries(app PRIVATE babblekit)\n\n# Include application events and configuration headers\nzephyr_library_include_directories(app PRIVATE\n    ${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/nrf_auraconfig/include\n    ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/include\n    ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/bluetooth\n    ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules\n    ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/utils/macros\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files\nDESCRIPTION: This snippet uses the `target_sources` command to specify the source files for the `app` target. It adds the `src/qt_app_main.c` file as a private source file for the target, meaning it's only used to build the target itself and not exposed to other targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_sources(app PRIVATE src/qt_app_main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Simulated Pressure Sensor Data Provider Methods\nDESCRIPTION: Implements the initialization, notification, and update methods for the simulated pressure sensor data provider, including random pressure value generation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nvoid SimulatedPressureSensorDataProvider::Init()\n{\n   k_timer_init(&mTimer, SimulatedPressureSensorDataProvider::TimerTimeoutCallback, nullptr);\n   k_timer_user_data_set(&mTimer, this);\n   k_timer_start(&mTimer, K_MSEC(kMeasurementsIntervalMs), K_MSEC(kMeasurementsIntervalMs));\n}\n\nvoid SimulatedPressureSensorDataProvider::TimerTimeoutCallback(k_timer *timer)\n{\n   if (!timer || !timer->user_data) {\n      return;\n   }\n\n   DeviceLayer::PlatformMgr().ScheduleWork(\n      [](intptr_t p) {\n         SimulatedPressureSensorDataProvider *provider =\n            reinterpret_cast<SimulatedPressureSensorDataProvider *>(p);\n\n         /* Get some random data to emulate sensor measurements. */\n         provider->mPressure = chip::Crypto::GetRandU16() % (kMaxRandomPressure - kMinRandomPressure) + kMinRandomPressure;\n\n         provider->NotifyUpdateState(Clusters::PressureMeasurement::Id,\n            Clusters::PressureMeasurement::Attributes::MeasuredValue::Id,\n            &provider->mPressure, sizeof(provider->mPressure));\n      },\n      reinterpret_cast<intptr_t>(timer->user_data));\n}\n\nvoid SimulatedPressureSensorDataProvider::NotifyUpdateState(chip::ClusterId clusterId, chip::AttributeId attributeId,\n                           void *data, size_t dataSize)\n{\n   if (mUpdateAttributeCallback) {\n      mUpdateAttributeCallback(*this, Clusters::PressureMeasurement::Id,\n               Clusters::PressureMeasurement::Attributes::MeasuredValue::Id, data,\n               dataSize);\n   }\n}\n\nCHIP_ERROR SimulatedPressureSensorDataProvider::UpdateState(chip::ClusterId clusterId, chip::AttributeId attributeId,\n                           uint8_t *buffer)\n{\n   return CHIP_ERROR_UNSUPPORTED_CHIP_FEATURE;\n}\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Cellular Samples\nDESCRIPTION: RST markup defining the structure of the cellular samples documentation, including toctree configuration for sample README files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/cellular.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _cellular_samples:\n\nCellular samples\n################\n\nThis section lists the available |NCS| samples for the :ref:`cellular IoT development <ug_lte>`.\nAdditionally, you might want to check the :ref:`memfault_sample` sample and the :ref:`networking_samples`.\n\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n\n|filter_samples_by_board|\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/cellular/*/README\n   ../../../samples/cellular/http_update/*/README\n```\n\n----------------------------------------\n\nTITLE: Including BH1749 Driver Header File in C\nDESCRIPTION: This snippet shows how to include the header file for the BH1749 driver in a C program. The header file contains the necessary declarations and definitions for using the BH1749 driver.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/bh1749.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <drivers/sensor/bh1749/bh1749.h>\n```\n\n----------------------------------------\n\nTITLE: Enabling DPD Hardware Block\nDESCRIPTION: Command to enable the Digital Pre-Distortion (DPD) hardware block, which can be used only during tone transmission as firmware handles DPD during packet transmission.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test dpd 1\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake for Locator Tag Project with Nordic SDK\nDESCRIPTION: Configures the CMake build process for a locator tag project using the Nordic SDK. It sets minimum CMake version, defines application configuration directory, and sets up the project with Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\n# The sample uses a separate directory for configuration files.\nset(APPLICATION_CONFIG_DIR \"${CMAKE_CURRENT_LIST_DIR}/configuration\")\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(locator_tag)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for West NCS Provision Verification\nDESCRIPTION: Sets up a CMake project configuration for verifying west NCS provisioning. Requires CMake 3.20.0 or higher and depends on the Zephyr package. Configures the project with a single source file main.c.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/kmu/verify_west_ncs_provision/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(verify_west_ncs_provision)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Power Model Structure in C\nDESCRIPTION: Structure defining a custom FEM power model with init and fetch callbacks. The init callback is optional and can be set to NULL if not needed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_power_models.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nmpsl_fem_power_model_t custom_model = {\n    .init = custom_init_callback,  // Optional, can be NULL\n    .fetch = custom_fetch_callback  // Mandatory\n};\n```\n\n----------------------------------------\n\nTITLE: ESB TX Success Event Macro\nDESCRIPTION: This snippet references the `ESB_EVENT_TX_SUCCESS` macro, which indicates one or more successful transmission operations. This macro is used for event handling in the Enhanced ShockBurst protocol.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/esb/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n\":c:macro:`ESB_EVENT_TX_SUCCESS`\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Fast Pair Library\nDESCRIPTION: Creates a named Zephyr library and configures include directories for Fast Pair implementation. Includes directories for custom headers and Bluetooth subsystem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_named(fast_pair)\n\nzephyr_library_include_directories(include)\nzephyr_library_include_directories(include/common)\nzephyr_library_include_directories(${ZEPHYR_BASE}/subsys/bluetooth)\n```\n\n----------------------------------------\n\nTITLE: Setting Advertising Name with Shell Command\nDESCRIPTION: Command to set the advertising name metadata for a Broadcast Isochronous Group. The maximum length is defined by CONFIG_BT_DEVICE_NAME_MAX.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnac adv_name <name> <BIG index>\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Bluetooth Library\nDESCRIPTION: This snippet initializes the Bluetooth RPC library in the Zephyr operating system by linking relevant library components required for Bluetooth functionalities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/rpc/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_link_libraries(subsys_bluetooth_rpc)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_link_libraries(subsys__bluetooth)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This command uses CMake's `find_package` function to locate the Zephyr RTOS package. It requires the Zephyr package and provides a hint for its location using the `ZEPHYR_BASE` environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/multicore_system_off/remote/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr build system. It requires the Zephyr package and uses the `ZEPHYR_BASE` environment variable as a hint for the package location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/uarte_suspend/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Setting VPR Timer Count Mode in C\nDESCRIPTION: Function to configure the counting behavior of VPR TIMER. Modes include stopping at zero, wrapping to maximum value, reloading a preset value, or operating in trigger/combined mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_csr_vtim_count_mode_set()\n```\n\n----------------------------------------\n\nTITLE: Upper Edge Backoff Kconfig Parameters\nDESCRIPTION: Kconfig parameters for configuring upper edge transmission power backoff across different frequency bands and frame types. These parameters are used to reduce power at the upper edge of frequency bands to meet regulatory requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/band_edge_compensation.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF70_BAND_2G_UPPER_EDGE_BACKOFF_DSSS\nCONFIG_NRF70_BAND_2G_UPPER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_2G_UPPER_EDGE_BACKOFF_HE\nCONFIG_NRF70_BAND_UNII_1_UPPER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_UNII_1_UPPER_EDGE_BACKOFF_HE\nCONFIG_NRF70_BAND_UNII_2A_UPPER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_UNII_2A_UPPER_EDGE_BACKOFF_HE\nCONFIG_NRF70_BAND_UNII_2C_UPPER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_UNII_2C_UPPER_EDGE_BACKOFF_HE\nCONFIG_NRF70_BAND_UNII_3_UPPER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_UNII_3_UPPER_EDGE_BACKOFF_HE\nCONFIG_NRF70_BAND_UNII_4_UPPER_EDGE_BACKOFF_HT\nCONFIG_NRF70_BAND_UNII_4_UPPER_EDGE_BACKOFF_HE\n```\n\n----------------------------------------\n\nTITLE: Setting up Nordic nRF Connect SDK Project using CMake\nDESCRIPTION: This CMake configuration file sets up the basic project structure for a Nordic nRF Connect SDK application. It specifies the minimum CMake version, finds the Zephyr package, configures the project, and defines the main source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/sms/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Capturing Serial Output with Picocom\nDESCRIPTION: Command to capture serial output from the device using picocom. This stores the audio data in a raw file format.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/audio/dmic_dump_buffer/README.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npicocom -f n -b 921600 /dev/serial/by-id/usb-SEGGER_J-Link_00105xxx-if02 > /home/user/sound_capture.raw\n```\n\n----------------------------------------\n\nTITLE: LwM2M Server Configuration Options\nDESCRIPTION: Kconfig options for configuring server-specific settings including custom URIs, security tags, and bootstrap server settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/app_integration.rst#2025-04-21_snippet_2\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_LWM2M_CARRIER_CUSTOM_URI\nCONFIG_LWM2M_CARRIER_IS_BOOTSTRAP_SERVER\nCONFIG_LWM2M_CARRIER_SERVER_SEC_TAG\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for plat_fetch_app\nDESCRIPTION: This snippet sets up the CMake build system for the plat_fetch_app project. It specifies the minimum required CMake version, includes a test template, and defines source files for the build binary. Required dependencies include CMake 3.20.0 or higher and Nordic's SDK. Inputs include the source file paths and CMake variables like SUIT_SUBSYS_DIR. Outputs are build artifacts like testbinary. It assumes the relevant files and directories exist at specified paths.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/app_specific/suit_plat_fetch_app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(plat_fetch_app)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/app/src/suit_plat_fetch_app_specific.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_error_convert.c\n)\n```\n\n----------------------------------------\n\nTITLE: Creating SUIT Stream Sinks Interface Library\nDESCRIPTION: This CMake code creates an interface library named `suit_stream_sinks_interface`. It sets the include directories for the interface and conditionally links it against `suit_memptr_storage_interface` if either `CONFIG_SUIT_STREAM_SINK_MEMPTR` or `CONFIG_SUIT_STREAM_SINK_FLASH` is defined. It also links against `suit_platform_err`.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/stream/stream_sinks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_interface_library_named(suit_stream_sinks_interface)\ntarget_include_directories(suit_stream_sinks_interface INTERFACE include)\nif(CONFIG_SUIT_STREAM_SINK_MEMPTR OR CONFIG_SUIT_STREAM_SINK_FLASH)\ntarget_link_libraries(suit_stream_sinks_interface INTERFACE suit_memptr_storage_interface)\nendif() # CONFIG_SUIT_STREAM_SINK_MEMPTR\ntarget_link_libraries(suit_stream_sinks_interface INTERFACE suit_platform_err)\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth LE Service Header in C++\nDESCRIPTION: Include the header file containing the Bluetooth LE service declaration in the app_task.cpp file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include \"my_bt_service.h\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Chip Temperature Sensor Get Function - C\nDESCRIPTION: This snippet modifies the chip temperature sensor's data retrieval function to use the new bt_mesh_sensor_value structure instead of the old sensor_value structure. It demonstrates the proper fetching and encoding of temperature data from a sensor to comply with updated standards.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nstatic int chip_temp_get(struct bt_mesh_sensor_srv *srv,\n                                    struct bt_mesh_sensor *sensor,\n                                    struct bt_mesh_msg_ctx *ctx,\n           -                         struct sensor_value *rsp)\n           +                         struct bt_mesh_sensor_value *rsp)\n           {\n           +        struct sensor_value channel_val;\n                   int err;\n\n                   sensor_sample_fetch(dev);\n\n           -        err = sensor_channel_get(dev, SENSOR_DATA_TYPE, rsp);\n           +        err = sensor_channel_get(dev, SENSOR_DATA_TYPE, &channel_val);\n                   if (err) {\n                           printk(\"Error getting temperature sensor data (%d)\\n\", err);\n                   }\n           +        err = bt_mesh_sensor_value_from_sensor_value(\n           +                sensor->type->channels[0].format, &channel_val, rsp);\n           +        if (err) {\n           +                printk(\"Error encoding temperature sensor data (%d)\\n\", err);\n           +        }\n\n                   return err;\n           }\n```\n\n----------------------------------------\n\nTITLE: Configuring LWM2M IPSO Color Sensor Source\nDESCRIPTION: This snippet uses the `target_sources_ifdef` CMake function to conditionally include the `ipso_colour_sensor.c` source file in the build. It checks if `CONFIG_LWM2M_IPSO_APP_COLOUR_SENSOR` is defined, and if so, adds the specified source file to the `app` target with the `PRIVATE` visibility, meaning the dependency is only for the `app` target and not propagated to other targets that depend on it. This configuration enables the LWM2M IPSO Color Sensor application when the corresponding Kconfig option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/ipso/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_LWM2M_IPSO_APP_COLOUR_SENSOR\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ipso_colour_sensor.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files and Libraries\nDESCRIPTION: Adds source files from the Zephyr SDK for the SMP server, including main and Bluetooth implementation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/extxip_smp_svr/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src/main.c)\ntarget_sources_ifdef(CONFIG_MCUMGR_TRANSPORT_BT app PRIVATE ${ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src/bluetooth.c)\n```\n\n----------------------------------------\n\nTITLE: Referencing FTP Client Configuration Options\nDESCRIPTION: Kconfig option that controls the keepalive timer functionality in the FTP client. Determines the interval between automatic keepalive messages sent to the server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/ftp_client.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nCONFIG_FTP_CLIENT_KEEPALIVE_TIME\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from MQTT Topic\nDESCRIPTION: Command to unsubscribe from a previously subscribed MQTT topic\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/MQTT_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT\nCODE:\n```\nAT#XMQTTUNSUB=\"nrf91/slm/mqtt/topic0\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Bluetooth LE Channel Statistics and Map Updates\nDESCRIPTION: Example console output showing Bluetooth LE channel statistics. Each channel displays its frequency offset, state, and rating. The output also shows when channel map updates occur with timestamps.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/ble_qos.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n[05407128]Channel map update\nBT_INFO={4:2:0,6:2:0,8:2:0,10:2:0,12:2:0,14:2:0,16:2:0,18:2:0,20:2:0,22:2:0,24:2:0,28:2:0,30:2:0,32:2:0,34:2:0,36:2:0,38:2:0,40:2:0,42:1:30,44:1:26,46:1:30,48:1:30,50:1:33,52:1:21,54:1:31,56:1:29,58:1:30,60:1:29,62:1:35,64:1:27,66:1:31,68:1:28,70:1:32,72:1:27,74:1:26,76:1:33,78:1:31,}\n```\n\n----------------------------------------\n\nTITLE: Example SUIT Payload-Fetch and Install Command Sequences in CBOR Diagnostic Notation\nDESCRIPTION: This snippet demonstrates the CBOR Diagnostic Notation for SUIT's payload-fetch and install sequences. The payload-fetch sequence includes directives for component index setting, parameter overriding with image digest, URI specification, and image matching. The install sequence shows how to copy data between components with appropriate validation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_intro.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/ payload-fetch / 16:<< [\n     / directive-set-component-index / 12,1 ,\n     / directive-override-parameters / 20,{\n        / image-digest / 3:<< [\n           / algorithm-id / -16 / \"sha256\" /,\n           / digest-bytes / h'0011…76543210'\n\n     ] >>,\n     / uri / 21:'http://example.com/file.bin',\n\n  } ,\n  / directive-fetch / 21,2 ,\n  / condition-image-match / 3,15\n] >>,\n\n/ install / 17:<< [\n  / directive-set-component-index / 12,0 ,\n\n  / directive-override-parameters / 20,{\n     / source-component / 22:1 / [h'02'] /,\n\n  } ,\n  / directive-copy / 22,2 ,\n  / condition-image-match / 3,15\n] >>,\n```\n\n----------------------------------------\n\nTITLE: UART Rx Disable Function Reference\nDESCRIPTION: Reference to the uart_rx_disable() function that was involved in a fix for an issue where re-enabling UART after calling this function too early could cause random hardware faults.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.3.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nuart_rx_disable\n```\n\n----------------------------------------\n\nTITLE: Running FICR Update Script on Linux/MacOS\nDESCRIPTION: This command executes the J-Link script to update the FICR on Linux or MacOS systems.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nJLinkExe -CommanderScript nrf54h20es_trim_adjust.jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Mesh Scheduler Model Test Project in CMake\nDESCRIPTION: Sets up a CMake project for testing the Bluetooth Mesh Scheduler Model. It includes necessary directories, sources, and compile options for the test environment. The configuration is specific to the nRF Connect SDK and Zephyr RTOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/scheduler_model/timing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bt_mesh_scheduler_model_test)\n\ntarget_include_directories(app PUBLIC\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh\n  ${ZEPHYR_BASE}/subsys/bluetooth\n  ../common\n  )\n\nFILE(GLOB app_sources src/*.c)\n\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/scheduler_srv.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/time_util.c\n  ../common/sched_test.c\n  )\n\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_BT_MESH_MODEL_KEY_COUNT=5\n  -DCONFIG_BT_MESH_MODEL_GROUP_COUNT=5\n  -DCONFIG_BT_LOG_LEVEL=0\n  -DCONFIG_BT_MESH_SCHEDULER_SRV=1\n  -DCONFIG_BT_MESH_USES_MBEDTLS_PSA=1\n  )\n\nzephyr_ld_options(\n    ${LINKERFLAGPREFIX},--allow-multiple-definition\n    )\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Release Notes Header\nDESCRIPTION: ReStructuredText markup defining the title and table of contents for the NCS v2.7.99-cs2 release notes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.99-cs2.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _ncs_release_notes_2799_cs2:\n\n|NCS| v2.7.99-cs2 Release Notes\n###############################\n\n.. contents::\n   :local:\n   :depth: 3\n```\n\n----------------------------------------\n\nTITLE: Setting Require PIN for Remote Operation - Console\nDESCRIPTION: This command configures the door lock to require a PIN code for remote operations, enhancing security by requiring user authentication for accessing the lock remotely. The command specifies the node ID and includes a timeout for the interaction process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n./chip-tool doorlock write require-pinfor-remote-operation 1 10 1 --timedInteractionTimeoutMs 5000\n```\n\n----------------------------------------\n\nTITLE: Advertising Request Structure in C++\nDESCRIPTION: Specifies a structure for managing Bluetooth advertising requests in C++, including priorities, intervals, and callback functions. Assumes a framework supporting span and Bluetooth data structures.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/cheat_sheet.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n      struct Request : public sys_snode_t\n      {\n         uint8_t priority;                     ///< Advertising request priority. Lower value means higher priority\n         uint32_t options;                     ///< Advertising options: bitmask of BT_LE_ADV_OPT_XXX constants from Zephyr\n         uint16_t minInterval;                 ///< Minimum advertising interval in 0.625 ms units\n         uint16_t maxInterval;                 ///< Maximum advertising interval in 0.625 ms units\n         Span<const bt_data> advertisingData;  ///< Advertising data fields\n         Span<const bt_data> scanResponseData; ///< Scan response data fields\n         OnAdvertisingStarted onStarted;       ///< (Optional) Callback invoked when the request becomes top-priority.\n         OnAdvertisingStopped onStopped;       ///< (Optional) Callback invoked when the request stops being top-priority.\n      };\n```\n\n----------------------------------------\n\nTITLE: Adding MCUboot Documentation Set in CMake\nDESCRIPTION: Adds the MCUboot documentation set with version 2.1.99 to the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_docset(mcuboot \"2.1.99\")\n```\n\n----------------------------------------\n\nTITLE: Globbing source files\nDESCRIPTION: Finds all C source files in the `src/` directory. The `FILE(GLOB)` command populates the `app_sources` variable with a list of all `.c` files found in the specified directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/writable_ndef_msg/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"FILE(GLOB app_sources src/*.c)\"\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet searches for the Zephyr package, which is essential for the project, utilizing a specific version requirement and environmental variable for its base path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/usb/hid-keyboard/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Including LED Event Table Documentation in RST\nDESCRIPTION: RST directive to include LED event documentation table from another file, specifically the event propagation section related to LEDs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/leds.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: event_propagation.rst\n    :start-after: table_leds_start\n    :end-before: table_leds_end\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for NRF 802154 Platform\nDESCRIPTION: This snippet conditionally adds source files to the nrf-802154-platform target based on the SoC compatibility and selected configurations. It checks the current configuration settings and sets the appropriate source files accordingly for NRF52X, NRF53X, and NRF54HX/54LX series.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/nrfxlib/nrf_802154/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_NRF_802154_RADIO_DRIVER OR CONFIG_NRF_802154_SERIALIZATION)\n  if (CONFIG_NRF_802154_SL)\n    if (CONFIG_SOC_COMPATIBLE_NRF52X OR CONFIG_SOC_COMPATIBLE_NRF53X)\n      target_sources(nrf-802154-platform\n        PRIVATE\n          ${CMAKE_CURRENT_SOURCE_DIR}/sl/platform/nrf_802154_hp_timer.c\n          ${CMAKE_CURRENT_SOURCE_DIR}/sl/platform/nrf_802154_platform_sl_lptimer_zephyr.c\n      )\n    elseif(CONFIG_SOC_SERIES_NRF54HX OR CONFIG_SOC_SERIES_NRF54LX)\n      target_sources(nrf-802154-platform\n        PRIVATE\n          ${CMAKE_CURRENT_SOURCE_DIR}/sl/platform/nrf_802154_platform_timestamper.c\n          ${CMAKE_CURRENT_SOURCE_DIR}/sl/platform/nrf_802154_platform_sl_lptimer_grtc.c\n          ${CMAKE_CURRENT_SOURCE_DIR}/sl/platform/nrf_802154_platform_sl_lptimer_grtc_hw_task.c\n      )\n    endif()\n  endif ()\n```\n\n----------------------------------------\n\nTITLE: RPC Client Ready Message\nDESCRIPTION: This message indicates that the RPC client is ready, signifying successful initialization of communication between devices. It's observed in the terminal emulator.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/server/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n[00:00:00.842,862] <inf> nrf_rpc_host: RPC client ready\n```\n\n----------------------------------------\n\nTITLE: Configuring UICC LwM2M Project Build in CMake\nDESCRIPTION: Sets up the CMake build configuration for a UICC LwM2M project. Includes required Zephyr package, defines project sources, and configures include directories. The build includes core UICC LwM2M functionality with ASN.1 and PKCS#15 decoding support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/uicc_lwm2m/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(uicc_lwm2m)\n\ntest_runner_generate(src/main.c)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ${ZEPHYR_NRF_MODULE_DIR}/lib/uicc_lwm2m/asn1_decode.c\n  ${ZEPHYR_NRF_MODULE_DIR}/lib/uicc_lwm2m/pkcs15_decode.c\n  ${ZEPHYR_NRF_MODULE_DIR}/lib/uicc_lwm2m/uicc_lwm2m.c\n)\n\nzephyr_include_directories(\n  ${ZEPHYR_NRF_MODULE_DIR}/lib/uicc_lwm2m/include/\n  ${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CoAP Shadow Thread Stack Size in Kconfig\nDESCRIPTION: Sets the stack size (in bytes) for the shadow delta checking thread of the sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_34\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_COAP_SHADOW_THREAD_STACK_SIZE\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library and Source Files in CMake\nDESCRIPTION: This snippet sets up the Zephyr library with specified source files using CMake. It defines 'suit_orchestrator_app.c' as part of the sources for the Zephyr library, ensuring proper build integration. There are no additional external dependencies besides an existing Zephyr environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/orchestrator_app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(src/suit_orchestrator_app.c)\n```\n\n----------------------------------------\n\nTITLE: Managing PPP Network Interface in MoSh\nDESCRIPTION: Demonstrates how to manually bring up and down the PPP network interface using MoSh commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nppp up\nppp down\n```\n\n----------------------------------------\n\nTITLE: Installing Test Directory\nDESCRIPTION: This command installs a directory containing tests for the nrf5340dk_nrf5340_cpuapp target. It deploys the test files to the specified destination folder.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf5340_cpuapp/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY   ${Trusted\\ Firmware\\ M_SOURCE_DIR}/platform/ext/target/nordic_nrf/nrf5340dk_nrf5340_cpuapp/tests\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CGMS and Adding Measurements in C\nDESCRIPTION: Example showing how to initialize the Continuous Glucose Monitoring Service and add glucose measurement records. The bt_cgms_init function must be called first, followed by bt_cgms_measurement_add to store measurement data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/cgms.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbt_cgms_init();\nbt_cgms_measurement_add();\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This command sets the minimum required version of CMake for the project. It ensures that the CMake version used to build the project meets the specified requirement.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/twim_suspend/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Checking Available Runners\nDESCRIPTION: Command to display all available runners for the current board, showing both the list of available runners and the default runner.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/programming.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest flash --context\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Bluetooth Mesh Scheduler Model Test\nDESCRIPTION: Sets up the CMake project, includes necessary packages, and configures build settings for a Bluetooth Mesh Scheduler Model action plan test. It specifies include directories, source files, compile options, and linker flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/scheduler_model/message_validity/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bt_mesh_scheduler_model_action_plan_test)\n\ntarget_include_directories(app PUBLIC\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh\n  ${ZEPHYR_BASE}/subsys/bluetooth\n  ../common\n  )\n\nFILE(GLOB app_sources src/*.c)\n\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/scheduler_srv.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/scheduler_cli.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/time_util.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/model_utils.c\n  ../common/sched_test.c\n  )\n\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_BT_MESH_MODEL_KEY_COUNT=5\n  -DCONFIG_BT_MESH_MODEL_GROUP_COUNT=5\n  -DCONFIG_BT_LOG_LEVEL=0\n  -DCONFIG_BT_MESH_SCHEDULER_SRV=1\n  -DCONFIG_BT_MESH_MODEL_LOG_LEVEL=0\n  -DCONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE=0\n  -DCONFIG_BT_MESH_MOD_ACKD_TIMEOUT_PER_HOP=0\n  -DCONFIG_BT_MESH_USES_MBEDTLS_PSA=1\n  )\n\nzephyr_ld_options(\n    ${LINKERFLAGPREFIX},--allow-multiple-definition\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories in CMake for nRF Connect SDK\nDESCRIPTION: Example of how to add additional include directories for an application using the target_include_directories CMake function. This snippet demonstrates adding an 'inc' directory to the include path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/cmake/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PRIVATE inc)\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenThread Compiler Options and Dependencies\nDESCRIPTION: Configures compiler options for OpenThread, adding necessary include directories and compiler flags. Sets up dependencies on system headers and ensures proper C library linking order.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Openthread can use minimal libc, which requires autoconf.h\n# (specifically CONFIG_ARM and friends). autoconf.h can't be included\n# through openthread-*-config.h because openthread third-party\n# libraries do not include this header. So we add the defines to all\n# OpenThread files through the gcc flag -imacros instead.\ntarget_compile_options(ot-config INTERFACE\n    $<TARGET_PROPERTY:zephyr_interface,INTERFACE_COMPILE_OPTIONS>\n    $<TARGET_PROPERTY:compiler,no_builtin>\n    $<$<CXX_COMPILER_ID:Clang>:-Wno-c99-extensions>\n    -imacros ${AUTOCONF_H}\n)\n\n# Openthread depends on errno.h, which includes errno_private.h in minimal libc.\n# errno_private.h is generated as part of ${SYSCALL_LIST_H_TARGET} target.\nadd_dependencies(ot-config ${SYSCALL_LIST_H_TARGET})\n\n# Make sure C library, in case of newlib, is linked after OpenThread libraries\n# (to prevent linker errors)\nif(CONFIG_NEWLIB_LIBC)\n  target_link_libraries(ot-config INTERFACE -lc)\nendif()\n\n# Include OpenThread headers\nzephyr_system_include_directories(${ZEPHYR_CURRENT_MODULE_DIR}/include)\nzephyr_system_include_directories(${ZEPHYR_CURRENT_MODULE_DIR}/examples/platforms)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor Sleep Timeout in Machine Learning Application\nDESCRIPTION: Kconfig option added to set the sensor idling timeout before suspending the sensor in the nRF Machine Learning application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_APP_SENSOR_SLEEP_TO\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake with Zephyr for Nordic SDK\nDESCRIPTION: This CMake script sets up the minimum required version and finds the Zephyr package necessary for the project. It specifies the project as NONE, implying no specific target, and includes all C source files in the src directory. The script relies on the Zephyr environment variable (ZEPHYR_BASE) to locate Zephyr SDK resources and expects an established directory structure for source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_bas/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#\\n# Copyright (c) 2019 Nordic Semiconductor ASA\\n#\\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\\n#\\ncmake_minimum_required(VERSION 3.20.0)\\n\\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\\nproject(NONE)\\n\\nFILE(GLOB app_sources src/*.c)\\n# NORDIC SDK APP START\\ntarget_sources(app PRIVATE ${app_sources})\\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Shell Command Format Changes\nDESCRIPTION: Documentation example showing updated units format in shell commands for the radio test sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.8.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nClarified units for numerical parameters in shell commands.\n```\n\n----------------------------------------\n\nTITLE: Example zperf UDP upload\nDESCRIPTION: This shows an example of running a zperf UDP upload with specific parameters (destination IP 192.168.1.253, port 5001, duration 10s, packet size 1K, baud rate 50M). The output includes information about the connection, rate, and statistics.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ zperf udp upload 192.168.1.253 5001 10 1K 50M\n```\n\n----------------------------------------\n\nTITLE: Install CPU Architecture CMake File\nDESCRIPTION: This snippet installs the `cpuarch_ns.cmake` file from the current directory into the `${INSTALL_PLATFORM_NS_DIR}` directory and renames it to `cpuarch.cmake`. This makes the architecture-specific configurations available during the build process. `${CMAKE_CURRENT_LIST_DIR}` is the directory where the current CMakeLists.txt file is located and `${INSTALL_PLATFORM_NS_DIR}` is the destination installation directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf54l15_cpuapp/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES       ${CMAKE_CURRENT_LIST_DIR}/ns/cpuarch_ns.cmake\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR}\n        RENAME      cpuarch.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Platform Override Image Size Test in CMake\nDESCRIPTION: Sets up a CMake test project for the SUIT platform module, focusing on image size override functionality. Includes necessary source files from the SUIT subsystem, configures include paths for platform and metadata components, and enables the SUIT platform configuration option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_override_image_size/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(plat_override_image_size)\n\ntarget_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/platform/include)\ntarget_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/metadata/include)\ntarget_compile_options(test_interface INTERFACE -DCONFIG_SUIT_PLATFORM)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_components.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_error_convert.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenThread RPC Client Test Project in CMake\nDESCRIPTION: Sets up the CMake project for an OpenThread RPC client test, including package requirements, source files, include directories, and compile definitions. It also configures specific linker options for single-threaded nRF RPC command processing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/openthread/rpc/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(ot_rpc_client_test)\n\nFILE(GLOB app_sources src/*.c)\n\ntarget_include_directories(app PRIVATE\n  # Needed to access OpenThread RPC command IDs.\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/openthread/rpc/common\n  ../common\n  )\n\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ../common/net_l2_openthread.c\n  ../common/nrf_rpc_single_thread.c\n  )\n\n# Fill the gaps due to not setting NET_L2_OPENTHREAD.\nzephyr_include_directories(\n  ${ZEPHYR_OPENTHREAD_MODULE_DIR}/include\n)\n\nzephyr_compile_definitions(\n  CONFIG_OPENTHREAD_PKT_LIST_SIZE=1\n)\n\n# Enforce single-threaded nRF RPC command processing.\ntarget_link_options(app PUBLIC\n  -Wl,--wrap=nrf_rpc_os_init,--wrap=nrf_rpc_os_thread_pool_send\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI Endless Project Build in CMake\nDESCRIPTION: This CMake snippet configures the build for the SPI Endless project. It sets the minimum CMake version, finds the Zephyr package, defines the project name, and includes all .c files from the src directory as sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/spi_endless/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(spi_endless)\n\nFILE(GLOB app_sources src/*.c)\n\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Conditional Cache Setting - CMake\nDESCRIPTION: This snippet checks if 'nordic-flpr' is not part of the 'SNIPPET' list. If not, it adds 'nordic-flpr' to the 'SNIPPET' cache, ensuring that the necessary configuration is included in the project's build settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/multicore_system_off/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT nordic-flpr IN_LIST SNIPPET)\n  set(SNIPPET nordic-flpr ${SNIPPET} CACHE STRING \"\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuration Option: CONFIG_BT_BUF_EVT_RX_COUNT\nDESCRIPTION: This snippet describes an issue where LE Extended Advertising Reports might be discarded due to insufficient memory or host processing time.  The workaround involves increasing the value of the `CONFIG_BT_BUF_EVT_RX_COUNT` Kconfig option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_61\n\nLANGUAGE: none\nCODE:\n```\nDRGN-16317: The SoftDevice Controller might discard LE Extended Advertising Reports\n  If there is insufficient memory available or the Host is not able to process HCI events in time, the SoftDevice Controller can discard LE Extended Advertising Reports.\n  If advertising data is split across multiple reports and any of these are discarded, the Host will not be able to reassemble the data.\n\n  **Workaround:** Increase :kconfig:option:`CONFIG_BT_BUF_EVT_RX_COUNT` until events are no longer discarded.\n\n```\n\n----------------------------------------\n\nTITLE: Opening Terminal Connection and Using mcuboot Command\nDESCRIPTION: Opens a terminal connection to the nRF52840 SoC and uses the mcuboot command to inspect the bootloader state. This aids in identifying the status of firmware updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota_external_mcu.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ mcuboot\nswap type: none\nconfirmed: 1\n\nprimary area (2):\n   version: 1.0.0+0\n   image size: 70136\n   magic: unset\n   swap type: none\n   copy done: unset\n   image ok: unset\n\nfailed to read secondary area (5) header: -5\nuart:~$\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version to ensure compatibility with the project requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_compress/decompression/arm_thumb/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Running OpenThread Daemon\nDESCRIPTION: Command to run the OpenThread daemon with UART connection to RCP and ethernet backbone link.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nsudo ./build/posix/src/posix/ot-daemon 'spinel+hdlc+uart:///dev/ttyACM0?uart-baudrate=1000000' --verbose -B eth0\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for 'revoke' Project with Zephyr RTOS\nDESCRIPTION: This CMake snippet sets up the build configuration for the 'revoke' project. It requires CMake 3.20.0 or higher, finds the Zephyr package, and adds the main.c source file to the project. The project uses the Nordic Semiconductor 5-Clause License.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/kmu/revoke/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(revoke)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: RST Build Target Configuration for nRF54H20\nDESCRIPTION: RST table showing the build target configurations for the nRF54H20 development kit, including CPU variants for application, radio, and PPR cores.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n\n   * - DK\n     - PCA number\n     - Build target\n   * - :ref:`zephyr:nrf54h20dk_nrf54h20`\n     - PCA10175\n     - | ``nrf54h20dk/nrf54h20/cpuapp``\n       | ``nrf54h20dk/nrf54h20/cpurad``\n       | ``nrf54h20dk/nrf54h20/cpuppr``\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic SDK Project\nDESCRIPTION: Sets up the CMake build configuration for a Nordic SDK project. Specifies minimum CMake version, includes Zephyr package, and defines source files for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_status/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2023 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Pinging a network host\nDESCRIPTION: This command sends ICMP echo requests to a specified hostname or IP address to verify network connectivity. It's used to check if the device can communicate with other devices on the network.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nnet ping <resolved hostname>\n```\n\n----------------------------------------\n\nTITLE: Flashing FLPR Core Image\nDESCRIPTION: Command to flash the FLPR core image without erasing the entire chip, preserving the application core's programming in a multi-core setup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/building_nrf54l.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Extra CMake arguments for nRF Connect for VS Code\nDESCRIPTION: CMake arguments to be added when building with nRF Connect for VS Code. These configure the application for nRF5340 DK with nRF7002 EK shield, enabling external flash storage for firmware patches and DFU capability.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf70_fw_patch_update.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n-- -DSHIELD=nrf7002ek -DSB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE=y -DCONFIG_NRF_WIFI_FW_PATCH_DFU=y -Dshell_SNIPPET=nrf70-fw-patch-ext-flash\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory and Include Directories (CMake)\nDESCRIPTION: Adds a subdirectory based on the SOC_SERIES variable and includes the common directory for Nordic SoCs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${SOC_SERIES})\ninclude_directories(${ZEPHYR_BASE}/soc/nordic/common)\n```\n\n----------------------------------------\n\nTITLE: Updating Battery Level Using LwM2M API\nDESCRIPTION: This code snippet describes how to use the 'carrier_api device battery_level' command to update the battery level of the device in the LwM2M carrier library. A successful update message is returned after the command is executed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/app_integration.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n> carrier_api device battery_level 20\nBattery level updated successfully\n```\n\n----------------------------------------\n\nTITLE: Documenting C Enums with Preceding Documentation in nRF Connect SDK\nDESCRIPTION: Example of documenting a C enum with documentation blocks preceding each element. This style is used for the HID Service Protocol Mode events enum.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/styleguide.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n/** HID Service Protocol Mode events. */\nenum hids_pm_evt {\n\n   /** Boot mode entered. */\n   HIDS_PM_EVT_BOOT_MODE_ENTERED,\n\n   /** Report mode entered. */\n   HIDS_PM_EVT_REPORT_MODE_ENTERED,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with Zephyr Framework\nDESCRIPTION: Sets up a CMake project with Zephyr framework dependencies and configures include directories for application events, board-specific definitions, and project modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf_sensor_manager/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(remote)\n\n#Include application application event headers\nzephyr_library_include_directories(../src/events)\n\ntarget_sources(app PRIVATE src/main.c)\n\n# Add include directory for board specific CAF def files\nzephyr_include_directories(\n  ../configuration/\n  ../configuration/${NORMALIZED_BOARD_TARGET}\n)\n\nadd_subdirectory(../src/modules \"${CMAKE_CURRENT_BINARY_DIR}/modules\")\n```\n\n----------------------------------------\n\nTITLE: Configuration Entry in RST Format\nDESCRIPTION: Configuration file header in reStructuredText format defining the release notes section for NCS v2.7.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _ncs_release_notes_270:\n\n|NCS| v2.7.0 Release Notes\n##########################\n```\n\n----------------------------------------\n\nTITLE: End RX Test - Custom Command Usage\nDESCRIPTION: This command terminates the RX test routine on the DUT device and sends the test results to the CMD device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\ncustom rend\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Scan Sample Output: Combined Raw and Device Scan Results\nDESCRIPTION: Console output showing both raw scan data and device scan results in a single scan operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/scan/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nScan requested\nNum  | len   | Frequency | RSSI | RAW_DATA(32 bytes)\n1    | 299   | 2412 | -44  | 50 00 3A 01 F4 CE 36 00 10 CE D4 BD 4F E1 F5 33 D4 BD 4F E1 F5 33 A0 7F 0B 05 75 7F D8 00 00 00\n2    | 430   | 2412 | -37  | 50 00 3A 01 F4 CE 36 00 10 CE 3C 7C 3F DA DF 38 3C 7C 3F DA DF 38 90 11 69 36 EC 8A 02 00 00 00\n3    | 284   | 2412 | -45  | 50 00 3A 01 F4 CE 36 00 10 CE D4 BD 4F 21 F5 38 D4 BD 4F 21 F5 38 20 CF 7B 20 75 7F D8 00 00 00\n4    | abcdef                           6     | 1    | -37  | WPA/WPA2 | aa:aa:aa:aa:aa:aa\n5    | pqrst                            5     | 1    | -65  | WPA/WPA2 | xx:xx:xx:xx:xx:xx\n6    | AZBYCXD                          7     | 1    | -41  | WPA/WPA2 | yy:yy:yy:yy:yy:yy\nScan request done\n```\n\n----------------------------------------\n\nTITLE: Automated Provisioning: Set Environment Variables\nDESCRIPTION: This section shows how to set the environment variables required for the `provision.py` script when using AVSystem's Coiote Device Management server. `COIOTE_USER` and `COIOTE_PASSWD` should be replaced with the actual username and password for the server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/provisioning.rst#2025-04-21_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\n# Setup phase\n[nrf@dev]:~/scripts# export COIOTE_PASSWD='my-password'\n[nrf@dev]:~/scripts# export COIOTE_USER='my-username'\n```\n\n----------------------------------------\n\nTITLE: Apply APPROTECT Configuration\nDESCRIPTION: This snippet configures APPROTECT settings based on various `SB_CONFIG_APPROTECT_*` and `SB_CONFIG_SECURE_APPROTECT_*` variables. It determines the appropriate `normal_approtect` and `secure_approtect` variables based on these settings. It then iterates through a list of images and applies the APPROTECT configuration to each image, distinguishing between network core images and other images.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\n \"if(SB_CONFIG_APPROTECT_USE_UICR OR SB_CONFIG_APPROTECT_LOCK OR SB_CONFIG_APPROTECT_USER_HANDLING OR SB_CONFIG_APPROTECT_DISABLE OR\n     SB_CONFIG_SECURE_APPROTECT_USE_UICR OR SB_CONFIG_SECURE_APPROTECT_LOCK OR SB_CONFIG_SECURE_APPROTECT_USER_HANDLING OR SB_CONFIG_SECURE_APPROTECT_DISABLE)\n    # Apply APPROTECT configuration to target images\n    if(SB_CONFIG_APPROTECT_USE_UICR)\n      set(normal_approtect CONFIG_NRF_APPROTECT_USE_UICR)\n    elseif(SB_CONFIG_APPROTECT_LOCK)\n      set(normal_approtect CONFIG_NRF_APPROTECT_LOCK)\n    elseif(SB_CONFIG_APPROTECT_USER_HANDLING)\n      set(normal_approtect CONFIG_NRF_APPROTECT_USER_HANDLING)\n    elseif(SB_CONFIG_APPROTECT_DISABLE)\n      set(normal_approtect CONFIG_NRF_APPROTECT_DISABLE)\n    endif()\n\n    if(SB_CONFIG_SECURE_APPROTECT_USE_UICR)\n      set(secure_approtect CONFIG_NRF_SECURE_APPROTECT_USE_UICR)\n    elseif(SB_CONFIG_SECURE_APPROTECT_LOCK)\n      set(secure_approtect CONFIG_NRF_SECURE_APPROTECT_LOCK)\n    elseif(SB_CONFIG_SECURE_APPROTECT_USER_HANDLING)\n      set(secure_approtect CONFIG_NRF_SECURE_APPROTECT_USER_HANDLING)\n    elseif(SB_CONFIG_SECURE_APPROTECT_DISABLE)\n      set(secure_approtect CONFIG_NRF_SECURE_APPROTECT_DISABLE)\n    endif()\n\n    if(SB_CONFIG_SUPPORT_NETCORE AND NOT SB_CONFIG_NETCORE_NONE)\n      get_property(network_images GLOBAL PROPERTY PM_${SB_CONFIG_NETCORE_IMAGE_DOMAIN}_IMAGES)\n    endif()\n\n    foreach(image ${IMAGES})\n      if(SB_CONFIG_SUPPORT_NETCORE AND NOT SB_CONFIG_NETCORE_NONE AND ${image} IN_LIST network_images)\n        # Network core image\n        if(normal_approtect)\n          set_config_bool(${image} ${normal_approtect} y)\n        endif()\n      else()\n        # Application (or other) core image\n        if(normal_approtect)\n          set_config_bool(${image} ${normal_approtect} y)\n        endif()\n        if(secure_approtect)\n          set_config_bool(${image} ${secure_approtect} y)\n        endif()\n      endif()\n    endforeach()\n\n    set(normal_approtect)\n    set(secure_approtect)\n    set(network_images)\n  endif()\"\n```\n\n----------------------------------------\n\nTITLE: Adding nrfxlib Documentation Sets in CMake\nDESCRIPTION: Adds both regular and Doxygen documentation sets for nrfxlib to the build process, using the NRF_VERSION variable for versioning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_docset(nrfxlib ${NRF_VERSION})\nadd_doxygen_docset(nrfxlib ${ZEPHYR_NRFXLIB_MODULE_DIR} ${NRF_VERSION})\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet initializes the CMake project, requiring a minimum CMake version of 3.13.1 and locating the Zephyr RTOS using the 'find_package' command. The 'project' command sets the name of the project to 'application_jwt'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_jwt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(application_jwt)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files\nDESCRIPTION: This snippet specifies the source files for the application. It adds `src/main.c` as a private source file to the 'app' target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/gpio_idle/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_sources(app PRIVATE src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package and Configuring ADC Project\nDESCRIPTION: This snippet sets the minimum required version for CMake and finds the Zephyr package to configure the ADC project. It also collects all C source files from a specified directory to include in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/drivers/adc/adc_dt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(ADC)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/samples/drivers/adc/adc_dt/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Including Common Matter Source Files\nDESCRIPTION: Includes all source files from the Matter common directory to provide shared functionality across Matter samples.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Include all source files that are located in the Matter common directory.\ninclude(${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/cmake/source_common.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Matter Application Sources\nDESCRIPTION: Configures include directories and source files for the window covering application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/window_covering/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/cmake/source_common.cmake)\n\ntarget_include_directories(app PRIVATE\n    src\n    ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}\n)\n\ntarget_sources(app PRIVATE\n    src/app_task.cpp\n    src/window_covering.cpp\n    src/main.cpp\n    src/zcl_callbacks.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Get Link Quality Indicator - Custom Command Usage\nDESCRIPTION: This command processes the CMD device to enter receive mode and wait for a packet, outputting the result as two hexadecimal bytes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_18\n\nLANGUAGE: text\nCODE:\n```\ncustom lgetlqi\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash RPC Project with CMake\nDESCRIPTION: This CMake script configures the build environment for the flash_rpc project. It requires CMake 3.20.0 or higher, finds the Zephyr package using environment variables, defines the project name, and adds the main.c source file to the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/flash/flash_rpc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(flash_rpc)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: FTP Server Connection Management\nDESCRIPTION: Commands for establishing connection to FTP server with authentication and closing the connection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_43\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XFTP=\"open\",\"user\",\"password\",\"ftp.dlptest.com\"\nAT#XFTP=\"close\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Project with CMake\nDESCRIPTION: This CMake script configures a project to work with the Zephyr RTOS by setting the minimum required CMake version, finding the Zephyr package, setting the project name, and specifying the source files to be compiled. It requires the Zephyr RTOS environment to be properly set up with the ZEPHYR_BASE environment variable pointing to the Zephyr base directory. The script includes all .c files in the specified directory for compilation into the project named 'retained_mem_api'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/retained_mem/api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\\n\\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\\nproject(retained_mem_api)\\n\\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/retained_mem/api/src/*.c)\\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Setting Matter Log Level to Debug\nDESCRIPTION: This snippet shows how to set the log level for the Matter module to DEBUG using the `CONFIG_MATTER_LOG_LEVEL_DBG` Kconfig option. This allows displaying debug log messages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_13\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_MATTER_LOG_LEVEL_DBG`\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Keys Using nrfcredstore Console Command\nDESCRIPTION: The command lists all installed keys on the nRF device using nrfcredstore tool and requires the device's serial port. Make sure `nrfcredstore` is accessible.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nnrfcredstore <serial port> list\n```\n\n----------------------------------------\n\nTITLE: Configuring Unity Test with CMock in CMake\nDESCRIPTION: This CMake script configures a test project using the Unity Test Framework with CMock for mocking dependencies. It sets up a test runner, creates mocks for the 'foo' module, and configures source files and include directories for the test application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/unity/example_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(example_test)\n\n# generate runner for the test\ntest_runner_generate(src/example_test.c)\n\n# create mock for foo module. Add header to relative path 'foo'. That is to\n# allow including header using <foo/foo.h>\ncmock_handle(src/foo/foo.h foo)\n\n# add module foo\ntarget_sources(app PRIVATE src/foo/foo.c)\ntarget_include_directories(app PRIVATE src)\n\n# add module uut\ntarget_sources(app PRIVATE src/uut/uut.c)\ntarget_include_directories(app PRIVATE ./src/uut)\n\n# add test file\ntarget_sources(app PRIVATE src/example_test.c)\ntarget_include_directories(app PRIVATE .)\ntarget_include_directories(app PRIVATE src/foo)\n\n# Preinclude file to the module under test to redefine IS_ENABLED() macro\n# which is used in the module.\nset_property(SOURCE src/uut/uut.c PROPERTY COMPILE_FLAGS\n\t\"-include src/example_test.h\")\n```\n\n----------------------------------------\n\nTITLE: SUIT Platform Library Source Files\nDESCRIPTION: Lists the source files for building the SUIT platform library. This includes multiple components such as `suit_plat_components.c`, `suit_plat_commands.c`, and others. Some sources are conditionally compiled based on configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(src/suit_plat_components.c)\nzephyr_library_sources(src/suit_plat_commands.c)\nzephyr_library_sources(src/suit_plat_version.c)\nzephyr_library_sources(src/suit_plat_fetch.c)\nzephyr_library_sources(src/suit_plat_retrieve_manifest.c)\nzephyr_library_sources(src/suit_plat_copy.c)\nzephyr_library_sources(src/suit_plat_write.c)\nzephyr_library_sources(src/suit_plat_check_content.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_CHECK_IMAGE_MATCH src/suit_plat_check_image_match.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_MEMPTR_STORAGE src/suit_plat_memptr_size_update.c)\nzephyr_library_sources(src/suit_plat_error_convert.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_DIGEST src/suit_plat_digest.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_PLAT_CHECK_CLASSES src/suit_plat_class_check.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for FOTA Module in CMake\nDESCRIPTION: Adds the current directory to the private include path for the 'app' target. This ensures that header files in the current directory are accessible to the FOTA module source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/fota/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library and Sources - C\nDESCRIPTION: This snippet configures the Zephyr library, specifying the source files for the flash driver, and linking it with the required utility libraries. It includes essential dependencies such as drivers for flash operations in a Nordic Semiconductor environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/flash/flash_ipuc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources(flash_ipuc.c)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_link_libraries(suit_utils)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_link_libraries(suit_ipuc)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_include_directories(${ZEPHYR_BASE}/drivers/flash)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Sending nRF Cloud Alert in C\nDESCRIPTION: This snippet demonstrates how to initialize an nRF Cloud alert structure and send it using MQTT, CoAP, or REST. It includes setting the alert type, value, and description, then calling the appropriate send function based on the transport method.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/nrf_cloud_alert.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <nrf_cloud_alert.h>\n\nstruct nrf_cloud_alert_info alert;\n\n// Initialize the structure members\nalert.type = ALERT_TYPE_TEMPERATURE; // Example alert type\nalert.value = 25; // Example temperature value\nalert.description = \"High temperature detected\";\n\n// For MQTT or CoAP\nnrf_cloud_alert_send(&alert);\n\n// For REST\nnrf_cloud_rest_alert_send(&alert);\n```\n\n----------------------------------------\n\nTITLE: Python Command for Provisioning Wi-Fi Credentials\nDESCRIPTION: Command to run the Python provisioning script that communicates with the device to set Wi-Fi credentials, requiring the server certificate for secure communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/provisioning/softap/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\npython3 provision.py --certificate ../certs/server_certificate.pem\n```\n\n----------------------------------------\n\nTITLE: Including TLS/SSL Implementation Source Files\nDESCRIPTION: This CMake command specifies a list of C source files related to TLS/SSL implementations for the CURL library.  These files provide support for various TLS libraries like BearSSL, GnuTLS, mbedTLS, OpenSSL, and WolfSSL, allowing CURL to establish secure connections. The selection of which TLS library to use is typically configured elsewhere in the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/curl/lib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library_sources(\n\tvtls/bearssl.c vtls/gskit.c vtls/gtls.c vtls/keylog.c\n\tvtls/mbedtls.c vtls/mbedtls_threadlock.c vtls/mesalink.c vtls/nss.c\n\tvtls/openssl.c vtls/schannel.c vtls/schannel_verify.c vtls/sectransp.c\n\tvtls/vtls.c vtls/wolfssl.c)\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Flash Module Subdirectories\nDESCRIPTION: This CMake snippet uses the add_subdirectory_ifdef function to conditionally include subdirectories for flash modules based on specific configuration flags. It requires appropriate CONFIG_FLASH_RPC and CONFIG_FLASH_IPUC flags set during the configuration phase.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/flash/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_FLASH_RPC flash_rpc)\nadd_subdirectory_ifdef(CONFIG_FLASH_IPUC flash_ipuc)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Bluetooth Mesh Silvair EnOcean Test\nDESCRIPTION: Sets up the CMake project, including version requirements, Zephyr package, source files, and specific compilation options for Bluetooth Mesh and EnOcean functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/silvair_enocean_model/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bt_mesh_silvair_enocean_test)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntarget_sources(app\n    PRIVATE\n    ${ZEPHYR_BASE}/subsys/bluetooth/common/addr.c\n    ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/vnd/silvair_enocean_srv.c\n    )\n\ntarget_include_directories(app\n    PRIVATE\n    ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh\n    ${ZEPHYR_BASE}/subsys/bluetooth\n    )\n\ntarget_compile_options(app\n    PRIVATE\n    -DCONFIG_BT_ENOCEAN_STORE=1\n    -DCONFIG_BT_MESH_SILVAIR_ENOCEAN_AUTO_COMMISSION=1\n    -DCONFIG_BT_MESH_MODEL_KEY_COUNT=1\n    -DCONFIG_BT_MESH_MODEL_GROUP_COUNT=1\n    -DCONFIG_BT_MESH_USES_MBEDTLS_PSA=1\n    )\n\nzephyr_ld_options(\n    ${LINKERFLAGPREFIX},--allow-multiple-definition\n    )\n```\n\n----------------------------------------\n\nTITLE: Accessing GPIO Pin in Application Code with Zephyr GPIO APIs\nDESCRIPTION: This C code snippet illustrates how to declare and initialize a GPIO pin using Zephyr's GPIO driver API, and how to set its state. It includes the use of GPIO_DT_SPEC_GET_OR macro and functions like gpio_pin_configure_dt and gpio_pin_set_dt to manipulate the pin. Proper initialization ensures the pin is controllable by the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/use_gpio_pin_directly.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <zephyr/drivers/gpio.h>\nstatic const struct gpio_dt_spec pin_dbg =\n   GPIO_DT_SPEC_GET_OR(DT_NODELABEL(user_dbg_pin), gpios, {0});\n\nif (pin_dbg.port) {\n   gpio_pin_configure_dt(&pin_dbg, GPIO_OUTPUT_INACTIVE);\n}\n\nif (pin_dbg.port) {\n   gpio_pin_set_dt(&pin_dbg, 1);\n}\n...\nif (pin_dbg.port) {\n   gpio_pin_set_dt(&pin_dbg, 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Set in CMake\nDESCRIPTION: Function to add a new Sphinx documentation set with support for inventory builds, HTML builds, live reloading, and link checking. Configures multiple build targets with customizable options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_docset name version)\n  cmake_parse_arguments(DOCSET \"DODGY\" \"\" \"\" ${ARGN})\n\n  set(DOCSET_CFG_DIR ${CMAKE_CURRENT_LIST_DIR}/${name})\n  set(DOCSET_BUILD_DIR ${CMAKE_BINARY_DIR}/${name})\n  set(DOCSET_SRC_DIR ${CMAKE_BINARY_DIR}/${name}/src)\n  set(DOCSET_DOCTREE_DIR ${CMAKE_BINARY_DIR}/${name}/doctree)\n  set(DOCSET_HTML_DIR ${CMAKE_BINARY_DIR}/html/${name})\n  set(DOCSET_LINKCHECK_DIR ${CMAKE_BINARY_DIR}/linkcheck/${name})\n  set(DOCSET_MAKE_DIRS ${DOCSET_BUILD_DIR};${DOCSET_SRC_DIR};${DOCSET_HTML_DIR})\n  set(DOCSET_CLEAN_DIRS ${DOCSET_BUILD_DIR};${DOCSET_HTML_DIR})\n  set(DOCSET_ENV DOXYGEN_EXECUTABLE=${DOXYGEN_EXECUTABLE};DOCSET_VERSION=${version};DOCS_HTML_DIR=${DOCSET_HTML_DIR})\n\n  if(${DOCSET_DODGY})\n    list(REMOVE_ITEM SPHINXOPTS \"-W\" \"--keep-going\")\n  endif()\n\n  # Additional target configurations follow...\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Deferred Event Output Example during Bootstrapping in Console\nDESCRIPTION: This snippet illustrates a typical console output during the bootstrapping process of the LwM2M Carrier library. It shows events related to the LTE link status and potential reasons for deferred events. Understanding this output is vital for troubleshooting bootstrapping issues. Inputs involve the application environment and configuration, while the output is a series of event log messages indicating the status of the connection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_carrier/sample_description.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n\"LWM2M Carrier library sample.\\nLWM2M_CARRIER_EVENT_LTE_LINK_DOWN\\nLWM2M_CARRIER_EVENT_LTE_LINK_UP\\nLWM2M_CARRIER_EVENT_DEFERRED\\nReason: Failed to connect to bootstrap server, timeout: 60 seconds\\nLWM2M_CARRIER_EVENT_DEFERRED\\n...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Build Settings in CMake\nDESCRIPTION: Sets up include directories and conditionally adds source files for the HTTP client module based on the CONFIG_SLM_HTTPC flag. The configuration is part of the Nordic Semiconductor nRF SDK build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/src/http_c/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(.)\ntarget_sources_ifdef(CONFIG_SLM_HTTPC app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_at_httpc.c)\n```\n\n----------------------------------------\n\nTITLE: Radio Notifications on ACTIVE State - MPSL - Documentation Format\nDESCRIPTION: This documentation indicates that using radio notifications in ACTIVE mode with certain enumerators may trigger assertions in MPSL, an important consideration for developers implementing notification-based functionalities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_42\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-16642: If radio notifications on ACTIVE are used, MPSL might assert When radio notifications are used with :c:enumerator:`MPSL_RADIO_NOTIFICATION_TYPE_INT_ON_ACTIVE` or :c:enumerator:`MPSL_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH`, MPSL might assert.\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: This command sets the name of the CMake project. It is used to identify the project and is often used in other CMake commands and build scripts.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/twim_suspend/remote/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(remote)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for HPF Applications in reStructuredText\nDESCRIPTION: This snippet creates a table of contents for HPF applications using the toctree directive in reStructuredText. It includes links to GPIO and MSPI application README files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/hpf/hpf.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   gpio/README\n   mspi/README\n```\n\n----------------------------------------\n\nTITLE: Configuring DTM Application Build in CMake\nDESCRIPTION: Sets up the build configuration for the Direct Test Mode application, including conditionally adding transport layer source files based on configuration options. It handles special conditions for the nRF5340DK board and includes core DTM functionality sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/direct_test_mode/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\ntarget_include_directories(app PRIVATE ./src)\n\ntarget_sources_ifndef(CONFIG_DTM_TRANSPORT_HCI app PRIVATE\n  src/transport/dtm_uart_twowire.c\n  src/transport/dtm_uart_wait.c\n)\n\ntarget_sources_ifdef(CONFIG_DTM_TRANSPORT_HCI app PRIVATE src/transport/dtm_hci.c)\n\nif(CONFIG_DTM_TRANSPORT_HCI AND \"${BOARD}\" STREQUAL \"nrf5340dk\")\n  target_sources(app PRIVATE src/transport/hci_uart_remote.c)\n  target_include_directories(app PRIVATE ./rpc)\nelse()\n  target_sources_ifdef(CONFIG_DTM_TRANSPORT_HCI app PRIVATE src/transport/hci_uart.c)\nendif()\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/dtm.c\n  src/dtm_hw.c\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring LTE Library Build in CMake\nDESCRIPTION: Defines the build configuration for the LTE library including core and optional source files, include directories, and linker settings. Handles conditional compilation of trace and shell functionality based on configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/lte_link_control/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_include_directories(include)\nzephyr_library_sources(lte_lc.c)\nzephyr_library_sources(lte_lc_modem_hooks.c)\nzephyr_library_sources_ifdef(CONFIG_LTE_LC_TRACE lte_lc_trace.c)\nzephyr_library_sources_ifdef(CONFIG_LTE_SHELL lte_lc_shell.c)\n\nadd_subdirectory(common)\nadd_subdirectory(modules)\n\nzephyr_linker_sources(RODATA lte_lc.ld)\n```\n\n----------------------------------------\n\nTITLE: Local Contents Directive\nDESCRIPTION: reStructuredText directive that generates a local table of contents with depth of 2 levels\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/smoke_co_alarm/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. contents::\n   :local:\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: Provisioning Client Key on nRF91 Device\nDESCRIPTION: Command to provision the client key on an nRF91 series device using the nrfcredstore tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nnrfcredstore <serial port> write <sec tag> CLIENT_KEY priv_key.pem\n```\n\n----------------------------------------\n\nTITLE: Enabling nrf_cc3xx Cipher Driver in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables the `nrf_security_drivers_cc3xx` driver for all supported cipher algorithms. This driver provides hardware-accelerated cryptographic operations using the Nordic CryptoCell cc3xx.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_USE_CC3XX_CIPHER_DRIVER`\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Modem Credential Digest in C\nDESCRIPTION: New function added to the modem key management library to retrieve the SHA1 digest of a credential from the modem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-3.0.0-preview2.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nmodem_key_mgmt_digest()\n```\n\n----------------------------------------\n\nTITLE: Example zperf UDP download\nDESCRIPTION: This shows an example of running a zperf UDP download on port 5001.  The output shows the server starting, binding to IP addresses, and session statistics.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ zperf udp download 5001\n```\n\n----------------------------------------\n\nTITLE: Boot Status Log for Degraded Mode without Radio (Console)\nDESCRIPTION: Log message showing boot status after entering degraded mode without radio support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_33\n\nLANGUAGE: console\nCODE:\n```\nBoot preference: set B\nBoot status: app image A active, no radio, degraded mode\nConfirm status set A: not confirmed\nConfirm status set B: not confirmed\n```\n\n----------------------------------------\n\nTITLE: TCP Client Command Syntax (AT#XTCPCLI)\nDESCRIPTION: Command syntax for creating TCP/TLS client connection with options for security and verification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: plain text\nCODE:\n```\n#XTCPCLI=<op>[,<url>,<port>[,sec_tag[,peer_verify[,hostname_verify]]]]\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for FOTA Download in nRF Connect SDK\nDESCRIPTION: Sets up the CMake project for FOTA download, including minimum CMake version, finding Zephyr package, and defining the project name. It also glob\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/fota_download/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(fota_download)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring MPSL Pin Debug Library Sources in CMake\nDESCRIPTION: Creates a Zephyr library and conditionally adds source files for MPSL pin debugging based on different configuration options. Supports app core, radio core, and nRF54 series specific debugging implementations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/pin_debug/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources_ifdef(CONFIG_MPSL_PIN_DEBUG_APP_CORE mpsl_pin_debug_app_core.c)\nzephyr_library_sources_ifdef(CONFIG_MPSL_PIN_DEBUG_RADIO_CORE mpsl_pin_debug_radio_core.c)\nzephyr_library_sources_ifdef(CONFIG_MPSL_PIN_DEBUG_54X_APP_OR_RADIO_CORE mpsl_pin_debug_nrf54.c)\n```\n\n----------------------------------------\n\nTITLE: Listing Zephyr commits since last release (Shell)\nDESCRIPTION: Shell command to list all upstream Zephyr commits incorporated into NCS since the most recent release.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.7.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline 14f09a3b00 ^v2.6.0-rc1-ncs1\n```\n\n----------------------------------------\n\nTITLE: Deselecting TNEP Service in C\nDESCRIPTION: Deselects the currently selected TNEP service using nfc_tnep_poller_svc_deselect when operations are completed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/poller.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nnfc_tnep_poller_svc_deselect();\n```\n\n----------------------------------------\n\nTITLE: Updating ESB TX Power Function Signature\nDESCRIPTION: The type parameter of the esb_set_tx_power function was updated to int8_t.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nesb_set_tx_power(int8_t tx_power)\n```\n\n----------------------------------------\n\nTITLE: Getting Current State of Scene Server\nDESCRIPTION: This command retrieves the current state of the Scene Server, allowing clients to monitor changes or situations in the mesh network.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scene_cli.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models scene get\n```\n\n----------------------------------------\n\nTITLE: UDP Server Status Response Example\nDESCRIPTION: Example response when a UDP server is started successfully, showing the handle and status message.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_5\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPSVR: 2,\"started\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet specifies source files for the application by adding 'src/main.c' to the target named 'app'. It indicates that the specified source file should be compiled when building the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/multicore_system_off/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Board Target Command for nRF7002 EK and nRF7001 EK\nDESCRIPTION: Command showing the specific board target option for the nRF7002 EK and nRF7001 EK when building the sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnrf5340dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Connecting to nRF Devices via Serial Terminal\nDESCRIPTION: Commands to connect to nRF development kits via serial terminal using minicom.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/thread_coex/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nminicom -D /dev/ttyACM1 -b 115200\nminicom -D /dev/ttyACM3 -b 115200\n```\n\n----------------------------------------\n\nTITLE: Configuring DTLS Pre-Shared Key and Identity\nDESCRIPTION: This snippet shows how to update the hex-encoded PSK and PSK identity for DTLS connection using AT commands with a specified security tag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_11\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT+CFUN=0\n\nAT%CMNG=0,1001,3,\"6e7266393174657374\"\n\nAT%CMNG=0,1001,4,\"nrf91test\"\n\nAT+CFUN=1\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for DFU Target SUIT Test Project\nDESCRIPTION: This CMake script sets up the build environment for a DFU target SUIT test project. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, includes a test template, adds source files, sets include directories, and defines compile definitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/dfu/dfu_target/suit/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(dfu_target_suit_test)\ninclude(${ZEPHYR_NRF_MODULE_DIR}/tests/subsys/suit/cmake/test_template.cmake)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntarget_include_directories(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/dfu/include\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/suit/ipuc/include\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/suit/memory_layout/include\n  \"src\"\n  )\n\nzephyr_compile_definitions(CONFIG_SOC_NRF54H20_CPUAPP)\n```\n\n----------------------------------------\n\nTITLE: Location Request with Kconfig Method Priority\nDESCRIPTION: Example demonstrating location request using method priority list from Kconfig with custom timeout values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/location.rst#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nint err;\nstruct location_config config;\n\nlocation_config_defaults_set(&config, 0, NULL);\n\n/* Now you have default values set and you can modify the parameters you want but you\n * need to iterate through the method list as the order is defined by Kconfig options.\n */\nfor (int i = 0; i < config.methods_count; i++) {\n    if (config.methods[i].method == LOCATION_METHOD_CELLULAR) {\n        config.methods[i].cellular.timeout = 15 * MSEC_PER_SEC;\n    }\n}\n\nerr = location_request(&config);\n```\n\n----------------------------------------\n\nTITLE: Executing PPP Commands on Linux\nDESCRIPTION: These examples show how to configure and start PPP connections on a Linux environment using commands for serial communication and starting pppd with specific UART configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_38\n\nLANGUAGE: console\nCODE:\n```\nmosh:~$ ppp uartconf -r\nPPP uart configuration:\n  baudrate:     921600\n  flow control: RTS_CTS\n  parity:       none\n  data bits:    bits8\n  stop bits:    bits1\nmosh:~$\n\n$ sudo pppd -detach /dev/ttyACM0 921600 noauth crtscts noccp novj nodeflate nobsdcomp local debug +ipv6 ipv6cp-use-ipaddr usepeerdns noipdefault defaultroute ipv6cp-restart 5 ipcp-restart 5 lcp-echo-interval 0\n\nmosh:~$ bt init\nBluetooth initialized\nSettings Loaded\nmosh:~$ bt name mosh-adv\nmosh:~$ bt name\nBluetooth Local Name: mosh-adv\nmosh:~$ bt advertise scan\nAdvertising started\n\nmosh:~$ bt advertise off\nAdvertising stopped\nmosh:~$\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake for Nordic SDK Project\nDESCRIPTION: Defines the minimum CMake version required and locates the Zephyr package necessary for the project. It establishes 'openthread_coap_client' as the project name and sets up source files and include directories essential for building the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/coap_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(openthread_coap_client)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/coap_client.c\n               src/coap_client_utils.c)\n\ntarget_include_directories(app PUBLIC ../coap_server/interface)\n# NORDIC SDK APP END\n\ntarget_sources_ifdef(CONFIG_BT_NUS app PRIVATE src/ble_utils.c)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requirements for ncs-sbom (Linux)\nDESCRIPTION: This command installs the required Python packages for the 'ncs-sbom' command using pip3 with the '--user' flag. It reads the package list from the 'requirements-west-ncs-sbom.txt' file located in the 'nrf/scripts' directory within the 'ncs' folder.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"pip3 install --user -r nrf/scripts/requirements-west-ncs-sbom.txt\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ZCBOR Test Project in CMake\nDESCRIPTION: Sets up a CMake project for testing ZCBOR encoding functionality. Defines minimum CMake version, finds Zephyr package, and configures project settings. Includes custom command to generate C code from CDDL specifications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/modules/lib/zcbor/encode/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(test_zcbor_encode)\n\nfind_program(ZCBOR zcbor REQUIRED)\n\nset(zcbor_args\n  code\n  -c ${CMAKE_CURRENT_LIST_DIR}/../cddl/test.cddl\n  --output-c ${PROJECT_BINARY_DIR}/src/test_encode.c\n  --output-h ${PROJECT_BINARY_DIR}/include/test_encode.h\n  -t Test\n  -e\n  )\n\nadd_custom_command(\n  OUTPUT\n  ${PROJECT_BINARY_DIR}/src/test_encode.c\n  ${PROJECT_BINARY_DIR}/include/test_encode.h\n  DEPENDS\n  ${CMAKE_CURRENT_LIST_DIR}/../cddl/test.cddl\n  COMMAND\n  ${ZCBOR} ${zcbor_args}\n  )\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources} ${PROJECT_BINARY_DIR}/src/test_encode.c)\ntarget_include_directories(app PRIVATE ${PROJECT_BINARY_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Locates the Zephyr RTOS package using environment variable hints, which is required for the project setup\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_compress/decompression/arm_thumb/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for NCS Specific Commits\nDESCRIPTION: Shell command to view NCS-specific commits made since v2.0.0 by comparing the manifest revision against v3.0.99-ncs1 tag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v3.0.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Mesh Light Control Regulator\nDESCRIPTION: Compile-time configuration of the illuminance regulator with update interval and accuracy settings for Bluetooth Mesh light control\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_reg_spec.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_BT_MESH_LIGHT_CTRL_REG_SPEC_INTERVAL\n```\n\n----------------------------------------\n\nTITLE: Configuring NRF AuraConfig Test Build Environment with CMake\nDESCRIPTION: This CMake script configures the build environment for the nrf_auraconfig_test project. It sets the minimum required CMake version, finds the Zephyr package, adds the babblekit subdirectory, specifies source files, and configures include directories for the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/bluetooth/bsim/nrf_auraconfig/tester/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_auraconfig_test)\n\nadd_subdirectory(${ZEPHYR_BASE}/tests/bsim/babblekit babblekit)\ntarget_link_libraries(app PRIVATE babblekit)\n\ntarget_sources(app PRIVATE\n  src/nrf_auraconfig_test.c\n  src/main.c\n)\n\nzephyr_library_include_directories(app PRIVATE\n    ${ZEPHYR_NRF_MODULE_DIR}/tests/bluetooth/bsim/nrf_auraconfig/tester/include)\n\nzephyr_include_directories(\n  ${BSIM_COMPONENTS_PATH}/libUtilv1/src/\n  ${BSIM_COMPONENTS_PATH}/libPhyComv1/src/\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Integration Test Suite\nDESCRIPTION: This snippet sets the minimum required CMake version, finds the Zephyr package, and initializes the project for the integration test suite orchestrator. It also includes source files from the manifest directory and links several libraries required for the test.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/orchestrator/orchestrator_sdfw/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_orchestrator)\ninclude(../../cmake/test_template.cmake)\n\nFILE(GLOB manifest_sources ../manifest/src/*.c)\ntarget_sources(app PRIVATE\n  ${manifest_sources}\n  )\n\n# Link with the CMake target, that includes SUIT platform internal APIs header\nzephyr_library_link_libraries(suit)\nzephyr_library_link_libraries(suit_orchestrator_interface)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_storage_interface)\nzephyr_library_link_libraries(suit_update_magic_values)\nzephyr_library_link_libraries(suit_cache_interface)\nzephyr_library_link_libraries(suit_execution_mode)\n```\n\n----------------------------------------\n\nTITLE: Modifying suit-install Sequence in Application Manifest\nDESCRIPTION: Diff showing how to modify the suit-install sequence in the application manifest to use an identical URI as in the suit-payload-fetch sequence instead of the integrated one.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_fetch.rst#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  suit-install:\n    ...\n  - suit-directive-set-component-index: 1\n  - suit-directive-override-parameters:\n-     suit-parameter-uri: '#{{ app[\\'name\\'] }}'\n+     suit-parameter-uri: 'file://{{ app[\\'binary\\'] }}'\n  - suit-directive-fetch:\n    - suit-send-record-failure\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Bluetooth Libraries in CMake\nDESCRIPTION: This CMake script configures the Zephyr library by adding source files for the Bluetooth subsystem. It conditionally includes 'crypto.c' and 'cs_antenna_switch.c' based on the configuration flags 'CONFIG_BT_CTLR_CRYPTO' and 'CONFIG_BT_CTLR_SDC_CS_MULTIPLE_ANTENNA_SUPPORT', respectively. The script also links the 'subsys__bluetooth' library and specifies the inclusion of the current directory for header files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/controller/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\\n\\nzephyr_library_sources(\\n  hci_driver.c\\n  hci_internal.c\\n  hci_internal_wrappers.c\\n)\\n\\nzephyr_library_sources_ifdef(\\n  CONFIG_BT_CTLR_CRYPTO\\n  crypto.c\\n)\\n\\nzephyr_library_sources_ifdef(\\n  CONFIG_BT_CTLR_SDC_CS_MULTIPLE_ANTENNA_SUPPORT\\n  cs_antenna_switch.c\\n)\\n\\nzephyr_library_link_libraries(subsys__bluetooth)\\n\\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Resetting nRF9160 using nrfjprog with Debugreset\nDESCRIPTION: This snippet demonstrates using the `--debugreset` option with `nrfjprog` to reset nRF9160 platforms. This is a workaround for a TF-M reset failure issue encountered with nrfjprog version 10.22.x.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_65\n\nLANGUAGE: shell\nCODE:\n```\n\"nrfjprog -f nrf91 --debugreset\"\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth CTS Client Source\nDESCRIPTION: This line includes the Current Time Service (CTS) client source when CONFIG_BT_CTS_CLIENT is configured. This allows devices to obtain time information from a Bluetooth server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_CTS_CLIENT cts_client.c)\n```\n\n----------------------------------------\n\nTITLE: Executing FOTA Update for Application and Modem (Python)\nDESCRIPTION: Command to update both application and modem firmware using the fota.py script. It specifies multiple update instances and binary files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n./scripts/fota.py -id urn:imei:359746166785274 update 0 file app_update.bin update 1 file mfw_nrf91x1_update_from_2.x.x_to_2.x.x-FOTA-TEST.bin\n```\n\n----------------------------------------\n\nTITLE: Zephyr Git Log Command for Upstream Commits\nDESCRIPTION: Git command to show Zephyr upstream commits incorporated into nRF Connect SDK since the last release.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.9.0-nRF54H20-1.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline beb733919d ^ea02b93eea\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Locates the Zephyr SDK package using environment variable hints, ensuring proper build environment setup\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_clock_control/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Implementing OnSubscriptionRequested Method for Matter Device\nDESCRIPTION: Implements the OnSubscriptionRequested method in a Matter application to set appropriate subscription report intervals, helping to reduce power consumption for sleepy devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n#include <app/ReadHandler.h>\n\nclass SubscriptionApplicationCallback : public chip::app::ReadHandler::ApplicationCallback\n{\n   CHIP_ERROR OnSubscriptionRequested(chip::app::ReadHandler & aReadHandler,\n                                      chip::Transport::SecureSession & aSecureSession) override;\n};\n\nCHIP_ERROR SubscriptionApplicationCallback::OnSubscriptionRequested(chip::app::ReadHandler & aReadHandler,\n                                                     chip::Transport::SecureSession & aSecureSession)\n{\n   /* Set the interval in seconds appropriate for your application use case, example 60 seconds. */\n   uint32_t exampleMaxInterval = 60;\n   return aReadHandler.SetReportingIntervals(exampleMaxInterval);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for UART Baudrate Test Project\nDESCRIPTION: Sets up CMake build configuration for a UART baudrate test project. Requires CMake 3.20.0 or higher, finds and includes Zephyr package, and configures source file compilation by globbing all .c files in the src directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/uart/uart_baudrate_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(uart_baudrate_test)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Enabling VPR Timer Counter Interrupts in C\nDESCRIPTION: Function to enable interrupt requests from counter 0. On nRF54L15 FLPR, this triggers IRQ line 31.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_csr_cnt_irq_enable_set()\n```\n\n----------------------------------------\n\nTITLE: Regulatory Data Table Markup for Countries G-J\nDESCRIPTION: ASCII-style table markup showing regulatory data for countries from Guatemala to Jordan. The table includes country names, country codes, and various numeric parameters with some values marked with superscript annotations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_support.rst#2025-04-21_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n| Guatemala                              | GT           | 30  | 30  | 30  | 30  | 30  | 30  | 30  | 30  | 30  | 30  | 30  | 30  | 30  | -\\  | 23           | 23           | 23           | 23           | 23           | 23           | 23           | 23           | 24           | 24           | 24           | 24           | 24           | 24           | 24           | 24           | 24           | 24           | 24           | -\\           | 27  | 27  | 27  | 27  | 27  | -\\  | -\\  | -\\  |\n+----------------------------------------+--------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+-----+-----+-----+-----+-----+-----+-----+-----+\n```\n\n----------------------------------------\n\nTITLE: Defining Project\nDESCRIPTION: This snippet declares the project name as 'iso_time_sync,' which serves as the identifier for this specific application within the build system. This is a standard command in CMake to initiate project settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_combined_bis_and_cis/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(iso_time_sync)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr Project\nDESCRIPTION: This CMake configuration sets the minimum required version, finds the Zephyr package, includes a test template, and links necessary libraries such as SUIT platform APIs. It depends on Zephyr and specific SUIT-related components. It assumes Zephyr is available in the environment and project directory paths are correctly configured.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/mci/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_mci)\ninclude(../cmake/test_template.cmake)\n\nzephyr_library_link_libraries(suit_mci)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STORAGE suit_storage_interface)\nzephyr_library_link_libraries(suit_execution_mode)\n```\n\n----------------------------------------\n\nTITLE: RST Section Definition for Power Manager\nDESCRIPTION: RST markup defining the power manager module section and structure with table of contents.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/power_manager.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _nrf_desktop_power_manager:\\n\\nPower manager module\\n####################\\n\\n.. contents::\\n   :local:\\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: Including Common Matter Source Files\nDESCRIPTION: Includes common source files for Matter projects from the Nordic SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/cmake/source_common.cmake)\n```\n\n----------------------------------------\n\nTITLE: Initializing Location Request with GNSS and Cellular Methods\nDESCRIPTION: Example of initializing a location request configuration with GNSS and Cellular methods. The location_request() function is called to start the location retrieval process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/location.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nlocation_request(&config)\\nmethod list: GNSS, Cellular\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This code snippet locates the Zephyr package necessary for the project by checking the environment variable for the Zephyr base directory, ensuring the correct framework is available for building the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_event_manager_profiler_tracer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Configuring PDN Type for Custom APN\nDESCRIPTION: AT command to set the PDN type for the custom APN. The type is specified as an integer value (0-3) representing different PDN types.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_13\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"pdn_type\"[,<pdn_type>]\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Country Regulatory Domain in Wi-Fi Radio Test (Shell)\nDESCRIPTION: This command sets the regulatory domain to a specific country for the Wi-Fi Radio test sample. The country code should be provided as an argument.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/setting_regulatory_domain.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test reg_domain <country code>\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets up the CMake project. It specifies the minimum CMake version required (3.20.0), locates the Zephyr RTOS environment, declares the project name as 'remote', and adds the 'main.c' file located in the '../src' directory as a source file to the application target. The `find_package` command requires the Zephyr environment to be configured, typically through the ZEPHYR_BASE environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_outside_of_main/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(remote)\n\ntarget_sources(app PRIVATE ../src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion with CONFIG_BT_MESH\nDESCRIPTION: This CMake snippet includes the `mesh` subdirectory in the build process only if the `CONFIG_BT_MESH` configuration option is defined. `add_subdirectory_ifdef` is used for conditional subdirectory inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory_ifdef(CONFIG_BT_MESH mesh)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Board Runner Arguments for QSPI Memory in nRF Util\nDESCRIPTION: CMake code snippet that sets up board runner arguments for nRFUtil, specifically configuring the external memory with a QSPI configuration JSON file for Thingy:53 hardware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/qspi_xip_guide_nrf5340.rst#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nboard_runner_args(nrfutil \"--ext-mem-config-file=${CMAKE_CURRENT_SOURCE_DIR}/qspi_thingy53.json\")\n```\n\n----------------------------------------\n\nTITLE: Propagating Bluetooth Peer Events in CAF\nDESCRIPTION: This code represents the structure used to propagate information about Bluetooth connection state changes in the CAF Bluetooth LE state module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_state.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nble_peer_event\n```\n\n----------------------------------------\n\nTITLE: Enabling Modem Traces with RAM Backend using CMake\nDESCRIPTION: Command to add the nrf91-modem-trace-ram snippet when building an application with CMake. This enables modem tracing with RAM storage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_snippet.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n-D<image_name>_SNIPPET=\"nrf91-modem-trace-ram\" [...]\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for nRF WiFi Shutdown Project\nDESCRIPTION: Sets up the CMake build configuration for the nrf_wifi_shutdown project. It requires CMake 3.20.0 or higher, finds the Zephyr package, includes network headers from Zephyr's IP subsystem, and adds the main.c source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/shutdown/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_shutdown)\n\ntarget_include_directories(app PUBLIC ${ZEPHYR_BASE}/subsys/net/ip)\n\ntarget_sources(app PRIVATE\n\tsrc/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pressure Sensor Header Attribute Change Handler\nDESCRIPTION: Adds a setter method in the pressure sensor header file to update the measured value attribute.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nvoid SetMeasuredValue(int16_t value) { mMeasuredValue = value; }\n```\n\n----------------------------------------\n\nTITLE: Adding Application Sources to Target\nDESCRIPTION: This snippet adds the previously collected application source files to the target 'app' as private sources, allowing them to be compiled during the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/system_off/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring ETB Trace Library Build in CMake\nDESCRIPTION: Sets up a Zephyr library for ETB tracing, including source files and include paths. Conditionally includes low-power tracing support and CPU idle functionality based on configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/debug/etb_trace/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(etb_trace.c)\nzephyr_library_sources_ifdef(CONFIG_ETB_TRACE_LOW_POWER etb_trace_lp.c)\nzephyr_library_include_directories(.)\nzephyr_library_include_directories(${ZEPHYR_BASE}/kernel/include)\n\n# Include soc_cpu_idle.h globally only when it's used\nzephyr_include_directories_ifdef(CONFIG_ARM_ON_EXIT_CPU_IDLE include)\n```\n\n----------------------------------------\n\nTITLE: Clock Configuration for External Sources - MPSL - Documentation Format\nDESCRIPTION: This entry informs that specific external configurations have not been correctly tested, leading to recommendations against their use in application development for stability reasons.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_49\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-15064: External Full swing and External Low swing not working Even though the MPSL Clock driver accepts a Low Frequency Clock source configuration for External Full swing and External Low swing, the clock control system is not configured correctly.\n```\n\n----------------------------------------\n\nTITLE: Sample Console Output - Startup and Network Connection\nDESCRIPTION: Shows typical console output when the sample starts up and establishes a network connection, including reset reason logging and build identification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/debug/memfault/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v3.0.99-ncs1-4913-gf7b06162027d  ***\n<inf> mflt: Reset Reason, RESETREAS=0x0\n<inf> mflt: Reset Causes:\n<inf> mflt: Power on Reset\n<inf> mflt: GNU Build ID: a09094cdf9da13f20719f87016663ab529b71267\n<inf> memfault_sample: Memfault sample has started\n```\n\n----------------------------------------\n\nTITLE: Configure Zephyr Connected Home IP (CHIP)\nDESCRIPTION: This snippet configures Connected Home over IP (CHIP) settings. If `SB_CONFIG_ZEPHYR_CONNECTEDHOMEIP_MODULE` is enabled, it checks if `SB_CONFIG_MATTER` is also enabled. If so, it enables `CONFIG_CHIP`. It further checks for `SB_CONFIG_MATTER_OTA` and enables/disables `CONFIG_CHIP_OTA_REQUESTOR` and `CONFIG_CHIP_OTA_IMAGE_BUILD` accordingly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n \"if(SB_CONFIG_ZEPHYR_CONNECTEDHOMEIP_MODULE)\n    if(SB_CONFIG_MATTER)\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_CHIP y)\n\n      if(SB_CONFIG_MATTER_OTA)\n        set_config_bool(${DEFAULT_IMAGE} CONFIG_CHIP_OTA_REQUESTOR y)\n        set_config_bool(${DEFAULT_IMAGE} CONFIG_CHIP_OTA_IMAGE_BUILD y)\n      else()\n        set_config_bool(${DEFAULT_IMAGE} CONFIG_CHIP_OTA_REQUESTOR n)\n        set_config_bool(${DEFAULT_IMAGE} CONFIG_CHIP_OTA_IMAGE_BUILD n)\n      endif()\n    else()\n      set_config_bool(${DEFAULT_IMAGE} CONFIG_CHIP n)\n    endif()\n  endif()\"\n```\n\n----------------------------------------\n\nTITLE: Registering Callbacks for Modem Initialization, Functional Mode Changes, and Shutdown\nDESCRIPTION: This code snippet demonstrates how to use macros to register callbacks for modem initialization, functional mode changes, and shutdown in the cellular modem library. It utilizes the NRF_MODEM_LIB_ON_INIT, NRF_MODEM_LIB_ON_CFUN, and NRF_MODEM_LIB_ON_SHUTDOWN macros for callback registration during compile time. The expected outputs include confirmation of initialization, mode change, and shutdown processes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_callbacks/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define NRF_MODEM_LIB_ON_INIT(on_modem_init)\n#define NRF_MODEM_LIB_ON_CFUN(on_cfun)\n#define NRF_MODEM_LIB_ON_SHUTDOWN(on_modem_shutdown)\n\nvoid on_modem_init(void) {\n    // Code to execute on modem initialization\n}\n\nvoid on_cfun(void) {\n    // Code to execute on functional mode change\n}\n\nvoid on_modem_shutdown(void) {\n    // Code to execute on modem shutdown\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Pair Storage Unit Test Project in CMake\nDESCRIPTION: This CMake snippet sets up a project for unit testing Fast Pair storage of Account Keys. It defines the minimum CMake version, finds the Zephyr package, sets the project name, adds test sources, includes necessary directories, and links the Fast Pair storage module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/fast_pair/storage/account_key_storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Fast Pair storage of Account Keys unit test\")\n\n# Add test sources\ntarget_sources(app PRIVATE\n\t       src/main.c\n\t       src/settings_mock.c\n\t       src/test_corrupted_data.c\n\t       ../common/src/common_utils.c\n)\ntarget_include_directories(app PRIVATE include)\ntarget_include_directories(app PRIVATE ../common/include)\n\n# Add Fast Pair storage as part of the test\nset(NCS_FAST_PAIR_BASE ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/services/fast_pair)\nadd_subdirectory(${NCS_FAST_PAIR_BASE}/fp_storage fp_storage)\ntarget_link_libraries(app PRIVATE fp_storage)\n```\n\n----------------------------------------\n\nTITLE: Memory Requirements Table for SoftAP WiFi Provisioning (reStructuredText)\nDESCRIPTION: This table presents the memory footprint for the SoftAP based provisioning sample on nRF7002 DK. It breaks down the ROM and RAM usage for various components including the Wi-Fi driver, nRF70 firmware patch, and WPA supplicant.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/provisioning/mem_requirements_softap.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n+-------------------------------------------------------------+-------------+-------------------------------------------+-------------------------------+----------------------+---------------------------------+--------------------+----------------------+\n| Sample                                                      |   Total ROM |   Wi-Fi driver ROM                        |            nRF70 FW patch ROM |   WPA supplicant ROM |   Total RAM (incl. static heap) |   Wi-Fi driver RAM |   WPA supplicant RAM |\n+=============================================================+=============+===========================================+===============================+======================+=================================+====================+======================+\n| :ref:`SoftAP based provision <softap_wifi_provision_sample>`|         700 |                                         0 |                            79 |                    0 |                             220 |                  0 |                   48 |\n+-------------------------------------------------------------+-------------+-------------------------------------------+-------------------------------+----------------------+---------------------------------+--------------------+----------------------+\n```\n\n----------------------------------------\n\nTITLE: Linking SUIT Cache Interface and Utility Libraries\nDESCRIPTION: Links additional utility and interface libraries, with conditional linking for read-write cache configurations\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/cache/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(suit_cache_interface)\n\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_CACHE_RW suit_utils)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_CACHE_RW suit_envelope_info)\n\nzephyr_library_link_libraries(suit_stream_sources_interface)\nzephyr_library_link_libraries(suit_source_selector_interface)\nzephyr_library_link_libraries(suit_memory_layout_interface)\nzephyr_library_link_libraries(suit_stream_sinks_interface)\n```\n\n----------------------------------------\n\nTITLE: CMake Source Files Configuration\nDESCRIPTION: This snippet defines the source files to be included in the application.  It uses FILE(GLOB) to collect all C files from the src/ directory and explicitly includes nrf_rpc_single_thread.c from the common directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_rpc/dev_info/server/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"FILE(GLOB app_sources src/*.c)\n\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ../common/nrf_rpc_single_thread.c\n)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling PBKDF2-AES-CMAC-PRF-128 KDF in nRF Connect SDK\nDESCRIPTION: This Kconfig option enables support for PBKDF2 with AES-CMAC as the pseudorandom function (PRF). This configuration uses AES-CMAC with a 128-bit key for the PRF within the PBKDF2 algorithm.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/nrf_security/doc/driver_config.rst#2025-04-21_snippet_11\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_PSA_WANT_ALG_PBKDF2_AES_CMAC_PRF_128`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NFC RPC T2T Server Test Project in CMake\nDESCRIPTION: Sets up the CMake project for NFC RPC T2T Server Test, including required packages, source files, include directories, and linker options. It enforces single-threaded nRF RPC command processing and includes necessary NFC headers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nfc/rpc/server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nfc_rpc_t2t_server_test)\n\nFILE(GLOB app_sources src/*.c)\n\ntarget_include_directories(app PRIVATE\n  # Needed to access OpenThread RPC command IDs.\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/nfc/rpc/common\n  ../common\n)\n\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ../common/nrf_rpc_single_thread.c\n)\n\nzephyr_include_directories(${ZEPHYR_NRFXLIB_MODULE_DIR}/nfc/include/)\n\n# Enforce single-threaded nRF RPC command processing.\ntarget_link_options(app PUBLIC\n  -Wl,--wrap=nrf_rpc_os_init,--wrap=nrf_rpc_os_thread_pool_send\n)\n```\n\n----------------------------------------\n\nTITLE: Executing J-PAKE Steps for Server and Client in RST\nDESCRIPTION: This snippet describes the core functionality of the sample, which involves going through the steps of the J-PAKE protocol on both the server and client sides. This process is essential for establishing a shared secret between the two parties.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/ecjpake/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\n2. Goes through the steps for J-PAKE on server and client sides.\n```\n\n----------------------------------------\n\nTITLE: Importing reStructuredText Directives for PBKDF2 Sample\nDESCRIPTION: These directives set up the document structure, include content from other files, and generate tables from YAML data for the PBKDF2 sample documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/pbkdf2/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _crypto_pbkdf2:\n\nCrypto: PBKDF2\n##############\n\n.. contents::\n   :local:\n   :depth: 2\n\n.. table-from-sample-yaml::\n\n.. include:: /includes/tfm.txt\n```\n\n----------------------------------------\n\nTITLE: Adding sources based on CONFIG_BT_FAST_PAIR_FMDN_BATTERY\nDESCRIPTION: This conditional block adds the 'battery.c' source file to the 'fmdn' library if the Kconfig option 'CONFIG_BT_FAST_PAIR_FMDN_BATTERY' is enabled.  The source is added as a PRIVATE source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(CONFIG_BT_FAST_PAIR_FMDN_BATTERY)\n  target_sources(fmdn PRIVATE battery.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysbuild for Software Keys Storage\nDESCRIPTION: Kconfig options for enabling secure boot on the application core, specifying the signing key file, and listing public key files for key revocation. Uses absolute paths for key files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_signature_keys.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nSB_CONFIG_SECURE_BOOT_APPCORE=y\nSB_CONFIG_SECURE_BOOT_SIGNING_KEY_FILE=\"/path/to/priv_a.pem\"\nSB_CONFIG_SECURE_BOOT_PUBLIC_KEY_FILES=\"/path/to/pub_b.pem,/path/to/pub_c.pem\"\n```\n\n----------------------------------------\n\nTITLE: Add Source Files to Target\nDESCRIPTION: This command adds the source file `src/main.c` to the application target. The `target_sources` command links the specified source file to the application during the build process. The `PRIVATE` keyword indicates that the source file is only used within the scope of the 'app' target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_stm/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Bluetooth Advertising in Kconfig\nDESCRIPTION: Defines a Kconfig option to disable default Bluetooth advertising and allow custom implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/common/config.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_CUSTOM_BLUETOOTH_ADVERTISING\n  \"bool\" - Disable the default Bluetooth advertising start, which is defined in the board.cpp file.\n  This allows you to use a custom one.\n```\n\n----------------------------------------\n\nTITLE: Including DFU Cache Sink Headers - CMake\nDESCRIPTION: This snippet manages the inclusion of DFU cache sink headers when CONFIG_MOCK_DFU_CACHE_SINK is enabled, incorporating the necessary components for handling sink operations during tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_DFU_CACHE_SINK)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_STREAM -DCONFIG_SUIT_STREAM_SINK_CACHE)\n  target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/stream/stream_sinks/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Audio Synchronization State Enumeration Values\nDESCRIPTION: Key enumeration values used in the synchronization module's state machine including DRIFT_STATE_LOCKED, PRES_STATE_INIT, PRES_STATE_WAIT, and PRES_STATE_LOCKED.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/firmware_architecture.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nDRIFT_STATE_LOCKED\nPRES_STATE_INIT\nPRES_STATE_WAIT\nPRES_STATE_LOCKED\n```\n\n----------------------------------------\n\nTITLE: Testing Console Output for Multicore Idle Test\nDESCRIPTION: The expected console output when booting the multicore idle test on the application and remote cores of the nrf5340dk. Shows boot messages and iteration logs indicating successful initialization and operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK zephyr-v3.5.0-3517-g9458a1aaf744 ***\\nMulti-core idle test on nrf5340dk/nrf5340/cpuapp\\nMulti-core idle test iteration 0\\nMulti-core idle test iteration 1\\n...\n```\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK zephyr-v3.5.0-3517-g9458a1aaf744 ***\\nMulti-core idle test on nrf5340dk/nrf5340/cpunet\\nMulti-core idle test iteration 0\\nMulti-core idle test iteration 1\\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF WiFi Soft AP Project with CMake\nDESCRIPTION: This CMake script sets up the build environment for a WiFi Soft Access Point application using the nRF Connect SDK. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, includes necessary directories for networking headers, and specifies the main source file for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/softap/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2024 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_softap)\n\n# Needed for net_private.h\ntarget_include_directories(app PUBLIC ${ZEPHYR_BASE}/subsys/net/ip)\n\ntarget_sources(app PRIVATE\n\tsrc/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing TLS ALPN List Socket Option in C\nDESCRIPTION: Adds a TLS_ALPN_LIST socket option for TLS sockets to specify Application-Layer Protocol Negotiation (ALPN) protocols.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nTLS_ALPN_LIST\n```\n\n----------------------------------------\n\nTITLE: Rebooting for SUIT DFU in C\nDESCRIPTION: Reboot the device after scheduling a SUIT-style update.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_target.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\ndfu_target_suit_reboot(delay);\n```\n\n----------------------------------------\n\nTITLE: Enabling Bluetooth State Power Manager Module in Kconfig\nDESCRIPTION: Configuration option to enable the Bluetooth state power manager module. It depends on CAF_BLE_STATE and CAF_POWER_MANAGER options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_state_pm.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_CAF_BLE_STATE_PM\n```\n\n----------------------------------------\n\nTITLE: Central Device Output Log\nDESCRIPTION: Sample terminal output showing latency measurements from the central device perspective, including device initialization, scanning, connection and service discovery.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/radio_notification_cb/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nStarting radio notification callback sample.\nI: SoftDevice Controller build revision:\nI: d6 da c7 ae 08 db 72 6f |......ro\nI: 2a a3 26 49 2a 4d a8 b3 |*.&I*M..\nI: 98 0e 07 7f             |....\nI: HW Platform: Nordic Semiconductor (0x0002)\nI: HW Variant: nRF52x (0x0002)\nI: Firmware: Standard Bluetooth controller (0x00) Version 214.51162 Build 1926957230\nI: Identity: FA:BB:79:57:D6:45 (random)\nI: HCI: version 5.4 (0x0d) revision 0x11fb, manufacturer 0x0059\nI: LMP: version 5.4 (0x0d) subver 0x11fb\nChoose device role - type c (central) or p (peripheral):\nCentral. Starting scanning\nScanning started\nDevice found: CF:99:32:A5:4B:11 (random) (RSSI -43)\nConnected: CF:99:32:A5:4B:11 (random)\nService discovery completed\nLatency: 3771 us, round trip: 53771 us\nLatency: 3741 us, round trip: 53741 us\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Project with CMake\nDESCRIPTION: This CMake snippet is responsible for setting up a build configuration for the Zephyr project named 'uart_pm'. It specifies that the minimum required version of CMake is 3.20.0 and ensures that the Zephyr SDK is found via the ZEPHYR_BASE environment variable. The project's source files are specified with the 'target_sources' command, pointing to the main.c file within the specified directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/uart/uart_pm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(uart_pm)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/tests/drivers/uart/uart_pm/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: RF Tool RX/TX Configuration with More Data (Server)\nDESCRIPTION: This command configures the DECT RF tool for simultaneous RX/TX operation on the server side with specific configurations for data transfer. It enables RX find sync, sets RX/TX subslot and idle subslot counts, sets the modulation and coding scheme (MCS), sets the frame repeat count, and specifies channel 1677.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_19\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool -m rx_tx --rx_find_sync --rx_subslot_count 9 --rx_idle_subslot_count 4 --tx_subslot_count 8 --tx_idle_subslot_count 4 --tx_mcs 4 --frame_repeat_count 15 -c 1677\n```\n\n----------------------------------------\n\nTITLE: Performing Notification Action in Bluetooth Low Energy App\nDESCRIPTION: Format of the message to send back to perform a notification action. It includes Command ID, Notification UID, and Action fields. The example shows both positive and negative actions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ancs_client/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n02 01 02 03 04 00\n```\n\nLANGUAGE: text\nCODE:\n```\n02 01 02 03 04 01\n```\n\n----------------------------------------\n\nTITLE: Building Bluetooth HCI LPUART Sample (West)\nDESCRIPTION: This command builds the bluetooth-hci-lpuart-sample for the nrf9160dk/nrf52840 board target, specifying the board version.  It's a prerequisite step before programming the main controller with the LTE Sensor Gateway sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lte_ble_gateway/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"west build --board nrf9160dk@1.1.0/nrf52840\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Pair Storage Unit Test Build in CMake\nDESCRIPTION: Sets up the CMake build configuration for Fast Pair storage factory reset unit tests. Includes source files, sets include directories, adds Fast Pair storage module, and defines necessary compiler flags. Requires CMake 3.20.0 or higher and Zephyr SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/fast_pair/storage/factory_reset/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Fast Pair storage factory reset unit test\")\n\n# Add test sources\ntarget_sources(app PRIVATE\n\t       src/main.c\n\t       ../common/src/common_utils.c\n)\ntarget_include_directories(app PRIVATE ../common/include)\n\n# Add Fast Pair storage as part of the test\nset(NCS_FAST_PAIR_BASE ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/services/fast_pair)\nadd_subdirectory(${NCS_FAST_PAIR_BASE}/fp_storage fp_storage)\ntarget_link_libraries(app PRIVATE fp_storage)\n\n# For strnlen()\ntarget_compile_definitions(app PRIVATE _POSIX_C_SOURCE=200809L)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic Semiconductor NRF SDK Project\nDESCRIPTION: This CMake script configures a build environment for a Nordic Semiconductor project. It requires CMake 3.13.1 or higher, finds the Zephyr package from the environment variable, sets up a project with no language specified, and includes all C source files from the src directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/secure_services/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Updated HID Feature Logic\nDESCRIPTION: Bug fix addressing keyboard LED state after host disconnection\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.8.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nFixed an issue that was causing the HID keyboard LEDs to remain turned on after host disconnection while no other hosts were connected.\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Flash IPUC Component Check in PlantUML\nDESCRIPTION: A PlantUML sequence diagram showing the flow of flash_component_ipuc_check. The diagram illustrates how the process acquires a spare IPUC device instance to check if IPUC creation is possible, then releases it. It includes participants flash_ipuc, flash_ipuc_dev, ssf, and suit_utils.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/flash_cache_ipuc_check.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant flash_ipuc\nparticipant flash_ipuc_dev\nparticipant ssf\nparticipant suit_utils\n\n--> flash_ipuc ++ : flash_component_ipuc_check(min_address)\nflash_ipuc -> flash_ipuc ++ : flash_cache_ipuc_create(min_address)\nflash_ipuc -> flash_ipuc_dev ** : get_free_dev()\nnote right\n  Checking if creating an IPUC is possible requires\n  a spare IPUC device instance\nend note\ndeactivate flash_ipuc\n\nflash_ipuc -> flash_ipuc ++: flash_ipuc_release(ipuc_dev)\nflash_ipuc -> flash_ipuc_dev : release(ipuc_dev)\ndestroy flash_ipuc_dev\ndeactivate flash_ipuc\ndeactivate flash_ipuc\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Getting Year-day Schedule using Chip-Tool\nDESCRIPTION: This command retrieves the Year-day schedule from the door lock using the chip-tool, specifying the schedule index, user index, destination ID, and endpoint ID. It queries the device for the settings of a specific year day schedule.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n\"./chip-tool doorlock get-year-day-schedule *yearday-index* *user-index* *destination-id* *endpoint-id*\"\n```\n\n----------------------------------------\n\nTITLE: Board Target Identifiers for Nordic Hardware\nDESCRIPTION: List of board target identifiers used for different Nordic Semiconductor development kits and their variants including secure/non-secure versions and different CPU configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/sample_board_rows.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnrf52dk/nrf52832\nnrf52840dk/nrf52840\nnrf52840dongle/nrf52840\nnrf9160dk/nrf9160\nnrf9160dk/nrf9160/ns\nnrf9160dk/nrf52840\nnrf9161dk/nrf9161\nnrf9161dk/nrf9161/ns\nnrf9131ek/nrf9131\nnrf9131ek/nrf9131/ns\nnrf9151dk/nrf9151\nnrf9151dk/nrf9151/ns\nnrf5340dk/nrf5340/cpuapp\nnrf5340dk/nrf5340/cpuapp/ns\nnrf5340dk/nrf5340/cpunet\nnrf52833dk/nrf52833\nnrf52833dongle/nrf52833\nnrf52833dk/nrf52820\nnrf52820dongle/nrf52820\nthingy91/nrf9160\nthingy91/nrf9160/ns\nthingy91x/nrf9151\nthingy91x/nrf9151/ns\nthingy91x/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for DFU Target SMP Test\nDESCRIPTION: Sets up the CMake project for DFU Target SMP testing. It includes finding the Zephyr package, defining project sources, setting include directories, and specifying compilation flags for the test environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/dfu/dfu_target/smp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(dfu_target_smp_test)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntarget_sources(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/dfu/dfu_target/src/dfu_target_smp.c\n  )\n\nset(includes\n\"src/\"\n)\n\ntarget_include_directories(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/dfu/include\n  ${includes}\n  )\n\n# Mandatory stubbed flags for building test setup\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_DFU_TARGET_LOG_LEVEL=2\n  -DCONFIG_DFU_TARGET_SMP=1\n  -DCONFIG_DFU_TARGET_SMP_IMAGE_LIST_SIZE=2\n  )\n\nzephyr_library_link_libraries(MCUBOOT_BOOTUTIL)\n```\n\n----------------------------------------\n\nTITLE: Including Debug Samples Documentation in reStructuredText\nDESCRIPTION: This snippet defines the structure for the debug samples documentation page. It includes a title, a brief description, and a toctree for linking to individual sample README files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/debug.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _debug_samples:\n\nDebug samples\n#############\n\nThis section lists the |NCS| samples useful for :ref:`debugging`.\n\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n\n|filter_samples_by_board|\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/debug/*/README\n```\n\n----------------------------------------\n\nTITLE: Setting Scene Client Model Instance\nDESCRIPTION: This command selects the Scene Client model instantiated on the specified element ID for subsequent messaging. If no model instance is specified, defaults to the first instance found on the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scene_cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models scene instance set <ElemIdx>\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Library\nDESCRIPTION: Defines a Zephyr library using the zephyr_library() CMake function. This specifies that a library should be created, which can be linked against other parts of the Zephyr project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/mpsl/clock_control/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Library Sources\nDESCRIPTION: This CMake snippet specifies the source files for the Zephyr library. It includes both Zephyr-specific files and files from the WFA QT base. This defines the source code that makes up the library, linking Zephyr-specific adaptations to the WFA QT application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/wfa-qt/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(\n\t# Zephyr's port of the Indigo API\n\t${SOURCES_BASE}/src/wpas_events.c\n\t${SOURCES_BASE}/src/main.c\n\t${SOURCES_BASE}/src/indigo_api_callback_dut.c\n\t${SOURCES_BASE}/src/vendor_specific_dut.c\n\t${SOURCES_BASE}/src/utils.c\n\t${WFA_QT_BASE}/eloop.c\n\t${WFA_QT_BASE}/indigo_api.c\n\t${WFA_QT_BASE}/indigo_packet.c\n\t${WFA_QT_BASE}/qt_client.c\n)\n```\n\n----------------------------------------\n\nTITLE: Checking FMDN Provisioning State in C\nDESCRIPTION: New function added to the Fast Pair FMDN extension API to synchronously check the current FMDN provisioning state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-3.0.0-preview2.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbt_fast_pair_fmdn_is_provisioned()\n```\n\n----------------------------------------\n\nTITLE: Creating CMakeLists.txt for nRF52820 Emulation on nRF52833 DK\nDESCRIPTION: CMakeLists.txt file required for developing applications that emulate nRF52820 on the nRF52833 DK. This file defines compiler definitions for proper emulation and timing settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_compile_definitions(DEVELOP_IN_NRF52833)\nzephyr_compile_definitions(NRFX_COREDEP_DELAY_US_LOOP_CYCLES=3)\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake for Nordic SDK\nDESCRIPTION: This CMake script initializes a Nordic Semiconductor project, specifies source files, and includes necessary directories. It requires Zephyr and a minimum CMake version of 3.20.0. The main function is to organize the build with target sources and includes. This snippet assumes Zephyr is installed and available in the environment variables.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/chat/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/model_handler.c\n\tsrc/chat_cli.c)\ntarget_include_directories(app PRIVATE include)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Find Zephyr Package\nDESCRIPTION: This command uses CMake's `find_package` to locate the Zephyr SDK. It requires the Zephyr package and uses the environment variable `ZEPHYR_BASE` as a hint for the location of the SDK. This step is crucial for integrating the Zephyr RTOS into the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_stm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name and Source Files\nDESCRIPTION: Defines the project name and adds a source file from the power consumption common directory for the application\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_hpu_temp_meas/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nproject(idle_hpu_temp_meas)\n\ntarget_sources(app PRIVATE ../../power_consumption/common/remote_sleep_forever/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Opening a Client Socket using AT command\nDESCRIPTION: This AT command opens a client socket with the specified protocol, type, and protocol number. It returns the socket identifier.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n**AT#XSOCKET=1,1,0**\n#XSOCKET: 2,1,6\nOK\n```\n\n----------------------------------------\n\nTITLE: Adding Board Source File to Zephyr Library\nDESCRIPTION: CMake command to include board.c source file in the Zephyr library compilation process. Part of the Nordic nRF Connect SDK build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/boards/nordic/nrf7120pdk/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(board.c)\n```\n\n----------------------------------------\n\nTITLE: Battery Voltage Drop Console Output\nDESCRIPTION: Demonstrates console output when battery voltage transitions from high to low levels, showing the system's response and mode changes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/battery/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nBattery voltage: 3191\nExecuting DNS lookup for 'google.com'...\nBattery voltage: 3195\nExecuting DNS lookup for 'apple.com'...\nBattery voltage: 3191\nExecuting DNS lookup for 'amazon.com'...\nBattery voltage: 3195\nExecuting DNS lookup for 'microsoft.com'...\nBattery voltage: 3195\nExecuting DNS lookup for 'example.com'...\nBattery low level: 3191\nBattery low level: 3195\nBattery low level: 3253\nBattery voltage: 3250\nSetting modem to RX only mode...\nRX only mode set.\nInitializing modem and connecting...\nBattery low level: 3191\nConnected.\nBattery low level: 3195\n```\n\n----------------------------------------\n\nTITLE: Building nRF Desktop with nRF21540 EK Shield for Dual Core\nDESCRIPTION: Command to build nRF Desktop application for nRF5340dk with nRF21540 EK shield support for both application and network cores, disabling LLPM.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/nRF21540ek_support.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf21540ek -Dipc_radio_SHIELD=nrf21540ek -DCONFIG_CAF_BLE_USE_LLPM=n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Model Publication Buffer Initialization\nDESCRIPTION: Shows how to dynamically initialize a model's publication buffer in the init callback using net_buf_simple_init_with_data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/dev_overview.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nstatic struct bt_mesh_model_pub pub_ctx;\nstatic struct net_buf_simple pub_msg;\nstatic uint8_t buf[BT_MESH_MODEL_BUF_LEN(MESSAGE_SET_OPCODE,\n                                         MESSAGE_SET_MAXLEN)];\n\nstatic int model_init(struct bt_mesh_model *model)\n{\n    model->pub = &pub_ctx;\n    net_buf_simple_init_with_data(&pub_msg, buf, sizeof(buf));\n    pub_ctx.msg = &pub_msg;\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for NRF RPC Transport Mock in CMake\nDESCRIPTION: Sets up a Zephyr library and conditionally includes the mock NRF RPC transport source file based on the CONFIG_MOCK_NRF_RPC_TRANSPORT flag. This allows for flexible build configurations depending on whether mocking is required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/mocks/nrf_rpc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources_ifdef(CONFIG_MOCK_NRF_RPC_TRANSPORT mock_nrf_rpc_transport.c)\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth BMS Source\nDESCRIPTION: This code includes the Battery Management System (BMS) source file if CONFIG_BT_BMS is defined. It is part of the Bluetooth profiles for battery management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_BMS bms.c)\n```\n\n----------------------------------------\n\nTITLE: Validating Zigbee Steering Signal Status\nDESCRIPTION: Workaround for handling commissioning failures by checking Extended PAN ID during steering signal processing\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nswitch(sig)\n{\ncase ZB_BDB_SIGNAL_STEERING:\n        if (status == RET_OK) {\n                zb_ext_pan_id_t extended_pan_id;\n                zb_get_extended_pan_id(extended_pan_id);\n                if (!(ZB_IEEE_ADDR_IS_VALID(extended_pan_id))) {\n                       zb_buf_set_status(bufid, -1);\n                       status = -1;\n                }\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading an Image with mcumgr\nDESCRIPTION: This command uploads a new image to the specified device using the mcumgr CLI, by enabling the option to prevent a full erase of the partition before the upload. It requires the CONFIG_MCUBOOT_SERIAL option to be enabled and reports the upload progress.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ mcumgr -c acm0 image upload -e build/zephyr/zephyr.signed.bin\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for NCS Specific Commits\nDESCRIPTION: Command to list NCS specific commits, including cherry-picked upstream commits\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-3.0.0-preview2.rst#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^fdeb735017\n```\n\n----------------------------------------\n\nTITLE: Setting Zephyr Linker Options\nDESCRIPTION: Configures linker options to allow multiple symbol definitions in the final binary.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/light_hue/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_ld_options(\n    ${LINKERFLAGPREFIX},--allow-multiple-definition\n    )\n```\n\n----------------------------------------\n\nTITLE: Continuous DSSS/CCK TX Traffic Sequence in 802.11b Mode\nDESCRIPTION: Complete command sequence for running a continuous DSSS/CCK TX traffic test in 802.11b mode. The configuration uses channel 1, 1024 byte payload, 8600 μs gap, and 1 Mbps data rate with long preamble for a 50.07% duty cycle.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 1\nuart:~$ wifi_radio_test tx_pkt_tput_mode 0\nuart:~$ wifi_radio_test tx_pkt_preamble 0\nuart:~$ wifi_radio_test tx_pkt_rate 1\nuart:~$ wifi_radio_test tx_pkt_len 1024\nuart:~$ wifi_radio_test tx_pkt_gap 8600\nuart:~$ wifi_radio_test tx_pkt_num -1\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with Zephyr for Nordic SDK\nDESCRIPTION: Sets up a CMake project with Zephyr dependencies and configures source files for compilation. Requires CMake 3.20.0 or higher and sets up project compilation with Zephyr SDK integration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/hw_unique_key/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with External Location Service\nDESCRIPTION: This command builds the MoSh sample to handle location services externally, mostly using MQTT for cloud connectivity. The command involves precise configurations through multiple -DEXTRA_CONF_FILE settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_45\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=overlay-cloud_mqtt.conf -DCONFIG_LOCATION_SERVICE_EXTERNAL=y\n```\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=\"overlay-cloud_mqtt.conf;overlay-pgps.conf\" -DCONFIG_LOCATION_SERVICE_EXTERNAL=y -DCONFIG_NRF_CLOUD_PGPS_TRANSPORT_NONE=y\n```\n\n----------------------------------------\n\nTITLE: CRACEN KMU Protected Key Usage Scheme Macro\nDESCRIPTION: Macro definition for Protected usage scheme in CRACEN KMU, used for keys pushed to RAM only accessible by the CRACEN.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/cryptography.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nCRACEN_KMU_KEY_USAGE_SCHEME_PROTECTED\n```\n\n----------------------------------------\n\nTITLE: App Identifier Notification Example\nDESCRIPTION: Example UART output showing the received app identifier attribute.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ancs_client/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nApp Identifier: com\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages via Opcode List in C\nDESCRIPTION: Prepares a list of opcodes that a model will handle, defining message opcodes, length constraints, and their associated handlers, with the list terminated by a predefined macro.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/dev_overview.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nstatic void handle_message_set(struct bt_mesh_model *model,\n                               struct bt_mesh_msg_ctx *ctx,\n                               struct net_buf_simple *buf)\n{\n    // Message handler code\n}\n\nstatic void handle_message_ack(struct bt_mesh_model *model,\n                               struct bt_mesh_msg_ctx *ctx,\n                               struct net_buf_simple *buf)\n{\n    // Message handler code\n}\n\nstatic void handle_message_status(struct bt_mesh_model *model,\n                                  struct bt_mesh_msg_ctx *ctx,\n                                  struct net_buf_simple *buf)\n{\n    // Message handler code\n}\n\nconst struct bt_mesh_model_op _opcode_list[] = {\n    { MESSAGE_SET_OPCODE,    MESSAGE_SET_LEN,    handle_message_set },\n    { MESSAGE_ACK_OPCODE,    MESSAGE_ACK_LEN,    handle_message_ack },\n    { MESSAGE_STATUS_OPCODE, MESSAGE_STATUS_LEN, handle_message_status },\n    BT_MESH_MODEL_OP_END,\n};\n```\n\n----------------------------------------\n\nTITLE: Erasing Application Core UICR with nrfutil\nDESCRIPTION: This command is used to recover the UICR for the application core of the nRF54H20 SoC, resolving conflicts in configuration. It requires the nrfutil tool to be installed and accessible in the command line environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/nRF54H20_erase_UICR.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device recover --core Application\n```\n\n----------------------------------------\n\nTITLE: Configuring Oberon Driver Library Build\nDESCRIPTION: Creates and configures the static library target for the Oberon PSA driver, including compiler options, include directories and library dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/nrf_oberon/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(oberon_psa_driver STATIC\n  ${src_crypto_oberon}\n)\n\ntarget_compile_options(oberon_psa_driver\n  PRIVATE\n    -Wno-uninitialized\n    -Wno-maybe-uninitialized\n    -Wno-unused-variable\n    -Wno-unused-function\n)\n\ntarget_include_directories(oberon_psa_driver\n  PRIVATE\n    $<TARGET_PROPERTY:mbedcrypto_oberon_imported,INTERFACE_INCLUDE_DIRECTORIES>\n)\n\ntarget_link_libraries(oberon_psa_driver\n  PRIVATE\n    psa_crypto_library_config\n    psa_interface\n)\n\ntarget_link_libraries(oberon_psa_driver\n  PRIVATE\n    mbedcrypto_oberon_mbedtls_imported\n    mbedcrypto_oberon_imported\n)\n\ntarget_link_libraries(oberon_psa_core\n  PRIVATE\n    oberon_psa_driver\n)\n\ntarget_link_libraries(mbedcrypto_oberon_mbedtls_imported\n  INTERFACE\n    psa_crypto_config_chosen\n    ${mbedcrypto_target}\n)\n\nnrf_security_add_zephyr_options_library(oberon_psa_driver)\n```\n\n----------------------------------------\n\nTITLE: RF Tool RX Continuous Mode (Server)\nDESCRIPTION: This command configures the DECT RF tool for continuous receive (RX) operation on the server side. It specifies channel 1677.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool -m rx_cont -c 1677\n```\n\n----------------------------------------\n\nTITLE: Reading UserButtonChanged Event\nDESCRIPTION: Reads the event generated by UserButton attribute changes\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: matter-cli\nCODE:\n```\nany read-event-by-id 0xFFF1FC01 0xFFF10000 1 1\n```\n\n----------------------------------------\n\nTITLE: Conditional Mesh Diagnostics Source Configuration\nDESCRIPTION: Includes mesh diagnostics source file when OPENTHREAD_MESH_DIAG is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_OPENTHREAD_MESH_DIAG ot_rpc_meshdiag.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library and Linker Sources\nDESCRIPTION: Sets up Zephyr library sources and linker configurations for firmware information when FW_INFO is enabled but FW_INFO_API is disabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/fw_info/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nif (CONFIG_FW_INFO AND NOT CONFIG_FW_INFO_API)\n  zephyr_library_sources(fw_info.c)\n  zephyr_linker_sources(RODATA ext_apis.ld)\n  zephyr_linker_sources(ROM_START SORT_KEY ${CONFIG_FW_INFO_OFFSET} fw_info.ld)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target\nDESCRIPTION: This command adds the source files found by `FILE(GLOB)` to the `app` target as private sources. This means that these sources are only used for building the `app` target and are not exposed to other targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hids_mouse/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_sources(app PRIVATE ${app_sources})\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Platform Component ID Test in CMake\nDESCRIPTION: This CMake script sets up a test project for verifying the SUIT platform component ID checking functionality. It includes the test template, sets the project name, and specifies the source files needed for the test, including the component compatibility implementation from the SUIT subsystem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_component_compatibility/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(suit_plat_check_component_id)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/sdfw/src/suit_plat_component_compatibility.c\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Device Credentials for MQTT over LTE\nDESCRIPTION: This Python command uses the device_credentials_installer.py script to install device and server credentials for MQTT over LTE connectivity. It generates and installs a device credential and necessary root CA certificates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\npython3 device_credentials_installer.py --ca self_self_cert_serial_ca.pem --ca_key self_self_cert_serial_prv.pem --id_str nrf- --id_imei -s -d --verify\n```\n\n----------------------------------------\n\nTITLE: Adding Application Source Files in CMake\nDESCRIPTION: Configures source files for the application using target_sources and includes source directories\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lte_ble_gateway/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\nzephyr_include_directories(src)\n\ninclude_directories(src/orientation_detector)\ntarget_sources(app PRIVATE src/aggregator.c)\ntarget_sources(app PRIVATE src/alarm.c)\ntarget_sources(app PRIVATE src/ble.c)\n```\n\n----------------------------------------\n\nTITLE: Building FLPR Core Image from Command Line\nDESCRIPTION: Command to build the FLPR core image as a separate build rather than using sysbuild, targeting the FLPR core specifically.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/building_nrf54l.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54l15dk/nrf54l15/cpuflpr --no-sysbuild\n```\n\n----------------------------------------\n\nTITLE: OpenThread Reset to Bootloader Command\nDESCRIPTION: This command is used to reboot the nrf52840dongle/nrf52840 board target into the bootloader by triggering a GPIO pin. It requires the CONFIG_OPENTHREAD_PLATFORM_BOOTLOADER_MODE_GPIO Kconfig option to be enabled and the bootloader-gpios property in the openthread_config node to be pre-configured in the Devicetree overlay file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot reset bootloader\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories for NRF54L15 and TF-M Board\nDESCRIPTION: This snippet adds two subdirectories to the build: one for the NRF54L15 target and another for the TF-M board.  These subdirectories likely contain source code and CMakeLists.txt files needed to build the respective components. `${Trusted\\ Firmware\\ M_SOURCE_DIR}` is assumed to be a CMake variable defining the path to Trusted Firmware-M source code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf54l15_cpuapp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${Trusted\\ Firmware\\ M_SOURCE_DIR}/platform/ext/target/nordic_nrf/common/nrf54l15 nrf54l15)\n\nadd_subdirectory(.. tfm_board)\n```\n\n----------------------------------------\n\nTITLE: Disallowed Low Frequency Clock Source - MPSL - Documentation Format\nDESCRIPTION: This entry warns against using the synthesized low frequency clock source with MPSL as it has not been verified for compatibility and can lead to issues.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_43\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-6362: Do not use the synthesized low frequency clock source The synthesized low frequency clock source is neither tested nor intended for usage with MPSL.\n```\n\n----------------------------------------\n\nTITLE: Writing Data to TNEP Service in C\nDESCRIPTION: Exchanges data with a selected service by writing an NDEF message using nfc_tnep_poller_svc_write in single response communication mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/poller.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nnfc_tnep_poller_svc_write(ndef_msg);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Remote ICMSG Project\nDESCRIPTION: Defines the CMake build configuration for a remote ICMSG project. Sets minimum CMake version to 3.20.0, finds the Zephyr package using environment variables, and adds the main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/ipc/ipc_service/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(remote_icmsg)\n\ntarget_sources(app PRIVATE ../src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.20.0. This ensures that the CMake version used is compatible with the project's build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Automated Provisioning: Run Provisioning Script\nDESCRIPTION: This command executes the `provision.py` script to automate the provisioning process.  It connects to the AT interface, clears security tags, stores PSK credentials, and interacts with the Coiote Device Management server to create or update the device entry.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/provisioning.rst#2025-04-21_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\n# Run\n[nrf@dev]:~/scripts# ./provision.py\nAT interface ready\nIdentity: urn:imei:352656100394546\nSecurity tag 35724862 cleared\nPSK credentials stored to sec_tag 35724862\nCoiote: Deleted device urn:imei:352656100394546\nCoiote: Deleted device urn:imei:352656100394546-bs\nCoiote: Created device urn:imei:352656100394546 to domain /IoT/NordicSemi/Interop/\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr (CMake)\nDESCRIPTION: This CMake script configures a multi-image application for Zephyr. It requires CMake version 3.20.0 and the Zephyr SDK. The script checks that the build is done using the sysbuild system, ensuring all images are prepared correctly. The main source file is specified for the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_twim/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n\nproject(idle_twim)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring QSPI Interface for Thingy:53 with DSPI Mode\nDESCRIPTION: Custom JSON configuration for nRF Util to program Thingy:53 devices using DSPI mode. Specifies pin assignments, flash size, and SPI operational parameters for the QSPI interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"firmware_config\": {\n    \"peripheral\": \"QSPI\"\n  },\n  \"pins\": {\n    \"sck\": 17,\n    \"csn\": 18,\n    \"io0\": 13,\n    \"io1\": 14,\n    \"io2\": 15,\n    \"io3\": 16\n  },\n  \"flash_size\": 8388608,\n  \"sck_frequency\": 8000000,\n  \"address_mode\": \"MODE24BIT\",\n  \"readoc\": \"READ2IO\",\n  \"writeoc\": \"PP\",\n  \"pp_size\": \"PPSIZE256\",\n  \"sck_delay\": 128,\n  \"rx_delay\": 2,\n  \"page_size\": 4096\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Desktop Bluetooth Peripheral Features\nDESCRIPTION: Application-specific Kconfig option to enable Bluetooth HID peripheral role and related features in nRF Desktop.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_DESKTOP_BT_PERIPHERAL\n```\n\n----------------------------------------\n\nTITLE: Restoring NCS Variables\nDESCRIPTION: This CMake function retrieves and restores previously stored NCS variables to the parent scope. It relies on global properties to fetch variable names and their values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(restore_ncs_vars)\n  get_property(ncs_vars GLOBAL PROPERTY NCS_VARS)\n  foreach(var ${ncs_vars})\n    get_property(var_value GLOBAL PROPERTY ${var})\n    set(${var} ${var_value} PARENT_SCOPE)\n  endforeach()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Build in CMake\nDESCRIPTION: This CMake script is used to configure a Zephyr library. It specifies source files for AT command parsing and parameters, and includes relevant directories. Dependencies include having Zephyr SDK and CMake installed. There are no explicit parameters, but the build system should support Zephyr and CMake projects. Limitations include that it must be part of a Zephyr-compatible project setup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/at_cmd_parser/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tat_cmd_parser.c\n\tat_params.c\n)\n\nzephyr_include_directories(include)\n```\n\n----------------------------------------\n\nTITLE: RF Tool RX/TX Duty Cycle Configuration 2 (Client)\nDESCRIPTION: This command configures the DECT RF tool for simultaneous receive and transmit (RX/TX) operation on the client side with different subslot counts. It sets RX/TX subslot and idle subslot counts, sets frame repeat count, specifies channel 1677, and targets frequency 39.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool -m rx_tx --rx_subslot_count 17 --rx_idle_subslot_count 3 --tx_subslot_count 16 --tx_idle_subslot_count 4 --frame_repeat_count 15 -c 1677 -t 39\n```\n\n----------------------------------------\n\nTITLE: Defining NFC Library Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure for the NFC library documentation using reStructuredText directives. It sets up the page title, provides a brief description of NFC technology, and creates a table of contents for subpages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _lib_nfc:\n\nLibraries for NFC\n#################\n\nNear field communication (NFC) is a technology for wireless transfer of small amounts of data between two devices.\n\nSee the :ref:`ug_nfc` user guide for an overview of the technology and information on how to use the supplied libraries.\n\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   **/index\n```\n\n----------------------------------------\n\nTITLE: App Display Name Response Example\nDESCRIPTION: Example UART output showing the received app display name attribute.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ancs_client/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nDisplay Name: Mail\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Nordic SDK\nDESCRIPTION: This CMake configuration initiates the 'plat_retrieve_manifest_app' project, setting the minimum CMake version to 3.20.0 and including a predefined CMake template. It specifies source files for the 'testbinary' target, including paths reliant on the 'SUIT_SUBSYS_DIR' variable. This setup requires defined paths and CMake 3.20.0 or newer.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/app_specific/suit_plat_retrieve_manifest_app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\n#\n# Copyright (c) 2024 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(plat_retrieve_manifest_app)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/app/src/suit_plat_retrieve_manifest_app_specific.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for RTT Testing in nRF Connect SDK\nDESCRIPTION: Sets up a CMake project for testing RTT functionality. It includes necessary packages, creates mocks, generates test runners, and configures source files and include directories for the test environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/trace_backends/rtt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(rtt)\n\n# create mock\ncmock_handle(${ZEPHYR_SEGGER_MODULE_DIR}/SEGGER/SEGGER_RTT.h)\n\n# generate runner for the test\ntest_runner_generate(src/main.c)\n\ntarget_include_directories(app PRIVATE src)\n\n# add test file\ntarget_sources(app PRIVATE src/main.c)\n\n# add unit under test\ntarget_sources(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/trace_backends/rtt/rtt.c)\n\n# include paths\ntarget_include_directories(app PRIVATE ${ZEPHYR_SEGGER_MODULE_DIR}/Config/)\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/include/modem/)\n```\n\n----------------------------------------\n\nTITLE: Retrieving TFM Build Properties in CMake\nDESCRIPTION: Retrieves various TFM build properties including binary directories, file paths, and toolchain configurations from the 'tfm' target. These properties are needed to properly configure and build the regression tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_regression_test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_target_property(TFM_BINARY_DIR           tfm TFM_BINARY_DIR)\nget_target_property(TFM_NS_BIN_FILE          tfm TFM_NS_BIN_FILE)\nget_target_property(TFM_NS_HEX_FILE          tfm TFM_NS_HEX_FILE)\nget_target_property(TFM_NS_SIGNED_BIN_FILE   tfm TFM_NS_SIGNED_BIN_FILE)\n\nget_target_property(TFM_TOOLCHAIN_PATH       tfm TFM_TOOLCHAIN_PATH)\nget_target_property(TFM_TOOLCHAIN_PREFIX     tfm TFM_TOOLCHAIN_PREFIX)\nget_target_property(TFM_TOOLCHAIN_NS_FILE    tfm TFM_TOOLCHAIN_NS_FILE)\n```\n\n----------------------------------------\n\nTITLE: SUIT DFU Cache Initialization Sequence\nDESCRIPTION: PlantUML sequence diagram showing the process of initializing cache for firmware update areas, including memory address retrieval and cache device creation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/images/suit_ipuc/ipuc_fetch_cache_preinit.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant suit_dfu_cache\nparticipant memory_layout\nparticipant flash_ipuc\n\n--> suit_dfu_cache ++ : preinitialize()\nsuit_dfu_cache -> memory_layout ++ : suit_memory_sdfw_update_area_info_get(&min_address, &size)\ndeactivate memory_layout\n\nsuit_dfu_cache -> flash_ipuc ++ : flash_cache_ipuc_create(min_address)\nflash_ipuc -> flash_sdfw_cache_ipuc_dev ** : get_free_dev()\nflash_ipuc -> flash_ipuc ++ : read_access_check(ipuc[i].role)\ndeactivate flash_ipuc\ndeactivate flash_ipuc\n\nsuit_dfu_cache -> flash_ipuc ++ : flash_cache_ipuc_create(min_address)\nflash_ipuc -> flash_app_cache_ipuc_dev ** : get_free_dev()\nflash_ipuc -> flash_ipuc ++ : read_access_check(ipuc[i].role)\ndeactivate flash_ipuc\ndeactivate flash_ipuc\n\ndeactivate suit_dfu_cache\n\nrnote over flash_ipuc\n  Cache IPUCs are never released.\nend note\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: UDP Client Connection Example\nDESCRIPTION: Example of connecting a UDP client to a remote host on a specific port and the successful response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_13\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XUDPCLI=1,\"remote.host\",2442\n#XUDPCLI: 2,\"connected\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting Frame Interval - Shell Command\nDESCRIPTION: Shell command for setting the frame interval in microseconds (7500 or 10000) for a Bluetooth LE Audio broadcast subgroup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_24\n\nLANGUAGE: console\nCODE:\n```\nnac frame_interval 10000 0 0\n```\n\n----------------------------------------\n\nTITLE: Installing J-Link with USB Driver on Windows Command Prompt\nDESCRIPTION: Command to install SEGGER J-Link version 7.94i on Windows using Command Prompt with USB driver installation parameter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\nJLink_Windows_V794i_x86_64.exe -InstUSBDriver=1\n```\n\n----------------------------------------\n\nTITLE: Mutex Free Platform Function Fix\nDESCRIPTION: Workaround for faulty indirection when freeing platform mutex in nrf_cc3xx implementation. Shows correct way to call k_mem_slab_free with proper parameter indirection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_35\n\nLANGUAGE: cpp\nCODE:\n```\nk_mem_slab_free(&mutex_slab, &mutex->mutex)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of Test Vectors in CMake\nDESCRIPTION: Implements a conditional compilation based on the CONFIG_REDUCED_TEST_SUITE flag. If set, only a single file with selected test vectors is included. Otherwise, a comprehensive set of test vector files for various algorithms is added to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/crypto/test_cases/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_REDUCED_TEST_SUITE)\n    # Quick reduced case: Run only a selection of test vectors,\n    # found in the single file test_vectors.c\n    zephyr_sources(                                     test_vectors.c)\nelse()\n    zephyr_sources(test_vectors_aead_chachapoly.c)\n    zephyr_sources(test_vectors_aead_gcm.c)\n    zephyr_sources(test_vectors_aes_cbc_mac.c)\n    zephyr_sources(test_vectors_aes_cbc.c)\n    zephyr_sources(test_vectors_aes_ctr.c)\n    zephyr_sources(test_vectors_aes_ecb.c)\n    zephyr_sources(test_vectors_ecdh.c)\n    zephyr_sources(test_vectors_ecdsa_random.c)\n    zephyr_sources(test_vectors_ecdsa_sign.c)\n    zephyr_sources(test_vectors_ecdsa_verify.c)\n    zephyr_sources(test_vectors_ecjpake.c)\n    zephyr_sources(test_vectors_hkdf.c)\n    zephyr_sources(test_vectors_hmac.c)\n    zephyr_sources(test_vectors_sha_256.c)\n    zephyr_sources(test_vectors_sha_512.c)\n    zephyr_sources(test_vectors_aes_ecb_mac.c)\n    zephyr_sources(test_vectors_aead_ccm.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the project, ensuring compatibility with build system requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_ipc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: CPU Load Event Structure Reference\nDESCRIPTION: Structure definition for the cpu_load_event that contains CPU load measurements in 0.001% units.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/cpu_meas.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct cpu_load_event {\n    int load; /* CPU load in 0.001% units */\n};\n```\n\n----------------------------------------\n\nTITLE: Light xyL Client Source File\nDESCRIPTION: This defines the source file containing the implementation of the Light xyL Client model in the Bluetooth Mesh implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_14\n\nLANGUAGE: C\nCODE:\n```\n| Source file: :file:`subsys/bluetooth/mesh/light_xyl_cli.c`\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required version of CMake to 3.20.0 to ensure compatibility with features used in the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/partition_manager/static_pm_file/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Property Value on Admin Property Server (Without Acknowledgment)\nDESCRIPTION: This command sets a property value with access control on the Admin Property Server without waiting for a confirmation, increasing operation speed for non-critical settings. Requires 'ID', 'Access', and 'HexStrVal'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_prop_cli.rst#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmesh models prop admin-prop-set-unack <ID> <Access> <HexStrVal>\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for Zephyr Upstream Commits\nDESCRIPTION: Command to retrieve upstream Zephyr commits incorporated into nRF Connect SDK since the most recent release\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-3.0.0-preview2.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline fdeb735017 ^beb733919d\n```\n\n----------------------------------------\n\nTITLE: Multi-Image Application Requirement Check\nDESCRIPTION: This snippet checks if the SYSBUILD variable is set for building a multi-image application. If it's not set, a fatal error message is displayed to guide the user to include the correct arguments when running the build command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_exmif/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Managing nRF Cloud Connection and Location Request in MoSh\nDESCRIPTION: Demonstrates how to establish a connection to nRF Cloud, request cell-based location, and disconnect using MoSh cloud and location commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_24\n\nLANGUAGE: console\nCODE:\n```\ncloud connect\nlocation get --method cellular\ncloud disconnect\n```\n\n----------------------------------------\n\nTITLE: Factory Reset Configuration Channel Setup\nDESCRIPTION: Configuration channel registration details showing the module name and option for triggering factory reset operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/factory_reset.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nModule name: \"factory_reset\"\nOption: \"fast_pair\"\n```\n\n----------------------------------------\n\nTITLE: Matter Storage Configuration Options\nDESCRIPTION: Kconfig options for configuring Matter's persistent storage backends and limits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_26\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_PERSISTENT_STORAGE=y\nCONFIG_NCS_SAMPLE_MATTER_SETTINGS_STORAGE_BACKEND=y\nCONFIG_NCS_SAMPLE_MATTER_SECURE_STORAGE_BACKEND=y\nCONFIG_NCS_SAMPLE_MATTER_STORAGE_MAX_KEY_LEN=48\nCONFIG_NCS_SAMPLE_MATTER_SECURE_STORAGE_MAX_ENTRY_NUMBER=10\n```\n\n----------------------------------------\n\nTITLE: Reading Temperature Measurement Value\nDESCRIPTION: Command to read temperature sensor value from the Matter weather station device using CHIP Tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_weather_station/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nchip-tool temperaturemeasurement read measured-value <Device ID> 1\n```\n\n----------------------------------------\n\nTITLE: Configuring RCP Application Build for nRF52840 Dongle (USB transport)\nDESCRIPTION: Command to build the OpenThread Co-Processor sample for nRF52840 Dongle using USB transport.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/tools.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -p always -b nrf52840dongle/nrf52840 nrf/samples/openthread/coprocessor/\n```\n\n----------------------------------------\n\nTITLE: Specifying Application Source Files\nDESCRIPTION: This command uses `target_sources` to specify the source files that should be compiled into the application target named \"app\". The `PRIVATE` keyword indicates that these source files are only used by the \"app\" target and are not exposed to other targets. The source file is located in the Zephyr base directory under tests/drivers/sensor/temp_sensor/src/main.c.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/sensor/temp_sensor/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_sources(app PRIVATE ${ZEPHYR_BASE}/tests/drivers/sensor/temp_sensor/src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for nRF Distance Measurement Project\nDESCRIPTION: Sets up the CMake configuration for the nrf_dm project. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, adds source files to the app target, and sets include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_dm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_dm)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n  src/pwm_led.c\n  src/peer.c\n  src/service.c\n  )\n# NORDIC SDK APP END\n\nzephyr_library_include_directories(${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Wi-Fi Station Application\nDESCRIPTION: This CMake script configures the build environment for a Nordic Semiconductor Wi-Fi station application. It sets the minimum CMake version to 3.20.0, locates the Zephyr package, defines the project name as 'nrf_wifi_sta', includes the Zephyr networking headers, and specifies the main source file location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/sta/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_sta)\n\ntarget_include_directories(app PUBLIC ${ZEPHYR_BASE}/subsys/net/ip)\n\ntarget_sources(app PRIVATE\n\tsrc/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic Peripheral AMS Client\nDESCRIPTION: Configures the CMake build system for a peripheral Apple Media Service (AMS) client application. It sets the minimum CMake version to 3.20.0, locates the Zephyr package using the ZEPHYR_BASE environment variable, and adds the main.c source file to the app target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_ams_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(peripheral_ams_client)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Generating Include Files from LZMA Compressed Data\nDESCRIPTION: Generates include files from LZMA compressed test data files for the decompression application. Creates three different include files from sample compressed data, including a too-large test case.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_compress/decompression/lzma/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_inc_file_for_target(\n  app\n  ${ZEPHYR_NRFXLIB_MODULE_DIR}/tests/subsys/nrf_compress/decompression/dummy_data_input.txt.lzma\n  ${ZEPHYR_BINARY_DIR}/include/generated/dummy_data_input.inc\n  )\n\ngenerate_inc_file_for_target(\n  app\n  ${ZEPHYR_NRFXLIB_MODULE_DIR}/tests/subsys/nrf_compress/decompression/dummy_data_input_too_large.txt.lzma\n  ${ZEPHYR_BINARY_DIR}/include/generated/dummy_data_input_too_large.inc\n  )\n\ngenerate_inc_file_for_target(\n  app\n  ${ZEPHYR_NRFXLIB_MODULE_DIR}/tests/subsys/nrf_compress/decompression/dummy_data_input.txt.lzma1\n  ${ZEPHYR_BINARY_DIR}/include/generated/dummy_data_input_lzma1.inc\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring SMP over Bluetooth Authentication in RST\nDESCRIPTION: Describes how to enable authentication for SMP over Bluetooth access to the management subsystem. It recommends using the CONFIG_MCUMGR_TRANSPORT_BT_PERM_RW_AUTHEN option to enforce pairing before accessing SMP characteristics.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/dfu/distributor/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\nBy default, the SMP characteristics don't require authentication when using SMP over Bluetooth to access the :ref:`management subsystem <zephyr:mcu_mgr>`.\nTo prevent an unauthenticated access to the device over SMP, it is strongly recommended to enable the :kconfig:option:`CONFIG_MCUMGR_TRANSPORT_BT_PERM_RW_AUTHEN` option.\nThis will enforce a remote device to initiate a pairing request before accessing SMP characteristics.\nSee `Zephyr Bluetooth LE Security`_ for more details about securing the Bluetooth LE connection.\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Project\nDESCRIPTION: This snippet defines a CMake project named 'kernel_freq_change'. It sets the minimum required CMake version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/kernel_freq_change/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(kernel_freq_change)\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Recovery Application with Zephyr in CMake\nDESCRIPTION: This CMake configuration sets up a SUIT recovery application project with Zephyr. It specifies the minimum required CMake version, finds the Zephyr package, defines project source files, and conditionally includes Bluetooth transport support from the Zephyr SDK examples.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/recovery/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(suit_recovery)\n\ntarget_sources(app PRIVATE src/main.c)\n\n# This project uses orginal sdk-zephyr C source code\ntarget_include_directories(app PRIVATE $ENV{ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src)\ntarget_sources_ifdef(CONFIG_MCUMGR_TRANSPORT_BT app PRIVATE $ENV{ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src/bluetooth.c)\n```\n\n----------------------------------------\n\nTITLE: Disabling UART0 in Devicetree for nRF53 Network Core\nDESCRIPTION: Devicetree overlay for disabling UART0 on the network core to enable I2C functionality for the nRF2220 FEM, as these peripherals share the same AHB bus masters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/2220ek_dev_guide.rst#2025-04-21_snippet_4\n\nLANGUAGE: devicetree\nCODE:\n```\n&uart0 {\n   status = \"disabled\";\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Event Sources in CMake\nDESCRIPTION: Conditionally adds source files based on configuration flags. Includes optional event handlers for BLE dongle peer, config channel, CPU measurements, USB, and HIDS functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/src/events/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_DESKTOP_BLE_DONGLE_PEER_ID_INFO app\n\t\t\tPRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ble_dongle_peer_event.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_CONFIG_CHANNEL_ENABLE app\n\t\t\tPRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/config_event.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_CPU_MEAS_ENABLE app\n\t\t\tPRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/cpu_load_event.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_USB_ENABLE app\n\t\t\tPRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/usb_event.c)\n\ntarget_sources_ifdef(CONFIG_DESKTOP_HIDS_ENABLE app\n\t\t\tPRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/hids_event.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr Project\nDESCRIPTION: This snippet configures the project with CMake by defining the required CMake version as 3.20.0 and locating the Zephyr RTOS package using the environment variable ZEPHYR_BASE. It then sets up the project name as lfrc_idle and specifies the main source file in src/main.c. Dependencies include having Zephyr installed and configured in the environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/lfrc_idle/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(lfrc_idle)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Storing NCS Variables\nDESCRIPTION: This function fetches and globally stores Nordic Semiconductor (NCS) variables. It filters and retrieves variables from the system build's current directory matching the 'NCS_*' regex pattern. Stored properties include both the variable names and their values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(store_ncs_vars)\n  get_property(ncs_vars DIRECTORY ${SYSBUILD_CURRENT_CMAKE_DIR} PROPERTY VARIABLES)\n  list(FILTER ncs_vars INCLUDE REGEX \"NCS_.*\")\n  foreach(var ${ncs_vars})\n    set_property(GLOBAL APPEND PROPERTY NCS_VARS ${var})\n    set_property(GLOBAL PROPERTY ${var} ${${var}})\n  endforeach()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Partition Structure - YAML\nDESCRIPTION: This YAML format example illustrates how to define a partition within a pm.yml file using a specified structure that includes partition name and properties. It demonstrates the syntax for defining properties such as size, placement, and other attributes essential for the Partition Manager's functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npartition_name:\n   partition_property:\n      property_value\n```\n\n----------------------------------------\n\nTITLE: Module Events Reference RST Documentation\nDESCRIPTION: RST include directive referencing events table for HFCLK lock module functionality\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/hfclk_lock.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: event_propagation.rst\n    :start-after: table_hfclk_lock_start\n    :end-before: table_hfclk_lock_end\n```\n\n----------------------------------------\n\nTITLE: Querying Socket Options using AT command\nDESCRIPTION: This AT command queries the available socket options that can be configured. The response lists the configurable options along with their parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n**AT#XSOCKETOPT=?**\n#XSOCKETOPT: (0,1),<name>,<value>\nOK\n```\n\n----------------------------------------\n\nTITLE: Maintaining DFU Progress Across Reboots in C\nDESCRIPTION: The MCUboot target uses the Zephyr settings API to store the current progress of the dfu_target_write function across power failures and device resets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_target.rst#2025-04-21_snippet_10\n\nLANGUAGE: c\nCODE:\n```\ndfu_target_write\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Model Number with AT Command\nDESCRIPTION: AT command to set the Model Number resource of the Device object. The model number should be specified as a string in double quotes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_9\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"model_number\"[,<model_number>]\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to DECT PHY App Build\nDESCRIPTION: Adds the specified subdirectories to the build process. This allows modularizing the application and organizing related source files into separate directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/dect/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(common)\nadd_subdirectory(ping)\nadd_subdirectory(perf)\nadd_subdirectory(rf_tool)\nadd_subdirectory(mac)\n```\n\n----------------------------------------\n\nTITLE: UDP Server Command Syntax (AT#XUDPSVR)\nDESCRIPTION: Command syntax for starting/stopping UDP/DTLS server with IPv4/IPv6 support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: plain text\nCODE:\n```\n#XUDPSVR=<op>[,<port>[,<sec_tag>]]\n```\n\n----------------------------------------\n\nTITLE: Configuring SUITFU Management Library in CMake\nDESCRIPTION: Sets up the SUITFU management library with include directories, source files, and conditional compilation based on configuration options. It also links necessary libraries for SUIT (Software Update for Internet of Things) functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mgmt/suitfu/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(\n    include\n)\n\nzephyr_library()\n\nif(CONFIG_SSF_SUIT_SERVICE_ENABLED)\n  zephyr_library_link_libraries(suit_utils)\nendif()\n\nzephyr_library_sources(\n  src/suitfu_mgmt.c\n)\n\nzephyr_library_sources_ifdef(CONFIG_MGMT_SUITFU_GRP_IMG src/suitfu_mgmt_img.c)\n\nzephyr_library_sources_ifdef(CONFIG_MGMT_SUITFU_GRP_SUIT src/suitfu_mgmt_suit.c)\nzephyr_library_sources_ifdef(CONFIG_MGMT_SUITFU_GRP_OS_BOOTLOADER_INFO_HOOK src/suitfu_mgmt_suit_os.c)\nzephyr_library_sources_ifdef(CONFIG_MGMT_SUITFU_GRP_SUIT_MFSTS_STATE src/suitfu_mgmt_suit_mfsts_state.c)\nzephyr_library_sources_ifdef(CONFIG_MGMT_SUITFU_GRP_SUIT_CAND_ENV_UPLOAD src/suitfu_mgmt_suit_cand_env_upload.c)\nzephyr_library_sources_ifdef(CONFIG_MGMT_SUITFU_GRP_SUIT_IMAGE_FETCH src/suitfu_mgmt_suit_image_fetch.c)\nzephyr_library_sources_ifdef(CONFIG_MGMT_SUITFU_GRP_SUIT_CACHE_RAW_UPLOAD src/suitfu_mgmt_suit_cache_raw_upload.c)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_CACHE_RW suit_cache_interface)\nzephyr_library_link_libraries(suit_memory_layout_interface)\nzephyr_library_link_libraries(suit_envelope_info)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for PSCM Application with Zephyr\nDESCRIPTION: This CMake script configures the build environment for a Power State Configuration Manager (PSCM) application using the Zephyr RTOS. It sets the minimum CMake version, locates the Zephyr package, defines the project name, and adds all C source files from the src directory to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/pcm_stream_channel_modifier/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(pscm)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Board Target Command for nRF7001 DK\nDESCRIPTION: Command showing the specific board target option for the nRF7001 DK when building the sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnrf7002dk/nrf5340/cpuapp/nrf7001\n```\n\n----------------------------------------\n\nTITLE: Setting Application Configuration Directories in CMake\nDESCRIPTION: Configures the directory paths for various application components including the main application, MCUboot, B0 bootloader, and IPC radio. Uses normalized board target for path construction.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/sysbuild/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SB_APPLICATION_CONFIG_DIR \"${CMAKE_CURRENT_LIST_DIR}/../configuration/\\${NORMALIZED_BOARD_TARGET}\")\n\nset(mcuboot_APPLICATION_CONFIG_DIR\n    \"${CMAKE_CURRENT_LIST_DIR}/../configuration/\\${NORMALIZED_BOARD_TARGET}/images/mcuboot\"\n    CACHE INTERNAL \"Application configuration dir controlled by sysbuild\"\n)\nset(b0_APPLICATION_CONFIG_DIR\n    \"${CMAKE_CURRENT_LIST_DIR}/../configuration/\\${NORMALIZED_BOARD_TARGET}/images/b0\"\n    CACHE INTERNAL \"Application configuration dir controlled by sysbuild\"\n)\nset(ipc_radio_APPLICATION_CONFIG_DIR\n    \"${CMAKE_CURRENT_LIST_DIR}/../configuration/\\${NORMALIZED_BOARD_TARGET}/images/ipc_radio\"\n    CACHE INTERNAL \"Application configuration dir controlled by sysbuild\"\n)\n```\n\n----------------------------------------\n\nTITLE: Set target sources\nDESCRIPTION: Defines the source files for the `app` target. This specifies the C source files that will be compiled and linked into the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n    src/main.c\n    src/comm_proc.c\n    src/rf_proc.c\n    src/ptt_conf.c\n    src/periph_proc.c\n    src/timer_proc.c\n    src/ctrl/ptt_ctrl.c\n    src/ctrl/ptt_events.c\n    src/ctrl/ptt_mode_manager.c\n    src/ctrl/ptt_parser.c\n    src/ctrl/ptt_proto.c\n    src/ctrl/ptt_rf_proc.c\n    src/ctrl/ptt_timers.c\n    src/ctrl/ptt_uart_proc.c\n    src/ctrl/ptt_zb_perf_cmd_mode_ota.c\n    src/ctrl/ptt_zb_perf_cmd_mode_response.c\n    src/ctrl/ptt_zb_perf_cmd_mode_uart.c\n    src/ctrl/ptt_zb_perf_cmd_mode.c\n    src/ctrl/ptt_zb_perf_dut_mode.c\n    src/rf/ptt_rf.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Joiner PSK in CLI Sample\nDESCRIPTION: Command to add a Joiner device with its EUI64 and preshared key (PSKd) in the OpenThread CLI sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot commissioner joiner add f4ce3687a6e4f6e8 N0RD1C\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake for Zephyr with CMake\nDESCRIPTION: This snippet configures CMake for the mspi_api project by specifying the minimum required CMake version and finding the Zephyr package. It also defines the project and includes source files from the Zephyr base directory. The setup requires Zephyr dependencies to be installed and accessible to locate the necessary files within $ZEPHYR_BASE.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/mspi/api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(mspi_api)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/mspi/api/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Set xyL Range State (Acknowledged)\nDESCRIPTION: This shell command sets the Light xyL Range state value on the server and waits for a response.  It requires the minimum and maximum allowed x and y values as input.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_cli.rst#2025-04-21_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nmesh models xyl range-set <XMin> <YMin> <XMax> <YMax>\n\tSet the Light xyL Range state value and wait for a response.\n\n\t* ``XMin`` - Minimum allowed x value.\n\t* ``YMin`` - Minimum allowed y value.\n\t* ``XMax`` - Maximum allowed x value.\n\t* ``YMax`` - Maximum allowed y value.\n```\n\n----------------------------------------\n\nTITLE: Configuring Mesh DFU Distributor Project with CMake\nDESCRIPTION: Sets up the CMake project for a Bluetooth Mesh DFU distributor. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, and defines include directories and source files. It also includes conditional compilation for authentication features when specific configurations are enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/dfu/distributor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n\ncmake_minimum_required(VERSION 3.13.1)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(mesh_dfu_distributor)\n\nset(dfu_common_dir ${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/mesh/dfu/common/src)\n\ninclude_directories(\n\t${dfu_common_dir}\n\t${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/mesh/common\n)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources}\n\t${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/mesh/common/smp_bt.c\n\t${dfu_common_dir}/dfu_target.c\n)\n\n# Enable authentication with passkey\nif (CONFIG_MCUMGR_TRANSPORT_BT_PERM_RW_AUTHEN AND CONFIG_BT_MESH_LE_PAIR_RESP)\ntarget_sources(app PRIVATE\n\t${ZEPHYR_NRF_MODULE_DIR}/samples/bluetooth/mesh/common/smp_bt_auth.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Include Directories Setup\nDESCRIPTION: Configures include directories for the Zephyr library and application sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_include_directories(\n    include\n    src/audio\n    src/bluetooth\n    src/drivers\n    src/modules\n    src/utils\n    src/utils/macros\n)\n\nzephyr_library_include_directories(app PRIVATE\n    ${ZEPHYR_NRF_MODULE_DIR}/boards/arm/nrf5340_audio_dk_nrf5340)\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option to Disable Default NV Seed\nDESCRIPTION: This snippet disables the platform default NV seed for TF-M. This configuration option is set without any conditional checks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS -DPLATFORM_DEFAULT_NV_SEED=OFF\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Subdirectories with CMake\nDESCRIPTION: This snippet uses the add_subdirectory_ifdef function in CMake to include specific subdirectories in the build process. The inclusion of each directory is controlled by a configuration flag, enabling modular inclusion of components. Each call to add_subdirectory_ifdef checks if a configuration flag, such as CONFIG_BH1749, is defined; if so, the corresponding directory is added.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/sensor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_BH1749 bh1749)\nadd_subdirectory_ifdef(CONFIG_SENSOR_SIM sensor_sim)\nadd_subdirectory_ifdef(CONFIG_SENSOR_STUB sensor_stub)\nadd_subdirectory_ifdef(CONFIG_PMW3360 pmw3360)\nadd_subdirectory_ifdef(CONFIG_PAW3212 paw3212)\nadd_subdirectory_ifdef(CONFIG_BME68X_IAQ bme68x_iaq)\n```\n\n----------------------------------------\n\nTITLE: Configuring Clock Control API Test Build in CMake\nDESCRIPTION: This CMake script configures the build for a clock control API test application. It requires CMake 3.20.0 or higher, finds the Zephyr package using the ZEPHYR_BASE environment variable, establishes the project name, and includes all test source files from the Zephyr test directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/clock_control/clock_control_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(clock_control_api)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/clock_control/clock_control_api/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Initializing QoS Library and Adding Message - C\nDESCRIPTION: This code snippet demonstrates how to initialize the QoS library, set up an event handler for receiving notifications, and add a single message with specified parameters. Dependencies include the QoS library and message types that must be defined prior to usage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/qos.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Define message types that can be used to route data. */\n   enum {\n      SENSOR_DATA,\n      DIAGNOSTIC_DATA\n   };\n\n   /* Event handler used to receive notifications from the library. */\n   static void qos_event_handler(const struct qos_evt *evt)\n   {\n      switch (evt->type) {\n      case QOS_EVT_MESSAGE_NEW:\n      case QOS_EVT_MESSAGE_TIMER_EXPIRED:\n         /* Check evt->message.type and route message based on type. */\n         break;\n      case QOS_EVT_MESSAGE_REMOVED_FROM_LIST:\n         /* Free payload if (evt->message.heap_allocated == true) */\n         break;\n      default:\n         break;\n      }\n   }\n\n   /* QoS library message data structure. */\n   struct qos_data message = {\n\t\t.heap_allocated = true,\n\t\t.data.buf = pointer_to_payload,\n\t\t.data.len = size_of_payload,\n\t\t.id = qos_message_id_get_next(),\n\t\t.type = SENSOR_DATA,\n\t\t.flags = QOS_FLAG_RELIABILITY_ACK_REQUIRED\n   };\n\n   /* Initialize the QoS library and set the library event handler. */\n   err = qos_init(qos_event_handler);\n   if (err) {\n      LOG_ERR(\"qos_init, err\", err);\n      return err;\n   }\n\n   /* Add a single message. */\n   err = qos_message_add(&message);\n   if (err) {\n      LOG_ERR(\"qos_message_add, error: %d\", err);\n      return err;\n   }\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for System Off Application\nDESCRIPTION: This CMake configuration sets the minimum required CMake version, finds the Zephyr RTOS package, and defines the project name. It also includes the main source file and conditionally includes a retained memory source file based on a Kconfig option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/boards/nordic/system_off/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_system_off)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/boards/nordic/system_off/src/main.c)\nif(CONFIG_APP_USE_RETAINED_MEM)\n  target_sources(app PRIVATE ${ZEPHYR_BASE}/samples/boards/nordic/system_off/src/retained.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing IPv6 Addresses on Leader Device\nDESCRIPTION: Displays all IPv6 addresses configured on the leader device, including link-local, mesh-local, and global addresses. The link-local address is needed for Link Metrics commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot ipaddr\nfd00:7d03:7d03:7d03:84c9:572d:be24:cbe\nfdde:ad00:beef:0:0:ff:fe00:fc10\nfdde:ad00:beef:0:0:ff:fe00:fc38\nfdde:ad00:beef:0:0:ff:fe00:fc00\nfdde:ad00:beef:0:0:ff:fe00:7000\nfdde:ad00:beef:0:a318:bf4f:b9c6:5f7d\nfe80:0:0:0:10b1:93ea:c0ee:eeb7\n```\n\n----------------------------------------\n\nTITLE: Sample Output Log\nDESCRIPTION: Example console output showing the initialization, beacon transmission parameters, and statistics\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/offloaded_raw_tx/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK v2.7.99-cb26b7c84971 ***\n*** Using Zephyr OS v3.7.99-9056bece3e70 ***\n----- Initializing nRF70 -----\n----- Starting to transmit beacons with the following configuration -----\n                SSID: nRF70_off_raw_tx_1\n                Period: 200000\n                TX Power: 15\n                Channel: 1\n                Short Preamble: 0\n                Number of Retries: 10\n                Throughput Mode: Legacy\n                Rate: 54M\n                HE GI: 1\n                HE LTF: 1\n-----  Statistics -----\n                Packet sent: 150\n----- Updating configuration to -----\n                SSID: nRF70_off_raw_tx_2\n                Period: 200000\n                TX Power: 11\n                Channel: 36\n                Short Preamble: 0\n                Number of Retries: 10\n                Throughput Mode: Legacy\n                Rate: 12M\n                HE GI: 1\n                HE LTF: 1\n-----  Statistics -----\n                Packet sent: 299\n----- Stopping transmission -----\n----- Deinitializing nRF70 -----\n```\n\n----------------------------------------\n\nTITLE: Workaround for GPS SUPL Client Sample Delay\nDESCRIPTION: This code snippet shows the workaround for the GPS with SUPL client library sample, which stops working if the SUPL host name cannot be resolved. The workaround involves inserting a delay of a few seconds after the printf statement on line 294 in main.c using the k_sleep() function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_26\n\nLANGUAGE: c\nCODE:\n```\n\"Insert a delay (``k_sleep()``) of a few seconds after the ``printf`` on line 294 in :file:`main.c`.\"\n```\n\n----------------------------------------\n\nTITLE: Finding the Zephyr Package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr RTOS package.  It requires the package and uses the environment variable `ZEPHYR_BASE` as a hint for the package location.  Zephyr is a required dependency for this project, and the HINTS parameter assists CMake in finding the Zephyr installation directory if it's not in the standard search path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_gpio/remote/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Adding DECT PHY MAC Source Files in CMake\nDESCRIPTION: Specifies the source files to be compiled for the DECT PHY MAC module. It includes various components such as shell interface, control, cluster beacon, client, PDU handling, neighbor management, and background scanning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/dect/mac/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_mac_shell.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_mac_ctrl.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_mac_cluster_beacon.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_mac_client.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_mac_pdu.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_mac_nbr.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_mac_nbr_bg_scan.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_mac.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory Conditionally for RAM Power Down\nDESCRIPTION: This CMake command conditionally adds the 'ram_pwrdn' subdirectory to the build if the 'CONFIG_RAM_POWER_DOWN_LIBRARY' Kconfig option is enabled.  If the configuration option is set, the CMakeLists.txt file in the 'ram_pwrdn' directory will be processed, integrating the RAM power-down library into the build process.  This allows power management features to be conditionally included in the firmware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory_ifdef(CONFIG_RAM_POWER_DOWN_LIBRARY ram_pwrdn)\"\n```\n\n----------------------------------------\n\nTITLE: Building with CMake and Network Core Selection\nDESCRIPTION: Command for building a Zephyr sample with CMake directly while specifying the Bluetooth HCI IPC network core image. This includes all required parameters including board target, network core selection, application directory, and path to the sysbuild directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/sysbuild/zephyr_samples_sysbuild.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncmake -GNinja -DBOARD=*board_target* -DSB_CONFIG_NETCORE_HCI_IPC=y -DAPP_DIR=*app_dir* *<path_to_zephyr>/share/sysbuild*\n```\n\n----------------------------------------\n\nTITLE: Configuring NRF RPC Module Build in CMake\nDESCRIPTION: This CMake script configures the build process for the Nordic Remote Procedure Call (NRF RPC) library. It includes basic functionality and conditionally adds various transport and utility components based on configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_rpc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(include)\n\nzephyr_library()\n\nzephyr_library_sources(nrf_rpc_os.c)\n\nzephyr_library_sources_ifdef(CONFIG_NRF_RPC_IPC_SERVICE nrf_rpc_ipc.c)\n\nzephyr_library_sources_ifdef(CONFIG_NRF_RPC_SERIALIZE_API nrf_rpc_serialize.c)\n\nzephyr_library_sources_ifdef(CONFIG_NRF_RPC_CALLBACK_PROXY nrf_rpc_cbkproxy.c)\n\nzephyr_library_sources_ifdef(CONFIG_NRF_RPC_UART_TRANSPORT nrf_rpc_uart.c)\n\nadd_subdirectory_ifdef(CONFIG_NRF_RPC_DEV_INFO dev_info)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SUIT Platform Image Match Tests\nDESCRIPTION: Sets up the CMake project configuration for SUIT platform image matching integration tests. Defines minimum CMake version, finds Zephyr package, and links required SUIT libraries including platform interface, memory pointer storage, and stream sinks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/check_image_match/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_plat_check_image_match)\ninclude(../cmake/test_template.cmake)\n\nzephyr_library_link_libraries(suit_platform_interface)\nzephyr_library_link_libraries(suit_memptr_storage_interface)\nzephyr_library_link_libraries(suit_stream_sinks_interface)\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Platform Digest Cache Test Project in CMake\nDESCRIPTION: This CMake script sets up a test project for the SUIT platform digest cache functionality. It specifies the minimum required CMake version, includes a test template, defines the project name, and adds source files to the test binary target, including the main test file and the actual implementation file from the SUIT subsystem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_digest_cache/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(suit_plat_digest_cache)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/sdfw/src/suit_plat_digest_cache.c\n)\n```\n\n----------------------------------------\n\nTITLE: Building TF-M PSA Test with Initial Attestation Test Suite\nDESCRIPTION: Command for building the TF-M PSA test sample with Initial Attestation test suite enabled. This configuration requires the device to be provisioned with PSA root-of-trust security parameters using the provisioning image sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_psa_test/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b *board_target* nrf/tests/tfm/tfm_psa_test -- -DCONFIG_TFM_PSA_TEST_INITIAL_ATTESTATION=y -DCONFIG_TFM_PARTITION_INITIAL_ATTESTATION=y -DCONFIG_TFM_NRF_PROVISIONING=y -DCONFIG_NRF_APPROTECT_LOCK=y -DCONFIG_NRF_SECURE_APPROTECT_LOCK=y\n```\n\n----------------------------------------\n\nTITLE: Example of Entering a PIN Code\nDESCRIPTION: Example CLI command showing how to enter PIN code 305051 for a Bluetooth LE device with index 0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge pincode 0 305051\n```\n\n----------------------------------------\n\nTITLE: Adding Security and Storage Modules in CMake\nDESCRIPTION: This section adds various security and storage related subdirectories based on configuration definitions. This improves security management and storage options in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NRF_SECURITY nrf_security)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_TRUSTED_STORAGE trusted_storage)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_SECURE_STORAGE secure_storage)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files for Compilation\nDESCRIPTION: This snippet adds the main source file and the source for the SUIT decryption filter to the testbinary target, ensuring they are compiled into the final binary.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_decrypt_filter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/stream/stream_filters/src/suit_decrypt_filter.c\n)\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests with curl for Wi-Fi Provisioning\nDESCRIPTION: Example curl commands for interacting with the Wi-Fi provisioning HTTP endpoints. It shows how to get available networks and send configuration data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/softap_wifi_provision.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --cacert server_certificate.pem -ipv4 GET https://wifiprov.local/prov/networks\necho -n \"<hex payload>\" | xxd -r -p | curl --cacert server_certificate.pem -ipv4 -X POST https://wifiprov.local/prov/configure --data-binary @-\n```\n\n----------------------------------------\n\nTITLE: Configuration Option: CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC\nDESCRIPTION: This snippet describes an assertion issue on nRF53 Series devices when the RC oscillator is used as the Low Frequency clock source.  It provides a workaround to avoid using the RC oscillator as the Low Frequency clock source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_58\n\nLANGUAGE: none\nCODE:\n```\nDRGN-16808: Assertion on nRF53 Series devices when the RC oscillator is used as the Low Frequency clock source\n  The SoftDevice Controller might assert when :kconfig:option:`CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC` is set on nRF53 Series devices and the device is connected as a peripheral.\n\n  **Affected platforms:** nRF5340, Thingy:53\n\n  **Workaround:** Do not use the RC oscillator as the Low Frequency clock source.\n\n```\n\n----------------------------------------\n\nTITLE: Kconfig Bootloader Configuration\nDESCRIPTION: Kconfig options to disable the bootloader functionality\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_SECURE_BOOT=n\nCONFIG_BUILD_S1_VARIANT=n\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Load Test Project with CMake and Zephyr\nDESCRIPTION: This CMake script sets up a CPU load test project using the Zephyr RTOS. It specifies the minimum CMake version, locates the Zephyr package, defines the project name, and includes all source files from the src directory in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/debug/cpu_load/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(cpu_load_test)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Targets for Build Directory Analysis\nDESCRIPTION: Example of how to specify multiple targets when extracting files from a build directory using the ncs-sbom tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n-d build_directory target1.elf target2.elf\n```\n\n----------------------------------------\n\nTITLE: Adding UI Sense LED Source Files in CMake\nDESCRIPTION: Conditionally adds UI sense LED source file based on CONFIG_UI_SENSE_LED configuration option\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/ui/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_UI_SENSE_LED\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ui_sense_led.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to nRF Desktop Project\nDESCRIPTION: Adds main source file and HID report descriptor to the project. Requires CONFIG_DESKTOP_HID_REPORT_DESC to be set.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nassert(CONFIG_DESKTOP_HID_REPORT_DESC \"HID report descriptor file must be specified\")\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n  ${CONFIG_DESKTOP_HID_REPORT_DESC}\n  )\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring Kconfig for Custom Trace Backend\nDESCRIPTION: Kconfig configuration to extend the built-in trace backend choice with a custom backend option. This allows users to select the custom backend through the configuration system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_trace.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\nif NRF_MODEM_LIB_TRACE\n\n# Extends the choice with another backend\nchoice NRF_MODEM_LIB_TRACE_BACKEND\n\nconfig NRF_MODEM_LIB_TRACE_BACKEND_MY_TRACE_BACKEND\n        bool \"My trace backend\"\n        help\n          Optional description of my\n          trace backend.\n\nendchoice\n\nendif\n```\n\n----------------------------------------\n\nTITLE: Outputting Sensor Data to Console in Console\nDESCRIPTION: This snippet shows the expected console output when the BH1749 sensor is used in conjunction with a threshold trigger for RED color channel measurements. It includes information about the device memory address as well as measurement values for other color channels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/sensor/bh1749/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nJ-Link RTT Viewer\n\n device is 0x20022384, name is BH1749\n\n Threshold trigger\n\n BH1749 RED: 387\n\n BH1749 GREEN: 753\n\n BH1749 BLUE: 397\n\n BH1749 IR: 81\n\n (continues when trigger level reached)\n```\n\n----------------------------------------\n\nTITLE: USB States Enumeration\nDESCRIPTION: Defines the possible states of USB connection from the application's viewpoint, including disconnected, powered, active, and suspended states.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/usb_state.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nUSB_STATE_DISCONNECTED - USB cable is not connected.\nUSB_STATE_POWERED - The device is powered from USB but is not configured for the communication.\nUSB_STATE_ACTIVE - The device is ready to exchange data with the host.\nUSB_STATE_SUSPENDED - The host has requested the device to enter the suspended state.\n```\n\n----------------------------------------\n\nTITLE: Including Simulated Sensor Module Source File in Nordic SDK (C)\nDESCRIPTION: This snippet conditionally includes the source file 'sensor_simulated.c' if the configuration flag 'CONFIG_APP_MODULE_SENSOR_SIMULATED_ENABLE' is defined. This facilitates the inclusion of simulation functionality in the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/modules/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntarget_sources_ifdef(CONFIG_APP_MODULE_SENSOR_SIMULATED_ENABLE app PRIVATE sensor_simulated.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories Conditionally with CMake\nDESCRIPTION: This code snippet uses the `add_subdirectory_ifdef` macro to conditionally include subdirectories in the build process. The macro checks if the specified configuration option is enabled, and if so, adds the corresponding subdirectory.  This approach allows for modular inclusion of services based on configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_SSF_DEVICE_INFO_SERVICE_ENABLED device_info)\nadd_subdirectory_ifdef(CONFIG_SSF_ENC_FW_SERVICE_ENABLED enc_fw)\nadd_subdirectory_ifdef(CONFIG_SSF_EXTMEM_SERVICE_ENABLED extmem)\nadd_subdirectory_ifdef(CONFIG_SSF_PSA_CRYPTO_SERVICE_ENABLED psa_crypto)\nadd_subdirectory_ifdef(CONFIG_SSF_SUIT_SERVICE_ENABLED suit_service)\n```\n\n----------------------------------------\n\nTITLE: Linking SUIT SDFW Mocks to Target\nDESCRIPTION: These CMake commands link the `suit_sdfw_mocks` library to the appropriate target, conditionally. If the target is `zephyr`, it links it to the `zephyr_interface` INTERFACE library and calls `zephyr_library_link_libraries`. If the target is `testbinary`, it links `suit_sdfw_mocks` privately to the `testbinary` executable. Otherwise, it reports an error.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/mocks/sdfw/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET zephyr)\n  target_link_libraries(zephyr_interface INTERFACE suit_sdfw_mocks)\n  zephyr_library_link_libraries(suit_sdfw_mocks)\nelseif(TARGET testbinary)\n  target_link_libraries(testbinary PRIVATE suit_sdfw_mocks)\nelse()\n  message(FATAL_ERROR \"Unknown test binary target name\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Targeting Sources for the Application - CMake\nDESCRIPTION: This snippet specifies the source files for the app target in a CMake build configuration. It adds the 'main.c' file located in the 'src' directory as a private source file for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_profiler/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Document Structure for Migration Guide\nDESCRIPTION: This snippet defines the structure of the reStructuredText document for the migration guide. It includes the document title, a brief description, compatibility information for nRF54H20 DK versions, and a toctree directive for subpages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.4.99-cs3_to_2.6.99-cs2.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _migration_cs3_to_2_6_99_cs2:\n\nMigration notes for |NCS| v2.6.99_cs2 for v2.4.99-cs3 users\n###########################################################\n\nThis document describes the new features and changes implemented in |NCS| to take into consideration when migrating your application from |NCS| for the nRF54 customer sampling release v2.4.99-cs3 to |NCS| v2.6.99-cs2.\n\nTo ensure the nRF54H20 DK runs its components correctly, verify its compatibility with the |NCS| v2.6.99-cs2 release checking the version number on your DK's sticker.\nThe only versions of the nRF54H20 DK compatible with the |NCS| v2.6.99-cs2 are the following ones:\n\n* Version PCA10175 v0.7.x (ES3)\n* Version PCA10175 v0.8.0 (ES3)\n\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :reversed:\n   :caption: Subpages:\n\n   2.4.99-cs3_to_2.6.99-cs2/*\n```\n\n----------------------------------------\n\nTITLE: Building TF-M PSA Test with Storage Test Suite\nDESCRIPTION: Command for building the TF-M PSA test sample with the Storage test suite enabled. The command uses west build to compile the test for a specific board target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_psa_test/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b *board_target* nrf/tests/tfm/tfm_psa_test -- -DCONFIG_TFM_PSA_TEST_STORAGE=y\n```\n\n----------------------------------------\n\nTITLE: Enabling DPPIC and PPIB Peripherals in Devicetree for nRF54L Series\nDESCRIPTION: This snippet shows the necessary devicetree entries to enable the DPPIC and PPIB peripherals, which are required for proper timing and operation of GPIO controls for nRF54L series devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf21540_gpio.rst#2025-04-21_snippet_2\n\nLANGUAGE: devicetree\nCODE:\n```\n&dppic10 {\n      status = \"okay\";\n};\n\n&ppib11 {\n      status = \"okay\";\n};\n\n&ppib21 {\n      status = \"okay\";\n};\n\n&dppic20 {\n      status = \"okay\";\n};\n\n&ppib22 {\n      status = \"okay\";\n};\n\n&ppib30 {\n      status = \"okay\";\n};\n\n&dppic30 {\n      status = \"okay\";\n};\n```\n\n----------------------------------------\n\nTITLE: Building MoSh Sample with Thingy:91 X Wi-Fi Support\nDESCRIPTION: This snippet provides a command to build the MoSh sample with Wi-Fi support for Thingy:91 using specified overlay and configuration files. It requires options like -DDTC_OVERLAY_FILE and -DEXTRA_CONF_FILE for enabling Wi-Fi.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_36\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b thingy91x/nrf9151/ns -- -DDTC_OVERLAY_FILE=thingy91x_wifi.overlay -DEXTRA_CONF_FILE=overlay-nrf700x-wifi-scan-only.conf -DSB_CONFIG_WIFI_NRF70=y -DSB_CONFIG_WIFI_NRF70_SCAN_ONLY=y\n```\n\n----------------------------------------\n\nTITLE: Scheduling Office Lights using Bluetooth Mesh Scheduler\nDESCRIPTION: This C code snippet demonstrates how to schedule office lights to turn on at 8:00 and turn off at 16:00 using the `schedule_on_weekdays` function.  It calls `schedule_on_weekdays` twice, once to turn the lights on and once to turn them off, using different action codes and indexes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scheduler_cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic void schedule_office_lights(void)\n{\n   /* Turn lights on at 08:00 */\n   (void)schedule_on_weekdays(BT_MESH_SCHEDULER_TURN_ON, 0, 8, 0);\n   /* Turn lights off at 16:00 */\n   (void)schedule_on_weekdays(BT_MESH_SCHEDULER_TURN_OFF, 1, 16, 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Devicetree Configuration for SPI Pins\nDESCRIPTION: Shows how to configure pin settings for SPI communication in a devicetree file, specifying psels for different states. Requires Devicetree syntax understanding and configuration skills.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/cheat_sheet.rst#2025-04-21_snippet_5\n\nLANGUAGE: devicetree\nCODE:\n```\n    &pinctrl {\n        spi0_default_alt: spi0_default_alt {\n            group1 {\n                psels = <NRF_PSEL(SPI_SCK, 0, 10)>,\n                        <NRF_PSEL(SPI_MISO, 0, 12)>,\n                        <NRF_PSEL(SPI_MOSI, 0, 13)>;\n            };\n        };\n\n        spi0_sleep_alt: spi0_sleep_alt {\n            group1 {\n                psels = <NRF_PSEL(SPI_SCK, 0, 16)>,\n                        <NRF_PSEL(SPI_MISO, 0, 15)>,\n                        <NRF_PSEL(SPI_MOSI, 0, 17)>;\n                low-power-enable;\n          };\n        };\n    };\n```\n\nLANGUAGE: DTS\nCODE:\n```\n   / {\n           chosen {\n                   ncs,dm-timer = &timer2;\n           };\n   };\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake project for Zephyr-based Nordic Semiconductor application\nDESCRIPTION: Configures a CMake build system for a Nordic Semiconductor nRF Connect SDK project. It sets the minimum CMake version to 3.20.0, finds the Zephyr package, initializes a project named 'NONE', and adds all C source files from the src directory to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/flash_patch/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr in CMake\nDESCRIPTION: This CMake script sets up the build environment for a Zephyr project. It checks for a minimum CMake version and locates the Zephyr base directory. Then, it defines a project named \\\"remote_sleep_forever\\\" and specifies that the \\\"src/main.c\\\" file should be included in the build. It depends on having Zephyr Base set in the environment variables.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/common/remote_gdf_switching/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(remote_sleep_forever)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Event Profiling Information Structure in C\nDESCRIPTION: Example showing how to define an event profiling information structure using APP_EVENT_INFO_DEFINE macro and add it to an event type definition with APP_EVENT_TYPE_DEFINE. This connects the event with the profiling system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/app_event_manager_profiler_tracer.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nAPP_EVENT_INFO_DEFINE(sample_event,\n\t/* Profiled datafield types. */\n\tENCODE(NRF_PROFILER_ARG_S8, NRF_PROFILER_ARG_S16, NRF_PROFILER_ARG_S32),\n\t/* Profiled data field names - displayed by nRF Profiler. */\n\tENCODE(\"value1\", \"value2\", \"value3\"),\n\t/* Function used to profile event data. */\n\tprofile_sample_event);\n\nAPP_EVENT_TYPE_DEFINE(sample_event,\n\tlog_sample_event,\t/* Function for logging event data. */\n\t&sample_event_info,\t/* Structure with data for profiling. */\n\tAPP_EVENT_FLAGS_CREATE(APP_EVENT_TYPE_FLAGS_INIT_LOG_ENABLE));\t/* Flags managing event type. */\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for JESD216 Flash Driver Application\nDESCRIPTION: Configures the CMake build environment for a JESD216 flash driver application. It specifies the minimum CMake version, finds the Zephyr package, sets up the project, adds the flash driver include directory, and specifies the main source file from the Zephyr samples directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/drivers/jesd216/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(flash_jesd216)\n\nzephyr_library_include_directories(${ZEPHYR_BASE}/drivers/flash)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/samples/drivers/jesd216/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenThread Vendor Extensions and Custom Options\nDESCRIPTION: Conditional CMake blocks to set optional OpenThread features like coprocessor vendor hooks, power supply configuration, and CLI vendor extensions based on project configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_OPENTHREAD_COPROCESSOR_VENDOR_HOOK_SOURCE)\n  set(OT_NCP_VENDOR_HOOK_SOURCE ${CONFIG_OPENTHREAD_COPROCESSOR_VENDOR_HOOK_SOURCE} CACHE STRING \"NCP vendor hook source file name\" FORCE)\nendif()\n\nif(CONFIG_OPENTHREAD_POWER_SUPPLY)\n  set(OT_POWER_SUPPLY ${CONFIG_OPENTHREAD_POWER_SUPPLY} CACHE STRING \"Power supply configuration\" FORCE)\nendif()\n\nif (CONFIG_OPENTHREAD_CLI_VENDOR_EXTENSION)\n  set(OT_CLI_VENDOR_EXTENSION ${CONFIG_OPENTHREAD_CLI_VENDOR_EXTENSION} CACHE STRING \"Path to CMake file to define and link Openthread CLI vendor extension\" FORCE)\nendif()\n\nset(BUILD_TESTING OFF CACHE BOOL \"Disable openthread cmake testing targets\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 EK\nDESCRIPTION: Command to build the sample for the nRF7002 EK board target using West, with the appropriate shield configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/monitor/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnrf5340dk/nrf5340/cpuapp -- -DSHIELD=nrf7002ek\n```\n\n----------------------------------------\n\nTITLE: Adding a New Bluetooth LE Bridged Device\nDESCRIPTION: Command to add a new Bluetooth LE bridged device with index 0 to the Matter Bridge. This creates device endpoints that can be used to control connected devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_23\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge add 0\n```\n\n----------------------------------------\n\nTITLE: Controlling External Flash Power State with Device PM API\nDESCRIPTION: Implementation example showing how to suspend and resume the QSPI NOR external flash to save power during inactivity periods. The external flash is typically only needed during Device Firmware Upgrade operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/optimizing/power_general.rst#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <zephyr/pm/device.h>\n\nconst auto * qspi_dev = DEVICE_DT_GET(DT_INST(0, nordic_qspi_nor));\nif (device_is_ready(qspi_dev))\n{\n    // Put the peripheral into suspended state.\n    pm_device_action_run(qspi_dev, PM_DEVICE_ACTION_SUSPEND);\n\n    // Resume the peripheral from the suspended state.\n    pm_device_action_run(qspi_dev, PM_DEVICE_ACTION_RESUME);\n}\n```\n\n----------------------------------------\n\nTITLE: Clock Control Async Function Update - C\nDESCRIPTION: Modified clock_control_async_on function definition with updated parameters and return values for nRF53 Series SoCs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nclock_control_async_on\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options\nDESCRIPTION: This CMake snippet defines compiler options for the Zephyr library. It disables specific warnings to avoid false positives, which can be necessary when dealing with Zephyr headers. The `-Werror` option treats all warnings as errors, enforcing stricter code quality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/wfa-qt/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_compile_options(\n\t-Werror\n\t# False positive, not going away even with null check\n\t-Wno-format-overflow\n)\n```\n\n----------------------------------------\n\nTITLE: Including Source Files for LwM2M Application in CMake\nDESCRIPTION: This snippet includes static source files for the application, ensuring these core component files are always part of the build. It depends on having a defined CMake project structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/lwm2m/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_device.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_location.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lwm2m_app_utils.c)\n```\n\n----------------------------------------\n\nTITLE: Partition Manager Conditional Compilation\nDESCRIPTION: Example of using the USE_PARTITION_MANAGER define to conditionally include partition manager configuration header and definitions in C code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n#if USE_PARTITION_MANAGER\n#include <pm_config.h>\n#define NON_SECURE_APP_ADDRESS PM_APP_ADDRESS\n#else\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories for mbedcrypto in CMake\nDESCRIPTION: This snippet configures CMake to add the include directories necessary for integrating the nrf_cc3xx_platform with mbedcrypto. It makes use of the INTERFACE_INCLUDE_DIRECTORIES property to include directories in an interface target. This configuration is essential for ensuring that the correct headers are available during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/nrf_cc3xx_platform/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Add nrf_cc3xx_platform includes for mbedcrypto\ntarget_include_directories(psa_crypto_library_config\n  INTERFACE\n    $<TARGET_PROPERTY:nrf_cc3xx_platform,INTERFACE_INCLUDE_DIRECTORIES>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot Update Project Build\nDESCRIPTION: Sets up the CMake project configuration for an MCUboot firmware update application. Specifies minimum CMake version, finds Zephyr package, defines project name, adds source files, and links required MCUboot bootutil library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_compress/decompression/mcuboot_update/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(mcuboot_update)\n\ntarget_sources(app PRIVATE src/main.c)\n\nzephyr_link_libraries(MCUBOOT_BOOTUTIL)\n```\n\n----------------------------------------\n\nTITLE: Configuring FMFU Library in Nordic SDK with CMake\nDESCRIPTION: Sets up the FMFU (Firmware Management for Updates) library by declaring sources and conditionally including components based on the FMFU_CDDL_DECODER_GENERATE configuration option. When the decoder generation is enabled, it includes the cddl subdirectory; otherwise, it uses the existing decoder implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dfu/fmfu_fdev/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(src/fmfu_fdev.c)\n\nif (CONFIG_FMFU_CDDL_DECODER_GENERATE)\n  add_subdirectory(cddl)\nelse()\n  zephyr_library_sources(src/modem_update_decode.c)\n  zephyr_include_directories(include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring PCM Stream Channel Modifier Library in CMake\nDESCRIPTION: Creates and configures a Zephyr library target for the PCM stream channel modifier functionality. Adds the pcm_stream_channel_modifier.c source file to the library build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/pcm_stream_channel_modifier/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tpcm_stream_channel_modifier.c\n)\n```\n\n----------------------------------------\n\nTITLE: Example AT Command Response (JSON)\nDESCRIPTION: Example JSON response from a device after executing a remote AT command. This shows the format of the device message containing the result of the AT command execution.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"appId\": \"MODEM\",\n   \"messageType\": \"DATA\",\n   \"ts\": 1669244834095,\n   \"data\": \"mfw_nrf9160_1.3.2\\r\\nOK\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying New Telemetry Interval on Azure IoT Hub Sample\nDESCRIPTION: This console output describes the change in telemetry interval after receiving a new setting from the device twin in an Azure IoT Hub sample. It logs the event indicating the reception of the twin update, successful application of the new interval, and confirmation of the next event scheduling. This snippet highlights how telemetry configurations are dynamically updated and applied.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/azure_iot_hub/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_TWIN_DESIRED_RECEIVED\n<inf> azure_iot_hub_sample: New telemetry interval has been applied: 60\n<inf> azure_iot_hub_sample: AZURE_IOT_HUB_EVT_TWIN_RESULT_SUCCESS, ID: 42740\n<inf> azure_iot_hub_sample: Sending event:\n<inf> azure_iot_hub_sample: {\"temperature\":25.5,\"timestamp\":47585}\n<inf> azure_iot_hub_sample: Event was successfully sent\n<inf> azure_iot_hub_sample: Next event will be sent in 60 seconds\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth LE Advertising Kconfig Options\nDESCRIPTION: Configuration options available for the Bluetooth LE advertising module, including settings for direct advertising, fast advertising, grace period, and RPA rotation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_adv.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_CAF_BLE_ADV\nCONFIG_CAF_BLE_ADV_PM_EVENTS\nCONFIG_CAF_BLE_ADV_POWER_DOWN_ON_DISCONNECTION_REASON_0X15\nCONFIG_CAF_BLE_ADV_DIRECT_ADV\nCONFIG_CAF_BLE_ADV_FAST_ADV\nCONFIG_CAF_BLE_ADV_FAST_ADV_TIMEOUT\nCONFIG_CAF_BLE_ADV_FILTER_ACCEPT_LIST\nCONFIG_CAF_BLE_ADV_GRACE_PERIOD\nCONFIG_CAF_BLE_ADV_ROTATE_RPA\n```\n\n----------------------------------------\n\nTITLE: KMU Signature Verification Warning Configuration\nDESCRIPTION: Implements a conditional warning message for when MCUboot is configured to use KMU stored keys for signature verification. Alerts users about the need to provision the bootloader using 'west ncs-provision'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/sysbuild/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SB_CONFIG_MCUBOOT_SIGNATURE_USING_KMU)\n  message(WARNING \"\n          ------------------------------------------------------------------------------\n          --- WARNING: MCUboot uses KMU stored keys for signature verification. Make ---\n          --- sure to use `west ncs-provision` to manually provision the bootloader. ---\n          --- Application would fail to boot if MCUboot is not provisioned. For more ---\n          --- details, see the `Building and running` section from `Application      ---\n          --- description` page in nRF Desktop application documentation.            ---\n          ------------------------------------------------------------------------------\n          \")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target\nDESCRIPTION: This command specifies the source files to be included in the application's target. It adds `src/main.c` as a private source file, meaning it is only used to build the `app` target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/twim_suspend/remote/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_sources(app PRIVATE src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Building LwM2M Client with MCUmgr Client without Bootstrap\nDESCRIPTION: Command for building the LwM2M client sample for nRF9160 with MCUmgr client without bootstrap support. Uses multiple overlay configuration files including advanced firmware, FOTA helper, AVSystem, and LwM2M 1.1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/sample_description.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nwest build  --pristine -b nrf9160dk/nrf9160/ns --  -DEXTRA_CONF_FILE=\"overlay-adv-firmware.conf;overlay-fota_helper.conf;overlay-avsystem.conf;overlay-lwm2m-1.1.conf;overlay-mcumgr_client.conf\" -DEXTRA_DTC_OVERLAY_FILE=\"nrf9160dk_mcumgr_client_uart2.overlay\"\n```\n\n----------------------------------------\n\nTITLE: Reserved Opcodes Table\nDESCRIPTION: List of manufacturer-specific opcodes allocated by Nordic Semiconductor for various Bluetooth Mesh message types\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/overview/reserved_ids.rst#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n+-----------------------------------+--------+\n| Message name                      | Opcode |\n+===================================+========+\n| Simple OnOff Set                  | 0x01   |\n| Simple OnOff Get                  | 0x02   |\n| Simple OnOff Set Unreliable       | 0x03   |\n| Simple OnOff Status               | 0x04   |\n| Rssi Ack                          | 0x05   |\n| Rssi Send Data                    | 0x06   |\n| Rssi Util Request Database Beacon | 0x07   |\n| Rssi Util Send Database Beacon    | 0x08   |\n| Thingy52 RGB Set                  | 0x09   |\n| Chat Message                      | 0x0A   |\n| Chat Private Message              | 0x0B   |\n| Chat Message Reply                | 0x0C   |\n| Chat Presence                     | 0x0D   |\n| Chat Presence Get                 | 0x0E   |\n| Distance Measurement Server       | 0x0F   |\n| Distance Measurement Client       | 0x10   |\n| LE Pairing Related Messages       | 0x11   |\n```\n\n----------------------------------------\n\nTITLE: Adding Interface Library in CMake\nDESCRIPTION: This snippet defines the interface library 'suit_nrfx_mocks' and sets its include directories. It conditionally links this library to different targets based on their type, ensuring proper usage in either Zephyr or a specific test binary.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/mocks/nrfx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(suit_nrfx_mocks INTERFACE)\n\ntarget_include_directories(suit_nrfx_mocks INTERFACE\n  ${CMAKE_CURRENT_LIST_DIR}/include\n)\n\nif(TARGET zephyr)\n  target_link_libraries(zephyr_interface INTERFACE suit_nrfx_mocks)\n  zephyr_library_link_libraries(suit_nrfx_mocks)\nelseif(TARGET testbinary)\n  target_link_libraries(testbinary PRIVATE suit_nrfx_mocks)\nelse()\n  message(FATAL_ERROR \"Unknown test binary target name\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr RTOS Project with nRF5340 Audio Dependencies\nDESCRIPTION: This CMake snippet sets up a basic Zephyr RTOS project, adds the main.c source file, and includes paths to macros from the nRF5340 audio application. It specifies the minimum CMake version and configures project dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/nrf5340_audio/macros/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\ntarget_sources(app\n  PRIVATE main.c\n  )\n\ntarget_include_directories(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/utils/macros/\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for ADC API Testing in nRF Connect SDK\nDESCRIPTION: This CMake configuration sets up the build environment for ADC API testing. It requires CMake 3.20.0 or later, finds the Zephyr package using the ZEPHYR_BASE environment variable, and includes all source files from the Zephyr ADC API test directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/adc/adc_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(adc_api)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/adc/adc_api/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring Oberon PSA Crypto Driver Base Files\nDESCRIPTION: Sets up the base source files and include directories for the Oberon PSA crypto driver, including core cryptographic operation implementations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/nrf_oberon/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(drivers_path ${OBERON_PSA_CORE_PATH}/oberon/drivers)\n\ntarget_include_directories(psa_crypto_library_config\n  INTERFACE\n    ${drivers_path}\n)\n\nlist(APPEND src_crypto_oberon\n  ${drivers_path}/oberon_helpers.c\n  ${drivers_path}/oberon_ecdh.c\n  ${drivers_path}/oberon_ecdsa.c\n  ${drivers_path}/oberon_ec_keys.c\n  ${drivers_path}/oberon_jpake.c\n  ${drivers_path}/oberon_spake2p.c\n  ${drivers_path}/oberon_srp.c\n  ${drivers_path}/oberon_rsa.c\n  ${drivers_path}/oberon_wpa3_sae.c\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Device with Bluetooth in C\nDESCRIPTION: Illustrates how to use Bluetooth functionalities in C by initializing a Bluetooth Mesh model and setting up a message buffer. Requires Bluetooth libraries and a configured environment supporting Bluetooth operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/cheat_sheet.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n    /** .. include_startingpoint_scan_rst_1 */\n        static void scan_filter_no_match(struct bt_scan_device_info *device_info,\n                     bool connectable)\n    {\n        struct bt_conn *conn;\n        char addr[BT_ADDR_LE_STR_LEN];\n        if (device_info->adv_info.adv_type == BT_LE_ADV_DIRECT_IND) {\n            bt_addr_le_to_str(device_info->addr, addr, sizeof(addr));\n            printk(\"Direct advertising received from %s\\n\", addr);\n            bt_scan_stop();\n\n            conn = bt_conn_create_le(device_info->addr,\n                         device_info->conn_param);\n\n            if (conn) {\n                default_conn = bt_conn_ref(conn);\n                bt_conn_unref(conn);\n            }\n        }\n    }\n    /** .. include_endpoint_scan_rst_1 */\n```\n\nLANGUAGE: C\nCODE:\n```\n    static struct bt_mesh_model_pub pub_ctx;\n    static struct net_buf_simple pub_msg;\n    static uint8_t buf[BT_MESH_MODEL_BUF_LEN(MESSAGE_SET_OPCODE,\n                                             MESSAGE_SET_MAXLEN)];\n\n    static int model_init(struct bt_mesh_model *model)\n    {\n        model->pub = &pub_ctx;\n        net_buf_simple_init_with_data(&pub_msg, buf, sizeof(buf));\n        pub_ctx.msg = &pub_msg;\n\n        return 0;\n    }\n```\n\n----------------------------------------\n\nTITLE: Including Header Directories in CMake\nDESCRIPTION: Adds the 'include' directory to the project's include path, allowing header files from this directory to be used during compilation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Configuring TFM Test Paths and Options in CMake\nDESCRIPTION: Sets up paths to the TFM test repository and configures test-specific directories and configuration files. These settings are then added to the TFM CMake options to ensure the tests are properly included in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_regression_test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(TFM_TEST_REPO_PATH ${ZEPHYR_TRUSTED_FIRMWARE_M_MODULE_DIR}/../tf-m-tests)\n\nset(TFM_TEST_DIR         \"${TFM_TEST_REPO_PATH}/tests_reg/test/secure_regression\")\nset(TFM_TEST_CONFIG_FILE \"${TFM_TEST_REPO_PATH}/tests_reg/test/config/config.cmake\")\n\nset_property(TARGET zephyr_property_target\n             APPEND PROPERTY TFM_CMAKE_OPTIONS\n             -DCONFIG_TFM_TEST_DIR=${TFM_TEST_DIR}\n)\n\nset_property(TARGET zephyr_property_target\n             APPEND PROPERTY TFM_CMAKE_OPTIONS\n             -DCONFIG_TFM_TEST_CONFIG_FILE=${TFM_TEST_CONFIG_FILE}\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying linker source files for Zephyr\nDESCRIPTION: This command adds a linker script to the Zephyr build process, named `aem.ld`. This script defines the memory sections related to the Application Event Manager, allowing precise control over where AEM-related code and data are placed in memory. This is essential for proper AEM functioning.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/app_event_manager/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_linker_sources(SECTIONS aem.ld)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr\nDESCRIPTION: The CMake setup script for a Zephyr project specifies the required version of CMake, the Zephyr SDK location, and the project name. It also links libraries related to SUIT interfaces essential for platform tests. Dependencies include Zephyr SDK and various SUIT-related libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/sink_selector/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(platform_test)\ninclude(../cmake/test_template.cmake)\n\nzephyr_library_link_libraries(suit_sink_selector_interface)\nzephyr_library_link_libraries(suit_platform_interface)\nzephyr_library_link_libraries(suit_stream_sinks_interface)\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF Cloud REST Cell Location Sample in CMake\nDESCRIPTION: Configures the build system for the nRF Cloud REST Cell Location Sample application. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, adds include directories, and specifies the source files to compile.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_rest_cell_location/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nRF_Cloud_REST_Cell_Location_Sample)\n\nzephyr_compile_definitions(PROJECT_NAME=${PROJECT_NAME})\nzephyr_include_directories(include/)\n\n# NORDIC SDK APP START\ntarget_include_directories(app PRIVATE include/)\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Setting HEADER_FILE_ONLY Property\nDESCRIPTION: This snippet uses `set_source_files_properties` to set the `HEADER_FILE_ONLY` property to `ON` for specific C source files. This likely indicates that these C files are only used for their header file content and are not compiled directly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/client_id/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"set_source_files_properties(\n\t${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/nrf_modem_lib.c\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\"\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"set_source_files_properties(\n\t${NRFXLIB_MODEM_DIR}/include/nrf_modem_at.h\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\"\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"set_source_files_properties(\n\t${ZEPHYR_NRF_MODULE_DIR}/lib/modem_jwt/modem_jwt.c\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\"\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"set_source_files_properties(\n\t${ZEPHYR_NRF_MODULE_DIR}/lib/hw_id/hw_id.c\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\"\n```\n\n----------------------------------------\n\nTITLE: Socket Management with Modem Shell\nDESCRIPTION: The sock command in Modem Shell facilitates the creation and management of TCP and UDP socket connections, supporting both IPv4 and IPv6. Use it to send and receive data and close connections as needed. Advanced options include raw socket creation and using custom DTLS options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nsock connect -a 111.222.111.222 -p 20000\n```\n\nLANGUAGE: console\nCODE:\n```\nsock connect -a google.com -p 20000\n```\n\nLANGUAGE: console\nCODE:\n```\nsock connect -a 1a2b:1a2b:1a2b:1a2b::1 -p 20000 -f inet6 -t stream -b 40000\n```\n\nLANGUAGE: console\nCODE:\n```\nsock connect -a 1a2b:1a2b:1a2b:1a2b::1 -p 20000 -f inet6 -t dgram\n```\n\nLANGUAGE: console\nCODE:\n```\nsock connect -a 1a2b:1a2b:1a2b:1a2b::1 -p 20000 -f inet6 -t dgram -S -T 123\n```\n\nLANGUAGE: console\nCODE:\n```\nsock connect -f packet -t raw\n```\n\nLANGUAGE: console\nCODE:\n```\nlink connect -a nondefault.context.com\nsock connect -f packet -t raw -I 1\n```\n\nLANGUAGE: console\nCODE:\n```\nsock send -i 0 -d testing\n```\n\nLANGUAGE: console\nCODE:\n```\nsock send -i 0 -l 100000\n```\n\nLANGUAGE: console\nCODE:\n```\nsock send -i 0 -e 10 -d test_periodic\n```\n\nLANGUAGE: console\nCODE:\n```\n<do whatever is needed to make device receive data after some time>\nsock recv -i 0 -r -l 1000000\nsock recv -i 0\nsock recv -i 0\n```\n\nLANGUAGE: console\nCODE:\n```\nsock close -i 0\n```\n\nLANGUAGE: console\nCODE:\n```\nlink funmode -4\nlink rai -e\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links various libraries required by the SUIT Sink Selector library. These linkages include 'suit', 'suit_utils', 'suit_platform_interface', and 'suit_stream_sinks_interface', which are essential for the functionality and integration of this module within the larger SUIT framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/sink_selector/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(suit)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_platform_interface)\nzephyr_library_link_libraries(suit_stream_sinks_interface)\nzephyr_library_link_libraries(suit_sink_selector_interface)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mandatory Event Sources in CMake\nDESCRIPTION: Adds core event handling source files to the application build. These files handle various events like battery, Bluetooth LE, HID, motion, passkey, selector, and wheel events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/src/events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/battery_event.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/ble_event.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/hid_event.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/motion_event.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/passkey_event.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/selector_event.c\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/wheel_event.c\n)\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Cache Raw Image Upload Response\nDESCRIPTION: Defines the CBOR data structure for the response to a cache raw image upload request. It includes the return code and the offset of the last successfully written byte of the envelope.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_13\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str)\"rc\"         : (uint)\n    (str)\"off\"        : (uint)\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Zephyr Libraries (CMake)\nDESCRIPTION: These CMake commands link the Zephyr library with other interface libraries. This ensures that the necessary header files and dependencies are available during compilation and linking. These libraries are related to SUIT stream sources, source selection and stream sinks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/stream/address_streamer_selector/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_link_libraries(suit_stream_sources_interface)\nzephyr_library_link_libraries(suit_source_selector_interface)\nzephyr_library_link_libraries(suit_stream_sinks_interface)\n```\n\n----------------------------------------\n\nTITLE: Starting SUPL Client Session with supl_client_session Function in C\nDESCRIPTION: The supl_client_session function starts the SUPL session using the supl_session_ctx_t parameter. This function serves as the entry point for the SUPL session and continues until the session is completed or the supl_client_abort function is called. There is no limit on the number of subsequent SUPL sessions from this entry point.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/supl_os_client.rst#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n\"The SUPL client OS integration library then starts the SUPL session by calling the :c:func:`supl_client_session` function from the SUPL client library with the ``supl_session_ctx_t`` parameter.\\nThe application does not return from this function until the SUPL session is finished or the :c:func:`supl_client_abort` function is called.\"\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Zephyr Library (CMake)\nDESCRIPTION: Links the Zephyr library to several other libraries: `suit_mci`, `suit_utils`, conditionally to `suit_storage_interface` based on `CONFIG_SUIT_STORAGE`, `suit_execution_mode`, and `suit`. These links provide the necessary dependencies for the SUIT MCI library to function correctly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/mci/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library_link_libraries(suit_mci)\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries_ifdef(CONFIG_SUIT_STORAGE suit_storage_interface)\nzephyr_library_link_libraries(suit_execution_mode)\nzephyr_library_link_libraries(suit)\"\n```\n\n----------------------------------------\n\nTITLE: Checking for SYSBUILD Argument\nDESCRIPTION: This snippet checks if the SYSBUILD variable is set. If not, it raises a fatal error indicating that the application must be built using sysbuild. This is a crucial step because it ensures that the multi-image application is prepared correctly using the appropriate build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_pwm_led/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets up a CMake project named `suit_plat_authorize_process_dependency`. It specifies the minimum CMake version required and includes a custom CMake template for testing. The source files for the `testbinary` target are defined, including `src/main.c` and `suit_plat_authenticate.c`.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_authorize_process_dependency/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\ninclude(../cmake/test_template.cmake)\n\nproject(suit_plat_authorize_process_dependency)\n\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/sdfw/src/suit_plat_authenticate.c\n)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Non-AWS Topics - C\nDESCRIPTION: This C code snippet subscribes to custom MQTT topics defined by the user. Ensure the topics are defined and the MQTT QoS is set appropriately.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n#define CUSTOM_TOPIC_1\t\"my-custom-topic/example\"\n#define CUSTOM_TOPIC_2\t\"my-custom-topic/example2\"\n\nstatic const struct mqtt_topic topic_list[] = {\n\t{\n\t\t.topic.utf8 = MY_CUSTOM_TOPIC_1,\n\t\t.topic.size = strlen(MY_CUSTOM_TOPIC_1),\n\t\t.qos = MQTT_QOS_1_AT_LEAST_ONCE,\n\t},\n\t{\n\t\t.topic.utf8 = MY_CUSTOM_TOPIC_2,\n\t\t.topic.size = strlen(MY_CUSTOM_TOPIC_2),\n\t\t.qos = MQTT_QOS_1_AT_LEAST_ONCE,\n\t}\n};\n\nerr = aws_iot_application_topics_set(topic_list, ARRAY_SIZE(topic_list));\nif (err) {\n\tLOG_ERR(\"aws_iot_application_topics_set, error: %d\", err);\n\tFATAL_ERROR();\n\treturn err;\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Notification Callback Reference in C\nDESCRIPTION: Reference to the Radio Notification callback features provided by the Bluetooth stack. The prepare callback is triggered before a connection event, allowing applications to prepare data for transmission.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/radio_notification_conn_cb.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbt_radio_notification_conn_cb.prepare\n```\n\n----------------------------------------\n\nTITLE: PDN Source File Reference\nDESCRIPTION: The source file location reference for PDN library implementation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/pdn.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nlib/pdn/pdn.c\n```\n\n----------------------------------------\n\nTITLE: CIS Central Transmitter Console Output\nDESCRIPTION: Sample console output for a device configured as a Connected Isochronous Stream central in transmit mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_time_sync/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nBluetooth ISO Time Sync Demo\nChoose role - cis_central (c) / cis_peripheral (p) / bis_transmitter (b) / bis_receiver (r) : c\nChoose direction - TX (t) / RX (r) : t\nChoose retransmission number [0..30] : 3\nChoose max transport latency in ms [5..4000] : 20\nStarting CIS central, dir: tx, RTN: 3, max transport latency 20 ms\nCIS central started scanning for peripheral(s)\n```\n\n----------------------------------------\n\nTITLE: Resetting nRF9160 using nrfjprog with Pinreset\nDESCRIPTION: This snippet demonstrates using the `--pinreset` option with `nrfjprog` to reset nRF9160 platforms. This is a workaround for a TF-M reset failure issue encountered with nrfjprog version 10.22.x.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_64\n\nLANGUAGE: shell\nCODE:\n```\n\"nrfjprog -f nrf91 --pinreset\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning NCS Documentation Build Files\nDESCRIPTION: These commands show how to clean all build files or files for a specific documentation set using Ninja.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/build.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nninja clean\n```\n\nLANGUAGE: console\nCODE:\n```\nninja nrf-clean\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files\nDESCRIPTION: This command specifies the source files that should be compiled and linked into the application. The `target_sources` command associates these source files with the `app` target and marks them as `PRIVATE`, meaning they are only used within the `app` target and not exposed to other targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/thread_coex/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_sources(app PRIVATE\n\tsrc/ot_utils.c\n\tsrc/zperf_utils.c\n\tsrc/ot_coex_functions.c\n\tsrc/main.c\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial LTE Modem Customer Version in Kconfig\nDESCRIPTION: New Kconfig option added for customers to define their own version string after customization in the Serial LTE Modem application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.6.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_SLM_CUSTOMER_VERSION\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Libraries Documentation Structure in reStructuredText\nDESCRIPTION: A reStructuredText directive that creates a table of contents for debug libraries documentation. It configures the toctree to display a single level of depth, include all files in the current directory, and adds a caption labeled 'Subpages:'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/debug/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   *\n```\n\n----------------------------------------\n\nTITLE: Configuring SPM services in Kconfig\nDESCRIPTION: The CONFIG_SPM_SERVICE_PREVALIDATE option was disabled in the Secure Partition Manager (SPM) library Kconfig, as it requires the immutable bootloader.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.3.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_SPM_SERVICE_PREVALIDATE=n\n```\n\n----------------------------------------\n\nTITLE: Enabling CoreMark in Project Configuration\nDESCRIPTION: Basic configuration to enable CoreMark benchmark in the project configuration file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/coremark.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nCONFIG_COREMARK=y\n```\n\n----------------------------------------\n\nTITLE: Setting Up QSPI Library Configuration in CMake\nDESCRIPTION: This snippet configures the QSPI libraries for the Nordic Semiconductor SDK based on selected options. It checks if the CONFIG_MSPI_NRF_SQSPI configuration is enabled and sets corresponding paths, definitions, and source files accordingly. The snippet ensures that the correct directories are included based on the selected SoC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/mspi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_amend()\nzephyr_library_sources_ifdef(CONFIG_MSPI_HPF mspi_hpf.c)\n\nif(CONFIG_MSPI_NRF_SQSPI)\n  set(SP_DIR ${ZEPHYR_NRFXLIB_MODULE_DIR}/softperipheral)\n  set(SQSPI_DIR ${SP_DIR}/sQSPI)\n\n  zephyr_library_compile_definitions(\n    NRFX_QSPI2_ENABLED=1\n    NRFX_QSPI2_MAX_NUM_DATA_LINES=4\n  )\n  zephyr_library_include_directories(\n    ${SP_DIR}/include\n    ${SQSPI_DIR}/include\n  )\n  zephyr_library_include_directories_ifdef(CONFIG_SOC_NRF54L15\n    ${SQSPI_DIR}/include/nrf54l15\n  )\n  zephyr_library_include_directories_ifdef(CONFIG_SOC_NRF54H20\n    ${SQSPI_DIR}/include/nrf54h20\n  )\n  zephyr_library_sources(\n    ${SQSPI_DIR}/src/nrfx_qspi2.c\n    mspi_sqspi.c\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Provisioning Client Certificate on nRF91 Device\nDESCRIPTION: Command to provision the client certificate on an nRF91 series device using the nrfcredstore tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnrfcredstore <serial port> write <sec tag> CLIENT_CERT device_cert.pem\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet finds the Zephyr package required for the project, using the ZEPHYR_BASE environment variable to provide hints for the package location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/coap_server/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Extending an Existing Matter Cluster in XML\nDESCRIPTION: This XML snippet illustrates how to extend an existing Matter cluster by adding new attributes, commands, and events. It provides the structure required to maintain compatibility with the original cluster while adding enhanced functionality. Dependencies include adherence to the specifications of the original cluster being extended.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/custom_clusters.rst#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<clusterExtension code=\"0x0028\">\n   <attribute side=\"client\" code=\"0xFFF20000\" define=\"NEW_ATTRIBUTE\" type=\"int\" writable=\"false\" optional=\"true\">NewAttribute</attribute>\n   <command source=\"server\" code=\"0xFFF20001\" name=\"NewCommand\" optional=\"true\">\n      <description>New command description.</description>\n      <arg name=\"arg1\" type=\"int16u\"/>\n   </command>\n   <event side=\"client\" code=\"0xFFF20002\" name=\"NewEvent\" optional=\"true\">\n      <description>New event description.</description>\n   </event>\n</clusterExtension>\n```\n\n----------------------------------------\n\nTITLE: Defining the project\nDESCRIPTION: This snippet defines the CMake project using the `project` command. The project is named `grtc_idle`. This command sets up the basic structure and metadata for the CMake project, which is essential for the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/grtc_idle/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(grtc_idle)\n```\n\n----------------------------------------\n\nTITLE: Define project\nDESCRIPTION: Defines the project named `phy_tt` with no specified programming languages. This sets up the basic project structure within the CMake build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nproject(phy_tt LANGUAGES NONE)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for KMU Hello World Project in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the build configuration for a 'Hello World' project using the nRF Connect SDK with KMU support. It specifies the minimum CMake version, locates the Zephyr package, defines the project name, and adds the main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/kmu/hello_for_kmu/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(hello_for_kmu)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Including Logging Headers - CMake\nDESCRIPTION: This snippet incorporates logging headers and sets compile options related to logging when CONFIG_MOCK_SUIT_LOG is defined. It establishes the logging framework necessary for outputting runtime log messages during tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_LOG)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_LOG_LEVEL)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_LOG_LEVEL_DBG)\n  target_compile_options(test_interface INTERFACE -include ztest.h)\n  target_sources(testbinary PRIVATE $ENV{ZEPHYR_BASE}/subsys/logging/log_minimal.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth NUS Source\nDESCRIPTION: This snippet includes the Nordic UART Service (NUS) source file if the CONFIG_BT_NUS configuration is defined. It facilitates UART communication over Bluetooth.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_NUS nus.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Sensor Manager Sample\nDESCRIPTION: Sets up the CMake build configuration for a Sensor Manager sample application. Defines minimum CMake version, includes Zephyr package, sets up include directories for events and modules, and configures source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/caf/sensor_manager/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2022 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\ncmake_minimum_required(VERSION 3.20.0)\n\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Sensor Manager sample\")\n# Include application event headers\nzephyr_library_include_directories(src/events)\nzephyr_library_include_directories(src/modules)\n# Add include directory for board specific CAF def files\nzephyr_include_directories(configuration/common)\n\n# Add test sources\ntarget_sources(app PRIVATE src/main.c)\n\nadd_subdirectory(src/events)\nadd_subdirectory(src/modules)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Project with CMake in CMake Language\nDESCRIPTION: Sets up the CMake environment for the 'npm2100_one_button' project, requiring CMake version 3.20.0 or higher. It locates the Zephyr base using environment variables and designates 'src/main.c' as a project source file. Requires Zephyr SDK properly installed and configured.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm2100_one_button/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright (c) 2025 Nordic Semiconductor ASA\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(npm2100_one_button)\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Direction Finding Connectionless Project with nRF Connect SDK\nDESCRIPTION: This CMake configuration sets up a Nordic Semiconductor direction finding connectionless project. It requires CMake 3.20.0, locates the Zephyr package using the ZEPHYR_BASE environment variable, and specifies main.c as the source file for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/direction_finding_connectionless_rx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(direction_finding_connectionless)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Data Mode Test Command\nDESCRIPTION: Command to test the existence of the data mode control command and get information about its parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_data_mode.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XDATACTRL=?\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Audio Module Testing in nRF Connect SDK\nDESCRIPTION: This CMake snippet sets up the project configuration for testing an audio module. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, adds source files, and configures include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/audio_module/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Audio module\")\n\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/audio_module_test_fakes.c\n\tsrc/audio_module_test_common.c\n\tsrc/bad_param_test.c\n\tsrc/functional_test.c\n)\n\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/subsys/audio_module)\n```\n\n----------------------------------------\n\nTITLE: Connecting to LTE and Retrieving Connection Evaluation Parameters in C\nDESCRIPTION: This snippet demonstrates how to asynchronously connect to LTE, wait for the connection to be established, and then retrieve connection evaluation parameters. It includes error handling for both operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/lte_lc.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nprintk(\"lte_lc_connect_async, error: %d\\n\", err);\nreturn 0;\n}\n\nk_sem_take(&lte_connected, K_FOREVER);\n\nstruct lte_lc_conn_eval_params params = {0};\n\nerr = lte_lc_conn_eval_params_get(&params);\nif (err) {\n        printk(\"lte_lc_conn_eval_params_get, error: %d\\n\", err);\n        return 0;\n}\n\n/* Handle connection evaluation parameters... */\n\n/* Continue execution... */\n```\n\n----------------------------------------\n\nTITLE: Include Fast Pair Hex Configuration\nDESCRIPTION: This snippet includes a CMake file that sets the PM (Partition Manager) properties for the Fast Pair hex file.  It checks if `SB_CONFIG_BT_FAST_PAIR_PROV_DATA` and `SB_CONFIG_PARTITION_MANAGER` are enabled, and if so, includes `${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/fast_pair/hex.cmake`.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n \"if(SB_CONFIG_BT_FAST_PAIR_PROV_DATA AND SB_CONFIG_PARTITION_MANAGER)\n    # The PM properties for the Fast Pair hex file must be set in the pre-CMake stage.\n    include(${ZEPHYR_NRF_MODULE_DIR}/cmake/sysbuild/fast_pair/hex.cmake)\n  endif()\"\n```\n\n----------------------------------------\n\nTITLE: Multiprotocol Feature Conflict with AES Encryption - 802.15.4 - Documentation Format\nDESCRIPTION: This entry highlights potential conflicts arising from AES encryption implemented in a thread while using the multiprotocol feature of the nRF 802.15.4 Radio Driver, advising developers on precautions to mitigate hang states.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_53\n\nLANGUAGE: plaintext\nCODE:\n```\nKRKNWK-18545: The device may enter a livelock state if AES encryption is done in a thread This can happen when the nRF 802.15.4 Radio Driver's multiprotocol feature is used together with Bluetooth LE.\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions\nDESCRIPTION: This CMake snippet defines compile-time definitions for the Zephyr library. `CONFIG_ZEPHYR` and `CONFIG_CTRL_IFACE_ZEPHYR` are defined to enable Zephyr-specific functionality and control interface support within the library. These definitions enable or disable certain blocks of code based on the configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/wfa-qt/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_compile_definitions(\n\tCONFIG_ZEPHYR\n)\n\nzephyr_library_compile_definitions(CONFIG_CTRL_IFACE_ZEPHYR)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Sources for Thingy91\nDESCRIPTION: Sets up Zephyr library sources with conditional compilation for ADP536X driver and mandatory nRF52840 reset functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/boards/nordic/thingy91/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources_ifdef(CONFIG_ADP536X adp5360_init.c)\nzephyr_library_sources(nrf52840_reset.c)\n```\n\n----------------------------------------\n\nTITLE: RST Content Directive\nDESCRIPTION: Table of contents directive for the documentation structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/constlat.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. contents::\n   :local:\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: Optional Parameters Configuration for Wi-Fi Transmission\nDESCRIPTION: Configures optional transmission parameters that can be set in any order before initiating a transmission. These include modulation and coding scheme, HE LTF type, guard interval, packet gap, and number of packets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test tx_pkt_mcs 7\nuart:~$ wifi_radio_test he_ltf 2\nuart:~$ wifi_radio_test he_gi 2\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num -1\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic SDK Project\nDESCRIPTION: Sets up CMake build configuration including minimum version requirement, Zephyr package dependency, source file compilation, and test directory inclusion. Configures project structure and compilation settings for the Nordic Semiconductor SDK environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/psa_crypto/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2024 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.13.1)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\ntarget_include_directories(app PRIVATE src)\n\nadd_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Specifying source files\nDESCRIPTION: This snippet specifies the source files to be included in the application. It uses the `target_sources` command to add `src/main.c` as a private source file to the `app` target.  This means the source file will be compiled and linked into the application, but its symbols will not be directly exposed to other libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/grtc_idle/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring AT Command Parser Build with CMake\nDESCRIPTION: Sets up the build configuration for an AT Command Parser application in the nRF Connect SDK. It requires CMake 3.20.0 or later, finds the Zephyr package using the ZEPHYR_BASE environment variable, and adds all C source files from the src directory to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/at_cmd_parser/at_utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(at_cmd_parser)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for nRF Fuel Gauge Test Project\nDESCRIPTION: This CMake script sets up the project configuration for the nRF Fuel Gauge test. It defines the minimum CMake version, finds the Zephyr package, sets the project name, generates a test runner, and specifies include directories and source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_fuel_gauge/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_fuel_gauge_test)\n\n# generate runner for the test\ntest_runner_generate(src/nrf_fuel_gauge_test.c)\n\ntarget_include_directories(app PRIVATE\n\tsrc\n\tdata\n)\n\n# add test file\ntarget_sources(app PRIVATE src/nrf_fuel_gauge_test.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Project with CMake\nDESCRIPTION: The script sets up a project build environment for a Zephyr-based application. It requires Zephyr to be available and checks if the build is occurring in a 'sysbuild' context, necessary for multi-image applications. The main source file is specified for building the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_wdt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n\nproject(idle_wdt)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for a Target in CMake\nDESCRIPTION: This CMake command defines the source files for the target named 'app'. The command specifies that 'client_id.c' is part of the source files to be compiled, utilizing the CMAKE_CURRENT_SOURCE_DIR variable to reference the current source directory. It requires no additional libraries, and it outputs the inclusion of the specified source file in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/modules/transport/client_id/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/client_id.c)\n```\n\n----------------------------------------\n\nTITLE: Upgrading nRF Util\nDESCRIPTION: Command to update nRF Util to the latest version\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil self-upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Sources with CMake\nDESCRIPTION: This snippet adds a source file to the application target in a CMake build system. It utilizes the `target_sources` command to link `sampler.c` from the current source directory. The snippet is crucial for ensuring the specified source code is compiled and included in the final application executable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/modules/sampler/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sampler.c)\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Inclusion for Distance Measurement Module in CMake\nDESCRIPTION: Conditionally adds source files to the Zephyr library when the Distance Measurement module is enabled but not in RPC client mode. The source files include the core DM implementation, timeslot queue management, time handling, and I/O operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_DM_MODULE AND (NOT CONFIG_DM_MODULE_RPC_CLIENT))\n\tzephyr_library_sources(dm.c)\n\tzephyr_library_sources(timeslot_queue.c)\n\tzephyr_library_sources(time.c)\n\tzephyr_library_sources(dm_io.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Bluetooth Mesh Metadata Test\nDESCRIPTION: Sets up CMake project configuration including version requirements, Zephyr package dependency, source file compilation, and conditional script argument setup based on component data layout configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/metadata_extraction/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bt_mesh_metadata_extraction_test)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\nset(script_args ${PROJECT_BINARY_DIR})\n\nif(CONFIG_COMP_DATA_LAYOUT_SINGLE)\n  list(PREPEND script_args --single)\nelse()\n  list(PREPEND script_args --multiple)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic SDK Project\nDESCRIPTION: Sets up CMake configuration for a Nordic SDK project with Zephyr RTOS integration. Includes version requirement, Zephyr package finding, and source file compilation setup. Handles both main application sources and mock GATT discovery sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/gatt_dm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\nFILE(GLOB app_sources mock/gatt_discover_mock.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for nRF Wi-Fi Promiscuous Mode Project\nDESCRIPTION: This CMake snippet sets up the build configuration for the nrf_wifi_promiscuous project. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, includes necessary directories, and defines the source files for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/promiscuous/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_promiscuous)\n\ntarget_include_directories(app PUBLIC ${ZEPHYR_BASE}/subsys/net/ip)\n\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/wifi_connection.c)\n```\n\n----------------------------------------\n\nTITLE: Installing Shell Script Dependencies\nDESCRIPTION: This command installs the necessary Python dependencies for the `shell_bt_nus` script using pip. It reads the requirements from the `scripts/shell/requirements.txt` file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/shell_bt_nus/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install --user -r scripts/shell/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This command sets the minimum required CMake version for the project to 3.20.0. It ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/multicore_system_off/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Building IPC Service Sample for nRF5340 with RPMsg Backend\nDESCRIPTION: Console command to build the sample using the default RPMsg backend for nRF5340 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/ipc/ipc_service/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf5340dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Mesh Local Identity Management Sample\nDESCRIPTION: Demonstrates correct local identity allocation for Bluetooth LE to prevent conflicts with Bluetooth Mesh identity values\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/overview/coexistence.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// Reference file: samples/bluetooth/mesh/ble_pripheral_lbs_coex/src/lb_service_handler.c\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum CMake Version for Nordic SDK Project\nDESCRIPTION: Sets the minimum required CMake version to 3.20.0 to ensure compatibility with Zephyr and Nordic SDK build requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/record_text/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for hpf_gpio_more_loops Zephyr Project\nDESCRIPTION: Sets up the CMake build system for a Zephyr-based project named 'hpf_gpio_more_loops'. The configuration specifies the minimum CMake version, locates the Zephyr package, defines the project name, and adds all .c files from the src directory to the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/gpio/hpf_gpio_more_loops/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(hpf_gpio_more_loops)\n\nFILE(GLOB app_sources src/main.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake for Zephyr Project in CMake\nDESCRIPTION: This snippet defines a CMake configuration for a Zephyr-based project. It requires CMake version 3.20.0 and uses the 'find_package' directive to locate the Zephyr environment, indicated by the environmental variable 'ZEPHYR_BASE'. The project's source is set to '../src/main.c', and the project is named 'remote'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_wdt/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(remote)\n\ntarget_sources(app PRIVATE ../src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Jobs Test Build with CMake\nDESCRIPTION: CMake configuration that sets up an AWS Jobs test project. It includes required Zephyr packages, configures test runners, sets up MQTT mocking, and defines source files and include directories for the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/aws_jobs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(aws_jobs_test)\n\ntest_runner_generate(src/main.c)\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/net/mqtt.h)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntarget_include_directories(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/include/net/\n  )\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for NCS Toolchain - YAML\nDESCRIPTION: This YAML configuration is for a GitHub Actions job that runs in a Docker container with the NCS toolchain, setting the necessary environment variables and default shell to bash.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/docker/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build-in-docker:\n    runs-on: ubuntu-22.04\n    container:\n      image: ghcr.io/nrfconnect/sdk-nrf-toolchain:<TAG>  # steps in this job are executed inside sdk-nrf-toolchain container\n      env:\n        ACCEPT_JLINK_LICENSE: 1 # set if you want to install JLink\n    defaults:\n      run:\n        shell: bash  # It is required to set `bash` as default shell\n    steps:\n      - name: Run command in NCS toolchain environment\n        run: \"west --version\"  # This command is executed in bash shell `docker exec <container> bash -c west --version`\n        # It will also install JLink if ACCEPT_JLINK_LICENSE is set to 1\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for PBKDF2 Project in nRF Connect SDK\nDESCRIPTION: This CMake configuration sets up a PBKDF2 project using the nRF Connect SDK. It defines the minimum required CMake version (3.20.0), locates the Zephyr package using the ZEPHYR_BASE environment variable, names the project 'pbkdf2', and adds src/main.c as the source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/pbkdf2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(pbkdf2)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring IPC Radio Project Build Settings in CMake\nDESCRIPTION: Sets up the CMake project configuration for IPC radio functionality, including version requirements, Zephyr package dependencies, and conditional source file inclusion based on radio protocol configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/ipc_radio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(ipc_radio)\n\ntarget_include_directories(app PRIVATE ./src)\n\ntarget_sources_ifdef(CONFIG_IPC_RADIO_802154 app PRIVATE src/802154.c)\n\nif(CONFIG_IPC_RADIO_BT_HCI_IPC)\n  target_sources(app PRIVATE src/bt_hci_ipc.c)\nelse()\n  target_sources(app PRIVATE src/bt_empty.c)\nendif()\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Sysbuild Validation Check\nDESCRIPTION: Validates that the project is being built using sysbuild, which is required for multi-image applications\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_ipc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Handler with Config Channel Support\nDESCRIPTION: Example of implementing an event handler function that includes configuration channel support using GEN_CONFIG_EVENT_HANDLERS macro.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/config_channel.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic bool app_event_handler(const struct app_event_header *aeh)\n{\n    /* Functions used to handle other events. */\n    ...\n\n    GEN_CONFIG_EVENT_HANDLERS(STRINGIFY(MODULE), opt_descr,\n                                config_set, config_get);\n\n    /* Functions used to handle other events. */\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files for Link Module in CMake\nDESCRIPTION: Adds multiple source files to the 'app' target for compilation. These files comprise the Link module's functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/link/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/link_api.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/link_shell.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/link_shell_print.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/link_shell_pdn.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/link_settings.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/link.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Settings for Nordic Connect SDK Project\nDESCRIPTION: Sets up the CMake build configuration for a Nordic Semiconductor SDK project. It requires CMake 3.20.0 or higher, finds the Zephyr package using environment variables, and adds all C source files from the src directory to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/fprotect/positive/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files\nDESCRIPTION: This snippet specifies the source files to be included in the application's build.  It uses the `target_sources` command to add `../src/main.c` as a private source file for the 'app' target. Private source files are only compiled into the specified target and are not exposed to other targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_gpio/remote/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_sources(app PRIVATE ../src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Options to Disable Default OTP and NV Counters\nDESCRIPTION: This snippet disables default OTP, writable OTP, and NV counters if CONFIG_TFM_PLATFORM_NV_COUNTER_MODULE_DISABLED is enabled.  This configuration is specific to scenarios where the platform NV counter module is disabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_PLATFORM_NV_COUNTER_MODULE_DISABLED)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DPLATFORM_DEFAULT_OTP=OFF\n    -DPLATFORM_DEFAULT_OTP_WRITEABLE=OFF\n    -DPLATFORM_DEFAULT_NV_COUNTERS=OFF\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Zephyr Library and Include Directories\nDESCRIPTION: This snippet defines a Zephyr library, adds include directories, and conditionally includes a source file based on the CONFIG_TFM_ALLOW_NON_SECURE_FAULT_HANDLING Kconfig option. It sets up the basic library structure for TF-M within the Zephyr build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_include_directories(.)\nzephyr_library_sources_ifdef(CONFIG_TFM_ALLOW_NON_SECURE_FAULT_HANDLING fault.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot Image Numbers in CMake\nDESCRIPTION: Sets the number of different image types for MCUboot configuration, including application, network core, WiFi patches, QSPI XIP, and MCUboot itself.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset_config_int(mcuboot CONFIG_MCUBOOT_APPLICATION_IMAGE_NUMBER ${SB_CONFIG_MCUBOOT_APPLICATION_IMAGE_NUMBER})\nset_config_int(mcuboot CONFIG_MCUBOOT_NETWORK_CORE_IMAGE_NUMBER ${SB_CONFIG_MCUBOOT_NETWORK_CORE_IMAGE_NUMBER})\nset_config_int(mcuboot CONFIG_MCUBOOT_WIFI_PATCHES_IMAGE_NUMBER ${SB_CONFIG_MCUBOOT_WIFI_PATCHES_IMAGE_NUMBER})\nset_config_int(mcuboot CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER ${SB_CONFIG_MCUBOOT_QSPI_XIP_IMAGE_NUMBER})\nset_config_int(mcuboot CONFIG_MCUBOOT_MCUBOOT_IMAGE_NUMBER ${SB_CONFIG_MCUBOOT_MCUBOOT_IMAGE_NUMBER})\n```\n\n----------------------------------------\n\nTITLE: Closing a UDP Socket using AT command\nDESCRIPTION: This AT command closes a UDP socket. The response confirms the socket closure with a \"closed\" status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n**AT#XSOCKET=0**\n#XSOCKET: 0,\"closed\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Build Configuration for Nordic SDK Application\nDESCRIPTION: This CMake snippet configures the build process for a Nordic Semiconductor application. It specifies the minimum CMake version, imports the Zephyr package, defines the project, and sets up source files and include directories for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/ble_peripheral_lbs_coex/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/lb_service_handler.c\n\tsrc/model_handler.c)\ntarget_include_directories(app PRIVATE include)\n\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring HPF MSPI Application in CMake\nDESCRIPTION: This CMake script configures a High Priority Feature MSPI application with Zephyr. It sets the minimum CMake version, finds the Zephyr package, defines the project, installs HRT assembly code, and adds the main application source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/hpf/mspi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(hpf_mspi)\n\nhpf_assembly_install(app \"${CMAKE_SOURCE_DIR}/src/hrt/hrt.c\")\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Enable Partition Manager for Sysbuild\nDESCRIPTION: This CMake command enables the use of the partition manager within the sysbuild process by setting the `NCS_SYSBUILD_PARTITION_MANAGER` variable to `TRUE`. This allows the build system to utilize partition definitions for memory layout and resource allocation. It checks to see if it should be exposed through a Kconfig.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nset(NCS_SYSBUILD_PARTITION_MANAGER TRUE)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library for TF-M Secure Peripheral Partition in CMake\nDESCRIPTION: Defines a static library named tfm_app_rot_partition_spp and sets up its include directories, source files, and dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/secure_peripheral_partition/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(tfm_app_rot_partition_spp STATIC)\n\ntarget_include_directories(tfm_app_rot_partition_spp\n    INTERFACE\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n    PRIVATE\n        ${CMAKE_BINARY_DIR}/secure_peripheral_partition\n)\ntarget_include_directories(tfm_partitions\n    INTERFACE\n        ${CMAKE_BINARY_DIR}/secure_peripheral_partition\n)\n\ntarget_sources(tfm_app_rot_partition_spp\n    PRIVATE\n        secure_peripheral_partition.c\n        util.c\n)\n\ntarget_include_directories(tfm_app_rot_partition_spp\n    PUBLIC\n        .\n        ${HAL_NORDIC_PATH}/nrfx\n        ${HAL_NORDIC_PATH}/nrfx/mdk\n        ${HAL_NORDIC_PATH}/nrfx/drivers/include\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for SUIT Envelope Decoder Testing\nDESCRIPTION: Sets up a CMake project for integration testing of the SUIT envelope decoder. Requires Zephyr RTOS, links against suit_utils, suit_storage_interface, and suit_execution_mode libraries. Specifies minimum CMake version 3.20.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/envelope_decoder/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_envelope_decoder)\ninclude(../cmake/test_template.cmake)\n\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_storage_interface)\nzephyr_library_link_libraries(suit_execution_mode)\n```\n\n----------------------------------------\n\nTITLE: Enforce Sysbuild Requirement\nDESCRIPTION: This snippet checks if the SYSBUILD variable is not set. If it's not set, it issues a fatal error message indicating that the application should be built using sysbuild. This ensures that multi-image applications are built correctly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_uarte/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(NOT SYSBUILD)\n\\tmessage(FATAL_ERROR\n\\t\\\" This is a multi-image application that should be built using sysbuild.\\n\\\"\n\\t\\\" Add --sysbuild argument to west build command to prepare all the images.\\\")\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Manager Proxy Project in CMake\nDESCRIPTION: Sets up the CMake project for Event Manager Proxy, including minimum CMake version, Zephyr package, project name, subdirectories, include directories, and source files. It requires CMake 3.20.0 or higher and the Zephyr package.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/event_manager_proxy/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(event_manager_proxy)\n\nadd_subdirectory(common_config)\nadd_subdirectory(common_events)\nadd_subdirectory(modules)\n\ntarget_include_directories(app PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src)\n\ntarget_sources(app PRIVATE\n  src/test_init.c\n  src/data.c\n  src/simple.c\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package and Handling Build Error\nDESCRIPTION: This snippet configures the CMake build process by checking for the required Zephyr package and ensures that the application is built using sysbuild, displaying an error message if it is not. It checks if the SYSBUILD variable is set and instructs the user on the correct build command if it is absent.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_spim_loopback/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating and Installing Watchdog Sources in C++\nDESCRIPTION: Demonstrates how to create and install watchdog sources using the Nrf::Watchdog::WatchdogSource class, optionally with an automatic feeding callback, and enabling the global watchdog.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/watchdog.rst#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include \"watchdog/watchdog.h\"\n\nvoid callback(Nrf::Watchdog::WatchdogSource *source)\n{\n    if (source)\n    {\n        source->Feed();\n    }\n}\n\nNrf::Watchdog::WatchdogSource myWatchdog1;\nNrf::Watchdog::WatchdogSource myWatchdog1(100, callback);\n\nif(Nrf::Watchdog::InstallSource(myWatchdog) && Nrf::Watchdog::InstallSource(myWatchdog1))\n{\n    Nrf::Watchdog::Enable();\n}\n```\n\n----------------------------------------\n\nTITLE: RAM Partition Configuration in NRF Connect SDK - YAML\nDESCRIPTION: This snippet provides two ways to configure RAM partitions in the NRF Connect SDK using YAML. It demonstrates how permanent image RAM partitions may be defined by either appending '_sram' to partition names or by specifying the region and size directly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsome_permament_sram_block_used_for_logging:\n   size: 0x1000\n   region: sram_primary\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsome_permament_sram_block_used_for_logging_sram:\n   size: 0x1000\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmcuboot_sram:\n    size: 0xa000\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Handlers in C++\nDESCRIPTION: This snippet implements task handlers for activating and deactivating the sensor, as well as measuring the temperature. Each handler performs specific actions based on sensor activity and measurement updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/adding_clusters.rst#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n      void AppTask::SensorActivateHandler()\n      {\n              StartSensorTimer(500);\n      }\n\n      void AppTask::SensorDeactivateHandler()\n      {\n              StopSensorTimer();\n      }\n\n      void AppTask::SensorMeasureHandler()\n      {\n              chip::app::Clusters::TemperatureMeasurement::Attributes::MeasuredValue::Set(\n                      /* endpoint ID */  1, /* temperature in 0.01*C */ int16_t(rand() % 5000));\n      }\n```\n\n----------------------------------------\n\nTITLE: Sysbuild Check\nDESCRIPTION: This conditional statement checks if the `SYSBUILD` variable is not set. If it's not set, it means the build is not using sysbuild, and an error message is displayed, stopping the build process. Sysbuild is required for multi-image applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_adc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\\\" This is a multi-image application that should be built using sysbuild.\\n\\\"\n\t\t\\\" Add --sysbuild argument to west build command to prepare all the images.\\\")\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Reading Remote Files using fs Commands\nDESCRIPTION: Shows how to create a new file on the remote system using fs write command and read its contents. The example writes bytes representing 'ABCD1234' followed by a newline.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ fs write /lfs/bar.txt 41 42 43 44 31 32 33 34 0a\nuart:~$ fs read /lfs/bar.txt\nFile size: 9\n00000000  41 42 43 44 31 32 33 34 0A                       ABCD1234.\n```\n\n----------------------------------------\n\nTITLE: Checking for SYSBUILD Argument\nDESCRIPTION: This snippet checks if the SYSBUILD variable is not defined and outputs a fatal error message if the necessary build arguments are missing. It informs the user to include the sysbuild argument in the build command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Stuck State in nRF 802.15.4 Radio Driver - 802.15.4 - Documentation Format\nDESCRIPTION: This issue describes how the nRF 802.15.4 Radio Driver can become unresponsive in a stuck state, directly affecting application reliability, especially during operational stress.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_51\n\nLANGUAGE: plaintext\nCODE:\n```\nKRKNWK-19574: nRF 802.15.4 Radio Driver stuck in ``RADIO RXDISABLE`` state The nRF 802.15.4 Radio Driver might get stuck in the function :c:func:`wait_until_radio_disabled` while waiting for the radio peripheral transition from state ``RXDISABLE`` to ``DISABLED``.\n```\n\n----------------------------------------\n\nTITLE: Building HUK Test with Board Serial Number in nRF Connect SDK\nDESCRIPTION: Command for building the Hardware Unique Key test application with the board's SEGGER ID specified as a configuration parameter. This is necessary because the KMU flashing happens during build time rather than flash time.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/hw_unique_key_tfm/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b nrf9160dk/nrf9160/ns -- -DCONFIG_HUK_TEST_BOARD_SNR=\\\"901234567\\\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up TFM Regression Test Project in CMake\nDESCRIPTION: Initial CMake configuration that sets the minimum required version, finds the Zephyr package, and defines the project with its source files. This establishes the basic project structure for the TFM regression test.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_regression_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(tfm_regression_test)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: BLE Bond Module Event Flow Table\nDESCRIPTION: ASCII table showing event flow for the BLE bonding module, detailing source modules, input events received, and related module interactions\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n+-----------------------------------------------+------------------------+--------------+------------------------------+---------------------------------------------+\n| Source Module                                 | Input Event            | This Module  | Output Event                 | Sink Module                                 |\n+===============================================+========================+==============+==============================+=============================================+\n| nrf_desktop_config_event_sources       | config_event       | ble_bond |                              |                                             |\n| nrf_desktop_ble_adv                    | ble_peer_event     |              |                              |                                             |\n```\n\n----------------------------------------\n\nTITLE: Setting Matter Log Level to Off\nDESCRIPTION: This snippet shows how to disable logging for the Matter module using the `CONFIG_MATTER_LOG_LEVEL_OFF` Kconfig option. This can be useful to reduce resource consumption in production environments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_14\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_MATTER_LOG_LEVEL_OFF`\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion with CONFIG_BT_CONN_CTX\nDESCRIPTION: This CMake snippet includes the `conn_ctx.c` source file in the build process only if the `CONFIG_BT_CONN_CTX` configuration option is defined. `zephyr_sources_ifdef` is a Zephyr-specific macro for conditional source inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_sources_ifdef(CONFIG_BT_CONN_CTX conn_ctx.c)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Compile Options for FOTA Download in nRF Connect SDK\nDESCRIPTION: Sets various compile options for the FOTA download project, including stack sizes, buffer sizes, and other configuration parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/fota_download/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_DOWNLOADER_STACK_SIZE=500\n  -DCONFIG_DOWNLOADER_MAX_FILENAME_SIZE=192\n  -DCONFIG_DOWNLOADER_MAX_HOSTNAME_SIZE=128\n  -DCONFIG_DOWNLOADER_TRANSPORT_PARAMS_SIZE=256\n  -DCONFIG_FW_MAGIC_LEN=32\n  -DABI_INFO_MAGIC=0xdededede\n  -DCONFIG_FW_FIRMWARE_INFO_OFFSET=0x200\n  -DCONFIG_FOTA_DOWNLOAD_LOG_LEVEL=2\n  -DCONFIG_FOTA_SOCKET_RETRIES=2\n  -DCONFIG_FW_INFO_MAGIC_LEN=12\n  -DCONFIG_FOTA_DOWNLOAD_RESOURCE_LOCATOR_LENGTH=512\n  -DCONFIG_FOTA_DOWNLOAD_FILE_NAME_LENGTH=128\n  -DCONFIG_FOTA_DOWNLOAD_HOST_NAME_LENGTH=128\n  -DCONFIG_FOTA_DOWNLOAD_SEC_TAG_LIST_SIZE_MAX=5\n  -DCONFIG_FOTA_DOWNLOAD_BUF_SZ=2048\n  )\n```\n\n----------------------------------------\n\nTITLE: Generating Compressed Test Data Include Files\nDESCRIPTION: Generates include files for compressed test data, supporting decompression testing for ARM Thumb architecture\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_compress/decompression/arm_thumb/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_inc_file_for_target(\n  app\n  ${ZEPHYR_NRFXLIB_MODULE_DIR}/tests/subsys/nrf_compress/decompression/arm_thumb_compressed.dat\n  ${ZEPHYR_BINARY_DIR}/include/generated/arm_thumb_compressed.inc\n  )\n```\n\n----------------------------------------\n\nTITLE: Recalling a Scene Without Acknowledgement\nDESCRIPTION: This command recalls a specified scene and does not wait for a confirmation, allowing for immediate scene changes without requiring client acknowledgment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/scene_cli.rst#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models scene recall-unack <Scene> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth RAS Subdirectory\nDESCRIPTION: This snippet includes the Reconnection Address Service (RAS) subdirectory if CONFIG_BT_RAS is defined. This is important for managing reconnections to Bluetooth devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_BT_RAS ras)\n```\n\n----------------------------------------\n\nTITLE: OpenSSL TLS 1.2 Server (ECDSA)\nDESCRIPTION: OpenSSL command to start a TLS 1.2 server using ECDHE-ECDSA-AES128-SHA256 cipher and ECDSA certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nopenssl s_server -accept 4243 -cipher ECDHE-ECDSA-AES128-SHA256 -cert certs/ecdsa/cert.pem -key certs/ecdsa/cert.key\n```\n\n----------------------------------------\n\nTITLE: Generating Beacons with Random MAC\nDESCRIPTION: Command to build the sample with random MAC address and BSSID generation enabled\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/offloaded_raw_tx/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -DCONFIG_GENERATE_MAC_ADDRESS=y -DCONFIG_ENTROPY_GENERATOR=y\n```\n\n----------------------------------------\n\nTITLE: Building Application with Updated Version for Firmware Update\nDESCRIPTION: Command to build the application with an incremented version number for firmware update purposes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_psa_template/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp/ns nrf/samples/tfm/tfm_psa_template -d build_update \\\n-DCONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION=\\\"1.2.3\\\"\n```\n\n----------------------------------------\n\nTITLE: Zephyr Linker Sources Configuration (Alignment)\nDESCRIPTION: This snippet configures the linker sources for ensuring proper image size alignment. It adds `align.ld` to the linker sources under the `SECTIONS SORT_KEY zzz_place_align_at_end` category to ensure the image size aligns with 16 bytes for MRAMC writes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/nrf71/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_linker_sources(SECTIONS SORT_KEY zzz_place_align_at_end align.ld)\n```\n\n----------------------------------------\n\nTITLE: Configuring Counter Basic API Test Project with CMake\nDESCRIPTION: This CMake script sets up a Counter Basic API test project by including counter test source files from the Zephyr base directory. It requires CMake version 3.20.0 or higher and uses the Zephyr package for building the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/counter/counter_basic_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(counter_basic_api)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/counter/counter_basic_api/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with zephyr_sources_ifdef\nDESCRIPTION: This snippet uses the `zephyr_sources_ifdef` macro to conditionally include `backend_interface.c` in the Zephyr build. The macro checks if `CONFIG_PSA_PROTECTED_STORAGE` is defined. If the Kconfig option is enabled, the specified source file is added to the list of files to be compiled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/trusted_storage/src/protected_storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_PSA_PROTECTED_STORAGE\n\tbackend_interface.c\n)\n```\n\n----------------------------------------\n\nTITLE: BICR Status Validation Command\nDESCRIPTION: Command to validate BICR status by reading memory address using nRF Util.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_custom_pcb.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device x-read --address 0x2F88FF1C --serial-number 1051164514 --core Secure\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with Nordic SDK Dependencies\nDESCRIPTION: Sets up a CMake project for date_time testing with Nordic SDK. Configures minimum CMake version, finds Zephyr package, and sets up the project name. Includes test runner generation and source file configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/date_time/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(date_time_test)\n\n# generate runner for the test\ntest_runner_generate(src/main.c)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ECDSA Project with Zephyr RTOS\nDESCRIPTION: This CMake snippet sets up the build configuration for an ECDSA project using the Nordic Semiconductor SDK and Zephyr RTOS. It specifies the minimum CMake version, locates the Zephyr package, defines the project name, and adds the main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/ecdsa/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(ecdsa)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for Platform Secure Partition\nDESCRIPTION: This snippet defines compile-time flags for the 'platform_s' target based on specific conditions. The flags control features like the default crypto keys and firmware info magic values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(platform_s\n  PRIVATE\n  $<$<BOOL:${PLATFORM_DEFAULT_CRYPTO_KEYS}>:PLATFORM_DEFAULT_CRYPTO_KEYS>\n  FIRMWARE_INFO_MAGIC=${FIRMWARE_INFO_MAGIC}\n  EXT_API_MAGIC=${EXT_API_MAGIC}\n)\n```\n\n----------------------------------------\n\nTITLE: Compile Definitions for Azure SDK\nDESCRIPTION: This CMake command defines compilation flags for the Azure SDK. `AZ_NO_PRECONDITION_CHECKING` disables precondition checks and `AZ_NO_LOGGING` disables logging to reduce code size and RAM usage. These definitions optimize the Azure SDK for resource-constrained embedded systems running Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/azure-sdk-for-c/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_compile_definitions(\n\tAZ_NO_PRECONDITION_CHECKING\n\tAZ_NO_LOGGING\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription Resumption Retry Multiplier for Matter\nDESCRIPTION: This snippet describes how to configure the multiplier in seconds used to calculate the wait time for subsequent subscription resumption retries using the `CONFIG_CHIP_SUBSCRIPTION_RESUMPTION_RETRY_MULTIPLIER` Kconfig option. This parameter influences the retry backoff strategy after a disconnection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_9\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_SUBSCRIPTION_RESUMPTION_RETRY_MULTIPLIER`\"\n```\n\n----------------------------------------\n\nTITLE: Adding OpenThread to Build System and Managing Build Targets\nDESCRIPTION: Adds the OpenThread module to the build system and configures build targets. Makes OpenThread libraries optional to build only what's needed by setting EXCLUDE_FROM_ALL property.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Need to specify build directory as well\nadd_subdirectory(${ZEPHYR_CURRENT_MODULE_DIR} build)\n\nzephyr_get_targets(${ZEPHYR_CURRENT_MODULE_DIR} \"STATIC_LIBRARY;OBJECT_LIBRARY\" ALL_TARGETS)\nforeach(target ${ALL_TARGETS})\n  # We don't want to build all openthread libraries per default.\n  # Setting EXCLUDE_FROM_ALL ensures that only libraries that are linked\n  # into Zephyr will be built due to dependencies.\n  set_property(TARGET ${target} PROPERTY EXCLUDE_FROM_ALL TRUE)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Instructions via Zephyr CMake\nDESCRIPTION: This snippet configures the build process in the Zephyr environment. It includes a directory using 'zephyr_include_directories' and conditionally adds source files and linker directives if 'CONFIG_APP_EVENT_MANAGER_PROFILER_TRACER' is enabled. Dependencies include CMake and Zephyr build tools.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/app_event_manager_profiler_tracer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(.)\nzephyr_sources_ifdef(CONFIG_APP_EVENT_MANAGER_PROFILER_TRACER app_event_manager_profiler_tracer.c)\nif(CONFIG_APP_EVENT_MANAGER_PROFILER_TRACER)\nzephyr_linker_sources(SECTIONS em_pt.ld)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring EMDS Module Sources and Linker Scripts\nDESCRIPTION: Adds source files emds.c and emds_flash.c to the Zephyr build system and includes a custom linker script emds_types.ld for EMDS type definitions. This configuration is essential for building the EMDS module as part of the Nordic nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/emds/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources(emds.c)\nzephyr_sources(emds_flash.c)\nzephyr_linker_sources(SECTIONS emds_types.ld)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Library and Including Directories in CMake\nDESCRIPTION: This snippet creates a library named 'app_battery' in CMake, specifies public and private include directories, and lists platform-independent source files. It ensures the library is appropriately configured for inclusion in a larger project. Dependencies include the required include directories for the library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/src/battery/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_named(app_battery)\n\ntarget_include_directories(app_battery PUBLIC include)\ntarget_include_directories(app_battery PRIVATE include_priv)\n```\n\n----------------------------------------\n\nTITLE: Configuring Direction Finding Central Application Build in CMake\nDESCRIPTION: This CMake script sets up the build environment for a direction finding central application. It specifies the minimum CMake version, locates the Zephyr package, defines the project name, and configures the application's source files to be compiled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/direction_finding_central/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(direction_finding_central)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for nRF GRTC Timer\nDESCRIPTION: Sets up the CMake build configuration for the nRF GRTC Timer project. It requires CMake 3.20.0 or higher, finds the Zephyr package using environment variables, and includes all .c files from the src directory in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/timer/grtc_timer_lfrc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_grtc_timer)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Running bt_nus_shell.py\nDESCRIPTION: This command executes the `bt_nus_shell.py` script with specific parameters. The parameters include the Bluetooth name, COM port, family, and serial number. These parameters are required for the script to connect to the target device over Bluetooth.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/shell_bt_nus/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nbt_nus_shell.py --name BT_NUS_shell --com COM237 --family NRF52 --snr 682560213\n```\n\n----------------------------------------\n\nTITLE: Setting GPIO Forwarder Node for nRF53 Series\nDESCRIPTION: This snippet illustrates how to create a GPIO forwarder node in the application core devicetree to control the GPIO pins from the application core for the nRF21540 configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf21540_gpio.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\n&gpio_fwd {\n   nrf21540-gpio-if {\n      gpios = <&gpio0 13 0>,   /* tx-en-gpios */\n              <&gpio0 14 0>,   /* rx-en-gpios */\n              <&gpio0 15 0>;   /* pdn-gpios */\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NFC RPC Client Library Build in CMake\nDESCRIPTION: Sets up the Zephyr library build configuration for NFC RPC client implementation. Conditionally includes T2T and T4T client source files based on configs and sets up required include directories for NFC and common headers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nfc/rpc/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources_ifdef(CONFIG_NFC_RPC_T2T nfc_rpc_t2t_client.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_RPC_T4T nfc_rpc_t4t_client.c)\n\nzephyr_include_directories(${ZEPHYR_NRFXLIB_MODULE_DIR}/nfc/include/)\n\nzephyr_library_include_directories(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../common\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies\nDESCRIPTION: This snippet defines the Python dependencies required for the project. It specifies 'pc-ble-driver-py' version 0.16.4 or higher and 'requests' as necessary packages. These packages are needed for the project to function correctly, likely for Bluetooth Low Energy communication and HTTP requests, respectively.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/memfault/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"pc-ble-driver-py>=0.16.4\nrequests\"\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options for DT Bindings (CMake)\nDESCRIPTION: Filters DT binding header files from DTS_INCLUDE_FILES and prepends \"-include;\" to each.  These are then used as compile options for `validate_binding_headers.c` to ensure DT values are validated.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(dt_binding_includes ${DTS_INCLUDE_FILES})\nlist(FILTER dt_binding_includes INCLUDE REGEX \"/dt-bindings/.*\\.h$\")\nlist(TRANSFORM dt_binding_includes PREPEND \"-include;\")\nset_source_files_properties(\n  validate_binding_headers.c\n  DIRECTORY ${CMAKE_CURRENT_LIST_DIR}\n  PROPERTIES COMPILE_OPTIONS \"${dt_binding_includes}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Checking for SYSBUILD and Error Handling\nDESCRIPTION: This snippet checks if the SYSBUILD variable is not defined, which indicates that the build must utilize sysbuild. If not specified, it throws a fatal error with instructions on how to proceed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_grtc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Nordic Semiconductor NRF SDK\nDESCRIPTION: Sets up a basic CMake project for Nordic Semiconductor NRF SDK. It specifies the minimum CMake version (3.20.0), finds the Zephyr package using environment variables, and adds the main.c source file to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/enocean/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring GNSS Sample Project Build in CMake\nDESCRIPTION: Sets up the CMake build environment for a GNSS sample application, including main source file and conditional inclusion of various assistance modules based on configuration flags. Requires CMake 3.20.0 or higher and depends on the Zephyr RTOS framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/gnss/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(gnss_sample)\n\nzephyr_library_sources(src/main.c)\n\nzephyr_library_sources_ifdef(CONFIG_GNSS_SAMPLE_ASSISTANCE_NRF_CLOUD src/assistance.c)\nzephyr_library_sources_ifdef(CONFIG_GNSS_SAMPLE_ASSISTANCE_SUPL src/assistance_supl.c)\nzephyr_library_sources_ifdef(CONFIG_GNSS_SAMPLE_ASSISTANCE_MINIMAL src/assistance_minimal.c)\nzephyr_library_sources_ifdef(CONFIG_GNSS_SAMPLE_ASSISTANCE_MINIMAL src/mcc_location_table.c)\n```\n\n----------------------------------------\n\nTITLE: Including Configuration Headers\nDESCRIPTION: This snippet specifies the inclusion of configuration header files by adding the necessary directories for the Zephyr library. This setup allows the project to access necessary configuration headers for the Nordic SDK application and helps in managing the build environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_nfc_pairing/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_include_directories(configuration)\n```\n\n----------------------------------------\n\nTITLE: Targeting Private Sources in CMake\nDESCRIPTION: This code targets a specific source file to be included in the build process privately for the application. It utilizes the CMake scripting language to define the inclusion of the specified source file. The context suggests this is part of a larger CMake configuration for application development.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/modules/transport/credentials_provision/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/credentials_provision.c)\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenThread Feature Source Files\nDESCRIPTION: Adds optional source files based on specific Kconfig configuration options, enabling modular feature inclusion for OpenThread platform\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/platform/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_OPENTHREAD_BLE_TCAT ble.c)\nzephyr_library_sources_ifdef(CONFIG_OPENTHREAD_DIAG diag.c)\nzephyr_library_sources_ifdef(CONFIG_OPENTHREAD_COPROCESSOR uart.c)\nzephyr_library_sources_ifdef(CONFIG_OPENTHREAD_CRYPTO_PSA crypto_psa.c)\nzephyr_library_sources_ifdef(CONFIG_OPENTHREAD_SHELL shell.c)\nzephyr_library_sources_ifdef(CONFIG_OPENTHREAD_EXTERNAL_HEAP memory.c)\nzephyr_library_sources_ifdef(CONFIG_OPENTHREAD_PLATFORM_MESSAGE_MANAGEMENT messagepool.c)\nzephyr_library_sources_ifdef(CONFIG_SETTINGS settings.c)\nzephyr_library_sources_ifndef(CONFIG_LOG_BACKEND_SPINEL logging.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nordic Semiconductor Mesh Silvair EnOcean Project in CMake\nDESCRIPTION: This CMake script configures a project named 'mesh_silvair_enocean' that depends on the Zephyr RTOS. It specifies the source files ('main.c' and 'model_handler.c') and include directories required for building the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/silvair_enocean/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(mesh_silvair_enocean)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/model_handler.c)\ntarget_include_directories(app PRIVATE include)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Including Module Sources for Application\nDESCRIPTION: This snippet adds source files for various modules that augment the application's functionality, such as controller logic and sensor simulations. These modules are critical for the application's performance and feature set.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_event_manager/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t\tsrc/modules/controller.c\n\t\tsrc/modules/sensor_simulated.c\n\t\tsrc/modules/stats.c\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Event Handling Sequence Flow with PlantUML\nDESCRIPTION: UML sequence diagram showing the interaction between threads, IPC IRQs, HRT IRQs, and error handlers in the HPF system. The diagram illustrates initialization, transaction request handling, and error handling processes with timing priorities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/event_handling.rst#2025-04-21_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n@startuml\n\nskinparam sequence {\nDividerBackgroundColor #8DBEFF\nDividerBorderColor #8DBEFF\nLifeLineBackgroundColor #13B6FF\nLifeLineBorderColor #13B6FF\nParticipantBackgroundColor #13B6FF\nParticipantBorderColor #13B6FF\nBoxBackgroundColor #C1E8FF\nBoxBorderColor #C1E8FF\nGroupBackgroundColor #8DBEFF\nGropuBorderColor #8DBEFF\n}\n\nskinparam note {\nBackgroundColor #ABCFFF\nBorderColor #2149C2\n}\n\nparticipant Thread as t\nparticipant \"IPC IRQ \\n(low priority)\" as i\nparticipant \"HRT IRQ \\n(high priority)\" as h\nparticipant \"Error handler \\n(top priority)\" as e\n\n== Initialization ==\n\n[-> t : Start VPR\nactivate t\nt -> t : Boot\nt -> t : Initialization\nt -> t : WFI\ndeactivate t\n...\n\n== TX-RX-TX requests ==\n\n[-> i : TX request from host\nactivate i\ni -> i : IPC RX\nnote right i: Shared mem and/or IRQ num\ni -> h : Dispatch\ndeactivate i\n\nactivate h\nh -> h : HRT TX execution\n[-> i : RX request from host\nh -> h : Mark TX as done\nreturn\n\nactivate i\ni -> i : IPC RX\nopt\ni -> i : Notify host:\\n\"TX queue empty\"\nend\ni -> h : Dispatch\ndeactivate i\n\nactivate h\nh -> h : HRT RX execution\n[-> i : TX request from host\n\nh -> h: Mark Rx as done\nreturn\nactivate i\n\ni -> i : IPC TX\ni -> i : IPC RX\ni -> h : Dispatch\ndeactivate i\n\nactivate h\nh -> h : HRT TX execution\nh -> h : Mark TX as done\nreturn\n\ni --> t\n\nactivate t\nt -> t : WFI\ndeactivate t\n...\n\n== Error handling ==\n[-> h : ...\nactivate h\nh -> h : HRT TX execution\ne <-] : Memory fault\ndeactivate h\nactivate e\ne -> e : Notify host:\\n\"HPF error\"\ne -> e : Infinite loop\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: RC Clock Calibration Requirement - MPSL - Documentation Format\nDESCRIPTION: This entry notes that enabling RC clock calibration is mandatory when `CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC` is configured. This ensures optimal clock performance and reliability when using the RC clock.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_37\n\nLANGUAGE: plaintext\nCODE:\n```\nDRGN-15979: :kconfig:option:`CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION` must be set when :kconfig:option:`CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC` is set MPSL requires RC clock calibration to be enabled when the RC clock is used as the Low Frequency clock source.\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic SDK Project\nDESCRIPTION: Sets up the CMake build environment for a Nordic Semiconductor project. Requires CMake 3.20.0 or higher, finds the Zephyr package, and includes all source files from the src directory into the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/fw_info/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(NONE)\n\nFILE(GLOB app_sources ${CMAKE_CURRENT_LIST_DIR}/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Directories\nDESCRIPTION: This CMake snippet sets the source directories for the WFA QT base and the current source. These variables are used later when including source files, ensuring the build system knows where to find the necessary code. It defines the search paths for the source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/wfa-qt/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(WFA_QT_BASE ${CMAKE_CURRENT_SOURCE_DIR}/../../../modules/lib/wfa-qt-control-app)\nset(SOURCES_BASE ${CMAKE_CURRENT_SOURCE_DIR}/)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SUIT Integration Test\nDESCRIPTION: Configures CMake build settings for SUIT integration testing, including minimum CMake version, Zephyr package requirement, project definition and library linking. The configuration is specific to Nordic Semiconductor's nRF Connect SDK environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/digest/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_digest)\ninclude(../cmake/test_template.cmake)\n\nzephyr_library_link_libraries(suit_platform_interface)\n```\n\n----------------------------------------\n\nTITLE: Defining Nordic Semiconductor Copyright Header in C\nDESCRIPTION: Standard copyright notice and license declaration for Nordic Semiconductor ASA source files using the Nordic 5-Clause license.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/src/util/chmap_filter/license.txt#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/*\n * Copyright (c) 2020 Nordic Semiconductor ASA\n *\n * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n */\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Core when Not Required\nDESCRIPTION: This Kconfig option enables the network core even when it is not strictly required by the application core firmware. This might be useful for debugging or other purposes, but generally, if the application core doesn't need the network core, it can remain empty.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/features_nrf53.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\n:kconfig:option:`CONFIG_SOC_NRF53_CPUNET_ENABLE`\n```\n\n----------------------------------------\n\nTITLE: Configuring SMP Module in Kconfig\nDESCRIPTION: Kconfig options required to enable and configure the Simple Management Protocol module for DFU over Bluetooth LE. These options enable necessary dependencies and features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_smp.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_CAF_BLE_STATE=y\nCONFIG_CAF_BLE_SMP=y\nCONFIG_MCUMGR_GRP_IMG=y\nCONFIG_MCUMGR_MGMT_NOTIFICATION_HOOKS=y\nCONFIG_MCUMGR_GRP_IMG_UPLOAD_CHECK_HOOK=y\nCONFIG_MCUMGR_TRANSPORT_BT=y\nCONFIG_BOOTLOADER_MCUBOOT=y\n```\n\n----------------------------------------\n\nTITLE: Retrieving String Parameter in C\nDESCRIPTION: Retrieves a string parameter from the parsed AT command list.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_parser.rst#2025-04-21_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nat_params_string_get();\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic Semiconductor Project\nDESCRIPTION: Sets up the CMake build environment by specifying minimum CMake version, finding Zephyr package, and configuring source files. The configuration includes globbing all .c files from the src directory and adding them to the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bootloader/bl_validation/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Warning for Building Without Application\nDESCRIPTION: This conditional block warns the user if the bootloader is being built without an associated application, indicating that dummy values will be used for partition configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bootloader/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT IMAGE_NAME AND NOT CONFIG_PARTITION_MANAGER_ENABLED)\n  message(WARNING \"Building bootloader without associated application. \\\n          \"Dummy values will be used for partition configuration.\\\n          \"Building bootloader without associated application. \")\n  zephyr_include_directories(include/dummy_values/)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating Event Type Definition in App Event Manager (C)\nDESCRIPTION: Example of how to update the event type definition in the App Event Manager library using the new flag-based system. This replaces the previous init_log parameter with APP_EVENT_FLAGS_CREATE macro to set multiple flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.0.rst#2025-04-21_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nAPP_EVENT_TYPE_DEFINE(my_event,\n  log_my_event,\n  &my_event_info,\n  APP_EVENT_FLAGS_CREATE(APP_EVENT_TYPE_FLAGS_1, APP_EVENT_TYPE_FLAGS_2));\n```\n\n----------------------------------------\n\nTITLE: Adding Location Request Payload in C\nDESCRIPTION: This internal codec function adds payload data to the location request while filtering out local Wi-Fi access point MAC addresses. This step is crucial for maintaining user privacy and ensuring the accuracy of location data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n:c:func:`nrf_cloud_obj_location_request_payload_add`, which excludes local Wi-Fi access point MAC addresses from the location request.\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Source Files in CMake for Nordic SDK App\nDESCRIPTION: This CMake snippet configures the build settings for a Nordic Semiconductor SDK application. It adds the current source directory to the include path and specifies source files to be compiled. It also includes a conditional source file based on a configuration option.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/event_manager_proxy/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n\ntarget_sources(app PRIVATE common_utils.c)\ntarget_sources_ifdef(CONFIG_TEST app PRIVATE test_utils.c)\n```\n\n----------------------------------------\n\nTITLE: Accessing kernel uptime in C for nRF54L Series devices\nDESCRIPTION: The k_uptime_get() function is used to get the kernel uptime, which may persist after certain types of system resets on nRF54L Series devices. This can cause issues with clock calculations in modules like FMDN.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nk_uptime_get()\n```\n\n----------------------------------------\n\nTITLE: Encoding NFC URI Message with HTTP Protocol in C\nDESCRIPTION: Creates and encodes an NFC URI message with a single URI record using the nfc_ndef_uri_msg_encode function. The example uses the HTTP_WWW URI identifier to create a \"http://www.nordicsemi.com\" URL and handles any encoding errors.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/uri_msg.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint err;\n\nerr = nfc_ndef_uri_msg_encode( NFC_URI_HTTP_WWW,\n                               m_url,\n                               sizeof(m_url),\n                               m_ndef_msg_buf,\n                               &len);\n\nif (err < 0) {\n     printk(\"Cannot encode message!\\n\");\n\treturn err;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Source File in Zephyr Build\nDESCRIPTION: This CMake snippet specifies the inclusion of 'uart_async_adapter.c' in the Zephyr build process by using the 'zephyr_sources' function. It requires a properly configured Zephyr environment and CMake setup. The input is the filename to be added to the source list, and the output is its incorporation into the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/uart_async_adapter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources(uart_async_adapter.c)\n```\n\n----------------------------------------\n\nTITLE: Installing Device Credentials for CoAP over Wi-Fi\nDESCRIPTION: This Python command uses the device_credentials_installer.py script to install device and server credentials for CoAP over Wi-Fi connectivity. It includes options for CoAP, TLS Credentials Shell, and local certificate generation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\npython3 device_credentials_installer.py --ca self_self_cert_serial_ca.pem --ca_key self_self_cert_serial_prv.pem --id_str \"device_id\" -s -d --verify --coap --local_cert --cmd_type tls_cred_shell --port device_port\n```\n\n----------------------------------------\n\nTITLE: Conditional Warning for MCUboot KMU Signature in CMake\nDESCRIPTION: Displays a warning message if MCUboot is configured to use KMU stored keys for signature verification, advising manual provisioning using 'west ncs-provision'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/sysbuild/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(SB_CONFIG_MCUBOOT_SIGNATURE_USING_KMU)\n  message(WARNING \"\n          ------------------------------------------------------------------------------\n          --- WARNING: MCUboot uses KMU stored keys for signature verification. Make ---\n          --- sure to use `west ncs-provision` to manually provision the bootloader. ---\n          --- Application would fail to boot if MCUboot is not provisioned. For more ---\n          --- details, see the `Building and running` section from the Fast Pair     ---\n          --- Locator Tag Readme documentation.                                      ---\n          ------------------------------------------------------------------------------\n          \")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Global Property for Secure HEX File\nDESCRIPTION: This snippet sets a global property named `tfm_PM_HEX_FILE` to the `TFM_S_HEX_FILE` target property of the 'tfm' target.  This makes the path to the TF-M secure HEX file available globally within the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(GLOBAL PROPERTY\n  tfm_PM_HEX_FILE $<TARGET_PROPERTY:tfm,TFM_S_HEX_FILE>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring External Flash Memory in Devicetree for nRF9160 DK\nDESCRIPTION: This devicetree overlay enables the external flash device (mx25r64), configures Partition Manager to use it, and optionally enables high-performance mode to increase write/erase performance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf9160_external_flash.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/* Enable the external flash device (required) */\n&mx25r64 {\n   status = \"okay\";\n};\n\n/* Configure partition manager to use mx25r64 as the external flash device */\n/ {\n    chosen {\n        nordic,pm-ext-flash = &mx25r64;\n    };\n};\n\n/* Enable high performance mode to increase write/erase performance */\n&mx25r64 {\n    mxicy,mx25r-power-mode = \"high-performance\";\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring UART Trace Backend in CMake\nDESCRIPTION: Conditionally adds the UART subdirectory for modem trace logging when CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_UART is enabled\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/nrf_modem_lib/trace_backends/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_UART uart)\n```\n\n----------------------------------------\n\nTITLE: Building Door Lock Application for Matter over Thread with NUS enabled\nDESCRIPTION: This command builds the door lock application for Matter over Thread with the Nordic UART Service (NUS) enabled, using west build.  It configures the application to use Bluetooth LE for communication using NUS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/README.rst#2025-04-21_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n\"west build -b nrf52840dk/nrf52840 -- -DCONFIG_CHIP_NUS=y\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for test_zcbor_raw_encode Zephyr Project\nDESCRIPTION: Defines the CMake build configuration for the test_zcbor_raw_encode project. Sets the minimum CMake version to 3.20.0, finds the Zephyr package from the environment variable, and adds all .c files from the src directory as sources for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/modules/lib/zcbor/raw_encode/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(test_zcbor_raw_encode)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Modifying Application Manifest for Fetch Model\nDESCRIPTION: YAML code snippet showing how to append the CACHE_POOL component to the application manifest. This component occupies the free space in the DFU partition after the envelope and is used for storing fetched payload.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_fetch.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsuit-components:\n    ...\n- - CACHE_POOL\n  - 0\n```\n\n----------------------------------------\n\nTITLE: Configuring UIcc LwM2M Project Build in CMake\nDESCRIPTION: CMake script that configures the build for a UIcc LwM2M project. It sets the minimum required CMake version, finds the Zephyr package, sets the project name, specifies source files, and configures include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/uicc_lwm2m/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(uicc_lwm2m)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n\nzephyr_include_directories(src)\n```\n\n----------------------------------------\n\nTITLE: Configuring GNSS Module Build Settings in CMake\nDESCRIPTION: Adds include directories and source files for the GNSS AT command handling module in the Serial LTE Modem application. Includes copyright notice and Nordic Semiconductor license reference.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/src/gnss/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2021 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\nzephyr_include_directories(.)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/slm_at_gnss.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Partition with Span in YAML\nDESCRIPTION: Example configuration for defining a static partition in pm_static.yml file. Shows how to specify address, size, and span properties for a partition. The region defaults to flash_primary if not specified.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npartition_name:\n   address: 0xab00\n   size: 0x1000\n   span: [example]  # Only if this partition had the span property set originally.\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Change Callback in C++\nDESCRIPTION: This snippet provides an implementation of a callback that triggers the sensor activation and deactivation tasks based on changes to the On/Off attribute in the cluster.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/adding_clusters.rst#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n   void MatterPostAttributeChangeCallback(const chip::app::ConcreteAttributePath & attributePath, uint8_t type,\n                                          uint16_t size, uint8_t * value)\n   {\n            if (attributePath.mClusterId != OnOff::Id || attributePath.mAttributeId != OnOff::Attributes::OnOff::Id)\n                   return;\n\n            if (*value) {\n                   Nrf::PostTask([] { AppTask::SensorActivateHandler(); });\n            } else {\n                   Nrf::PostTask([] { AppTask::SensorDeactivateHandler(); });\n            }\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Semiconductor Project\nDESCRIPTION: This CMake script sets up the build environment for a Nordic Semiconductor project. It requires CMake 3.20.0 or higher, finds the Zephyr package, and includes all .c files from the src directory as source files for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bootloader/bl_storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Running Ethernet over RTT for Linux with nRF5340\nDESCRIPTION: Command to run the eth_rtt_link executable for nRF5340, specifying the SEGGER ID, IPv4 address, and RTT control block address. Used when the default RTT connection fails.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsudo ./eth_rtt_link --snr 960010000 --ipv4 192.0.2.2 --rttcbaddr 0x20002000\n```\n\n----------------------------------------\n\nTITLE: Starting Joining Process in NCP Sample\nDESCRIPTION: Command to start the joining process on the Joiner device in the OpenThread NCP sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nwpanctl:joiner_if> joiner --join N0RD1C\n```\n\n----------------------------------------\n\nTITLE: Starting the Broadcaster with Shell Command\nDESCRIPTION: Command to start the broadcaster with current configuration. An optional BIG_index parameter can be specified to start a specific Broadcast Isochronous Group.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnac start [BIG_index]\n```\n\n----------------------------------------\n\nTITLE: Defining Model Context Structure for Bluetooth Mesh (C)\nDESCRIPTION: The code illustrates how to define a structure encompassing model-specific parameters, including publication contexts and pointers to mesh models. This is necessary for managing distinct model instances and utilizing mesh APIs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/chat_sample_walk_through.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct model_context {\n    struct bt_mesh_model_pub pub;\n    struct net_buf_simple buf;\n    struct bt_mesh_model *model;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Checking Package Versions - Linux Console Command\nDESCRIPTION: Command to list installed packages and their versions on Linux using apt package manager.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/recommended_versions.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\napt list --installed\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Broadcast Sink Support in Bluetooth Management\nDESCRIPTION: Conditionally adds broadcast scanning support when the BT_BAP_BROADCAST_SINK configuration is enabled for Bluetooth LE Audio broadcast reception.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_management/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_BT_BAP_BROADCAST_SINK)\ntarget_sources(app PRIVATE\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/scanning/bt_mgmt_scan_for_broadcast.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Source Files in CMake for Nordic SDK\nDESCRIPTION: Adds two test source files to the application build target using CMake's target_sources command. The files are referenced using their full path via CMAKE_CURRENT_SOURCE_DIR variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/caf/sensor_data_aggregator/src/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_basic.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_data_receiver.c)\n```\n\n----------------------------------------\n\nTITLE: Including Matter Common Modules in CMake\nDESCRIPTION: CMake instruction to include common software modules for Matter samples and applications. This line includes all required source code files based on selected Kconfig options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${ZEPHYR_NRF_MODULE_DIR}/samples/matter/common/cmake/source_common.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding PPP Source Files to Application Target in CMake\nDESCRIPTION: Adds multiple PPP-related source files to the 'app' target. These files include implementations for shell interface, control, settings, and modem data reception and sending.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/ppp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ppp_shell.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ppp_ctrl.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ppp_settings.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ppp_mdm_data_rcv.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ppp_mdm_data_snd.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Bluetooth Mesh Application\nDESCRIPTION: Configures source files for the application including local sources and Bluetooth mesh implementation files from the nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/light_hue/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n\ntarget_sources(app\n  PRIVATE\n  ${app_sources}\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/light_hue_srv.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/model_utils.c\n  )\n```\n\n----------------------------------------\n\nTITLE: CoreMark Benchmark Console Output (Standard Logging)\nDESCRIPTION: Example console output for CoreMark benchmark execution with standard logging mode. Shows initialization, test progress, and final results.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/benchmarks/coremark/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n*** Booting nRF Connect SDK v2.8.99-bd4a30a3a758 ***\n*** Using Zephyr OS v3.7.99-02718211f9a9 ***\n[00:00:00.261,383] <inf> app: Standard logging mode\n\n[00:00:00.266,967] <inf> app: CoreMark sample for nrf52840dk/nrf52840\n[00:00:00.274,139] <inf> app: Press Push button switch 0 to start the test ...\n\n[00:00:01.267,608] <inf> app: Push button switch 0 pressed!\n[00:00:01.273,864] <inf> app: CoreMark started! CPU FREQ: 64000000 Hz, threads: 1, data size: 2000; iterations: 2000\n\n2K performance run parameters for coremark.\nCoreMark Size    : 666\nTotal ticks      : 401215\nTotal time (secs): 12.244000\nIterations/Sec   : 163.345312\nIterations       : 2000\nCompiler version : GCC12.2.0\nCompiler flags   : -O3 + see compiler flags added by Zephyr\nMemory location  : STACK\nseedcrc          : 0xe9f5\n[0]crclist       : 0xe714\n[0]crcmatrix     : 0x1fd7\n[0]crcstate      : 0x8e3a\n[0]crcfinal      : 0x4983\nCorrect operation validated. See README.md for run and reporting rules.\nCoreMark 1.0 : 163.345312 / GCC12.2.0 -O3 + see compiler flags added by Zephyr / STACK\n[00:00:13.597,778] <inf> app: CoreMark finished! Press Push button switch 0 to restart ...\n```\n\n----------------------------------------\n\nTITLE: Partition Manager Generated Definitions for Modem Library\nDESCRIPTION: Definitions generated by the Partition Manager for the addresses and sizes of the Control, TX, RX, and Trace regions in the shared memory area. These are used to properly allocate and initialize the shared memory for the Modem library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_pm_integration.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPM_NRF_MODEM_LIB_CTRL_ADDRESS\nPM_NRF_MODEM_LIB_TX_ADDRESS\nPM_NRF_MODEM_LIB_RX_ADDRESS\nPM_NRF_MODEM_LIB_TRACE_ADDRESS\nPM_NRF_MODEM_LIB_CTRL_SIZE\nPM_NRF_MODEM_LIB_TX_SIZE\nPM_NRF_MODEM_LIB_RX_SIZE\nPM_NRF_MODEM_LIB_TRACE_SIZE\n```\n\n----------------------------------------\n\nTITLE: Testing an Image Upgrade with mcumgr\nDESCRIPTION: This command initiates a test upgrade, indicating that the bootloader will execute the upgrade after the next reboot. If the new image is not validated further, it will revert to the previous image after reset.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ mcumgr -c acm0 image test e8cf0dcef3ec8addee07e8c4d5dc89e64ba3fae46a2c5267fc4efbea4ca0e9f4\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Module Include Directories\nDESCRIPTION: Sets include directories for audio module and audio-related headers using CMake's target_include_directories command\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/audio/audio_module_template/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/include/audio_module\n                     ${ZEPHYR_NRF_MODULE_DIR}/include/audio)\n```\n\n----------------------------------------\n\nTITLE: Configuring AES-GCM Project with CMake\nDESCRIPTION: This CMake script sets up the build configuration for an AES-GCM cryptography project. It requires CMake 3.20.0 or newer, finds the Zephyr package from the environment, and adds src/main.c as the sole source file for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/aes_gcm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(aes_gcm)\n\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Addition for Bridge MSC in CMake\nDESCRIPTION: This snippet conditionally adds source files to the project if CONFIG_BRIDGE_MSC_ENABLE is defined. It includes readme.c, config.c, and the generated Thingy91 CDC ACM files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/connectivity_bridge/src/disk/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(\n\t\t     CONFIG_BRIDGE_MSC_ENABLE\n\t\t     app PRIVATE\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/readme.c\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/config.c\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/thingy91_cdc_acm.cat.c\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/thingy91_cdc_acm.inf.c)\n```\n\n----------------------------------------\n\nTITLE: Opening TCP Socket and Listening for Connections\nDESCRIPTION: This snippet demonstrates how to open a TCP socket, bind it to a specific port, and start listening for incoming connections using AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_17\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XSOCKET=1,1,1\nAT#XBIND=1234\nAT#XLISTEN\n```\n\n----------------------------------------\n\nTITLE: Defining SUIT Memory Pointer Storage Interface Library (CMake)\nDESCRIPTION: This snippet defines a Zephyr interface library named `suit_memptr_storage_interface`. It then sets the include directories and link libraries for this interface, making it available for other modules to use.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/memptr_storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_interface_library_named(suit_memptr_storage_interface)\n target_include_directories(suit_memptr_storage_interface INTERFACE include)\n target_link_libraries(suit_memptr_storage_interface INTERFACE suit_platform_err)\"\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package in CMake\nDESCRIPTION: This snippet demonstrates how to include the Zephyr package within your application's CMakeLists.txt file. It ensures that the proper board is supported and checks the compatibility of any file suffixes or build types specified.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/config_and_build_system.rst#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n   find_package(Zephyr HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions\nDESCRIPTION: Adds compile-time definitions for LTE network interface configuration including memory diagnostics, timeouts, and work queue settings\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/lte_net_if/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_compile_definitions(CONFIG_NRF_MODEM_LIB_MEM_DIAG)\nadd_compile_definitions(CONFIG_NRF_MODEM_LIB_NET_IF_CONNECT_TIMEOUT_SECONDS=30)\nadd_compile_definitions(CONFIG_NRF_MODEM_LIB_NET_IF)\nadd_compile_definitions(CONFIG_NRF_MODEM_LIB_NET_IF_WORKQUEUE_STACK_SIZE=1024)\nadd_compile_definitions(CONFIG_NRF_MODEM_LIB_NET_IF_CONNECTION_PERSISTENCE)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Fatal Error Handling\nDESCRIPTION: This line adds the 'fatal_error' directory as a subdirectory to the project. The CMakeLists.txt file within the 'fatal_error' directory will be processed as part of the build. This likely includes code to handle and report fatal errors during runtime.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(fatal_error)\"\n```\n\n----------------------------------------\n\nTITLE: Building MoSh with LwM2M and P-GPS Support\nDESCRIPTION: Command for building the MoSh sample with LwM2M and P-GPS support by including multiple overlay configuration files and setting a pre-shared key.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nwest build -p -b *board_target* -- -DEXTRA_CONF_FILE=\"overlay-lwm2m.conf;overlay-lwm2m_pgps.conf;overlay-pgps.conf\" -DCONFIG_MOSH_LWM2M_PSK=\\\"000102030405060708090a0b0c0d0e0f\\\"\n```\n\n----------------------------------------\n\nTITLE: Generating TF-M Configuration Header from Template\nDESCRIPTION: Creates a TF-M configuration header file from a template and sets properties for Zephyr integration. This configures the TF-M build process with the correct project configuration header file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/tfm_config.h.in\n               ${CMAKE_CURRENT_BINARY_DIR}/tfm_config.h)\n\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS\n  -DPROJECT_CONFIG_HEADER_FILE=${CMAKE_CURRENT_BINARY_DIR}/tfm_config.h\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Firmware Magic Compatibility Numbers\nDESCRIPTION: Performs bitwise calculations to generate magic numbers for firmware compatibility information using version, hardware ID, crypto ID, and compatibility ID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/fw_info/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmath(EXPR\n  MAGIC_COMPATIBILITY_INFO\n  \"(${CONFIG_FW_INFO_VERSION}) |\n   (${CONFIG_FW_INFO_HARDWARE_ID} << 8) |\n   (${CONFIG_FW_INFO_CRYPTO_ID} << 16) |\n   (${CONFIG_FW_INFO_MAGIC_COMPATIBILITY_ID} << 24)\"\n  )\n\nset(FIRMWARE_INFO_MAGIC   \"${CONFIG_FW_INFO_MAGIC_COMMON},${CONFIG_FW_INFO_MAGIC_FIRMWARE_INFO},${MAGIC_COMPATIBILITY_INFO}\")\nset(EXT_API_MAGIC         \"${CONFIG_FW_INFO_MAGIC_COMMON},${CONFIG_FW_INFO_MAGIC_EXT_API},${MAGIC_COMPATIBILITY_INFO}\")\n```\n\n----------------------------------------\n\nTITLE: Sample Output for No Provisioning Configuration\nDESCRIPTION: Console output showing the sample execution when no provisioning configuration exists on the server. It shows the sequence of establishing an LTE connection, starting provisioning, and stopping when no commands are available.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_provisioning/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n<inf> nrf_provisioning_sample: Establishing LTE link ...\n<inf> nrf_provisioning_sample: Provisioning started\n<inf> nrf_provisioning_http: Requesting commands\n<inf> nrf_provisioning_http: Connected\n<inf> nrf_provisioning_http: No more commands to process on server side\n<inf> nrf_provisioning_sample: Provisioning stopped\n```\n\n----------------------------------------\n\nTITLE: OpenThread Diagnostic Send Command\nDESCRIPTION: This command transmits a specified number of packets with a given length using the diagnostic module. It is used to test radio communication by sending a controlled stream of data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot diag send 20 100\nsending 0x14 packet(s), length 0x64\n```\n\n----------------------------------------\n\nTITLE: Install Test Directory\nDESCRIPTION: This snippet installs the entire directory containing tests for the platform from the specified source location to the designated destination directory.  `${Trusted\\ Firmware\\ M_SOURCE_DIR}` specifies the root path to TF-M source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf54l15_cpuapp/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY   ${Trusted\\ Firmware\\ M_SOURCE_DIR}/platform/ext/target/nordic_nrf/nrf54l15dk_nrf54l15_cpuapp/tests\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Changing Functional Mode\nDESCRIPTION: This snippet shows how to change the functional mode of the modem using the lte_lc_func_mode_set function. It is important for transitioning the modem between different operational states. The output indicates the new functional mode after a successful change.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_callbacks/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid change_functional_mode(int mode) {\n    lte_lc_func_mode_set(mode);\n    printf(\"Changing functional mode\\n\");\n    printf(\"> Functional mode has changed to %d\\n\", mode);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Copying Extra Content in CMake\nDESCRIPTION: Defines a custom target to copy additional content, including an index.html file, versions.json, and custom properties file, to the HTML output directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(\n  copy-extra-content\n  COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_LIST_DIR}/_static/html/index.html ${HTML_DIR}\n  COMMAND ${CMAKE_COMMAND} -E copy ${NRF_BASE}/doc/versions.json ${HTML_DIR}\n  COMMAND ${CMAKE_COMMAND} -E copy ${NRF_BASE}/doc/_zoomin/ncs.custom.properties ${HTML_DIR}/custom.properties\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Semiconductor Project\nDESCRIPTION: This CMake script sets up the build environment for a Nordic Semiconductor project. It specifies the minimum CMake version, finds the Zephyr package, defines the project, and configures the application sources and include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bootloader/b0_lock/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Finding Zephyr Package\nDESCRIPTION: This snippet specifies the minimum CMake version required for the project and locates the Zephyr package that is necessary for building the application. The environment variable ZEPHYR_BASE is used to assist in this process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_exmif/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Matter Diagnostic Logging Configuration\nDESCRIPTION: Kconfig options for configuring Matter's diagnostic logging capabilities including crash logs and log redirection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_27\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_DIAGNOSTIC_LOGS_REMOVE_CRASH_AFTER_READ=n\nCONFIG_NCS_SAMPLE_MATTER_DIAGNOSTIC_LOGS_REDIRECT=y\n```\n\n----------------------------------------\n\nTITLE: Setting Config Value for Both Variants\nDESCRIPTION: Command line parameter to set configuration values for both variants (slots A and B) of an image\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n-Dab_CONFIG_N_BLINKS=2\n```\n\n----------------------------------------\n\nTITLE: Reporting Device Shadow Protocol in C\nDESCRIPTION: This process reports the communication protocol (MQTT, REST, or CoAP) along with the method of connection (LTE or Wi-Fi) to the device shadow, thus ensuring that the right methods are being applied.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nReporting of protocol (MQTT, REST, or CoAP) as well as method (LTE or Wi-Fi) to the device shadow.\n```\n\n----------------------------------------\n\nTITLE: Kernel API Restrictions in Zero Latency Interrupts - MPSL - Documentation Format\nDESCRIPTION: The documentation states that utilizing kernel APIs from zero latency interrupts is prohibited, a significant caveat for developers working with real-time applications and time-sensitive tasks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_44\n\nLANGUAGE: plaintext\nCODE:\n```\nNCSIDB-731: :ref:`timeslot_sample` crashes when calling kernel APIs from zero latency interrupts Calling kernel APIs is not allowed from zero latency interrupts.\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Partitions for Recovery\nDESCRIPTION: This snippet specifies the required memory partitions necessary for the networking core recovery process. These partitions facilitate proper image slotting for both application and networking cores.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/serial_recovery.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n* ``mcuboot_primary`` and ``mcuboot_secondary`` - Partitions for the application core image slots.\n* ``mcuboot_primary_1`` - Partition for the network core image slot.\n* ``pcd_sram`` - Partition used for command exchange between the application core and the network core (see :kconfig:option:`CONFIG_PCD_APP`).\n```\n\n----------------------------------------\n\nTITLE: Inside Property Configuration in NRF Connect SDK - YAML\nDESCRIPTION: The inside property in the NRF Connect SDK is used to add a partition to another partition's span list. This snippet demonstrates configuring an inside property, where mcuboot is to be considered inside the b0 partition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmcuboot:\n   inside: [b0]\n\nb0:\n   span: [] # During processing, this span will contain mcuboot.\n```\n\n----------------------------------------\n\nTITLE: Setting OnOff State of Light Control Server Unacknowledged - C\nDESCRIPTION: Sets the OnOff state for the Light Lightness Control Server without requiring an acknowledgment, including optional transition and delay parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl light-onoff-set-unack <OnOff> [TransTime(ms) [Delay(ms)]]\n\tTell the Light Lightness Control Server to turn the light on or off without requesting a response.\n\n\t* ``OnOff`` - OnOff state value to set. Use *on*, *enable*, or any non-zero value to enable the state.\n\t* ``TransTime`` - If present, defines the transition time in the message in milliseconds.\n\t* ``Delay`` - If present, defines the delay in the message in milliseconds.\n```\n\n----------------------------------------\n\nTITLE: Provisioning SDFW and SCFW using nRF Util\nDESCRIPTION: This command uses nRF Util to provision the Secure Domain Firmware (SDFW) and System Controller Firmware (SCFW) from a bundle ZIP file onto the nRF54H20 device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-provision-nrf54h --firmware <path-to_bundle_zip_file> --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Adding nRF Cloud Source to Target\nDESCRIPTION: This snippet adds the `nrf_cloud_client_id.c` source file, located within the Zephyr nRF module, to the `app` target. This file likely contains the core logic for handling the nRF Cloud Client ID functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/client_id/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_sources(app\n\tPRIVATE\n\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud_client_id.c\n)\"\n```\n\n----------------------------------------\n\nTITLE: Key IDs for nRF54H20 SoC Components\nDESCRIPTION: List of the required key IDs for different components and generations of keys used on the nRF54H20 SoC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_keys.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nMANIFEST_PUBKEY_APPLICATION_GEN1 = 0x40022100\nMANIFEST_PUBKEY_APPLICATION_GEN2 = 0x40022101\nMANIFEST_PUBKEY_APPLICATION_GEN3 = 0x40022102\nMANIFEST_PUBKEY_OEM_ROOT_GEN1 = 0x4000AA00\nMANIFEST_PUBKEY_OEM_ROOT_GEN2 = 0x4000AA01\nMANIFEST_PUBKEY_OEM_ROOT_GEN3 = 0x4000AA02\nMANIFEST_PUBKEY_RADIOCORE_GEN1 = 0x40032100\nMANIFEST_PUBKEY_RADIOCORE_GEN2 = 0x40032101\nMANIFEST_PUBKEY_RADIOCORE_GEN3 = 0x40032102\n```\n\n----------------------------------------\n\nTITLE: Reading Manifest Sequence Numbers\nDESCRIPTION: Command for reading the sequence numbers of the uploaded root and local application manifests to verify successful installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit manifests --serial-port COM7\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents\nDESCRIPTION: RST directive that sets up the table of contents for Edge Impulse sample documentation. It configures a single-level depth toctree with captions and uses globbing to include all README files from Edge Impulse sample directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/edge.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/edge_impulse/*/README\n```\n\n----------------------------------------\n\nTITLE: Function Additions in nRF Cloud Library\nDESCRIPTION: New functions added to the nRF Cloud library for device ID handling, security tag management, and shadow data transformation. Includes functions for setting client ID at runtime and managing security credentials.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nnrf_cloud_client_id_runtime_set()\nnrf_cloud_sec_tag_set()\nnrf_cloud_sec_tag_get()\nnrf_cloud_print_details()\nnrf_cloud_print_cloud_details()\nnrf_cloud_shadow_transform_request()\n```\n\n----------------------------------------\n\nTITLE: Amending Library for Entropy Source - C\nDESCRIPTION: This snippet amends the Zephyr library to conditionally include the CC3XX entropy source based on the presence of the CONFIG_ENTROPY_CC3XX configuration macro. It ensures that the source file 'entropy_cc3xx.c' is included only when this configuration is set, facilitating proper configuration management in the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/entropy/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_amend()\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_ENTROPY_CC3XX entropy_cc3xx.c)\n```\n\n----------------------------------------\n\nTITLE: Generating Manifest Class ID from Vendor ID in Python\nDESCRIPTION: This Python code example shows how to create a manifest class ID by using UUID5 with the vendor ID as the namespace and class-specific information as the name parameter. This generates a unique identifier for a specific application type.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_device_config.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuuid5(nordic_vid, 'nRF54H20_sample_app')\n```\n\n----------------------------------------\n\nTITLE: Get Location Data Details from Location Event Data - C\nDESCRIPTION: This snippet shows how to use the convenience function to obtain location data details from the location event data. The function simplifies the process of extracting specific location information from the event structure, making it easier to access and use the data within applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Kconfig Options for nRF70 Firmware Patch DFU in nRF Connect for VS Code\nDESCRIPTION: Extra CMake arguments needed when configuring a build in nRF Connect for VS Code. These options enable nRF70 firmware patch DFU and configure external flash storage for WiFi patches.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf70_fw_patch_update.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n-- -Dshell_SNIPPET=nrf70-fw-patch-ext-flash -DSB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE=y -DCONFIG_NRF_WIFI_FW_PATCH_DFU=y\n```\n\n----------------------------------------\n\nTITLE: Configuring PDN Project Build with CMake\nDESCRIPTION: Sets up the CMake project for PDN, including version requirements, Zephyr package dependency, and source file specification. It uses the Nordic Semiconductor SDK and targets the Zephyr RTOS environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/pdn/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(pdn)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: RSRP/RSRQ Value Conversion Macros\nDESCRIPTION: Macros for converting RSRP (Reference Signal Received Power) and RSRQ (Reference Signal Received Quality) index values to dBm and dB respectively. These formulas were updated to align with actual modem implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nRSRP_IDX_TO_DBM\nRSRQ_IDX_TO_DB\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet configures the CMake project. It sets the minimum required CMake version to 3.20.0, finds the Zephyr package using the environment variable ZEPHYR_BASE as a hint, and defines the project name as beacon_vs_vddh.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/beacon_vs_vddh/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(beacon_vs_vddh)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for GCF SMS Project Build\nDESCRIPTION: This CMake snippet sets up the build configuration for the GCF SMS project. It specifies the minimum CMake version, finds the Zephyr package, sets the project name, and includes all source files from the src directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/gcf_sms/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(gcf_sms)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Adding UI Input Source Files in CMake\nDESCRIPTION: Conditionally adds UI input source file based on CONFIG_UI_INPUT configuration option\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/ui/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_UI_INPUT\n\tapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ui_input.c)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for NCS Toolchain - Shell\nDESCRIPTION: This snippet demonstrates how to build the Docker image for the NCS toolchain by using the output from the `print_toolchain_checksum.sh` script as the `VERSION` build argument.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/docker/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTOOLCHAIN_ID=$(../print_toolchain_checksum.sh)\ndocker build --build-arg VERSION=$TOOLCHAIN_ID\n```\n\n----------------------------------------\n\nTITLE: Kconfig SED Configuration Options\nDESCRIPTION: Configuration option for setting the polling period of Sleepy End Devices. Controls how frequently the device polls its parent Router for pending data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/sed_ssed.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_OPENTHREAD_POLL_PERIOD\n```\n\n----------------------------------------\n\nTITLE: Defining LED Characteristic UUID in C\nDESCRIPTION: The 128-bit UUID for the LED Characteristic, which allows writing to change the LED state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/lbs.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n\"00001525-1212-EFDE-1523-785FEABCD123\"\n```\n\n----------------------------------------\n\nTITLE: Setting Startup Command for Periodic Location Acquisition in MoSh\nDESCRIPTION: Shows how to set a startup command for periodic location acquisition using cellular and GNSS methods, including sending to nRF Cloud.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nstartup_cmd --mem1 \"location get --mode all --method cellular --method gnss --gnss_cloud_pvt --interval 15\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AT Command Parser Project with CMake and Zephyr\nDESCRIPTION: This CMake script sets up the build environment for an AT command parser project using the Zephyr RTOS. It specifies the minimum CMake version, locates the Zephyr package, defines the project name, and includes all source files from the src directory into the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/at_cmd_parser/at_params/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(at_cmd_parser)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Displaying FICR Values using wifi_radio_ficr_prog\nDESCRIPTION: This snippet demonstrates how to display all the current FICR values using the `wifi_radio_ficr_prog` command with the `otp_read_params` subcommand. The output shows the OTP region status and the values of various FICR parameters, including region protection settings and MAC addresses.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_23\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_ficr_prog otp_read_params\n```\n\n----------------------------------------\n\nTITLE: Console Output for Bluetooth Connection and Pairing\nDESCRIPTION: Console output showing successful Bluetooth connection and pairing with the configurator device (smartphone with nRF Wi-Fi Provisioner app).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/provisioning/ble/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwifi_prov: BT Connected: <configurator BT address>\nwifi_prov: BT pairing completed: <configurator BT address>, bonded: 0\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion for nRF Flash Partition Coredump Backend in Zephyr\nDESCRIPTION: This CMake directive conditionally includes the 'coredump_backend_nrf_flash_partition.c' source file if the CONFIG_DEBUG_COREDUMP_BACKEND_NRF_FLASH_PARTITION configuration option is enabled. It's used to incorporate the nRF flash partition-based coredump backend into the Zephyr build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/debug/coredump/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_DEBUG_COREDUMP_BACKEND_NRF_FLASH_PARTITION coredump_backend_nrf_flash_partition.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target\nDESCRIPTION: This snippet adds the gathered source files to the 'app' target of the project. It encapsulates the source file inclusion within comments for clarity regarding where the Nordic SDK application section starts and ends.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/sensor/bh1749/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE ${app_sources})\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for NCS Specific Commits\nDESCRIPTION: Command to display all NCS specific commits in the Zephyr repository.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.6.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline manifest-rev ^v2.6.0-rc1\n```\n\n----------------------------------------\n\nTITLE: Identity Key Library Header Location\nDESCRIPTION: Specifies the primary header file for the identity key library, used for API declarations and include statements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/identity_key.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <identity_key.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring Modem Library Shared Memory Sizes in Kconfig\nDESCRIPTION: Kconfig options for setting the size of RX, TX, and Trace regions in the shared memory area used by the Modem library. These options are used by the Partition Manager to reserve the appropriate amount of memory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_pm_integration.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NRF_MODEM_LIB_SHMEM_RX_SIZE\nCONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE\nCONFIG_NRF_MODEM_LIB_SHMEM_TRACE_SIZE\nCONFIG_NRF_MODEM_LIB_SHMEM_CTRL_SIZE\n```\n\n----------------------------------------\n\nTITLE: Find Zephyr Package\nDESCRIPTION: This snippet uses the find_package command to locate the Zephyr RTOS package. It requires the Zephyr package and uses the ZEPHYR_BASE environment variable as a hint for the package location.  This ensures that Zephyr RTOS is available for the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_uarte/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: RF Tool TX Mode (Client)\nDESCRIPTION: This command configures the DECT RF tool for transmit (TX) operation on the client side. It sets TX subslot and idle subslot counts, specifies channel 1677, and targets frequency 39.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_17\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool -m tx --tx_subslot_count 16 --tx_idle_subslot_count 3 -c 1677 -t 39\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents for Bluetooth Mesh Samples in reStructuredText\nDESCRIPTION: This snippet creates a table of contents (toctree) for Bluetooth Mesh sample README files. It includes all README files in the bluetooth/mesh directory and specific README files for DFU distributor and target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/mesh.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/bluetooth/mesh/*/README\n   ../../../samples/bluetooth/mesh/dfu/distributor/README\n   ../../../samples/bluetooth/mesh/dfu/target/README\n```\n\n----------------------------------------\n\nTITLE: Running Commands in Different Threads in MoSh\nDESCRIPTION: Demonstrates how to run iperf3 in the background and ping in the foreground using separate threads, and how to retrieve results.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nth startbg iperf3 --client 111.222.111.222 --port 10000 -l 3540 --time 30 -V -R\nth startfg ping -d 8.8.8.8\nth results 1\n```\n\n----------------------------------------\n\nTITLE: Configuring NFC RPC Server Library Build\nDESCRIPTION: Configures CMake build settings for the NFC RPC server library. Sets up conditional source file inclusion based on NFC protocol configurations and specifies include directories for common headers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nfc/rpc/server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources_ifdef(CONFIG_NFC_RPC_T2T nfc_rpc_t2t_server.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_RPC_T4T nfc_rpc_t4t_server.c)\n\nzephyr_library_include_directories(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../common\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Source Files for NRF Connect SDK Application\nDESCRIPTION: This CMake snippet sets up the build configuration for an nRF Connect SDK application. It adds the current directory to the include path and specifies two source files (th_ctrl.c and th_shell.c) to be compiled into the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/th/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/th_ctrl.c)\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/th_shell.c)\n```\n\n----------------------------------------\n\nTITLE: Building nRF54H20 DK with USB High-Speed Support\nDESCRIPTION: Build command for nRF54H20 DK with release configuration and modified simulated motion settings to enable continuous HID reports for USB High-Speed testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/description.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -- \\\n-DFILE_SUFFIX=release \\\n-DCONFIG_DESKTOP_MOTION_SIMULATED_ENABLE=y \\\n-DCONFIG_DESKTOP_MOTION_SIMULATED_EDGE_TIME=8192 \\\n-DCONFIG_DESKTOP_MOTION_SIMULATED_SCALE_FACTOR=5\n```\n\n----------------------------------------\n\nTITLE: Configuring Partition Manager Static Layout for QSPI XIP with Swap Using Move\nDESCRIPTION: Static Partition Manager configuration file for nRF5340 with swap-using-move mode and network core support. Defines memory partitions for both internal and external flash to support QSPI XIP split image functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n../../../../samples/nrf5340/extxip_smp_svr/pm_static.yml\n```\n\n----------------------------------------\n\nTITLE: Defining High-Performance Framework Section in reStructuredText\nDESCRIPTION: This snippet defines the High-Performance Framework section in reStructuredText format. It includes a caution about the experimental nature of HPF support and describes the framework's purpose.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/hpf/hpf.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _hpf_applications_readme:\n\nHigh-Performance Framework\n##########################\n\n.. caution::\n\n   The High-Performance Framework (HPF) support in the |NCS| is :ref:`experimental <software_maturity>` and is limited to the nRF54L15 device.\n\nHigh-Performance Framework, is a framework designed to facilitate the creation and integration of :ref:`peripheral emulations using coprocessors <coprocessors_index>`.\nThe following applications are created using HPF:\n```\n\n----------------------------------------\n\nTITLE: Git Command for Viewing NCS-specific Commits Since v1.7.0\nDESCRIPTION: Command to list all the nRF Connect SDK specific commits added to the Zephyr fork since v1.7.0, showing commits between the manifest revision and v2.6.0-rc1-ncs1 tag.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.7.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline manifest-rev ^v2.6.0-rc1-ncs1\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Merging Search Indexes in CMake\nDESCRIPTION: Defines a custom target to merge search indexes using a Python script, with dependencies on various documentation sets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(\n  merge-search-indexes\n  COMMAND\n    ${PYTHON_EXECUTABLE}\n    ${NRF_BASE}/doc/_scripts/merge_search_indexes.py\n    -b ${CMAKE_BINARY_DIR}\n  COMMENT \"Merging search indexes...\"\n)\n\nadd_dependencies(merge-search-indexes\n    nrf-all\n    nrfxlib-all\n    zephyr-all\n    mcuboot-all\n    tfm-all\n    kconfig-all\n)\nif (EXISTS \"${ZEPHYR_DOC_INTERNAL_MODULE_DIR}\" )\n  add_dependencies(merge-search-indexes internal-all)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OFDM TX Traffic with Edge Backoff and Antenna Gain\nDESCRIPTION: Sequence of commands to configure and run an OFDM TX traffic on channel 1 with specific edge backoff and antenna gain settings, useful for regulatory compliance testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test init 1\nwifi_radio_test tx_pkt_rate 12\nwifi_radio_test tx_pkt_len 4000\nwifi_radio_test tx_power 10\nwifi_radio_test tx_pkt_gap 4200\nwifi_radio_test set_edge_bo 3\nwifi_radio_test set_ant_gain 2\nwifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Enabling MCUboot and Firmware Updater Mode in Kconfig\nDESCRIPTION: This Kconfig snippet enables MCUboot and selects the firmware loader mode using the SB_CONFIG_BOOTLOADER_MCUBOOT and SB_CONFIG_MCUBOOT_MODE_FIRMWARE_UPDATER options. This configuration is required to use MCUboot in firmware loader mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_13\n\nLANGUAGE: cfg\nCODE:\n```\n\"SB_CONFIG_BOOTLOADER_MCUBOOT=y\\nSB_CONFIG_MCUBOOT_MODE_FIRMWARE_UPDATER=y\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project.  This ensures that the CMake version used to build the project is compatible with the features and commands used in the CMakeLists.txt file. The minimum required version is set to 3.20.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_gpio/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Sysbuild Check\nDESCRIPTION: Checks if the `SYSBUILD` variable is defined. If not, it issues a fatal error message, enforcing the use of sysbuild for building the application. This prevents incorrect builds of multi-image applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_ppr/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TWT Session Setup in Wi-Fi Shell\nDESCRIPTION: Command for setting up a Target Wake Time (TWT) session using the Wi-Fi shell. This allows a Wi-Fi 6 device to negotiate wake periods with the AP to save power by sleeping for extended periods.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/station_mode/powersave.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwifi twt setup\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Semiconductor Project\nDESCRIPTION: This CMake script sets up the project configuration for a Nordic Semiconductor application. It specifies the minimum CMake version, finds the Zephyr package, and adds source files to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/light_ctrl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/model_handler.c\n\tsrc/lc_pwm_led.c)\ntarget_include_directories(app PRIVATE include)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Locates the Zephyr package required for the project, using an environment variable to specify the base path. This ensures that the project's build process can link against the appropriate Zephyr libraries and headers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/common/remote_sleep_forever/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic SDK Application\nDESCRIPTION: This CMake snippet sets up a basic Nordic SDK application. It defines the minimum CMake version requirement, locates the Zephyr package, and specifies main.c as the source file for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_bms/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Multi-Image Custom Applications\nDESCRIPTION: Command to build and flash custom images for both application and FLPR cores with VPR bootstrapping disabled, which is necessary when creating custom images for both cores.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/building_nrf54l.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54l15dk/nrf54l15/cpuflpr -- -DSB_CONFIG_VPR_LAUNCHER=n\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion for CS47L63 Driver in CMake\nDESCRIPTION: This CMake snippet conditionally adds the cs47l63_comm.c source file to the application target when the CONFIG_NRF5340_AUDIO_CS47L63_DRIVER configuration is enabled. It uses the target_sources_ifdef command to achieve this conditional inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/drivers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_NRF5340_AUDIO_CS47L63_DRIVER\n\t\t     app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/cs47l63_comm.c\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files\nDESCRIPTION: This snippet specifies the source files that should be compiled and linked into the testbinary executable. It includes a main.c file and other C files related to device configuration and error conversion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/plat_devconfig/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(testbinary PRIVATE\n  src/main.c\n  ${SUIT_SUBSYS_DIR}/platform/sdfw/src/suit_plat_devconfig.c\n  ${SUIT_SUBSYS_DIR}/platform/src/suit_plat_error_convert.c\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents in reStructuredText\nDESCRIPTION: This snippet creates a table of contents (toctree) for subpages. It's set to display one level deep, with a caption of 'Subpages', and includes all README files from networking sample directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/net.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n    ../../../samples/net/*/README\n```\n\n----------------------------------------\n\nTITLE: Running Sphinx-build Command\nDESCRIPTION: The basic command to build documentation using Sphinx framework. This is typically handled by CMake in the nRF Connect SDK build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/doc_build_process.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsphinx-build\n```\n\n----------------------------------------\n\nTITLE: Sending Data and Disconnecting TLS Client\nDESCRIPTION: This snippet demonstrates how to send data using a TLS client and disconnect from the server using AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_10\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XTCPSEND=\"Test TLS client\"\n\nAT#XTCPCLI=0\n```\n\n----------------------------------------\n\nTITLE: Gazell Link Layer API Functions\nDESCRIPTION: API functions that should not be directly accessed when using Gazell Pairing, as they are managed by the library internally.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/gazell/gzp.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nnrf_gzll_set_base_address_0()\nnrf_gzll_set_base_address_1()\nnrf_gzll_set_address_prefix_byte()\nnrf_gzll_set_rx_pipes_enabled()\nnrf_gzll_set_channel_table()\n```\n\n----------------------------------------\n\nTITLE: Button Event Flow Table in RST\nDESCRIPTION: Table documenting the flow of button events and module states between various nRF Desktop components, showing source modules, input events, processing modules, output events and sink modules.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/event_propagation.rst#2025-04-21_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n+-----------------------------------------------+------------------------+-------------+------------------------+---------------------------------------------+\n| Source Module                                 | Input Event            | This Module     | Output Event           | Sink Module                                 |\n+===============================================+========================+=============+========================+=============================================+\n| :ref:`nrf_desktop_buttons`                    | ``button_event``       |             |                        |                                             |\n+-----------------------------------------------+                        |             |                        |                                             |\n| :ref:`nrf_desktop_fn_keys`                    |                        |             |                        |                                             |\n+-----------------------------------------------+                        |             |                        |                                             |\n| :ref:`nrf_desktop_motion`                     |                        |             |                        |                                             |\n+-----------------------------------------------+                        |             |                        |                                             |\n| :ref:`nrf_desktop_power_manager`              |                        |             |                        |                                             |\n+-----------------------------------------------+                        |             |                        |                                             |\n| :ref:`nrf_desktop_wheel`                      |                        |             |                        |                                             |\n+-----------------------------------------------+------------------------+             +------------------------+---------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Setting Boot Signature Key File via Command Line\nDESCRIPTION: This snippet shows how to set the boot signature key file using the command line when building the project. The -DSB_CONFIG_BOOT_SIGNATURE_KEY_FILE option is used to specify the path to the private key file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n\"-DSB_CONFIG_BOOT_SIGNATURE_KEY_FILE=\\\"priv.pem\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot Multi-Image Update for nRF53 in CMake\nDESCRIPTION: Enables and configures MCUboot multi-image update support for nRF53 devices, including flash simulation and image access hooks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(SB_CONFIG_MCUBOOT_NRF53_MULTI_IMAGE_UPDATE)\n  set_config_bool(mcuboot CONFIG_NRF53_MULTI_IMAGE_UPDATE y)\n  set_config_bool(mcuboot CONFIG_BOOT_IMAGE_ACCESS_HOOKS y)\n  set_config_bool(mcuboot CONFIG_FLASH_SIMULATOR y)\n  set_config_bool(mcuboot CONFIG_FLASH_SIMULATOR_DOUBLE_WRITES y)\n  set_config_bool(mcuboot CONFIG_FLASH_SIMULATOR_STATS n)\n\n  if(NOT SB_CONFIG_MCUBOOT_MODE_OVERWRITE_ONLY)\n    set_config_bool(mcuboot CONFIG_USE_NRF53_MULTI_IMAGE_WITHOUT_UPGRADE_ONLY y)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Fetch Source Streamer Headers - CMake\nDESCRIPTION: This snippet includes the headers required for the fetch source streamer when CONFIG_MOCK_FETCH_SOURCE_STREAMER is defined, facilitating streaming functionalities during tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_FETCH_SOURCE_STREAMER)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_STREAM -DCONFIG_SUIT_STREAM_FETCH_SOURCE_MGR)\n  target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/stream/stream_sources/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Targeting Source Files in CMake\nDESCRIPTION: This CMake snippet uses the target_sources function to include source files into the app target. The \"PRIVATE\" keyword specifies that these source files are private to the target, meaning they won't propagate usage requirements to dependents. No additional dependencies are mentioned, but the source files listed are main.c and fuel_gauge.c.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm2100_fuel_gauge/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE main.c)\ntarget_sources(app PRIVATE fuel_gauge.c)\n```\n\n----------------------------------------\n\nTITLE: Getting Modem Info Data Type in C\nDESCRIPTION: New function added to the modem info library to request the data type of the current modem information type.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-3.0.0-preview2.rst#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nmodem_info_data_type_get()\n```\n\n----------------------------------------\n\nTITLE: SDFW Version Check Command\nDESCRIPTION: Command to verify the current version of nRF54H20 SoC binaries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_custom_pcb.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device x-sdfw-version-get --firmware-slot uslot --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Linking NRF 802154 Interfaces\nDESCRIPTION: This snippet conditionally includes additional subdirectories and links libraries necessary for the nrf-802154 platform based on configurations, specifically when the NRFXLIB source is chosen. It ensures the interfaces are correctly set up for the 802154 communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/nrfxlib/nrf_802154/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_NRF_802154_SOURCE_NRFXLIB)\n    add_subdirectory(${ZEPHYR_CURRENT_MODULE_DIR}/nrf_802154 nrf_802154)\n\n    target_link_libraries(nrf-802154-driver-interface INTERFACE zephyr-802154-interface)\n    target_link_libraries(nrf-802154-serialization-interface INTERFACE zephyr-802154-interface)\n  endif (CONFIG_NRF_802154_SOURCE_NRFXLIB)\n```\n\n----------------------------------------\n\nTITLE: Data Mode Example Usage\nDESCRIPTION: Example showing how to enter data mode, send test data, and exit using the termination command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_data_mode.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XSEND\nOK\nTest TCP datamode\n+++\n#XDATAMODE: 0\n```\n\n----------------------------------------\n\nTITLE: Flashing Bluetooth Throughput Sample to nRF5340 DK\nDESCRIPTION: Command for flashing the built Bluetooth throughput sample hex file to the nRF5340 DK using West Flash.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nwest flash --dev-id <device-id> --hex-file build/merged.hex\n```\n\n----------------------------------------\n\nTITLE: Minimum CMake Version and Zephyr Package Configuration\nDESCRIPTION: This snippet sets the minimum required CMake version and searches for the Zephyr package necessary for the project. It establishes the base environment for utilizing Zephyr components in the NRF Wi-Fi throughput application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_wifi_throughput)\n```\n\n----------------------------------------\n\nTITLE: Script for Creating a Self-Signed CA Certificate\nDESCRIPTION: This is a command to generate a self-signed CA certificate using the 'create_ca_cert.py' Python script. The script outputs PEM files for use in signing device credentials. The certificate generation requires the 'nRF Cloud Utilities' package.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_45\n\nLANGUAGE: console\nCODE:\n```\npython3 create_ca_cert.py -c US -f self_\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target\nDESCRIPTION: This snippet adds the discovered source files to the application target. The target_sources command links the source files defined in the `app_sources` variable to the application, making them part of the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/lpuart/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\t${app_sources}\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: ARM Thumb Compression Configuration\nDESCRIPTION: Conditional inclusion of ARM Thumb compression module source files when the feature is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_compress/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_NRF_COMPRESS_ARM_THUMB)\n  zephyr_library_sources(lzma/armthumb.c src/arm_thumb.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Executing plot from files script\nDESCRIPTION: Executes the `plot_from_files.py` script. This script plots events from data files and saves calculated statistics to a `log.csv` file after the plot is closed. Requires Python 3 and libraries for plotting and CSV writing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/nrf_profiler/readme.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"python3 plot_from_files.py\"\n\n```\n\n----------------------------------------\n\nTITLE: Start RX Test - Custom Command Usage\nDESCRIPTION: This command initiates the RX test routine on the DUT device, clearing any previous statistics.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\ncustom rstart\n```\n\n----------------------------------------\n\nTITLE: Defining SUIT Metadata Library\nDESCRIPTION: This code snippet defines a Zephyr library called 'suit_metadata' that includes specific sources and dependencies. It sets the library interface and specifies the required directories and linked libraries for proper integration within the Zephyr environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/metadata/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(suit_metadata)\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(suit_metadata INTERFACE include)\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(suit_metadata INTERFACE suit_platform_err)\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(src/suit_metadata.c)\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(suit_metadata)\n\n```\n\n----------------------------------------\n\nTITLE: Modifying DFU Partition in Device Tree Overlay\nDESCRIPTION: This snippet shows how to modify the DFU partition size and location in the device tree overlay file. It defines a partition for storing SUIT manifests and Nordic Firmware updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/smp_transfer/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n&mram1x {\n  cpuapp_rw_partitions: cpuapp-rw-partitions {\n    /* DFU partition to store SUIT manifests and Nordic Firmware update */\n    dfu_partition: partition@100000 {\n      reg = < 0x100000 DT_SIZE_K(300) >;\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: LwM2M FOTA Start Event Macro\nDESCRIPTION: This C macro defines the event that signals the start of a FOTA update. When this event is received, the application must immediately close any TLS socket it is using to allow the LwM2M carrier library to use the TLS socket for FOTA.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/requirements.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\"LWM2M_CARRIER_EVENT_FOTA_START\"\n```\n\n----------------------------------------\n\nTITLE: Setting CRACEN Driver Compiler Options in CMake\nDESCRIPTION: Configures specific compiler flags to suppress warnings that occur with CRACEN source code, such as pointer sign issues and unused functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/cracen/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# The CRACEN sources have not been written to comply with this gcc\n# warning\ntarget_compile_options(cracen_psa_driver\n  PRIVATE\n    -Wno-pointer-sign\n    -Wno-unused-function\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying ncs-sbom Help\nDESCRIPTION: This command uses the 'west' tool to invoke the 'ncs-sbom' extension command with the '-h' flag.  The '-h' flag instructs the command to display help information, including available options and usage instructions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"west ncs-sbom -h\"\n```\n\n----------------------------------------\n\nTITLE: Adding main.c Source to Application in nRF Connect SDK CMake Configuration\nDESCRIPTION: This CMake snippet adds the main.c file from the current source directory to the application build. It uses target_sources to specify that main.c should be compiled and linked as part of the 'app' target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/unicast_server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/main.c)\n```\n\n----------------------------------------\n\nTITLE: SPI1 Interrupt Configuration in nRF52840 DTSI\nDESCRIPTION: Default SPI1 peripheral configuration in the nRF52840 device tree source file, defining the base interrupt configuration with interrupt number 4 and priority 1.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/integration.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\nspi1: spi@40004000 {\n           /*\n            * This spi node can be SPI, SPIM, or SPIS,\n            * for the user to pick:\n            * compatible = \"nordic,nrf-spi\" or\n            *              \"nordic,nrf-spim\" or\n            *              \"nordic,nrf-spis\".\n            */\n           #address-cells = <1>;\n           #size-cells = <0>;\n           reg = <0x40004000 0x1000>;\n           interrupts = <4 1>;\n           status = \"disabled\";\n   };\n```\n\n----------------------------------------\n\nTITLE: Status Information Table Structure - Markdown\nDESCRIPTION: This table outlines the batteries' status metrics such as voltage, current, temperature, state of charge, time to empty, and time to full. It provides a structure for displaying the measurement units clearly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_fuel_gauge/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n======  ===============  ==================================================\\n   Symbol  Description      Units\\n   ======  ===============  ==================================================\\n   V       Battery voltage  Volts\\n   I       Current          Amps (negative for charge, positive for discharge)\\n   T       Temperature      Degrees C\\n   SoC     State of Charge  Percent\\n   TTE     Time to Empty    Seconds (may be NaN)\\n   TTF     Time to Full     Seconds (may be NaN)\\n   ======  ===============  ==================================================\n```\n\n----------------------------------------\n\nTITLE: Defining Document Structure in reStructuredText\nDESCRIPTION: This snippet defines the document structure using reStructuredText syntax. It sets up the title, table of contents, and provides placeholders for model descriptions and subpages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/mesh_model_main_README.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _bt_mesh_model_main_template:\n\nMesh model template\n###################\n\n.. contents::\n   :local:\n   :depth: 2\n\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   XYZ Server model<mesh_model_server_client_template>\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This command uses CMake's `find_package` function to locate the Zephyr RTOS SDK. It requires the Zephyr package and uses the environment variable `ZEPHYR_BASE` as a hint to find the Zephyr installation directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/twim_suspend/remote/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Opcode List for Chat Client Model (C)\nDESCRIPTION: This snippet declares an opcode list used by the Chat Client model to define of message types it can process. It is essential for recognizing incoming messages. No additional dependencies are required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/chat_sample_walk_through.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstatic const uint8_t opcodes[] = {MSG_OP_1, MSG_OP_2};\n\n```\n\n----------------------------------------\n\nTITLE: MCUboot Documentation Structure in reStructuredText\nDESCRIPTION: This code snippet defines the structure of the MCUboot documentation using reStructuredText. It sets up a table of contents with maxdepth of 1 and includes various documentation files related to MCUboot implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/mcuboot/wrapper.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Contents\n\n   index-ncs.rst\n   release-notes.md\n   compression_format.md\n   design.md\n   encrypted_images.md\n   imgtool.md\n   ecdsa.md\n   readme-ncs.rst\n   release.md\n   SECURITY.md\n   SubmittingPatches.md\n```\n\n----------------------------------------\n\nTITLE: Setting Bluetooth Mesh Compilation Options\nDESCRIPTION: Defines various compilation options for Bluetooth Mesh functionality including model counts, sensor configurations, and logging levels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/sensor_subsys/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_BT_MESH_MODEL_KEY_COUNT=5\n  -DCONFIG_BT_MESH_MODEL_GROUP_COUNT=5\n  -DCONFIG_BT_MESH_SENSOR_ALL_TYPES=1\n  -DCONFIG_BT_MESH_SENSOR_LABELS=1\n  -DCONFIG_BT_MESH_SENSOR_CHANNELS_MAX=5\n  -DCONFIG_BT_MESH_SENSOR_CHANNEL_ENCODED_SIZE_MAX=4\n  -DCONFIG_BT_LOG_LEVEL=0\n  -DCONFIG_BT_MESH_USES_MBEDTLS_PSA=1\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding sources based on CONFIG_BT_FAST_PAIR_FMDN_DULT_INTEGRATION\nDESCRIPTION: This conditional block adds the 'dult_integration.c' source file to the 'fmdn' library if the Kconfig option 'CONFIG_BT_FAST_PAIR_FMDN_DULT_INTEGRATION' is enabled. The source is added as a PRIVATE source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(CONFIG_BT_FAST_PAIR_FMDN_DULT_INTEGRATION)\n  target_sources(fmdn PRIVATE dult_integration.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Inclusion\nDESCRIPTION: This snippet conditionally adds a source file for a GPIO emulator callback if the CONFIG_GPIO_EMUL option is enabled. This allows for flexible project configuration based on the available GPIO emulation capabilities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/gpio/gpio_basic_api/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_GPIO_EMUL app PRIVATE ${ZEPHYR_BASE}/tests/drivers/gpio/gpio_basic_api/src/gpio_emul_callback.c)\n```\n\n----------------------------------------\n\nTITLE: Setting include directories in Zephyr\nDESCRIPTION: This snippet uses the `zephyr_include_directories` function to add the `include` directory to the list of include paths for the Zephyr project. This ensures that header files within this directory can be found during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_include_directories(include)\"\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Twister on Linux\nDESCRIPTION: Command for running unit tests using Twister tool on Linux. By default, tests run on native_sim and qemu_cortex_m3 boards. Test execution requires navigating to the directory containing the testcase.yaml file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/test_framework/running_unit_tests.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n<Zephyr_path>/scripts/twister -T .\n```\n\n----------------------------------------\n\nTITLE: Configure CC3XX Include Paths for PSA Crypto\nDESCRIPTION: Retrieves include directories from the CC3XX library and adds them to the PSA crypto library configuration target. This enables the PSA Crypto Driver to access necessary CC3XX headers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/nrf_cc3xx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nget_target_property(NRF_CC3XX_MBEDCRYPTO_INCLUDE_PATH \n  nrf_cc3xx_core_imported INTERFACE_INCLUDE_DIRECTORIES)\n\ntarget_include_directories(psa_crypto_library_config\n  INTERFACE\n    ${NRF_CC3XX_MBEDCRYPTO_INCLUDE_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Source Files\nDESCRIPTION: Here, the project named 'remote' is defined, and the main source file located at ../src/main.c is included as part of the app target. This ensures that the application can access the main functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_stm/remote/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(remote)\n\ntarget_sources(app PRIVATE ../src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Twister on Windows\nDESCRIPTION: Command for running unit tests using Twister tool on Windows. By default, tests run on native_sim and qemu_cortex_m3 boards. Test execution requires navigating to the directory containing the testcase.yaml file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/test_framework/running_unit_tests.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n<Zephyr_path>/scripts/twister -T .\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for Custom Trace Backend\nDESCRIPTION: CMakeLists.txt configuration that conditionally includes the custom trace backend source files when the corresponding Kconfig option is selected. This ensures the custom backend is only compiled when needed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_trace.rst#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_NRF_MODEM_LIB_TRACE)\n\nzephyr_library()\n\n# Only add 'custom' backend to compilation when selected.\nzephyr_library_sources_ifdef(\n  CONFIG_NRF_MODEM_LIB_TRACE_BACKEND_MY_TRACE_BACKEND\n  path/to/my_trace_backend.c\n)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Crypto Headers - CMake\nDESCRIPTION: When CONFIG_MOCK_SUIT_CRYPTO is defined, this snippet adds the necessary crypto headers for the test binary, providing cryptographic functionalities required for the testing suite.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_CRYPTO)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_CRYPTO)\n  target_include_directories(testbinary PRIVATE ${ZEPHYR_MBEDTLS_MODULE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Boot Chains Project\nDESCRIPTION: Sets up the CMake build configuration for a boot chains project. Requires CMake 3.20.0 or higher, finds the Zephyr package using environment variables, and adds main.c as the primary source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bootloader/boot_chains/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(boot_chains)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Scan Parameters After Connection Creation\nDESCRIPTION: The HCI LE Create Connection command and the HCI LE Extended Create Connection command overwrite scan parameters when called after the scan parameters are set. To work around this, set the scan parameters again using the appropriate HCI commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_56\n\nLANGUAGE: c\nCODE:\n```\n// Workaround:\n// Set the scan parameters with the HCI LE Set Scan Parameters command\n// or the HCI LE Set Extended Scan Parameters command again.\n```\n\n----------------------------------------\n\nTITLE: Including Service Headers - CMake\nDESCRIPTION: This snippet includes necessary headers for the suite service when CONFIG_MOCK_SUIT_SERVICE is defined, integrating service functionalities crucial for testing within the Nordic SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_SERVICE)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SSF_SUIT_SERVICE_ENABLED)\n  target_include_directories(testbinary PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Console Output for Identity Key Usage Sample\nDESCRIPTION: This snippet shows the expected console output when running the Identity Key Usage sample. It demonstrates the successful initialization of PSA crypto, reading the identity key, importing it into PSA crypto, and exporting the public key.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/keys/identity_key_usage/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nInitializing PSA crypto.\\nReading the identity key.\\nImporting the identity key into PSA crypto.\\nExporting the public key corresponding to the identity key.\\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Source Files\nDESCRIPTION: This snippet initializes the project and specifies the source files for the application. It uses the FILE command to gather all C source files from the src directory and adds them as private source files to the specified target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/i2c_endless/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(i2c_endless)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Programming SoC binaries for nRF54H20 Engineering C DK\nDESCRIPTION: Command for programming the SoC binaries on an nRF54H20 Engineering C development kit using the SUIT DFU method with a specific candidate info address.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-suit-dfu --firmware nrf54h20_soc_binaries_v0.7.0_<revision>.zip --serial-number <serial_number> --update-candidate-info-address 0x0e1ef340\n```\n\n----------------------------------------\n\nTITLE: Set CMD Radio Power - Custom Command Usage\nDESCRIPTION: This command sets the transmission power of the CMD device using mode and power parameters. Currently, the mode arguments are unsupported and should be set to 0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ncustom lsetpower *<mode:1>* *<mode:0>* *<power>*\n```\n\n----------------------------------------\n\nTITLE: Source Files Configuration\nDESCRIPTION: Configures source files for the application, including mesh scheduler service, time utilities, and model utilities from the nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/scheduler_model/action_planning/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/scheduler_srv.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/time_util.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/model_utils.c\n  ../common/sched_test.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Library Configuration Using Zephyr's Build System\nDESCRIPTION: This code snippet is a configuration script in Zephyr's build system, utilizing CMake. It declares a library and specifies its source files to be compiled. Dependencies on Zephyr build system should be satisfied to run this script.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/sample_rate_converter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tsample_rate_converter.c\n\tsample_rate_converter_filter.c\n)\n```\n\n----------------------------------------\n\nTITLE: Including Platform Headers - CMake\nDESCRIPTION: This snippet conditionally includes platform headers for the test binary when CONFIG_MOCK_SUIT_PLATFORM is set, to ensure platform-specific functionalities are available during tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_PLATFORM)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_PLATFORM)\n  target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/platform/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Globbing Application Sources\nDESCRIPTION: This command uses `FILE(GLOB)` to find all C source files in the `src` directory and stores them in the `app_sources` variable. It identifies source files to be included in the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hids_mouse/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"FILE(GLOB app_sources src/*.c)\"\n```\n\n----------------------------------------\n\nTITLE: OpenThread Report Generation CMake Script\nDESCRIPTION: CMake script that generates a report containing OpenThread build configuration details, including device type, Thread version, library features, and Git revision information. The script also checks for differences between current and previous NCS releases.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/report/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(report_generation_utils.cmake)\ninclude(${ZEPHYR_NRFXLIB_MODULE_DIR}/openthread/cmake/extensions.cmake)\n\n# Remove the existing file before the next report generation\nset(ARTEFACT ${CMAKE_BINARY_DIR}/${CONFIG_OPENTHREAD_REPORT_BUILD_ARTEFACT_NAME})\nif(EXISTS ${ARTEFACT})\n    file(REMOVE ${ARTEFACT})\nendif()\n\not_report_add_message(\"################### OPENTHREAD REPORT ###################\" TRUE)\n\n# Add basic information\not_report_add_message(\"+ Target device: ${CONFIG_SOC}\" TRUE)\not_report_add_message(\"+ Thread version: v${CONFIG_OPENTHREAD_THREAD_VERSION}\" TRUE)\n\n# Add feature set\nif(DEFINED CONFIG_OPENTHREAD_NORDIC_LIBRARY_MASTER)\n    set(FEATURE_SET \"Master\")\nelseif(DEFINED CONFIG_OPENTHREAD_NORDIC_LIBRARY_FTD)\n    set(FEATURE_SET \"Full Thread Device (FTD)\")\nelseif(DEFINED CONFIG_OPENTHREAD_NORDIC_LIBRARY_MTD)\n    set(FEATURE_SET \"Minimal Thread Device (MTD)\")\nelseif(DEFINED CONFIG_OPENTHREAD_NORDIC_LIBRARY_RCP)\n    set(FEATURE_SET \"Radio Coprocessor (RCP)\")\nelse()\n    set(FEATURE_SET \"Custom\")\nendif()\not_report_add_message(\"+ OpenThread library feature set: ${FEATURE_SET}\" TRUE)\n\nif(DEFINED CONFIG_OPENTHREAD_MTD_SED)\n    set(DEVICE_TYPE \"Sleepy End Device (SED)\")\nelseif(DEFINED CONFIG_OPENTHREAD_NORDIC_LIBRARY_MTD)\n    set(DEVICE_TYPE \"Minimal End Device (MED)\")\nelseif(DEFINED CONFIG_OPENTHREAD_NORDIC_LIBRARY_FTD)\n    set(DEVICE_TYPE \"Full End Device (FED)\")\nelse()\n    set(DEVICE_TYPE \"Unknown\")\nendif()\not_report_add_message(\"+ Thread device type: ${DEVICE_TYPE}\" TRUE)\n\n# Check whether OpenThread is built from library or from sources\nif(CONFIG_OPENTHREAD_SOURCES)\n    ot_report_add_message(\"+ OpenThread library has been built from sources\" TRUE)\nelse()\n    openthread_calculate_lib_path(\"v${CONFIG_OPENTHREAD_THREAD_VERSION}\" LIB_PATH)\n    cmake_path(RELATIVE_PATH LIB_PATH BASE_DIRECTORY ${ZEPHYR_NRFXLIB_MODULE_DIR} OUTPUT_VARIABLE LIB_PATH_REL)\n    ot_report_add_message(\"+ OpenThread Library: ${LIB_PATH_REL}\" TRUE)\nendif()\n\n# Get OpenThread revision\nset(OPENTHREAD_VERSION \"\" CACHE STRING \"OpenThread revision\")\nif(OPENTHREAD_VERSION STREQUAL \"\")\n    ot_report_git_version(OPENTHREAD_VERSION ${ZEPHYR_OPENTHREAD_MODULE_DIR})\n    ot_report_add_message(\"+ OpenThread NCS revision: ${OPENTHREAD_VERSION}\" TRUE)\nendif()\nset(OPENTHREAD_SHA \"\" CACHE STRING \"OpenThread revision\")\nif(OPENTHREAD_SHA STREQUAL \"\")\n    ot_report_git_head_sha(OPENTHREAD_SHA ${ZEPHYR_OPENTHREAD_MODULE_DIR})\n    ot_report_add_message(\"+ OpenThread NCS SHA: ${OPENTHREAD_SHA}\" TRUE)\nendif()\n\n# Get NCS revision\nset(NCS_VERSION \"\" CACHE STRING \"NCS revision\")\nif(NCS_VERSION STREQUAL \"\")\n    ot_report_git_version(NCS_VERSION ${ZEPHYR_NRF_MODULE_DIR})\n    ot_report_add_message(\"+ NCS revision: ${NCS_VERSION}\" TRUE)\nendif()\nset(NCS_SHA \"\" CACHE STRING \"NCS revision\")\nif(NCS_SHA STREQUAL \"\")\n    ot_report_git_head_sha(NCS_SHA ${ZEPHYR_NRF_MODULE_DIR})\n    ot_report_add_message(\"+ NCS SHA: ${NCS_SHA}\" TRUE)\nendif()\n\n# Diff of nrfxlib directory between the current and the latest NCS release revisions.\nif(NOT DEFINED CONFIG_OPENTHREAD_SOURCES)\n    # Get NCS version from openthread lib configuration file.\n    file(READ \"${LIB_PATH}/openthread_lib_configuration.txt\" INSTANCE_FILE_CONTENT)\n    string(REGEX MATCH \"NRFXLIB_RELEASE_TAG=([^ \\n]+)\" MACRO_DEF \"${INSTANCE_FILE_CONTENT}\")\n    if(NOT ${CMAKE_MATCH_1} STREQUAL \"\")\n        set(LATEST_NCS_RELEASE ${CMAKE_MATCH_1})\n    else()\n        # Read NRFXLIB commit version if NCS_VERSION is not available - backward compatibility for NCS 2.7.0\n        string(REGEX MATCH \"NRFXLIB_commit=([^ -]+)\" MACRO_DEF \"${INSTANCE_FILE_CONTENT}\")\n        set(LATEST_NCS_RELEASE ${CMAKE_MATCH_1})\n    endif()\n\n    set(NRFXLIB_DIFF \"\" CACHE STRING \"nrfxlib diff to the recent revision\")\n    ot_report_git_diff(NRFXLIB_DIFF ${LATEST_NCS_RELEASE} ${ZEPHYR_NRFXLIB_MODULE_DIR} \"openthread\")\n\n    if(NOT NRFXLIB_DIFF STREQUAL \"\")\n        ot_report_add_message(\"+ Found differences in the nrfxlib repository in comparison to the NCS ${LATEST_NCS_RELEASE} release. See the ${CONFIG_OPENTHREAD_REPORT_BUILD_ARTEFACT_NAME} report file to learn more.\" TRUE)\n        ot_report_add_message(${NRFXLIB_DIFF} FALSE)\n    else()\n        ot_report_add_message(\"+ No differences in the used Thread library in comparison to the NCS ${LATEST_NCS_RELEASE} release.\" TRUE)\n    endif()\nendif()\n\not_report_add_message(\"###################        END        ###################\" TRUE)\n```\n\n----------------------------------------\n\nTITLE: Removing Message from QoS Pending List - C\nDESCRIPTION: This snippet demonstrates how to remove a message from the QoS library's pending list using the QoS function. The operation requires the message ID associated with the message to be removed. The snippet checks for errors during the removal process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/qos.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nerr = qos_message_remove(message_id);\n   if (err) {\n      LOG_ERR(\"qos_message_remove, error: %d\", err);\n      return err;\n   }\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion for Nordic Profiler in CMake\nDESCRIPTION: Configures conditional compilation of profiler components based on Kconfig options. Includes profiler_nordic.c when CONFIG_NRF_PROFILER_NORDIC is enabled and profiler_common_shell.c when CONFIG_NRF_PROFILER_SHELL is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_profiler/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_NRF_PROFILER_NORDIC profiler_nordic.c)\nzephyr_sources_ifdef(CONFIG_NRF_PROFILER_SHELL  profiler_common_shell.c)\n```\n\n----------------------------------------\n\nTITLE: Enabling TF-M Logs using CMake\nDESCRIPTION: Command to add the tfm-enable-share-uart snippet when building an application with CMake. This directs TF-M logs to the application's UART.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_snippet.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n-D<image_name>_SNIPPET=\"tfm-enable-share-uart\" [...]\n```\n\n----------------------------------------\n\nTITLE: Initializing Light Lightness and Light xyL Servers in C\nDESCRIPTION: Demonstrates how to create and initialize Light Lightness and Light xyL Server instances, and define mesh elements with these models\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic struct bt_mesh_lightness_srv lightess_srv = BT_MESH_LIGHTNESS_SRV_INIT(&lightness_cb);\n\nstatic struct bt_mesh_light_xyl_srv xyl_srv =\n\tBT_MESH_LIGHT_XYL_SRV_INIT(&lightness_srv, &xyl_handlers);\n\nstatic struct bt_mesh_elem elements[] = {\n\tBT_MESH_ELEM(\n\t\t1, BT_MESH_MODEL_LIST(\n\t\t   BT_MESH_MODEL_LIGHTNESS_SRV(&lightness_srv),\n\t\t   BT_MESH_MODEL_LIGHT_XYL_SRV(&xyl_srv)),\n\t\tBT_MESH_MODEL_NONE),\n};\n```\n\n----------------------------------------\n\nTITLE: Starting continuous receive mode with lstart command in Shell\nDESCRIPTION: Puts the sample into continuous receive mode, printing received packet information over serial connection. Active until lend command is received.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ncustom lstart\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files in CMake for Nordic SDK Project\nDESCRIPTION: CMake configuration that adds main.c from the current source directory to the application build. This is part of the Nordic SDK build system and includes Nordic Semiconductor's license header.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/broadcast_sink/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2023 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ntarget_sources(app PRIVATE\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring FEM Library Build Sources in CMake\nDESCRIPTION: Configures build sources for the Front-End Module abstraction layer library. Includes conditional compilation of different FEM implementations based on configuration flags like NRF21540, Simple GPIO, and NRF22xx series.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/fem_al/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(.)\n\nif(CONFIG_FEM_AL_LIB)\n\ntarget_sources_ifdef(CONFIG_FEM app\n\t\t     PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/fem_al.c)\n\nif(CONFIG_MPSL_FEM_NRF21540_GPIO OR CONFIG_MPSL_FEM_NRF21540_GPIO_SPI)\n  target_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/nrf21540.c)\nendif()\n\ntarget_sources_ifdef(CONFIG_MPSL_FEM_SIMPLE_GPIO app\n\t\t     PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/generic_fem.c)\n\nif (CONFIG_MPSL_FEM_NRF2220 OR CONFIG_MPSL_FEM_NRF2240)\n  target_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/nrf22xx.c)\nendif()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Attempting Application Image Upload\nDESCRIPTION: This command tries to push application image 'A' to the device, intentionally failing to highlight the configuration check against the device tree for partition definition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_50\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-cache-raw --serial-port COM7 --cache-file ./build/ab/zephyr/zephyr.bin  --pool 21\n```\n\n----------------------------------------\n\nTITLE: Listing Modem Credentials in C\nDESCRIPTION: New function added to the modem key management library to retrieve the security tag and type of every credential stored in the modem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-3.0.0-preview2.rst#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nmodem_key_mgmt_list()\n```\n\n----------------------------------------\n\nTITLE: Enabling DPPIC and PPIB Peripherals for nRF54L Series\nDESCRIPTION: Enables the necessary DPPIC and PPIB peripheral instances in the devicetree file for nRF54L Series devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nrf2220.rst#2025-04-21_snippet_4\n\nLANGUAGE: devicetree\nCODE:\n```\n&dppic10 {\n      status = \"okay\";\n};\n\n&ppib11 {\n      status = \"okay\";\n};\n\n&ppib21 {\n      status = \"okay\";\n};\n\n&dppic20 {\n      status = \"okay\";\n};\n\n&ppib22 {\n      status = \"okay\";\n};\n\n&ppib30 {\n      status = \"okay\";\n};\n\n&dppic30 {\n      status = \"okay\";\n};\n```\n\n----------------------------------------\n\nTITLE: Globting Source Files\nDESCRIPTION: This snippet collects all source files for the I2S API test from the specified directory within the Zephyr framework. It enables convenient management of source files by automatically including them in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/i2s/i2s_api/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/i2s/i2s_api/src/*.c)\n```\n\n----------------------------------------\n\nTITLE: HIDS Connection Success Log Output\nDESCRIPTION: This code snippet shows the terminal output when the Central HIDS application successfully connects to a peripheral device and subscribes to the required reports.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_hids/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHIDS is ready to work\nSubscribe in report id: 1\nSubscribe in boot keyboard report\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Interface Library\nDESCRIPTION: This snippet defines a Zephyr interface library named 'suit_sink_selector_interface' and specifies the include directories for that library. This is crucial for setting up the proper header file visibility within a Zephyr application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/sink_selector/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(suit_sink_selector_interface)\ntarget_include_directories(suit_sink_selector_interface INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for PSA Core Lite Tests\nDESCRIPTION: Sets up the CMake build environment with minimum version requirement, finds the Zephyr package, and configures source files for the PSA core lite unit test project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_security/psa_core_lite/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"PSA core lite unit tests\")\n\n# Add test sources\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: LZMA Compression Module Configuration\nDESCRIPTION: Conditional configuration for LZMA compression support, including additional source files and LZMA2 version support when enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_compress/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_NRF_COMPRESS_LZMA OR CONFIG_NRF_COMPRESS_ARM_THUMB)\n  zephyr_library_include_directories(lzma)\nendif()\n\nif(CONFIG_NRF_COMPRESS_LZMA)\n  zephyr_library_sources(lzma/LzmaDec.c src/lzma.c)\n\n  if(CONFIG_NRF_COMPRESS_LZMA_VERSION_LZMA2)\n    zephyr_library_sources(lzma/Lzma2Dec.c)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: SRAM Region Definition Example - Before Migration\nDESCRIPTION: Shows the old way of defining SRAM regions using nordic,allocatable-ram binding with IPC shared memory areas between cpusec and cpuapp.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.4.99-cs3_to_2.7_application.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n   soc {\n      ram0x: memory@2f000000 {\n         reg = <0x2f000000 DT_SIZE_K(768)>;\n         ranges = <0 0x2f000000 0xc0000>;\n         ...\n         cpuapp_ram0x_s: memory@10000 {\n            compatible = \"nordic,allocatable-ram\";\n            reg = <0x10000 DT_SIZE_K(260)>;\n            perm-read;\n            perm-write;\n            perm-secure;\n            #address-cells = <1>;\n            #size-cells = <1>;\n            ranges = <0x0 0x10000 0x41000>;\n            ipc_shm_area_cpusec_cpuapp: memory@0 {\n               reg = <0x0 DT_SIZE_K(4)>;\n               #address-cells = <1>;\n               #size-cells = <1>;\n               ranges = <0x0 0x0 DT_SIZE_K(4)>;\n               ipc_shm_cpusec_cpuapp: memory@0 {\n                  reg = <0x0 DT_SIZE_K(2)>;\n               };\n               ipc_shm_cpuapp_cpusec: memory@800 {\n                  reg = <0x800 DT_SIZE_K(2)>;\n               };\n            };\n         };\n      };\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Updating nRF54H20 BICR using nrfutil\nDESCRIPTION: Command to program the BICR binary file on an nRF54H20 development kit. The command uses nrfutil with chip erase mode set to ERASE_NONE.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device program --options chip_erase_mode=ERASE_NONE --firmware <path_to_bicr.hex> --core Application --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for nRF Profiler Sync Module\nDESCRIPTION: Required Kconfig configuration options that must be enabled for the nRF Profiler synchronization module to function. Includes GPIO support and event manager profiler tracer.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/nrf_profiler_sync.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_GPIO=y\nCONFIG_APP_EVENT_MANAGER_PROFILER_TRACER=y\nCONFIG_DESKTOP_NRF_PROFILER_SYNC_GPIO_PORT=<port>\nCONFIG_DESKTOP_NRF_PROFILER_SYNC_GPIO_PIN=<pin>\nCONFIG_DESKTOP_NRF_PROFILER_SYNC_CENTRAL=y # For Central device\nCONFIG_DESKTOP_NRF_PROFILER_SYNC_PERIPHERAL=y # For Peripheral device\n```\n\n----------------------------------------\n\nTITLE: Building Sample with External Flash Support\nDESCRIPTION: This command builds the sample with external flash support enabled. It uses a specific configuration target that enables UART transport and external flash.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/smp_transfer/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp -T ./sample.suit.smp_transfer.cache_push.extflash\n```\n\n----------------------------------------\n\nTITLE: Launching toolchain environment for Windows\nDESCRIPTION: Commands to open a new terminal window with the NCS toolchain environment on Windows, allowing access to west and other development tools.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nc:/ncs-lcs/nrfutil.exe toolchain-manager launch --terminal --chdir \"c:/ncs-lcs/work-dir\" --ncs-version v2.6.99-cs2\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion with CONFIG_BT_LL_SOFTDEVICE_HEADERS_INCLUDE\nDESCRIPTION: This CMake snippet includes the `hci_vs_sdc.c` source file in the build process only if the `CONFIG_BT_LL_SOFTDEVICE_HEADERS_INCLUDE` configuration option is defined. `zephyr_sources_ifdef` is a Zephyr-specific macro for conditional source inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_sources_ifdef(CONFIG_BT_LL_SOFTDEVICE_HEADERS_INCLUDE hci_vs_sdc.c)\"\n```\n\n----------------------------------------\n\nTITLE: Including Directories for Test Binary - CMake\nDESCRIPTION: This snippet sets up the include directories for the test binary based on the current CMake list directory. It is essential for ensuring that the test binary can access the necessary header files for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(testbinary PRIVATE\n  ${CMAKE_CURRENT_LIST_DIR}/include\n)\n```\n\n----------------------------------------\n\nTITLE: Building with West for Target Board\nDESCRIPTION: This command builds the application for a specified target board while appending a release suffix. It utilizes the West build tool that is part of the nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b *board_target* -- -DFILE_SUFFIX=release\n```\n\n----------------------------------------\n\nTITLE: Adding sources based on CONFIG_BT_FAST_PAIR_FMDN_CALLBACKS\nDESCRIPTION: This conditional block adds the 'callbacks.c' source file to the 'fmdn' library if the Kconfig option 'CONFIG_BT_FAST_PAIR_FMDN_CALLBACKS' is enabled. The source is added as a PRIVATE source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(CONFIG_BT_FAST_PAIR_FMDN_CALLBACKS)\n  target_sources(fmdn PRIVATE callbacks.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Documenting API Headers and Source Files in RST\nDESCRIPTION: A reStructuredText code block template for documenting API components. It shows how to specify header file paths, source file paths, and link to Doxygen-generated API documentation groups.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/application_README.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n| Header file: :file:`*provide_the_path*`\n| Source files: :file:`*provide_the_path*`\n\n.. doxygengroup:: *doxygen_group_name*\n```\n\n----------------------------------------\n\nTITLE: Running the MDS BLE Gateway Script\nDESCRIPTION: This command executes the MDS BLE gateway Python script. It requires specifying the Segger chip ID and the COM port for connecting the development kit. Make sure the nRF52 Series development kit is connected and ready.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/memfault/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npython3 mds_ble_gateway.py --snr *your DK Segger chip ID* --com *Serial port name*\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Finding Package\nDESCRIPTION: This snippet sets the minimum required version for CMake and finds the Zephyr package with the specified hints. It ensures that the Zephyr framework is correctly included for the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package and Project Setup\nDESCRIPTION: This snippet sets the minimum version required for CMake, finds the Zephyr package necessary for the project, and initializes the project named 'ot_rpc_server_test'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(ot_rpc_server_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Information Service Server Library in CMake\nDESCRIPTION: Creates and configures a Zephyr library for the Device Information Service server component. The configuration includes source files and include paths, specifically referencing common headers from a parent directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_rpc/dev_info/server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(\n  dev_info_server.c\n)\n\nzephyr_library_include_directories(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../common\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Location Information via MoSh\nDESCRIPTION: Use the 'location get --method cellular' command to retrieve the device's location using cellular information. Successful execution provides location data on the console.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_35\n\nLANGUAGE: console\nCODE:\n```\nmosh:~$ location get --method cellular\n```\n\n----------------------------------------\n\nTITLE: Configuring Partition Manager Static Layout for Direct-XIP Mode\nDESCRIPTION: Static Partition Manager configuration file for nRF5340 in direct-XIP mode without network core support. Defines memory partitions required for direct-XIP functionality with QSPI external flash.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n../../../../samples/nrf5340/extxip_smp_svr/pm_static_no_network_core_directxip.yml\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package in CMake\nDESCRIPTION: This snippet uses the find_package function to locate the Zephyr framework necessary for building the I2C endless application. It checks in the environment variable ZEPHYR_BASE for the required Zephyr installation path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/i2c_endless/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUmgr B0 Active Slot Source\nDESCRIPTION: Conditionally adds the B0 active slot management source file to the Zephyr library when CONFIG_MCUMGR_GRP_OS_BOOTLOADER_INFO_B0_ACTIVE_SLOT is enabled. This extends the MCUmgr OS group functionality for bootloader information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mgmt/mcumgr/grp/os_mgmt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_MCUMGR_GRP_OS_BOOTLOADER_INFO_B0_ACTIVE_SLOT)\n  zephyr_library_amend()\n  zephyr_library_sources(src/os_mgmt_b0_active_slot.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining the Project and Specifying Source Files\nDESCRIPTION: This snippet declares the project name and specifies the source file that will be included in the build process for the application. The source file is located in the '../src/' directory and named 'main.c'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_counter/remote/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(remote)\n\ntarget_sources(app PRIVATE ../src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option for Identity Key\nDESCRIPTION: This snippet sets the CONFIG_IDENTITY_KEY_TFM CMake option to ON if CONFIG_IDENTITY_KEY_TFM is enabled. This enables the use of an identity key within TF-M.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_IDENTITY_KEY_TFM)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DCONFIG_IDENTITY_KEY_TFM=ON\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenThread Logging and Core Options\nDESCRIPTION: Sets up OpenThread logging configuration based on Zephyr's logging backends. Defines core OpenThread configuration options including log level and core configuration file path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Zephyr logging options\n\nif(CONFIG_LOG_BACKEND_SPINEL)\n  add_definitions(\n      -DOPENTHREAD_CONFIG_LOG_OUTPUT=OPENTHREAD_CONFIG_LOG_OUTPUT_APP\n  )\nendif()\n\n# Other options\nadd_definitions(\n    -DOPENTHREAD_CONFIG_LOG_LEVEL=${CONFIG_OPENTHREAD_LOG_LEVEL}\n    -DOPENTHREAD_PROJECT_CORE_CONFIG_FILE=\"openthread-core-zephyr-config.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Connection Callback Definition\nDESCRIPTION: The BT_CONN_CB_DEFINE macro is used to define connection callbacks for Bluetooth connections. This macro simplifies the registration of handlers for connection events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.9.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nBT_CONN_CB_DEFINE\n```\n\n----------------------------------------\n\nTITLE: Core Library Setup with Linker Configuration\nDESCRIPTION: Initializes the nrf_compress library, sets up basic source files and configures linker sections with iterable section support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_compress/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library(nrf_compress)\nzephyr_library_sources(src/implementation.c)\nzephyr_linker_sources(SECTIONS sections.ld)\nzephyr_iterable_section(NAME nrf_compress_implementation KVMA RAM_REGION GROUP RODATA_REGION SUBALIGN CONFIG_LINKER_ITERABLE_SUBALIGN)\n```\n\n----------------------------------------\n\nTITLE: Defining Matter Struct Type in XML\nDESCRIPTION: Example of defining a fabric-scoped structure type with a single octet string field. The structure includes fabric sensitivity and specific length constraints.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/custom_clusters.rst#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<struct name=\"MyStruct\" isFabricScoped=\"true\">\n  <cluster code=\"0xFFF1FC01\"/>\n  <item fieldId=\"1\" name=\"Data\" type=\"octet_string\" length=\"128\" isFabricSensitive=\"true\"/>\n</struct>\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth ANCS Client Sources\nDESCRIPTION: This snippet includes the ANCS client source files and the attribute parser if the CONFIG_BT_ANCS_CLIENT configuration option is defined. This functionality is necessary for handling Apple Notification Service interactions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_ANCS_CLIENT ancs_client.c\n                                           ancs_attr_parser.c\n                                           ancs_app_attr_get.c)\n```\n\n----------------------------------------\n\nTITLE: Append extra Zephyr modules\nDESCRIPTION: Appends the application's RPC module path to the list of extra Zephyr modules. This allows Zephyr to locate and include the custom RPC module during the build process, enabling inter-process communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND EXTRA_ZEPHYR_MODULES ${CMAKE_CURRENT_SOURCE_DIR}/modules/app_rpc)\n```\n\n----------------------------------------\n\nTITLE: Pushing Radio Image 'B'\nDESCRIPTION: Uploads the radio firmware image variant 'B' utilizing the raw cache upload functionality, ensuring the new firmware is applied to the device's radio module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_52\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-cache-raw --serial-port COM7 --cache-file ./build/hci_ipc_variant_b/zephyr/zephyr.bin  --pool 32\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for REST Shell in CMake\nDESCRIPTION: Adds the current directory to the private include directories for the 'app' target. This ensures that header files in the current directory can be found during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/rest/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: PM Device Action Resume Reference\nDESCRIPTION: Reference to PM_DEVICE_ACTION_RESUME action that was involved in a fix for a null pointer dereference issue in the UART driver.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.3.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nPM_DEVICE_ACTION_RESUME\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Compilation with Zephyr\nDESCRIPTION: Adds backend_interface.c source file to the build only when PSA Internal Trusted Storage configuration is enabled\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/trusted_storage/src/internal_trusted_storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_PSA_INTERNAL_TRUSTED_STORAGE\n\t\tbackend_interface.c\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing UpdateState Method for MyBtServiceDataProvider in C++\nDESCRIPTION: Implement the UpdateState method to handle write operations to the Bluetooth LE device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nCHIP_ERROR MyBtServiceDataProvider::UpdateState(chip::ClusterId clusterId, chip::AttributeId attributeId, uint8_t *buffer) {\n   /* Set all mGattWriteParams fields and copy data from the input to mGattWriteParams buffer. */\n   /* ... */\n   mGattWriteParams.func = MyBtServiceDataProvider::GattWriteCallback;\n\n   int err = bt_gatt_write(mDevice.mConn, &mGattWriteParams);\n   if (err) {\n      return CHIP_ERROR_INTERNAL;\n   }\n}\n\nvoid MyBtServiceDataProvider::GattWriteCallback(bt_conn *conn, uint8_t err, bt_gatt_write_params *params)\n{\n   if (!params) {\n      return;\n   }\n   MyBtServiceDataProvider *provider = static_cast<MyBtServiceDataProvider *>(\n      BLEConnectivityManager::Instance().FindBLEProvider(*bt_conn_get_dst(conn)));\n   if (!provider) {\n      return;\n   }\n\n   /* Save data received in GATT write response. */\n   /* ... */\n   DeviceLayer::PlatformMgr().ScheduleWork(NotifyAttributeChange, reinterpret_cast<intptr_t>(provider));\n}\n\nvoid MyBtServiceDataProvider::NotifyAttributeChange(intptr_t context)\n{\n   MyBtServiceDataProvider *provider = reinterpret_cast<MyBtServiceDataProvider *>(context);\n   /* Invoke provider->NotifyUpdateState() method to inform the `Bridge Manager` that write operation suceeded and Matter Data Model state can be updated. */\n   /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Programming KMU using Python\nDESCRIPTION: This Python script example demonstrates how to program the Key Management Unit (KMU) with a debugger. It is located in :file:`tests/lib/hw_unique_key_tfm/write_kmu.py`.  The script provides a method to write hardware unique keys to the KMU.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/hw_unique_key.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"tests/lib/hw_unique_key_tfm/write_kmu.py\"\n```\n\n----------------------------------------\n\nTITLE: Adding FEM Support Using West Build Command\nDESCRIPTION: Demonstrates how to add support for the nRF21540 front-end module (FEM) when building the nRF5340 Audio application using the west build command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/configuration.rst#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nwest build -b nrf5340_audio_dk/nrf5340/cpuapp --pristine -- -DEXTRA_CONF_FILE=\".\\unicast_server\\overlay-unicast_server.conf\" -Dnrf5340_audio_SHIELD=nrf21540ek -Dipc_radio_SHIELD=nrf21540ek\n```\n\n----------------------------------------\n\nTITLE: Executing FOTA Update with Binary File (Python)\nDESCRIPTION: Command to run the fota.py script for updating firmware using a binary file. It specifies the device ID, instance ID, and binary filename.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n./scripts/fota.py -id urn:imei:359746166785274 update 1 file mfw_nrf91x1_update_from_2.x.x_to_2.x.x-FOTA-TEST.bin\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for GPIO More Loops\nDESCRIPTION: Sets up a CMake project for building a GPIO application with Zephyr RTOS. Defines minimum CMake version, finds Zephyr package, sets project name, and configures source files for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/gpio/gpio_more_loops/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(gpio_more_loops)\n\nFILE(GLOB app_sources src/main.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target\nDESCRIPTION: This snippet defines a target source for the application, specifically linking the previously gathered C source files. It ensures that these files are compiled as part of the application binary, thereby including essential application logic.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_nfc_pairing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app  PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Metrics Forward Tracking Series\nDESCRIPTION: Sends a Link Metrics Management Request to configure Forward Tracking Series with specific metrics types for tracking link quality over multiple packets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot linkmetrics mgmt fe80:0:0:0:10b1:93ea:c0ee:eeb7 forward 1 dra pqmr\nDone\nReceived Link Metrics Management Response from: fe80:0:0:0:10b1:93ea:c0ee:eeb7\nStatus: Success\n```\n\n----------------------------------------\n\nTITLE: SoftDevice Controller Support API\nDESCRIPTION: API reference for SoftDevice Controller feature support configuration function to include only required features in final binary.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.4.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nsdc_support_adv()\n```\n\n----------------------------------------\n\nTITLE: Adding Matter Modules to CMake Build\nDESCRIPTION: CMake code to add the main_init and matter_event_handler modules to the application compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n    ${COMMON_ROOT}/src/app/matter_init.cpp\n    ${COMMON_ROOT}/src/app/matter_event_handler.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Linker File for QSPI XIP\nDESCRIPTION: Custom linker file for QSPI XIP split image supporting direct-XIP mode. Defines memory regions for both internal and external flash, with special configurations for variant images used in direct-XIP deployments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_4\n\nLANGUAGE: ld\nCODE:\n```\n../../../../samples/nrf5340/extxip_smp_svr/linker_arm_extxip.ld\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr and Nordic SDK\nDESCRIPTION: This snippet configures a CMake project for a Zephyr-based application. It specifies the minimum required version of CMake as 3.20 and finds the Zephyr package using the ZEPHYR_BASE environment variable. The snippet sets up a project named gzll_ack_payload_host and specifies src/main.c as a source file. Dependencies include the Zephyr RTOS.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/gazell/gzll_ack_payload_host/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\\n\\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\\nproject(gzll_ack_payload_host)\\n\\n# NORDIC SDK APP START\\ntarget_sources(app PRIVATE\\n  src/main.c\\n)\\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Triggering a differential level state change and waiting for response\nDESCRIPTION: Triggers a differential level state change for the server and waits for a response, with options for transition time and delay.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_lvl_cli.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmesh models lvl delta-set <Dlt> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: Clear Channel Assessment - Get Result - Custom Command Usage\nDESCRIPTION: This command performs a Clear Channel Assessment (CCA) using a requested mode and prints the result, requiring a mode argument (1-3).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\ncustom lgetcca *<mode>*\n```\n\n----------------------------------------\n\nTITLE: Configuring SHA-256 Hash Algorithm for MCUboot\nDESCRIPTION: Selects SHA-256 as the hash algorithm for image integrity verification. It is the default hash algorithm compatible with all pre-hash signature types.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_15\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_HASH_ALG_SHA256\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Build with Continuous Array\nDESCRIPTION: CMake configuration that creates a Zephyr library and specifies its source files and include paths. The library includes 'contin_array.c' as its source and adds the current directory to the include path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/contin_array/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tcontin_array.c\n)\n\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Implementing MyBtServiceDataProvider Class in C++\nDESCRIPTION: Define a new MyBtServiceDataProvider class inheriting from BLEBridgedDeviceProvider and implement its constructor.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include \"ble_bridged_device.h\"\n#include \"ble_connectivity_manager.h\"\n#include \"bridged_device_data_provider.h\"\n\n#include \"my_bt_service.h\"\n\nclass MyBtServiceDataProvider : public Nrf::BLEBridgedDeviceProvider {\npublic:\n    explicit MyBtServiceDataProvider(UpdateAttributeCallback updateCallback, InvokeCommandCallback commandCallback) : Nrf::BLEBridgedDeviceProvider(updateCallback, commandCallback) {}\n\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Battery Life from Power Measurements\nDESCRIPTION: Code snippet for calculating how often payload data can be sent with a targeted battery life of two years based on measured power consumption values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/test_and_optimize/optimizing/power_nrf91.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n115.06 mC / (48.33-3.44) µA = 44.89 minutes (3.44 µA is the measured PSM floor)\n```\n\n----------------------------------------\n\nTITLE: Building with nRF2220 EK Shield for Specific Images on Multicore Board\nDESCRIPTION: Command-line example showing how to build for nRF5340 with the nRF2220 EK shield, passing the shield configuration only to specific images.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/2220ek_dev_guide.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -D<app_name_image>_SHIELD=nrf2220ek -Dipc_radio_SHIELD=nrf2220ek\n```\n\n----------------------------------------\n\nTITLE: Required Order for RU Configuration Commands\nDESCRIPTION: Shows the required sequence for Resource Unit (RU) configuration commands when setting up a Wi-Fi transmission. These specific commands must be executed in this order when used.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test ru_tone 106\nuart:~$ wifi_radio_test ru_index 2\nuart:~$ wifi_radio_test tx_pkt_len 1024\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies Between Documentation Sets in CMake\nDESCRIPTION: Sets up dependencies between various documentation sets, ensuring proper build order and relationships between different components of the Nordic Semiconductor documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(nrfxlib-inventory-all kconfig-all zephyr-all)\nadd_doc_dependencies(zephyr kconfig-all)\nadd_doc_dependencies(mcuboot kconfig-all)\nadd_doc_dependencies(nrf zephyr-all nrfxlib-inventory-all mcuboot-all matter-all tfm-all kconfig-all wifi)\nadd_doc_dependencies(nrfxlib nrf-all)\n```\n\n----------------------------------------\n\nTITLE: Setting Timeslots per Channel for Frequency Hopping\nDESCRIPTION: Configure the number of timeslots to spend on a single channel before switching. Impacts transmission latency, power consumption, and coexistence performance with other radio technologies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/gazell/gzll.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nnrf_gzll_set_timeslots_per_channel()\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Mesh On Power Up Enumerator ON\nDESCRIPTION: This code snippet describes the BT_MESH_ON_POWER_UP_ON enumerator. When this is set, the Power Level is set to Default Level on power-up, or the last known non-zero Power Level if the Default Level is not set.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_plvl_srv.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n\":c:enumerator:`BT_MESH_ON_POWER_UP_ON` - The Power Level is set to Default Level on power-up, or the last known non-zero Power Level if the Default Level is not set.\"\n```\n\n----------------------------------------\n\nTITLE: Adding MPSL FEM NRF2240 Source Files to Zephyr Library\nDESCRIPTION: CMake directive to include the mpsl_fem_nrf2240.c source file in the Zephyr library build process. This allows the MPSL Front-End Module functionality for NRF2240 to be compiled as part of the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/fem/nrf2240/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(mpsl_fem_nrf2240.c)\n```\n\n----------------------------------------\n\nTITLE: Building Event Manager Proxy Sample with ICMSG Backend\nDESCRIPTION: Command to build the sample with the ICMSG backend configuration which has smaller memory requirements than the default OpenAMP backend. This is done by specifying the FILE_SUFFIX parameter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf5340dk/nrf5340/cpuapp -- -DFILE_SUFFIX=icmsg\n```\n\n----------------------------------------\n\nTITLE: Configuring Partition Manager Static Layout Without Network Core\nDESCRIPTION: Static Partition Manager configuration file for nRF5340 with swap-using-move mode but without network core support. Defines required memory partitions for using QSPI XIP split image functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/qspi_xip_split_image.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n../../../../samples/nrf5340/extxip_smp_svr/pm_static_no_network_core.yml\n```\n\n----------------------------------------\n\nTITLE: Conditional PSA Core Directory Selection in CMake\nDESCRIPTION: Conditional CMake logic that adds either the 'lite' or 'nrf_oberon' subdirectory based on the CONFIG_PSA_CORE_LITE configuration flag. Used to control which PSA core implementation is included in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_PSA_CORE_LITE)\n  add_subdirectory(lite)\nelse()\n  add_subdirectory(nrf_oberon)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Sources for Nordic SDK Application\nDESCRIPTION: Adds main.c to the application's source files and configures the current directory as a private include path. This is a standard CMake configuration used in Nordic SDK projects to set up build targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/debug/memfault/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE main.c)\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Uploading SUIT Envelope\nDESCRIPTION: Uses nrfutil to send the root manifest without triggering installation, preparing the device for further updates. The process verifies envelope data is uploaded successfully.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_49\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-envelope --serial-port COM7 --envelope-file build/DFU/root.suit\n```\n\n----------------------------------------\n\nTITLE: Platform Compatibility Check\nDESCRIPTION: Validates that the sample is being built for supported Nordic Semiconductor SoC series (nRF52, nRF54L, nRF54H)\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/radio_coex_1wire/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT CONFIG_SOC_SERIES_NRF52X AND NOT CONFIG_SOC_SERIES_NRF54LX\n    AND NOT CONFIG_SOC_SERIES_NRF54HX)\n\tmessage(FATAL_ERROR \"This sample is only supported on the nRF52, nRF54L and nRF54H series.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Zephyr Include Directories Configuration\nDESCRIPTION: This snippet configures the include directories for a Zephyr project. It adds the current directory (`.`) to the list of include directories, making header files in the current directory accessible to the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/nrf71/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Configuring Receiver Device for Thread Radio PER Test\nDESCRIPTION: Commands to configure the receiving device to listen for packets at 2400 MHz on channel 18 using IEEE 802.15.4 250Kbit data rate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/thread_radio_test_for_per_measurements.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ data_rate ieee802154_250Kbit\nuart:~$ start_channel 18\nuart:~$ parameters_print\nuart:~$ start_rx\n```\n\n----------------------------------------\n\nTITLE: Building with Custom Sign Script using West\nDESCRIPTION: Command line example showing how to provide a custom SUIT sign script path using the West build tool with the SUIT_SIGN_SCRIPT CMake variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_signing.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp -- -DSUIT_SIGN_SCRIPT=<sign_script_path>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Ranging Requestor Options in Kconfig\nDESCRIPTION: Kconfig configuration options for setting up the Ranging Requestor (RREQ) library parameters including antenna paths, mode support, and connection limits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/rreq.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_RAS\nCONFIG_BT_RAS_MAX_ANTENNA_PATHS\nCONFIG_BT_RAS_MODE_3_SUPPORTED\nCONFIG_BT_RAS_RREQ\nCONFIG_BT_RAS_RREQ_MAX_ACTIVE_CONN\nCONFIG_HEAP_MEM_POOL_ADD_SIZE_RAS_RREQ_GATT_DM\nCONFIG_BT_RAS_RREQ_LOG_LEVEL\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Zephyr Application\nDESCRIPTION: This snippet specifies the source files to be compiled for the application, indicating that 'src/main.c' is a main entry file for the application. It includes the source file as part of the target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/client/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n    src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Just-In-Time Provisioning with nRF Cloud\nDESCRIPTION: Use the 'cloud_rest jitp' command for provisioning devices with nRF Cloud. Perform this once for each device to establish connection with the cloud service.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_33\n\nLANGUAGE: console\nCODE:\n```\nmosh:~$ cloud_rest jitp\n```\n\n----------------------------------------\n\nTITLE: Cloning Project Repositories with west\nDESCRIPTION: Clones the project repositories after entering the specified nRF Connect SDK revision subdirectory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nwest update\n```\n\n----------------------------------------\n\nTITLE: Including Platform Error Headers - CMake\nDESCRIPTION: This snippet conditionally includes platform error headers for the test binary. It ensures that the necessary error handling functionalities are available during testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(testbinary PRIVATE\n  ${SUIT_SUBSYS_DIR}/plat_err/include\n)\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Source File Inclusion\nDESCRIPTION: This snippet defines the project name and specifies the source file for the application. It declares 'idle_outside_of_main' as the project name and includes 'src/main.c' as a private source file for the target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_outside_of_main/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(idle_outside_of_main)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Initializing Arm CC310 Hardware in C\nDESCRIPTION: Function to initialize the Arm CC310 hardware accelerator with or without RNG support, depending on configuration. It also initializes RTOS mutexes and abort handling for related libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.1.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nbl_validate_firmware()\n```\n\n----------------------------------------\n\nTITLE: Building for nRF5340 DK with Selective Shield Application (Console)\nDESCRIPTION: Command-line instruction for building an application for nRF5340 DK with the nRF21540 EK shield, selectively applying the shield to specific images (app_name_image and ipc_radio).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/21540ek_dev_guide.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -- -D<app_name_image>_SHIELD=nrf21540ek -Dipc_radio_SHIELD=nrf21540ek\n```\n\n----------------------------------------\n\nTITLE: Downloading FICR Update Script for nRF54H20\nDESCRIPTION: Command to download the J-Link script that updates the Factory Information Configuration Registers (FICR) to correctly configure trims of the nRF54H20 SoC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LO https://files.nordicsemi.com/artifactory/swtools/external/scripts/nrf54h20es_trim_adjust.jlink\n```\n\n----------------------------------------\n\nTITLE: Defining Project for Remote Sleep\nDESCRIPTION: Declares a new project named 'remote_sleep_forever', which will contain logic for managing sleep states in a Zephyr-based application. This acts as the central identifier for the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/common/remote_sleep_forever/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(remote_sleep_forever)\n```\n\n----------------------------------------\n\nTITLE: Including RST Documentation Sections\nDESCRIPTION: RST directives for including cryptography sample documentation and structuring the table of contents. Uses toctree for organizing subpages and include directive for general sample information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/crypto.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/crypto/*/README\n   ../../tests/crypto/README\n```\n\n----------------------------------------\n\nTITLE: Defining Model Identifier in C\nDESCRIPTION: Defines the model identifier using a Company ID and a Model ID specific to the vendor, required for recognition within the Bluetooth Mesh network. Both IDs must be compliant with Bluetooth SIG requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/vendor_model/dev_overview.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define YOUR_COMPANY_ID 0x1234\n#define YOUR_MODEL_ID   0x5678\n```\n\n----------------------------------------\n\nTITLE: Defining a Zephyr Project\nDESCRIPTION: This code snippet defines a CMake project named 'HW ID sample' which suggests it is meant for hardware identification. The project is configured to include application-specific sources through the target_sources function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/hw_id/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(\"HW ID sample\")\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Reset Action for Fast Pair in C\nDESCRIPTION: Shows how to implement a custom user reset action that executes during factory reset operations. This weak function can be overridden to delete additional non-volatile data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nvoid bt_fast_pair_factory_reset_user_action_perform(void) {\n    // Custom reset logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This command specifies the minimum required version of CMake for the project. It ensures that the CMake version used is at least 3.20.0, preventing compatibility issues with older CMake versions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/sensor/temp_sensor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: System Build Check\nDESCRIPTION: Checks if the project is being built with the sysbuild argument. If not, it throws a fatal error indicating the correct build procedure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_spim/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Fast Pair Samples\nDESCRIPTION: RST directives defining the documentation structure for Bluetooth Fast Pair samples, including toctree organization and cross-references\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/fast_pair.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _bt_fast_pair_samples:\n\nBluetooth Fast Pair samples\n###########################\n\nThis section lists the |NCS| samples for :ref:`integrating Google Fast Pair with the nRF Connect SDK <ug_bt_fast_pair>`.\n\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n\n|filter_samples_by_board|\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/bluetooth/fast_pair/*/README\n```\n\n----------------------------------------\n\nTITLE: Console Error Message for KMU Slot Range Overflow\nDESCRIPTION: Error message indicating that the number of configured cryptographic slots exceeds the defined Key Management Unit (KMU) range\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/security.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nerror: \"The number of slots exceeds the range of the KMU defined in CONFIG_CHIP_KMU_SLOT_RANGE_START and CONFIG_CHIP_KMU_SLOT_RANGE_END\"\n```\n\n----------------------------------------\n\nTITLE: Setting Key Lifetime in PSA Crypto for CRACEN KMU\nDESCRIPTION: Code snippet demonstrating how to set the key lifetime for CRACEN KMU with different persistence modes (DEFAULT, READ_ONLY, or REVOKABLE) in PSA Crypto API.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/cryptography.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nPSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION(persistence, location)\n```\n\n----------------------------------------\n\nTITLE: Installing Firmware Updates with fwupd\nDESCRIPTION: Command to execute firmware updates on connected devices using fwupd.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/fwupd.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nfwupdmgr update\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This command uses the `find_package` command to locate the Zephyr RTOS SDK. It requires the Zephyr package and uses the environment variable `ZEPHYR_BASE` as a hint for the package location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hids_mouse/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Project Configuration\nDESCRIPTION: Sets up basic CMake project configuration including version requirement, Zephyr package finding, and source file compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/hw_unique_key_tfm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Building nRF52840 Project with nRF21540 EK Shield via Command Line\nDESCRIPTION: Command line instruction for building a project for nRF52840 DK with nRF21540 EK shield attached. Uses west build system with the SHIELD variable to specify nRF21540 EK shield integration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/sample_fem_support.txt#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 -- -DSHIELD=nrf21540ek\n```\n\n----------------------------------------\n\nTITLE: Testing Operation Codes for SC Control Point\nDESCRIPTION: Documentation of operation codes and response formats for the SC Control Point characteristic interactions. Includes commands for distance setting, calibration, and sensor location management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_rscs/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n01 xx xx xx xx # Set Total Distance Value in meters\n02             # Start sensor calibration process\n03 xx          # Update sensor location\n04             # Get supported localizations\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion with CONFIG_BT_ADV_PROV\nDESCRIPTION: This CMake snippet includes the `adv_prov` subdirectory in the build process only if the `CONFIG_BT_ADV_PROV` configuration option is defined. `add_subdirectory_ifdef` is used for conditional subdirectory inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory_ifdef(CONFIG_BT_ADV_PROV adv_prov)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Radio Test App\nDESCRIPTION: Configures include directories for the application to access necessary header files from the multi-domain radio test component.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/single_domain/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PRIVATE\n\t${MULTI_DOMAIN_RT_DIR}/inc\n)\n```\n\n----------------------------------------\n\nTITLE: URI Processing and Validation\nDESCRIPTION: Processes and validates Edge Impulse URIs, handling both absolute and relative paths, and supports multiple URIs separated by spaces or newlines.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/edge_impulse/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nstring(REGEX MATCHALL \".+[ \\r\\n;]\" EI_URI_PREPARE_LIST ${CONFIG_EDGE_IMPULSE_URI})\nstring(REGEX MATCH \"[^ \\n\\r;].+$\" EI_URI_LIST_END ${CONFIG_EDGE_IMPULSE_URI})\n\nlist(APPEND EI_URI_PREPARE_LIST ${EI_URI_LIST_END})\n```\n\n----------------------------------------\n\nTITLE: Uploading Nordic Firmware Images into Cache\nDESCRIPTION: Uploads firmware images for Nordic components into cache partitions using nrfutil, an essential step for prepping firmware before final installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_56\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit upload-cache-raw --serial-port COM7 --cache-file ./build/DFU/dfu_cache_partition_1.bin --pool 1\n```\n\n----------------------------------------\n\nTITLE: Thingy91x DFU Script\nDESCRIPTION: This refers to the `thingy91x_dfu.py` script in the `scripts/west_commands` folder. This script adds the west commands `west thingy91x-dfu` and `west thingy91x-reset` for serial recovery functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Generating EdDSA Private Keys with OpenSSL\nDESCRIPTION: Commands to generate Ed25519 private keys for application, radio core, and OEM root using OpenSSL. These keys are used for signing SUIT envelopes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_signing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genpkey -algorithm Ed25519 -out <KEYS_DIR>/MANIFEST_APPLICATION_GEN1_priv.pem\nopenssl genpkey -algorithm Ed25519 -out <KEYS_DIR>/MANIFEST_RADIOCORE_GEN1_priv.pem\nopenssl genpkey -algorithm Ed25519 -out <KEYS_DIR>/MANIFEST_OEM_ROOT_GEN1_priv.pem\n```\n\n----------------------------------------\n\nTITLE: Include NRF Security Source and Crypto Directories\nDESCRIPTION: This snippet includes additional directories for the NRF security source and cryptographic functions, facilitating their incorporation into the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/tfm/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${NRFXLIB_DIR}/crypto ${CMAKE_CURRENT_BINARY_DIR}/nrf_security_crypto)\nadd_subdirectory(${NRF_SECURITY_ROOT}/src ${CMAKE_CURRENT_BINARY_DIR}/nrf_security_src)\n```\n\n----------------------------------------\n\nTITLE: Configuring toctree for Common Application Framework Documentation in reStructuredText\nDESCRIPTION: A reStructuredText toctree directive that defines the structure of the Common Application Framework documentation. It includes the overview page and all other documentation files in the directory using a glob pattern.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   caf_overview.rst\n   *\n```\n\n----------------------------------------\n\nTITLE: Configuring Linker Settings for Bluetooth Mesh Sensor Types\nDESCRIPTION: This snippet adds a linker source for Bluetooth Mesh sensor types and sets a linker option to allow multiple definitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/light_ctrl/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_linker_sources(SECTIONS ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/sensor_types.ld)\n\nzephyr_ld_options(\n    ${LINKERFLAGPREFIX},--allow-multiple-definition\n    )\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure Definition\nDESCRIPTION: ReStructuredText markup defining the libraries documentation section, including a label reference, title, description, and toctree directive for organizing subpages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _libraries:\n\nLibraries\n#########\n\nNordic Semiconductor provides a variety of libraries and services that are used in samples and applications in the |NCS|.\n\nHere you can find documentation for these libraries, including API documentation.\n\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   */index\n```\n\n----------------------------------------\n\nTITLE: Creating Link Check Target for Documentation in CMake\nDESCRIPTION: Defines a 'linkcheck' target that depends on link check targets for nRF, nrfxlib, and MCUboot documentation sets, used for verifying links in the documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(linkcheck)\nadd_dependencies(linkcheck\n    nrf-linkcheck\n    nrfxlib-linkcheck\n    mcuboot-linkcheck\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ISO Reception Handling in C\nDESCRIPTION: Manages reception of isochronous data streams with synchronized LED toggling based on received timestamps. Includes immediate LED toggle option for latency visualization.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_time_sync/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n// iso_rx.c\n// Handles isochronous data reception\n// Configures timer triggers for LED toggling\n// Processes received SDUs and timestamps\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Bluetooth Media Control Sources in CMake\nDESCRIPTION: Conditionally adds media-specific Bluetooth content control source files to the build when either MCC (Media Control Client) or MCS (Media Control Server) configurations are enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_content_control/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_BT_MCC OR CONFIG_BT_MCS)\ntarget_sources(app PRIVATE\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/media/bt_content_ctrl_media.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Command Sequence for HE TB Packet Transmit\nDESCRIPTION: Demonstrates the proper order of commands for configuring and initiating an HE TB packet transmission. The commands must be executed in a specific sequence to properly configure the transmission parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 100\nuart:~$ wifi_radio_test tx_pkt_tput_mode 5\n```\n\n----------------------------------------\n\nTITLE: Finding the Zephyr Package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr RTOS package. It requires Zephyr and uses the environment variable `ZEPHYR_BASE` as a hint for finding the package location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/throughput/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to LwM2M Server in MoSh\nDESCRIPTION: Console command to establish a connection to the LwM2M server from the Modem Shell application, with example output showing successful registration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_51\n\nLANGUAGE: console\nCODE:\n```\nmosh:~$ cloud_lwm2m connect\nLwM2M: Starting LwM2M client\nLwM2M: Registration complete\n```\n\n----------------------------------------\n\nTITLE: Provisioning SDFW and SCFW on nRF54H20\nDESCRIPTION: Command to provision the Secure Domain Firmware and System Controller Firmware from bundle to the nRF54H20 DK using nRF Util's x-provision-nrf54h command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-provision-nrf54h --firmware <path-to_bundle_zip_file> --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Defining the Project\nDESCRIPTION: This snippet defines the project name as 'remote'. This sets the name of the CMake project and is used internally by CMake to manage build targets and dependencies. The project name is a symbolic identifier for the overall project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_gpio/remote/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(remote)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Matter Lock\nDESCRIPTION: Sets up the CMake project, finds the Zephyr package, and includes necessary Matter-related CMake files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/lock/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(matter-lock)\n\n# Enable GNU STD support and initialize the Matter Data Model.\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/nrfconnect/app/enable-gnu-std.cmake)\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/src/app/chip_data_model.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Backend Options\nDESCRIPTION: Configuration options specific to using SUIT as the DFU backend, including SUIT Firmware Update Management and related dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dfu_mcumgr.rst#2025-04-21_snippet_2\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MGMT_SUITFU=y\nCONFIG_MGMT_SUITFU_GRP_SUIT=y\nCONFIG_SSF_SUIT_SERVICE_ENABLED=y\nCONFIG_ZCBOR_CANONICAL=y\nCONFIG_MCUMGR_SMP_LEGACY_RC_BEHAVIOUR=y\nCONFIG_SUIT=y\n```\n\n----------------------------------------\n\nTITLE: Checking Git Commit History in Zephyr Fork\nDESCRIPTION: Shell command to view the complete list of NCS specific commits and cherry-picked commits since v2.6.0 in the Zephyr fork.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.6.3.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v3.5.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Sample READMEs in reStructuredText\nDESCRIPTION: This snippet generates a table of contents for README files of individual key samples. It uses glob patterns to automatically include all relevant files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/keys.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/keys/*/README\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Buffer Allocation\nDESCRIPTION: Configures memory buffer allocation sources based on build type (TF-M vs secure-only). Adds appropriate source files for heap management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_MBEDTLS_ENABLE_HEAP)\n  if (CONFIG_BUILD_WITH_TFM)\n    list(APPEND src_crypto ${NRF_SECURITY_ROOT}/src/legacy/memory_buffer_alloc.c)\n  else()\n    list(APPEND src_crypto ${ARM_MBEDTLS_PATH}/library/memory_buffer_alloc.c)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SLM GPIO Pins for nRF91 Series DKs\nDESCRIPTION: Kconfig settings for power and indication pins used by the Serial LTE Modem application on nRF91 Series development kits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_description.rst#2025-04-21_snippet_3\n\nLANGUAGE: kconfig\nCODE:\n```\n# When working with PC terminal, unmask the following config.\n#CONFIG_SLM_POWER_PIN=8\n#CONFIG_SLM_INDICATE_PIN=0\n\n# When working with external MCU, unmask the following config.\nCONFIG_SLM_POWER_PIN=31\nCONFIG_SLM_INDICATE_PIN=30\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Gazell Samples in reStructuredText\nDESCRIPTION: This snippet creates a table of contents (toctree) for Gazell sample README files. It uses glob to automatically include all matching files in the specified directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/gazell.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/gazell/*/README\n```\n\n----------------------------------------\n\nTITLE: Targeting Application Sources\nDESCRIPTION: This snippet specifies the gathered source files to the app target in a private context so that they are only used within this target, maintaining encapsulation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/usb/hid-keyboard/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Initializing PSA API and Generating Chacha20 Key\nDESCRIPTION: This snippet outlines the initialization process, including initializing the PSA API and generating a random Chacha20 key for import into the PSA crypto keystore.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/chachapoly/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Initialization:\n\n   a. The Platform Security Architecture (PSA) API is initialized.\n   #. A random Chacha20 key is generated and imported into the PSA crypto keystore.\n```\n\n----------------------------------------\n\nTITLE: Enforcing Sysbuild Requirement\nDESCRIPTION: Validates that the project is being built with sysbuild, which is mandatory for this multi-image application\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_counter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering Enhanced ACK-based Link Metrics Probing\nDESCRIPTION: Configures Enhanced ACK-based Link Metrics probing to receive metrics in acknowledgment frames, providing immediate link quality feedback.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot linkmetrics mgmt fe80:0:0:0:10b1:93ea:c0ee:eeb7 enhanced-ack register qm\nDone\nReceived Link Metrics data in Enh Ack from neighbor, short address:0xa400 , extended address:12b193eac0eeeeb7\n- LQI: 255 (Exponential Moving Average)\n- Margin: 68 (dB) (Exponential Moving Average)\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Project\nDESCRIPTION: Defines the Zephyr project named 'uart_idle'. This command is essential for setting up the project within the Zephyr build environment.  It initializes the project and allows for specifying source files and other project configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/uart_idle/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(uart_idle)\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion with CONFIG_BT_RPC\nDESCRIPTION: This CMake snippet includes the `rpc` subdirectory in the build process only if the `CONFIG_BT_RPC` configuration option is defined. `add_subdirectory_ifdef` is used for conditional subdirectory inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory_ifdef(CONFIG_BT_RPC rpc)\"\n```\n\n----------------------------------------\n\nTITLE: Building Program with Custom Options in Console\nDESCRIPTION: Showcases a console command to build a program with specified arguments for application, build type, and device. Requires a terminal or console access and appropriate toolchain setup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/cheat_sheet.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n  .. code-block:: console\n\n     python buildprog.py -c app -b debug -d both\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library Sources for DM RPC Client\nDESCRIPTION: Adds dm_rpc_client.c source file to the Zephyr library build process. This CMake command ensures the DM RPC client implementation is compiled as part of the project build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dm/rpc/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(dm_rpc_client.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Decrypt Test Utils Library in CMake\nDESCRIPTION: Creates and configures a library named 'suit_decrypt_test_utils' with interface include directories, source files, and links it to the suit_metadata library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/common/decrypt_utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_named(suit_decrypt_test_utils)\ntarget_include_directories(suit_decrypt_test_utils INTERFACE .)\n\nzephyr_library_sources(decrypt_test_utils.c)\nzephyr_library_link_libraries(suit_metadata)\n```\n\n----------------------------------------\n\nTITLE: Downloading FICR Update Script for nRF54H20\nDESCRIPTION: Command to download the J-Link script for updating the Factory Information Configuration Registers (FICR) on the nRF54H20 SoC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LO https://files.nordicsemi.com/artifactory/swtools/external/scripts/nrf54h20es_trim_adjust.jlink\n```\n\n----------------------------------------\n\nTITLE: Configuring TF-M and Fault Injection Protection in CMake\nDESCRIPTION: Sets up MCUboot to boot TF-M and adds fault injection protection for boards with non-secure qualifiers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/sysbuild/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(\"${BOARD}${BOARD_QUALIFIERS}\" MATCHES \"(_|/)ns$\")\n  sysbuild_add_dependencies(CONFIGURE ${DEFAULT_IMAGE} mcuboot)\n\n  add_overlay_config(\n    mcuboot\n    ${ZEPHYR_NRF_MODULE_DIR}/modules/mcuboot/tfm.conf\n  )\n\n  set_config_bool(mcuboot CONFIG_BOOT_FIH_PROFILE_DEFAULT_LOW y)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth GATTP Source\nDESCRIPTION: This snippet conditionally includes the Generic Attribute Profile (GATT) client source file based on the CONFIG_BT_GATTP configuration. It facilitates GATT operations in Bluetooth interactions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_GATTP gattp.c)\n```\n\n----------------------------------------\n\nTITLE: Defining GPIO Port State Structure in C\nDESCRIPTION: Definition of port_state struct containing GPIO device name, pin state array pointer, and array size for configuring GPIO ports.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/board.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct port_state {\n    const char *name;     /* GPIO device name */\n    const struct pin_state *ps; /* Pointer to pin state array */\n    size_t ps_count;     /* Size of pin state array */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version for Zephyr Project\nDESCRIPTION: This snippet sets the minimum required version for CMake to 3.20.0, which is essential for compatibility with the Zephyr framework and ensures proper project configuration. The project is named 'NONE', indicating it is a template project. Ensure that CMake is installed and accessible in your environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/at_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: Adding Generated Sources to TF-M Secure Peripheral Partition in CMake\nDESCRIPTION: Adds auto-generated source files to the tfm_app_rot_partition_spp library and tfm_partitions interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/secure_peripheral_partition/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(tfm_app_rot_partition_spp\n    PRIVATE\n        ${CMAKE_BINARY_DIR}/secure_peripheral_partition/auto_generated/intermedia_tfm_secure_peripheral_partition.c\n)\ntarget_sources(tfm_partitions\n    INTERFACE\n        ${CMAKE_BINARY_DIR}/secure_peripheral_partition/auto_generated/load_info_tfm_secure_peripheral_partition.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ECDSA P-256 Signature Type for MCUboot\nDESCRIPTION: Employs the elliptic curve digital signature algorithm using the P-256 curve for enhanced security. The sysbuild option is used to establish a coherent environment for the entire system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_10\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_SIGNATURE_TYPE_ECDSA_P256\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`SB_CONFIG_BOOT_SIGNATURE_TYPE_ECDSA_P256`\"\n```\n\n----------------------------------------\n\nTITLE: Include OpenThread Headers\nDESCRIPTION: This snippet includes the OpenThread module headers required for the application build, ensuring that necessary definitions are accessible during the compile phase.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(\n  ${ZEPHYR_OPENTHREAD_MODULE_DIR}/include\n)\n```\n\n----------------------------------------\n\nTITLE: LwM2M Shell Command to Resume Client\nDESCRIPTION: Shell command to resume the LwM2M client operation after it has been paused. This is part of the testing procedures for verifying shell functionality with the LwM2M client.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/sample_description.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ lwm2m resume\n```\n\n----------------------------------------\n\nTITLE: Building SMP Server for nRF54L15 DK with SPI Flash\nDESCRIPTION: Build command for the SMP server sample on nRF54L15 DK that uses external SPI Flash as the update image bank.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/fota_update.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwest build -b nrf54l15dk/nrf54l15/cpuapp -T sample.mcumgr.smp_svr.bt.nrf54l15dk.ext_flash\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Building for MCUmgr Server Image Management\nDESCRIPTION: Command for building the sample with MCUmgr server image management enabled using serial overlay configuration and devicetree overlay.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/smp_svr/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwest build --pristine -b nrf9160dk/nrf52840 -- -DEXTRA_CONF_FILE=\"overlay-serial.conf\" -DEXTRA_DTC_OVERLAY_FILE=\"nrf9160dk_nrf52840_mcumgr_srv.overlay\"\n```\n\n----------------------------------------\n\nTITLE: Assistance Data Request Console Output\nDESCRIPTION: Console log indicating the need for assistance data during GNSS initialization, showing ephemeris and almanac flag states\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/gnss/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n[00:00:04.488,494] <inf> gnss_sample: Assistance data needed, ephe 0xffffffff, alm 0xffffffff, flags 0x3b\n```\n\n----------------------------------------\n\nTITLE: Project Configuration for Custom Trace Backend\nDESCRIPTION: Project configuration (prj.conf) settings needed to enable the modem trace functionality and select the custom trace backend for use in the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_trace.rst#2025-04-21_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nCONFIG_NRF_MODEM_LIB_TRACE=y\nCONFIG_NRF_MODEM_LIB_TRACE_BACKEND_MY_TRACE_BACKEND=y\n```\n\n----------------------------------------\n\nTITLE: Building for Thingy:53 with nRF7002 EB Shield\nDESCRIPTION: Command line build instruction using west build tool to compile for Thingy:53 with nRF7002 EB shield\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf7002eb_dev_guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b thingy53/nrf5340/cpuapp -- -DSHIELD=nrf7002eb\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories in CMake for Zephyr\nDESCRIPTION: This snippet specifies the include directories for the project, making sure that the compiler knows where to find header files for the project. It establishes the 'include' folder as part of the include path for the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Defining SUIT Manifest-accessible Variable Component ID\nDESCRIPTION: Demonstrates how to construct the component ID for a manifest-accessible variable. The ID consists of the MFST_VAR constant followed by a specific identifier.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/suit_mfst_var.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n[ MFST_VAR, <id> ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Key Definitions in C\nDESCRIPTION: Configuration file structure for defining dual-purpose keys in fn_keys_def.h. The fn_keys array must be sorted by key ID as the module uses binary search for key lookup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/fn_keys.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// fn_keys_def.h\nstruct fn_key {\n    uint16_t key_id;\n    uint16_t fn_key_id;\n};\n\nstatic const struct fn_key fn_keys[] = {\n    // Must be sorted by key_id\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving NCS-specific commits since v1.9.0 in Zephyr fork\nDESCRIPTION: Git command to list all NCS-specific commits made to the Zephyr fork (sdk-zephyr) since the v1.9.0 release. This shows changes unique to NCS that are not present in the upstream Zephyr repository.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.9.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v2.7.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: Conditional Zephyr Library Configuration\nDESCRIPTION: This snippet conditionally includes source files and directories for Zephyr based on the CONFIG_SSF_V_2 macro. It specifies the sources for PSA API and IPC service while setting the include directories for the crypto functionalities. Dependencies include configuration flags and the Zephyr environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/ssf_secdom/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_SSF_V_2)\n  zephyr_library()\n  zephyr_library_sources(\n    # ironside_psa_ns_api.c provides psa_call. psa_call is invoked by\n    # serialized functions from tfm_crypto_api.c and sends a message\n    # over IPC.\n    ${CMAKE_CURRENT_LIST_DIR}/ironside_se_psa_ns_api.c\n    # ironside_se_psa_ns_ipc.c provides an IPC service to ironside_se_psa_ns_api.c\n    ${CMAKE_CURRENT_LIST_DIR}/ironside_se_psa_ns_ipc.c\n    # tfm_crypto_api.c provides and serializes the PSA Crypto API.\n    ${ZEPHYR_TRUSTED_FIRMWARE_M_MODULE_DIR}/interface/src/tfm_crypto_api.c\n    )\n\n  zephyr_library_include_directories(\n    ${NRF_DIR}/include/tfm\n    .\n    )\n\n  if(CONFIG_PSA_SSF_CRYPTO_CLIENT_OUT_BOUNCE_BUFFERS)\n    zephyr_library_sources(\n      ${CMAKE_CURRENT_LIST_DIR}/bounce_buffers.c\n      )\n  endif()\nelse()\ntarget_sources(${mbedcrypto_target}\n  PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}/ssf_crypto.c\n    ${CMAKE_CURRENT_LIST_DIR}/ssf_psa_core_compatibility.c\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Minimum CMake Version Requirement - CMake\nDESCRIPTION: This snippet sets the minimum version of CMake required for the project to function properly. It is essential for ensuring that the features used in the CMake configuration are compatible with the installed version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/multicore_system_off/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Retrieving NCS-specific commits since v2.4.0 in Git\nDESCRIPTION: Git command to list all NCS-specific and cherry-picked commits since v2.4.0 in the Zephyr fork.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.4.3.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v3.3.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Library\nDESCRIPTION: This snippet utilizes the 'zephyr_library()' command to define a new Zephyr library along with 'zephyr_library_sources()' to specify its source files. It is essential for organizing components within a Zephyr-based project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/gcf_sms/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(gcf_sms.c)\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Development Kits\nDESCRIPTION: Command to list all connected development kits and their serial numbers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7_99-cs1.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device list\n```\n\n----------------------------------------\n\nTITLE: Defining Function for Adding Documentation Dependencies in CMake\nDESCRIPTION: Creates a function to add dependencies to both regular and live documentation targets if available, used for managing dependencies between different documentation sets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_doc_dependencies docset)\n  add_dependencies(${docset}-all ${ARGN})\n  if(SPHINXAUTOBUILD)\n    add_dependencies(${docset}-live-all ${ARGN})\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr Library for Bootloader\nDESCRIPTION: Creates a Zephyr library and adds the bootloader source file bl_boot.c to the library. This configures the build system to include the bootloader source in the project compilation process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bootloader/bl_boot/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(bl_boot.c)\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Project Setup\nDESCRIPTION: Initializes the CMake project with minimum version requirement and sets up Zephyr package dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/fota_common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_cloud_fota_common_test)\nset(NRF_SDK_DIR ${ZEPHYR_BASE}/../nrf)\ncmake_path(NORMAL_PATH NRF_SDK_DIR)\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum CMake Version and Project Requirements\nDESCRIPTION: This snippet sets the minimum required version of CMake for the project and specifies that it depends on the Zephyr framework, which is essential for building applications on the Nordic SDK. The project is labeled 'NONE' as it is a library or a module setup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_nfc_pairing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: Certificate Processing Function Calls\nDESCRIPTION: These lines call the `process_certificate` function for the CA certificate and private key, generating the necessary .inc files and compiler definitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\tprocess_certificate(\"HTTP_SERVER_CA_CERT\" \"server_certificate.pem\")\n\tprocess_certificate(\"HTTP_SERVER_PRIVATE_KEY\" \"server_private_key.pem\")\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth DDFS Source\nDESCRIPTION: This includes the Device Firmware Distribution File Service (DDFS) source if CONFIG_BT_DDFS is defined. It facilitates firmware distribution over Bluetooth.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_DDFS ddfs.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring BIS Mode with Two Gateways in Kconfig\nDESCRIPTION: Sets Kconfig options to enable BIS mode with two gateways in the nRF5340 Audio application. This allows BIS headsets to switch between two gateway devices for receiving audio streams.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/configuration.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_TRANSPORT_BIS=y\nCONFIG_BT_AUDIO_USE_BROADCAST_NAME_ALT=y\n```\n\n----------------------------------------\n\nTITLE: Discovering Application Source Files\nDESCRIPTION: Uses FILE(GLOB) to recursively find all .c source files in the src/ directory. This dynamically includes all source files for compilation without manually listing them.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tnep_tag/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n```\n\n----------------------------------------\n\nTITLE: Custom Board Runner Arguments Macro\nDESCRIPTION: Defines a macro to set alternative QSPI configuration for Thingy53 board when using nrfjprog for flashing\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/extxip_smp_svr/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(app_set_runner_args)\n  if(CONFIG_BOARD_THINGY53_NRF5340_CPUAPP)\n    board_runner_args(nrfjprog \"--qspiini=${CMAKE_CURRENT_SOURCE_DIR}/Qspi_thingy53.ini\")\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Updating Kconfig Option for Heap Memory Pool Size\nDESCRIPTION: Sets the CONFIG_HEAP_MEM_POOL_SIZE Kconfig option to 1280 for networking samples to meet Zephyr requirements and remove build warnings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-3.0.0-preview2.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_HEAP_MEM_POOL_SIZE=1280\n```\n\n----------------------------------------\n\nTITLE: Including Test Template\nDESCRIPTION: This line includes a test template CMake file. This template likely contains common configurations and functions used for setting up and running tests within the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/plat_devconfig/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(../cmake/test_template.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Compile Definitions\nDESCRIPTION: This snippet defines a compile definition for the Zephyr build system. It specifies that the `HAVE_CONFIG_H` definition should be included during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/curl/tool/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_compile_definitions(HAVE_CONFIG_H)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DTLS Session Idle Timeout\nDESCRIPTION: AT command to set the idle timeout for DTLS sessions used by the library. Specified in seconds, with special values -1 to disable and 0 for default.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_20\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"session_idle_timeout\"[,<session_idle_timeout>]\n```\n\n----------------------------------------\n\nTITLE: Defining Request Message Structure in Protocol Buffers\nDESCRIPTION: Defines the structure of the Request message used by the configurator to request actions on the target device, including operation codes, scan parameters, and Wi-Fi configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/services/wifi_prov.rst#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Request {\n  optional enum op_code = 1;\n  optional enum scan_params = 2;\n  optional message config = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Nordic System Off\nDESCRIPTION: Sets up a CMake project with Zephyr, specifying Kconfig root and project requirements for system off functionality\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/system_off/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nset(KCONFIG_ROOT $ENV{ZEPHYR_BASE}/samples/boards/nordic/system_off/Kconfig)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(system_off)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for SUIT SDFW Mocks\nDESCRIPTION: This CMake command sets the include directories for the `suit_sdfw_mocks` interface library. It specifies that the include directory is located within the current list directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/mocks/sdfw/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(suit_sdfw_mocks INTERFACE\n  ${CMAKE_CURRENT_LIST_DIR}/include\n)\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Configuration Combination\nDESCRIPTION: Checks if both volume controller and renderer are enabled, which is not a supported configuration, and throws a CMake error if detected.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_rendering_and_capture/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_BT_VCP_VOL_CTLR AND CONFIG_BT_VCP_VOL_REND)\n\tmessage(FATAL_ERROR \"No support for vol controller and renderer on same device\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling Zephyr DIS module\nDESCRIPTION: To enable the Zephyr DIS module and the Firmware Revision characteristic, set the `CONFIG_BT_DIS` and `CONFIG_BT_DIS_FW_REV` Kconfig options to use the Android intent feature for firmware updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_5\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BT_DIS\"\n```\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BT_DIS_FW_REV\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Image Validity with imgtool\nDESCRIPTION: This command verifies the validity of a specified image before uploading by checking its SHA-256 hash. The -k option is needed for signature verification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nimgtool verify -k <your-signature-key> <your-image>\n```\n\n----------------------------------------\n\nTITLE: Including Directories for Storage Components\nDESCRIPTION: This snippet specifies the directories for including header files needed for the storage functionality. It ensures the app can access the required interfaces.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/storage_nrf54h20/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PRIVATE\n  ${SUIT_SUBSYS_DIR}/storage/include\n)\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth CGMS Subdirectory\nDESCRIPTION: This snippet adds a subdirectory for the Continuous Glucose Monitoring Service (CGMS) if CONFIG_BT_CGMS is defined. This allows for modular inclusion of related source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_BT_CGMS cgms)\n```\n\n----------------------------------------\n\nTITLE: Downloading FICR Update Script\nDESCRIPTION: This command downloads a J-Link script used to update the Factory Information Configuration Registers (FICR) on the nRF54H20 SoC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LO https://files.nordicsemi.com/artifactory/swtools/external/scripts/nrf54h20es_trim_adjust.jlink\n```\n\n----------------------------------------\n\nTITLE: Adding Sources to Target\nDESCRIPTION: This snippet adds the previously globbed source files to the private target 'app'. This ensures that the application can use these source files during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/i2s/i2s_api/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Programming Wi-Fi Radio Test Firmware (Combined Mode)\nDESCRIPTION: Command to program the Wi-Fi Radio test firmware in combined mode to the application core of nRF7002 DK or EK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/test_setup.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nrfutil device program --firmware merged.hex --core Application --options chip_erase_mode=ERASE_ALL,reset=RESET_SYSTEM\n```\n\n----------------------------------------\n\nTITLE: Console Output - PMIC Status Message\nDESCRIPTION: Displays the PMIC device status upon successful initialization. This snippet is part of the testing process and shows the expected console output after connecting the development kit.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_one_button/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nPMIC device ok\n```\n\n----------------------------------------\n\nTITLE: Adding Bluetooth Support in CMake\nDESCRIPTION: This snippet conditionally adds a subdirectory for Bluetooth support if CONFIG_BT is enabled. It ensures that the Bluetooth features are integrated into the build process only when required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_BT bluetooth)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files in CMake for nRF Connect SDK\nDESCRIPTION: Adds main.c from the current source directory to the application build target. This is a fundamental CMake configuration used in nRF Connect SDK projects to include source files in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/broadcast_source/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring ZZHC Thread Behavior in Kconfig\nDESCRIPTION: This snippet shows how to configure the ZZHC library thread behavior using Kconfig options. It includes options for adjusting the stack size and thread priority.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/zzhc.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_ZZHC_STACK_SIZE=<size>\nCONFIG_ZZHC_THREAD_PRIO=<priority>\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option for Crypto Hardware Accelerator\nDESCRIPTION: This snippet sets a TFM CMake option to enable the hardware crypto accelerator. This option is enabled unconditionally.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET zephyr_property_target\n  APPEND PROPERTY TFM_CMAKE_OPTIONS\n  -DCRYPTO_HW_ACCELERATOR=True\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bond Erase Functionality in Kconfig\nDESCRIPTION: Kconfig options for enabling and configuring the bond erase feature. These options define the button, click type, and timeout for triggering bond erasure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_bond.rst#2025-04-21_snippet_1\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_CAF_BLE_BOND_PEER_ERASE_CLICK=y\nCONFIG_CAF_BLE_BOND_PEER_ERASE_CLICK_KEY_ID=<key_id>\nCONFIG_CAF_BLE_BOND_PEER_ERASE_CLICK_SHORT=y\n# or\nCONFIG_CAF_BLE_BOND_PEER_ERASE_CLICK_LONG=y\n# or\nCONFIG_CAF_BLE_BOND_PEER_ERASE_CLICK_DOUBLE=y\nCONFIG_CAF_BLE_BOND_PEER_ERASE_CLICK_TIMEOUT=<timeout_ms>\n```\n\n----------------------------------------\n\nTITLE: Adding Core Host Extensions Source\nDESCRIPTION: Adds the host_extensions.c source file to the Zephyr build process unconditionally. This file likely contains core host-related functionality for the Nordic nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/host_extensions/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources(host_extensions.c)\n```\n\n----------------------------------------\n\nTITLE: AT Command Basic Syntax\nDESCRIPTION: Demonstrates the three main types of AT commands: Set command for configuring values, Read command for checking current values, and Test command for validating command existence and parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT Commands\nCODE:\n```\n<CMD>[=...] // Set command\\n<CMD>? // Read command\\n<CMD>=? // Test command\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Readiness Timeout in Kconfig\nDESCRIPTION: Sets the cloud readiness timeout in seconds. If the connection to nRF Cloud does not become ready within this timeout, the sample will reset its connection and try again.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_CLOUD_READY_TIMEOUT_SECONDS\n```\n\n----------------------------------------\n\nTITLE: Building Single-Core ICMSG Sending Tests for nRF5340\nDESCRIPTION: Console commands to build the sample for testing one-way ICMSG communication on nRF5340 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/ipc/ipc_service/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf5340dk/nrf5340/cpuapp -T sample.ipc.ipc_service.nrf5340dk_icmsg_cpuapp_sending .\nwest build -p -b nrf5340dk/nrf5340/cpuapp -T sample.ipc.ipc_service.nrf5340dk_icmsg_cpunet_sending .\n```\n\n----------------------------------------\n\nTITLE: Controlling high-frequency clock output with lclk command in Shell\nDESCRIPTION: Enables or disables high-frequency clock output on a selected GPIO pin. Clock frequency depends on the SoC used.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\ncustom lclk *10* *1*\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files\nDESCRIPTION: Adds the source file `src/main.c` to the `app` target as a private source. This means that the source file will be compiled and linked into the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_pwm_loopback/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Referencing FTP Client Callback Types\nDESCRIPTION: Definition references for callback functions used to handle FTP control messages and download data. The library uses two separate callback types for different operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/ftp_client.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nftp_client_callback_t\n```\n\n----------------------------------------\n\nTITLE: VERSION File Update for SUIT Envelope Sequence Number\nDESCRIPTION: Configuration in the VERSION file to update the sequence numbers for the SUIT envelope manifests, incrementing both root and local application sequence numbers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nAPP_ROOT_SEQ_NUM = 2\nAPP_LOCAL_1_SEQ_NUM = 2\n```\n\n----------------------------------------\n\nTITLE: Running the AppImage on Linux\nDESCRIPTION: This code snippet shows the command to run the Matter Manufacturer Cluster Editor AppImage on Linux systems after making it executable. This command launches the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/manufacturer_cluster_editor_tool.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"./nrfconnect-matter-manufacturer-cluster-editor_linux.AppImage\"\n```\n\n----------------------------------------\n\nTITLE: Adding SUIT Platform Source Files\nDESCRIPTION: Adds multiple source files for different SUIT platform-specific implementations, including conditional source inclusion based on configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/app/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(src/suit_plat_swap.c)\nzephyr_library_sources(src/suit_plat_fetch_app_specific.c)\nzephyr_library_sources_ifdef(CONFIG_SUIT_CHECK_IMAGE_MATCH src/suit_plat_check_image_match_app_specific.c)\n```\n\n----------------------------------------\n\nTITLE: ZAP Generate Command for Matter Data Model\nDESCRIPTION: West command to generate Matter application C++ data model files from a .zap project file. Creates output files in a default or specified directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/tools.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nwest zap-generate\n```\n\n----------------------------------------\n\nTITLE: Defining Switches Table in reStructuredText\nDESCRIPTION: reStructuredText table defining power and debug switches functionality for nRF5340 Audio applications\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/user_interface.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n+-------------------+-------------------------------------------------------------------------------------+---------------------------------------+\n| Switch            | Function                                                                            | Applications                          |\n+===================+=====================================================================================+=======================================+\n| **POWER**         | Turns the development kit on or off.                                                | All                                   |\n+-------------------+-------------------------------------------------------------------------------------+---------------------------------------+\n| **DEBUG ENABLE**  | Turns on or off power for debug features.                                           | All                                   |\n|                   | This switch is used for accurate power and current measurements.                    |                                       |\n+-------------------+-------------------------------------------------------------------------------------+---------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directory for the app target to the 'interface' directory, allowing the source files to access necessary header files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/coap_server/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE interface)\n```\n\n----------------------------------------\n\nTITLE: Setting ICACHE Configuration Command\nDESCRIPTION: Command to enable or disable the ICACHE on the CMD device. The value parameter can be set to 0 (disabled) or 1 (enabled).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_50\n\nLANGUAGE: plaintext\nCODE:\n```\ncustom lseticache *<value>*\n```\n\n----------------------------------------\n\nTITLE: Build Command with West for nRF5340 DK\nDESCRIPTION: Command to build WiFi shell sample with external flash patch support using West build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/fw_patches_ext_flash.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf5340dk/nrf5340/cpuapp samples/wifi/shell -- -Dnrf_wifi_shell_SHIELD=nrf7002ek -Dnrf_wifi_shell_SNIPPET=\"nrf70-fw-patch-ext-flash\"\n```\n\n----------------------------------------\n\nTITLE: Setting Timing Parameters for nRF21540 FEM Interface\nDESCRIPTION: Devicetree properties for configuring timing parameters of the nRF21540 FEM interface, including settle times and hold times.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nRF21540_optional_properties.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\ntx-en-settle-time-us = <10>;\nrx-en-settle-time-us = <10>;\npdn-settle-time-us = <5>;\ntrx-hold-time-us = <20>;\n```\n\n----------------------------------------\n\nTITLE: Generating Include Files for Decompression Test Data\nDESCRIPTION: Generates include files from binary data files for ARM Thumb decompression testing, using Zephyr's generate_inc_file_for_target function\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_compress/decompression/arm_thumb/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_inc_file_for_target(\n  app\n  ${ZEPHYR_NRFXLIB_MODULE_DIR}/tests/subsys/nrf_compress/decompression/arm_thumb.dat\n  ${ZEPHYR_BINARY_DIR}/include/generated/arm_thumb.inc\n  )\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for NCS Specific Changes\nDESCRIPTION: Shell command to display the list of NCS specific commits and cherry-picked commits since v2.1.0 in the Zephyr fork\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.4.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v3.1.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Recovery Button Directory in CMake\nDESCRIPTION: Conditionally adds the recovery_button subdirectory to the build if CONFIG_SUIT_RECOVERY_BUTTON is enabled. Part of the Nordic SDK's SUIT (Software Update for Internet of Things) implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/app_tools/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_SUIT_RECOVERY_BUTTON recovery_button)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directories with Zephyr and CMake\nDESCRIPTION: This snippet sets include directories using Zephyr's CMake functions. It requires the Zephyr SDK and CMake to manage build directories for LwM2M application components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/lwm2m/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Including USB Common Configuration\nDESCRIPTION: Imports common USB configuration settings from Zephyr's sample subsystem, ensuring consistent USB-related build parameters\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/usb/hid-mouse/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${ZEPHYR_BASE}/samples/subsys/usb/common/common.cmake)\n```\n\n----------------------------------------\n\nTITLE: GATT Service Implementation using Zephyr BLE Stack\nDESCRIPTION: Custom GATT Service implementation using BT_GATT_SERVICE_DEFINE macro to define a service that exposes LLPM support status and Hardware ID information. The implementation relies on Zephyr's BLE stack and hwinfo API.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dev_descr.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nBT_GATT_SERVICE_DEFINE(...)\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion for Power Mode Handler\nDESCRIPTION: This snippet checks if certain configurations related to the Nordic Semiconductor NRF54H20 microcontroller are defined and conditionally includes an additional power management source file. This allows for specific optimizations based on the chip variant in use.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_stm/remote/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif((DEFINED CONFIG_SOC_NRF54H20_CPUPPR) OR (DEFINED CONFIG_SOC_NRF54H20_ENGB_CPUPPR))\n\tmessage(STATUS \"Power Mode handler for RISC V is included.\")\n\ttarget_sources(app PRIVATE ../../common/power_off.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Pressure Sensor Device Header\nDESCRIPTION: Header file defining PressureSensorDevice class inheriting from MatterBridgedDevice with required declarations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#pragma once\n\n#include \"matter_bridged_device.h\"\n\nclass PressureSensorDevice : public Nrf::MatterBridgedDevice {\npublic:\n\nPressureSensorDevice(const char *uniqueID, const char *nodeLabel);\nstatic constexpr uint16_t kPressureSensorDeviceTypeId = 0x0305;\n\n};\n```\n\n----------------------------------------\n\nTITLE: Locating Zephyr SDK\nDESCRIPTION: Uses find_package to locate the Zephyr SDK, which is a critical dependency for the Nordic Semiconductor project build process\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_hpu_temp_meas/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Running FICR Update Script on Linux/Mac\nDESCRIPTION: Command to run the FICR update J-Link script on Linux or Mac OS systems to properly configure the nRF54H20 SoC trims.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nJLinkExe -CommanderScript nrf54h20es_trim_adjust.jlink\n```\n\n----------------------------------------\n\nTITLE: Verifying Lifecycle State of nRF54H20\nDESCRIPTION: Command to check the current lifecycle state of the nRF54H20 SoC using nrfutil. Requires the device serial number.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-adac-discovery --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Adding a Simulated Bridged Device\nDESCRIPTION: Command syntax for adding a simulated device to the Matter bridge. Requires specifying a device type code and optional node label.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_3\n\nLANGUAGE: parsed-literal\nCODE:\n```\nmatter_bridge add *<device_type>* *[\"node_label\"]*\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.20.0. This ensures that the project is built with a compatible CMake version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/gpio_idle/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet specifies the minimum version of CMake and finds the Zephyr package required for the project. It ensures that the necessary Zephyr utilities are available for building the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/gpio/gpio_basic_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zephyr Project for Bluetooth Testing in CMake\nDESCRIPTION: Initializes a Zephyr project named 'tester', finds the Zephyr package, and configures minimum CMake version requirements. This establishes the foundation for the Bluetooth testing application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/bluetooth/tester/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(tester)\n```\n\n----------------------------------------\n\nTITLE: Get DUT Radio Power - Custom Command Usage\nDESCRIPTION: This command retrieves the current transmission power setting for the DUT device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ncustom rgetpower\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: This command defines the name of the CMake project. In this instance, the project name is set to NONE, meaning there might be a different mechanism to define the project name elsewhere, or it is intentionally left undefined at this stage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/record_launch_app/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(NONE)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Nordic Semiconductor Application\nDESCRIPTION: This CMake snippet sets up the project configuration for a Nordic Semiconductor application. It specifies the minimum CMake version, finds the Zephyr package, sets the project name to 'NONE', and defines the source files and include directories for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/mesh/sensor_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n\tsrc/main.c\n\tsrc/model_handler.c)\ntarget_include_directories(app PRIVATE include)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: RST Section Headers and Formatting\nDESCRIPTION: ReStructuredText markup defining the document structure with headers and content sections\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.8.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ncs_release_notes_180:\\n\\n|NCS| v1.8.0 Release Notes\\n##########################\\n\\n.. contents::\\n   :local:\\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring UART Device for nRF RPC in DeviceTree\nDESCRIPTION: DeviceTree overlay that selects the UART peripheral to be used by API serialization libraries. This configuration sets uart1 as the designated device for RPC communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nrf_rpc/nrf_rpc_uart.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\n/ {\n   chosen {\n      nordic,rpc-uart = &uart1;\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Building Matter Bridge with Wi-Fi Support\nDESCRIPTION: Command for building the Matter bridge application with Wi-Fi support using nRF5340 DK and nRF7002 EK shield\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -p -- -Dmatter_bridge_SHIELD=nrf7002ek -DSB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE=y -DSB_CONFIG_DFU_MULTI_IMAGE_PACKAGE_WIFI_FW_PATCH=y -DSB_CONFIG_WIFI_NRF70=y -Dmcuboot_CONFIG_UPDATEABLE_IMAGE_NUMBER=3 -DFILE_SUFFIX=nrf70ek\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for TF-M Secure Peripheral Partition in CMake\nDESCRIPTION: Links the necessary libraries to tfm_app_rot_partition_spp and adds it to tfm_spm and tfm_partitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_secure_peripheral/secure_peripheral_partition/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(tfm_app_rot_partition_spp\n    PRIVATE\n        platform_s\n        tfm_sprt\n)\n\ntarget_link_libraries(tfm_spm\n    PRIVATE\n        tfm_app_rot_partition_spp\n)\n\ntarget_link_libraries(tfm_partitions\n    INTERFACE\n        tfm_app_rot_partition_spp\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling USB CDC ACM in DTS Overlay\nDESCRIPTION: Code snippet showing how to disable the USB CDC ACM interface in the application's DTS overlay file when it's not needed for logging.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy53/thingy53_application_guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n&cdc_acm_uart {\n    status = \"disabled\";\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Bluetooth LE Audio Transmitter Source in CMake\nDESCRIPTION: This CMake snippet checks if the BT_AUDIO_TX configuration option is enabled. If so, it adds the bt_le_audio_tx.c source file to the application's target sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_stream/bt_le_audio_tx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_BT_AUDIO_TX)\n\ttarget_sources(app PRIVATE\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/bt_le_audio_tx.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Check if Wi-Fi Credentials Storage is Empty - C\nDESCRIPTION: This snippet refers to the function `wifi_credentials_is_empty`, used to check if the Wi-Fi credentials storage is empty. It returns a boolean value indicating the state of the storage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth LE Bond Module in Kconfig\nDESCRIPTION: Kconfig options for enabling the Bluetooth LE bond module and its dependencies. These options configure bonding capabilities, settings storage, and common BLE events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_bond.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_CAF_BLE_BOND=y\nCONFIG_BT_BONDABLE=y\nCONFIG_BT_SETTINGS=y\nCONFIG_CAF_SETTINGS_LOADER=y\nCONFIG_CAF_BLE_COMMON_EVENTS=y\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for SMS Module in CMake\nDESCRIPTION: Adds the current directory to the include path for the 'app' target, allowing access to header files in the same directory as this CMake file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/sms/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Defining Sensor Stub Instance in Devicetree\nDESCRIPTION: This snippet shows how to define instances of the sensor stub in the devicetree. It specifies the compatible property, generator function, and status.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/sensor_stub.rst#2025-04-21_snippet_0\n\nLANGUAGE: devicetree\nCODE:\n```\nsensor_stub: sensor_stub {\n        compatible = \"nordic,sensor-stub\";\n        generator = \"sensor_stub_gen\";\n        status = \"okay\";\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up HTTPS Client CMake Project\nDESCRIPTION: Core CMake configuration that establishes project requirements, finds the Zephyr package, and sets up the HTTPS client project. Includes copyright notice and license information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/https_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(https_client)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake for nRF Connect SDK\nDESCRIPTION: Adds the current directory to the private include directories for the 'app' target. This ensures that header files in the current directory are accessible to the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Setting Local Location Value without Acknowledgment\nDESCRIPTION: This command allows setting the local location value without requesting a response. It accepts the same parameters as the previous command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_loc_cli.rst#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models loc local-set-unack <North> <East> <Alt> <Floor> [TimeDlt(ms) [Prec(mm) [IsMobile]]]\n\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Project Setup for LwM2M Client Testing\nDESCRIPTION: Initializes the CMake project with minimum version requirement and finds the Zephyr package.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/lwm2m_fota_utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(lwm2m_client_fota_unittest)\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Service Source Files in CMake\nDESCRIPTION: Adds SUIT service source files to the Zephyr build system and configures include directories. Includes both encode and decode implementation files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/suit_service/zcbor_generated/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources(\n\tsuit_service_decode.c\n\tsuit_service_encode.c\n)\n\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11ax PER Measurement (Receiver)\nDESCRIPTION: Commands to initialize the Wi-Fi radio test in channel 100 and set it to receive mode for 802.11ax PER measurement.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 100\nuart:~$ wifi_radio_test rx 1  #this will clear the earlier stats and wait for packets\n```\n\n----------------------------------------\n\nTITLE: Configuring Oberon PSA Core Compiler Options\nDESCRIPTION: Sets compiler options to disable specific warnings in the Oberon PSA crypto code and defines build macros.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/core/nrf_oberon/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(oberon_psa_core\n  PRIVATE\n    -Wno-stringop-overflow\n    -Wno-stringop-overread\n    -Wno-strict-aliasing\n)\n\ntarget_compile_definitions(oberon_psa_core\n  PRIVATE\n    BUILDING_MBEDTLS_CRYPTO\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Azure IoT Hub Testing\nDESCRIPTION: CMake configuration that sets up Azure IoT Hub testing environment. Includes core Azure SDK files, IoT library components, test runners, and compilation options for the test environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/azure_iot_hub/iot_hub/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(azure_iot_hub_test)\n\n# Generate runner for the test\ntest_runner_generate(src/azure_iot_hub_test.c)\n\n# Create mock\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/net/mqtt_helper.h)\n\n# Add Unit Under Test source files\ntarget_sources(app PRIVATE\n        ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/azure_iot_hub/src/azure_iot_hub.c\n\n\t# Azure SDK for C - CORE lib\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_context.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_json_reader.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_json_token.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_json_writer.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_log.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_precondition.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_span.c\n\n\t# Azure SDK for C - IoT lib\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_common.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_c2d.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_commands.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_methods.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_properties.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_telemetry.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_hub_client_twin.c\n)\n\n# Add test source file\ntarget_sources(app PRIVATE src/azure_iot_hub_test.c)\n\n# Include paths\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/azure_iot_hub/include/)\ntarget_include_directories(app PRIVATE ${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/inc/)\n\ntarget_compile_options(app PRIVATE\n\t-DCONFIG_AZURE_IOT_HUB_HOSTNAME=\"test-hostname.azure-devices.net\"\n        -DCONFIG_MQTT_HELPER_PORT=8883\n\t-DCONFIG_MQTT_HELPER_SEND_TIMEOUT_SEC=60\n\t-DCONFIG_MQTT_HELPER_STATIC_IP_ADDRESS=\"\"\n\t-DCONFIG_MQTT_HELPER_RX_TX_BUFFER_SIZE=256\n\t-DCONFIG_MQTT_HELPER_PAYLOAD_BUFFER_LEN=2304\n\t-DCONFIG_AZURE_IOT_HUB_DPS_DEVICE_ID_MAX_LEN=30\n\t-DCONFIG_AZURE_IOT_HUB_DPS_HOSTNAME_MAX_LEN=64\n\t-DCONFIG_MQTT_HELPER_STACK_SIZE=2560\n\t-DCONFIG_AZURE_IOT_HUB_TOPIC_MAX_LEN=180\n\t-DCONFIG_AZURE_IOT_HUB_USER_NAME_BUF_SIZE=128\n\t-DCONFIG_AZURE_IOT_HUB_MSG_PROPERTY_RECV_MAX_COUNT=2\n\t-DCONFIG_AZURE_IOT_HUB_MSG_PROPERTY_BUFFER_SIZE=128\n\t-DCONFIG_MQTT_HELPER_SEC_TAG=1\n\t-DCONFIG_AZURE_IOT_HUB_DEVICE_ID=\"test-device-id\"\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files\nDESCRIPTION: This snippet indicates that 'src/main.c' is a private source file for the application, which will be compiled as part of the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/partition_manager/static_pm_file/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Unconditional Subdirectory Inclusion: host_extensions\nDESCRIPTION: This CMake snippet includes the `host_extensions` subdirectory unconditionally. This is achieved using the `add_subdirectory` command without any conditional checks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory(host_extensions)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Serial Number Type for LG U+ Network\nDESCRIPTION: AT command to set the Device Serial Number type for use in LG U+ network. The type is specified as an integer value (0 for IMEI, 1 for 2DID).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_11\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"device_serial_no_type\"[,<device_serial_no_type>]\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on macOS\nDESCRIPTION: Command to install Homebrew package manager on macOS, which is needed for installing required dependencies.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Forcing Sensor Types into Build in Bluetooth Mesh\nDESCRIPTION: Macro used to force specific sensor types into the build. Sensor types are only instantiated when referenced by the application unless CONFIG_BT_MESH_SENSOR_ALL_TYPES is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/sensor_types.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nBT_MESH_SENSOR_TYPE_FORCE\n```\n\n----------------------------------------\n\nTITLE: Using sdc_soc_ecb_block_encrypt Function in ISR\nDESCRIPTION: An extremely rare race condition where using sdc_soc_ecb_block_encrypt from an Interrupt Service Routine (ISR) can lead to encryption failures.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_55\n\nLANGUAGE: c\nCODE:\n```\nsdc_soc_ecb_block_encrypt()\n```\n\n----------------------------------------\n\nTITLE: Testing SHA-256 Sample (RST)\nDESCRIPTION: Steps for testing the SHA-256 sample after programming it to a development kit. It includes connecting a terminal, compiling and programming the application, and observing logs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/sha256/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n1. |connect_terminal|\n#. Compile and program the application.\n#. Observe the logs from the application using a terminal emulator.\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version for NRF Project\nDESCRIPTION: Establishes the minimum required CMake version for the project, ensuring compatibility with Zephyr build system requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/ipuc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Reading Partition Manager Variables in CMake Generator Expressions\nDESCRIPTION: Demonstrates how to access Partition Manager variables through CMake generator expressions by referring to target properties on the partition_manager target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n--slot-size $<TARGET_PROPERTY:partition_manager,PM_MCUBOOT_PARTITIONS_PRIMARY_SIZE>\n```\n\n----------------------------------------\n\nTITLE: Error Log Output for Missing Content-Range Header\nDESCRIPTION: Example error message logged when the server does not provide the required Content-Range header field in HTTPS responses.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/download_client.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<err> download_client: Server did not send \"Content-Range\" in response\n```\n\n----------------------------------------\n\nTITLE: Configuring PSA Crypto Interface Paths\nDESCRIPTION: Sets up include directories and configurations for PSA crypto interface builds. Handles both TF-M and non-TF-M build scenarios.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nstring(REPLACE \"/\" \"\\\\/\" PSA_CRYPTO_CONFIG_INTERFACE_PATH_REGEX ${PSA_CRYPTO_CONFIG_INTERFACE_PATH})\n\ntarget_include_directories(psa_crypto_config\n  INTERFACE\n    ${PSA_CRYPTO_CONFIG_INTERFACE_PATH}\n    ${NRF_SECURITY_ROOT}/include\n)\n```\n\n----------------------------------------\n\nTITLE: NCS Configuration in YAML\nDESCRIPTION: Details configurations for NCS in a YAML file, including URL and SHA for upstream sources. Requires basic YAML knowledge and understanding of NCS configuration practices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/cheat_sheet.rst#2025-04-21_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n   ncs:\n     upstream-url: https://...\n     upstream-sha: GIT_SHA\n     compare-by-default: <true|false>\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Common Events and Modules\nDESCRIPTION: Adds two subdirectories to the build configuration, mapping relative paths to binary directories for common events and modules\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/remote/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"../common_events\" \"${CMAKE_CURRENT_BINARY_DIR}/common_events\")\nadd_subdirectory(\"../modules\" \"${CMAKE_CURRENT_BINARY_DIR}/modules\")\n```\n\n----------------------------------------\n\nTITLE: Building IPC Service Sample for nRF54H20 PPR Core\nDESCRIPTION: Console command to build the sample for testing IPC between application and PPR core using ICMSG backend on nRF54H20 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/ipc/ipc_service/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -T sample.ipc.ipc_service.nrf54h20dk_cpuapp_cpuppr_icmsg .\n```\n\n----------------------------------------\n\nTITLE: Zephyr Library Sources Configuration\nDESCRIPTION: This snippet configures the source files for a Zephyr library. It specifies `soc.c` as a source file to be included in the library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/soc/nordic/nrf71/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(\n  soc.c\n)\n```\n\n----------------------------------------\n\nTITLE: Example AT Command Request (JSON)\nDESCRIPTION: Example JSON payload for sending a remote AT command request to a device. This format is used when the CONFIG_AT_CMD_REQUESTS option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"appId\":\"MODEM\", \"messageType\":\"CMD\", \"data\":\"AT+CGMR\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Light CTL Temperature State - Command Syntax\nDESCRIPTION: Sets the Light CTL Temperature state with an option for transition time and delay, waiting for a response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl temp-set <Light> <Temp> <Dlt> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Wi-Fi Radio Configuration\nDESCRIPTION: Command to show the current configuration parameters of the Wi-Fi radio, displaying values for various transmission settings, calibration, power levels, and other radio parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_test show_config\n```\n\n----------------------------------------\n\nTITLE: Configuring nRFx Directory Path\nDESCRIPTION: Sets the nRFx directory path if not already defined, using the current Zephyr module directory as the base path\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/hal_nordic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED NRFX_DIR)\n  set(NRFX_DIR ${ZEPHYR_CURRENT_MODULE_DIR}/nrfx/ CACHE PATH \"nrfx Directory\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Triggering a continuous level change and waiting for response\nDESCRIPTION: Triggers a continuous level change for the server while waiting for a response, allowing transition time and delay specifications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_lvl_cli.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmesh models lvl move-set <Dlt> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: Setting Location Metadata with Shell Command\nDESCRIPTION: Command to set the location metadata for a Broadcast Isochronous Stream. The supported locations can be listed with the 'nac location print' command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnac location <location> <BIG index> <Subgroup index> <BIS index>\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Addition for Sink Selector\nDESCRIPTION: Adds the `sink_selector` subdirectory if the `CONFIG_SUIT_SINK_SELECTOR` configuration is enabled, allowing additional components to be compiled as needed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_SUIT_SINK_SELECTOR sink_selector)\n```\n\n----------------------------------------\n\nTITLE: Including USB Common Directories\nDESCRIPTION: Includes necessary directories from the Zephyr source for USB functionality, ensuring that the application can access USB-related resources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_usb/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories($ENV{ZEPHYR_BASE}/samples/subsys/usb/common)\n```\n\n----------------------------------------\n\nTITLE: Adding Nordic HAL Subdirectories\nDESCRIPTION: Adds Nordic hardware abstraction layer subdirectories, with nRFx module added conditionally based on configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/hal_nordic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${ZEPHYR_BASE}/modules/hal_nordic ${CMAKE_CURRENT_BINARY_DIR}/modules/hal_nordic)\nadd_subdirectory_ifdef(CONFIG_HAS_NRFX nrfx)\n```\n\n----------------------------------------\n\nTITLE: Creating Initial TNEP Message in C\nDESCRIPTION: Demonstrates how to create the initial TNEP NDEF message that contains service parameters and optional application-defined records.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/tnep/tag.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n.. literalinclude:: ../../../../../samples/nfc/tnep_tag/src/main.c\n    :language: c\n    :start-after: include_startingpoint_initial_msg_rst\n    :end-before: include_endpoint_initial_msg_rst\n```\n\n----------------------------------------\n\nTITLE: Configuring NCS Root Directory and Build Type\nDESCRIPTION: Sets up the NCS root directory path and caches the build type configuration to maintain consistency across builds.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(NRF_DIR ${CMAKE_CURRENT_LIST_DIR} CACHE PATH \"NCS root directory\")\n\nset(CONF_FILE_BUILD_TYPE ${CONF_FILE_BUILD_TYPE} CACHE INTERNAL \"The build type\")\n```\n\n----------------------------------------\n\nTITLE: Checking Wi-Fi Connection Status using Shell Commands\nDESCRIPTION: Command to query the current status of the Wi-Fi connection, providing information about the connection state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/using_wifi_shell_sample.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi status\n```\n\n----------------------------------------\n\nTITLE: Reading Radio Statistics with OpenThread Diagnostic Command\nDESCRIPTION: Displays diagnostic statistics about the radio transceiver's received and sent packets, including RSSI (Received Signal Strength Indicator) and LQI (Link Quality Indicator) values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot diag stats\nreceived packets: 20\nsent packets: 0\nfirst received packet: rssi=-29, lqi=255\nlast received packet: rssi=-30, lqi=255\nDone\n```\n\n----------------------------------------\n\nTITLE: SLM Version Check Command\nDESCRIPTION: The #XSLMVER command returns the NCS version and modem library version used by SLM. Optionally returns customer version if defined.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/Generic_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XSLMVER\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the build system has the necessary features available.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_flpr/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Bluetooth Mesh Sensor Test\nDESCRIPTION: Sets up the CMake project configuration including minimum version, Zephyr package requirement, and project name declarations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/sensor_subsys/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bt_mesh_sensor_subsystem_test)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Non-Secure Fault Handling\nDESCRIPTION: This snippet sets compile definitions for handling non-secure faults in the 'platform_s' target and includes a source file specifically for non-secure fault services.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (NRF_ALLOW_NON_SECURE_FAULT_HANDLING)\n  target_compile_definitions(platform_s PUBLIC NRF_ALLOW_NON_SECURE_FAULT_HANDLING)\n  target_sources(platform_s\n    PRIVATE\n    common/ns_fault_service.c\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating timeout type in Zephyr C API\nDESCRIPTION: The timeout type was updated to k_timeout_t in various Zephyr kernel APIs, as the integer type for timeouts was deprecated.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.3.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nk_timeout_t timeout;\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Storage Functionality\nDESCRIPTION: This snippet adds the source files related to storage functionalities to the 'app' target. This includes implementations that handle encoding, envelopes, flags, and updates specific to the nRF54H20 platform.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/storage_nrf54h20/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n  ${SUIT_SUBSYS_DIR}/storage/src/suit_storage_encode.c\n  ${SUIT_SUBSYS_DIR}/storage/src/suit_storage_envelope.c\n  ${SUIT_SUBSYS_DIR}/storage/src/suit_storage_flags.c\n  ${SUIT_SUBSYS_DIR}/storage/src/suit_storage_mpi.c\n  # Use nRF54H20-specific implementation.\n  ${SUIT_SUBSYS_DIR}/storage/src/suit_storage_nrf54h20.c\n  ${SUIT_SUBSYS_DIR}/storage/src/suit_storage_nvv.c\n  ${SUIT_SUBSYS_DIR}/storage/src/suit_storage_report.c\n  ${SUIT_SUBSYS_DIR}/storage/src/suit_storage_update.c\n)\n```\n\n----------------------------------------\n\nTITLE: Firmware Update Using fota.py Script\nDESCRIPTION: Uses the fota.py script to update the firmware of the nRF52840 SoC by providing the correct IMEI and file path. Monitors the entire process from initiating the download to completion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota_external_mcu.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n./scripts/fota.py -id urn:imei:351358811331351 update 2 file app_update52.bin\n\n```\n\n----------------------------------------\n\nTITLE: Setting Default Light CTL State - Command Syntax\nDESCRIPTION: Sets the Light CTL Default state and waits for a response, useful for initial configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl default-set <Light> <Temp> <Dlt>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Consecutive Send Failures in Kconfig\nDESCRIPTION: Sets the maximum number of device messages which may fail to send before a connection reset and cooldown is triggered.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_MAX_CONSECUTIVE_SEND_FAILURES\n```\n\n----------------------------------------\n\nTITLE: Configuring VIO Input Mode in C\nDESCRIPTION: Function to set how VIO input values are updated: continuously, on timer events, or with shifting functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_csr_vio_mode_in_set()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for PDM Loopback Project with Zephyr RTOS\nDESCRIPTION: Sets up the CMake configuration for a PDM loopback project using the nRF Connect SDK and Zephyr RTOS. It specifies the minimum CMake version, locates the Zephyr package, defines the project name, and adds the main source file to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/audio/pdm_loopback/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(pdm_loopback)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Activating LTE Mode in MoSh\nDESCRIPTION: Set the modem to normal mode to activate LTE by changing the link fun mode to 1. This establishes LTE connectivity.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_32\n\nLANGUAGE: console\nCODE:\n```\nmosh:~$ link funmode -1\n```\n\n----------------------------------------\n\nTITLE: Setting the Generic Level state value and waiting for response\nDESCRIPTION: Sets the Generic Level state value and waits for a response, allowing optional transition time and delay parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_lvl_cli.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmesh models lvl set <Lvl> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: Adding Main Source File to Application Target\nDESCRIPTION: Adds the main.c source file to the application build target, defining the primary entry point for the embedded application\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/shell/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app  PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Enabling Four-LED Status Indication in Kconfig\nDESCRIPTION: Use four discrete LEDs for status indication. Defaults to enabled if CONFIG_LED_INDICATOR_RGB is disabled and LED indication is not disabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_26\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LED_INDICATOR_4LED\n```\n\n----------------------------------------\n\nTITLE: Backward Compatibility for SUIT Common Library\nDESCRIPTION: Defines the `suit_common` library interface for backward compatibility, ensuring older components relying on this definition continue to function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/platform/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(suit_common)\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for NCS Commits\nDESCRIPTION: Command to view NCS specific commits and cherry-picked commits since v2.5.0 in the Zephyr fork.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.3.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline manifest-rev ^v3.4.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Observer Role Support in Bluetooth Management\nDESCRIPTION: Conditionally adds generic scanning support when the BT_OBSERVER configuration is enabled for devices that need to scan for advertisements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_management/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_BT_OBSERVER)\ntarget_sources(app PRIVATE\n\t        ${CMAKE_CURRENT_SOURCE_DIR}/scanning/bt_mgmt_scan.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving nRF Connect SDK Specific Commits\nDESCRIPTION: Git command to list all NCS specific commits and cherry-picked commits since v2.9.0 in the Zephyr fork.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.9.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v3.7.99-ncs2\n```\n\n----------------------------------------\n\nTITLE: Setting DC/DC mode with lsetdcdc command in Shell\nDESCRIPTION: Enables or disables the DC/DC mode on the CMD device. Has no effect on unsupported boards.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\ncustom lsetdcdc *1*\n```\n\n----------------------------------------\n\nTITLE: Getting Socket Options in AT Commands\nDESCRIPTION: This AT command retrieves a socket option value, specifically querying the receive timeout. It shows how to use the #XSOCKETOPT command to read current socket configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_6\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XSOCKETOPT=0,20\n#XSOCKETOPT: 30\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting Up Commissioner in CLI Sample\nDESCRIPTION: Series of commands to form a new Thread network and set up the device as a Commissioner in the OpenThread CLI sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot dataset init new\nDone\nuart:~$ ot dataset commit active\nDone\nuart:~$ ot ifconfig up\nDone\nuart:~$ ot thread start\nDone\n```\n\n----------------------------------------\n\nTITLE: Including RST Documentation References\nDESCRIPTION: RST directives for including documentation references and creating a table of contents tree for Bluetooth samples and tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/bl.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/bluetooth/*/README\n   ../../tests/bluetooth/bsim/nrf_auraconfig/README\n   ../../tests/bluetooth/bsim/nrf_auraconfig/tester/README\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for SUIT Integration Test\nDESCRIPTION: Sets up the minimum CMake version, finds Zephyr, and defines the project name for the integration test suite orchestrator\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/orchestrator/orchestrator_sdfw_nrf54h20/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_orchestrator)\n```\n\n----------------------------------------\n\nTITLE: Setting BAP Preset with Shell Command\nDESCRIPTION: Command to set the Basic Audio Profile preset for a BIG or subgroup. The supported presets are defined in the Basic Audio Profile specification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnac preset <preset> <BIG index> [subgroup index]\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Bridge Project in CMake\nDESCRIPTION: Sets up the core project configuration for a Matter Bridge application, including minimum CMake version, Zephyr package requirement, and project name declaration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr HINTS $ENV{ZEPHYR_BASE})\n\nproject(matter-bridge)\n```\n\n----------------------------------------\n\nTITLE: Converting CSR from DER to PEM Using OpenSSL\nDESCRIPTION: Converts a CSR from DER format to PEM format to facilitate easier handling and signing processes. Requires OpenSSL installed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nopenssl req -inform DER -in certs/client-csr.der -outform PEM -out certs/client-csr.pem\n```\n\n----------------------------------------\n\nTITLE: Clang-Format Detection\nDESCRIPTION: Searches for available clang-format versions to format the generated code. Supports versions 4 through 10.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dfu/fmfu_fdev/cddl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_program(\n  CLANG_FORMAT\n  NAMES\n  clang-format\n  clang-format-10\n  clang-format-9\n  clang-format-8\n  clang-format-7\n  clang-format-6\n  clang-format-5\n  clang-format-4\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Client with AT Commands\nDESCRIPTION: Configuration command for setting MQTT client parameters such as client ID, keep-alive time, and session type using #XMQTTCFG command\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/MQTT_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT\nCODE:\n```\nAT#XMQTTCFG=\"MyMQTT-Client-ID\",300,1\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for NCS Documentation\nDESCRIPTION: This command installs the required Python packages for building the NCS documentation. It should be run in the 'ncs' folder with an active Python virtual environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/build.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U -r nrf/doc/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding DFU Support in Bluetooth Management\nDESCRIPTION: Conditionally adds Device Firmware Update (DFU) support when the AUDIO_BT_MGMT_DFU configuration is enabled for over-the-air firmware updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_management/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_AUDIO_BT_MGMT_DFU)\n\ttarget_sources(app PRIVATE\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/dfu/bt_mgmt_dfu.c\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Modifying SPI1 Interrupt Priority in Device Tree Overlay\nDESCRIPTION: Device tree overlay snippet showing how to override the default interrupt priority for SPI1 peripheral, changing it from 1 to 2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/integration.rst#2025-04-21_snippet_2\n\nLANGUAGE: devicetree\nCODE:\n```\n&spi1 {\n       interrupts = <4 2>;\n   };\n```\n\n----------------------------------------\n\nTITLE: Building from different directory (Command line)\nDESCRIPTION: West command to build an application from a different directory, in this case the TF-M PSA template sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/building.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp/ns nrf/samples/tfm/tfm_psa_template\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Zephyr\nDESCRIPTION: Sets up the minimum CMake version, finds the Zephyr framework, and defines the project name for a heart rate central application\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/central_hr_coded/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(central_hr)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Documentation Build Warnings\nDESCRIPTION: A configuration block to manage warnings caused by upstream documentation issues that cannot be directly resolved in the current build environment\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/matter/known-warnings.txt#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n.*None:any reference target not found: ../../src/app/tests/suites/README\n```\n\n----------------------------------------\n\nTITLE: Starting a SUPL session\nDESCRIPTION: This snippet demonstrates how to start a SUPL session using the :c:func:`supl_session` function. It creates necessary parameters and initiates the session as part of the SUPL client library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/supl_os_client.rst#2025-04-21_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n/* Call to start a SUPL session */\nsupl_session();\n```\n\n----------------------------------------\n\nTITLE: Linking SUIT Manifest Libraries\nDESCRIPTION: Links the SUIT manifest variables and storage interface libraries to the Zephyr library for integration testing\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/manifest_variables/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_link_libraries(suit_manifest_variables)\nzephyr_library_link_libraries(suit_storage_interface)\n```\n\n----------------------------------------\n\nTITLE: Binding Socket to Port in AT Commands\nDESCRIPTION: This AT command binds a socket to a specific local port (1234). It shows how to use the #XBIND command to associate a socket with a particular port for listening or sending.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_8\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XBIND=1234\nOK\n```\n\n----------------------------------------\n\nTITLE: Changing UART Baudrate in MoSh Console\nDESCRIPTION: Set the UART baudrate to 921600 to enhance data transmission speeds. No additional parameters required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_28\n\nLANGUAGE: console\nCODE:\n```\nuart baudrate 921600\n```\n\n----------------------------------------\n\nTITLE: NFC Zero Latency IRQ Configuration\nDESCRIPTION: Kconfig option to disable NFC zero latency interrupt to avoid undefined behavior when requesting clock from NFC interrupt context.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_34\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NFC_ZERO_LATENCY_IRQ=n\n```\n\n----------------------------------------\n\nTITLE: Reading SUIT Manifests with nrfutil\nDESCRIPTION: Command to read the installed SUIT manifests sequence numbers and other details using nrfutil.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nnrfutil suit manifests --serial-port COM7\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet finds the Zephyr package necessary for the project, using environment hints to locate its base directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/memptr_sink/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: GNSS Time-to-Fix Logging Console Output\nDESCRIPTION: Console logging demonstrating GNSS time-to-fix measurement and system sleep intervals during positioning attempts\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/gnss/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n[00:00:34.790,649] <inf> gnss_sample: Time to fix: 34\\n[00:00:34.796,447] <inf> gnss_sample: Sleeping for 120 seconds\n```\n\n----------------------------------------\n\nTITLE: Listing Zephyr Upstream Commits in NCS\nDESCRIPTION: Git command to show upstream Zephyr commits incorporated into NCS since the last release\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.4.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline 7a3b253ced ^v2.3.0-rc1-ncs1\n```\n\n----------------------------------------\n\nTITLE: Setting Light LC Client Instance - C\nDESCRIPTION: Selects the Light LC Client model instantiated on a specified element ID for messaging.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl instance set <ElemIdx>\n\tSelect the Light LC Client model instantiated on the specified element ID.\n\tThis instance will be used in message sending.\n\tIf no model instance is selected, the first model instance found on the device will be used by default.\n\n\t* ``ElemIdx`` - Element index where the model instance is found.\n```\n\n----------------------------------------\n\nTITLE: Project Declaration for Multicore System - CMake\nDESCRIPTION: This snippet declares the project 'multicore_system_off', establishing the project's name and its context for the CMake build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/multicore_system_off/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nproject(multicore_system_off)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files for Bluetooth Mesh Sensor\nDESCRIPTION: Adds application source files and specific Bluetooth Mesh sensor implementation files to the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/sensor_subsys/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE\n  ${app_sources}\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/sensor_types.c\n  ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/mesh/sensor.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Building nRF Desktop with nRF21540 EK Shield for Single Core\nDESCRIPTION: Command to build nRF Desktop application for nRF52840dk with nRF21540 EK shield support, disabling LLPM.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/nRF21540ek_support.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 -- -DSHIELD=nrf21540ek -DCONFIG_CAF_BLE_USE_LLPM=n\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the project, ensuring compatibility with the build system and Zephyr requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/udp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Defining the Project\nDESCRIPTION: This snippet defines the CMake project name as `nrf_cloud_client_id`. It is a standard CMake command that sets the project name for the entire build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/client_id/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"project(nrf_cloud_client_id)\"\n```\n\n----------------------------------------\n\nTITLE: Disabling UARTs in MoSh Console\nDESCRIPTION: Disable UARTs to manage power consumption when the modem is in sleep mode. No additional parameters required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_27\n\nLANGUAGE: console\nCODE:\n```\nuart during_sleep disable\n```\n\n----------------------------------------\n\nTITLE: Destroying Radio Firmware for Variant B (Console)\nDESCRIPTION: Command to modify the radio firmware variant B to enter degraded mode without radio support.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_32\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device x-write --address 0xe086000 --value 0xFFFFFF --core Network --traits jlink\n```\n\n----------------------------------------\n\nTITLE: Defining GATT Service with BT_GATT_SERVICE_DEFINE in nRF Desktop Battery Service\nDESCRIPTION: The module uses BT_GATT_SERVICE_DEFINE macro to define the GATT Battery Service. It updates the battery level and notifies subscribers when a battery_level_event is received.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/bas.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nBT_GATT_SERVICE_DEFINE\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files in Nordic SDK App\nDESCRIPTION: This snippet specifies the source files to be included in the project. It indicates that 'src/main.c' is a private source file for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/gazell/gzp_dynamic_pairing_host/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n  src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Fast Pair in Sysbuild\nDESCRIPTION: Kconfig options for setting up Google Fast Pair Model ID and Anti-Spoofing Private Key at the sysbuild level.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_sysbuild.rst#2025-04-21_snippet_3\n\nLANGUAGE: kconfig\nCODE:\n```\nSB_CONFIG_BT_FAST_PAIR_MODEL_ID\nSB_CONFIG_BT_FAST_PAIR_ANTI_SPOOFING_PRIVATE_KEY\nSB_CONFIG_BT_FAST_PAIR_PROV_DATA\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options for MCUmgr SMP Client Test\nDESCRIPTION: Sets various compiler options and definitions specific to the MCUmgr SMP client test project, including buffer sizes, log levels, and feature flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/mcumgr_smp_client/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_IMG_BLOCK_BUF_SIZE=4096\n  -DCONFIG_DFU_TARGET_LOG_LEVEL=2\n  -DCONFIG_NRF_MCUMGR_SMP_CLIENT_LOG_LEVEL=2\n  -DCONFIG_FOTA_DOWNLOAD_LOG_LEVEL=2\n  -DCONFIG_FOTA_DOWNLOAD_FILE_NAME_LENGTH=128\n  -DCONFIG_FOTA_DOWNLOAD_HOST_NAME_LENGTH=256\n  -DCONFIG_FOTA_DOWNLOAD_RESOURCE_LOCATOR_LENGTH=512\n  -DCONFIG_DOWNLOADER_MAX_HOSTNAME_SIZE=128\n  -DCONFIG_DOWNLOADER_MAX_FILENAME_SIZE=128\n  -DCONFIG_DOWNLOADER_TRANSPORT_PARAMS_SIZE=256\n  -DCONFIG_DOWNLOADER_STACK_SIZE=1024\n  -DCONFIG_DFU_TARGET_SMP=1\n  )\n```\n\n----------------------------------------\n\nTITLE: Running iPerf Server for UDP Throughput\nDESCRIPTION: This command launches an iPerf server for measuring UDP throughput on the test PC. Ensure iPerf is installed on the test PC. The '-s' flag starts the server mode, '-i 1' sets the interval for periodic bandwidth reporting to 1 second, and '-u' specifies that UDP protocol should be used. The command inputs are handled by iPerf and there are no direct outputs in this snippet, but the results will be displayed in the console where the command is run.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/thread_coex/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\niperf -s -i 1 -u\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Pair Provisioning Parameters in Linux\nDESCRIPTION: Command to provide Fast Pair Model ID and Anti-Spoofing Private Key as build parameters on Linux. The parameters use the new sysbuild Kconfig options format.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_3.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-DSB_CONFIG_BT_FAST_PAIR_MODEL_ID=0xFFFFFF -DSB_CONFIG_BT_FAST_PAIR_ANTI_SPOOFING_PRIVATE_KEY=\"AbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbAbA=\"\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure in reStructuredText\nDESCRIPTION: Defines the structure and layout of modem libraries documentation using reStructuredText directives. Creates a table of contents with specified formatting and includes nrf_modem_lib index and other related pages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _lib_modem:\n\nModem libraries\n###############\n\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   nrf_modem_lib/index\n   *\n```\n\n----------------------------------------\n\nTITLE: Resetting the Device to Enter Recovery Mode\nDESCRIPTION: Command to reset the device using nrfutil, which will cause it to enter the recovery path when the main application is corrupted.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/recovery/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device reset --serial-number <dk_serial_number>\n```\n\n----------------------------------------\n\nTITLE: Data Transfer with Curl in Modem Shell\nDESCRIPTION: The curl command in Modem Shell allows for basic HTTP data transfer using standard URL syntax. It supports HTTP GET and POST requests but does not support file operations. Headers and data can be specified inline.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncurl http://curl.server.url/small.txt\n```\n\nLANGUAGE: console\nCODE:\n```\ncurl http://curl.server.url/bigger_file.zip --output /dev/null\n```\n\nLANGUAGE: console\nCODE:\n```\ncurl http://curl.server.url/data -d \"foo=bar\"\n```\n\nLANGUAGE: console\nCODE:\n```\ncurl http://curl.server.url/data -d #500000\n```\n\nLANGUAGE: console\nCODE:\n```\ncurl http://curl.server.url/data -d #500000 --pdn_id 1\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Zephyr RSA Application\nDESCRIPTION: Defines minimum CMake version, finds Zephyr package, sets project name, and adds main source file for compilation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/rsa/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nproject(rsa)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n        src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SUIT Validator Test Implementation in CMake\nDESCRIPTION: Conditionally builds and links a custom validator test implementation when CONFIG_SUIT_VALIDATOR_IMPL_CUSTOM is enabled. Creates a library named validator_test, adds source files, and links it with the suit_validator library and main application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/common/validator_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_SUIT_VALIDATOR_IMPL_CUSTOM)\n  zephyr_library_named(validator_test)\n  zephyr_library_sources(validator_test.c)\n  zephyr_library_link_libraries(suit_validator)\n\n  target_link_libraries(app PUBLIC validator_test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version for Nordic SDK\nDESCRIPTION: Sets the minimum required CMake version for the project, ensuring compatibility with Zephyr and Nordic SDK build requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/shell/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Downloading a File with mcumgr\nDESCRIPTION: This command downloads a specified file from a remote location to the local filesystem, requiring the filesystem module to be enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ mcumgr <connection-options> fs download <remote-file> <local-file>\n```\n\n----------------------------------------\n\nTITLE: Configuring LED Stream Module Options in Kconfig\nDESCRIPTION: Required Kconfig options to enable and configure the LED stream module including the config channel, CAF LEDs, and queue size settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/led_stream.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_CAF_LEDS=y\nCONFIG_DESKTOP_CONFIG_CHANNEL_ENABLE=y\nCONFIG_DESKTOP_LED_STREAM_ENABLE=y\nCONFIG_DESKTOP_LED_STREAM_QUEUE_SIZE=<size>\n```\n\n----------------------------------------\n\nTITLE: Adding REST Shell Source File to Application in CMake\nDESCRIPTION: Adds the rest_shell.c source file from the current source directory to the 'app' target. This includes the REST shell implementation in the application build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/rest/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/rest_shell.c)\n```\n\n----------------------------------------\n\nTITLE: Running Assembly Management CMake Targets\nDESCRIPTION: Example command for running an assembly management CMake target. This specific example shows how to run the asm_install target to replace assembly files in the source directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/assembly_management.rst#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nninja asm_install\n```\n\n----------------------------------------\n\nTITLE: Adding desh_print Source File to Build in CMake\nDESCRIPTION: Adds the desh_print.c source file from the current directory to the app target's sources list, including it in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/utils/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/desh_print.c)\n```\n\n----------------------------------------\n\nTITLE: Uploading Documentation Cache\nDESCRIPTION: Python script that uploads the cache files during the docpublish workflow. This cache can be used to speed up subsequent documentation builds.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/doc_build_process.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndoc/_scripts/cache_upload.py\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic Application Update\nDESCRIPTION: Sets up the CMake build configuration with minimum version requirement, Zephyr package dependency, and source file inclusion. Requires CMake 3.20.0 or higher and Zephyr SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/http_update/application_update/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(application_update)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for desh_print Component in CMake\nDESCRIPTION: Adds the current directory to the include paths for the app target, allowing header files in this directory to be found during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Bypassing Regulatory Domain Restrictions in Wi-Fi Radio Test (Shell)\nDESCRIPTION: This command removes regulatory domain restrictions for the Wi-Fi Radio test sample. It allows operation without considering domain-specific regulations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/setting_regulatory_domain.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test bypass_reg_domain 1\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package in CMake\nDESCRIPTION: Locates the Zephyr package which is required for the project. Uses the ZEPHYR_BASE environment variable as a hint for finding the package location.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/fprotect/negative/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Building Updated Application (Console)\nDESCRIPTION: Command to build the updated application with new configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_37\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -- \\\n   -DSB_EXTRA_CONF_FILE=\"suit_mpi.conf\" \\\n   -Dab_CONFIG_N_BLINKS=4\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Platform Configurations\nDESCRIPTION: Installs configuration and test files from various directories using CMake install() for platform setup\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf9160/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES       config.cmake\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR})\n```\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES       ../common/config.cmake\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR}/../common/)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY   ${Trusted\\ Firmware\\ M_SOURCE_DIR}/platform/ext/target/nordic_nrf/nrf9160dk_nrf9160/tests\n        DESTINATION ${INSTALL_PLATFORM_NS_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: State transition delay member\nDESCRIPTION: This snippet describes the `delay` member of the `bt_mesh_model_transition` structure. It represents the time by which the transition to a new state value is postponed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/overview/models.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\":c:member:`bt_mesh_model_transition.delay`\"\n```\n\n----------------------------------------\n\nTITLE: Example of Adding a Bluetooth LE Device\nDESCRIPTION: Example CLI command showing how to add a Bluetooth LE device with index 0 and label \"Kitchen Light\" to the Matter bridge.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge add 0 \"Kitchen Light\"\n```\n\n----------------------------------------\n\nTITLE: Adding Common Subdirectory\nDESCRIPTION: Adds the 'src/common' directory as a subdirectory to the build. This directory contains common source files and libraries used throughout the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(src/common)\"\n```\n\n----------------------------------------\n\nTITLE: Module Name Retrieval Function\nDESCRIPTION: The module_name_get helper function is used to retrieve the module name from a reference object. This is required as the module name cannot be obtained directly from the reference object.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.9.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nmodule_name_get\n```\n\n----------------------------------------\n\nTITLE: nRF Util Command for Application Core Programming\nDESCRIPTION: Command to erase flash memory and program the application sample using nRF Util for nRF5340 DK\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/building_nrf53.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --firmware zephyr.hex  --options chip_erase_mode=ERASE_ALL\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: This snippet finds the required Zephyr package using an environment variable hint to locate the Zephyr base directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/partition_manager/static_pm_file/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure Definition\nDESCRIPTION: ReStructuredText document structure defining release notes content with headers, sections and formatting.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.1.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n.. _ncs_release_notes_210:\n\n|NCS| v2.1.0 Release Notes\n##########################\n\n.. contents::\n   :local:\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: LTE Library Mode Change Callback Registration\nDESCRIPTION: Macro for registering callbacks when modem functional mode changes using lte_lc_func_mode_set function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.0.rst#2025-04-21_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nLTE_LC_ON_CFUN\n```\n\n----------------------------------------\n\nTITLE: Checking Git Log for NCS Changes\nDESCRIPTION: Git command to view NCS specific commits and cherry-picked commits since v2.5.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^v3.4.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: OpenThread Class Declaration in Python\nDESCRIPTION: Declares an OpenThread class in Python, suggesting it builds on top of OpenThreadTHCI. Assumes integration with OpenThread's Python development ecosystem.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/cheat_sheet.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n   class OpenThread(OpenThreadTHCI, IThci)\n```\n\n----------------------------------------\n\nTITLE: Defining HID Keyboard Project\nDESCRIPTION: This snippet defines the main project as 'hid-keyboard' using CMake and sets the minimum required version for compatibility purposes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/subsys/usb/hid-keyboard/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(hid-keyboard)\n```\n\n----------------------------------------\n\nTITLE: Example of Adding a Simulated Light Device\nDESCRIPTION: Example CLI command demonstrating how to add a simulated On/Off Light device with the label \"Kitchen Light\" to the Matter bridge.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge add 256 \"Kitchen Light\"\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for nRF9x Sockets Test\nDESCRIPTION: Configures include directories for the application, including nRF modem and Zephyr sockets libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/nrf9x_sockets/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE\n                           ${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/\n                           ${ZEPHYR_BASE}/subsys/net/lib/sockets\n                          )\n```\n\n----------------------------------------\n\nTITLE: Reading IPUC Metadata in C\nDESCRIPTION: Utilizes the suit_get_ipuc_info SSF service to read metadata associated with an IPUC, including the full component ID and manifest role.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nsuit_get_ipuc_info()\n```\n\n----------------------------------------\n\nTITLE: Core Library Source Configuration\nDESCRIPTION: Defines the core source files for the downloader library including parsing, socket handling, main downloader functionality, and sanity checks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/downloader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tsrc/dl_parse.c\n\tsrc/dl_socket.c\n\tsrc/downloader.c\n\tsrc/sanity.c\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing Multicore Application\nDESCRIPTION: Commands to build and flash the application for both cores of a multicore MCU using west build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf_sensor_manager/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp\n```\n\nLANGUAGE: console\nCODE:\n```\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with Homebrew on macOS\nDESCRIPTION: Command to install the required dependencies for NCS development on macOS using Homebrew.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cmake ninja gperf python3 ccache qemu dtc wget libmagic\n```\n\n----------------------------------------\n\nTITLE: Including CMake Template for Testing\nDESCRIPTION: This snippet includes a test template from a specified path, integrating common testing setups into the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_decrypt_filter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(../cmake/test_template.cmake)\n```\n\n----------------------------------------\n\nTITLE: Registering SMS Service in MoSh\nDESCRIPTION: Demonstrates how to register the SMS service to receive messages if supported by the SIM subscription.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nsms reg\n```\n\n----------------------------------------\n\nTITLE: Running FICR Update Script on Windows\nDESCRIPTION: Command to run the FICR update J-Link script on Windows systems to properly configure the nRF54H20 SoC trims.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\njlink.exe -CommanderScript nrf54h20es_trim_adjust.jlink\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth LBS Source\nDESCRIPTION: This snippet includes the Location Based Service (LBS) source if CONFIG_BT_LBS is defined. It supports location-based Bluetooth interactions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_BT_LBS lbs.c)\n```\n\n----------------------------------------\n\nTITLE: Button Press Duration Outcomes for nPM1300\nDESCRIPTION: Documents the outcomes and log outputs depending on different button press durations. This is crucial for understanding how the nPM1300 reacts to user interactions and will influence application design.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/pmic/native/npm1300_one_button/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Duration      | Log output    | Outcome                                                 |\n| ============  | ============  | ========================================================= |\n| < 1 sec       | Short press   | Sample flashes **LED** at 5 Hz, LDSW 1 enabled         |\n| 1 - 5 sec     | Medium press  | Sample flashes **LED** at 1 Hz, LDSW 1 disabled        |\n| 5 - 10 sec    | Long press    | nPM1300 enters ship mode provided **J3** is not connected|\n| > 10 sec      | None          | nPM1300 long press reset activates                      |\n```\n\n----------------------------------------\n\nTITLE: Configuring MPSL PM Utils Zephyr Library\nDESCRIPTION: Creates and configures a Zephyr library for MPSL power management utilities. Adds the mpsl_pm_utils.c source file to the library build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/pm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(mpsl_pm_utils.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Light CTL Temperature State Without Acknowledgement - Command Syntax\nDESCRIPTION: Sets the Light CTL Temperature state without waiting for server response.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl temp-set-unack <Light> <Temp> <Dlt> [TransTime(ms) [Delay(ms)]]\n```\n\n----------------------------------------\n\nTITLE: OpenSSL TLS 1.2 Client Connection (RSA)\nDESCRIPTION: OpenSSL command to perform a TLS 1.2 client connection using AES128-SHA256 cipher and RSA root certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nopenssl s_client -connect 192.0.2.1:4243 -cipher AES128-SHA256 -CAfile certs/rsa/root_cert.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Manager Error Timeout in Kconfig\nDESCRIPTION: This Kconfig option sets the timeout period before the Power Manager suspends remaining application modules after entering the error state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/power_manager.rst#2025-04-21_snippet_2\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_CAF_POWER_MANAGER_ERROR_TIMEOUT\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth WiFi Provisioning Subdirectory\nDESCRIPTION: This line adds a subdirectory for WiFi provisioning via Bluetooth if CONFIG_BT_WIFI_PROV is defined. It aids in connecting Bluetooth devices to WiFi networks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_BT_WIFI_PROV wifi_prov)\n```\n\n----------------------------------------\n\nTITLE: Adding nrfx Doxygen Documentation Set in CMake\nDESCRIPTION: Adds the nrfx Doxygen documentation set as a standalone set to the build process, using the Zephyr HAL Nordic module directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_doxygen_docset(nrfx ${ZEPHYR_HAL_NORDIC_MODULE_DIR} \"\" STANDALONE)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Locates the Zephyr RTOS package using environment variables, which is essential for building the project\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_ipc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Defining Nordic SDK Project\nDESCRIPTION: This line defines the project name for the Nordic SDK application, which is used for dynamic pairing. The project is initialized with the specified name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/gazell/gzp_dynamic_pairing_host/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(gzp_dynamic_pairing_host)\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom AT Commands\nDESCRIPTION: Changes required in slm_at_commands.c to integrate new custom AT commands including header inclusion and initialization calls.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_extending.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// Include custom header file\n\nslm_at_init() {\n    // Add call to setup function\n}\n\nslm_at_uninit() {\n    // Add call to teardown function\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping UDP Server using AT command\nDESCRIPTION: This AT command stops a previously started UDP server. The response indicates the server has stopped.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n**AT#XUDPSVR=0**\n#XUDPSVR: 0,\"stopped\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Modem Antenna Configuration Options in KConfig\nDESCRIPTION: KConfig options for enabling the modem antenna library and selecting antenna types. Includes options for custom MAGPIO and COEX0 configurations via AT commands.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_antenna.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MODEM_ANTENNA\\nCONFIG_MODEM_ANTENNA_GNSS_ONBOARD\\nCONFIG_MODEM_ANTENNA_GNSS_EXTERNAL\\nCONFIG_MODEM_ANTENNA_AT_MAGPIO\\nCONFIG_MODEM_ANTENNA_AT_COEX0\n```\n\n----------------------------------------\n\nTITLE: Adding Linker Script for Sensor Types\nDESCRIPTION: Includes a linker script specifically for sensor types in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/sensor_subsys/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_linker_sources(SECTIONS sensor_types.ld)\n```\n\n----------------------------------------\n\nTITLE: Generating New IEEE 802.15.4 Extended Address in C++\nDESCRIPTION: This code snippet generates a new IEEE 802.15.4 Extended address and sets it to avoid duplication after erasing persistent info. It uses the DRBG to get random bytes for the new address.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\notExtAddress newOtAddr = {};\nchip::Crypto::DRBG_get_bytes(reinterpret_cast<uint8_t*>(&newOtAddr), sizeof(newOtAddr));\notLinkSetExtendedAddress(chip::DeviceLayer::ThreadStackMgrImpl().OTInstance(), &newOtAddr);\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Notification Syntax\nDESCRIPTION: Format of unsolicited notifications indicating received HTTP response data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/HTTPC_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: AT\nCODE:\n```\n<response><CR><LF>#XHTTPCRSP:<received_byte_count>,<state>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for Device Information RPC Service in CMake\nDESCRIPTION: Creates a Zephyr library and adds the Device Information RPC service source file to be compiled. This CMake configuration declares the library and its source dependencies for the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_rpc/dev_info/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(\n  dev_info_rpc.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Dependencies and Data Model\nDESCRIPTION: Includes necessary Matter configuration files for GNU STD support and data model initialization.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/window_covering/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/nrfconnect/app/enable-gnu-std.cmake)\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/src/app/chip_data_model.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Packing Type with Shell Command\nDESCRIPTION: Command to set the packing type (sequential or interleaved) for BIS streams in a specific Broadcast Isochronous Group.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnac packing <seq/int> <BIG index>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Library Dependencies\nDESCRIPTION: Links the hostap_crypto interface library with the main hostap library to provide access to utility functions from the src/utils directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/hostap_crypto/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(hostap_crypto INTERFACE hostap)\n```\n\n----------------------------------------\n\nTITLE: LED Effect Macro Definition\nDESCRIPTION: The LED_EFFECT_LED_BLINK2 macro is used in the CAF LED module to define a blinking pattern with two LEDs. This allows for creating visual indicators in applications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.9.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nLED_EFFECT_LED_BLINK2\n```\n\n----------------------------------------\n\nTITLE: Including General Sample Information in reStructuredText\nDESCRIPTION: This snippet includes a section of general information about samples from an external file. It uses specific start and end markers to include only a portion of the referenced file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/net.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform Subdirectories in CMake\nDESCRIPTION: Adds subdirectories for trusted firmware and board configuration using add_subdirectory() for Nordic nRF91 platform\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/tfm_boards/nrf9160/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${Trusted\\ Firmware\\ M_SOURCE_DIR}/platform/ext/target/nordic_nrf/common/nrf91 nrf91)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(.. tfm_board)\n```\n\n----------------------------------------\n\nTITLE: Setting KMU Key ID Using PSA Crypto API\nDESCRIPTION: Code snippet showing how to set a key ID in the KMU using the PSA Crypto API, combining usage scheme and slot number to create a key handle.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/cryptography.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPSA_KEY_HANDLE_FROM_CRACEN_KMU_SLOT(kmu_usage_scheme, kmu_slot_nr)\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Connection and UDP Upload Testing\nDESCRIPTION: Commands for connecting to Wi-Fi network, setting TX rate to 6 Mbps, and initiating UDP upload test\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/adaptivity_test_procedure.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwifi connect -s <SSID> -k <key_management> -p <passphrase>\nnrf70 util tx_rate 0 6\nzperf udp upload 192.168.1.20 5001 20 1k 20M\n```\n\n----------------------------------------\n\nTITLE: Corrupting the Main Application for Testing\nDESCRIPTION: Command to corrupt the currently running main application by overwriting the beginning of the application partition using nrfutil.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/recovery/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device x-write --address 0xE0BD000 --value 0xFFFF --serial-number <dk_serial_number>\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for nrfutil Recover Command\nDESCRIPTION: This command displays the help information for the nrfutil recover command, providing guidance on its usage and available options. It is useful for understanding the tool's capabilities and necessary parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/includes/nRF54H20_erase_UICR.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device recover --help\n```\n\n----------------------------------------\n\nTITLE: Adding Project Include Directories\nDESCRIPTION: Adds the current source directory to the include paths for the application target, allowing header files in the current directory to be included\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/common_events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Conditional Build Configuration\nDESCRIPTION: Configures build targets based on Bluetooth Audio Profile (BAP) configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_BT_BAP_BROADCAST_SINK)\n\tadd_subdirectory(broadcast_sink)\nendif()\n\nif (CONFIG_BT_BAP_BROADCAST_SOURCE)\n\tadd_subdirectory(broadcast_source)\nendif()\n\nif (CONFIG_BT_BAP_UNICAST_CLIENT)\n\tadd_subdirectory(unicast_client)\nendif()\n\nif (CONFIG_BT_BAP_UNICAST_SERVER)\n\tadd_subdirectory(unicast_server)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying Sensor Device Output Using C\nDESCRIPTION: This snippet shows the output from an EnOcean sensor device. It reports various sensor values, including occupancy status and light levels, formatted for clarity.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/enocean/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n   EnOcean sensor RX: bb:00:00:00:00:e5:\n        Occupancy:          true\n        Light (sensor):     85 lx\n        Energy level:       92 %\n        Light (solar cell): 365 lx\n```\n\n----------------------------------------\n\nTITLE: nRF91 Modem Trace RTT Configuration\nDESCRIPTION: Configuration snippet for enabling modem tracing with RTT backend on nRF91 series devices\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NRF_MODEM_LIB_TRACE=y\nCONFIG_NRF_MODEM_LIB_TRACE_BACKEND_RTT=y\n```\n\n----------------------------------------\n\nTITLE: Defining Kconfig Option in reStructuredText\nDESCRIPTION: This snippet shows how to reference a Kconfig option in reStructuredText documentation using the kconfig:option role.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:kconfig:option:`CONFIG_WARN_EXPERIMENTAL`\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Server URI\nDESCRIPTION: AT command to configure the URI of a custom server for the library to connect to. The URI must be specified as a string in double quotes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_19\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"uri\"[,<uri>]\n```\n\n----------------------------------------\n\nTITLE: CMUX with PPP Example\nDESCRIPTION: Example demonstrating CMUX usage with PPP enabled, showing channel configuration and address changes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CMUX_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: AT\nCODE:\n```\nAT#XCMUX?\n\n#XCMUX: 1,2\n\nOK\nAT#XCMUX=2\n\nOK\n// Start up CMUX and open the channels. The AT channel is now at address 2.\nAT#XCMUX?\n\n#XCMUX: 2,2\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Zephyr Project Configuration\nDESCRIPTION: Finds the Zephyr RTOS package and sets up the project with the name 'smp_svr_ext_xip'\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/extxip_smp_svr/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(smp_svr_ext_xip)\n```\n\n----------------------------------------\n\nTITLE: nRF91 Modem Trace RAM Configuration\nDESCRIPTION: Configuration snippet for enabling modem tracing with RAM backend on nRF91 series devices\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_1\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_NRF_MODEM_LIB_TRACE=y\nCONFIG_NRF_MODEM_LIB_TRACE_BACKEND_RAM=y\n```\n\n----------------------------------------\n\nTITLE: Setting IEEE 802.15.4 channel\nDESCRIPTION: This command changes the IEEE 802.15.4 radio channel to listen on. The `<channel>` argument is an integer between 11 and 26.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"channel *<channel>*\"\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing TF-M PSA Template Sample\nDESCRIPTION: Commands to build and flash the main TF-M PSA template sample without erasing existing PSA platform security parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/tfm/tfm_psa_template/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp/ns nrf/samples/tfm/tfm_psa_template\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Setting IEEE 802.15.4 Data Rate for Thread Radio\nDESCRIPTION: Sets the data rate to IEEE 802.15.4 standard of 250 Kbit/s for Thread radio communication. This is the standard data rate used for Thread networks.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/thread_radio_testing.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndata_rate ieee802154_250Kbit\n```\n\n----------------------------------------\n\nTITLE: Adding Application-Specific Source Files to nrf_auraconfig\nDESCRIPTION: Collects all source files from the 'src' directory and adds them to the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\n\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Setting Broadcast Name with Shell Command\nDESCRIPTION: Command to set the broadcast name metadata for a Broadcast Isochronous Group. This name can be displayed on receiving devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnac broadcast_name <name> <BIG index>\n```\n\n----------------------------------------\n\nTITLE: Cancelling Location Request in MoSh\nDESCRIPTION: Shows how to cancel an ongoing or periodic location request using the MoSh location command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nlocation cancel\n```\n\n----------------------------------------\n\nTITLE: FTP Client Example Commands\nDESCRIPTION: Examples of FTP client operations including opening a connection, checking status, and changing transfer modes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/FTP_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT\nCODE:\n```\nAT#XFTP=\"open\",,,,\"speedtest.tele2.net\"\nAT#XFTP=\"status\"\nAT#XFTP=\"ascii\"\nAT#XFTP=\"binary\"\nAT#XFTP=\"close\"\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Radio Configuration RST Table\nDESCRIPTION: reStructuredText table defining radio test subcommands including calibration, transmission, reception, and monitoring parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/radio_test_subcommands.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table:: Wi-Fi radio test subcommands\n   :header-rows: 1\n\n   * - Subcommand\n     - Argument\n     - Default value\n     - Type\n     - Description\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for nRF5340 Application Core\nDESCRIPTION: Adds app_core.c to the Zephyr library sources when building for the nRF5340 application core.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net_core_monitor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_SOC_NRF5340_CPUAPP)\n\tzephyr_library_sources(app_core.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting LTE-M System Mode Command\nDESCRIPTION: AT command sequence to configure the modem to use only LTE-M mode and save the configuration to NVM.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/nRF91_as_Zephyr_modem.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAT%XSYSTEMMODE=1,0,0,0\n```\n\n----------------------------------------\n\nTITLE: Adding Modem-Specific Features to nRF Cloud Project\nDESCRIPTION: Conditionally adds modem-specific features (AT commands) if the nRF modem library is enabled in the configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_NRF_MODEM_LIB)\n\ttarget_sources(app PRIVATE src/at_commands.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Read from TWI Device Command Format\nDESCRIPTION: AT command format for reading data from a TWI peripheral device. Includes index, device address and number of bytes to read.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TWI_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XTWIR=<index>,<dev_addr>,<num_read>\n```\n\n----------------------------------------\n\nTITLE: Source file\nDESCRIPTION: This snippet refers to the source file that contains the implementation of the Generic Battery Server model. It is located at `subsys/bluetooth/mesh/gen_battery_srv.c`.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_battery_srv.rst#2025-04-21_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n| Source file: :file:`subsys/bluetooth/mesh/gen_battery_srv.c`\n```\n\n----------------------------------------\n\nTITLE: Defining Project\nDESCRIPTION: Defines the Zephyr project named `idle_pwm_loopback`. This sets up the project environment and makes project-specific variables available.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_pwm_loopback/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nproject(idle_pwm_loopback)\n```\n\n----------------------------------------\n\nTITLE: DECT MAC Setting Target\nDESCRIPTION: This command sets the target address for DECT communication. In this example, the target address is set to 1234.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_22\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ dect sett -t 1234\n```\n\n----------------------------------------\n\nTITLE: Struct References in HID State Implementation\nDESCRIPTION: Key C structures referenced in the HID state implementation including hid_report_subscriber_event, subscriber, report_state, report_data, and hid_report_event\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/hid_state.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct hid_report_subscriber_event;\nstruct subscriber;\nstruct report_state;\nstruct report_data;\nstruct hid_report_event;\nstruct leds_event;\n```\n\n----------------------------------------\n\nTITLE: Provisioning Root CA Certificate on nRF91 Device\nDESCRIPTION: Command to provision the Amazon Root CA certificate on an nRF91 series device using the nrfcredstore tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnrfcredstore <serial port> write <sec tag> ROOT_CA_CERT AmazonRootCA1.pem\n```\n\n----------------------------------------\n\nTITLE: Fast Pair Module Events Structure\nDESCRIPTION: C structures defining the Bluetooth peer events and authentication callbacks used by the Fast Pair module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/fast_pair_app.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct ble_peer_event\nstruct ble_peer_operation_event\nstruct ble_dongle_peer_event\nstruct bt_conn_auth_cb\n```\n\n----------------------------------------\n\nTITLE: Changing to DFU Artifacts Directory\nDESCRIPTION: Command for changing the working directory to the DFU artifacts folder to prepare for uploading test firmware.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_21\n\nLANGUAGE: console\nCODE:\n```\ncd build/DFU\n```\n\n----------------------------------------\n\nTITLE: Replacing AT Command Parser Header Includes in C\nDESCRIPTION: Updates the header includes to use the new AT Parser library instead of the deprecated AT Command Parser library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n#include <modem/at_parser.h>\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: This snippet defines the project name as \"plat_devconfig\". This name is used by CMake to identify the project and manage its build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/plat_devconfig/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(plat_devconfig)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Name\nDESCRIPTION: Sets the project name to NONE, which is a placeholder indicating no specific project name is required for this configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nfc/tnep_poller/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(NONE)\n```\n\n----------------------------------------\n\nTITLE: Building HTTPS Client with Mbed TLS and TF-M\nDESCRIPTION: Command to build the sample with Mbed TLS and TF-M support for nRF91 Series development kits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/https_client/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n-DEXTRA_CONF_FILE=overlay-tfm-nrf91.conf\n```\n\n----------------------------------------\n\nTITLE: Disabling Thread Network in CLI Sample\nDESCRIPTION: Command to stop the Thread network in the OpenThread CLI sample, which is necessary before starting the manual commissioning process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot thread stop\n```\n\n----------------------------------------\n\nTITLE: Defining DFU Target Image Partitions (Device Tree)\nDESCRIPTION: Device tree source snippet defining DFU target image partitions for A/B update method.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_46\n\nLANGUAGE: plaintext\nCODE:\n```\ndfu_target_img_22: cpuapp_slot_b_partition: partition@14c000 {\n   reg = < 0x14c000 DT_SIZE_K(592) >;\n};\n\ndfu_target_img_21: cpuapp_slot_a_partition: partition@b8000 {\n   reg = < 0xb8000 DT_SIZE_K(592) >;\n};\n\n...\n\ndfu_target_img_32: cpurad_slot_b_partition: partition@86000 {\n   reg = <0x86000 DT_SIZE_K(200)>;\n};\n\ndfu_target_img_31: cpurad_slot_a_partition: partition@54000 {\n   reg = < 0x54000 DT_SIZE_K(200) >;\n};\n```\n\n----------------------------------------\n\nTITLE: Project Declaration for Integration Test Suite - CMake\nDESCRIPTION: This snippet declares a CMake project named 'integration_test_suit_storage', including a template for tests sourced from another CMake file. The project is intended for creating an integration test suite targeting storage functionalities within the SUIT framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/storage/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(integration_test_suit_storage)\ninclude(../cmake/test_template.cmake)\n```\n\n----------------------------------------\n\nTITLE: Managing Combined VPR Timer Counters in C\nDESCRIPTION: API functions for controlling the 32-bit combined timer mode. These functions operate on both counter 0 and counter 1 as a single logical unit.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_cst_vtim_combined_counter_get()\nnrf_vpr_cst_vtim_combined_counter_set()\nnrf_vpr_cst_vtim_combined_counter_top_get()\nnrf_vpr_cst_vtim_combined_counter_top_set()\nnrf_vpr_cst_vtim_combined_counter_add_set()\nnrf_vpr_cst_vtim_combined_counter_wait_trigger()\n```\n\n----------------------------------------\n\nTITLE: Linking SUIT Memptr Storage Interface Library\nDESCRIPTION: Links the Zephyr library with the SUIT platform's internal APIs header for memory pointer storage interface\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/suit_memptr_storage/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_link_libraries(suit_memptr_storage_interface)\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure Definition\nDESCRIPTION: Defines the structure of a RST documentation file for nRF Desktop Kconfig options, including section reference, title, and table of contents directives.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/configuration_options.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _config_desktop_app_options:\n\nnRF Desktop: Application Kconfig options scheme\n###############################################\n\n.. contents::\n   :local:\n   :depth: 2\n\nFollowing are the application-specific configuration options that can be configured for the nRF desktop and the internal modules:\n\n.. options-from-kconfig::\n   :show-type:\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Semiconductor Project\nDESCRIPTION: This CMake script sets up the build environment for a Nordic Semiconductor project. It specifies the minimum CMake version, finds the Zephyr package, and adds the main source file to the project. The script is designed to work with the nRF Connect SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/mesh/models/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# Copyright (c) 2020 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring TX Prioritized STA Mode in nRF Wi-Fi Driver\nDESCRIPTION: Configuration optimized for transmission-heavy applications. Provides TCP throughput of 13.7/9.3 Mbps (TX/RX) and UDP throughput of 27.6/19.6 Mbps.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/stack_configuration.rst#2025-04-21_snippet_7\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_WIFI_NM_WPA_SUPPLICANT=y\nCONFIG_NRF70_AP_MODE=n\nCONFIG_NRF70_P2P_MODE=n\nCONFIG_NET_PKT_TX_COUNT=32\nCONFIG_NET_PKT_RX_COUNT=10\nCONFIG_NET_BUF_TX_COUNT=64\nCONFIG_NET_BUF_RX_COUNT=10\nCONFIG_NRF70_RX_NUM_BUFS=10\nCONFIG_NET_BUF_DATA_SIZE=1100\nCONFIG_HEAP_MEM_POOL_SIZE=40144\nCONFIG_NRF_WIFI_CTRL_HEAP_SIZE=20000\nCONFIG_NRF_WIFI_DATA_HEAP_SIZE=199856\nCONFIG_SPEED_OPTIMIZATIONS=y\nCONFIG_NRF70_UTIL=n\nCONFIG_NRF70_MAX_TX_AGGREGATION=9\nCONFIG_NRF70_MAX_TX_TOKENS=12\n```\n\n----------------------------------------\n\nTITLE: Starting Joining Process in CLI Sample\nDESCRIPTION: Commands to start the joining process on the Joiner device in the OpenThread CLI sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot ifconfig up\nDone\nuart:~$ ot joiner start N0RD1C\nDone\n```\n\n----------------------------------------\n\nTITLE: Sequential Scanning and Connection Sample Output\nDESCRIPTION: Example console output showing the sequential scanning and connection process timing, demonstrating connections to 16 different Bluetooth devices with random addresses.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/scanning_while_connecting/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nI: SEQUENTIAL_SCAN_AND_CONNECT:\nI: starting sample benchmark\nI: Connected to FF:AB:68:0C:34:FD (random), number of connections 1\nI: Connected to E2:12:BF:D3:FB:D5 (random), number of connections 2\n[...]\nI: 8 seconds to create 16 connections\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Power OnOff Server Settings\nDESCRIPTION: Configuration parameters for enabling and managing the Generic Power OnOff Server model, including persistent storage requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_ponoff_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_BT_SETTINGS=y\n```\n\n----------------------------------------\n\nTITLE: Listing Available nRF Devices\nDESCRIPTION: Command to list all available nRF development kits connected to the system using nrfutil.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/thread_coex/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device list\n```\n\n----------------------------------------\n\nTITLE: Reading Air Pressure Measurement Value\nDESCRIPTION: Command to read pressure sensor value from the Matter weather station device using CHIP Tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_weather_station/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nchip-tool pressuremeasurement read measured-value <Device ID> 3\n```\n\n----------------------------------------\n\nTITLE: CMUX Setup Basic Syntax\nDESCRIPTION: Basic syntax for the #XCMUX command to start CMUX and assign CMUX channels. The AT_channel parameter specifies the address of the AT channel.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CMUX_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT\nCODE:\n```\nAT#XCMUX[=<AT_channel>]\n```\n\n----------------------------------------\n\nTITLE: Minimum CMake Version Requirement for Zephyr\nDESCRIPTION: This snippet specifies the minimum version of CMake required for the project, which ensures compatibility with features used in the Zephyr build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_event_manager_profiler_tracer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Linking MCUboot Bootutil Library in MCUmgr SMP Client Test\nDESCRIPTION: Links the MCUboot bootutil library to the project, which is likely required for bootloader-related functionality.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/mcumgr_smp_client/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(MCUBOOT_BOOTUTIL)\n```\n\n----------------------------------------\n\nTITLE: Reading VIO Pin Input in C\nDESCRIPTION: Function to read the current input values from VPR IO pins.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/coprocessors/rt_peripherals.rst#2025-04-21_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nnrf_vpr_csr_vio_in_get()\n```\n\n----------------------------------------\n\nTITLE: Setting Static Partition Layout for NRF5340\nDESCRIPTION: Configures static partition layout for NRF5340 CPU application variants\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/boards/nordic/thingy91x/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_BOARD_THINGY91X_NRF5340_CPUAPP OR CONFIG_BOARD_THINGY91X_NRF5340_CPUAPP_NS)\n  set(PM_STATIC_YML_FILE ${CMAKE_CURRENT_LIST_DIR}/thingy91x_nrf5340_pm_static.yml CACHE INTERNAL \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Name\nDESCRIPTION: Defines the project name as 'nrf_grtc_timer', which will be used for build configuration and target identification\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/timer/nrf_grtc_timer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(nrf_grtc_timer)\n```\n\n----------------------------------------\n\nTITLE: AT Command Line Feed Processing\nDESCRIPTION: Configuration option to enable multiline AT command reception by replacing \\n with <CR><LF>\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_AT_SHELL_UNESCAPE_LF\n```\n\n----------------------------------------\n\nTITLE: Mode Change Command\nDESCRIPTION: Command to switch the device into CMD mode (value 1).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_56\n\nLANGUAGE: plaintext\nCODE:\n```\ncustom changemode *1*\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for NCS Specific Commits\nDESCRIPTION: Command to list NCS specific commits, including cherry-picked upstream commits\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0-preview1.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline manifest-rev ^ea02b93eea\n```\n\n----------------------------------------\n\nTITLE: Setting Local Location Value with Response\nDESCRIPTION: This command sets the local location value of the Generic Location state and waits for a response, accepting multiple parameters for location details.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_loc_cli.rst#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models loc local-set <North> <East> <Alt> <Floor> [TimeDlt(ms) [Prec(mm) [IsMobile]]]\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr Library for Flash RPC\nDESCRIPTION: Creates a Zephyr library and conditionally adds source files based on configuration options for Flash RPC system components\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/flash/flash_rpc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_FLASH_RPC_SYS_INIT flash_rpc_common.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_FLASH_RPC_HOST flash_rpc_host.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_FLASH_RPC_CONTROLLER flash_rpc_controller.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Matter Template in CMake\nDESCRIPTION: Specifies include directories for the application, including the src directory and the ZAP files path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/template/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE\n    src\n    ${CONFIG_NCS_SAMPLE_MATTER_ZAP_FILES_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Running FICR Update Script on Windows\nDESCRIPTION: This command executes the J-Link script to update the FICR on Windows systems.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\njlink.exe -CommanderScript nrf54h20es_trim_adjust.jlink\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake for Nordic SDK\nDESCRIPTION: Adds the current source directory to the public include paths for the 'app' target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/event_manager_proxy/common_events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: zperf UDP download command\nDESCRIPTION: This command initiates a UDP download test using the zperf tool. It takes the destination port as a parameter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/throughput/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nzperf udp download <dest port>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Library for CURL\nDESCRIPTION: Initializes a Zephyr library, sets include directories, and links the CURL library\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/curl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_include_directories(lib)\n\nzephyr_library_link_libraries(curl)\n```\n\n----------------------------------------\n\nTITLE: Updating time asynchronously in Date-Time module\nDESCRIPTION: The date_time_update function is now asynchronous and returns an error code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.4.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ndate_time_update_async()\n```\n\n----------------------------------------\n\nTITLE: Including Provider Header\nDESCRIPTION: Header inclusion for MyBtServiceDataProvider in the BLE bridged device factory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\n#include \"my_bt_service_data_provider.h\"\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Bluetooth Peers in CAF\nDESCRIPTION: This function call is used by application modules to disconnect a remote Bluetooth peer in the CAF Bluetooth LE state module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_state.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nbt_conn_disconnect()\n```\n\n----------------------------------------\n\nTITLE: Installing MCUmgr CLI Tool (Go version >= 1.18)\nDESCRIPTION: Command to install the MCUmgr command-line tool for Go versions 1.18 and later.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo install github.com/apache/mynewt-mcumgr-cli/mcumgr@latest\n```\n\n----------------------------------------\n\nTITLE: Enabling FEM Power Models in Kconfig\nDESCRIPTION: Kconfig option to enable FEM power models in MPSL. This is required for both built-in and custom models.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_power_models.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MPSL_FEM_POWER_MODEL=y\n```\n\n----------------------------------------\n\nTITLE: Defining Project\nDESCRIPTION: Defines the project name as `idle_ppr`. This is the main identifier for the application within the CMake build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_ppr/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nproject(idle_ppr)\n```\n\n----------------------------------------\n\nTITLE: Adding Core Bluetooth Rendering and Capture Source to Application\nDESCRIPTION: Adds the main Bluetooth rendering and capture implementation file to the application build sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_rendering_and_capture/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t       ${CMAKE_CURRENT_SOURCE_DIR}/bt_rendering_and_capture.c)\n```\n\n----------------------------------------\n\nTITLE: Logging Dependencies for nRF Connect SDK\nDESCRIPTION: List of required software libraries and header files for logging and system functionality in the nRF Connect SDK project\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/coap_client/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <net/coap.h>\n#include <logging/log.h>\n#include <kernel.h>\n```\n\n----------------------------------------\n\nTITLE: Finding the Zephyr package\nDESCRIPTION: This snippet uses the `find_package` command to locate the Zephyr SDK. It requires the Zephyr package and uses the environment variable `ZEPHYR_BASE` as a hint for the location of the Zephyr installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/entropy_nrf53/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Querying Socket Selection Status in AT Commands\nDESCRIPTION: This AT command queries the current socket selection status, returning information about multiple sockets including their IDs, security status, PDN IDs, and more.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XSOCKETSELECT?\n#XSOCKETSELECT: 0,1,0,1,-1,2,0\n#XSOCKETSELECT: 1,1,0,2,-1,3,0\n#XSOCKETSELECT: 2,1,0,1,16842755,4,0\n#XSOCKETSELECT: 3,1,0,2,16842755,5,0\n#XSOCKETSELECT: 4,1,1,1,-1,6,0\n#XSOCKETSELECT: 5,1,1,2,-1,7,0\n#XSOCKETSELECT: 6,1,1,1,16842755,8,0\n#XSOCKETSELECT: 7,1,0,1,-1,9,0\n#XSOCKETSELECT: 7\nOK\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth RPC Source Files\nDESCRIPTION: This snippet specifies the source files that are part of the Bluetooth RPC library, ensuring the implementation of various Bluetooth functionalities.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/rpc/client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources(\n  bt_rpc_gap_client.c\n  bt_rpc_crypto_client.c\n)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(\n  CONFIG_BT_CONN\n  bt_rpc_conn_client.c\n  bt_rpc_gatt_client.c\n)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources(\n  ${ZEPHYR_BASE}/subsys/bluetooth/host/uuid.c\n)\n```\n\nLANGUAGE: C\nCODE:\n```\nzephyr_library_sources_ifdef(\n  CONFIG_BT_RPC_INTERNAL_FUNCTIONS\n  bt_rpc_internal_client.c\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr Library for AT Command Custom Module\nDESCRIPTION: Creates a Zephyr library and adds the custom AT command source file for compilation and linking\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/at_cmd_custom/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(at_cmd_custom.c)\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option for CPU Frequency\nDESCRIPTION: This snippet sets the TFM_CPU_FREQ_MHZ CMake option using the value of CONFIG_TFM_CPU_FREQ_MHZ, which represents the CPU frequency in MHz. This value is passed to TF-M.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_CPU_FREQ_MHZ)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DTFM_CPU_FREQ_MHZ=${CONFIG_TFM_CPU_FREQ_MHZ}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Configuration\nDESCRIPTION: This snippet initializes a new CMake project named 'remote'. The project is set up to compile source files located in the specified relative path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle/remote/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(remote)\n\ntarget_sources(app PRIVATE ../src/main.c)\n```\n\n----------------------------------------\n\nTITLE: nRF Util Command for Network Core Programming\nDESCRIPTION: Command to erase flash memory and program the network sample using nRF Util for nRF5340 DK\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/building_nrf53.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device program --firmware zephyr.hex --options chip_erase_mode=ERASE_ALL --core Network\n```\n\n----------------------------------------\n\nTITLE: Querying Zephyr Commits in Git (Shell)\nDESCRIPTION: Git commands to list Zephyr commits incorporated into nRF Connect SDK since the last release, including both upstream and NCS-specific commits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.2.0.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline cd16a8388f ^71ef669ea4\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^cd16a8388f\n```\n\n----------------------------------------\n\nTITLE: Using FICR/OTP Programming Commands\nDESCRIPTION: This snippet demonstrates the command interface for reading or writing the OTP params via the command `wifi_radio_ficr_prog`.  It takes a subcommand, an offset, and arguments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/sample_description.rst#2025-04-21_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nwifi_radio_ficr_prog <subcommand> [Offset] [arg1] [arg2] .. [argN]\n```\n\n----------------------------------------\n\nTITLE: Adding Main Source File\nDESCRIPTION: Includes the main source file for the application target, specifying the primary implementation file\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_compress/decompression/arm_thumb/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Installing MCUmgr CLI Tool (Go version < 1.18)\nDESCRIPTION: Command to install the MCUmgr command-line tool for Go versions earlier than 1.18.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/dfu_tools_mcumgr_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo get github.com/apache/mynewt-mcumgr-cli/mcumgr\n```\n\n----------------------------------------\n\nTITLE: Configuring GNSS for Periodic Fixes with A-GNSS in MoSh\nDESCRIPTION: Demonstrates setting up GNSS for periodic fixes with LTE PSM, NMEA output, automatic A-GNSS data fetching, and specific interval and timeout.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/README.rst#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nlink psm -e\ngnss output 0 1 0\ngnss agnss automatic enable\ngnss mode periodic 300 120\ngnss start\n```\n\n----------------------------------------\n\nTITLE: Project Initialization and Source Configuration\nDESCRIPTION: Defines the project name and specifies the main source file for the application\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_counter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nproject(idle_counter)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Project Initialization\nDESCRIPTION: Sets the project name and adds the main source file to the application target\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_ipc/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nproject(idle_ipc)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Audio Module Template Source File\nDESCRIPTION: Adds the audio module template source file to the application target using CMake's target_sources command\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/audio/audio_module_template/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/audio_module_template.c)\n```\n\n----------------------------------------\n\nTITLE: Programming Network Core Firmware\nDESCRIPTION: Command to program the relevant firmware to the network core of nRF7002 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/test_setup.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$  nrfutil device program --firmware merged_CPUNET.hex --core Network --options chip_erase_mode=ERASE_ALL,reset=RESET_SYSTEM\n```\n\n----------------------------------------\n\nTITLE: Checking NCS-Specific Commits\nDESCRIPTION: Shell command to list NCS-specific commits, including cherry-picked upstream commits.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.99-cs1.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline manifest-rev ^28b6861211\n```\n\n----------------------------------------\n\nTITLE: Installing AWS IoT Library Dependencies\nDESCRIPTION: Command to install the required dependencies for using the nrfcredstore tool with the AWS IoT library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip3 install -r nrf/scripts/requirements-extra.txt\n```\n\n----------------------------------------\n\nTITLE: Removed P-GPS Location Storage Function Call (C)\nDESCRIPTION: The function call to store P-GPS location is no longer supported in the Location library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.2.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nnrf_cloud_pgps_set_location()\n```\n\n----------------------------------------\n\nTITLE: Device Erase Command with nRF Util\nDESCRIPTION: Command to erase all contents of the SoC before key provisioning\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/kmu_provision.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device erase --all\n```\n\n----------------------------------------\n\nTITLE: Key Management Function Addition\nDESCRIPTION: Added a new function to clear credentials and updated credential reading functionality\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nmodem_key_mgmt_clear()\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Project\nDESCRIPTION: This snippet defines the Zephyr project named 'uarte_suspend'. This command initializes the project within the Zephyr build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/uarte_suspend/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(uarte_suspend)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Software Coexistence Support\nDESCRIPTION: Includes software-based coexistence implementation when MPSL and software coexistence are enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/mpsl/cx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_MPSL_CX_SOFTWARE AND CONFIG_MPSL)\n  zephyr_library_sources(software/mpsl_cx_software.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling AT Command Requests in Kconfig\nDESCRIPTION: Allow remote execution of modem AT commands, requested using application-specific device messages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_30\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_AT_CMD_REQUESTS\n```\n\n----------------------------------------\n\nTITLE: Printing Connectionless Beacon Demo Information in C\nDESCRIPTION: This code snippet demonstrates the console output when starting the Connectionless Beacon Demo. It shows the initialization steps, including Bluetooth setup, advertising configuration, CTE parameters, and the device's random address.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/direction_finding_connectionless_tx/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nStarting Connectionless Beacon Demo\nBluetooth initialization...success\nAdvertising set create...success\nUpdate CTE params...success\nPeriodic advertising params set...success\nEnable CTE...success\nPeriodic advertising enable...success\nExtended advertising enable...success\nStarted extended advertising as XX:XX:XX:XX:XX:XX (random)\n```\n\n----------------------------------------\n\nTITLE: Building Matter Template with TF-M Support\nDESCRIPTION: Command to build the Matter template sample with Trusted Firmware-M support for nRF54L15 DK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/template/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54l15dk/nrf54l15/cpuapp/ns\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in RST\nDESCRIPTION: This RST directive generates a local table of contents for the document, with a depth of 2 levels.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_provisioning.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. contents::\n   :local:\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: Attaching AWS IoT Policy to Certificate\nDESCRIPTION: AWS CLI command to attach an IoT policy to a previously registered certificate using its ARN.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_iot.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\naws iot attach-policy --target <certificate arn> --policy-name my-policy\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenThread UDP Source Configuration\nDESCRIPTION: Adds UDP-related source file when NET_L2_OPENTHREAD is enabled in the configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_NET_L2_OPENTHREAD\n  ot_rpc_udp.c\n)\n```\n\n----------------------------------------\n\nTITLE: Selecting an instance of the Generic Level Client model\nDESCRIPTION: Selects the Generic Level Client model instantiated on the specified element ID for message sending.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_lvl_cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmesh models lvl instance set <ElemIdx>\n```\n\n----------------------------------------\n\nTITLE: nRF Util Device Reset Command\nDESCRIPTION: Command to reset the nRF5340 development kit using pin reset\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/building_nrf53.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnrfutil device reset --reset-kind=RESET_PIN\n```\n\n----------------------------------------\n\nTITLE: Power Sources Configuration Command\nDESCRIPTION: AT command to set up to 8 power sources in the Available Power Sources resource of the Device object.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIER=\"power_sources\"[,<source1>[,<source2>[,...[,<source8>]]]]\n```\n\n----------------------------------------\n\nTITLE: GSM PPP Control Functions - C\nDESCRIPTION: New functions for starting and stopping PPP networking stack without device reboot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\ngsm_ppp_start\ngsm_ppp_stop\n```\n\n----------------------------------------\n\nTITLE: Creating Flash IPUC Driver for Cache in C\nDESCRIPTION: Creates a read-write flash IPUC driver instance based on the minimum absolute address for DFU cache partitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nflash_cache_ipuc_create()\n```\n\n----------------------------------------\n\nTITLE: Nordic SoC Family Detection\nDESCRIPTION: Determines the Nordic SoC family (NRF91 or NRF53) based on the configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/hw_unique_key_tfm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (DEFINED CONFIG_SOC_NRF9160)\n  set(family_arg NRF91)\nelse()\n  set(family_arg NRF53)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Clearing Configuration with Shell Command\nDESCRIPTION: Command to clear any previous configuration, resetting the broadcaster to its default state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnac clear\n```\n\n----------------------------------------\n\nTITLE: Checking out Preview Tag with west\nDESCRIPTION: Checks out a preview tag of the nRF Connect SDK using the west tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nwest init -m https://github.com/nrfconnect/sdk-nrf --mr v2.8.0-preview1\n```\n\n----------------------------------------\n\nTITLE: West Flash for Multi-Image Build\nDESCRIPTION: Command to program multi-image builds for different cores using west tool\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf53/building_nrf53.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Creating CURL Interface Library\nDESCRIPTION: Establishes an interface library named 'curl' with include directories for CURL headers\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/curl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(curl)\n\ntarget_include_directories(curl INTERFACE include/curl)\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Counter in Kconfig\nDESCRIPTION: Enable the test counter. When enabled, the test counter configuration setting in the shadow is ignored.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_29\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_TEST_COUNTER\n```\n\n----------------------------------------\n\nTITLE: Static Partition Manager File Example (YAML)\nDESCRIPTION: This is an example of a static Partition Manager file for nRF53 devices, defining the addresses and sizes of various partitions, including the main application, MCUboot, and firmware loader applications. This configuration is used with MCUboot in firmware loader mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n\"app:\\n  address: 0x10200\\n  region: flash_primary\\n  size: 0xdfe00\\nmcuboot:\\n  address: 0x0\\n  region: flash_primary\\n  size: 0x10000\\nmcuboot_pad:\\n  address: 0x10000\\n  region: flash_primary\\n  size: 0x200\\nmcuboot_primary:\\n  address: 0x10000\\n  orig_span: &id001\\n  - mcuboot_pad\\n  - app\\n  region: flash_primary\\n  size: 0xc0000\\n  span: *id001\\nmcuboot_primary_app:\\n  address: 0x10200\\n  orig_span: &id002\\n  - app\\n  region: flash_primary\\n  size: 0xbfe00\\n  span: *id002\\nfirmware_loader:\\n  address: 0xd0200\\n  region: flash_primary\\n  size: 0x1fe00\\nmcuboot_secondary:\\n  address: 0xd0000\\n  orig_span: &id003\\n  - mcuboot_pad\\n  - firmware_loader\\n  region: flash_primary\\n  size: 0x20000\\n  span: *id003\\nmcuboot_secondary_app:\\n  address: 0xd0200\\n  orig_span: &id004\\n  - firmware_loader\\n  region: flash_primary\\n  size: 0x1fe00\\n  span: *id004\\nsettings_storage:\\n  address: 0xf0000\\n  region: flash_primary\\n  size: 0x10000\\npcd_sram:\\n  address: 0x20000000\\n  size: 0x2000\\n  region: sram_primary\"\n```\n\n----------------------------------------\n\nTITLE: Creating Zephyr Library (CMake)\nDESCRIPTION: This CMake command creates a Zephyr library. This involves compiling the provided source files and linking the specified dependencies to produce a library that can be used by other modules within the Zephyr RTOS project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/stream/address_streamer_selector/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(src/suit_address_streamer_selector.c)\n```\n\n----------------------------------------\n\nTITLE: Source File Selection Based on FOTA Configuration\nDESCRIPTION: Conditionally includes source files based on whether full modem update is enabled. Sets main application sources and includes additional FOTA common source if needed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/fota_common/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_NRF_CLOUD_FOTA_FULL_MODEM_UPDATE)\nFILE(GLOB app_sources src/fmfu.c)\nelse()\nFILE(GLOB app_sources src/main.c)\nendif()\ntarget_sources(app PRIVATE ${app_sources})\n\nif (NOT CONFIG_NRF_CLOUD_FOTA)\n\ttarget_sources(app\n\t\tPRIVATE\n\t\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/src/nrf_cloud_fota_common.c\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding error.c to application sources using CMake\nDESCRIPTION: This CMake command adds the `error.c` source file located in the current source directory to the application's private target sources.  This ensures that the `error.c` file is compiled and linked into the final application executable. It depends on CMake being the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/modules/error/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/error.c)\n```\n\n----------------------------------------\n\nTITLE: Logging NCS-specific commits\nDESCRIPTION: Git command to list NCS-specific commits on top of Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.4.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline manifest-rev ^7a3b253ced\n```\n\n----------------------------------------\n\nTITLE: Enabling ICD Support in Matter\nDESCRIPTION: This snippet outlines the required Kconfig option to enable support for Intermittently Connected Devices in Matter, which is essential for managing devices that are not always reachable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/low_power_configuration.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nset the :kconfig:option:`CONFIG_CHIP_ENABLE_ICD_SUPPORT` Kconfig option to ``y``.\n```\n\n----------------------------------------\n\nTITLE: Updating nRF Util\nDESCRIPTION: Command to upgrade nRF Util to the latest version.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil self-upgrade\n```\n\n----------------------------------------\n\nTITLE: Devicetree Clock Macros\nDESCRIPTION: Devicetree macro APIs for accessing clock controller information in the device tree. These macros help retrieve controller identifiers from clock properties.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_architecture_clockman.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nDT_CLOCKS_CTLR_BY_IDX()  // Get controller node ID from clocks property at index\nDT_CLOCKS_CTLR()           // Get controller node ID from clocks property at index 0\n```\n\n----------------------------------------\n\nTITLE: Motion Module State Transitions - Struct References\nDESCRIPTION: References to the key structs used in motion event handling and state management\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/motion.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nmotion_event\nhid_report_sent_event\n```\n\n----------------------------------------\n\nTITLE: Example of Controlling a Light Device\nDESCRIPTION: Example CLI command showing how to turn on a simulated On/Off Light device on endpoint 3.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge onoff 1 3\n```\n\n----------------------------------------\n\nTITLE: SUIT Update Command\nDESCRIPTION: Command to update the SoC binaries using SUIT DFU protocol.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_custom_pcb.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device x-suit-dfu --serial-number <snr> --firmware nordic_top.suit\n```\n\n----------------------------------------\n\nTITLE: Installing West in Virtual Environment\nDESCRIPTION: Command to install the west tool within an activated Python virtual environment using pip3.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npip3 install west\n```\n\n----------------------------------------\n\nTITLE: Audio Data Structure Type\nDESCRIPTION: Type definition for SDU reference timestamp (sdu_ref) used for audio synchronization timing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/firmware_architecture.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nsdu_ref\nsdu_ref_us\n```\n\n----------------------------------------\n\nTITLE: Reading Basic Information Cluster RandomNumber Attribute\nDESCRIPTION: Retrieves the current random number value from the Basic Information cluster\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: matter-cli\nCODE:\n```\nany read-by-id 0x0028 0x17 1 0\n```\n\n----------------------------------------\n\nTITLE: Getting Current OnOff State of Light Control Server - C\nDESCRIPTION: Retrieves the current OnOff state from the Light Lightness Control Server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl light-onoff-get\n\tGet the Light Lightness Control Server's current OnOff state.\n```\n\n----------------------------------------\n\nTITLE: AT Command Configuration Example\nDESCRIPTION: Example showing AT command for cloud-to-nRF52 DFU service support\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT commands\nCODE:\n```\n#XDFUGET\n#XDFURUN\n```\n\n----------------------------------------\n\nTITLE: Setting CoAP FOTA Download Timeout in Kconfig\nDESCRIPTION: The time in minutes allotted for a FOTA download to complete.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_36\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_COAP_FOTA_DL_TIMEOUT_MIN\n```\n\n----------------------------------------\n\nTITLE: Zephyr SMP Server Sample Reference\nDESCRIPTION: Reference to Zephyr SMP server sample code that requires alignment with BT SMP configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.1.0.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nsmp-svr\n```\n\n----------------------------------------\n\nTITLE: Building Bluetooth Throughput Sample for nRF5340 DK\nDESCRIPTION: Command for building the Bluetooth throughput sample for the peer nRF5340 DK device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwest build -p -b nrf5340dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Application\nDESCRIPTION: Sets up the current directory as a private include path for the application target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/startup_cmd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Socket Command Syntax\nDESCRIPTION: AT command syntax for opening/closing network sockets with options for IP version, socket type, and role.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: AT\nCODE:\n```\n#XSOCKET=<op>[,<type>,<role>[,<cid>]]\n```\n\n----------------------------------------\n\nTITLE: Viewing Network Settings in CLI Sample\nDESCRIPTION: Command to display the newly generated Thread network settings in the OpenThread CLI sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot dataset\n```\n\n----------------------------------------\n\nTITLE: Stop capturing packets\nDESCRIPTION: The sleep command disables the radio and ends the receive process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"sleep\"\n```\n\n----------------------------------------\n\nTITLE: Generating Entropy using Arm CC310 in C\nDESCRIPTION: Added APIs to generate entropy using the Arm CC310 hardware accelerator.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.1.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nnrf_cc310_platform_readme\n```\n\n----------------------------------------\n\nTITLE: Setting Location Assistance Result Code Callback in C\nDESCRIPTION: Sets a callback for handling result codes using the location_assistance_set_result_code_cb function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_location_assistance.rst#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nlocation_assistance_set_result_code_cb();\n```\n\n----------------------------------------\n\nTITLE: Creating Zephyr Library for Azure FOTA\nDESCRIPTION: Initializes a Zephyr library and specifies azure_fota.c as its source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/azure_fota/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tazure_fota.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuration Note in reStructuredText\nDESCRIPTION: Directive indicating that the content is part of Matter smoke CO alarm's configuration section.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/smoke_co_alarm/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _matter_smoke_co_alarm_sample:\n```\n\n----------------------------------------\n\nTITLE: XMODEM Shutdown Notification Format\nDESCRIPTION: Format of the unsolicited notification sent when libmodem is shut down. Includes a result code (integer) indicating the result of the shutdown operation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/Generic_AT_commands.rst#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n#XMODEM: SHUTDOWN,<result>\n```\n\n----------------------------------------\n\nTITLE: Building WiFi Shell Sample with nRF70 Firmware Patch DFU using West\nDESCRIPTION: West command for building the WiFi Shell sample with DFU procedure for nRF70 Series firmware patch on nRF7002 DK platform. It configures external flash storage for WiFi patches and enables WiFi firmware patch DFU.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf70_fw_patch_update.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp -- -Dshell_SNIPPET=nrf70-fw-patch-ext-flash -DSB_CONFIG_WIFI_PATCHES_EXT_FLASH_STORE=y -DCONFIG_NRF_WIFI_FW_PATCH_DFU=y\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Outgoing Messages in Kconfig\nDESCRIPTION: Sets the maximum number of messages that can be in the outgoing message queue. Messages submitted past this limit will not be enqueued.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_MAX_OUTGOING_MESSAGES\n```\n\n----------------------------------------\n\nTITLE: UDP Client Connection Response Syntax\nDESCRIPTION: Response syntax for the UDP client set command showing success or failure to connect.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_12\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPCLI: <handle>,\"connected\"\n\n#XUDPCLI: <error>,\"not connected\"\n```\n\n----------------------------------------\n\nTITLE: CBOR Structure for Get SUIT Manifest State Request in SUIT SMP Extension\nDESCRIPTION: Defines the CBOR request format for retrieving information about a specific SUIT manifest. The request includes a role parameter to identify the manifest of interest.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_smp.rst#2025-04-21_snippet_4\n\nLANGUAGE: CBOR\nCODE:\n```\n{\n    (str)\"role\"    : (uint)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Default Light CTL State - Command Syntax\nDESCRIPTION: Retrieves the current Light CTL Default state value.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl default-get\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories in CMake for Nordic SDK\nDESCRIPTION: Adds the current source directory to the public include paths for the 'app' target, making headers in this directory available to other parts of the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf_sensor_manager/src/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr Project in CMake\nDESCRIPTION: The snippet configures a CMake project for a Zephyr-based application. It establishes a minimum required version of CMake, finds and loads the Zephyr package, and includes directories for compilation. It specifies application source files, essential for building the ADC project, by referencing main.c and driver_test.c files. This setup requires Zephyr SDK and cmake 3.13.1 or later.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/adc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nzephyr_include_directories(include)\n\nproject(adc)\n\ntarget_sources(app PRIVATE ./../common/main.c)\ntarget_sources(app PRIVATE src/driver_test.c)\n```\n\n----------------------------------------\n\nTITLE: Sysbuild Validation Check\nDESCRIPTION: Enforces multi-image application build requirements by checking sysbuild configuration, preventing incorrect build attempts\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_clock_control/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SYSBUILD)\n\tmessage(FATAL_ERROR\n\t\t\" This is a multi-image application that should be built using sysbuild.\\n\"\n\t\t\" Add --sysbuild argument to west build command to prepare all the images.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Doxygen Group to RST Document\nDESCRIPTION: Shows how to include a Doxygen group in an RST document using the Doxybridge Sphinx plugin.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/styleguide.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. doxygengroup:: bluetooth_throughput\n```\n\n----------------------------------------\n\nTITLE: Compiling the net-tools package\nDESCRIPTION: Command to build the net-tools package which includes the tunslip6 utility needed for creating SLIP interfaces.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/wfa_qt_app/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Referencing Doxygen API Documentation for Custom Service\nDESCRIPTION: This code snippet demonstrates how to reference a Doxygen group in Sphinx documentation to include API documentation for the custom service. It should be replaced with the actual Doxygen group name that contains the API documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/customservice_README.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. doxygengroup:: doxygen_group_name\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Active CASE Clients for Matter\nDESCRIPTION: This snippet describes how to configure the maximum number of CASE sessions that can be simultaneously re-established by the end device using the `CONFIG_CHIP_MAX_ACTIVE_CASE_CLIENTS` Kconfig option. Adjusting this value affects the speed of reconnection after an outage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/getting_started/advanced_kconfigs.rst#2025-04-21_snippet_6\n\nLANGUAGE: Kconfig\nCODE:\n```\n\":kconfig:option:`CONFIG_CHIP_MAX_ACTIVE_CASE_CLIENTS`\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Memfault SDK Subdirectory\nDESCRIPTION: Adds the Memfault firmware SDK subdirectory when CONFIG_MEMFAULT is enabled in the configuration\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_MEMFAULT memfault-firmware-sdk)\n```\n\n----------------------------------------\n\nTITLE: Enabling CoAP Shadow Handling in Kconfig\nDESCRIPTION: Periodically check for and process shadow delta messages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_32\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_COAP_SHADOW\n```\n\n----------------------------------------\n\nTITLE: PDN Configuration Header Reference\nDESCRIPTION: The header file location reference for PDN library configuration and API definitions\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/pdn.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ninclude/modem/pdn.h\n```\n\n----------------------------------------\n\nTITLE: System Power Off Command\nDESCRIPTION: The #XSHUTDOWN command puts the device into System OFF mode, the deepest power saving state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/Generic_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XSHUTDOWN\n```\n\n----------------------------------------\n\nTITLE: Example of Removing a Bridged Device\nDESCRIPTION: Example CLI command showing how to remove a bridged device from endpoint 3.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/matter_bridge_description.rst#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ matter_bridge remove 3\n```\n\n----------------------------------------\n\nTITLE: RST Include Directive\nDESCRIPTION: Includes event propagation documentation between specific markers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/constlat.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: event_propagation.rst\n    :start-after: table_constlat_start\n    :end-before: table_constlat_end\n```\n\n----------------------------------------\n\nTITLE: Power Manager Timeout Configuration\nDESCRIPTION: Kconfig setting for power manager timeout value for Thingy:53\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.0.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_CAF_POWER_MANAGER_TIMEOUT=30\n```\n\n----------------------------------------\n\nTITLE: Resuming DFU Transfer\nDESCRIPTION: This command resumes a previously suspended DFU transfer.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/dfu_over_bt_mesh.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmesh models dfu cli resume\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Mesh Shell for Distance Measurement Client\nDESCRIPTION: Kconfig options required to enable Distance Measurement Client shell commands in Bluetooth Mesh.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/vnd/dm_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nCONFIG_BT_MESH_SHELL\nCONFIG_BT_MESH_SHELL_DM_CLI\n```\n\n----------------------------------------\n\nTITLE: Installing SoC Binaries to nRF54H20 DK using SUIT DFU\nDESCRIPTION: Command to program the nRF54H20 SoC binaries bundle v0.6.5 using the SUIT DFU mechanism. This updates the SDFW and SCFW firmwares on the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7_99-cs2.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil device x-suit-dfu --firmware nordic_top.suit --serial-number <serialnumber>\n```\n\n----------------------------------------\n\nTITLE: Building for nRF7002 DK\nDESCRIPTION: Command to build the sample for the nRF7002 DK board target using West.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/monitor/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwest build -b nrf7002dk/nrf5340/cpuapp\n```\n\n----------------------------------------\n\nTITLE: Verifying nRF Util Version\nDESCRIPTION: Command to check the installed version of nRF Util on the system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/transition_guide_2.4.99-cs3_to_2.7_environment.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil --version\n```\n\n----------------------------------------\n\nTITLE: UDP Server Read Command Syntax\nDESCRIPTION: Syntax for the read command to check the current values of UDP server subparameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_6\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPSVR?\n```\n\n----------------------------------------\n\nTITLE: Checking Wi-Fi Connection Status\nDESCRIPTION: Command to check the current Wi-Fi connection status using the Wi-Fi shell interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/power_profiling.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwifi status\n```\n\n----------------------------------------\n\nTITLE: SLM Proprietary Command List\nDESCRIPTION: The #XCLAC command displays all available proprietary SLM commands starting with #X prefix.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/Generic_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XCLAC\n```\n\n----------------------------------------\n\nTITLE: Checking nRF Util Version\nDESCRIPTION: Command to verify the installed version of nRF Util\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/nRF54H20_migration_2.7/migration_guide_2.6.99-cs2_to_2_7_environment.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil --version\n```\n\n----------------------------------------\n\nTITLE: Installing NCS Toolchain\nDESCRIPTION: Command example for installing a specific version of the NCS toolchain\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnrfutil sdk-manager toolchain install --ncs-version *version*\n```\n\n----------------------------------------\n\nTITLE: Adding Application Source Files\nDESCRIPTION: This set of commands specifies the source files for the application, including main application code and various event handling implementations, allowing the build system to compile the complete application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/app_event_manager_profiler_tracer/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\\n\\tsrc/events/five_sec_event.c\\n\\tsrc/events/config_event.c\\n\\tsrc/events/one_sec_event.c\\n\\tsrc/events/burst_event.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\\n\\tsrc/modules/module_a.c\\n\\tsrc/modules/module_b.c)\n```\n\n----------------------------------------\n\nTITLE: Generating Test Runner for nRF9x Sockets Test\nDESCRIPTION: Generates a test runner for the nRF9x sockets test file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/nrf9x_sockets/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntest_runner_generate(src/nrf9x_sockets_test.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Libraries in CMake\nDESCRIPTION: This CMake snippet initializes Zephyr libraries and conditionally includes source files based on build configuration. It is used in the Nordic Semiconductor's project to manage dependencies and compile sources only when certain conditions are met. The CONFIG_AT_HOST_LIBRARY configuration must be enabled for the at_host.c file to be included in the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/at_host/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources_ifdef(CONFIG_AT_HOST_LIBRARY at_host.c)\n```\n\n----------------------------------------\n\nTITLE: Validating Bluetooth OTA DFU Configuration Parameters in CMake\nDESCRIPTION: This script validates configuration parameters for MCUmgr Bluetooth OTA DFU in Nordic Connect SDK. It checks for optimal buffer sizes for Bluetooth Controller and Host configurations, and verifies proper MCUmgr buffer settings with Reassembly feature support. The script issues warning messages for suboptimal configurations to guide users toward recommended values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/common/mcumgr_bt_ota_dfu/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2023 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\nif (CONFIG_NCS_SAMPLE_MCUMGR_BT_OTA_DFU_VALIDATION)\n\n  if (CONFIG_NCS_SAMPLE_MCUMGR_BT_OTA_DFU_SPEEDUP AND CONFIG_BT_CTLR)\n    if ((NOT (CONFIG_BT_BUF_ACL_TX_SIZE EQUAL 251)) OR\n        (NOT (CONFIG_BT_BUF_ACL_RX_SIZE EQUAL 502)) OR\n        (NOT (CONFIG_BT_CTLR_DATA_LENGTH_MAX EQUAL 251))\n      )\n      message(WARNING \"MCUmgr Bluetooth OTA DFU: suboptimal configuration \"\n        \"of Bluetooth Controller buffers. Consider using optimal values \"\n        \"defined in the ${CMAKE_CURRENT_LIST_DIR}/Kconfig file for \"\n        \"CONFIG_BT_BUF_ACL_TX_SIZE, CONFIG_BT_BUF_ACL_RX_SIZE and \"\n        \"CONFIG_BT_CTLR_DATA_LENGTH_MAX options\")\n    endif()\n  endif()\n\n  if (CONFIG_NCS_SAMPLE_MCUMGR_BT_OTA_DFU_SPEEDUP AND CONFIG_BT_HCI_HOST)\n    if ((NOT (CONFIG_BT_BUF_ACL_TX_SIZE EQUAL 251)) OR\n        (NOT (CONFIG_BT_BUF_ACL_RX_SIZE EQUAL 502)) OR\n        (NOT (CONFIG_BT_L2CAP_TX_MTU EQUAL 498))\n      )\n      message(WARNING \"MCUmgr Bluetooth OTA DFU: suboptimal configuration \"\n        \"of Bluetooth Host buffers. Consider using optimal values \"\n        \"defined in the ${CMAKE_CURRENT_LIST_DIR}/Kconfig file for \"\n        \"CONFIG_BT_BUF_ACL_TX_SIZE, CONFIG_BT_BUF_ACL_RX_SIZE and \"\n        \"CONFIG_BT_L2CAP_TX_MTU options\")\n    endif()\n  endif()\n\n  if (CONFIG_NCS_SAMPLE_MCUMGR_BT_OTA_DFU)\n    if (CONFIG_MCUMGR_TRANSPORT_BT_REASSEMBLY)\n      if (NOT (CONFIG_MCUMGR_TRANSPORT_NETBUF_SIZE EQUAL 2475))\n        message(WARNING \"MCUmgr Bluetooth OTA DFU: suboptimal configuration \"\n          \"of the MCUmgr buffer with the Reassembly feature support. Consider using\"\n          \"the optimal value defined in the ${CMAKE_CURRENT_LIST_DIR}/Kconfig \"\n          \"file for the CONFIG_MCUMGR_TRANSPORT_NETBUF_SIZE option\")\n      endif()\n      if (NOT CONFIG_MCUMGR_GRP_OS_MCUMGR_PARAMS)\n        message(WARNING \"MCUmgr Bluetooth OTA DFU: suboptimal configuration \"\n          \"of the MCUmgr library with the Reassembly feature support. Consider \"\n          \"enabling the CONFIG_MCUMGR_GRP_OS_MCUMGR_PARAMS option\")\n      endif()\n    else()\n      message(WARNING \"MCUmgr Bluetooth OTA DFU: suboptimal configuration \"\n        \"of the MCUmgr library without the Reassembly feature support. Consider \"\n        \"enabling this feature using the CONFIG_MCUMGR_TRANSPORT_BT_REASSEMBLY option\")\n    endif()\n  endif()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Source File to CMake Target\nDESCRIPTION: This snippet adds the source file 'message_channel.c' to the application target in the CMake build. It specifies the path to the source file relative to the current source directory, ensuring that it gets compiled as part of the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/common/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/message_channel.c)\n```\n\n----------------------------------------\n\nTITLE: XPING Unsolicited Notification Format\nDESCRIPTION: Format of the unsolicited notification returned by the XPING command, showing the response time in seconds.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/ICMP_AT_commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: AT\nCODE:\n```\n#XPING: <response time> seconds\n```\n\n----------------------------------------\n\nTITLE: Sample Console Output - Network Status\nDESCRIPTION: Console output showing network connection status messages during the connection process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/debug/memfault/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n<inf> memfault_sample: Connecting to network\n<inf> memfault_sample: Connected to network.\n```\n\n----------------------------------------\n\nTITLE: Setting Mode of Light Lightness Control Server - C\nDESCRIPTION: Sets the current Mode of the Light Lightness Control Server with an acknowledgment required.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctrl_cli.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nmesh models ctrl mode-set <Enable(off, on)>\n\tSet the Light Lightness Control Server's current Mode and wait for a response.\n\n\t* ``Enable`` - Mode to set.\n```\n\n----------------------------------------\n\nTITLE: HTTP Connection Example\nDESCRIPTION: Example showing how to connect to postman-echo.com on port 80.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/HTTPC_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT\nCODE:\n```\nAT#XHTTPCCON=1,\"postman-echo.com\",80\n#XHTTPCCON:1\nOK\n```\n\n----------------------------------------\n\nTITLE: Adding Test Source File for nRF9x Sockets\nDESCRIPTION: Adds the main test file as a source for the test application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/nrf_modem_lib/nrf9x_sockets/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE src/nrf9x_sockets_test.c)\n```\n\n----------------------------------------\n\nTITLE: Terminating Wi-Fi Radio Test Reception\nDESCRIPTION: Command to stop the Wi-Fi radio test reception mode.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test rx 0\n```\n\n----------------------------------------\n\nTITLE: HTTP Transport Configuration\nDESCRIPTION: Conditionally includes HTTP transport implementation if CONFIG_DOWNLOADER_TRANSPORT_HTTP is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/downloader/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(\n\tCONFIG_DOWNLOADER_TRANSPORT_HTTP\n\tsrc/transports/http.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Sysbuild Project in CMake\nDESCRIPTION: Sets up the sysbuild project without specifying any languages.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/fast_pair/locator_tag/sysbuild/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(sysbuild LANGUAGES)\n```\n\n----------------------------------------\n\nTITLE: Reading from Flash IPUC in C\nDESCRIPTION: Uses the flash_read API to read contents from the IPUC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nflash_read()\n```\n\n----------------------------------------\n\nTITLE: Writing to Flash IPUC in C\nDESCRIPTION: Utilizes the flash_write API to write data into the IPUC.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nflash_write()\n```\n\n----------------------------------------\n\nTITLE: Configuring MCUboot mode: Swap using offset\nDESCRIPTION: Introduces a new dual-bank image swapping algorithm that moves sectors with optimizations for enhanced speed, applicable to memories with uniform erase block sizes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_main_config.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"CONFIG_BOOT_SWAP_USING_OFFSET\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic SDK Project\nDESCRIPTION: Sets up CMake build configuration for a Nordic Semiconductor project. Requires minimum CMake version 3.20.0, finds Zephyr package, and includes all C source files from the src directory into the build.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bootloader/bl_validation_unittest/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: UDP Server Test Command Syntax\nDESCRIPTION: Syntax for the test command that provides information about the UDP server command and its parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_8\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPSVR=?\n```\n\n----------------------------------------\n\nTITLE: Adding nRF2220 EK Shield in CMakeLists.txt\nDESCRIPTION: Example showing how to add the nRF2220 EK shield directly in the project's CMakeLists.txt file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/2220ek_dev_guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nset(SHIELD nrf2220ek)\n```\n\n----------------------------------------\n\nTITLE: Shell Interface Configuration\nDESCRIPTION: Conditionally includes shell interface implementation if CONFIG_DOWNLOADER_SHELL is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/downloader/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources_ifdef(\n\tCONFIG_DOWNLOADER_SHELL\n\tsrc/shell.c\n)\n```\n\n----------------------------------------\n\nTITLE: Including Controller Module Source File in Nordic SDK (C)\nDESCRIPTION: This snippet conditionally includes the source file 'controller.c' if the configuration flag 'CONFIG_APP_MODULE_CONTROLLER_ENABLE' is defined. This allows for modular compilation based on feature requirements.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/event_manager_proxy/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntarget_sources_ifdef(CONFIG_APP_MODULE_CONTROLLER_ENABLE       app PRIVATE controller.c)\n```\n\n----------------------------------------\n\nTITLE: File Paths Definition for DFU Lock Implementation\nDESCRIPTION: Header and source file paths for the DFU lock utility implementation within the nRF Desktop application structure.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dfu_lock.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napplications/nrf_desktop/src/util/dfu_lock.h\napplications/nrf_desktop/src/util/dfu_lock.c\n```\n\n----------------------------------------\n\nTITLE: Tracking and NMEA Strings Output in Console\nDESCRIPTION: The console output demonstrates GNSS tracking status and NMEA strings when no fix is acquired. It displays parameters like tracking, usage, and presented NMEA strings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/gnss/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nTracking:  0 Using:  0 Unhealthy: 0\n-----------------------------------\nSeconds since last fix: 1\nSearching [-]\n\nNMEA strings:\n\n$GPGGA,000000.00,,,,,0,,99.99,,M,0,,*37\n$GPGLL,,,,,000000.00,V,A*45\n$GPGSA,A,1,,,,,,,,,,,,,99.99,99.99,99.99,1*2D\n$GPGSV,1,1,0,,,,,,,,,,,,,,,,,1*54\n$GPRMC,000000.00,V,,,,,,,060180,,,N,V*08\n---------------------------------\n```\n\n----------------------------------------\n\nTITLE: HID Configuration - Function Examples\nDESCRIPTION: Core functions mentioned for managing Bluetooth HID service connections and notifications\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/hids.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbt_hids_connected();\nbt_hids_disconnected();\n```\n\n----------------------------------------\n\nTITLE: Setting up TWT (Target Wake Time) Session\nDESCRIPTION: Command to configure and start a TWT session with a one-minute interval. This is used for power-saving on Wi-Fi 6 networks, allowing the device to sleep and wake up at scheduled intervals.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/power_profiling.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwifi twt setup 0 0 1 1 0 1 1 1 8 60000\n```\n\n----------------------------------------\n\nTITLE: Main Application Source Configuration\nDESCRIPTION: Adds the main application source file to the build target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n  src/main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Cloud Connection Retry Timeout in Kconfig\nDESCRIPTION: Sets the cloud connection retry timeout in seconds.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_CLOUD_CONNECTION_RETRY_TIMEOUT_SECONDS\n```\n\n----------------------------------------\n\nTITLE: Setting Location Sampling Interval in Kconfig\nDESCRIPTION: Sets the location sampling interval in seconds.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_16\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LOCATION_TRACKING_SAMPLE_INTERVAL_SECONDS\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to DECT Application Target in CMake\nDESCRIPTION: Specifies the source files to be compiled and linked into the 'app' target. It includes various DECT-related source files such as time management, common utilities, PHY layer components, and settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/dect/common/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_app_time.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_common_utils.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_common_rx.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_phy_api_scheduler.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_common_settings.c\n    ${CMAKE_CURRENT_SOURCE_DIR}/dect_common_pdu.c\n    )\n```\n\n----------------------------------------\n\nTITLE: RST Directive for Sidewalk Samples Reference\nDESCRIPTION: RST directive defining a reference label for the Sidewalk samples section\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/amazon_sidewalk.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _sidewalk_samples:\n```\n\n----------------------------------------\n\nTITLE: Searching Available SDK Installations\nDESCRIPTION: Command to list all available NCS SDK installations\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/installation/install_ncs.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnrfutil sdk-manager search\n```\n\n----------------------------------------\n\nTITLE: Setting Shield in CMakeLists.txt\nDESCRIPTION: CMake configuration to set nRF7002 EB as shield in project configuration file\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/nrf7002eb_dev_guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SHIELD nrf7002eb)\n```\n\n----------------------------------------\n\nTITLE: Kconfig Include Configuration\nDESCRIPTION: Kconfig configuration to include common configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.6.rst#2025-04-21_snippet_11\n\nLANGUAGE: kconfig\nCODE:\n```\nsource \"${ZEPHYR_BASE}/../nrf/samples/matter/common/src/Kconfig\"\n```\n\n----------------------------------------\n\nTITLE: HID Report Queue Source File Path\nDESCRIPTION: Source file location containing the HID report queue implementation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/hid_reportq.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\napplications/nrf_desktop/src/util/hid_reportq.c\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Zephyr CMake\nDESCRIPTION: This snippet specifies the include directories for the Zephyr build system, ensuring that the current directory is included during the compilation process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/freebsd-getopt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_include_directories(.)\n```\n\n----------------------------------------\n\nTITLE: Configuring NFC Type 4 Tag Source Files Compilation in CMake\nDESCRIPTION: This CMake snippet conditionally includes source files for NFC Type 4 Tag functionality based on configuration flags. It handles NDEF file support, ISO-DEP protocol, APDU handling, Capability Container files with TLV blocks, and high-level procedures. Each source file is only compiled when its corresponding CONFIG option is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nfc/t4t/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_sources_ifdef(CONFIG_NFC_T4T_NDEF_FILE ndef_file.c)\nzephyr_sources_ifdef(CONFIG_NFC_T4T_ISODEP isodep.c)\nzephyr_sources_ifdef(CONFIG_NFC_T4T_APDU apdu.c)\nzephyr_sources_ifdef(CONFIG_NFC_T4T_CC_FILE\n\t\t     cc_file.c\n\t\t     tlv_block.c)\nzephyr_sources_ifdef(CONFIG_NFC_T4T_HL_PROCEDURE hl_procedure.c)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Internal Documentation Set in CMake\nDESCRIPTION: Adds the internal documentation set if the ZEPHYR_DOC_INTERNAL_MODULE_DIR directory exists, with a status message indicating its inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif (EXISTS \"${ZEPHYR_DOC_INTERNAL_MODULE_DIR}\" )\n  message(STATUS \"Internal documentation included\")\n  add_docset(internal \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Socket Select Command\nDESCRIPTION: AT command for selecting an active socket from multiple opened sockets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: AT\nCODE:\n```\n#XSOCKETSELECT=<handle>\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option to Allow Non-Secure Reset\nDESCRIPTION: This snippet configures a TFM CMake option to allow non-secure reset based on the CONFIG_TFM_ALLOW_NON_SECURE_RESET Kconfig option. This allows the non-secure side to trigger a reset.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_TFM_ALLOW_NON_SECURE_RESET)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DNRF_ALLOW_NON_SECURE_RESET=ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling GNU STD Support and Matter Data Model in CMake\nDESCRIPTION: Includes CMake files to enable GNU STD support and initialize the Matter Data Model for the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/template/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/config/nrfconnect/app/enable-gnu-std.cmake)\ninclude(${ZEPHYR_CONNECTEDHOMEIP_MODULE_DIR}/src/app/chip_data_model.cmake)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Array Parameter in C\nDESCRIPTION: Retrieves an array parameter from the parsed AT command list.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_parser.rst#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nat_params_array_get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Light HSL Client Shell Commands\nDESCRIPTION: Enable Bluetooth Mesh shell subsystem and Light HSL Client commands through Kconfig options for interactive model control\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_hsl_cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_MESH_SHELL=y\nCONFIG_BT_MESH_SHELL_LIGHT_HSL_CLI=y\n```\n\n----------------------------------------\n\nTITLE: Adding Simulated Temperature and Humidity Sensor Support\nDESCRIPTION: Adds source files for simulated Temperature and Humidity sensor bridged devices when BLE connectivity is not enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_BRIDGE_TEMPERATURE_SENSOR_BRIDGED_DEVICE)\n    target_sources(app PRIVATE\n            src/bridged_device_types/temperature_sensor.cpp\n            src/simulated_providers/simulated_temperature_sensor_data_provider.cpp\n    )\nendif() # CONFIG_BRIDGE_TEMPERATURE_SENSOR_BRIDGED_DEVICE\n\nif(CONFIG_BRIDGE_HUMIDITY_SENSOR_BRIDGED_DEVICE)\n    target_sources(app PRIVATE\n        src/bridged_device_types/humidity_sensor.cpp\n        src/simulated_providers/simulated_humidity_sensor_data_provider.cpp\n    )\nendif() # CONFIG_BRIDGE_HUMIDITY_SENSOR_BRIDGED_DEVICE\n\nendif() # CONFIG_BRIDGED_DEVICE_BT\n```\n\n----------------------------------------\n\nTITLE: Including Memory Pointer Storage Headers - CMake\nDESCRIPTION: This snippet adds memory pointer storage headers when CONFIG_MOCK_SUIT_MEMPTR_STORAGE is used, integrating functionalities relevant to managing memory pointers in the test binary.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_MEMPTR_STORAGE)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_MEMPTR_STORAGE)\n  target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/memptr_storage/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Embedding HTML in RST Documents\nDESCRIPTION: This snippet demonstrates how to embed HTML directly within an RST document using the ``.. raw:: html`` directive. HTML code can be integrated to include multimedia elements such as videos while maintaining the document's formatting.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/templates/cheat_sheet.rst#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1 align=\"center\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9Ar13rMxGIk\" title=\"Getting started with Matter\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n</h1>\n```\n\n----------------------------------------\n\nTITLE: ESB RX Received Event Macro\nDESCRIPTION: This snippet references the `ESB_EVENT_RX_RECEIVED` macro, which is called when a new packet is received and added to the RX FIFO. The event handler should ensure to completely empty the RX FIFO when appropriate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/esb/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n\":c:macro:`ESB_EVENT_RX_RECEIVED`\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files\nDESCRIPTION: This command adds `src/main.c` as a source file to the 'app' target. The `PRIVATE` keyword indicates that these sources are only used for building the 'app' target and are not exposed to other targets.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/multicore_system_off/remote/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_sources(app PRIVATE src/main.c)\"\n```\n\n----------------------------------------\n\nTITLE: Adding RRSP Subdirectory Conditionally\nDESCRIPTION: This CMake command adds the 'rrsp' subdirectory to the build only if the `CONFIG_BT_RAS_RRSP` Kconfig option is enabled. It ensures that the RAS Responder Service is included in the build when configured.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/ras/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory_ifdef(CONFIG_BT_RAS_RRSP rrsp)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Zephyr Library for iCalendar Parser in CMake\nDESCRIPTION: Creates a Zephyr library for the iCalendar parser and specifies its source file. This CMake configuration defines the build instructions for the parser module within the Nordic SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/icalendar_parser/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(\n\tsrc/icalendar_parser.c\n)\n```\n\n----------------------------------------\n\nTITLE: Configuration File Validation\nDESCRIPTION: Checks if the required configuration file option has been provided to the build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED EXTRA_CONF_FILE)\n    message(FATAL_ERROR \"No configuration file specified, set -- -DEXTRA_CONF_FILE=<configuration file>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: TLS Certificate Installation\nDESCRIPTION: Commands for installing TLS certificates for secure connections using security tags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_5\n\nLANGUAGE: at-commands\nCODE:\n```\nAT+CFUN=0\nAT%CMNG=0,1000,0,\"-----BEGIN CERTIFICATE-----\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for SUIT Integration Test in CMake\nDESCRIPTION: Sets up the CMake project for a SUIT integration test, including version requirements, package dependencies, and project-specific configurations. It links various SUIT-related libraries and conditionally includes additional libraries based on build configuration.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/fetch/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_fetch)\ninclude(../cmake/test_template.cmake)\n\ntarget_include_directories(app PRIVATE mocks)\n\nzephyr_library_link_libraries(suit_memptr_storage_interface)\nzephyr_library_link_libraries(suit_platform_interface)\nzephyr_library_link_libraries(suit_ipuc)\n\nzephyr_library_link_libraries_ifdef(CONFIG_TEST_SUIT_PLATFORM_FETCH_VARIANT_APP suit_memory_layout_interface)\nzephyr_library_link_libraries_ifdef(CONFIG_TEST_SUIT_PLATFORM_FETCH_VARIANT_SDFW suit_decrypt_test_utils)\nzephyr_library_link_libraries_ifdef(CONFIG_TEST_SUIT_PLATFORM_FETCH_VARIANT_SDFW suit_stream_filters_interface)\n\nzephyr_compile_definitions(CONFIG_SOC_NRF54H20_CPUAPP)\n```\n\n----------------------------------------\n\nTITLE: Resetting DFU Target in C\nDESCRIPTION: Cancel ongoing operations and clear downloaded images.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/dfu/dfu_target.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ndfu_target_reset();\n```\n\n----------------------------------------\n\nTITLE: Building Hello World Sample\nDESCRIPTION: West build command for building the Hello World sample for application and radio cores\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_gs.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -T sample.sysbuild.hello_world.nrf54h20dk_cpuapp_cpurad .\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding ICMP Ping Print Source File in CMake\nDESCRIPTION: Conditionally adds the ICMP ping print source file if the CONFIG_MOSH_WORKER_THREADS option is enabled, supporting worker thread functionality for printing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/ping/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(\n\tCONFIG_MOSH_WORKER_THREADS app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/icmp_ping_print.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SMP Server Project\nDESCRIPTION: Sets up CMake configuration for an SMP server application. Specifies minimum CMake version, finds Zephyr package, and adds main.c source file to the build. Includes Nordic Semiconductor copyright and licensing information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/nrf_compress/decompression/mcuboot_update/compressed_app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2024 Nordic Semiconductor\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\n\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(smp_svr)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Attaching Joiner to Network in CLI Sample\nDESCRIPTION: Command to start the Thread network and attach the newly joined device in the OpenThread CLI sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot thread start\n```\n\n----------------------------------------\n\nTITLE: Matter: Chip-Tool Write By ID\nDESCRIPTION: This snippet shows how to write to the custom NordicDevkit cluster's DevKitName attribute using the chip-tool.  It specifies the cluster ID, attribute ID, the new value, endpoint, and fabric ID.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/manufacturer_specific/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"any write-by-id 0xFFF1FC01 0xFFF10000 \\\"NewName\\\" 1 1\"\n```\n\n----------------------------------------\n\nTITLE: TWI Write-Read Examples\nDESCRIPTION: Examples showing write-read operations on BME680 and BH1749 devices on Thingy:91 to get chip IDs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TWI_AT_commands.rst#2025-04-21_snippet_7\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XTWIWR=2,\"76\",\"D0\",1\n\n#XTWIWR: 61\nOK\n\nAT#XTWIWR=2,\"38\",\"92\",1\n\n#XTWIWR: E0\nOK\n```\n\n----------------------------------------\n\nTITLE: Specifying API Documentation Files in RST\nDESCRIPTION: RST code for specifying the header and source files for the CC3XX entropy driver API documentation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/entropy_cc3xx.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n| Header file: :file:`zephyr/include/drivers/entropy.h` (in the |NCS| project)\n| Source file: :file:`drivers/entropy/entropy_cc3xx.c`\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Time Library Sources in CMake\nDESCRIPTION: Defines the Zephyr library sources for the date time functionality, including conditional compilation of NTP and modem time sources based on configuration flags.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/date_time/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(date_time.c)\nzephyr_library_sources(date_time_core.c)\nzephyr_library_sources_ifdef(CONFIG_DATE_TIME_NTP date_time_ntp.c)\nzephyr_library_sources_ifdef(CONFIG_DATE_TIME_MODEM date_time_modem.c)\n```\n\n----------------------------------------\n\nTITLE: Mapping USB Interface to Bluetooth LE UART Service in RST\nDESCRIPTION: This RST table demonstrates the mapping of the USB interface to the Bluetooth LE UART Service for wireless connection in the Connectivity bridge application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/connectivity_bridge/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :align: center\n\n   * - USB Interface\n     - Service mapped\n   * - UART_0\n     - :ref:`nus_service_readme`\n```\n\n----------------------------------------\n\nTITLE: Tabular Power Limits and Country Groups ASCII Layout\nDESCRIPTION: ASCII table format showing regulatory power limits across channels for different country groups (GP1-GP5), with power limits in dBm and special annotations (* and #) for specific restrictions. Includes a supplementary list mapping countries to their respective regulatory groups.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_support.rst#2025-04-21_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n| World regulatory                       | 00           | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20  | 20\\ :sup:`#`| 20\\ :sup:`#` | 20\\ :sup:`#` | 20\\ :sup:`#` | 20\\ :sup:`#` | 20\\ :sup:`#` | 20\\ :sup:`#` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`*` | 20\\ :sup:`#` | 20\\ :sup:`#` | 20\\ :sup:`#` | 20\\ :sup:`#` | 20\\ :sup:`#` | 27\\ :sup:`#` | 27\\ :sup:`#` | 27\\ :sup:`#` |\n```\n\n----------------------------------------\n\nTITLE: Building the Multicore Idle GPIO Test with West\nDESCRIPTION: This command builds the multicore idle GPIO test for the application and radio cores on the nRF54H20 DK. It specifies the board, test case, and S2RAM memory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_gpio/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf54h20dk/nrf54h20/cpuapp -T benchmarks.multicore.idle_gpio.nrf54h20dk_cpuapp_cpurad.s2ram .\n```\n\n----------------------------------------\n\nTITLE: Including Private Directory in CMake for NRF Connect SDK\nDESCRIPTION: This CMake command adds the current directory (.) to the private include directories for the 'app' target. This ensures that header files in the current directory can be found during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/sock/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Library Sources (Coremark)\nDESCRIPTION: Specifies the source files for the 'coremark' library. These source files are compiled and linked into the library. `${ZEPHYR_COREMARK_MODULE_DIR}` is the path to the CoreMark module.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/coremark/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_library_sources(${ZEPHYR_COREMARK_MODULE_DIR}/core_main.c\n\t\t\t${ZEPHYR_COREMARK_MODULE_DIR}/core_matrix.c\n\t\t\t${ZEPHYR_COREMARK_MODULE_DIR}/core_state.c\n\t\t\t${ZEPHYR_COREMARK_MODULE_DIR}/core_util.c\n\t\t\t${ZEPHYR_COREMARK_MODULE_DIR}/core_list_join.c\n\t\t\tcore_portme.c)\"\n```\n\n----------------------------------------\n\nTITLE: Set TFM CMake Option to Use NFCT Pins as GPIOs\nDESCRIPTION: This snippet sets the CONFIG_NFCT_PINS_AS_GPIOS CMake option to ON if either CONFIG_NFCT_PINS_AS_GPIOS or CONFIG_TFM_NFCT_PINS_AS_GPIOS are enabled. This configures the Near Field Communication (NFC) pins to be used as general-purpose input/output (GPIO) pins.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/trusted-firmware-m/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_NFCT_PINS_AS_GPIOS OR CONFIG_TFM_NFCT_PINS_AS_GPIOS)\n  set_property(TARGET zephyr_property_target\n    APPEND PROPERTY TFM_CMAKE_OPTIONS\n    -DCONFIG_NFCT_PINS_AS_GPIOS=ON\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Application Target\nDESCRIPTION: Adds the collected source files to the application build target within the Nordic SDK framework.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/single_domain/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t${app_sources}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake for PDN Test Project in nRF Connect SDK\nDESCRIPTION: Configures the CMake build system for a PDN (Packet Data Network) test application. It specifies the minimum CMake version, includes necessary source files, and sets up compilation definitions for PDN configuration including timeouts, APN settings, and network family.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/pdn/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(pdn)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntest_runner_generate(src/main.c)\n\ntarget_sources(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/lib/pdn/pdn.c\n  ${ZEPHYR_NRF_MODULE_DIR}/lib/pdn/esm.c\n)\n\nzephyr_include_directories(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/)\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/include/modem/)\nzephyr_include_directories(${ZEPHYR_BASE}/subsys/testsuite/include)\n\nadd_compile_definitions(CONFIG_PDN_ESM_TIMEOUT=1000)\nadd_compile_definitions(CONFIG_PDN_DEFAULTS_OVERRIDE)\nadd_compile_definitions(CONFIG_PDN_DEFAULT_APN=\"apn0\")\nadd_compile_definitions(CONFIG_PDN_DEFAULT_FAM=2)\nadd_compile_definitions(CONFIG_PDN_DYNAMIC_INFO_AT_BUF_SIZE=512)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Nordic Identity Key Usage\nDESCRIPTION: Sets up a CMake project for identity key usage with Nordic SDK and Zephyr RTOS. Establishes minimum CMake version 3.20.0, locates Zephyr package, and configures the main source file for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/keys/identity_key_usage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Copyright (c) 2022 Nordic Semiconductor ASA\n#\n# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n#\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(identity_key_usage)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Including Metadata Headers - CMake\nDESCRIPTION: This snippet includes metadata headers in the test binary when CONFIG_MOCK_SUIT_METADATA is enabled. It helps in managing the metadata aspects of the suite being tested.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_SUIT_METADATA)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_METADATA)\n  target_include_directories(testbinary PRIVATE\n    ${SUIT_SUBSYS_DIR}/metadata/include\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: RF Tool RX Continuous with TX Peer Info\nDESCRIPTION: This command configures the DECT RF tool for continuous receive (RX) mode with information about the transmitting peer.  It enables interval reporting, utilizes the TX RF mode peer, sets frame repeat count to 15, enables RX find sync, and uses channel 1677 after setting the target to frequency 39.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ndect sett -t 39\ndect rf_tool -m rx_cont --rf_mode_peer tx --frame_repeat_count 15 --rx_find_sync -c 1677\n```\n\n----------------------------------------\n\nTITLE: Adding Main Application Source File\nDESCRIPTION: Adds the main source file (main.c) to the application target, specifying the primary implementation file for the 802.15.4 sniffer application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Function for transition time\nDESCRIPTION: This code snippet refers to the function `bt_mesh_model_transition_time`. The function likely returns the time that it takes for a state to change from a present state to the target state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/overview/models.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n\":c:func:`bt_mesh_model_transition_time`\"\n```\n\n----------------------------------------\n\nTITLE: DECT MAC Beacon Start\nDESCRIPTION: This command starts the DECT MAC beacon transmission. This initiates periodic transmission of a beacon signal for devices to discover and associate with the network.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_23\n\nLANGUAGE: console\nCODE:\n```\ndesh:~$ dect mac beacon_start\n```\n\n----------------------------------------\n\nTITLE: TCP Send Data Command (AT#XTCPSEND)\nDESCRIPTION: Command syntax for sending data over TCP connection with size up to 1024 bytes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: plain text\nCODE:\n```\n#XTCPSEND[=<data>]\n```\n\n----------------------------------------\n\nTITLE: Adding Memfault Configuration Files to CMake Project\nDESCRIPTION: CMake instructions for adding the Memfault configuration directory to the include path, which is required for the three mandatory configuration files needed by Memfault SDK.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/debug/memfault_ncs.rst#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(config)\n```\n\n----------------------------------------\n\nTITLE: Portfolio Value Write Command\nDESCRIPTION: AT command to write a portfolio identity value to a specified resource instance using object and resource instance IDs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIER=\"portfolio\",\"write\",<obj_inst_id>,<res_inst_id>,<identity>\n```\n\n----------------------------------------\n\nTITLE: Launching toolchain environment for Linux\nDESCRIPTION: Command to open a new shell window with the NCS toolchain environment on Linux systems.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$HOME/ncs-lcs/nrfutil toolchain-manager launch --shell --chdir \"$HOME/ncs-lcs/work-dir\" --ncs-version v2.6.99-cs2\n```\n\n----------------------------------------\n\nTITLE: Referencing Button Event Structure\nDESCRIPTION: Reference to the button_event structure used in the nRF Desktop application to handle button press events. This is a reference to a code structure rather than an implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/buttons.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbutton_event\n```\n\n----------------------------------------\n\nTITLE: Light xyL Header File Reference\nDESCRIPTION: Header file containing common types and definitions for Bluetooth Mesh Light xyL models, defining the core structure for color and lightness representation\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_xyl.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ninclude/bluetooth/mesh/light_xyl.h\n```\n\n----------------------------------------\n\nTITLE: Modem Library Socket Options Update\nDESCRIPTION: Added and removed socket options in the nRF Modem library, including IPv6 delayed address refresh and deprecated RAI socket options\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.8.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSO_IPV6_DELAYED_ADDR_REFRESH\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Application Target\nDESCRIPTION: Includes source files from common and specific project directories to the application build target\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/i2c/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ./../common/main.c)\ntarget_sources(app PRIVATE src/driver_test.c)\n```\n\n----------------------------------------\n\nTITLE: Generate and Add CBOR Files with zcbor\nDESCRIPTION: This command generates CBOR encoding/decoding files from the 'device_info_service.cddl' CDDL file using the 'zcbor_generated' target. It creates request and response files, 'device_info_service_req' and 'device_info_service_rsp', for CBOR data handling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/device_info/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: other\nCODE:\n```\ngenerate_and_add_cbor_files(device_info_service.cddl zcbor_generated\n  device_info_service_req\n  device_info_service_rsp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Coiote Device Management (Console)\nDESCRIPTION: Console commands to set up environment variables for username and password used in AVSystem's Coiote Device Management server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/fota.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nexport COIOTE_PASSWD='my-password'\nexport COIOTE_USER='my-username'\n```\n\n----------------------------------------\n\nTITLE: Sending P-GPS Assistance Request in C\nDESCRIPTION: Sends a P-GPS assistance data request using the location_assistance_pgps_request_send function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/lwm2m_location_assistance.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nlocation_assistance_pgps_request_send();\n```\n\n----------------------------------------\n\nTITLE: Adding Main Source File to Nordic SDK Application\nDESCRIPTION: Adds the main.c source file to the application target with special comment markers that identify the Nordic SDK application boundaries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/connectivity_bridge/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: UDP Receive Data Command\nDESCRIPTION: Command to receive UDP data with timeout and response showing sender's IP and port.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_16\n\nLANGUAGE: AT\nCODE:\n```\nAT#XRECVFROM=10\n#XRECVFROM: 7,\"192.168.1.100\",24210\nTest OK\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Project with Zephyr for Nordic Semiconductor\nDESCRIPTION: This CMake script configures a basic Zephyr RTOS project for Nordic Semiconductor. It sets the minimum required CMake version to 3.20.0, locates the Zephyr package using environment variables, and specifies main.c as the source file for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/nrf5340_audio/sw_codec_lc3/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\ntarget_sources(app\n  PRIVATE\n  main.c\n)\n```\n\n----------------------------------------\n\nTITLE: Generic Battery Status Structure Definition\nDESCRIPTION: This code snippet represents the structure definition for the Generic Battery Status. It's a composite state containing various information about the battery status, such as level, present status, and charging state. The application holds the Generic Battery Status state memory and provides access via the `get` handler function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_battery_srv.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n\":c:struct:`bt_mesh_battery_status`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Nordic SDK Project\nDESCRIPTION: Sets up the CMake build environment for a Nordic Semiconductor project. Configures minimum CMake version, finds Zephyr package, sets up project sources and include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bootloader/bl_crypto/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Adding Sensor Simulation Control Source to Build\nDESCRIPTION: CMake command to add sensor_sim_ctrl.c source file to the application build target. Uses target_sources to include the file from the current source directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/caf/sensor_manager/src/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/sensor_sim_ctrl.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring TF-M Secure UART in Kconfig\nDESCRIPTION: This Kconfig option allows TF-M to use the same UART as the application, making TF-M logs visible on the application's VCOM without manual connection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_logging.rst#2025-04-21_snippet_0\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_TFM_SECURE_UART0\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Pair Settings in nRF Desktop\nDESCRIPTION: Configuration details for Fast Pair integration including bond management, advertising behavior, and security settings for nRF Desktop peripheral devices.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/bluetooth.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* CONFIG_CAF_BLE_STATE_MAX_LOCAL_ID_BONDS set to 3\n* CONFIG_DESKTOP_BLE_PEER_ERASE enabled\n* CONFIG_DESKTOP_BLE_PEER_SELECT disabled\n* CONFIG_DESKTOP_BLE_DONGLE_PEER_ENABLE for non-Fast Pair Seekers\n* CONFIG_DESKTOP_FAST_PAIR_LIMIT_NORMAL_PAIRING enabled\n* CONFIG_BT_PRIVACY enabled\n* CONFIG_CAF_BLE_ADV_FILTER_ACCEPT_LIST disabled\n* CONFIG_BT_ADV_PROV_TX_POWER_CORRECTION_VAL configured for Fast Pair\n```\n\n----------------------------------------\n\nTITLE: Disabling Matter Test Event Triggers in Kconfig\nDESCRIPTION: This Kconfig option allows disabling the Matter test event triggers feature, which is enabled by default for all Matter samples. Set this option to 'n' to disable the feature.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/test_event_triggers.rst#2025-04-21_snippet_7\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_NCS_SAMPLE_MATTER_TEST_EVENT_TRIGGERS\n```\n\n----------------------------------------\n\nTITLE: Checking nRF Cloud Credentials in C\nDESCRIPTION: This function checks the existence of nRF Cloud credentials, ensuring that the application has the necessary permissions and access rights to interact with the cloud services.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.5.0.rst#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n:c:func:`nrf_cloud_credentials_check` to check if nRF Cloud credentials exist.\n```\n\n----------------------------------------\n\nTITLE: Adding Access Control List for Temperature Sensor\nDESCRIPTION: Command to add proper Access Control List (ACL) for a temperature sensor device using CHIP Tool, specifying node IDs and endpoint details\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/thermostat/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nchip-tool accesscontrol write acl '[{\"fabricIndex\": 1, \"privilege\": 5, \"authMode\": 2, \"subjects\": [112233], \"targets\": null}, {\"fabricIndex\": 1, \"privilege\": 1, \"authMode\": 2, \"subjects\": [<thermostat_node_ID>], \"targets\": [{\"cluster\": 1026, \"endpoint\": <temperature_sensor_endpoint_ID>, \"deviceType\": null}]}]' <temperature_sensor_node_ID> 0\n```\n\n----------------------------------------\n\nTITLE: Installing nrfutil device v2.5.4 using Command Line\nDESCRIPTION: Command to install the nRF Util device command version 2.5.4 with force option. Required for compatibility with NCS v2.7.99-cs2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7_99-cs2.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil install device=2.5.4 --force\n```\n\n----------------------------------------\n\nTITLE: Creating SUIT Cache Interface Library\nDESCRIPTION: Defines an interface library for SUIT cache with include directories and linking to platform error library\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/cache/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_interface_library_named(suit_cache_interface)\ntarget_include_directories(suit_cache_interface INTERFACE include)\ntarget_link_libraries(suit_cache_interface INTERFACE suit_platform_err)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for DECT PHY MAC in CMake\nDESCRIPTION: Adds the current directory to the include path for the 'app' target. This ensures that header files in the current directory can be found during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/src/dect/mac/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Checking Received Packet Count\nDESCRIPTION: Command to display the number of successfully received packets on the receiving device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/radio_test_short_range_sample/thread_radio_test_for_per_measurements.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ print_rx\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake with Zephyr for mcuboot_update Project\nDESCRIPTION: The CMakeLists.txt is used to specify that the project is built using CMake and Zephyr. It sets the minimum CMake version, locates the required Zephyr package using predefined environment variables, and sets up the project named mcuboot_update. The script adds specific source files to the project and conditionally includes Bluetooth-related sources if the CONFIG_MCUMGR_TRANSPORT_BT configuration option is enabled. The mcuboot_update application also links against the MCUBOOT_BOOTUTIL library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_compress/mcuboot_update/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(mcuboot_update)\n\n# This project uses orginal sdk-zephyr C source code\ntarget_sources(app PRIVATE src/hook.c ${ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src/main.c)\ntarget_sources_ifdef(CONFIG_MCUMGR_TRANSPORT_BT app PRIVATE ${ZEPHYR_BASE}/samples/subsys/mgmt/mcumgr/smp_svr/src/bluetooth.c)\nzephyr_link_libraries(MCUBOOT_BOOTUTIL)\n```\n\n----------------------------------------\n\nTITLE: Conditional Return for Build-Only Configuration in CMake\nDESCRIPTION: Exits early if only building without blobs is configured, preventing further processing of firmware patch configurations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/nrf70_fw_ext/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_BUILD_ONLY_NO_BLOBS)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Generic Address Streamer Headers - CMake\nDESCRIPTION: This snippet includes headers necessary for the generic address streamer when CONFIG_MOCK_GENERIC_ADDRESS_STREAMER is set, enabling the functionality for handling address streaming in tests.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/mocks/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif (CONFIG_MOCK_GENERIC_ADDRESS_STREAMER)\n  target_compile_options(test_interface INTERFACE -DCONFIG_SUIT_STREAM)\n  target_include_directories(testbinary PRIVATE ${SUIT_SUBSYS_DIR}/stream/stream_sources/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: nRF9151 DK Configuration for external MCU\nDESCRIPTION: This snippet showcases the configuration changes required in the `nrf9151dk_nrf9151_ns.conf` file when connecting the nRF9151 DK to an external MCU. It includes commenting out the PC terminal configurations and uncommenting the external MCU configurations related to power and indicate pins.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_description.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\n\"# When working with PC terminal, unmask the following config.\n#CONFIG_SLM_POWER_PIN=8\n#CONFIG_SLM_INDICATE_PIN=0\n\n# When working with external MCU, unmask the following config.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Mesh EnOcean Test Project with CMake\nDESCRIPTION: This CMake snippet sets up the project configuration for a Bluetooth Mesh EnOcean test. It specifies the minimum CMake version, finds the Zephyr package, defines the project, and configures source files, include directories, and compile options specific to the EnOcean implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/enocean/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bt_mesh_enocean_test)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntarget_sources(app\n    PRIVATE\n    ${ZEPHYR_BASE}/subsys/bluetooth/common/addr.c\n    ${ZEPHYR_BASE}/subsys/bluetooth/common/bt_str.c\n    ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/enocean.c\n    )\n\ntarget_include_directories(app\n    PRIVATE\n    ${ZEPHYR_BASE}/subsys/bluetooth\n    )\n\ntarget_compile_options(app\n    PRIVATE\n    -DCONFIG_BT_ENOCEAN_STORE=1\n    -DCONFIG_BT_ENOCEAN_DEVICES_MAX=2\n    )\n\nzephyr_ld_options(\n    ${LINKERFLAGPREFIX},--allow-multiple-definition\n    )\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Crypto Resources\nDESCRIPTION: This snippet outlines the cleanup process, which involves removing the AES key from the PSA crypto keystore after the encryption and decryption operations are complete.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/chachapoly/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n3. Cleanup:\n\n   a. The AES key is removed from the PSA crypto keystore.\n```\n\n----------------------------------------\n\nTITLE: Building Basic Driver Debug with West\nDESCRIPTION: Command to build with basic driver debugging enabled using West build system.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/debugging.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nwest build -p -b nrf7002dk/nrf5340/cpuapp samples/wifi/shell -- -Dnrf_wifi_shell_SNIPPET=\"nrf70-driver-debug\"\n```\n\n----------------------------------------\n\nTITLE: Building with TLS for nRF9160 DK\nDESCRIPTION: Shows how to build the MQTT sample project with TLS support for the nRF9160 DK using an overlay configuration file. This requires the Zephyr build system and uses the West command line interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/doc/description.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf9160dk/nrf9160/ns -- -DEXTRA_CONF_FILE=overlay-tls-nrf91.conf\n```\n\n----------------------------------------\n\nTITLE: Map Kconfig Option to OpenThread Option\nDESCRIPTION: This CMake macro, `kconfig_to_ot_option`, takes a Kconfig option, an OpenThread configuration variable, and a description as input. It checks if the Kconfig option is enabled; if so, it sets the OpenThread configuration variable to `ON` in the CMake cache; otherwise, it sets it to `OFF`. The `CACHE BOOL` and `FORCE` arguments ensure the setting is persistent and overrides any previous values.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/openthread/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"macro(kconfig_to_ot_option kconfig_option ot_config description)\n    if(${kconfig_option})\n      set(${ot_config} ON CACHE BOOL \\\"${description}\\\" FORCE)\n    else()\n      set(${ot_config} OFF CACHE BOOL \\\"${description}\\\" FORCE)\n    endif()\nendmacro()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kconfig Options for Edge Impulse in nRF Connect SDK\nDESCRIPTION: Kconfig options that need to be enabled to build the Edge Impulse C++ library and integrate it into an nRF Connect SDK application. This includes enabling C++ support, standard C++11, and the Edge Impulse wrapper.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/edge_impulse.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_CPP=y\nCONFIG_STD_CPP11=y\nCONFIG_EDGE_IMPULSE=y\nCONFIG_EDGE_IMPULSE_URI=\"path/to/edge_impulse_model.zip\"\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package - CMake\nDESCRIPTION: This snippet utilizes 'find_package' to locate the Zephyr SDK, a required dependency for the project. The HINTS option specifies where to look for the Zephyr base directory using an environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/multicore_system_off/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Static Partition Manager Layout for nRF52840\nDESCRIPTION: Example YAML configuration for the static Partition Manager layout on nRF52840, defining boot and slot partitions for image compression.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_image_compression.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: ../../../../samples/nrf_compress/mcuboot_update/pm_static_nrf52840dk_nrf52840.yml\n     :language: yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying LwM2M Carrier Library Size Table for Version 0.8.2\nDESCRIPTION: Shows a table with flash and RAM sizes for the LwM2M Carrier library version 0.8.2 in binary and reference application formats.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bin/lwm2m_carrier/CHANGELOG.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n+-------------------------+---------------+------------+\n|                         | Flash (Bytes) | RAM (Bytes)|\n+-------------------------+---------------+------------+\n| Library size            | 45152         | 7547       |\n| (binary)                |               |            |\n+-------------------------+---------------+------------+\n| Library size            | 65572         | 28128      |\n| (reference application) |               |            |\n+-------------------------+---------------+------------+\n```\n\n----------------------------------------\n\nTITLE: Set Short Address - Custom Command Usage\nDESCRIPTION: This command sets a short address for the CMD device used for frame filtering and acknowledgment transmission, requiring a specific format for the address.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_20\n\nLANGUAGE: text\nCODE:\n```\ncustom lsetshort *0x<short_address>*\n```\n\n----------------------------------------\n\nTITLE: Testing ICMPv6 Echo Request with Data Polling\nDESCRIPTION: Sends an ICMPv6 Echo Request (ping) from the leader to the router device, showing the high latency caused by indirect transmission with data polling.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/openthread/cli/README.rst#2025-04-21_snippet_24\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ ot ping fe80:0:0:0:acbd:53bf:1461:a861\n16 bytes from fe80:0:0:0:acbd:53bf:1461:a861: icmp_seq=2 hlim=64 time=2494ms\n1 packets transmitted, 1 packets received. Packet loss = 0.0%. Round-trip min/a\nDone\n```\n\n----------------------------------------\n\nTITLE: Writing New Option Value - Python\nDESCRIPTION: This command updates the value of a specified option for a given module. It is essential for applying new settings to the nRF device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npython3 configurator_cli.py DEVICE config MODULE_NAME OPTION_NAME VALUE\n```\n\n----------------------------------------\n\nTITLE: Updating NFC Reader Error Handling in C\nDESCRIPTION: Fixed an issue where NFC samples using the NFC Reader feature returned a false error code with value 1 during NFC T4T operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.3.0.rst#2025-04-21_snippet_11\n\nLANGUAGE: C\nCODE:\n```\n// No specific code snippet provided, but implies changes to error handling logic in NFC reader implementation\n```\n\n----------------------------------------\n\nTITLE: Setting Up Joiner PSK in NCP Sample\nDESCRIPTION: Command to add a Joiner device with its EUI64, timeout, and preshared key (PSKd) in the OpenThread NCP sample.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/thread/overview/commissioning.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nwpanctl:leader_if> commissioner joiner-add F4CE36710E768C63 3600 N0RD1C\n```\n\n----------------------------------------\n\nTITLE: Running real_time_plot.py for real-time data plotting\nDESCRIPTION: This demonstrates how to run the `real_time_plot.py` script to connect to the device using RTT and plot data in real-time. The script also saves the collected data to files for later analysis. A dataset name is provided as a command-line argument.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/nrf_profiler.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npython3 real_time_plot.py test1\n```\n\n----------------------------------------\n\nTITLE: MCUboot Support Configuration\nDESCRIPTION: Links MCUboot bootutil library when SMP or MCUboot targets are enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/dfu/dfu_target/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CONFIG_DFU_TARGET_SMP OR CONFIG_DFU_TARGET_MCUBOOT)\n  zephyr_library_link_libraries(MCUBOOT_BOOTUTIL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to cJSON Library\nDESCRIPTION: This snippet adds the source files required for the cJSON library to the Zephyr project. It uses `zephyr_library_sources` to include the necessary implementation files which define the functionalities of the cJSON library. This is critical for the library to function as intended during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/modules/cjson/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources(\\n\\t${ZEPHYR_CJSON_MODULE_DIR}/cJSON.c\\n\\t${ZEPHYR_CJSON_MODULE_DIR}/cJSON_Utils.c\\n\\tos/cJSON_os.c\\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Modem to Offline State with AT Command\nDESCRIPTION: AT command to set the nRF91 Series modem to offline state (functional level 4), which is required before provisioning a new certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf91/nrf91_cloud_certificate.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAT+CFUN=4\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Synchronization Libraries for Nordic nRF\nDESCRIPTION: Conditionally sets up Zephyr libraries for flash synchronization based on specific configuration options. Includes source files and include directories for different radio synchronization modes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/mpsl/flash_sync/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_SOC_FLASH_NRF_RADIO_SYNC_MPSL OR CONFIG_SOC_FLASH_NRF_RADIO_SYNC_RPC_HOST OR CONFIG_SOC_FLASH_NRF_RADIO_SYNC_RPC_CONTROLLER)\n  zephyr_library()\n  zephyr_library_sources_ifdef(CONFIG_SOC_FLASH_NRF_RADIO_SYNC_MPSL flash_sync_mpsl.c)\n  zephyr_library_sources_ifdef(CONFIG_SOC_FLASH_NRF_RADIO_SYNC_RPC_HOST flash_sync_rpc_host.c)\n  zephyr_library_sources_ifdef(CONFIG_SOC_FLASH_NRF_RADIO_SYNC_RPC_CONTROLLER flash_sync_rpc_controller.c)\n  zephyr_include_directories(${ZEPHYR_BASE}/drivers/flash)\nendif()\n```\n\n----------------------------------------\n\nTITLE: DFU Config Channel Protocol Options\nDESCRIPTION: Key configuration channel options used by the DFU module to communicate between host and device during firmware updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/dfu.rst#2025-04-21_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\nfwinfo\n   Perform the fetch operation on this option to get the following information about the currently executed image:\n\n   * Version and length of the image.\n   * Partition ID of the currently booted image, used to specify the image placement.\n```\n\nLANGUAGE: RST\nCODE:\n```\ndevinfo\n   Perform the fetch operation on this option to get the following information about the device:\n\n   * Vendor ID and Product ID\n   * Generation\n```\n\nLANGUAGE: RST\nCODE:\n```\nreboot\n   Perform the fetch operation on this option to trigger an instant reboot of the device.\n   After a successful image transfer, the reboot operation triggers a firmware update.\n```\n\nLANGUAGE: RST\nCODE:\n```\nstart\n   Perform the set operation on this option to start the DFU.\n   The operation contains the following data:\n\n   * Size of the image being transmitted.\n   * Checksum of the update image.\n   * Offset at which the host tool is going to start the image update.\n```\n\n----------------------------------------\n\nTITLE: Initializing CRACEN Driver Sources in CMake\nDESCRIPTION: Clears the cracen_driver_sources variable and includes various CRACEN cryptographic component CMake files to populate it with source files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nrf_security/src/drivers/cracen/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Clear out the cracen_driver_sources before source additions\nset(cracen_driver_sources)\n\n# Add more CRACEN sources and include dirs from the ext directory\ninclude(sxsymcrypt/sxsymcrypt.cmake)\ninclude(silexpk/silexpk.cmake)\ninclude(sicrypto/sicrypto.cmake)\ninclude(cracenpsa/cracenpsa.cmake)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Central Role Support in Bluetooth Management\nDESCRIPTION: Conditionally adds scanning support for connection-oriented operations when the BT_CENTRAL configuration is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/src/bluetooth/bt_management/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_BT_CENTRAL)\n\ttarget_sources(app PRIVATE\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/scanning/bt_mgmt_scan_for_conn.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Client Library in CMake\nDESCRIPTION: Creates a Zephyr library for the REST client and specifies the source file to be compiled. This configuration is part of the Nordic nRF Connect SDK and defines how the REST client module is built into the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/rest_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(src/rest_client.c)\n```\n\n----------------------------------------\n\nTITLE: Registering Modem Shutdown Callback in C\nDESCRIPTION: Macro to register a callback function that will be executed before the Modem library is shut down. The callback receives a context.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/nrf_modem_lib/nrf_modem_lib_wrapper.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nNRF_MODEM_LIB_ON_SHUTDOWN(callback_name, context)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SUIT Integration Test\nDESCRIPTION: Sets up CMake project configuration including minimum version requirement, Zephyr package dependency, and links multiple SUIT-related libraries required for the integration test. The configuration ensures all necessary SUIT components are available for testing.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/copy/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_copy)\ninclude(../cmake/test_template.cmake)\n\nzephyr_library_link_libraries(suit)\nzephyr_library_link_libraries(suit_platform_interface)\nzephyr_library_link_libraries(suit_memptr_storage_interface)\nzephyr_library_link_libraries(suit_sink_selector_interface)\nzephyr_library_link_libraries(suit_storage_interface)\nzephyr_library_link_libraries(suit_manifest_variables)\nzephyr_library_link_libraries(suit_ipuc)\nzephyr_library_link_libraries(suit_decrypt_test_utils)\n```\n\n----------------------------------------\n\nTITLE: Setting Config Value for Primary Variant\nDESCRIPTION: Command line parameter to set configuration values for the primary variant (slot A) of an image\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/suit/ab/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n-DCONFIG_N_BLINKS=2\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents for Sample READMEs in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents (toctree) for the Enhanced ShockBurst sample READMEs. It uses glob patterns to automatically include all README files in the samples/esb subdirectories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/esb.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Subpages\n   :glob:\n\n   ../../../samples/esb/*/README\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Modem Delta Update Project\nDESCRIPTION: Sets up CMake build configuration with minimum version 3.20.0, finds Zephyr package dependency, and configures source files for the modem delta update application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/http_update/modem_delta_update/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(modem_delta_update)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Performing DNS Lookup using AT command\nDESCRIPTION: This AT command performs a DNS lookup for a given hostname or IP address. The response returns the resolved IP address for the hostname.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/slm_testing.rst#2025-04-21_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n**AT#XGETADDRINFO=\"www.google.com\"**\n#XGETADDRINFO: \"172.217.174.100\"\nOK\n```\n\nLANGUAGE: text\nCODE:\n```\n**AT#XGETADDRINFO=\"ipv6.google.com\"**\n#XGETADDRINFO: \"2404:6800:4006:80e::200e\"\nOK\n```\n\nLANGUAGE: text\nCODE:\n```\n**AT#XGETADDRINFO=\"172.217.174.100\"**\n#XGETADDRINFO: \"172.217.174.100\"\nOK\n```\n\nLANGUAGE: text\nCODE:\n```\n**AT#XGETADDRINFO=\"2404:6800:4006:80e::200e\"**\n#XGETADDRINFO: \"2404:6800:4006:80e::200e\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Sysbuild CMake Configuration for Recovery Application\nDESCRIPTION: CMake configuration that adds the overlay DTS file to the recovery application build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_recovery.rst#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_overlay_dts(recovery ${CMAKE_CURRENT_LIST_DIR}/boards/nrf54h20dk_nrf54h20_cpuapp.overlay)\n```\n\n----------------------------------------\n\nTITLE: UDP Client Read Command Syntax\nDESCRIPTION: Syntax for the read command to check the current values of UDP client subparameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_14\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPCLI?\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake and Zephyr for Project\nDESCRIPTION: The CMake script initializes the build environment by specifying a minimum CMake version and finding the required Zephyr package. It then defines the project and includes source files for compilation. The script requires that the ZEPHYR_BASE environment variable is set, which guides Zephyr package's location. The expected input is a correctly set Zephyr environment, and it organizes the project files for subsequent builds.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_pwm_loopback/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(remote)\n\ntarget_sources(app PRIVATE ../src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Building with Custom Key and ECDSA Signature\nDESCRIPTION: This command builds the project with MCUboot enabled, specifies the path to the ECDSA private key, and sets the signature type to ECDSA P256. It demonstrates how to configure the bootloader to use a custom key for signing and verifying the boot image.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/bootloaders_dfu/mcuboot_nsib/bootloader_adding_sysbuild.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n\"west build -b nrf52840dk/nrf52840 zephyr/samples/hello_world -- \\\n   -DSB_CONFIG_BOOTLOADER_MCUBOOT=y \\\n   -DSB_CONFIG_BOOT_SIGNATURE_KEY_FILE=\\\"\\${APPLICATION_CONFIG_DIR}/../../priv-ecdsa256.pem\\\" \\\n   -DSB_CONFIG_BOOT_SIGNATURE_TYPE_ECDSA_P256=y\"\n```\n\n----------------------------------------\n\nTITLE: Memory Regions Summary with EXTFLASH\nDESCRIPTION: Sample output showing memory region allocations when using external flash storage for firmware patches.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf70/fw_patches_ext_flash.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nMemory region         Used Size  Region Size  %age Used\n        EXTFLASH:       64544 B         8 MB      0.77%\n           FLASH:      618752 B         1 MB     59.01%\n             RAM:      170636 B       448 KB     37.20%\n        IDT_LIST:          0 GB         2 KB      0.00%\n```\n\n----------------------------------------\n\nTITLE: Include Directories Configuration\nDESCRIPTION: Sets up include directories for the project, including paths to LwM2M, nrf_modem, and FOTA download headers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/lwm2m_fota_utils/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(includes\n\"${ZEPHYR_BASE}/subsys/net/lib/lwm2m/\"\n\"${ZEPHYR_BASE}/../nrfxlib/nrf_modem/include/\"\n\"${ZEPHYR_BASE}/../nrf/subsys/net/lib/fota_download/include/\"\n\"src/\"\n)\n\ntarget_include_directories(..__nrf__subsys__net__lib__lwm2m_client_utils\n  PRIVATE\n  ${includes}\n)\n\ntarget_include_directories(app\n  PRIVATE\n  ${includes}\n)\n```\n\n----------------------------------------\n\nTITLE: Bridge Migration Configuration Options\nDESCRIPTION: Kconfig options for enabling migration from older data schemes in Matter bridge application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.9.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_BRIDGE_MIGRATE_PRE_2_7_0\nCONFIG_BRIDGE_MIGRATE_VERSION_1\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Finding Zephyr Package\nDESCRIPTION: This snippet sets the minimum version of CMake required for the project and finds the Zephyr package based on the environment variable ZEPHYR_BASE. It ensures that Zephyr-specific components are available for building the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/zephyr/sensor/bme680/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Building for nRF54H20 DK (Dual-core)\nDESCRIPTION: Command to build the nRF Machine Learning application for the nRF54H20 DK with sensor sampling on the PPR core (dual-core application).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/machine_learning/app_desc.rst#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nwest build -b nrf54h20dk/nrf54h20/cpuapp -- -DSB_CONFIG_ML_APP_INCLUDE_REMOTE_IMAGE=y -Dmachine_learning_SNIPPET=nordic-ppr -Dmachine_learning_SHIELD=pca63566_fwd -Dremote_SHIELD=pca63566\n```\n\n----------------------------------------\n\nTITLE: RF Tool RX/TX Duty Cycle Configuration (Client)\nDESCRIPTION: This command configures the DECT RF tool for simultaneous receive and transmit (RX/TX) operation on the client side for duty cycle testing. It sets RX/TX subslot and idle subslot counts, sets frame repeat count, specifies channel 1677, and targets frequency 39.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\ndect rf_tool -m rx_tx --rx_subslot_count 9 --rx_idle_subslot_count 3 --tx_subslot_count 8 --tx_idle_subslot_count 3 --frame_repeat_count 15 -c 1677 -t 39\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables manually on Windows\nDESCRIPTION: Command to set up environment variables manually in a Windows terminal to enable direct use of west and other tools.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/2.4.99-cs3_to_2.6.99-cs2/migration_guide_2.4.99-cs3_to_2.6.99-cs2_environment.rst#2025-04-21_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nc:/ncs-lcs/nrfutil.exe toolchain-manager env --as-script\n```\n\n----------------------------------------\n\nTITLE: Start DUT Modulated Waveform Transmission - Custom Command Usage\nDESCRIPTION: This command initiates a modulated waveform transmission from the DUT device for a set duration defined in milliseconds, requiring two byte duration arguments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\ncustom rstream *<duration:1>* *<duration:0>*\n```\n\n----------------------------------------\n\nTITLE: Generating Sequence Diagram for SUIT IPUC Information Retrieval in PlantUML\nDESCRIPTION: This PlantUML code creates a sequence diagram showing the interaction between 'ssf' and 'sdfw_ipuc' components for retrieving SUIT IPUC information. The diagram includes automatic numbering, activation/deactivation of participants, and a note explaining the returned information.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/suit_get_ipuc_info.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant ssf\nparticipant sdfw_ipuc\n\n--> ssf ++ : suit_ipuc_get_info(idx)\nssf -> sdfw_ipuc : suit_ipuc_sdfw_get_info(idx)\nnote right\n  Return component_id and role\nend note\n\ndeactivate ssf\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Implementing Pressure Sensor Device Constructor\nDESCRIPTION: Basic constructor implementation for the PressureSensorDevice class.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_bridged_matter_device.rst#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include \"pressure_sensor.h\"\n\nPressureSensorDevice::PressureSensorDevice(const char *uniqueID, const char *nodeLabel)\n      : MatterBridgedDevice(uniqueID, nodeLabel) {}\n```\n\n----------------------------------------\n\nTITLE: Building nRF5340 Audio Headset Release Version\nDESCRIPTION: Command line example for building a release version of the nRF5340 Audio application for a headset device using west build system. Demonstrates usage of EXTRA_CONF_FILE and FILE_SUFFIX parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf5340_audio/doc/building.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340_audio_dk/nrf5340/cpuapp --pristine -- -DEXTRA_CONF_FILE=\".\\unicast_server\\overlay-unicast_server.conf\" -DFILE_SUFFIX=release\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO HPF Library Sources in Zephyr\nDESCRIPTION: Conditionally includes GPIO HPF source files based on configuration options for different communication backends (ICMSG, ICBMSG, MBOX)\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/gpio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_amend()\n\nif(CONFIG_GPIO_HPF)\n  if(CONFIG_GPIO_HPF_GPIO_BACKEND_ICMSG OR CONFIG_GPIO_HPF_GPIO_BACKEND_ICBMSG)\n    zephyr_library_sources(gpio_hpf_icmsg.c)\n  elseif(CONFIG_GPIO_HPF_GPIO_BACKEND_MBOX)\n    zephyr_library_sources(gpio_hpf_mbox.c)\n  endif()\n\n  zephyr_library_sources(gpio_hpf.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Continuous OFDM TX Traffic Sequence in 11a Mode\nDESCRIPTION: Complete command sequence for running a continuous OFDM TX traffic test in 802.11a mode. The configuration uses channel 40, 4000 byte payload, 200 μs gap, and 54 Mbps data rate for a 75.6% duty cycle.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_sample_for_transmit_tests.rst#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 40\nuart:~$ wifi_radio_test tx_pkt_tput_mode 0\nuart:~$ wifi_radio_test tx_pkt_rate 54\nuart:~$ wifi_radio_test tx_pkt_len 4000\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num -1\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Project Name\nDESCRIPTION: This snippet defines the minimum required version of CMake for the project and sets up the project name for the idle SPIM loopback application, indicating to CMake the beginning of a new project definition.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_spim_loopback/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nproject(idle_spim_loopback)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure IoT Hub Connection with Runtime Parameters\nDESCRIPTION: Example showing how to configure Azure IoT Hub connection by providing hostname and device ID at runtime. This configuration disables DPS usage and requires manual specification of connection parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nstruct azure_iot_hub_config cfg = {\n   .hostname = {\n      .ptr = hostname_buffer,\n      .size = hostname_length,\n   },\n   .device_id = {\n      .ptr = device_id_buffer,\n      .size = device_id_length,\n   },\n   .use_dps = false,\n};\n\nerr = azure_iot_hub_connect(&cfg);\n/* Error handling */\n```\n\n----------------------------------------\n\nTITLE: Modem JWT Header and Source Files\nDESCRIPTION: File paths for the Modem JWT library implementation. The header file contains public APIs while the source file contains the implementation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_jwt.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHeader file: include/modem/modem_jwt.h\nSource file: lib/modem_jwt/modem_jwt.c\n```\n\n----------------------------------------\n\nTITLE: Configuring LPCOMP Project Build in CMake\nDESCRIPTION: Sets up the CMake environment for building the LPCOMP project. It specifies the minimum CMake version, finds the Zephyr package, sets include directories, and adds source files to the project.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/power_consumption/lpcomp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nzephyr_include_directories(include)\n\nproject(lpcomp)\n\ntarget_sources(app PRIVATE ./../common/main.c)\ntarget_sources(app PRIVATE src/driver_test.c)\n```\n\n----------------------------------------\n\nTITLE: Adding sources based on CONFIG_BT_FAST_PAIR_FMDN_READ_MODE\nDESCRIPTION: This conditional block adds the 'read_mode.c' source file to the 'fmdn' library if the Kconfig option 'CONFIG_BT_FAST_PAIR_FMDN_READ_MODE' is enabled. The source is added as a PRIVATE source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(CONFIG_BT_FAST_PAIR_FMDN_READ_MODE)\n  target_sources(fmdn PRIVATE read_mode.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11ax PER Measurement (Transmitter)\nDESCRIPTION: Commands to set up the transmitter for 802.11ax PER measurement, including channel, packet parameters, and transmission settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 100\nuart:~$ wifi_radio_test tx_pkt_tput_mode 3\nuart:~$ wifi_radio_test tx_pkt_mcs 0\nuart:~$ wifi_radio_test tx_pkt_len 4000\nuart:~$ wifi_radio_test he_ltf 2\nuart:~$ wifi_radio_test he_gi 2\nuart:~$ wifi_radio_test tx_pkt_gap 200\nuart:~$ wifi_radio_test tx_pkt_num 10000\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Accessing Generic Battery Server Get Handler\nDESCRIPTION: This snippet mentions the `get` handler function within the `bt_mesh_battery_srv` structure. This handler allows the application to expose and provide access to the Generic Battery Status, effectively allowing clients to retrieve the current battery information from the server.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_battery_srv.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n\":c:member:`bt_mesh_battery_srv.get`\"\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for Zephyr Upstream Commits\nDESCRIPTION: Command to display all upstream Zephyr commits incorporated into NCS since the most recent release.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.6.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline v2.6.0-rc1 ^v2.4.99-ncs1\n```\n\n----------------------------------------\n\nTITLE: Sample Device List Output\nDESCRIPTION: Example output from the nrfutil device list command showing two connected development kits with their serial numbers and ports.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/ble_coex/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n1050043161\nproduct         J-Link\nboard version   PCA10095\nports           /dev/ttyACM0, vcom: 0\n                /dev/ttyACM1, vcom: 1\ntraits          devkit, jlink, seggerUsb, serialPorts, usb\n\n1050724225\nproduct         J-Link\nboard version   PCA10143\nports           /dev/ttyACM2, vcom: 0\n                /dev/ttyACM3, vcom: 1\ntraits          devkit, jlink, seggerUsb, serialPorts, usb\n\nFound 2 supported device(s)\n```\n\n----------------------------------------\n\nTITLE: Adding sources based on CONFIG_BT_FAST_PAIR_FMDN_STATE\nDESCRIPTION: This conditional block adds the 'state.c' source file to the 'fmdn' library if the Kconfig option 'CONFIG_BT_FAST_PAIR_FMDN_STATE' is enabled. The source is added as a PRIVATE source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/fast_pair/fmdn/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(CONFIG_BT_FAST_PAIR_FMDN_STATE)\n  target_sources(fmdn PRIVATE state.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Directory Input\nDESCRIPTION: This command-line option is used with 'west ncs-sbom' to specify the build directory to analyze for generating the SBOM. The tool extracts relevant files and dependencies from the specified build directory to identify licenses.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/west_commands/sbom/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"-d build_directory\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for DESH Project Build\nDESCRIPTION: Sets up the CMake environment for building the DESH project. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, and sets include directories. The script also adds source files and subdirectories to the build, with some subdirectories added conditionally based on configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/dect/dect_phy/dect_shell/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(DESH)\ntarget_include_directories(app PRIVATE src)\n\ntarget_sources(app PRIVATE src/main.c)\ntarget_sources(app PRIVATE src/shell.c)\n\nadd_subdirectory(src/print)\nadd_subdirectory(src/utils)\nadd_subdirectory_ifdef(CONFIG_DESH_DECT_PHY src/dect)\nadd_subdirectory_ifdef(CONFIG_DESH_STARTUP_CMDS src/startup_cmd)\n```\n\n----------------------------------------\n\nTITLE: Accessing Nordic-specific TF-M Platform Service APIs\nDESCRIPTION: Platform service APIs specific to Nordic SDK that allow firmware information retrieval and slot activity checking. These functions enable searching for firmware info structures and checking if S0 is the active B1 slot.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/security/tfm/tfm_services.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Search for the fw_info structure in firmware image located at address. */\nint tfm_platform_firmware_info(uint32_t fw_address, struct fw_info *info);\n\n/* Check if S0 is the active B1 slot. */\nint tfm_platform_s0_active(uint32_t s0_address, uint32_t s1_address, bool *s0_active);\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Credentials Provision Library - CMake\nDESCRIPTION: This snippet conditionally adds the credentials provision library based on whether the Modem Key Management API is enabled. The provision library manages credentials necessary for the nRF91 modem, ensuring secure communication.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/src/modules/transport/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory_ifdef(CONFIG_MODEM_KEY_MGMT credentials_provision)\n```\n\n----------------------------------------\n\nTITLE: Targeting Source Files in CMake for Application\nDESCRIPTION: These snippets define the source files that are part of the target application within the CMake build system. Each 'target_sources' directive adds a specific source file required for the application’s functionality, ensuring they are compiled into the final binary.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/lwm2m_client/src/events/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/gnss_pvt_event.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ui_input_event.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/location_events.c)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/location_event_handler.c)\n```\n\n----------------------------------------\n\nTITLE: RST Note Directive\nDESCRIPTION: Note directive referencing a desktop module event note.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/constlat.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n    |nrf_desktop_module_event_note|\n```\n\n----------------------------------------\n\nTITLE: Memory Size Table for Nordic Images\nDESCRIPTION: A table displaying the memory size requirements for different Nordic firmware components, showing the total memory needed for staging these components during updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_suit_ipuc.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n+--------------------------------+-----------+\n| Nordic image                   | Size (kB) |\n+================================+===========+\n| Secure Domain Firmware         | 272       |\n+--------------------------------+-----------+\n| Secure Domain Recovery         | 36        |\n+--------------------------------+-----------+\n| System Controller Firmware     | 56        |\n+--------------------------------+-----------+\n| TOTAL                          | 364       |\n+--------------------------------+-----------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Sources in CMake\nDESCRIPTION: Collects all C source files from the src directory using a glob pattern and adds them to the application target as private sources.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/fprotect/negative/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Adding BLE OnOff Light and Switch Bridged Device Support\nDESCRIPTION: Adds source files for OnOff Light, Generic Switch, and OnOff Light Switch bridged devices when Bluetooth connectivity is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_BRIDGE_ONOFF_LIGHT_BRIDGED_DEVICE AND (CONFIG_BRIDGE_GENERIC_SWITCH_BRIDGED_DEVICE OR CONFIG_BRIDGE_ONOFF_LIGHT_SWITCH_BRIDGED_DEVICE))\n    target_sources(app PRIVATE\n        src/bridged_device_types/onoff_light.cpp\n        src/ble_providers/ble_lbs_data_provider.cpp\n    )\n\nif(CONFIG_BRIDGE_GENERIC_SWITCH_BRIDGED_DEVICE)\n    target_sources(app PRIVATE src/bridged_device_types/generic_switch.cpp)\nendif()\n\nif(CONFIG_BRIDGE_ONOFF_LIGHT_SWITCH_BRIDGED_DEVICE)\n    target_sources(app PRIVATE\n        src/bridged_device_types/onoff_light_switch.cpp\n    )\nendif()\n\nendif() # CONFIG_BRIDGE_ONOFF_LIGHT_BRIDGED_DEVICE AND (CONFIG_BRIDGE_GENERIC_SWITCH_BRIDGED_DEVICE OR CONFIG_BRIDGE_ONOFF_LIGHT_SWITCH_BRIDGED_DEVICE)\n```\n\n----------------------------------------\n\nTITLE: Enable Compressed Image Support in MCUboot\nDESCRIPTION: This Kconfig option enables support for compressed firmware images in MCUboot, allowing for smaller secondary slots and the ability to use internal flash for updates.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_10\n\nLANGUAGE: Kconfig\nCODE:\n```\n:kconfig:option:`SB_CONFIG_MCUBOOT_COMPRESSED_IMAGE_SUPPORT` to ``y``\n```\n\n----------------------------------------\n\nTITLE: Creating Azure IoT Hub DPS Instance\nDESCRIPTION: Creates an Azure IoT Hub Device Provisioning Service (DPS) instance.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/azure_iot_hub.rst#2025-04-21_snippet_5\n\nLANGUAGE: Console\nCODE:\n```\naz iot dps create --name <dps_name> --resource-group <resource_name>\n```\n\n----------------------------------------\n\nTITLE: Defining Pin Configurations in pinctrl Node\nDESCRIPTION: Example of defining pin configurations for UART0 in the pinctrl node, including default and sleep states. This demonstrates the new pinctrl API usage.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/hardware/pin_control.rst#2025-04-21_snippet_1\n\nLANGUAGE: devicetree\nCODE:\n```\n&pinctrl {\n   /* configuration for uart0 device, default state */\n   uart0_default: uart0_default {\n     /* group 1 ('group1' name is arbitrary) */\n     group1 {\n       /* configure P0.1 as UART_TX and P0.2 as UART_RTS */\n       psels = <NRF_PSEL(UART_TX, 0, 1)>, <NRF_PSEL(UART_RTS, 0, 2)>;\n     };\n     /* group 2 */\n     group2 {\n       /* configure P0.3 as UART_RX and P0.4 as UART_CTS */\n       psels = <NRF_PSEL(UART_RX, 0, 3)>, <NRF_PSEL(UART_CTS, 0, 4)>;\n       /* both P0.3 and P0.4 are configured with pull-up */\n       bias-pull-up;\n     };\n   };\n   /* configuration for uart0 device, sleep state */\n   uart0_sleep: uart0_sleep {\n     /* group 1 ('group1' name is arbitrary) */\n     group1 {\n       /* configure P0.1 as UART_TX, P0.2 as UART_RTS P0.3 as UART_RX and\n        * P0.4 as UART_CTS\n        */\n       psels = <NRF_PSEL(UART_TX, 0, 1)>, <NRF_PSEL(UART_RTS, 0, 2)>,\n               <NRF_PSEL(UART_RX, 0, 3)>, <NRF_PSEL(UART_CTS, 0, 4)>;\n       /* all pins are configured in low power mode */\n       low-power-enable;\n     };\n   };\n };\n```\n\n----------------------------------------\n\nTITLE: Device Reset Command\nDESCRIPTION: Command to reset the device using nRF Util after BICR programming.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54h/ug_nrf54h20_custom_pcb.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnrfutil device reset --reset-kind RESET_PIN --serial-number <serial_number>\n```\n\n----------------------------------------\n\nTITLE: Including iCalendar Parser Header in C\nDESCRIPTION: This snippet shows how to include the header file for the iCalendar parser library in a C program. The header file contains the necessary declarations for using the parser.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/icalendar_parser.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <net/icalendar_parser.h>\n```\n\n----------------------------------------\n\nTITLE: Building for single domain (Command line)\nDESCRIPTION: West command to build for a single domain in a multi-domain build, targeting the hello_world domain.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/config_and_build/building.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf52840dk/nrf52840 --domain hello_world\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Pair Crypto Unit Test Project in CMake\nDESCRIPTION: This CMake snippet sets up a project for testing Fast Pair crypto functionality. It defines the minimum CMake version, finds the Zephyr package, sets the project name, adds test sources, and links the Fast Pair crypto library. The Fast Pair crypto library is added as a subdirectory and linked to the main application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/bluetooth/fast_pair/crypto/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(\"Fast Pair crypto unit test\")\n\n# Add test sources\ntarget_sources(app PRIVATE src/main.c)\n\n# Add Fast Pair crypto as part of the test\nset(NCS_FAST_PAIR_BASE ${ZEPHYR_NRF_MODULE_DIR}/subsys/bluetooth/services/fast_pair)\nadd_subdirectory(${NCS_FAST_PAIR_BASE}/fp_crypto fp_crypto)\ntarget_link_libraries(app PRIVATE fp_crypto)\n```\n\n----------------------------------------\n\nTITLE: Setting nRF Modem Directory\nDESCRIPTION: This snippet sets the `NRFXLIB_MODEM_DIR` variable to point to the nrf_modem directory within the Zephyr nRFXlib module. This variable is used later in the file to locate specific header files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/client_id/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"set(NRFXLIB_MODEM_DIR ${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Include Directories\nDESCRIPTION: Adds private include directories for SUIT storage headers to the application target\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/orchestrator/orchestrator_sdfw_nrf54h20/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(app PRIVATE\n  ${SUIT_SUBSYS_DIR}/storage/include\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version for nRF Connect SDK\nDESCRIPTION: Sets the minimum required CMake version for the project, ensuring compatibility with the build system requirements\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/manifest_variables/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Generating CBOR Files for PSA Crypto Service\nDESCRIPTION: Generates CBOR (Concise Binary Object Representation) files from CDDL specification for PSA crypto request and response handling. Uses custom CMake function to process the CDDL file and create necessary generated code.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/psa_crypto/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_and_add_cbor_files(psa_crypto_service.cddl zcbor_generated\n  psa_crypto_req\n  psa_crypto_rsp\n)\n```\n\n----------------------------------------\n\nTITLE: Flash IPUC Device Erase Operation Sequence Flow in PlantUML\nDESCRIPTION: A sequence diagram modeling the erase operation in the flash IPUC device. It illustrates verification of erase boundaries, cache flushing, and different optimization paths based on erase size and setup state. The diagram shows how the IPUC component interfaces with system cache and SSF (Secure Storage Framework) components.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/images/flash_ipuc/flash_ipuc_erase.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nautonumber\nparticipant flash_ipuc_dev\nparticipant sys_cache\nparticipant ssf\n\n--> flash_ipuc_dev ++ : erase(offset, size)\n\nflash_ipuc_dev -> flash_ipuc_dev : verify(offset + size < ipuc_size)\n\nrnote over flash_ipuc_dev\n  Use stack-allocated erase_block buffer\n  for erases smaller than ipuc_size.\nend note\nflash_ipuc_dev -> sys_cache ++ : sys_cache_data_flush_range(erase_block, sizeof(erase_block))\ndeactivate sys_cache\n\n\nalt setup_pending == true\n  rnote over flash_ipuc_dev\n    Any write sets up the IPUC, which invalidates the whole area,\n    so the API may return here immediately.\n  end note\nelse size == ipuc_size\n  rnote over flash_ipuc_dev\n    Optimize: Use write_setup() to invalidate the whole\n    area with a single SSF call.\n  end note\n  flash_ipuc_dev -> ssf ++ : suit_ipuc_write_setup(component_id, NULL, NULL)\n  deactivate ssf\nelse\n  loop i < size\n    flash_ipuc_dev -> ssf ++ : suit_ipuc_write(component_id, offset + i, sizeof(erase_block))\n    deactivate ssf\n    flash_ipuc_dev -> flash_ipuc_dev : i += sizeof(erase_block)\n  end\nend\n\ndeactivate flash_ipuc_dev\n\nrnote over flash_ipuc_dev\n  The flash device instance remains allocated until\n  flash_ipuc_release() or flash_image_ipuc_release() API call.\nend note\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Checking Initial Attestation Test Compatibility with TF-M\nDESCRIPTION: This block checks if the Initial Attestation test is enabled without specifying a QCBOR path. It displays an error message due to licensing issues with a dependent library in TF-M 2.0.0.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/tfm/tfm_psa_test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_TFM_PSA_TEST_INITIAL_ATTESTATION AND CONFIG_TFM_QCBOR_PATH STREQUAL \"\")\n# TODO: Remove this when QCBOR licensing issues w/t_cose have been resolved,\n# or only allow it when 'QCBOR_PATH' is set to a local path where QCBOR has\n# been manually downloaded by the user before starting the build.\nmessage(FATAL_ERROR \"CONFIG_TFM_PSA_TEST_INITIAL_ATTESTATION is not available \"\n  \"with TF-M 2.0.0 due to licensing issues with a dependent library. This \"\n  \"restriction will be removed once licensing issues have been resolved.\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Regulatory Domain Restrictions in Wi-Fi Radio Test (Shell)\nDESCRIPTION: This command re-enables regulatory domain restrictions for the Wi-Fi Radio test sample after they have been bypassed. It ensures compliance with domain-specific regulations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/setting_regulatory_domain.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test bypass_reg_domain 0\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SUIT Digest Sink Tests\nDESCRIPTION: Sets up the CMake build configuration for SUIT digest sink integration tests. Specifies minimum CMake version, finds Zephyr package, creates project, includes test template, and links required SUIT stream sinks interface library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/digest_sink/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_digest_sink)\ninclude(../cmake/test_template.cmake)\n\n# Link with the CMake target, that includes suit platform internal apis header\nzephyr_library_link_libraries(suit_stream_sinks_interface)\n```\n\n----------------------------------------\n\nTITLE: Header file\nDESCRIPTION: This snippet refers to the header file that contains the API definitions for the Generic Battery Server model. It is located at `include/bluetooth/mesh/gen_battery_srv.h`.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/gen_battery_srv.rst#2025-04-21_snippet_2\n\nLANGUAGE: None\nCODE:\n```\n| Header file: :file:`include/bluetooth/mesh/gen_battery_srv.h`\n```\n\n----------------------------------------\n\nTITLE: Defining Interrupt Priorities\nDESCRIPTION: Updated interrupt priority macros for 802.15.4 radio driver to comply with driver limitations\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.7.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nNRF_802154_SWI_PRIORITY\nNRF_802154_ECB_PRIORITY\nNRF_802154_SL_RTC_IRQ_PRIORITY\n```\n\n----------------------------------------\n\nTITLE: Checking Zephyr Upstream Commits\nDESCRIPTION: Shell command to list upstream Zephyr commits incorporated into nRF Connect SDK since the previous release.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.99-cs1.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline 28b6861211 ^25e90e7bb0\n```\n\n----------------------------------------\n\nTITLE: Configuring SUIT Recovery Button Library in CMake\nDESCRIPTION: Creates and configures a Zephyr library for the SUIT recovery button functionality. Links required dependencies including suit_platform_err and suit_utils libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/app_tools/recovery_button/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources(src/suit_recovery_button.c)\n\nzephyr_library_link_libraries(suit_platform_err)\nzephyr_library_link_libraries(suit_utils)\n```\n\n----------------------------------------\n\nTITLE: Building Matter Weather Station with nRF7002 Wi-Fi Support\nDESCRIPTION: Command to build the application for Thingy:53 with nRF7002 Wi-Fi expansion board attached using the command line interface.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_weather_station/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwest build -b thingy53/nrf5340/cpuapp -- -Dmatter_weather_station_SHIELD=nrf7002eb -DFILE_SUFFIX=release -DSB_CONFIG_WIFI_NRF70=y\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries with Zephyr Storage\nDESCRIPTION: This snippet links the SUIT storage interface library with additional utility libraries. The `suit_utils` and `suit_storage_interface` libraries are linked, ensuring that required functionalities are accessible during the build process. Dependencies include the defined libraries and a compatible Zephyr environment.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/storage/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_link_libraries(suit_utils)\nzephyr_library_link_libraries(suit_storage_interface)\n```\n\n----------------------------------------\n\nTITLE: Handling Bluetooth Peer Events in C\nDESCRIPTION: The module reacts to ble_peer_event struct, checking if a Bluetooth peer is connected or disconnected and counting active connections.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/caf/ble_state_pm.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nble_peer_event\n```\n\n----------------------------------------\n\nTITLE: Installing nrfutil trace v2.11.0 using Command Line\nDESCRIPTION: Command to install the nRF Util trace command version 2.11.0 with force option. Required for compatibility with NCS v2.7.99-cs2.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_nRF54H20_cs_to_2_7_99-cs2.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnrfutil install trace=2.11.0 --force\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for nRF Cloud Multi-Service\nDESCRIPTION: Sets up the CMake project, defines the minimum required version, finds the Zephyr package, and sets the project name. It also defines a compile definition for the project name.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nrf_cloud_multi_service)\nzephyr_compile_definitions(PROJECT_NAME=${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Writing Data to IPUC in C\nDESCRIPTION: Employs the suit_write_ipuc SSF service to write data into an initialized IPUC, with options for specifying offset and indicating the last chunk.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/drivers/suit_flash_ipuc.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nsuit_write_ipuc()\n```\n\n----------------------------------------\n\nTITLE: Setting Secure Socket Options in AT Commands\nDESCRIPTION: This AT command sets a secure socket option, specifically setting the peer verification level to 'required'. It demonstrates how to use the #XSSOCKETOPT command to configure secure socket behavior.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_7\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XSSOCKETOPT=1,5,2\nOK\n```\n\n----------------------------------------\n\nTITLE: Firmware Version Configuration in RST\nDESCRIPTION: Version and tag definition for the NCS release manifest repository using RST syntax.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.2.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n.. _ncs_release_notes_120:\\n\\n|NCS| v1.2.0 Release Notes\\n##########################\n```\n\n----------------------------------------\n\nTITLE: Setting PHY - Shell Command\nDESCRIPTION: Shell command for setting the PHY (1M, 2M, or Coded) for a Bluetooth LE Audio broadcast subgroup.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/nrf_auraconfig/README.rst#2025-04-21_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nnac phy 2 0 0\n```\n\n----------------------------------------\n\nTITLE: Configuring ADC Error Cases Test Project with CMake\nDESCRIPTION: This CMake script sets up a project for testing ADC error cases in the nRF Connect SDK. It requires Zephyr RTOS, sets the minimum CMake version to 3.20.0, and includes all source files from the Zephyr test directory for ADC error cases.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/adc/adc_error_cases/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(adc_error_cases)\n\nFILE(GLOB app_sources ${ZEPHYR_BASE}/tests/drivers/adc/adc_error_cases/src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Defining a Wildcard AT Monitor in C\nDESCRIPTION: Shows how to define an AT monitor that will receive all AT notifications using the ANY wildcard filter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_monitor.rst#2025-04-21_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n/* AT monitor for all notifications */\nAT_MONITOR(catch_all, ANY, at_notif_handler);\n\nint at_notif_handler(const char *notif)\n{\n\tprintf(\"Received a notification: %s\", notif);\n}\n```\n\n----------------------------------------\n\nTITLE: Flash Patch Warning Message (CMake)\nDESCRIPTION: This CMake snippet checks if `CONFIG_FLASH_PATCH_WARN` is enabled. If it is, a warning message is displayed to remind the user to disable flash patching in production environments to maintain secure boot integrity. This is a crucial step to prevent unauthorized code modification in a deployed product.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/flash_patch/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CONFIG_FLASH_PATCH_WARN)\n  message(WARNING \"\n      ----------------------------------------------------------\n      --- WARNING: To maintain the integrity of secure boot, ---\n      --- enable CONFIG_DISABLE_FLASH_PATCH in production.   ---\n      ----------------------------------------------------------\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options for Test Interface\nDESCRIPTION: This snippet defines compile options for the test interface, specifically enabling configuration options related to the SUIT platform and stream sink digest functionality. This ensures that the test environment is correctly configured for the SUIT platform.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/unit/suit_plat_check_image_match/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(test_interface INTERFACE -DCONFIG_SUIT_PLATFORM\n  -DCONFIG_SUIT_STREAM_SINK_DIGEST)\n```\n\n----------------------------------------\n\nTITLE: Configuring BMM350 Sensor Minimal Initialization\nDESCRIPTION: Sets up minimal initialization for BMM350 sensor when the full driver is not used, to optimize power consumption\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/boards/nordic/thingy91x/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_SENSOR AND CONFIG_REGULATOR AND CONFIG_I2C AND NOT CONFIG_BMM350)\n  zephyr_library_named(bmm350_init_minimal)\n  zephyr_library_sources(bmm350_init_minimal.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Zephyr Project in CMake\nDESCRIPTION: This snippet sets up a CMake configuration for a project that requires the Zephyr environment. It specifies the minimum required version of CMake, finds the Zephyr package using an environment variable, and sets up the project named 'bme68x'. The snippet also includes a directive to gather all source files from the 'src' directory and link them to the target application sources, demonstrating a typical setup pattern for projects using Nordic's SDK on Zephyr.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/sensor/bme68x_iaq/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(bme68x)\n\nFILE(GLOB app_sources src/*.c)\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE ${app_sources})\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions for CURL\nDESCRIPTION: This CMake command defines compile-time definitions for the CURL library. HAVE_CONFIG_H enables the use of a config.h file, and CURL_NO_OLDIES disables support for older, potentially insecure SSL/TLS protocols, enhancing security.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/ext/curl/lib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"zephyr_compile_definitions(HAVE_CONFIG_H CURL_NO_OLDIES)\"\n```\n\n----------------------------------------\n\nTITLE: Include and Linker Configuration\nDESCRIPTION: Sets up include directories and adds linker script for transport definitions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/downloader/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_include_directories(./include)\nzephyr_linker_sources(RODATA dl_transports.ld)\n```\n\n----------------------------------------\n\nTITLE: Displaying Configurable Modules - Python\nDESCRIPTION: This command shows the list of modules that can have runtime options configured. It requires the '-h' option for help to be displayed correctly.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/hid_configurator/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npython3 configurator_cli.py DEVICE config -h\n```\n\n----------------------------------------\n\nTITLE: Adding Main Application Source in CMake\nDESCRIPTION: Adds the main.c source file to the application target for compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_trace_backend/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Inclusion for Cloud Connectivity Modules\nDESCRIPTION: Conditionally adds source files to the 'app' target based on enabled configuration options. This allows for modular inclusion of different cloud connectivity implementations (MQTT, REST, CoAP, LwM2M) in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/modem_shell/src/cloud/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources_ifdef(CONFIG_MOSH_CLOUD_MQTT app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/cloud_mqtt_shell.c)\ntarget_sources_ifdef(CONFIG_MOSH_CLOUD_REST app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/cloud_rest_shell.c)\ntarget_sources_ifdef(CONFIG_MOSH_CLOUD_COAP app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/cloud_coap_shell.c)\ntarget_sources_ifdef(CONFIG_MOSH_CLOUD_LWM2M app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/cloud_lwm2m_shell.c)\ntarget_sources_ifdef(CONFIG_MOSH_CLOUD_LWM2M app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/cloud_lwm2m.c)\n```\n\n----------------------------------------\n\nTITLE: Poll Sockets Command\nDESCRIPTION: Command to poll sockets for I/O readiness with timeout and handle parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/SOCKET_AT_commands.rst#2025-04-21_snippet_17\n\nLANGUAGE: AT\nCODE:\n```\nAT#XPOLL=2000,0\n#XPOLL: 0,\"0x0001\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Protocol Support Matrix\nDESCRIPTION: RST table showing protocol support status across different Nordic device models, including Bluetooth, Matter, NFC, Sidewalk, Thread, Wi-Fi, and other protocols\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/software_maturity.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :widths: auto\n   :header-rows: 1\n\n   * -\n     - nRF52810\n     - nRF52811\n     [...]\n   * - **Bluetooth®**\n     - Supported\n     - Supported\n     [...]\n   * - **Matter**\n     - --\n     - --\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for SUIT Integration Tests\nDESCRIPTION: Sets up CMake build configuration for SUIT execution mode integration tests. Specifies minimum CMake version, finds Zephyr package, defines project name, includes test template, and links with SUIT execution mode library.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/execution_mode/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(integration_test_suit_execution_mode)\ninclude(../cmake/test_template.cmake)\n\n# Link with the CMake target, that includes SUIT platform internal APIs header\nzephyr_library_link_libraries(suit_execution_mode)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Semiconductor Project\nDESCRIPTION: This CMake script sets up the build environment for a Nordic Semiconductor project. It requires CMake 3.20.0 or higher, finds the Zephyr package, and includes all .c files from the src directory as source files for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/nrfx_integration_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenThread RPC Library Sources in CMake\nDESCRIPTION: Configures a Zephyr library with OpenThread RPC source files including group and common functionality implementations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/rpc/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(\n  ot_rpc_group.c\n  ot_rpc_common.c\n)\n```\n\n----------------------------------------\n\nTITLE: Config Channel Module Section\nDESCRIPTION: Section definition that tracks configuration channel listeners using the config_channel_modules section\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/info.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nconfig_channel_modules\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Finds the Zephyr package using the `find_package` command. It requires the Zephyr package and uses the environment variable `ZEPHYR_BASE` as a hint to locate it. This step is crucial for accessing Zephyr's build system and libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/uart_idle/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Configuring toctree for nRF RPC Documentation in reStructuredText\nDESCRIPTION: A reStructuredText directive that configures the table of contents tree for the nRF RPC libraries documentation. It sets the maximum depth to 1, enables globbing to include all files in the directory, and adds a caption 'Subpages:'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nrf_rpc/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   :caption: Subpages:\n\n   *\n```\n\n----------------------------------------\n\nTITLE: Including Bluetooth LE Advertising Module Events Table in RST\nDESCRIPTION: This RST directive includes a table of Bluetooth LE advertising module events from another file. It specifies the start and end markers for the table inclusion.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/ble_adv.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: event_propagation.rst\n    :start-after: table_ble_adv_start\n    :end-before: table_ble_adv_end\n```\n\n----------------------------------------\n\nTITLE: Start External FOTA Download - C\nDESCRIPTION: This snippet refers to the function `fota_download_external_start`, which is used to start FOTA updates using an external download client. The snippet also refers to `fota_download_external_evt_handle` function.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-2.7.0.rst#2025-04-21_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Conditional RW Cache Source Compilation\nDESCRIPTION: Conditionally compiles read-write cache source file when CONFIG_SUIT_CACHE_RW is enabled\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/suit/cache/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_library_sources_ifdef(CONFIG_SUIT_CACHE_RW src/suit_dfu_cache_rw.c)\n```\n\n----------------------------------------\n\nTITLE: Getting Help for MDS BLE Gateway Script\nDESCRIPTION: Run this command to display available script arguments and options for the MDS BLE gateway. It assists users with understanding possible configurations and parameters when using the tool.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/memfault/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npython3 mds_ble_gateway.py -h\n```\n\n----------------------------------------\n\nTITLE: Configuring Fatal Error Handler Behavior\nDESCRIPTION: Demonstrates how to modify the default fatal error handling behavior by changing the CONFIG_RESET_ON_FATAL_ERROR Kconfig option to prevent automatic application reboot\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/security/fatal_error.rst#2025-04-21_snippet_0\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_RESET_ON_FATAL_ERROR=n\n```\n\n----------------------------------------\n\nTITLE: Adding RREQ Subdirectory Conditionally\nDESCRIPTION: This CMake command adds the 'rreq' subdirectory to the build only if the `CONFIG_BT_RAS_RREQ` Kconfig option is enabled. This allows for the RAS Requester to be selectively included during compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/bluetooth/services/ras/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_subdirectory_ifdef(CONFIG_BT_RAS_RREQ rreq)\"\n```\n\n----------------------------------------\n\nTITLE: Target Sources Configuration\nDESCRIPTION: This snippet specifies the source file for the application target. It uses the target_sources command to add the main.c file from the Zephyr Bluetooth beacon sample to the app target as a private source.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/beacon_vs_vddh/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(app PRIVATE $ENV{ZEPHYR_BASE}/samples/bluetooth/beacon/src/main.c)\n```\n\n----------------------------------------\n\nTITLE: OpenSSL DTLS Client Connection (ECDSA)\nDESCRIPTION: OpenSSL command to perform a DTLS client connection using ECDHE-ECDSA-AES128-SHA256 cipher and ECDSA root certificate.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/crypto/psa_tls/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nopenssl s_client -dtls -connect 192.0.2.1:4243 -cipher ECDHE-ECDSA-AES128-SHA256 -CAfile certs/ecdsa/root_cert.pem\n```\n\n----------------------------------------\n\nTITLE: Including General Sample Information in reStructuredText\nDESCRIPTION: This snippet includes a section of general sample information from another file. It uses the 'include' directive with start-after and end-before options to extract a specific portion of the referenced file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/esb.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../samples.rst\n    :start-after: samples_general_info_start\n    :end-before: samples_general_info_end\n```\n\n----------------------------------------\n\nTITLE: Configuring Modem Info Application Build in CMake\nDESCRIPTION: Sets up the build environment for the modem_info application, including required sources, include directories, and compiler options. The configuration includes test runner generation and specific buffer size settings for modem information operations.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/lib/modem_info/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(modem_info)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\n\ntest_runner_generate(src/main.c)\n\ntarget_sources(app\n  PRIVATE\n  ${ZEPHYR_NRF_MODULE_DIR}/lib/modem_info/modem_info.c\n)\n\nzephyr_include_directories(${ZEPHYR_NRFXLIB_MODULE_DIR}/nrf_modem/include/)\nzephyr_include_directories(${ZEPHYR_NRF_MODULE_DIR}/include/modem/)\nzephyr_include_directories(${ZEPHYR_BASE}/subsys/testsuite/include)\n\ntarget_compile_options(app\n  PRIVATE\n  -DCONFIG_MODEM_INFO_BUFFER_SIZE=128\n  -DCONFIG_MODEM_INFO_MAX_AT_PARAMS_RSP=10\n)\n```\n\n----------------------------------------\n\nTITLE: Amending Zephyr Library Sources Based on Configurations\nDESCRIPTION: This snippet conditionally includes the source files 'uart_nrf_sw_lpuart.c' and 'uart_ipc.c' into the Zephyr library based on the configurations 'CONFIG_NRF_SW_LPUART' and 'CONFIG_IPC_UART'. It is used within the context of building projects for Nordic Semiconductor's platforms using the Zephyr RTOS. Dependencies include the Zephyr build system and specific configuration options.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/drivers/serial/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nzephyr_library_amend()\\nzephyr_library_sources_ifdef(CONFIG_NRF_SW_LPUART uart_nrf_sw_lpuart.c)\\nzephyr_library_sources_ifdef(CONFIG_IPC_UART uart_ipc.c)\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Statistics RST Table\nDESCRIPTION: reStructuredText table listing Wi-Fi radio test statistics including RSSI and CRC check counters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/radio_test/multi_domain/radio_test_subcommands.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table:: Wi-Fi radio test statistics\n   :header-rows: 1\n\n   * - Statistic\n     - Description\n```\n\n----------------------------------------\n\nTITLE: RST Section Headers and References\nDESCRIPTION: ReStructuredText markup defining the changelog document structure, including the version reference, titles and section organization.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-3.0.0-preview1.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ncs_release_notes_300_preview1:\n\nChangelog for |NCS| v3.0.0-preview1\n###################################\n\n.. contents::\n   :local:\n   :depth: 2\n```\n\n----------------------------------------\n\nTITLE: Setting Up Base Directory Paths\nDESCRIPTION: Defines the base directory paths for different components of the HOSTAP module, including the main HOSTAP directory, WPA supplicant, source files, and HOSTAPD.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/lib/hostap_crypto/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HOSTAP_BASE ${ZEPHYR_HOSTAP_MODULE_DIR})\nset(WIFI_NM_WPA_SUPPLICANT_BASE ${HOSTAP_BASE}/wpa_supplicant)\nset(HOSTAP_SRC_BASE ${HOSTAP_BASE}/src)\nset(WIFI_NM_HOSTAPD_BASE ${HOSTAP_BASE}/hostapd)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wi-Fi Radio Test for 802.11n PER Measurement (Transmitter)\nDESCRIPTION: Commands to set up the transmitter for 802.11n PER measurement, including channel, packet parameters, and transmission settings.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/regulatory_certification/wifi_radio_test_sample/wifi_radio_test_for_per_measurements.rst#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nuart:~$ wifi_radio_test init 36\nuart:~$ wifi_radio_test tx_pkt_tput_mode 1\nuart:~$ wifi_radio_test tx_pkt_preamble 2\nuart:~$ wifi_radio_test tx_pkt_mcs 0\nuart:~$ wifi_radio_test tx_pkt_len 4000\nuart:~$ wifi_radio_test tx_pkt_sgi 0\nuart:~$ wifi_radio_test tx_pkt_gap 1000\nuart:~$ wifi_radio_test tx_pkt_num 10000\nuart:~$ wifi_radio_test tx 1\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project is at least 3.20.0. It's a prerequisite for using the CMake features used in this file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/uart_idle/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Fast Pair for Input Devices in Kconfig\nDESCRIPTION: Enables the Fast Pair configuration for input devices like keyboards, remotes, or gaming pads. This option automatically selects the appropriate Fast Pair settings for the input device use case.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/external_comp/bt_fast_pair.rst#2025-04-21_snippet_20\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_BT_FAST_PAIR_USE_CASE_INPUT_DEVICE\n```\n\n----------------------------------------\n\nTITLE: Retrieving Integer Parameter in C\nDESCRIPTION: Retrieves an integer parameter from the parsed AT command list.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_parser.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nat_params_int_get();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories and Compile Options\nDESCRIPTION: Configures include directories and compile options for the main app target and the nRF Provisioning library target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_provisioning/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(includes\n  \"include/\" # Must be included first to redefine functions as non-static-inline\n  \"${ZEPHYR_NRF_MODULE_DIR}/include/\"\n  \"${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_provisioning/include/\"\n  \"${NRFXLIB_DIR}/nrf_modem/include/\"\n  \"${ZEPHYR_BASE}/include/\"\n  \"src/\"\n)\n\ntarget_include_directories(app\n  PRIVATE\n  ${includes}\n)\n\ntarget_include_directories(..__nrf__subsys__net__lib__nrf_provisioning\n  PRIVATE\n  ${includes}\n)\n\ntarget_compile_options(app\n  PRIVATE\n  ${options}\n)\n\ntarget_compile_options(..__nrf__subsys__net__lib__nrf_provisioning\n  PRIVATE\n  ${options}\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package with CMake\nDESCRIPTION: This snippet sets the minimum required version of CMake and searches for the Zephyr package, which is essential for building Zephyr-based applications. It utilizes an environment variable for Zephyr's base path.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/hw_id/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Semiconductor Project with Zephyr\nDESCRIPTION: This CMake script sets up the build environment for a Nordic Semiconductor project. It specifies the minimum CMake version, finds the Zephyr package, defines the project, and configures source files and include directories for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/fprotect/storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Referencing Zephyr WiFi Driver Header File\nDESCRIPTION: Location of the header file containing the offloaded raw transmit APIs for nRF70 Series WiFi drivers.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/wifi/advanced_modes/offloaded_raw_tx.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nzephyr/drivers/wifi/nrf_wifi/off_raw_tx/off_raw_tx_api.h\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version for Nordic Sniffer Project\nDESCRIPTION: Sets the minimum required CMake version to ensure compatibility with the project's build requirements. Ensures consistent build environment across different development setups.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_sniffer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\n----------------------------------------\n\nTITLE: Disk Partition Configuration with Extra Params in NRF Connect SDK - YAML\nDESCRIPTION: This YAML snippet configures a disk partition using extra_params in the NRF Connect SDK. It defines additional parameters such as disk_name, disk_cache_size, disk_sector_size, and disk_read_only to generate disk objects with the Disk Access API. The configuration includes the affiliation property for grouping and placement specifics like alignment and inside properties.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/scripts/partition_manager/partition_manager.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfatfs_storage:\n    affiliation: disk\n    extra_params: {\n        disk_name: \"SD\",\n        disk_cache_size: 4096,\n        disk_sector_size: 512,\n        disk_read_only: 0\n    }\n    placement:\n        before: [end]\n        align: {start: 4096}\n    inside: [nonsecure_storage]\n    size: 65536\n```\n\n----------------------------------------\n\nTITLE: Configuring ADC Accuracy Test Application in CMake\nDESCRIPTION: This CMake script sets up the ADC accuracy test application. It requires Zephyr, defines the project, and includes the main source file. It also conditionally includes the reference voltage test source file when CONFIG_REFERENCE_VOLTAGE_TEST is enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/zephyr/drivers/adc/adc_accuracy_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(adc_accuracy)\n\ntarget_sources(app PRIVATE ${ZEPHYR_BASE}/tests/drivers/adc/adc_accuracy_test/src/main.c)\ntarget_sources_ifdef(CONFIG_REFERENCE_VOLTAGE_TEST app PRIVATE ${ZEPHYR_BASE}/tests/drivers/adc/adc_accuracy_test/src/ref_volt.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Event Source Files to Application Build\nDESCRIPTION: CMake directive that adds multiple event-handling source files to the application build. Includes modules for managing module state, peer connections, BLE control/data, CDC data, UART data, filesystem, and power events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/connectivity_bridge/src/events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/module_state_event.c\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/peer_conn_event.c\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/ble_ctrl_event.c\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/ble_data_event.c\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/cdc_data_event.c\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/uart_data_event.c\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/fs_event.c\n\t\t     ${CMAKE_CURRENT_SOURCE_DIR}/power_event.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Gazell ACK Payload Device\nDESCRIPTION: Sets up the CMake build environment with Zephyr dependencies and configures the project source files. Requires CMake 3.20 or higher and the Zephyr RTOS framework. The build includes a single source file 'main.c' located in the src directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/gazell/gzll_ack_payload_device/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(gzll_ack_payload_device)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE\n  src/main.c\n)\n# NORDIC SDK APP END\n```\n\n----------------------------------------\n\nTITLE: Configuring PWM LED Indication in Kconfig\nDESCRIPTION: Use the Zephyr pwm-leds driver for LED indication. Defaults to enabled on the Thingy:91.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_22\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_LED_INDICATION_PWM\n```\n\n----------------------------------------\n\nTITLE: Finding Zephyr Package\nDESCRIPTION: Locates the Zephyr RTOS package, which is essential for building applications based on Zephyr. It searches for the Zephyr installation using the ZEPHYR_BASE environment variable.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/mqtt/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flash Source to Zephyr Library\nDESCRIPTION: CMake command to add flash.c source file to the Zephyr library build process. Uses zephyr_library_sources() function to include the source file in compilation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/nrf_modem_lib/trace_backends/flash/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library_sources(flash.c)\n```\n\n----------------------------------------\n\nTITLE: Storing Data with Emergency Data Storage\nDESCRIPTION: This snippet illustrates the storage operation performed by the emds_store function that should be invoked to store all registered entries when the device is shutting down.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/others/emds.rst#2025-04-21_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nemds_store();\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenThread RPC Library Sources in CMake\nDESCRIPTION: Defines the core and conditional source files for the OpenThread RPC library. Includes various RPC components like CLI, CoAP, diagnostics, dataset management, DNS client, IP6, linking, and thread management.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/net/openthread/rpc/server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\n\nzephyr_library_sources(\n  ot_rpc_cli.c\n  ot_rpc_coap.c\n  ot_rpc_diag.c\n  ot_rpc_dataset.c\n  ot_rpc_dns_client.c\n  ot_rpc_instance.c\n  ot_rpc_ip6.c\n  ot_rpc_link.c\n  ot_rpc_link_raw.c\n  ot_rpc_message.c\n  ot_rpc_netdata.c\n  ot_rpc_netdiag.c\n  ot_rpc_srp_client.c\n  ot_rpc_thread.c\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Build Targets for Thingy:91 X Components in RST\nDESCRIPTION: This RST table shows the build targets for different components of Thingy:91 X in the nRF Connect SDK, including the nRF9151 SiP and nRF5340 SoC cores.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/thingy91x/thingy91x_building_programming.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n+----------------------------------+---------------------------------+\n| Component                        | Build target                    |\n+==================================+=================================+\n| nRF9151 SiP                      | ``thingy91x/nrf9151``           |\n|                                  | ``thingy91x/nrf9151/ns``        |\n+----------------------------------+---------------------------------+\n| nRF5340 SoC - Application core   | ``thingy91x/nrf5340/cpuapp``    |\n|                                  | ``thingy91x/nrf5340/cpuapp/ns`` |\n+----------------------------------+---------------------------------+\n| nRF5340 SoC - Network core       | ``thingy91x/nrf5340/cpunet``    |\n+----------------------------------+---------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Finding Required Packages - CMake\nDESCRIPTION: This snippet defines the minimum required version of CMake and finds the Zephyr package necessary for the build process, using a path defined in the environment variable 'ZEPHYR_BASE'. Dependencies include 'CMake' version 3.20.0 and 'Zephyr'.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/suit/storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Light CTL Temperature State - Command Syntax\nDESCRIPTION: Retrieves the current Light CTL Temperature state value.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/bluetooth/mesh/light_ctl_cli.rst#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nmesh models ctl temp-get\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: This snippet sets the minimum required version of CMake for the project. It ensures that the build process uses a compatible version of CMake.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/peripheral_hr_coded/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Nordic Semiconductor SDK\nDESCRIPTION: Sets up a CMake project with Zephyr framework, specifying minimum CMake version and finding Zephyr package. Configures project name and adds main source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/current_consumption/nrf54l_errata30_idle/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\nLANGUAGE: cmake\nCODE:\n```\nproject(nrf54l_errata30_idle)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Example of Generating Matter Certification Declaration\nDESCRIPTION: This snippet provides an example of the command used to generate a Certification Declaration (CD) using the chip-cert tool, with example values for the parameters.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/configuring_cd.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"chip-cert gen-cd --key credentials/test/certification-declaration/Chip-Test-CD-Signing-Key.pem --cert credentials/test/certification-declaration/Chip-Test-CD-Signing-Cert.pem --out CD.der --format-version 1 --vendor-id 0xFFF1 --product-id 0x8006 --device-type-id 0xA --certificate-id ZIG20142ZB330003-24 --security-level 0 --security-info 0 --certification-type 1 --version-number 0x2694\"\n```\n\n----------------------------------------\n\nTITLE: Potential Crashes During Stress Testing - 802.15.4 - Documentation Format\nDESCRIPTION: This entry indicates a known crash scenario during multi-protocol stress testing, particularly impacting the nRF5340 network core, which necessitates proper error handling in applications utilizing the core.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/known_issues.rst#2025-04-21_snippet_54\n\nLANGUAGE: plaintext\nCODE:\n```\nKRKNWK-16976: multiprotocol_rpmsg application on nRF5340 network core occasionally crashes when Matter weather station application is stress tested The root cause of this issue is not known.\n```\n\n----------------------------------------\n\nTITLE: HTTP GET request (Non-TLS, Wi-Fi)\nDESCRIPTION: Sends an HTTP GET request to retrieve the state of LED 1 via a non-TLS connection. It uses the `http` command with the GET method to the specified URL to retrieve the LED state.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n\"http GET http://httpserver.local:80/led/1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Source Files for CProject\nDESCRIPTION: This snippet specifies the source files to be included in the Zephyr build system. It adds custom source files for the encoding and decoding of a firmware service to the build configuration. The expected input includes the names of the source files, and the output is the successful inclusion of these files in the build process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/sdfw_services/services/enc_fw/zcbor_generated/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nzephyr_sources(\n\tenc_fw_service_decode.c\n\tenc_fw_service_encode.c\n)\n```\n\n----------------------------------------\n\nTITLE: Set Payload for Burst Transmission - Custom Command Usage\nDESCRIPTION: This command sets an arbitrary payload for a raw IEEE 802.15.4 packet during burst transmission, requiring length and payload arguments.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/peripheral/802154_phy_test/README.rst#2025-04-21_snippet_23\n\nLANGUAGE: text\nCODE:\n```\ncustom lsetpayload *<length>* *<payload>*\n```\n\n----------------------------------------\n\nTITLE: Gazell Pairing Configuration Macros\nDESCRIPTION: Configuration macros referenced in the documentation for pipe configuration. GZP_PAIRING_PIPE is set to pipe 0 and GZP_DATA_PIPE is configurable (default pipe 1).\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/gazell/gzp.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGZP_PAIRING_PIPE  // Always pipe 0\nGZP_DATA_PIPE     // Configurable, default pipe 1\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Remote Project with Zephyr\nDESCRIPTION: Sets up CMake configuration for a remote project, including minimum CMake version requirement, Zephyr package dependency, and source file specification. The configuration requires CMake 3.20.0 or higher and includes the main.c source file from the parent directory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/sensor/multicore_temp/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n\nproject(remote)\ntarget_sources(app PRIVATE ../src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Reference Links\nDESCRIPTION: Collection of reference link definitions in ReStructuredText format, organized by source/category including NIST standards, CMake docs, EnOcean products, Edge Impulse resources, Memfault documentation, nRF Cloud services, and CSA specifications.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/links.txt#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _`NIST - ECDSA`: https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/Digital-Signatures#ecdsa2vs\n\n.. _`The EAX Mode of Operation`: https://csrc.nist.gov/csrc/media/projects/block-cipher-techniques/documents/bcm/proposed-modes/eax/eax-spec.pdf\n\n.. _`NIST SP 800-38A`: https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\n```\n\n----------------------------------------\n\nTITLE: Starting and Testing PPP Connection\nDESCRIPTION: Example showing how to start the PPP connection and verify its operation using various networking commands like ip, ping, and iperf3.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/PPP_linux.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo scripts/slm_start_ppp.sh\nWait modem to boot\nAttach CMUX channel to modem...\nConnect and wait for PPP link...\nsend (AT+CFUN=1^M)\nexpect (OK)\n\n\nOK\n-- got it\n\nsend ()\nexpect (#XPPP: 1,0)\n\n\n\n\n#XPPP: 1,0\n-- got it\n\n$ ip addr show ppp0\n7: ppp0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1464 qdisc fq_codel state UNKNOWN group default qlen 3\n   link/ppp\n   inet 10.139.130.66/32 scope global ppp0\n      valid_lft forever preferred_lft forever\n   inet6 2001:14bb:69b:50a3:ade3:2fce:6cc:ba3c/64 scope global temporary dynamic\n      valid_lft 604720sec preferred_lft 85857sec\n   inet6 2001:14bb:69b:50a3:40f9:1c4e:7231:638b/64 scope global dynamic mngtmpaddr\n      valid_lft forever preferred_lft forever\n   inet6 fe80::40f9:1c4e:7231:638b peer fe80::3c29:6401/128 scope link\n      valid_lft forever preferred_lft forever\n\n$ ping -I ppp0 8.8.8.8 -c5\nPING 8.8.8.8 (8.8.8.8) from 10.139.130.66 ppp0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=60 time=320 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=60 time=97.6 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=60 time=140 ms\n64 bytes from 8.8.8.8: icmp_seq=4 ttl=60 time=132 ms\n64 bytes from 8.8.8.8: icmp_seq=5 ttl=60 time=145 ms\n\n--- 8.8.8.8 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4007ms\nrtt min/avg/max/mdev = 97.610/166.802/319.778/78.251 ms\n\n$ iperf3 -c ping.online.net%ppp0 -p 5202\nConnecting to host ping.online.net, port 5202\n[  5] local 10.139.130.66 port 54244 connected to 51.158.1.21 port 5202\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  0.00 Bytes  0.00 bits/sec    1   17.6 KBytes\n[  5]   1.00-2.00   sec  0.00 Bytes  0.00 bits/sec    0   25.8 KBytes\n[  5]   2.00-3.00   sec  0.00 Bytes  0.00 bits/sec    0   32.5 KBytes\n[  5]   3.00-4.00   sec   128 KBytes  1.05 Mbits/sec    0   35.2 KBytes\n[  5]   4.00-5.00   sec  0.00 Bytes  0.00 bits/sec    0   35.2 KBytes\n[  5]   5.00-6.00   sec  0.00 Bytes  0.00 bits/sec    0   35.2 KBytes\n[  5]   6.00-7.00   sec  0.00 Bytes  0.00 bits/sec    0   35.2 KBytes\n[  5]   7.00-8.00   sec  0.00 Bytes  0.00 bits/sec    0   35.2 KBytes\n[  5]   8.00-9.00   sec  0.00 Bytes  0.00 bits/sec    0   35.2 KBytes\n[  5]   9.00-10.00  sec  0.00 Bytes  0.00 bits/sec    0   35.2 KBytes\n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   128 KBytes   105 Kbits/sec    1             sender\n[  5]   0.00-11.58  sec  89.5 KBytes  63.3 Kbits/sec                  receiver\n\n$ sudo scripts/slm_stop_ppp.sh\nsend (AT+CFUN=0^M)\nexpect (#XPPP: 0,0)\n\n\nOK\n\n\n\n#XPPP: 0,0\n-- got it\n```\n\n----------------------------------------\n\nTITLE: Sample Console Output\nDESCRIPTION: Example console output showing the initialization and operation of the sensor manager sample, including event management and sensor data aggregation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/caf_sensor_manager/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n*** Booting Zephyr OS build v3.0.99-ncs1-2759-g07737b0b09e7  ***\n[00:00:00.257,232] <inf> main: Event manager initialized\n[00:00:00.258,239] <inf> event_proxy_init: Event proxy remote added\n[00:00:00.259,948] <inf> event_proxy_init: Event proxy sensor_data_aggregator_event registered\n[00:00:00.260,009] <inf> event_proxy_init: Event manager proxy started\n[00:00:00.260,284] <inf> event_proxy_init: All remotes ready\n[00:00:00.260,345] <inf> app_event_manager: e:module_state_event module:main state:READY\n[00:00:00.260,742] <inf> app_event_manager: e:sensor_data_aggregator_event Send sensor buffer desc address: 0x100e28a\n[00:00:00.260,894] <inf> app_event_manager: e: sensor_data_aggregator_release_buffer_event\n[00:00:02.260,620] <inf> app_event_manager: e:sensor_data_aggregator_event Send sensor buffer desc address: 0x100e28a\n[00:00:02.260,864] <inf> app_event_manager: e: sensor_data_aggregator_release_buffer_event\n```\n\n----------------------------------------\n\nTITLE: LED State Configuration Structure Definition in C\nDESCRIPTION: Configuration structure that maps LED IDs to system states and defines LED effects for different Bluetooth peer states.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/led_state.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct led_map {\n    led_id_t led_id;\n    size_t led_position;\n};\n\nstruct led_effect led_system_state_effect[LED_SYSTEM_STATE_COUNT];\nstruct led_effect led_peer_state_effect[CONFIG_BT_MAX_PAIRED][LED_PEER_STATE_COUNT];\n```\n\n----------------------------------------\n\nTITLE: HTTPS GET request (TLS with server auth, Wi-Fi)\nDESCRIPTION: Sends an HTTPS GET request to retrieve the state of LED 1 using TLS with server authentication. It includes the `--verify` flag to specify the server certificate for verification.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/net/http_server/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n\"https GET https://httpserver.local:443/led/1 --verify server_certificate.pem\"\n```\n\n----------------------------------------\n\nTITLE: Mocking Dependencies for nRF Provisioning Tests\nDESCRIPTION: Uses cmock to create mock implementations of various dependencies, including date_time, lte_lc, modem_key_mgmt, and others.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_provisioning/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/date_time.h)\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/modem/lte_lc.h\n\tFUNC_EXCLUDE \".*(lte_lc_rai_req|lte_lc_rai_param_set)\"\n\tWORD_EXCLUDE \"__deprecated\")\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/modem/modem_key_mgmt.h)\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/modem/modem_attest_token.h)\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/modem/modem_info.h\n\tWORD_EXCLUDE \"__deprecated\")\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/modem/nrf_modem_lib.h)\ncmock_handle(${ZEPHYR_BASE}/include/zephyr/settings/settings.h)\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_provisioning/include/nrf_provisioning_at.h)\ncmock_handle(${ZEPHYR_NRF_MODULE_DIR}/include/net/rest_client.h)\ncmock_handle(include/nrf_modem_at.h)\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration for nRF Modem Library\nDESCRIPTION: This snippet conditionally configures properties for certain source files if the `CONFIG_NRF_MODEM_LIB` configuration option is enabled. This option likely enables the nRF Modem Library, and the properties set here are related to using header files only.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/client_id/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"if (CONFIG_NRF_MODEM_LIB)\n\nset_source_files_properties(\n\t${ZEPHYR_NRF_MODULE_DIR}/lib/nrf_modem_lib/nrf_modem_lib.c\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\n\nset_source_files_properties(\n\t${NRFXLIB_MODEM_DIR}/include/nrf_modem_at.h\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\n\nset_source_files_properties(\n\t${ZEPHYR_NRF_MODULE_DIR}/lib/modem_jwt/modem_jwt.c\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\n\nset_source_files_properties(\n\t${ZEPHYR_NRF_MODULE_DIR}/lib/hw_id/hw_id.c\n\tPROPERTIES HEADER_FILE_ONLY ON\n)\n\n\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Alternative AWS IoT Jobs Document with Single URL\nDESCRIPTION: Simplified JSON document format for AWS IoT Jobs that uses a single URL parameter, suitable for presigned AWS S3 URLs.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/networking/aws_fota.rst#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"app_fw_update\",\n  \"fwversion\": \"v1.0.2\",\n  \"size\": 181124,\n  \"location\": {\n    \"url\": \"*url*\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AT Parser in C\nDESCRIPTION: Demonstrates how to initialize the new AT Parser, replacing the old AT Command Parser initialization.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_2.8.rst#2025-04-21_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nat_parser_init(&at_parser, at_string);\n```\n\n----------------------------------------\n\nTITLE: Adding Test Event Allocator Source in CMake\nDESCRIPTION: Adds the test_event_allocator.c source file from the current directory to the application build sources using CMake's target_sources command.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/app_event_manager/src/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/test_event_allocator.c)\n```\n\n----------------------------------------\n\nTITLE: Binding UDP Port via CLI\nDESCRIPTION: This command binds a UDP port to a specified IPv6 address, allowing the device to listen for incoming UDP datagrams. The example shows binding port 5555 to the address fe80:0:0:0:6c26:956a:813:1e33.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf_rpc/protocols_serialization/server/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nuart:~$ net udp bind fe80:0:0:0:6c26:956a:813:1e33 5555\n```\n\n----------------------------------------\n\nTITLE: Configuring nRF21540 FEM Output Power in Kconfig\nDESCRIPTION: Kconfig options for setting the gain and enabling runtime PA gain control for the nRF21540 FEM.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/fem/fem_nRF21540_optional_properties.rst#2025-04-21_snippet_2\n\nLANGUAGE: kconfig\nCODE:\n```\nCONFIG_MPSL_FEM_NRF21540_TX_GAIN_DB=10\nCONFIG_MPSL_FEM_NRF21540_TX_GAIN_DB_POUTA=20\nCONFIG_MPSL_FEM_NRF21540_TX_GAIN_DB_POUTB=10\nCONFIG_MPSL_FEM_NRF21540_RUNTIME_PA_GAIN_CONTROL=y\n```\n\n----------------------------------------\n\nTITLE: Controller Time Management Implementation in C\nDESCRIPTION: Manages controller clock timestamps for SDU transmission and reception. Includes device-specific implementations for nRF52, nRF53 and nRF54 series.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/bluetooth/iso_time_sync/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n// controller_time_<device>.c\n// Handles controller clock timestamps\n// Implements RTC/timer shadowing for nRF52/53\n// Uses GRTC for nRF54\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom AT Command in C\nDESCRIPTION: Demonstrates how to register a custom AT command 'MYCOMMAND' with a callback function using the AT_CMD_CUSTOM macro.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/at_cmd_custom.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/* Callback for +MYCOMMAND calls */\nAT_CMD_CUSTOM(my_command_filter, \"AT+MYCOMMAND\", my_command_callback);\n\nint my_command_callback(char *buf, size_t len, char *at_cmd);\n{\n\tprintf(\"Callback for %s\", at_cmd);\n\treturn at_cmd_custom_respond(buf, len, \"OK\\r\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Work Handler Implementation - C\nDESCRIPTION: Implementation using k_work_delayable to generate button press sequences with configurable intervals between events.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/buttons_sim.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct k_work_delayable;\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Cache\nDESCRIPTION: Python script that creates a cache file after documentation is built to speed up future builds. The script is executed during the docbuild workflow.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/dev_model_and_contributions/documentation/doc_build_process.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndoc/_scripts/cache_create.py\n```\n\n----------------------------------------\n\nTITLE: Defining Devices using Devicetree in C\nDESCRIPTION: New macros introduced in Zephyr for defining devices using information from devicetree nodes directly. These macros allow referencing structures of such devices at build time.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/releases/release-notes-1.5.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nDEVICE_DT_DEFINE(...)\nDEVICE_DT_INST_DEFINE(...)\n```\n\n----------------------------------------\n\nTITLE: UDP Send Command Syntax\nDESCRIPTION: Syntax for the set command to send data over a UDP connection, with optional data parameter.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/TCPUDP_AT_commands.rst#2025-04-21_snippet_18\n\nLANGUAGE: AT Commands\nCODE:\n```\n#XUDPSEND[=<data>]\n```\n\n----------------------------------------\n\nTITLE: Configuring NFC TNEP Library Build in CMake\nDESCRIPTION: Sets up the Zephyr library build configuration for NFC TNEP, conditionally including tag implementation, poller implementation, and connection handover components based on Kconfig options. Also adds linker script for tag functionality when enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/subsys/nfc/tnep/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nzephyr_library()\nzephyr_library_sources_ifdef(CONFIG_NFC_TNEP_TAG tag.c)\nzephyr_library_sources_ifdef(CONFIG_NFC_TNEP_POLLER poller.c)\n\nadd_subdirectory_ifdef(CONFIG_NFC_TNEP_CH ch)\n\nzephyr_linker_sources_ifdef(CONFIG_NFC_TNEP_TAG\n  SECTIONS\n  tag.ld\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for LC3 File Test in nRF5340 Audio Application\nDESCRIPTION: Sets up the CMake project for testing LC3 file functionality. It defines the minimum CMake version, finds the Zephyr package, sets the project name, and configures source files, compilation definitions, and include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/nrf5340_audio/lc3_file/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(test_lc3_file)\n\n# lc3_file source must be added manually as kconfigs and CMakeLists in nRF5340 audio application\n# is not available from here.\ntarget_sources(app\n\tPRIVATE\n\tsrc/main.c\n\t${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src/modules/lc3_file.c\n\t${ZEPHYR_NRF_MODULE_DIR}/tests/nrf5340_audio/fakes/sd_card/sd_card_fake.c\n\t${ZEPHYR_NRF_MODULE_DIR}/tests/nrf5340_audio/fakes/sd_card/lc3_file_data.c\n\t)\n\ntarget_compile_definitions(app PRIVATE CONFIG_MODULE_SD_CARD_LC3_FILE_LOG_LEVEL=3)\ntarget_include_directories(app PRIVATE\n\t${ZEPHYR_NRF_MODULE_DIR}/applications/nrf5340_audio/src\n\t${ZEPHYR_NRF_MODULE_DIR}/tests/nrf5340_audio/fakes)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for NIDD Project with Zephyr RTOS\nDESCRIPTION: Sets up the CMake build system for the NIDD project. It specifies the minimum CMake version, finds the Zephyr package, defines the project name, adds the main source file, and configures include directories.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nidd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(nidd)\n\n# NORDIC SDK APP START\ntarget_sources(app PRIVATE src/main.c)\n# NORDIC SDK APP END\n\nzephyr_include_directories(src)\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Set Handler Function\nDESCRIPTION: Example implementation of a configuration set handler function that processes different option IDs and their corresponding data.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/nrf_desktop/doc/config_channel.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstatic void config_set(const uint8_t opt_id, const uint8_t *data,\n                            const size_t size)\n{\n    switch (opt_id) {\n    case TEST_MODULE_OPT_FILTER_PARAM:\n        /* Handle the data received under the \"data\" pointer.\n         * Number of received bytes is described as \"size\".\n         */\n        if (size != sizeof(struct filter_parameters)) {\n            LOG_WRN(\"Invalid size\");\n        } else {\n            update_filter_params(data);\n        }\n    break;\n\n    case TEST_MODULE_OPT_PARAM_BLE:\n        /* Handle the data. */\n        ....\n    break;\n\n    /* Handlers for other option IDs. */\n    ....\n\n    default:\n        /* The option is not supported by the module. */\n        LOG_WRN(\"Unknown opt %\" PRIu8, opt_id);\n        break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Device Software Version with AT Command\nDESCRIPTION: AT command to configure the Software Version resource of the Device object. The version must be provided as a string in double quotes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/serial_lte_modem/doc/CARRIER_AT_commands.rst#2025-04-21_snippet_10\n\nLANGUAGE: AT Commands\nCODE:\n```\nAT#XCARRIERCFG=\"software_version\"[,<version>]\n```\n\n----------------------------------------\n\nTITLE: Building Zephyr Wi-Fi sample for nRF7002 EK with nRF5340 DK\nDESCRIPTION: This command builds a Zephyr networking sample for the nRF7002 EK with nRF5340 DK using the nrf5340dk/nrf5340/cpuapp board target, the wifi-ipv4 snippet configuration, and additional CMake options for the nRF7002 EK shield.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/samples/wifi_zephyr.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwest build -b nrf5340dk/nrf5340/cpuapp -S wifi-ipv4 -- -DSHIELD=nrf7002ek -DSB_CONFIG_WIFI_NRF70=y\n```\n\n----------------------------------------\n\nTITLE: Including Necessary Headers for MyBtServiceDataProvider in C++\nDESCRIPTION: Include the required header files and namespaces in the my_bt_service_data_provider.cpp file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/applications/matter_bridge/doc/adding_ble_bridged_device_service.rst#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include \"my_bt_service_data_provider.h\"\n\n#include <bluetooth/gatt_dm.h>\n#include <zephyr/bluetooth/conn.h>\n#include <zephyr/bluetooth/gatt.h>\n\nusing namespace ::chip;\nusing namespace ::chip::app;\nusing namespace Nrf;\n```\n\n----------------------------------------\n\nTITLE: Console Output for Wi-Fi Credential Provisioning and Connection\nDESCRIPTION: Console log showing the device receiving Wi-Fi credentials through the HTTP API, processing them, connecting to the specified network, and completing the provisioning process.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/provisioning/softap/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n[00:00:21.947,784] <inf> softap_wifi_provision_sample: Client connected\n[00:00:26.947,174] <dbg> softap_wifi_provision: process_tcp: [15] Connection from 192.168.0.2 accepted\n[00:00:27.018,859] <dbg> softap_wifi_provision: on_message_begin: on_message_begin, method: 1\n[00:00:27.027,770] <dbg> softap_wifi_provision: on_url: on_url, method: 1\n[00:00:27.034,881] <dbg> softap_wifi_provision: on_url: > /prov/networks\n[00:00:27.042,053] <dbg> softap_wifi_provision: on_headers_complete: on_headers_complete, method: GET\n[00:00:27.051,574] <dbg> softap_wifi_provision: on_message_complete: on_message_complete, method: 1\n[00:00:27.062,408] <dbg> softap_wifi_provision: process_tcp: Closing listening socket: 15\n[00:00:37.169,372] <dbg> softap_wifi_provision: process_tcp: [15] Connection from 192.168.0.2 accepted\n[00:00:37.243,316] <dbg> softap_wifi_provision: on_message_begin: on_message_begin, method: 3\n[00:00:37.252,197] <dbg> softap_wifi_provision: on_url: on_url, method: 3\n[00:00:37.259,338] <dbg> softap_wifi_provision: on_url: > /prov/configure\n[00:00:37.266,632] <dbg> softap_wifi_provision: on_headers_complete: on_headers_complete, method: POST\n[00:00:37.281,585] <dbg> softap_wifi_provision: on_body: on_body: 3\n[00:00:37.288,177] <dbg> softap_wifi_provision: on_body: on_body length: 38\n[00:00:37.295,532] <dbg> softap_wifi_provision: on_body: on_body: 3\n[00:00:37.302,124] <dbg> softap_wifi_provision: on_body: on_body length: 47\n[00:00:37.309,448] <dbg> softap_wifi_provision: on_message_complete: on_message_complete, method: 3\n[00:00:37.318,847] <dbg> softap_wifi_provision: parse_and_store_credentials: HTTP body\n                                              0a 1c 0a 0c 63 69 61 2d  61 73 75 73 67 6f 6c 64 |....cia- asusgold\n                                              12 06 c8 7f 54 de 23 b8  18 01 20 01 28 04 12 0f |....T.#. .. .(...\n                                              74 68 69 6e 67 79 77 6f  72 6c 64 32 30 32 34    |xxxxxxxx xxxxxxx\n[00:00:37.357,513] <dbg> softap_wifi_provision: parse_and_store_credentials: Received Wi-Fi credentials: ssid: cia-asusgold, bssid: C8:7F:54:DE:23:B8, passphrase: xxxxxx, sectype: 4, channel: 1, band: 1\n[00:00:37.468,536] <inf> softap_wifi_provision_sample: Wi-Fi credentials received\n[00:00:37.477,172] <dbg> softap_wifi_provision: process_tcp: Closing listening socket: 15\n[00:00:37.490,356] <dbg> softap_wifi_provision: process_tcp4: Credentials stored, stop processing of incoming requests\n[00:00:37.501,342] <dbg> softap_wifi_provision: process_tcp4: Leaving server socket open to keep mDNS SD functioning\n[00:00:37.512,695] <dbg> softap_wifi_provision: provisioning_exit: Credentials received, cleaning up...\n[00:00:38.534,362] <dbg> softap_wifi_provision: net_mgmt_wifi_event_handler: NET_EVENT_WIFI_AP_STA_DISCONNECTED\n[00:00:38.544,769] <dbg> softap_wifi_provision: print_mac: Client STA disconnected, MAC: 00:00:91:9E:31:EA\n[00:00:38.554,718] <inf> softap_wifi_provision_sample: Client disconnected\n[00:00:38.718,566] <dbg> softap_wifi_provision: net_mgmt_wifi_event_handler: NET_EVENT_WIFI_AP_DISABLE_RESULT\n[00:00:38.728,881] <inf> softap_wifi_provision_sample: Provisioning completed\n[00:00:40.377,868] <inf> wifi_mgmt_ext: Connection requested\n[00:00:40.389,312] <inf> softap_wifi_provision_sample: PSM disabled\n[00:00:40.819,732] <inf> softap_wifi_provision_sample: Network connected\n[00:02:40.399,627] <inf> softap_wifi_provision_sample: PSM enabled\n```\n\n----------------------------------------\n\nTITLE: Finding the Zephyr package\nDESCRIPTION: Finds the Zephyr build system package, which is required for building Zephyr-based applications. The Zephyr base environment variable is used to locate the Zephyr installation.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_flpr/remote/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure IoT Hub DPS Test Build in CMake\nDESCRIPTION: Sets up a CMake project for testing Azure IoT Hub DPS functionality. Includes required source files from Azure SDK for C (core and IoT libraries), mock MQTT helper, and configures test-specific compilation options including DPS hostname, scope ID, and buffer sizes.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/azure_iot_hub/dps/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(azure_iot_hub_dps_test)\n\n# Generate runner for the test\ntest_runner_generate(src/azure_iot_hub_dps_test.c)\n\n# Create mock\ncmock_handle(${NRF_DIR}/include/net/mqtt_helper.h)\n\n# Add Unit Under Test source files\ntarget_sources(app PRIVATE\n        ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/azure_iot_hub/src/azure_iot_hub_dps.c\n\n\t# Azure SDK for C - CORE lib\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_context.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_json_reader.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_json_token.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_json_writer.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_log.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_precondition.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/core/az_span.c\n\n\t# Azure SDK for C - IoT lib\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_provisioning_client.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_common.c\n\t${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/src/azure/iot/az_iot_provisioning_client.c\n)\n\n# Add test source file\ntarget_sources(app PRIVATE src/azure_iot_hub_dps_test.c)\n\n# Include paths\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/include/net/)\ntarget_include_directories(app PRIVATE ${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/azure_iot_hub/include/)\ntarget_include_directories(app PRIVATE ${ZEPHYR_AZURE_SDK_FOR_C_MODULE_DIR}/sdk/inc/)\n\n# Options that cannot be passed through Kconfig fragments.\ntarget_compile_options(app PRIVATE\n\t-DCONFIG_AZURE_IOT_HUB_DPS_HOSTNAME=\"global.azure-devices-provisioning.net\"\n\t-DCONFIG_AZURE_IOT_HUB_DPS_ID_SCOPE=\"TEST-ID-SCOPE\"\n\t-DCONFIG_AZURE_IOT_HUB_DPS_REG_ID=\"test-device-registration-id\"\n\t-DCONFIG_AZURE_IOT_HUB_DPS_TOPIC_BUFFER_SIZE=256\n\t-DCONFIG_AZURE_IOT_HUB_DPS_OPERATION_ID_BUFFER_SIZE=68\n\t-DCONFIG_AZURE_IOT_HUB_DPS_TIMEOUT_SEC=90\n\t-DCONFIG_AZURE_IOT_HUB_DPS_DEVICE_ID_MAX_LEN=128\n\t-DCONFIG_AZURE_IOT_HUB_DPS_HOSTNAME_MAX_LEN=64\n\t-DCONFIG_MQTT_HELPER_SEC_TAG=1\n\t-DCONFIG_MQTT_HELPER_PORT=8883\n\t-DCONFIG_AZURE_IOT_HUB_DPS_USER_NAME_BUFFER_SIZE=128\n)\n```\n\n----------------------------------------\n\nTITLE: Logging Turn On Action Console Output\nDESCRIPTION: Console output showing the logging messages when the light bulb turn on action is initiated and completed.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/matter/light_bulb/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nI: Turn On Action has been initiated\nI: Turn On Action has been completed\n```\n\n----------------------------------------\n\nTITLE: Flashing Application Core Image\nDESCRIPTION: Command to flash the application core image without erasing the entire chip, which is important when working with multi-core setups to preserve other core's programming.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/app_dev/device_guides/nrf54l/building_nrf54l.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nwest flash\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Finding Zephyr\nDESCRIPTION: This snippet sets the minimum required version for CMake and attempts to find the Zephyr package. The presence of the Zephyr package is essential for building applications using the Nordic SDK, ensuring proper configuration and availability of necessary libraries.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_pwm_led/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\n```\n\n----------------------------------------\n\nTITLE: Nordic License Header Comment Block\nDESCRIPTION: Standard copyright and license header used in Nordic Semiconductor codebase. Includes SPDX identifier and west ncs-sbom tool directive for .a library files.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/lib/bin/lwm2m_carrier/license.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/*\n * Copyright (c) Nordic Semiconductor ASA\n *\n * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause\n *\n * The following tag tells the \"west ncs-sbom\" tool which files are covered\n * by the license information above.\n * NCS-SBOM-Apply-To-File: ./lib/**/*.a\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Zephyr in CMake\nDESCRIPTION: This CMake snippet sets the minimum required version and includes Zephyr as a necessary package, hinting to its location by the ZEPHYR_BASE environment variable. It also defines a project named 'remote' and specifies the main source file location. Dependencies include having Zephyr installed and the ZEPHYR_BASE environment variable properly set.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/benchmarks/multicore/idle_pwm_led/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(remote)\n\ntarget_sources(app PRIVATE ../src/main.c)\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure for NFC NDEF Library\nDESCRIPTION: RST markup defining the documentation structure for the NFC NDEF library, including links to related samples and user guides.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/nfc/ndef/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _lib_nfc_ndef:\\n\\nNFC Data Exchange Format (NDEF)\\n###############################\\n\\nNFC communication uses NFC Data Exchange Format (NDEF) messages to exchange data.\\n\\nSee the :ref:`ug_nfc` user guide for more information about :ref:`ug_nfc_ndef`.\\n\\n.. note::\\n   You need additional hardware for reading NFC tags.\\n\\n.. toctree:::\\n   :maxdepth: 1\\n   :glob:\\n   :caption: Subpages:\\n\\n   *\n```\n\n----------------------------------------\n\nTITLE: Enable Nordic QSPI NOR flash driver\nDESCRIPTION: This Kconfig option enables the flash driver for QSPI NOR flash modules, typically used for external flash. This is necessary when the secondary slot for firmware updates is placed on external flash memory.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/matter/end_product/bootloader.rst#2025-04-21_snippet_3\n\nLANGUAGE: Kconfig\nCODE:\n```\nset the :kconfig:option:`CONFIG_NORDIC_QSPI_NOR` Kconfig option.\n```\n\n----------------------------------------\n\nTITLE: Using the Updated PWM API in C\nDESCRIPTION: Code example demonstrating how to use the new PWM API with the updated devicetree specifications. It shows the recommended practice of using PWM_DT_SPEC_GET macro and pwm_set_dt/pwm_set_pulse_dt functions.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/releases_and_maturity/migration/migration_guide_1.x_to_2.x.rst#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define PWM_LED0_NODE DT_NODELABEL(pwm_led0)\n#define PWM_LED1_NODE DT_NODELABEL(pwm_led1)\nstatic const struct pwm_dt_spec led0_spec = PWM_DT_SPEC_GET(PWM_LED0_NODE);\nstatic const struct pwm_dt_spec led1_spec = PWM_DT_SPEC_GET(PWM_LED1_NODE);\n/* ... */\n/* Use 10 ms period for LED0 to override the default 20 ms from devicetree. */\nret = pwm_set_dt(&led0_spec, PWM_MSEC(10), PWM_USEC(pulse_us));\n/* ... */\nret = pwm_set_pulse_dt(&led1_spec, PWM_USEC(pulse_us));\n```\n\n----------------------------------------\n\nTITLE: Setting Battery Low Level Threshold\nDESCRIPTION: Function to set the battery voltage low level threshold in mV. Notifications are received when voltage drops below this level during LTE connection.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/libraries/modem/modem_battery.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nmodem_battery_low_level_set(voltage_mv);\n```\n\n----------------------------------------\n\nTITLE: State transitions structure definition\nDESCRIPTION: This code snippet shows the structure definition for `bt_mesh_model_transition` which is used to specify the time it takes for a server to change a state to a new value in Bluetooth Mesh models.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/doc/nrf/protocols/bt/bt_mesh/overview/models.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\":c:struct:`bt_mesh_model_transition`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Semiconductor Project\nDESCRIPTION: This CMake snippet sets up the build environment for a Nordic Semiconductor project. It specifies the minimum CMake version, finds the Zephyr package, defines the project, and configures source files and include directories for the application.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/modules/mcuboot/external_flash/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13.1)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(NONE)\n\nFILE(GLOB app_sources src/*.c)\ntarget_sources(app PRIVATE ${app_sources})\ntarget_include_directories(app PRIVATE .)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Nordic Multicore Temperature Project\nDESCRIPTION: Configures CMake build settings for a multicore temperature project using the Nordic SDK and Zephyr RTOS. Sets minimum CMake version to 3.20.0, locates Zephyr package, and adds main.c as the primary source file.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/drivers/sensor/multicore_temp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(multicore_temp)\n\ntarget_sources(app PRIVATE src/main.c)\n```\n\n----------------------------------------\n\nTITLE: Enabling Temperature Tracking in Kconfig\nDESCRIPTION: Enables tracking and reporting of temperature data to nRF Cloud. Defaults to enabled.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/cellular/nrf_cloud_multi_service/README.rst#2025-04-21_snippet_21\n\nLANGUAGE: Kconfig\nCODE:\n```\nCONFIG_TEMP_TRACKING\n```\n\n----------------------------------------\n\nTITLE: Python Command for Generating Protobuf Structures\nDESCRIPTION: Command to generate Python structures from the protobuf schema, which is needed for the Python provisioning script to communicate with the device.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/wifi/provisioning/softap/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncd <sample-dir>/scripts\nprotoc --proto_path=<nrf-sdk-dir>/subsys/net/lib/softap_wifi_provision/proto --python_out=. common.proto\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet uses the `target_include_directories` command to add include directories to the `app` target. These directories contain header files required for compiling the source files. The `PRIVATE` keyword means that these include directories are only used when building the `app` target.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/tests/subsys/net/lib/nrf_cloud/client_id/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_include_directories(app\n\tPRIVATE\n\tsrc\n\t${ZEPHYR_NRF_MODULE_DIR}/subsys/net/lib/nrf_cloud/include\n\t${ZEPHYR_BASE}/subsys/testsuite/include\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake to build the project.  This ensures that the CMake version used is compatible with the project's build scripts and features.\nSOURCE: https://github.com/nrfconnect/sdk-nrf/blob/main/samples/nrf5340/netboot/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.20.0)\"\n```"
  }
]