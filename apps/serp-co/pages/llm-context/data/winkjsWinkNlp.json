[
  {
    "owner": "winkjs",
    "repo": "wink-nlp",
    "content": "TITLE: Initializing WinkNLP Basic Usage Example\nDESCRIPTION: Demonstrates basic setup and usage of WinkNLP including loading the package, initializing with an English language model, and performing common NLP operations like tokenization, sentence detection, and entity recognition. The example shows how to process text and use helper functions for property extraction and collection reduction.\nSOURCE: https://github.com/winkjs/wink-nlp/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Load wink-nlp package.\nconst winkNLP = require( 'wink-nlp' );\n// Load english language model.\nconst model = require( 'wink-eng-lite-web-model' );\n// Instantiate winkNLP.\nconst nlp = winkNLP( model );\n// Obtain \"its\" helper to extract item properties.\nconst its = nlp.its;\n// Obtain \"as\" reducer helper to reduce a collection.\nconst as = nlp.as;\n \n// NLP Code.\nconst text = 'Hello   WorldðŸŒŽ! How are you?';\nconst doc = nlp.readDoc( text );\n \nconsole.log( doc.out() );\n// -> Hello   WorldðŸŒŽ! How are you?\n \nconsole.log( doc.sentences().out() );\n// -> [ 'Hello   WorldðŸŒŽ!', 'How are you?' ]\n \nconsole.log( doc.entities().out( its.detail ) );\n// -> [ { value: 'ðŸŒŽ', type: 'EMOJI' } ]\n \nconsole.log( doc.tokens().out() );\n// -> [ 'Hello', 'World', 'ðŸŒŽ', '!', 'How', 'are', 'you', '?' ]\n \nconsole.log( doc.tokens().out( its.type, as.freqTable ) );\n// -> [ [ 'word', 5 ], [ 'punctuation', 2 ], [ 'emoji', 1 ] ]\n```\n\n----------------------------------------\n\nTITLE: Installing WinkNLP via NPM\nDESCRIPTION: Command to install the winkNLP package using npm package manager.\nSOURCE: https://github.com/winkjs/wink-nlp/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install wink-nlp --save\n```\n\n----------------------------------------\n\nTITLE: Installing WinkNLP Language Model\nDESCRIPTION: Command to install the language model for Node.js version 14 or 12 using Node.js command line.\nSOURCE: https://github.com/winkjs/wink-nlp/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode -e \"require('wink-nlp/models/install')\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for WinkNLP\nDESCRIPTION: TypeScript configuration settings required in tsconfig.json for using WinkNLP in TypeScript projects. Enables esModuleInterop and allowSyntheticDefaultImports options.\nSOURCE: https://github.com/winkjs/wink-nlp/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"compilerOptions\": {\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Commit Message Format Example for WinkNLP in Markdown\nDESCRIPTION: Demonstrates the required format for commit messages in the WinkNLP project, including type, scope, subject, body, and footer sections. This follows Angular's commit guidelines with specific formatting requirements.\nSOURCE: https://github.com/winkjs/wink-nlp/blob/master/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    <type>(<scope>): <subject>\n    <BLANK LINE>\n    <body>\n    <BLANK LINE>\n    <footer>\n```\n\n----------------------------------------\n\nTITLE: Markdown Feature Table Definition\nDESCRIPTION: A markdown table defining planned features for WinkNLP, including feature descriptions, complexity levels, and current implementation status.\nSOURCE: https://github.com/winkjs/wink-nlp/blob/master/ROADMAP.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|S. No.| Feature | Complexity |Status|\n|---|---|---|---|\n|01.|**Extractive Summarization**:<br/> Add `its.sentenceWiseImprotance` helper to extract sentence wise impotance from a document. This may be used for extractive summarization apart from other usage. While it should be language agnostic, but it should leverage loaded language model's capability to improve summarization.| Simple | [Completed](https://observablehq.com/@winkjs/how-to-visualize-key-sentences-in-a-document) |\n|02.|**Text Pre-processor**:<br/>Add a text preprocessing utility that provides options to (a) filter specific tokens based on their properties such as `pos`, `isStopWordFlag`, and `type`; (b) map entity type with a definable keyword; (c) add bigrams & trigrams and (d) inject sentiment. The API should follow winkNLP style and standards.|Medium|YTS|\n|03.|**Word Vectors Integration**:<br/>Add integration with various word vectors starting with GloVe. This should include compression/decompression for fast loading, helpers for token, sentence and document vector computation. |High|[Completed](https://github.com/winkjs/wink-nlp/releases/tag/2.0.0)|\n|04.|**Sub-word Tokenizer**:<br/>Add sub-word tokenization feature using techniques like Byte Pair Encoding (BPE) and/or WordPiece. The processing pipeline should allow choice of tokenizer.|Very High|YTS|\n|05.|**Compose Corpus**:<br/>Add a utility to produce training corpus using patterns and cartesian product.|Simple|YTS|\n|06.|**Keywords Extraction**:<br/>Add `its.keywords` helper to extract keywords/keyphrases from the text via `doc.out( its.keywords )`. While it should be language agnostic, but it should leverage loaded language model's capability to improve extraction.| Simple | YTS |\n|07.|**BM25 Vectorizer**:<br/>Add a utility to train and also vectorize text based on an already trained BM25 model. It will follow wink-nlp styled API. |Medium|[Completed](https://github.com/winkjs/wink-nlp/discussions/22)|\n|08.|**Constituency/Dependency Parser**:<br/>Add a constituency and/or dependency parser â€” details have to be worked out.|Very High|YTS|\n```\n\n----------------------------------------\n\nTITLE: Repetitive Verse Pattern in Text\nDESCRIPTION: A poetic or rhythmic pattern repeating 'Cuckoo' three times, appearing twice in the text passage to represent either actual cuckoo sounds or time markers.\nSOURCE: https://github.com/winkjs/wink-nlp/blob/master/benchmark/jj-ch13.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n     Cuckoo\n     Cuckoo\n     Cuckoo\n```"
  }
]