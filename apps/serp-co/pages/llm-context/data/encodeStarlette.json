[
  {
    "owner": "encode",
    "repo": "starlette",
    "content": "TITLE: Initializing Starlette Application with Routes and Lifespan\nDESCRIPTION: Shows the complete setup of a Starlette application including route handlers, websocket endpoint, static files mounting, and lifespan management. Demonstrates various response types and URL parameter handling.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/applications.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import asynccontextmanager\n\nfrom starlette.applications import Starlette\nfrom starlette.responses import PlainTextResponse\nfrom starlette.routing import Route, Mount, WebSocketRoute\nfrom starlette.staticfiles import StaticFiles\n\n\ndef homepage(request):\n    return PlainTextResponse('Hello, world!')\n\ndef user_me(request):\n    username = \"John Doe\"\n    return PlainTextResponse('Hello, %s!' % username)\n\ndef user(request):\n    username = request.path_params['username']\n    return PlainTextResponse('Hello, %s!' % username)\n\nasync def websocket_endpoint(websocket):\n    await websocket.accept()\n    await websocket.send_text('Hello, websocket!')\n    await websocket.close()\n\n@asynccontextmanager\nasync def lifespan(app):\n    print('Startup')\n    yield\n    print('Shutdown')\n\n\nroutes = [\n    Route('/', homepage),\n    Route('/user/me', user_me),\n    Route('/user/{username}', user),\n    WebSocketRoute('/ws', websocket_endpoint),\n    Mount('/static', StaticFiles(directory=\"static\")),\n]\n\napp = Starlette(debug=True, routes=routes, lifespan=lifespan)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Starlette Application\nDESCRIPTION: Example of a simple Starlette application with a single route returning a JSON response. This demonstrates the basic structure of a Starlette app.\nSOURCE: https://github.com/encode/starlette/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\n\n\nasync def homepage(request):\n    return JSONResponse({'hello': 'world'})\n\nroutes = [\n    Route(\"/\", endpoint=homepage)\n]\n\napp = Starlette(debug=True, routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Chat Application with Starlette in Python\nDESCRIPTION: Provides a complete example of a WebSocket chat application using Starlette. It includes both the server-side Python code and the client-side HTML/JavaScript. The example demonstrates routing, WebSocket handling, and serving HTML content.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/endpoints.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport uvicorn\nfrom starlette.applications import Starlette\nfrom starlette.endpoints import WebSocketEndpoint, HTTPEndpoint\nfrom starlette.responses import HTMLResponse\nfrom starlette.routing import Route, WebSocketRoute\n\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\"\n\nclass Homepage(HTTPEndpoint):\n    async def get(self, request):\n        return HTMLResponse(html)\n\nclass Echo(WebSocketEndpoint):\n    encoding = \"text\"\n\n    async def on_receive(self, websocket, data):\n        await websocket.send_text(f\"Message text was: {data}\")\n\nroutes = [\n    Route(\"/\", Homepage),\n    WebSocketRoute(\"/ws\", Echo)\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic HTTP Routing in Starlette\nDESCRIPTION: This snippet demonstrates how to set up basic HTTP routing in a Starlette application. It defines two routes ('/' and '/about') with their respective endpoint functions.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/routing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.responses import PlainTextResponse\nfrom starlette.routing import Route\n\n\nasync def homepage(request):\n    return PlainTextResponse(\"Homepage\")\n\nasync def about(request):\n    return PlainTextResponse(\"About\")\n\n\nroutes = [\n    Route(\"/\", endpoint=homepage),\n    Route(\"/about\", endpoint=about),\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware in Starlette Application (Python)\nDESCRIPTION: Demonstrates how to set up middleware in a Starlette application, specifically using TrustedHostMiddleware and HTTPSRedirectMiddleware. This example ensures that all requests include a specific host header and enforces HTTPS-only access.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.httpsredirect import HTTPSRedirectMiddleware\nfrom starlette.middleware.trustedhost import TrustedHostMiddleware\n\nroutes = ...\n\n# Ensure that all requests include an 'example.com' or\n# '*.example.com' host header, and strictly enforce https-only access.\nmiddleware = [\n    Middleware(\n        TrustedHostMiddleware,\n        allowed_hosts=['example.com', '*.example.com'],\n    ),\n    Middleware(HTTPSRedirectMiddleware)\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Initializing Starlette Configuration with Environment Variables\nDESCRIPTION: Demonstrates basic setup of Starlette configuration using environment variables and .env file. Shows how to configure debug mode, database URL, secret key, and allowed hosts.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/config.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom starlette.applications import Starlette\nfrom starlette.config import Config\nfrom starlette.datastructures import CommaSeparatedStrings, Secret\n\n# Config will be read from environment variables and/or \".env\" files.\nconfig = Config(\".env\")\n\nDEBUG = config('DEBUG', cast=bool, default=False)\nDATABASE_URL = config('DATABASE_URL')\nSECRET_KEY = config('SECRET_KEY', cast=Secret)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=CommaSeparatedStrings)\n\napp = Starlette(debug=DEBUG)\nengine = create_engine(DATABASE_URL)\n...\n```\n\n----------------------------------------\n\nTITLE: Global CORSMiddleware Enforcement in Starlette (Python)\nDESCRIPTION: Demonstrates how to wrap the entire Starlette application with CORSMiddleware to ensure CORS headers are applied even to error responses. This approach is recommended for consistent CORS behavior across all responses, including those generated by unhandled exceptions.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware.cors import CORSMiddleware\n\nimport uvicorn\n\napp = Starlette()\napp = CORSMiddleware(app=app, allow_origins=[\"*\"])\n\n# ... your routes and middleware configuration ...\n\nif __name__ == '__main__':\n    uvicorn.run(\n        app,\n        host='0.0.0.0',\n        port=8000\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication in Starlette\nDESCRIPTION: This snippet demonstrates how to implement a basic authentication backend in Starlette. It includes a custom BasicAuthBackend class, route definition, and middleware setup. The code handles base64 decoding of credentials and provides a simple user authentication mechanism.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.authentication import (\n    AuthCredentials, AuthenticationBackend, AuthenticationError, SimpleUser\n)\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.authentication import AuthenticationMiddleware\nfrom starlette.responses import PlainTextResponse\nfrom starlette.routing import Route\nimport base64\nimport binascii\n\n\nclass BasicAuthBackend(AuthenticationBackend):\n    async def authenticate(self, conn):\n        if \"Authorization\" not in conn.headers:\n            return\n\n        auth = conn.headers[\"Authorization\"]\n        try:\n            scheme, credentials = auth.split()\n            if scheme.lower() != 'basic':\n                return\n            decoded = base64.b64decode(credentials).decode(\"ascii\")\n        except (ValueError, UnicodeDecodeError, binascii.Error) as exc:\n            raise AuthenticationError('Invalid basic auth credentials')\n\n        username, _, password = decoded.partition(\":\")\n        # TODO: You'd want to verify the username and password here.\n        return AuthCredentials([\"authenticated\"]), SimpleUser(username)\n\n\nasync def homepage(request):\n    if request.user.is_authenticated:\n        return PlainTextResponse('Hello, ' + request.user.display_name)\n    return PlainTextResponse('Hello, you')\n\nroutes = [\n    Route(\"/\", endpoint=homepage)\n]\n\nmiddleware = [\n    Middleware(AuthenticationMiddleware, backend=BasicAuthBackend())\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Installing Starlette and ASGI Server with pip\nDESCRIPTION: Commands to install Starlette and the Uvicorn ASGI server using pip. These are the basic requirements to get started with Starlette.\nSOURCE: https://github.com/encode/starlette/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install starlette\n$ pip install uvicorn\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Handlers in Starlette (Python)\nDESCRIPTION: This snippet demonstrates how to set up custom exception handlers for 404 and 500 errors in a Starlette application. It includes defining handler functions and registering them with the Starlette instance.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.responses import HTMLResponse\n\n\nHTML_404_PAGE = ...\nHTML_500_PAGE = ...\n\n\nasync def not_found(request: Request, exc: HTTPException):\n    return HTMLResponse(content=HTML_404_PAGE, status_code=exc.status_code)\n\nasync def server_error(request: Request, exc: HTTPException):\n    return HTMLResponse(content=HTML_500_PAGE, status_code=exc.status_code)\n\n\nexception_handlers = {\n    404: not_found,\n    500: server_error\n}\n\napp = Starlette(routes=routes, exception_handlers=exception_handlers)\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocketEndpoint in Python\nDESCRIPTION: Demonstrates the implementation of a WebSocketEndpoint class. This example shows how to handle WebSocket connections, receive data, and send responses using the 'bytes' encoding.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/endpoints.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.endpoints import WebSocketEndpoint\n\n\nclass App(WebSocketEndpoint):\n    encoding = 'bytes'\n\n    async def on_connect(self, websocket):\n        await websocket.accept()\n\n    async def on_receive(self, websocket, data):\n        await websocket.send_bytes(b\"Message: \" + data)\n\n    async def on_disconnect(self, websocket, close_code):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Database Transaction with Context Manager\nDESCRIPTION: Example of using database transactions with a context manager in Starlette endpoints\nSOURCE: https://github.com/encode/starlette/blob/master/docs/database.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def populate_note(request):\n    async with database.transaction():\n        # This database insert occurs within a transaction.\n        # It will be rolled back by the `RuntimeError`.\n        query = notes.insert().values(text=\"you won't see me\", completed=True)\n        await request.database.execute(query)\n        raise RuntimeError()\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal ASGI Application with Starlette\nDESCRIPTION: Example of using Starlette components to create a minimal ASGI application that responds with plain text. This demonstrates Starlette's use as an ASGI toolkit.\nSOURCE: https://github.com/encode/starlette/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import PlainTextResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = PlainTextResponse('Hello, world!')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Configuring SessionMiddleware in Starlette (Python)\nDESCRIPTION: Illustrates how to set up SessionMiddleware in a Starlette application. This middleware adds signed cookie-based HTTP sessions, with options for configuring session expiry, security settings, and cookie attributes.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.sessions import SessionMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(SessionMiddleware, secret_key=..., https_only=True)\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPEndpoint as ASGI Application in Python\nDESCRIPTION: Demonstrates how to use the HTTPEndpoint class as an ASGI application to handle HTTP GET requests. The example shows a simple implementation that returns a plain text response.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/endpoints.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import PlainTextResponse\nfrom starlette.endpoints import HTTPEndpoint\n\n\nclass App(HTTPEndpoint):\n    async def get(self, request):\n        return PlainTextResponse(f\"Hello, world!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Middleware with BaseHTTPMiddleware\nDESCRIPTION: Demonstrates how to create a custom middleware class using BaseHTTPMiddleware. This example adds a custom header to the response.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\n\nclass CustomHeaderMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request, call_next):\n        response = await call_next(request)\n        response.headers['Custom'] = 'Example'\n        return response\n\nroutes = ...\n\nmiddleware = [\n    Middleware(CustomHeaderMiddleware)\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Submounting Routes in Starlette\nDESCRIPTION: This snippet demonstrates how to submount routes in Starlette. It shows how to group routes under a common path prefix and how to include sub-applications within a Starlette application.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/routing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nroutes = [\n    Route('/', homepage),\n    Mount('/users', routes=[\n        Route('/', users, methods=['GET', 'POST']),\n        Route('/{username}', user),\n    ])\n]\n\n# This is a standalone static files server:\napp = StaticFiles(directory=\"static\")\n\n# This is a static files server mounted within a Starlette application,\n# underneath the \"/static\" path.\nroutes = [\n    ...\n    Mount(\"/static\", app=StaticFiles(directory=\"static\"), name=\"static\")\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Initializing Starlette Application with Schema Generation\nDESCRIPTION: Sets up a basic Starlette application with schema generation support. Defines routes for user operations and schema endpoint, using docstrings to specify API responses.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/schemas.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route\nfrom starlette.schemas import SchemaGenerator\n\n\nschemas = SchemaGenerator(\n    {\"openapi\": \"3.0.0\", \"info\": {\"title\": \"Example API\", \"version\": \"1.0\"}}\n)\n\ndef list_users(request):\n    \"\"\"\n    responses:\n      200:\n        description: A list of users.\n        examples:\n          [{\"username\": \"tom\"}, {\"username\": \"lucy\"}]\n    \"\"\"\n    raise NotImplementedError()\n\n\ndef create_user(request):\n    \"\"\"\n    responses:\n      200:\n        description: A user.\n        examples:\n          {\"username\": \"tom\"}\n    \"\"\"\n    raise NotImplementedError()\n\n\ndef openapi_schema(request):\n    return schemas.OpenAPIResponse(request=request)\n\n\nroutes = [\n    Route(\"/users\", endpoint=list_users, methods=[\"GET\"]),\n    Route(\"/users\", endpoint=create_user, methods=[\"POST\"]),\n    Route(\"/schema\", endpoint=openapi_schema, include_in_schema=False)\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Complete Starlette Database Application Setup\nDESCRIPTION: Main application code demonstrating database table definitions, connection management, and API endpoints for a notes application\nSOURCE: https://github.com/encode/starlette/blob/master/docs/database.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\n\nimport databases\nimport sqlalchemy\nfrom starlette.applications import Starlette\nfrom starlette.config import Config\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\n\n\n# Configuration from environment variables or '.env' file.\nconfig = Config('.env')\nDATABASE_URL = config('DATABASE_URL')\n\n\n# Database table definitions.\nmetadata = sqlalchemy.MetaData()\n\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n\ndatabase = databases.Database(DATABASE_URL)\n\n@contextlib.asynccontextmanager\nasync def lifespan(app):\n    await database.connect()\n    yield\n    await database.disconnect()\n\n# Main application code.\nasync def list_notes(request):\n    query = notes.select()\n    results = await database.fetch_all(query)\n    content = [\n        {\n            \"text\": result[\"text\"],\n            \"completed\": result[\"completed\"]\n        }\n        for result in results\n    ]\n    return JSONResponse(content)\n\nasync def add_note(request):\n    data = await request.json()\n    query = notes.insert().values(\n       text=data[\"text\"],\n       completed=data[\"completed\"]\n    )\n    await database.execute(query)\n    return JSONResponse({\n        \"text\": data[\"text\"],\n        \"completed\": data[\"completed\"]\n    })\n\nroutes = [\n    Route(\"/notes\", endpoint=list_notes, methods=[\"GET\"]),\n    Route(\"/notes\", endpoint=add_note, methods=[\"POST\"]),\n]\n\napp = Starlette(\n    routes=routes,\n    lifespan=lifespan,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Background Tasks in Starlette\nDESCRIPTION: Example of using BackgroundTasks to perform multiple background operations after sending an HTTP response. The code shows how to add multiple tasks that execute in order after the response is sent to the client.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/background.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\nfrom starlette.background import BackgroundTasks\n\nasync def signup(request):\n    data = await request.json()\n    username = data['username']\n    email = data['email']\n    tasks = BackgroundTasks()\n    tasks.add_task(send_welcome_email, to_address=email)\n    tasks.add_task(send_admin_notification, username=username)\n    message = {'status': 'Signup successful'}\n    return JSONResponse(message, background=tasks)\n\nasync def send_welcome_email(to_address):\n    ...\n\nasync def send_admin_notification(username):\n    ...\n\nroutes = [\n    Route('/user/signup', endpoint=signup, methods=['POST'])\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Using Permission Decorators in Starlette\nDESCRIPTION: This snippet shows how to use the @requires decorator to implement permissions in Starlette. It demonstrates different ways to apply permissions, including single scope, multiple scopes, custom status codes, and redirects for unauthenticated users.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.authentication import requires\n\n\n@requires('authenticated')\nasync def dashboard(request):\n    ...\n\n\n@requires(['authenticated', 'admin'])\nasync def dashboard(request):\n    ...\n\n\n@requires(['authenticated', 'admin'], status_code=404)\nasync def dashboard(request):\n    ...\n\n\nasync def homepage(request):\n    ...\n\n\n@requires('authenticated', redirect='homepage')\nasync def dashboard(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing CORSMiddleware in Starlette (Python)\nDESCRIPTION: Shows how to add Cross-Origin Resource Sharing (CORS) middleware to a Starlette application. This example allows all origins for cross-origin requests. CORSMiddleware supports various configuration options for fine-tuning CORS behavior.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.cors import CORSMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(CORSMiddleware, allow_origins=['*'])\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Sending Basic Response in Starlette (Python)\nDESCRIPTION: Demonstrates how to create and send a basic Response object in Starlette. The response includes custom content, media type, and is sent as an ASGI application instance.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/responses.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import Response\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = Response('Hello, world!', media_type='text/plain')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifespan Handler in Starlette (Python)\nDESCRIPTION: This snippet demonstrates how to create and register a lifespan handler in a Starlette application. The handler uses an async context manager to perform actions at startup and shutdown.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/lifespan.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\n\nfrom starlette.applications import Starlette\n\n\n@contextlib.asynccontextmanager\nasync def lifespan(app):\n    async with some_async_resource():\n        print(\"Run at startup!\")\n        yield\n        print(\"Run on shutdown!\")\n\n\nroutes = [\n    ...\n]\n\napp = Starlette(routes=routes, lifespan=lifespan)\n```\n\n----------------------------------------\n\nTITLE: Implementing TrustedHostMiddleware in Starlette (Python)\nDESCRIPTION: Demonstrates the use of TrustedHostMiddleware in a Starlette application. This middleware enforces that all incoming requests have a correctly set Host header, guarding against HTTP Host Header attacks. It supports configuring allowed hosts and www redirection.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.trustedhost import TrustedHostMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(TrustedHostMiddleware, allowed_hosts=['example.com', '*.example.com'])\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket Sessions with TestClient\nDESCRIPTION: Shows how to test WebSocket sessions using TestClient, including connecting, sending, and receiving data.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/testclient.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.testclient import TestClient\nfrom starlette.websockets import WebSocket\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'websocket'\n    websocket = WebSocket(scope, receive=receive, send=send)\n    await websocket.accept()\n    await websocket.send_text('Hello, world!')\n    await websocket.close()\n\n\ndef test_app():\n    client = TestClient(app)\n    with client.websocket_connect('/') as websocket:\n        data = websocket.receive_text()\n        assert data == 'Hello, world!'\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Starlette Request in Python\nDESCRIPTION: Demonstrates how to create a Starlette Request object from an ASGI scope and use it to access request information. The example shows how to get the request method and URL path, then create a response.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/requests.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.requests import Request\nfrom starlette.responses import Response\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    request = Request(scope, receive)\n    content = '%s %s' % (request.method, request.url.path)\n    response = Response(content, media_type='text/plain')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Response for HTTPException in Starlette (Python)\nDESCRIPTION: This snippet demonstrates how to override the default handling of HTTPException to return JSON-style responses instead of the default plain-text responses.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/exceptions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def http_exception(request: Request, exc: HTTPException):\n    return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n\nexception_handlers = {\n    HTTPException: http_exception\n}\n```\n\n----------------------------------------\n\nTITLE: Database Transaction with Decorator Pattern\nDESCRIPTION: Example of using database transactions as a decorator in Starlette endpoints\nSOURCE: https://github.com/encode/starlette/blob/master/docs/database.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@database.transaction()\nasync def populate_note(request):\n    # This database insert occurs within a transaction.\n    # It will be rolled back by the `RuntimeError`.\n    query = notes.insert().values(text=\"you won't see me\", completed=True)\n    await database.execute(query)\n    raise RuntimeError()\n```\n\n----------------------------------------\n\nTITLE: Adding HTTPSRedirectMiddleware to Starlette (Python)\nDESCRIPTION: Shows how to incorporate HTTPSRedirectMiddleware into a Starlette application. This middleware enforces HTTPS by redirecting all HTTP requests to their HTTPS equivalents, enhancing security for the application.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.httpsredirect import HTTPSRedirectMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(HTTPSRedirectMiddleware)\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Routing in Starlette\nDESCRIPTION: This snippet demonstrates how to implement WebSocket routing in Starlette. It shows the setup of WebSocket routes with path parameters and defines WebSocket endpoint functions.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/routing.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.routing import WebSocketRoute\n\n\nasync def websocket_index(websocket):\n    await websocket.accept()\n    await websocket.send_text(\"Hello, websocket!\")\n    await websocket.close()\n\n\nasync def websocket_user(websocket):\n    name = websocket.path_params[\"name\"]\n    await websocket.accept()\n    await websocket.send_text(f\"Hello, {name}\")\n    await websocket.close()\n\n\nroutes = [\n    WebSocketRoute(\"/\", endpoint=websocket_index),\n    WebSocketRoute(\"/{name}\", endpoint=websocket_user),\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JSON Response in Starlette (Python)\nDESCRIPTION: Shows how to create a custom JSONResponse class using a third-party JSON library (orjson) for fine-grained control over JSON serialization in Starlette.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/responses.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\n\nimport orjson\nfrom starlette.responses import JSONResponse\n\nclass OrjsonResponse(JSONResponse):\n    def render(self, content: Any) -> bytes:\n        return orjson.dumps(content)\n```\n\n----------------------------------------\n\nTITLE: Using HTTPEndpoint with Starlette Routing in Python\nDESCRIPTION: Shows how to use HTTPEndpoint classes with Starlette's routing system. The example includes two endpoint classes (Homepage and User) and demonstrates how to set up routes for these endpoints.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/endpoints.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.responses import PlainTextResponse\nfrom starlette.endpoints import HTTPEndpoint\nfrom starlette.routing import Route\n\n\nclass Homepage(HTTPEndpoint):\n    async def get(self, request):\n        return PlainTextResponse(f\"Hello, world!\")\n\n\nclass User(HTTPEndpoint):\n    async def get(self, request):\n        username = request.path_params['username']\n        return PlainTextResponse(f\"Hello, {username}\")\n\nroutes = [\n    Route(\"/\", Homepage),\n    Route(\"/{username}\", User)\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Configurable Custom Middleware with BaseHTTPMiddleware\nDESCRIPTION: Shows how to create a configurable custom middleware class using BaseHTTPMiddleware. This example allows setting a custom header value during initialization.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass CustomHeaderMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, header_value='Example'):\n        super().__init__(app)\n        self.header_value = header_value\n\n    async def dispatch(self, request, call_next):\n        response = await call_next(request)\n        response.headers['Custom'] = self.header_value\n        return response\n\n\nmiddleware = [\n    Middleware(CustomHeaderMiddleware, header_value='Customized')\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Stateless Mock Response Body Middleware in Starlette (Correct Implementation)\nDESCRIPTION: This middleware demonstrates the correct way to implement stateless middleware that conditionally replaces response bodies when an X-Mock header is present, by scoping state to the function call.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.datastructures import Headers\n\nclass MockResponseBodyMiddleware:\n    def __init__(self, app, content):\n        self.app = app\n        self.content = content\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        # A flag that we will turn `True` if the HTTP response\n        # has the 'X-Mock' header.\n        # ✅: Scoped to this function.\n        should_mock = False\n\n        async def maybe_send_with_mock_content(message):\n            nonlocal should_mock\n\n            if message[\"type\"] == \"http.response.start\":\n                headers = Headers(raw=message[\"headers\"])\n                should_mock = headers.get(\"X-Mock\") == \"1\"\n                await send(message)\n\n            elif message[\"type\"] == \"http.response.body\":\n                if should_mock:\n                    message = {\"type\": \"http.response.body\", \"body\": self.content}\n                await send(message)\n\n        await self.app(scope, receive, maybe_send_with_mock_content)\n```\n\n----------------------------------------\n\nTITLE: Implementing Path Parameters in Starlette Routes\nDESCRIPTION: This snippet shows how to use path parameters in Starlette routes. It demonstrates the use of different convertors (int, float, path) to modify what is captured in the URL.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/routing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRoute('/users/{username}', user)\nRoute('/users/{user_id:int}', user)\nRoute('/floating-point/{number:float}', floating_point)\nRoute('/uploaded/{rest_of_path:path}', uploaded)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Single Background Task in Starlette\nDESCRIPTION: Example of using BackgroundTask to perform a single background operation after sending an HTTP response. The code shows a signup endpoint that sends a welcome email asynchronously after the response is sent to the client.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/background.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\nfrom starlette.background import BackgroundTask\n\n\n...\n\nasync def signup(request):\n    data = await request.json()\n    username = data['username']\n    email = data['email']\n    task = BackgroundTask(send_welcome_email, to_address=email)\n    message = {'status': 'Signup successful'}\n    return JSONResponse(message, background=task)\n\nasync def send_welcome_email(to_address):\n    ...\n\n\nroutes = [\n    ...\n    Route('/user/signup', endpoint=signup, methods=['POST'])\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication to Class-Based Endpoints in Starlette\nDESCRIPTION: This snippet shows how to apply authentication requirements to class-based endpoints in Starlette using the @requires decorator. It demonstrates wrapping the decorator around a method within an HTTPEndpoint class.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/authentication.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.authentication import requires\nfrom starlette.endpoints import HTTPEndpoint\n\n\nclass Dashboard(HTTPEndpoint):\n    @requires(\"authenticated\")\n    async def get(self, request):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Authorization in Starlette\nDESCRIPTION: Shows how to implement WebSocket authorization using subprotocols and HTTP exceptions. The example validates a token in the WebSocket subprotocols and either accepts the connection or returns a 401 Unauthorized response.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/websockets.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.exceptions import HTTPException\nfrom starlette.routing import WebSocketRoute\nfrom starlette.websockets import WebSocket\n\n\ndef is_authorized(subprotocols: list[str]):\n    if len(subprotocols) != 2:\n        return False\n    if subprotocols[0] != \"Authorization\":\n        return False\n    # Here we are hard coding the token, in a real application you would validate the token\n    # against a database or an external service.\n    if subprotocols[1] != \"token\":\n        return False\n    return True\n\n\nasync def websocket_endpoint(websocket: WebSocket):\n    subprotocols = websocket.scope[\"subprotocols\"]\n    if not is_authorized(subprotocols):\n        raise HTTPException(status_code=401, detail=\"Unauthorized\")\n    await websocket.accept(\"Authorization\")\n    await websocket.send_text(\"Hello, world!\")\n    await websocket.close()\n\n\napp = Starlette(debug=True, routes=[WebSocketRoute(\"/ws\", websocket_endpoint)])\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Response in Starlette (Python)\nDESCRIPTION: Demonstrates how to use RedirectResponse in Starlette to perform an HTTP redirect. It checks the path and redirects to the root if not already there, otherwise displays a plain text response.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/responses.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import PlainTextResponse, RedirectResponse\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    if scope['path'] != '/':\n        response = RedirectResponse(url='/')\n    else:\n        response = PlainTextResponse('Hello, world!')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Basic Starlette Jinja2 Templates Setup\nDESCRIPTION: Demonstrates the basic setup of Jinja2 templates in a Starlette application with static file handling and route configuration.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route, Mount\nfrom starlette.templating import Jinja2Templates\nfrom starlette.staticfiles import StaticFiles\n\n\ntemplates = Jinja2Templates(directory='templates')\n\nasync def homepage(request):\n    return templates.TemplateResponse(request, 'index.html')\n\nroutes = [\n    Route('/', endpoint=homepage),\n    Mount('/static', StaticFiles(directory='static'), name='static')\n]\n\napp = Starlette(debug=True, routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Alembic Migration Configuration\nDESCRIPTION: Python code for configuring Alembic with the application's database URL and metadata\nSOURCE: https://github.com/encode/starlette/blob/master/docs/database.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# The Alembic Config object.\nconfig = context.config\n\n# Configure Alembic to use our DATABASE_URL and our table definitions...\nimport app\nconfig.set_main_option('sqlalchemy.url', str(app.DATABASE_URL))\ntarget_metadata = app.metadata\n```\n\n----------------------------------------\n\nTITLE: Monitoring Middleware with Exception Handling in Starlette\nDESCRIPTION: This middleware measures request processing time and handles exceptions. It demonstrates the use of try/except/finally for cleanup operations and error handling in ASGI middleware.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nclass MonitoringMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        start = time.time()\n        try:\n            await self.app(scope, receive, send)\n        except Exception as exc:\n            ...  # Process the exception\n            raise\n        finally:\n            end = time.time()\n            elapsed = end - start\n            ...  # Submit `elapsed` as a metric to a monitoring backend\n```\n\n----------------------------------------\n\nTITLE: Raising HTTPException in WebSocket Endpoint (Python)\nDESCRIPTION: This snippet demonstrates how to raise an HTTPException in a WebSocket endpoint before the connection is upgraded. This results in a proper HTTP response being returned instead of a WebSocket connection.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/exceptions.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.exceptions import HTTPException\nfrom starlette.routing import WebSocketRoute\nfrom starlette.websockets import WebSocket\n\n\nasync def websocket_endpoint(websocket: WebSocket):\n    raise HTTPException(status_code=400, detail=\"Bad request\")\n\n\napp = Starlette(routes=[WebSocketRoute(\"/ws\", websocket_endpoint)])\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Testing with HTTPX AsyncClient\nDESCRIPTION: Demonstrates how to perform asynchronous tests using HTTPX AsyncClient with Starlette applications.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/testclient.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom httpx import AsyncClient, ASGITransport\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route\nfrom starlette.requests import Request\nfrom starlette.responses import PlainTextResponse\n\n\ndef hello(request: Request) -> PlainTextResponse:\n    return PlainTextResponse(\"Hello World!\")\n\n\napp = Starlette(routes=[Route(\"/\", hello)])\n\n\n# if you're using pytest, you'll need to to add an async marker like:\n# @pytest.mark.anyio  # using https://github.com/agronholm/anyio\n# or install and configure pytest-asyncio (https://github.com/pytest-dev/pytest-asyncio)\nasync def test_app() -> None:\n    # note: you _must_ set `base_url` for relative urls like \"/\" to work\n    transport = ASGITransport(app=app)\n    async with AsyncClient(transport=transport, base_url=\"http://testserver\") as client:\n        r = await client.get(\"/\")\n        assert r.status_code == 200\n        assert r.text == \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Streaming Request Body in Starlette Python\nDESCRIPTION: Shows how to access the request body as a stream using async for syntax. This method allows processing the body without storing it entirely in memory, which is useful for large payloads.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/requests.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.requests import Request\nfrom starlette.responses import Response\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    request = Request(scope, receive)\n    body = b''\n    async for chunk in request.stream():\n        body += chunk\n    response = Response(body, media_type='text/plain')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using WebSocket in Starlette\nDESCRIPTION: Basic example showing how to initialize a WebSocket instance from ASGI scope, receive, and send callables. Demonstrates accepting a connection, sending a text message, and closing the connection.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/websockets.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.websockets import WebSocket\n\n\nasync def app(scope, receive, send):\n    websocket = WebSocket(scope=scope, receive=receive, send=send)\n    await websocket.accept()\n    await websocket.send_text('Hello, world!')\n    await websocket.close()\n```\n\n----------------------------------------\n\nTITLE: Creating Streaming Response with Generator in Starlette (Python)\nDESCRIPTION: Illustrates how to use StreamingResponse in Starlette with an async generator to stream a response body. It generates HTML content with numbers and artificial delay.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/responses.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import StreamingResponse\nimport asyncio\n\nasync def slow_numbers(minimum, maximum):\n    yield '<html><body><ul>'\n    for number in range(minimum, maximum + 1):\n        yield '<li>%d</li>' % number\n        await asyncio.sleep(0.5)\n    yield '</ul></body></html>'\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    generator = slow_numbers(1, 10)\n    response = StreamingResponse(generator, media_type='text/html')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Configuring GZipMiddleware in Starlette\nDESCRIPTION: Example of how to set up GZipMiddleware in a Starlette application. It demonstrates configuring the middleware with custom minimum size and compression level.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.gzip import GZipMiddleware\n\n\nroutes = ...\n\nmiddleware = [\n    Middleware(GZipMiddleware, minimum_size=1000, compresslevel=9)\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: ASGI Middleware for Processing HTTP Requests Only\nDESCRIPTION: Example of an ASGI middleware that only processes HTTP requests, demonstrating how to selectively apply middleware based on the request type.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass ASGIMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        ...  # Do something here!\n\n        await self.app(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads with Starlette Request in Python\nDESCRIPTION: Demonstrates how to handle file uploads using the request.form() method. This example shows how to access the filename and contents of an uploaded file.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/requests.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with request.form() as form:\n    filename = form[\"upload_file\"].filename\n    contents = await form[\"upload_file\"].read()\n```\n\n----------------------------------------\n\nTITLE: Iterating Over WebSocket Messages in Starlette\nDESCRIPTION: Demonstrates how to use async iterators with WebSockets to continuously receive and respond to messages. The example creates an echo server that responds to each incoming text message.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/websockets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.websockets import WebSocket\n\n\nasync def app(scope, receive, send):\n    websocket = WebSocket(scope=scope, receive=receive, send=send)\n    await websocket.accept()\n    async for message in websocket.iter_text():\n        await websocket.send_text(f\"Message text was: {message}\")\n    await websocket.close()\n```\n\n----------------------------------------\n\nTITLE: Type-Annotated ASGI Middleware Using asgiref\nDESCRIPTION: Demonstrates how to add more rigorous type annotations to ASGI middleware using the asgiref library. This approach provides more detailed type hinting.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom asgiref.typing import ASGI3Application, ASGIReceiveCallable, ASGISendCallable, Scope\nfrom asgiref.typing import ASGIReceiveEvent, ASGISendEvent\n\n\nclass ASGIMiddleware:\n    def __init__(self, app: ASGI3Application) -> None:\n        self.app = app\n\n    async def __call__(self, scope: Scope, receive: ASGIReceiveCallable, send: ASGISendCallable) -> None:\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        async def send_wrapper(message: ASGISendEvent) -> None:\n            # ... Do something\n            await send(message)\n\n        return await self.app(scope, receive, send_wrapper)\n```\n\n----------------------------------------\n\nTITLE: Type-Annotated ASGI Middleware Using Starlette Types\nDESCRIPTION: Shows how to add type annotations to ASGI middleware using Starlette's type definitions. This approach is suitable for most common use cases.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.types import ASGIApp, Message, Scope, Receive, Send\n\n\nclass ASGIMiddleware:\n    def __init__(self, app: ASGIApp) -> None:\n        self.app = app\n\n    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n        if scope[\"type\"] != \"http\":\n            return await self.app(scope, receive, send)\n\n        async def send_wrapper(message: Message) -> None:\n            # ... Do something\n            await send(message)\n\n        await self.app(scope, receive, send_wrapper)\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Route Groups Using Mount\nDESCRIPTION: This snippet shows how to apply middleware to a group of routes using the Mount class, which allows for middleware to be applied to a specific subset of routes.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.gzip import GZipMiddleware\nfrom starlette.routing import Mount, Route\n\n\nroutes = [\n    Mount(\n        \"/\",\n        routes=[\n            Route(\n                \"/example\",\n                endpoint=...,\n            )\n        ],\n        middleware=[Middleware(GZipMiddleware)]\n    )\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Initializing StaticFiles with Starlette Routing\nDESCRIPTION: This snippet demonstrates how to set up a route for serving static files using Starlette's Mount and StaticFiles classes. It creates a route that serves files from a 'static' directory at the '/static' URL path.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/staticfiles.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount\nfrom starlette.staticfiles import StaticFiles\n\n\nroutes = [\n    ...\n    Mount('/static', app=StaticFiles(directory='static'), name=\"static\"),\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Starlette Application Setup with Middleware\nDESCRIPTION: Example of setting up a Starlette application with routes and session middleware, using configured settings.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/config.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom starlette.routing import Route\n\nfrom myproject import settings\n\n\nasync def homepage(request):\n    ...\n\nroutes = [\n    Route(\"/\", endpoint=homepage)\n]\n\nmiddleware = [\n    Middleware(\n        SessionMiddleware,\n        secret_key=settings.SECRET_KEY,\n    )\n]\n\napp = Starlette(debug=settings.DEBUG, routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Route Groups Using Router\nDESCRIPTION: This snippet shows how to apply middleware to a group of routes using the Router class, which allows for more organized route management with middleware applied to all routes in the router.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.gzip import GZipMiddleware\nfrom starlette.routing import Route, Router\n\n\nroutes = [\n    Route(\"/example\", endpoint=...),\n    Route(\"/another\", endpoint=...),\n]\n\nrouter = Router(routes=routes, middleware=[Middleware(GZipMiddleware)])\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Middleware in Starlette\nDESCRIPTION: Example of creating a custom HTTP middleware class using BaseHTTPMiddleware to add custom headers to responses. Shows how to work with request/response level middleware instead of raw ASGI messages.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/release-notes.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\n\nclass CustomMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request, call_next):\n        response = await call_next(request)\n        response.headers['Custom-Header'] = 'Example'\n        return response\n\n\napp = Starlette()\napp.add_middleware(CustomMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Convertor for Starlette URL Routing\nDESCRIPTION: This example demonstrates how to create and register a custom convertor (datetime) for use in Starlette URL routing. It defines a DateTimeConvertor class and registers it for use in routes.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/routing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nfrom starlette.convertors import Convertor, register_url_convertor\n\n\nclass DateTimeConvertor(Convertor):\n    regex = \"[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]+)?\"\n\n    def convert(self, value: str) -> datetime:\n        return datetime.strptime(value, \"%Y-%m-%dT%H:%M:%S\")\n\n    def to_string(self, value: datetime) -> str:\n        return value.strftime(\"%Y-%m-%dT%H:%M:%S\")\n\nregister_url_convertor(\"datetime\", DateTimeConvertor())\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Individual Routes\nDESCRIPTION: This snippet demonstrates how to apply middleware to a single route by passing the middleware argument to the Route class constructor.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.gzip import GZipMiddleware\nfrom starlette.routing import Route\n\n\nroutes = [\n    Route(\n        \"/example\",\n        endpoint=...,\n        middleware=[Middleware(GZipMiddleware)]\n    )\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Implementing Host-based Routing in Starlette\nDESCRIPTION: This example shows how to implement host-based routing in Starlette. It demonstrates different ways to connect host-based routes to an application and how to perform URL lookups with host parameters.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/routing.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsite = Router()  # Use eg. `@site.route()` to configure this.\napi = Router()  # Use eg. `@api.route()` to configure this.\nnews = Router()  # Use eg. `@news.route()` to configure this.\n\nroutes = [\n    Host('api.example.org', api, name=\"site_api\")\n]\n\napp = Starlette(routes=routes)\n\napp.host('www.example.org', site, name=\"main_site\")\n\nnews_host = Host('news.example.org', news)\napp.router.routes.append(news_host)\n\n# URL lookups with host parameters\nroutes = [\n    Host(\"{subdomain}.example.org\", name=\"sub\", app=Router(routes=[\n        Mount(\"/users\", name=\"users\", routes=[\n            Route(\"/\", user, name=\"user_list\"),\n            Route(\"/{username}\", user, name=\"user_detail\")\n        ])\n    ]))\n]\n...\nurl = request.url_for(\"sub:users:user_detail\", username=..., subdomain=...)\nurl = request.url_for(\"sub:users:user_list\", subdomain=...)\n```\n\n----------------------------------------\n\nTITLE: CLI Interface for Schema Generation\nDESCRIPTION: Implements a command-line interface to either run the application or output the API schema in YAML format. Requires uvicorn for running the server and PyYAML for schema output.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/schemas.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    assert sys.argv[-1] in (\"run\", \"schema\"), \"Usage: example.py [run|schema]\"\n\n    if sys.argv[-1] == \"run\":\n        uvicorn.run(\"example:app\", host='0.0.0.0', port=8000)\n    elif sys.argv[-1] == \"schema\":\n        schema = schemas.get_schema(routes=app.routes)\n        print(yaml.dump(schema, default_flow_style=False))\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Schema from Routes\nDESCRIPTION: Demonstrates how to generate an OpenAPI schema directly from application routes using the get_schema() method. Shows the expected schema structure with paths and responses.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/schemas.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nschema = schemas.get_schema(routes=app.routes)\nassert schema == {\n    \"openapi\": \"3.0.0\",\n    \"info\": {\"title\": \"Example API\", \"version\": \"1.0\"},\n    \"paths\": {\n        \"/users\": {\n            \"get\": {\n                \"responses\": {\n                    200: {\n                        \"description\": \"A list of users.\",\n                        \"examples\": [{\"username\": \"tom\"}, {\"username\": \"lucy\"}],\n                    }\n                }\n            },\n            \"post\": {\n                \"responses\": {\n                    200: {\"description\": \"A user.\", \"examples\": {\"username\": \"tom\"}}\n                }\n            },\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Starlette Settings Module Implementation\nDESCRIPTION: Implementation of a settings module for a Starlette application, showing configuration of debug mode, secret key, and database URL.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/config.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.config import Config\nfrom starlette.datastructures import Secret\n\nconfig = Config(\".env\")\n\nDEBUG = config('DEBUG', cast=bool, default=False)\nSECRET_KEY = config('SECRET_KEY', cast=Secret)\n\nDATABASE_URL = config('DATABASE_URL')\n```\n\n----------------------------------------\n\nTITLE: Custom Jinja2 Filter Implementation\nDESCRIPTION: Example of adding a custom markdown filter to Jinja2 templates using commonmark.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom commonmark import commonmark\nfrom starlette.templating import Jinja2Templates\n\ndef marked_filter(text):\n    return commonmark(text)\n\ntemplates = Jinja2Templates(directory='templates')\ntemplates.env.filters['marked'] = marked_filter\n```\n\n----------------------------------------\n\nTITLE: Transaction ID Middleware for Starlette\nDESCRIPTION: This middleware adds a unique transaction ID to each request by storing it in the scope dictionary. This allows endpoints to access the transaction ID through request.scope['asgi_transaction_id'].\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nclass TransactionIDMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        scope[\"asgi_transaction_id\"] = uuid.uuid4()\n        await self.app(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pure ASGI Middleware as a Function\nDESCRIPTION: Shows an alternative approach to creating ASGI middleware using functions and decorators. This style is used in some third-party implementations.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport functools\n\ndef asgi_middleware():\n    def asgi_decorator(app):\n\n        @functools.wraps(app)\n        async def wrapped_app(scope, receive, send):\n            await app(scope, receive, send)\n\n        return wrapped_app\n\n    return asgi_decorator\n```\n\n----------------------------------------\n\nTITLE: Managing State in Starlette Lifespan (Python)\nDESCRIPTION: This example shows how to use the lifespan state to share objects between the lifespan handler and request handlers. It creates an HTTP client in the lifespan and makes it available to the request handlers.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/lifespan.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\nfrom typing import AsyncIterator, TypedDict\n\nimport httpx\nfrom starlette.applications import Starlette\nfrom starlette.requests import Request\nfrom starlette.responses import PlainTextResponse\nfrom starlette.routing import Route\n\n\nclass State(TypedDict):\n    http_client: httpx.AsyncClient\n\n\n@contextlib.asynccontextmanager\nasync def lifespan(app: Starlette) -> AsyncIterator[State]:\n    async with httpx.AsyncClient() as client:\n        yield {\"http_client\": client}\n\n\nasync def homepage(request: Request) -> PlainTextResponse:\n    client = request.state.http_client\n    response = await client.get(\"https://www.example.com\")\n    return PlainTextResponse(response.text)\n\n\napp = Starlette(\n    lifespan=lifespan,\n    routes=[Route(\"/\", homepage)]\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Response Headers Middleware in Starlette\nDESCRIPTION: This middleware adds custom headers to HTTP responses. It wraps the send callable to intercept response start events and adds the specified headers before forwarding the message.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.datastructures import MutableHeaders\n\nclass ExtraResponseHeadersMiddleware:\n    def __init__(self, app, headers):\n        self.app = app\n        self.headers = headers\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            return await self.app(scope, receive, send)\n\n        async def send_with_extra_headers(message):\n            if message[\"type\"] == \"http.response.start\":\n                headers = MutableHeaders(scope=message)\n                for key, value in self.headers:\n                    headers.append(key, value)\n\n            await send(message)\n\n        await self.app(scope, receive, send_with_extra_headers)\n```\n\n----------------------------------------\n\nTITLE: Sending Files with TestClient in Python\nDESCRIPTION: Demonstrates how to send single and multiple files in a POST request using TestClient.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/testclient.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = TestClient(app)\n\n# Send a single file\nwith open(\"example.txt\", \"rb\") as f:\n    response = client.post(\"/form\", files={\"file\": f})\n\n# Send multiple files\nwith open(\"example.txt\", \"rb\") as f1:\n    with open(\"example.png\", \"rb\") as f2:\n        files = {\"file1\": f1, \"file2\": (\"filename\", f2, \"image/png\")}\n        response = client.post(\"/form\", files=files)\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Redirects in Starlette\nDESCRIPTION: This snippet demonstrates how to handle redirects for authenticated users in Starlette. It shows how to use the 'next' query parameter to redirect users to their original requested destination after successful authentication.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/authentication.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.authentication import requires\nfrom starlette.responses import RedirectResponse\n\n\n@requires('authenticated', redirect='login')\nasync def admin(request):\n    ...\n\n\nasync def login(request):\n    if request.method == \"POST\":\n        # Now that the user is authenticated,\n        # we can send them to their original request destination\n        if request.user.is_authenticated:\n            next_url = request.query_params.get(\"next\")\n            if next_url:\n                return RedirectResponse(next_url)\n            return RedirectResponse(\"/\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects Middleware in Starlette\nDESCRIPTION: This middleware handles permanent redirects based on a path mapping dictionary. It intercepts HTTP requests, checks if the current path is in the mapping, and returns a 301 redirect response if needed.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.datastructures import URL\nfrom starlette.responses import RedirectResponse\n\nclass RedirectsMiddleware:\n    def __init__(self, app, path_mapping: dict):\n        self.app = app\n        self.path_mapping = path_mapping\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        url = URL(scope=scope)\n\n        if url.path in self.path_mapping:\n            url = url.replace(path=self.path_mapping[url.path])\n            response = RedirectResponse(url, status_code=301)\n            await response(scope, receive, send)\n            return\n\n        await self.app(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Increasing Thread Pool Size in Starlette using anyio\nDESCRIPTION: This snippet demonstrates how to increase the default thread pool size in Starlette by modifying the total_tokens property of the default thread limiter. The default limit is 40 threads, which can be increased to accommodate more concurrent operations.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/threadpool.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport anyio.to_thread\n\nlimiter = anyio.to_thread.current_default_thread_limiter()\nlimiter.total_tokens = 100\n```\n\n----------------------------------------\n\nTITLE: Basic TestClient Usage in Python\nDESCRIPTION: Demonstrates how to use TestClient to make a GET request to an ASGI application and assert the response status code.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/testclient.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import HTMLResponse\nfrom starlette.testclient import TestClient\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = HTMLResponse('<html><body>Hello, world!</body></html>')\n    await response(scope, receive, send)\n\n\ndef test_app():\n    client = TestClient(app)\n    response = client.get('/')\n    assert response.status_code == 200\n```\n\n----------------------------------------\n\nTITLE: ASGI Middleware Using Starlette Request Object\nDESCRIPTION: Shows how to use Starlette's Request object in ASGI middleware to more easily inspect HTTP requests.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.requests import Request\n\nclass ASGIMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] == \"http\":\n            request = Request(scope)\n            ... # Use `request.method`, `request.url`, `request.headers`, etc.\n\n        await self.app(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Wrapping ASGI Middleware Around Applications\nDESCRIPTION: This snippet demonstrates the general pattern for wrapping ASGI middleware around other ASGI applications by directly wrapping the application instance.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\napp = TrustedHostMiddleware(app, allowed_hosts=['example.com'])\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Environment Customization\nDESCRIPTION: Demonstrates how to customize Jinja2 Environment options when initializing templates.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/templates.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.templating import Jinja2Templates\n\n\ntemplates = Jinja2Templates(directory='templates', autoescape=False, auto_reload=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Push with Starlette\nDESCRIPTION: Demonstrates how to set up a Starlette application that uses server push to preemptively send a CSS stylesheet to the client. The example shows route configuration, static file serving, and the send_push_promise method usage in an async homepage handler.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/server-push.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.responses import HTMLResponse\nfrom starlette.routing import Route, Mount\nfrom starlette.staticfiles import StaticFiles\n\n\nasync def homepage(request):\n    \"\"\"\n    Homepage which uses server push to deliver the stylesheet.\n    \"\"\"\n    await request.send_push_promise(\"/static/style.css\")\n    return HTMLResponse(\n        '<html><head><link rel=\"stylesheet\" href=\"/static/style.css\"/></head></html>'\n    )\n\nroutes = [\n    Route(\"/\", endpoint=homepage),\n    Mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files from Python Packages\nDESCRIPTION: This example shows how to serve static files from both a local directory and a Python package (bootstrap4). It uses the 'packages' parameter of StaticFiles to include static files from the package.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/staticfiles.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount\nfrom starlette.staticfiles import StaticFiles\n\n\nroutes=[\n    ...\n    Mount('/static', app=StaticFiles(directory='static', packages=['bootstrap4']), name=\"static\"),\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Serving File Response in Starlette (Python)\nDESCRIPTION: Shows how to use FileResponse in Starlette to asynchronously stream a file as the response. This example serves a favicon.ico file.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/responses.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import FileResponse\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = FileResponse('statics/favicon.ico')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Static Directory in Python Packages\nDESCRIPTION: This snippet demonstrates how to specify a custom directory for static files within a Python package. It uses a tuple to define the package name and the directory name.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/staticfiles.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nroutes=[\n    ...\n    Mount('/static', app=StaticFiles(packages=[('bootstrap4', 'static')]), name=\"static\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in TestClient Requests\nDESCRIPTION: Shows how to set headers for all requests or individual requests using TestClient in Python.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/testclient.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = TestClient(app)\n\n# Set headers on the client for future requests\nclient.headers = {\"Authorization\": \"...\"}\nresponse = client.get(\"/\")\n\n# Set headers for each request separately\nresponse = client.get(\"/\", headers={\"Authorization\": \"...\"})\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication Error Responses in Starlette\nDESCRIPTION: This snippet demonstrates how to customize the error response when an AuthenticationError is raised by an authentication backend in Starlette. It shows how to create a custom error handler function and apply it to the AuthenticationMiddleware.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/authentication.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.authentication import AuthenticationMiddleware\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\n\ndef on_auth_error(request: Request, exc: Exception):\n    return JSONResponse({\"error\": str(exc)}, status_code=401)\n\napp = Starlette(\n    middleware=[\n        Middleware(AuthenticationMiddleware, backend=BasicAuthBackend(), on_error=on_auth_error),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Application State in Starlette\nDESCRIPTION: Demonstrates how to store arbitrary state on the Starlette application instance using the app.state attribute.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/applications.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.state.ADMIN_EMAIL = 'admin@example.org'\n```\n\n----------------------------------------\n\nTITLE: Logging Request Body Size Middleware in Starlette\nDESCRIPTION: This middleware calculates and logs the size of incoming HTTP request bodies. It wraps the receive callable to intercept and measure request body chunks before passing them to the application.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass LoggedRequestBodySizeMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        body_size = 0\n\n        async def receive_logging_request_body_size():\n            nonlocal body_size\n\n            message = await receive()\n            assert message[\"type\"] == \"http.request\"\n\n            body_size += len(message.get(\"body\", b\"\"))\n\n            if not message.get(\"more_body\", False):\n                print(f\"Size of request body was: {body_size} bytes\")\n\n            return message\n\n        await self.app(scope, receive_logging_request_body_size, send)\n```\n\n----------------------------------------\n\nTITLE: Handling HTTPException with Custom Headers in Starlette (Python)\nDESCRIPTION: This code shows how to handle HTTPException while preserving custom headers in the response. It demonstrates the use of the 'headers' argument in the HTTPException class.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/exceptions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def http_exception(request: Request, exc: HTTPException):\n    return JSONResponse(\n        {\"detail\": exc.detail},\n        status_code=exc.status_code,\n        headers=exc.headers\n    )\n```\n\n----------------------------------------\n\nTITLE: Context Processor Registration\nDESCRIPTION: Shows how to register context processors with Jinja2Templates for template context extension.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/templates.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\nfrom starlette.requests import Request\nfrom starlette.templating import Jinja2Templates\n\ndef app_context(request: Request) -> typing.Dict[str, typing.Any]:\n    return {'app': request.app}\n\ntemplates = Jinja2Templates(\n    directory='templates', context_processors=[app_context]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pure ASGI Middleware as a Class\nDESCRIPTION: Demonstrates how to create a basic ASGI middleware as a class. This approach provides more control and flexibility compared to BaseHTTPMiddleware.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass ASGIMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        await self.app(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Starlette Application (Python)\nDESCRIPTION: This code snippet shows how to enable debug mode in a Starlette application, which will display a traceback response instead of using the installed 500 handler when an error occurs.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/exceptions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Starlette(debug=True, routes=routes, exception_handlers=exception_handlers)\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: Shell commands for initializing Alembic migrations\nSOURCE: https://github.com/encode/starlette/blob/master/docs/database.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install alembic\n$ alembic init migrations\n```\n\n----------------------------------------\n\nTITLE: Test Setup with pytest Fixtures\nDESCRIPTION: Pytest configuration for database testing including database creation and client setup\nSOURCE: https://github.com/encode/starlette/blob/master/docs/database.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom starlette.config import environ\nfrom starlette.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy_utils import database_exists, create_database, drop_database\n\n# This sets `os.environ`, but provides some additional protection.\n# If we placed it below the application import, it would raise an error\n# informing us that 'TESTING' had already been read from the environment.\nenviron['TESTING'] = 'True'\n\nimport app\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef create_test_database():\n  \"\"\"\n  Create a clean database on every test case.\n  For safety, we should abort if a database already exists.\n\n  We use the `sqlalchemy_utils` package here for a few helpers in consistently\n  creating and dropping the database.\n  \"\"\"\n  url = str(app.TEST_DATABASE_URL)\n  engine = create_engine(url)\n  assert not database_exists(url), 'Test database already exists. Aborting tests.'\n  create_database(url)             # Create the test database.\n  metadata.create_all(engine)      # Create the tables.\n  yield                            # Run the tests.\n  drop_database(url)               # Drop the test database.\n\n\n@pytest.fixture()\ndef client():\n    \"\"\"\n    When using the 'client' fixture in test cases, we'll get full database\n    rollbacks between test cases:\n\n    def test_homepage(client):\n        url = app.url_path_for('homepage')\n        response = client.get(url)\n        assert response.status_code == 200\n    \"\"\"\n    with TestClient(app) as client:\n        yield client\n```\n\n----------------------------------------\n\nTITLE: Starlette Database Tables Definition\nDESCRIPTION: Example of database table definitions using SQLAlchemy with Starlette.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/config.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport sqlalchemy\n\n# Database table definitions.\nmetadata = sqlalchemy.MetaData()\n\norganisations = sqlalchemy.Table(\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Database Transaction with Low-level API\nDESCRIPTION: Example of using low-level transaction API in Starlette endpoints with explicit commit and rollback\nSOURCE: https://github.com/encode/starlette/blob/master/docs/database.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def populate_note(request):\n    transaction = await database.transaction()\n    try:\n        # This database insert occurs within a transaction.\n        # It will be rolled back by the `RuntimeError`.\n        query = notes.insert().values(text=\"you won't see me\", completed=True)\n        await database.execute(query)\n        raise RuntimeError()\n    except:\n        await transaction.rollback()\n        raise\n    else:\n        await transaction.commit()\n```\n\n----------------------------------------\n\nTITLE: Running ASGI Application with Uvicorn\nDESCRIPTION: Shows the command and expected output when running a Starlette ASGI application with uvicorn server.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ uvicorn main:app\nINFO: Started server process [11509]\nINFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Minimal ASGI Toolkit Example\nDESCRIPTION: Demonstrates using Starlette as a minimal ASGI toolkit with a basic text response handler.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.responses import PlainTextResponse\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    response = PlainTextResponse('Hello, world!')\n    await response(scope, receive, send)\n```\n\n----------------------------------------\n\nTITLE: Testing Starlette Application with Lifespan (Python)\nDESCRIPTION: This snippet illustrates how to properly test a Starlette application that uses a lifespan handler. It uses the TestClient as a context manager to ensure the lifespan is called during tests.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/lifespan.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom example import app\nfrom starlette.testclient import TestClient\n\n\ndef test_homepage():\n    with TestClient(app) as client:\n        # Application's lifespan is called on entering the block.\n        response = client.get(\"/\")\n        assert response.status_code == 200\n\n    # And the lifespan's teardown is run when exiting the block.\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocketException in Starlette (Python)\nDESCRIPTION: This snippet demonstrates how to handle WebSocketException in a Starlette application by closing the WebSocket connection with a specific status code.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/exceptions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def websocket_exception(websocket: WebSocket, exc: WebSocketException):\n    await websocket.close(code=1008)\n\nexception_handlers = {\n    WebSocketException: websocket_exception\n}\n```\n\n----------------------------------------\n\nTITLE: Context Processor Implementation\nDESCRIPTION: Demonstrates how to create a context processor function that adds application context to templates.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/templates.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nfrom starlette.requests import Request\n\ndef app_context(request: Request) -> typing.Dict[str, typing.Any]:\n    return {'app': request.app}\n```\n\n----------------------------------------\n\nTITLE: Installing Starlette and ASGI Server\nDESCRIPTION: Basic pip commands to install Starlette framework and uvicorn ASGI server.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install starlette\npip install uvicorn\n```\n\n----------------------------------------\n\nTITLE: Template Response Testing\nDESCRIPTION: Example of testing template responses using Starlette's test client to verify template name and context.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/templates.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.testclient import TestClient\n\n\ndef test_homepage():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.template.name == 'index.html'\n    assert \"request\" in response.context\n```\n\n----------------------------------------\n\nTITLE: Custom Jinja2 Environment Configuration\nDESCRIPTION: Shows how to use a custom Jinja2 Environment instance with Starlette templates.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport jinja2\nfrom starlette.templating import Jinja2Templates\n\nenv = jinja2.Environment(...)\ntemplates = Jinja2Templates(env=env)\n```\n\n----------------------------------------\n\nTITLE: Starlette Test Configuration Setup\nDESCRIPTION: Test configuration setup showing database creation and cleanup for testing, including pytest fixtures for database and test client setup.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/config.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.config import environ\nfrom starlette.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy_utils import create_database, database_exists, drop_database\n\n# This line would raise an error if we use it after 'settings' has been imported.\nenviron['DEBUG'] = 'TRUE'\n\nfrom myproject import settings\nfrom myproject.app import app\nfrom myproject.tables import metadata\n\n\n@pytest.fixture(autouse=True, scope=\"session\")\ndef setup_test_database():\n    \"\"\"\n    Create a clean test database every time the tests are run.\n    \"\"\"\n    url = settings.DATABASE_URL\n    engine = create_engine(url)\n    assert not database_exists(url), 'Test database already exists. Aborting tests.'\n    create_database(url)             # Create the test database.\n    metadata.create_all(engine)      # Create the tables.\n    yield                            # Run the tests.\n    drop_database(url)               # Drop the test database.\n\n\n@pytest.fixture()\ndef client():\n    \"\"\"\n    Make a 'client' fixture available to test cases.\n    \"\"\"\n    # Our fixture is created within a context manager. This ensures that\n    # application lifespan runs for every test case.\n    with TestClient(app) as test_client:\n        yield test_client\n```\n\n----------------------------------------\n\nTITLE: Reading Prefixed Environment Variables in Starlette\nDESCRIPTION: Shows how to use environment variable prefixes in Starlette configuration to namespace configuration values.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/config.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom starlette.config import Config\n\nos.environ['APP_DEBUG'] = 'yes'\nos.environ['ENVIRONMENT'] = 'dev'\n\nconfig = Config(env_prefix='APP_')\n\nDEBUG = config('DEBUG') # lookups APP_DEBUG, returns \"yes\"\nENVIRONMENT = config('ENVIRONMENT') # lookups APP_ENVIRONMENT, raises KeyError as variable is not defined\n```\n\n----------------------------------------\n\nTITLE: Using Pure ASGI Middleware in Starlette\nDESCRIPTION: Demonstrates how to use pure ASGI middleware in a Starlette application, similar to other middleware types.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\n\nfrom .middleware import ASGIMiddleware\n\nroutes = ...\n\nmiddleware = [\n    Middleware(ASGIMiddleware),\n]\n\napp = Starlette(..., middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration File Example\nDESCRIPTION: Example .env file showing how to define environment variables for a Starlette application. Includes settings for debug mode, database connection, secret key, and allowed hosts.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/config.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Don't commit this to source control.\n# Eg. Include \".env\" in your `.gitignore` file.\nDEBUG=True\nDATABASE_URL=postgresql://user:password@localhost:5432/database\nSECRET_KEY=43n080musdfjt54t-09sdgr\nALLOWED_HOSTS=127.0.0.1, localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies for Starlette Project\nDESCRIPTION: Requirements file specifying Python package dependencies grouped by purpose: optional dependencies with full installation, testing packages including coverage and pytest, documentation tools like mkdocs, and packaging utilities. Each dependency is pinned to a specific version.\nSOURCE: https://github.com/encode/starlette/blob/master/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Optionals\n-e .[full]\n\n# Testing\ncoverage==7.8.0\nimportlib-metadata==8.6.1\nmypy==1.15.0\nruff==0.11.2\ntyping_extensions==4.12.2\ntypes-contextvars==2.4.7.3\ntypes-PyYAML==6.0.12.20250326\ntypes-dataclasses==0.6.6\npytest==8.3.5\ntrio==0.29.0\n\n# Documentation\nblack==25.1.0\nmkdocs==1.6.1\nmkdocs-material==9.6.11\nmkdocstrings-python==1.16.8\n\n# Packaging\nbuild==1.2.2.post1\ntwine==6.1.0\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Template URL Reference\nDESCRIPTION: Shows how to reference static files in Jinja2 templates using the url_for function.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"{{ url_for('static', path='/css/bootstrap.min.css') }}\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Test Database Configuration\nDESCRIPTION: Configuration setup for test isolation using separate test database\nSOURCE: https://github.com/encode/starlette/blob/master/docs/database.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.config import Config\nimport databases\n\nconfig = Config(\".env\")\n\nTESTING = config('TESTING', cast=bool, default=False)\nDATABASE_URL = config('DATABASE_URL', cast=databases.DatabaseURL)\nTEST_DATABASE_URL = DATABASE_URL.replace(database='test_' + DATABASE_URL.database)\n\n# Use 'force_rollback' during testing, to ensure we do not persist database changes\n# between each test case.\nif TESTING:\n    database = databases.Database(TEST_DATABASE_URL, force_rollback=True)\nelse:\n    database = databases.Database(DATABASE_URL)\n```\n\n----------------------------------------\n\nTITLE: Test Database Migration Setup\nDESCRIPTION: Enhanced test database fixture that includes running migrations\nSOURCE: https://github.com/encode/starlette/blob/master/docs/database.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom alembic import command\nfrom alembic.config import Config\nimport app\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef create_test_database():\n    url = str(app.DATABASE_URL)\n    engine = create_engine(url)\n    assert not database_exists(url), 'Test database already exists. Aborting tests.'\n    create_database(url)             # Create the test database.\n    config = Config(\"alembic.ini\")   # Run the migrations.\n    command.upgrade(config, \"head\")\n    yield                            # Run the tests.\n    drop_database(url)               # Drop the test database.\n```\n\n----------------------------------------\n\nTITLE: Basic Starlette Application with Route\nDESCRIPTION: Example showing how to create a basic Starlette application with a single route that returns a JSON response.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\n\n\nasync def homepage(request):\n    return JSONResponse({'hello': 'world'})\n\n\napp = Starlette(debug=True, routes=[\n    Route('/', homepage),\n])\n```\n\n----------------------------------------\n\nTITLE: Database Migration Implementation\nDESCRIPTION: Example of an Alembic migration script for creating the notes table\nSOURCE: https://github.com/encode/starlette/blob/master/docs/database.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef upgrade():\n    op.create_table(\n      'notes',\n      sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n      sqlalchemy.Column(\"text\", sqlalchemy.String),\n      sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n    )\n\ndef downgrade():\n    op.drop_table('notes')\n```\n\n----------------------------------------\n\nTITLE: Running a Minimal ASGI Application with Uvicorn\nDESCRIPTION: Command to run a minimal ASGI application using Uvicorn. This assumes the application is defined in a file named 'example.py'.\nSOURCE: https://github.com/encode/starlette/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ uvicorn example:app\n```\n\n----------------------------------------\n\nTITLE: Template Usage Example - Python/Starlette\nDESCRIPTION: Example showing how to use templates in Starlette applications, demonstrating template configuration and rendering with Jinja2.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/release-notes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp = Starlette(template_directory=\"templates\")\n\n@app.route('/')\nasync def homepage(request):\n    # `url_for` is available inside the template.\n    template = app.get_template('index.html')\n    content = template.render(request=request)\n    return HTMLResponse(content)\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Environment Variables\nDESCRIPTION: Environment configuration file specifying the SQLite database URL\nSOURCE: https://github.com/encode/starlette/blob/master/docs/database.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nDATABASE_URL=sqlite:///test.db\n```\n\n----------------------------------------\n\nTITLE: Running Starlette Application\nDESCRIPTION: Command to run a Starlette application using uvicorn ASGI server.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Cloning the Starlette Repository in Shell\nDESCRIPTION: Instructions for cloning the Starlette repository from a user's fork on GitHub. The command requires replacing YOUR-USERNAME with the contributor's actual GitHub username.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/YOUR-USERNAME/starlette\n```\n\n----------------------------------------\n\nTITLE: Running a Starlette Application with Uvicorn\nDESCRIPTION: Command to run a Starlette application using the Uvicorn ASGI server. This assumes the application is defined in a file named 'main.py'.\nSOURCE: https://github.com/encode/starlette/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ uvicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Starlette using Shell\nDESCRIPTION: Command for running the test suite using the test script. Additional arguments can be passed to pytest.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/contributing.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ scripts/test\n```\n\n----------------------------------------\n\nTITLE: Running Code Checks in Starlette using Shell\nDESCRIPTION: Command for running code checks separately from the test suite. These checks are also included as part of the test script.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/contributing.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ scripts/check\n```\n\n----------------------------------------\n\nTITLE: Running Single Test Script in Starlette using Shell\nDESCRIPTION: Example of running a specific test script using the test command with the path to the test file as an argument.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/contributing.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ scripts/test tests/test_application.py\n```\n\n----------------------------------------\n\nTITLE: Installing Starlette for Development in Shell\nDESCRIPTION: Commands for navigating to the Starlette directory and installing the project with its dependencies using the installation script.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd starlette\n$ scripts/install\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Site Locally in Shell\nDESCRIPTION: Command for running the documentation site locally to preview changes before submitting them.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/contributing.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ scripts/docs\n```\n\n----------------------------------------\n\nTITLE: Stateful Mock Response Body Middleware in Starlette (Incorrect Implementation)\nDESCRIPTION: This middleware demonstrates the incorrect way to implement middleware by storing request-specific state as an instance variable, which would cause issues with concurrent requests.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.datastructures import Headers\n\nclass MockResponseBodyMiddleware:\n    def __init__(self, app, content):\n        self.app = app\n        self.content = content\n        # ❌: This variable would be read and written across requests!\n        self.should_mock = False\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        async def maybe_send_with_mock_content(message):\n            if message[\"type\"] == \"http.response.start\":\n                headers = Headers(raw=message[\"headers\"])\n                self.should_mock = headers.get(\"X-Mock\") == \"1\"\n                await send(message)\n\n            elif message[\"type\"] == \"http.response.body\":\n                if self.should_mock:\n                    message = {\"type\": \"http.response.body\", \"body\": self.content}\n                await send(message)\n\n        await self.app(scope, receive, maybe_send_with_mock_content)\n```\n\n----------------------------------------\n\nTITLE: Python URL Processing Configuration\nDESCRIPTION: Code showing URL and path handling configurations in Starlette\nSOURCE: https://github.com/encode/starlette/blob/master/docs/release-notes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Do not overwrite \"path\" and \"root_path\" scope keys [#2352]\n# Merge URLs properly on TestClient [#2376]\n```\n\n----------------------------------------\n\nTITLE: Using Redirects Middleware in a Starlette Application\nDESCRIPTION: Example of how to integrate the RedirectsMiddleware in a Starlette application. This shows how to define path redirections and apply them using the middleware system.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/middleware.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\n\nroutes = ...\n\nredirections = {\n    \"/v1/resource/\": \"/v2/resource/\",\n    # ...\n}\n\nmiddleware = [\n    Middleware(RedirectsMiddleware, path_mapping=redirections),\n]\n\napp = Starlette(routes=routes, middleware=middleware)\n```\n\n----------------------------------------\n\nTITLE: Auto-formatting Code in Starlette using Shell\nDESCRIPTION: Command for running the code auto-formatting script which handles linting tasks.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/contributing.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ scripts/lint\n```\n\n----------------------------------------\n\nTITLE: Python Import Error Exception Code\nDESCRIPTION: Code snippet showing the conversion of ImportErrors to ModuleNotFoundError\nSOURCE: https://github.com/encode/starlette/blob/master/docs/release-notes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Convert ImportErrors into ModuleNotFoundError [#2135]\n```\n\n----------------------------------------\n\nTITLE: Shell Script Commands Overview\nDESCRIPTION: List of available development shell scripts and their purposes in the Starlette project. Each script handles a specific development task from dependency management to package publishing.\nSOURCE: https://github.com/encode/starlette/blob/master/scripts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `scripts/install` - Install dependencies in a virtual environment.\n* `scripts/test` - Run the test suite.\n* `scripts/lint` - Run the automated code linting/formatting tools.\n* `scripts/check` - Run the code linting, checking that it passes.\n* `scripts/coverage` - Check that code coverage is complete.\n* `scripts/build` - Build source and wheel packages.\n* `scripts/publish` - Publish the latest version to PyPI.\n```\n\n----------------------------------------\n\nTITLE: Python Package Version Definition\nDESCRIPTION: Shows version tags and dates from the Starlette changelog\nSOURCE: https://github.com/encode/starlette/blob/master/docs/release-notes.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.35.0 (January 11, 2024)\n## 0.34.0 (December 16, 2023)\n## 0.33.0 (December 1, 2023)\n## 0.32.0.post1 (November 5, 2023)\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Error Handler in Starlette (Python)\nDESCRIPTION: This code snippet shows how to implement a global error handler for all exceptions in a Starlette application. It can be registered using either the Exception class or the status code 500.\nSOURCE: https://github.com/encode/starlette/blob/master/docs/exceptions.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def handle_error(request: Request, exc: HTTPException):\n    # Perform some logic\n    return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n\nexception_handlers = {\n    Exception: handle_error  # or \"500: handle_error\"\n}\n```"
  }
]