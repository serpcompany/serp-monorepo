[
  {
    "owner": "assemblyai",
    "repo": "assemblyai-node-sdk",
    "content": "TITLE: Transcribing Audio Files\nDESCRIPTION: Examples of transcribing audio files using both remote URLs and local files, with options for polling completion status.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Transcribe file at remote URL\nlet transcript = await client.transcripts.transcribe({\n  audio: \"https://assembly.ai/espn.m4a\",\n});\n```\n\n----------------------------------------\n\nTITLE: Real-time Transcription Setup\nDESCRIPTION: Complete example of setting up real-time transcription including event handlers, connection management, and audio streaming.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst rt = client.realtime.transcriber();\n\nrt.on(\"open\", ({ sessionId, expiresAt }) => console.log('Session ID:', sessionId, 'Expires at:', expiresAt));\nrt.on(\"close\", (code: number, reason: string) => console.log('Closed', code, reason));\nrt.on(\"transcript\", (transcript: TranscriptMessage) => console.log('Transcript:', transcript));\nrt.on(\"transcript.partial\", (transcript: PartialTranscriptMessage) => console.log('Partial transcript:', transcript));\nrt.on(\"transcript.final\", (transcript: FinalTranscriptMessage) => console.log('Final transcript:', transcript));\nrt.on(\"error\", (error: Error) => console.error('Error', error));\n\nawait rt.connect();\n\n// Send audio data\ngetAudio((chunk) => {\n  rt.sendAudio(chunk);\n});\n\n// Or stream audio data\naudioStream.pipeTo(rt.stream());\n\nawait rt.close();\n```\n\n----------------------------------------\n\nTITLE: Generating Temporary Auth Token for Browser Usage\nDESCRIPTION: Server-side code to generate a temporary authentication token for browser-based real-time transcription. This approach avoids exposing the API key in client-side code.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/docs/compat.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AssemblyAI } from \"assemblyai\"\n// Ideally, to avoid embedding your API key client side,\n// you generate this token on the server, and pass it to the client via an API.\nconst client = new AssemblyAI({ apiKey: \"YOUR_API_KEY\" });\nconst token = await client.realtime.createTemporaryToken({ expires_in = 480 });\n```\n\n----------------------------------------\n\nTITLE: Initializing AssemblyAI Client\nDESCRIPTION: Creates an instance of the AssemblyAI client using an API key stored in environment variables.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AssemblyAI } from \"assemblyai\";\n\nconst client = new AssemblyAI({\n  apiKey: process.env.ASSEMBLYAI_API_KEY,\n});\n```\n\n----------------------------------------\n\nTITLE: Summarizing Audio Transcripts with LeMUR in JavaScript\nDESCRIPTION: Generates a summary of an audio transcript using the LeMUR API. This example specifies a one-sentence format and provides speaker context to improve accuracy of the summary.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { response } = await client.lemur.summary({\n  transcript_ids: [\"0d295578-8c75-421a-885a-2c487f188927\"],\n  answer_format: \"one sentence\",\n  context: {\n    speakers: [\"Alex\", \"Bob\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Asking Questions About Audio Transcripts with LeMUR in JavaScript\nDESCRIPTION: Queries an audio transcript with specific questions using the LeMUR API. This example asks about the discussion topic in the transcript and specifies a text format for the answer.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { response } = await client.lemur.questionAnswer({\n  transcript_ids: [\"0d295578-8c75-421a-885a-2c487f188927\"],\n  questions: [\n    {\n      question: \"What are they discussing?\",\n      answer_format: \"text\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Action Items from Audio Transcripts with LeMUR in JavaScript\nDESCRIPTION: Extracts actionable insights from an audio transcript using the LeMUR API. This endpoint automatically identifies and formats action items based on the conversation content.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { response } = await client.lemur.actionItems({\n  transcript_ids: [\"0d295578-8c75-421a-885a-2c487f188927\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser-side RealtimeTranscriber\nDESCRIPTION: Client-side code demonstrating how to initialize the RealtimeTranscriber using a temporary token received from the server. Includes both module and UMD import options.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/docs/compat.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RealtimeTranscriber } from \"assemblyai\";\n// or the following if you're using UMD\n// const { RealtimeTranscriber } = assemblyai;\n\nconst token = getToken(); // getToken is a function for you to implement\n\nconst rt = new RealtimeTranscriber({\n  token: token,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing AssemblyAI SDK with Package Managers\nDESCRIPTION: Different commands to install the AssemblyAI SDK using various package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install assemblyai\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add assemblyai\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add assemblyai\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add assemblyai\n```\n\n----------------------------------------\n\nTITLE: Prompting Audio Transcripts with LeMUR in JavaScript\nDESCRIPTION: Sends a custom prompt to the LeMUR API to generate creative content from an audio transcript. This example requests a haiku based on the conversation in the transcript identified by the provided ID.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { response } = await client.lemur.task({\n  transcript_ids: [\"0d295578-8c75-421a-885a-2c487f188927\"],\n  prompt: \"Write a haiku about this conversation.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Transcriber\nDESCRIPTION: Example of creating a RealtimeTranscriber instance using the global assemblyai variable from CDN.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { RealtimeTranscriber } = assemblyai;\nconst transcriber = new RealtimeTranscriber({\n  token: \"[GENERATE TEMPORARY AUTH TOKEN IN YOUR API]\",\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Loading AssemblyAI via CDN\nDESCRIPTION: HTML script tags for loading different versions of the AssemblyAI SDK through UNPKG CDN, including full and streaming-only versions.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Unminified full SDK -->\n<script src=\"https://www.unpkg.com/assemblyai@:version/dist/assemblyai.umd.js\"></script>\n<!-- Minified full SDK -->\n<script src=\"https://www.unpkg.com/assemblyai@:version/dist/assemblyai.umd.min.js\"></script>\n<!-- Unminified Streaming STT only -->\n<script src=\"https://www.unpkg.com/assemblyai@:version/dist/assemblyai.streaming.umd.js\"></script>\n<!-- Minified Streaming STT only -->\n<script src=\"https://www.unpkg.com/assemblyai@:version/dist/assemblyai.streaming.umd.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Named Import with AssemblyAI SDK\nDESCRIPTION: Example of how to import the AssemblyAI class after the breaking change that removed default exports. Users must now use named imports instead of default imports.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AssemblyAI } from 'assemblyai'\n```\n\n----------------------------------------\n\nTITLE: Using RealtimeService Stream Method\nDESCRIPTION: Reference to the new RealtimeService.stream method that creates a writable stream for audio data, providing an alternative to the sendAudio method.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRealtimeService.stream\n```\n\n----------------------------------------\n\nTITLE: Deleting LeMUR Request Data in JavaScript\nDESCRIPTION: Purges data associated with a previous LeMUR API request. This is useful for data privacy compliance or when sensitive information needs to be removed from AssemblyAI's systems.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await client.lemur.purgeRequestData(lemurResponse.request_id);\n```\n\n----------------------------------------\n\nTITLE: Creating Global Type Declarations for AssemblyAI\nDESCRIPTION: TypeScript declaration file that imports AssemblyAI types and declares them globally for use with UMD bundles. This enables TypeScript type checking and IDE autocompletion.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/docs/reference-types-from-js.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport AssemblyAIModule from \"assemblyai\";\ndeclare global {\n  const assemblyai: typeof AssemblyAIModule;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript Definitions in JavaScript\nDESCRIPTION: JavaScript code showing how to reference the TypeScript definition file and use AssemblyAI types. Uses triple-slash directive to reference the type definitions file.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/docs/reference-types-from-js.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/// <reference path=\"assemblyai.d.ts\" />\nconst { RealtimeTranscriber } = assemblyai;\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for AssemblyAI API\nDESCRIPTION: Sample .env file configuration for storing the AssemblyAI API key. This environment variable is required for authenticating requests to the AssemblyAI service.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/samples/streaming-stt-from-mic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nASSEMBLYAI_API_KEY=[YOUR_ASSEMBLYAI_API_KEY]\n```\n\n----------------------------------------\n\nTITLE: Running the AssemblyAI Microphone Streaming Transcription Application\nDESCRIPTION: Command to start the microphone streaming transcription application. This executes the TypeScript code that initiates the microphone recording and connects to AssemblyAI's streaming API.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/samples/streaming-stt-from-mic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for AssemblyAI Microphone Streaming in Node.js\nDESCRIPTION: Command to install the required npm packages for the microphone streaming transcription application. This must be run before starting the application to ensure all dependencies are available.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/samples/streaming-stt-from-mic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Integration Tests\nDESCRIPTION: This snippet shows the format for setting up environment variables required to run integration tests for the AssemblyAI Node.js SDK. It includes the API key and transcript IDs for testing purposes.\nSOURCE: https://github.com/assemblyai/assemblyai-node-sdk/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nASSEMBLYAI_API_KEY=...\nTEST_TRANSCRIPT_ID=...\nTEST_TRANSCRIPT_IDS=...\n```"
  }
]