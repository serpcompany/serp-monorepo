[
  {
    "owner": "vadimdemedes",
    "repo": "ink",
    "content": "TITLE: Installing Ink and React using npm\nDESCRIPTION: This command installs the Ink library and React as dependencies using npm, which are required for building CLI applications with Ink.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ink react\n```\n\n----------------------------------------\n\nTITLE: Rendering \"Hello World\" with Ink\nDESCRIPTION: This JavaScript code renders a \"Hello World\" text in the terminal using Ink. It imports the necessary modules from `react` and `ink`, defines a simple component, and uses the `render` function to display it.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {render, Text} from 'ink';\n\nconst Demo = () => <Text>Hello World</Text>;\n\nrender(<Demo />);\n```\n\n----------------------------------------\n\nTITLE: Text Styling Example in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `<Text>` component in Ink to display text with various styles such as color, background color, bold, italic, underline, strikethrough, and inverse.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, Text} from 'ink';\n\nconst Example = () => (\n\t<>\n\t\t<Text color=\"green\">I am green</Text>\n\t\t<Text color=\"black\" backgroundColor=\"white\">\n\t\t\tI am black on white\n\t\t</Text>\n\t\t<Text color=\"#ffffff\">I am white</Text>\n\t\t<Text bold>I am bold</Text>\n\t\t<Text italic>I am italic</Text>\n\t\t<Text underline>I am underline</Text>\n\t\t<Text strikethrough>I am strikethrough</Text>\n\t\t<Text inverse>I am inversed</Text>\n\t</>\n);\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Handling User Input with useInput Hook in Ink\nDESCRIPTION: Shows how to use the `useInput` hook to handle user input in an Ink application. The callback function receives the input string and key information, allowing for reacting to specific keys or input sequences.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_51\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useInput} from 'ink';\n\nconst UserInput = () => {\n\tuseInput((input, key) => {\n\t\tif (input === 'q') {\n\t\t\t// Exit program\n\t\t}\n\n\t\tif (key.leftArrow) {\n\t\t\t// Left arrow key pressed\n\t\t}\n\t});\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Text Color in Ink (JSX)\nDESCRIPTION: This example shows how to use the `color` property of the `<Text>` component to change the text color. It supports various color formats such as named colors, hexadecimal codes, and RGB values.  It utilizes chalk under the hood for styling.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Text color=\"green\">Green</Text>\n<Text color=\"#005cc5\">Blue</Text>\n<Text color=\"rgb(232, 131, 136)\">Red</Text>\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component with Ink and React\nDESCRIPTION: This code creates a React component named `Counter` that displays an incrementing counter in the terminal using Ink. It utilizes `useState` to manage the counter value and `useEffect` to set up a timer that increments the counter every 100 milliseconds.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useEffect} from 'react';\nimport {render, Text} from 'ink';\n\nconst Counter = () => {\n\tconst [counter, setCounter] = useState(0);\n\n\tuseEffect(() => {\n\t\tconst timer = setInterval(() => {\n\t\t\tsetCounter(previousCounter => previousCounter + 1);\n\t\t}, 100);\n\n\t\treturn () => {\n\t\t\tclearInterval(timer);\n\t\t};\n\t}, []);\n\n\treturn <Text color=\"green\">{counter} tests passed</Text>;\n};\n\nrender(<Counter />);\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Ink Project\nDESCRIPTION: This command uses `create-ink-app` to quickly create a new Ink-based CLI project. It sets up the basic project structure and dependencies.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-ink-app my-ink-cli\n```\n\n----------------------------------------\n\nTITLE: Testing Ink Component with ink-testing-library (JSX)\nDESCRIPTION: This code snippet provides a basic example of how to test an Ink component using the `ink-testing-library`. It renders a `Text` component and then asserts that the last rendered frame matches the expected text. It requires both 'ink' and 'ink-testing-library'.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_72\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {Text} from 'ink';\nimport {render} from 'ink-testing-library';\n\nconst Test = () => <Text>Hello World</Text>;\nconst {lastFrame} = render(<Test />);\n\nlastFrame() === 'Hello World'; //=> true\n```\n\n----------------------------------------\n\nTITLE: Box Component Example in Ink (JSX)\nDESCRIPTION: This example demonstrates the basic usage of the `<Box>` component in Ink for creating layouts. It shows how to apply margins to the box.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, Box, Text} from 'ink';\n\nconst Example = () => (\n\t<Box margin={2}>\n\t\t<Text>This is a box with margin</Text>\n\t</Box>\n);\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Box borderStyle property in Ink (JSX)\nDESCRIPTION: Illustrates the different border styles available for the `Box` component in Ink using the `borderStyle` property. The available styles are `single`, `double`, `round`, `bold`, `singleDouble`, `doubleSingle`, and `classic`. It shows how to apply each style and creates a visual representation of the borders.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\n<Box flexDirection=\"column\">\n\t<Box>\n\t\t<Box borderStyle=\"single\" marginRight={2}>\n\t\t\t<Text>single</Text>\n\t\t</Box>\n\n\t\t<Box borderStyle=\"double\" marginRight={2}>\n\t\t\t<Text>double</Text>\n\t\t</Box>\n\n\t\t<Box borderStyle=\"round\" marginRight={2}>\n\t\t\t<Text>round</Text>\n\t\t</Box>\n\n\t\t<Box borderStyle=\"bold\">\n\t\t\t<Text>bold</Text>\n\t\t</Box>\n\t</Box>\n\n\t<Box marginTop={1}>\n\t\t<Box borderStyle=\"singleDouble\" marginRight={2}>\n\t\t\t<Text>singleDouble</Text>\n\t\t</Box>\n\n\t\t<Box borderStyle=\"doubleSingle\" marginRight={2}>\n\t\t\t<Text>doubleSingle</Text>\n\t\t</Box>\n\n\t\t<Box borderStyle=\"classic\">\n\t\t\t<Text>classic</Text>\n\t\t</Box>\n\t</Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Writing to Stdout with useStdout Hook in Ink\nDESCRIPTION: Demonstrates how to write directly to the standard output stream using the `write` function provided by the `useStdout` hook. This allows for displaying information outside of Ink's rendering area while preserving Ink's output.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useStdout} from 'ink';\n\nconst Example = () => {\n\tconst {write} = useStdout();\n\n\tuseEffect(() => {\n\t\t// Write a single message to stdout, above Ink's output\n\t\twrite('Hello from Ink to stdout\\n');\n\t}, []);\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Text Wrap in Ink (JSX)\nDESCRIPTION: This example showcases how to use the `wrap` property of the `<Text>` component to control how text is wrapped or truncated when its width exceeds the container width. It demonstrates different values such as `wrap`, `truncate`, `truncate-middle`, and `truncate-start`.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Box width={7}>\n\t<Text>Hello World</Text>\n</Box>\n//=> 'Hello\\nWorld'\n\n// `truncate` is an alias to `truncate-end`\n<Box width={7}>\n\t<Text wrap=\"truncate\">Hello World</Text>\n</Box>\n//=> 'Hello…'\n\n<Box width={7}>\n\t<Text wrap=\"truncate-middle\">Hello World</Text>\n</Box>\n//=> 'He…ld'\n\n<Box width={7}>\n\t<Text wrap=\"truncate-start\">Hello World</Text>\n</Box>\n//=> '…World'\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New TypeScript Ink Project\nDESCRIPTION: This command uses `create-ink-app` with the `--typescript` flag to create a new Ink-based CLI project configured to use TypeScript. It sets up the project with TypeScript support.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-ink-app --typescript my-ink-cli\n```\n\n----------------------------------------\n\nTITLE: Accessing Stdin Stream with useStdin Hook in Ink\nDESCRIPTION: Shows how to access the standard input stream using the `useStdin` hook. This hook provides the `stdin` object, which can be used to handle user input events.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useStdin} from 'ink';\n\nconst Example = () => {\n\tconst {stdin} = useStdin();\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Focus Management with useFocusManager (JavaScript)\nDESCRIPTION: This code snippet shows how to enable focus management for all components using the `useFocusManager` hook in Ink. It calls `enableFocus` within a `useEffect` hook to ensure focus management is enabled when the component mounts. It depends on the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useFocusManager} from 'ink';\n\nconst Example = () => {\n\tconst {enableFocus} = useFocusManager();\n\n\tuseEffect(() => {\n\t\tenableFocus();\n\t}, []);\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Raw Mode with useStdin Hook in Ink\nDESCRIPTION: Illustrates how to set the raw mode of the standard input stream using the `setRawMode` function provided by the `useStdin` hook. Raw mode allows for capturing special keys like Ctrl+C. The example shows how to enable and disable raw mode within a `useEffect` hook.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useStdin} from 'ink';\n\nconst Example = () => {\n\tconst {setRawMode} = useStdin();\n\n\tuseEffect(() => {\n\t\tsetRawMode(true);\n\n\t\treturn () => {\n\t\t\tsetRawMode(false);\n\t\t};\n\t});\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Box Margin in Ink (JSX)\nDESCRIPTION: This example showcases how to use margin properties (`marginTop`, `marginBottom`, `marginLeft`, `marginRight`, `marginX`, `marginY`, `margin`) of the `<Box>` component in Ink.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<Box marginTop={2}>Top</Box>\n<Box marginBottom={2}>Bottom</Box>\n<Box marginLeft={2}>Left</Box>\n<Box marginRight={2}>Right</Box>\n<Box marginX={2}>Left and right</Box>\n<Box marginY={2}>Top and bottom</Box>\n<Box margin={2}>Top, bottom, left and right</Box>\n```\n\n----------------------------------------\n\nTITLE: Waiting Until Ink App Exits (JSX)\nDESCRIPTION: This snippet illustrates how to wait until an Ink application has been unmounted by using `waitUntilExit`. The example renders an application, unmounts it after 1 second with `setTimeout` and then uses `await waitUntilExit()` to wait for the unmount to complete. Requires the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_69\n\nLANGUAGE: jsx\nCODE:\n```\nconst {unmount, waitUntilExit} = render(<MyApp />);\n\nsetTimeout(unmount, 1000);\n\nawait waitUntilExit(); // resolves after `unmount()` is called\n```\n\n----------------------------------------\n\nTITLE: Box Padding in Ink (JSX)\nDESCRIPTION: This example showcases how to use padding properties (`paddingTop`, `paddingBottom`, `paddingLeft`, `paddingRight`, `paddingX`, `paddingY`, `padding`) of the `<Box>` component in Ink.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<Box paddingTop={2}>Top</Box>\n<Box paddingBottom={2}>Bottom</Box>\n<Box paddingLeft={2}>Left</Box>\n<Box paddingRight={2}>Right</Box>\n<Box paddingX={2}>Left and right</Box>\n<Box paddingY={2}>Top and bottom</Box>\n<Box padding={2}>Top, bottom, left and right</Box>\n```\n\n----------------------------------------\n\nTITLE: Disabling Focus Management with useFocusManager (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to disable focus management for all components using the `useFocusManager` hook in Ink. It calls `disableFocus` within a `useEffect` hook to ensure focus management is disabled when the component mounts. It requires the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useFocusManager} from 'ink';\n\nconst Example = () => {\n\tconst {disableFocus} = useFocusManager();\n\n\tuseEffect(() => {\n\t\tdisableFocus();\n\t}, []);\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Box justifyContent property in Ink (JSX)\nDESCRIPTION: Demonstrates how to use the `justifyContent` property of the `Box` component in Ink to control the horizontal alignment of its children.  The allowed values are `flex-start`, `center`, `flex-end`, `space-between`, `space-around`, and `space-evenly`. The code snippets illustrate the visual output of each value.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\n<Box justifyContent=\"flex-start\">\n\t<Text>X</Text>\n</Box>\n// [X      ]\n\n<Box justifyContent=\"center\">\n\t<Text>X</Text>\n</Box>\n// [   X   ]\n\n<Box justifyContent=\"flex-end\">\n\t<Text>X</Text>\n</Box>\n// [      X]\n\n<Box justifyContent=\"space-between\">\n\t<Text>X</Text>\n\t<Text>Y</Text>\n</Box>\n// [X      Y]\n\n<Box justifyContent=\"space-around\">\n\t<Text>X</Text>\n\t<Text>Y</Text>\n</Box>\n// [  X   Y  ]\n\n<Box justifyContent=\"space-evenly\">\n\t<Text>X</Text>\n\t<Text>Y</Text>\n</Box>\n// [   X   Y   ]\n```\n\n----------------------------------------\n\nTITLE: Box Flex Direction in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `flexDirection` property of the `<Box>` component to control the direction of the flex container (row, row-reverse, column, column-reverse).\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n<Box>\n\t<Box marginRight={1}>\n\t\t<Text>X</Text>\n\t</Box>\n\t<Text>Y</Text>\n</Box>\n// X Y\n\n<Box flexDirection=\"row-reverse\">\n\t<Text>X</Text>\n\t<Box marginRight={1}>\n\t\t<Text>Y</Text>\n\t</Box>\n</Box>\n// Y X\n\n<Box flexDirection=\"column\">\n\t<Text>X</Text>\n\t<Text>Y</Text>\n</Box>\n// X\n// Y\n\n<Box flexDirection=\"column-reverse\">\n\t<Text>X</Text>\n\t<Text>Y</Text>\n</Box>\n// Y\n// X\n```\n\n----------------------------------------\n\nTITLE: Exiting Ink App with useApp Hook\nDESCRIPTION: Demonstrates using the `useApp` hook to programmatically exit an Ink application.  The `exit` function returned by the hook can be called to unmount the app, optionally passing an error to reject the `waitUntilExit` promise.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useApp} from 'ink';\n\nconst Example = () => {\n\tconst {exit} = useApp();\n\n\t// Exit the app after 5 seconds\n\tuseEffect(() => {\n\t\tsetTimeout(() => {\n\t\t\texit();\n\t\t}, 5000);\n\t}, []);\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Transpiling JSX with Babel\nDESCRIPTION: This command uses Babel to transpile a JavaScript file containing JSX syntax (`source.js`) into a standard JavaScript file (`cli.js`) that can be executed by Node.js.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx babel source.js -o cli.js\n```\n\n----------------------------------------\n\nTITLE: Focusing Component by ID with useFocusManager (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to switch focus to a specific component using its ID with the `useFocusManager` hook in Ink. It uses `useInput` to listen for a specific input ('s' in this case) and then calls `focus` with the component's ID. Requires the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useFocusManager, useInput} from 'ink';\n\nconst Example = () => {\n\tconst {focus} = useFocusManager();\n\n\tuseInput(input => {\n\t\tif (input === 's') {\n\t\t\t// Focus the component with focus ID 'someId'\n\t\t\tfocus('someId');\n\t\t}\n\t});\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Rerendering Ink Components with Updated Props (JSX)\nDESCRIPTION: This code snippet demonstrates how to rerender an Ink component with updated props using the `rerender` function. It first renders a `Counter` component with an initial count and then rerenders it with an updated count. Requires the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_66\n\nLANGUAGE: jsx\nCODE:\n```\n// Update props of the root node\nconst {rerender} = render(<Counter count={1} />);\nrerender(<Counter count={2} />);\n```\n\n----------------------------------------\n\nTITLE: Running the CLI Application with Node.js\nDESCRIPTION: This command executes the transpiled JavaScript file (`cli.js`) using Node.js, which in turn runs the Ink application and displays its output in the terminal.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnode cli\n```\n\n----------------------------------------\n\nTITLE: Box Gap in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `gap` property of the `<Box>` component to control the gap between elements.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<Box gap={1} width={3} flexWrap=\"wrap\">\n\t<Text>A</Text>\n\t<Text>B</Text>\n\t<Text>C</Text>\n</Box>\n// A B\n//\n// C\n```\n\n----------------------------------------\n\nTITLE: Transforming Text Output with Ink\nDESCRIPTION: Demonstrates how to use the `<Transform>` component in Ink to modify the text output of child components. The example converts the \"Hello World\" text to uppercase using the `transform` prop.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_49\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, Transform} from 'ink';\n\nconst Example = () => (\n\t<Transform transform={output => output.toUpperCase()}>\n\t\t<Text>Hello World</Text>\n\t</Transform>\n);\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Box Flex Grow in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `flexGrow` property of the `<Box>` component to control how an element grows to fill available space.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n<Box>\n\t<Text>Label:</Text>\n\t<Box flexGrow={1}>\n\t\t<Text>Fills all remaining space</Text>\n\t</Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Replacing Root Node with rerender Function (JSX)\nDESCRIPTION: This code snippet showcases how to replace the root node of an Ink application using the `rerender` function. It initially renders an `OldCounter` component and then replaces it with a `NewCounter` component. Requires the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_67\n\nLANGUAGE: jsx\nCODE:\n```\n// Replace root node\nconst {rerender} = render(<OldCounter />);\nrerender(<NewCounter />);\n```\n\n----------------------------------------\n\nTITLE: Box Width in Ink (JSX)\nDESCRIPTION: This example demonstrates how to set the width of the `<Box>` component in Ink, both with fixed values and percentages.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Box width={4}>\n\t<Text>X</Text>\n</Box>\n//=> 'X   '\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Box width={10}>\n\t<Box width=\"50%\">\n\t\t<Text>X</Text>\n\t</Box>\n\t<Text>Y</Text>\n</Box>\n//=> 'X    Y'\n```\n\n----------------------------------------\n\nTITLE: Rendering a Focused Text Component with Ink (JSX)\nDESCRIPTION: This code snippet demonstrates how to use the `useFocus` hook in Ink to determine if a component is focused. It renders a `Text` component that displays a message indicating whether it has focus. It requires the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_60\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, useFocus, Text} from 'ink';\n\nconst Example = () => {\n\tconst {isFocused} = useFocus();\n\n\treturn <Text>{isFocused ? 'I am focused' : 'I am not focused'}</Text>;\n};\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Box Height in Ink (JSX)\nDESCRIPTION: This example demonstrates how to set the height of the `<Box>` component in Ink, both with fixed values and percentages.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Box height={4}>\n\t<Text>X</Text>\n</Box>\n//=> 'X\\n\\n\\n'\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Box height={6} flexDirection=\"column\">\n\t<Box height=\"50%\">\n\t\t<Text>X</Text>\n\t</Box>\n\t<Text>Y</Text>\n</Box>\n//=> 'X\\n\\n\\nY\\n\\n'\n```\n\n----------------------------------------\n\nTITLE: Measuring Element Dimensions in Ink (JSX)\nDESCRIPTION: This example shows how to measure the width and height of a Box element in Ink. It uses useRef to obtain a reference to the Box and then passes this reference to measureElement to get its dimensions. The code assumes initial render has occured and calls measureElement inside `useEffect`. Requires the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_71\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, measureElement, Box, Text} from 'ink';\n\nconst Example = () => {\n\tconst ref = useRef();\n\n\tuseEffect(() => {\n\t\tconst {width, height} = measureElement(ref.current);\n\t\t// width = 100, height = 1\n\t}, []);\n\n\treturn (\n\t\t<Box width={100}>\n\t\t\t<Box ref={ref}>\n\t\t\t\t<Text>This box will stretch to 100 width</Text>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Box Flex Wrap in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `flexWrap` property of the `<Box>` component to control whether the flex container wraps its items (nowrap, wrap, wrap-reverse).\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n<Box width={2} flexWrap=\"wrap\">\n\t<Text>A</Text>\n\t<Text>BC</Text>\n</Box>\n// A\n// B C\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Box flexDirection=\"column\" height={2} flexWrap=\"wrap\">\n\t<Text>A</Text>\n\t<Text>B</Text>\n\t<Text>C</Text>\n</Box>\n// A C\n// B\n```\n\n----------------------------------------\n\nTITLE: Text Background Color in Ink (JSX)\nDESCRIPTION: This example illustrates how to use the `backgroundColor` property of the `<Text>` component to change the background color of the text.  It accepts various color formats similar to the `color` property.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Text backgroundColor=\"green\" color=\"white\">Green</Text>\n<Text backgroundColor=\"#005cc5\" color=\"white\">Blue</Text>\n<Text backgroundColor=\"rgb(232, 131, 136)\" color=\"white\">Red</Text>\n```\n\n----------------------------------------\n\nTITLE: Custom borderStyle in Ink (JSX)\nDESCRIPTION: Shows how to create a custom border style for the `Box` component in Ink by providing an object with properties for each side and corner of the border.  This allows for unique and customized border appearances.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n\tborderStyle={{\n\t\ttopLeft: '↘',\n\t\ttop: '↓',\n\t\ttopRight: '↙',\n\t\tleft: '→',\n\t\tbottomLeft: '↗',\n\t\tbottom: '↑',\n\t\tbottomRight: '↖',\n\t\tright: '←'\n\t}}\n>\n\t<Text>Custom</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Box Row Gap in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `rowGap` property of the `<Box>` component to control the gap between rows.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<Box flexDirection=\"column\" rowGap={1}>\n\t<Text>A</Text>\n\t<Text>B</Text>\n</Box>\n// A\n//\n// B\n```\n\n----------------------------------------\n\nTITLE: Static component usage in Ink (JSX)\nDESCRIPTION: Illustrates the usage of the `<Static>` component in Ink for rendering non-changing content. The example simulates completed tests and renders them above any dynamically updating content. It uses `useState` and `useEffect` hooks for demonstration.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_46\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useEffect} from 'react';\nimport {render, Static, Box, Text} from 'ink';\n\nconst Example = () => {\n\tconst [tests, setTests] = useState([]);\n\n\tuseEffect(() => {\n\t\tlet completedTests = 0;\n\t\tlet timer;\n\n\t\tconst run = () => {\n\t\t\t// Fake 10 completed tests\n\t\t\tif (completedTests++ < 10) {\n\t\t\t\tsetTests(previousTests => [\n\t\t\t\t\t...previousTests,\n\t\t\t\t\t{\n\t\t\t\t\t\tid: previousTests.length,\n\t\t\t\t\t\ttitle: `Test #${previousTests.length + 1}`\n\t\t\t\t\t}\n\t\t\t\t]);\n\n\t\t\t\ttimer = setTimeout(run, 100);\n\t\t\t}\n\t\t};\n\n\t\trun();\n\n\t\treturn () => {\n\t\t\tclearTimeout(timer);\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t{/* This part will be rendered once to the terminal */}\n\t\t\t<Static items={tests}>\n\t\t\t\t{test => (\n\t\t\t\t\t<Box key={test.id}>\n\t\t\t\t\t\t<Text color=\"green\">✔ {test.title}</Text>\n\t\t\t\t\t</Box>\n\t\t\t\t)}\n\t\t\t</Static>\n\n\t\t\t{/* This part keeps updating as state changes */}\n\t\t\t<Box marginTop={1}>\n\t\t\t\t<Text dimColor>Completed tests: {tests.length}</Text>\n\t\t\t</Box>\n\t\t</>\n\t);\n};\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Box Column Gap in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `columnGap` property of the `<Box>` component to control the gap between columns.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<Box columnGap={1}>\n\t<Text>A</Text>\n\t<Text>B</Text>\n</Box>\n// A B\n```\n\n----------------------------------------\n\nTITLE: Box Flex Basis in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `flexBasis` property of the `<Box>` component to control the initial size of an element before available space is distributed.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n<Box width={6}>\n\t<Box flexBasis={3}>\n\t\t<Text>X</Text>\n\t</Box>\n\t<Text>Y</Text>\n</Box>\n//=> 'X  Y'\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Box width={6}>\n\t<Box flexBasis=\"50%\">\n\t\t<Text>X</Text>\n\t</Box>\n\t<Text>Y</Text>\n</Box>\n//=> 'X  Y'\n```\n\n----------------------------------------\n\nTITLE: Box Flex Shrink in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `flexShrink` property of the `<Box>` component to control how an element shrinks when there is not enough space.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n<Box width={20}>\n\t<Box flexShrink={2} width={10}>\n\t\t<Text>Will be 1/4</Text>\n\t</Box>\n\t<Box width={10}>\n\t\t<Text>Will be 3/4</Text>\n\t</Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Accessing Stdout Stream with useStdout Hook in Ink\nDESCRIPTION: Shows how to access the standard output stream using the `useStdout` hook. This hook provides the `stdout` object, which represents the stream where Ink renders the application.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useStdout} from 'ink';\n\nconst Example = () => {\n\tconst {stdout} = useStdout();\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Box borderColor property in Ink (JSX)\nDESCRIPTION: Demonstrates how to change the color of the border of a `Box` component in Ink using the `borderColor` property.  It sets the border style to `round` and the color to `green`.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStyle=\"round\" borderColor=\"green\">\n\t<Text>Green Rounded Box</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Writing to Stderr with useStderr Hook in Ink\nDESCRIPTION: Demonstrates how to write directly to the standard error stream using the `write` function provided by the `useStderr` hook. This allows for displaying error messages or other diagnostic information outside of Ink's rendering area.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useStderr} from 'ink';\n\nconst Example = () => {\n\tconst {write} = useStderr();\n\n\tuseEffect(() => {\n\t\t// Write a single message to stderr, above Ink's output\n\t\twrite('Hello from Ink to stderr\\n');\n\t}, []);\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Focusing Next Component with useFocusManager (JavaScript)\nDESCRIPTION: This code snippet illustrates how to switch focus to the next focusable component using the `useFocusManager` hook in Ink. It calls `focusNext` within a `useEffect` hook to trigger the focus switch. It is dependent on the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useFocusManager} from 'ink';\n\nconst Example = () => {\n\tconst {focusNext} = useFocusManager();\n\n\tuseEffect(() => {\n\t\tfocusNext();\n\t}, []);\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Spacer component in Ink (JSX)\nDESCRIPTION: Demonstrates the usage of the `Spacer` component in Ink for flexible spacing within a `Box`. When used in a row layout, it pushes elements to the sides. In a column layout, it pushes elements to the top and bottom. This example uses a row layout.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_44\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, Box, Text, Spacer} from 'ink';\n\nconst Example = () => (\n\t<Box>\n\t\t<Text>Left</Text>\n\t\t<Spacer />\n\t\t<Text>Right</Text>\n\t</Box>\n);\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Focusing Previous Component with useFocusManager (JavaScript)\nDESCRIPTION: This code snippet shows how to switch focus to the previous focusable component using the `useFocusManager` hook in Ink. It calls `focusPrevious` within a `useEffect` hook to trigger the focus switch. It requires the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useFocusManager} from 'ink';\n\nconst Example = () => {\n\tconst {focusPrevious} = useFocusManager();\n\n\tuseEffect(() => {\n\t\tfocusPrevious();\n\t}, []);\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Raw Mode Support with useStdin Hook\nDESCRIPTION: Demonstrates how to check if the current terminal supports raw mode using the `isRawModeSupported` property provided by the `useStdin` hook. This allows for gracefully falling back to alternative input methods when raw mode is not available.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_54\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useStdin} from 'ink';\n\nconst Example = () => {\n\tconst {isRawModeSupported} = useStdin();\n\n\treturn isRawModeSupported ? (\n\t\t<MyInputComponent />\n\t) : (\n\t\t<MyComponentThatDoesntUseInput />\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Clearing Ink App Output (JSX)\nDESCRIPTION: This code snippet demonstrates how to clear the output of an Ink application using the `clear` function. It renders a `MyApp` component and then clears its output from the terminal. Requires the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_70\n\nLANGUAGE: jsx\nCODE:\n```\nconst {clear} = render(<MyApp />);\nclear();\n```\n\n----------------------------------------\n\nTITLE: Inverse Color in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `inverse` property of the `<Text>` component to inverse the background and foreground colors.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Text inverse color=\"yellow\">\n\tInversed Yellow\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Installing Babel React Preset\nDESCRIPTION: This command installs the `@babel/preset-react` Babel preset, which is required for transpiling React JSX syntax. It's a prerequisite for using Ink with JavaScript.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/preset-react\n```\n\n----------------------------------------\n\nTITLE: Implementing Hanging Indent with Ink Transform\nDESCRIPTION: Illustrates how to create a `HangingIndent` component using `<Transform>` to indent all lines except the first. This is useful for formatting multi-line text in a terminal interface.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_50\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, Transform} from 'ink';\n\nconst HangingIndent = ({content, indent = 4, children, ...props}) => (\n\t<Transform\n\t\ttransform={(line, index) =>\n\t\t\tindex === 0 ? line : ' '.repeat(indent) + line\n\t\t}\n\t\t{...props}\n\t>\n\t\t{children}\n\t</Transform>\n);\n\nconst text =\n\t'WHEN I WROTE the following pages, or rather the bulk of them, ' +\n\t'I lived alone, in the woods, a mile from any neighbor, in a ' +\n\t'house which I had built myself, on the shore of Walden Pond, ' +\n\t'in Concord, Massachusetts, and earned my living by the labor ' +\n\t'of my hands only. I lived there two years and two months. At ' +\n\t'present I am a sojourner in civilized life again.';\n\n// Other text properties are allowed as well\nrender(\n\t<HangingIndent bold dimColor indent={4}>\n\t\t{text}\n\t</HangingIndent>\n);\n```\n\n----------------------------------------\n\nTITLE: Box borderTopColor property in Ink (JSX)\nDESCRIPTION: Illustrates how to change the color of the top border of a `Box` component in Ink using the `borderTopColor` property. It sets the border style to `round` and the top border color to `green`.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStyle=\"round\" borderTopColor=\"green\">\n\t<Text>Hello world</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Box Align Items in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `alignItems` property of the `<Box>` component to control how items are aligned along the cross axis (flex-start, center, flex-end).\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n<Box alignItems=\"flex-start\">\n\t<Box marginRight={1}>\n\t\t<Text>X</Text>\n\t</Box>\n\t<Text>\n\t\tA\n\t\t<Newline/>\n\t\tB\n\t\t<Newline/>\n\t\tC\n\t</Text>\n</Box>\n// X A\n//   B\n//   C\n\n<Box alignItems=\"center\">\n\t<Box marginRight={1}>\n\t\t<Text>X</Text>\n\t</Box>\n\t<Text>\n\t\tA\n\t\t<Newline/>\n\t\tB\n\t\t<Newline/>\n\t\tC\n\t</Text>\n</Box>\n//   A\n// X B\n//   C\n\n<Box alignItems=\"flex-end\">\n\t<Box marginRight={1}>\n\t\t<Text>X</Text>\n\t</Box>\n\t<Text>\n\t\tA\n\t\t<Newline/>\n\t\tB\n\t\t<Newline/>\n\t\tC\n\t</Text>\n</Box>\n//   A\n//   B\n// X C\n```\n\n----------------------------------------\n\nTITLE: Box borderRightColor property in Ink (JSX)\nDESCRIPTION: Illustrates how to change the color of the right border of a `Box` component in Ink using the `borderRightColor` property. It sets the border style to `round` and the right border color to `green`.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStyle=\"round\" borderRightColor=\"green\">\n\t<Text>Hello world</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Box borderLeftColor property in Ink (JSX)\nDESCRIPTION: Illustrates how to change the color of the left border of a `Box` component in Ink using the `borderLeftColor` property. It sets the border style to `round` and the left border color to `green`.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStyle=\"round\" borderLeftColor=\"green\">\n\t<Text>Hello world</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Box borderBottomColor property in Ink (JSX)\nDESCRIPTION: Illustrates how to change the color of the bottom border of a `Box` component in Ink using the `borderBottomColor` property. It sets the border style to `round` and the bottom border color to `green`.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_36\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStyle=\"round\" borderBottomColor=\"green\">\n\t<Text>Hello world</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Accessing Stderr Stream with useStderr Hook in Ink\nDESCRIPTION: Shows how to access the standard error stream using the `useStderr` hook. This hook provides the `stderr` object, which represents the error stream.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useStderr} from 'ink';\n\nconst Example = () => {\n\tconst {stderr} = useStderr();\n\n\treturn …\n};\n```\n\n----------------------------------------\n\nTITLE: Static component with style in Ink (JSX)\nDESCRIPTION: Illustrates how to apply styles to the container of child elements within a Static component using the `style` prop.  The example shows how to apply padding to the container.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_47\n\nLANGUAGE: jsx\nCODE:\n```\n<Static items={...} style={{padding: 1}}>\n\t{...}\n</Static>\n```\n\n----------------------------------------\n\nTITLE: Spacer component in column layout Ink (JSX)\nDESCRIPTION: Demonstrates the usage of the `Spacer` component in Ink for flexible spacing within a `Box` using a column layout.  It pushes elements to the top and bottom, requiring a specified height for the container to visualize the effect.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_45\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, Box, Text, Spacer} from 'ink';\n\nconst Example = () => (\n\t<Box flexDirection=\"column\" height={10}>\n\t\t<Text>Top</Text>\n\t\t<Spacer />\n\t\t<Text>Bottom</Text>\n\t</Box>\n);\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Static component with children function in Ink (JSX)\nDESCRIPTION: Demonstrates how to use a function as a child of the Static component to render each item in the `items` array.  It emphasizes the importance of assigning a unique `key` prop to the root component rendered by the function.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_48\n\nLANGUAGE: jsx\nCODE:\n```\n<Static items={['a', 'b', 'c']}>\n\t{(item, index) => {\n\t\t// This function is called for every item in ['a', 'b', 'c']\n\t\t// `item` is 'a', 'b', 'c'\n\t\t// `index` is 0, 1, 2\n\t\treturn (\n\t\t\t<Box key={index}>\n\t\t\t\t<Text>Item: {item}</Text>\n\t\t\t</Box>\n\t\t);\n\t}}\n</Static>\n```\n\n----------------------------------------\n\nTITLE: Running Ink Examples with npm\nDESCRIPTION: This command demonstrates how to execute the provided examples using the `npm run example` command. It requires Node.js and npm to be installed.  The command takes the example name as an argument, which corresponds to a directory within the `/examples` directory.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\nnpm run example examples/[example name]\n# e.g. npm run example examples/borders\n```\n\n----------------------------------------\n\nTITLE: Box Align Self in Ink (JSX)\nDESCRIPTION: This example demonstrates how to use the `alignSelf` property of the `<Box>` component to control how a specific item is aligned along the cross axis (auto, flex-start, center, flex-end).\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\n<Box height={3}>\n\t<Box alignSelf=\"flex-start\">\n\t\t<Text>X</Text>\n\t</Box>\n</Box>\n// X\n//\n//\n\n<Box height={3}>\n\t<Box alignSelf=\"center\">\n\t\t<Text>X</Text>\n\t</Box>\n</Box>\n//\n// X\n//\n\n<Box height={3}>\n\t<Box alignSelf=\"flex-end\">\n\t\t<Text>X</Text>\n\t</Box>\n</Box>\n//\n//\n// X\n```\n\n----------------------------------------\n\nTITLE: Newline component usage in Ink (JSX)\nDESCRIPTION: Shows how to use the `Newline` component in Ink to insert a newline character within a `Text` component.  The `count` property specifies the number of newlines to insert (default is 1). The example demonstrates how to render text on separate lines.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_43\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, Text, Newline} from 'ink';\n\nconst Example = () => (\n\t<Text>\n\t\t<Text color=\"green\">Hello</Text>\n\t\t<Newline />\n\t\t<Text color=\"red\">World</Text>\n\t</Text>\n);\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Box borderDimColor property in Ink (JSX)\nDESCRIPTION: Demonstrates how to dim the color of all borders of a `Box` component in Ink using the `borderDimColor` property. This property dims all the border colors.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStyle=\"round\" borderDimColor>\n\t<Text>Hello world</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Box borderRightDimColor property in Ink (JSX)\nDESCRIPTION: Illustrates how to dim the color of the right border of a `Box` component in Ink using the `borderRightDimColor` property. This property only affects the right border.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_42\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStyle=\"round\" borderRightDimColor>\n\t<Text>Hello world</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Box borderLeftDimColor property in Ink (JSX)\nDESCRIPTION: Illustrates how to dim the color of the left border of a `Box` component in Ink using the `borderLeftDimColor` property. This property only affects the left border.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_41\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStyle=\"round\" borderLeftDimColor>\n\t<Text>Hello world</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Unmounting Ink App (JSX)\nDESCRIPTION: This code snippet demonstrates how to manually unmount an Ink application using the `unmount` function. It renders a `MyApp` component and then immediately unmounts it. Requires the 'ink' library.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_68\n\nLANGUAGE: jsx\nCODE:\n```\nconst {unmount} = render(<MyApp />);\nunmount();\n```\n\n----------------------------------------\n\nTITLE: Box borderTopDimColor property in Ink (JSX)\nDESCRIPTION: Illustrates how to dim the color of the top border of a `Box` component in Ink using the `borderTopDimColor` property.  This property only affects the top border.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_39\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStyle=\"round\" borderTopDimColor>\n\t<Text>Hello world</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with React Preset\nDESCRIPTION: This JSON configuration for Babel enables the `@babel/preset-react` preset, which allows Babel to correctly transpile React JSX syntax for Ink projects.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"presets\": [\"@babel/preset-react\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Box borderBottomDimColor property in Ink (JSX)\nDESCRIPTION: Illustrates how to dim the color of the bottom border of a `Box` component in Ink using the `borderBottomDimColor` property. This property only affects the bottom border.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_40\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStyle=\"round\" borderBottomDimColor>\n\t<Text>Hello world</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Dim Color in Ink (JSX)\nDESCRIPTION: This example shows how to use the `dimColor` property of the `<Text>` component to dim the color of the text, emitting a small amount of light.\nSOURCE: https://github.com/vadimdemedes/ink/blob/master/readme.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Text color=\"red\" dimColor>\n\tDimmed Red\n</Text>\n```"
  }
]