[
  {
    "owner": "rexrainbow",
    "repo": "phaser3-rex-notes",
    "content": "TITLE: Loading Images in Preload Stage in Phaser 3\nDESCRIPTION: Demonstrates how to load image assets during the preload stage in Phaser 3. The loader will automatically start loading when placed in the preload method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n// scene.load.image(config); // config: {key, url}\n```\n\n----------------------------------------\n\nTITLE: Creating Animations from Aseprite in Phaser 3\nDESCRIPTION: Demonstrates how to create animations from Aseprite data in Phaser 3. This method allows for easy integration of Aseprite animations into Phaser games.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/animation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.anims.createFromAseprite(key);\n// scene.anims.createFromAseprite(key, tags, target);\n```\n\n----------------------------------------\n\nTITLE: Physics Group Configuration in Phaser 3\nDESCRIPTION: Configuration object for physics groups in Phaser 3. Contains properties for setting collision, movement, gravity, friction, and other physics properties that will be applied to all objects in the group.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    classType: ArcadeSprite,\n    enable: true,\n    collideWorldBounds: false,\n    customBoundsRectangle: null,\n    accelerationX: 0,\n    accelerationY: 0,\n    allowDrag: true,\n    allowGravity: true,\n    allowRotation: true,\n    useDamping: false,\n    bounceX: 0,\n    bounceY: 0,\n    dragX: 0,\n    dragY: 0,\n    gravityX: 0,\n    gravityY: 0,\n    frictionX: 0,\n    frictionY: 0,\n    maxSpeed: -1,\n    velocityX: 0,\n    velocityY: 0,\n    maxVelocityX: 10000,\n    maxVelocityY: 10000,\n    angularVelocity: 0,\n    angularAcceleration: 0,\n    angularDrag: 0,\n    mass: 0,\n    immovable: false,\n\n    maxSize: -1,\n    runChildUpdate: false\n};\n```\n\n----------------------------------------\n\nTITLE: Controlling Direct Control of Physics Body in Phaser 3\nDESCRIPTION: Shows how to enable or disable direct control of a physics body, which is useful when the game object is controlled by tweens or dragging.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setDirectControl();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.directControl = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setDirectControl(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.directControl = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: JavaScript code to initialize a Firebase application with configuration parameters including API key, authentication domain, database URL, project ID, storage bucket, and messaging sender ID.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Phaser Game Configuration\nDESCRIPTION: Provides a complete configuration object for Phaser games, including detailed settings for scale, rendering, physics, input, loader, audio, plugins, and performance options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: Phaser.AUTO,\n    parent: null,\n    width: 800,\n    height: 600,\n\n    scale: {\n        mode: Phaser.Scale.NONE,\n        autoCenter: Phaser.Scale.NO_CENTER,\n        resizeInterval: 500,\n        // width:\n        // height:\n        // zoom:\n        // parent:\n        expandParent: true.\n        // min: {width: 0, height: 0},\n        // max: {width: 0, height: 0},\n        // snap: {width: 0, height: 0},\n        // autoRound: false,\n        fullscreenTarget: null,\n    },\n\n    autoRound: false,\n    canvas: null,\n    canvasStyle: null,\n\n    scene: null,\n\n    callbacks: {\n        preBoot: NOOP,\n        postBoot: NOOP\n    },\n\n    seed: [ (Date.now() * Math.random()).toString() ],\n\n    title: '',\n    url: 'https://phaser.io',\n    version: '',\n\n    autoFocus: true,\n    input: {\n        keyboard: {\n            target: window\n        },\n        mouse: {\n            target: null,\n            capture: true\n        },\n        activePointers: 1,\n        touch: {\n            target: null,\n            capture: true\n        },\n        smoothFactor: 0,\n        gamepad: false,\n        windowEvents: true,\n    },\n    disableContextMenu: false,\n\n    backgroundColor: 0,\n\n    render: {\n        antialias: true,\n        antialiasGL: true,\n        desynchronized: false,\n        pixelArt: false,\n        roundPixels: false,\n        transparent: false,\n        clearBeforeRender: true,\n        preserveDrawingBuffer: false,\n        premultipliedAlpha: true,\n        failIfMajorPerformanceCaveat: false,\n        powerPreference: 'default', // 'high-performance', 'low-power' or 'default'\n        batchSize: 4096,\n        maxLights: 10,\n        maxTextures: -1,\n        mipmapFilter: 'LINEAR', // 'NEAREST', 'LINEAR', 'NEAREST_MIPMAP_NEAREST', 'LINEAR_MIPMAP_NEAREST', 'NEAREST_MIPMAP_LINEAR', 'LINEAR_MIPMAP_LINEAR'\n        autoMobilePipeline: true,\n        defaultPipeline: 'MultiPipeline',\n        pipeline:[]\n    },\n    disablePreFX: false,\n    disablePostFX: false,\n\n    physics: {\n        default: false,  // 'arcade', or 'matter'\n        arcade: {...},   // See arcade-world#Configuration\n        matter: {...},   // See matterjs-world#Configuration\n    },\n\n    loader:{\n        baseURL: '',\n        path: '',\n        maxParallelDownloads: 4,\n        crossOrigin: undefined,\n        responseType: '',\n        async: true,\n        user: '',\n        password: '',\n        timeout: 0,\n        maxRetries: 2,\n        withCredentials: false,\n        imageLoadType: 'XHR',    // 'HTMLImageElement' \n        localScheme: [ 'file://', 'capacitor://' ]\n    },\n\n    images: {\n        default: 'data:image/png;base64....',\n        missing: 'data:image/png;base64....',\n        white: 'data:image/png;base64....',\n    },\n\n    audio: {\n        disableWebAudio: false,\n        context:\n        noAudio: false,\n    },\n\n    dom: {\n        createContainer: false,\n        behindCanvas: false,\n        pointerEvents: 'none'\n    },\n\n    plugins: {\n        global: [\n            //{key, plugin, start}\n        ],\n        scene: [\n            // ...\n        ]\n    },\n\n    pipeline: { key:PipelineClass },\n\n    fps: {\n        min: 10,\n        target: 60,\n        limit: 0,\n        forceSetTimeOut: false,\n        deltaHistory: 10,\n        panicMax: 120,\n        smoothStep: true,\n    },\n\n    banner: {\n        hidePhaser: false,\n        text: '#ffffff',\n        background: [\n            '#ff0000',\n            '#ffff00',\n            '#00ff00',\n            '#00ffff',\n            '#000000'\n        ]\n    },\n    // banner: false,\n\n    stableSort: -1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New User with Email and Password\nDESCRIPTION: Creates a new user account using email and password credentials. This method registers a new user in the Firebase Authentication system with the provided email and password.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfirebaseApp.auth().createUserWithEmailAndPassword(email, password).catch(function(error) {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SmoothedKeyControl for Camera in Phaser 3\nDESCRIPTION: This snippet demonstrates how to create a SmoothedKeyControl object for camera control in Phaser 3. It includes options for directional movement, zooming, acceleration, drag, and speed limits.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-controller.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar controls = new Phaser.Cameras.Controls.SmoothedKeyControl({\n    camera: camera,\n\n    left: cursors.left,    // { isDown, isUp }\n    right: cursors.right,  // { isDown, isUp }\n    up: cursors.up,        // { isDown, isUp }\n    down: cursors.down,    // { isDown, isUp }\n    zoomIn: null,          // { isDown, isUp }\n    zoomOut: null,         // { isDown, isUp }\n\n    zoomSpeed: 0.01,\n    minZoom: 0.001,\n    maxZoom: 1000,\n\n    acceleration: null,\n    // acceleration: {\n    //    x: 0,\n    //    y: 0\n    // }\n\n    drag: null,\n    // drag: {\n    //    x: 0,\n    //    y: 0\n    // }\n\n    maxSpeed: null\n    // maxSpeed: {\n    //    x: 0,\n    //    y: 0\n    // }\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Children in Phaser 3 Containers\nDESCRIPTION: Shows various methods for adding, removing, and manipulating child objects within a Container. These methods allow for dynamic management of Container contents.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/container.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.add(child);  // child: a game object or an array of game objects\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.addAt(child, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasChild = container.exists(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.remove(child);\n// container.remove(child, true);  // remove child object and destroy it\n```\n\n----------------------------------------\n\nTITLE: Handling Animation Events in Phaser 3\nDESCRIPTION: Demonstrates how to set up event listeners for various animation-related events in Phaser 3, such as adding or removing animations, and pausing or resuming all animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/animation.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.anims.on('add', function(key, anim) {});\n\nscene.anims.on('remove', function(key, anim) {});\n\nscene.anims.on('pauseall', function() {});\n\nscene.anims.on('resumeall', function() {});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Phaser 3 Scene with Options\nDESCRIPTION: Basic configuration object for initializing a Phaser 3 scene with various optional parameters. The configuration allows customization of scene properties, camera settings, physics, loaders, and more.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scene.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n  key: \"\",\n  // active: false,\n  // visible: true,\n  // pack: false,\n  // cameras: null,\n  // map: {},\n  // physics: {},\n  // loader: {},\n  // plugins: false,\n  // input: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Group Configuration Object Structure in Phaser 3\nDESCRIPTION: Defines the structure of the configuration object used when creating a Group, including options for class type, size limits, and callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    classType: Phaser.GameObjects.Sprite,\n    defaultKey: null,\n    defaultFrame: null,\n    active: true,\n    maxSize: -1,\n    runChildUpdate: false,\n    createCallback: null,\n    removeCallback: null,\n    createMultipleCallback: null\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Scene State in Phaser 3\nDESCRIPTION: Contains methods for pausing, resuming, putting to sleep, and waking scenes, as well as switching between scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.pause(key);\n// scene.scene.pause();  // pause myself\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.resume(key);\n// scene.scene.resume();  // resume myself\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.sleep(key);\n// scene.scene.sleep();  // sleep myself\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.wake(key);\n// scene.scene.wake();  // wake-up myself\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.switch(key, data);\n```\n\n----------------------------------------\n\nTITLE: Configuring Scale Manager in Phaser 3 Game Configuration\nDESCRIPTION: Sets up the scale manager in the game configuration object. This includes setting the parent container, game size, scale mode, auto-centering, minimum and maximum size constraints, and zoom level.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scalemanager.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    parent: divId,\n\n    // Game size\n    width: 1024,\n    height: 768,\n\n    scale: {\n        // Or set parent divId here\n        parent: divId,\n\n        mode: Phaser.Scale.FIT,\n        autoCenter: Phaser.Scale.CENTER_BOTH,\n\n        // Or put game size here\n        // width: 1024,\n        // height: 768,\n\n        // Minimum size\n        min: {\n            width: 800,\n            height: 600\n        },\n        // Or set minimum size like these\n        // minWidth: 800,\n        // minHeight: 600,\n\n        // Maximum size\n        max: {\n            width: 1600,\n            height: 1200\n        },\n        // Or set maximum size like these\n        // maxWidth: 1600,\n        // maxHeight: 1200,\n\n        zoom: 1,  // Size of game canvas = game size * zoom\n    },\n    autoRound: false\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Authentication\nDESCRIPTION: Handles authentication using Google as the identity provider. Creates a popup for the user to sign in with their Google credentials and returns authentication results including access token and user data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar provider = new firebase.auth.GoogleAuthProvider();\nfirebaseApp.auth().signInWithPopup(provider).then(function (result) {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    var token = result.credential.accessToken;\n    // The signed-in user info.\n    var user = result.user;\n    // ...\n    console.log(user);\n}).catch(function (error) {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message;\n    // The email of the user's account used.\n    var email = error.email;\n    // The firebase.auth.AuthCredential type that was used.\n    var credential = error.credential;\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Key Objects in Phaser 3\nDESCRIPTION: Demonstrates various methods for creating key objects in Phaser 3, including single key, multiple keys, and custom key mappings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardevents.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObject = scene.input.keyboard.addKey('W');\n// var keyObject = scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObject = scene.input.keyboard.addKey('W', enableCapture, emitOnRepeat);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObjects = scene.input.keyboard.addKeys('W,S,A,D');\n// var keyObjects = scene.input.keyboard.addKeys('W,S,A,D', enableCapture, emitOnRepeat);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObjects = scene.input.keyboard.addKeys({\n    up: 'W',\n    down: 'S',\n    left: 'A',\n    right: 'D'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Configuration in Phaser 3\nDESCRIPTION: Demonstrates how to create an animation configuration object in Phaser 3. This object includes various properties for controlling animation behavior, timing, and appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/animation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar animationConfig = {\n    key: '',\n\n    frames: [],\n\n    sortFrames: true,\n    defaultTextureKey: null,\n    skipMissedFrames: true,\n    randomFrame: false,\n\n    // time\n    delay: 0,\n    duration: null,\n    frameRate: null,\n    timeScale: 1,\n\n    // repeat\n    repeat: 0,              // set to (-1) to repeat forever\n    repeatDelay: 0,\n    yoyo: false,\n\n    // visible\n    showBeforeDelay: false,\n    showOnStart: false,\n    hideOnComplete: false\n};\n\nscene.anims.create(animationConfig);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tween Animation in Phaser 3\nDESCRIPTION: This snippet demonstrates how to create a basic tween animation in Phaser 3, showing various property targeting methods including direct values, relative values, random values, and callback-based values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tween.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar tween = scene.tweens.add({\n    targets: gameObject,\n    x: 1,\n    // x: '+=1',\n    // x: '-=1',\n    // x: '*=1',\n    // x: '/=1',\n    // x: 'random(0.25, 0.75)',\n    // x: 'int(10, 100)',\n    // x: [100, 300, 200, 600],\n    // x: { from: 0, to: 1 },\n    // x: { start: 0, to: 1 },  \n    // x: { start: value0, from: value1, to: value2 },  \n    // x: {\n    //      getActive: function (target, key, value, targetIndex, totalTargets, tween) { return newValue; },\n    //      getStart: function (target, key, value, targetIndex, totalTargets, tween) { return newValue; },\n    //      getEnd: function (target, key, value, targetIndex, totalTargets, tween) { return newValue; }\n    // },\n    ease: 'Linear',       // 'Cubic', 'Elastic', 'Bounce', 'Back'\n    duration: 1000,\n    repeat: 0,            // -1: infinity\n    yoyo: false,\n\n    // interpolation: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Camera Objects in Phaser 3\nDESCRIPTION: Demonstrates various methods to get camera objects in a Phaser 3 scene, including accessing the main camera, getting a camera by name, and adding new cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar camera = scene.cameras.main;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar camera = scene.cameras.getCamera(name);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar camera = scene.cameras.add();\n// var camera = scene.cameras.add(x, y, width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar camera = scene.cameras.add(undefined, undefined, undefined, undefined, false, name);\n// var camera = scene.cameras.add(x, y, width, height, makeMain, name);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.cameras.addExisting(camera);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Game Object Bounds in Phaser 3\nDESCRIPTION: Demonstrates various methods to get the bounds and key points of a game object, including corners, centers, and overall bounds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar output = gameObject.getTopLeft(output);     // output: {x, y}\nvar output = gameObject.getTopCenter(output);     // output: {x, y}\nvar output = gameObject.getTopRight(output);    // output: {x, y}\nvar output = gameObject.getLeftCenter(output);    // output: {x, y}\nvar output = gameObject.getRightCenter(output);    // output: {x, y}\nvar output = gameObject.getBottomLeft(output);  // output: {x, y}\nvar output = gameObject.getBottomCenter(output);     // output: {x, y}\nvar output = gameObject.getBottomRight(output); // output: {x, y}\nvar output = gameObject.getCenter(output);      // output: {x, y}\nvar output = gameObject.getBounds(output);      // output: {x, y, width, height}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// var graphics = scene.add.graphics();\ngraphics\n    .lineStyle(lineWidth, color, alpha)\n    .strokeRectShape(gameObject.getBounds());\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Tween Options in Phaser 3\nDESCRIPTION: A comprehensive example showing all advanced tween configuration options in Phaser 3, including callbacks, timing controls, property configurations, and various animation settings like yoyo, repeat, and loop.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tween.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar tween = scene.tweens.add({\n    targets: gameObject,\n    paused: false,\n    callbackScope: tween,\n\n    // timming/callback of each state\n    onStart: function () {},\n    onStartParams: [],\n\n    // initial delay\n    delay: 0,  // function(target, targetKey, value, targetIndex, totalTargets, tween) { },\n\n    // tween duration\n    duration: 1000,\n    ease: 'Linear',\n    easeParams: null,\n\n    onActive: function () {},\n    onUpdate: function (tween, target, key, current, previous, param) {},\n    onUpdateParams: [],\n\n    // delay between tween and yoyo\n    hold: 0,\n    yoyo: false,  // true to tween backward\n    flipX: false,\n    flipY: false,\n    onYoyo: function (tween, target, key, current, previous, param) {},\n    onYoyoParams: [],\n\n    // repeat count (-1: infinite)\n    repeat: 0,\n    onRepeat: function (tween, target, key, current, previous, param) {},\n    onRepeatParams: [],\n    // delay to next pass\n    repeatDelay: 0,\n\n    // loop count (-1: infinite)\n    loop: 0,\n    onLoop: function () {},\n    onLoopParams: [],\n    // delay to next loop\n    loopDelay: 0,\n\n    // delay to onComplete callback\n    completeDelay: 0,\n    onComplete: function () {},\n    onCompleteParams: [],\n    // timming/callback of each state\n\n    onStop: function () {}, \n    onPause: function () {}, \n    onResume: function () {}, \n\n    // properties:\n    x: '+=600',        // start from current value\n    y: 500,\n    rotation: ...\n    angle: ...\n    alpha: ...\n    // ...\n\n    // or\n    props: {\n        x: { value: '+=600', duration: 3000, ease: 'Power2' },\n        y: { value: '500', duration: 1500, ease: 'Bounce.easeOut' }\n    },\n\n    // or\n    props: {\n        x: {\n            duration: 400,\n            yoyo: true,\n            repeat: 8,\n            ease: 'Sine.easeInOut',\n            value: {\n                getActive: function (target, key, value, targetIndex, totalTargets, tween)\n                {\n                    return value;\n                },\n                getStart: function (target, key, value, targetIndex, totalTargets, tween)\n                {\n                    return value + 30;\n                },\n                getEnd: function (target, key, value, targetIndex, totalTargets, tween)\n                {\n                    destX -= 30;\n                    return destX;\n                }\n            }\n        },\n        ....\n    },\n\n    persist: false,\n\n    interpolation: null,\n    interpolationData: null,\n\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Particle Processor Class in JavaScript\nDESCRIPTION: Defines a custom particle processor class that extends the Phaser.GameObjects.Particles.ParticleProcessor class. The update method allows for custom particle behavior modifications during each frame.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyParticleProcessor extends Phaser.GameObjects.Particles.ParticleProcessor {\n    constructor() {\n        super(x, y, active);\n        // ...\n    }\n\n    update(particle, delta, step, t) {\n        // particle : The Particle to update.\n        // delta : The delta time in ms.\n        // step : The delta value divided by 1000.\n        // t : The current normalized lifetime of the particle, between 0 (birth) and 1 (death).\n    }\n\n    destroy() {\n        super.destroy();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Configured Graphics Object in Phaser 3\nDESCRIPTION: Creates a graphics object with specified position and optional line and fill style configurations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar graphics = scene.add.graphics({\n    x: 0,\n    y: 0,\n\n    // lineStyle: {\n    //     width: 1,\n    //     color: 0xffffff,\n    //     alpha: 1\n    // },\n    // fillStyle: {\n    //     color: 0xffffff,\n    //     alpha: 1\n    // },\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Image Objects in Phaser 3\nDESCRIPTION: Creates and adds an image game object to the scene at specified coordinates using a texture key and optional frame.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/image.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.image(x, y, key);\n// var image = scene.add.image(x, y, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Firestore in JavaScript\nDESCRIPTION: Code for importing Firebase and its Firestore module into a JavaScript project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\n```\n\n----------------------------------------\n\nTITLE: Configuring Sizer with Options\nDESCRIPTION: Demonstrates full configuration options for creating a sizer object\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar sizer = scene.rexUI.add.sizer({\n    orientation: 0,\n    // rtl: false,\n    // startChildIndex: 0,\n\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n    // space: { left: 0, right:0, top:0, bottom:0, item:0 },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Post-Process and Complete Events in Phaser 3 Loader\nDESCRIPTION: Event handlers for when all loading is completed, both before and after resources are released.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.once('postprocess', function(loader){}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.once('complete', function(loader){}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Physics Properties in Matter.js\nDESCRIPTION: Methods for configuring bounce, mass, and density properties of physics bodies\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setBounce(v);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setMass(v);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setDensity(v);\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Dialog in JavaScript\nDESCRIPTION: Demonstrates how to display the Dialog as a modal with various configuration options for behavior and transitions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.modal({\n    // cover: {\n    //     color: 0x0,\n    //     alpha: 0.8,\n    //     transitIn: function(gameObject, duration) { },\n    //     transitOut: function(gameObject, duration) { },\n    // },\n    // cover: false, \n\n    // When to close modal dialog?\n    // touchOutsideClose: false,\n    // anyTouchClose: false,\n    // timeOutClose: false,\n    // manualClose: false,\n\n    // duration: {\n    //     in: 200,\n    //     hold: 2000,\n    //     out: 200\n    // }\n\n    // transitIn: 0, // 0|'popUp'|1|'fadeIn'\n    // transitIn: function(gameObject, duration) { },\n\n    // transitOut: 0, // 0|'scaleDown'|1|'fadeOut'\n    // transitOut: function(gameObject, duration) { },\n\n    // destroy: true,\n\n    // defaultBehavior: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Firestore Application\nDESCRIPTION: Sets up a Firebase application with configuration options and initializes the Firestore database with appropriate settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar firebaseApp = firebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n});\nvar db = firebaseApp.firestore();\ndb.settings({\n       timestampsInSnapshots: true\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Game Object Display List in Phaser 3\nDESCRIPTION: Demonstrates various methods to manipulate the game object's position in the display list, including moving to top/bottom, above/below other objects, and swapping positions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayList = gameObject.getDisplayList();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setToTop()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayList = gameObject.getDisplayList();\ndisplayList.bringToTop(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setToBack()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayList = gameObject.getDisplayList();\ndisplayList.sendToBack(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setAbove(givenGameObject)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayList = gameObject.getDisplayList();\ndisplayList.moveAbove(gameObject, givenGameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setBelow(givenGameObject)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayList = gameObject.getDisplayList();\ndisplayList.moveBelow(gameObject, givenGameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayList = gameObject.getDisplayList();\ndisplayList.moveTo(gameObject, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayList = gameObject.getDisplayList();\ndisplayList.swap(gameObject, givenGameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayList = gameObject.getDisplayList();\ndisplayList.moveUp(gameObject);\ndisplayList.moveDown(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Managing GameObject State and Data in Phaser3\nDESCRIPTION: Methods for getting and setting game object state and data, including data events handling\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setState(state);\ngameObject.setData(key, value);\ngameObject.setDataEnabled();\n```\n\n----------------------------------------\n\nTITLE: Camera Fade Effects in Phaser 3\nDESCRIPTION: Methods for fading the camera in/out with color transitions. Includes fadeIn, fadeOut, fadeFrom and fade operations with optional color values and callback functions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-effects.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.fadeIn(duration);\n// camera.fadeIn(duration, red, green, blue, callback, context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(camera, progress) {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.fadeOut(duration);\n// camera.fadeOut(duration, red, green, blue, callback, context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.fadeFrom(duration);\n// camera.fadeFrom(duration, red, green, blue, force, callback, context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.fade(duration);\n// camera.fade(duration, red, green, blue, force, callback, context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('camerafadeincomplete', camera, fade);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('camerafadeoutcomplete', camera, fade);\n```\n\n----------------------------------------\n\nTITLE: Loading Scene Plugins in Phaser 3\nDESCRIPTION: Demonstrates loading Phaser scene plugins with options to specify system and scene keys for proper integration into the Phaser scene system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin(key, url, systemKey, sceneKey);\n// scene.load.scenePlugin(key, url, systemKey, sceneKey, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Handling Destroy Event in Phaser\nDESCRIPTION: Registers an event handler that triggers when the game is destroyed via game.destroy().\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngame.events.on('destroy', function() {})\n```\n\n----------------------------------------\n\nTITLE: Collision Shape Types\nDESCRIPTION: Examples of different collision shape object structures including rectangle, ellipse, polygon, and polyline\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    rectangle: true,\n    x, y,\n    width, height\n}\n\n{\n    ellipse: true,\n    x, y,\n    width, height\n}\n\n{\n    x, y,\n    polygon: [{x,y}, {x,y}, ...]\n}\n\n{\n    x, y,\n    polyline: [{x,y}, {x,y}, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Bounds in Phaser 3\nDESCRIPTION: Shows how to set and get the bounds of a camera in Phaser 3. Camera bounds limit the area that the camera can show.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setBounds(x, y, width, height)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bounds = camera.getBounds();  // bounds: a rectangle object\n// var out = camera.getBounds(out);\n```\n\n----------------------------------------\n\nTITLE: Camera Following Game Object in Phaser 3\nDESCRIPTION: Demonstrates how to make a camera follow a game object in Phaser 3, including starting and stopping following, setting offset and lerp values, and configuring deadzone.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.startFollow(gameObject);\n// camera.startFollow(gameObject, roundPx, lerpX, lerpY, offsetX, offsetY);  // \n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.stopFollow();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setFollowOffset(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setLerp(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setDeadzone(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar left = camera.deadzone.left;\nvar right = camera.deadzone.right;\nvar top = camera.deadzone.top;\nvar bootom = camera.deadzone.bottom;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setDeadzone();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('followupdate', function(camera, gameObject){ })\n```\n\n----------------------------------------\n\nTITLE: Managing Game Object Origin in Phaser 3\nDESCRIPTION: Shows how to get and set the origin point of a game object, which affects its rotation and positioning.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar originX = gameObject.originX;\nvar originY = gameObject.originY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setOrigin(x, y);\n// gameObject.setOrigin(x); // y = x\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setOrigin(0);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setOrigin(0.5);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setOrigin(1);\n```\n\n----------------------------------------\n\nTITLE: Handling Cell Pointer Events in Phaser3 Tables\nDESCRIPTION: Event handlers for pointer interactions with cells in a Phaser3 grid table. Includes pointer-down, pointer-up, pointer-over, pointer-out, and click events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('cell.down', function(cellContainer, cellIndex, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('cell.up', function(cellContainer, cellIndex, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('cell.over', function(cellContainer, cellIndex, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('cell.out', function(cellContainer, cellIndex, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('cell.click', function(cellContainer, cellIndex, pointer, event) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Loader Configuration for Phaser 3 Scene\nDESCRIPTION: Configuration object for the asset loader in a Phaser 3 scene, specifying URL paths, parallel loading options, cross-origin settings, and request parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scene.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    baseURL: '',\n    path: '',\n    enableParallel: true,\n    maxParallelDownloads: 4,\n    crossOrigin: undefined,\n    responseType: '',\n    async: true,\n    user: '',\n    password: '',\n    timeout: 0\n}\n```\n\n----------------------------------------\n\nTITLE: GLSL Shader with Frontmatter Block Format\nDESCRIPTION: Example of a GLSL shader file format that can contain multiple shaders separated by frontmatter blocks specifying name and type.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_48\n\nLANGUAGE: GLSL\nCODE:\n```\n---\nname: \ntype: \n---\n\nvoid main(void)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Laying Out TextAreaInput Children in JavaScript\nDESCRIPTION: This snippet shows how to arrange the position of all elements in the TextAreaInput component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.layout();\n```\n\n----------------------------------------\n\nTITLE: Configuring FSM Instance with States and Callbacks\nDESCRIPTION: Demonstrates a comprehensive configuration for creating an FSM instance with multiple states, callbacks, and additional properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar states = scene.plugins.get('rexFSM').add({\n    start: 'A',   // default: undefined\n    states: {\n        A: {\n            next: 'B',  // function() { return 'B'; }\n            enter: function() {},                 // this: this fsm instance\n            exit: function() {},                  // this: this fsm instance\n            update: function(time, delta) {},     // this: this fsm instance\n            preupdate: function(time, delta) {},  // this: this fsm instance\n            postupdate: function(time, delta) {}, // this: this fsm instance\n        },\n        // ...\n    },\n    init: function() {},   // this: this fsm instance\n    extend: {\n        i: 0,        // Add member `i` into this fsm instance\n        name: 'abc'\n        // ...\n    },\n    enable: true,\n    scene: undefined,\n    eventEmitter: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: XHR Settings Object for Phaser 3 Loader\nDESCRIPTION: Example structure of the XHR Settings object that can be passed to loader methods to configure the XMLHttpRequest, including authentication, timeout, headers, and CORS settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    async: true,\n    user: '',\n    password: '',\n    timeout: 0,\n    headers: undefined,\n    header: undefined,\n    headerValue: undefined,\n    requestedWith: undefined,\n    overrideMimeType: undefined,\n    withCredentials: false\n}\n```\n\n----------------------------------------\n\nTITLE: Gravity Management in Phaser 3 Physics\nDESCRIPTION: Methods to get and set world gravity values on x and y axes\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.gravity.x = gx;\nscene.physics.world.gravity.y = gy;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gx = scene.physics.world.gravity.x;\nvar gy = scene.physics.world.gravity.y;\n```\n\n----------------------------------------\n\nTITLE: Creating a Particle Emitter in Phaser 3\nDESCRIPTION: Configures and creates a particle emitter with extensive configuration options including physics properties, appearance, behavior, and emission zones. This is the main setup function for creating particle effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar particles = scene.add.particles(x, y, texture, {\n    \n    // EmitterOp\n    accelerationX: 0,\n    accelerationY: 0,\n    alpha: 1,\n    angle: { min: 0, max: 360 },\n    bounce: 0,\n    color: undefined,\n    delay: 0,\n    hold: 0,\n    lifespan: 1000,\n    maxVelocityX: 10000,\n    maxVelocityY: 10000,\n    moveToX: 0,\n    moveToY: 0,\n    quantity: 1,\n    rotate: 0,\n    scaleX: 1,\n    scaleY: 1,\n    // scale:\n    speedX: 0,\n    speedY: 0,\n    speed: \n    tint: 0xffffff,\n    x: 0,\n    y: 0,\n\n    // Emitter properties\n    active:\n    advance:\n    blendMode:\n    colorEase:\n    deathCallback:\n    deathCallbackScope:\n    duration:\n    emitCallback:\n    emitCallbackScope:\n    // callbackScope    \n    frequency:\n    gravityX:\n    gravityY:\n    maxAliveParticles:\n    maxParticles:\n    name:\n    emitting:\n    particleBringToTop:\n    particleClass:\n    radial:\n    sortCallback:\n    sortOrderAsc:\n    sortProperty:\n    stopAfter:\n    tintFill:\n    timeScale:\n    trackVisible:\n    visible:\n\n    // Position\n    // emitZone : random-zone, edge-zone\n    // random-zone\n    emitZone: {\n        type: 'random',\n        source: geom,\n    },\n\n    // edge-zone\n    emitZone:{\n        type: 'edge',\n        source: geom,\n        quantity: 1,\n        stepRate: 0,\n        total: -1,\n        yoyo: false,\n        seamless: true\n    },\n\n    deathZone: {\n        type: 'onEnter', // 'onEnter', or 'onLeave'\n        source: geom,\n    },\n\n    bounds:               // {x, y, w, h}, or {x, y, width, height}, or Phaser.Geom.Rectangle\n    collideLeft: true,\n    collideRight: true,\n    collideTop: true,\n    collideBottom: true,\n\n    follow:\n    followOffset:{\n       x: 0,\n       y: 0\n    },\n\n    // Texture\n    texture:\n    frame:\n    anim: [],  // string, or array of string\n    \n    reserve: 0,\n    advance: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Plugin List\nDESCRIPTION: Markdown formatted list of Phaser3 plugins with links to detailed documentation for each component. Each entry includes the plugin name and a brief description of its functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/plugin-list.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## List of my plugins\n\n!!! note \"Version of phaser3\"\n    Please upgrade your phaser3 to version >= **3.80.0**.\n\n1. [Achievements](achievements.md): Achievements in a csv table.\n2. [Alpha mask image](alphamaskimage.md): Load a texture, then apply an alpha mask from another texture.\n[...remaining entries...]\n```\n\n----------------------------------------\n\nTITLE: Creating a Tilemap from 2D Array\nDESCRIPTION: Method for creating a tilemap from a 2D array of tile indices, supporting only orthogonal maps.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar map = this.make.tilemap({\n    // data: tileIdxArray,  // [ [], [], ... ]\n    tileWidth: 32,\n    tileHeight: 32,\n    width: 10,\n    height: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Phaser 3 Game Loop with Mermaid\nDESCRIPTION: A flow chart created using Mermaid that illustrates the Phaser 3 game loop, including the step and render phases, and their respective events and processes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n\nsubgraph Render\nGameRenderPreRender[\"game.renderer.preRender()\"]\nGameEventPreRenderClear>[\"game.events: prerenderclear\"]\nGameEventPreRender>[\"game.events: prerender\"]\nSceneManagerRender[\"SceneManager.render()<br>...See 'Scene steps'...\"]\nGameRenderPostRender[\"game.renderer.postRender()\"]\nGameEventPostRender>[\"game.events: postrender\"]\nend\n\nsubgraph Step\nGameEventPreStep>[\"game.events: prestep<br><br>sound.update()\"]\nGameEventStep>[\"game.events: step\"]\nSceneManagerUpdate[\"SceneManager.update()<br>...See 'Scene steps'...\"]\nGameEventPostStep>[\"game.events: poststep\"]\nend\n\n\nGameEventPreStep --> GameEventStep\nGameEventStep --> SceneManagerUpdate\nSceneManagerUpdate --> GameEventPostStep\nGameEventPostStep --> GameRenderPreRender\nGameRenderPreRender --> GameEventPreRenderClear\nGameEventPreRenderClear --> GameEventPreRender\nGameEventPreRender --> SceneManagerRender\nSceneManagerRender --> GameRenderPostRender\nGameRenderPostRender --> GameEventPostRender\nGameEventPostRender --> GameEventPreStep\n```\n\n----------------------------------------\n\nTITLE: Initializing Phaser 3 Game with Basic Configuration\nDESCRIPTION: Creates a new Phaser game instance with a basic configuration including canvas size, scale mode, and scene settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    type: Phaser.AUTO,\n    parent: null,\n    width: 1024,\n    height: 768,\n    scale: {\n        mode: Phaser.Scale.FIT,\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    },\n\n    scene: null\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting World Transform of Children in Phaser 3 Containers\nDESCRIPTION: Demonstrates how to retrieve the world position, rotation, and scale of a child object within a Container. This is useful for determining the absolute positioning of nested objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/container.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar matrix = child.getWorldTransformMatrix();\nvar x = matrix.tx;\nvar y = matrix.ty;\nvar rotation = matrix.rotation;\nvar scaleX = matrix.scaleX;\nvar scaleY = matrix.scaleY;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex UI Plugin from NPM Package in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to install the Rex UI plugin using an npm package in the Phaser 3 game configuration. This method adds the plugin to all scenes in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport RexUIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\n\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: RexUIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Generating Frame Names in Phaser 3 Animation\nDESCRIPTION: Shows different methods to generate frame names for animations in Phaser 3, including generating all frames in an atlas, creating a sequence of frames, and defining custom frame sequences.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/animation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.anims.generateFrameNames(key);\n\nscene.anims.generateFrameNames(key,\n{\n    prefix: '',\n    start: 0,\n    end: 0,\n    suffix: '',\n    zeroPad: 0,\n    // outputArray: [], // Append frames into this array\n});\n\nscene.anims.generateFrameNames(key,\n{\n    prefix: '',\n    suffix: '',\n    zeroPad: 0,\n    frames: [ ... ]\n    // outputArray: [], // Append frames into this array\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Scene Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Illustrates how to load a scene plugin in the game configuration before any scene starts. It defines the plugin key, class, and mapping to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pluginsystem.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    plugins: {\n        scene: [\n            {\n                key: key,\n                plugin: pluginKlass,\n                mapping: sceneKey,    // member name in each scene instance\n            },\n            // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex UI Plugin in Game Configuration\nDESCRIPTION: Sets up the Rex UI Plugin in the game configuration, importing it from the installed NPM package and mapping it to the 'rexUI' namespace for use in scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Tracking Document Changes in Firestore Real-time Updates\nDESCRIPTION: Extracts changes (added, modified, removed) from a query snapshot in real-time listener callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar changes = querySnapshot.docChanges();  // [change]\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Sprite with Arcade Physics in Phaser 3\nDESCRIPTION: Creates a dynamic physics sprite object that extends from the Sprite object class. Dynamic sprites can be affected by forces, velocity, and gravity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.physics.add.sprite(x, y, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Loading Assets After Preload Stage in Phaser 3\nDESCRIPTION: Shows how to load assets after the preload stage by manually adding tasks, registering a completion callback, and starting the loader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);   // add task\n// scene.load.image(config); // config: {key, url}\nscene.load.once('complete', callback, scope);  // add callback of 'complete' event\nscene.load.start();                     // start loading\n```\n\n----------------------------------------\n\nTITLE: Implementing Choice-based Gameplay in Phaser 3\nDESCRIPTION: Shows how to create a choice menu, handle user selection, and implement conditional logic based on the player's choice. It also demonstrates data manipulation and character reactions based on choices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/mds/command-executor.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetData\n  hp=5\n  coin=100\n\nlog.memory\n  text=Befor choice\n\nChoice.choice\n  title=Would you like some...\n  resultKey=choiceIndex\n  option1=Ice cream\n  option2=Burger\n  option3=Cola Cola Cola Cola Cola Cola Cola Cola Cola Cola Cola Cola\n\nlog\n  text=Select option[color=red]{{choiceIndex}}[/color]\n\n### [IF choiceIndex == 1]\n\nDialog.typing\n  name=A\n  expression=anger\n  text=Not today\n  speed=100\n\nsetData\n  hp=#(hp+3)\n  coin=#(coin-10)\n\n### [IF choiceIndex == 2]\n\nDialog.typing\n  name=A\n  expression=dizzy\n  text=Too fat\n  speed=100\n\nincData\n  hp=5\n  coin=-10\n\n### [IF choiceIndex == 3]\n\nDialog.typing\n  name=A\n  expression=happy\n  text=Another bottle!\n  speed=100\n\nincData\n  hp=10\n  coin=-20\n```\n\n----------------------------------------\n\nTITLE: Creating Static Group with Arcade Physics in Phaser 3\nDESCRIPTION: Creates a static physics group that extends from the Group object class. All sprites in this group will have static physics bodies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar group = scene.physics.add.staticGroup(children, config);\n// var group = scene.physics.add.staticGroup(config);\n```\n\n----------------------------------------\n\nTITLE: Generating a UUID in Phaser 3 with JavaScript\nDESCRIPTION: This snippet demonstrates how to generate an RFC4122 version 4 compliant UUID using Phaser's built-in utility method. The method is authored by Richard Davey and requires no parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uuid.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar uuid = Phaser.Utils.String.UUID();\n```\n\n----------------------------------------\n\nTITLE: Finding Shortest Angle Between Two Angles in Phaser 3\nDESCRIPTION: Calculates the shortest angle in degrees between two angles. The result indicates the direction (positive for counter-clockwise, negative for clockwise) and magnitude of rotation needed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar deg = Phaser.Math.Angle.ShortestBetween(angle1, angle2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter.js Physics Engine in Phaser 3\nDESCRIPTION: Configuration object for enabling and customizing Matter.js physics in a Phaser 3 game. Includes numerous commented options for physics behavior, debug visualization, constraints, gravity settings, and more.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-world.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    physics: {\n        default: 'matter',\n        matter: {\n        //    enabled: true,\n        //    positionIterations: 6,\n        //    velocityIterations: 4,\n        //    constraintIterations: 2,\n        //    enableSleeping: false,\n        //    plugins: {\n        //        attractors: false,\n        //        wrap: false,\n        //    },\n        //    gravity: {\n        //        x: 0,\n        //        y: 0,\n        //    }\n        //    setBounds: {\n        //        x: 0,\n        //        y: 0,\n        //        width: scene.sys.scale.width,\n        //        height: scene.sys.scale.height,\n        //        thickness: 64,\n        //        left: true,\n        //        right: true,\n        //        top: true,\n        //        bottom: true,\n        //    },\n        //    timing: {\n        //        timestamp: 0,\n        //        timeScale: 1,\n        //    },\n        //    correction: 1,\n        //    getDelta: (function() { return 1000 / 60; }),\n        //    autoUpdate: true,\n        //    debug: false,\n        //    debug: {\n        //        showAxes: false,\n        //        showAngleIndicator: false,\n        //        angleColor: 0xe81153,\n        //        showBroadphase: false,\n        //        broadphaseColor: 0xffb400,\n        //        showBounds: false,\n        //        boundsColor: 0xffffff,\n        //        showVelocity: false,\n        //        velocityColor: 0x00aeef,\n        //        showCollisions: false,\n        //        collisionColor: 0xf5950c,\n        //        showSeparations: false,\n        //        separationColor: 0xffa500,\n        //        showBody: true,\n        //        showStaticBody: true,\n        //        showInternalEdges: false,\n        //        renderFill: false,\n        //        renderLine: true,\n        //        fillColor: 0x106909,\n        //        fillOpacity: 1,\n        //        lineColor: 0x28de19,\n        //        lineOpacity: 1,\n        //        lineThickness: 1,\n        //        staticFillColor: 0x0d177b,\n        //        staticLineColor: 0x1327e4,\n        //        showSleeping: false,\n        //        staticBodySleepOpacity: 0.7,\n        //        sleepFillColor: 0x464646,\n        //        sleepLineColor: 0x999a99,\n        //        showSensors: true,\n        //        sensorFillColor: 0x0d177b,\n        //        sensorLineColor: 0x1327e4,\n        //        showPositions: true,\n        //        positionSize: 4,\n        //        positionColor: 0xe042da,\n        //        showJoint: true,\n        //        jointColor: 0xe0e042,\n        //        jointLineOpacity: 1,\n        //        jointLineThickness: 2,\n        //        pinSize: 4,\n        //        pinColor: 0x42e0e0,\n        //        springColor: 0xe042e0,\n        //        anchorColor: 0xefefef,\n        //        anchorSize: 4,\n        //        showConvexHulls: false,\n        //        hullColor: 0xd703d0\n        //    }\n        }\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Loader in Game Config in Phaser 3\nDESCRIPTION: Advanced loader configuration options that can be set in the game config object, including network settings, parallelization, and timeout values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nloader:{\n    baseURL: '',\n    path: '',\n    enableParallel: true,\n    maxParallelDownloads: 4,\n    crossOrigin: undefined,\n    responseType: '',\n    async: true,\n    user: '',\n    password: '',\n    timeout: 0,\n    maxRetries: 2,\n    withCredentials: false,\n    imageLoadType: 'XHR',    // 'HTMLImageElement' \n    localScheme: [ 'file://', 'capacitor://' ]\n},\n```\n\n----------------------------------------\n\nTITLE: Loading File Packs from URL in Phaser 3\nDESCRIPTION: Shows how to load file packs (collections of assets) from a JSON file at a specified URL, with an optional dataKey parameter to load specific sections.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.pack(key, url);\n// scene.load.pack(key, url, dataKey, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Defining a Phaser 3 Scene by Overriding Methods\nDESCRIPTION: Implementation of a Phaser 3 scene by directly overriding the lifecycle methods on a scene instance. This approach allows for quick scene creation without defining new classes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scene.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar demo = new Phaser.Scene(\"Demo\");\n\ndemo.init = function (data) {};\ndemo.preload = function () {};\ndemo.create = function (data) {};\ndemo.update = function (time, delta) {};\n```\n\n----------------------------------------\n\nTITLE: Making a Physics Body Immovable in Phaser 3\nDESCRIPTION: Makes a physics body immovable, which prevents it from receiving momentum from collisions with other bodies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setImmovable();\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas Instance in Phaser 3\nDESCRIPTION: Creates a Canvas instance in a Phaser 3 scene with optional resolution parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = scene.add.rexCanvas(x, y, width, height);\n// var canvas = scene.add.rexCanvas(x, y, width, height, resolution);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Particle Class in JavaScript\nDESCRIPTION: Defines a custom particle class that extends Phaser.GameObjects.Particles.Particle. This allows for customized particle behavior by overriding the update method while maintaining the base functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyParticle extends Phaser.GameObjects.Particles.Particle {\n    constructor (emitter) {\n        super(emitter);\n        /* ... */\n    }\n\n    update (delta, step, processors) {\n        super.update(delta, step, processors);\n        /* ... */\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Web Audio API Analyser in Phaser 3\nDESCRIPTION: Demonstrates how to use the Web Audio API Analyser node for audio visualization in Phaser 3. This includes creating and configuring the analyser, connecting it to audio sources, and retrieving output data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar analyser = scene.sound.context.createAnalyser();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nanalyser.smoothingTimeConstant = 1;\nanalyser.fftSize = 8192;\nanalyser.minDecibels = -90;\nanalyser.maxDecibels = -10;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.masterVolumeNode.connect(analyser);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.volumeNode.connect(analyser);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nanalyser.connect(scene.sound.context.destination);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar dataArrayLength = analyser.frequencyBinCount;\nvar dataArray = new Uint8Array(dataArrayLength);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nanalyser.getByteTimeDomainData(dataArray);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfor(var i= 0; i < dataArrayLength; i++) {\n    var data = dataArray[i];\n}\n```\n\n----------------------------------------\n\nTITLE: Getting World Position from Tile Coordinates in Quad Grid\nDESCRIPTION: Shows how to convert tile coordinates to world position in the Quad Grid using the getWorldXY method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-quadgrid.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar worldXY = grid.getWorldXY(tileX, tileY);  // worldXY: {x, y}\n// var out = grid.getWorldXY(tileX, tileY, out);\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene Manager in Phaser\nDESCRIPTION: Shows how to access the global scene manager either from the game instance or from within a scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = scene.registry.get(key);\n// var value = game.registry.get(key);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User Information\nDESCRIPTION: Gets the currently signed-in user object and extracts profile information. This code checks if a user is authenticated and accesses their profile data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar user = firebaseApp.auth().currentUser;\nif (user != null) {\n    var name = user.displayName;\n    var email = user.email;\n    var photoUrl = user.photoURL;\n    var emailVerified = user.emailVerified;\n    var uid = user.uid;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Acceleration in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the acceleration of a physics body in both X and Y directions. Acceleration changes velocity over time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setAcceleration(x, y);\n```\n\n----------------------------------------\n\nTITLE: Adding Collider in Phaser 3 Arcade Physics\nDESCRIPTION: Creates a collision handler between two objects or groups, causing them to collide and trigger callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.add.collider(objectsA, objectsB);\n```\n\n----------------------------------------\n\nTITLE: Emit Zone Configuration\nDESCRIPTION: Setup for particle emission zones with support for various geometric shapes and custom zones\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar zone = emitter.addEmitZone({\n    type: 'random',\n    source: geom,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Text Objects in Phaser 3\nDESCRIPTION: Shows how to add a basic text object to a Phaser scene with optional styling parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.text(x, y, 'hello');\n// var txt = scene.add.text(x, y, 'hello', { fontFamily: 'Arial', fontSize: 64, color: '#00ff00' });\n```\n\n----------------------------------------\n\nTITLE: Destroying a Phaser Game Instance\nDESCRIPTION: Shows how to properly destroy a Phaser game instance with options to remove the canvas element and destroy core plugins.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngame.destroy();\n// game.destroy(removeCanvas, noReturn);\n```\n\n----------------------------------------\n\nTITLE: Loading Atlas for Animation Images in Phaser 3\nDESCRIPTION: Loads a texture atlas for use with animated sprites. The 'key' is used to reference the atlas, 'textureURL' is the path to the image file, and 'atlasURL' is the path to the atlas JSON file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.atlas(key, textureURL, atlasURL);\n```\n\n----------------------------------------\n\nTITLE: Fade Effects Implementation\nDESCRIPTION: Implements fade in and fade out destroy effects for game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexUI.fadeIn(gameObject, duration);\n// scene.rexUI.fadeIn(gameObject, duration, alpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexUI.fadeOutDestroy(gameObject, duration);\n```\n\n----------------------------------------\n\nTITLE: Setting Game Size in Phaser 3\nDESCRIPTION: Shows how to set the base size of the game when using scale modes other than NO_SCALE. This method affects the game size used for scaling calculations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scalemanager.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scale.setGameSize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Axis Bounce in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the bounce (restitution) properties of a physics body along individual axes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setBounceX(x);\ngameObject.setBounceY(y);\n```\n\n----------------------------------------\n\nTITLE: Managing Game Object Depth in Phaser 3\nDESCRIPTION: Shows how to get and set the depth (z-index) of a game object for controlling rendering order.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar depth = gameObject.depth;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.depth = value;\ngameObject.setDepth(value);\n```\n\n----------------------------------------\n\nTITLE: Adding a Game Object to a Group in Phaser 3\nDESCRIPTION: Adds a single game object to a group with an optional parameter to add it to the scene's display and update lists.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.add(gameObject);\n// group.add(gameObject, true);  // add this game object to display and update list of scene\n```\n\n----------------------------------------\n\nTITLE: Full Tweaker Configuration Options\nDESCRIPTION: Comprehensive configuration options for creating a tweaker object, including positioning, styling, and behavior settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar tweaker = scene.rexUI.add.tweaker({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n    // orientation: 0,\n\n    // style: { ... }\n    styles : {\n        itemWidth : 0,\n        itemHeight: 0,\n\n        inputRow: {\n            background: {\n\n            },\n\n            title: {\n\n            },\n\n            inputText: {\n\n            },\n\n            inputTextArea: {\n                height:\n            },\n\n            list: {\n                label: {\n\n                },\n\n                button: {\n\n                }\n            },\n\n            button: {\n\n            },\n\n            slider: {\n                track: {\n\n                },\n\n                indicator: {\n\n                },\n\n                thumb: {\n\n                }\n            },\n\n            colorInput: {\n                colorPicker: {\n\n                },\n\n                colorComponents: {\n                    inputText: {\n                        \n                    }\n                }\n            },\n\n            checkbox: {\n\n            },\n\n            toggleSwitch: {\n\n            },\n\n            space: {\n                left: 0, right: 0, top: 0, bottom: 0,\n                title: 0\n            }\n        },\n\n        separator: {\n\n        },\n\n        folder: {\n        },\n\n        tab: {\n        },\n\n        scrollable: {\n        },\n\n        space: {\n            left: 0, right: 0, top: 0, bottom: 0, item: 0\n        },\n    },\n\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a New Scene in Phaser 3\nDESCRIPTION: Creates and adds a new scene to the game. The scene can be defined as an ES6 class or a plain object with lifecycle methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar newScene = scene.scene.add(key, sceneConfig, autoStart, data);\n// var newScene = game.scene.add(key, sceneConfig, autoStart, data);\n```\n\n----------------------------------------\n\nTITLE: Capturing Whole Canvas Snapshot in Phaser 3\nDESCRIPTION: This snippet demonstrates how to capture a snapshot of the entire game canvas. It uses the game.renderer.snapshot method, which can optionally specify image type and encoder options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/snapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngame.renderer.snapshot(callback);\n// game.renderer.snapshot(callback, type, encoderOptions);\n```\n\n----------------------------------------\n\nTITLE: Uniform Type Examples for Phaser 3 Shaders\nDESCRIPTION: Examples of different uniform type definitions for shaders, including 1f (float), 2f (vec2), 3f (vec3), and 4f (vec4) types with their corresponding value structures.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntime: { type: '1f', value: 0 }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nresolution: { type: '2f', value: { x: this.width, y: this.height } }\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncolor: { type: '3f', value: {x: 0, y: 0, z: 0}}\n```\n\n----------------------------------------\n\nTITLE: Adding Frame to Texture in Phaser 3\nDESCRIPTION: Adds a new frame to an existing texture. Specifies the region of the source image to use for the frame through coordinates and dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar frame = texture.add(frameName, sourceIndex, x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Drawing Rounded Rectangles in Phaser 3 Graphics\nDESCRIPTION: Methods for drawing filled and stroked rounded rectangles with customizable corner radii, supporting both convex and concave corners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.fillRoundedRect(x, y, width, height, radius);\ngraphics.strokeRoundedRect(x, y, width, height, radius);\n```\n\n----------------------------------------\n\nTITLE: Registering Scene Preupdate Event Listener in JavaScript\nDESCRIPTION: Shows how to register an event listener for the 'preupdate' event in a Phaser 3 scene. This event occurs at the beginning of the scene update process, before input, tweens, and game object updates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.events.on('preupdate', function(time, delta){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Configuring Phaser Game with Basic Settings\nDESCRIPTION: Demonstrates a basic game configuration object with essential properties including canvas size, parent element, scale mode, DOM container, scene, and background color.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: Phaser.AUTO,\n    parent: 'phaser-example',\n    width: 800,\n    height: 600,\n    scale: {\n        mode: Phaser.Scale.FIT,\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    },\n    dom: {\n        createContainer: false,\n    },\n    scene: null,\n    backgroundColor: 0x333333\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Animation Data in Phaser 3\nDESCRIPTION: Method for loading animation data from a JSON file, which defines animation sequences that can be applied to sprites.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.animation(key, url);\n// scene.load.animation(key, url, dataKey, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Removing Data on Disconnect in Firebase Item Table\nDESCRIPTION: JavaScript code to set up automatic data removal when the current user disconnects from the Firebase database.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntable.removeDataOnDisconnect(key0)\n// table.removeDataOnDisconnect(key0, key1)\n// table.removeDataOnDisconnect(key0, key1, key2)\n    .then(function() { })\n    .catch(function() { })        \n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Container Using Rex UI Plugin in Phaser 3\nDESCRIPTION: Demonstrates how to create a basic container using the Rex UI plugin in a Phaser 3 scene. This container can be used to control the position and angle of child game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar container = scene.rexUI.add.container(x, y);\n```\n\n----------------------------------------\n\nTITLE: Defining a Phaser 3 Scene using Phaser.Class\nDESCRIPTION: Implementation of a Phaser 3 scene using the Phaser.Class pattern with initialization and lifecycle methods. This approach provides compatibility with older JavaScript environments.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scene.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyScene = new Phaser.Class({\n  Extends: Phaser.Scene,\n\n  initialize: function MyScene(config) {\n    Phaser.Scene.call(this, config);\n  },\n\n  init: function (data) {},\n  preload: function () {},\n  create: function (data) {},\n  update: function (time, delta) {},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Authentication Module\nDESCRIPTION: Code to import the Firebase core module and authentication service. This is the first step required to use Firebase Authentication in your project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n```\n\n----------------------------------------\n\nTITLE: Adding Colliders in Phaser 3 Physics\nDESCRIPTION: Shows how to add colliders between physics bodies or groups in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.add.collider(objectsA, objectsB);\n```\n\n----------------------------------------\n\nTITLE: Importing and configuring text edit plugin\nDESCRIPTION: Importing the text edit plugin module and configuring it in the Phaser game settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport TextEditPlugin from 'phaser3-rex-plugins/plugins/textedit-plugin.js';\nvar config = {\n    parent: divId,\n    // fullscreenTarget: divId, // For fullscreen\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    },\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTextEdit',\n            plugin: TextEditPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Trees Component with Complete Options\nDESCRIPTION: Creates a Trees component with comprehensive configuration options including layout, orientation, spacing, background, toggle buttons, and transition effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar trees = scene.rexUI.add.trees({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    orientation: 0,\n    // rtl: false,\n\n    // space: { left: 0, right:0, top:0, bottom:0, item:0 },\n\n    tree: {\n        // background: function(scene {isLeaf}) { return gameObject; },\n        // background: backgroundStyle,\n\n        // toggleButton: function(scene, {isLeaf}) {\n        //     gameObject\n        //         .on('expand.start', function (gameObject) {\n        //          })\n        //          .on('collapse.start', function (gameObject) {\n        //          })\n        //     return gameObject;\n        // }\n        // toggleButton : triangleStyle,\n\n        // nodeBackground: function(scene {isLeaf}) { return gameObject; },\n        // nodeBackground: backgroundStyle,\n        \n        // nodeBody: function(scene {isLeaf}) { return gameObject; },\n        // nodeBody: simpleLabelStyle,\n\n        // transition: {\n        //     duration: 200,\n        //     expandCallback: undefined,\n        //     collapseCallback: undefined,\n        // },\n    \n        // orientation: 'y',\n\n        //space: {\n        //    indent: 0,\n        //    indentLeft: 0, indentRight: 0, indentTop: 0, indentBottom: 0,\n        //\n        //    nodeLeft: 0, nodeRight: 0, nodeTop: 0, nodeBottom: 0,\n        //    toggleButton: 0,\n        //},\n\n        // align: {\n        //     title: 'left',\n        //     child: 'left',\n        // },\n\n        // expand: {\n        //     title: true,\n        //     child: true,\n        // },\n\n        // expanded: true,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Texture with Normal Map in Phaser 3\nDESCRIPTION: Code for loading a texture along with its normal map in Phaser 3. Normal maps are required for the lighting system to properly render light effects on game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, [url, normalMapUrl]);\n```\n\n----------------------------------------\n\nTITLE: Importing Arcade TCRP Plugin via npm\nDESCRIPTION: Instructions for installing the plugin from npm and configuring it in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TCRPPlugin from 'phaser3-rex-plugins/plugins/arcadetcrp-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTCRP',\n            plugin: TCRPPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Scrolling TextAreaInput to Top/Bottom in JavaScript\nDESCRIPTION: These snippets show how to scroll the TextAreaInput content to the top or bottom.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.scrollToTop();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.scrollToBottom();\n```\n\n----------------------------------------\n\nTITLE: Removing Pack Assets in Phaser 3\nDESCRIPTION: Demonstrates how to remove previously loaded file pack assets from the Phaser loader, with an optional dataKey parameter to remove specific sections.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.removePack(key);\n// scene.load.removePack(key, dataKey);\n```\n\n----------------------------------------\n\nTITLE: Setting Velocity for Group Objects in Phaser 3\nDESCRIPTION: Sets the velocity for all objects in a group. The 'step' parameter allows for incremental velocity changes across the group members.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setVelocity(x, y, step);\n```\n\n----------------------------------------\n\nTITLE: Running a Scene in Phaser 3\nDESCRIPTION: Runs a scene without changing the state of the current scene. Will resume a paused scene, wake a sleeping scene, or start a new scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.run(key, data);\n```\n\n----------------------------------------\n\nTITLE: Accessing Firebase Plugin After Import Configuration\nDESCRIPTION: JavaScript code to access the Firebase plugin when using the import method. This retrieves the plugin instance from the Phaser plugins registry.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-overview.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar rexFireBase = scene.plugins.get('rexFirebase');\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Object with Rex UI in Phaser 3\nDESCRIPTION: This code snippet demonstrates how to create a customizable dialog object using the Rex UI plugin in Phaser 3. It includes options for setting the dialog's position, size, background, content, buttons, and layout properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = scene.rexUI.add.dialog({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    // Elements\n    background: backgroundGameObject,\n\n    title: titleGameObject,\n\n    toolbarBackground: toolbarBackgroundGameObject,\n    toolbar: [\n        buttonGameObject,\n        buttonGameObject,\n        // ...\n    ],\n    \n    leftToolbarBackground: leftToolbarBackgroundGameObject,\n    leftToolbar: [\n        buttonGameObject,\n        buttonGameObject,\n        // ...\n    ],\n\n    content: contentGameObject,\n\n    description: descriptionGameObject,\n\n    choicesType: '',\n    // choicesWidth: undefined,\n    // choicesHeight: undefined,  // Used when choicesType is `'grid'`, `'grid-radio'`, or `'grid-checkboxes'`\n    choicesBackground: choicesBackgroundGameObject,\n    choices: [\n        buttonGameObject,\n        buttonGameObject,\n        // ...\n    ],\n\n    actionsBackground: actionsBackgroundGameObject,\n    actions: [\n        buttonGameObject,\n        buttonGameObject,\n        // ...\n    ],\n    \n    // Space\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        title: 0,\n        titleLeft: 0,\n        titleRight: 0,\n        titleTop: 0,\n        \n        toolbarItem: 0,\n        leftToolbarItem: 0,\n\n        content: 0,\n        contentLeft: 0,\n        contentRight: 0,\n\n        description: 0,\n        descriptionLeft: 0,\n        descriptionRight: 0\n\n        choices: 0,\n        choicesLeft: 0,\n        choicesRight: 0,\n\n        // choiceLine: 0,   // Used when choicesType is `'wrap'`, `'wrap-radio'`, or `'wrap-checkboxes'`\n        // choiceColumn: 0, // Used when choicesType is `'grid'`, `'grid-radio'`, or `'grid-checkboxes'`\n        // choiceRow: 0,    // Used when choicesType is `'grid'`, `'grid-radio'`, or `'grid-checkboxes'`\n        choicesBackgroundLeft: 0,\n        choicesBackgroundRight: 0,\n        choicesBackgroundTop: 0,\n        choicesBackgroundBottom: 0,\n\n        action: 0,\n        actionsLeft: 0,\n        actionsRight: 0,\n        actionsBottom: 0,\n\n    },\n\n    proportion: {\n        title: 0,\n        content: 0,\n        description: 0,\n        choices: 0,\n        actions: 0,\n    },\n\n    expand: {\n        title: true,\n        content: true,\n        description: true,\n        choices: true,\n        actions: false,\n    },\n\n    align: {\n        title: 'center',\n        content: 'center',\n        description: 'center',\n        choices: 'center',\n        actions: 'center',\n    },\n\n    click: {\n        mode: 'pointerup',\n        clickInterval: 100\n    }\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming a Particle Emitter in Phaser 3\nDESCRIPTION: Functions to pause and resume a particle emitter by toggling its active state. While paused, the emitter won't update itself or its particles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.pause();  // set `active` to false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.resume();  // set `active` to true\n```\n\n----------------------------------------\n\nTITLE: Getting Velocity Values in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current velocity values of a physics body in both X and Y directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar vx = gameObject.body.velocity.x;\nvar vy = gameObject.body.velocity.y;\n```\n\n----------------------------------------\n\nTITLE: Configuring Gamepad Input in Phaser 3\nDESCRIPTION: Initial configuration to enable gamepad support in Phaser 3 game instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gamepad.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    input: {\n        gamepad: true\n    },\n    // ...\n}\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Aligning Cell Container in Phaser 3 Grid Table\nDESCRIPTION: Demonstrates how to set the alignment of a cell container within a Grid Table cell. The alignment can be set to various positions such as center, left, right, top, or bottom.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncell.setCellContainerAlign(align);\n```\n\n----------------------------------------\n\nTITLE: Loading UI Plugin via Scene Plugin in Phaser 3\nDESCRIPTION: Loads the Rex UI plugin as a scene plugin during the preload stage of a Phaser 3 game, allowing access to the dialog component via the rexUI namespace.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Custom Class Implementation in Phaser3\nDESCRIPTION: Example of creating custom game object classes by extending base classes with constructor and lifecycle methods\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass extends BaseClass {\n    constructor(scene, x, y) {\n        super(scene, x, y);\n        // ...\n        scene.add.existing(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Canvas Data Iteration Methods\nDESCRIPTION: Methods for iterating over pixel data in the canvas data object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-data.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncanvasData.forEach(function(value, x, y, canvasData){\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera Viewport in Phaser 3\nDESCRIPTION: Shows various methods to set and get camera viewport properties in Phaser 3, including position, size, and center coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setViewport(top, left, width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPosition(top, left);\n// camera.x = top;\n// camera.y = left;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setSize(width, height);\n// camera.width = width;\n// camera.height = height;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar top = camera.x;\nvar left = camera.y;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = camera.centerX;\nvar y = camera.centerY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = camera.width;\nvar height = camera.height;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayWidth = camera.displayWidth;\nvar displayHeight = camera.displayHeight;\n```\n\n----------------------------------------\n\nTITLE: Adding Death Zone to Particle Emitter in JavaScript\nDESCRIPTION: Creates a death zone that destroys particles when they enter or leave a geometric area. The source can be any Phaser geometry with a contains method like Circle, Ellipse, Rectangle, Triangle, or Polygon.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar zone = emitter.addDeathZone({\n     type: 'onEnter',\n     source: geom\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: JavaScript code to initialize the Firebase application with configuration details including API key, authentication domain, database URL, and other required parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Data Easing in Phaser 3 (JavaScript)\nDESCRIPTION: Shows various methods to start and stop data easing, including specifying duration or speed, and different parameter formats.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/easedata.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neasedata.easeTo(key, value, duration);\n// easedata.easeTo(key, value, duration, ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neasedata.easeTo({\n    key:key,\n    value:value,\n    duration:1000,\n    ease:'Linear'\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\neasedata.easeTo({\n    key:key,\n    value:value,\n    speed: 10,    // value changing rate, per second\n    ease:'Linear'\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\neasedata.stopEase(key);           // Set to end value\n// easedata.stopEase(key, false); // Stop at current value\n```\n\nLANGUAGE: javascript\nCODE:\n```\neasedata.stopAll();           // Set to end value\n// easedata.stopAll(false);   // Stop at current value\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting GameObject Size Properties in Phaser3\nDESCRIPTION: Methods for managing native size, display size, and scale properties of game objects. Includes both getter and setter implementations for each property type.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = gameObject.width;\nvar height = gameObject.height;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setSize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.width = width;\ngameObject.height = height;\n```\n\n----------------------------------------\n\nTITLE: Loading Audio Files in Phaser 3\nDESCRIPTION: Method for loading audio files with configuration options such as the number of simultaneous instances for HTML5 Audio.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.audio(key, urls);\n// scene.load.audio(key, urls, {instances: 1}, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Getting Pause Duration in Phaser\nDESCRIPTION: Retrieves the duration for which the game has been paused.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar time = game.pauseDuration;\n```\n\n----------------------------------------\n\nTITLE: Managing Line Spacing in Phaser 3 Text\nDESCRIPTION: Shows how to get and set line spacing for a Phaser 3 Text object. This value is added to the font height when calculating overall line height.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineSpacing = txt.lineSpacing;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setLineSpacing(value);\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts for External Scenes in Phaser 3\nDESCRIPTION: Demonstrates how to load scene scripts from external files and then add them to the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.script(key, url);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.add(key, sceneConfig, autoStart);\n// game.scene.add(key, sceneConfig, autoStart);\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Origin in Phaser 3\nDESCRIPTION: Demonstrates how to set and get the origin point of a camera in Phaser 3. The origin affects how the camera rotates and scales.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setOrigin(x, y);\n// camera.originX = 0.5;\n// camera.originY = 0.5;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar originX = camera.originX\nvar originY = camera.originY\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Input Row Styles in Phaser 3\nDESCRIPTION: Defines the styling configuration for button input rows, including background, title, and button properties. Contains settings for text formatting, backgrounds, icons, spacing, and layout proportions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        inputRow: {\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    \n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n    \n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                }\n            },\n\n            button: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    \n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n\n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                },\n\n                expand: true\n            },\n\n            space: {\n                left: 0, right: 0, top: 0, bottom: 0,\n                title: 0\n            },\n            \n            proportion: {\n                title: 0, inputField: 0,\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Data from Cache in Phaser 3\nDESCRIPTION: Shows how to retrieve data from a specific cache (text cache in this example) using a key identifier.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.text;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Implementing Rex UI Plugin in a Phaser 3 TypeScript Game Class\nDESCRIPTION: Shows how to implement the Rex UI plugin in a Phaser 3 game class using TypeScript. This includes declaring the rexUI property and configuring the plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport RexUIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\n\nclass Game extends Phaser.Scene {\n    rexUI: RexUIPlugin;  // Declare scene property 'rexUI' as RexUIPlugin type\n\n    create() {\n        var sizer = this.rexUI.add.sizer({\n            // ...\n        })\n    }\n}\n\nvar game = new Phaser.Game({\n    scene: Game,\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: RexUIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Registry Data Change Events in Phaser\nDESCRIPTION: Demonstrates how to listen for events when data changes in the registry, either for all keys or for a specific key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.registry.events.on('changedata', function(parent, key, value, previousValue){ /* ... */ });\n// game.registry.events.on('changedata', function(parent, key, value, previousValue){ /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: Registering Scene Prerender Event Listener in JavaScript\nDESCRIPTION: Shows how to register an event listener for the 'prerender' event in a Phaser 3 scene. This event occurs just before the scene's cameras begin rendering game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.events.on('prerender', function(renderer){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Colors in Phaser\nDESCRIPTION: Methods to convert various color formats (hex, RGB, RGBA, HSV) to Phaser color values\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/color.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = Phaser.Display.Color.ValueToColor(input);\nvar color = Phaser.Display.Color.GetColor(red, green, blue);\nvar color = Phaser.Display.Color.GetColor32(red, green, blue, alpha);\nvar color = Phaser.Display.Color.HexStringToColor(hex).color;\nvar color = Phaser.Display.Color.RGBStringToColor(rgb);\nvar color = Phaser.Display.Color.HSVToRGB(h, s, v).color;\n```\n\n----------------------------------------\n\nTITLE: Drawing Lines on Graphics Context in Phaser 3\nDESCRIPTION: Demonstrates how to render a Line object onto a Graphics context with optional line styling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// graphics.lineStyle(lineWidth, color, alpha);   // color: 0xRRGGBB\ngraphics.strokeLineShape(line);\n```\n\n----------------------------------------\n\nTITLE: File Pack JSON Format Example for Phaser 3\nDESCRIPTION: Example structure of a file pack JSON format showing how to organize assets with optional prefix, path, and defaultType properties, along with nested node structures.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'dataKey': {\n        // \"prefix\": \"...\",          // optional, extend key by prefix\n        // \"path\": \"...\",            // optional, extend url by path\n        // \"defaultType\": \"image\",   // optional, default file type\n        'files': [\n            {\n                'type': 'image',\n                'key': '...',\n                'url': '...'\n            },\n            {\n                'type': 'image',\n                'key': '...',\n                'url': '...'\n            }\n            // ...\n        ]\n    },\n\n    'node0': {\n        'node1': {\n            'node2': {\n                'files': [\n                    // ....\n                ]\n            }\n        }\n    }\n    // dataKey: 'node0.node1.node2'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Data in Phaser Registry\nDESCRIPTION: Demonstrates how to set values in Phaser's global data registry from within a scene or from the game instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.registry.set(key, value);\n// game.registry.set(key, value);\n```\n\n----------------------------------------\n\nTITLE: Creating Matter.js Physics Image Object in Phaser 3\nDESCRIPTION: Creates a physics-enabled Image object with Matter.js integration. Optionally accepts a configuration object to customize physics properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.matter.add.image(x, y, key, frame);\n// var image = scene.matter.add.image(x, y, key, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Particle Effect Instance\nDESCRIPTION: Demonstrates full configuration options for creating a particle effect instance including texture, lifespan, spread, and other particle properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles-along-bounds.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar particles = scene.plugins.get('rexParticlesAlongBounds').startEffect(gameObject, {\n    textureKey: key,\n    // textureFrames: undefined,\n    // padding: 0,\n    // blendMode: 'ADD',\n    // lifespan: 1000,\n    // stepRate: 10,\n    // spread: 10,\n\n    // scale: undefined,\n    // alpha: undefined,\n    // tint: undefined,\n\n    // repeat: 0,\n    // gravityX: 0,\n    // gravityY: 0,\n    // duration: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Geometry Mask from Round Rectangle\nDESCRIPTION: Creates a geometry mask from a round rectangle shape that can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = rect.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Controlling Arcade Physics World in Phaser 3\nDESCRIPTION: Illustrates how to pause, resume, and adjust the time scale of the Arcade physics world in Phaser 3. These functions are essential for game flow control and slow-motion effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.pause();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.resume();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.timeScale = timeScale;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.setFPS(framerate);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Orientation in Phaser 3\nDESCRIPTION: Retrieves the current device orientation using Phaser's Scale Manager. The orientation value can be used to adapt your game layout to different device orientations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/orientation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar orientation = scene.scale.orientation;\n```\n\n----------------------------------------\n\nTITLE: Converting Degrees to Radians in Phaser 3\nDESCRIPTION: Converts an angle from degrees to radians using Phaser's built-in math utility. This is useful when working with Phaser functions that require angles in radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar rad = Phaser.Math.DegToRad(deg);\n```\n\n----------------------------------------\n\nTITLE: Configuring Scrollable Style Properties in JavaScript for Phaser 3 UI\nDESCRIPTION: Defines the complete style configuration for a scrollable component in a UI tweaker. Includes settings for title appearance, background properties, slider customization, and spacing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        scrollable: {\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n\n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                },\n\n                expandedIcon: {\n                    color: undefined,\n                    alpha: 1,\n\n                    strokeColor: undefined,\n                    strokeAlpha: 1,\n                    strokeWidth: 1,\n                    arrowOnly: false,\n\n                    easeDuration: 0,\n                }\n            },\n\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            slider: {\n                track: { \n                    width: 1, height: 1,\n                    radius: 0, \n                    color: undefined, alpha: 1,\n                    strokeColor: undefined, strokeAlpha: 1, strokeWidth: 2,\n                    shape: undefined\n                },\n\n                thumb: { \n                    width: 1, height: 1,\n                    radius: 0, \n                    color: undefined, alpha: 1,\n                    strokeColor: undefined, strokeAlpha: 1, strokeWidth: 2,\n                    shape: undefined\n                },\n                \n                // hideUnscrollableSlider: false,\n                // disableUnscrollableDrag: false,\n                // adaptThumbSize: false,\n                // minThumbSize: undefined,\n            },\n\n            space: {\n                panel:0, \n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Tiles in Camera Viewport (JavaScript)\nDESCRIPTION: Demonstrates how to iterate over tiles visible in the camera viewport. Includes options for camera selection, viewport padding, and iteration order.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nboard.forEachCullTileXY(function(tileXY, board) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nboard.forEachCullTileXY(function(tileXY, board) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n}, scope, {\n    camera: board.scene.cameras.main,\n    paddingX: 1,\n    paddingY: 1,\n    order: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Animations in Phaser 3\nDESCRIPTION: Shows various methods for managing animations in Phaser 3, including removing animations, adding delays between animations, and checking if an animation exists.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/animation.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.anims.remove(key);\n\nscene.anims.addMix(animA, animB, delay);\n\nscene.anims.removeMix(animA, animB);\n// scene.anims.removeMix(animA);\n\nvar delay = scene.anims.getMix(animA, animB);\n\nvar hasAnim = scene.anims.exists(key);\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Gesture Plugin via NPM\nDESCRIPTION: Shows how to install the plugin via npm and configure it in the Phaser3 game configuration object. Includes importing the plugin and setting up the scene plugins mapping.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport GesturesPlugin from 'phaser3-rex-plugins/plugins/gestures-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexGestures',\n            plugin: GesturesPlugin,\n            mapping: 'rexGestures'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Body Proximity Detection in Phaser 3 Physics\nDESCRIPTION: Methods for finding closest and furthest physics bodies from a point\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar body = scene.physics.closest(point);\n// var body = scene.physics.closest(point, targets);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar body = scene.physics.furthest(point);\n// var body = scene.physics.furthest(point, targets);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Value Configuration for Shader Properties\nDESCRIPTION: Shows different ways to configure dynamic values for shader properties, including callback functions and random value generators within specific ranges.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction() { return 0; }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ randInt: [min, max] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ randFloat: [min, max] }\n```\n\n----------------------------------------\n\nTITLE: Setting Vector2 from Polar Coordinates\nDESCRIPTION: Sets the Vector2 components using polar coordinates (azimuth and radius). The azimuth is in radians, and the radius defaults to 1 if not specified.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvector.setToPolar(azimuth, radius);\n```\n\n----------------------------------------\n\nTITLE: Extending Cover Class in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Creates a custom cover class by extending the RexPlugins.UI.Cover class. This allows for customization of full-window cover behavior and appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCover extends RexPlugins.UI.Cover {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Creating TabPages\nDESCRIPTION: Complete configuration object for creating a TabPages instance with all available options including position, tabs, pages, alignment, and spacing settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar tabPages = scene.rexUI.add.tabPages({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    // background: backgroundGameObject,\n\n    tabsPosition: 'top',\n    // tabPosition: 'top',\n\n    wrapTabs: false,\n\n    tabs: {\n        // width:\n        // height:\n        // rtl:\n\n        // background: backgroundGameObject,        \n        align:\n        click: {\n            mode: 'pointerup',\n            clickInterval: 100\n        },\n        space: { left: 0, right:0, top:0, bottom:0, item:0 }\n    },\n\n    pages: {\n        space: { left: 0, right:0, top:0, bottom:0 },\n        fadeIn: 0,\n    },\n\n    expand: {\n        tabs: false,\n    },\n\n    align: {\n        tabs: 'left',\n    },\n\n    // space: { left:0, right:0, top:0, bottom:0, item:0 },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Texture Atlas in Phaser 3\nDESCRIPTION: Method for loading a texture atlas, which consists of a texture image and an atlas JSON file defining the frames.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.atlas(key, textureURL, atlasURL);\n// scene.load.atlas(key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Children in Phaser 3 Containers\nDESCRIPTION: Shows methods for iterating over child objects in a Container. These methods allow for performing operations on all or a subset of Container children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/container.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.iterate(callback);\n// container.iterate(callback, context);\n// container.iterate(callback, context, arg0, arg1, ...);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.each(callback);\n// container.each(callback, context);\n// container.each(callback, context, arg0, arg1, ...);\n```\n\n----------------------------------------\n\nTITLE: Creating Matter.js Physics Sprite Object in Phaser 3\nDESCRIPTION: Creates a physics-enabled Sprite object with Matter.js integration. Optionally accepts a configuration object to customize physics properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.matter.add.sprite(x, y, key, frame);\n// var image = scene.matter.add.sprite(x, y, key, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Static Image with Arcade Physics in Phaser 3\nDESCRIPTION: Creates a static physics image object that extends from the Image object class. Static objects do not move when forces are applied to them.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.physics.add.staticImage(x, y, key);\n```\n\n----------------------------------------\n\nTITLE: Defining a Scene Configuration Object in Phaser 3\nDESCRIPTION: Shows how to define a scene using a plain object with lifecycle methods and custom extensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    init(data) {},\n    preload() {},\n    create(data) {},\n    update(time, delta) {},\n\n    extend: {\n        data: {},\n        // ...\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Any Key Events in Phaser 3\nDESCRIPTION: Shows how to handle events for any key press or release in Phaser 3, including accessing the KeyboardEvent object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardevents.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.keyboard.on('keydown', function (event) { /* ... */ });\nscene.input.keyboard.on('keyup', function (event) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Swipe Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for swipe gestures on any tile in the board. The callback receives the swipe behavior object (which includes swipe direction) and the tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('tileswipe', function(swipe, tileXY) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n    // var direction = swipe.direction;\n});\n```\n\n----------------------------------------\n\nTITLE: Particle Visual Properties\nDESCRIPTION: Methods for controlling particle visual properties including tint, color, alpha, and scale\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.setParticleTint(tint);\nemitter.particleTint = tint;\n\nemitter.particleColor = color;\nemitter.colorEase = easeName;\n\nemitter.setParticleAlpha(alpha);\nemitter.setAlpha(alpha);\nemitter.particleAlpha = alpha;\n\nemitter.setParticleScale(x, y);\nemitter.setScale(x, y);\nemitter.particleScaleX = x;\nemitter.particleScaleY = y;\n```\n\n----------------------------------------\n\nTITLE: Creating a Repeat Timer in Phaser 3\nDESCRIPTION: Creates a timer that executes a callback a specific number of times at a specified interval.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar timer = scene.time.addEvent({\n    delay: 500,                // ms\n    callback: callback,\n    //args: [],\n    callbackScope: thisArg,\n    repeat: 4\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Bitmap Fonts in Phaser 3\nDESCRIPTION: Method for loading bitmap fonts, which consist of a texture image and an XML data file defining the character glyphs.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.bitmapFont(key, textureURL, fontDataURL);\n// scene.load.bitmapFont(key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Shifting Positions of Group Members in Phaser 3\nDESCRIPTION: Shifts the positions of all group members based on the first or last member's position, with an optional direction parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.shiftPosition(x, y);\n// group.shiftPosition(x, y, direction);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: Configuration and initialization of Firebase application with necessary credentials.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-itemtable.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Scene Transitions in Phaser 3\nDESCRIPTION: Creates a smooth transition between scenes with options for duration, callbacks, and scene ordering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.transition({\n    target: key,\n    // data: null,\n    // moveAbove: false,\n    // moveBelow: false,\n\n    duration: 1000,\n\n    // remove: false,\n    // sleep: false,\n    // allowInput: false,\n\n    // onStart: null,\n    // onStartScope: scene,\n\n    // onUpdate: null,\n    // onUpdateScope: scene,\n})\n```\n\n----------------------------------------\n\nTITLE: Ignoring Game Objects in Phaser 3 Camera\nDESCRIPTION: Demonstrates how to make a camera ignore specific game objects in Phaser 3, preventing them from being rendered by that camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.ignore(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Graphics Class in Phaser 3\nDESCRIPTION: Creates a custom Graphics class that extends Phaser.GameObjects.Graphics, adding it to the scene with the add.existing method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyGraphics extends Phaser.GameObjects.Graphics {\n    constructor(scene, options) {\n        super(scene, options);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Tag Properties Configuration\nDESCRIPTION: Configuration options for tag properties including font styling, colors, shadows, underline, strikethrough, and image placement.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    fontFamily: 'Courier',   // or 'family', 'font-family'\n    fontSize: '16px',        // or 'size', 'font-size'\n    fontStyle: 'bold italic',// or 'style', 'font-style'\n    color: 'red',            // or 'font-color'\n    stroke: {\n        color: 'blue',\n        thickness: 1\n    },\n    shadow: {\n        color: 'black',\n        offsetX: 2,\n        offsetY: 2,\n        blur: 2\n    },\n    underline: {            // or 'u'\n        color: 'blue',\n        thickness: 3,\n        offset: -1\n    },\n    strikethrough: {        // or 's'\n        color: 'red',\n        thickness: 3,\n        offset: -1\n    },    \n    y: 0,\n    img: textureKey,\n    area: areaKey,\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Phaser Game is Paused\nDESCRIPTION: Checks whether the game is currently in a paused state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPaused = game.isPaused;\n```\n\n----------------------------------------\n\nTITLE: Extending ToggleSwitch Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom ToggleSwitch class by extending the base component. This allows for adding custom functionality to toggle switches.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyToggleSwitch extends RexPlugins.UI.ToggleSwitch {\n    constructor(scene, x, y, width, height, color, config) {\n        super(scene, x, y, width, height, color, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Table Scrolling Operations in Phaser3\nDESCRIPTION: Collection of methods for scrolling table content vertically and horizontally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntable.setTableOY(oy).updateTable();\ntable.addTableOY(dy).updateTable();\n\ntable.setTableOX(ox).updateTable();\ntable.addTableOX(dx).updateTable();\n\ntable.setTableOXY(ox, oy).updateTable();\ntable.addTableOXY(dx, dy).updateTable();\n\ntable.tableOY = oy;  // include table.updateTable()\ntable.tableOX = ox;\n```\n\n----------------------------------------\n\nTITLE: Physics Integration\nDESCRIPTION: Methods for integrating tile collisions with Arcade and Matter physics systems\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.add.collider(arcadeGO, layer);\n\n// or\nscene.physics.world.collide(arcadeGO, layer);\n\n// Matter physics\nscene.matter.world.convertTilemapLayer(layer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Loading Animation Scene in Phaser 3\nDESCRIPTION: Configures and starts the loading animation scene with callbacks for loading progress and completion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loading-animation-scene.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexLoadingAnimationScene').startScene({\n    mainScene: \n    animationScene:\n\n    onLoadingComplete: undefined\n    onLoadingProgress: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Fullscreen Mode in Phaser 3\nDESCRIPTION: Shows methods for starting, stopping, toggling, and checking fullscreen mode in Phaser 3. These should be called in response to user input, such as a 'pointerup' event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scalemanager.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scale.startFullscreen();\nscene.scale.stopFullscreen();\nscene.scale.toggleFullscreen();\nvar isFullscreen = scene.scale.isFullscreen;\n```\n\n----------------------------------------\n\nTITLE: Gamepad Connection Event Handlers\nDESCRIPTION: Event handlers for gamepad connection and disconnection events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gamepad.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.gamepad.on('connected', function (gamepad, event) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.gamepad.on('disconnected', function (gamepad, event) {\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Group Object in Phaser 3\nDESCRIPTION: Initializes a Group object using scene.add.group() with optional configuration options and game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar group = scene.add.group(config);\n// var group = scene.add.group(gameObjects, config);  // Add game objects into group\n```\n\n----------------------------------------\n\nTITLE: Setting Interactive Area for Container in Phaser 3\nDESCRIPTION: Demonstrates how to set an interactive hit area for a Container using a circular shape. This allows the Container to respond to input events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/container.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setInteractive(new Phaser.Geom.Circle(0, 0, radius), Phaser.Geom.Circle.Contains);\n// container.setInteractive(false); // disable\n```\n\n----------------------------------------\n\nTITLE: Setting Hit Area of Game Objects in Phaser3\nDESCRIPTION: Sets the interactive hit area of game objects and the callback function that determines if a point is within that area for input detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetHitArea(gameObjects, hitArea, hitAreaCallback);\n```\n\n----------------------------------------\n\nTITLE: Handling Collision Events with Matter.js Physics\nDESCRIPTION: Event listener setup for detecting collisions between physics objects, with access to the involved bodies and their associated game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.world.on('collisionstart', function (event, bodyA, bodyB) {\n    // var pairs = event.pairs;\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Global Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to load a global plugin in the game configuration before any scene starts. It shows the structure for defining a plugin with its key, class, and optional settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pluginsystem.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    plugins: {\n        global: [\n            {\n                key: key,\n                plugin: pluginKlass,\n                start: true\n                // mapping: memberName  // member name in each scene instance, optional\n                // data: undefined\n            },\n            // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Game Object Creation Configuration in Phaser 3\nDESCRIPTION: Defines the configuration object structure for creating multiple game objects with various properties and actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    classType: this.classType,\n    key: undefined,             // Required\n    frame: null,\n    visible: true,\n    active: true,\n    repeat: 0,                  // Create (1 + repeat) game objects\n    createCallback: undefined,  // Override this.createCallback if not undefined\n\n    // Position\n    setXY: {\n        x:0,\n        y:0,\n        stepX:0,\n        stepY:0\n    },\n    // Actions.SetXY(gameObjects, x, y, stepX, stepY)\n    gridAlign: false,\n    // {\n    //     width: -1,\n    //     height: -1,\n    //     cellWidth: 1,\n    //     cellHeight: 1,\n    //     position: Phaser.Display.Align.TOP_LEFT,\n    //     x: 0,\n    //     y: 0\n    // }\n    // Actions.GridAlign(gameObjects, gridAlign)\n\n    // Angle\n    setRotation: {\n        value: 0,\n        step:\n    },\n    // Actions.SetRotation(gameObjects, value, step)\n\n    // Scale\n    setScale: {\n        x:0,\n        y:0,\n        stepX:0,\n        stepY:0\n    },\n    // Actions.SetScale(gameObjects, x, y, stepX, stepY)\n\n    // Alpha\n    setAlpha: {\n        value: 0,\n        step:\n    },\n    // Actions.SetAlpha(gameObjects, value, step)\n\n    setOrigin: {\n        x:0,\n        y:0,\n        stepX:0, \n        stepY:0\n    },\n\n    // Input\n    hitArea: null,\n    hitAreaCallback: null,\n    // Actions.SetHitArea(gameObjects, hitArea, hitAreaCallback)\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Degrees to -180 to 180 Range in Phaser 3\nDESCRIPTION: Wraps an angle in degrees to ensure it falls within the range of -180 to 180. This keeps angular values consistent for calculations and comparisons.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar deg = Phaser.Math.Angle.WrapDegrees(angle);\n```\n\n----------------------------------------\n\nTITLE: Resizing Canvas Element in Phaser 3\nDESCRIPTION: Demonstrates how to resize the Phaser canvas element directly. This method should only be used with the NO_SCALE scale mode.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scalemanager.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scale.resize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Getting Game Window Width in Phaser\nDESCRIPTION: Retrieves the configured width of the game window from the game config.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = game.config.width;\n// var width = scene.game.config.width;\n```\n\n----------------------------------------\n\nTITLE: Adding Child Game Objects to a Layer in Phaser 3\nDESCRIPTION: Shows various methods to add child game objects to a Layer, including adding at a specific index and replacing existing children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.add(gameObject);\n// layer.add(gameObjects);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.addAt(gameObject, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.replace(oldGameObject, newGameObject);\n```\n\n----------------------------------------\n\nTITLE: Adding Zone Object in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to add a Zone object to a Phaser 3 scene. It shows both direct method calls and JSON configuration approaches.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/zone.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar zone = scene.add.zone(x, y, width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar zone = scene.make.zone({\n    x: 0,\n    y: 0,\n    //width: 1,\n    //height: 1,\n    // origin: {x: 0.5, y: 0.5},\n});\n```\n\n----------------------------------------\n\nTITLE: Complete TextBox Configuration Object for Phaser 3\nDESCRIPTION: A comprehensive configuration object showing all available options for creating a TextBox.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar textBox = scene.rexUI.add.textBox({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    layoutMode: 0,\n\n    rtl: false,\n\n    typingMode: 0,\n\n    background: backgroundGameObject,\n\n    innerBackground: backgroundGameObject,\n\n    title: titleGameObject,\n    \n    separator: separatorGameObject,\n\n    icon: iconGameObject,\n    iconMask: false,\n\n    text: textGameObject,\n    expandTextWidth: false,\n    expandTextHeight: false,\n\n    action: actionGameObject,\n    actionMask: false,\n\n    align: {\n        title: 'left',\n        text: 'left',\n        icon: 'center',\n        action: 'center'\n    },\n\n    space: {\n        left: 0, right: 0, top: 0, bottom: 0,\n        innerLeft: 0, innerRight: 0, innerTop: 0, innerBottom: 0,\n\n        title: 0, titleLeft: 0, titleRight: 0,\n        icon: 0, iconTop: 0, iconBottom: 0,\n        text: 0, textLeft: 0, textRight: 0,\n        actionTop: 0, actionBottom: 0,\n    },\n\n    // page: { \n    //    maxLines: undefined,\n    //    pageBreak: '\\f\\n',\n    // },\n    // typing: { \n    //    wrap: false,\n    //    speed: 333,    \n    // },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Polygon Points\nDESCRIPTION: Method to update the polygon's vertices using various input formats.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-polygon.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npolygon.setTo(points);\n```\n\n----------------------------------------\n\nTITLE: Enabling Light System in Phaser 3\nDESCRIPTION: Code for enabling the lighting system in a Phaser 3 scene. The lighting system must be explicitly enabled before it can be used.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.lights.enable();\n```\n\n----------------------------------------\n\nTITLE: Camera Configuration for Phaser 3 Scene\nDESCRIPTION: Configuration object for setting up cameras in a Phaser 3 scene, including position, dimensions, zoom, rotation, scroll values, and visual properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scene.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    name: '',\n    x: 0,\n    y: 0,\n    width: scene.sys.scale.width,\n    height: scene.sys.scale.height,\n    zoom: 1,\n    rotation: 0,\n    scrollX: 0,\n    scrollY: 0,\n    roundPixels: false,\n    visible: true,\n    backgroundColor: false,\n    bounds: null, // {x, y, width, height}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GridTable Object in Phaser 3 Scene\nDESCRIPTION: Shows how to add a GridTable object to a Phaser 3 scene after loading the plugin. This snippet assumes the plugin has been loaded and is accessible via the scene's 'rexUI' property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = scene.rexUI.add.gridTable(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Emitter Frames\nDESCRIPTION: Configuration for setting texture frames for particles with options for random assignment and quantity\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.setEmitterFrame(frames);\n// emitter.setEmitterFrame(frames, pickRandom, quantity);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    frames: [],\n    cycle: false,\n    quantity: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Tile Collision Methods\nDESCRIPTION: Methods for enabling collision detection on tiles by index, range, exclusion, and properties\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nmap.setCollision(index);\nmap.setCollisionBetween(start, stop);\nmap.setCollisionByExclusion(indexes);\nmap.setCollisionByProperty({key:value});\nmap.setCollisionByProperty({key:[value0, value1]});\nmap.setCollisionFromCollisionGroup();\n```\n\n----------------------------------------\n\nTITLE: Configuring Rex UI Plugin in Phaser 3 Game Configuration\nDESCRIPTION: This snippet demonstrates how to include the Rex UI plugin in the Phaser 3 game configuration. It imports the UIPlugin and adds it to the scene plugins array in the game config object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Blend Mode of Group Members in Phaser 3\nDESCRIPTION: Sets the blend mode of all group members, controlling how they blend with objects beneath them.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setBlendMode(value);\n```\n\n----------------------------------------\n\nTITLE: Popping Items from UniqueItemList (JavaScript)\nDESCRIPTION: Shows methods for popping (removing and returning) items from a UniqueItemList, including from the beginning, end, specific index, or a random position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar item = listA.pop();\nvar item = listA.popFirst();\nvar item = listA.popLast();\nvar item = listA.pop(index);\nvar item = listA.popRandom();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SplitPanels Class in Phaser 3\nDESCRIPTION: Defines a custom SplitPanels class extending the base SplitPanels functionality for more specific use cases.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-splitpanels.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MySplitPanels extends RexPlugins.UI.SplitPanels {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Between Tile and World Coordinates (JavaScript)\nDESCRIPTION: Shows methods for converting between tile coordinates and world coordinates, including snapping world coordinates to the grid.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar worldXY = board.tileXYToWorldXY(tileX, tileY);  // worldXY: {x, y}\n// var out = board.tileXYToWorldXY(tileX, tileY, out);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXY = board.worldXYToTileXY(worldX, worldY);  // tileXY: {x, y}\n// var out = board.worldXYToTileXY(worldX, worldY, out);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gridWorldXY = board.worldXYSnapToGrid(worldX, worldY);\n// var out = board.worldXYSnapToGrid(worldX, worldY, out);\n```\n\n----------------------------------------\n\nTITLE: Using Promise-based Modal for Edit Dialog\nDESCRIPTION: Opens the edit dialog as a modal and returns a Promise that resolves with the form data when closed. This provides an alternative to callback-based modal handling using Promise syntax.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndialog\n    .modalPromise(config)\n    .then(function(data){\n        var firstName = data.firstName;\n        var lastName = data.lastName;\n    })\n```\n\n----------------------------------------\n\nTITLE: Tracking Individual File Loading Progress in Phaser 3\nDESCRIPTION: Event handler for monitoring the progress of individual files being loaded, allowing for per-file progress indicators.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.on('fileprogress', function(file, progress){\n    // var key = file.key;\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Game Setup\nDESCRIPTION: Configures the outline effect plugin in the main game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effectlayer-outline.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport OutlineEffectLayerPlugin from 'phaser3-rex-plugins/plugins/outlineeffectlayer-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexOutlineEffectLayerPlugin',\n            plugin: OutlineEffectLayerPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Game Objects from Configuration in Phaser 3\nDESCRIPTION: Creates multiple game objects based on a configuration object, adding them to the group.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObjects = group.createFromConfig(config);\nvar gameObjects = group.createMultiple(config);    // config in array\n```\n\n----------------------------------------\n\nTITLE: Loading Web Fonts Configuration\nDESCRIPTION: Configuration options for loading Google web fonts and custom fonts using the webfont loader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/webfontloader.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.load.rexWebFont({\n    google: {\n        families: ['Bangers']\n    },\n    // testString: undefined,\n    // testInterval: 20,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating LeaderBoard Instance with Configuration\nDESCRIPTION: JavaScript code to create a leaderboard instance with detailed configuration options including root collection, time filters, page count, and optional board ID and tag.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar leaderBoard = rexFire.add.leaderBoard({\n    root: '',\n    // timeFilters: false,\n    // timeFilterType: 'year',\n    // pageItemCount: 100,\n    // boardID: undefined,\n    // tag: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Rex UI Container Class in Phaser 3\nDESCRIPTION: Shows how to create a custom container class by extending the Rex UI Container. This allows for more complex and reusable UI components in Phaser 3 games.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyContainer extends RexPlugins.UI.Container {\n    constructor(scene, x, y, width, height, children) {\n        super(scene, x, y, width, height, children);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Game Object Tint in Phaser 3\nDESCRIPTION: Demonstrates how to get and set the tint color of a game object, including setting different tints for each corner and clearing the tint.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = gameObject.tintTopLeft;     // color: 0xRRGGBB\nvar color = gameObject.tintTopRight;\nvar color = gameObject.tintBottomLeft;\nvar color = gameObject.tintBottomRight;\nvar isTinted = gameObject.isTinted;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.tint = color;\ngameObject.setTint(color);  // multiply color value\ngameObject.setTint(colorTopLeft, colorTopRight, colorBottomLeft, colorBottomRight);\ngameObject.setTintFill(color);  // replace color value\ngameObject.setTintFill(colorTopLeft, colorTopRight, colorBottomLeft, colorBottomRight);    \ngameObject.clearTint();     // equal to `gameObject.setTint(0xffffff)`\n```\n\n----------------------------------------\n\nTITLE: Adding Background to Sizer in JavaScript\nDESCRIPTION: Demonstrates how to add a background game object to a sizer. The background object will be resized after the sizer's layout method is called. Various types of game objects can be used as backgrounds, including round rectangles, nine-slice, and nine-patch objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.addBackground(gameObject);\n// sizer.addBackground(gameObject, key);\n// sizer.addBackground(gameObject, paddingConfig, key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = scene.rexUI.add.roundRectangle(x, y, width, height, radius, fillColor);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = scene.add.nineslice(x, y, texture, frame, width, height, leftWidth, rightWidth, topHeight, bottomHeight);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = scene.make.nineslice({\n    key: key, \n    frame: frameName,\n    leftWidth: 0, \n    rightWidth: 0,\n    topHeight: 0, \n    bottomHeight: 0\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = scene.rexUI.add.ninePatch(x, y, width, height, key, columns, rows, config);\n```\n\n----------------------------------------\n\nTITLE: Making a Physics Body Pushable in Phaser 3\nDESCRIPTION: Makes a physics body pushable, allowing it to be moved by other bodies during collisions. This is the default state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPushable();\n```\n\n----------------------------------------\n\nTITLE: Pausing a Phaser Game\nDESCRIPTION: Pauses the entire game and emits a PAUSE event for listeners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngame.pause();\n```\n\n----------------------------------------\n\nTITLE: Obtaining Event Emitter from Game Object in Phaser 3\nDESCRIPTION: Shows how to get an event emitter from a Phaser 3 game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ee = gameObject;\n```\n\n----------------------------------------\n\nTITLE: Testing Point Collision in Phaser 3 Arcade Physics\nDESCRIPTION: Checks if a specific point in space is within the physics body of a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nvar hit = gameObject.hitTest(x, y);\n```\n\n----------------------------------------\n\nTITLE: Querying Firestore with Simple Conditions\nDESCRIPTION: Retrieves documents from a collection that match a specific condition using operators like '>', '==', '<', '>=', or '<='.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).where(key, op, value).get()\n    .then(function(querySnapshot) { /* ... */ })\n    .catch(function(error){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Reading Values from Phaser 3 Data Manager\nDESCRIPTION: Methods to retrieve single or multiple values from the Data Manager, including getting all values and querying with regular expressions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/datamanager.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = parent.data.get(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = parent.data.values[key];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar values = parent.data.get(keys); // values: [value, value, ...], keys: [key, key, ...]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar allValues = parent.data.getAll();  // return a copy of data\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = parent.data.query(rgExp);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tag Text Object with Custom Tags\nDESCRIPTION: Adds a Tag Text object with custom tag definitions for styling specific parts of the text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar tags = {\n    tag0: {\n      color: 'red'\n    },\n    tag1: {\n      color: 'blue'\n    }\n};\nvar txt = scene.add.rexTagText(x, y, '<class=\"tag0\">h</class>ello', {tags:tags});\n// var txt = scene.add.rexTagText(x, y, '<class=\"tag0\">h</class>ello', { fontFamily: 'Arial', fontSize: 64, color: '#00ff00', tags:tags });\n```\n\n----------------------------------------\n\nTITLE: Handling Successful File Loading in Phaser 3\nDESCRIPTION: Event handler for when a file is successfully loaded, providing access to the file object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.once('load', function(fileObj){}, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling Window Blur Event in Phaser\nDESCRIPTION: Registers an event handler for when the browser window containing the game loses focus.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ngame.events.on('blur', function(){ })\n```\n\n----------------------------------------\n\nTITLE: Setting Gravity in Matter.js for Phaser 3\nDESCRIPTION: Methods to configure gravity in a Matter.js physics world. Includes setting gravity direction and scale, and disabling gravity completely.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-world.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.world.setGravity(x, y);\n// scene.matter.world.setGravity(x, y, scale);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.world.disableGravity();\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Holy Grail Layout with New Configuration\nDESCRIPTION: Destroys current elements and rebuilds the Holy Grail layout with a new configuration. Allows setting background, header, sides, content, footer, layout mode, spacing, proportions, expansion, and alignment properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nholyGrail\n    .build({\n        // Elements\n        background: backgroundGameObject,\n    \n        header: headerGameObject,\n    \n        leftSide: leftSideGameObject,\n    \n        content: contentGameObject,\n    \n        rightSide: rightSideGameObject,\n    \n        footer: footerGameObject,\n    \n        layoutMode: 0,\n    \n        // Space\n        space: {        \n            header: 0,  // {left, right, top, bottom}\n            footer: 0,  // {left, right, top, bottom}\n            leftSide: 0, // {left, right, top, bottom}\n            rightSide: 0, // {left, right, top, bottom}\n        },\n    \n        // proportion: {\n        //     header: 0,\n        //     footer: 0,\n        //     leftSide: 0,\n        //     rightSide: 0,\n        //     content: 1,\n        // },\n    \n        // expand: {\n        //     header: true,\n        //     footer: true,\n        //     leftSide: true,\n        //     rightSide: true,\n        //     content: false,\n        // },\n    \n        // align: {\n        //     header: 'center',\n        //     footer: 'center',\n        //     leftSide: 'center',\n        //     rightSide: 'center',\n        //     content: 'center',\n        // },\n    })\n    .layout()\n```\n\n----------------------------------------\n\nTITLE: Tween Chain Creation\nDESCRIPTION: Setup and management of sequential tween chains.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tween.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar chain = scene.tweens.chain({\n    targets: null,\n    tweens: [\n        {\n            alpha: 1,            \n            ease: 'Linear',\n            duration: 1000,\n            repeat: 0,\n            yoyo: false\n        }\n    ],\n    delay: 0,\n    loop: 0,\n    paused: false,\n    persist: true\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Fullscreen Mode in Phaser 3\nDESCRIPTION: Demonstrates how to toggle between fullscreen and normal display mode in response to a pointer event. The code checks the current state and either starts or stops fullscreen mode accordingly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fullscreen.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setInteractive().on('pointerdown', function() {\n    if (scene.scale.isFullscreen) {\n        scene.scale.stopFullscreen();\n        // On stop fulll screen\n    } else {\n        scene.scale.startFullscreen();\n        // On start fulll screen\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing OS Information in Phaser 3\nDESCRIPTION: This snippet demonstrates how to access various operating system properties in Phaser 3, such as platform type, version, and pixel ratio.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/device.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sys.game.device.os.android      // Is running on android?\nscene.sys.game.device.os.chromeOS     // Is running on chromeOS?\nscene.sys.game.device.os.cordova      // Is the game running under Apache Cordova?\nscene.sys.game.device.os.crosswalk    // Is the game running under the Intel Crosswalk XDK?\nscene.sys.game.device.os.desktop      // Is running on a desktop?\nscene.sys.game.device.os.ejecta       // Is the game running under Ejecta?\nscene.sys.game.device.os.electron     // Is the game running under GitHub Electron?\nscene.sys.game.device.os.iOS          // Is running on iOS?\nscene.sys.game.device.os.iPad         // Is running on iPad?\nscene.sys.game.device.os.iPhone       // Is running on iPhone?\nscene.sys.game.device.os.kindle       // Is running on an Amazon Kindle?\nscene.sys.game.device.os.linux        // Is running on linux?\nscene.sys.game.device.os.macOS        // Is running on macOS?\nscene.sys.game.device.os.node         // Is the game running under Node.js?\nscene.sys.game.device.os.nodeWebkit   // Is the game running under Node-/Webkit?\nscene.sys.game.device.os.webApp       // Set to true if running as a WebApp, i.e. within a WebView\nscene.sys.game.device.os.windows      // Is running on windows?\nscene.sys.game.device.os.windowsPhone // Is running on a Windows Phone?\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar version = scene.sys.game.device.os.iOSVersion;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pixelRatio = scene.sys.game.device.os.pixelRatio;\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Scrolling in Phaser 3 Scrollable Panel\nDESCRIPTION: This code shows how to enable or disable various scrolling mechanisms (slider, scroller, mouse-wheel) in the scrollable panel.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\npanel.setSliderEnable(enabled);\npanel.sliderEnable = enabled;\nvar enable = panel.sliderEnable;\n\npanel.setScrollerEnable(enabled);\npanel.scrollerEnable = enabled;\nvar enable = panel.scrollerEnable;\n\npanel.setMouseWheelScrollerEnable(enabled);\npanel.mouseWheelScrollerEnable = enabled;\nvar enable = panel.mouseWheelScrollerEnable;\n```\n\n----------------------------------------\n\nTITLE: Handling Menu Collapse Events in Phaser3\nDESCRIPTION: Event handler for when a menu begins to collapse (scale down). Provides access to the collapsing sub-menu, the parent button, and the root menu reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.on('collapse', function(subMenu, parentButton, rootMenu) {\n    // ....\n}, scope)\n```\n\n----------------------------------------\n\nTITLE: Handling Gesture Events on Table Cells in Phaser3\nDESCRIPTION: Event handlers for gesture interactions with cells in a Phaser3 grid table. Includes tap, press, and swipe events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on(tapEventName, function(cellContainer, cellIndex, pointer) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on(`cell.pressstart`, function(cellContainer, cellIndex, pointer) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on(`cell.pressend`, function(cellContainer, cellIndex, pointer) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on(swipeEventName, function(cellContainer, cellIndex, pointer) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in Phaser3\nDESCRIPTION: Implementation of click event handling for game objects using pointer events\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setInteractive().on('pointerdown', function(pointer, localX, localY, event){\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Decoding Audio Data in Phaser 3\nDESCRIPTION: Methods to decode audio data from various sources including base64 encoded strings, data URIs, or ArrayBuffer instances.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.decodeAudio(key, audioData);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.decodeAudio(audioFiles);\n```\n\n----------------------------------------\n\nTITLE: Scrolling Content in Phaser 3 Scrollable Panel\nDESCRIPTION: This code snippet shows various methods to scroll the content within a scrollable panel, including setting and getting the scroll position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npanel.childOY = oy;\n// panel.setChildOY(oy);\n\npanel.setChildOY(oy, true);\n\npanel.addChildOY(oy);\n\npanel.addChildOY(oy, true);\n\nvar childOY = panel.childOY;\n\nvar topOY = panel.topChildOY;\n\nvar bottomOY = panel.bottomChildOY;\n\nvar isOverflow = panel.isOverflow;\n```\n\n----------------------------------------\n\nTITLE: Getting Delta Time in Phaser\nDESCRIPTION: Retrieves the delta time between the current and previous game step, which is smoothed and clamped.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar delta = game.loop.delta;\n// var delta = scene.game.loop.delta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Input in Phaser 3\nDESCRIPTION: Provides a comprehensive example of configuring a color input object with various options including background, swatch, input text, color picker, and event callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorinput.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar colorInput = scene.rexUI.add.colorInput({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    background: backgroundGameObject,\n\n    swatch: undefined,\n    // swatch: { shape: 'circle' },\n    // swatch: { size: 30 },\n    // swatch: swatchGameObject,\n    // swatch: false,\n\n    // swatchSize: undefined,  // or swatch: { size }\n    // squareExpandSwatch: true,\n\n    inputText: inputTextConfig,\n    // inputText: false,\n\n    colorPicker : {\n        width: 160, height: 170,\n\n        background: {\n            radius: 0,\n            color: undefined, alpha: undefined,\n            strokeColor: undefined, strokeAlpha: undefined, strokeWidth: 2\n        },\n        // createBackgroundCallback: function(scene) {\n        //     return gameObject;\n        // }\n\n        // hPalettePosition: 'bottom',\n\n        // space: { left: 10, right: 10, top: 10, bottom: 10, item: 8 }\n    },\n\n    colorComponents: {\n        // height: undefined,\n        \n        // formatLabel: undefined,\n\n        // inputText: undefined,\n\n        // space: { item: 8 }\n    },\n    // colorComponents: false,\n\n    valuechangeCallback: function(newValue, oldValue, colorInput) {\n    },\n    valuechangeCallbackScope: undefined,\n\n    value: 0xffffff,\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        icon: 0,\n        text: 0,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,    \n});\n```\n\n----------------------------------------\n\nTITLE: Loading GLSL Shaders in Phaser 3\nDESCRIPTION: Demonstrates loading GLSL shader files with options to specify shader type (fragment or vertex). Includes the method to retrieve shader data from the cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.glsl(key, url);\n// scene.load.glsl(key, url, shaderType, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Applying Post FX Effect to a Game Object\nDESCRIPTION: Method to apply a post FX pipeline to a game object, creating an instance and adding it to the pipeline list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(MyPostFxClass);\n```\n\n----------------------------------------\n\nTITLE: Camera Pan Movement in Phaser 3\nDESCRIPTION: Methods for panning the camera to specific coordinates with duration and easing options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-effects.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.pan(x, y, duration);\n// camera.pan(x, y, duration, ease, force, callback, context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(camera, progress, x, y) {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('camerapanstart', camera, pan, duration, x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('camerapancomplete', camera, pan);\n```\n\n----------------------------------------\n\nTITLE: Implementing Glow Effect in Phaser 3\nDESCRIPTION: Adds a glow effect to game objects or cameras with customizable color, strength, and knockout options. Supports both pre-FX and post-FX implementations with adjustable quality and distance parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addGlow(color, outerStrength, innerStrength, knockout);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addGlow(color, outerStrength, innerStrength, knockout, quality, distance);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addGlow(color, outerStrength, innerStrength, knockout, quality, distance);\n```\n\n----------------------------------------\n\nTITLE: Sorting and Reordering Children in Phaser 3 Containers\nDESCRIPTION: Demonstrates methods for sorting and reordering child objects within a Container. These methods allow for organizing the visual layout of Container contents.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/container.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.sort(property);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.sort(property, function(childA, childB){\n    return 0; // 0, 1, -1\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.moveTo(child, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.bringToTop(child);\n```\n\n----------------------------------------\n\nTITLE: Implementing Bloom Effect in Phaser 3\nDESCRIPTION: Code examples for adding bloom shader effect to game objects or camera with configurable color, offset, blur strength, and steps. Bloom creates a glowing effect around objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addBloom(color, offsetX, offsetY, blurStrength, strength, steps);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addBloom(color, offsetX, offsetY, blurStrength, strength, steps);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addBloom(color, offsetX, offsetY, blurStrength, strength, steps);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setActive(false);\n// effect.active = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.preFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.color = color;  // hex value\neffect.offsetX = offsetX;\neffect.offsetY = offsetY;\neffect.blurStrength = blurStrength;\neffect.strength = strength;\neffect.steps = steps; // integer\n```\n\n----------------------------------------\n\nTITLE: Loading Scene Plugin in Phaser 3 Scene\nDESCRIPTION: Shows how to load a scene plugin within a Phaser 3 scene, specifying the plugin key, URL, system key, and scene key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pluginsystem.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin(key, url, systemKey, sceneKey);\n```\n\n----------------------------------------\n\nTITLE: Handling Resize Events in Phaser 3\nDESCRIPTION: Shows how to listen for and handle resize events in Phaser 3. The event provides information about the new game size, base size, display size, and previous dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scalemanager.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scale.on('resize', function(gameSize, baseSize, displaySize, previousWidth, previousHeight) {});\n```\n\n----------------------------------------\n\nTITLE: Importing TabPages Plugin in Game Configuration\nDESCRIPTION: How to import and configure the UI plugin in the Phaser game configuration to make the TabPages component available in all scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tabPages = scene.rexUI.add.tabPages(config);\n```\n\n----------------------------------------\n\nTITLE: Aligning Game Objects in a Grid in Phaser3\nDESCRIPTION: Arranges game objects in a grid layout with specified dimensions, cell sizes, and alignment options. Supports various positioning modes through the Phaser.Display.Align constants.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.GridAlign(gameObjects, {\n    width: -1,\n    height: -1,\n    cellWidth: 1,\n    cellHeight: 1,\n    position: Phaser.Display.Align.TOP_LEFT,\n    x: 0,\n    y: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Blitter Container from JSON in Phaser 3\nDESCRIPTION: Creates a Blitter container using a configuration object that specifies its properties. This method allows setting additional properties like angle, alpha, and flip states during creation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar blitter = scene.make.blitter({\n    x: 0,\n    y: 0,\n    key: '',\n\n    // angle: 0,\n    // alpha: 1\n    // flipX: true,\n    // flipY: true,\n    // origin: {x: 0.5, y: 0.5},\n    \n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation (lerp) in Phaser 3\nDESCRIPTION: Performs linear interpolation between two scalar values p0 and p1 based on parameter t (0-1).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interpolation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.Linear(p0, p1, t);\n```\n\n----------------------------------------\n\nTITLE: Controlling Pushability of Physics Body in Phaser 3\nDESCRIPTION: Shows how to set whether a physics body can be pushed by another body and how to retrieve this property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbody.pushable = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.pushable = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pushable = body.pushable;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex UI Plugin from Minified File in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to install the Rex UI plugin in a Phaser 3 scene's preload stage using a minified file. The 'key' parameter must be set to 'rexuiplugin'.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin({\n    key: 'rexuiplugin',\n    url: filePath,\n    sceneKey: 'rexUI'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting World Bounds in Matter.js for Phaser 3\nDESCRIPTION: Method to create world boundaries for Matter.js physics in Phaser 3. Allows configuring the position, size, thickness, and which sides (left/right/top/bottom) to include.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-world.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.world.setBounds(x, y, width, height);\n// scene.matter.world.setBounds(x, y, width, height, thickness, left, right, top, bottom);\n```\n\n----------------------------------------\n\nTITLE: Drawing Multiple Connected Lines in Phaser 3 Graphics\nDESCRIPTION: Methods for drawing connected lines or polygons from an array of points, with options for closing the shape and path.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.strokePoints(points, closeShape, closePath, endIndex);  // points: [{x, y}, ...]\ngraphics.fillPoints(points, closeShape, closePath, endIndex);  // points: [{x, y}, ...]\n```\n\n----------------------------------------\n\nTITLE: Drawing Ellipses with Graphics in Phaser 3\nDESCRIPTION: Methods for drawing filled and stroked ellipses using either ellipse objects or individual parameters with smoothness control.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.strokeEllipseShape(ellipse, smoothness);   // ellipse: Phaser.Geom.Ellipse\ngraphics.strokeEllipse(x, y, width, height, smoothness);\ngraphics.fillEllipseShape(ellipse, smoothness);    // ellipse: Phaser.Geom.Ellipse\ngraphics.fillEllipse(x, y, width, height, smoothness);\n```\n\n----------------------------------------\n\nTITLE: Data Management Operations in Phaser 3 Data Manager\nDESCRIPTION: Additional operations for managing data, including freezing, checking for keys, iterating over data, and getting the data count.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/datamanager.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar isFrozen = parent.data.freeze;\nparent.data.freeze = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasKey = parent.data.has(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.each(function(parent, key, value){\n    /* ... */\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar cnt = parent.data.count;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.reset()\n```\n\n----------------------------------------\n\nTITLE: Removing a Game Object from a Group in Phaser 3\nDESCRIPTION: Removes a single game object from a group with an optional parameter to also remove it from the scene's display and update lists.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.remove(gameObject);\n// group.remove(gameObject, true);  // also remove this game object from display and update list of scene\n```\n\n----------------------------------------\n\nTITLE: Checking Key Down Duration in Phaser 3\nDESCRIPTION: Shows how to check if a key has been pressed down for a specific duration in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardevents.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObject = scene.input.keyboard.addKey('W');  // Get key object\nvar isDown = scene.input.keyboard.checkDown(keyObject, duration);\n```\n\n----------------------------------------\n\nTITLE: Setting Children Interactive in Phaser3 Scrollable Panel\nDESCRIPTION: Configures the scrollable panel to handle interactive behaviors for its children, including click, tap, press, and swipe gestures. This method provides advanced control over input detection and event handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\npanel.setChildrenInteractive({\n    // targetMode: 'parent',\n    targets: targetSizers,\n\n    // dropZone: false,\n\n    // click: {mode: 'release', clickInterval: 100},\n\n    // over: undefined,\n    \n    // press: {time: 251, threshold: 9},\n\n    // tap: {time: 250, tapInterval: 200, threshold: 9, tapOffset: 10, \n    //       taps: undefined, minTaps: undefined, maxTaps: undefined,},\n\n    // swipe: {threshold: 10, velocityThreshold: 1000, dir: '8dir'},\n\n    // inputEventPrefix: 'child.',\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for Cache Add Events in Phaser 3\nDESCRIPTION: Shows how to listen for 'add' events on a cache to detect when new items are added to any Phaser cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\ncache.events.on('add', function(cache, key, item){\n\n})\n```\n\n----------------------------------------\n\nTITLE: Removing a Scene in Phaser 3\nDESCRIPTION: Destroys a scene and fires the scene's 'destroy' event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.remove(key);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Layer Class in Phaser 3\nDESCRIPTION: Shows how to create a custom Layer class extending Phaser.GameObjects.Layer, including constructor and optional preUpdate method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLayer extends Phaser.GameObjects.Layer {\n    constructor(scene, children) {\n        super(scene, children);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Color Object Creation and Manipulation\nDESCRIPTION: Methods for creating and managing Phaser Color objects including setting components and applying color transformations\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/color.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = new Phaser.Display.Color(red, green, blue);\nvar color = Phaser.Display.Color.IntegerToColor(colorInteger);\ncolor.setTo(red, green, blue);\ncolor.setGLTo(red, green, blue);\ncolor.setFromRGB(rgba);\ncolor.setFromHSV(h, s, v);\ncolor.transparent();\ncolor.gray(value);\ncolor.random();\ncolor.randomGray();\n```\n\n----------------------------------------\n\nTITLE: Creating Sound Instances in Phaser 3\nDESCRIPTION: Methods to create reusable sound instances that can be controlled independently, with optional configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar music = scene.sound.add(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar music = scene.sound.add(key, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tabs Object in Phaser 3\nDESCRIPTION: Demonstrates the full configuration options available when creating a Tabs object in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar tabs = scene.rexUI.add.tabs({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    // Elements\n    background: backgroundGameObject,\n    panel: panelGameObject,\n\n    leftButtons: [\n        buttonGameObject,\n        buttonGameObject,\n        // ...\n    ],\n    rightButtons: [\n        buttonGameObject,\n        buttonGameObject,\n        // ...\n    ],\n    topButtons: [\n        buttonGameObject,\n        buttonGameObject,\n        // ...\n    ],\n    bottomButtons: [\n        buttonGameObject,\n        buttonGameObject,\n        // ...\n    ],\n    leftButtonsBackground: leftButtonsBackgroundGameObject,\n    rightButtonsBackground: rightButtonsBackgroundGameObject,\n    topButtonsBackground: topButtonsBackgroundGameObject,\n    bottomButtonsBackground: bottomButtonsBackgroundGameObject,\n\n    expand: {\n        panel: false,\n        leftButtons: false,\n        rightButtons: false,\n        topButtons: false,\n        bottomButtons: false,\n    },\n\n    align: {\n        leftButtons: 'top',\n        rightButtons: 'top',\n        topButtons: 'left',\n        bottomButtons: 'left',\n    },\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        leftButtonsOffset: 0,\n        rightButtonsOffset: 0,\n        topButtonsOffset: 0,\n        bottomButtonsOffset: 0,\n\n        leftButton: 0,\n        rightButton: 0,\n        topButton: 0,\n        bottomButton: 0\n    },\n\n    click: {\n        mode: 'pointerup',\n        clickInterval: 100\n    }\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating RenderTexture from JSON Configuration in Phaser 3\nDESCRIPTION: Creates a render texture using the scene.make factory with a configuration object that specifies position, dimensions, and optional properties like angle, alpha, and scale.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rt = scene.make.renderTexture({\n    x: 0,\n    y: 0,\n    width: 32,\n    height: 32,\n\n    // angle: 0,\n    // alpha: 1\n    // flipX: true,\n    // flipY: true,\n    // scale : {\n    //    x: 1,\n    //    y: 1\n    //},\n    // origin: {x: 0.5, y: 0.5},\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Handling File Loading Error in Phaser 3\nDESCRIPTION: Event handler for when a file fails to load, allowing for error handling and recovery strategies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.once('loaderror', function(fileObj){}, scope);\n```\n\n----------------------------------------\n\nTITLE: Timeline Control Methods\nDESCRIPTION: Collection of timeline control methods including play, stop, pause, resume, and reset functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timeline.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntimeline.play();\ntimeline.play(true);\ntimeline.repeat().play();\ntimeline.repeat(amount).play();\ntimeline.repeat(false);\ntimeline.stop();\ntimeline.pause();\ntimeline.resume();\ntimeline.reset();\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Group with Arcade Physics in Phaser 3\nDESCRIPTION: Creates a dynamic physics group that extends from the Group object class. All sprites in this group will have dynamic physics bodies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar group = scene.physics.add.group(children, config);\n// var group = scene.physics.add.staticGroup(config);\n```\n\n----------------------------------------\n\nTITLE: Destroying a Group and Its Members in Phaser 3\nDESCRIPTION: Destroys both the group object and all of its member game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.destroy(true);\n```\n\n----------------------------------------\n\nTITLE: Cell Visibility Configuration in Phaser3\nDESCRIPTION: Shows how to configure cell visibility callback in the table configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // ...\n    cellVisibleCallback: function(cell, cellContainer, table) {\n        cell.setContainer(cellContainer); // Assign cell container\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Quad Image Tint Color in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to get and set the tint color of a Quad Image instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-image.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Get tint color\nvar color = image.tint;\n\n// Set tint color\nimage.tint = color;\n\n// or\nimage.setTint(color);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tilemap from Tiled Editor Data\nDESCRIPTION: Methods for creating a tilemap object from data created in the Tiled map editor.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar map = scene.add.tilemap(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar map = this.make.tilemap({ \n    key: 'map', \n    tileWidth: 16, \n    tileHeight: 16\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CRT Effect with Options for Game Object\nDESCRIPTION: Applies the CRT post-processing effect to a game object with detailed configuration options including warp parameters and scan line settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexCrtPipeline').add(gameObject, {\n    // warpX: 0.75,\n    // warpY: 0.75,\n    // scanLineStrength: 0.2,\n    // scanLineWidth: 1024,\n    \n    // name: 'rexCrtPostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path for Asset Loading in Phaser 3\nDESCRIPTION: Shows how to set a base path for all asset loading operations, simplifying URL management.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.setPath(path)\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Arcade Physics World in Phaser 3\nDESCRIPTION: Demonstrates how to manually update the Arcade physics world in Phaser 3. This is useful when custom update logic is required or for performance optimization in certain scenarios.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.update(time, delta);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scroller Element in Phaser3 Scrollable Panel\nDESCRIPTION: Gets the scroller component from a panel.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar scroller = panel.getElement('scroller');\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners in Phaser 3\nDESCRIPTION: Demonstrates how to attach event listeners to an event emitter in Phaser 3, including one-time listeners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nee.on(eventName, callback, scope);\nee.once(eventName, callback, scope);  // only fire listeners one time\n```\n\n----------------------------------------\n\nTITLE: Setting Text Content for Tag Text\nDESCRIPTION: Methods to set or update the text content of a Tag Text object, including replacing or appending text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setText('<class=\"name1\">wor</class>ld');\n// txt.text = '<class=\"name1\">wor</class>ld';\n\ntxt.appendText(text);\n// txt.text += '\\n' + text;\n\n// or\ntxt.appendText(text, false);\n// txt.text += text;\n```\n\n----------------------------------------\n\nTITLE: Applying Color Effects with ColorMatrix in Phaser 3\nDESCRIPTION: Shows various methods to manipulate colors using ColorMatrix effect in Phaser 3. Includes brightness, saturation, hue rotation, grayscale, contrast, and special effects like sepia and night vision.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\neffect.brightness(value, multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.saturate(value, multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.desaturate(value, multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.hue(rotation, multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.grayscale(value, multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.blackWhite(multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.contrast(value, multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.negative(multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.desaturateLuminance(multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.sepia(multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.night(intensity, multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.lsd(multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.brown(multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.vintagePinhole(multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.kodachrome(multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.technicolor(multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.polaroid(multiply);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.shiftToBGR(multiply);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Container Class in Phaser 3\nDESCRIPTION: Shows how to create a custom Container class by extending Phaser.GameObjects.Container. This allows for adding custom functionality to containers.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/container.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyContainer extends Phaser.GameObjects.Container {\n    constructor(scene, x, y, children) {\n        super(scene, x, y, children);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Game Object Position in Phaser 3\nDESCRIPTION: Shows how to get and set the position of a game object, including setting to random positions within specified boundaries.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = gameObject.x;\nvar y = gameObject.y;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.x = 0;\ngameObject.y = 0;\ngameObject.setPosition(x,y);\ngameObject.setX(x);\ngameObject.setY(y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setRandomPosition(x, y, width, height);\n// gameObject.setRandomPosition(); // x=0, y=0, width=game.width, height=game.height\n```\n\n----------------------------------------\n\nTITLE: Setting Gravity Well Position in JavaScript\nDESCRIPTION: Updates the position of a gravity well. The x and y coordinates determine the center point from which the gravitational force is applied to particles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nwell.x = x;\nwell.y = y;\n```\n\n----------------------------------------\n\nTITLE: Repeating Texture Frames in RenderTexture in Phaser 3\nDESCRIPTION: Repeats a texture frame to fill either the entire render texture or a specified rectangular area. Supports alpha and tint adjustments.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrt.repeat(key, frame);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrt.repeat(key, frame, x, y, width, height);\n// rt.repeat(key, frame, x, y, width, height, alpha, tint, skipBatch);\n```\n\n----------------------------------------\n\nTITLE: Debugging Tilemap Rendering\nDESCRIPTION: Methods for rendering debug information about a tilemap on a graphics object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmap.renderDebug(graphics);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmap.renderDebug(graphics, {\n    tileColor: new Phaser.Display.Color(105, 210, 231, 150),         // null\n    collidingTileColor: new Phaser.Display.Color(243, 134, 48, 200), // null\n    faceColor: new Phaser.Display.Color(40, 39, 37, 150)             // null\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmap.renderDebug(graphics, styleConfig, layer);\n```\n\n----------------------------------------\n\nTITLE: Killing All Particles in an Emitter in Phaser 3\nDESCRIPTION: Immediately removes all active particles from the emitter without waiting for their lifespans to expire. Useful for clearing effects or resetting the visual state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.killAll()\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Event Listeners in Phaser 3\nDESCRIPTION: Shows how to remove specific event listeners in Phaser 3, including one-time listeners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nee.off(eventName, callback, scope);\nee.off(eventName, callback, scope, true);   // only remove one-time listeners\n```\n\n----------------------------------------\n\nTITLE: Setting Collision Categories for Physics Body in Phaser 3\nDESCRIPTION: Shows how to set and get collision categories and masks for a physics body, controlling which bodies can collide with each other.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar collisionCategory = body.collisionCategory;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setCollisionCategory(category);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.resetCollisionCategory();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar collisionMask = body.collisionMask;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setCollidesWith(categories);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.addCollidesWith(category):\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.removeCollidesWith(category);\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Scripts in Phaser 3\nDESCRIPTION: Shows how to load multiple scripts in a specific order using the load.scripts method. Scripts will be loaded in the exact order specified in the URL array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scripts(key, urlArray);\n// scene.load.scripts(key, urlArray, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Easing Progress Value\nDESCRIPTION: Methods to apply easing animations to progress value changes, including controlling the easing duration and function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.easeValueTo(value, min, max);  // value: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.easeValueTo(value);  // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.stopEaseValue();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setEaseValueDuration(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setEaseValueFunction(ease);\n```\n\n----------------------------------------\n\nTITLE: Loading UniqueItemList Plugin in Preload Stage (JavaScript)\nDESCRIPTION: Shows how to load the UniqueItemList plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexuniqueitemlistplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuniqueitemlistplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Object in Phaser 3 with Rex UI\nDESCRIPTION: Creates a menu object using the Rex UI plugin in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar menu = scene.rexUI.add.menu(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Resume Event in Phaser\nDESCRIPTION: Registers an event handler for when the game resumes from a paused state, typically when the window becomes visible again.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ngame.events.on('resume', function() {});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Graphics Object in Phaser 3\nDESCRIPTION: Creates a simple graphics object instance in a Phaser scene for drawing shapes and paths.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar graphics = scene.add.graphics();\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirm Action Dialog in Phaser3\nDESCRIPTION: Creates a modal confirm dialog and handles button click callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexUI.confirmAction(scene, config)\n    .then(function(data){ })\n```\n\n----------------------------------------\n\nTITLE: Handling Swipe Events\nDESCRIPTION: Shows how to listen for and handle swipe events, including accessing swipe direction states and positioning information.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nswipe.on('swipe', function(swipe, gameObject, lastPointer){\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Camera Shake Effect in Phaser 3\nDESCRIPTION: Methods for creating a shake effect with the camera including duration, intensity and callback handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-effects.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.shake(duration);\n// camera.shake(duration, intensity, force, callback, context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(camera, progress) {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('camerashakestart', camera, shake, duration, intensity);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('camerashakecomplete', camera, shake);\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Phaser 3\nDESCRIPTION: Demonstrates how to emit (fire) events with parameters in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nee.emit(eventName, parameter0, ...);\n```\n\n----------------------------------------\n\nTITLE: Enabling Rotation in Phaser 3 Arcade Physics\nDESCRIPTION: Enables rotation for a physics body, allowing its rotation to be affected by angular acceleration and velocity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAllowRotation();\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Top or Bottom in Phaser 3 Grid Table\nDESCRIPTION: Demonstrates how to scroll the Grid Table content to the top or bottom instantly. These are convenience methods for setting the scroll position to its extremes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntable.scrollToTop();\n\ntable.scrollToBottom();\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Child Game Objects in a Layer in Phaser 3\nDESCRIPTION: Shows how to iterate through child game objects in a Layer using first, last, next, and previous properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = layer.first;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = layer.last;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = layer.next;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = layer.previous;\n```\n\n----------------------------------------\n\nTITLE: Managing Game Object Visibility in Phaser 3\nDESCRIPTION: Demonstrates how to get and set the visibility of a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar visible = gameObject.visible; // visible: true/false\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.visible = visible;\ngameObject.setVisible(visible);\n```\n\n----------------------------------------\n\nTITLE: Adding Tilt Shift Effect in Phaser 3\nDESCRIPTION: Implementation of tilt shift effect with configurable radius, amount, contrast, blur directions, and strength. Tilt shift simulates a shallow depth of field, making scenes appear miniaturized.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addTiltShift(radius, amount, contrast, blurX, blurY, strength);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addTiltShift(radius, amount, contrast, blurX, blurY, strength);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addTiltShift(radius, amount, contrast, blurX, blurY, strength);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setActive(false);\n// effect.active = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.preFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.radius = radius;\neffect.amount = amount;\neffect.contrast = contrast;\neffect.blurX = blurX;\neffect.blurY = blurY;\neffect.strength = strength;\n```\n\n----------------------------------------\n\nTITLE: Loading Texture for Static Image in Phaser 3\nDESCRIPTION: Loads a static image texture into the scene for use with sprites. The 'key' parameter is used to reference the texture later, and 'url' is the path to the image file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Property in Phaser 3 Rex Board Plugin\nDESCRIPTION: Illustrates how to set the Grid object for a board. This allows changing the board's grid structure to either a Quad grid or a Hexagon grid.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nboard.setGrid(grid);\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Object Using Menu Class\nDESCRIPTION: Creates a menu object using the imported Menu class and adds it to a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar menu = new Menu(scene, config);\nscene.add.existing(menu);\n```\n\n----------------------------------------\n\nTITLE: Creating a Point Light in Phaser 3\nDESCRIPTION: Demonstrates how to add a point light to a Phaser scene with specific position, color, radius, intensity, and attenuation parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar pointLight = scene.add.pointlight(x, y, color, radius, intensity, attenuation);\n```\n\n----------------------------------------\n\nTITLE: Extending CustomShapes Class in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Creates a custom shapes class by extending the RexPlugins.UI.CustomShapes class. This allows for customization of complex shape rendering and behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomShapes extends RexPlugins.UI.CustomShapes {\n    constructor(scene, x, y, width, height, config) {\n        super(scene, x, y, width, height, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Color Input Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to import and install the Color Input plugin in the game configuration and add a color input object to a scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorinput.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar colorInput = scene.rexUI.add.colorInput(config);\n```\n\n----------------------------------------\n\nTITLE: Drawing Pie Slices with Graphics in Phaser 3\nDESCRIPTION: Methods for drawing pie-chart slice shapes with control over position, radius, angles, and direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.slice(x, y, radius, startAngle, endAngle, anticlockwise);\ngraphics.slice(x, y, radius, startAngle, endAngle, anticlockwise, overshoot);\n```\n\n----------------------------------------\n\nTITLE: Managing Visible Children in Phaser 3 Camera\nDESCRIPTION: Demonstrates how to filter and retrieve visible children for a camera in Phaser 3, which is useful for optimizing rendering and game logic.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar visible = scene.cameras.getVisibleChildren(children, camera);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar visible = scene.cameras.getVisibleChildren(scene.sys.displayList.list, camera);\n```\n\n----------------------------------------\n\nTITLE: Getting Frame Object in Phaser 3\nDESCRIPTION: Retrieves a specific frame from a texture using the texture key and frame name. This provides access to the frame's properties and dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar frame = scene.textures.getFrame(key, frame);\n```\n\n----------------------------------------\n\nTITLE: Rendering Shader to Texture Manager with Buffer Sampling in Phaser 3\nDESCRIPTION: Renders shader output to the texture manager with buffer sampling enabled. Combines the benefits of texture manager access with feedback capabilities.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nshader.setRenderToTexture(textureKey, true);\n// var texture = shader.glTexture;\n```\n\n----------------------------------------\n\nTITLE: Installing Dissolve Pipeline Plugin via npm in Phaser 3\nDESCRIPTION: Installs the Rex plugins package from npm which includes the dissolve pipeline plugin. This is used before importing the plugin in your project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Extending RoundRectangle Class in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Creates a custom round rectangle class by extending the RexPlugins.UI.RoundRectangle class. This allows for customization of round rectangle behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyRoundRectangle extends RexPlugins.UI.RoundRectangle {\n    constructor(scene, x, y, width, height, radius, fillColor, fillAlpha) {\n        super(scene, x, y, width, height, radius, fillColor, fillAlpha);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Line Angle and Length in Phaser 3\nDESCRIPTION: Demonstrates how to set a line's position, angle, and length from a starting point. Angle is specified in radians which can be converted from degrees.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = Phaser.Geom.Line.SetToAngle(line, x, y, angle, length);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar rad = Phaser.Math.DegToRad(deg);\n```\n\n----------------------------------------\n\nTITLE: Loading Video Files in Phaser 3\nDESCRIPTION: Method for loading video files with options for handling audio and loading as blob data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.video(key, url, noAudio);\n// scene.load.video(key, url, noAudio, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Audio Sprite Marker Configuration in Phaser 3\nDESCRIPTION: Configuration format for audio sprites, defining the resource URLs and a spritemap with start and end times for each named section.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    resources: urls, // an array of audio files\n    spritemap: {\n        markerName0: {\n            start: 0,\n            end: 0\n        },\n        markerName1: {\n            start: 0,\n            end: 0\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Add Texture Event in Phaser 3\nDESCRIPTION: Sets up an event listener for when a texture is added to the texture cache. The event handler receives the key of the added texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.on('addtexture', function(key) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Event Emitter Class in Phaser 3\nDESCRIPTION: Shows how to create a custom event emitter class by extending Phaser.Events.EventEmitter in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyEventEmitter extends Phaser.Events.EventEmitter {\n    // construct() {\n    //     super();\n    // }\n\n    // destroy() {\n    //     super.destroy();\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Map Layers and Tiles\nDESCRIPTION: Iterates through map layers and their tiles, providing access to layer properties and individual tile data. Includes handling for empty tiles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tiledmapdata.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmapData.layers.forEach(function(layer){\n    var name = layer.name;\n\n\n    var alpha = layer.alpha;\n    var visible = layer.visible;\n\n    var x = layer.x;\n    var y = layer.y;\n    var width = layer.width;\n    var height = layer.height;\n    var data = layer.data;\n\n    layer.data.forEach(function(gid, index){\n        var tileX = index % width;\n        var tileY = Math.floor(index / width);\n        if (gid === -1) { // Empty\n\n        } else {\n\n        }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Rotating Game Objects Around a Point with Distance in Phaser3\nDESCRIPTION: Rotates game objects around a point at a specified distance, allowing for precise orbital placement at a fixed radius.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.RotateAroundDistance(gameObjects, point, angle, distance);\n// point: {x, y}, angle: angle in radians\n```\n\n----------------------------------------\n\nTITLE: Handling Match Start Event in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This snippet demonstrates how to listen for the 'match-start' event in the Bejeweled plugin. It provides access to the board object and the bejeweled instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.on('match-start', function(board, bejeweled) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Configuring Triangle Style in Phaser 3\nDESCRIPTION: Defines the style properties for a Triangle object in Phaser 3, including color, stroke, and animation options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    color: undefined,\n    alpha: 1,\n\n    strokeColor: undefined,\n    strokeAlpha: 1,\n    strokeWidth: 1,\n    arrowOnly: false,\n\n    easeDuration: 0,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Round-rectangle Style in Phaser 3\nDESCRIPTION: This snippet shows the structure for styling a Round-rectangle object in Phaser 3. It includes properties for color, alpha, origin, stroke settings, radius, and state-specific overrides for active, hover, and disable states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // $type: 'roundRectangle',\n\n    color: 0xffffff,\n    // alpha: 1,\n    // origin:\n    // originX: \n    // originY:\n    strokeColor: 0xffffff,\n    // strokeAlpha: 1,\n    // strokeWidth: 2,\n    // radius: 0,\n    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    // width: 0,\n    // height: 0,\n\n    // Style override in active state\n    // 'active.color': undefined,\n    // 'active.alpha': undefined,\n    // 'active.strokeColor': undefined,\n    // 'active.strokeAlpha': undefined,\n    // 'active.strokeWidth': undefined,\n    // 'active.radius': undefined,\n    // 'active.xxx': ...\n\n    // Style override in hover state\n    // 'hover.color': undefined,\n    // 'hover.alpha': undefined,\n    // 'hover.strokeColor': undefined,\n    // 'hover.strokeAlpha': undefined,\n    // 'hover.strokeWidth': undefined,\n    // 'hover.radius': undefined,\n    // 'hover.xxx': ...\n\n    // Style override in disable state\n    // 'disable.color': undefined,\n    // 'disable.alpha': undefined,\n    // 'disable.strokeColor': undefined,\n    // 'disable.strokeAlpha': undefined,\n    // 'disable.strokeWidth': undefined,\n    // 'disable.radius': undefined,\n    // 'disable.xxx': ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Circle/Ellipse/Arc Curves in Phaser 3\nDESCRIPTION: Demonstrates various methods for creating and adding circular, elliptical, and arc curves to a path.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/path.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar curve = new Phaser.Curves.Ellipse(x, y, radius);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar curve = new Phaser.Curves.Ellipse(x, y, xRadius, yRadius);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar curve = new Phaser.Curves.Ellipse(x, y, xRadius, yRadius, startAngle, endAngle, clockwise, rotation);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npath.add(curve);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npath.circleTo(radius);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npath.ellipseTo(xRadius, yRadius);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npath.ellipseTo(xRadius, yRadius, startAngle, endAngle, clockwise, rotation);\n```\n\n----------------------------------------\n\nTITLE: Finding Tiles in Field of View in Phaser 3\nDESCRIPTION: Demonstrates how to get an array of tile positions that are within the Field of View.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = fieldOfView.findFOV();\n// var tileXYArray = fieldOfView.findFOV(visiblePoints);\n// var tileXYArray = fieldOfView.findFOV(visiblePoints, originTileXY);\n// var out = fieldOfView.findFOV(visiblePoints, out);\n// var out = fieldOfView.findFOV(visiblePoints, originTileXY, out);\n```\n\n----------------------------------------\n\nTITLE: Creating a Layer in Phaser 3\nDESCRIPTION: Demonstrates how to add a Layer to a Phaser 3 scene, optionally with initial child game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar layer = scene.add.layer();\n// var layer = scene.add.layer(children);\n```\n\n----------------------------------------\n\nTITLE: Configuration Merging in Phaser3\nDESCRIPTION: Utility function to merge a configuration object with default values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/config-data.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar configOut = Phaser.Utils.Objects.Merge(configIn, defaultConfig);\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Collision Body in Phaser 3 Arcade Physics\nDESCRIPTION: Sets a circular collision body for a game object with the specified radius and offset.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setCircle(radius, offsetX, offsetY);\n```\n\n----------------------------------------\n\nTITLE: Calling Functions on Game Objects in Phaser3\nDESCRIPTION: Applies a function to each game object in an array. The function receives each game object as a parameter, and an optional scope can be provided.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.Call(gameObjects, function(gameObject) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling Table Scroll and Control Events in Phaser3\nDESCRIPTION: Event handlers for table scroll and control interactions in a Phaser3 grid table. Includes scroll, slider, and scroller events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('scroll', function(table) {\n    // ...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.getElement('slider').on('inputstart', function(panel) {\n    // ...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.getElement('slider').on('inputend', function(panel) {\n    // ...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.getElement('scroller').on('dragstart', function(panel) {\n    // ...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.getElement('scroller').on('dragend', function(panel) {\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding children to a List in Phaser 3\nDESCRIPTION: Methods for adding children to a List, either at the end or at a specific index position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlist.add(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlist.addAt(child, index);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill and Stroke Styles for Custom Shapes in Phaser 3\nDESCRIPTION: Shows methods to set fill and stroke styles for custom shapes, including color, alpha, and line width, which triggers a redraw.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncustomShapes.setFillStyle(color, alpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncustomShapes.fillColor = color;\ncustomShapes.fillAlpha = alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncustomShapes.setStrokeStyle(lineWidth, color, alpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncustomShapes.lineWidth = lineWidth;\ncustomShapes.strokeColor = color;\ncustomShapes.strokeAlpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Getting Remaining Time of a Timer in Phaser 3\nDESCRIPTION: Retrieves the time remaining before the timer completes. This can be obtained for the current iteration or overall timer duration in milliseconds or seconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar remaining = timer.getRemaining();   // ms\nvar remaining = timer.getRemainingSeconds(); // sec\n// var remaining = timer.getOverallRemaining();   // ms\n// var remaining = timer.getOverallRemainingSeconds(); // sec\n```\n\n----------------------------------------\n\nTITLE: Adding Edge Emit Zone to Particle Emitter in JavaScript\nDESCRIPTION: Creates an edge emit zone that places particles along the edge of a geometric shape. The source can be any Phaser geometry with a getPoints method like Circle, Ellipse, Rectangle, Triangle, Polygon, or Path/Curve.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar zone = emitter.addEmitZone({\n    type: 'edge',\n    source: curve,\n\n    quantity: 1,\n    stepRate: 0,\n    yoyo: false,\n    seamless: true,\n    total: -1\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Scale Manager Properties in Phaser 3\nDESCRIPTION: Demonstrates how to access various properties of the scale manager, including game size, base size, display size, and parent size.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scalemanager.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameSize = scene.scale.gameSize;\nvar baseSize = scene.scale.baseSize;\nvar displaySize = scene.scale.displaySize;\nvar parentSize = scene.scale.parentSize;\n```\n\n----------------------------------------\n\nTITLE: Setting Both X and Y Positions of Group Members in Phaser 3\nDESCRIPTION: Sets both X and Y positions of all group members, with optional step parameters to create spacing in both directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setXY(x, y);\n// group.setXY(x, y, stepX, stepY);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Edge Source for Emit Zone in JavaScript\nDESCRIPTION: Defines a custom edge source object that implements the getPoints method required for edge-type emit zones. This allows for creating custom shapes that particles can be emitted from.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    getPoints: function(quantity, stepRate) {\n        // output = [point0, point1, ...];  // point: Phaser.Math.Vector2, or {x, y}\n        return output;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Behavior in Phaser 3 Sizer Plugin\nDESCRIPTION: Methods for creating and managing modal behavior for a sizer object, including configuration options and events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.onCreateModalBehavior = function(sizer, config) {\n    // ...\n    sizer.modalClose(data);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.modalClose(data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.modal(onClose);  // Use default modal config\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.modal({\n    // cover: {\n    //     color: 0x0,\n    //     alpha: 0.8,\n    //     transitIn: function(gameObject, duration) { },\n    //     transitOut: function(gameObject, duration) { },\n    // },\n    // cover: false, \n\n    // When to close modal dialog?\n    // touchOutsideClose: false,\n    // anyTouchClose: false,\n    // timeOutClose: false,\n    // manualClose: false,\n\n    // duration: {\n    //     in: 200,\n    //     hold: 2000,\n    //     out: 200\n    // }\n\n    // transitIn: 0,\n    // transitOut: 0,\n\n    // destroy: true\n}, onClose);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer\n    .modalPromise(config)\n    .then(function(data){\n        \n    })\n```\n\n----------------------------------------\n\nTITLE: Handling Video Events in Phaser 3\nDESCRIPTION: Various event listeners for monitoring video states like unsupported formats, unlocking, errors, metadata availability, timeouts, and playback status.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('unsupported', function(video, error){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('unlocked', function(video, error){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('error', function(video, error){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('metadata', function(video){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('timeout', function(video){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('play', function(video){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('playing', function(video){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('textureready', function(video){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('complete', function(video){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('loop', function(video){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('seeking', function(video){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('seeked', function(video){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('created', function(video, width, height){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('stalled', function(video, width, height){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.on('stop', function(video){\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Installs the Rex plugins package from npm for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-sprite.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Rotating Camera in Phaser 3\nDESCRIPTION: Shows methods to rotate the camera in Phaser 3, including setting rotation in degrees or radians, and retrieving the current rotation angle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setAngle(angle);  // angle in degree\ncamera.setRotation(angle);  // angle in radians\ncamera.rotation = angle; // angle in radians\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar angle = camera.rotation;  // angle in radians\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring UI Plugin for Phaser 3\nDESCRIPTION: Code snippet for importing and configuring the UI Plugin, which includes the Image Input Label, in a Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    parent: divId,\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    },\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values in Pre-FX Pipeline\nDESCRIPTION: These snippets show various methods for setting uniform values in a pre-fx pipeline instance. They cover setting float, int, and vector values with different arities.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/prefx-pipeline.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set1f(name, value0);\n// pipelineInstance.set1f(name, value0, shader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set1fv(name, value0);\n// pipelineInstance.set1fv(name, value0, shader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set1i(name, value0);\n// pipelineInstance.set1i(name, value0, shader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set2f(name, value0, value1);\n// pipelineInstance.set2f(name, value0, value1, shader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set2fv(name, value0, value1);\n// pipelineInstance.set2fv(name, value0, value1, shader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set2i(name, value0, value1);\n// pipelineInstance.set2i(name, value0, value1, shader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set3f(name, value0, value1, value2);\n// pipelineInstance.set3f(name, value0, value1, value2, shader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set3fv(name, value0, value1, value2);\n// pipelineInstance.set3fv(name, value0, value1, value2, shader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set3i(name, value0, value1, value2);\n// pipelineInstance.set3i(name, value0, value1, value2, shader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set4f(name, value0, value1, value2, value3);\n// pipelineInstance.set4f(name, value0, value1, value2, value3, shader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set4fv(name, value0, value1, value2, value3);\n// pipelineInstance.set4fv(name, value0, value1, value2, value3, shader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set4i(name, value0, value1, value2, value3);\n// pipelineInstance.set4i(name, value0, value1, value2, value3, shader);\n```\n\n----------------------------------------\n\nTITLE: Accessing Analog Stick States\nDESCRIPTION: Methods to access and read the state of analog sticks on the gamepad.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gamepad.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar leftStick = gamepad.leftStick;\nvar rightStick = gamepad.rightStick;\n```\n\n----------------------------------------\n\nTITLE: Creating a BaseShader in Phaser 3\nDESCRIPTION: Creates a BaseShader object that defines shader source code and uniforms. This can be passed to a Shader game object instead of using a key from the shader cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar baseShader = new Phaser.Display.BaseShader(key, fragmentSrc, vertexSrc, uniforms);\n```\n\n----------------------------------------\n\nTITLE: Testing Line Intersections with Circles in Phaser 3\nDESCRIPTION: Shows how to test if a line intersects with a circle and get the intersection points.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.LineToCircle(line, circle);\n// var result = Phaser.Geom.Intersects.LineToCircle(line, circle, nearest);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetLineToCircle(line, circle);\n// var out = Phaser.Geom.Intersects.GetLineToCircle(line, circle, out);\n```\n\n----------------------------------------\n\nTITLE: Managing Game Object Alpha in Phaser 3\nDESCRIPTION: Shows how to get, set, and clear the alpha (transparency) of a game object, including setting different alpha values for each corner.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = gameObject.alpha;  // 0~1\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setAlpha(alpha);\n// gameObject.alpha = alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setAlpha(topLeft, topRight, bottomLeft, bottomRight);\n// gameObject.alphaTopLeft = alpha;\n// gameObject.alphaTopRight = alpha;\n// gameObject.alphaBottomLeft = alpha;\n// gameObject.alphaBottomRight = alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.clearAlpha();\n```\n\n----------------------------------------\n\nTITLE: Configuring Game for DOM Elements in Phaser3\nDESCRIPTION: Basic game configuration setup required for enabling DOM elements and file chooser functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filechooser.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    parent: divId,\n    // fullscreenTarget: divId, // For fullscreen\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    },\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Enabling Physics Body with Position Reset in Phaser 3\nDESCRIPTION: Enables the physics body on a game object and resets its position to the specified coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.enableBody(true, x, y);\n// gameObject.enableBody(true, x, y, enableGameObject, showGameObject);\n```\n\n----------------------------------------\n\nTITLE: Accessing Firebase Plugin in Phaser Scene\nDESCRIPTION: JavaScript code to retrieve the Firebase plugin instance from the Phaser plugins registry. This gives access to the plugin's functionality in your game scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar rexFireBase = scene.plugins.get('rexfirebaseplugin');\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication State Change Listener\nDESCRIPTION: Establishes a listener for authentication state changes that triggers when a user signs in or out. The callback provides access to the user object containing profile information when signed in.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfirebaseApp.auth().onAuthStateChanged(function (user) {\n    if (user) {\n        // User is signed in.\n        var displayName = user.displayName;\n        var email = user.email;\n        var emailVerified = user.emailVerified;\n        var photoURL = user.photoURL;\n        var isAnonymous = user.isAnonymous;\n        var uid = user.uid;\n        var providerData = user.providerData;\n        // ...\n    } else {\n        // User is signed out.\n        // ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Global Animation for Sprites in Phaser 3\nDESCRIPTION: Creates a global animation that can be used by any sprite in the scene. The 'config' parameter defines the animation properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.anims.create(config);\n```\n\n----------------------------------------\n\nTITLE: Calculating Speed in Phaser 3\nDESCRIPTION: Method to calculate speed based on distance and time. Takes distance in pixels and time in milliseconds as parameters\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/distance.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar d = Phaser.Math.GetSpeed(distance, time);\n```\n\n----------------------------------------\n\nTITLE: Configuring Badge Label Instance\nDESCRIPTION: Full configuration object for creating a badge label with all available options including positioning, badges, spacing and other properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-badgelabel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar badgeLabel = scene.rexUI.add.badgeLabel({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    background: backgroundGameObject,\n    main: mainItemGameObject,\n\n    leftTop: leftTopBadgeGameObject,\n    centerTop: centerTopBadgeGameObject,\n    rightTop: rightTopBadgeGameObject,\n    leftCenter: leftCenterBadgeGameObject,\n    center: centerBadgeGameObject,\n    rightCenter: rightCenterBadgeGameObject,\n    leftBottom: leftBottomBadgeGameObject,\n    centerBottom: centerBottomBadgeGameObject,\n    rightBottom: rightBottomBadgeGameObject,\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Arc Shapes in Phaser 3\nDESCRIPTION: Creates an Arc shape game object with specified position, radius, angles, and appearance properties. This is the standard method for adding arcs to a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar arc = scene.add.arc(x, y, radius, startAngle, endAngle, anticlockwise, fillColor);\n// var arc = scene.add.arc(x, y, radius, startAngle, endAngle, anticlockwise, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Player with Configuration\nDESCRIPTION: Demonstrates creating a TCRP player with configuration options including commands and time scale.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar player = scene.plugins.get('rexTCRP').addPlayer(scene, {\n    // commands: [],       // [[time, command], [time, command], ...]\n    // timeScale: 1,\n    // scope: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom FileSelectorButton in Phaser 3\nDESCRIPTION: Code for creating an instance of a custom file selector button class in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = new MyFileSelectorButton(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Frame Names from Texture in Phaser 3\nDESCRIPTION: Retrieves an array of all frame names in a texture. An optional parameter determines whether to include the '__BASE' frame in the returned list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar nameList = texture.getFrameNames();\n// nameList does not include `__BASE`\n```\n\n----------------------------------------\n\nTITLE: Rotating a Point Around a Position in Phaser 3\nDESCRIPTION: Rotates a point around a specified coordinate (x,y) by a given angle in radians. This is useful for orbital movements and rotational positioning.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Math.RotateAround(point, x, y, angle);\n```\n\n----------------------------------------\n\nTITLE: Managing Game Object Angle in Phaser 3\nDESCRIPTION: Shows how to get and set the angle of a game object in both degrees and radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar angle = gameObject.angle;\nvar radians = gameObject.rotation;  // angle in radians\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.angle = degrees;\ngameObject.rotation = radians;\ngameObject.setAngle(degrees);\ngameObject.setRotation(radians);\n```\n\n----------------------------------------\n\nTITLE: Drawing Frame on Canvas in Phaser 3\nDESCRIPTION: Method to draw a texture frame onto the Canvas in Phaser 3 with various positioning options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.drawFrame(key, frame);\n// canvas.drawFrame(key, frame, dx, dy, dWidth, dHeight);\n// canvas.drawFrame(key, frame, dx, dy, dWidth, dHeight, sxOffset, syOffset, sWidth, sHeight);\n```\n\n----------------------------------------\n\nTITLE: Using Callback Functions for Dynamic Property Values in Phaser 3\nDESCRIPTION: Demonstrates using a callback function to dynamically set property values for image game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/image.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction() { return 0; }\n```\n\n----------------------------------------\n\nTITLE: Applying Forces to Matter.js Physics Objects\nDESCRIPTION: Methods to apply forces to physics bodies, including directional forces, positional forces, and thrusting in different directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.applyForce(force);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.applyForceFrom(position, force); // position, force: {x, y}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.thrust(speed);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.thrustLeft(speed);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.thrustRight(speed);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.thrustBack(speed);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.thrustBack(speed);\n```\n\n----------------------------------------\n\nTITLE: Creating Game Objects from Object Layers\nDESCRIPTION: Methods for creating game objects from object layers in a tilemap, using object properties like GID, ID, or name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar sprites = map.createFromObjects(layerName, {\n    // gid: 26,\n    // name: 'bonus',\n    // id: 9,\n\n    // classType: Sprite,\n    // ignoreTileset\n    // scene,\n    // container: null,\n    // key: null,\n    // frame: null\n}, useTileset);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar sprites = map.createFromObjects(layerName, configArray, useTileset);\n```\n\n----------------------------------------\n\nTITLE: Circle Point Operations in Phaser 3\nDESCRIPTION: Demonstrates various point-related operations for Circles, including getting points on the edge, random points inside, and checking if points are inside the Circle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-circle.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = circle.getPoint(t);  // t : 0 ~ 1 (angle/360)\n// var point = circle.getPoint(t, point);  // modify point\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = Phaser.Geom.Circle.CircumferencePoint(circle, angle);  // angle in degrees\n// var point = Phaser.Geom.Circle.CircumferencePoint(circle, angle, point);  // modify point\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = circle.getRandomPoint();\n// var point = circle.getRandomPoint(point);  // modify point\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = circle.getPoints(quantity);\n// var points = circle.getPoints(quantity, null, points);  // push points\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = circle.getPoints(false, step);\n// var points = circle.getPoints(false, step, points);  // push points\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInside = circle.contains(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInside = Phaser.Geom.Circle.ContainsPoint(circle, point);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInside = Phaser.Geom.Circle.ContainsRect(circle, rect);  // rect : 4 points\n```\n\n----------------------------------------\n\nTITLE: Accessing Table Elements in Phaser3\nDESCRIPTION: Methods for retrieving various elements of a Phaser3 grid table, including background, table body, slider components, scroller, header, and footer. Also includes methods for accessing elements by name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = table.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tableBody = table.getElement('table');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar layer = table.getElement('tableLayer');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar track = table.getElement('slider.track');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar thumb = table.getElement('slider.thumb');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar scroller = table.getElement('scroller');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tableBody = table.getElement('header');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tableBody = table.getElement('footer');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = table.getElement('#' + name);\n// var gameObject = table.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = table.getByName(name);\n// var gameObject = table.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Displaying Edit Dialog as Modal (Simple Version)\nDESCRIPTION: Opens the edit dialog as a modal with default configuration and provides a callback function to handle dialog closure. The callback receives the entered form data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.modal(onClose);  // Use default modal config\n```\n\n----------------------------------------\n\nTITLE: Setting Gravity in Phaser 3 Arcade Physics\nDESCRIPTION: Sets object-specific gravity for a physics body in both X and Y directions. This overrides the world gravity for this specific object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setGravity(x, y);\n```\n\n----------------------------------------\n\nTITLE: Importing TransitionImage Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to install the plugin from npm, configure it in the game configuration, and add a transition image to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TransitionImagePlugin from 'phaser3-rex-plugins/plugins/transitionimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTransitionImagePlugin',\n            plugin: TransitionImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexTransitionImage(x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Controlling Rotation of Physics Body in Phaser 3\nDESCRIPTION: Demonstrates how to enable or disable rotation for a physics body and set angular velocity, acceleration, and drag.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAllowRotation();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAllowRotation(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar allowRotation = body.allowRotation;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAngularVelocity(v);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar av = body.angularVelocity;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAngularAcceleration(v);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar aa = body.angularAcceleration;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAngularDrag(v);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ad = body.angularDrag;\n```\n\n----------------------------------------\n\nTITLE: Custom Bitmap Text Class\nDESCRIPTION: Define a custom bitmap text class extending Phaser's BitmapText with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends Phaser.GameObjects.BitmapText {\n    constructor(scene, x, y, key, text, size, align) {\n        super(scene, x, y, key, text, size, align);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Elapsed Time of a Timer in Phaser 3\nDESCRIPTION: Retrieves the time that has elapsed since the timer started. This can be obtained in milliseconds or seconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar elapsed = timer.getElapsed();   // ms\nvar elapsed = timer.getElapsedSeconds(); // sec\n// var elapsed = timer.elapsed;  // ms\n```\n\n----------------------------------------\n\nTITLE: Get Neighbor Tile Position in JavaScript\nDESCRIPTION: Methods to retrieve neighboring tile positions in different directions for quad and hexagon grids. Includes single direction, multiple directions, and all directions queries.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar neighborTileXY = board.getNeighborTileXY(srcTileXY, direction);\n// var out = board.getNeighborTileXY(srcTileXY, direction, out);\n```\n\n----------------------------------------\n\nTITLE: Creating Continuous Particle Flow in Phaser 3\nDESCRIPTION: Creates a continuous flow of particles with control over frequency, count, and optional automatic stopping. This is useful for effects like fire, smoke, or water.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.flow(frequency, count, stopAfter);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: Initializes a Firebase application instance with configuration details. The configuration includes API keys and endpoints necessary to connect to your Firebase project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar firebaseApp = firebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Scene Update Event Listener in JavaScript\nDESCRIPTION: Illustrates how to register an event listener for the 'update' event in a Phaser 3 scene. This event occurs after 'preupdate' and is where most game logic and object updates should be placed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.events.on('update', function(time, delta){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic TileSprite\nDESCRIPTION: Creates a basic tile sprite game object with position, dimensions, and texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilesprite.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.tileSprite(x, y, width, height, textureKey);\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of a Custom NameInputDialog\nDESCRIPTION: Code to create an instance of a custom NameInputDialog class that extends the base class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = new MyDialog(scene, config, creators);\n```\n\n----------------------------------------\n\nTITLE: Adding Skewable Render Texture to Phaser 3 Scene (JavaScript)\nDESCRIPTION: Shows how to add a skewable render texture object to a Phaser 3 scene after the plugin has been loaded.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-rendertexture.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexSkewRenderTexture(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Wildcard Symbol\nDESCRIPTION: Methods to set and get the wildcard symbol, which can match with any other symbol during matching operations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmatch.setWildcard(symbol);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmatch.wildcard = symbol;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar wildcard = match.wildcard;\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events on Sizer Children in Phaser 3 Rex UI\nDESCRIPTION: Shows how to add click events to specific children of a Sizer object. This allows for more granular control over interactions within the Sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.onClick(child, callback, scope);\n// sizer.onClick(child, callback, scope, config);\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Child Element in Phaser 3 Scrollable Panel\nDESCRIPTION: This snippet demonstrates how to scroll the panel to a specific child element, with options for alignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npanel.scrollToChild(child, align);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Style for Graphics in Phaser 3\nDESCRIPTION: Sets the line style for subsequent drawing operations, specifying width, color (in hexadecimal format), and alpha values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.lineStyle(lineWidth, color, alpha);   // color: 0xRRGGBB\n```\n\n----------------------------------------\n\nTITLE: Controlling Video Playback Rate in Phaser 3\nDESCRIPTION: Methods to get and set the playback rate of the video, allowing for speed adjustments.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar rate = video.getPlaybackRate();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.setPlaybackRate(rate);\n```\n\n----------------------------------------\n\nTITLE: UI Helper Methods Implementation\nDESCRIPTION: Collection of helper methods for managing UI components including parent retrieval, show/hide functionality, and event handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nvar parentSizer = scene.rexUI.getParentSizer(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar parentSizer = scene.rexUI.getParentSizer(gameObject, name);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar topmostSizer = scene.rexUI.getTopmostSizer(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexUI.removeFromParent(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Loading Multi-File Texture Atlas in Phaser 3\nDESCRIPTION: Method for loading a texture atlas that spans multiple image files, defined by a single JSON file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.multiatlas(key, atlasURL);\n// scene.load.multiatlas(key, atlasURL, path, baseURL, atlasXhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Generating Random Numbers in Phaser3\nDESCRIPTION: Various methods for generating random numbers, including fractions, integers, and numbers within specific ranges.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/random-data-generator.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = rnd.frac();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = rnd.integer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = rnd.real();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = rnd.between(min, max);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = rnd.realInRange(min, max);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = rnd.normal();\n```\n\n----------------------------------------\n\nTITLE: Helper Methods for Chess Selection in Phaser 3 Bejeweled Plugin\nDESCRIPTION: These snippets demonstrate various helper methods for selecting and manipulating chess pieces in the Bejeweled plugin, including getting chess by position and finding neighbor chess.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = bejeweled.worldXYToChess(worldX, worldY);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = bejeweled.tileXYToChess(tileX, tileY);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess2 = bejeweled.getNeighborChessAtAngle(chess1, angle);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess2 = bejeweled.getNeighborChessAtDirection(chess1, direction);\n```\n\n----------------------------------------\n\nTITLE: Physics Configuration for Phaser 3 Scene\nDESCRIPTION: Configuration object for setting up physics in a Phaser 3 scene, allowing selection between Arcade and Matter physics engines with their respective configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scene.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    default: 'arcade', // 'arcade', or 'matter'\n    arcade: {...},\n    matter: {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Closing DropDownList Panel Programmatically\nDESCRIPTION: Manually closes the dropdown list panel.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.closeListPanel();\n```\n\n----------------------------------------\n\nTITLE: Handling Animation Events on Sprite in Phaser 3\nDESCRIPTION: Sets up event listeners for various animation events on the sprite, such as start, restart, complete, stop, update, and repeat.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.on('animationstart', function(currentAnim, currentFrame, sprite){});\n\nsprite.on('animationrestart', function(currentAnim, currentFrame, sprite){});\n\nsprite.on('animationcomplete', function(currentAnim, currentFramee, sprite){});\n\nsprite.on('animationstop', function(currentAnim, currentFrame, sprite){});\n\nsprite.on('animationupdate', function(currentAnim, currentFrame, sprite){});\n\nsprite.on('animationrepeat', function(currentAnim, currentFrame, sprite){});\n```\n\n----------------------------------------\n\nTITLE: Managing Post-FX Pipeline for Game Objects in Phaser 3\nDESCRIPTION: Shows how to add, remove, and get post-processing effect pipelines for game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(PostFxClass);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.removePostPipeline(PostFxClass);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.resetPipeline(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.postPipelines = [];\ngameObject.hasPostPipeline = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = gameObject.getPostPipeline(PostFxClass);\n```\n\n----------------------------------------\n\nTITLE: Getting World Position from Tile Coordinates\nDESCRIPTION: Converts tile coordinates to world position in the hexagon grid.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagongrid.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar worldXY = grid.getWorldXY(tileX, tileY);  // worldXY: {x, y}\n// var out = grid.getWorldXY(tileX, tileY, out);\n```\n\n----------------------------------------\n\nTITLE: Creating a Layer from Existing Map Data\nDESCRIPTION: Methods for creating a tilemap layer from existing layer data in the map.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar layer = map.createLayer(layerID, tileset);\n// var layer = map.createLayer(layerID, tileset, x, y);\n```\n\n----------------------------------------\n\nTITLE: Importing Script Tag Loader Plugin in Phaser 3 Game Configuration\nDESCRIPTION: This snippet demonstrates how to import and install the Script Tag Loader plugin in the game configuration of Phaser 3. It also shows how to use the plugin in the preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scripttagloader.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScriptTagLoaderPlugin from 'phaser3-rex-plugins/plugins/scripttagloader-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexScriptTagLoader',\n            plugin: ScriptTagLoaderPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.rexScriptTag(url);\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Text Instance\nDESCRIPTION: Demonstrates full configuration options for creating a dynamic text instance including styling, background, and text properties\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.rexDynamicText({\n    x: 0, \n    y: 0,\n    width: undefined, \n    height: undefined,\n    resolution: 1,\n    padding: 0,\n    background: {\n        color: null,\n        color2: null,\n        horizontalGradient: true,\n        stroke: null,\n        strokeThickness: 2,\n        cornerRadius: 0,\n        cornerIteration: null\n    },\n    innerBounds: {\n        color: null,\n        color2: null,\n        horizontalGradient: true,\n        stroke: null,\n        strokeThickness: 2\n    },\n    style: {\n        bold: false,\n        italic: false,\n        fontSize: '16px',\n        fontFamily: 'Courier',\n        color: '#fff',\n        stroke: '#fff',\n        strokeThickness: 0,\n        shadowColor: null,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0,\n        shadowBlur: 0,\n        backgroundColor: null,\n        backgroundHeight: undefined,\n        backgroundBottomY: undefined,\n        offsetX: 0,\n        offsetY: 0\n    },\n    childrenInteractive: false,\n    text: '',\n    wrap: undefined,\n    testString: '|MÉqgy'\n});\n```\n\n----------------------------------------\n\nTITLE: Extending DynamicText Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom DynamicText class by extending the base component. This allows for adding custom functionality to dynamic text rendering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends RexPlugins.UI.DynamicText {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Swirl Effect\nDESCRIPTION: Code for applying swirl effect to game objects or camera with configuration options\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-swirl.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexSwirlPipeline').add(gameObject, {\n    // center: {\n    //    x: windowWidth / 2,\n    //    y: windowHeight / 2\n    //}\n    // radius: 0,\n    // rotation: 0,  // or angle: 0,\n    // name: 'rexSwirlPostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Loading XML Files in Phaser 3\nDESCRIPTION: Method for loading XML data files for use in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.xml(key, url);\n// scene.load.xml(key, url, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Adding Text Area Object Using Rex UI Plugin\nDESCRIPTION: Creates a text area UI component in a Phaser 3 scene after loading the Rex UI plugin. The component requires a configuration object to customize its appearance and behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar textArea = scene.rexUI.add.textArea(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Text Area Input with Rex UI Plugin in Phaser 3\nDESCRIPTION: This code snippet demonstrates how to create a text area input object using the Rex UI plugin in Phaser 3. It includes a wide range of configuration options for customizing the appearance and behavior of the text area, slider, and overall layout.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar textAreaInput = scene.rexUI.add.textAreaInput({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    // Elements\n    background: backgroundGameObject,\n\n    text: {\n        background: {\n            color: null,\n            color2: null,\n            horizontalGradient: true,\n\n            stroke: null,\n            strokeThickness: 2,\n\n            cornerRadius: 0,\n            cornerIteration: null,\n            \n            // Style when focus\n            // 'focus.color': ...\n            // 'focus.color2': ...\n            // 'focus.stroke': ...\n        },\n        focusStyle: undefined,\n\n        innerBounds: {\n            color: null,\n            color2: null,\n            horizontalGradient: true,\n\n            stroke: null,\n            strokeThickness: 2\n        },\n\n        style: {\n            bold: false,\n            italic: false,\n            fontSize: '16px',\n            fontFamily: 'Courier',\n            color: '#fff',\n            stroke: '#fff',\n            strokeThickness: 0,\n            shadowColor: null,\n            shadowOffsetX: 0,\n            shadowOffsetY: 0,\n            shadowBlur: 0,\n            backgroundColor: null,\n            backgroundHeight: undefined,\n            backgroundBY: undefined,\n            offsetX: 0,\n            offsetY: 0,\n\n            // Style when cursor move on\n            // 'cursor.color': ...\n            // 'cursor.backgroundColor': ...\n            // 'cursor.xxx': ...\n        },\n        cursorStyle: undefined,\n\n        childrenInteractive: false,\n\n        text: '',\n\n        wrap: {\n            lineHeight: undefined,\n            useDefaultLineHeight: true,\n            maxLines: 1,\n            wrapWidth: undefined,\n            letterSpacing: 0,\n            hAlign: 0,\n            vAlign: 'center',  // For single line text input\n            wrapMode: 'char',  // For single line text input\n        },\n\n        textArea: true,\n        \n        // Parameters of hidden-text-editor   \n        // inputType: 'text',  // 'text'|'password'|'textarea'|...                \n        \n        // readOnly: false,\n        // maxLength: undefined,\n        // minLength: undefined,\n        // selectAll: false,\n\n        // enterClose: true,\n\n        // Callbacks\n        // onOpen: function (textObject, hiddenInputText) {\n        // },\n\n        // onClose: function (textObject, hiddenInputText) {\n        // },\n\n        // onUpdate: function (text, textObject, hiddenInputText) {\n        //     return text;\n        // },\n\n        // onAddChar: function(child, index, canvasInput) {\n        //    child.modifyStyle({...})\n        // },\n\n        // onCursorOut: function(child, cursorIndex, canvasInput) {\n        //     child.modifyStyle({\n        //         \n        //     });\n        // },\n\n        // onCursorIn: function(child, cursorIndex, canvasInput) {\n        //     child.modifyStyle({\n        //         \n        //     });\n        // },\n\n        // parseTextCallback: function(text) {\n        //     return text;\n        // }.        \n    },\n    // alwaysScrollable: false,\n\n    slider: {\n        // background: sliderBackgroundGameObject,\n        track: trackGameObject,\n        /* \n        track: { \n            width: 1, height: 1,\n            radius: 0, \n            color: undefined, alpha: 1,\n            strokeColor: undefined, strokeAlpha: 1, strokeWidth: 2,\n            shape: undefined\n        }\n        */\n\n\n        // indicator: indicatorGameObject,\n        thumb: thumbGameObject,\n        /* \n        thumb: { \n            width: 1, height: 1,\n            radius: 0, \n            color: undefined, alpha: 1,\n            strokeColor: undefined, strokeAlpha: 1, strokeWidth: 2,\n            shape: undefined\n        }\n        */\n\n        // input: 'drag',\n        // position: 'right',\n\n        // hideUnscrollableSlider: false,\n        // disableUnscrollableDrag: false,\n        // adaptThumbSize: false,\n        // minThumbSize: undefined,\n        \n        // buttons: {\n        //     top: topButtonGameObject, bottom: bottomButtonGameObject,\n        //     left: leftButtonGameObject, right: rightButtonGameObject,\n        //     step: 0.01,\n        // }\n    },\n\n    // scroller: false,  // No scrollor support\n\n    mouseWheelScroller: false,\n    // mouseWheelScroller: {\n    //     focus: true,\n    //     speed: 0.1\n    // },\n\n    clampChildOY: false,\n\n    header: headerGameObject,\n    footer: footerGameObject,\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        text: 0,\n        // text: {\n        //    top: 0,\n        //    bottom: 0,\n        //    left: 0,\n        //    right: 0,\n        //},\n        \n        slider: 0,\n        // slider: {\n        //     top: 0,\n        //     bottom: 0,\n        //     left: 0,\n        //     right: 0,\n        // },\n\n        header: 0,\n        footer: 0,\n    },\n\n    expand: {\n        header: true,\n        footer: true,\n    },\n\n    align: {\n        header: 'center',\n        footer: 'center',\n    },\n\n    content: '',\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Video from MediaStream in Phaser 3\nDESCRIPTION: Loads video content from a MediaStream object, which can be obtained from getUserMedia API for camera access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.loadMediaStream(stream);\n// video.loadMediaStream(stream, noAudio, crossOrigin);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.mediaDevices.getUserMedia({ video: true, audio: false })\n    .then(function(stream) {\n        video.loadMediaStream(stream, true);\n        video.play();\n    })\n    .catch(function(err) {\n\n    })\n```\n\n----------------------------------------\n\nTITLE: Animating a Flip Effect with Tweens\nDESCRIPTION: Uses Phaser's tween system to animate a flip effect on the perspective image by changing the Y angle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nscene.tweens.add({\n    targets: image,\n    angleY: { start: 0, to: -180}\n})\n```\n\n----------------------------------------\n\nTITLE: Extending CanvasInput Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom CanvasInput class by extending the base component. This allows for adding custom functionality to canvas-based text input fields.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends RexPlugins.UI.CanvasInput {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Default Text Style Configuration in Phaser 3\nDESCRIPTION: The default style configuration object for Phaser 3 Text objects, including font properties, colors, shadow, alignment, and word wrap settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    fontFamily: 'Courier',\n    fontSize: '16px',\n    fontStyle: '',\n    backgroundColor: null,\n    color: '#fff',\n    stroke: '#fff',\n    strokeThickness: 0,\n    shadow: {\n        offsetX: 0,\n        offsetY: 0,\n        color: '#000',\n        blur: 0,\n        stroke: false,\n        fill: false\n    },\n    align: 'left',  // 'left'|'center'|'right'|'justify'\n    padding: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n    },\n    maxLines: 0,\n    lineSpacing: 0,\n    fixedWidth: 0,\n    fixedHeight: 0,\n    rtl: false,\n    testString: '|MÉqgy',\n    wordWrap: {\n        width: null,\n        callback: null,\n        callbackScope: null,\n        useAdvancedWrap: false\n    },\n    metrics: false,\n    // metrics: {\n    //     ascent: 0,\n    //     descent: 0,\n    //     fontSize: 0\n    // },\n}\n```\n\n----------------------------------------\n\nTITLE: Transition Event Handlers in Phaser 3\nDESCRIPTION: Shows how to register event handlers for various transition events between scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfromScene.events.on('transitionout', function(targetScene, duration){ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntargetScene.events.on('transitionstart', function(fromScene, duration){ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntargetScene.events.on('transitioncomplete', function(fromScene){ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.events.on('transitioninit', function(fromScene, duration)){ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.events.on('transitionstart', function(fromScene, duration){ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.events.on('transitionout', function(targetScene){ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.events.on('transitioncomplete', function(fromScene){ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.events.on('transitionwake', function(fromScene, duration){ });\n```\n\n----------------------------------------\n\nTITLE: Handling Tap Events in Phaser 3\nDESCRIPTION: Shows how to listen for and handle tap events, including access to tap count and position information.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-tap.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntap.on('tap', function(tap, gameObject, lastPointer){\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Container Properties in Phaser 3\nDESCRIPTION: Shows how to set various properties of a Container, including size and scroll factor. These methods affect the Container and its children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/container.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setSize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setScrollFactor(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setScrollFactor(x, y, true);\n```\n\n----------------------------------------\n\nTITLE: Handling Game Object Pointer Up Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for when a pointer is released on a game object (chess piece) on the board. The callback receives the pointer object and the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('gameobjectup', function(pointer, gameObject) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('board.pointerup', function(pointer) {\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Masks from Graphics in Phaser 3\nDESCRIPTION: Creates a geometry mask from the graphics object that can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = graphics.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Adding and Inserting Tree Nodes\nDESCRIPTION: Methods for adding and inserting nodes into the tree structure, including support for custom game objects and node keys.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar node = tree.addNode();\n// var node = tree.addNode(nodeKey);\n\nvar node = tree.addNode(gameObject);\n// var node = tree.addNode(gameObject, nodeKey);\n\nvar tree = trees.insertTree(index);\n// var tree = trees.insertTree(index, nodeKey);\n// var tree = trees.insertTree(index, config);\n```\n\n----------------------------------------\n\nTITLE: Playing Audio Sprite Sections in Phaser 3\nDESCRIPTION: Methods to play specific sections of an audio sprite instance by marker name, with optional configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.play(markerName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.play(markerName, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Tile Position from World Coordinates in Quad Grid\nDESCRIPTION: Demonstrates how to convert world coordinates to tile position in the Quad Grid using the getTileXY method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-quadgrid.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXY = grid.getTileXY(worldX, worldY);  // tileXY: {x, y}\n// var out = grid.getTileXY(worldX, worldY, out);\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Cache in Phaser 3\nDESCRIPTION: Demonstrates how to manually add data to a specific cache (text cache in this example) with a key identifier.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.text;\nvar data = cache.add(key);\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Game Object Style in Phaser 3\nDESCRIPTION: Defines the style properties for a Text game object in Phaser 3, including font settings, colors, alignment, and state-specific overrides.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // $type: 'text',\n\n    // Normal text-style\n    fontFamily: 'Courier',\n    fontSize: '16px',\n    fontStyle: '',\n    backgroundColor: null,\n    color: '#fff',\n    stroke: '#fff',\n    strokeThickness: 0,\n    shadow: {\n        offsetX: 0,\n        offsetY: 0,\n        color: '#000',\n        blur: 0,\n        stroke: false,\n        fill: false\n    },\n    align: 'left',  // 'left'|'center'|'right'|'justify'\n    padding: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n    },\n    maxLines: 0,\n    lineSpacing: 0,\n    fixedWidth: 0,\n    fixedHeight: 0,\n    rtl: false,\n    testString: '|MÉqgy',\n    wordWrap: {\n        width: null,\n        callback: null,\n        callbackScope: null,\n        useAdvancedWrap: false\n    },\n    metrics: false,\n    // metrics: {\n    //     ascent: 0,\n    //     descent: 0,\n    //     fontSize: 0\n    // },\n\n    // tint: 0xffffff,\n    // alpha: 1,\n    // scale: 1,\n    // flipX: false,\n    // flipY: false,\n    // origin:\n    // originX: \n    // originY:\n    \n    // Style override in active state\n    'active.fontFamily': undefined,\n    'active.fontSize': undefined,\n    'active.fontStyle': undefined,\n    'active.backgroundColor': undefined,\n    'active.color': undefined,\n    'active.fill': undefined,\n    'active.stroke': undefined,\n    'active.strokeThickness': undefined,\n    \n    // Style override in hover state\n    'hover.fontFamily': undefined,\n    'hover.fontSize': undefined,\n    'hover.fontStyle': undefined,\n    'hover.backgroundColor': undefined,\n    'hover.color': undefined,\n    'hover.fill': undefined,\n    'hover.stroke': undefined,\n    'hover.strokeThickness': undefined,\n    \n    // Style override in disable state\n    'disable.fontFamily': undefined,\n    'disable.fontSize': undefined,\n    'disable.fontStyle': undefined,\n    'disable.backgroundColor': undefined,\n    'disable.color': undefined,\n    'disable.fill': undefined,\n    'disable.stroke': undefined,\n    'disable.strokeThickness': undefined,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gesture Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to include the gesture plugin in the Phaser 3 game configuration for scene-wide availability.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-tap.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport GesturesPlugin from 'phaser3-rex-plugins/plugins/gestures-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexGestures',\n            plugin: GesturesPlugin,\n            mapping: 'rexGestures'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDK Scripts to HTML\nDESCRIPTION: HTML code to include the core Firebase SDK and additional service modules (Database, Firestore) in your web page. These scripts must be loaded before using any Firebase services.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/10.13/firebase-app-compat.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/10.13/firebase-database-compat.js\"></script>\n    <script src=\"/__/firebase/10.13/firebase-firestore-compat.js\"></script>        \n</body>    \n```\n\n----------------------------------------\n\nTITLE: Creating Circle Outline Effect in Phaser 3\nDESCRIPTION: Code for implementing circle outline effect, which adds a circular ring around game objects with configurable thickness, color, background, scale, and feathering. Useful for creating masks or avatar frames.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addCircle(thickness, color, backgroundColor, scale, feather);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addCircle(thickness, color, backgroundColor, scale, feather);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addCircle(thickness, color, backgroundColor, scale, feather);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setActive(false);\n// effect.active = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.preFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.thickness = thickness;\neffect.color = color;\neffect.backgroundColor = backgroundColor;\neffect.backgroundAlpha = backgroundAlpha;\neffect.scale = scale;\neffect.feather = feather;\n```\n\n----------------------------------------\n\nTITLE: Texture Management in Phaser3\nDESCRIPTION: Methods for setting and managing textures, frames, and crops on game objects\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setTexture(key);\ngameObject.setFrame(frame);\ngameObject.setCrop(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Complete Menu Object in Phaser 3\nDESCRIPTION: Comprehensive configuration example for creating a menu with all available options using Rex UI plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar menu = scene.rexUI.add.menu({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n\n    // popup: true,\n    // orientation: 1,\n    // subMenuSide: undefined,\n    items: [],\n\n    createBackgroundCallback: function(items) {\n        var scene = items.scene;\n        // background = ...\n        return background;\n    },\n    createBackgroundCallbackScope: undefined,\n\n    createButtonCallback: function(item, index, items) {\n        var scene = item.scene;\n        // var isFirstButton = (index === 0);\n        // var isLastButton = (index === (items.length - 1));\n        // container = ...\n        return container;\n    },\n    createButtonCallbackScope: undefined,\n\n    easeIn: 0,\n    // easeIn: {\n    //     duration: 500,\n    //     orientation: undefined,\n    //     ease: 'Cubic'\n    // },\n    transitIn: undefined,\n    // transitIn: function(menu, duration) {  },\n\n    easeOut: 0,\n    // easeOut: {\n    //     duration: 100,\n    //     orientation: undefined,\n    //     ease: 'Linear'\n    // },\n    transitOut: undefined,\n    // transitOut: function(menu, duration) {  },\n\n    // expandEvent: 'button.click',\n\n    // pointerDownOutsideCollapsing: true,\n\n    // childrenKey: 'children',\n\n    name: '',\n    // draggable: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Post FX Pipeline Class in JavaScript\nDESCRIPTION: Basic structure for a custom Post FX Pipeline class that extends Phaser's PostFXPipeline. Includes constructor configuration and lifecycle methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPostFxClass extends Phaser.Renderer.WebGL.Pipelines.PostFXPipeline {\n    constructor(game) {\n        super({\n            game: game,\n            renderTarget: true,\n            fragShader: '...',  // GLSL shader\n            uniforms: []\n        });\n    }\n\n    onPreRender() {\n        this.set1f('intensity', this._intensity);\n    }\n\n    onDraw(renderTarget) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Animation on Group Members in Phaser 3\nDESCRIPTION: Plays an animation on all group members that support animations, with an optional starting frame.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.playAnimation(key, startFrame);\n```\n\n----------------------------------------\n\nTITLE: Saving Data with LocalForage using Promise\nDESCRIPTION: Shows how to save data to LocalForage using the Promise-based approach. The setItem method returns a Promise that resolves with the saved value or rejects with an error.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlocalforage.setItem(key, value)\n    .then(function(value){ /* ... */ })\n    .catch(function(err){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Creating Gashapon Instance in Phaser 3\nDESCRIPTION: Shows how to create a new Gashapon instance with various configuration options in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar gashapon = scene.plugins.get('rexGashapon').add({\n    mode: 'shuffle',  // 0|'shuffle'|1|'random\n    items: {  // name:count\n        a:1, \n        b:2, \n        c:3 \n    },\n    reload: true,     // true|false\n    rnd: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Particle Animations\nDESCRIPTION: Methods to set animations for particles with support for multiple animation configurations\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.setAnim(anims);\n// emitter.setAnim(anims, pickRandom, quantity);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    anims: [],\n    cycle: false,\n    quantity: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transition Progress Callback in Phaser 3\nDESCRIPTION: Defines a callback function that will be executed continuously during a transition. This is where you can control the animation effects by manipulating the alpha, scale, or position of the images.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTransitionProgressCallback(onProgress, onProgressScope)\n```\n\n----------------------------------------\n\nTITLE: Using Compound Queries in Firestore\nDESCRIPTION: Retrieves documents that match multiple conditions, with the limitation that range filters can only be applied to one field.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).where(key0, op0, value0).where(key1, op1, value1).get()\n    .then(function(querySnapshot) { /* ... */ })\n    .catch(function(error){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Setting Tint of Group Members in Phaser 3\nDESCRIPTION: Sets the tint color of all group members, with options for uniform tinting or per-corner tinting.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setTint(value);\n// group.setTint(topLeft, topRight, bottomLeft, bottomRight);\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Instance with Configuration\nDESCRIPTION: Complete configuration example for creating a line instance with customizable start, end, and body properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/line.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = scene.add.rexLine({\n    start: {\n        x: 0, y: 0,\n        key: undefined, frame: undefined, origin: 0.5,\n    },\n    // start: key,\n    // start: undefined,\n\n    end: {\n        x: 0, y: 0,\n        key: undefined, frame: undefined, origin: 1,\n    },\n    // end: key,\n    // end: undefined,\n\n    body: {\n        key: undefined, frame: undefined, extendMode: 1,\n        width: undefined,\n    },\n    // body: key,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Mouse Spring Interaction to Matter.js Objects in Phaser 3\nDESCRIPTION: Code for enabling drag functionality for Matter.js objects with the mouse. Includes configuration options for spring properties and collision filtering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-world.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.add.mouseSpring();\n// scene.matter.add.mouseSpring(options);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    length: 0.01,\n    stiffness: 0.1,\n    damping: 0,\n    angularStiffness: 1,\n    collisionFilter: {\n        category: 0x0001,\n        mask: 0xFFFFFFFF,\n        group: 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Progress Value\nDESCRIPTION: Methods for retrieving and setting the current progress value, including normalized and range-mapped values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Get value\nvar value = customProgress.getValue(min, max); // value : min ~ max\n// or\nvar value = customProgress.getValue(); // value: 0 ~ 1\n// or\nvar value = customProgress.value; // value: 0 ~ 1\n\n// Set value\ncustomProgress.setValue(value, min, max); // value: min ~ max\n// or\ncustomProgress.setValue(value); // value: 0 ~ 1\n// or\ncustomProgress.value = value; // value: 0 ~ 1\n\n// Increase value\ncustomProgress.addValue(inc, min, max); // inc: min ~ max\n// or\ncustomProgress.addValue(inc); // inc: 0 ~ 1\n// or\ncustomProgress.value += inc; // inc: 0 ~ 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label Class in Phaser 3\nDESCRIPTION: Example of extending the Label class to create a custom label implementation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLabel extends RexPlugins.UI.Label {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = new MyLabel(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Cover Rectangle in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Adds a cover rectangle that blocks all touch events and covers the entire window. Useful for modal dialogs or preventing interaction with elements underneath.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar shape = scene.rexUI.add.cover(config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Board Bounds in Phaser 3 Board Plugin\nDESCRIPTION: Gets a rectangle object that represents the bounds of the entire board. This can be used to draw a rectangle around the board or for collision detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvar rectangle = board.getBoardBounds();\n// var out = board.getGridBounds(out);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.strokeRectShape(rectangle);\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangles with Graphics in Phaser 3\nDESCRIPTION: Methods for drawing filled and stroked rectangles using either rectangle shapes or individual coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.fillRectShape(rect); // rect: {x, y, width, height}\ngraphics.fillRect(x, y, width, height);\ngraphics.strokeRectShape(rect);  // rect: {x, y, width, height}\ngraphics.strokeRect(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Muting Video Audio in Phaser 3\nDESCRIPTION: Methods to check and set the muted state of the video's audio track.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar muted = video.isMuted();  // muted: true/false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.setMute(muted);  // muted: true/false\n```\n\n----------------------------------------\n\nTITLE: Toggling Visibility of Group Members in Phaser 3\nDESCRIPTION: Toggles the visibility state of all group members, inverting their current visibility.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.toggleVisible();\n```\n\n----------------------------------------\n\nTITLE: Configuring DOM Container in Phaser 3\nDESCRIPTION: Initial configuration setup to enable DOM element support in Phaser 3 game instance. Includes parent container and input target settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/domelement.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    parent: divId,\n    // fullscreenTarget: divId, // For fullscreen\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    },\n    // ...\n}\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Sizer Instance\nDESCRIPTION: Demonstrates basic sizer object creation using the plugin\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sizer = scene.rexUI.add.sizer(config);\n```\n\n----------------------------------------\n\nTITLE: Transforming Graphics Context in Phaser 3\nDESCRIPTION: Methods for manipulating the graphics context with operations like save, restore, translate, scale, and rotate.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.save();\ngraphics.restore();\ngraphics.translateCanvas(x, y);\ngraphics.scaleCanvas(x, y);\ngraphics.rotateCanvas(radians);\n```\n\n----------------------------------------\n\nTITLE: Setting Render Pipeline for Layers\nDESCRIPTION: Methods for setting standard and post render pipelines for a layer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.setPipeline(pipelineName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.setPostPipeline(pipelineName);\n```\n\n----------------------------------------\n\nTITLE: Creating Rope Game Object from JSON Configuration in Phaser 3\nDESCRIPTION: Creates a rope game object using a JSON configuration object that specifies all properties such as position, texture, alignment, points, colors, and alphas.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rope = scene.make.rope({\n    x: 0,\n    y: 0,\n    key: '',\n    frame: null,\n    horizontal: true,\n    points: undefined,\n    colors: undefined,\n    alphas: undefined,\n\n    // angle: 0,\n    // alpha: 1\n    // flipX: true,\n    // flipY: true,\n    // origin: {x: 0.5, y: 0.5},\n    \n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Post FX Pipeline in Game Config\nDESCRIPTION: Configuration code to register a post FX pipeline class during game initialization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyPostFxClass from 'path';\nvar config = {\n    // ...\n    pipeline: [MyPostFxClass]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Particle Explosion Effect in Phaser 3\nDESCRIPTION: Puts the emitter in explosion mode, emitting multiple particles all at once from a specified position. Useful for effects like explosions, bursts, or impact effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.explode();\n// emitter.explode(count, x, y);\n```\n\n----------------------------------------\n\nTITLE: Registering Click Callback for DropDownList\nDESCRIPTION: Registers a custom callback function to be executed when the dropdown list is clicked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.onClick(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Custom Dynamic Bitmap Text Class Definition\nDESCRIPTION: Extending the Phaser.GameObjects.DynamicBitmapText class to create a custom text implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamicbitmaptext.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends Phaser.GameObjects.DynamicBitmapText {\n    constructor(scene, x, y, key, text, size, align) {\n        super(scene, x, y, key, text, size, align);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Text Class in Phaser 3\nDESCRIPTION: Shows how to define a custom text class that extends Phaser.GameObjects.Text and create an instance of it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends Phaser.GameObjects.Text {\n    constructor(scene, x, y, text, style) {\n        super(scene, x, y, text, style);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = new MyText(scene, x, y, 'hello');\n```\n\n----------------------------------------\n\nTITLE: Setting Gravity Well Power in JavaScript\nDESCRIPTION: Controls the power value of a gravity well, which affects how the gravitational force scales with distance. This determines the falloff pattern of the gravitational effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nwell.power = value;\n```\n\n----------------------------------------\n\nTITLE: Setting Layer Render Order\nDESCRIPTION: Method for setting the render order of tiles within a layer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.setRenderOrder(renderOrder);\n```\n\n----------------------------------------\n\nTITLE: Drawing Arcs with Graphics in Phaser 3\nDESCRIPTION: Methods for drawing arc curves with control over position, radius, start and end angles, and direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.arc(x, y, radius, startAngle, endAngle, anticlockwise);\ngraphics.arc(x, y, radius, startAngle, endAngle, anticlockwise, overshoot);\n```\n\n----------------------------------------\n\nTITLE: Loading the Pan Gesture Plugin via Scene Plugin in Phaser 3\nDESCRIPTION: Loads the pan gesture plugin as a scene plugin during the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexgesturesplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgesturesplugin.min.js', 'rexGestures', 'rexGestures');\n```\n\n----------------------------------------\n\nTITLE: Collision Detection in Phaser 3 Arcade Physics\nDESCRIPTION: Shows how to set up collision detection between objects in the Arcade physics world of Phaser 3. It includes methods for adding colliders, overlap checks, and collision callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar collider = scene.physics.add.collider(objectsA, objectsB, collideCallback);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar collider = scene.physics.add.overlap(objectsA, objectsB, collideCallback);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isOverlapping = scene.physics.world.overlap(object1, object2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isCollided = scene.physics.world.collide(object1, object2);\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Grid Table in Phaser 3 with Rex UI\nDESCRIPTION: This snippet demonstrates how to add a grid table to a Phaser 3 scene using the Rex UI plugin. It includes detailed configuration options for table layout, scrolling, cell creation, and slider setup. The code allows for customization of table dimensions, cell properties, scrolling behavior, and visual elements like background and sliders.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = scene.rexUI.add.gridTable({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    // scrollMode: 0,\n\n    // Elements\n    background: backgroundGameObject,\n\n    table: {\n        width: undefined,\n        height: undefined,\n\n        cellWidth: undefined,\n        cellHeight: undefined,\n        columns: 1,\n        // rows: 1,\n        // fixedCellSize: false,\n\n        mask: {\n            padding: 0,\n            // updateMode: 0,\n        },\n        // enableLayer: false,\n        interactive: true,\n        reuseCellContainer: false,\n        // startFromBottom: false,\n\n        // click: undefined,\n        // tap: undefined,\n        // press: undefined,\n        // swipe: undefined,\n    },\n\n    slider: {\n        // background: sliderBackgroundGameObject,\n        track: trackGameObject,\n        /* \n        track: { \n            width: 1, height: 1,\n            radius: 0, \n            color: undefined, alpha: 1,\n            strokeColor: undefined, strokeAlpha: 1, strokeWidth: 2,\n            shape: undefined\n        }\n        */\n\n        thumb: thumbGameObject,\n        /* \n        thumb: { \n            width: 1, height: 1,\n            radius: 0, \n            color: undefined, alpha: 1,\n            strokeColor: undefined, strokeAlpha: 1, strokeWidth: 2,\n            shape: undefined\n        }\n        */\n\n        // input: 'drag',\n        // position: 'right',\n        // gap: undefined,\n\n        // hideUnscrollableSlider: false,\n        // disableUnscrollableDrag: false,\n        // adaptThumbSize: false,\n        // minThumbSize: undefined,\n        \n        // buttons: {\n        //     top: topButtonGameObject, bottom: bottomButtonGameObject,\n        //     left: leftButtonGameObject, right: rightButtonGameObject,\n        //     step: 0.01,\n        // }\n    },\n\n    // sliderX: {...},\n    // sliderY: {...},\n\n    // scroller: {\n    //     threshold: 10,\n    //     slidingDeceleration: 5000,\n    //     backDeceleration: 2000,\n    //     pointerOutRelease: true,\n    //     rectBoundsInteractive: true,\n    //     dragRate: 1,\n    // },\n\n    // scrollerX: {...},\n    // scrollerY: {...},\n\n    mouseWheelScroller: false,\n    // mouseWheelScroller: {\n    //     focus: true,\n    //     speed: 0.1\n    // }.\n\n    // mouseWheelScrollerX: {...},\n    // mouseWheelScrollerY: {...},\n\n    clampChildOY: false,\n\n    // snapStep: undefined,\n\n    header: headerGameObject,\n    footer: footerGameObject,\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        table: 0,\n        // table: {\n        //    top: 0,\n        //    bottom: 0,\n        //    left: 0,\n        //    right: 0,\n        //},\n        \n        slider: 0,\n        // slider: {\n        //     top: 0,\n        //     bottom: 0,\n        //     left: 0,\n        //     right: 0,\n        // },\n        // sliderX: 0,\n        // sliderY: 0,\n\n        header: 0,\n        footer: 0,\n    },\n\n    expand: {\n        header: true,\n        footer: true,\n    },\n\n    align: {\n        header: 'center',\n        footer: 'center',\n    },\n\n    createCellContainerCallback: function(cell, cellContainer) {\n        var scene = cell.scene,\n            width = cell.width,\n            height = cell.height,\n            item = cell.item,\n            items = cell.items,\n            index = cell.index;\n        if (cellContainer === null) { // No reusable cell container, create a new one\n            // cellContainer = scene.rexUI.add.label();\n        }\n        // Set child properties of cell container ...\n        \n        // cell.setCellContainerAlign();  // Set alignment of cellContainer\n\n        return cellContainer; // or null\n    },\n\n    items: [],\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Velocity in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the velocity of a physics body in both X and Y directions. Velocity determines how fast and in which direction an object moves per frame.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setVelocity(x, y);\n```\n\n----------------------------------------\n\nTITLE: Setting Collision Groups and Categories for Matter.js Physics Objects\nDESCRIPTION: Methods to configure collision groups, categories, and filters to control which objects can collide with each other.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setCollisionGroup(value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar category = scene.matter.world.nextCategory();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setCollisionCategory(category);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setCollidesWith([categoryA, categoryB, ...]);\n// gameObject.setCollidesWith(categoryA);\n```\n\n----------------------------------------\n\nTITLE: Adding Game Objects to Physics World in Phaser 3\nDESCRIPTION: Demonstrates how to add existing game objects to the physics world and enable physics on them. It shows methods for adding single objects or multiple objects at once.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = scene.physics.add.existing(gameObject, bodyType);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.enable(gameObjects, bodyType);\n```\n\n----------------------------------------\n\nTITLE: Loading UI Plugin via Scene Plugin in Phaser 3\nDESCRIPTION: Loads the UI plugin as a scene plugin and adds a buttons object to the scene. This approach uses the minified plugin file loaded directly from GitHub.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = scene.rexUI.add.buttons(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Particle Death Zone Event in JavaScript\nDESCRIPTION: Registers a callback function that executes when a death zone kills a particle. The callback receives the emitter instance, the particle object, and the death zone as parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.on('deathzone', function(emitter, particle, zone) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangle in Phaser 3\nDESCRIPTION: Creates a new Rectangle geometry object with specified position and dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rectangle.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Phaser.Geom.Rectangle(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Setting Star Alpha in Phaser 3\nDESCRIPTION: Sets the alpha transparency value of a star shape in Phaser 3 using either the setAlpha method or direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nstar.setAlpha(alpha);\n// star.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Debug Graphics Management in Phaser 3 Physics\nDESCRIPTION: Methods for controlling debug graphics visibility and access\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar graphics = scene.physics.world.debugGraphic;\nscene.physics.world.debugGraphic.setVisible();\nscene.physics.world.debugGraphic.setVisible(false);\n```\n\n----------------------------------------\n\nTITLE: TCRP Command Format Examples\nDESCRIPTION: Illustrates different formats for specifying commands in the TCRP player, including function calls with parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    [time, fnName, param0, param1, ...]\n    // [time, callback, param0, param1, ...]\n]\n```\n\n----------------------------------------\n\nTITLE: Destroying Key Objects in Phaser 3\nDESCRIPTION: Shows how to destroy a key object in Phaser 3 to clean up resources.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardevents.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nkeyObject.destroy();\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Tile Size\nDESCRIPTION: Methods for setting and retrieving the base tile size of a tilemap.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmap.setBaseTileSize(tileWidth, tileHeight);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileWidth = map.tileWidth;\nvar tileHeight = map.tileHeight;\n```\n\n----------------------------------------\n\nTITLE: Complete Holy Grail Layout Configuration Options\nDESCRIPTION: Comprehensive example showing all possible configuration options for the Holy Grail layout, including positioning, sizing, layout modes, component definitions, spacing, proportions, and alignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar holyGrail = scene.rexUI.add.holyGrail({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    layoutMode: 0,\n\n    // Elements\n    background: backgroundGameObject,\n\n    header: headerGameObject,\n\n    leftSide: leftSideGameObject,\n\n    content: contentGameObject,\n\n    rightSide: rightSideGameObject,\n\n    footer: footerGameObject,\n\n    // Space\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        header: 0,  // {left, right, top, bottom}\n        footer: 0,  // {left, right, top, bottom}\n        leftSide: 0, // {left, right, top, bottom}\n        rightSide: 0, // {left, right, top, bottom}\n    },\n\n    // proportion: {\n    //     header: 0,\n    //     footer: 0,\n    //     leftSide: 0,\n    //     rightSide: 0,\n    //     content: 1,\n    // },\n\n    // expand: {\n    //     header: true,\n    //     footer: true,\n    //     leftSide: true,\n    //     rightSide: true,\n    //     content: false,\n    // },\n\n    // align: {\n    //     header: 'center',\n    //     footer: 'center',\n    //     leftSide: 'center',\n    //     rightSide: 'center',\n    //     content: 'center',\n    // },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Swap Action in Bejeweled\nDESCRIPTION: Demonstrates how to implement a custom swap action for exchanging two chess pieces on the board.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (chess1, chess2, board, bejeweled) {\n    var tileXYZ1 = board.chessToTileXYZ(chess1);\n    var tileXYZ2 = board.chessToTileXYZ(chess2);\n    var tileX1 = tileXYZ1.x,\n        tileY1 = tileXYZ1.y,\n        tileX2 = tileXYZ2.x,\n        tileY2 = tileXYZ2.y,\n        tileZ = tileXYZ1.z;\n\n    // TileZ of chess1 and chess2 are the same, change tileZ of chess2 to a different value\n    board.moveChess(chess2, tileX2, tileY2, `#${tileZ}`, false);\n\n    // Move chess1 to tileXYZ2, chess2 to tileXYZ1\n    var moveTo1 = bejeweled.getChessMoveTo(chess1);\n    var moveTo2 = bejeweled.getChessMoveTo(chess2);\n    moveTo1.moveTo(tileX2, tileY2);\n    moveTo2.moveTo(tileX1, tileY1);\n\n    // Change tileZ of chess2 back\n    board.moveChess(chess2, tileX1, tileY1, tileZ, false);\n\n    if (moveTo1.isRunning) {\n        bejeweled.waitEvent(moveTo1, 'complete');\n    }\n    if (moveTo2.isRunning) {\n        bejeweled.waitEvent(moveTo2, 'complete');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Radians to Degrees in Phaser 3\nDESCRIPTION: Converts an angle from radians to degrees using Phaser's built-in math utility. The resulting value will be in the range of -180 to 180 degrees.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar deg = Phaser.Math.RadToDeg(rad);  // deg : -180 ~ 180\n```\n\n----------------------------------------\n\nTITLE: Creating a Oneshot Timer in Phaser 3\nDESCRIPTION: Creates a timer that executes a callback once after a specified delay. This is a simplified syntax for a common use case.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar timer = scene.time.delayedCall(delay, callback, args, scope);  // delay in ms\n```\n\n----------------------------------------\n\nTITLE: Event Handling for Movement Completion\nDESCRIPTION: Shows how to handle completion events for movement animations\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/easemove.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neasemove.on('complete', function(gameObject, easemove){\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling Step Events in Phaser 3\nDESCRIPTION: Illustrates how to handle events triggered by the Step behavior, including individual steps and complete interpolation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/step.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nstep.on('step', function(gameObject, step, x, y){\n\n}, scope);\n\nstep.on('steps', function(gameObject, step, points){\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Gamepad Button Event Handlers\nDESCRIPTION: Event handlers for gamepad button press and release events, with both global and gamepad-specific approaches.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gamepad.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.gamepad.on('down', function (gamepad, button, value) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngamepad.on('down', function(buttonIndex, value, button) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.gamepad.on('up', function (gamepad, button, value) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngamepad.on('up', function(buttonIndex, value, button) {\n})\n```\n\n----------------------------------------\n\nTITLE: Camera Zoom Control in Phaser 3\nDESCRIPTION: Methods for zooming the camera to specific values with duration and easing options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-effects.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.zoomTo(zoomValue, duration);\n// camera.zoomTo(zoomValue, duration, ease, force, callback, context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(camera, progress, zoomValue) {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('camerazoomstart', camera, zoom, duration, zoomValue);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('camerazoomcomplete', camera, zoom);\n```\n\n----------------------------------------\n\nTITLE: Handling Pinch Events in Phaser 3\nDESCRIPTION: Demonstrates how to listen for and handle various pinch events in Phaser 3, including drag and pinch actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pinch.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npinch.on('drag1', function(pinch) {\n    // var drag1Vector = pinch.drag1Vector; // drag1Vector: {x, y}\n}, scope);\n\npinch.on('pinch', function(pinch) {\n    // var scaleFactor = pinch.scaleFactor;\n    // gameObject.scaleX *= scaleFactor;\n    // gameObject.scaleY *= scaleFactor;\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Axis Acceleration in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the acceleration of a physics body along individual axes. Allows separate control of horizontal and vertical acceleration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setAccelerationX(x);\ngameObject.setAccelerationY(y);\n```\n\n----------------------------------------\n\nTITLE: Configuring TextArea Style in Phaser 3\nDESCRIPTION: Defines the style properties for a TextArea object in Phaser 3, including background, text, slider, and scroller options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    $type: 'textarea',\n\n    space: { left: 0, right: 0, top: 0, bottom: 0, text: 0, },\n    \n    // width:\n    // height:\n    // origin:\n    // originX:\n    // originY:\n\n    background: backgroundStyle,\n\n    text: textStyle,\n\n    // textWidth: undefined,\n    // textHeight: undefined,\n    // textMask: false,\n    // alwaysScrollable: false,\n\n    slider: {\n        track: backgroundStyle,\n\n        thumb: backgroundStyle,\n\n        // input: 'drag',\n        // position: 'right',\n\n        // hideUnscrollableSlider: false,\n        // disableUnscrollableDrag: false,\n        // adaptThumbSize: false,\n        // minThumbSize: undefined,\n    },\n    // slider: null,\n\n    // scroller: {\n    //     threshold: 10,\n    //     slidingDeceleration: 5000,\n    //     backDeceleration: 2000,\n    //     pointerOutRelease: true,\n    //     dragRate: 1,\n    // },\n\n    mouseWheelScroller: false,\n    // mouseWheelScroller: {\n    //     focus: true,\n    //     speed: 0.1\n    // },\n\n    clampChildOY: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Velocity for Matter.js Physics Objects\nDESCRIPTION: Methods to set the velocity of a physics-enabled game object in both X and Y directions or individually.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setVelocity(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setVelocityX(x);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setVelocityY(x);\n```\n\n----------------------------------------\n\nTITLE: Registering Post-FX Pipeline in Phaser Game Config\nDESCRIPTION: Shows how to register a post-processing pipeline in the Phaser game configuration. The pipeline class must be imported and added to the game config's pipeline array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-shader-effect.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport PostFxClass from 'path';\nvar config = {\n    // ...\n    pipeline: [PostFxClass]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Scrolling Camera in Phaser 3\nDESCRIPTION: Shows various methods to scroll and center the camera in Phaser 3, including setting scroll position, centering on coordinates, and centering within bounds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setScroll(x, y)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.scrollX = scrollX;\ncamera.scrollY = scrollY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.centerToBounds();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.centerOn(x, y);  // centered on the given coordinates\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.centerOnX(x);\ncamera.centerOnY(y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.centerToSize();\n```\n\n----------------------------------------\n\nTITLE: Toggling Fullscreen Mode in Phaser 3\nDESCRIPTION: Uses the toggleFullscreen method to switch between fullscreen and normal display states. This is a more concise approach that combines start and stop functionality into a single method call.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fullscreen.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setInteractive().on('pointerdown', function() {\n    scene.scale.toggleFullscreen();\n    if (scene.scale.isFullscreen) {\n        // On start fulll screen\n    } else {\n        // On stop fulll screen\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Input with Inc-Dec Buttons in Phaser 3 Tweaker\nDESCRIPTION: Creates a number input field with increment and decrement buttons. The component binds to a numeric property of an object and allows adjusting the value through buttons or direct input. Supports configuration of step size, range limits, and value formatting.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput(object, key, {\n    view: 'incdec',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    // min: undefined, \n    // max: undefined,\n    // step: 1,\n\n    // format: function(value) { return s; },\n    // inputTextReadOnly: false,\n    \n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Rope Game Object in Phaser 3\nDESCRIPTION: Creates a rope game object at specified coordinates using a texture. Points parameter controls the vertices distribution, and horizontal parameter determines alignment direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rope = scene.add.rope(x, y, texture, frame, points, horizontal);\n// var rope = scene.add.rope(x, y, texture, frame, points, horizontal, colors, alphas);\n```\n\n----------------------------------------\n\nTITLE: Interacting with Child Elements of Table Cells in Phaser3\nDESCRIPTION: Code example showing how to interact with child elements within a table cell in Phaser3. This allows for detecting pointer events on specific parts of a complex cell.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('cell.click', function(cellContainer, cellIndex, pointer, event) {\n    var child;\n    // child = cellContainer.getElement(...);\n    if (cellContainer.isPointerInBounds(child)) {\n        // Pointer on this child\n    }\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase Plugin - JavaScript\nDESCRIPTION: Loading the Firebase plugin in Phaser3 preload stage and initializing Firebase application.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-broadcast.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfirebaseplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebaseplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Adding ColorMatrix Effect to Game Object in Phaser 3\nDESCRIPTION: Demonstrates how to add a ColorMatrix effect as a pre-fx or post-fx to a game object or camera in Phaser 3. Also shows how to disable or remove the effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addColorMatrix();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addColorMatrix();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addColorMatrix();\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setActive(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.preFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postFX.remove(effect);\n```\n\n----------------------------------------\n\nTITLE: Getting Map Dimensions\nDESCRIPTION: Methods for retrieving the width and height of a tilemap in tile units.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar mapWidth = map.width;\nvar mapHeight = map.height;\n```\n\n----------------------------------------\n\nTITLE: Registering Game Prerenderclear Event Listener in JavaScript\nDESCRIPTION: Illustrates how to register an event listener for the 'prerenderclear' event in a Phaser 3 game. This event occurs just before the rendering process begins, after the renderer's preRender method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.game.events.on('prerenderclear', function(){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating Game Objects from Tiles\nDESCRIPTION: Methods for creating game objects from specific tiles in a tilemap layer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar sprites = map.createFromTiles(indexes, replacements, spriteConfig);\n// var sprites = map.createFromTiles(indexes, replacements, spriteConfig, scene, camera, layer);\n```\n\n----------------------------------------\n\nTITLE: RoundTo Examples with Different Precision Levels in JavaScript\nDESCRIPTION: Demonstrates the effect of different precision values when using RoundTo. Shows how negative place values control decimal precision while maintaining the base-10 system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/round-to.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nRoundTo(123.456789, 0) = 123\nRoundTo(123.456789, -1) = 123.5\nRoundTo(123.456789, -2) = 123.46\nRoundTo(123.456789, -3) = 123.457\n```\n\n----------------------------------------\n\nTITLE: Combining Query, Order, and Limit in Firestore\nDESCRIPTION: Retrieves documents that match specific criteria, sorted and limited to a certain count.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).where(key, op, value).orderBy(key).limit(count)\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDKs to HTML\nDESCRIPTION: Adds the necessary Firebase SDK scripts to the HTML file for core functionality and Firestore.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/10.13/firebase-app-compat.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/10.13/firebase-firestore-compat.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Managing Items in Phaser 3 Grid Table\nDESCRIPTION: Provides examples of how to set, get, add, insert, and remove items in a Grid Table. These operations allow for dynamic manipulation of the table's content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntable.setItems(items);\n\nvar items = table.items;\n\nPhaser.Utils.Array.Add(table.items, item);\ntable.refresh();\n\nPhaser.Utils.Array.AddAt(table.items, item, index);\ntable.refresh();\n\nPhaser.Utils.Array.Remove(table.items, item);\ntable.refresh();\n\nPhaser.Utils.Array.RemoveAt(table.items, index);\ntable.refresh();\n\nPhaser.Utils.Array.RemoveBetween(table.items, startIndex, endIndex);\ntable.refresh();\n\nPhaser.Utils.Array.RemoveRandomElement(table.items);\ntable.refresh();\n```\n\n----------------------------------------\n\nTITLE: Implementing Batched Writes in Firestore\nDESCRIPTION: Performs multiple write operations as a single atomic unit, with a maximum of 500 document operations per batch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Get a new write batch\nvar batch = db.batch();\n\nbatch.set(db.collection(collectionName).doc(docName), keyValues);\nbatch.update(db.collection(collectionName).doc(docName), keyValues);\nbatch.delete(db.collection(collectionName).doc(docName));\n// ...\n\n// Commit the batch\nbatch.commit()\n    .then(function() { /* ... */ })\n    .catch(function(error) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Handling Clock Update Events in Phaser 3\nDESCRIPTION: Sets up an event listener for clock updates, providing current time and delta time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclock.on('update', function(now, delta){ })\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Pointer Move Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for when a pointer moves to another tile on the board. The event only triggers when the tile coordinates change. The callback receives the pointer object and the new tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('tilemove', function(pointer, tileXY) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Child into Sizer in Phaser 3\nDESCRIPTION: Demonstrates how to insert a child game object at a specific index in the sizer, with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.insert(index, child, \n    {\n        proportion: 0,\n        align: 'center',\n        padding: {left: 0, right: 0, top: 0, bottom: 0},\n        expand: false,\n        key: undefined,\n        minWidth: undefined,\n        minHeight: undefined,\n        fitRatio: 0,\n    }\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.insert(index, child, proportion, align, padding, expand, key);\n```\n\n----------------------------------------\n\nTITLE: Saving File Data with Header and Content\nDESCRIPTION: JavaScript code to save a file with a specific file ID, header data for indexing, and content data. The fourth parameter controls whether to overwrite or update existing data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.save(fileID, header, content);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.save(fileID, header, content, true);\n```\n\n----------------------------------------\n\nTITLE: Chaining Animations on Sprite in Phaser 3\nDESCRIPTION: Chains multiple animations to play sequentially on the sprite. Each 'key' parameter can be either a string key of the animation or an animation config object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.chain(key0).chain(key1);\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation Between Vectors in Phaser 3\nDESCRIPTION: Linearly interpolates the current Vector2 toward another vector or vector-like object, where t is the interpolation factor between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvector.lerp(src, t); // src: {x, y}\n```\n\n----------------------------------------\n\nTITLE: Managing Camera Lifecycle in Phaser 3\nDESCRIPTION: Demonstrates how to remove and destroy camera objects in Phaser 3, which is important for managing game resources and performance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.cameras.remove(camera);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.destroy();\n```\n\n----------------------------------------\n\nTITLE: Creating BBCodeText in Phaser3 Rex UI\nDESCRIPTION: Shows how to add text with BBCode formatting protocol. This component renders text with formatting tags similar to forum BBCode for styling text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.rexUI.add.BBCodeText(x, y, text, style);\n```\n\n----------------------------------------\n\nTITLE: Setting Scene Visibility in Phaser 3\nDESCRIPTION: Controls whether a scene is visible or not without affecting its update status.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.setVisible(value, key);  // value: true/false\n// scene.scene.setVisible(value);    // set visible to myself\n```\n\n----------------------------------------\n\nTITLE: Element Retrieval in Phaser3 Button Component\nDESCRIPTION: Methods for accessing button elements, backgrounds and named components within the button group.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = buttons.getElement('background');\nvar buttonObjects = buttons.getElement('buttons');\nvar buttonObject = buttons.getButton(index);\nvar buttonObjects = buttons.getElement('buttons[0]');\nvar gameObject = buttons.getElement('#' + name);\nvar gameObject = buttons.getByName(name);\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient Effect in Phaser 3\nDESCRIPTION: Creates a gradient effect with customizable colors, alpha, position, and size parameters. Supports both smooth and retro chunky gradient styles for game objects and cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addGradient(color1, color2, alpha, fromX, fromY, toX, toY, size);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addGradient(color1, color2, alpha, fromX, fromY, toX, toY, size);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addGradient(color1, color2, alpha, fromX, fromY, toX, toY, size);\n```\n\n----------------------------------------\n\nTITLE: Drawing Lines with Graphics in Phaser 3\nDESCRIPTION: Methods for drawing lines using either line objects or coordinates, including moving to positions and drawing line segments.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.strokeLineShape(line); // line: {x1, y1, x2, y2}\ngraphics.lineBetween(x1, y1, x2, y2);\ngraphics.lineTo(x, y);\ngraphics.moveTo(x, y);\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Text from Config\nDESCRIPTION: Create a bitmap text object using a configuration object with various text properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.make.bitmapText({\n    x: 0,\n    y: 0,\n    text: 'Text\\nGame Object\\nCreated from config',\n    font: '',\n    size: false,\n    align: 0,\n    // origin: {x: 0.5, y: 0.5},\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Buttons to Dialog - JavaScript\nDESCRIPTION: Methods for adding buttons to different sections of the dialog. The gameObject parameter can be a single game object or an array of game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.addChoice(gameObject);\ndialog.addAction(gameObject);\ndialog.addToolbar(gameObject);\ndialog.addLeftToolbar(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Creating Constraints Between Two Matter.js Objects in Phaser 3\nDESCRIPTION: Methods to create physics constraints (connections) between two Matter.js game objects. Includes options for length, stiffness, and positioning with aliases for springs and joints.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-world.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar constraint = scene.matter.add.constraint(gameObjectA, gameObjectB);\n// var constraint = scene.matter.add.constraint(gameObjectA, gameObjectB, length, stiffness, options);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    pointA: {\n        x: 0,\n        y: 0,\n    },\n    pointB: {\n        x: 0,\n        y: 0,\n    },\n    damping: 0,\n    angularStiffness: 0,\n    // render: {\n    //     visible: true\n    // }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar constraint = scene.matter.add.spring(gameObjectA, gameObjectB, length, stiffness, options);\nvar constraint = scene.matter.add.joint(gameObjectA, gameObjectB, length, stiffness, options);\n```\n\n----------------------------------------\n\nTITLE: Getting Table Dimensions in Phaser3\nDESCRIPTION: Methods for retrieving the dimensions of a Phaser3 grid table. Includes getting the table width and height.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar tableWidth = table.getElement('table').tableWidth;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tableHeight = table.getElement('table').tableHeight;\n```\n\n----------------------------------------\n\nTITLE: Manipulating Experience and Levels in JavaScript\nDESCRIPTION: Methods to accumulate experience, reset experience value, and force level up. These methods interact with the experience bar's internal state and can trigger level-up events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-expbar.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpBar.gainExp(incExp);\n// expBar.exp += incExp;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpBar.resetExp(exp);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpBar.setLevel(level);\n```\n\n----------------------------------------\n\nTITLE: Checking Fullscreen Support in Phaser 3\nDESCRIPTION: Demonstrates how to check if the current browser supports fullscreen functionality by using Phaser's Device API.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fullscreen.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar supported = Phaser.Device.Fullscreen.available;\n```\n\n----------------------------------------\n\nTITLE: Setting Progress Value\nDESCRIPTION: Different methods to set the progress value for a circular progress instance, with options for scaled or normalized values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setValue(value, min, max); // value: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setValue(value); // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.value = value; // value: 0 ~ 1\n```\n\n----------------------------------------\n\nTITLE: Custom Callback for Creating Images in Grid Cut Image Plugin\nDESCRIPTION: Demonstrates the structure for a custom callback to create image game objects when using the Grid Cut Image plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridcutimage.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(scene, texture, frame) {\n    return gameObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling FixWidthButtons Events in Phaser 3\nDESCRIPTION: Sets up event listeners for various button interactions in the FixWidthButtons component, including click, over, out, enable, and disable events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthbuttons.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.click', function(button, index, pointer, event) {\n    // ...\n}, scope);\n\nbuttons.on('button.over', function(button, index, pointer, event) {\n    // ...\n}, scope);\n\nbuttons.on('button.out', function(button, index, pointer, event) {\n    // ...\n}, scope);\n\nbuttons.on('button.enable', function(button, index) {\n    // ...\n}, scope);\n\nbuttons.on('button.disalbe', function(button, index) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Pointer Down Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for when a pointer is pressed down on any tile in the board. The callback receives the pointer object and the tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('tiledown', function(pointer, tileXY) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Swipe Input from Loaded Plugin\nDESCRIPTION: Shows how to add swipe input detection after loading the plugin, either on a scene or a specific game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar swipe = scene.rexGestures.add.swipe(config);\n// var swipe = scene.rexGestures.add.swipe(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: State Machine Flow Diagram\nDESCRIPTION: Mermaid diagram showing the state machine flow for node execution including enter, open, tick, close, and exit states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/behaviortree/README.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n\nENTER(\"ENTER<br>----<br>node._enter()<br>-> tick._enterNode(), node.enter()\")\nOPEN(\"OPEN<br>----<br>node._open()<br>-> tick._openNode(), node.open()\")\nTICK(\"TICK<br>----<br>node._tick()<br>-> tick._tickNode(), node.tick()\")\nCLOSE(\"CLOSE<br>----<br>node._close()<br>-> tick._closeNode(), node.close()\")\nEXIT(\"EXIT<br>----<br>node._exit()<br>-> tick._exitNode(), node.exit()\")\n\nENTER --> |NOT isOpen| OPEN\nOPEN  --> TICK\nENTER --> |isOpen| TICK\nTICK  --> |NOT isRunning| CLOSE\nCLOSE --> EXIT\nTICK  --> |isRunning| EXIT\n```\n\n----------------------------------------\n\nTITLE: Configuring GridTable Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to import and configure the UIPlugin (which includes GridTable) in the Phaser 3 game configuration. This method allows global access to the plugin's functionality across all scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Star Stroke Style in Phaser 3\nDESCRIPTION: Sets the stroke style (line width, color, and alpha) of a star shape in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstar.setStrokeStyle(lineWidth, color, alpha);\n```\n\n----------------------------------------\n\nTITLE: Creating a Polygon in Phaser 3\nDESCRIPTION: Creates a new Polygon geometry instance in Phaser 3 by providing an array of points. Points can be specified as number arrays, point objects, or as a space-separated string.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar polygon = new Phaser.Geom.Polygon(points);\n```\n\n----------------------------------------\n\nTITLE: Adding a Shader Game Object in Phaser 3\nDESCRIPTION: Creates and adds a shader game object to the scene. Parameters include the shader key, position, size, and optional textures to bind to the shader's iChannel uniforms.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar shader = scene.add.shader(key, x, y, width, height, textures);\n```\n\n----------------------------------------\n\nTITLE: Modifying Local State of Child in Container-Lite (JavaScript)\nDESCRIPTION: Methods to change the local state properties of a child object within a Container-Lite instance. This includes setting local position, scale, alpha, and visibility.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setChildLocalPosition(child, x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setChildLocalScale(child, scaleX, scaleY);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setChildLocalAlpha(child, alpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setChildLocalVisible(child, visible);\n```\n\n----------------------------------------\n\nTITLE: Full Configuration Example for SimpleDropDownList\nDESCRIPTION: Complete configuration object example for creating a SimpleDropDownList with all available options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropDownList = scene.rexUI.add.simpleDropDownList({\n    label: labelStyle,\n    button: buttonStyle,\n\n    track: backgroundStyle,\n    thumb: backgroundStyle,\n\n    list: {\n        // easeIn: 500,\n        // transitIn: undefined,\n        // transitIn: function(listPanel, duration) {  },\n    \n        // easeOut: 100,\n        // transitOut: undefined,\n        // transitOut: function(listPanel, duration) {  },\n    \n        // wrap: false,\n        // maxHeight: undefined,\n        // width: undefined, \n        // height: undefined,\n        // alignParent: 'text',\n        // alignSide: '',\n        // expandDirection: 0,\n        // bounds: undefined,\n\n        // space: {\n        //     left: 0, right: 0, top: 0, bottom: 0, item: 0,\n        //     line: 0\n        // },\n\n        // draggable: false        \n    }\n\n}, creators);\n```\n\n----------------------------------------\n\nTITLE: Tile Property Access and Manipulation in Phaser 3\nDESCRIPTION: Methods for accessing and manipulating tile properties including position, visibility, and flip states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar tile = map.getTileAt(tileX, tileY);\ntile.setAlpha(value);\ntile.setVisible(visible);\ntile.setFlipX(flipX);\ntile.setFlipY(flipY);\nvar bounds = tile.getBounds();\n```\n\n----------------------------------------\n\nTITLE: Drawing and Erasing Objects\nDESCRIPTION: Methods for drawing and erasing game objects, groups, containers, or texture frames with position and appearance modifiers.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamic-texture.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.draw(entries);\n// texture.draw(entries,x, y);\n// texture.draw(entries, x, y, alpha, tint);\n\ntexture.erase(entries);\n// texture.erase(entries, x, y);\n```\n\n----------------------------------------\n\nTITLE: Configuring Game for DOM Elements in Phaser 3\nDESCRIPTION: Sets up the game configuration to enable DOM elements and proper input handling for the file drop zone.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filedropzone.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    parent: divId,\n    // fullscreenTarget: divId, // For fullscreen\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    },\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Next Page of Scores\nDESCRIPTION: JavaScript code to load the next page of scores from the leaderboard, returning a Promise with an array of score objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.loadNextPage()\n    .then(function(scores) { })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Movement Controls in Phaser 3 Physics\nDESCRIPTION: Methods for moving game objects to specific positions or towards other objects at constant velocity\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.moveTo(gameObject, x, y, speed, maxTime);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.moveToObject(gameObject, destination, speed, maxTime);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Children to Sizer in Phaser 3\nDESCRIPTION: Shows how to add multiple game objects to a sizer at once using an array and a configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.add(gameObjects, config);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Grid Table Class in Phaser 3\nDESCRIPTION: Shows how to create a custom class that extends the RexPlugins.UI.GridTable class. This allows for additional customization and functionality to be added to the base Grid Table component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyGridTable extends RexPlugins.UI.GridTable {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Styling and Color Configuration\nDESCRIPTION: Methods for setting text styles including font properties, colors, stroke, underline, and background effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setStyle(style);\ntxt.setFont(font);\ntxt.setFontFamily(family);\ntxt.setFontSize(size);\ntxt.setFontStyle(style);\ntxt.setColor(color);\ntxt.setStroke(color, thickness);\ntxt.setUnderline(color, thickness, ofset);\ntxt.setBackgroundColor(color);\ntxt.setShadow(x, y, color, blur, shadowStroke, shadowFill);\n```\n\n----------------------------------------\n\nTITLE: Creating ContainerLite Object with Children in Phaser 3\nDESCRIPTION: Demonstrates how to create a ContainerLite object with initial children in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar container = scene.add.rexContainerLite(x, y, children);  // width = 1, height = 1\n// var container = scene.add.rexContainerLite(x, y, width, height, children);\n```\n\n----------------------------------------\n\nTITLE: Playing Marked Sections of Audio in Phaser 3\nDESCRIPTION: Method to play a specific section (marker) of a sound file, with the sound instance being destroyed when playback ends.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.play(key, marker);\n```\n\n----------------------------------------\n\nTITLE: Enabling World Bounds Collision in Phaser 3 Arcade Physics\nDESCRIPTION: Makes a physics body collide with the world boundaries, preventing it from leaving the game world.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setCollideWorldBounds();\n```\n\n----------------------------------------\n\nTITLE: Configuring Fullscreen with DOM Game Objects in Phaser 3\nDESCRIPTION: Shows how to configure a Phaser game to target a specific DOM element for fullscreen mode by setting the fullscreenTarget property in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fullscreen.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    parent: parentDivID,\n    fullscreenTarget: parentDivID\n};\n\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Empty Layer\nDESCRIPTION: Methods for creating a new blank layer in a tilemap with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar layer = map.createBlankLayer(layerID, tileset);\n// var layer = map.createBlankLayer(layerID, tileset, x, y, width, height, tileWidth, tileHeight); // x, y : offset in pixels\n```\n\n----------------------------------------\n\nTITLE: Managing Game State and Transitions in Phaser 3\nDESCRIPTION: Demonstrates how to manage game state, including updating UI elements, playing sound effects, changing character expressions, and transitioning between scenes. It also shows how to control timing and flow of the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/mds/command-executor.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nTitle.setText\n  text0=Day1\n\nlog.memory\n  text=After choice\n\nwait\n  time=3000\n  click\n\nCharacterA.unfocus\n\nse.play\n  key=explosion\n  wait\n\nSPRITE.cross\n  expression=dizzy\n\nbgm.cross\n  key=theme1\n\nwait\n  time=200\n\nBackground.cross\n  key=road\n  mode=irisOut\n\nwait\n  time=200\n\nSPRITE.to\n  vpx=-0.3\n\nbgm.stop\n```\n\n----------------------------------------\n\nTITLE: Default Style Configuration for BBCode Text in Phaser 3\nDESCRIPTION: The default style configuration object for BBCode text with all available properties and their default values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    fontFamily: 'Courier',\n    fontSize: '16px',\n    fontStyle: '',\n    backgroundColor: null,  // null, css string, or number\n    backgroundColor2: null,  // null, css string, or number\n    backgroundHorizontalGradient: true,\n    backgroundStrokeColor: null,  // null, css string, or number\n    backgroundStrokeLineWidth: 2,\n\n    backgroundCornerRadius: 0,  \n    // 0   : no round corner, \n    // > 0 : convex round corner\n    // < 0 : concave round corner\n\n    backgroundCornerIteration: null,    \n    color: '#fff',  // null, css string, or number\n    stroke: '#fff',  // null, css string, or number\n    strokeThickness: 0,\n    shadow: {\n        offsetX: 0,\n        offsetY: 0,\n        color: '#000',  // css string, or number\n        blur: 0,\n        stroke: false,\n        fill: false\n    },\n    underline: {\n        color: '#000',  // css string, or number\n        thickness: 0,\n        offset: 0\n    },\n    strikethrough: {\n        color: '#000',  // css string, or number\n        thickness: 0,\n        offset: 0\n    },\n    // align: 'left',  // Equal to halign\n    halign: 'left', // 'left'|'center'|'right'\n    valign: 'top',  // 'top'|'center'|'bottom'\n    padding: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n    },\n    maxLines: 0,\n    lineSpacing: 0,\n    fixedWidth: 0,\n    fixedHeight: 0,\n    testString: '|MÉqgy',\n    \n    wrap: {\n        mode: 'none',     // 0|'none'|1|'word'|2|'char'|'character'|3|'mix'\n        width: null\n    },\n    // wordWrap: { width: 0 },   // Compatible with Text game object\n\n    // rtl: false,\n    metrics: false,\n    // metrics: {\n    //     ascent: 0,\n    //     descent: 0,\n    //     fontSize: 0\n    // },\n\n    // images: {\n    //     imgKey: {y: -8}\n    // },\n\n    // delimiters: '[]',\n\n    // sharedPool: true,\n\n    // urlTagCursorStyle: 'pointer',\n    // interactive: false\n}\n```\n\n----------------------------------------\n\nTITLE: Line-to-Polygon Intersection in Phaser 3\nDESCRIPTION: Calculates the closest point of intersection between a line/ray and an array of polygons. Returns detailed information about the intersection point and which polygon was hit.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetLineToPolygon(line, polygons);\n// var out = Phaser.Geom.Intersects.GetLineToPolygon(line, polygons, isRay, out);\n```\n\n----------------------------------------\n\nTITLE: Importing Quad Image Class in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to import the Quad Image class directly and create an instance in a Phaser 3 game scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-image.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QuadImage } from 'phaser3-rex-plugins/plugins/quadimage.js';\n\nvar image = new QuadImage(scene, x, y, texture, frame, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Styling Configuration for Tweaker Component in JavaScript\nDESCRIPTION: Comprehensive styling configuration object for the Tweaker component, defining styles for input rows including backgrounds, text, icons, spacing and proportions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        inputRow: {\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    \n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n    \n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                }\n            },\n\n            inputText: {\n                background: {\n                    color: null,\n                    color2: null,\n                    horizontalGradient: true,\n\n                    stroke: null,\n                    strokeThickness: 2,\n\n                    cornerRadius: 0,\n                    cornerIteration: null\n                },\n                focusStyle: {\n                    // color:\n                    // color2:\n                    // horizontalGradient:\n\n                    // stroke:\n                    // strokeThickness:\n\n                    // cornerRadius:\n                    // cornerIteration:\n                },\n\n                style: {\n                    bold: false,\n                    italic: false,\n                    fontSize: '16px',\n                    fontFamily: 'Courier',\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadowColor: null,\n                    shadowOffsetX: 0,\n                    shadowOffsetY: 0,\n                    shadowBlur: 0,\n                    backgroundColor: null,\n                    backgroundHeight: undefined,\n                    backgroundBottomY: undefined,\n                    offsetX: 0,\n                    offsetY: 0\n                },\n                cursorStyle: {\n                    // bold:\n                    // italic:\n                    // fontSize:\n                    // fontFamily:\n                    // color:\n                    // stroke:\n                    // strokeThickness:\n                    // shadowColor:\n                    // shadowOffsetX:\n                    // shadowOffsetY:\n                    // shadowBlur:\n                    // backgroundColor:\n                    // backgroundHeight:\n                    // backgroundBottomY:\n                    // offsetX:\n                    // offsetY:\n                }\n            },\n\n            space: {\n                left: 0, right: 0, top: 0, bottom: 0,\n                title: 0\n            },\n\n            proportion: {\n                title: 0, inputField: 0,\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting World Bounds in Phaser 3\nDESCRIPTION: Methods for configuring and managing world boundaries for physics bodies, including setting custom bounds and collision detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setBoundsRectangle(bounds);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setCollideWorldBounds();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setCollideWorldBounds(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar top = body.world.bounds.top;\nvar bottom = body.world.bounds.bottom;\nvar left = body.world.bounds.left;\nvar right = body.world.bounds.right;\n```\n\n----------------------------------------\n\nTITLE: Enabling Physics Body in Phaser 3\nDESCRIPTION: Enables the physics body on a game object. Can be used to reactivate a previously disabled body, optionally resetting its position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.enableBody();\n// gameObject.enableBody(false, 0, 0, enableGameObject, showGameObject);\n```\n\n----------------------------------------\n\nTITLE: Setting Collision Bounds in Matter.js\nDESCRIPTION: Methods for setting different collision bound shapes (rectangle, circle, polygon, trapezoid) for game objects using Matter.js physics\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setRectangle(width, height, options);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setCircle(radius, options);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPolygon(radius, sides, options);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setTrapezoid(width, height, slope, options);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setBody(config, options);\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Authentication\nDESCRIPTION: Handles authentication using Facebook as the identity provider. Creates a popup for the user to sign in with their Facebook credentials and returns authentication results including access token and user data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar provider = new firebase.auth.FacebookAuthProvider();\nfirebaseApp.auth().signInWithPopup(provider).then(function (result) {\n    // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n    var token = result.credential.accessToken;\n    // The signed-in user info.\n    var user = result.user;\n    // ...\n}).catch(function (error) {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message;\n    // The email of the user's account used.\n    var email = error.email;\n    // The firebase.auth.AuthCredential type that was used.\n    var credential = error.credential;\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Shadow Properties in Phaser 3 Text\nDESCRIPTION: Shows how to get and set shadow properties (color, offset, blur, stroke, fill) for a Phaser 3 Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = txt.style.shadowColor;\nvar offsetX = txt.style.shadowOffsetX;\nvar offsetY = txt.style.shadowOffsetY;\nvar blur = txt.style.shadowBlur;\nvar stroke = txt.style.shadowStroke;\nvar enabled = txt.style.shadowFill;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setShadow(x, y, color, blur, shadowStroke, shadowFill);\ntxt.setShadowOffset(x, y);\ntxt.setShadowColor(color);\ntxt.setShadowBlur(blur);\ntxt.setShadowStroke(enabled);\ntxt.setShadowFill(enabled);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Individual Animations in Phaser 3\nDESCRIPTION: Shows how to work with individual animation objects in Phaser 3, including adding and removing frames, getting specific frames, and exporting animations to JSON.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/animation.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar anim = scene.anims.get(key);\n\nanim.addFrame(frame);\n\nanim.addFrameAt(index, frame);\n\nanim.removeFrameAt(index);\n\nanim.removeFrame(frame);\n\nvar HasFrameAt = anim.checkFrame(index);\n\nvar frame = anim.getFrameAt(index);\n\nvar frame = anim.getLastFrame();\n\nvar json = anim.toJSON();\n\nvar jsonString = JSON.stringify(anim);\n```\n\n----------------------------------------\n\nTITLE: Querying Bodies in Area in Phaser 3 Arcade Physics\nDESCRIPTION: Shows how to find physics bodies within a specified area in the Arcade physics world of Phaser 3. This is useful for area-based interactions and spatial queries in games.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar bodies = scene.physics.overlapRect(x, y, width, height, includeDynamic, includeStatic);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bodies = scene.physics.overlapCirc(x, y, radius, includeDynamic, includeStatic);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document from Firestore\nDESCRIPTION: Fetches a specific document from a Firestore collection by its ID.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).doc(docName).get()\n    .then(function(doc) { /* ... */ })\n    .catch(function(error) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Checking Key States and Duration in Phaser 3\nDESCRIPTION: Demonstrates how to check key states (up/down) and get the duration of a key press in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardevents.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar isDown = keyObject.isDown;\nvar isUp = keyObject.isUp;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar duration = keyObject.getDuration(); // ms\n```\n\n----------------------------------------\n\nTITLE: Handling Particle Emitter Complete Event in JavaScript\nDESCRIPTION: Registers a callback function that executes when the emitter has completed its emission cycle and all particles have finished rendering. The callback receives the emitter instance as a parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.on('complete', function(emitter) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Child at Position in Sizer in Phaser 3\nDESCRIPTION: Shows how to insert a child game object at a specific position (x, y coordinates) in the sizer, with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.insertAtPosition(x, y, \n    child, \n    {\n        proportion: 0,\n        align: 'center',\n        padding: {left: 0, right: 0, top: 0, bottom: 0},\n        expand: false,\n        key: undefined,\n        minWidth: undefined,\n        minHeight: undefined,\n        fitRatio: 0,\n    }\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.insertAtPosition(x, y, index, child, proportion, align, padding, expand, key);\n```\n\n----------------------------------------\n\nTITLE: Using Vector2 Down Constant in Phaser 3\nDESCRIPTION: References the constant Vector2 representing the down direction (0,1).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar vector = Phaser.Math.Vector2.DOWN;\n```\n\n----------------------------------------\n\nTITLE: Setting WebGL Texture Buffers in Phaser 3 Shaders\nDESCRIPTION: Sets a sampler2D uniform directly from a WebGL texture buffer. Useful for dynamic textures or render-to-texture operations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nshader.setSampler2DBuffer(uniformKey, texture, width, height, textureIndex);\n// shader.setSampler2DBuffer(uniformKey, texture, width, height, textureIndex, textureData);\n```\n\n----------------------------------------\n\nTITLE: Tween Time Scale Control\nDESCRIPTION: Methods for controlling tween playback speed through time scaling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tween.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntween.setTimeScale(v);\nvar timeScale = tween.getTimeScale();\nvar timeScale = scene.tweens.timeScale;\nscene.tweens.timeScale = timescale;\n```\n\n----------------------------------------\n\nTITLE: Stopping a Particle Emitter in Phaser 3\nDESCRIPTION: Stops the particle emitter with an option to immediately kill all existing particles or let them complete their lifespans naturally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.stop();\n// emitter.stop(kill);\n```\n\n----------------------------------------\n\nTITLE: Creating RoundRectangleProgress Shape in Phaser3 Rex UI\nDESCRIPTION: Shows how to add a round rectangle progress bar shape that can be horizontal or vertical. This component provides a progress bar with rounded corners for better visual appeal.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar roundRectangleProgress = scene.rexUI.add.roundrectangleProgress(x, y, width, height, radius, barColor, value, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Jigsaw Puzzle Pieces in Phaser 3\nDESCRIPTION: Demonstrates the full configuration options for cutting a game object into jigsaw puzzle pieces, including customization of piece shape, edge properties, and image creation callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cutjigsawimage.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pieces = scene.plugins.get('rexCutJigsawImage').gridCut(gameObject, {\n    piecesKey: ,\n    columns: , \n    rows: ,\n    edgeWidth: , \n    edgeHeight: ,\n    useDynamicTexture: true,\n\n    // drawShapeCallback: undefined,\n    // edges: undefined,    \n\n    // createImageCallback: undefined,\n    // ImageClass: Phaser.GameObjects.Image,\n\n    // originX: 0.5,\n    // originY: 0.5,\n    // add: true,\n    // align: true,\n    // objectPool: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tag Player Class\nDESCRIPTION: Shows how to create a custom Tag Player class by extending the base TagPlayer class and instantiating it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTagPlayer extends TagPlayer {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n    }\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tagPlayer = new MyTagPlayer(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Pre-FX Pipeline Class in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom pre-fx pipeline class extending Phaser.Renderer.WebGL.Pipelines.PreFXPipeline. It includes a constructor for initialization and an onDraw method for setting uniform values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/prefx-pipeline.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPreFxClass extends Phaser.Renderer.WebGL.Pipelines.PreFXPipeline {\n    constructor(game) {\n        super({\n            game: game,\n            fragShader: '...',  // GLSL shader\n        });\n    }\n\n    onDraw(renderTarget) {\n        var sprite = this.tempSprite;\n        this.set1f('intensity', sprite._intensity);\n\n        super.onDraw(renderTarget);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin via Minified File\nDESCRIPTION: Shows how to load the UI plugin using the minified file in the preload stage and create a slider instance\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-slider.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar slider = scene.rexUI.add.slider(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Plugin in Phaser 3 Game Configuration\nDESCRIPTION: JavaScript code to import and configure the Firebase plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-files.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport FirebasePlugin from 'phaser3-rex-plugins/plugins/firebase-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFirebase',\n            plugin: FirebasePlugin,\n            start: true\n        }]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Capturing Rectangular Area Snapshot in Phaser 3\nDESCRIPTION: This code shows how to capture a snapshot of a specific rectangular area within the game viewport. It uses the game.renderer.snapshotArea method, allowing specification of position and size.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/snapshot.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngame.renderer.snapshotArea(x, y, width, height, callback);\n// game.renderer.snapshot(x, y, width, height, callback, type, encoderOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Key Combo in Phaser 3\nDESCRIPTION: Creates a keyboard combo sequence that can detect specific key patterns. Configuration options include reset behavior for wrong keys, maximum delay between keypresses, and whether to reset or delete the combo after a match.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardcombo.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyCombo = scene.input.keyboard.createCombo(keys, {\n    // resetOnWrongKey: true,\n    // maxKeyDelay: 0,\n    // resetOnMatch: false,\n    // deleteOnMatch: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing the System Scene in Phaser 3\nDESCRIPTION: Methods to access the special system scene that lives outside the normal scene list and can be used by plugins and managers.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene = scene.scene.get('__SYSTEM');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene = scene.scene.systemScene;\n```\n\n----------------------------------------\n\nTITLE: Reading Gamepad Button States\nDESCRIPTION: Methods to check the current state of various gamepad buttons including directional pad and face buttons.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gamepad.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar isLeftDown = gamepad.left;\nvar isRightftDown = gamepad.right;\nvar isUpDown = gamepad.up;\nvar isDownDown = gamepad.down;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isADown = gamepad.A;  // Dual Shock controller: X button\nvar isYDown = gamepad.Y;  // Dual Shock controller: Triangle button\nvar isXDown = gamepad.X;  // Dual Shock controller: Square button.\nvar isBDown = gamepad.B;  // Dual Shock controller: Circle button\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isL1Down = gamepad.L1; // XBox controller: LB button\nvar isL2Down = gamepad.L2; // XBox controller: LT button\nvar isR1Down = gamepad.R1; // XBox controller: RB button\nvar isR2Down = gamepad.R2; // XBox controller: RT button\n```\n\n----------------------------------------\n\nTITLE: Applying WarpPostFX to Game Objects and Cameras in Phaser 3\nDESCRIPTION: These snippets demonstrate how to apply the WarpPostFX effect to both game objects and cameras in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp-transition.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(WarpPostFX);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(WarpPostFX);\n```\n\n----------------------------------------\n\nTITLE: Handling TextBox Character Typing Event\nDESCRIPTION: Sets up an event handler that fires each time a character is typed in the text box, providing the character as a parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.on('typechar', function(char) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Getting a random child from a List in Phaser 3\nDESCRIPTION: Method to get a random child from the List, optionally specifying a range with startIndex and length.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar child = list.getRandom(startIndex, length);\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Axis Drag in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the drag (deceleration) of a physics body along individual axes. Allows separate control of horizontal and vertical drag.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setDragX(x);\ngameObject.setDragY(y);\n```\n\n----------------------------------------\n\nTITLE: Creating Plane Object\nDESCRIPTION: Creates a new Plane game object with various initialization options including position, texture, dimensions and tiling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/plane.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar plane = scene.add.plane(x, y, key);\n// var plane = scene.add.plane(x, y, key, frame);\n// var plane = scene.add.plane(x, y, texture, frame, width, height, tile);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rex UI Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Rex UI Plugin in the Phaser 3 game configuration to make UI components available in all scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scrollable Block in Phaser3 Scrollable Panel\nDESCRIPTION: Gets the scrollable block where scroller and children interactive elements are registered.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar scrollableBlock = panel.getElement('scrollableBlock');\n```\n\n----------------------------------------\n\nTITLE: Converting Between World and Tile Coordinates\nDESCRIPTION: Methods for converting between world pixel coordinates and tile grid coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXY = map.worldToTileXY(worldX, worldY);\n// var out = map.worldToTileXY(worldX, worldY, snapToFloor, out, camera, layer);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar worldXY = map.tileToWorldXY(tileX, tileY);\n// var out = map.tileToWorldXY(tileX, tileY, out, camera, layer);\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Velocity in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current maximum velocity values of a physics body in both X and Y directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar vx = gameObject.body.maxVelocity.x;\nvar vy = gameObject.body.maxVelocity.y;\n```\n\n----------------------------------------\n\nTITLE: Importing TabPages Class Directly\nDESCRIPTION: How to import the TabPages class directly from the UI components module and create an instance manually.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TabPages } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tabPages = new TabPages(scene, config);\nscene.add.existing(tabPages);\n```\n\n----------------------------------------\n\nTITLE: Playing Animation on Game Objects in Phaser3\nDESCRIPTION: Starts playing a specified animation on game objects that support animations. The ignoreIfPlaying parameter prevents restarting animations that are already playing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.PlayAnimation(gameObjects, key, ignoreIfPlaying);\n```\n\n----------------------------------------\n\nTITLE: Creating a Line in Phaser3\nDESCRIPTION: Creates a line geometry object with specified start and end points for use with line placement actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = new Phaser.Geom.Line(x1, y1, x2, y2);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Phaser 3 Scene Steps with Mermaid\nDESCRIPTION: A flow chart created using Mermaid that illustrates the update and render steps within a Phaser 3 scene, including the events and processes that occur during each phase.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n\nsubgraph Render\nSceneEventPreRender>[\"scene.events: prerender\"]\nSceneCameraRender[\"scene.cameras.render()\"]\nSceneEventRender>[\"scene.events: render\"]\nend\n\nsubgraph Update\nSceneEventPreUpdate>[\"scene.events: preupdate<br><br>InputPlugin.preUpdate()<br>TweenManager.preUpdate()<br>UpdateList.preUpdate()\"]\nSceneEventUpdate>[\"scene.events: update<br><br>TweenManager.update()<br>UpdateList.update()<br>gameObject.preUpdate()\"]\nSceneUpdate[\"scene.update()\"]\nSceneEventPostUpdate>[\"scene.events: postupdate\"]\nend\n\n\nSceneEventPreUpdate --> SceneEventUpdate\nSceneEventUpdate --> SceneUpdate\nSceneUpdate --> SceneEventPostUpdate\n\nSceneEventPostUpdate -.-> SceneEventPreRender\nSceneEventPreRender --> SceneCameraRender\nSceneCameraRender --> SceneEventRender\n```\n\n----------------------------------------\n\nTITLE: Configuring and Adding Glow Filter to Game Object\nDESCRIPTION: Applies a glow filter effect to a game object with configurable parameters such as strength, color, and quality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGlowFilterPipeline').add(gameObject, {    \n    // outerStrength: 4,\n    // innerStrength: 0,\n    // glowColor: 0xffffff,\n    // knockout: false,\n\n    // distance: 10,\n    // quality: 0.1,\n\n    // name: 'rexGlowFilterPostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Game Configuration in Phaser\nDESCRIPTION: Shows how to access the game configuration object from the game instance or within a scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = game.config;\n// var config = scene.game.config;\n```\n\n----------------------------------------\n\nTITLE: Reading Scene Status in Phaser 3\nDESCRIPTION: Methods to check the current status of a scene, including whether it's sleeping, paused, active, or visible.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar isSleep = scene.scene.isSleeping(key);\n// var isSleep = scene.scene.isSleeping();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPaused = scene.scene.isPaused(key);\n// var isPaused = scene.scene.isPaused();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isActive = scene.scene.isActive(key);\n// var isActive = scene.scene.isActive();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isVisible = scene.scene.isVisible(key);\n// var isVisible = scene.scene.isVisible();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar status = scene.scene.getStatus(key);\n// var status = scene.scene.getStatus();\n```\n\n----------------------------------------\n\nTITLE: Adding Game Objects to a Layer\nDESCRIPTION: Shows how to add game objects to a specific layer in the LayerManager. Works with any game object type, including containers.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlayerManager.addToLayer(name, gameObject);\n```\n\n----------------------------------------\n\nTITLE: Destroying a Game Object in Phaser 3\nDESCRIPTION: Demonstrates how to destroy a game object and handle the destroy event. The game object is automatically destroyed when the scene is destroyed if it's in the display or update list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.destroy();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.once('destroy', function(gameObject, fromScene) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Managing Game Object Flip in Phaser 3\nDESCRIPTION: Demonstrates how to get, set, toggle, and reset the flip state of a game object on both X and Y axes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar flip = gameObject.flipX;  // flip: true/false\nvar flip = gameObject.flipY;  // flip: true/false\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.flipX = flip;\ngameObject.flipY = flip;\ngameObject.setFlipX(flip);\ngameObject.setFlipY(flip);\ngameObject.setFlip(flipX, flipY);\ngameObject.toggleFlipX();\ngameObject.toggleFlipY();\ngameObject.resetFlip();  // equal to gameObject.setFlip(false, false);\n```\n\n----------------------------------------\n\nTITLE: Setting Shader Uniform Values in Phaser 3\nDESCRIPTION: Sets the value of a uniform in a shader. The key can use dot notation to access nested properties within the uniform object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nshader.setUniform(key, value);\n```\n\n----------------------------------------\n\nTITLE: Importing ConfirmActionButton Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the ConfirmActionButton plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmactionbutton.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Drawing Circle Shapes on Graphics in Phaser 3\nDESCRIPTION: Shows how to draw filled and stroked Circle shapes using Phaser's graphics object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-circle.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// graphics.fillStyle(color, alpha);   // color: 0xRRGGBB\ngraphics.fillCircleShape(circle);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// graphics.lineStyle(lineWidth, color, alpha);   // color: 0xRRGGBB\ngraphics.strokeCircleShape(circle);\n```\n\n----------------------------------------\n\nTITLE: Creating Hexagon Tile Texture with Rex Board Plugin in Phaser 3\nDESCRIPTION: Creates a hexagon tile texture using the CreateTileTexture function from the Rex Board Plugin. Includes parameters for customizing the tile appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-texture.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nCreateTileTexture(board, key, fillStyle, strokeStyle, lineWidth);\n// CreateTileTexture(board, key, fillStyle, strokeStyle, lineWidth, overlapGrid, lineJoin);\n```\n\n----------------------------------------\n\nTITLE: Starting FSM at Specific State\nDESCRIPTION: Shows how to start the FSM at a specific state without triggering state-changing callbacks or events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nstates.start(newState);\n```\n\n----------------------------------------\n\nTITLE: Adding Child to Sizer in Phaser 3\nDESCRIPTION: Demonstrates how to add a child game object to a sizer with various configuration options including proportion, alignment, padding, and expansion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.add(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.add(child,\n    {\n        proportion: 0,\n        align: 'center',\n        padding: {left: 0, right: 0, top: 0, bottom: 0},\n        expand: false,\n        key: undefined,\n        index: undefined,\n        minWidth: undefined,\n        minHeight: undefined,\n        fitRatio: 0,  // true\n        offsetX: 0,\n        offsetY: 0,\n        offsetOriginX: 0,\n        offsetOriginY: 0,\n    }\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.add(child, proportion, align, padding, expand, key, index);\n// sizer.add(child, proportion, align, padding, expand, key, index);\n```\n\n----------------------------------------\n\nTITLE: Camera Flash Effect in Phaser 3\nDESCRIPTION: Methods for creating a flash effect with the camera including duration, color values and callback handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-effects.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.flash(duration);\n// camera.flash(duration, red, green, blue, force, callback, context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(camera, progress) {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('cameraflashstart', camera, flash, duration, red, green, blue);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('cameraflashcomplete', camera, flash);\n```\n\n----------------------------------------\n\nTITLE: Creating Bob Objects Using a Callback Function\nDESCRIPTION: Creates Bob objects using a callback function to customize each one. The callback receives the bob object and its index, allowing for programmatic configuration of each Bob.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar bobs = blitter.createFromCallback(callback, quantity, frame, visible)\n// var callback = function(bob, i){};\n```\n\n----------------------------------------\n\nTITLE: Removing Key Objects in Phaser 3\nDESCRIPTION: Shows how to remove individual key objects or all key objects in Phaser 3, with options for destroying and removing captures.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardevents.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.keyboard.removeKey('W');\n// scene.input.keyboard.removeKey(Phaser.Input.Keyboard.KeyCodes.W);\n// scene.input.keyboard.removeKey(key, destroy, removeCapture);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.keyboard.removeAllKeys(true);\n// scene.input.keyboard.removeAllKeys(destroy, removeCapture);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Perspective Sprite Class in Phaser 3\nDESCRIPTION: Creates a custom class extending PerspectiveSprite for use in a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-sprite.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPerspectiveSprite extends PerspectiveSprite {\n    constructor(scene, x, y, texture, frame, config) {\n        super(scene, x, y, texture, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Custom Commands on Game Objects\nDESCRIPTION: Commands to invoke custom methods on a specific game object, all game objects of a type, or all game objects of a type excluding a specific one.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_39\n\nLANGUAGE: markdown\nCODE:\n```\nNAME.commandName\n  param0=value\n  param1=value\n```\n\nLANGUAGE: markdown\nCODE:\n```\nGOTYPE.commandName\n  param0=value\n  param1=value\n```\n\nLANGUAGE: markdown\nCODE:\n```\n!NAME.commandName\n  param0=value\n  param1=value\n```\n\n----------------------------------------\n\nTITLE: Creating a Parallelogram Pattern\nDESCRIPTION: Method to create a parallelogram-shaped grid of tiles with specified width, height, and type. Returns an array of tile positions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagonmap.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = scene.rexBoard.hexagonMap.parallelogram(board, type, width, height);\n// var out = scene.rexBoard.hexagonMap.parallelogram(board, type, width, height, out);\n```\n\n----------------------------------------\n\nTITLE: Adding New States to FSM\nDESCRIPTION: Demonstrates various methods to add new states to an existing FSM instance, including single state and multiple states at once.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nstates.addState(name, {\n    next: 'B',  // function() { return 'B'; }\n    enter: function() {},\n    exit: function() {},\n    update: function(time, delta) {},\n    preupdate: function(time, delta) {},\n    postupdate: function(time, delta) {},\n})\n\nstates.addState({\n    name: 'A',\n    next: 'B',  // function() { return 'B'; }\n    enter: function() {},\n    exit: function() {},\n    update: function(time, delta) {},\n    preupdate: function(time, delta) {},\n    postupdate: function(time, delta) {},\n})\n\nstates.addStates({\n    'A' : {\n        next: 'B',  // function() { return 'B'; }\n        enter: function() {},\n        exit: function() {},\n        update: function(time, delta) {},\n        preupdate: function(time, delta) {},\n        postupdate: function(time, delta) {},\n    },\n    // ...\n})\n\nstates.addStates([\n    {\n        name: 'A',\n        next: 'B',  // function() { return 'B'; }\n        enter: function() {},\n        exit: function() {},\n        update: function(time, delta) {},\n        preupdate: function(time, delta) {},\n        postupdate: function(time, delta) {},\n    },\n    // ...\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Style of an Arc in Phaser 3\nDESCRIPTION: Sets the stroke (outline) properties including width, color, and alpha for an Arc game object. These determine how the outline of the arc appears.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\narc.setStrokeStyle(lineWidth, color, alpha);\n```\n\n----------------------------------------\n\nTITLE: Adding Texture Atlas in Phaser 3\nDESCRIPTION: Adds a texture atlas to the texture cache. Requires an image element and atlas data defining the frames within the texture. Optionally supports a normal map.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.addAtlas(key, HTMLImageElement, data);\n// scene.textures.addAtlas(key, HTMLImageElement, data, dataSource);\n```\n\n----------------------------------------\n\nTITLE: Adding Drag Behavior (Plugin Method)\nDESCRIPTION: Add drag behavior to a game object using the plugin instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/drag.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar drag = scene.plugins.get('rexdragplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Handling Tile N-Tap Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for specific N-tap gestures on any tile in the board. The event name is constructed dynamically based on the tap count. The callback receives the tap behavior object and the tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('tile' + tapsCount + 'tap' , function(tap, tileXY) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Phaser Math Clamp in JavaScript\nDESCRIPTION: Demonstrates how to use Phaser's Math.Clamp function to restrict a value within specified minimum and maximum boundaries. Takes three parameters: the value to clamp, minimum boundary, and maximum boundary.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clamp.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.Clamp(value, min, max);\n```\n\n----------------------------------------\n\nTITLE: Handling Particle Emitter Start Event in JavaScript\nDESCRIPTION: Registers a callback function that executes when the emitter starts emitting particles. The callback receives the emitter instance as a parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.on('start', function(emitter) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Values in Phaser 3 Data Manager\nDESCRIPTION: Methods to set or merge multiple key-value pairs at once in the Data Manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/datamanager.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.set(data);    // data: {key:value, ...}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.merge(data);  // data: {key:value, ...}\nparent.data.merge(data, false);  // won't overwrite existed keys\n```\n\n----------------------------------------\n\nTITLE: Creating Skewable Render Texture Instance in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates different ways to create a skewable render texture instance in a Phaser 3 scene, including using a configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-rendertexture.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexSkewRenderTexturege(x, y, width, height);\n\n// or\n\nvar image = scene.add.rexSkewRenderTexturege({\n    // x: 0,\n    // y: 0,\n    // width: 32,\n    // height: 32,\n});\n\n// Add prespective render texture from JSON\n\nvar image = scene.make.rexSkewRenderTexturege({\n    x: 0,\n    y: 0,    \n    width: 32,\n    height: 32,\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: DropDownList Button Click Callback\nDESCRIPTION: Example of the callback function that handles button click events in the dropdown list. It receives the button object, index, pointer, and event as parameters, with 'this' context set to the dropdown list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(button, index, pointer, event) {\n    // this : dropDownList\n}\n```\n\n----------------------------------------\n\nTITLE: Physics Update Flow Diagram\nDESCRIPTION: Mermaid diagram showing the physics update loop sequence\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n\nSceneEventUpdate>\"scene.sys.events: update<br><br>Update arcade world<br>gameObject.preUpdate()\"]\nSceneUpdate[\"scene.update()\"]\nSceneEventPostUpdate>\"scene.sys.events: postupdate<br><br>Post update arcade world\"]\nRender\n\nSceneEventUpdate --> SceneUpdate\nSceneUpdate --> SceneEventPostUpdate\nSceneEventPostUpdate --> Render\n```\n\n----------------------------------------\n\nTITLE: Adding Matter.js Physics to Any Phaser Game Object\nDESCRIPTION: Converts any existing game object into a physics-enabled object with Matter.js integration. Optionally accepts a configuration object to customize physics properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = scene.matter.add.gameObject(gameObject);\n// var gameObject = scene.matter.add.gameObject(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Handling Bracket Parser Events in Phaser 3\nDESCRIPTION: Examples of event handling for various parser events, including tag starts, tag ends, and content parsing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nparser.on('+' + TagName, function(value){ /* ... */ });\n\nparser.on('+', function(tagName, value){ /* ... */ });\n\nparser.on('-' + TagName, function(){ /* ... */ });\n\nparser.on('content', function(content){ /* ... */ });\n\nparser.on('-', function(tagName){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Setting Slide Factor in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the slide factor of a physics body, which controls how much velocity is preserved when this body is pushed by another body.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setSlideFactor(x, y);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom ContainerLite Class in Phaser 3\nDESCRIPTION: Demonstrates how to create a custom class extending ContainerLite for use in a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyContainer extends ContainerLite {\n    constructor(scene, x, y, width, height, children) {\n        super(scene, x, y, width, height, children);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Acceleration of Physics Body in Phaser 3\nDESCRIPTION: Demonstrates how to set and get the acceleration of a physics body, including methods for setting gravity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAcceleration(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAccelerationX(x);\nbody.setAccelerationY(y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ax = body.acceleration.x;\nvar ay = body.acceleration.y;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setGravity(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setGravityX(x);\nbody.setGravityY(y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gx = body.gravity.x;\nvar gy = body.gravity.y;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAllowGravity();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAllowGravity(false);\n```\n\n----------------------------------------\n\nTITLE: Handling Chess Elimination Event in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This code demonstrates how to listen for the 'eliminate' event, which fires when chess pieces are to be eliminated. It provides access to the array of chess objects to be eliminated, the board object, and the bejeweled instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.on('eliminate', function(chessArray, board, bejeweled) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Programmatically Triggering Button Click Event in Phaser 3\nDESCRIPTION: Programmatically emits a button click event for a specific button. This is useful for simulating user interaction or triggering button behavior from code.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.emitButtonClick(index);\n```\n\n----------------------------------------\n\nTITLE: Handling Particle Emitter Stop Event in JavaScript\nDESCRIPTION: Registers a callback function that executes when the emitter stops emitting particles. This can occur from directly calling stop(), reaching the duration limit, or hitting the stopAfter particle count.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.on('stop', function(emitter) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Tilemap Data in Phaser 3\nDESCRIPTION: Methods for loading tilemap data in either Tiled JSON format or CSV format for use with tile-based games.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.tilemapTiledJSON(key, url);\n// scene.load.tilemapTiledJSON(key, url, xhrSettings);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.tilemapCSV(key, url);\n// scene.load.tilemapCSV(key, url, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Tween Control Methods\nDESCRIPTION: Basic control methods for Phaser 3 tweens including pause, resume, stop, play and restart functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tween.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntween.pause();\ntween.resume();\ntween.complete();\ntween.stop();\ntween.play();\ntween.restart();\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with In Array\nDESCRIPTION: Find documents where a property matches any value in a specified array using the $in operator. The property should be a scalar value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$in': [value0, value1, ...]}});\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Input System in Phaser 3\nDESCRIPTION: This code shows how to enable or disable the input system for a scene in Phaser 3. The input property is a built-in object available in every scene, and its enabled property can be set to true or false to toggle input functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/input.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.enabled = enabled; // enabled: true/false\n```\n\n----------------------------------------\n\nTITLE: Creating Board from Tilemap with Class Function\nDESCRIPTION: Creates a board from a tilemap using the imported CreateBoardFromTilemap function with tilemap and layers parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-tilemap.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar board = CreateBoardFromTilemap(tilemap, layers);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Text Content in Phaser 3\nDESCRIPTION: Shows how to get, set, and append text content in a Phaser 3 Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar content = txt.text;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setText(text);\n// txt.text = text;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.appendText(text);\n// txt.text += '\\n' + text;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.appendText(text, false);\n// txt.text += text;\n```\n\n----------------------------------------\n\nTITLE: Filling RenderTexture with Color in Phaser 3\nDESCRIPTION: Fills the render texture with a specified RGB color value and optional alpha. Can fill the entire texture or a specific rectangular area.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrt.fill(rgb);\n// rt.fill(rgb, alpha, x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Setting Noise Seed\nDESCRIPTION: Updating the seed value for the noise generator instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perlin.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnoise.setSeed(seed);\n```\n\n----------------------------------------\n\nTITLE: Changing Children's Align Mode in Sizer in Phaser 3\nDESCRIPTION: Shows how to change the alignment mode of children in a sizer and then trigger a layout update.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsizer\n    .setChildrenAlignMode(mode)\n    .layout();\n```\n\n----------------------------------------\n\nTITLE: Accessing Sound Properties in Phaser 3\nDESCRIPTION: Properties for retrieving information about a sound instance, including duration, playback status, and asset key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar duration = music.duration;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPlaying = music.isPlaying;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPaused = music.isPaused;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar key = music.key;\n```\n\n----------------------------------------\n\nTITLE: Loading Sprite Sheets in Phaser 3\nDESCRIPTION: Method for loading sprite sheets with frame configuration options such as dimensions, margins, and spacing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.spritesheet(key, url, {\n    // frameWidth: frameWidth,\n    // frameHeight: frameHeight,\n    // startFrame: startFrame,\n    // endFrame: endFrame,\n    // margin: margin,\n    // spacing: spacing\n});\n// scene.load.spritesheet(key, url, frameConfig, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Changing child position in a Phaser 3 List\nDESCRIPTION: Method to move a child to a specific index position in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlist.moveTo(child, index);\n```\n\n----------------------------------------\n\nTITLE: Managing Private Quest Task in Phaser 3 Question Manager\nDESCRIPTION: Shows how to create and manage a private quest task, including shuffling questions and retrieving the next question.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nquestionManager.startQuest(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar question = questionManager.getNextQuestion();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar question = questionManager.getNextQuestion(questionKey);\n```\n\n----------------------------------------\n\nTITLE: Handling TextBox Resume Event\nDESCRIPTION: Sets up an event handler that fires when typing is resumed via the resume() method after being paused.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.on('resume', function() {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Enabling Direct Control in Phaser 3 Arcade Physics\nDESCRIPTION: Enables direct control mode for a physics body, useful when the game object is controlled by tween or dragging.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setDirectControl();\n// gameObject.setDirectControl(true);\n```\n\n----------------------------------------\n\nTITLE: Manual Camera Scaling\nDESCRIPTION: Steps to manually control the camera scaling instead of using the automatic resize callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaleouter.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexScaleOuter.stop()\nscene.rexScaleOuter.scale();\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Area Input Styles in Phaser 3\nDESCRIPTION: Complete configuration object for styling text area input components. Includes style definitions for background, title, input text area, slider, and spacing properties. Supports customization of colors, fonts, dimensions, and visual effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        inputRow: {\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    \n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n    \n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                }\n            },\n\n            inputTextArea: {\n                height: undefined,\n\n                text: {\n\n                },\n\n                slider: {\n                    // ...\n                }\n            },\n\n            inputText: {\n                background: {\n                    color: null,\n                    color2: null,\n                    horizontalGradient: true,\n\n                    stroke: null,\n                    strokeThickness: 2,\n\n                    cornerRadius: 0,\n                    cornerIteration: null\n                },\n                focusStyle: {\n                    // color:\n                    // color2:\n                    // horizontalGradient:\n\n                    // stroke:\n                    // strokeThickness:\n\n                    // cornerRadius:\n                    // cornerIteration:\n                },\n\n                style: {\n                    bold: false,\n                    italic: false,\n                    fontSize: '16px',\n                    fontFamily: 'Courier',\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadowColor: null,\n                    shadowOffsetX: 0,\n                    shadowOffsetY: 0,\n                    shadowBlur: 0,\n                    backgroundColor: null,\n                    backgroundHeight: undefined,\n                    backgroundBottomY: undefined,\n                    offsetX: 0,\n                    offsetY: 0\n                },\n                cursorStyle: {\n                    // bold:\n                    // italic:\n                    // fontSize:\n                    // fontFamily:\n                    // color:\n                    // stroke:\n                    // strokeThickness:\n                    // shadowColor:\n                    // shadowOffsetX:\n                    // shadowOffsetY:\n                    // shadowBlur:\n                    // backgroundColor:\n                    // backgroundHeight:\n                    // backgroundBottomY:\n                    // offsetX:\n                    // offsetY:\n                }\n            },\n\n            slider: {\n                track: {\n                    height: 0,\n\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n\n                indicator: {\n                    height: 0,\n\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n\n                thumb: {\n                    width: 0, height: 0,\n\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                }\n            },\n\n            space: {\n                left: 0, right: 0, top: 0, bottom: 0,\n                title: 0\n            },\n            \n            proportion: {\n                title: 0, inputField: 0,\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas Input Instance in Phaser 3\nDESCRIPTION: This snippet demonstrates how to create a canvas input instance with various configuration options including styling, callbacks, and text input properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.rexCanvasInput({\n    // Parameters of DynamicText\n    x: 0, \n    y: 0,\n    width: undefined, \n    height: undefined,\n    resolution: 1,\n\n    // padding: 0,  // {left: 0, right: 0, top: 0, bottom: 0}\n\n    background: {\n        color: null,\n        color2: null,\n        horizontalGradient: true,\n\n        stroke: null,\n        strokeThickness: 2,\n\n        cornerRadius: 0,\n        cornerIteration: null,\n        \n        // Style when focus\n        // 'focus.color': ...\n        // 'focus.color2': ...\n        // 'focus.stroke': ...\n    },\n    focusStyle: undefined,\n\n    innerBounds: {\n        color: null,\n        color2: null,\n        horizontalGradient: true,\n\n        stroke: null,\n        strokeThickness: 2\n    },\n\n    style: {\n        bold: false,\n        italic: false,\n        fontSize: '16px',\n        fontFamily: 'Courier',\n        color: '#fff',\n        stroke: '#fff',\n        strokeThickness: 0,\n        shadowColor: null,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0,\n        shadowBlur: 0,\n        backgroundColor: null,\n        backgroundHeight: undefined,\n        backgroundBY: undefined,\n        offsetX: 0,\n        offsetY: 0,\n\n        // Style when cursor move on\n        // 'cursor.color': ...\n        // 'cursor.backgroundColor': ...\n        // 'cursor.xxx': ...\n\n        // Style when range selecting\n        // 'range.color': ...\n        // 'range.backgroundColor': ...\n        // 'range.xxx': ...\n        // Using cursor style if no range style is given\n    },\n    cursorStyle: undefined,\n\n    childrenInteractive: false,\n\n    text: '',\n\n    wrap: {\n        lineHeight: undefined,\n        useDefaultLineHeight: true,\n        maxLines: 1,\n        wrapWidth: undefined,\n        letterSpacing: 0,\n        wrapMode: 'char',  // 1|'word'|2|'char'|'character'|3|'mix', for single line text input\n        hAlign: 0, // 0|'left'|1|'center'|2|'right'|3|'justify'|'justify-left'|4|'justify-center'|5| justify-right'\n        vAlign: 'center',  // For single line text input        \n    },\n\n    textArea: false,\n    \n    // Parameters of hidden-text-editor   \n    // inputType: 'text',  // 'text'|'password'|'textarea'|...                \n    \n    // readOnly: false,\n    // maxLength: undefined,\n    // minLength: undefined,\n    // selectAll: false,\n\n    // enterClose: true,\n\n    // Callbacks\n    // onOpen: function (textObject, hiddenInputText) {\n    // },\n\n    // onClose: function (textObject, hiddenInputText) {\n    // },\n\n    // onUpdate: function (text, textObject, hiddenInputText) {\n    //     return text;\n    // },   \n\n    // onAddChar: function(child, index, canvasInput) {\n    //    child.modifyStyle({...})\n    // },\n\n    // onCursorOut: function(child, cursorIndex, canvasInput) {\n    //     child.modifyStyle({\n    //         \n    //     });\n    // },\n\n    // onCursorIn: function(child, cursorIndex, canvasInput) {\n    //     child.modifyStyle({\n    //         \n    //     });\n    // },\n\n    // onRangeOut: function(child, cursorIndex, canvasInput) {\n    //     child.modifyStyle({\n    //         \n    //     });\n    // },\n\n    // onRangeIn: function(child, cursorIndex, canvasInput) {\n    //     child.modifyStyle({\n    //         \n    //     });\n    // },\n\n    // Use 'onCursorIn' and 'onCursorOut' if 'onRangeOut' and 'onRangeIn' are not given\n\n    // parseTextCallback: function(text) {\n    //     return text;\n    // }.\n\n});\n```\n\n----------------------------------------\n\nTITLE: Parameterized Custom Easing Function in Phaser 3\nDESCRIPTION: Illustrates a custom easing function with additional parameters in Phaser 3. This allows for more complex and configurable easing behaviors in animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ease-function.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction(v, param0, param1, ...) {\n    return v;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Phaser 3 Scene using Prototype Pattern\nDESCRIPTION: Implementation of a Phaser 3 scene using JavaScript prototype pattern with constructor and prototype methods for scene lifecycle events. This approach is useful for organizing scenes in a namespace.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scene.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyGame = {};\n\nMyGame.Boot = function () {};\n\nMyGame.Boot.prototype.constructor = MyGame.Boot;\n\nMyGame.Boot.prototype = {\n  init: function (data) {},\n  preload: function () {},\n  create: function (data) {},\n  update: function (time, delta) {},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Bitmap Text from JSON Configuration\nDESCRIPTION: Initialize dynamic bitmap text using a configuration object that specifies properties like position, text content, font, size, and alignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamicbitmaptext.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.make.dynamicBitmapText({\n    x: 0,\n    y: 0,\n    text: 'Text\\nGame Object\\nCreated from config',\n    font: '',\n    size: false,\n    align: 0,\n    // origin: {x: 0.5, y: 0.5},\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Tabs Events in Phaser 3\nDESCRIPTION: Demonstrates how to listen for and handle various events emitted by the Tabs object in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.on('button.click', function(button, groupName, index, pointer) {\n    // ...\n}, scope);\n\ntabs.on('button.over', function(button, groupName, index, pointer) {\n    // ...\n}, scope);\n\ntabs.on('button.out', function(button, groupName, index, pointer) {\n    // ...\n}, scope);\n\ntabs.on('button.enable', function(button, groupName, index) {\n    // ...\n}, scope);\n\ntabs.on('button.disalbe', function(button, groupName, index) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle Shape in Phaser 3\nDESCRIPTION: Demonstrates how to create a new Circle shape and clone an existing one using Phaser's geometry methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-circle.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar circle = new Phaser.Geom.Circle(x, y, radius);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar circle1 = Phaser.Geom.Circle.Clone(circle0);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Word Wrap Width in Phaser 3 Text\nDESCRIPTION: Shows how to get and set the word wrap width and advanced wrap setting for a text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = txt.style.wordWrapWidth;\nvar useAdvancedWrap = txt.style.wordWrapUseAdvanced;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setWordWrapWidth(width);\n// txt.setWordWrapWidth(width, useAdvancedWrap);\n```\n\n----------------------------------------\n\nTITLE: Horizontal Text Wrapping in Phaser 3 Dynamic Text\nDESCRIPTION: Method to configure horizontal text wrapping with extensive options for padding, alignment, and styling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = txt.runWordWrap({\n    padding: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n    },\n    ascent: undefined,\n    lineHeight: undefined,\n    useDefaultTextHeight: false,\n    maxLines: undefined,\n    wrapWidth: undefined,\n    wrapMode: 'word',  // 1|'word'|2|'char'|'character'|3|'mix'\n    letterSpacing: 0,\n    hAlign: 0,\n    vAlign: 0,\n\n\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Drag in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the drag (deceleration) of a physics body in both X and Y directions. Drag reduces velocity over time when no acceleration is applied.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setDrag(x, y);\n```\n\n----------------------------------------\n\nTITLE: Creating Firebase Document Reference\nDESCRIPTION: Creates a reference to a specific document within a Firestore collection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar docRef = db.collection(collectionName).doc(docName);\n```\n\n----------------------------------------\n\nTITLE: Trapezoid Shape Configuration for Matter.js Physics\nDESCRIPTION: Configuration object for creating a trapezoid-shaped physics body. The slope parameter determines the angle of the non-parallel sides.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'trapezoid',\n    // slope: 0.5,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vignette Effect in Phaser 3\nDESCRIPTION: Applies a vignette effect with customizable position, radius, and strength parameters. Supports both pre-FX and post-FX implementations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addVignette(x, y, radius, strength);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addVignette(x, y, radius, strength);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addVignette(x, y, radius, strength);\n```\n\n----------------------------------------\n\nTITLE: Managing Text Stroke Properties in Phaser 3\nDESCRIPTION: Code for handling text stroke styling including getting/setting stroke color and thickness, and clearing stroke settings. These methods control the outline appearance of text characters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = txt.style.stroke;\nvar thickness = txt.style.strokeThickness;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setStroke(color, thickness);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setStroke();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Menu Class in Phaser 3\nDESCRIPTION: Defines a custom menu class that extends the Rex UI Menu component for more specialized functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyMenu extends RexPlugins.UI.Menu {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Current Page of Scores\nDESCRIPTION: JavaScript code to reload the current page of scores from the leaderboard, returning a Promise with an array of score objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.loadCurrentPage()\n    .then(function(scores) { })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer-over Button Events in Phaser3 Menu\nDESCRIPTION: Event handler for pointer-over (hover) events on buttons in a menu system. Provides access to the hovered button object, its index, and the pointer that triggered the event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.on('button.over', function(button, index, pointer, event) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Importing Button Class for Direct Use in Phaser 3\nDESCRIPTION: Demonstrates how to import the Button class for direct instantiation without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from 'phaser3-rex-plugins/plugins/button.js';\n```\n\n----------------------------------------\n\nTITLE: Creating Chain Constraints Between Matter.js Objects in Phaser 3\nDESCRIPTION: Method to create a chain of constraints between Matter.js game objects in a composite. Allows configuring offset positions and constraint properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-world.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar composite = scene.matter.add.chain(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    length: undefined,\n    stiffness: 1,\n    damping: 0,\n    angularStiffness: 0,\n    // render: {\n    //     visible: true\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Emit Zone from Particle Emitter in JavaScript\nDESCRIPTION: Removes a specific emit zone from the particle emitter. The zone parameter must be a reference to an existing zone object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.removeEmitZone(zone)\n```\n\n----------------------------------------\n\nTITLE: Extending NinePatch2 Class in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Creates a custom nine-patch class by extending the RexPlugins.UI.NinePatch2 class. This alternative implementation may offer different features or optimizations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNinePatch extends RexPlugins.UI.NinePatch2 {\n    constructor(scene, x, y, width, height, key, columns, rows, config) {\n        super(scene, x, y, width, height, key, columns, rows, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Interactive Children in Phaser3 Trees\nDESCRIPTION: Configuration for enabling interactive behaviors like click, tap, press, and swipe on tree children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntree.setChildrenInteractive({\n    // dropZone: false,\n\n    // click: {mode: 'release', clickInterval: 100},\n\n    // over: undefined,\n    \n    // press: {time: 251, threshold: 9},\n\n    // tap: {time: 250, tapInterval: 200, threshold: 9, tapOffset: 10, \n    //       taps: undefined, minTaps: undefined, maxTaps: undefined,},\n\n    // swipe: {threshold: 10, velocityThreshold: 1000, dir: '8dir'},\n\n    // inputEventPrefix: 'child.',\n})\n```\n\n----------------------------------------\n\nTITLE: Scale Plugin Usage Examples\nDESCRIPTION: Various examples of using the scale plugin for different animation effects including width-only and height-only scaling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/popup.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar scale = scene.plugins.get('rexScale').popup(gameObject, duration);\n// var scale = popUp(gameObject, duration, undefined, ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar scale = scene.plugins.get('rexScale').popup(gameObject, duration, 'x');\n// var scale = popUp(gameObject, duration, 'x', ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar scale = scene.plugins.get('rexScale').popup(gameObject, duration, 'y');\n// var scale = popUp(gameObject, duration, 'y', ease);\n```\n\n----------------------------------------\n\nTITLE: Creating Container Snapshot in Phaser 3\nDESCRIPTION: Demonstrates how to create a snapshot of all visible children in a container and draw them on a render texture. It includes options for specifying an existing render texture or creating a new one, and adding padding around the snapshot.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar renderTexture = container.snapshot({\n    renderTexture: undefined,\n    padding: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Importing NinePatch2 Plugin in Game Configuration\nDESCRIPTION: Imports and configures the NinePatch2 plugin in the game's configuration. This approach integrates the plugin at the game initialization level.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport NinePatch2Plugin from 'phaser3-rex-plugins/plugins/ninepatch2-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexNinePatch2Plugin',\n            plugin: NinePatch2Plugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Loading Progress Instance\nDESCRIPTION: Creates a loading progress instance with configuration options for duration, progress callback, and transition effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar loadingProgress = scene.plugins.get('rexLoadingProgress').add(gameObject, {\n    // duration: {\n    //     in: 200,\n    //     out: 200\n    // }\n\n    // progress: function(gameObject, progress) {},\n    // transitIn: function(gameObject, duration) {},\n    // transitOut: function(gameObject, duration) {},\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Path Following with Tween\nDESCRIPTION: Shows how to animate the path follower using Phaser's tween system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pathfollower.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar tween = scene.tweens.add({\n    targets: pathFollower,\n    t: 1,\n    ease: 'Linear', // 'Cubic', 'Elastic', 'Bounce', 'Back'\n    duration: 1000,\n    repeat: 0,\n    yoyo: false\n});\n```\n\n----------------------------------------\n\nTITLE: Creating LineProgressCanvas in Phaser3 Rex UI\nDESCRIPTION: Shows how to add a horizontal line progress bar filled with gradient color on canvas. This creates a linear progress indicator using canvas drawing methods with gradient color support.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineProgress = scene.rexUI.add.lineProgressCanvas(x, y, width, height, barColor, value, config);\n```\n\n----------------------------------------\n\nTITLE: Uploading Image to Firebase Storage from Phaser 3 Texture\nDESCRIPTION: Process of uploading an image from a Phaser 3 texture to Firebase Storage. Involves getting the image from texture, copying to canvas, converting to blob, and uploading.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-storage.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.textures.get(key).getSourceImage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = CanvasPool.create(scene, image.width, image.height);\nvar ctx = canvas.getContext('2d');\nctx.drawImage(image, 0, 0, image.width, image.height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar uploadTask;\ncanvasToBlob(canvas)\n    .then(function(blob) {\n        var metadata = {\n            contentType: 'image/jpeg',\n        };        \n        var fileRef = storageRef.child('path/to/filename');\n        uploadTask = fileRef.put(blob, metadata);\n        return uploadTask;\n    })\n    .then(function (snapshot) {})\n    .catch(function (error) {});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nCanvasPool.remove(canvas);\n```\n\n----------------------------------------\n\nTITLE: Creating Cameras from JSON Configuration in Phaser 3\nDESCRIPTION: Shows how to create camera objects using JSON configuration in Phaser 3. This method allows for detailed camera setup including position, size, zoom, rotation, and other properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.cameras.fromJSON(config);\n// scene.cameras.fromJSON(configArray);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    name: '',\n    x: 0,\n    y: 0,\n    width: scene.sys.scale.width,\n    height: scene.sys.scale.height,\n    zoom: 1,\n    rotation: 0,\n    scrollX: 0,\n    scrollY: 0,\n    roundPixels: false,\n    visible: true,\n    backgroundColor: false,\n    bounds: null, // {x, y, width, height}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Table Instance with Configuration in Phaser 3\nDESCRIPTION: Demonstrates how to create a Grid Table instance with various configuration options in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = scene.add.rexGridTable(x, y, width, height, {\n    scrollMode: 0,        // 0|'v'|'vertical'|1|'h'|'horizontal'\n    cellsCount: 0,\n    columns: 1,\n    // rows: 1,\n    cellHeight: 30,\n    cellWidth: 30,\n    // fixedCellSize: false,\n\n    cellVisibleCallback: null,\n    // cellVisibleCallback: function (cell, cellContainer, table) {},\n    cellVisibleCallbackScope: undefined,\n    reuseCellContainer: false,\n\n    cellInvisibleCallback: null,\n    // cellInvisibleCallback: function(cell) {},\n    // cellInvisibleCallbackScope: undefined,\n    // clampTableOXY: true,\n    // startFromBottom: false,\n    \n    mask: {\n        padding: 0, // or {left, right, top, bottom}\n        // updateMode: 0,\n        // layer: undefined,\n    },\n    // enableLayer: false\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Camera Zoom in Phaser 3\nDESCRIPTION: Demonstrates how to set and get the zoom level of a camera in Phaser 3. The zoom value affects how close or far the camera appears from the game world.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setZoom(zoomValue);  // The minimum it can be is 0.001.\ncamera.zoom = zoomValue;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar zoomValue = camera.zoom;\n```\n\n----------------------------------------\n\nTITLE: Drawing Bounds in Container-Lite (JavaScript)\nDESCRIPTION: Method for drawing bounds of shown game objects on a graphics game object within a Container-Lite instance. This includes options for color, line width, padding, and which objects to include.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.drawBounds(graphics, {\n    // color: 0xffffff,\n    // lineWidth: 1,\n    // padding: 0,\n    // drawContainer: true,\n    // children: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Binary Data from Cache in Phaser 3\nDESCRIPTION: Demonstrates how to access previously loaded binary data from the Phaser cache using the binary cache and a key identifier.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.binary;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility of Group Members in Phaser 3\nDESCRIPTION: Sets the visibility of all group members, with optional index and direction parameters to control the application.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setVisible(value);\n// group.setVisible(value, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scene Plugin Instance in Phaser 3\nDESCRIPTION: Demonstrates how to get an instance of a scene plugin in a Phaser 3 scene using the scene key mapping.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pluginsystem.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pluginInst = scene[sceneKey];\n```\n\n----------------------------------------\n\nTITLE: Installing Expression Parser via NPM and Game Configuration\nDESCRIPTION: Shows how to install the plugin from NPM and configure it in the Phaser game configuration for global access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport ExpressionParserPlugin from 'phaser3-rex-plugins/plugins/expressionparser-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexExpressionParserPlugin',\n            plugin: ExpressionParserPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Color Integer to RGB Conversion\nDESCRIPTION: Convert a color integer to RGB object format with rgba components\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/color.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rgb = Phaser.Display.Color.IntegerToRGB(color);\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Progress Instance with Parameters\nDESCRIPTION: Code showing how to create a circular progress instance with explicit parameters including appearance settings and value callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar circularProgress = scene.add.rexCircularProgress(x, y, radius, barColor, value, {    \n    trackColor: undefined,\n    centerColor: undefined,\n    thickness: 0.2,\n    startAngle: Phaser.Math.DegToRad(270),\n    anticlockwise: false,\n    // iterations: 128,\n\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n    valuechangeCallback: function(newValue, oldValue, circularProgress) {\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Grid Table Instance in Phaser 3\nDESCRIPTION: Shows how to create an instance of a custom Grid Table class in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = new MyGridTable(scene, x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Playing Animation on Sprite in Phaser 3\nDESCRIPTION: Plays an animation on the sprite. The 'key' parameter can be either a string key of the animation or an animation config object to override default settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.play(key);\n// sprite.play(key, ignoreIfPlaying);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Colors for IsoTriangle Faces in Phaser 3\nDESCRIPTION: Sets separate fill colors for the top, left, and right faces of an iso-triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isotriangle.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nisoTriangle.setFillStyle(fillTop, fillLeft, fillRight);\n```\n\n----------------------------------------\n\nTITLE: Acceleration Controls in Phaser 3 Physics\nDESCRIPTION: Methods for accelerating game objects towards positions or other objects with speed limits\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.accelerateTo(gameObject, x, y, acceleration, xSpeedMax, ySpeedMax);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.accelerateToObject(gameObject, destination, acceleration, xSpeedMax, ySpeedMax);\n```\n\n----------------------------------------\n\nTITLE: Setting Slide Factor for Physics Body in Phaser 3\nDESCRIPTION: Demonstrates how to set the slide factor, which controls how much velocity is preserved when the body is pushed by another body.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nbody.slideFactor.set(x, y);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pixelate Effect in Phaser 3\nDESCRIPTION: Applies a pixelation effect with adjustable amount parameter. Can be used as both pre-FX and post-FX for game objects and cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addPixelate(amount);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addPixelate(amount);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addPixelate(amount);\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrap Expand Text in Phaser3\nDESCRIPTION: Helper method to create a wrapped expandable text object that can be added to a sizer container. Supports optional proportion and expand properties for controlling text width.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-text-helper.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsizer\n    .add(\n        this.rexUI.wrapExpandText(this.add.text(0, 0, content)),\n        {\n            // proportion: 1,\n            // expand: true\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating IsoBox Object in Phaser 3\nDESCRIPTION: Demonstrates how to create an IsoBox game object in a Phaser 3 scene. The method takes parameters for position, dimensions, and fill colors for different faces of the box.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isobox.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar isoBox = scene.add.isobox(x, y, width, height, fillTop, fillLeft, fillRight);\n```\n\n----------------------------------------\n\nTITLE: Defining Attractor Callback Function Applying Force Directly in Phaser 3\nDESCRIPTION: This snippet shows an attractor callback function that directly applies forces to both bodyA and bodyB. It uses the applyForce method on the gameObject associated with each body.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-attractor.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(bodyA, bodyB) {\n    bodyA.gameObject.applyForce({x, y});\n    bodyB.gameObject.applyForce({x, y});\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning a Vector2 in Phaser 3\nDESCRIPTION: Creates a new Vector2 instance with the same x and y values as the original vector.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar newVector = vector.clone();\n```\n\n----------------------------------------\n\nTITLE: Pop-up Scale Animation with Promise\nDESCRIPTION: Promise-based implementation of pop-up scale animation with callback support.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsizer\n    //.setScale(scaleX, scaleY)\n    .popUpPromise(duration)\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Adding PerspectiveCard to Phaser 3 Scene\nDESCRIPTION: Shows how to add a PerspectiveCard object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-perspectivecard.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar card = scene.rexUI.add.perspectiveCard(config);\n```\n\n----------------------------------------\n\nTITLE: Updating Particle Emitter Configuration in JavaScript\nDESCRIPTION: Updates the configuration of the particle emitter. The config parameter should match the structure of the configuration object used when creating the emitter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.updateConfig(config)\n```\n\n----------------------------------------\n\nTITLE: Transitioning to Next State and Goto Specific State\nDESCRIPTION: Demonstrates how to transition to the next state using a callback and how to go to a specific state directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nstates.next();    // nextState = states.next_A()\n\nstates.goto(nextState);\n// states.state = nextState;\n```\n\n----------------------------------------\n\nTITLE: Managing Game Object Blend Mode in Phaser 3\nDESCRIPTION: Shows how to get and set the blend mode of a game object, which affects how it blends with objects beneath it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar blendMode = gameObject.blendMode;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.blendMode = blendMode;\ngameObject.setBlendMode(blendMode);\n```\n\n----------------------------------------\n\nTITLE: Generating Texture from Array Data in Phaser 3\nDESCRIPTION: Creates a new texture from array data. Useful for programmatically generating textures. The configuration allows customizing pixel dimensions and processing callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    data: data,\n    // 3x3:\n    // [ '...',\n    //   '...',\n    //   '...' ]\n    pixelWidth: 1,    // pixel width of each data\n    pixelHeight: 1,   // pixel height of each data\n    preRender: null,  // callback, function(canvas, ctx) {}\n    postRender: null, // callback, function(canvas, ctx) {}\n\n    canvas: null,  // create a canvas if null\n    resizeCanvas: true,\n    clearCanvas: true\n};\nvar texture = scene.textures.generate(key, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Both X and Y Scales of Group Members in Phaser 3\nDESCRIPTION: Sets both X and Y scales of all group members, with optional step parameters for variation in both directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.scaleXY(scaleX, scaleY);\n// group.scaleXY(scaleX, scaleY, stepX, stepY);\n```\n\n----------------------------------------\n\nTITLE: Drawing Bounds in Phaser3 Sizer\nDESCRIPTION: Methods for drawing bounds of game objects on a graphics object, with options for customizing colors and displaying child names.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.drawBounds(graphics);\n// sizer.drawBounds(graphics, color);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.drawBounds(graphics, {\n    // color: 0xffffff,\n    // lineWidth: 2,\n    // name: false, \n    // name: true, \n    // name: {\n    //     createTextCallback: function(scene) {\n    //         return scene.add.text(0, 0, '');\n    //     },\n    //     createTextCallbackScope: undefined,\n    //     align: 'left-top'\n    // }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Scenes in Phaser 3\nDESCRIPTION: Shows different methods to start scenes: launching a scene in parallel, switching to a new scene, or restarting the current scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.launch(key, data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.start(key, data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.restart(data);\n```\n\n----------------------------------------\n\nTITLE: Setting Detect Bounds in Phaser 3 Press Input\nDESCRIPTION: Sets the detection bounds for the press input, defining the area where press events can occur.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\npress.setDetectBounds(bounds);\n// press.bounds = bounds;\n```\n\n----------------------------------------\n\nTITLE: Setting Moveability of Physics Body in Phaser 3\nDESCRIPTION: Demonstrates how to control whether a physics body's position and rotation are affected by its velocity, acceleration, drag, and gravity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbody.moves = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.moves = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar moves = body.moves;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Text Class for Expanded Text in Phaser 3\nDESCRIPTION: Example of creating a custom text class that implements the resize method, used for expanding text within the label.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends Phaser.GameObjects.Text {\n    constructor(scene, x, y, text, style) {\n        super(scene, x, y, text, style);\n        scene.add.existing(this);\n    }\n    resize(width, height) {\n        this.setFixedSize(width, height);\n        return this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Sound Detune in Phaser 3\nDESCRIPTION: Methods to set and get the detune value of a sound instance, which adjusts pitch in cents with a range of -1200 to 1200.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.setDetune(detune); // detune: -1200 to 1200\n// music.detune = detune;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar detune = music.detune;\n```\n\n----------------------------------------\n\nTITLE: Creating Raycaster Instance Directly\nDESCRIPTION: Shows how to create a raycaster instance directly using the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar raycaster = new Raycaster(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Level-Up Events in JavaScript\nDESCRIPTION: Event handlers for different stages of the level-up process, including start, end, and completion. These events provide hooks for custom behavior during level-up animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-expbar.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexpBar.on('levelup.start', function(level, fromExp, toExp){        \n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpBar.on('levelup.end', function(level, fromExp, toExp){        \n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpBar.on('levelup.complete', function(level){        \n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Managing Sound Playback Rate in Phaser 3\nDESCRIPTION: Methods to set and get the playback rate of a sound instance, where 1.0 is normal speed, 0.5 is half speed, and 2.0 is double speed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.setRate(rate); // rate: 1.0(normal speed), 0.5(half speed), 2.0(double speed)\n// music.rate = rate;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar rate = music.rate;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Obtained Achievement States\nDESCRIPTION: Various methods to retrieve the current state of achievements, including which ones were just obtained.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/achievements.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar state = achievements.getObtainedState(levelName, achievementName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar state = achievements.getObtainedState(levelName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar state = achievements.getObtainedState();\n// var state = achievements.getObtainedStates();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nachievements.forEachObtainedState(levelName, function(levelName, achievementName, state) {\n\n}, scope)\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: JavaScript code to initialize the Firebase application with configuration parameters including API keys and database URLs.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Particle Bounds Collision Edges in JavaScript\nDESCRIPTION: Enables or disables particle collision with specific edges of the bounds rectangle. This allows fine-grained control over which sides constrain particle movement.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nbounds.collideLeft = enabled;\nbounds.collideRight = enabled;\nbounds.collideTop = enabled;\nbounds.collideBottom = enabled;\n```\n\n----------------------------------------\n\nTITLE: Updating User Email\nDESCRIPTION: Updates the email address for the currently authenticated user. This method changes the email associated with the user's account in Firebase Authentication.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nuser.updateEmail('...').then(function() {\n    // Update successful.\n}).catch(function(error) {\n    // An error happened.\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Graphics Context in Phaser 3\nDESCRIPTION: Clears all drawn graphics from the current context, resetting the graphics object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.clear();\n```\n\n----------------------------------------\n\nTITLE: Installing Board Plugin via NPM in Phaser 3\nDESCRIPTION: Shows how to install and import the board plugin using npm, and configure it in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar moveTo = scene.rexBoard.add.moveTo(chess, config);\n```\n\n----------------------------------------\n\nTITLE: Calculating Dot Product in Phaser 3\nDESCRIPTION: Calculates the dot product between the current Vector2 and another vector or vector-like object, which indicates how parallel they are.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = vector.dot(src); // src: {x, y}\n```\n\n----------------------------------------\n\nTITLE: Getting Volume in Youtube Player for Phaser 3\nDESCRIPTION: Method to retrieve the current volume level of the Youtube player as a value between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar volume = player.volume;  // volume: 0~1\n```\n\n----------------------------------------\n\nTITLE: Creating Rhombus Shape with Object Parameters in Phaser 3\nDESCRIPTION: Creates a Rhombus shape using an object to specify parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rhombus.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar rhombus = scene.plugins.get('rexRhombus').add({\n    x: 0,\n    y: 0,\n    width: 40,\n    height: 20\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Private Data in Quest Task (JavaScript)\nDESCRIPTION: Demonstrates various operations for managing private data in a Quest Task, including getting, setting, incrementing, multiplying, and clearing data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = quest.getData(key, defaultValue);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = quest.getData();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nquest.setData(key, value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nquest.incData(key, inc, defaultValue);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nquest.mulData(key, inc, defaultValue);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nquest.clearData();\n```\n\n----------------------------------------\n\nTITLE: Creating Drop-down List Object Using Imported Class in Phaser 3\nDESCRIPTION: This snippet demonstrates how to create a drop-down list object using the imported DropDownList class and add it to a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropDownList = new DropDownList(scene, config);\nscene.add.existing(dropDownList);\n```\n\n----------------------------------------\n\nTITLE: Drawing Game Objects to RenderTexture in Phaser 3\nDESCRIPTION: Draws various game objects, groups, containers, or texture frames onto the render texture at specified coordinates with optional alpha and tint values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrt.draw(entries);\n// rt.draw(entries,x, y);\n// rt.draw(entries, x, y, alpha, tint);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Grid Table Class in Phaser 3\nDESCRIPTION: Demonstrates how to create a custom Grid Table class extending the base GridTable in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyGridTable extends GridTable {\n    constructor(scene, x, y, width, height, config) {\n        super(scene, x, y, width, height, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Circle Class in Phaser 3\nDESCRIPTION: Defines a custom class that extends Phaser's Arc game object to create a circle with additional functionality. The constructor sets up the circle with a 360-degree arc and adds it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCircle extends Phaser.GameObjects.Arc {\n    constructor(scene, x, y, radius, fillColor, fillAlpha) {\n        super(scene, x, y, radius, 0, 360, false, fillColor, fillAlpha);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing World Coordinates in Phaser 3 Camera\nDESCRIPTION: Demonstrates how to access and manipulate world coordinates relative to the camera in Phaser 3, including getting the world view, middle point, and converting camera coordinates to world coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar worldView = camera.worldView;\nvar x = worldView.x;\nvar y = worldView.y;\nvar width = worldView.width;  // displayWidth\nvar height = worldView.height; // displayHeight\nvar left = worldView.left;  // x\nvar right = worldView.right;  // x + width\nvar top = worldView.top;  // y\nvar bottom = worldView.bottom;  // y + height\nvar centerX = worldView.centerX;\nvar centerY = worldView.centerY;\nvar isInside = worldView.contains(x, y);\nvar randPoint = worldView.getRandomPoint(point); // point: {x, y}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = camera.midPoint.x;\nvar y = camera.midPoint.y;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = camera.getWorldPoint(x, y);\n// var out = camera.getWorldPoint(x, y, out);\n```\n\n----------------------------------------\n\nTITLE: Applying Pixelation Effect with Imported Plugin\nDESCRIPTION: Code for applying the pixelation effect to game objects or cameras using the imported plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-pixelation.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexPixelationPipeline').add(gameObject, config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexPixelationPipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Container in Phaser 3\nDESCRIPTION: Demonstrates how to create a basic Container object in a Phaser 3 scene. Containers can be initialized with or without children game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/container.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar container = scene.add.container(x, y);\n// var container = scene.add.container(x, y, children); // children: an array of game object\n```\n\n----------------------------------------\n\nTITLE: Handling Modal Close Event\nDESCRIPTION: Code to listen for the modal close event on a game object, which fires when the modal has completed its closing transition.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('modal.close', function(closeEventData, modalBehavior) {\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Texture and Slices for Nine Slice in Phaser 3\nDESCRIPTION: Updates the texture and slice dimensions of an existing Nine Slice object. This allows for changing both the visual appearance and the stretching behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/nineslice.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnineSlice.setTexture(texture, frame);\nnineSlice.setSlices(width, height, leftWidth, rightWidth, topHeight, bottomHeight);\n```\n\n----------------------------------------\n\nTITLE: Adding Page to Pages Container (Detailed Configuration)\nDESCRIPTION: Adding a page with a detailed configuration object specifying key, alignment, padding, and expansion options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\npages.addPage(child, \n    {\n        key: 0,\n        align: Phaser.Display.Align.TOP_LEFT,\n        padding: {left: 0, right: 0, top: 0, bottom: 0}, \n        expand: true\n    }\n);\n// pages.add(child, config);\n```\n\n----------------------------------------\n\nTITLE: Adding a Document to Firestore Collection\nDESCRIPTION: Adds a new document to a Firestore collection with an auto-generated ID. Maximum document size is 1 MiB.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).add(doc)      // doc: { ... }\n    .then(function(doc) { /* ... */ })\n    .catch(function(error) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Creating TextPage Instance with Configuration in Phaser 3\nDESCRIPTION: Code to create a TextPage instance with configuration options including text content, maximum lines per page, and page break symbol.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textpage.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar page = scene.plugins.get('rexTextPage').add(textGameObject, {\n    // text: '',              // content in string or array\n    // maxLines: undefined,\n    // pageBreak: '\\f\\n',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Ease Move in Phaser 3 Sizer Plugin\nDESCRIPTION: Methods for moving a sizer object from one position to another with easing effects. Includes options for move-from, move-to, and their destroy variants, as well as related events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.moveFrom(duration, x, y);\n// sizer.moveFrom(duration, x, y, ease);\n// sizer.moveFrom({x, y, duration, ease});\n// sizer.moveFrom({x, y, speed, ease});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer\n    .moveFromPromise(duration, x, y, ease)\n    // .moveFromPromise({x, y, duration, ease})\n    // .moveFromPromise({x, y, speed, ease})\n    .then(function(){\n        // ...\n    })    \n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.moveFromDestroy(duration, x, y);\n// sizer.moveFrom(duration, x, y, ease);\n// sizer.moveFrom({x, y, duration, ease});\n// sizer.moveFrom({x, y, speed, ease});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer\n    .moveFromDestroyPromise(duration, x, y, ease)\n    // .moveFromDestroyPromise({x, y, duration, ease})\n    // .moveFromDestroyPromise({x, y, speed, ease})\n    .then(function(){\n        // ...\n    })    \n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.moveTo(duration, x, y);\n// sizer.moveTo(duration, x, y, ease);\n// sizer.moveTo({x, y, duration, ease});\n// sizer.moveTo({x, y, speed, ease});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer\n    .moveToPromise(duration, x, y, ease)\n    // .moveToPromise({x, y, duration, ease})\n    // .moveToPromise({x, y, speed, ease})\n    .then(function(){\n        // ...\n    })    \n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.moveToDestroy(duration, x, y);\n// sizer.moveTo(duration, x, y, ease);\n// sizer.moveTo({x, y, duration, ease});\n// sizer.moveTo({x, y, speed, ease});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer\n    .moveToDestroyPromise(duration, x, y, ease)\n    // .moveToDestroyPromise({x, y, duration, ease})\n    // .moveToDestroyPromise({x, y, speed, ease})\n    .then(function(){\n        // ...\n    })    \n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.moveStop();\n// sizer.moveStop(true);  // Set to end position\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.on('movefrom.complete', function(sizer) { });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.on('moveto.complete', function(sizer) { });\n```\n\n----------------------------------------\n\nTITLE: Loading Plugins in Phaser 3\nDESCRIPTION: Shows how to load Phaser plugins from a URL or class instance, with an option to start the plugin immediately after loading.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin(key, url, true); // start plugin when loaded\n// scene.load.plugin(key, url, true, undefined, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Getting the Number of Game Objects in a Group in Phaser 3\nDESCRIPTION: Returns the total number of game objects that are members of the group.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar len = group.getLength();\n```\n\n----------------------------------------\n\nTITLE: General Property Getters and Setters in Phaser3\nDESCRIPTION: Basic property getters and setters for visibility, alpha, position, angle, scale, and world position of text objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar visible = child.visible;\nchild.setVisible();\nchild.setVisible(false);\n\nvar alpha = child.alpha;\nchild.setAlpha(alpha);\n\nvar x = child.x;\nvar y = child.y;\nchild.setPosition(x, y);\n\nvar degrees = child.angle;\nchild.setAngle(degrees);\nchild.setRotation(radians);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Scrollable Panel Class in Phaser 3\nDESCRIPTION: This code snippet shows how to create a custom class that extends the RexPlugins.UI.ScrollablePanel class, allowing for customization of the scrollable panel behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPanel extends RexPlugins.UI.ScrollablePanel {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Vertices Shape Configuration for Matter.js Physics\nDESCRIPTION: Configuration object for creating a physics body from custom vertices. Supports various options for vertex processing and optimization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'fromVertices',\n    verts: points,\n    // flagInternal: false,\n    // removeCollinear: 0.01,\n    // minimumArea: 10,\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Point Light Position\nDESCRIPTION: Shows how to retrieve the current position of a point light using its x and y properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = pointLight.x;\nvar y = pointLight.y;\n```\n\n----------------------------------------\n\nTITLE: Grid Cutting Current Image in Phaser 3 Transition\nDESCRIPTION: Divides the current texture into a grid of cell images that can be individually manipulated during transition. Returns an array of the cell image game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar cellImageGameObjects = image.gridCutCurrentImage(columns, rows);\n```\n\n----------------------------------------\n\nTITLE: Configuring Horrifi Pipeline with All Effects\nDESCRIPTION: Creates and configures a Horrifi pipeline instance with all available effect options. Each effect can be individually enabled and configured with specific parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexHorrifiPipeline').add(gameObject, {\n    enable: false,\n\n    // Bloom\n    bloomEnable: false,\n    bloomRadius: 0, bloomIntensity: 0, bloomThreshold: 0,\n    bloomTexelWidth: 0, bloomTexelHeight: 0,\n\n    // Chromatic abberation\n    chromaticEnable: false,\n    chabIntensity: 0,\n\n    // Vignette\n    vignetteEnable: false,\n    vignetteStrength: 0, vignetteIntensity: 0,\n\n    // Noise\n    noiseEnable: false,\n    noiseStrength: 0,\n    noiseSeed: 0,\n\n    // VHS\n    vhsEnable: false,\n    vhsStrength: 0,\n\n    // Scanlines\n    scanlinesEnable: false,\n    scanStrength: 0,\n\n    // CRT\n    crtEnable: false,\n    crtWidth: 0, crtHeight: 0,\n\n    // name: 'rexHorrifiPostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming Camera in Phaser 3\nDESCRIPTION: Demonstrates how to pause and resume a camera's rendering to texture in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.renderToTexture = false; // Pause\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.renderToTexture = true; // Resume\n```\n\n----------------------------------------\n\nTITLE: Controlling Clock State in Phaser 3\nDESCRIPTION: Demonstrates pausing, resuming, and stopping the clock.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclock.pause();\nclock.resume();\nclock.stop();\n```\n\n----------------------------------------\n\nTITLE: Creating a Swipe Behavior for Game Object\nDESCRIPTION: Shows how to add swipe behavior directly to a game object with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar swipe = scene.rexGestures.add.swipe(gameObject, {\n    // enable: true,\n\n    // threshold: 10,\n    // velocityThreshold: 1000,\n    // direction: '8dir',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Carousel from JSON in Phaser 3\nDESCRIPTION: Alternative method to create a perspective carousel using the scene.make factory function with a JSON configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar carousel = scene.make.rexPerspectiveCarousel({\n    x: 0,\n    y: 0,\n\n    faces: [],\n\n    // width,\n    // height,\n\n    // faceWidth,\n    // faceSpace: 0,\n\n    // z: 1,\n    // zEnd: 0,\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Post-Layout Events for Sizer in Phaser 3\nDESCRIPTION: Shows how to listen for the 'postlayout' event on the sizer itself, which fires after all children have been laid out. This event provides access to all children and their previous states, allowing for bulk processing or analysis of layout changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.on('postlayout', function(children, sizer) {\n    for(var i=0, cnt=children.length; i<cnt; i++) {\n        var prevState = sizer.getChildPrevState(children[i]);\n        // ...\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Tween Value Counter\nDESCRIPTION: Creation and management of value-based tweens for numerical transitions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tween.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar tween = scene.tweens.addCounter({\n    from: 0,\n    to: 1,\n    ease: 'Linear',\n    duration: 1000,\n    repeat: 0,\n    yoyo: false,\n    onUpdate(tween, targets, key, current, previous, param) {\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using CSV to Array Converter\nDESCRIPTION: Shows how to use the plugin to convert CSV strings to arrays with optional configuration for delimiter and type conversion\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvtoarray.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = scene.plugins.get('rexCSVToArray').convert(csvString, {\n    // delimiter: ',',\n    // convert: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Velocity of Physics Body in Phaser 3\nDESCRIPTION: Shows how to set and get the velocity of a physics body, including methods for setting maximum speed and velocity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setVelocity(x,y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setVelocityX(x);\nbody.setVelocityY(x);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar vx = body.velocity.x;\nvar vy = body.velocity.y;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setMaxSpeed(speed);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar speed = body.maxSpeed;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setMaxVelocity(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setMaxVelocityX(x);\nbody.setMaxVelocityY(y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar vx = body.maxVelocity.x;\nvar vy = body.maxVelocity.y;\n```\n\n----------------------------------------\n\nTITLE: Adding text edit behavior using plugin method\nDESCRIPTION: Adding text edit behavior to a text game object, which will open editor on 'pointerdown' event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = scene.plugins.get('rextexteditplugin').add(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Text Plugin in Game Config\nDESCRIPTION: Shows how to configure the plugin in the game configuration when importing as a module\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport DynamicTextPlugin from 'phaser3-rex-plugins/plugins/dynamictext-plugin.js';\nvar config = {\n    plugins: {\n        global: [{\n            key: 'rexDynamicTextPlugin',\n            plugin: DynamicTextPlugin,\n            start: true\n        }]\n    }\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating World Position Constraints in Matter.js for Phaser 3\nDESCRIPTION: Method to constrain a Matter.js game object to a specific world position. Useful for anchoring objects to fixed points in the game world.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-world.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar constraint = scene.matter.add.worldConstraint(gameObjectB, length, stiffness, options);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    pointA: {\n        x: 0,\n        y: 0,\n    },\n    pointB: {\n        x: 0,\n        y: 0,\n    },\n    damping: 0,\n    angularStiffness: 0,\n    // render: {\n    //     visible: true\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Detect Bounds for Pan in Phaser 3\nDESCRIPTION: Sets the detection bounds for the pan gesture detector to limit the area where panning is detected.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\npan.setDetectBounds(bounds);\n// pan.bounds = bounds;\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Date Instances\nDESCRIPTION: Different ways to create a new Date object instance using various input parameters including empty constructor, timestamp, date string, or individual date/time components.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/date.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar d = new Date();\nvar d = new Date(timestamp);\nvar d = new Date(dateString);\nvar d = new Date(year, month, day, hours, minutes, seconds, milliseconds);\n```\n\n----------------------------------------\n\nTITLE: Updating Bounds in Phaser 3 Scale Manager\nDESCRIPTION: Demonstrates how to manually update the bounds of the scale manager. This is necessary if the canvas position or visibility changes through external means.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scalemanager.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scale.updateBounds();\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Events in Phaser 3 Sizer\nDESCRIPTION: Demonstrates how to broadcast an event to the sizer itself and all its children. This method allows for efficient communication across the entire sizer hierarchy.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.broadcastEvent(eventName, parameter0, parameter1, ...);\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Buttons in Tabs Component\nDESCRIPTION: Methods for enabling, disabling, toggling, and checking button input status within tab groups. These methods allow controlling which buttons can receive input in left, right, top, or bottom groups.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.setButtonEnable(groupName, index);\n// tabs.setButtonEnable(groupName, index, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.setLeftButtonEnable(index);\ntabs.setRightButtonEnable(index);\ntabs.setTopButtonEnable(index);\ntabs.setBottomButtonEnable(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.setButtonEnable(groupName, index, false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.setLeftButtonEnable(index, false);\ntabs.setRightButtonEnable(index, false);\ntabs.setTopButtonEnable(index, false);\ntabs.setBottomButtonEnable(index, false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.toggleButtonEnable(groupName, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.toggleLeftButtonEnable(index);\ntabs.toggleRightButtonEnable(index);\ntabs.toggleTopButtonEnable(index);\ntabs.toggleBottomButtonEnable(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar enabled = tabs.getButtonEnable(groupName, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar enabled = tabs.getLeftButtonEnable(index);\nvar enabled = tabs.getRightButtonEnable(index);\nvar enabled = tabs.getTopButtonEnable(index);\nvar enabled = tabs.getBottomButtonEnable(index);\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshots in Container-Lite (JavaScript)\nDESCRIPTION: Methods for creating snapshots of visible children in a Container-Lite instance. This includes drawing on a render-texture or saving to a dynamic-texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar renderTexture = container.snapshot({\n    renderTexture: undefined,\n    padding: 0\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.snapshot({\n    padding: 0,\n    saveTexture: textureKey\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Button Behavior using Configured Plugin in Phaser 3\nDESCRIPTION: Shows how to add button behavior to a game object using the globally configured Button plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = scene.plugins.get('rexButtonn').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Opening text editor with configuration options\nDESCRIPTION: Detailed example of opening a text editor with various configuration options including callbacks and styling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = scene.plugins.get('rexTextEdit').edit(textObject, {\n    // inputType: 'text',   // 'text'|'password'|'textarea'|...\n    // type: 'text',    // 'text'|'password'|'textarea'|...\n\n    // enterClose: true,\n    // selectAll: false,\n\n    // onCreate: undefined,\n    // onOpen: undefined,\n    // onTextChanged: undefined,\n    // onClose: undefined,\n\n    // text: '',\n\n    // other_style: '...'\n});\n// var editor = scene.plugins.get('rexTextEdit').edit(textObject, config, onClose);\n```\n\n----------------------------------------\n\nTITLE: Updating Camera Controls in Phaser 3 Game Loop\nDESCRIPTION: This snippet demonstrates how to update the camera controls within the game's update loop. It passes the delta time to the controls' update method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-controller.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.update = function (time, delta) {\n    controls.update(delta);\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Remove Texture Event in Phaser 3\nDESCRIPTION: Sets up an event listener for when a texture is removed from the texture cache. The event handler receives the key of the removed texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.on('removetexture', function(key) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Padding in Phaser 3 Text\nDESCRIPTION: Shows how to get and set padding values (left, top, right, bottom) for a Phaser 3 Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar left = txt.padding.left;\nvar top = txt.padding.top;\nvar right = txt.padding.right;\nvar bottom = txt.padding.bottom;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setPadding(left, top, right, bottom);\n// txt.setPadding(padding); // padding: {left, top, right, bottom}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slider Instance\nDESCRIPTION: Complete configuration example showing all available options for creating a slider instance\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-slider.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar slider = scene.rexUI.add.slider({\n    orientation: 0,\n    reverseAxis: false,\n    background: backgroundGameObject,\n    track: trackGameObject,\n    indicator: indicatorGameObject,\n    thumb: thumbGameObject,\n    thumbOffsetX: 0,\n    thumbOffsetY: 0,\n    input: 'drag',\n    value: 0,\n    tick: undefined,\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },    \n    valuechangeCallback: function(newValue, oldValue, slider) {\n    },\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n    },\n    enable: true\n});\n```\n\n----------------------------------------\n\nTITLE: Button Visibility Control in Phaser3\nDESCRIPTION: Methods for showing and hiding buttons, affecting layout calculations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.showButton(index);\nbuttons.hideButton(index);\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Start and End Events\nDESCRIPTION: Shows how to handle various drag start and end events for both single and dual touch pointers.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrotate.on('drag1start', function(rotate) {\n\n}, scope);\n\nrotate.on('drag1end', function(rotate) {\n\n}, scope);\n\nrotate.on('rotatestart', function(rotate) {\n\n}, scope);\n\nrotate.on('rotateend', function(rotate) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Loading Rex Board Plugin Minified File in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the minified version of the Rex Board Plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\n----------------------------------------\n\nTITLE: Setting Angular Drag in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the angular drag of a physics body, which reduces its angular velocity over time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setAngularDrag(v);\n```\n\n----------------------------------------\n\nTITLE: Complete Toast Configuration\nDESCRIPTION: Full configuration object showing all available options for creating a toast instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-toast.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar toast = scene.rexUI.add.toast({\n    x: 0,\n    y: 0,\n    orientation: 0,\n    background: backgroundGameObject,\n    icon: iconGameObject,\n    iconMask: false,\n    text: textGameObject,\n    action: actionGameObject,\n    actionMask: false,\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        icon: 0,\n        text: 0,\n    },\n    duration: {\n        in: 200,\n        hold: 1200,\n        out: 200,\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Children from Sizer in Phaser 3\nDESCRIPTION: Demonstrates various methods to remove children from a sizer, including removing single children, all children, or clearing the sizer completely.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.remove(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.remove(child, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.removeAll();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.removeAll(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.clear();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.clear(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.removeFromParentSizer();\n```\n\n----------------------------------------\n\nTITLE: Extending QuadShape Class in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Creates a custom quad shape class by extending the RexPlugins.UI.QuadShape class. This allows for customization of quad shape behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyQuadShape extends RexPlugins.UI.QuadShape {\n    constructor(scene, x, y, width, height, fillColor, fillAlpha) {\n        super(scene, x, y, width, height, fillColor, fillAlpha);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Individual Particles in Phaser 3\nDESCRIPTION: Emits particles at a specific position with control over the quantity. Provides two alternative function signatures for emitting particles at coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.emitParticleAt();\n// emitter.emitParticleAt(x, y, count);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.emitParticle(count, x, y);\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts in Phaser 3\nDESCRIPTION: Demonstrates how to load JavaScript scripts into a Phaser scene. The load.script method takes a key identifier and URL, with optional type and XHR settings parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.script(key, url);\n// scene.load.script(key, url, type, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Creating Circle Mask Image Instance\nDESCRIPTION: Demonstrates different ways to create a circle mask image instance with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/circlemaskimage.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexCircleMaskImage(x, y, key, frame, {\n    maskType: 0,\n    // radius: undefined,\n    // backgroundColor: undefined,\n    // strokeColor: undefined,\n    // strokeWidth: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Sampler2D Uniforms in Phaser 3 Shaders\nDESCRIPTION: Alternative method to set sampler2D uniforms with more control. Allows specifying the uniform key, texture key, and texture index explicitly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nshader.setSampler2D(uniformKey, textureKey, textureIndex);\n// shader.setSampler2D(uniformKey, textureKey, textureIndex, textureData);\n```\n\n----------------------------------------\n\nTITLE: Accessing HTML Data from Cache in Phaser 3\nDESCRIPTION: Method to retrieve loaded HTML content from the HTML cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.html;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Checking Loader Ready Status in Phaser 3\nDESCRIPTION: Method to check if the loader is ready to start loading assets.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar isReady = scene.load.isReady();\n```\n\n----------------------------------------\n\nTITLE: Saving Container Snapshot to Texture Manager in Phaser 3\nDESCRIPTION: Shows how to create a snapshot of all visible children in a container and save the result to the texture manager with a specified key. This method allows for reuse of the generated texture in other parts of the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.snapshot({\n    padding: 0,\n    saveTexture: textureKey\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Points Around Ellipse Edge by Quantity in Phaser 3\nDESCRIPTION: Creates an array of points evenly distributed around the edge of an ellipse based on quantity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = ellipse.getPoints(quantity);\n// var points = ellipse.getPoints(quantity, null, points);  // push points\n```\n\n----------------------------------------\n\nTITLE: Configuring Round Rectangle Plugin in Game Configuration\nDESCRIPTION: Imports and configures the Round Rectangle plugin in the global plugins section of a Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RoundRectanglePlugin from 'phaser3-rex-plugins/plugins/roundrectangle-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRoundRectanglePlugin',\n            plugin: RoundRectanglePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Initializing BBCode Text with Wrap Settings\nDESCRIPTION: Creates a BBCode text object with configurable wrap settings. Supports word, character, and mixed wrapping modes with customizable width.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.make.rexBBCodeText({\n    x: 400,\n    y: 100,\n    text: 'The sky above the port was the color of television, tuned to a dead channel.',\n    origin: { x: 0.5, y: 0.5 },\n    style: {\n        font: 'bold 25px Arial',\n        fill: 'white',\n        wrap: {\n            mode: 'none',    // 0|'none'|1|'word'|2|'char'|'character'|3|'mix'\n            width: 0\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading the Dissolve Pipeline Plugin as a Minified File in Phaser 3\nDESCRIPTION: Loads the dissolve pipeline plugin as a minified file in the preload stage of a Phaser 3 scene. This method is suitable for directly loading the plugin from a CDN or file path without using npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexdissolvepipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexdissolvepipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Tree Layout and State Management\nDESCRIPTION: Methods for managing tree layout, expansion states, and node manipulation including expanding, collapsing, and toggling nodes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.layout();\n\ntree.expand();\n// tree.expand(duration);\n\ntree.collapse();\n// tree.collapse(duration);\n\ntree.toggle();\n// tree.toggle(duration);\n\ntree.setExpandedState(expanded);\n\nvar expanded = tree.expanded;\n```\n\n----------------------------------------\n\nTITLE: Extending RoundRectangleProgress Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom RoundRectangleProgress class by extending the base component. This allows for adding custom functionality to round rectangle progress bars.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyRoundRectangleProgress extends RexPlugins.UI.RoundRectangleProgress {\n    constructor(scene, x, y, width, height, radius, barColor, value, config) {\n        super(scene, x, y, width, height, radius, barColor, value, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Gravity Values in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current object-specific gravity values of a physics body in both X and Y directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar gx = gameObject.body.gravity.x;\nvar gy = gameObject.body.gravity.y;\n```\n\n----------------------------------------\n\nTITLE: Opening and Closing Hidden Input Text Editor in Phaser 3\nDESCRIPTION: Demonstrates how to open and close the hidden input text editor and check its open state in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/hiddeninputtext.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nhiddenInputText.open();\nhiddenInputText.close();\nvar isOpened = hiddenInputText.isOpened;\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Channels in Phaser 3 Shaders\nDESCRIPTION: Assigns textures from the texture manager to the iChannel sampler2D uniforms. These methods provide a convenient way to set textures for shaders.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nshader.setChannel0(textureKey);\nshader.setChannel1(textureKey);\nshader.setChannel2(textureKey);\nshader.setChannel3(textureKey);\n// shader.setChannel0(textureKey, textureData);\n// shader.setChannel1(textureKey, textureData);\n// shader.setChannel2(textureKey, textureData);\n// shader.setChannel3(textureKey, textureData);\n```\n\n----------------------------------------\n\nTITLE: Setting Star Points in Phaser 3\nDESCRIPTION: Sets the number of points on a star shape in Phaser 3 using the setPoints method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nstar.setPoints(points);\n```\n\n----------------------------------------\n\nTITLE: Setting Cost Function for Pathfinder in Phaser 3\nDESCRIPTION: Demonstrates how to set a cost function for the Pathfinder, either as a constant or a callback function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-pathfinder.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar callback = function(curTileXY, preTileXY, pathFinder) {\n    return cost;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\npathFinder.setCostFunction(cost);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npathFinder.setCostFunction(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Clearing All Game Objects from a Group in Phaser 3\nDESCRIPTION: Removes all game objects from a group with optional parameters to remove them from the scene and/or destroy them.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.clear();\n// group.clear(removeFromScene, destroyChild);\n```\n\n----------------------------------------\n\nTITLE: Creating TextPlayer in Phaser3 Rex UI\nDESCRIPTION: Shows how to add a text player for typing effects, wait for input, and play sound effects. This component creates typewriter-style text animations with interactive features.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.rexUI.add.textPlayer(config);\n```\n\n----------------------------------------\n\nTITLE: Sorting Children by Property in Phaser3 Rex UI\nDESCRIPTION: Method to sort child elements based on their property values. Takes a property key parameter and a descending flag to determine sort order.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.sortChildrenByProperty(key, descending).layout();\n```\n\n----------------------------------------\n\nTITLE: Signing In with Email and Password\nDESCRIPTION: Authenticates a user with email and password credentials. This method validates the credentials against existing user accounts in Firebase Authentication.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.auth().signInWithEmailAndPassword(email, password).catch(function (error) {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message;\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom Image Class in Phaser 3\nDESCRIPTION: Creates an instance of a custom image class with specified position and texture key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/image.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new MyImage(scene, x, y, key);\n```\n\n----------------------------------------\n\nTITLE: Setting Color Value using Methods\nDESCRIPTION: Sets the color value using component methods. This updates the visual representation and positions of the markers on the H-palette and SV-palette accordingly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncolorComponents.setValue(value);\n// colorComponents.setColor(value);\n```\n\n----------------------------------------\n\nTITLE: Importing Swipe Class Directly\nDESCRIPTION: Shows how to import the Swipe class directly from the Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Swipe } from 'phaser3-rex-plugins/plugins/gestures.js';\n```\n\n----------------------------------------\n\nTITLE: Adding Space to Sizer in Phaser 3\nDESCRIPTION: Demonstrates how to add stretchable space to a sizer, either at the end or at a specific index, with optional proportion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.addSpace();\n// sizer.addSpace(proportion);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.insertSpace(index);\n// sizer.insertSpace(index, proportion);\n```\n\n----------------------------------------\n\nTITLE: Rotation and Flipping Animation\nDESCRIPTION: Examples of getting/setting rotation angles and creating flip animations\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-perspective.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.tweens.add({\n    targets: perspective,\n    angleY: { start: 0, to: -180}\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Camera for Controls in Phaser 3\nDESCRIPTION: This snippet shows how to set or change the camera that the controls are affecting. It allows for dynamic switching of controlled cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-controller.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncontrols.setCamera(camera);\n```\n\n----------------------------------------\n\nTITLE: Importing Warp Plugin via NPM\nDESCRIPTION: Code to import and configure the warp pipeline plugin when using npm package management.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Removing Data from Cache in Phaser 3\nDESCRIPTION: Shows how to remove data from a specific cache (text cache in this example) using a key identifier to release memory.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.text;\ncache.remove(key);\n```\n\n----------------------------------------\n\nTITLE: Removing Dissolve Effect from Camera in Phaser 3\nDESCRIPTION: Removes the dissolve effect from a camera using the plugin's remove method. This completely removes the post processing pipeline from the camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexDissolvePipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Accessing Shader Uniforms in Phaser 3\nDESCRIPTION: Retrieves a uniform object from a shader, which can be used to get or set uniform values. This example shows how to access a uniform and its texture key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar uniform = shader.getUniform(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textureKey = uniform.textureKey;\n```\n\n----------------------------------------\n\nTITLE: Creating Audio Sprite Instances in Phaser 3\nDESCRIPTION: Method to create a reusable sound instance from an audio sprite with predefined markers that can be played individually.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar music = scene.sound.addAudioSprite(key, config);\n```\n\n----------------------------------------\n\nTITLE: Downloading File from Firebase Storage in JavaScript\nDESCRIPTION: Get the download URL for a file stored in Firebase Storage. The actual download should be handled by a loader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-storage.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileRef = storageRef.child('path/to/filename');\nfileRef.getDownloadURL()\n    .then(function(url) {})\n    .catch(function (error) {});\n```\n\n----------------------------------------\n\nTITLE: Posting Score to LeaderBoard\nDESCRIPTION: JavaScript code to post a score to the leaderboard with optional extra data and timestamp, returning a Promise with the record or error.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.post(score)\n// leaderBoard.post(score, extraData)\n// leaderBoard.post(score, extraData, timestamp)\n    .then(function(record) { })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Registering Scene Render Event Listener in JavaScript\nDESCRIPTION: Illustrates how to register an event listener for the 'render' event in a Phaser 3 scene. This event occurs after all cameras have finished rendering the scene's game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.events.on('render', function(renderer){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Canvas Texture in Phaser 3\nDESCRIPTION: Methods to save Canvas content as a texture or load a texture onto the Canvas in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.generateTexture(key);\n// canvas.generateTexture(key, x, y, width, height);\n\ncanvas.loadTexture(key, frame);\n```\n\n----------------------------------------\n\nTITLE: Plugging Key Objects into Keys Hub\nDESCRIPTION: These snippets demonstrate how to plug key objects into the Keys Hub, including keyboard keys and virtual joystick inputs.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyshub.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHub.plugKeyObject({\n    keyCode0: keyObject0,\n    keyCode1: keyObject1,\n    // ...\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObjects = scene.input.keyboard.addKeys({\n    up: 'W',\n    down: 'S',\n    left: 'A',\n    right: 'D'\n});\nkeysHub.plugKeyObject(keyObjects);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObjects = scene.input.keyboard.createCursorKeys();\nkeysHub.plugKeyObject(keyObjects);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObjects = joystick.createCursorKeys();\nkeysHub.plugKeyObject(keyObjects);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHub.plugKeyObject(keyObject, keyCode);\n```\n\n----------------------------------------\n\nTITLE: Adding Pages to TabPages Component\nDESCRIPTION: Methods for adding new tab/page pairs to the TabPages component, either with explicit key or auto-generated UUID.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.addPage(key, tabGameObject, pageGameObject).layout();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.addPage({\n    // key: undefined,\n    tab: tabGameObject,\n    page: pageGameObject\n}).layout();\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow Effect in Phaser 3\nDESCRIPTION: Adds customizable shadow effects with parameters for position, decay, power, color, samples, and intensity. Available for both game objects and cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addShadow(x, y, decay, power, color, samples, intensity);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addShadow(x, y, decay, power, color, samples, intensity);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addShadow(x, y, decay, power, color, samples, intensity);\n```\n\n----------------------------------------\n\nTITLE: Adding Barrel Distortion Effect in Phaser 3\nDESCRIPTION: Code for implementing barrel distortion effect as pre-fx to game objects or post-fx to game objects/camera. Barrel distortion creates a pinch/bulge effect with configurable distortion amount.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// gameObject.preFX.setPadding(padding);\nvar effect = gameObject.preFX.addBarrel(amount);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addBarrel(amount);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addBarrel(amount);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setActive(false);\n// effect.active = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.preFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.amount = amount;\n```\n\n----------------------------------------\n\nTITLE: Implementing Scale-Down Destroy Animation for Both Dimensions in Phaser 3\nDESCRIPTION: Scales down a game object in both dimensions over a specified duration and then destroys it. Supports both callback and Promise-based approaches with custom ease functions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDownDestroy(duration);\n// gameObject.scaleDownDestroy(duration, undefined, ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDownDestroyPromise(duration)\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Checkbox Class in Phaser 3\nDESCRIPTION: Defines a custom checkbox class that extends the base Checkbox implementation, allowing for additional functionality and customization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCheckbox extends RexPlugins.GameObjects.Checkbox {\n    constructor(scene, x, y, width, height, color, config) {\n        super(scene, x, y, width, height, color, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Light Intensity in Phaser 3\nDESCRIPTION: Code for retrieving a light's current intensity value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar intensity = light.intensity;\n```\n\n----------------------------------------\n\nTITLE: Creating Rotate Behavior for a Game Object\nDESCRIPTION: Shows how to create a rotate input specifically for a game object, which starts rotation when pointer-down on the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotate = scene.rexGestures.add.rotate(gameObject, {\n    // enable: true,\n    // bounds: undefined,\n\n    // threshold: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Flash Behavior in Phaser 3\nDESCRIPTION: Shows how to stop the flash animation, enable/disable the flash behavior, and set duration and repeat count.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flash.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nflash.stop();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nflash.setEnable();\n// or\nflash.enable = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nflash.setEnable(false);\n// or\nflash.enable = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nflash.setDuration(duration);\n// flash.duration = duration;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nflash.setRepeat(repeat);\n// flash.repeat = repeat;\n```\n\n----------------------------------------\n\nTITLE: Importing FSM Class for Direct Usage\nDESCRIPTION: Demonstrates how to import the FSM class for direct usage without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport FSM from 'phaser3-rex-plugins/plugins/fsm.js';\n```\n\n----------------------------------------\n\nTITLE: Event Promise Implementation\nDESCRIPTION: Implements promise-based event handling for various game events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nvar promise = scene.rexUI.waitEvent(eventEmitter, eventName)\n    .then(function() {\n\n    })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar promise = scene.rexUI.waitComplete(eventEmitter)\n    .then(function() {\n        \n    })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar promise = scene.rexUI.delayPromise(time)\n    .then(function() {\n        \n    })\n```\n\n----------------------------------------\n\nTITLE: Handling SplitPanels Events in Phaser 3\nDESCRIPTION: Sets up event listeners for various SplitPanels interactions, including drag start, drag end, and pointer events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-splitpanels.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsplitPanels.on('splitter.dragstart', function(splitter, splitRatio){\n    //\n}, scope);\n\nsplitPanels.on('splitter.dragend', function(splitter, splitRatio){\n    //\n}, scope);\n\nsplitPanels.on('splitter.drag', function(splitter, splitRatio){\n    //\n}, scope);\n\nsplitPanels.on('splitter.over', function(splitter, splitRatio){\n    //\n}, scope);\n\nsplitPanels.on('splitter.out', function(splitter, splitRatio){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Vertices for Rope Object in Phaser 3\nDESCRIPTION: Updates the vertices of a rope object. Can specify points, colors, and alphas for each vertex pair. Points can be a number of segments or an array of vertex data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrope.setPoints(points);\n// rope.setPoints(points, colors, alphas);\n```\n\n----------------------------------------\n\nTITLE: Setting Point Light Attenuation\nDESCRIPTION: Shows how to set the attenuation of a point light, which controls how the light fades over distance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\npointLight.attenuation = attenuation;\n```\n\n----------------------------------------\n\nTITLE: Rotating Game Objects Around a Point in Phaser3\nDESCRIPTION: Rotates game objects around a specified point by a given angle in radians, creating orbital movement around a center point.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.RotateAround(gameObjects, point, angle);\n// point: {x, y}, angle: angle in radians\n```\n\n----------------------------------------\n\nTITLE: Handling Color Value Change Events in Phaser 3\nDESCRIPTION: Demonstrates how to set up an event listener for color value changes in a color input object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorinput.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncolorInput.on('valuechange', function(newValue, oldValue, colorInput){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Game Objects to a Group in Phaser 3\nDESCRIPTION: Adds an array of game objects to a group at once with an optional parameter to add them to the scene's display and update lists.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.addMultiple(gameObjects);   // array of game objects\n// group.addMultiple(gameObjects, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Friction Properties for Matter.js Physics Objects\nDESCRIPTION: Methods to configure various friction properties of physics objects, affecting how they interact with surfaces and air.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setFriction(value, air, fstatic);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setFrictionAir(v);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setFrictionStatic(v);\n```\n\n----------------------------------------\n\nTITLE: Creating Tag Player Instance with Full Configuration\nDESCRIPTION: Demonstrates creating a Tag Player instance with comprehensive configuration options including parser settings, sprite handling, text management, and sound controls.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar tagPlayer = scene.plugins.get('rexTagPlayerPlugin').add(scene, {\n    parser: {\n        delimiters: '[]',\n        comment: '//',\n        // translateTagNameCallback: undefined,\n    }\n\n    sprites: {\n        // createGameObject: 'sprite',\n        // fade: 500,  \n        // fade: {mode: 'tint', time: 500},\n        // viewportCoordinate: false,\n        // symbols: undefined,  // { key:value }\n    }, \n    // sprites: false,\n\n    texts: {\n        // createGameObject: undefined,        \n        // fade: 500,\n        // fade: {mode: 'tint', time: 500},\n        // viewportCoordinate: false,\n        // symbols: undefined,  // { key:value }\n    }\n    // texts: false,\n    \n    layers: undefined, // []\n\n    sounds: {\n        bgm: {\n            initial: undefinied,\n            loop: true,\n            fade: 500\n        },\n        bgm2: {\n            initial: undefinied,\n            loop: true,\n            fade: 500\n        }\n    },\n\n    clickTarget: scene,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Terminal command for installing the Rex plugins package from npm repository.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Modifying TabPages Layout and Padding\nDESCRIPTION: Methods for changing the tab position and padding settings of the TabPages component after it has been created.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.setTabPosition(position);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.setTabsPadding(key, value).layout();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.setTabsPadding({\n    left: leftPadding, \n    right: rightPadding,\n    top: topPadding,\n    bottom: bottomPadding\n}).layout();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = tabPages.getTabsPadding(key);\n```\n\n----------------------------------------\n\nTITLE: Applying Post FX Effect to a Camera\nDESCRIPTION: Method to apply a post FX pipeline to a camera, creating an instance and adding it to the pipeline list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(MyPostFxClass);\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Display for Game Objects in Phaser 3\nDESCRIPTION: Configures the debug display for a game object. It allows showing the body, velocity, and setting a custom body color for debugging purposes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setDebug(showBody, showVelocity, bodyColor);\n```\n\n----------------------------------------\n\nTITLE: Rendering Shader to Texture Manager in Phaser 3\nDESCRIPTION: Redirects shader output to a named texture in the texture manager. This allows other texture-based game objects to use the shader's output.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nshader.setRenderToTexture(textureKey);\n// var texture = shader.glTexture;\n```\n\n----------------------------------------\n\nTITLE: Adding Child to ContainerLite in Phaser 3\nDESCRIPTION: Shows various methods to add a child game object to a ContainerLite instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.add(child);  // child: a game object\n// container.pin(child);\n\ncontainer.pin(child, {\n    // syncPosition: true,\n    // syncRotation: true,\n    // syncScale : true,\n    // syncAlpha: true,\n    // syncScrollFactor: true,\n    // syncCameraFilter: true,\n    // syncDisplayList: true\n});\n```\n\n----------------------------------------\n\nTITLE: Detailed CircularProgress Instance Creation\nDESCRIPTION: Complete example of creating a circular progress instance with all available configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar circularProgress = scene.add.rexCircularProgressCanvas({\n    x: 0,\n    y: 0,\n    radius: 1,\n    barColor: undefined,\n    barColor2: undefined,\n    trackColor: undefined,\n    centerColor: undefined,\n    thickness: 0.2,\n    startAngle: Phaser.Math.DegToRad(270),\n    endAngle: Phaser.Math.DegToRad(270+360),\n    anticlockwise: false,\n    textColor: undefined,\n    textStrokeColor: undefined,\n    textStrokeThickness: undefined,\n    textSize: '16px',\n    textFamily: 'Courier',\n    textStyle: '',\n    textFormatCallback: undefined,\n    textFormatCallbackScope: undefined,\n    value: 0,\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n    valuechangeCallback: function(newValue, oldValue, circularProgress) {\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating TagText in Phaser3 Rex UI\nDESCRIPTION: Shows how to add text with multi-color, font face, or font size using tags. This component renders formatted text using custom tag syntax for styling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.rexUI.add.tagText(x, y, text, style);\n```\n\n----------------------------------------\n\nTITLE: Playing Video in Phaser 3\nDESCRIPTION: Starts video playback with options for looping and defining in/out markers for playing specific sections.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.play();\n// video.play(loop, markerIn, markerOut);\n```\n\n----------------------------------------\n\nTITLE: Creating ToggleSwitch in Phaser3 Rex UI\nDESCRIPTION: Shows how to add a toggle-switch input. This component provides an on/off toggle switch interface similar to mobile UI components.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nvar toggleSwitch = scene.rexUI.add.toggleSwitch(x, y, width, height, color, config);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Word Wrap with Callback in Phaser 3\nDESCRIPTION: Shows how to implement a custom word wrap function for text objects using a callback to handle word wrapping logic.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.make.text({\n    x: 400,\n    y: 300,\n    text: 'The sky above the port was the color of television, tuned to a dead channel.',\n    origin: 0.5,\n    style: {\n        font: 'bold 30px Arial',\n        fill: 'white',\n        wordWrap: { callback: wordWrap, scope: this }\n    },\n    // origin: {x: 0.5, y: 0.5},\n});\n\nfunction wordWrap (text, textObject)\n{\n    // First parameter will be the string that needs to be wrapped\n    // Second parameter will be the Text game object that is being wrapped currently\n\n    // This wrap just puts each word on a separate line, but you could inject your own\n    // language-specific logic here.\n    var words = text.split(' ');\n\n    // You can return either an array of individual lines or a string with line breaks (e.g. \\n) in\n    // the correct place.\n    return words;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vector2 Components\nDESCRIPTION: Retrieves the x and y components of a Vector2 through direct property access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = vector.x;\nvar y = vector.y;\n```\n\n----------------------------------------\n\nTITLE: Handling Orientation Change Events in Phaser 3\nDESCRIPTION: Listens for orientation change events and responds accordingly. The callback function receives the new orientation, which can be compared against Phaser.Scale constants to determine if the device is in portrait or landscape mode.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/orientation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scale.on('orientationchange', function(orientation) {\n    switch (orientation) {\n        case Phaser.Scale.PORTRAIT:\n        case Phaser.Scale.PORTRAIT_SECONDARY:\n            // ...\n            break;\n\n        default:  // Phaser.Scale.LANDSCAPE or Phaser.Scale.LANDSCAPE_SECONDARY\n            // ...\n            break;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Instance Directly in Phaser 3\nDESCRIPTION: Creates a new Dialog instance directly using the imported class and adds it to the scene display list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = new Dialog(scene, config);\nscene.add.existing(dialog);\n```\n\n----------------------------------------\n\nTITLE: Frame Drawing and Stamping\nDESCRIPTION: Advanced methods for drawing frames with detailed control over position, scale, rotation, and blend modes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamic-texture.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.stamp(key, frame, x, y, {\n    alpha: 1,\n    tint: 0xffffff,\n    angle: 0,\n    rotation: 0,\n    scale: 1,\n    scaleX: 1,\n    scaleY: 1,\n    originX: 0.5,\n    originY: 0.5,\n    blendMode: 0,\n    erase: false,\n    skipBatch: false\n})\n```\n\n----------------------------------------\n\nTITLE: Finding the first child with specific property value in Phaser 3 List\nDESCRIPTION: Method to find the first child that has a property matching a specific value, with optional start and end indices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar child = list.getFirst(property, value, startIndex, endIndex);\n// value: the value to test the property against. Must pass a strict (`===`) comparison check.\n```\n\n----------------------------------------\n\nTITLE: Adding a Light to the Scene in Phaser 3\nDESCRIPTION: Methods for adding a light to the scene with specified position, radius, color, and intensity. The basic version requires only position and radius, while the extended version allows for color and intensity customization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar light = scene.lights.addLight(x, y, radius);\n// var light = scene.lights.addLight(x, y, radius, color, intensity);\n```\n\n----------------------------------------\n\nTITLE: Extending Canvas Class in Phaser3 Rex UI\nDESCRIPTION: Shows how to create a custom Canvas class by extending the built-in Canvas component from Rex UI plugin. This allows for adding custom functionality while maintaining the base canvas features.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCanvas extends RexPlugins.UI.Canvas {\n    constructor(scene, x, y, width, height) {\n        super(scene, x, y, width, height);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Eight Direction Plugin in Phaser 3 Configuration\nDESCRIPTION: Import and configure the Eight Direction plugin globally in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eightdirection.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport EightDirectionPlugin from 'phaser3-rex-plugins/plugins/eightdirection-plugin.js';\nvar config = {\n    physics: {\n        default: 'arcade',\n        arcade: {\n            // debug: true\n        }\n    },\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexEightDirection',\n            plugin: EightDirectionPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Managing Mask in Container-Lite (JavaScript)\nDESCRIPTION: Methods for managing masks for children in a Container-Lite instance. This includes assigning a mask, clearing a mask, and optionally destroying the mask object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setMask(mask);  // container.mask = mask;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.clearMask();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.clearMask(true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom NinePatch Class in Phaser 3\nDESCRIPTION: Demonstrates how to extend the NinePatch class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNinePatch extends NinePatch {\n    constructor(scene, x, y, width, height, key, baseFrame, columns, rows, config) {\n        super(scene, x, y, width, height, key, baseFrame, columns, rows, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UI Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Code to import and configure the UI plugin in the Phaser game configuration and create a label object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = scene.rexUI.add.label(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Image Class in Phaser 3\nDESCRIPTION: Defines a custom image class by extending Phaser.GameObjects.Image, allowing for additional functionality and custom behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/image.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyImage extends Phaser.GameObjects.Image {\n    constructor(scene, x, y, texture, frame) {\n        super(scene, x, y, texture, frame);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom TextArea Class in JavaScript\nDESCRIPTION: Shows how to extend the RexPlugins.UI.TextArea class to create a custom text area implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTextArea extends RexPlugins.UI.TextArea {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Text Color in Phaser 3\nDESCRIPTION: Code snippets for retrieving and modifying the fill color of a Text object. The color can be accessed through the style property or set using setColor() or setFill() methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = txt.style.color;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setColor(color);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setFill(color);\n```\n\n----------------------------------------\n\nTITLE: Spreading Property Values Across Game Objects in Phaser3\nDESCRIPTION: Distributes property values across game objects from min to max, using an incremental value to create a spread effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.Spread(gameObjects, key, min, max, inc));\n```\n\n----------------------------------------\n\nTITLE: Accessing Tilemap Data from Cache in Phaser 3\nDESCRIPTION: Method to retrieve loaded tilemap data from the tilemap cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.tilemap;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Importing BBCode Text Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Code to import and install the BBCode Text plugin through npm in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport BBCodeTextPlugin from 'phaser3-rex-plugins/plugins/bbcodetext-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexBBCodeTextPlugin',\n            plugin: BBCodeTextPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.rexBBCodeText(x, y, content, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Image from File to Canvas in Phaser 3\nDESCRIPTION: Methods to load an image from a File object onto the Canvas in Phaser 3, with callback and Promise variants.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.loadFromFile(file);\n// canvas.loadFromFile(file, callback);\n\n// or\n\ncanvas.loadFromFilePromise(file)\n    .then(function() {\n        \n    })\n```\n\n----------------------------------------\n\nTITLE: Display Callback Implementation\nDESCRIPTION: Setting up a callback function to modify individual character properties during rendering, including position, scale, rotation, and tint.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamicbitmaptext.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar callback = function(data) {\n    // input\n    // data.index, data.charCode\n    // data.x, data.y, data.scale, data.rotation\n    // data.data\n    // data.tint.topLeft, data.tint.topRight, data.tint.bottomLeft, data.tint.bottomRight    \n\n    // modify input `data` then return it\n    // ...\n    // offset: data.y += 2\n    // set tint: data.color = tint\n    return data;\n}\ntxt.setDisplayCallback(callback);\n```\n\n----------------------------------------\n\nTITLE: Timeline Cleanup\nDESCRIPTION: Method to destroy the timeline and clean up resources including active tweens.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timeline.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntimeline.destroy();\n```\n\n----------------------------------------\n\nTITLE: Chart Object Manipulation\nDESCRIPTION: Accessing and manipulating the underlying Chart.js object properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-chart.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar chart = chart.chart;\nvar datasets = chart.data.datasets;\nvar label = chart.data.datasets[i].label;\nvar labels = chart.data.labels;\nchart.data.datasets[datasetIndex].data[dataIndex] = value;\nchart.update();\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Firebase Item Table\nDESCRIPTION: JavaScript code to read data stored in the client-side cache of the Firebase item table using specific keys.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = table.getData(key0);\n// var data = table.getData(key0, key1);\n// var data = table.getData(key0, key1, key2);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Anticlockwise Property of Circular Progress Bar\nDESCRIPTION: Shows how to retrieve and set the anticlockwise property of the circular progress bar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar anticlockwise = circularProgress.anticlockwise;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setAnticlockwise(anticlockwise);\n// circularProgress.anticlockwise = anticlockwise;\n```\n\n----------------------------------------\n\nTITLE: Creating Nine-Patch Stretchable Image in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Adds a nine-patch (stretchable) image to the scene. Nine-patch images can be scaled without distortion by defining stretchable and non-stretchable areas.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.rexUI.add.ninePatch(x, y, width, height, key, columns, rows, config);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: Configuration code for initializing Firebase with required credentials\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-leaderboard.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dissolve Pipeline Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the dissolve pipeline plugin in the Phaser 3 game configuration. This makes the plugin available globally throughout the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport DissolvePipelinePlugin from 'phaser3-rex-plugins/plugins/dissolvepipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexDissolvePipeline',\n            plugin: DissolvePipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Angle and Direction Calculations (JavaScript)\nDESCRIPTION: Provides methods for calculating angles and directions between tiles, checking if angles are within cones, and snapping angles to directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar radian = board.angleBetween(tileA, tileB);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInCone = board.isAngleInCone(chessA, chessB, face, cone);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar direction = board.directionBetween(chessA, chessB);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar direction = board.angleSnapToDirection(tileXY, angle);\n```\n\n----------------------------------------\n\nTITLE: Setting Texture on Alpha Mask Image in Phaser 3\nDESCRIPTION: Shows how to set or update the texture and mask on an existing Alpha Mask Image instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/alphamaskimage.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTexture(key, frame);\n// image.setTexture(key, frame, mask);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTexture(key, frame, {\n    mask: {\n        key: textureKey,\n        // frame: frameName,\n        // invertAlpha: false,\n        // scale: undefined,\n    }\n   \n    // backgroundColor: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Drawing Triangles with Graphics in Phaser 3\nDESCRIPTION: Methods for drawing filled and stroked triangles using either triangle objects or individual point coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.fillTriangleShape(triangle); // triangle: {x1, y1, x2, y2, x3, y3}\ngraphics.fillTriangle(x1, y1, x2, y2, x3, y3);\ngraphics.strokeTriangleShape(triangle); // triangle: {x1, y1, x2, y2, x3, y3}\ngraphics.strokeTriangle(x1, y1, x2, y2, x3, y3);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Alpha and Tint in RenderTexture in Phaser 3\nDESCRIPTION: Methods to set the global alpha transparency and tint color that affect all subsequent drawing operations on the render texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nrt.setGlobalAlpha(alpha);\n// rt.globalAlpha = alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrt.setGlobalTint(tint);\n// rt.globalTint = tint;\n```\n\n----------------------------------------\n\nTITLE: Checking if TextBox is Currently Typing\nDESCRIPTION: Returns a boolean indicating whether the text box is currently in the process of typing text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar isTyping = textBox.isTyping;\n```\n\n----------------------------------------\n\nTITLE: Creating Shockwave Effect with Configuration Options\nDESCRIPTION: Adds a shockwave effect to a game object with detailed configuration options for controlling the appearance and behavior of the effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexShockwavePipeline').add(gameObject, {\n    // center: {\n    //    x: windowWidth / 2,\n    //    y: windowHeight / 2\n    //}\n    // waveRadius: 0,\n    // waveWidth: 20,\n    // powBaseScale: 0.8,\n    // powExponent: 0.1,\n\n    // name: 'rexShockwavePostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Animation Control Methods\nDESCRIPTION: Collection of methods for controlling animations on a Plane object, including play, reverse, delay, and stop functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/plane.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nplane.play(key);\nplane.playReverse(key);\nplane.playAfterDelay(key, delay);\nplane.playAfterRepeat(key, repeatCount);\nplane.stop();\nplane.stopAfterDelay(delay);\nplane.stopOnFrame(frame);\nplane.stopAfterRepeat(repeatCount);\n```\n\n----------------------------------------\n\nTITLE: Sorting Arrays with Custom Compare Function in JavaScript\nDESCRIPTION: Demonstrates how to use the built-in JavaScript array sort method with a custom compare function. The compare function should return negative, zero, or positive values to determine the sort order.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-sort.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = arr.sort(compareFunction);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(a, b) {\n    // return a - b;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Collision State of Physics Body in Phaser 3\nDESCRIPTION: Demonstrates how to check if a physics body is currently colliding or was colliding in the previous tick.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar isColliding = body.touching;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar wasColliding = body.wasTouching;\n```\n\n----------------------------------------\n\nTITLE: Matching N Symbols in a Line\nDESCRIPTION: Performs matching to find groups of N identical symbols in lines, with a callback function to process each match result.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmatch.match(n, function (result, board) {\n    // var chess = board.tileXYArrayToChess(result.tileXY, 0);\n    // GroupCall(chess, function (chess) { chess.setScale(0.8); });\n\n    // return true; // Break for each loop\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Loading Complete File by File ID\nDESCRIPTION: JavaScript code to load a complete file (both header and content) by its file ID, with promise handling for success and error cases.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.load(fileID)\n    .then(function(result) { \n        // var header = result.header;\n        // var content = result.content;\n        // var fileID = result.fileID;\n        // var userID = result.userID;\n    })\n    .catch(function(result) {\n        // var error = result.error;\n        // var fileID = result.fileID;\n        // var userID = result.userID;\n    })\n```\n\n----------------------------------------\n\nTITLE: Interactive and Mask Creation\nDESCRIPTION: Methods for enabling interaction and creating bitmap masks for the Plane object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/plane.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nplane.setInteractive();\nvar mask = plane.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Handling Orientation Change Events in Phaser 3\nDESCRIPTION: Demonstrates how to listen for and handle orientation change events in Phaser 3, allowing you to respond to changes between portrait and landscape orientations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scalemanager.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scale.on('orientationchange', function(orientation) {\n    if (orientation === Phaser.Scale.PORTRAIT) {\n\n    } else if (orientation === Phaser.Scale.LANDSCAPE) {\n\n    }\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Adding Shape Chess to Board with Complete Parameters\nDESCRIPTION: Creates a chess object with full parameter list including tile position and color properties, then adds it to the board.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-shape.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = scene.rexBoard.add.shape(board, tileX, tileY, tileZ, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Loading ContainerSkew Plugin in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to load the ContainerSkew plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-skew.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexquadimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexquadimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Using Wait Events with Phaser 3 Timers\nDESCRIPTION: Demonstrates how to use Wait Events with Phaser 3's time events to wait for multiple delayed calls.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.time.delayedCall(500, waitEvents.waitCallback());\nscene.time.delayedCall(1000, waitEvents.waitCallback());\nscene.time.delayedCall(1500, waitEvents.waitCallback());\n```\n\n----------------------------------------\n\nTITLE: Calculating Cross Product in Phaser 3\nDESCRIPTION: Calculates the cross product between the current Vector2 and another vector or vector-like object, which indicates the area of the parallelogram formed by them.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = vector.cross(src); // src: {x, y}\n```\n\n----------------------------------------\n\nTITLE: Handling User Leave Event\nDESCRIPTION: JavaScript code showing how to set up an event listener for when any user leaves the online user list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.on('leave', user);\n```\n\n----------------------------------------\n\nTITLE: Importing Drop Shadow Class\nDESCRIPTION: Import and configure the drop shadow post-processing effect class directly in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dropshadow.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport DropShadowPostFx from 'phaser3-rex-plugins/plugins/dropshadowpipeline.js';\nvar config = {\n    pipeline: [DropShadowPostFx]\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Using Map-Reduce on Documents\nDESCRIPTION: Process a result set using map-reduce pattern to transform documents and then compute an aggregate result.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvar mapFn = function(doc) {\n    // ...\n    return doc\n};\nvar reduceFn = function(docArray) {\n    // ...\n    return result;\n}\nvar result = collection.chain().find({}).mapReduce(mapFn, reduceFn);\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Configuration for NameInputDialog\nDESCRIPTION: Full configuration options for creating a NameInputDialog instance, including positioning, styling, modal behavior, and event handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = scene.rexUI.add.nameInputDialog({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    // Elements\n    background: backgroundStyle,\n    // background: null,\n    \n    title: titleStyle,  // SimpleLabelConfig\n    // title: null,\n\n    firstNameTitle: titleStyle,  // SimpleLabelConfig\n    // firstNameTitle: null,\n\n    firstNameInput: inputTextStyle, // CanvasInputTextConfig\n\n    lastNameTitle: titleStyle,  // SimpleLabelConfig\n    // firstNameTitle: null,\n\n    lastNameInput: inputTextStyle, // CanvasInputTextConfig\n\n    content: contentStyle, // SimpleLabelConfig, or TextAreaStyle\n    // content: null,\n\n    button: SimpleLabelConfig,\n\n    // Space\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        title: 0,\n        titleLeft: 0,\n        titleRight: 0,\n\n        names: 0,\n        namesLeft: 0,\n        namesRight: 0,\n        firstName: 0,\n        firstNameTitle: 0,\n        lastNamTitle: 0,\n\n        actionsLeft: 0,\n        actionsRight: 0,\n        action: 0,\n    },\n\n    proportion: {\n        title: 0,\n        actions: 0,\n    },\n\n    expand: {\n        title: true,\n        actions: false,\n    },\n\n    align: {\n        title: 'center',\n        actions: 'center',\n    },\n\n    click: {\n        mode: 'pointerup',\n        clickInterval: 100\n    },\n\n    modal: {\n        cover: {\n            color: 0x0,\n            alpha: 0.8,\n            transitIn: function(gameObject, duration) { },\n            transitOut: function(gameObject, duration) { },\n        },\n        // cover: false, \n\n        // When to close modal dialog?\n        touchOutsideClose: false,\n        anyTouchClose: false,\n        timeOutClose: false,\n        manualClose: false,\n\n        duration: {\n            in: 200,\n            hold: 2000,\n            out: 200\n        }\n\n        transitIn: 0,\n        transitOut: 0,\n\n        destroy: true,\n\n        defaultBehavior: true,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n\n    // nameInputButtonIndex: 0,\n    // cancelButtonIndex: 1,\n\n}, creators);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TransitionImage Class in Phaser 3\nDESCRIPTION: Demonstrates how to extend the TransitionImage class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTransitionImage extends TransitionImage {\n    constructor(scene, x, y, texture, frame, config) {\n        super(scene, x, y, texture, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar transitionimage = new MyTransitionImage(scene, x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Value Callback Input to Tweaker\nDESCRIPTION: Configuration for adding an input with value getter/setter callbacks. Includes binding target, value handlers, and view options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput({\n    bindingTarget: object,\n\n    onGetValue(bindingTarget) {\n\n    },\n\n    onSetValue(bindingTarget, value) {\n\n    },\n    \n    view: ,\n\n    // Other properties..\n    \n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n    \n    // orientation: 'x',\n\n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Scrolling by Percentage in Phaser 3 Scrollable Panel\nDESCRIPTION: This snippet illustrates how to scroll the panel content by percentage, using values between 0 and 1 to represent the scroll position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npanel.t = t;  // t: 0~1\n// panel.setT(t);  \n\npanel.setT(t, true);\n\nvar t = panel.t;\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Firebase plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport FirebasePlugin from 'phaser3-rex-plugins/plugins/firebase-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFirebase',\n            plugin: FirebasePlugin,\n            start: true\n        }]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Monopoly Behavior to Chess Object\nDESCRIPTION: Adds monopoly behavior to a chess object using the Board plugin in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-monopoly.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar monopoly = scene.rexBoard.add.monopoly(chess, config);\n```\n\n----------------------------------------\n\nTITLE: Creating TransitionImage Instance with Configuration in Phaser 3\nDESCRIPTION: Shows how to create a transition image instance with various configuration options including callbacks, duration, easing, and mask.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexTransitionImage(x, y, texture, frame, {\n    // dir: 0,\n    // onStart: function(parent, currentImage, nextImage, t) { },\n    // onStartScope: undefined,\n    // onProgress: function(parent, currentImage, nextImage, t) { },\n    // onProgressScope: undefined,\n    // onComplete: function(parent, currentImage, nextImage, t) { },\n    // onCompleteScope: undefined,    \n    // duration: 1000,\n    // ease: 'Linear',\n    // mask: undefined,\n\n    // width: undefined, height: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Properties of Game Objects in Phaser3\nDESCRIPTION: Sets a specified property to a value for each game object in an array. Supports step, index, and direction parameters to control how the value is applied across objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.PropertyValueSet(gameObjects, key, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Custom Polygon Class Extension\nDESCRIPTION: Shows how to create a custom polygon class by extending Phaser.GameObjects.Polygon with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-polygon.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPolygon extends Phaser.GameObjects.Polygon {\n    constructor(scene, x, y, points, fillColor) {\n        super(scene, x, y, points, fillColor);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Depth in Container-Lite (JavaScript)\nDESCRIPTION: Methods for managing the depth of a Container-Lite instance and its children. This includes setting depth, bringing to top/bottom, swapping depth, and managing child depth within the container.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar depth = container.depth;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setDepth(value, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setDepth(value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.bringMeToTop();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.sendMeToBack();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainerA.swapDepth(containerB);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.incDepth(value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.moveMyDepthBelow(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.moveMyDepthAbove(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.bringChildToTop(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.sendChildToBack(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Loading Texture for Particle System in Phaser 3\nDESCRIPTION: Loads an image to be used as a texture for particles. The image needs to be loaded before it can be used in a particle emitter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n```\n\n----------------------------------------\n\nTITLE: Testing Triangle-Triangle Intersection in Phaser 3\nDESCRIPTION: Determines whether two triangles intersect with each other.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.TriangleToTriangle(triangleA, triangleB);\n```\n\n----------------------------------------\n\nTITLE: Creating Line Progress Instance with Full Configuration\nDESCRIPTION: Details the creation of a line progress instance with all available configuration options including colors, dimensions, and callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-lineprogress.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineProgress = scene.add.rexLineProgress({\n    x: 0,\n    y: 0,\n    width: 2,\n    height: 2,\n\n    barColor: undefined,\n    trackColor: undefined,\n    trackStrokeColor: undefined,\n    trackStrokeThickness: 2,\n\n    skewX:0,\n    rtl: false,\n\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n    value: 0,\n    valuechangeCallback: function(newValue, oldValue, lineProgress) {\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Creating Bitmap Mask in Phaser 3\nDESCRIPTION: An alternative way to create a bitmap mask using the scene's add method. This approach directly adds the mask to the scene using an existing game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mask.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = scene.add.bitmapMask(shape);\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Input in Phaser 3 Tweaker\nDESCRIPTION: This snippet demonstrates how to add a range input to a Tweaker instance. It includes options for setting min/max values, step size, value formatting, and customization of appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput(object, key, {\n    // view: 'range',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    min: minValue, \n    max: maxValue,\n    // step: undefined,\n\n    // format: function(value) { return s; },\n    // inputTextReadOnly: false,\n    \n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Scaling a Vector2 in Phaser 3\nDESCRIPTION: Multiplies both the x and y components of the Vector2 by the specified value, changing its length but not its direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvector.scale(value);\n```\n\n----------------------------------------\n\nTITLE: Pausing Matter.js Physics in Phaser 3\nDESCRIPTION: Code snippet for pausing the Matter.js physics world in a Phaser 3 scene. This prevents physics calculations from being processed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-world.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.world.pause();\n```\n\n----------------------------------------\n\nTITLE: Character Text Style Management\nDESCRIPTION: Methods for getting and setting text style properties including bold, italic, font size, color, stroke, shadow, and background settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar bold = char.style.bold;\nvar italic = char.style.italic;\nvar fontSize = char.style.fontSize;\n\nchar.modifyStyle({\n    bold: false,\n    italic: false,\n    fontSize: '16px'\n});\n\nchar.setBold();\nchar.setItalic();\nchar.setFontSize(fontSize);\n```\n\n----------------------------------------\n\nTITLE: Fast-Forwarding a Particle Emitter in Phaser 3\nDESCRIPTION: Advances the particle emitter by a specified time in milliseconds, useful for creating pre-populated particle effects or skipping ahead in animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.fastForward(time, delta);\n```\n\n----------------------------------------\n\nTITLE: Getting Total Page Count\nDESCRIPTION: Retrieves the total number of pages in the text content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar pageIndex = textBox.pageCount;\n```\n\n----------------------------------------\n\nTITLE: Checking if Pointer is Inside Another Game Object\nDESCRIPTION: Shows how to check if the pointer is inside another game object during a swipe event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nswipe.on('swipe', function(swipe){\n    var isPointerInsideGameObject = swipe.isPointerInGameObject(anotherGameObject);\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Pixel Colors on Canvas in Phaser 3\nDESCRIPTION: Methods to get and set pixel colors on the Canvas in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = canvas.getPixel(x, y);\n\ncanvas.setPixel(x, y, r, g, b);\n// canvas.setPixel(x, y, r, g, b, a);\n// or\ncanvas.setPixel(x, y, color);\n```\n\n----------------------------------------\n\nTITLE: Layouting Color Components in Phaser 3\nDESCRIPTION: Shows how to arrange the position of all elements in the Color Components object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncolorComponents.layout();\n```\n\n----------------------------------------\n\nTITLE: Adding Displacement Effect in Phaser 3\nDESCRIPTION: Demonstrates how to add a Displacement effect as a pre-fx or post-fx to a game object or camera in Phaser 3. Includes setting texture and displacement amounts.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addDisplacement(texture, x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addDisplacement(texture, x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addDisplacement(texture, x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setActive(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.preFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.x = x;\neffect.y = y;\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setTexture(key);\n```\n\n----------------------------------------\n\nTITLE: Loading Individual Files\nDESCRIPTION: Demonstrates how to load individual files using promises with success and error handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage-files.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.load(fileID)\n    .then(function(result) { \n        // var header = result.header;\n        // var content = result.content;\n        // var fileID = result.fileID;\n    })\n    .catch(function(result) {\n        // var error = result.error;\n        // var fileID = result.fileID;\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring GroupNavigator Plugin in Game Configuration\nDESCRIPTION: Imports and configures the GroupNavigator plugin in the global plugins section of the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport GroupNavigatorPlugin from 'phaser3-rex-plugins/plugins/groupnavigator-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexGroupNavigator',\n            plugin: GroupNavigatorPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Resetting Display Content in Edit Dialog (Advanced Version)\nDESCRIPTION: Sets or resets the content of the dialog with advanced configuration options for each element. This allows customizing icons, frames, and actions for each UI element in addition to text content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.resetDisplayContent({\n    title: {\n        text: '',\n    \n        icon: undefined, iconFrame: undefined,\n        iconSize: undefined,\n    \n        action: undefined, actionFrame: undefined,\n        actionSize: undefined,\n    \n    },\n\n    firstNameTitle: {\n        text: '',\n    \n        icon: undefined, iconFrame: undefined,\n        iconSize: undefined,\n    \n        action: undefined, actionFrame: undefined,\n        actionSize: undefined,\n    \n    },\n\n    lastNameTitle: {\n        text: '',\n    \n        icon: undefined, iconFrame: undefined,\n        iconSize: undefined,\n    \n        action: undefined, actionFrame: undefined,\n        actionSize: undefined,\n    \n    },\n\n    button: {\n        text: '',\n    \n        icon: undefined, iconFrame: undefined,\n        iconSize: undefined,\n    \n        action: undefined, actionFrame: undefined,\n        actionSize: undefined,\n    \n    },\n\n    firstName: '',\n\n    lastName: ''\n});\n```\n\n----------------------------------------\n\nTITLE: Using Viewport Coordinate Plugin in Phaser 3 Scene\nDESCRIPTION: Shows how to use the Viewport Coordinate plugin to add and set viewport-relative properties on a game object in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/viewport-coordinate.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexViewportCoordinate').add(gameObject, viewport, vpx, vpy);\ngameObject.vpx = 0.5;\ngameObject.vpy = 0.5;\ngameObject.vpxOffset = 0;\ngameObject.vpyOffset = 0;\n```\n\n----------------------------------------\n\nTITLE: Handling ScrollBar Events in JavaScript\nDESCRIPTION: Event handlers for value changes, input start, and input end on the ScrollBar component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.on('valuechange',\n  function (newValue, oldValue, scrollBar) {\n    // scrollBar.text = Math.round(Phaser.Math.Linear(0, 100, newValue));\n  },\n  scope\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.on('inputstart', function(pointer) {\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.on('inputend', function(pointer) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling Value Change Event in Circular Progress Bar\nDESCRIPTION: Demonstrates how to listen for and handle the value change event of the circular progress bar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.on('valuechange', function(newValue, oldValue, circularProgress){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Applying Pixelation Effect to Game Objects and Cameras\nDESCRIPTION: Code for applying the pixelation effect to game objects or cameras after loading the minified plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-pixelation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexpixelationpipelineplugin').add(gameObject, config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexpixelationpipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Managing Scene Order in Phaser 3\nDESCRIPTION: Methods for changing the order of scenes in the scene list, including swapping positions and moving scenes up or down.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.swapPosition(keyA, keyB);\n// scene.scene.stop(keyA);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.moveAbove(keyA, keyB);\n// scene.scene.moveAbove(keyA);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.moveBelow(keyA, keyB);\n// scene.scene.moveBelow(keyA);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.moveUp(keyA);\n// scene.scene.moveBelow();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.moveDown(keyA);\n// scene.scene.moveDown();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.bringToTop(keyA);\n// scene.scene.bringToTop();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.sendToBack(keyA);\n// scene.scene.sendToBack();\n```\n\n----------------------------------------\n\nTITLE: Setting Gradient Fill for Graphics in Phaser 3\nDESCRIPTION: Configures a gradient fill style for WebGL rendering, specifying colors for each corner and optional alpha values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.fillGradientStyle(topLeft, topRight, bottomLeft, bottomRight, alpha);  // alpha= 1\n// graphics.fillGradientStyle(topLeft, topRight, bottomLeft, bottomRight, alphaTopLeft, alphaTopRight, alphaBottomLeft, alphaBottomRight);\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas Object in Phaser3 Rex UI\nDESCRIPTION: Demonstrates how to add a canvas object for drawing in Phaser 3 using the Rex UI plugin. The canvas provides an HTML5 canvas element for custom drawing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = scene.rexUI.add.canvas(x, y, width, height);\n// var canvas = scene.rexUI.add.canvas(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Handling TextAreaInput Events in JavaScript\nDESCRIPTION: These snippets show how to handle various events for the TextAreaInput, including close, text change, scroll, and slider/scroller interactions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.on('close', function(text, textAreaInput) {\n    \n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.on('textchange', function(text, textAreaInput){\n    // ...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.on('scroll', function(textAreaInput) {\n    // ...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.getElement('slider').on('inputstart', function(panel) {\n    // ...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.getElement('slider').on('inputend', function(panel) {\n    // ...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.getElement('scroller').on('dragstart', function(panel) {\n    // ...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.getElement('scroller').on('dragend', function(panel) {\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Compiling and Executing Expressions\nDESCRIPTION: Demonstrates the two-step process of first compiling an expression string into a function and then executing it with a context object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar f = parser.compile(expressionString);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar f = scene.plugins.get('rexExpressionParserPlugin').compile(expressionString);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = f(context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    a: 10,  // Number\n    b: {c: 10},  // Objet with number property\n    c: 20,\n    randomInt(a, b) {  // Custom method\n        return Math.floor(Math.random()*(b-a)+a);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a text editor instance with configuration\nDESCRIPTION: Creating a text editor instance with various configuration options that opens on 'pointerdown' event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = scene.plugins.get('rexTextEdit').add(textGameObject, {\n    // type: 'text',   //'text','password','number'\n    // enterClose: true,\n    // selectAll: false,\n\n    // onOpen: undefined,\n    // onTextChanged: undefined,\n    // onClose: undefined,\n\n    // text: '',\n});\n```\n\n----------------------------------------\n\nTITLE: Game Configuration with CursorAtBounds Plugin\nDESCRIPTION: Configures the game with CursorAtBounds plugin in the global plugins list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursoratbounds.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport CursorAtBoundsPlugin from 'phaser3-rex-plugins/plugins/cursoratboundss-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCursorAtBounds',\n            plugin: CursorAtBoundsPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Converting Polygon to Number Array in Phaser 3\nDESCRIPTION: Converts a polygon's points to a flat array of numbers representing coordinate pairs. Optionally can modify an existing array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Geom.Polygon.GetNumberArray(polygon);\n// var out = Phaser.Geom.Polygon.GetNumberArray(polygon, out);  // modify out\n```\n\n----------------------------------------\n\nTITLE: Stepping Arcade Physics Simulation in Phaser 3\nDESCRIPTION: Shows how to advance the Arcade physics simulation by a single step or a specific time increment in Phaser 3. This allows for fine-grained control over the physics simulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.singleStep();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.step(delta);\n```\n\n----------------------------------------\n\nTITLE: Configuring Inner Bounds in Phaser 3 Dynamic Text\nDESCRIPTION: Methods to style the inner bounds of a dynamic text object with fill and stroke options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setInnerBoundsColor(color);\n// txt.setInnerBoundsColor(color, color2, isHorizontalGradient);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setInnerBoundsStroke(color, lineWidth);\n```\n\n----------------------------------------\n\nTITLE: Rendering Shader Output to Texture in Phaser 3\nDESCRIPTION: Configures a shader to render its output to an internal WebGL texture instead of directly to the display list. The resulting texture can be used by other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nshader.setRenderToTexture();\nvar texture = shader.glTexture;\n```\n\n----------------------------------------\n\nTITLE: Removing Post FX Pipeline from a Game Object\nDESCRIPTION: Method to remove a specific post FX pipeline from a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.removePostPipeline(MyPostFxClass);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Line Class\nDESCRIPTION: How to extend the Line class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/line.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLine extends Line {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = new MyLine(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Pre-FX Pipeline Instance in Phaser 3\nDESCRIPTION: This snippet shows how to add a pre-fx pipeline instance to the pipeline manager in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/prefx-pipeline.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineManager = scene.sys.renderer.pipelines;\nvar pipelineInstance = pipelineManager.add(PreFxName, new MyPreFxClass(scene.game));\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom Nine Slice Object in Phaser 3\nDESCRIPTION: Creates an instance of a custom Nine Slice class. This allows for using the extended functionality defined in the custom class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/nineslice.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar nineSlice = new MyNineSlice(scene, x, y, texture, frame, width, height, leftWidth, rightWidth, topHeight, bottomHeight);\n```\n\n----------------------------------------\n\nTITLE: Controlling Rotation for Matter.js Physics Objects\nDESCRIPTION: Methods to set fixed rotation (preventing rotation entirely) or control angular velocity of physics objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setFixedRotation();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setAngularVelocity(v);\n```\n\n----------------------------------------\n\nTITLE: Creating Press Input with Configuration in Phaser 3\nDESCRIPTION: Creates a press input instance with detailed configuration options like time threshold and movement threshold.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar press = scene.rexGestures.add.press({\n    // enable: true,\n    // bounds: undefined,\n\n    // time: 251,\n    // threshold: 9,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox with Parameter Object\nDESCRIPTION: Creates a checkbox using a detailed configuration object that includes styling, animation, and interaction properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar checkbox = scene.add.rexCheckbox({\n    x: 0,\n    y: 0,\n    width: undefined,\n    height: undefined,\n\n    color: 0x005cb2,\n    boxFillAlpha: 1,\n    uncheckedColor: null,\n    uncheckedBoxFillAlpha: 1,\n\n    boxLineWidth: 4,\n    boxStrokeColor: 0x005cb2,\n    boxStrokeAlpha: 1,\n    uncheckedBoxStrokeColor: 0x005cb2,\n    uncheckedBoxStrokeAlpha: 1,\n\n    checkerColor: 0xffffff,\n    checkerAlpha: 1,\n\n    // boxSize: 1,\n    // checkerSize: 1,\n\n    circleBox: false,\n\n    animationDuration: 150,\n\n    checked: false, // or value: false,\n\n    click: undefined,\n    // click: {\n    //     mode: 1,            // 0|'press'|1|'release'\n    //     clickInterval: 100  // ms\n    //     threshold: undefined\n    // },\n    readOnly: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in LokiJS\nDESCRIPTION: Add a new collection to the database with an optional configuration object. Collections are containers for storing documents.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar collection = db.addCollection(name);\n// var collection = db.addCollection(name, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Styles for Graphics in Phaser 3\nDESCRIPTION: Configures the default line and fill styles for a graphics object, specifying width, color, and alpha values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.setDefaultStyles({\n    lineStyle: {\n        width: 1,\n        color: 0xffffff,\n        alpha: 1\n    },\n    fillStyle: {\n        color: 0xffffff,\n        alpha: 1\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Configuration\nDESCRIPTION: Configure the drop shadow plugin in the game configuration after installing via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dropshadow.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DropShadowPipelinePlugin from 'phaser3-rex-plugins/plugins/dropshadowpipeline-plugin.js';\nvar config = {\n    plugins: {\n        global: [{\n            key: 'rexDropShadowPipeline',\n            plugin: DropShadowPipelinePlugin,\n            start: true\n        }]\n    }\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Extending LineProgressCanvas Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom LineProgressCanvas class by extending the base component. This allows for adding custom functionality to canvas-based linear progress bars.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLineProgress extends RexPlugins.UI.LinerProgressCanvas {\n    constructor(scene, x, y, width, height, barColor, value, config) {\n        super(scene, x, y, width, height, barColor, value, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Data from Phaser 3 Data Manager\nDESCRIPTION: Methods to remove single or multiple keys from the Data Manager, including popping values and resetting all data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/datamanager.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.remove(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.remove(keys);  // keys: [key, key, ...]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = parent.data.pop(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.reset();\n```\n\n----------------------------------------\n\nTITLE: Setting Size of Custom Shapes in Phaser 3\nDESCRIPTION: Demonstrates multiple ways to set or resize the width and height of a custom shapes object, which triggers a redraw of the shapes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncustomShapes.setSize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncustomShapes.resize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncustomShapes.width = width;\ncustomShapes.height = height;\n```\n\n----------------------------------------\n\nTITLE: Configuring Buttons Input in Phaser 3 Tweaker\nDESCRIPTION: This snippet demonstrates how to add a buttons input to a Tweaker instance. It allows selecting from predefined options using buttons and includes customization for appearance and monitoring.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput(object, key, {\n    view: 'buttons',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    options: [\n        {text: text0, value: value0},\n        {text: text1, value: value1},\n        // ...\n    ],\n    \n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Wrapping Game Objects within a Rectangle in Phaser3\nDESCRIPTION: Constrains game objects to stay within a rectangular boundary, with optional padding to create a margin between objects and the rectangle edge.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.WrapInRectangle(gameObjects, rect, padding);\n```\n\n----------------------------------------\n\nTITLE: Resetting Local State of Child in Container-Lite (JavaScript)\nDESCRIPTION: Methods to reset the local state of a child object within a Container-Lite instance. This can be done for all properties or specific ones like position, rotation, scale, alpha, visibility, and active state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.resetChildState(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.resetChildPositionState(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.resetChildRotationState(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.resetChildScaleState(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.resetChildAlphaState(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.resetChildVisibleState(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.resetChildActiveState(child);\n```\n\n----------------------------------------\n\nTITLE: Generating Random Angle in Radians in Phaser 3\nDESCRIPTION: Generates a random angle in radians within the range of -PI to PI. Useful for random rotations, directions, or starting orientations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar angle = Phaser.Math.Angle.Random();\n```\n\n----------------------------------------\n\nTITLE: Removing a Light from the Scene in Phaser 3\nDESCRIPTION: Code for removing a light from the Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.lights.removeLight(light);\n```\n\n----------------------------------------\n\nTITLE: Managing Physics Bodies in Phaser 3 Arcade Physics\nDESCRIPTION: Demonstrates how to enable, disable, add, and remove physics bodies in the Arcade physics world of Phaser 3. These operations are crucial for dynamic physics interactions in games.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.enable(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.disable(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.add(body);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.disableBody(body);\n```\n\n----------------------------------------\n\nTITLE: Using Cursor Keys in Phaser 3\nDESCRIPTION: Demonstrates how to create and use cursor key objects for directional input in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardevents.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar cursorKeys = scene.input.keyboard.createCursorKeys();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isUpDown = cursorKeys.up.isDown;\nvar isDownDown = cursorKeys.down.isDown;\nvar isLeftDown = cursorKeys.left.isDown;\nvar isRightDown = cursorKeys.right.isDown;\nvar isSpaceDown = cursorKeys.space.isDown;\nvar isShiftDown = cursorKeys.shift.isDown;\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting the Current Layer\nDESCRIPTION: Methods for getting a layer instance and setting the current active layer of a map.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar layer = map.getLayer(name);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmap.setLayer(layer);  // layer name, layer index\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmap.layer = layer;\n```\n\n----------------------------------------\n\nTITLE: Managing World Bounds in Phaser 3 Arcade Physics\nDESCRIPTION: Demonstrates how to set and manage world bounds in the Arcade physics world of Phaser 3. This is important for defining the playable area and handling object interactions with world edges.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.setBounds(x, y, width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.bounds.setTo(x, y, width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.setBoundsCollision();\n```\n\n----------------------------------------\n\nTITLE: Testing Line Intersections with Rectangles in Phaser 3\nDESCRIPTION: Shows how to test if a line intersects with a rectangle and get the intersection points.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.LineToRectangle(line, rect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetLineToRectangle(line, rect);\n// var out = Phaser.Geom.Intersects.GetLineToRectangle(line, rect, out);\n```\n\n----------------------------------------\n\nTITLE: Creating a Scrollable Panel in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Creates a scrollable panel using the Rex UI plugin with comprehensive configuration options for positioning, sizing, scrolling behavior, and appearance. The panel supports vertical, horizontal, or both scrolling directions with customizable sliders, masking, and layout options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar panel = scene.rexUI.add.scrollablePanel({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    // scrollMode: 0,\n\n    // Elements\n    background: backgroundGameObject,\n\n    panel: {\n        child: panelGameObject,\n        mask: {\n            padding: 0, // or {left, right, top, bottom}\n            // updateMode: 0,\n        }\n    }.\n\n    slider: {\n        // background: sliderBackgroundGameObject,\n        track: trackGameObject,\n        /* \n        track: { \n            width: 1, height: 1,\n            radius: 0, \n            color: undefined, alpha: 1,\n            strokeColor: undefined, strokeAlpha: 1, strokeWidth: 2,\n            shape: undefined\n        }\n        */\n\n        thumb: thumbGameObject,\n        /* \n        thumb: { \n            width: 1, height: 1,\n            radius: 0, \n            color: undefined, alpha: 1,\n            strokeColor: undefined, strokeAlpha: 1, strokeWidth: 2,\n            shape: undefined\n        }\n        */\n\n        // input: 'drag',\n        // position: 'right',\n        // gap: undefined,\n\n        // hideUnscrollableSlider: false,\n        // disableUnscrollableDrag: false,\n        // adaptThumbSize: false,\n        // minThumbSize: undefined,\n\n        // buttons: {\n        //     top: topButtonGameObject, \n        //     bottom: bottomButtonGameObject,\n        //     left: leftButtonGameObject, \n        //     right: rightButtonGameObject,\n        //     step: 0.01,\n        // }\n    },\n\n    // sliderX: {...},\n    // sliderY: {...},\n\n    // scrollDetectionMode: 0,\n\n    // scroller: {\n    //     threshold: 10,\n    //     slidingDeceleration: 5000,\n    //     backDeceleration: 2000,\n    //     pointerOutRelease: true,\n    //     rectBoundsInteractive: true,\n    //     dragRate: 1,\n    // },\n\n    // scrollerX: {...},\n    // scrollerY: {...},\n\n    mouseWheelScroller: false,\n    // mouseWheelScroller: {\n    //     focus: true,\n    //     speed: 0.1\n    // },\n\n    // mouseWheelScrollerX: {...},\n    // mouseWheelScrollerY: {...},\n\n    clampChildOY: false,\n    // clampChildOX: false,\n\n    // snapStepY: undefined,\n    // snapStepX: undefined,\n\n    header: headerGameObject,\n    footer: footerGameObject,\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        panel: 0,\n        // panel: {\n        //    top: 0,\n        //    bottom: 0,\n        //    left: 0,\n        //    right: 0,\n        //},\n\n        slider: 0,\n        // slider: {\n        //     top: 0,\n        //     bottom: 0,\n        //     left: 0,\n        //     right: 0,\n        // },\n        // sliderX: 0,\n        // sliderY: 0,\n\n        header: 0,\n        footer: 0,\n    },\n\n    expand: {\n        header: true,\n        footer: true,\n        panel: true,\n    },\n\n    align: {\n        header: 'center',\n        footer: 'center',\n        panel: 'center',\n    },\n\n    // name: '',\n    // draggable: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Phaser 3 Scene using ES6 Class\nDESCRIPTION: Implementation of a Phaser 3 scene using ES6 class syntax with constructor and lifecycle methods (init, preload, create, update). The data parameter allows passing information between scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scene.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyScene extends Phaser.Scene {\n  constructor(config) {\n    super(config);\n  }\n\n  init(data) {}\n  preload() {}\n  create(data) {}\n  update(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Filled Triangle on Graphics in Phaser 3\nDESCRIPTION: Fills a triangle shape on a graphics object with the current fill style.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// graphics.fillStyle(color, alpha);   // color: 0xRRGGBB\ngraphics.fillTriangleShape(triangle);\n```\n\n----------------------------------------\n\nTITLE: Testing Intersections Between Lines in Phaser 3\nDESCRIPTION: Shows how to test if two lines intersect and get the intersection point.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar isIntersection = Phaser.Geom.Intersects.LineToLine(line1, line2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isIntersection = Phaser.Geom.Intersects.LineToLine(line1, line2, out);\n```\n\n----------------------------------------\n\nTITLE: Creating TextBox Object via Class Import\nDESCRIPTION: Shows how to create and add a TextBox to the scene after importing the class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar textBox = new TextBox(scene, config);\nscene.add.existing(textBox);\n```\n\n----------------------------------------\n\nTITLE: Loading UI Plugin in Phaser3 Scene\nDESCRIPTION: Shows how to load and initialize the UI plugin in the preload stage of a Phaser3 scene\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Loading Commands into TCRP Player in Phaser 3\nDESCRIPTION: Method for loading commands into the TCRP player with options for time units and delta time mode.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.load(commands, scope, {\n    // timeUnit: 0,        // 'ms'|0|'s'|'sec'|1\n    // dtMode: 0           // 'abs'|'absolute'|0|'inc'|'increment'|1\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Key Events in Phaser 3\nDESCRIPTION: Demonstrates two methods for handling key down and key up events in Phaser 3 using a key object or the keyboard input plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardevents.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObject = scene.input.keyboard.addKey('W');  // Get key object\nkeyObject.on('down', function(event) { /* ... */ });\nkeyObject.on('up', function(event) { /* ... */ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.keyboard.on('keydown-' + 'W', function (event) { /* ... */ });\nscene.input.keyboard.on('keyup-' + 'W', function (event) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Provides the npm command to install Rex plugins for use in Phaser 3 projects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Applying Glow Effect to a Game Object using Minify File Method\nDESCRIPTION: Applies the glow effect to a Phaser 3 game object using the plugin loaded from the minified file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexglowfilterpipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Label Object with Full Configuration in Phaser 3\nDESCRIPTION: Comprehensive example showing all available configuration options for creating a label object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = scene.rexUI.add.label({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    orientation: 0,\n    // rtl: false,\n\n    background: backgroundGameObject,\n\n    icon: iconGameObject,\n    // iconMask: false,\n    // squareFitIcon: false,\n    // iconSize: undefined, iconWidth: undefined, iconHeight: undefined,\n    \n    text: textGameObject,\n    // wrapText: false,\n    // adjustTextFontSize: false,\n    // expandTextWidth: false,\n    // expandTextHeight: false,\n\n    action: actionGameObject,\n    // actionMask: false,\n    // squareFitAction: false,\n    // actionSize: undefined, actionWidth: undefined, actionHeight: undefined,\n\n    align: undefined,\n\n    space: {\n        left: 0, right: 0, top: 0, bottom: 0,\n\n        icon: 0, \n        iconTop: 0, iconBottom: 0, iconLeft: 0, iconRight: 0,\n\n        text: 0,\n        actionTop: 0, actionBottom: 0, actionLeft: 0, actionRight: 0,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Events for Child Game Objects in a Layer in Phaser 3\nDESCRIPTION: Shows how to listen for 'addedtoscene' and 'removedfromscene' events for child game objects in a Layer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.events.on('addedtoscene', function(gameObject, scene) {\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.events.on('removedfromscene', function(gameObject, scene) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Random Item from Phaser Array\nDESCRIPTION: Method to remove and return a random element from a Phaser array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-addremove.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar item = Phaser.Utils.Array.RemoveRandomElement(arr);\n```\n\n----------------------------------------\n\nTITLE: Batch Drawing Operations in RenderTexture in Phaser 3\nDESCRIPTION: A set of methods for optimized batch drawing operations, starting with beginDraw, using batchDraw methods, and finalizing with endDraw.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrt.beginDraw();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrt.batchDraw(entries, x, y, alpha, tint);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrt.batchDrawFrame(key, frame, x, y, alpha, tint);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrt.stamp(key, frame, x, y, {\n    // ...\n    skipBatch: true\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrt.repeat(key, frame, x, y, width, height, alpha, tint, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrt.endDraw();\n```\n\n----------------------------------------\n\nTITLE: Playing Audio Sprites in Phaser 3\nDESCRIPTION: Method to play a specific section of an audio sprite, creating and destroying a sound instance automatically.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.playAudioSprite(key, markerName, config);\n```\n\n----------------------------------------\n\nTITLE: Working with Line Angles in Phaser 3\nDESCRIPTION: Shows methods for getting a line's angle, normal angle, normal vector, and calculating reflection angles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar angle = Phaser.Geom.Line.Angle(line);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar deg = Phaser.Math.RadToDeg(rad);  // deg : -180 ~ 180\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar normalAngle = Phaser.Geom.Line.NormalAngle(line);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar normal = Phaser.Geom.Line.GetNormal(line);  // normal: {x, y}\n// var normal = Phaser.Geom.Line.GetNormal(line, normal);  // push normal\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar normalX = Phaser.Geom.Line.NormalX(line);\nvar normalY = Phaser.Geom.Line.NormalY(line);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar reflectAngle = Phaser.Geom.Line.ReflectAngle(aimLine, reflectingLine);\n```\n\n----------------------------------------\n\nTITLE: Checking if Pointer is Inside Another Game Object in Phaser 3\nDESCRIPTION: Checks if the pointer is inside another game object during a pan event, useful for interaction detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\npan.on('panend', function(pan){\n    var isPointerInsideGameObject = pan.isPointerInGameObject(anotherGameObject);\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Moveable Area and Path in Phaser 3 Pathfinder\nDESCRIPTION: Shows how to find a moveable area and get the shortest path to a tile within that area using the Pathfinder.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-pathfinder.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = pathFinder.findArea(movingPoints);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = pathFinder.getPath(endTileXY);\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data into Achievements Plugin\nDESCRIPTION: Demonstrates how to load achievement definitions from a CSV string with custom delimiter option.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/achievements.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nachievements.loadCSV(csvString, {\n    // delimiter: ','\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting children in a Phaser 3 List\nDESCRIPTION: Methods to sort the children in the List by a specific property, with an optional custom handler function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlist.sort(property);\n// list.sort(property, handler);\n```\n\n----------------------------------------\n\nTITLE: Creating a Swipe Input Instance with Configuration\nDESCRIPTION: Shows how to create a swipe input instance with detailed configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar swipe = scene.rexGestures.add.swipe({\n    // enable: true,\n    // bounds: undefined,\n\n    // threshold: 10,\n    // velocityThreshold: 1000,\n    // dir: '8dir',\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping Text Typing Animation\nDESCRIPTION: Stops the ongoing typing animation. This will trigger the 'stop' event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.stop();\n```\n\n----------------------------------------\n\nTITLE: Creating BBCode Text Objects in Phaser 3\nDESCRIPTION: Various methods to create BBCode text objects in Phaser 3 with different configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.rexBBCodeText(x, y, '[b]h[/b]ello');\n// var txt = scene.add.rexBBCodeText(x, y, '[b]h[/b]ello', { fontFamily: 'Arial', fontSize: 64, color: '#00ff00' });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.rexBBCodeText({\n    x: 0,\n    y: 0,\n    text: '',\n    style: {\n        fontSize: '64px',\n        fontFamily: 'Arial',\n        color: '#ffffff',\n        align: 'center',\n        backgroundColor: '#ff00ff',\n        // ...\n    },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.make.rexBBCodeText({\n    x: 0,\n    y: 0,\n    padding: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n        //x: 32,    // 32px padding on the left/right\n        //y: 16     // 16px padding on the top/bottom\n    },\n    text: 'Text\\nGame Object\\nCreated from config',\n    style: {\n        fontSize: '64px',\n        fontFamily: 'Arial',\n        color: '#ffffff',\n        align: 'center',\n        backgroundColor: '#ff00ff',\n        // ...\n    },\n    // origin: {x: 0.5, y: 0.5},\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Rotating a Triangle Around its Center in Phaser 3\nDESCRIPTION: Rotates the triangle around its center (incenter) by the specified angle in radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = Phaser.Geom.Triangle.Rotate(triangle, angle);\n```\n\n----------------------------------------\n\nTITLE: Configuring Text-Area Input in Phaser 3 Tweaker\nDESCRIPTION: This snippet demonstrates how to add a text-area input to a Tweaker instance. It includes options for customizing appearance, binding to object properties, and handling value changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput(object, key, {    \n    view: 'textarea',\n\n    // height: undefined,\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    // monitor: false,\n\n    // key: undefined,\n\n    // autoUpdate: true,\n    // onValidate: undefined,\n    // onValueChange: undefined,    \n})\n```\n\n----------------------------------------\n\nTITLE: Getting Post FX Pipeline Instance from a Game Object\nDESCRIPTION: Method to retrieve a specific post FX pipeline instance from a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = gameObject.getPostPipeline(MyPostFxClass);\n```\n\n----------------------------------------\n\nTITLE: Importing Image Input Label Class and Adding to Scene\nDESCRIPTION: Code snippet for importing the Image Input Label class directly and adding an instance to a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImageInputLabel } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n\nvar imageInputLabel = new ImageInputLabel(scene, config);\nscene.add.existing(imageInputLabel);\n```\n\n----------------------------------------\n\nTITLE: Complete Label Configuration\nDESCRIPTION: Comprehensive configuration options for creating a label with all available properties\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletitlelabel.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = scene.rexUI.add.simpleLabel({\n    layoutMode: 0,\n    background: backgroundStyle,\n    innerBackground: backgroundStyle,\n    icon: iconStyle,\n    title: textStyle,\n    text: testStyle,\n    separator: separatorStyle,\n    action: actionStyle,\n    space: {\n        left: 0, right: 0, top: 0, bottom:0, \n        icon: 0, text: 0\n    },\n    align: {\n        title: 'left',\n        text: 'left',\n    },\n    space: {\n        left: 0, right: 0, top: 0, bottom: 0,\n        innerLeft: 0, innerRight: 0, innerTop: 0, innerBottom: 0,\n        title: 0, titleLeft: 0, titleRight: 0,\n        icon: 0, iconTop: 0, iconBottom: 0,\n        text: 0, textLeft: 0, textRight: 0,\n        separator: 0, separatorLeft: 0, separatorRight: 0,\n        actionTop: 0, actionBottom: 0,\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Data from Cache in Phaser 3\nDESCRIPTION: Method to retrieve loaded JSON data from the JSON cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.json;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Font Size Expand Text Configuration\nDESCRIPTION: Adjusts font size to fit container dimensions, with options to fit width only or both width and height.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = scene.rexUI.fontSizeExpandText(textObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = scene.rexUI.fontSizeExpandText(textObject, {\n    fitHeight: true\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Receive Event Listener for Messages\nDESCRIPTION: Adds an event listener for receiving messages and handling the received message object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmessages.on('receive', function(messageObj) {\n    // var senderID = messageObj.senderID;\n    // var senderName = messageObj.senderName;\n    // var receiverID = messageObj.receiverID;\n    // var message = messageObj.message;\n    // var timestamp = messageObj.timestamp;\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a NinePatch with Column/Row Configuration (Method 3)\nDESCRIPTION: Shows how to create a NinePatch where columns and rows are part of the configuration object rather than separate parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch(x, y, width, height, key, {\n    columns: undefined, // leftWidth: undefined, right: undefined,\n    rows: undefined,    // topHeight: undefined, bottomHeight: undefined,\n\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    baseFrame: undefined,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Game Poststep Event Listener in JavaScript\nDESCRIPTION: Shows how to register an event listener for the 'poststep' event in a Phaser 3 game. This is the final event before rendering starts and occurs after all scene updates are complete.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.game.events.on('poststep', function(time, delta){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gravity Well Strength in JavaScript\nDESCRIPTION: Sets the gravity value of a gravity well, which controls the strength of the gravitational force applied to particles. Higher values create stronger attraction or repulsion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nwell.gravity = value;\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Object with Attractors in Phaser 3\nDESCRIPTION: This snippet shows how to configure a Matter object with attractors in Phaser 3. It sets up an options object with a plugin property containing an attractors array of callback functions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-attractor.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n    // ...\n    plugin: {\n        attractors: [\n            callback,\n            // ...\n        ]\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tile Positions with HexagonMap Class\nDESCRIPTION: Methods to create different hexagon grid patterns using the directly imported HexagonMap class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagonmap.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = HexagonMap.hexagon(board, radius);\nvar tileXYArray = HexagonMap.parallelogram(board, type, width, height);\nvar tileXYArray = HexagonMap.triangle(board, type, height);\n```\n\n----------------------------------------\n\nTITLE: Adding Buttons to Tabs Component\nDESCRIPTION: Methods for adding buttons to different groups in the tabs component. These allow dynamic addition of game objects as buttons to left, right, top, or bottom groups.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.addButton(groupName, gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.addLeftButton(gameObject);\ntabs.addRightButton(gameObject);\ntabs.addTopButton(gameObject);\ntabs.addBottomButton(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Particle Emitter in JavaScript\nDESCRIPTION: Creates a bitmap mask from the particle emitter. This mask can be used to mask other game objects based on the particle emitter's visible pixels.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = emitter.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Progress Bar Object\nDESCRIPTION: Code snippet showing how to add a custom progress bar game object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar customProgress = scene.add.rexCustomProgress(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Checking for Any Pattern Match\nDESCRIPTION: A utility method to check if a specific pattern of symbols exists anywhere on the board without processing matches individually.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasAnyMatchN = match.anyMatch(pattern);\n```\n\n----------------------------------------\n\nTITLE: Clearing and Filling Canvas in Phaser 3\nDESCRIPTION: Methods to clear the Canvas or fill it with a color in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.clear();\n\ncanvas.fill(color);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Cursor in Phaser 3\nDESCRIPTION: Sets the default cursor for the entire scene. The CSSString parameter specifies the cursor style, which can include a URL to a custom cursor image.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursor.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.setDefaultCursor(CSSString);\n// CSSString: 'url(assets/input/cursors/sword.cur), pointer'\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Physics Body in Phaser 3\nDESCRIPTION: Demonstrates how to enable or disable a physics body, controlling whether it's updated by the physics simulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setEnable();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.enable = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setEnable(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.enable = false;\n```\n\n----------------------------------------\n\nTITLE: Managing Game Object Scroll Factor in Phaser 3\nDESCRIPTION: Shows how to get and set the scroll factor of a game object, which affects how it moves relative to the camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar scrollFactorX = gameObject.scrollFactorX;\nvar scrollFactorY = gameObject.scrollFactorY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setScrollFactor(scrollFactor);\ngameObject.setScrollFactor(scrollFactorX, scrollFactorY);\n```\n\n----------------------------------------\n\nTITLE: Configuring Inc-Dec Input Styles in Phaser 3\nDESCRIPTION: Complete configuration object for styling increment-decrement input components. Includes detailed options for background, title, increment/decrement buttons, and input text styling. The configuration allows customization of colors, fonts, spacing, icons, and proportions of various elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        inputRow: {\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    \n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n    \n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                }\n            },\n\n            incDec: {\n                incButton: {\n                    background: {\n                        radius: 0,\n                        // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n        \n                        color: undefined,\n                        alpha: undefined,\n                        strokeColor: undefined,\n                        strokeAlpha: undefined,\n                        strokeWidth: undefined,\n                    },\n    \n                    icon: {\n                        key:,\n                        frame:,\n                    },\n    \n                    text: null,\n                    action: null,\n\n                    iconSize: undefined,\n                    iconWidth: undefined, iconHeight: undefined,\n    \n                    space: {\n                        left: 0, right: 0, top: 0, bottom:0, \n                        icon: 0, text: 0\n                    }\n                },\n\n                decButton: {\n                    background: {\n                        radius: 0,\n                        // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n        \n                        color: undefined,\n                        alpha: undefined,\n                        strokeColor: undefined,\n                        strokeAlpha: undefined,\n                        strokeWidth: undefined,\n                    },\n    \n                    icon: {\n                        key:,\n                        frame:,\n                    },\n    \n                    text: null,\n                    action: null,\n\n                    iconSize: undefined,\n                    iconWidth: undefined, iconHeight: undefined,\n    \n                    space: {\n                        left: 0, right: 0, top: 0, bottom:0, \n                        icon: 0, text: 0\n                    }\n                },\n\n                inputTextIndex: 0, // 0,1,2\n            },\n\n\n            inputText: {\n                background: {\n                    color: null,\n                    color2: null,\n                    horizontalGradient: true,\n\n                    stroke: null,\n                    strokeThickness: 2,\n\n                    cornerRadius: 0,\n                    cornerIteration: null\n                },\n                focusStyle: {\n                    // color:\n                    // color2:\n                    // horizontalGradient:\n\n                    // stroke:\n                    // strokeThickness:\n\n                    // cornerRadius:\n                    // cornerIteration:\n                },\n\n                style: {\n                    bold: false,\n                    italic: false,\n                    fontSize: '16px',\n                    fontFamily: 'Courier',\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadowColor: null,\n                    shadowOffsetX: 0,\n                    shadowOffsetY: 0,\n                    shadowBlur: 0,\n                    backgroundColor: null,\n                    backgroundHeight: undefined,\n                    backgroundBottomY: undefined,\n                    offsetX: 0,\n                    offsetY: 0\n                },\n                cursorStyle: {\n                    // bold:\n                    // italic:\n                    // fontSize:\n                    // fontFamily:\n                    // color:\n                    // stroke:\n                    // strokeThickness:\n                    // shadowColor:\n                    // shadowOffsetX:\n                    // shadowOffsetY:\n                    // shadowBlur:\n                    // backgroundColor:\n                    // backgroundHeight:\n                    // backgroundBottomY:\n                    // offsetX:\n                    // offsetY:\n                }\n            },\n\n            space: {\n                left: 0, right: 0, top: 0, bottom: 0,\n                title: 0\n            },\n            \n            proportion: {\n                title: 0, inputField: 0,\n                range: {\n                    slider: 0,\n                    inputText: 0,\n                }\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Behavior in Phaser 3 Sizer Plugin\nDESCRIPTION: Methods for enabling and disabling drag behavior on sizer objects and their children, including configuration options and related events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDraggable(child);\n// sizer.setDraggable(child, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDraggable(elementName);\n// sizer.setDraggable(elementName, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDraggable(child, false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDraggable(elementName, false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDraggable();\n// sizer.setDraggable(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDraggable(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDraggable(child, targetSizer);\n// sizer.setDraggable(child, true, targetSizer);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDraggable(elementName);\n// sizer.setDraggable(elementName, true, targetSizer);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDraggable(child, false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDraggable(elementName, false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDraggable({\n    sensor: child, // or elementName\n    target: undefined, // or a parentSizer\n    draggable: true\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntargetSizer.on('sizer.drag', function(pointer, dragX, dragY) {\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntargetSizer.on('sizer.dragstart', function(pointer, dragX, dragY) {\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntargetSizer.on('sizer.dragend', function(pointer, dragX, dragY, dropped) {\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntargetSizer.on('sizer.drop', function(pointer, dropZone) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Content in TextPage for Phaser 3\nDESCRIPTION: Methods for retrieving lines of specific pages including current, next, previous, first, last, and pages by index.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textpage.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar lines = page.getPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar lines = page.getNextPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar lines = page.getPreviousPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar lines = page.getFirstPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar lines = page.getLastPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar lines = page.getPage(index);\n```\n\n----------------------------------------\n\nTITLE: Initializing Hidden Text Edit in Phaser3\nDESCRIPTION: Creates an invisible Input DOM element to edit string content of a text object. Accepts text, bbcodetext, tagtext or label objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nvar hiddenEdit = this.rexUI.add.hiddenEdit(textObject, config);\n```\n\n----------------------------------------\n\nTITLE: Performing Texture Transitions with TransitionImagePack in Phaser 3\nDESCRIPTION: Demonstrates how to transition from one texture to another using predefined effects, with optional configuration for duration and easing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimage\n    // .setDuration(duration)\n    // .setEaseFunction(ease)\n    .transit(texture, frame, modeName)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.transit({\n    key: undefined,\n    // frame: undefined,\n    // duration: 1000,\n    // ease: 'Linear',\n    mode: modeName\n})\n```\n\n----------------------------------------\n\nTITLE: Setting TileSprite Position\nDESCRIPTION: Methods for setting the tile position of a TileSprite.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilesprite.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTilePosition(x, y);\n\n// or\nimage.tilePositionX = x;\nimage.tilePositionY = y;\n```\n\n----------------------------------------\n\nTITLE: Adding File Drop Zone Object in Phaser 3\nDESCRIPTION: Creates and adds a file drop zone object to a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filedropzone.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileDropZone = scene.add.rexFileDropZone(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Child Properties in ContainerLite for Phaser 3\nDESCRIPTION: Shows methods for setting various properties of child game objects within a ContainerLite instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setChildPosition(child, x, y);\n\ncontainer.setChildRotation(child, rotation);\n\ncontainer.setChildScale(child, scaleX, scaleY);\n\ncontainer.setChildDisplaySize(child, width, height);\n\ncontainer.setChildVisible(child, visible);\n\ncontainer.setChildAlpha(child, alpha);\n```\n\n----------------------------------------\n\nTITLE: Incrementing X Position of Group Members in Phaser 3\nDESCRIPTION: Increases the X position of all group members by a given value, with an optional step parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.incX(value);\n// group.incX(value, step);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ease Function in Phaser 3\nDESCRIPTION: Demonstrates how to get an ease function using a string identifier in Phaser 3. This method allows developers to dynamically select easing functions for animations or transitions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ease-function.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar easeFunction = Phaser.Tweens.Builders.GetEaseFunction(ease);\n// var easeFunction = Phaser.Tweens.Builders.GetEaseFunction(ease, easeParams);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to Parser Instance\nDESCRIPTION: Demonstrates adding custom methods to an Expression Parser instance for use in expressions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = scene.plugins.get('rexExpressionParserPlugin').add();\nparser.randomInt = function(a, b) {\n    return Math.floor(Math.random()*(b-a)+a); \n}\n// var value = parser.exec('randomInt(a, b)', {a:10, b:20});\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Float Array (Four Values)\nDESCRIPTION: Methods for setting four float array uniform values in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set4fv(name, value0, value1, value2, value3);\n// pipelineInstance.set4fv(name, value0, value1, value2, value3, shader);\n```\n\n----------------------------------------\n\nTITLE: Creating Round Rectangle using Imported Class\nDESCRIPTION: Creates a round rectangle shape using the imported RoundRectangle class and adds it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new RoundRectangle(scene, x, y, width, height, radius, fillColor, fillAlpha);\nscene.add.existing(rect);\n```\n\n----------------------------------------\n\nTITLE: Texture Snapshot Operations\nDESCRIPTION: Methods for capturing texture content as images and retrieving pixel color data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamic-texture.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.snapshot(callback);\ntexture.snapshotArea(x, y, width, height, callback, type, encoderOptions);\ntexture.snapshotPixel(x, y, callback);\n```\n\n----------------------------------------\n\nTITLE: Getting or Creating Group Member in Phaser 3\nDESCRIPTION: Retrieves the first active/inactive group member or creates a new one if none is found, using provided parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = group.getFirst(active, true, x, y, key, frame, visible);  // active = true/false\nvar gameObject = group.getFirstAlive(true, x, y, key, frame, visible); // Equal to group.getFirst(true, ...)\nvar gameObject = group.getFirstDead(true, x, y, key, frame, visible); // Equal to group.getFirst(false, ...)\nvar gameObject = group.get(x, y, key, frame, visible); // Equal to group.getFirst(false, true, ...)\n```\n\n----------------------------------------\n\nTITLE: Incrementing Both X and Y Positions of Group Members in Phaser 3\nDESCRIPTION: Increases both X and Y positions of all group members by given values, with optional step parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.incXY(x, y);\n// group.incXY(x, y, stepX, stepY);\n```\n\n----------------------------------------\n\nTITLE: Applying CRT Effect to Camera with Minify Plugin\nDESCRIPTION: Applies the CRT post-processing effect to a Phaser camera using the plugin loaded from the minified file. Configuration options can be passed to customize the effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexcrtpipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Handling Fullscreen Events in Phaser 3\nDESCRIPTION: Demonstrates how to listen for various fullscreen-related events in Phaser 3, including entering and leaving fullscreen mode, and fullscreen failures.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scalemanager.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scale.on('enterfullscreen', function() {}, scope);\nscene.scale.on('fullscreenfailed', function(error) {}, scope);\nscene.scale.on('leavefullscreen', function() {}, scope);\nscene.scale.on('fullscreenunsupported', function() {}, scope);\nscene.scale.on('leavefullscreen', function() {}, scope);\n```\n\n----------------------------------------\n\nTITLE: Custom Dynamic Text Class Implementation\nDESCRIPTION: Shows how to create a custom class extending the DynamicText base class\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyDynamicText extends DynamicText {\n    constructor(scene, x, y, width, height, config)) {\n        super(scene, x, y, width, height, config));\n        scene.add.existing(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom BBCode Text Class in Phaser 3\nDESCRIPTION: Example of creating a custom class that extends the BBCode Text class for additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends BBCodeText {\n    constructor(scene, x, y, text, style) {\n        super(scene, x, y, text, style);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = new MyText(scene, x, y, '[b]h[/b]ello');\n```\n\n----------------------------------------\n\nTITLE: Ordering and Limiting Firestore Query Results\nDESCRIPTION: Sorts query results by specified field(s) and limits the number of documents returned.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).orderBy(key).limit(count)\n```\n\n----------------------------------------\n\nTITLE: Setting Button Dragging Threshold in Phaser 3\nDESCRIPTION: Demonstrates how to set a dragging threshold for a Button instance to prevent unintended clicks during drag operations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.setDragThreshold(distance);  // distance in pixels\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Lines for Text in Phaser 3\nDESCRIPTION: Methods for getting and setting the maximum number of lines that text can display. Limits the vertical expansion of text content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar maxLines = txt.style.maxLines;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setMaxLines(max);\n```\n\n----------------------------------------\n\nTITLE: Setting Ellipse Properties in Phaser 3\nDESCRIPTION: Updates all properties of an ellipse at once to new values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.setTo(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Applying Horrifi Effect to Game Object\nDESCRIPTION: Applies the Horrifi post-processing effect to a game object after loading the plugin from minified file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexhorrifipipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Player with Configuration in Phaser 3\nDESCRIPTION: Detailed example of creating a TCRP player with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar player = scene.plugins.get('rexTCRP').addPlayer(scene, {\n    // timeUnit: 0,        // 'ms'|0|'s'|'sec'|1\n    // dtMode: 0,          // 'abs'|'absolute'|0|'inc'|'increment'|1\n    // commands: [],       // [[time, command], [time, command], ...]\n    // timeScale: 1,\n    // scope: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Camera Visibility in Phaser 3\nDESCRIPTION: Shows how to set and check the visibility of a camera in Phaser 3. Invisible cameras do not render or perform input tests.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setVisible(value);\n// camera.visible = value\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar visible = camera.visible;\n```\n\n----------------------------------------\n\nTITLE: Basic Easemove Usage\nDESCRIPTION: Shows basic usage of moveTo and moveFrom methods after plugin loading\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/easemove.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar easemove = scene.plugins.get('rexeasemoveplugin').moveTo(gameObject, duration, x, y, ease);\nvar easemove = scene.plugins.get('rexeasemoveplugin').moveFrom(gameObject, duration, x, y, ease);\n```\n\n----------------------------------------\n\nTITLE: Managing RTL in Sizer in Phaser 3\nDESCRIPTION: Demonstrates how to set and get the Right-to-Left (RTL) property of a sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setRTL(enable)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar rtl = sizer.rtl\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TextBox Class in Phaser 3\nDESCRIPTION: Shows how to create a custom class that extends the TextBox component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTextBox extends RexPlugins.UI.TextBox {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Board Plugin in Phaser3 Game Configuration\nDESCRIPTION: Imports and configures the Board plugin in the game configuration, mapping it to rexBoard in the scene plugins.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-shape.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from PNG Buffer Using PNG Appender Plugin\nDESCRIPTION: This snippet shows how to extract custom data from a PNG buffer using the PNG Appender plugin. It includes a comment explaining the return value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/png-appender.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = scene.plugins.get('rexPNGAppender').extract(pngBuffer);\n```\n\n----------------------------------------\n\nTITLE: Accessing Gamepad Instances\nDESCRIPTION: Methods to retrieve connected gamepad instances, either all at once or by specific index.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gamepad.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar gamepads = scene.input.gamepad.getAll();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gamepad = scene.input.gamepad.getPad(0);\n// var gamepad = scene.input.gamepad.getPad(index);\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Input with Class Constructor\nDESCRIPTION: Creates a checkbox input using the class constructor with position, size, color, and configuration parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar checkbox = new Checkbox(scene, x, y, width, height, color, config);\nscene.add.existing(checkbox);\n```\n\n----------------------------------------\n\nTITLE: Setting Drag on Physics Body in Phaser 3\nDESCRIPTION: Shows how to set and get drag on a physics body, which reduces speed per second. Also demonstrates how to enable or disable drag and damping.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setDrag(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setDragX(x);\nbody.setDragY(y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar dx = body.drag.x;\nvar dy = body.drag.y;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAllowDrag();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAllowDrag(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setDamping(true);\n```\n\n----------------------------------------\n\nTITLE: Adding Eight Direction Behavior to Game Object\nDESCRIPTION: Add the Eight Direction behavior to a game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eightdirection.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar eightDirection = scene.plugins.get('rexeightdirectionplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Moving Array Elements in Phaser 3\nDESCRIPTION: A collection of Phaser utility functions for moving elements within an array, including bringing items to the top or bottom, moving up or down, and rotating elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-sort.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.BringToTop(arr, item);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.SendToBack(arr, item);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.MoveUp(array, item);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.MoveDown(array, item);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.MoveTo(array, item, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.Swap(array, item1, item2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.RotateLeft(array, steps);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.RotateRight(array, steps);\n```\n\n----------------------------------------\n\nTITLE: Getting GrayScale Effect Instance from Camera\nDESCRIPTION: Retrieves the grayscale post-processing effect instance from a camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGrayScalePipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexGrayScalePipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Creating a Buttons Container with Configuration in Phaser 3\nDESCRIPTION: Creates a buttons container with comprehensive configuration options. This includes setting orientation, button elements, alignment, expansion behavior, and event handling options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = scene.rexUI.add.buttons({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    orientation: 0,\n    // rtl: false,\n    // buttonsType: undefined,\n\n    // Elements\n    // background: backgroundGameObject,\n\n    buttons: [\n        buttonGameObject,\n        buttonGameObject,\n        // ...\n    ],\n    expand: false,\n    align: undefined,\n    click: {\n        mode: 'pointerup',\n        clickInterval: 100\n    },\n\n    // space: 0,   // deprecated \n    // space: { left: 0, right:0, top:0, bottom:0, item:0 },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n    // eventEmitter: this,\n    // groupName: undefined,\n\n    // setValueCallback: undefined,  // or setButtonStateCallback: undefined\n    // setValueCallbackScope: undefined  // or setButtonStateCallbackScope: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: NPM command to install the Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/drag.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating Round Rectangle Shape in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Adds a round rectangle shape to the scene. This code creates a rounded rectangle with specified dimensions, corner radius, and fill color.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar shape = scene.rexUI.add.roundRectangle(x, y, width, height, radius, fillColor);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom Shader Class in Phaser 3\nDESCRIPTION: Creates an instance of a custom shader class, passing the scene, shader key, position, size, and optional textures as parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar shader = new MyShader(scene, key, x, y, width, height, textures);\n```\n\n----------------------------------------\n\nTITLE: Creating Text with Automatic Word Wrapping\nDESCRIPTION: Creates a Tag Text object with automatic word wrapping at a specified width.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.make.text({\n    x: 400,\n    y: 100,\n    text: 'The sky above the port was the color of television, tuned to a dead channel.',\n    origin: { x: 0.5, y: 0.5 },\n    style: {\n        font: 'bold 25px Arial',\n        fill: 'white',\n        wrap: {\n            mode: 'word'     // 0|'none'|1|'word'|2|'char'|'character'\n            width: 300\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Resuming Matter.js Physics in Phaser 3\nDESCRIPTION: Code snippet for resuming the Matter.js physics world in a Phaser 3 scene after it has been paused.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-world.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.world.resume();\n```\n\n----------------------------------------\n\nTITLE: Adding Commands to Arcade TCRP Recorder\nDESCRIPTION: Code for adding commands to the recorder with various formats and an optional time offset parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.addCommand([fnName, param0, param1, ...]);\n// recorder.addCommand([command0, command1, ...]);\n// recorder.addCommand([fnName, param0, param1, ...], offset);  // time-offset in step-count\n```\n\n----------------------------------------\n\nTITLE: Injecting getBounds Method for BitmapText in Phaser 3\nDESCRIPTION: This snippet demonstrates how to add the getBounds method to BitmapText objects in Phaser 3, which is necessary for proper masking in scrollable panels.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Components = Phaser.GameObjects.Components;\nPhaser.Class.mixin(\n    Phaser.GameObjects.BitmapText,\n    [\n        Components.ComputedSize,\n        Components.GetBounds\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Listening for State Change Events\nDESCRIPTION: Shows how to listen for state change events, including general state changes and specific state entry/exit events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nstates.on('statechange', function(states) {\n    console.log( states.prevState + '->' + states.state );\n});\n\nstates.on('exit_A', function(states) {\n    /*...*/\n});\n\nstates.on('enter_B', function(states) {\n    /*...*/\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Video from URL in Phaser 3\nDESCRIPTION: Two-step process to create a Video Game Object and then load video content from a URL.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar video = scene.add.video(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.loadURL(url);\n// video.loadURL(urls, noAudio, crossOrigin);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements from Tabs Component\nDESCRIPTION: Methods for accessing various elements within the tabs component, including background, panel, and buttons from different groups. These methods provide ways to access and manipulate UI elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = tabs.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar panel = tabs.getElement('panel');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = tabs.getButton(groupName, index)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = tabs.getElement('leftButtons');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = tabs.getLeftButton(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = tabs.getElement('leftButtons[0]');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = tabs.getElement('rightButtons');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = tabs.getRightButton(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = tabs.getElement('rightButtons[0]');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = tabs.getElement('topButtons');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = tabs.getTopButton(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = tabs.getElement('topButtons[0]');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = tabs.getElement('bottomButtons');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = tabs.getBottomButton(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = tabs.getElement('bottomButtons[0]');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tabs.getElement('#' + name);\n// var gameObject = tabs.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tabs.getByName(name);\n// var gameObject = tabs.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Skewable Render Texture in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to create a bitmap mask from the skewable render texture, which can be used for masking other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-rendertexture.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Mask Game Object in Phaser 3 Transition\nDESCRIPTION: Assigns a custom mask game object to be used in the transition. This can be a graphics object, shape, or custom-progress shape for more complex masking effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setMaskGameObject(maskGameObject);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Child Game Objects in a Layer in Phaser 3\nDESCRIPTION: Shows how to use the 'each' method to iterate over all child game objects in a Layer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.each(function(gameObject) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating a LokiJS Database\nDESCRIPTION: Initialize a new LokiJS database instance in memory or from a file. The optional configuration parameter can be used to specify database settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar db = new loki();\n// var db = new loki('loki.json', config);  // load database from file\n```\n\n----------------------------------------\n\nTITLE: MoveTo Movement Control Methods\nDESCRIPTION: Methods for controlling movement including moveTo, moveFrom, and moveToward with various parameter options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/moveto.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.moveTo(x, y);\n\nmoveTo.moveTo({\n    x: 0,\n    y: 0,\n    // speed: 0\n});\n\nmoveTo.moveFrom(x, y);\n\nmoveTo.moveFrom({\n    x: 0,\n    y: 0,\n    // speed: 0\n});\n\nmoveTo.moveToward(angle, distance);\n```\n\n----------------------------------------\n\nTITLE: Adding Button Behavior to Game Object in Phaser 3\nDESCRIPTION: Shows how to add button behavior to a game object using the loaded Button plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = scene.plugins.get('rexbuttonplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Button Input Control Operations in Phaser3\nDESCRIPTION: Methods for enabling, disabling and toggling button inputs including individual and batch operations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.setButtonEnable(index);\nbuttons.setButtonEnable();\nbuttons.setButtonEnable(index, true);\nbuttons.setButtonEnable(false);\nbuttons.toggleButtonEnable(index);\nbuttons.toggleButtonEnable();\nvar enabled = bottons.getButtonEnable(index);\n```\n\n----------------------------------------\n\nTITLE: Adding Drop-down List Object in Phaser 3 Scene\nDESCRIPTION: This snippet demonstrates how to add a drop-down list object to a Phaser 3 scene after loading the plugin. It uses the scene.rexUI.add.dropDownList method to create the object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropDownList = scene.rexUI.add.dropDownList(config);\n```\n\n----------------------------------------\n\nTITLE: Creating NinePatch2 with Dimension Configuration Object\nDESCRIPTION: Creates a NinePatch2 instance with dimensions in a configuration object. This pattern consolidates positioning and sizing parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch2(x, y, {\n    width: 1, height: 1,\n    key: undefined,\n    columns: undefined,\n    rows: undefined,\n\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    baseFrame: undefined,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Place Chess Action in Bejeweled\nDESCRIPTION: Shows how to implement a custom place chess action using a PopUp effect for each chess piece.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (chessArray, board, bejeweled) {\n    const duration = 500; //ms\n    for (var i = 0, cnt = chessArray.length; i < cnt; i++) {\n        var fade = PopUp(chessArray[i], duration);\n        bejeweled.waitEvent(fade, 'complete');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Post FX Pipeline from Pipeline Manager\nDESCRIPTION: Method to completely remove a post FX pipeline from the pipeline manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineManager = scene.sys.renderer.pipelines;\npipelineManager.remove(PostFxName);\n```\n\n----------------------------------------\n\nTITLE: Scrolling TextAreaInput Content in JavaScript\nDESCRIPTION: These snippets show various methods to scroll the content of the TextAreaInput, including scrolling by lines, setting and getting scroll position, and checking for overflow.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.scrollLine(lineCount);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.childOY = oy;\n// textAreaInput.setChildOY(oy);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.setChildOY(oy, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.addChildOY(oy);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.addChildOY(oy, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar childOY = textAreaInput.childOY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar topOY = textAreaInput.topChildOY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bottomOY = textAreaInput.bottomChildOY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isOverflow = textAreaInput.isOverflow;\n```\n\n----------------------------------------\n\nTITLE: Configuring FixWidthButtons in Phaser 3\nDESCRIPTION: Creates a new FixWidthButtons instance with detailed configuration options. This includes setting up the layout, button objects, alignment, and event handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthbuttons.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = scene.rexUI.add.fixWidthButtons({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    // Elements\n    // background: backgroundGameObject,\n\n    buttons: [\n        buttonGameObject,\n        buttonGameObject,\n        // ...\n    ],\n    // rtl: false,\n    align: 0,\n    click: {\n        mode: 'pointerup',\n        clickInterval: 100\n    },\n\n    // space: 0,\n    // space: {\n    //     left: 0, right: 0, top: 0, bottom: 0,\n    //     item: 0, line: 0,\n    //     indentLeftOdd: 0, indentLeftEven: 0,\n    //     indentTopOdd: 0, indentTopEven: 0,\n    // },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n    // eventEmitter: this,\n    // groupName: undefined,\n\n    // buttonsType: undefined,\n    // setValueCallback: undefined,  // or setButtonStateCallback: undefined\n    // setValueCallbackScope: undefined  // or setButtonStateCallbackScope: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Centering a Triangle in Phaser 3\nDESCRIPTION: Centers the triangle on the specified coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Triangle.CenterOn(triangle, x, y);\n```\n\n----------------------------------------\n\nTITLE: Importing Life-time Class for Direct Usage\nDESCRIPTION: Demonstrates how to import the Life-time class for direct usage without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lifetime.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport LifeTime from 'phaser3-rex-plugins/plugins/lifetime.js';\n```\n\n----------------------------------------\n\nTITLE: Creating Private Animation for Sprite in Phaser 3\nDESCRIPTION: Creates a private animation that can only be used by the specific sprite instance. The 'config' parameter defines the animation properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.anims.create(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Game Object Style in Phaser 3\nDESCRIPTION: This snippet demonstrates the structure for styling an Image game object in Phaser 3. It includes properties for key, frame, tint, alpha, scale, flip, origin, and state-specific overrides for active, hover, and disable states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // $type: 'image',\n\n    key:\n    // frame:\n    // tint: 0xffffff,\n    // alpha: 1,\n    // scale: 1,\n    // flipX: false,\n    // flipY: false,\n    // origin:\n    // originX: \n    // originY:\n\n    // effects: true,\n    // Style override in active state\n    // 'active.key': undefined,\n    // 'active.frame': undefined,\n    // 'active.tint': undefined,\n    // 'active.alpha': undefined,\n    // 'active.scale': undefined,\n    // 'active.glowColor': null,\n    // ...\n\n    // Style override in hover state\n    // 'hover.key': undefined,\n    // 'hover.frame': undefined,\n    // 'hover.tint': undefined,\n    // 'hover.alpha': undefined,\n    // 'hover.scale': undefined,\n    // 'hover.glowColor': null,\n    // ...\n\n    // Style override in disable state\n    // 'disable.key': undefined,\n    // 'disable.frame': undefined,\n    // 'disable.tint': undefined,\n    // 'disable.alpha': undefined,\n    // 'disable.scale': undefined,\n    // 'disable.glowColor': null,\n    // ...    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag Plugin in Game Setup\nDESCRIPTION: Configuration setup for importing and initializing the drag plugin globally in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/drag.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport DragPlugin from 'phaser3-rex-plugins/plugins/drag-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexDrag',\n            plugin: DragPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask from an Image in Phaser 3\nDESCRIPTION: Creates a bitmap mask from an image object, which can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/image.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Child Management in Phaser3 Sizer\nDESCRIPTION: Methods for adding, accessing, and managing child elements within the sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.addChildrenMap(key, child);\n\nvar child = sizer.getElement(key);\n\nvar child = sizer.getByName(name);\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene Property in Phaser 3 Rex Board Plugin\nDESCRIPTION: Demonstrates how to access the Scene property of a board object. The Scene property represents the Phaser Scene that the board belongs to.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene = board.scene;\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter Attractors Plugin in Phaser 3 Game Config\nDESCRIPTION: This snippet shows how to enable the Matter Attractors plugin in the Phaser 3 game configuration. It sets the 'attractors' option to true within the physics.matter.plugins object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-attractor.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    physics: {\n        matter: {\n            // ...\n            plugins: {\n                attractors: true,\n                // ...\n            }\n            // ...\n        }\n    }\n    // ...\n}\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding File Chooser Instance\nDESCRIPTION: Creating and configuring a file chooser instance with accept filters and multiple file selection options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filechooser.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileChooser = scene.add.rexFileChooser({\n    accept: '',\n    multiple: false\n});\n// var fileChooser = scene.add.rexFileChooser(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: DropDownList Button Over Callback\nDESCRIPTION: Example of the callback function that handles pointer over events for buttons in the dropdown list. It receives the button object, index, pointer, and event as parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(button, index, pointer, event) {\n    // this : dropDownList\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Falling Action in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This snippet demonstrates the default falling action for chess pieces. It iterates through the board from bottom to top, moving each chess piece downward as far as possible.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (board, bejeweled) {\n    var tileZ = bejeweled.chessTileZ,\n        chess, moveTo;\n\n    for (var tileY = (board.height - 1); tileY >= 0; tileY--) { // bottom to top\n        for (var tileX = 0, cnt = board.width; tileX < cnt; tileX++) { // left to right\n            chess = board.tileXYZToChess(tileX, tileY, tileZ);\n            if (chess === null) {\n                continue;\n            }\n            moveTo = bejeweled.getChessMoveTo(chess);\n            do {\n                moveTo.moveToward(1);\n            } while (moveTo.lastMoveResult)\n            if (moveTo.isRunning) {\n                bejeweled.waitEvent(moveTo, 'complete');\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Transition Complete Event in Phaser 3\nDESCRIPTION: Sets up an event listener for the 'complete' event, which fires when a transition animation completes naturally or is stopped.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimage.on('complete', function(){\n})\n```\n\n----------------------------------------\n\nTITLE: Creating ExpBar UI Component in Phaser 3\nDESCRIPTION: This code snippet demonstrates how to create an ExpBar UI component using the Rex UI plugin in Phaser 3. It includes a comprehensive set of configuration options for customizing the appearance and behavior of the ExpBar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-expbar.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar expBar = scene.rexUI.add.expBar({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    orientation: 0,\n    // rtl: false,\n\n    background: backgroundGameObject,\n    icon: iconGameObject,\n    iconMask: false,\n\n    nameText: nameTextGameObject,\n    valueText: valueTextGameObject,\n    // valueTextFormatCallback: function(value, min, max) {\n    //     return `${value}/${max}`;\n    // },\n    // valueTextFormatCallback: null,\n\n    // barShape: 'line',   // 'line', or 'circle'\n\n    // line bar\n    bar: {\n        trackColor: undefined,\n        trackThickness: 2,\n        trackStrokeColor: undefined,\n        barColor: undefined,\n        barColor2: undefined,\n\n        skewX: 0,\n\n        rtl: false,\n\n        easeValue: {\n            duration: 0,\n            ease: 'linear'\n        },\n    }, \n\n    // circle bar\n    /*\n    bar: {\n        barColor: undefined,\n        barColor2: undefined,\n        trackColor: undefined,\n        centerColor: undefined,\n        thickness: 0.2,\n        startAngle: Phaser.Math.DegToRad(270),\n        endAngle: Phaser.Math.DegToRad(270+360),\n        anticlockwise: false,\n    }\n    */\n\n    // bar: CustomProgressGameObject,\n    \n    // bar: undefined,\n\n    action: actionGameObject,\n    actionMask: false,\n\n    align: {        \n        text: 'bottom',  // 'top', 'center', 'bottom'\n    },\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        icon: 0, iconTop: 0, iconBottom: 0,\n        name: 0, value: 0,\n        bar:0, barBottom: 0, barLeft: 0, barRight: 0,\n        text: 0,\n        actionTop: 0, actionBottom: 0,\n    },\n\n    // easeDuration: 1000,\n\n    levelCounter: {\n        table: function(level) { return level * 100; },\n        // table: [0, 100, 200, 300,],        \n        // maxLevel: -1,        \n        // exp: 0,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Zone Class in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to define a custom Zone class extending Phaser.GameObjects.Zone. It includes the class definition and an example of instantiating the custom class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/zone.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyZone extends Phaser.GameObjects.Zone {\n    constructor(scene, x, y, width, height) {\n        super(scene, x, y, width, height);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar zone = new MyZone(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Setting and Clamping Scroll Position by Percentage in TextArea\nDESCRIPTION: Shows how to set the scroll position by percentage with clamping to prevent scrolling beyond content boundaries.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.setT(t, true);\n```\n\n----------------------------------------\n\nTITLE: Initializing i18next During Preload Stage\nDESCRIPTION: Code demonstrating how to initialize the i18next library during the preload stage with basic configuration options like language and namespace settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rextexttranslationplugin').initI18Next(scene, {\n    lng: 'dev',\n    fallbackLng: 'dev',\n    ns: 'translation',\n\n    // resources: {\n    //     'dev': {\n    //         'translation': {\n    //             key: value,  \n    //         }\n    //     }\n    // }\n\n    // debug: true,\n\n    // backend: {\n    //     loadPath: '',\n    //     parse: function(data) { return JSON.parse(data); }\n    // },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Frames to Frame Manager in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to add frames to the Frame Manager from game objects or custom drawing functions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/framemanager.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nframeManager.paste(frameName, gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nframeManager.draw(frameName, callback, scope)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nframeManager.addEmptyFrame(frameName);\n// frameManager.addEmptyFrame(frameName, width, height);\n```\n\n----------------------------------------\n\nTITLE: Handling Drag End Event in Phaser 3\nDESCRIPTION: Event handler for when dragging of the mini-board ends. Handles placing the chess piece on the main board at the nearest grid position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-miniboard.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nminiBoard.on('dragend', function(pointer, dragX, dragY){\n    /*\n    miniBoard.putOnMainBoard(mainBoard);\n    if (miniBoard.mainBoard) {\n    }\n    */\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Reading Checkbox States in Dialog - JavaScript\nDESCRIPTION: Method to retrieve the states of all checkbox buttons in choices as an object mapping button names to boolean states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar states = dialog.getChoicesButtonStates();\n```\n\n----------------------------------------\n\nTITLE: Layouting ExpBar Children in Phaser 3\nDESCRIPTION: This code snippet shows how to arrange the position of all elements within the ExpBar component. The layout() method is called to update the positions of child elements based on the current configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-expbar.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpBar.layout();\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Instance with Configuration\nDESCRIPTION: Shows complete configuration options for creating a dropdown instance including expand direction, alignment, bounds, and transition settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dropdown.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropDown = scene.plugins.get('rexDropDown').add(gameObject, {        \n    // expandDirection: 0,\n    // alignTargetX: \n    // alignTargetY: \n    // alignOffsetX: \n    // alignOffsetY: \n    // bounds:\n\n    // When to close dropdown dialog?\n    // touchOutsideClose: false,\n    // anyTouchClose: false,\n\n    // duration: {\n    //     in: 200,\n    //     out: 200\n    // }\n\n    // transitIn: undefined,\n    // transitOut: undefined,\n\n    // destroy: true\n});\n```\n\n----------------------------------------\n\nTITLE: Fitting Tile Positions to Board and Retrieving Them\nDESCRIPTION: Code to offset tile positions to (0,0), fit them to the board, and iterate through the resulting positions. Useful for initializing board elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagonmap.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = board.fit(tileXYArray);\n\nvar tileXY;\nfor(var i = 0, cnt = tileXYArray.length; i < cnt; i++) {\n    tileXY = tileXYArray[i];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Single Room Instance with Complete Configuration\nDESCRIPTION: Creates a single room instance with detailed configuration options including root path, user limits, broadcast settings, and data tables.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar room = scene.plugins.get('rexFirebase').add.singleRoom({\n    root: '',\n    // maxUsers: 0,\n    // userID: '',\n    // userName: '',\n    // broadcast: true,\n    // tables: undefined,\n\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Blur Effect in Phaser 3\nDESCRIPTION: Implementation of blur effect with quality levels (low, medium, high), custom offset, strength, color, and blur steps. The blur can be applied as pre-fx to game objects or post-fx to objects/camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addBlur(quality, x, y, strength, color, steps);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addBlur(quality, x, y, strength, color, steps);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addBlur(quality, x, y, strength, color, steps);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setActive(false);\n// effect.active = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.preFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.quality = quality;\neffect.x = x;\neffect.y = y;\neffect.strength = strength;\neffect.color = color;\neffect.steps = steps;\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Time Uniform in Phaser 3 Shaders\nDESCRIPTION: Gets or sets the time uniform value in a shader. The time value represents elapsed game time in seconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar time = shader.getUniform('time').value;\n// var time = shader.uniforms.time.value\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshader.setUniform('time.value', time);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom ExpBar Class in Phaser 3\nDESCRIPTION: This code snippet shows how to define a custom ExpBar class by extending the RexPlugins.UI.ExpBar class. It allows for additional customization and functionality to be added to the ExpBar component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-expbar.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyExpBar extends RexPlugins.UI.ExpBar {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Plugin in Phaser Game Configuration\nDESCRIPTION: JavaScript code to import and configure the Firebase plugin in the Phaser game configuration. This approach registers the plugin globally for use across all scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-overview.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport FirebasePlugin from 'phaser3-rex-plugins/plugins/firebase-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFirebase',\n            plugin: FirebasePlugin,\n            start: true\n        }]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Updating Canvas Texture in Phaser 3\nDESCRIPTION: Methods to update the Canvas texture in Phaser 3, either on next render or immediately.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.needRedraw();\n// or\ncanvas.dirty = true;\n\n// Update texture now\ncanvas.updateTexture();\n// or update canvas and texture\ncanvas.updateTexture(function(canvasElem, context) { });\n// canvas.updateTexture(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Extending AlphaMaskImage Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom AlphaMaskImage class by extending the base component. This allows for adding custom functionality to alpha-masked images.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyImage extends RexPlugins.UI.AlphaMaskImage {\n    constructor(scene, x, y, key, frame, config) {\n        super(scene, x, y, key, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Barrel Effect Properties\nDESCRIPTION: Methods for getting and setting various properties of the barrel effect like shrink mode, radius, power, and intensity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-barrel.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setShrinkMode(true);\npipelineInstance.setRadius(radius);\npipelineInstance.setPower(power);\npipelineInstance.setIntensity(intensity);\npipelineInstance.setCenter(x, y);\n```\n\n----------------------------------------\n\nTITLE: Loading Script Tag Loader Plugin in Phaser 3 Scene Configuration\nDESCRIPTION: This snippet shows how to load the Script Tag Loader plugin in the preload stage of a Phaser 3 scene configuration. It demonstrates adding the plugin to the scene and using it to load a script.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scripttagloader.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar sceneConfig = {\n    // ....\n    pack: {\n        files: [{\n            type: 'plugin',\n            key: 'rexscripttagloaderplugin',\n            url: 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexscripttagloaderplugin.min.js',\n            start: true\n        }]\n    }\n};\nclass MyScene extends Phaser.Scene {\n    constructor() {\n        super(sceneConfig)\n    }\n    // ....\n\n    preload() {\n        // rexscripttagloaderplugin will be installed before preload(), but not added to loader yet\n        // Call addToScene(scene) to add this await loader to loader of this scene\n        this.plugins.get('rexscripttagloaderplugin').addToScene(this);\n\n        this.load.rexScriptTag(url);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Child Expansion in Sizer in Phaser 3\nDESCRIPTION: Shows how to set and get the expansion property of a specific child within the sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setChildExpand(child, expand)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar expand = sizer.getChildExpand(child)\n```\n\n----------------------------------------\n\nTITLE: Pinning and Unpinning Game Objects in Sizer for Phaser 3 Rex UI\nDESCRIPTION: Demonstrates how to pin and unpin game objects to a Sizer. Pinning adds a game object to the Sizer without affecting its layout, while unpinning removes it. The unpin method can optionally destroy the child object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.pin(gameObject);\n\n// or\nsizer.pinLocal(gameObject);\n\n// Unpinning\nsizer.unpin(child);\n// sizer.unpin(child, destroyChild);\n```\n\n----------------------------------------\n\nTITLE: File Access in FileChooser Component\nDESCRIPTION: Accessing selected files from the FileChooser component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar files = fileChooser.files;\n```\n\n----------------------------------------\n\nTITLE: Starting Text Typing Animation in Phaser TextBox\nDESCRIPTION: Initiates typing animation for the text box with specified content and typing speed. The speed parameter defines the delay between each character appearing in milliseconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.start(content, typingSpeed);\n```\n\n----------------------------------------\n\nTITLE: Sorting Children by Data in Phaser3 Rex UI\nDESCRIPTION: Method to sort child elements based on their data values. Accepts a key parameter to specify which data property to sort by and a descending flag to control sort order.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.sortChildrenByData(key, descending).layout();\n```\n\n----------------------------------------\n\nTITLE: Importing ScrollBar Class Direct\nDESCRIPTION: How to import the ScrollBar class directly from the components package and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ScrollBar } from \"phaser3-rex-plugins/templates/ui/ui-components.js\";\nvar sizer = new ScrollBar(scene, config);\nscene.add.existing(sizer);\n```\n\n----------------------------------------\n\nTITLE: Creating TextBox Object via Plugin\nDESCRIPTION: Shows how to create a TextBox object after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar textBox = scene.rexUI.add.textBox(config);\n```\n\n----------------------------------------\n\nTITLE: Creating RotateTo Instance with Configuration Options\nDESCRIPTION: Creates a new RotateTo instance with configuration options specifying speed, enable state, and time scale.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotateTo = scene.plugins.get('rexRotateTo').add(gameObject, {\n    // speed: 180,\n    // enable: true,\n    // timeScale: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Direction for WarpPostFX in Phaser 3\nDESCRIPTION: These snippets show how to get and set the direction for the WarpPostFX effect in Phaser 3. The direction is represented by x and y values, which can be either 1 or -1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp-transition.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar direction = pipelineInstance.direction;  // {x, y}\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setDirection(x, y);  // x, y : 1, or -1\n```\n\n----------------------------------------\n\nTITLE: Adding Youtube Player Object using Plugin in Phaser 3\nDESCRIPTION: Creates a Youtube Player object in a Phaser 3 scene using the plugin method, specifying position, dimensions, and configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar youtubePlayer = scene.add.rexYoutubePlayer(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Motion with Polar Coordinates in Phaser 3\nDESCRIPTION: Demonstrates how to create a circular motion effect using the polar coordinate properties and Phaser 3's tween system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/polar-coordinate.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.tweens.add({\n    targets: gameObject,\n    polarAngle: 360,\n    duration: 3000\n})\n```\n\n----------------------------------------\n\nTITLE: Multiplying Vectors in Phaser 3\nDESCRIPTION: Multiplies the components of the current Vector2 by the corresponding components of another vector or vector-like object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvector.multiply(src); // src: {x, y}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tap Input Instance in Phaser 3\nDESCRIPTION: Demonstrates the creation of a tap input instance with various configuration options for customizing tap detection behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-tap.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar tap = scene.rexGestures.add.tap({\n    // enable: true,\n    // bounds: undefined,\n\n    // time: 250,\n    // tapInterval: 200,\n    // threshold: 9,\n    // tapOffset: 10,\n\n    // taps: undefined,\n    // minTaps: undefined,\n    // maxTaps: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Child Alignment in Sizer in Phaser 3\nDESCRIPTION: Shows how to set and get the alignment of a specific child within the sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setChildAlign(child, align)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar align = sizer.getChildAlign(child)\n```\n\n----------------------------------------\n\nTITLE: Setting Depth of Group Members in Phaser 3\nDESCRIPTION: Sets the depth (rendering order) of all group members, with an optional step parameter for layering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setDepth(value, step);\n```\n\n----------------------------------------\n\nTITLE: Loading Cross-Stitching Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the cross-stitching pipeline plugin using a minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcrossstitchingpipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcrossstitchingpipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Tap Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for tap gestures on any tile in the board. The callback receives the tap behavior object (which includes tap count) and the tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('tiletap', function(tap, tileXY) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n    // var tapsCount = tap.tapsCount;\n});\n```\n\n----------------------------------------\n\nTITLE: Managing TextTruncator Content\nDESCRIPTION: Methods to set, append, and retrieve text content in the TextTruncator, with automatic display updates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttruncator.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntruncator.setText(content);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntruncator.appendText(content);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = truncator.text;\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Wait Events in Phaser3 Tag Player\nDESCRIPTION: Event handlers for custom wait events in the Tag Player system. This allows for implementing custom waiting behaviors with callback functions to continue typing when ready.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('wait', function(callback) {\n    // Invoke `callback()` to continue typing\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Scale-Down Destroy Animation for Height Only in Phaser 3\nDESCRIPTION: Scales down a game object's height over a specified duration and then destroys it, while keeping the width constant. Works with both callback and Promise patterns.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDownDestroy(duration, 'y');\n// gameObject.scaleDownDestroy(duration, 'y', ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDownDestroyPromise(duration, 'y')\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Managing RTL (Right-to-Left) Text in Phaser 3\nDESCRIPTION: Shows how to set and change RTL (Right-to-Left) text rendering for a Phaser 3 Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setRTL(rtl).setText(newContent);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Child Properties in Phaser 3 Sizer Plugin\nDESCRIPTION: Methods for setting various properties of child objects within a sizer, including position, rotation, scale, size, visibility, and alpha.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setChildPosition(child, x, y);\nsizer.setChildRotation(child, rotation);\nsizer.setChildScale(child, scaleX, scaleY);\nsizer.setChildDisplaySize(child, width, height);\nsizer.setChildVisible(child, visible);\nsizer.setChildAlpha(child, alpha);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask from NinePatch\nDESCRIPTION: Creates a bitmap mask from a NinePatch object. This mask can be used to mask other game objects in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = ninePatch.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Managing TextTruncator Maximum Dimensions\nDESCRIPTION: Methods to set and get the maximum width and height constraints for text truncation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttruncator.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntruncator.setMaxWidth(width).updateText();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = truncator.maxWidth;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntruncator.setMaxHeight(height).updateText();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar height = truncator.maxHeight;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Input Hit Zone in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to make a Zone object interactive for input events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/zone.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nzone.setInteractive();\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding Buttons in Tabs Component\nDESCRIPTION: Methods for showing and hiding buttons in the tabs component. Hidden elements won't be counted during layout calculations. After showing or hiding buttons, layout() should be called to update the UI.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.showButton(groupName, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.showLeftButton(index);\ntabs.showRightButton(index);\ntabs.showTopButton(index);\ntabs.showBottomButton(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.hideButton(groupName, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.hideLeftButton(index);\ntabs.hideRightButton(index);\ntabs.hideTopButton(index);\ntabs.hideBottomButton(index);\n```\n\n----------------------------------------\n\nTITLE: Creating Life-time Instance with Configuration\nDESCRIPTION: Demonstrates creating a Life-time instance with various configuration options such as lifetime duration, destroy behavior, and auto-start.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lifetime.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar lifeTime = scene.plugins.get('rexLifeTime').add(gameObject, {\n    lifeTime: 1000,\n    // destroy: true,\n    // start: true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to include the Button plugin in the Phaser 3 game configuration for global use.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ButtonPlugin from 'phaser3-rex-plugins/plugins/button-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexButton',\n            plugin: ButtonPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading the Glow Filter Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the Glow Filter Pipeline plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexglowfilterpipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexglowfilterpipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading UI Plugin via Minify File in Phaser 3\nDESCRIPTION: Code to load the UI plugin as a scene plugin in the preload stage and create a label object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = scene.rexUI.add.label(config);\n```\n\n----------------------------------------\n\nTITLE: Removing a Timer from Scene in Phaser 3\nDESCRIPTION: Removes a timer from all internal lists in the scene's timeline, allowing the timer to be reused later.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.time.removeEvent(timer);\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Card Instance\nDESCRIPTION: Creates a new perspective card instance with configuration options for front/back faces and flipping behavior\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-card.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar card = scene.add.rexPerspectiveCard({\n    x: 0, y: 0,\n\n    back: {key, frame},\n    front: {key, frame},\n    face: 0,\n\n    orientation: 0,\n\n    // width,\n    // height,\n\n    // flip : {\n    //     frontToBack: 0,\n    //     backToFront: 1,\n    //     duration: 1000,\n    //     ease: 'Cubic',\n    //     delay: 0,\n    // }\n    // flip: false\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Pages Class\nDESCRIPTION: Code to create a custom class that extends the base Pages class with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPages extends RexPlugins.UI.Pages {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Image Integration in BBCode Text\nDESCRIPTION: Configuration for adding and managing images within BBCode text, including size, positioning, and padding options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.addImage(imgKey, {\n    key: textureKey,\n    frame: frameName,\n    width: undefined,\n    height: undefined,\n    y: 0,\n    left: 0,\n    right: 0,\n    originX: 0,\n    originY: 0,\n    tintFill: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping Text Typing and Displaying Full Text\nDESCRIPTION: Stops the typing animation and immediately shows all the text. This triggers 'stop', 'type', and 'pageend' events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.stop(true);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: JavaScript code to initialize the Firebase application with configuration details.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-files.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Out Current User\nDESCRIPTION: Signs out the currently authenticated user. This terminates the user's session and triggers the onAuthStateChanged listener with a null user.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfirebaseApp.auth().signOut();\n```\n\n----------------------------------------\n\nTITLE: Using Phaser.Math.CeilTo for Basic Ceiling Operation in JavaScript\nDESCRIPTION: Rounds a value up to the nearest integer using the ceiling function. This is the simplest form with default parameters (place=0, base=10).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/round-to.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.CeilTo(value);\n```\n\n----------------------------------------\n\nTITLE: Extending Checkbox Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom Checkbox class by extending the base component. This allows for adding custom functionality to checkbox inputs.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCheckbox extends RexPlugins.UI.Checkbox {\n    constructor(scene, x, y, width, height, color, config) {\n        super(scene, x, y, width, height, color, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Randomizing Tiles in Tilemaps\nDESCRIPTION: Methods for randomly filling tiles in a map or layer with specified indices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nmap.randomize(); // Randomize all grids\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmap.randomize(tileX, tileY, width, height, indexes);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmap.weightedRandomize(\n    {\n        { index: 0, weight: 4 },\n        { index: [0, 1], weight: 4 }\n    },\n    tileX, tileY, width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.randomize();  // Randomize all grids\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.randomize(tileX, tileY, width, height, indexes);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.weightedRandomize(\n    {\n        { index: 0, weight: 4 },\n        { index: [0, 1], weight: 4 }\n    },\n    tileX, tileY, width, height);\n```\n\n----------------------------------------\n\nTITLE: Generating Random Float Values in Phaser 3\nDESCRIPTION: Generates a random floating-point number between minimum and maximum values using Phaser.Math.FloatBetween method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/random.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = Phaser.Math.FloatBetween(min, max);\n```\n\n----------------------------------------\n\nTITLE: Get Tile Position at Direction in JavaScript\nDESCRIPTION: Methods to get tile positions at specified directions and distances. Supports single direction, multiple directions, and distance ranges.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = board.getTileXYAtDirection(srcTileXY, direction, distance);\n// var out = board.getTileXYAtDirection(srcTileXY, direction, distance, out);\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Key Objects in Phaser 3\nDESCRIPTION: Shows how to enable or disable a key object in Phaser 3 to control event handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardevents.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nkeyObject.enabled = enabled; // Set false to disable key event\n```\n\n----------------------------------------\n\nTITLE: Getting First Active/Inactive Group Member in Phaser 3\nDESCRIPTION: Retrieves the first active or inactive group member, returning null if none is found.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = group.getFirst(active);  // active = true/false\nvar gameObject = group.getFirstAlive(); // Equal to group.getFirst(true, ...)\nvar gameObject = group.getFirstDead(); // Equal to group.getFirst(false, ...)\n```\n\n----------------------------------------\n\nTITLE: Particle Property Management\nDESCRIPTION: Collection of methods to control particle properties including speed, bounce, gravity, lifespan, and appearance\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.setParticleSpeed(x, y);\n\nemitter.speedX = x;\nemitter.speedY = y;\n\nemitter.bounce = value;\n\nemitter.maxVelocityX = x;\nemitter.maxVelocityY = y;\n\nemitter.setParticleGravity(x, y);\n\nemitter.gravityX = x;\nemitter.gravityY = y;\n\nemitter.accelerationX = x;\nemitter.accelerationY = y;\n\nemitter.setParticleLifespan(time);\n\nemitter.lifespan = time;\n\nemitter.delay = time;\n\nemitter.hold = time;\n```\n\n----------------------------------------\n\nTITLE: Creating RoundRectangleProgress Instance with Global Plugin\nDESCRIPTION: Creates a RoundRectangleProgress game object after configuring the plugin globally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar roundRectangleProgress = scene.add.rexRoundRectangleProgress(x, y, width, height, radius, barColor, value, config);\n```\n\n----------------------------------------\n\nTITLE: Board Touch Interaction Setup in JavaScript\nDESCRIPTION: Methods to enable and configure touch interactions with the board. Includes touch zone management and depth control.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nboard.setInteractive();\n// board.setInteractive({ useTouchZone: false });\n```\n\n----------------------------------------\n\nTITLE: Moving Chess to Neighbor Tile in Phaser 3\nDESCRIPTION: Methods to move a chess piece to neighboring tiles using directions, random movement, or relative positioning.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.moveToward(direction);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.moveToRandomNeighbor();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.moveAway(tileX, tileY);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.moveAway(tileXY);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.moveCloser(tileX, tileY);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.moveCloser(tileXY);\n```\n\n----------------------------------------\n\nTITLE: Creating LayerManager with Object Configuration\nDESCRIPTION: Shows how to instantiate a LayerManager with a detailed configuration object that specifies layers, depth, and root layer properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar layerManager = scene.plugins.get('rexLayerManager').add(scene, {\n    // layers: ['layer0', 'layer1', ...]\n    // layers: [{name, cameraName, scrollFactor}, ...]\n\n    // depth: undefined,\n    // rootLayer: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Mask from Video in Phaser 3\nDESCRIPTION: Creates a bitmap mask from the video, which can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = video.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Checking if Rectangle is Inside Ellipse in Phaser 3\nDESCRIPTION: Tests whether a rectangle is completely contained within an ellipse.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInside = Phaser.Geom.Ellipse.ContainsRect(ellipse, rect);  // rect : 4 points\n```\n\n----------------------------------------\n\nTITLE: Checking if Point is Inside Triangle in Phaser 3 (Method 2)\nDESCRIPTION: Tests whether a point object lies inside the triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInside = Phaser.Geom.Triangle.ContainsPoint(triangle, point);\n```\n\n----------------------------------------\n\nTITLE: Receiving Broadcast Events in Phaser 3 Sizer\nDESCRIPTION: Shows how to set up a listener for broadcast events on child elements within a sizer. This allows children to respond to events that are broadcast across the entire sizer hierarchy.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nchild.on(eventName, function(parameter0, parameter1, ...) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Getting Polygon's Bounding Box in Phaser 3\nDESCRIPTION: Creates a minimum rectangle that completely covers the polygon (Axis-Aligned Bounding Box). The output is a rectangle object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Geom.Polygon.GetAABB(polygon);\n// var out = Phaser.Geom.Polygon.GetAABB(polygon, out);\n```\n\n----------------------------------------\n\nTITLE: Getting Slider Value in JavaScript\nDESCRIPTION: Methods to retrieve the current value of the slider. The value can be obtained in the range of min to max, or normalized between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-slider.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = slider.getValue(min, max); // value : min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = slider.getValue(); // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = slider.value; // value: 0 ~ 1\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements in JavaScript\nDESCRIPTION: Creates a new array containing only elements that pass a test function. The callback should return true to include an element or false to exclude it. Accepts an optional scope parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-filter.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = arr.filter(function(element, index, arr) {\n    return true; // false\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Checkbox and Radio Configuration in Phaser3\nDESCRIPTION: Setup and management of checkbox and radio button behaviors including state management and event handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = scene.rexUI.add.buttons({\n    buttons: [\n        buttonGameObject,\n        buttonGameObject\n    ],\n    buttonsType: 'checkboxes',\n    setValueCallback: function(button, value, previousValue) {\n        // ...\n    }\n});\nvar states = buttons.getAllButtonsState();\nbuttons.clearAllButtonsState();\nvar state = buttons.getButtonState(key);\nbuttons.setButtonState(key, state);\nvar value = buttons.getSelectedButtonName();\nbuttons.setSelectedButtonName(key);\nbuttons.on('button.statechange', function(button, index, value, previousValue) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Using Random Integer Values for Image Properties in Phaser 3\nDESCRIPTION: Shows how to use random integer values between specified minimum and maximum for image properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/image.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{ randInt: [min, max] }\n```\n\n----------------------------------------\n\nTITLE: Configuring NinePatch Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the NinePatch plugin in the game configuration when using the NPM package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport NinePatchPlugin from 'phaser3-rex-plugins/plugins/ninepatch-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexNinePatchPlugin',\n            plugin: NinePatchPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Incrementing a Property Value on Group Members in Phaser 3\nDESCRIPTION: Increases a specific property by a given value for all group members, with optional step, index, and direction parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.propertyValueInc(key, value);\n// group.propertyValueInc(key, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Size of Hexagon Grid\nDESCRIPTION: Sets the dimensions of each cell in the hexagon grid. Can be done using methods or by directly setting width and height properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagongrid.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.setCellSize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.width = width;\ngrid.height = height;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.setCellRadius(size);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Style of Round Rectangle\nDESCRIPTION: Sets the stroke style including line width, color, and alpha for a round rectangle shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nrect.setStrokeStyle(lineWidth, color, alpha);\n```\n\n----------------------------------------\n\nTITLE: Managing Base Values and Buffs\nDESCRIPTION: Demonstrates methods for managing base values, buffs, and value bounds in the buff data manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buffdata.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndata.setBaseValue(key, value);\ndata.removeBaseValue(key);\nvar baseValue = data.getBaseValue(key);\n\ndata.setBuff(key, buffKey, value);\ndata.removeBuff(key, buffKey);\ndata.removeBuff(key);\nvar buffValue = data.getBuffValue(key, buffKey);\n\ndata.setMin(key, min);\ndata.setMax(key, max);\ndata.setBounds(key, min, max);\nvar min = data.getMinBound(key);\nvar max = data.getMaxBound(key);\n\nvar result = data.get(key);\n```\n\n----------------------------------------\n\nTITLE: Removing Music Instances in Phaser 3\nDESCRIPTION: Demonstrates how to remove music instances in a Phaser 3 scene, either by key or removing all instances. Returns the number of removed instances when removing by key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar removed = scene.sound.removeByKey(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.removeAll();\n```\n\n----------------------------------------\n\nTITLE: Configuring Drop Zones in Phaser 3 (JavaScript)\nDESCRIPTION: Shows various methods to set up drop zones, including default, rectangular, circular, and custom drop zones.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/zone.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nzone.setDropZone();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nzone.setRectangleDropZone(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nzone.setCircleDropZone(radius);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nzone.setDropZone(shape, callback);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(shape, x, y, gameObject) {\n    return hit;  // true/false\n}\n```\n\n----------------------------------------\n\nTITLE: Message Receiving Setup - JavaScript\nDESCRIPTION: Configuring message reception including event handling and receiver setup.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-broadcast.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmessager.on('receive', function(data){\n    // var senderID = data.senderID;\n    // var senderName = data.senderName;\n    // var message = data.message;\n})\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom DropDownList in Phaser 3\nDESCRIPTION: Shows how to create an instance of a custom DropDownList class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropDownList = new MyDropDownList(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Expanding and Collapsing Folders\nDESCRIPTION: Shows various methods to expand, collapse, and toggle the expanded state of a folder component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.expand();\n// folder.expand(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.expand(0);  // Immediately, won't invoke expandCallback\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.collapse();\n// folder.collapse(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.collapse(0);  // Immediately, won't invoke collapseCallback\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.toggle();\n// folder.toggle(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.toggle(0);  // Immediately, won't invoke expandCallback/collapseCallback\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tabs Class in Phaser 3\nDESCRIPTION: Shows how to create a custom Tabs class that extends the base Tabs functionality in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTabs extends RexPlugins.UI.Tabs {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Seeking to Specific Time in Arcade TCRP\nDESCRIPTION: Code for seeking to a specific elapsed time (in step-count) in the recording.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.seek(time);   // elapsed time in step-count\n```\n\n----------------------------------------\n\nTITLE: Using Phaser String Format Utility in JavaScript\nDESCRIPTION: Shows how to use Phaser's Format utility to replace %x placeholders in a template string with values from an array. The placeholder index starts from 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/format.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// const Format = Phaser.Utils.String.Format;\nvar template = 'hello, %1';\nvar view = ['rex'];\nvar result = Format(template, view);\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Scanlines Effect in Phaser 3 Pipeline\nDESCRIPTION: Methods to enable, disable, and check the status of scanlines effect in a pipeline instance. These methods control whether the scanlines visual effect is applied to the rendered scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setScanlinesEnable();\n// pipelineInstance.setScanlinesEnable(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.scanlinesEnable = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setScanlinesEnable(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.scanlinesEnable = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar scanlinesEnable = pipelineInstance.scanlinesEnable;\n```\n\n----------------------------------------\n\nTITLE: Getting Triangle-Line Intersection Points in Phaser 3\nDESCRIPTION: Calculates the points where a triangle intersects with a line.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetTriangleToLine(triangle, line);\n// var out = Phaser.Geom.Intersects.GetTriangleToLine(triangle, line, out);\n```\n\n----------------------------------------\n\nTITLE: Applying Easing to ScrollBar Value in JavaScript\nDESCRIPTION: Methods to apply easing to the ScrollBar value, including starting and stopping easing, setting duration and easing function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.easeValueTo(value, min, max);  // value: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.easeValueTo(value);  // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.stopEaseValue();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.setEaseValueDuration(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.setEaseValueFunction(ease);\n```\n\n----------------------------------------\n\nTITLE: Setting ConfirmActionButton Callbacks in Phaser 3\nDESCRIPTION: Shows how to set confirm and cancel callbacks for the ConfirmActionButton after creation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmactionbutton.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.setConfirmCallback(callback);\n// button.setConfirmCallback(callback, scope);\n\nbutton.setCancelCallback(callback);\n// button.setCancelCallback(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Pointer Over Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for when a pointer moves over a new tile on the board. The event only triggers when the tile coordinates change. The callback receives the pointer object and the tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('tileover', function(pointer, tileXY) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Polar Coordinate Properties with Plugin in Phaser 3\nDESCRIPTION: Shows how to attach polar coordinate properties to a game object using the plugin and set their values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/polar-coordinate.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexPolarCoordinate').add(gameObject, ox, oy, rotation, radius);\ngameObject.polarOX = 400;\ngameObject.polarOY = 300;\ngameObject.polarRadius = 200;\ngameObject.polarAngle = -45;\n```\n\n----------------------------------------\n\nTITLE: Getting All Texture Keys in Phaser 3\nDESCRIPTION: Retrieves an array containing the keys of all textures currently stored in the texture cache. Useful for debugging or managing texture resources.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar keys = scene.textures.getTextureKeys();\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Sprite Instance in Phaser 3\nDESCRIPTION: Creates an instance of a perspective sprite in a Phaser 3 scene with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-sprite.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar sprite = scene.add.rexPerspectiveSprite(x, y, texture, frame, {\n    // width: undefined,\n    // height: undefined,\n    // hideCCW: true,\n    // gridWidth: 32,\n    // girdHeight: 32\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Click Outside Behavior via Plugin\nDESCRIPTION: Shows how to add click-outside behavior to a game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clickoutside.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar clickOutside = scene.plugins.get('rexclickoutsideplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Enabling Matter Attractors Plugin at Runtime in Phaser 3\nDESCRIPTION: This code demonstrates how to enable the Matter Attractors plugin during runtime in a Phaser 3 scene. It calls the enableAttractorPlugin method on the scene's matter system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-attractor.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.system.enableAttractorPlugin();\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: JavaScript code to initialize a Firebase application with configuration parameters including API key, auth domain, database URL, project ID, storage bucket, and messaging sender ID.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a NinePatch with All Parameters in Configuration (Method 4)\nDESCRIPTION: Shows how to create a NinePatch with all parameters including the texture key in the configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch(x, y, width, height, {\n    key: undefined,\n    columns: undefined, // leftWidth: undefined, right: undefined,\n    rows: undefined,    // topHeight: undefined, bottomHeight: undefined,\n\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    baseFrame: undefined,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Flip Instance with Configuration\nDESCRIPTION: Creates a flip instance with detailed configuration options including face settings and animation properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flip.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar flip = scene.plugins.get('rexFlip').add(gameObject, {\n    face: 'back',\n    front: { key, frame },\n    back: { key, frame },\n    // orientation: 0,\n    // duration: 500,\n    // delay: 0,\n    // ease: 'Sine',\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Light Pipeline to Game Objects in Phaser 3\nDESCRIPTION: Code for applying the Light2D pipeline to a game object, allowing it to be affected by the lighting system. This must be called on any object that should respond to lights.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPipeline('Light2D');\n```\n\n----------------------------------------\n\nTITLE: Creating Line Progress Canvas Instance with Configuration in Phaser 3\nDESCRIPTION: Demonstrates how to create a Line Progress Canvas instance with detailed configuration options in a Phaser 3 game scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-lineprogress.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineProgress = scene.add.rexLineProgressCanvas({\n    x: 0,\n    y: 0,\n    width: 2,\n    height: 2,\n\n    barColor: undefined,\n    barColor2: undefined,\n    isHorizontalGradient: true,\n    trackColor: undefined,\n    trackStrokeColor: undefined,\n    trackStrokeThickness: 2,\n\n    skewX:0,\n    rtl: false,\n\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n    value: 0,\n    valuechangeCallback: function(newValue, oldValue, lineProgress) {\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Controller to Phaser 3 Scene (JavaScript)\nDESCRIPTION: Adds a camera controller object to a Phaser 3 scene using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/input-to-camera.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar cameraController = scene.plugins.get('rexcameracontrollerplugin').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Color Property Access and Modification\nDESCRIPTION: Accessing and modifying color properties including RGB, HSV, and GL normalized values\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/color.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.red = value;\ncolor.h = value;\ncolor.redGL = value;\ncolor.brighten(value);\ncolor.saturate(value);\ncolor.desaturate(value);\ncolor.lighten(value);\ncolor.darken(value);\n```\n\n----------------------------------------\n\nTITLE: Managing Button Layout in Phaser 3\nDESCRIPTION: Triggers layout recalculation for all elements in the button container. This is useful after dynamically changing button properties or content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.layout();\n```\n\n----------------------------------------\n\nTITLE: Scrolling Table Rows in Phaser3\nDESCRIPTION: Methods for scrolling through rows in a Phaser3 grid table. Includes scrolling to next row, scrolling multiple rows at once, scrolling to a specific row index, and retrieving the current row index.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntable.scrollToNextRow();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.scrollToNextRow(n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.scrollToRow(rowIndex);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar rowIndex = table.startRowIndex;\n```\n\n----------------------------------------\n\nTITLE: Event Handlers for Tree Interactions\nDESCRIPTION: Event listener implementations for various tree interactions including pointer events, clicks, press, tap, and swipe.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on('child.down', function(child, pointer, event) {        \n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on('child.up', function(child, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on('child.over', function(child, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on('child.out', function(child, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on('child.click', function(child, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on('child.pressstart', function(child, pointer, press) { \n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on('child.pressend', function(child, pointer, press) { \n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on(tapEventName, function(child, pointer, tap) { \n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on(swipeEventName, function(child, pointer, swipe) { \n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Managing Shapes in Phaser 3 Custom Shapes Object\nDESCRIPTION: Shows how to clear all shapes and create new shapes with specific types and names within a custom shapes object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncustomShapes.clear();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncustomShapes.createShape(shapeType, name);\n```\n\n----------------------------------------\n\nTITLE: Detailed i18next Configuration\nDESCRIPTION: Complete initialization configuration including language settings, namespaces, and backend options\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/i18next.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ni18next\\n    .use(Backend)\\n    .init({\\n        lng: 'dev',\\n        fallbackLng: 'dev',\\n        ns: 'translation',\\n    \\n        // resources: {\\n        //     'dev': {\\n        //         'translation': {\\n        //             key: value,  \\n        //         }\\n        //     }\\n        // }\\n    \\n        // debug: true,\\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting Collision Bounds for Physics Body in Phaser 3\nDESCRIPTION: Demonstrates how to set rectangular or circular collision bounds for a physics body and adjust their offset.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setSize(width, height, center);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setCircle(radius, offsetX, offsetY);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setOffset(x, y);\n```\n\n----------------------------------------\n\nTITLE: Adding FSM Object to Phaser 3 Scene\nDESCRIPTION: Shows how to add an FSM object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar states = scene.plugins.get('rexfsmplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Child Management Operations in Phaser3 Buttons\nDESCRIPTION: Methods for adding and removing button and non-button child elements to the button group.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.addButton(gameObject);\nbuttons.add(gameObject, {\n    proportion: 0,\n    align: 'center',\n    padding: {left: 0, right: 0, top: 0, bottom: 0},\n    expand: false,\n    key: undefined,\n    index: undefined,\n    minWidth: undefined,\n    minHeight: undefined\n});\nbuttons.removeButton(gameObject, destroyChild);\nbuttons.clearButtons(destroyChild);\nbuttons.remove(gameObject, destroyChild);\nbuttons.removeAll(destroyChild);\n```\n\n----------------------------------------\n\nTITLE: Loading Global Plugin in Phaser 3 Scene\nDESCRIPTION: Shows how to load a global plugin within a Phaser 3 scene. This method allows loading plugins dynamically during runtime.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pluginsystem.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin(key, url, true);\n// scene.load.plugin(key, url, true, mapping);\n```\n\n----------------------------------------\n\nTITLE: Getting the size of a Phaser 3 Set\nDESCRIPTION: Shows how to get the total count of elements in a Set.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-set.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar size = set.size;\n```\n\n----------------------------------------\n\nTITLE: Handling Number Bar Events in JavaScript\nDESCRIPTION: Shows how to handle various events of the number bar, including value change, input start, and input end.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.on('valuechange', function (newValue, oldValue, numberBar) {\n    // numberBar.text = Math.round(Phaser.Math.Linear(0, 100, newValue));\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.on('inputstart', function(pointer) {\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.on('inputend', function(pointer) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Skewable Render Texture in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates various operations on the skewable render texture, including drawing game objects, erasing, clearing, and filling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-rendertexture.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar rt = image.rt;\n\n// Paste game object\nimage.rt.draw(gameObject, x, y);\n// image.rt.draw(gameObject, x, y, alpha, tint);\n\n// Paste game objects in a group\nimage.rt.draw(group, x, y);\n// image.rt.draw(group, x, y, alpha, tint);\n\n// Paste game objects in a scene\nimage.rt.draw(scene.children, x, y);\n// image.rt.draw(scene.children, x, y, alpha, tint);\n\n// Paste texture\nimage.rt.draw(key, x, y);\n// image.rt.draw(key, x, y, alpha, tint);\n\n// or\nimage.rt.drawFrame(key, frame, x, y);\n// image.rt.drawFrame(key, frame, x, y, alpha, tint);\n\n// Erase\nimage.rt.erase(gameObject, x, y);\n\n// Clear\nimage.rt.clear();\n\n// Fill\nimage.rt.fill(rgb, alpha);\n// image.rt.fill(rgb, alpha, x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Resetting a Shattered Image\nDESCRIPTION: Shows how to reset a shattered image back to its original state (two faces).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimage.resetImage();\n```\n\n----------------------------------------\n\nTITLE: Snapping Values Using Phaser.Math.Snap.To\nDESCRIPTION: Rounds a value to the nearest grid slice based on the gap parameter. Optionally accepts a start value. Example: with gap=5, value=12 returns 10, value=14 returns 15.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/snap.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Math.Snap.To(value, gap);\n// var out = Phaser.Math.Snap.To(value, gap, start);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners (Alternative) in Phaser 3\nDESCRIPTION: Demonstrates an alternative method to remove specific event listeners in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nee.removeListener(eventName, callback, scope); \nee.removeListener(eventName, callback, scope, true);  // only remove one-time listeners\n```\n\n----------------------------------------\n\nTITLE: Adding Path Follower Behavior\nDESCRIPTION: Adds path following behavior to a game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pathfollower.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pathFollower = scene.plugins.get('rexpathfollowerplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Handling Pan Event in Phaser 3\nDESCRIPTION: Sets up an event handler for the 'pan' event that fires continuously during panning, providing movement data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\npan.on('pan', function(pan, gameObject, lastPointer){\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Getting Elements from Sizer in JavaScript\nDESCRIPTION: Methods for retrieving elements from a Sizer component. Includes getting individual children, all children, and searching by name with recursive options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overlapsizer.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar item = sizer.getElement(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar item = sizer.getElement('items[' + key + ']');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar items = sizer.getElement('items');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = sizer.getElement('#' + name);\n// var gameObject = sizer.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = sizer.getByName(name);\n// var gameObject = sizer.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Creating CircleMaskImage in Phaser3 Rex UI\nDESCRIPTION: Shows how to add a circle-masked image that loads a texture and applies a circular mask to it. This creates images with circular boundaries instead of rectangular ones.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.rexUI.add.circleMaskImage(x, y, key, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Camera Rotation in Phaser 3\nDESCRIPTION: Methods for rotating the camera to specific angles with path options and duration controls.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-effects.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.rotateTo(radians, shortestPath, duration);\n// camera.rotateTo(radians, shortestPath, duration, ease, force, callback, context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(camera, progress, angle) {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('camerarotatestart', camera, rotateTo, duration, angle);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.on('camerarotatecomplete', camera, rorotateTotate);\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Circular Progress Bar\nDESCRIPTION: Shows how to create a bitmap mask from the circular progress bar for use in masking other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = circularProgress.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Matching Specific Pattern of Symbols\nDESCRIPTION: Performs matching to find specific patterns of symbols in lines, with a callback function to process each match result.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmatch.match(pattern, function (result, board) {\n    // var chess = board.tileXYArrayToChess(result.tileXY, 0);\n    // GroupCall(chess, function (chess) { chess.setScale(0.8); });\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Reveal Effect Properties\nDESCRIPTION: Configures various properties of a reveal effect including progress, wipe width, direction, and axis.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\neffect.progress = t; // 0~1\neffect.wipeWidth = wipeWidth;\neffect.direction = direction;  // 0, 1\neffect.axis = axis;  // 0, 1\n```\n\n----------------------------------------\n\nTITLE: Toggling Visibility of Game Objects in Phaser3\nDESCRIPTION: Toggles the visibility of game objects, reversing their current visible state. Visible objects become hidden, and hidden objects become visible.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.ToggleVisible(gameObjects);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: JavaScript code to initialize the Firebase application with the required configuration settings including API keys and endpoint URLs.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Checking If Object Is Being Touched\nDESCRIPTION: Gets the current touching state of the object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInTouching = intouching.isInTouching;\n```\n\n----------------------------------------\n\nTITLE: Handling Sizer Addition Events in Phaser 3\nDESCRIPTION: Shows how to listen for the 'add' event on the sizer itself, which fires when any child is added. This allows for centralized handling of child addition across the entire sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.on('add', function(child, sizer){\n\n})\n```\n\n----------------------------------------\n\nTITLE: Rotating a Point Around a Position with Distance in Phaser 3\nDESCRIPTION: Rotates a point around a specified coordinate (x,y) by a given angle and distance. This allows for both rotation and repositioning in a single operation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Math.RotateAroundDistance(point, x, y, angle, distance);\n```\n\n----------------------------------------\n\nTITLE: Setting Texture for WarpPostFX in Phaser 3\nDESCRIPTION: This snippet shows how to set the texture for the WarpPostFX effect, including specifying the texture key and resize mode.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp-transition.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setTexture(textureKey, resizeMode);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Textures and Properties\nDESCRIPTION: Methods for configuring textures and properties for line start, end, and body components.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/line.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nline.setLineStartTexture(key, frameName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.setLineStartOrigin(origin);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.setLineEndTexture(key, frameName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.setLineEndOrigin(origin);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.setLineBodyTexture(key, frameName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.setLineBodyExtendMode(mode);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.setLineBodyWidth(width);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Canvas Input Class in Phaser 3\nDESCRIPTION: This snippet demonstrates how to create a custom canvas input class by extending the base CanvasInput class, allowing for additional customization and functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCanvasInput extends CanvasInput {\n    constructor(textGameObject, x, y, width, height, config)) {\n        super(textGameObject, x, y, width, height, config)) {\n        // ...            \n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = new MyCanvasInput(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Arranging Holy Grail Layout in Phaser 3\nDESCRIPTION: Triggers the layout process to arrange all child elements according to their configuration in the Holy Grail layout.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nholyGrail.layout();\n```\n\n----------------------------------------\n\nTITLE: Creating Line Shape in Phaser 3\nDESCRIPTION: Creates a new Line shape game object with specified coordinates and stroke color.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-line.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = scene.add.line(x, y, x1, y1, x2, y2, strokeColor);\n// var line = scene.add.line(x, y, x1, y1, x2, y2, strokeColor, strokeAlpha);\n```\n\n----------------------------------------\n\nTITLE: Getting Image Texture in Phaser 3\nDESCRIPTION: Retrieves an image texture from the texture cache using its key. This example also shows how to access the source image and potentially its dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar texture = scene.textures.get(key);\nvar image = texture.getSourceImage();\n// var width = image.width;\n// var height = image.height;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collision Groups\nDESCRIPTION: Methods to get collision group information from tiles and tilesets\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar collisionGroup = tile.getCollisionGroup();\n\n// or\n\nvar collisionGroup = tileset.getTileCollisionGroup(tile.index);\n```\n\n----------------------------------------\n\nTITLE: Layout Management in Phaser3 Label Component\nDESCRIPTION: Arranges the position of all child elements within a label component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.layout();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Grid Table Instance in Phaser 3\nDESCRIPTION: Demonstrates how to create an instance of a custom Grid Table class. This is used after defining a custom class that extends the base Grid Table functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = new MyGridTable(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Custom Easing Function in Phaser 3\nDESCRIPTION: Shows how to define a custom easing function in Phaser 3. This function takes a value 'v' between 0 and 1 and returns a transformed value, allowing for custom animation curves.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ease-function.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction(v) {\n    return v;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Rotation Angle and Drag Vector\nDESCRIPTION: Demonstrates how to get the rotation angle and the drag vector of the first touch pointer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar angle = rotate.rotation;\n\nvar drag1Vector = rotate.drag1Vector; // {x, y}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SimpleTextBox Subclass in Phaser 3\nDESCRIPTION: Code for creating a custom subclass of SimpleTextBox to extend its functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletextbox.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTextBox extends RexPlugins.UI.SimpleTextBox {\n    constructor(scene, config, creators) {\n        super(scene, config, creators);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Dialog Button Input State - JavaScript\nDESCRIPTION: Methods for toggling the input state of specific buttons. The index parameter can be a number index or a button game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.toggleChoiceEnable(index);\ndialog.toggleActionEnable(index);\ndialog.toggleToolbarEnable(index);\ndialog.toggleLeftToolbarEnable(index);\n```\n\n----------------------------------------\n\nTITLE: Importing GridTable Class in Phaser 3\nDESCRIPTION: Demonstrates how to import the GridTable class directly from the rex plugins package. This approach allows for more granular control over which components are imported and used.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GridTable } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Testing Achievements Against Values\nDESCRIPTION: Shows how to run tests to check which achievements are obtained based on input values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/achievements.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar achievements.runTest(levelName, values);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar states = achievements.getObtainedState(levelName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar states = achievements.getTestResults(levelName, values);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Sprite Class in Phaser 3\nDESCRIPTION: Creates a custom sprite class extending Phaser.GameObjects.Sprite. This allows for adding custom properties and methods to the sprite. The constructor adds the sprite to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MySprite extends Phaser.GameObjects.Sprite {\n    constructor(scene, x, y, texture, frame) {\n        super(scene, x, y, texture, frame);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Resizing a NinePatch Object in Phaser 3\nDESCRIPTION: Shows how to resize a NinePatch object after creation, which will update its texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.resize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Table Cells in Phaser3\nDESCRIPTION: Methods for refreshing cells in a Phaser3 grid table. Includes refreshing all visible cells and updating a specific visible cell.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ntable.refresh();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.updateVisibleCell(cellIndex);\n```\n\n----------------------------------------\n\nTITLE: Managing Firebase Storage Upload Task in JavaScript\nDESCRIPTION: Control and monitor the progress of a Firebase Storage upload task. Includes pausing, resuming, cancelling, and monitoring state changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-storage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuploadTask.on('state_changed', \n    function(snapshot){\n        // Observe state change events such as progress, pause, and resume\n        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        switch (snapshot.state) {\n            case firebase.storage.TaskState.PAUSED: // or 'paused'\n                console.log('Upload is paused');\n                break;\n            case firebase.storage.TaskState.RUNNING: // or 'running'\n                console.log('Upload is running');\n                break;\n        }\n    },\n    function(error) {\n        // Handle unsuccessful uploads\n        // https://firebase.google.com/docs/storage/web/handle-errors\n        switch (error.code) {\n            case 'storage/unauthorized':\n                // User doesn't have permission to access the object\n                break;\n            case 'storage/canceled':\n                // User canceled the upload\n                break;\n            case 'storage/unknown':\n                // Unknown error occurred, inspect error.serverResponse\n                break;\n        }\n    },\n    function() {\n        // Handle successful uploads on complete\n        // Get download url\n        uploadTask.snapshot.ref.getDownloadURL()\n            .then(function(url) {\n                console.log('File available at', url);\n            })\n            .catch(function (error) {});\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Pathfinder Instance with Configuration in Phaser 3\nDESCRIPTION: Shows how to create a Pathfinder instance with various configuration options for cost calculation and path mode.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-pathfinder.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pathFinder = scene.rexBoard.add.pathFinder({\n    // occupiedTest: false,\n    // blockerTest: false,\n\n    // ** cost **\n    // cost: 1,   // constant cost\n    // costCallback: undefined,\n    // costCallbackScope: undefined,\n    // cacheCost: true,\n\n    // pathMode: 10,  // A*\n    // weight: 10,   // weight for A* searching mode\n    // shuffleNeighbors: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Timer with Specific Time Units\nDESCRIPTION: Adds a timer to Real-Time Timers using specific time units like days, hours, minutes, and seconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrealTimeTimers.addTimer(name, {\n    day: dayCount,        // d: dayCount,\n    hour: hourCount,      // h: hourCount,\n    minute: minuteCount,  // m: minuteCount,\n    second: secondCount,  // s: secondCount,\n}, data, currentTimestamp);\n```\n\n----------------------------------------\n\nTITLE: Scrolling by Percentage in Phaser 3 Grid Table\nDESCRIPTION: Shows how to scroll the Grid Table content by percentage, including setting and getting the scroll position as a value between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntable.t = t;  // t: 0~1\n// table.setT(t);  \n\ntable.setT(t, true);\n\nvar t = table.t;\n```\n\n----------------------------------------\n\nTITLE: Adding Pixelation Effect with Configuration Options\nDESCRIPTION: Adding a pixelation effect to a game object with configuration options for pixel size.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-pixelation.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexPixelationPipeline').add(gameObject, {\n    // pixelWidth: 0,\n    // pixelHeight: 0,\n\n    // name: 'rexPixelationPostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Video as Texture in Phaser 3\nDESCRIPTION: Creates a texture from the video that automatically updates as the video plays.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar texture = video.saveTexture(key);\n// var texture = video.saveTexture(key, flipY);\n```\n\n----------------------------------------\n\nTITLE: Creating RoundRectangleProgress with Configuration Object\nDESCRIPTION: Creates a RoundRectangleProgress instance using a configuration object that includes all available options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar roundRectangleProgress = scene.add.rexRoundRectangleProgress({\n    x: 0,\n    y: 0,\n    width: 2,\n    height: 2,\n    radius: 0,\n\n    barColor: undefined,\n    trackColor: undefined,\n    trackStrokeColor: undefined,\n    trackStrokeThickness: 2,\n\n    rtl: false,\n    orientation: 0,\n\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n    value: 0,\n    valuechangeCallback: function(newValue, oldValue, roundRectangleProgress) {\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Rotating Lines in Phaser 3\nDESCRIPTION: Shows methods to rotate a line around its midpoint or around a specific point. Angles are specified in radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = Phaser.Geom.Line.Rotate(line, angle)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar rad = Phaser.Math.DegToRad(deg);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = Phaser.Geom.Line.RotateAroundPoint(line, point, angle);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = Phaser.Geom.Line.RotateAroundXY(line, x, y, angle);\n```\n\n----------------------------------------\n\nTITLE: Checking Video Playback Status in Phaser 3\nDESCRIPTION: Methods to check if a video is currently playing or paused.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPlaying = video.isPlaying();  // (not PAUSE) and (not not ENDED)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPaused = video.isPaused();\n```\n\n----------------------------------------\n\nTITLE: Loading Overlap Sizer Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the Overlap Sizer plugin as a scene plugin in the preload stage of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overlapsizer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Unlocking Audio in Phaser 3\nDESCRIPTION: Method to unlock Web Audio API/HTML5 Audio loading on the initial input event, necessary for browsers that require user interaction before playing audio.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.unlock();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Buttons Class in Phaser 3\nDESCRIPTION: Extends the Buttons class to create a custom implementation with additional functionality. This pattern allows for reusable button containers with custom behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyButtons extends RexPlugins.UI.Buttons {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = new MyButtons(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Creating ImageBox from JSON\nDESCRIPTION: Example demonstrating how to create an ImageBox instance using JSON configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imagebox.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.make.rexImageBox({\n    x: 0,\n    y: 0,\n    key: null,\n    frame: null,\n    // width: undefined,\n    // height: undefined,\n    // background: undefined,\n    // image: undefined\n    // origin: {x: 0.5, y: 0.5},\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Line End Position\nDESCRIPTION: Methods and properties for retrieving and setting the position of the line end point.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/line.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar x1 = line.x1;\nvar y1 = line.y1;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.setLineEndPosition(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.x1 = x;\nline.y1 = y;\n```\n\n----------------------------------------\n\nTITLE: Getting Listener Count for an Event in Phaser 3\nDESCRIPTION: Demonstrates how to get the number of listeners for a specific event in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar count = ee.listenerCount(eventName);\n//var noListener = (ee.listenerCount(eventName) === 0);\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements in Phaser 3 UI Label\nDESCRIPTION: Demonstrates how to retrieve various elements of the UI Label component, including background, inner sizer, title, separator, icon, text, and action elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = label.getElement('background');\nvar innerSizer = label.getElement('innerSizer');\nvar innerBackground = label.getElement('innerBackground');\nvar textObject = label.getElement('title');\nvar textObject = label.getElement('separator');\nvar icon = label.getElement('icon');\nvar textObject = label.getElement('text');\nvar action = label.getElement('action');\n```\n\n----------------------------------------\n\nTITLE: Getting Bob Object Flip State in Phaser 3\nDESCRIPTION: Retrieves the current flip state of a Bob object along both axes. When a Bob is flipped, its texture is mirrored horizontally (flipX) or vertically (flipY).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar flipX = bob.flipX;\nvar flipY = bob.flipY;\n```\n\n----------------------------------------\n\nTITLE: Creating Raycaster Instance with Configuration\nDESCRIPTION: Demonstrates how to create a raycaster instance with configuration options like maximum ray length.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar raycaster = scene.plugins.get('rexRaycaster').add({\n    // maxRayLength: 10000\n});\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Phaser 3 Data Manager\nDESCRIPTION: Event listeners for data changes in the Data Manager, including setting new data and changing existing data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/datamanager.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.events.on('setdata', function(parent, key, value){ /* ... */ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.events.on('changedata', function(parent, key, value, previousValue){ /* ... */ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.events.on('changedata-' + key, function(parent, value, previousValue){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Shader Class in Phaser 3\nDESCRIPTION: Defines a custom shader class by extending Phaser.GameObjects.Shader. Useful for creating reusable shader components with custom behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyShader extends Phaser.GameObjects.Shader {\n    constructor(scene, key, x, y, width, height, textures) {\n        super(scene, key, x, y, width, height, textures);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Glow Filter Effect from Game Object\nDESCRIPTION: Removes the glow filter effect from a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexGlowFilterPipeline').remove(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Sorting Documents with Custom Function\nDESCRIPTION: Sort the result set using a custom comparison function in a chain. Return 0 for equal, 1 for greater, -1 for less.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.chain().find({}).sort(\n    function(doc1, doc2) {\n        return result; // 0, 1, -1\n    })\n    .data();\n```\n\n----------------------------------------\n\nTITLE: Using Rex Board Plugin with TypeScript in Phaser 3\nDESCRIPTION: Illustrates how to use the Rex Board Plugin with TypeScript, including type declarations and game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-overview.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\n\nclass Game extends Phaser.Scene {\n    rexBoard: BoardPlugin;  // Declare scene property 'rexBoard' as BoardPlugin type\n\n    create() {\n        var board = this.rexBoard.add.board({\n            // ...\n        })\n    }\n}\n\nvar game = new Phaser.Game({\n    scene: Game,\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing All Obstacles from Raycaster\nDESCRIPTION: Demonstrates how to remove all obstacles from the raycaster.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nraycaster.clearObstacle();\n```\n\n----------------------------------------\n\nTITLE: Disabling Rotation in Phaser 3 Arcade Physics\nDESCRIPTION: Disables rotation for a physics body, preventing its rotation from being affected by angular acceleration and velocity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setAllowRotation(false);\n```\n\n----------------------------------------\n\nTITLE: Defining Uniforms for BaseShader in Phaser 3\nDESCRIPTION: Shows the structure for defining uniform objects for a BaseShader. Includes examples of different uniform types and their initial values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    uniformName : {type: uniformType, value: initValue},\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Default Input Control in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This code demonstrates how to enable the default input control when creating a Bejeweled instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar bejeweled = new Bejeweled(scene, {\n    // ...\n    input: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating MoveTo Instance\nDESCRIPTION: Creates a new MoveTo instance with configuration options for speed and rotation behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/moveto.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar moveTo = scene.plugins.get('rexMoveTo').add(gameObject, {\n    // speed: 400,\n    // rotateToTarget: false\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a TransitionImagePack Instance with Configuration in Phaser 3\nDESCRIPTION: Shows two ways to create a TransitionImagePack instance with configuration options for duration and sizing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexTransitionImagePack(x, y, texture, frame, {   \n    // duration: 1000,\n    // width: undefined, height: undefined,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexTransitionImagePack(x, y, texture, frame, {\n    // x: 0,\n    // y: 0,\n    // key: \n    // frame: \n    // duration: 1000,\n    // width: undefined, height: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Floor Snap Using Phaser.Math.Snap.Floor\nDESCRIPTION: Snaps a value to the next lower grid slice based on the gap parameter. Optionally accepts a start value. Example: with gap=5, both value=12 and value=14 return 10.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/snap.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Math.Snap.Floor(value, gap);\n// var out = Phaser.Math.Snap.Floor(value, gap, start);\n```\n\n----------------------------------------\n\nTITLE: Creating CSV Scenario Instance in Phaser 3\nDESCRIPTION: Shows how to create a CSV Scenario instance with various configuration options in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvscenario.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar scenario = scene.plugins.get('rexCSVScenario').add(scene, {\n    // timeUnit: 0,        // 'ms'|0|'s'|'sec'|1\n    // prefix: /^#([a-zA-Z]+)/\n    // argsConvert: true,\n    // argsConvertScope: undefined,\n    // delimiter: ','\n    // translateCommandNameCallback: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Time Scale on Sprite in Phaser 3\nDESCRIPTION: Sets the global time scale for animations on the sprite, affecting the speed of all animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.anims.globalTimeScale = timeScale;\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Transition Modes in TransitionImage\nDESCRIPTION: Demonstrates how to register custom transition modes and use them when transitioning between textures.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimage.addTransitionMode(modeName, {\n    // dir: 0,\n    // onStart: function(parent, currentImage, nextImage, t) { },\n    // onStartScope: undefined,\n    // onProgress: function(parent, currentImage, nextImage, t) { },\n    // onProgressScope: undefined,\n    // onComplete: function(parent, currentImage, nextImage, t) { },\n    // onCompleteScope: undefined,\n    // duration: 1000,\n    // ease: 'Linear',\n    // mask: undefined,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.transit(texture, frame, modeName);\n// image.transit(texture, frame, modeNames);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.transit({\n    key: undefined,\n    // frame: undefined,\n\n    mode: modeName, // or modeName\n    // dir: 0,\n    // onStart: function(parent, currentImage, nextImage, t) { },\n    // onStartScope: undefined,\n    // onProgress: function(parent, currentImage, nextImage, t) { },\n    // onProgressScope: undefined,\n    // onComplete: function(parent, currentImage, nextImage, t) { },\n    // onCompleteScope: undefined,\n    // duration: 1000,\n    // ease: 'Linear',\n    // mask: undefined,\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar modeName = image.currentTransitionMode;\n```\n\n----------------------------------------\n\nTITLE: Getting Post-FX Pipeline Instance\nDESCRIPTION: Shows how to retrieve a post-processing pipeline instance or instances from a camera using getPostPipeline method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-shader-effect.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = camera.getPostPipeline(PostFxClass);\n```\n\n----------------------------------------\n\nTITLE: Attaching Effects to Game Objects\nDESCRIPTION: Add effect properties to a game object or camera using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effect-properties.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexeffectpropertiesplugin').add(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexeffectpropertiesplugin').add(camera);\n```\n\n----------------------------------------\n\nTITLE: Creating Tile Positions with Imported Plugin\nDESCRIPTION: Methods to create different hexagon grid patterns using the imported plugin approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagonmap.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = scene.rexBoard.add.hexagonMap.hexagon(board, radius);\nvar tileXYArray = scene.rexBoard.add.hexagonMap.parallelogram(board, type, width, height);\nvar tileXYArray = scene.rexBoard.add.hexagonMap.triangle(board, type, height);\n```\n\n----------------------------------------\n\nTITLE: Group Creation Callback Function in Phaser 3\nDESCRIPTION: Defines a callback function that is called when adding or creating group members, receiving the game object as a parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar callback = function(gameObject) {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Achievements Plugin via NPM in Phaser 3\nDESCRIPTION: Shows how to install the plugin from NPM and configure it in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/achievements.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport AchievementsPlugin from 'phaser3-rex-plugins/plugins/achievements-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexAchievements',\n            plugin: AchievementsPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar achievements = scene.plugins.get('rexAchievements').add();\n```\n\n----------------------------------------\n\nTITLE: Adding Background to Overlap Sizer in Phaser 3\nDESCRIPTION: Shows how to add a background element to the Overlap Sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overlapsizer.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.addBackground(child, {left: 0, right: 0, top: 0, bottom: 0}, key);\n```\n\n----------------------------------------\n\nTITLE: Setting a Property Value on Group Members in Phaser 3\nDESCRIPTION: Sets a specific property to a given value for all group members, with optional step, index, and direction parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.propertyValueSet(key, value);\n// group.propertyValueSet(key, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Checking if Current Page is the First Page\nDESCRIPTION: Returns a boolean indicating whether the current page is the first page in the multi-page text content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar isFirstPage = textBox.isFirstPage;\n```\n\n----------------------------------------\n\nTITLE: Setting Data in Firebase Item Table\nDESCRIPTION: JavaScript code for setting data in a Firebase item table with promise handling for completion or error states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntable.setData(key0, value)\n// table.setData(key0, key1, value)\n// table.setData(key0, key1, key2, value)\n    .then(function() { })\n    .catch(function() { })\n```\n\n----------------------------------------\n\nTITLE: Resizing a Nine Slice Object in Phaser 3\nDESCRIPTION: Changes the dimensions of an existing Nine Slice object. This will automatically adjust the stretching of the central portions while maintaining the fixed corners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/nineslice.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnineSlice.setSize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Controller Behaviors in Phaser 3 (JavaScript)\nDESCRIPTION: Methods to enable or disable various camera controller behaviors such as pan-scroll, pinch-zoom, bounds-scroll, and wheel-zoom.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/input-to-camera.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncameraController.setPanScrollEnable(enable);\ncameraController.setPinchZoomEnable(enable);\ncameraController.setBoundsScrollEnable(enable);\ncameraController.setMouseWheelZoomEnable(enable);\ncameraController.setEnable(false);\ncameraController.setEnable();\ncameraController.toggleEnable();\n```\n\n----------------------------------------\n\nTITLE: Adding File Manager Object in Phaser 3\nDESCRIPTION: JavaScript code to add a file manager object to a Phaser 3 scene using the Firebase plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-files.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileManager = scene.plugins.get('rexfirebaseplugin').add.files(config);\n```\n\n----------------------------------------\n\nTITLE: Static Body Synchronization\nDESCRIPTION: Method to synchronize a static body's position and size with its parent game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nbody.updateFromGameObject();\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Pages in TextPage for Phaser 3\nDESCRIPTION: Methods for displaying specific pages including current, next, previous, first, last, and pages by index or line index.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textpage.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npage.showPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\npage.showNextPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\npage.showPreviousPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\npage.showFirstPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\npage.showLastPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\npage.showPage(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npage.showPageNyLineIndex(index);\n```\n\n----------------------------------------\n\nTITLE: Scrolling Content in Phaser 3 Dynamic Text\nDESCRIPTION: Methods to scroll the content of a dynamic text object by manipulating the textOX and textOY properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setTextOXY(x, y).updateTexture();    \n// txt.setTextOX(x).updateTexture();\n// txt.setTextOY(x).updateTexture();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.addTextOXY(incX, incY).updateTexture(); \n// txt.addTextOX(incX).updateTexture(); \n// txt.addTextOY(incY).updateTexture();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.textOX = x;\ntxt.textOY = y;\ntxt.updateTexture();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ox = txt.textOX;\nvar oy = txt.textOY;\n```\n\n----------------------------------------\n\nTITLE: Managing Max Lines in Phaser 3 Text\nDESCRIPTION: Shows how to get and set the maximum number of lines for a Phaser 3 Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar maxLines = txt.style.maxLines;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setMaxLines(max);\n```\n\n----------------------------------------\n\nTITLE: Handling TextBox Text Content Change Event\nDESCRIPTION: Sets up an event handler for when the content of the text game object changes, which also triggers re-layout of the text box.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.on('type', function() {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Rotating Game Object Towards Position with Direction Control\nDESCRIPTION: Rotates a game object towards a specific x,y position with control over rotation direction (clockwise or counter-clockwise) and optional speed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.rotateTowardsPosition(x, y, dir);\n// rotateTo.rotateTowardsPosition(x, y, dir, speed);\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid of Matter.js Physics Image Objects\nDESCRIPTION: Creates a composite containing multiple Matter.js Image objects arranged in a grid pattern. Allows specification of columns, rows, and gaps between objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar composite = scene.matter.add.imageStack(key, frame, x, y, columns, rows);\n// var composite = scene.matter.add.imageStack(key, frame, x, y, columns, rows, columnGap, rowGap, options);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Button Elements in Phaser 3\nDESCRIPTION: Methods for retrieving various elements of the button group, including background, individual buttons, and elements by name. Some methods allow for recursive searching.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthbuttons.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = buttons.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttonObjects = buttons.getElement('buttons');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttonObject = buttons.getButton(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttonObjects = buttons.getElement('buttons[0]'); // First button\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = buttons.getElement('#' + name);\n// var gameObject = buttons.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = buttons.getByName(name);\n// var gameObject = buttons.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Adding Perspective Render Texture Object in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to add a perspective render texture object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-rendertexture.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexPerspectiveRenderTexture(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Applying Color Replace Effect to Game Object in Phaser 3\nDESCRIPTION: Shows how to apply the color replace effect to a game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-colorreplace.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexcolorreplacepipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Creating an IsoTriangle Game Object in Phaser 3\nDESCRIPTION: Creates an iso-triangle game object in a Phaser 3 scene with specified position, dimensions, orientation, and fill colors for each face.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isotriangle.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar isoTriangle = scene.add.isotriangle(x, y, width, height, reversed, fillTop, fillLeft, fillRight);\n```\n\n----------------------------------------\n\nTITLE: Handling Key1 Change in 2D Firebase Item Table\nDESCRIPTION: JavaScript code to set up an event handler for when a key1's value changes in a 2D Firebase item table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('changekey1', function(key0, key1, value) {  });\n```\n\n----------------------------------------\n\nTITLE: Setting Background in Phaser 3 Dynamic Text\nDESCRIPTION: Methods to configure the background appearance including color, stroke, and corner radius for a dynamic text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setBackgroundColor(color);\n// txt.setBackgroundColor(color, color2, isHorizontalGradient);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setBackgroundStroke(color, lineWidth);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setBackgroundCornerRadius(radius);\n// txt.setBackgroundCornerRadius(radius, iteration)\n```\n\n----------------------------------------\n\nTITLE: Adding Spinner Objects in Phaser 3 Scene\nDESCRIPTION: Shows how to add various spinner objects to a Phaser 3 scene using the Rex Spinner plugin. Each spinner type is created with a specific configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-spinner.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar aio = scene.rexSpinner.add.aio(config);\nvar arrow = scene.rexSpinner.add.arrow(config);\nvar downArrow = scene.rexSpinner.add.downArrow(config);\nvar leftArrow = scene.rexSpinner.add.leftArrow(config);\nvar rightArrow = scene.rexSpinner.add.rightArrow(config);\nvar upArrow = scene.rexSpinner.add.upArrow(config);\nvar audio = scene.rexSpinner.add.audio(config);\nvar ball = scene.rexSpinner.add.ball(config);\nvar bars = scene.rexSpinner.add.bars(config);\nvar box = scene.rexSpinner.add.box(config);\nvar clock = scene.rexSpinner.add.clock(config);\nvar cube = scene.rexSpinner.add.cube(config);\nvar dots = scene.rexSpinner.add.dots(config);\nvar facebook = scene.rexSpinner.add.facebook(config);\nvar grid = scene.rexSpinner.add.grid(config);\nvar hearts = scene.rexSpinner.add.hearts(config);\nvar ios = scene.rexSpinner.add.ios(config);\nvar orbit = scene.rexSpinner.add.orbit(config);\nvar oval = scene.rexSpinner.add.oval(config);\nvar pie = scene.rexSpinner.add.pie(config);\nvar puff = scene.rexSpinner.add.puff(config);\nvar radio = scene.rexSpinner.add.radio(config);\nvar rings = scene.rexSpinner.add.rings(config);\nvar spinner = scene.rexSpinner.add.spinner(config);\n```\n\n----------------------------------------\n\nTITLE: Creating FixedKeyControl for Camera in Phaser 3\nDESCRIPTION: This snippet shows an alternative method to create a FixedKeyControl object for camera control in Phaser 3. It uses a configuration object to set up the control.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-controller.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar controls = new Phaser.Cameras.Controls.FixedKeyControl(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Elements from Phaser 3 Label Component\nDESCRIPTION: These snippets show how to retrieve various elements from a Label component, including background, icon, text, and action game objects. It also demonstrates how to get elements by name, with an option for recursive search.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = label.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar icon = label.getElement('icon');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = label.getElement('text');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar action = label.getElement('action');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = label.getElement('#' + name);\n// var gameObject = label.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = label.getByName(name);\n// var gameObject = label.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping FSM Updates\nDESCRIPTION: Shows how to start and stop the FSM's update, preupdate, and postupdate cycles, optionally specifying a scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nstates.startUpdate();\nstates.startPreUpdate();\nstates.startPostUpdate();\n// Assume that `scene` is assigned in config of constructor\n\n// or\n\nstates.startUpdate(scene);\nstates.startPreUpdate(scene);\nstates.startPostUpdate(scene);\n\n// Stop\nstates.stopUpdate();\nstates.stopPreUpdate();\nstates.stopPostUpdate();\n```\n\n----------------------------------------\n\nTITLE: Setting Angle of Group Members in Phaser 3\nDESCRIPTION: Sets the angle of all group members to a given value, with an optional step parameter to create variation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.angle(value);\n// group.angle(value, step);\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Type for Hexagon Grid\nDESCRIPTION: Configures the stagger axis and index for the hexagon grid, determining its layout and orientation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagongrid.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.setType(staggeraxis, staggerindex);\n```\n\n----------------------------------------\n\nTITLE: Loading Board Match Plugin in Phaser 3 (Minify File)\nDESCRIPTION: Shows how to load the Board Match plugin via minified file in the preload stage and add a match object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = scene.rexBoard.add.match(config);\n```\n\n----------------------------------------\n\nTITLE: Creating LineProgress Shape in Phaser3 Rex UI\nDESCRIPTION: Shows how to add a horizontal line progress bar shape. This component visualizes progress in a linear format, commonly used for loading indicators or progress displays.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineProgress = scene.rexUI.add.lineProgress(x, y, width, height, barColor, value, config);\n```\n\n----------------------------------------\n\nTITLE: Handling InTouching 'touchend' Event\nDESCRIPTION: Adds an event listener for the 'touchend' event that fires when touch ends on an object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nintouching.on('touchend', function (intouching, gameObject) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ShatterImage Class\nDESCRIPTION: Demonstrates how to extend the ShatterImage class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyShatterImage( extends ShatterImage( {\n    constructor(scene, x, y, texture, frame, config) {\n        super(scene, x, y, texture, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Number Bar Value in JavaScript\nDESCRIPTION: Demonstrates various methods to get, set, and increase the value of the number bar. The value changes affect the position of the slider thumb and width of the slider indicator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = numberBar.getValue(min, max); // value : min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = numberBar.getValue(); // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = numberBar.value; // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.setValue(value, min, max); // value: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.setValue(value); // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.value = value; // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.addValue(inc, min, max); // inc: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.addValue(inc); // inc: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.value += inc; // inc: 0 ~ 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask from ShatterImage\nDESCRIPTION: Shows how to create a bitmap mask from a ShatterImage object for use with other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Setting Point Light Radius\nDESCRIPTION: Shows how to set the radius of a point light, which determines its area of effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npointLight.radius = radius;\n```\n\n----------------------------------------\n\nTITLE: Drawing Circles with Graphics in Phaser 3\nDESCRIPTION: Methods for drawing filled and stroked circles using either circle objects or individual center coordinates and radius.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.fillCircleShape(circle); // circle: {x, y, radius}\ngraphics.fillCircle(x, y, radius);\ngraphics.strokeCircleShape(circle);  // circle: {x, y, radius}\ngraphics.strokeCircle(x, y, radius);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pop-Up Animation with Width and Height in Phaser 3\nDESCRIPTION: Animates a game object by scaling up from 0 to its current scale over a specified duration. This method affects both width and height of the object and can use a custom ease function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScale(scaleX, scaleY)\n    .popUp(duration);\n\n// gameObject.popUp(duration, undefined, ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScale(scaleX, scaleY)\n    .popUpPromise(duration)\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Accessing Footer Element in Holy Grail Layout\nDESCRIPTION: Retrieves the footer game object from the Holy Grail layout.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar footer = holyGrail.getElement('footer');\n```\n\n----------------------------------------\n\nTITLE: Binding and Drawing Between Render Targets\nDESCRIPTION: Method to bind a source texture and draw it to a target with shader effects applied.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.bindAndDraw(source, target);\n// pipelineInstance.bindAndDraw(source, target, clear, clearAlpha, shader);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Event Emitter from Scene in Phaser 3\nDESCRIPTION: Demonstrates how to get an event emitter from a Phaser 3 scene object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ee = scene.events;\n```\n\n----------------------------------------\n\nTITLE: Setting Text Content in TextArea\nDESCRIPTION: Demonstrates how to set text content in the TextArea component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.setText(text);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Holy Grail Class\nDESCRIPTION: Example of creating a custom class that extends the Holy Grail layout for additional functionality or custom behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyHolyGrail extends RexPlugins.UI.HolyGrail {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Depth of Game Objects in Phaser3\nDESCRIPTION: Sets the depth (z-index) of game objects, determining their rendering order. Higher depth values appear in front of lower values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetDepth(gameObjects, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Creating NinePatch2 with Complete Configuration Object\nDESCRIPTION: Creates a NinePatch2 instance with all configuration in a single object. This provides the most concise and unified approach to configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch2({\n    x: 0, y: 0,\n    width: 1, height: 1,\n    key: undefined,\n    columns: undefined,\n    rows: undefined,\n\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    baseFrame: undefined,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Drop Shadow Effect Configuration\nDESCRIPTION: Configure and apply the drop shadow effect to a game object with customizable parameters for offset, color, blur, and quality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dropshadow.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexDropShadowPipeline').add(gameObject, {\n    // angle: 45,\n    // distance: 5,\n    // shadowColor: 0xffffff,\n    // alpha: 0.5,\n    // shadowOnly: false,\n    // blur: 4,\n    // quality: 3,\n    // pixelWidth: 1,\n    // pixelHeight: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Data Operations in Phaser3 Tag Player\nDESCRIPTION: Methods to get, set, increment, and toggle data values in the Tag Player's data manager. Allows retrieving single values or multiple values at once.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = tagPlayer.getData(key);\nvar values = tagPlayer.getData(keys); // keys: an array of keys\nvar value = tagPlayer.data.values[key];\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.setData(key, value);\ntagPlayer.incData(key, value);    \ntagPlayer.setData(obj); // obj: {key0:value0, key1:value1, ...}\ntagPlayer.data.values[key] = value;\ntagPlayer.data.values[key] += inc;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.toggleData(key);\n```\n\n----------------------------------------\n\nTITLE: Creating Clock Instance with Configuration in Phaser 3\nDESCRIPTION: Creates a clock instance with optional configuration, including time scale setting.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar clock = scene.plugins.get('rexClock').add(scene, {\n    // timeScale: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing Properties of Game Objects in Phaser3\nDESCRIPTION: Incrementally increases a property value for each game object in an array. Can be used to create graduated effects across multiple objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.PropertyValueInc(gameObjects, key, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Next Line in TextArea\nDESCRIPTION: Shows how to scroll the content to display the next line, moving down one line from the current position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.scrollToNextLine();\n```\n\n----------------------------------------\n\nTITLE: Applying Easing Function in Phaser 3\nDESCRIPTION: Demonstrates how to apply an easing function to a value 't' ranging from 0 to 1 in Phaser 3. This is typically used within animation loops or tween calculations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ease-function.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar result = easeFunction(t);\n```\n\n----------------------------------------\n\nTITLE: Setting Font Size to Fit Width\nDESCRIPTION: Adjusts text font size to fit a specified width. Compatible with various text object types.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = scene.rexUI.setFontSizeFitToWidth(textObject, width);\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Axis Gravity in Phaser 3 Arcade Physics\nDESCRIPTION: Sets object-specific gravity for a physics body along individual axes. Allows separate control of horizontal and vertical gravity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setGravityX(x);\ngameObject.setGravityY(y);\n```\n\n----------------------------------------\n\nTITLE: Removing Timers\nDESCRIPTION: Demonstrates various methods to remove timers from the Real-Time Timers instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nrealtimetimers.removeTimers(name);\nrealtimetimers.removeTimers(timer);\nrealtimetimers.clearTimers();\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling FSM\nDESCRIPTION: Demonstrates methods to enable, disable, or toggle the FSM's ability to change states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nstates.setEnable();\n// states.setEnable(false); // disable\n\n// or\n\nstates.toggleEnable();\n```\n\n----------------------------------------\n\nTITLE: Configuring Bullet Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Sets up the bullet plugin in the Phaser 3 game configuration when using the npm package. This method allows for global plugin availability across all scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bullet.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport BulletPlugin from 'phaser3-rex-plugins/plugins/bullet-plugin.js';\nvar config = {\n    physics: {\n        default: 'arcade',\n        arcade: {\n            // debug: true\n        }\n    },\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexBullet',\n            plugin: BulletPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Exporting and Loading Animations in Phaser 3\nDESCRIPTION: Shows how to export animations to JSON and load them from JSON in Phaser 3. This is useful for saving and loading animation configurations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/animation.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar json = scene.anims.toJSON();\n\nscene.anims.fromJSON(json);\n// scene.anims.fromJSON(json, clearCurrentAnimations);\n\nscene.load.json(key, url);\n\nscene.load.animation(key, url);\n```\n\n----------------------------------------\n\nTITLE: Handling Events for Hidden Input Text in Phaser 3\nDESCRIPTION: Demonstrates how to handle various events related to the hidden input text object in Phaser 3, such as text change and key presses.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/hiddeninputtext.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nhiddenInputText.on('textchange', function(text, textGameObject){\n});\n\nhiddenInputText.on('nan', function(text){\n\n});\n\nhiddenInputText.on('keydown-ENTER', function(){\n});\n```\n\n----------------------------------------\n\nTITLE: Setting X Position of Game Objects in Phaser3\nDESCRIPTION: Sets the x position of game objects to a specified value, with optional step, index, and direction parameters for creating patterns.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetX(gameObjects, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Applying GrayScale Effect to Camera\nDESCRIPTION: Applies the grayscale post-processing effect to a camera using the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexgrayscalepipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Rectangle Properties in Phaser 3\nDESCRIPTION: Various methods to set position, size, and other properties of a Rectangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rectangle.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrect.setTo(x, y, width, height);\nrect.setPosition(x, y);\nrect.setSize(width, height);\nPhaser.Geom.Rectangle.CopyFrom(source, dest);\n```\n\n----------------------------------------\n\nTITLE: Getting To-Texture Edge Parameters in Phaser 3 Dissolve Effect\nDESCRIPTION: Retrieves the edge start and width parameters for the to-texture (target texture) in the dissolve effect. These control the appearance of the revealing edge.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar edgeStart = pipelineInstance.toEdgeStart;\nvar edgeWidth = pipelineInstance.toEdgeWidth;\n```\n\n----------------------------------------\n\nTITLE: Rotating Group Members Around a Point with Distance in Phaser 3\nDESCRIPTION: Rotates all group members around a specified point by a given angle and at a specific distance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.rotateAroundDistance(point, angle, distance);\n```\n\n----------------------------------------\n\nTITLE: Basic i18next Initialization\nDESCRIPTION: Simple initialization of i18next with backend\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/i18next.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ni18next.use(Backend).init(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Axis Velocity in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the velocity of a physics body along individual axes. Allows separate control of horizontal and vertical movement.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setVelocityX(x);\ngameObject.setVelocityY(y);\n```\n\n----------------------------------------\n\nTITLE: Setting Hit Area of Group Members in Phaser 3\nDESCRIPTION: Sets the hit area (for input detection) of all group members, with an optional callback for custom hit detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setHitArea();\n// group.setHitArea(hitArea, hitAreaCallback);\n```\n\n----------------------------------------\n\nTITLE: Creating Button Instance Directly in Phaser 3\nDESCRIPTION: Shows how to create a Button instance directly using the imported class, without the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = new Button(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Alignment in Phaser 3\nDESCRIPTION: Shows how to set the text alignment (left, center, right, or justify) for a Phaser 3 Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setAlign(align);\n```\n\n----------------------------------------\n\nTITLE: Managing Global Sound Volume in Phaser 3\nDESCRIPTION: Methods to set and get the global volume of the sound manager, affecting all sound instances in the game with values from 0 to 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.setVolume(volume); // volume: 0 to 1\n// scene.sound.volume = volume;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar volume = scene.sound.volume;\n```\n\n----------------------------------------\n\nTITLE: Querying with Binary Indices\nDESCRIPTION: Query a collection using filters on properties with binary indices for improved performance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key0: {'$gt': value}});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Particle Processor to Emitter in JavaScript\nDESCRIPTION: Adds a custom particle processor instance to an emitter. The processor will be called for each particle during the update cycle, allowing for custom particle behavior modifications.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nvar myParticleProcessor = emitter.addParticleProcessor(new MyParticleProcessor);\n```\n\n----------------------------------------\n\nTITLE: Querying Experience and Level Information in JavaScript\nDESCRIPTION: Methods to retrieve current experience, level, required experience for next level, and perform calculations between experience and levels. These methods provide read-only access to the experience bar's state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-expbar.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar exp = expBar.getExp();\n// var exp = expBar.exp;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar level = expBar.getLevel();\n// var level = expBar.level;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar exp = expBar.requiredExp;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar exp = expBar.getExp(level);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar level = expBar.getLevel(exp);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar exp = expBar.getRequiredExpToNextLevel(level);\n// var exp = expBar.getRequiredExpToNextLevel(level, exp);\n```\n\n----------------------------------------\n\nTITLE: Path Creation and Manipulation in Phaser 3\nDESCRIPTION: Methods for creating and manipulating line paths including starting points, line drawing, arcs, bezier curves and path transformations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlines.start();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.startAt(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.lineTo(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.lineTo(x, y, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.verticalLineTo(x);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.verticalLineTo(x, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.horizontalLineTo(y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.horizontalLineTo(y, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.arc(centerX, centerY, radius, startAngle, endAngle, anticlockwise);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.ellipticalArc(centerX, centerY, radiusX, radiusY, startAngle, endAngle, anticlockwise);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.quadraticBezierTo(cx, cy, x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.cubicBezierTo(cx0, cy0, cx1, cy1, x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.catmullRomTo(x1, y1, x2, y2, x3, y3, ...);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.close();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.end();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.copyPathFrom(srcLine);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.copyPathFrom(srcLine, startT, endT);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.appendPathFrom(srcLine);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.appendPathFrom(srcLine, startT, endT);\n```\n\n----------------------------------------\n\nTITLE: Deactivating and Hiding a Group Member in Phaser 3\nDESCRIPTION: Sets a group member to inactive and invisible, commonly used in object pooling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.killAndHide(gameObject);  // gameObject.setActive(false).setVisible(false)\n```\n\n----------------------------------------\n\nTITLE: Handling Undo-Swap Event in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This code demonstrates how to listen for the 'undo-swap' event, which fires when selected chess pieces need to be swapped back. It provides access to the selected chess objects, the board object, and the bejeweled instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.on('undo-swap', function(selectedChess1, selectedChess2, board, bejeweled) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Vector2 Components Method 1\nDESCRIPTION: Sets both x and y components of a Vector2 using the set or setTo methods, which take separate x and y parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvector.set(x, y);\n// vector.setTo(x, y);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Texture Information from TransitionImagePack in Phaser 3\nDESCRIPTION: Shows how to retrieve the current texture key and frame name from a TransitionImagePack instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar textureKey = image.texture.key;\nvar frameName = image.frame.name;\n```\n\n----------------------------------------\n\nTITLE: Creating a Star Shape in Phaser 3\nDESCRIPTION: Creates a star shape game object in a Phaser scene. The shape can be customized with specified number of points, inner and outer radius, fill color, and optional fill alpha.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar star = scene.add.star(x, y, points, innerRadius, outerRadius, fillColor);\n// var star = scene.add.star(x, y, points, innerRadius, outerRadius, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Sound Configuration Options in Phaser 3\nDESCRIPTION: Comprehensive configuration object for sound instances with options for volume, playback rate, looping, and spatial sound positioning.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    mute: false,\n    volume: 1,\n    rate: 1,\n    detune: 0,\n    seek: 0,\n    loop: false,\n    delay: 0,\n\n    // source of the spatial sound\n    source: {\n        x: 0,\n        y: 0,\n        z: 0,\n        panningModel: 'equalpower',\n        distanceModel: 'inverse',\n        orientationX: 0,\n        orientationY: 0,\n        orientationZ: -1,\n        refDistance: 1,\n        maxDistance: 10000,\n        rolloffFactor: 1,\n        coneInnerAngle: 360,\n        coneOuterAngle: 0,\n        coneOuterGain: 0,\n        follow: undefined\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Bounce Values in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current bounce values of a physics body in both X and Y directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nvar bx = gameObject.body.bounce.x;\nvar by = gameObject.body.bounce.y;\n```\n\n----------------------------------------\n\nTITLE: Getting Random Item from Array in Phaser 3 JavaScript\nDESCRIPTION: Demonstrates how to retrieve a random item from an array using Phaser.Utils.Array.GetRandom(). The method can optionally take start index and length parameters to limit the selection range.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-random.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar item = Phaser.Utils.Array.GetRandom(arr);\n// var item = Phaser.Utils.Array.GetRandom(arr, startIndex, length);\n```\n\n----------------------------------------\n\nTITLE: Testing Triangle-Rectangle Intersection in Phaser 3\nDESCRIPTION: Determines whether a triangle intersects with a rectangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.RectangleToTriangle(rect, triangle);\n```\n\n----------------------------------------\n\nTITLE: Checking if Current User is in the List\nDESCRIPTION: JavaScript code showing how to check if the current user is present in the online user list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInList = userList.isInList;\n```\n\n----------------------------------------\n\nTITLE: Handling Enter Fullscreen Event in Phaser 3\nDESCRIPTION: Demonstrates how to listen for the 'enterfullscreen' event, which fires when fullscreen mode is successfully activated.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fullscreen.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scale.on('enterfullscreen', function() {});\n```\n\n----------------------------------------\n\nTITLE: Disabling World Bounds Collision in Phaser 3 Arcade Physics\nDESCRIPTION: Allows a physics body to pass through world boundaries, potentially leaving the visible game world.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setCollideWorldBounds(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Test String for Font Measurement in Phaser 3 Text\nDESCRIPTION: Shows how to set the test string used for measuring font metrics in a Phaser 3 Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.style.setTestString(text);\n```\n\n----------------------------------------\n\nTITLE: Getting Warp Parameters from CRT Effect\nDESCRIPTION: Retrieves the current horizontal and vertical warp parameter values from a CRT pipeline instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar warpX = pipelineInstance.warpX;\nvar warpY = pipelineInstance.warpY;\n```\n\n----------------------------------------\n\nTITLE: Shattering an Image with Configuration Object\nDESCRIPTION: Shows how to shatter an image using a configuration object that includes center position and shatter parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimage.shatter({\n    // centerX: \n    // centerY: \n    // ringRadiusList:\n    // samplesPerRing: \n    // variation\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Setting Start Angle of an Arc in Phaser 3\nDESCRIPTION: Sets the start angle (in degrees) for an Arc game object by directly modifying the startAngle property. This is an alternative to using setStartAngle method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\narc.startAngle = startAngle;\n```\n\n----------------------------------------\n\nTITLE: Handling Scroll Events in TextArea\nDESCRIPTION: Demonstrates how to listen for and handle scroll events from the TextArea component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.on('scroll', function(textArea) {\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom Star Object in Phaser 3\nDESCRIPTION: Creates an instance of a custom Star class in Phaser 3, specifying position, points, inner and outer radius, and fill color.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar star = new MyStar(scene, x, y, points, innerRadius, outerRadius, fillColor);\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas Texture in Phaser 3\nDESCRIPTION: Creates a new canvas texture with specified key, width, and height\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-texture.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar texture = scene.textures.createCanvas(key, width, height);\n```\n\n----------------------------------------\n\nTITLE: Anchor Position Configuration in Phaser3 Sizer\nDESCRIPTION: Methods for setting anchor positions relative to the visible window using percentage and offset values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setAnchor({\n    // left: '0%+0',\n    // right: '0%+0',\n    // centerX: '0%+0',\n    // x: '0%+0',\n    // top: '0%+0',\n    // bottom: '0%+0',\n    // centerY: '0%+0',\n    // y: '0%+0'\n})\n```\n\n----------------------------------------\n\nTITLE: Rolling Animation Methods for Perspective Carousel\nDESCRIPTION: Various methods to control the rolling animation of a perspective carousel, including moving to specific faces or relative positions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.roll.toNext(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.roll.toPrevious(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.roll.toRight(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.roll.toLeft(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.roll.to(faceIndex, duration);\n```\n\n----------------------------------------\n\nTITLE: Creating a Trees Instance with Rex UI Plugin (NPM Version)\nDESCRIPTION: Creates a Trees instance using the Rex UI Plugin after proper configuration when installed via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar trees = scene.rexUI.add.trees(config);\n```\n\n----------------------------------------\n\nTITLE: Starting Flash Animation in Phaser 3\nDESCRIPTION: Demonstrates different ways to start the flash animation, including specifying duration and repeat count.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flash.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nflash.flash();\n// flash.flash(duration, repeat);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nflash.flash({\n    duration: 500,\n    repeat: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Code to configure the UI plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Buttons to Tweaker\nDESCRIPTION: Adds multiple buttons in a group with shared configuration. Supports wrapping layout and individual button callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addButtons({\n    // bindingTarget: object,\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    title: undefined,\n\n    buttons:[\n        {\n            label: undefined,\n            callback: function(target) {},\n        },\n        {\n            label: undefined,\n            callback: function(target) {},\n        },\n        // ...\n    ],\n\n    wrap: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Elements by Name in Phaser 3 UI Tweakers\nDESCRIPTION: Retrieves a game object from the tweaker using its name. Provides multiple methods for accessing elements with options for recursive searching.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tweaker.getElement('#' + name);\n// var gameObject = pages.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tweaker.getByName(name);\n// var gameObject = tweaker.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Creating Pages Object After Plugin Installation\nDESCRIPTION: Code to create a pages container after installing the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar pages = scene.rexUI.add.pages(config);\n```\n\n----------------------------------------\n\nTITLE: Checking if Current Page Typing is Complete\nDESCRIPTION: Returns a boolean indicating whether the typing animation for the current page has finished.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPageEnd = textBox.isPageEnd;\n```\n\n----------------------------------------\n\nTITLE: Simple Spiral Curve Creation\nDESCRIPTION: Creates a basic spiral curve with fixed position and radius parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/curve-spiral.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar spiral = scene.plugins.get('rexSpiralCurve').add(x, y, startRadius, endRadius, startAngle, endAngle, rotation);\n```\n\n----------------------------------------\n\nTITLE: Removing Child from ContainerLite in Phaser 3\nDESCRIPTION: Demonstrates how to remove a child game object from a ContainerLite instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.remove(child);\n// container.remove(child, destroyChild);\n\ncontainer.unpin(child);\n// container.unpin(child, destroyChild);\n\ncontainer.clear();\n// container.clear(destroyChild);\n```\n\n----------------------------------------\n\nTITLE: Managing Text Shadow Effects in Phaser 3\nDESCRIPTION: Code snippets for retrieving and setting text shadow properties including color, offset, blur, and shadow application to stroke or fill. Provides control over text shadow appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = txt.style.shadowColor;\nvar offsetX = txt.style.shadowOffsetX;\nvar offsetY = txt.style.shadowOffsetY;\nvar blur = txt.style.shadowBlur;\nvar stroke = txt.style.shadowStroke;\nvar enabled = txt.style.shadowFill;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setShadow(x, y, color, blur, shadowStroke, shadowFill);\ntxt.setShadowOffset(x, y);\ntxt.setShadowColor(color);\ntxt.setShadowBlur(blur);\ntxt.setShadowStroke(enabled);\ntxt.setShadowFill(enabled);\n```\n\n----------------------------------------\n\nTITLE: Configuring GridButtons Instance\nDESCRIPTION: Detailed configuration example for creating a grid buttons container with various options and callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridbuttons.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = scene.rexUI.add.gridButtons({\n    buttons: [\n        [buttonGameObject, buttonGameObject, buttonGameObject],\n        [buttonGameObject, buttonGameObject, buttonGameObject]\n    ],\n    expand: true,\n    click: {\n        mode: 'pointerup',\n        clickInterval: 100\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Knob Value Change Event Handler in Phaser3\nDESCRIPTION: Code showing how to add an event listener for value changes in the knob component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-knob.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nknob.on('valuechange', function(newValue, oldValue, knob){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom PerspectiveCard Class in Phaser 3\nDESCRIPTION: Demonstrates how to create a custom class extending PerspectiveCard in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-perspectivecard.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPerspectiveCard extends PerspectiveCard {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog UI Instance in Phaser 3\nDESCRIPTION: Creates a new dialog UI component instance in a Phaser 3 scene using the Rex UI plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = scene.rexUI.add.dialog(config);\n```\n\n----------------------------------------\n\nTITLE: Creating an ImageInputLabel in Phaser 3 Rex UI\nDESCRIPTION: Demonstrates how to create and configure an ImageInputLabel object with various options such as orientation, background, canvas, icon, text, action, and spacing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar imageInputLabel = scene.rexUI.add.imageInputLabel({\n    orientation: 0,\n    background: backgroundGameObject,\n    canvas: {\n        // width: 128, \n        // height: 128,\n        // fill: undefined,\n        // key: undefined, \n        // frame: undefined,        \n    },\n    iconBackground: iconBackgroundGameObject,    \n    text: textGameObject,\n    expandTextWidth: false,\n    expandTextHeight: false,\n    action: actionGameObject,\n    align: undefined,\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        icon: 0, \n        iconTop: 0, iconBottom: 0, iconLeft: 0, iconRight: 0,\n        text: 0,\n        actionTop: 0, actionBottom: 0, actionLeft: 0, actionRight: 0,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Rounded Rectangle Backgrounds for Text in Phaser 3\nDESCRIPTION: Methods for configuring rounded rectangle backgrounds for text, including radius and iteration parameters. Supports convex and concave corner styles with different rounding levels.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar radius = txt.style.backgroundCornerRadius;\nvar iteration = txt.style.backgroundCornerIteration;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setBackgroundCornerRadius(radius);\n// txt.setBackgroundCornerRadius(radius, iteration);\n```\n\n----------------------------------------\n\nTITLE: Checking Input Await State in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This snippet shows how to check if the Bejeweled plugin is awaiting input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nisAwaitingInput = bejeweled.isAwaitingInput();\n```\n\n----------------------------------------\n\nTITLE: Enabling Dialog Buttons - JavaScript\nDESCRIPTION: Methods for enabling input on specific buttons. The index parameter can be a number index or a button game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.setChoiceEnable(index);\ndialog.setActionEnable(index);\ndialog.setToolbarEnable(index);\ndialog.setLeftToolbarEnable(index);\n```\n\n----------------------------------------\n\nTITLE: Loading Flash Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the flash plugin in the preload stage of a Phaser 3 scene and add flashing behavior to a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flash.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexflashplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexflashplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar flash = scene.plugins.get('rexflashplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Action Buttons in Dialog - JavaScript\nDESCRIPTION: Multiple ways to access action buttons in a dialog. Allows retrieving all action buttons or a specific button by index.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = dialog.getElement('actions');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = dialog.getAction(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = dialog.getElement('actions[' + index + ']');\n```\n\n----------------------------------------\n\nTITLE: Rectangle Shape Configuration for Matter.js Physics\nDESCRIPTION: Configuration object for creating a rectangle-shaped physics body. Typically uses the game object's width and height if not specified.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'rectangle',\n    // width: gameObject.width\n    // height: gameObject.height\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Board Plugin in Game Configuration\nDESCRIPTION: Code to configure and install the Board plugin in the game configuration using the import approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagonmap.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Tile Position from World Coordinates\nDESCRIPTION: Converts world coordinates to tile position in the hexagon grid.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagongrid.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXY = grid.getTileXY(worldX, worldY);  // tileXY: {x, y}\n// var out = grid.getTileXY(worldX, worldY, out);\n```\n\n----------------------------------------\n\nTITLE: Assigning Cursor to Game Object in Phaser 3\nDESCRIPTION: Sets a custom cursor for a specific game object when the mouse hovers over it. The cursor style is defined in the setInteractive method's options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursor.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setInteractive({\n    cursor: CSSString\n});\n// CSSString: 'url(assets/input/cursors/sword.cur), pointer'\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Background Color in Phaser 3\nDESCRIPTION: Shows how to set the background color of a camera in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setBackgroundColor(color);\n```\n\n----------------------------------------\n\nTITLE: Creating Instance of Custom Sprite in Phaser 3\nDESCRIPTION: Instantiates a custom sprite class, passing the necessary parameters including scene, position (x, y), and texture key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar sprite = new MySprite(scene, x, y, key);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document from Firestore\nDESCRIPTION: Removes a document from a Firestore collection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).doc(docName).delete()\n    .then(function() { /* ... */ })\n    .catch(function(error) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Incrementing Value in Firebase Item Table\nDESCRIPTION: JavaScript code for incrementing a numeric value in a Firebase item table with promise handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntable.incValue(key0, value)\n// table.incValue(key0, key1, value)\n// table.incValue(key0, key1, key2, value)\n    .then(function() { })\n    .catch(function() { })    \n```\n\n----------------------------------------\n\nTITLE: Customizing Circular Bar\nDESCRIPTION: Methods to customize the appearance and behavior of the circular progress bar, including color, thickness, start angle, and direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar barColor = circularProgress.barColor;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setBarColor(barColor);\n// circularProgress.barColor = barColor;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar startAngle = circularProgress.startAngle;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setStartAngle(startAngle);\ncircularProgress.startAngle = startAngle;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar anticlockwise = circularProgress.anticlockwise;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setAnticlockwise(anticlockwise);\n// circularProgress.anticlockwise = anticlockwise;\n```\n\n----------------------------------------\n\nTITLE: Circle Intersection Operations in Phaser 3\nDESCRIPTION: Demonstrates various intersection operations between Circles and other geometric shapes like Circles, Rectangles, Triangles, and Lines.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-circle.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.CircleToCircle(circleA, circleB);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetCircleToCircle(circleA, circleB);\n// var out = Phaser.Geom.Intersects.GetCircleToCircle(circleA, circleB, out);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.CircleToRectangle(circle, rect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetCircleToRectangle(circle, rect);\n// var out = Phaser.Geom.Intersects.GetCircleToRectangle(circle, rect, out);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.TriangleToCircle(triangle, circle);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetTriangleToCircle(triangle, circle);\n// var out = Phaser.Geom.Intersects.GetTriangleToCircle(triangle, circle, out);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.LineToCircle(line, circle);\n// var result = Phaser.Geom.Intersects.LineToCircle(line, circle, nearest);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetLineToCircle(line, circle);\n// var out = Phaser.Geom.Intersects.GetLineToCircle(line, circle, out);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Bullet Speed in Phaser 3\nDESCRIPTION: Demonstrates how to set and get the speed of a bullet instance. The speed determines how fast the game object moves in its current direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bullet.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbullet.setSpeed(speed);\n// bullet.speed = speed;\n\nvar speed = bullet.speed;\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Glow Color\nDESCRIPTION: Gets and sets the color of the glow effect using either hexadecimal values or RGB object notation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Get\nvar color = pipelineInstance.glowColor;\n// Red: color.red, 0~255.\n// Green: color.green, 0~255.\n// Blue: color.blue, 0~255.\n\n// Set\npipelineInstance.setGlowColor(value);\n// Or\npipelineInstance.glowColor = value;\n// value: A number 0xRRGGBB, or a JSON object {r:255, g:255, b:255}\n```\n\n----------------------------------------\n\nTITLE: Creating a Triangle Pattern\nDESCRIPTION: Method to create a triangle-shaped grid of tiles with specified height and type. Returns an array of tile positions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagonmap.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = scene.rexBoard.hexagonMap.triangle(board, type, height);\n// var out = scene.rexBoard.hexagonMap.triangle(board, type, height, out);\n```\n\n----------------------------------------\n\nTITLE: Getting First Frame of Video in Phaser 3\nDESCRIPTION: Retrieves the first frame of the video, useful for creating thumbnails or previews.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.getFirstFrame();\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Ship Behavior Instance\nDESCRIPTION: Creates a ship behavior instance with various configuration options for movement, rotation, wrapping, and input control.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar ship = scene.plugins.get('rexShip').add(gameObject, {\n    // maxSpeed: 200,\n    // acceleration: 200,\n    // drag: 0.99,\n    // turnSpeed: 300,\n    // wrap: true,\n    // padding: 0,\n    // enable: true,\n    // cursorKeys: scene.input.keyboard.createCursorKeys()\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Styles for Button in Phaser3 Rex UI\nDESCRIPTION: Specifies the styling options for button components, including background, title, and button-specific styles. It covers properties for text formatting, background appearance, icon sizing, and spacing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        inputRow: {\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    \n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n    \n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                }\n            },\n\n            button: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    \n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n\n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                }\n            },\n\n            space: {\n                left: 0, right: 0, top: 0, bottom: 0,\n                title: 0\n            },\n            \n            proportion: {\n                title: 0, inputField: 0,\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrap Result Structure in Phaser 3 Dynamic Text\nDESCRIPTION: Structure of the result object returned by text wrapping operations, containing information about the wrapped content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    children: [],\n    lines: [],\n    isLastPage: false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom IsoTriangle Class in Phaser 3\nDESCRIPTION: Creates a custom class that extends Phaser's IsoTriangle game object with the ability to add custom functionality and override methods like preUpdate.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isotriangle.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyIsoTriangle extends Phaser.GameObjects.IsoTriangle {\n    constructor(scene, x, y, width, height, reversed, fillTop, fillLeft, fillRight) {\n        super(scene, x, y, width, height, reversed, fillTop, fillLeft, fillRight);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Perspective Carousel using Plugin Method\nDESCRIPTION: Code to create a perspective carousel object after the plugin has been loaded or configured in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar carousel = scene.add.rexPerspectiveCarousel(config);\n```\n\n----------------------------------------\n\nTITLE: Accessing Canvas Elements in Phaser 3\nDESCRIPTION: Retrieves the canvas element and its context from a texture\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-texture.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = texture.getCanvas();\nvar context = texture.getContext();\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Integer (Two Values)\nDESCRIPTION: Methods for setting two integer uniform values in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set2i(name, value0, value1);\n// pipelineInstance.set2i(name, value0, value1, shader);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements by Name in Dialog - JavaScript\nDESCRIPTION: Methods to get dialog elements by their name. The recursive parameter allows searching all children recursively when set to true.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = dialog.getElement('#' + name);\n// var gameObject = dialog.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = dialog.getByName(name);\n// var gameObject = dialog.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Line Index in TextArea\nDESCRIPTION: Demonstrates how to get the index of the line currently at the top of the visible area.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineIndex = textArea.lineIndex;\n```\n\n----------------------------------------\n\nTITLE: Saving Data with LocalForage using Callback\nDESCRIPTION: Demonstrates how to save data to LocalForage using the callback approach. The setItem method requires a key, a value to store, and a callback function that executes after the operation completes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlocalforage.setItem(key, value, function(){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Handling Game Object Press Start Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for press-start gestures on a game object (chess piece) on the board. The callback receives the press behavior object and the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('gameobjectpressstart', function(press, gameObject) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('board.pressstart', function(press) {\n})\n```\n\n----------------------------------------\n\nTITLE: Manipulating TextAreaInput Content in JavaScript\nDESCRIPTION: These snippets demonstrate how to set, append, and get text content in the TextAreaInput component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.setText(text);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.appendText(text);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = textAreaInput.text;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Title Element in Dialog - JavaScript\nDESCRIPTION: Gets the title game object from a dialog. This allows access to the title element for further manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar title = dialog.getElement('title');\n```\n\n----------------------------------------\n\nTITLE: Importing Overlap Sizer Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the Overlap Sizer plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overlapsizer.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting X and Y Positions of Game Objects in Phaser3\nDESCRIPTION: Sets both x and y positions of game objects, with optional step values for each axis to create grid-like patterns.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetXY(gameObjects, x, y, stepX, stepY, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Creating Overlap Sizer Instance in Phaser 3\nDESCRIPTION: Shows how to create an instance of the Overlap Sizer after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overlapsizer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sizer = scene.rexUI.add.overlapSizer(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Pixel Color from RenderTexture in Phaser 3\nDESCRIPTION: Captures the color of a specific pixel from the render texture and passes it to a callback function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.snapshotPixel(x, y, callback);\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Scroll Position in TextArea\nDESCRIPTION: Demonstrates how to set the vertical scroll position directly with a Y-offset value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.childOY = oy;\n// textArea.setChildOY(oy);\n```\n\n----------------------------------------\n\nTITLE: Setting Transition Target Texture in Phaser 3 Dissolve Effect\nDESCRIPTION: Sets the transition target texture for a dissolve effect using texture key and frame name. Optionally allows specifying the resize mode for the texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setTransitionTargetTexture(textureKey, frameName);\n// pipelineInstance.setTransitionTargetTexture(textureKey, frameName, resizeMode);\n```\n\n----------------------------------------\n\nTITLE: Setting Content Callback for Custom Tags in Phaser3 Tag Player\nDESCRIPTION: Code to set a content callback function for custom tags in the Tag Player. This callback will be invoked when content is found for the custom tag.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar callback = function(content) {\n    // ...\n}\ntagPlayer.setContentCallback(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Getting Game Objects in Phaser3 Tag Player\nDESCRIPTION: Methods to retrieve game objects from the Tag Player's game object manager. Can retrieve a specific game object by type and name or all game objects of a specific type.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tagPlayer.getGameObject(goType, name);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObjects = tagPlayer.getGameObject(goType);\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Message Reception\nDESCRIPTION: Methods to start and stop receiving messages from Firebase.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmessages.startReceiving();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmessages.stopReceiving();\n```\n\n----------------------------------------\n\nTITLE: Configuring a Board Match Object in Phaser 3\nDESCRIPTION: Shows the configuration options for creating a match object, including board reference, wildcard symbol, and direction mask settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = scene.rexBoard.add.match({\n   board: board,\n   // wildcard: undefined\n   // dirMask: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Placing Game Objects Randomly on a Line in Phaser3\nDESCRIPTION: Places game objects at random positions along a line geometry, useful for creating scattered distributions along a path.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.RandomLine(gameObjects, line);\n```\n\n----------------------------------------\n\nTITLE: Applying GrayScale Effect with Global Plugin\nDESCRIPTION: Applies the grayscale effect to a game object using the globally configured plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGrayScalePipeline').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Bob Object Frame in Phaser 3\nDESCRIPTION: Changes the frame used by a Bob object. This allows changing the appearance of the Bob by using a different portion of the Blitter's texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nbob.setFrame(frame);\n```\n\n----------------------------------------\n\nTITLE: Debug Visualization Settings\nDESCRIPTION: Configuration options for debugging physics bodies, including body bounds and velocity visualization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nbody.debugShowBody = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.debugBodyColor = 0xff00ff;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.debugShowVelocity = true;\n```\n\n----------------------------------------\n\nTITLE: Complete Knob Configuration in Phaser3\nDESCRIPTION: Comprehensive configuration object for creating a knob UI component with all available options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-knob.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar knob = scene.rexUI.add.knob({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    background: backgroundGameObject,\n\n    barColor: undefined,\n    trackColor: undefined,\n    centerColor: undefined,\n    thickness: 0.2,\n    startAngle: Phaser.Math.DegToRad(270),\n    anticlockwise: false,\n    // iterations: 128,\n    knobDepth: 0,\n\n    text: undefined,\n    textFormatCallback: undefined,\n    textFormatCallbackScope: undefined,\n\n    input: 'pan',\n\n    value: 0,\n    gap: undefined,\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n    valuechangeCallback: function(newValue, oldValue, knob) {\n    },\n    valuechangeCallbackScope: undefined,\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n    },\n\n    enable: true,\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Event Sheet Active State\nDESCRIPTION: Shows methods to control and query the active state of event sheets.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Activate event sheet\neventSheetManager.setEventSheetActiveState(title);\n// eventSheetManager.setEventSheetActiveState(title, true);\n\n// Inactivate event sheet\neventSheetManager.setEventSheetActiveState(title, false);\n\n// Get active state\nvar active = eventSheetManager.getEventSheetActiveState(title);\n```\n\n----------------------------------------\n\nTITLE: Loading Image Assets in Phaser 3\nDESCRIPTION: Methods for loading regular images, images with normal maps, SVG images, and HTML textures.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n// scene.load.image(key, url, xhrSettings);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, [url, normalMapUrl]);\n// scene.load.image(key, [url, normalMapUrl], xhrSettings);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.svg(key, url);\n// scene.load.svg(key, url, svgConfig);\n// scene.load.svg(key, url, svgConfig, xhrSettings);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.htmlTexture(key, url, width, height);\n// scene.load.htmlTexture(key, url, width, height, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Creating Text Objects from JSON Configuration in Phaser 3\nDESCRIPTION: Demonstrates how to create a text object using scene.make.text with a configuration object that specifies position, padding, text content, and styling properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.make.text({\n    x: 100,\n    y: 100,\n    padding: {\n        left: 64,\n        right: 16,\n        top: 20,\n        bottom: 40\n        //x: 32,    // 32px padding on the left/right\n        //y: 16     // 16px padding on the top/bottom\n    },\n    text: 'Text\\nGame Object\\nCreated from config',\n    style: {\n        fontSize: '64px',\n        fontFamily: 'Arial',\n        color: '#ffffff',\n        align: 'center',  // 'left'|'center'|'right'|'justify'\n        backgroundColor: '#ff00ff'\n    },\n    // origin: {x: 0.5, y: 0.5},\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Setting Circle Display Size in Phaser 3\nDESCRIPTION: Sets the display width and height of a circle game object by directly modifying the displayWidth and displayHeight properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.displayWidth = width;\ncircle.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Hiding and Showing Children in Sizer in Phaser 3\nDESCRIPTION: Shows how to hide or show a specific child or the entire sizer, affecting layout behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.hide();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.hide(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.show();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.show(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Counting Inactive Group Members in Phaser 3\nDESCRIPTION: Returns the number of inactive group members by specifically passing false to countActive().\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nvar inactiveCount = group.countActive(false);\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Class Directly in Phaser 3\nDESCRIPTION: Imports the Dialog class directly from the Rex UI components module, allowing for more control over the UI component instantiation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Adding Ship Behavior via Minified Plugin\nDESCRIPTION: Adds ship behavior to a game object after loading the plugin via the minified file approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar ship = scene.plugins.get('rexshipplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Accessing Scroller Element in TextArea\nDESCRIPTION: Demonstrates how to get a reference to the scroller component in the TextArea.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nvar scroller = textArea.getElement('scroller');\n```\n\n----------------------------------------\n\nTITLE: Adding Obstacles to Raycaster\nDESCRIPTION: Shows different ways to add obstacles that rays can collide with, including single game objects, custom polygons, or arrays of game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nraycaster.addObstacle(gameObject);\n// raycaster.addObstacle(gameObject, polygon);\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in Game Configuration\nDESCRIPTION: Shows how to install the gesture plugin in the Phaser game configuration using the imported plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport GesturesPlugin from 'phaser3-rex-plugins/plugins/gestures-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexGestures',\n            plugin: GesturesPlugin,\n            mapping: 'rexGestures'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Alpha Mask Image in Phaser 3\nDESCRIPTION: Shows how to create a bitmap mask from an Alpha Mask Image instance for use with other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/alphamaskimage.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Setting Time Scale for a Timer in Phaser 3\nDESCRIPTION: Adjusts the time scale of a timer, which affects how quickly the timer progresses. Values greater than 1 speed up the timer, values less than 1 slow it down.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntimer.timeScale = 2;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Static Object Group in Phaser 3\nDESCRIPTION: Refreshes the positions of game objects in a static object group. This method should be called when the positions of game objects have been changed manually.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.refresh();  // call this method when position of game objects were changed in static object group\n```\n\n----------------------------------------\n\nTITLE: Listening for Specific Texture Removed Event in Phaser 3\nDESCRIPTION: Sets up an event listener for when a specific texture is removed from the texture cache. This event is specific to a particular texture key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.on('removetexture-' + key, function() {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Global Sound Mute in Phaser 3\nDESCRIPTION: Methods to set and get the global mute state of the sound manager, affecting all sound instances in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.setMute(mute); // mute: true/false\n// scene.sound.mute = mute;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar mute = scene.sound.mute;\n```\n\n----------------------------------------\n\nTITLE: Creating AIO-Spinner in Phaser3 Rex UI\nDESCRIPTION: Shows how to add an all-in-one spinner component. This component provides a loading spinner animation for indicating processing or loading states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nvar spinner = scene.rexUI.add.aioSpinner(config);\n```\n\n----------------------------------------\n\nTITLE: Getting All Game Objects from a Group in Phaser 3\nDESCRIPTION: Retrieves an array containing all game objects that are members of the group.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObjects = group.getChildren();  // array of game objects\n```\n\n----------------------------------------\n\nTITLE: DateTime Parsing and Formatting in Luxon\nDESCRIPTION: Demonstrates how to parse dates from strings and format DateTime objects into strings with various formats and locales.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/luxon.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt = DateTime.fromFormat('12-16-2017', 'MM-dd-yyyy');\n// var dt = DateTime.fromFormat('May 25, 1982', 'MMMM dd, yyyy');\n// var dt = DateTime.fromFormat('mai 25, 1982', 'MMMM dd, yyyy', { locale: 'fr' });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = dt.toFormat('MM-dd-yyyy');\n// var s = dt.toFormat('MMMM dd, yyyy')\n// var s = dt.setLocale('fr').toFormat('MMMM dd, yyyy')\n```\n\n----------------------------------------\n\nTITLE: Attaching TintRGB Properties\nDESCRIPTION: Shows how to attach and use the tint properties on a game object with examples of different tint values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tintrgb.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexTintRGB').add(gameObject, tintRGB);\ngameObject.tintGray = 128;\n// gameObject.tintR = 128;\n// gameObject.tintG = 128;\n// gameObject.tintB = 128;\n```\n\n----------------------------------------\n\nTITLE: Getting FishEye Effect Instance\nDESCRIPTION: Retrieves the FishEye pipeline instance from a game object or camera for manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexFishEyePipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexFishEyePipeline').get(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexFishEyePipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexFishEyePipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Creating a Hexagon Pattern\nDESCRIPTION: Method to create a hexagon-shaped grid of tiles with the specified radius. Returns an array of tile positions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagonmap.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = scene.rexBoard.hexagonMap.hexagon(board, radius);\n// var out = scene.rexBoard.hexagonMap.hexagon(board, radius, out);\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Achievement States\nDESCRIPTION: Methods to manually set or clear achievement states, which can be useful for testing or special game events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/achievements.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nachievements.setObtainedState(levelName, achievementName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nachievements.clearObtainedState(levelName, achievementName);\n// achievements.setObtainedState(levelName, achievementName, false);\n```\n\n----------------------------------------\n\nTITLE: Handling Button Event Listeners in Phaser 3\nDESCRIPTION: Attaches event listeners to button events such as click, over, out, down, up, enable, and disable. These provide hooks for responding to user interactions with buttons.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.click', function(button, index, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.click', function(button, groupName, index, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.over', function(button, index, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.over', function(button, groupName, index, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.out', function(button, index, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.out', function(button, groupName, index, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.down', function(button, index, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.down', function(button, groupName, index, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.up', function(button, index, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.up', function(button, groupName, index, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.enable', function(button, index) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.enable', function(button, groupName, index, pointer, event) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.disable', function(button, index) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.on('button.disable', function(button, groupName, index, pointer, event) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Configuring Bracket Parser 2 Instance in Phaser 3\nDESCRIPTION: Demonstrates how to create and configure a Bracket Parser 2 instance with various options in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = scene.plugins.get('rexBracketParser').add({\n    // delimiters: '<>', // or ['<', '>']\n    // valueConvert: true,\n    // translateTagNameCallback: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Hidden Input Text Behavior to a Text Object in Phaser 3\nDESCRIPTION: Shows how to add the hidden input text behavior to a text game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/hiddeninputtext.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar hiddenInputText = scene.plugins.get('rexhiddeninputtextplugin').add(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Shaking Choice Dialog Animation\nDESCRIPTION: Applies a shake effect to the dialog with configurable duration and magnitude.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/choice-dialog-commands.md#2025-04-21_snippet_6\n\nLANGUAGE: markup\nCODE:\n```\nNAME.shake\n  duration=\n  magnitude=\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin in Phaser Scene Config\nDESCRIPTION: Configuration and setup of the webfont loader plugin in a Phaser scene's preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/webfontloader.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar sceneConfig = {\n    // ....\n    pack: {\n        files: [{\n            type: 'plugin',\n            key: 'rexwebfontloaderplugin',\n            url: 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/    rexwebfontloaderplugin.min.js',\n            start: true\n        }]\n    }\n};\nclass MyScene extends Phaser.Scene {\n    constructor() {\n        super(sceneConfig)\n    }\n    // ....\n\n    preload() {\n        this.plugins.get('rexwebfontloaderplugin').addToScene(this);\n        this.load.rexWebFont(config);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Audio Capabilities in Phaser 3\nDESCRIPTION: This snippet demonstrates how to check for various audio format support in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/device.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar flac = scene.sys.game.device.audio.flac;\nvar aac = scene.sys.game.device.audio.aac;\nvar dolby = scene.sys.game.device.audio.dolby;\nvar m4a = scene.sys.game.device.audio.m4a;\nvar mp3 = scene.sys.game.device.audio.mp3;\nvar ogg = scene.sys.game.device.audio.ogg;\nvar opus = scene.sys.game.device.audio.opus;\nvar wav = scene.sys.game.device.audio.wav;\nvar webm = scene.sys.game.device.audio.webm;\nvar webAudio = scene.sys.game.device.audio.webAudio;\nvar audioData = scene.sys.game.device.audio.audioData;\n```\n\n----------------------------------------\n\nTITLE: Loading Progress Callback Function in Phaser 3\nDESCRIPTION: Callback function that gets invoked when loading progress changes, providing the current progress value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loading-animation-scene.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(progress, animationScene) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Text Background Color and Gradients in Phaser 3\nDESCRIPTION: Methods for getting and setting text background colors, including support for gradient backgrounds. Allows for creating solid or gradient color backgrounds behind text content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = txt.style.backgroundColor;\nvar color2 = txt.style.backgroundColor2;\nvar isHorizontalGradient = txt.style.backgroundHorizontalGradient;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setBackgroundColor(color);\n// txt.setBackgroundColor(color, color2, isHorizontalGradient);\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Board State in Phaser 3 Bejeweled Plugin\nDESCRIPTION: These snippets demonstrate how to save and load the board state in the Bejeweled plugin using symbol arrays.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar symbols = bejeweled.dumpSymbols();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.loadSymbols(symbols);\n```\n\n----------------------------------------\n\nTITLE: Getting Elements from Pages Container\nDESCRIPTION: Methods to retrieve elements from the Pages container, including all page objects or specific named elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObjects = pages.getElement('items');\n\nvar gameObject = pages.getElement('#' + name);\n// var gameObject = pages.getElement('#' + name, recursive);\n\nvar gameObject = pages.getByName(name);\n// var gameObject = pages.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Cell Size Management in Phaser3\nDESCRIPTION: Methods for getting and setting cell dimensions, including height and width adjustments.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar cellWidth = cell.width;\nvar cellHeight = cell.height;\n\ncell.setHeight(newHeight);\n// cell.height = newHeight;\n\ncell.setDeltaHeight(deltaHeight);\n// cell.deltaHeight = deltaHeight;\n\ncell.setDeltaHeight(0);\n// cell.deltaHeight = 0;\n\ncell.setWidth(newWidth);\n// cell.width = newWidth;\n\ncell.setDeltaWidth(deltaWidth);\n// cell.deltaWidth = deltaWidth;\n\ncell.setDeltaWidth(0);\n// cell.deltaWidth = 0;\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Default Values\nDESCRIPTION: Loading data from localStorage with optional default values and reset behavior\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage-data.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndata.load(defaultData);\n// data.load(defaultData, reset);\n```\n\n----------------------------------------\n\nTITLE: Managing Transition Duration for Folder UI Component in JavaScript\nDESCRIPTION: Shows how to set and get the transition duration for a folder UI component's expand and collapse animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.setTransitionDuration(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar duration = folder.transitionDuration;\n```\n\n----------------------------------------\n\nTITLE: Configuring Strikethrough Text in Phaser 3\nDESCRIPTION: Code snippets for accessing and modifying strikethrough properties of text, including color, thickness, and offset parameters. Provides fine-tuned control for displaying crossed-out text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = txt.style.strikethroughColor;\nvar thickness = txt.style.strikethroughThickness;\nvar offset = txt.style.strikethroughOffset;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setStrikethrough(color, thickness, ofset);\ntxt.setStrikethroughColor(color);\ntxt.setStrikethroughThinkness(thickness);\ntxt.setStrikethroughOffset(ofset);\n```\n\n----------------------------------------\n\nTITLE: Creating TextArea Component in Phaser 3 Rex UI\nDESCRIPTION: This code demonstrates how to create a text area UI component with the Rex UI plugin for Phaser 3. It includes all available configuration options for customizing appearance, behavior, and layout including background, text, slider, scrolling, and spacing options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar textArea = scene.rexUI.add.textArea({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    // Elements\n    background: backgroundGameObject,\n\n    text: textGameObject,\n    // textWidth: undefined,\n    // textHeight: undefined,\n    // textMask: false,\n    // alwaysScrollable: false,\n\n    slider: {\n        // background: sliderBackgroundGameObject,\n        track: trackGameObject,\n        /* \n        track: { \n            width: 1, height: 1,\n            radius: 0, \n            color: undefined, alpha: 1,\n            strokeColor: undefined, strokeAlpha: 1, strokeWidth: 2,\n            shape: undefined\n        }\n        */\n\n\n        // indicator: indicatorGameObject,\n        thumb: thumbGameObject,\n        /* \n        thumb: { \n            width: 1, height: 1,\n            radius: 0, \n            color: undefined, alpha: 1,\n            strokeColor: undefined, strokeAlpha: 1, strokeWidth: 2,\n            shape: undefined\n        }\n        */\n\n        // input: 'drag',\n        // position: 'right',\n         // gap: undefined,\n\n        // hideUnscrollableSlider: false,\n        // disableUnscrollableDrag: false,\n        // adaptThumbSize: false,\n        // minThumbSize: undefined,\n        \n        // buttons: {\n        //     top: topButtonGameObject, bottom: bottomButtonGameObject,\n        //     left: leftButtonGameObject, right: rightButtonGameObject,\n        //     step: 0.01,\n        // }\n    },\n\n    // scroller: {\n    //     threshold: 10,\n    //     slidingDeceleration: 5000,\n    //     backDeceleration: 2000,\n    //     pointerOutRelease: true,\n    //     rectBoundsInteractive: true,\n    //     dragRate: 1,\n    // },\n\n    mouseWheelScroller: false,\n    // mouseWheelScroller: {\n    //     focus: true,\n    //     speed: 0.1\n    // },\n\n    clampChildOY: false,\n\n    header: headerGameObject,\n    footer: footerGameObject,\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        text: 0,\n        // text: {\n        //    top: 0,\n        //    bottom: 0,\n        //    left: 0,\n        //    right: 0,\n        //},\n        \n        slider: 0,\n        // slider: {\n        //     top: 0,\n        //     bottom: 0,\n        //     left: 0,\n        //     right: 0,\n        // },\n\n        header: 0,\n        footer: 0,\n    },\n\n    expand: {\n        header: true,\n        footer: true,\n    },\n\n    align: {\n        header: 'center',\n        footer: 'center',\n    },\n\n    content: '',\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Text in Phaser 3\nDESCRIPTION: Shows how to create a bitmap mask from a Phaser 3 Text object, which can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = txt.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Checking if a Group is Full in Phaser 3\nDESCRIPTION: Returns a boolean indicating whether the group has reached its maximum size as defined in the configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar isFull = group.isFull();\n```\n\n----------------------------------------\n\nTITLE: Applying CRT Effect to Game Object with NPM Plugin\nDESCRIPTION: Applies the CRT post-processing effect to a Phaser game object using the plugin imported from NPM package. Configuration options can be passed to customize the effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexCrtPipeline').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Conditions Table Instance (Plugin)\nDESCRIPTION: Demonstrates how to create a new instance of the Conditions Table using the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/conditionstable.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = scene.plugins.get('rexConditionsTable').add();\n```\n\n----------------------------------------\n\nTITLE: Disabling All Dialog Buttons - JavaScript\nDESCRIPTION: Method to disable input on all buttons in the dialog simultaneously.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.setAllButtonsEnable(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Tint Color in Phaser 3 Transition\nDESCRIPTION: Applies a tint color to both current and next textures. The tint value should be specified as a hexadecimal color value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTint(value);\n```\n\n----------------------------------------\n\nTITLE: DOM Element Event Handling\nDESCRIPTION: Event listener management for DOM elements including adding, handling, and removing event listeners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/domelement.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndomElement.addListener(eventName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar callback = function(event) {\n    // event.target.name\n};\ndomElement.on(eventName, callback, scope);\n// domElement.once(eventName, callback, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndomElement.removeListener(eventName);\n```\n\n----------------------------------------\n\nTITLE: Scroller Instance Creation\nDESCRIPTION: Comprehensive configuration example showing all available options when creating a scroller instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scroller.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar scroller = scene.plugins.get('rexScroller').add(gameObject, {\n    bounds: [\n        bottomBound,\n        topBound\n    ],\n    value: topBound,\n    // snapStep: undefined,\n    // threshold: 10,\n    // slidingDeceleration: 5000,\n    // backDeceleration: 2000,\n\n    // dragReverse: false,\n    // dragRate: 1,\n\n    // enable: true,\n    // orientation: 'vertical',\n    // pointerOutRelease: true,\n    // rectBoundsInteractive: false,\n\n    // valuechangeCallback: null,\n    // valuechangeCallbackScope: null,\n\n    // overmaxCallback: null,\n    // overmaxCallbackScope: null,\n\n    // overminCallback: null,\n    // overminCallbackScope: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Ambient Light Color in Phaser 3\nDESCRIPTION: Code for setting the ambient color of the lighting system. The ambient color affects the base lighting of the entire scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.lights.setAmbientColor(color);\n```\n\n----------------------------------------\n\nTITLE: Creating Clock Instance Directly in Phaser 3\nDESCRIPTION: Instantiates a Clock object directly in a Phaser 3 scene using the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar clock = new Clock(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Table Slider in Phaser3\nDESCRIPTION: Methods for enabling and disabling the slider functionality of a Phaser3 grid table. Includes setting and getting the slider enable state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntable.setSliderEnable(enabled);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.sliderEnable = enabled;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = table.sliderEnable;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Experience Bar Elements in JavaScript\nDESCRIPTION: Methods to get different elements of the experience bar, such as background, icon, name text, value text, bar, and action icon. Also includes methods to get elements by name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-expbar.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = expBar.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar icon = expBar.getElement('icon');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar nameTextObject = expBar.getElement('name');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar valueTextObject = expBar.getElement('value');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = expBar.getElement('bar');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar action = expBar.getElement('action');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = expBar.getElement('#' + name);\n// var gameObject = expBar.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = expBar.getByName(name);\n// var gameObject = expBar.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Layout Children in Phaser 3 UI Label\nDESCRIPTION: Arranges the position of all elements within the label component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.layout();\n```\n\n----------------------------------------\n\nTITLE: Importing HSL Adjust PostFx Class in Phaser 3\nDESCRIPTION: Import the HSL Adjust PostFx class and add it to the game pipeline configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-hsladjust.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport HSLAdjustPostFx from 'phaser3-rex-plugins/plugins/hsladjustpipeline.js';\nvar config = {\n    // ...\n    pipeline: [HSLAdjustPostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter.js Wrap Plugin in Phaser Game Config\nDESCRIPTION: Initial game configuration to enable the Matter.js wrap plugin at the system level. This setup is done when creating the Phaser game instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-wrap.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    physics: {\n        matter: {\n            // ...\n            plugins: {\n                wrap: true,\n                // ...\n            }\n            // ...\n        }\n    }\n    // ...\n}\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring SplitPanels Object in Phaser 3\nDESCRIPTION: Demonstrates the full configuration options for creating a SplitPanels object, including panel setup, splitter, and spacing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-splitpanels.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar splitPanels = scene.rexUI.add.splitPanels({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    background: backgroundGameObject,\n\n    leftPanel: leftPanelGameObject,\n    // topPanel: topPanelGameObject,\n    \n    rightPanel: rightPanelGameObject,\n    // bottomPanel: topPanelGameObject,\n\n    splitter: splitterGameObject,\n\n    minLeftPanelWidth: 0,\n    minTopPanelHeight: 0,\n\n    minRightPanelWidth: 0,\n    minBottomPanelHeight: 0,\n\n    splitRatio: 0.5\n\n    \n    space: {\n        left: 0, right: 0, top: 0, bottom: 0, item: 0,\n        \n        leftPanelTop: 0, leftPanelBottom: 0, leftPanelLeft: 0, leftPanelRight: 0,\n        // topPanelTop: 0, topPanelBottom: 0, topPanelLeft: 0, topPanelRight: 0,\n\n        rightPanelTop: 0, rightPanelBottom: 0, rightPanelLeft: 0, rightPanelRight: 0,\n        // bottomPanelTop: 0, bottomPanelBottom: 0, bottomPanelLeft: 0, bottomPanelRight: 0,\n\n        splitterPanelTop: 0, splitterPanelBottom: 0, splitterPanelLeft: 0, splitterPanelRight: 0,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Skew Properties Directly\nDESCRIPTION: Direct property assignments to set the skew values in radians or degrees for a skewable image.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimage.skewX = skewXRad;\nimage.skewXDeg = skewXDeg;\nimage.skewY = skewYRad;\nimage.skewYDeg = skewYDeg;\n```\n\n----------------------------------------\n\nTITLE: Adding a New Layer to LayerManager\nDESCRIPTION: Demonstrates how to add a new layer to an existing LayerManager instance, with an optional depth parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlayerManager.add(name);\n// layerManager.add(name, depth);\n```\n\n----------------------------------------\n\nTITLE: Input Event Handling\nDESCRIPTION: Event handlers for pointer interactions with child elements including pointer down, up, over, and out events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setChildrenInteractiveEnable();\n\ntxt.on('child.pointerdown', function(child, pointer, localX, localY, event) {        \n});\n\ntxt.on('child.pointerup', function(child, pointer, localX, localY, event) {        \n});\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Item Table via Plugin\nDESCRIPTION: JavaScript code showing how to add an item table using the Firebase plugin from a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = scene.plugins.get('rexFirebase').add.itemTable(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Slider Input End Events in TextArea\nDESCRIPTION: Demonstrates how to listen for the end of slider drag interactions in the TextArea's slider component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.getElement('slider').on('inputend', function(panel) {\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Button Input in Phaser 3\nDESCRIPTION: Methods for enabling, disabling, and toggling button input for individual buttons or all buttons in a group. Also includes a method to check if a button's input is enabled.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthbuttons.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.setButtonEnable(index);\n// buttons.setButtonEnable(index, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.setButtonEnable();\n// buttons.setButtonEnable(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.setButtonEnable(index, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.setButtonEnable(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.toggleButtonEnable(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.toggleButtonEnable();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar enabled = bottons.getButtonEnable(index);\n```\n\n----------------------------------------\n\nTITLE: Adding Reveal Post-FX Effect\nDESCRIPTION: Adds a reveal post-fx effect to either a game object or camera with configurable parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addReveal(wipeWidth, direction, axis);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addReveal(wipeWidth, direction, axis);\n```\n\n----------------------------------------\n\nTITLE: Handling File Drop Events in Phaser 3\nDESCRIPTION: Sets up event listeners for file drop, drag enter, drag leave, and drag over events on the file drop zone.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filedropzone.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfileDropZone.on('drop', function(fileDropZone) {\n    var files = fileDropZone.files;\n})\n\nfileDropZone.on('drop.' + filterType, function(files) {\n})\n\nfileDropZone.on('dragenter', function(fileDropZone) {\n})\n\nfileDropZone.on('dragleave', function(fileDropZone) {\n})\n\nfileDropZone.on('dragover', function(fileDropZone) {\n})\n```\n\n----------------------------------------\n\nTITLE: Injecting Step Methods into Game Objects\nDESCRIPTION: Demonstrates how to inject Step methods into game objects or their prototypes for easier access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/step.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexStep').injectMethods(gameObject);\n\nscene.plugins.get('rexStep').injectMethods(GameObjectClass.prototype);\n// scene.plugins.get('rexStep').injectMethods(Phaser.GameObjects.Sprite.prototype);\n\nscene.plugins.get('rexStep').injectMethodsToRootClass(e);\n// scene.plugins.get('rexStep').injectMethods(Phaser.GameObjects.GameObject.prototype);\n```\n\n----------------------------------------\n\nTITLE: Checking if Point is Inside Triangle in Phaser 3 (Method 1)\nDESCRIPTION: Tests whether a point with specified coordinates lies inside the triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInside = triangle.contains(x, y);\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Configuration for FileSelectorButton in Phaser 3\nDESCRIPTION: Full configuration options for creating a file selector button, including positioning, layout, components, and file selection options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = scene.add.fileSelectorButton({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    orientation: 0,\n    // rtl: false,\n\n    background: backgroundGameObject,\n\n    icon: iconGameObject,\n    // iconMask: false,\n    // squareFitIcon: false,\n    // iconSize: undefined, iconWidth: undefined, iconHeight: undefined,\n    \n    text: textGameObject,\n    expandTextWidth: false,\n    expandTextHeight: false,\n\n    action: actionGameObject,\n    // actionMask: false,\n    // squareFitAction: false,\n    // actionSize: undefined, actionWidth: undefined, actionHeight: undefined,\n\n    align: undefined,\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        icon: 0,\n        text: 0,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n\n    // accept: '',\n    // multiple: false,\n});\n// var fileChooser = scene.add.fileSelectorButton(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Drag-Rotate Instance in Phaser 3\nDESCRIPTION: Creates an instance of the drag-rotate input with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dragrotate.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar dragRotate = scene.plugins.get('rexDragRotate').add(scene, {\n    origin: undefined,\n    x: 0,\n    y: 0,\n    \n    maxRadius: undefined\n    minRadius: 0,\n\n    // enable: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Wrap Configuration in Phaser 3 Dynamic Text\nDESCRIPTION: Method to set the default configuration for text wrapping in a dynamic text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setWrapConfig(config);\n```\n\n----------------------------------------\n\nTITLE: Stopping Event Sheet Execution\nDESCRIPTION: Shows methods to stop the execution of event sheets, either for the default group or a specific group.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Stop default group\neventSheetManager.stopGroup();\n// or\neventSheetManager.stop();\n\n// Stop specific group\neventSheetManager.stopGroup(groupName);\n// or\neventSheetManager.stop(groupName);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Rows to Tweaker in JavaScript\nDESCRIPTION: Method to add multiple UI elements (input rows, buttons, separators, folders, tabs) to a Tweaker component. Supports various input types and container elements with optional target binding.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addRows(properties, target);\n// tweaker.addRows(properties, target, monitor);\n```\n\n----------------------------------------\n\nTITLE: Custom Spinner Create Callback Function\nDESCRIPTION: Example of the create callback function for a custom spinner. This function allows programmatic creation of shapes for the spinner, including creating shape instances and adding them to the spinner object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-spinner.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction() {\n    // this : This spinner game object\n    var shape = this.createShape(shapeType, name);\n    this.addShape(shape);\n}\n```\n\n----------------------------------------\n\nTITLE: Linear Vector Interpolation in Phaser 3\nDESCRIPTION: Performs linear interpolation between two Vector2 objects based on parameter t (0-1). Works with Phaser.Math.Vector2 objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interpolation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.LinearXY(vector0, vector1, t);\n```\n\n----------------------------------------\n\nTITLE: Timeline Command Management\nDESCRIPTION: Methods for adding and clearing timeline commands, including single and batch command addition.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timeline.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntimeline.add(config);\ntimeline.add([config0, config1, ...]);\ntimeline.clear();\n```\n\n----------------------------------------\n\nTITLE: Moving Focus Between Buttons in DropDownList\nDESCRIPTION: Moves focus to the next or previous button in the dropdown list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.focusNextButton();\ndropDownList.focusPrevButton();\n```\n\n----------------------------------------\n\nTITLE: Applying Mask to Cell Images in Phaser 3 Transition\nDESCRIPTION: Applies a mask to all cell images created by grid cutting. Can optionally specify whether the mask is enabled and whether to invert the alpha channel.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setCellImagesMaskEnable();\n// image.setCellImagesMaskEnable(enable, invertAlpha);\n```\n\n----------------------------------------\n\nTITLE: Complete SimpleTextBox Configuration Object in Phaser 3\nDESCRIPTION: Full configuration object showing all available options for creating a SimpleTextBox instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletextbox.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar textBox = scene.rexUI.add.simpleTextBox({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    layoutMode: 0,\n\n    // rtl: false,\n\n    background: backgroundStyle,\n    // background: null,\n\n    innerBackground: backgroundStyle,\n    // innerBackground: null,\n\n    icon: iconStyle,\n    // icon: null,\n    \n    // iconMask: false,\n    // squareFitIcon: false,\n    // iconSize: undefined, iconWidth: undefined, iconHeight: undefined,\n\n    title: textStyle,\n    // title: null,\n    // wrapTitle: false,\n    // adjustTitleFontSize: false,\n    // expandTitleWidth: false,\n    // expandTitleHeight: false,\n\n    text: testStyle,\n    // text: null,\n    // wrapText: false,\n    // adjustTextFontSize: false,\n    // expandTextWidth: false,\n    // expandTextHeight: false,\n\n    separator: separatorStyle,\n    // separator: null,\n\n    action: actionStyle,\n    // action: null,\n\n    // squareFitAction: false,\n    // actionMask: false,\n    // actionSize: undefined, actionWidth: undefined, actionHeight: undefined,\n\n    space: {\n        left: 0, right: 0, top: 0, bottom:0, \n        icon: 0, text: 0\n    }\n\n    align: {\n        title: 'left',\n        text: 'left',\n    },\n\n    space: {\n        left: 0, right: 0, top: 0, bottom: 0,\n        innerLeft: 0, innerRight: 0, innerTop: 0, innerBottom: 0,\n\n        title: 0, titleLeft: 0, titleRight: 0,\n        icon: 0, iconTop: 0, iconBottom: 0,\n        text: 0, textLeft: 0, textRight: 0,\n        separator: 0, separatorLeft: 0, separatorRight: 0,\n        actionTop: 0, actionBottom: 0,\n    },\n\n    // page: { \n    //    maxLines: undefined,\n    //    pageBreak: '\\f\\n',\n    // },\n    // typing: { \n    //    wrap: false,\n    //    speed: 333,    \n    // },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Background Element in Holy Grail Layout\nDESCRIPTION: Retrieves the background game object from the Holy Grail layout.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = holyGrail.getElement('background');\n```\n\n----------------------------------------\n\nTITLE: Removing Background from Sizer in JavaScript\nDESCRIPTION: Shows different methods to remove background objects from a sizer. This includes removing a single background, removing and destroying a background, and removing all backgrounds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.removeBackground(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.removeBackground(gameObject, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.removeAllBackgrounds();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.removeAllBackgrounds(true);\n```\n\n----------------------------------------\n\nTITLE: Importing Sizer Class\nDESCRIPTION: Shows how to import the Sizer class directly and create an instance\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sizer } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\nvar sizer = new Sizer(scene, config);\nscene.add.existing(sizer);\n```\n\n----------------------------------------\n\nTITLE: Text Formatting Callback for Knob in Phaser3\nDESCRIPTION: Example of a text formatting callback function that can be used to customize the display text of the knob component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-knob.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(value) {\n    return Math.floor(value * 100).toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Texture Frames Simply in Phaser 3\nDESCRIPTION: A simplified method to draw a texture frame at specified coordinates with optional alpha and tint values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrt.drawFrame(key, frame, x, y);\n// rt.drawFrame(key, frame, x, y, alpha, tint);\n```\n\n----------------------------------------\n\nTITLE: Attaching Viewport Coordinate Properties with Custom Transform in Phaser 3\nDESCRIPTION: Demonstrates how to attach viewport-relative properties to a game object with an optional custom transform callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/viewport-coordinate.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexViewportCoordinate').add(gameObject, viewport, vpx, vpy, transformCallback);\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Thumb Style\nDESCRIPTION: Sets the thumb color and alpha for the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setThumbStyle(color, alpha);\n// toggleSwitch.thumbColor = color;\n// toggleSwitch.thumbAlpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Restarting Animation on Sprite in Phaser 3\nDESCRIPTION: Restarts the current animation on the sprite. Optional parameters control including delay and resetting repeat count.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.anims.restart();\n// sprite.anims.restart(includeDelay, resetRepeats);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Perspective Carousel in Phaser 3\nDESCRIPTION: Comprehensive configuration object for creating a perspective carousel with various parameters including face management, dimensions, and rolling animation settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar carousel = scene.add.rexPerspectiveCarousel({\n    x: 0, y: 0,\n\n    faces: [],\n    // face: 0,\n    // rtl: false,\n\n    // width,\n    // height,\n\n    // faceWidth,\n    // faceSpace: 0,\n\n    // z: 1,\n    // zEnd: 0,\n\n    // roll : {\n    //     duration: 1000,\n    //     ease: 'Cubic',\n    //     delay: 0,\n    // }\n});\n```\n\n----------------------------------------\n\nTITLE: Resizing Canvas in Phaser 3\nDESCRIPTION: Methods to resize the Canvas in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.setCanvasSize(width, height);\n\n// or\n\ncanvas.setSize(width, height);\n\n// or\n\ncanvas.resize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Incrementing Y Position of Game Objects in Phaser3\nDESCRIPTION: Increments the y position of game objects by a specified value, with optional step, index, and direction parameters for creating graduated positions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.IncY(gameObjects, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Dialog Buttons - JavaScript\nDESCRIPTION: Methods for executing a callback function on each button of a specific type. The callback receives the button, index, and buttons array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.forEachChoice(callback, scope);\ndialog.forEachAction(callback, scope);\ndialog.forEachToolbar(callback, scope);\ndialog.forEachLeftToolbar(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Vector2 Length in Phaser 3\nDESCRIPTION: Adjusts the length of the Vector2 to the specified value while maintaining its direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvector.setLength(length);\n```\n\n----------------------------------------\n\nTITLE: Using Imported Modal Promise Class\nDESCRIPTION: Code to use the imported ModalPromise class to add modal behavior to a game object, with a Promise to handle the dialog's closing event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nModalPromise(gameObject, config)\n    .then(function(closeEventData) {\n    })\n```\n\n----------------------------------------\n\nTITLE: Calculating Angle Between Two Points Using Point Objects in Phaser 3\nDESCRIPTION: Calculates the angle in radians between two points using Phaser Point objects. This is a convenience method when working with Phaser's point objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar rad = Phaser.Math.Angle.BetweenPoints(point1, point2);\n```\n\n----------------------------------------\n\nTITLE: Loading Rex UI Plugin in Phaser 3 Scene\nDESCRIPTION: Loads the Rex UI Plugin as a scene plugin in the preload stage of a Phaser 3 scene. This allows access to the UI components, including FixWidthButtons.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthbuttons.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Configuring Shockwave Plugin in Phaser 3 Global Plugins\nDESCRIPTION: Imports and configures the ShockwavePipelinePlugin as a global plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ShockwavePipelinePlugin from 'phaser3-rex-plugins/plugins/shockwavepipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexShockwavePipeline',\n            plugin: ShockwavePipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Field of View Class in Phaser 3\nDESCRIPTION: Shows how to import the Field of View class directly from the rex plugins package and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FieldOfView } from 'phaser3-rex-plugins/plugins/board-components.js';\nvar fieldOfView = new FieldOfView(chess, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Perspective Image Plugin in Phaser 3 Configuration (JavaScript)\nDESCRIPTION: Demonstrates how to import and configure the perspective image plugin in the game configuration of a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-rendertexture.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport PerspectiveImagePlugin from 'phaser3-rex-plugins/plugins/perspectiveimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPerspectiveImagePlugin',\n            plugin: PerspectiveImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Using Complete Event Promise\nDESCRIPTION: Demonstrates how to use the waitComplete method for handling complete events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventpromise.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar promoise = scene.plugins.get('rexEventPromise').waitComplete(eventEmitter)\n    .then(function() {\n        \n    })\n```\n\n----------------------------------------\n\nTITLE: Kicking a User from the Online User List\nDESCRIPTION: JavaScript code showing how to remove a specific user from the online user list by providing their userID.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.leave(userID)\n// .then(function() { })\n// .catch(function() { })\n```\n\n----------------------------------------\n\nTITLE: Setting Friction on Physics Body in Phaser 3\nDESCRIPTION: Demonstrates how to set and get friction on an immovable physics body, which affects the movement of riding bodies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setFriction(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setFrictionX(x);\nbody.setFrictionY(y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar fx = body.friction.x;\nvar fy = body.friction.y;\n```\n\n----------------------------------------\n\nTITLE: Custom Eliminating Action in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This snippet shows the default eliminating action for chess pieces. It uses a fade-out-destroy behavior and waits for the completion of each piece's elimination.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (chessArray, board, bejeweled) {\n    const duration = 500; //ms\n    for (var i = 0, cnt = chessArray.length; i < cnt; i++) {\n        var fade = FadeOutDestroy(chessArray[i], duration);\n        bejeweled.waitEvent(fade, 'complete');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Simple Sort to Dynamic View\nDESCRIPTION: Apply a simple sort by a single property to a dynamic view.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nview.applySimpleSort(key);\n```\n\n----------------------------------------\n\nTITLE: Working with Text Underline Formatting in Phaser 3\nDESCRIPTION: Methods for configuring text underline properties, including getting and setting color, thickness, and offset. These allow precise control over the appearance of underlined text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = txt.style.underlineColor;\nvar thickness = txt.style.underlineThickness;\nvar offset = txt.style.underlineOffset;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setUnderline(color, thickness, ofset);\ntxt.setUnderlineColor(color);\ntxt.setUnderlineThinkness(thickness);\ntxt.setUnderlineOffset(ofset);\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Factor in Phaser 3 Sizer Plugin\nDESCRIPTION: Method for setting the scroll factor of children within a sizer object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setScrollFactor(x, y);\n```\n\n----------------------------------------\n\nTITLE: Mass Configuration\nDESCRIPTION: Methods for getting and setting the mass of a physics body.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setMass(m);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = body.mass;\n```\n\n----------------------------------------\n\nTITLE: Getting Grid Property in Phaser 3 Rex Board Plugin\nDESCRIPTION: Shows how to retrieve the Grid object from a board. The Grid can be either a Quad grid or a Hexagon grid, providing the underlying structure for the game board.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nvar grid = board.grid;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dissolve Effect for a Game Object in Phaser 3\nDESCRIPTION: Applies a dissolve effect to a game object with detailed configuration options. Includes settings for texture transitions, noise parameters, edge effects, and transition progress.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexDissolvePipeline').add(gameObject, {\n    // toTexture: textureKey,\n    // toFrame: frameName,\n    // resizeMode: 1,\n\n    // noiseX: undefined,\n    // noiseY: undefined,\n    // noiseZ: undefined,\n    // fromEdgeStart: 0.01,\n    // fromEdgeWidth: 0.05,\n    // toEdgeStart: 0.01,\n    // toEdgeWidth: 0.05,\n\n    // progress: 0,\n    \n    // name: 'rexDissolvePostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TCRP Plugin in Game Configuration\nDESCRIPTION: Setup for integrating the TCRP plugin in the global plugins configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport TCRPPlugin from 'phaser3-rex-plugins/plugins/tcrp-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTCRP',\n            plugin: TCRPPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Perspective Render Texture Class in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to define a custom class extending the PerspectiveRenderTexture with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-rendertexture.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPerspectiveRenderTexturege extends PerspectiveRenderTexturege {\n    constructor(scene, x, y, width, height, config) {\n        super(scene, x, y, width, height, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Toast Class Definition\nDESCRIPTION: Example of creating a custom Toast class by extending the base Toast implementation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-toast.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyToast extends RexPlugins.UI.Toast {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Shape Class Directly\nDESCRIPTION: Imports the Shape class directly from the board-components module, allowing for more direct instantiation of chess objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-shape.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Shape } from 'phaser3-rex-plugins/plugins/board-components.js';\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM\nDESCRIPTION: Command to install the Rex plugins package via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridbuttons.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing Real-Time Timers Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Real-Time Timers plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport RealTimeTimersPlugin from 'phaser3-rex-plugins/plugins/realtimetimers-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRealTimeTimers',\n            plugin: RealTimeTimersPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Using Perlin2 and Perlin3 Noise Functions\nDESCRIPTION: Generating 2D and 3D Perlin noise values that range from -1 to 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perlin.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = noise.perlin2(x, y);\nvar value = noise.perlin3(x, y, z);\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Fixed-Part Scale Properties Directly\nDESCRIPTION: Sets the maximum scale values for fixed parts individually using direct property assignment. This provides axis-specific control over scaling limits.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.maxFixedPartScaleX = scaleX;\nninePatch.maxFixedPartScaleY = scaleY;\n```\n\n----------------------------------------\n\nTITLE: Running Commands with the Global Plugin in Phaser 3\nDESCRIPTION: Executes commands using the Run Commands plugin after it has been configured as a global plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/runcommands.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexRunCommands').run(commands, scope);\n```\n\n----------------------------------------\n\nTITLE: Getting Texture Reference in Phaser 3\nDESCRIPTION: Retrieves a reference to a texture object from the texture cache. This allows direct manipulation of the texture and its frames.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar texture = scene.textures.get(key);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom IsoTriangle Instance in Phaser 3\nDESCRIPTION: Instantiates a custom IsoTriangle class with position, dimensions, orientation, and fill colors for each face.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isotriangle.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar isoTriangle = new MyIsoTriangle(scene, x, y, width, height, reversed, fillTop, fillLeft, fillRight);\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshots from RenderTexture in Phaser 3\nDESCRIPTION: Methods to capture the current state of the render texture as an image, either the entire texture or a specific area, with callback for handling the resulting image.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.snapshot(callback);\n// texture.snapshot(callback, type, encoderOptions);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.snapshotArea(x, y, width, height, callback, type, encoderOptions);\n```\n\n----------------------------------------\n\nTITLE: Handling Expand Events for Folder UI Component in JavaScript\nDESCRIPTION: Demonstrates how to listen for expand events on the folder, title, and child elements of a folder UI component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.on('expand.start', function(folder){\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntitle.on('folder.expand', function(folder){\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchild.on('folder.expand', function(folder){\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.on('expand.complete', function(folder){\n    \n})\n```\n\n----------------------------------------\n\nTITLE: RandomPlace Configuration with Full Options in Phaser 3\nDESCRIPTION: Shows a complete configuration for the randomPlace method, including options for radius, callback function, and area definition.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/randomplace.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexRandomPlace').randomPlace(gameObjects, {\n    radius: radius,\n\n    getPositionCallback: undefined,\n    area: areaGeomObject,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a NameValueLabel with Complete Options\nDESCRIPTION: Comprehensive example showing all configuration options available when creating a NameValueLabel instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = scene.rexUI.add.nameValueLabel({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    orientation: 0,\n    // rtl: false,\n\n    background: backgroundGameObject,\n    icon: iconGameObject,\n    iconMask: false,\n\n    nameText: nameTextGameObject,\n    valueText: valueTextGameObject,\n    // valueTextFormatCallback: function(value, min, max) {\n    //     return `${value}/${max}`;\n    // },\n    // valueTextFormatCallback: null,\n\n    // barShape: 'line',   // 'line', or 'circle'\n\n    // line bar\n    bar: {        \n        trackColor: undefined,\n        trackThickness: 2,\n        trackStrokeColor: undefined,\n        barColor: undefined,\n        barColor2: undefined,\n\n        skewX: 0,\n\n        rtl: false,\n\n        easeValue: {\n            duration: 0,\n            ease: 'linear'\n        },\n    }, \n\n    // circle bar\n    /*\n    bar: {\n        barColor: undefined,\n        barColor2: undefined,\n        trackColor: undefined,\n        centerColor: undefined,\n        thickness: 0.2,\n        startAngle: Phaser.Math.DegToRad(270),\n        endAngle: Phaser.Math.DegToRad(270+360),\n        anticlockwise: false,\n    }\n    */\n\n    // bar: CustomProgressGameObject,\n    \n    // bar: undefined,\n\n    action: actionGameObject,\n    actionMask: false,\n\n    align: {        \n        text: 'bottom',  // 'top', 'center', 'bottom'\n    },\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        icon: 0, iconTop: 0, iconBottom: 0,\n        name: 0, value: 0,\n        bar:0, barBottom: 0, barLeft: 0, barRight: 0,\n        text: 0,\n        actionTop: 0, actionBottom: 0,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Mask from Circular Progress\nDESCRIPTION: Method to create a geometry mask from the circular progress shape, which can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = circularProgress.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Creating Rotate Instance Using Imported Class\nDESCRIPTION: Demonstrates how to create a rotate input instance using the directly imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotate = new Rotate(scene, config);\n// var rotate = new Rotate(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Light Color in Phaser 3 using RGB Values\nDESCRIPTION: Two methods for setting a light's color using RGB components. You can use the color.set method with all components or set each component individually.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlight.color.set(red, green, blue);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlight.color.r = red;\nlight.color.g = green;\nlight.color.b = blue;\n```\n\n----------------------------------------\n\nTITLE: Applying Shockwave Effect to Camera with Imported Plugin\nDESCRIPTION: Applies the shockwave effect to a camera using the imported plugin instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexShockwavePipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Updating All Symbols in Board\nDESCRIPTION: Demonstrates how to refresh all symbols on the board with a callback function that processes each tile position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmatch.refreshSymbols(function(tileXY, board) {\n    // var chess = board.tileXYZToChess(tileXY.x, tileXY.y, 0);\n    // if (chess == null) { return null; }\n    return symbol;\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Ease Movement Implementation\nDESCRIPTION: Implements ease movement animations for game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexUI.easeMoveTo(gameObject, duration, x, y);\n// scene.rexUI.easeMoveTo(gameObject, duration, x, y, ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexUI.easeMoveFrom(gameObject, duration, x, y);\n// scene.rexUI.easeMoveFrom(gameObject, duration, x, y, ease);\n```\n\n----------------------------------------\n\nTITLE: Accessing Camera Render List in Phaser 3\nDESCRIPTION: Shows how to access the list of children that a camera will render in Phaser 3. This list is read-only and represents the current render order.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar children = camera.renderList;\n```\n\n----------------------------------------\n\nTITLE: Handling Transition Completion Events in TransitionImagePack\nDESCRIPTION: Shows how to listen for the 'complete' event that fires when a transition finishes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimage.on('complete', function(){\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Smoother Step Function to Game Object Properties in Phaser3\nDESCRIPTION: Applies a smoother step function (cubic Hermite interpolation) to a property of game objects, creating a smooth transition between min and max values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SmootherStep(gameObjects, key, min, max, inc));\n```\n\n----------------------------------------\n\nTITLE: Extending BBCodeText Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom BBCodeText class by extending the base component. This allows for adding custom functionality to BBCode-formatted text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends RexPlugins.UI.BBCodeText {\n    constructor(scene, x, y, text, style) {\n        super(scene, x, y, text, style);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Split Pipeline Configuration\nDESCRIPTION: Configures the Split Pipeline effect with detailed options for position, dimensions, rotation, and shifting behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexSplitPipeline').add(gameObject, {\n    // x: undefined,  // renderer.width / 2\n    // y: undefined,  // renderer.height / 2\n\n    // width: undefined,\n    // left: 0,\n    // right: 0,\n    // height: undefined,\n    // top: 0,\n    // bottom: 0,\n\n    // angle: undefined,  // Degrees\n    // rotation: 0,       // Radian\n\n    // shiftEnable: true,\n\n    // name: 'rexSplitPostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Transaction in Firebase Item Table\nDESCRIPTION: JavaScript code for performing a transaction operation that updates data based on the current value in the Firebase database.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntable.transaction(key0, callback)\n// table.transaction(key0, key1, callback)\n// table.transaction(key0, key1, key2, callback)\n    .then(function() { })\n    .catch(function() { })    \n```\n\n----------------------------------------\n\nTITLE: Shattering an Image\nDESCRIPTION: Shows different ways to trigger the shatter effect on a ShatterImage object, with optional configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimage.shatter(centerX, centerY);\n// image.shatter();\n```\n\n----------------------------------------\n\nTITLE: Accessing the DOM element and disabling editor interaction\nDESCRIPTION: Getting access to the DOM input text node and disabling interactive behavior for a text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar inputText = editor.inputText.node;\n\ntextObject.disableInteractive();\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of a Custom Round Rectangle\nDESCRIPTION: Instantiates a custom round rectangle class with specified properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new MyRoundRectangle(scene, x, y, width, height, radius, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask from Shader in Phaser 3\nDESCRIPTION: Creates a bitmap mask from a shader, which can be used to mask other game objects. The alpha channel of the shader's output determines the mask's transparency.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = shader.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Toolbar Buttons in Dialog - JavaScript\nDESCRIPTION: Multiple ways to access toolbar buttons in a dialog. Allows retrieving all toolbar buttons or a specific button by index.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = dialog.getElement('toolbar');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = dialog.getToolbar(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = dialog.getElement('toolbar[' + index + ']');\n```\n\n----------------------------------------\n\nTITLE: Creating Quad Image Instance in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates two ways to create a Quad Image instance in a Phaser 3 game scene, including configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-image.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexQuadImage(x, y, texture, frame, {\n    // ninePointMode: false,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexQuadImage({\n    // x: 0,\n    // y: 0,\n    key,\n    // frame: null,\n    // ninePointMode: false,\n    // rtl: false\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom FSM Class with Inheritance\nDESCRIPTION: Shows how to create a custom FSM class by extending the base FSM class, defining state-specific methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass State extends FSM {\n    constructor() {\n        super();\n    }\n\n    next_A() { return 'B' }\n\n    enter_A() { }\n\n    exit_A() { }\n\n    update_A(time, delta) { }\n    preupdate_A(time, delta) { }\n    postupdate_A(time, delta) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Alignment in Phaser 3 Dynamic Text\nDESCRIPTION: Methods to set vertical and horizontal alignment for text in a dynamic text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setVAlign(vAlign);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setHAlign(hAlign);\n```\n\n----------------------------------------\n\nTITLE: Adding NumberBar to Phaser 3 Scene\nDESCRIPTION: Creates a new NumberBar instance and adds it to the current scene. This snippet assumes the plugin has been loaded properly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar numberBar = scene.rexUI.add.numberBar(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Position by Percentage in TextArea\nDESCRIPTION: Demonstrates how to set the scroll position using a normalized value between 0 and 1, where 0 is the top and 1 is the bottom.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.t = t;  // t: 0~1\n// textArea.setT(t);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gashapon Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to include the Gashapon plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport GashaponPlugin from 'phaser3-rex-plugins/plugins/gashapon-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexGashapon',\n            plugin: GashaponPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Handling User Join Event\nDESCRIPTION: JavaScript code showing how to set up an event listener for when any user joins the online user list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.on('join', user);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Boundary Points in Phaser 3 Board Plugin\nDESCRIPTION: Gets the boundary points around a set of tiles, chess pieces, or the entire board. Returns an array of polygon paths that can be used to draw the boundaries.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar pointsAarray = board.getBoundaryPoints(tileXYArray);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pointsAarray = board.getBoundaryPoints(chessArray);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pointsAarray = board.getBoundaryPoints(tileZ); // All tiles on tileZ\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pointsAarray = board.getBoundaryPoints(); // All tileXY position\n```\n\nLANGUAGE: javascript\nCODE:\n```\npointsAarray.forEach(function (points) {\n    graphics\n        .lineStyle(lineWidth, color, alpha)\n        .strokePoints(points, true);\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Wipe Effect in Phaser 3\nDESCRIPTION: Creates a wipe transition effect with adjustable width, direction, and axis parameters. Available for both game objects and cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addWipe(wipeWidth, direction, axis);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addWipe(wipeWidth, direction, axis);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addWipe(wipeWidth, direction, axis);\n```\n\n----------------------------------------\n\nTITLE: Managing Projection of IsoBox in Phaser 3\nDESCRIPTION: Demonstrates how to get and set the projection value of an IsoBox object, which affects its isometric appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isobox.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar projection = isoBox.projection;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoBox.setProjection(value)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoBox.projection = value;\n```\n\n----------------------------------------\n\nTITLE: Controlling Internal Camera in RenderTexture in Phaser 3\nDESCRIPTION: Methods to manipulate the internal camera of a render texture, allowing for scrolling, zooming, and rotation effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nrt.camera.setScroll(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrt.camera.setZoom(zoom);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrt.camera.setAngle(angle);  // angle in degrees\n```\n\n----------------------------------------\n\nTITLE: Loading TextBox Plugin via Minified File in Phaser 3\nDESCRIPTION: Demonstrates how to load the UI plugin and create a TextBox object using the minified file approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Checking Pointer Bounds in Sizer for Phaser 3 Rex UI\nDESCRIPTION: Shows how to check if the pointer is within the bounds of the Sizer or a specific child. This can be used to determine if the Sizer or its children are currently being clicked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar isClicked = sizer.isPointerInBounds();\n\n// For a child\nvar isClicked = sizer.isPointerInBounds(child);\n// or\nvar isClicked = sizer.isPointerInBounds(elementName);\n```\n\n----------------------------------------\n\nTITLE: Removing Global Animation in Phaser 3\nDESCRIPTION: Removes a global animation from the scene's animation manager. The 'key' parameter is the unique identifier of the animation to remove.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.anims.remove(key);\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Recorder Instances\nDESCRIPTION: Creates TCRP recorder instances either tied to a scene or a game object. The recorder will be destroyed automatically when the parent object is destroyed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar recorder = scene.plugins.get('rexTCRP').addRecorder(scene);\n// Destroy when scene stopped\n\nor\n\nvar recorder = scene.plugins.get('rexTCRP').addRecorder(gameObject);\n// Destroy when game object destroyed\n```\n\n----------------------------------------\n\nTITLE: Creating Leaderboard Instance\nDESCRIPTION: Example configuration for creating a leaderboard instance with all available options\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-leaderboard.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar leaderBoard = scene.plugins.get('rexFirebase').add.leaderBoard({\n    root: '',\n    // timeFilters: false,\n    // timeFilterType: 'year',\n    // pageItemCount: 100,\n    // userID: '',\n    // userName: '',\n    // boardID: undefined,\n    // tag: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Initialization Event in Firebase Item Table\nDESCRIPTION: JavaScript code to set up an event handler for the initialization event which fires when all data is read back after starting updates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('init', function(data) { })\n```\n\n----------------------------------------\n\nTITLE: Loading Binary Data in Phaser 3\nDESCRIPTION: Shows how to load binary data files with options to specify the data type (e.g., Uint8Array, Int32Array, Float32Array) for type casting after loading.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.binary(key, url, dataType);  // dataType: Uint8Array\n// scene.load.binary(key, url, dataType, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Vertical Text Wrapping in Phaser 3 Dynamic Text\nDESCRIPTION: Method to configure vertical text wrapping with options for padding, line dimensions, and alignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = txt.runVerticalWrap({\n    padding: {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n    },\n    lineWidth: undefined,\n    maxLines: undefined,\n    fixedChildHeight: undefined,\n    charPerLine: undefined,\n    wrapHeight: undefined,\n    letterSpacing: 0,\n    rtl: true,\n    hAlign: 0,\n    vAlign: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ItemTable Class Directly\nDESCRIPTION: JavaScript code to import the ItemTable class directly from the firebase-components module for use without the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ItemTable } from 'phaser3-rex-plugins/plugins/firebase-components.js';\n```\n\n----------------------------------------\n\nTITLE: Creating Nine Slice from JSON Configuration in Phaser 3\nDESCRIPTION: Creates a Nine Slice object using a JSON configuration object. This approach allows for setting multiple properties in a single call, including position, size, and rendering options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/nineslice.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar nineSlice = scene.make.nineslice({\n    x: 0,\n    y: 0,\n    key: '',\n    // frame: '',\n\n    // width: 256,\n    // height: 256,\n    // leftWidth: 10,\n    // rightWidth: 10,\n    // topHeight: 0,\n    // bottomHeight: 0,\n\n    // angle: 0,\n    // alpha: 1,\n    // scale : {\n    //    x: 1,\n    //    y: 1\n    //},\n    // origin: {x: 0.5, y: 0.5},\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Running Confirm Action with Imported Plugin\nDESCRIPTION: Code for creating a confirm action dialog using the imported Rex UI plugin. The dialog will be destroyed after any button is clicked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmaction.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = scene.rexUI.confirmAction(scene, config)\n```\n\n----------------------------------------\n\nTITLE: Managing Scroll Factor and Origin in Container-Lite (JavaScript)\nDESCRIPTION: Methods for setting scroll factor to children and changing the origin of a Container-Lite instance. Changing origin also resets all local states of children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.setScrollFactor(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.changeOrigin(originX, originY);\n```\n\n----------------------------------------\n\nTITLE: Enabling Mask for Next Image in Phaser 3 Transition\nDESCRIPTION: Applies a mask to the next texture in the transition. Can optionally specify whether the mask is enabled and whether to invert the alpha channel.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setNextImageMaskEnable();\n// image.setNextImageMaskEnable(enable, invertAlpha);\n```\n\n----------------------------------------\n\nTITLE: Getting Triangle-Circle Intersection Points in Phaser 3\nDESCRIPTION: Calculates the points where a triangle intersects with a circle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetTriangleToCircle(triangle, circle);\n// var out = Phaser.Geom.Intersects.GetTriangleToCircle(triangle, circle, out);\n```\n\n----------------------------------------\n\nTITLE: Configuring ConfirmActionButton in Phaser 3\nDESCRIPTION: Provides a comprehensive configuration example for creating a ConfirmActionButton with various options and callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmactionbutton.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = scene.rexUI.confirmActionButton({\n    // Parameters of Label\n    orientation: 0,\n    background: backgroundGameObject,\n    icon: iconGameObject,\n    text: textGameObject,\n    action: actionGameObject,\n    space: {\n        left: 0, right: 0, top: 0, bottom: 0,\n        icon: 0, \n        text: 0,\n    },\n\n    // Parameter of building confirm dialog\n    confirmDialog: {\n        style: confirmDialogConfig,\n        content: confirmDialogResetChoiceDisplayContentConfig,\n        modal: confirmDialogModalConfig,\n        onCreateDialog: function(dialog) { },\n        confirmButtonIndex: 0,\n        cancelButtonIndex: 1,\n    },\n    \n    // Callbacks\n    confirm: function() {},\n    cancel: function() {},\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Point Light Radius\nDESCRIPTION: Shows how to retrieve the current radius of a point light.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar radius = pointLight.radius;\n```\n\n----------------------------------------\n\nTITLE: Handling Text Editor Events in JavaScript\nDESCRIPTION: Event handlers for various text editor interactions including text changes, character additions, cursor movement, and editor state changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('textchange', function(text, txt){\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('addchar', function(child, index, canvasInput) {\n    child.modifyStyle({...})\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('cursorout', function(child, index, canvasInput) {\n    child.modifyStyle({...})\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('cursorin', function(child, index, canvasInput) {\n    child.modifyStyle({...})\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('open', function() {\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('close', function() {\n    \n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('keydown-ENTER', function(){\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('nan', function(text){\n\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Online User List with Global Plugin\nDESCRIPTION: JavaScript code to create an online user list using the global Firebase plugin in Phaser.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar userList = scene.plugins.get('rexFirebase').add.onlineUserList(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Loop Status in Youtube Player for Phaser 3\nDESCRIPTION: Methods to enable or disable video looping in the Youtube player.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.setLoop(loop);  // loop: true/false\n// player.loop = loop;\n```\n\n----------------------------------------\n\nTITLE: Controlling Transition Playback in TransitionImagePack\nDESCRIPTION: Shows how to pause, resume, and stop transitions in a TransitionImagePack instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimage.pause();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.resume();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.stop();\n```\n\n----------------------------------------\n\nTITLE: Layout TextArea Elements in Phaser 3\nDESCRIPTION: Shows how to arrange the position of all elements within the TextArea component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.layout();\n```\n\n----------------------------------------\n\nTITLE: Creating Fuzzy Logic Module Instance in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to create a fuzzy logic module instance using a string configuration that defines fuzzy sets and rules.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fuzzy.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar fuzzyModule = scene.plugins.get('rexFuzzy').add(`\n// Declare fuzzy sets\nFuzzySetName : left, middle, right, setType\nFuzzySetName : left, middle, right\nFuzzySetName : left, right\n\n// Declare rules\nFuzzySetNameA => FuzzySetNameT\nFuzzySetNameA and FuzzySetNameB => FuzzySetNameT\nFuzzySetNameA or FuzzySetNameB => FuzzySetNameT\nFuzzySetNameA or (FuzzySetNameA and FuzzySetNameB) => FuzzySetNameT\n\n// More comment lines...\n`);\n```\n\n----------------------------------------\n\nTITLE: Removing Post-FX Pipeline from Camera\nDESCRIPTION: Shows multiple methods for removing post-processing pipelines from a camera, including removing a specific pipeline type or all pipelines.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-shader-effect.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.removePostPipeline(PostFxClass);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.resetPipeline(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postPipelines = [];\ncamera.hasPostPipeline = false;\n```\n\n----------------------------------------\n\nTITLE: Drag Enable/Disable Methods\nDESCRIPTION: Methods to get, set, and toggle the drag behavior's enabled state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/drag.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = drag.enable;\ndrag.setEnable(enable);\ndrag.toggleEnable();\n```\n\n----------------------------------------\n\nTITLE: Enabling All Dialog Buttons - JavaScript\nDESCRIPTION: Method to enable input on all buttons in the dialog simultaneously.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.setAllButtonsEnable();\n```\n\n----------------------------------------\n\nTITLE: Listening for Cache Remove Events in Phaser 3\nDESCRIPTION: Shows how to listen for 'remove' events on a cache to detect when items are removed from any Phaser cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\ncache.events.on('remove', function(cache, key, item){\n\n})\n```\n\n----------------------------------------\n\nTITLE: Loading and Adding 3D Models\nDESCRIPTION: Methods for loading OBJ models and adding them to the mesh\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mesh.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.obj(key, url, objURL, matURL);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.addVerticesFromObj(key, scale, x, y, z, rotateX, rotateY, rotateZ, zIsUp);\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Fixed-Part Scale in NinePatch\nDESCRIPTION: Retrieves the maximum scale factors for fixed parts of a NinePatch object. These properties limit how much the fixed parts can be scaled.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar scaleX = ninePatch.maxFixedPartScaleX;\nvar scaleY = ninePatch.maxFixedPartScaleY;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Background Element in Dialog - JavaScript\nDESCRIPTION: Gets the background game object from a dialog. This allows access to the background element for further manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = dialog.getElement('background');\n```\n\n----------------------------------------\n\nTITLE: Adding FixWidthButtons to Phaser 3 Scene\nDESCRIPTION: Creates a new FixWidthButtons instance and adds it to the current scene. This method is available after loading the Rex UI Plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthbuttons.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = scene.rexUI.add.fixWidthButtons(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Knob Class in Phaser3\nDESCRIPTION: Example showing how to extend the Knob class to create a custom knob component with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-knob.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyKnob extends RexPlugins.UI.Knob {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Bitmap Text in Phaser 3\nDESCRIPTION: Basic initialization of a dynamic bitmap text object with position, key, and text parameters. Optional size and alignment can be specified.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamicbitmaptext.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.dynamicBitmapText(x, y, key, text);\n// var txt = scene.add.dynamicBitmapText(x, y, key, text, size, align);\n```\n\n----------------------------------------\n\nTITLE: Creating Pan Input with Configuration in Phaser 3\nDESCRIPTION: Creates a pan input instance with specific configuration options including enable state, bounds, and threshold.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pan = scene.rexGestures.add.pan({\n    // enable: true,\n    // bounds: undefined,\n\n    // threshold: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Email Verification\nDESCRIPTION: Sends a verification email to the currently authenticated user. This helps confirm that the user owns the email address associated with their account.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nuser.sendEmailVerification().then(function() {\n    // Email sent.\n}).catch(function(error) {\n    // An error happened.\n});\n```\n\n----------------------------------------\n\nTITLE: Applying FishEye Effect to a Game Object\nDESCRIPTION: Applies the FishEye post-processing effect to a Phaser game object using the plugin approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexfisheyepipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Tile Position via Properties\nDESCRIPTION: Alternative method to set tile positions using direct property access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimage.tilePositionX = x;\nimage.tilePositionY = y;\n```\n\n----------------------------------------\n\nTITLE: Removing Child Game Objects from a Layer in Phaser 3\nDESCRIPTION: Demonstrates various methods to remove child game objects from a Layer, including removing specific objects, by index, or all children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar removed = layer.remove(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar removed = layer.removeAt(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar removed = layer.removeBetween(startIndex, endIndex);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.removeAll();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element by Name in Phaser3 Scrollable Panel (Method 2)\nDESCRIPTION: Gets a game object by its name using the getByName method. Optional recursive parameter to search through all children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = panel.getByName(name);\n// var gameObject = panel.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Message Sender Configuration - JavaScript\nDESCRIPTION: Setting up message sender details using setSender method with user ID and name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-broadcast.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmessager.setSender(userID, userName);\n\n// or\n\nmessager.setSender({\n    userID: userID,\n    userName: userName\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Atlas JSON Load Complete Event in Phaser 3\nDESCRIPTION: Event handler for when a texture atlas JSON file completes loading.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.on('filecomplete-atlasjson-' + key, function(key, type, data) {}, scope);\n```\n\n----------------------------------------\n\nTITLE: Loading Repeat Image Plugin (Minify File)\nDESCRIPTION: Code for loading the Repeat Image plugin using the minified file in a Phaser scene's preload stage and creating a repeat image object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexrepeatimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexrepeatimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Visibility Control in Phaser3 Sizer\nDESCRIPTION: Methods to control visibility of sizer elements and their layout behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.hide();\n// or\nsizer.hide(gameObject);\n\nsizer.show();\n// or\nsizer.show(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Removing Items from UniqueItemList (JavaScript)\nDESCRIPTION: Shows various methods for removing items from a UniqueItemList, including removing specific items, at positions, or clearing the entire list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlistA.remove(item);\nlistA.removeFirst();\nlistA.removeLast();\nlistA.remove(undefined, index);\nlistA.removeMultiple(items);\nlistA.clear();\nlistA.clear(true);\n```\n\n----------------------------------------\n\nTITLE: Resuming Text Typing Animation\nDESCRIPTION: Resumes a previously paused typing animation. This will trigger the 'resume' event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.resume();\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Image with Arcade Physics in Phaser 3\nDESCRIPTION: Creates a dynamic physics image object that extends from the Image object class. Dynamic objects can be affected by forces, velocity, and gravity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.physics.add.image(x, y, key);\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of Custom NameValueLabel Class\nDESCRIPTION: Code showing how to create an instance of a custom extended NameValueLabel class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = new MyNameValueLabel(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Getting ScrollBar Elements by Name in JavaScript\nDESCRIPTION: Methods to retrieve ScrollBar elements by their name, with an option for recursive search.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = scrollBar.getElement(\"#\" + name);\n// var gameObject = scrollBar.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = scrollBar.getByName(\"#\" + name);\n// var gameObject = scrollBar.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Checking for Tiles at World Coordinates\nDESCRIPTION: Methods for checking if a tile exists at specific world coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasTile = map.hasTileAtWorldXY(worldX, worldY);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasTile = map.hasTileAtWorldXY(worldX, worldY, camera, layer);\n```\n\n----------------------------------------\n\nTITLE: Loading Image Textures in Phaser 3\nDESCRIPTION: Loads an image texture into the Phaser loader cache using a key identifier and URL path.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/image.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Properties in Phaser 3\nDESCRIPTION: Shows different ways to set and modify line properties including positions, endpoints, and copying values from another line.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nline.setTo(x1, y1, x2, y2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Line.CopyFrom(source, dest);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.x1 = 0;\nline.y1 = 0;\nline.x2 = 0;\nline.y2 = 0;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.left = 0;    // min(x1, x2)\nline.top = 0;     // min(y1, y2)\nline.right = 0;   // max(x1, x2)\nline.bottom = 0;  // max(y1, y2)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = Phaser.Geom.Line.Offset(line, dx, dy); \n// line.x1 += dx, line.y1 += dy, line.x2 += dx, line.y2 += dy\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = Phaser.Geom.Line.CenterOn(line, x, y);\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Plugin via NPM\nDESCRIPTION: Demonstrates how to install and configure the UI plugin through npm package manager and game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-expbar.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar expBar = scene.rexUI.add.expBar(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle-Switch Plugin in Game Configuration\nDESCRIPTION: Imports and configures the ToggleSwitchPlugin in the Phaser 3 game configuration to make it available globally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ToggleSwitchPlugin from 'phaser3-rex-plugins/plugins/toggleswitch-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexToggleSwitchPlugin',\n            plugin: ToggleSwitchPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Horrifi PostPipeline on Game Object\nDESCRIPTION: Applies the Horrifi post-processing effect as a post pipeline to a game object after importing the class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(HorrifiPostFx);\n```\n\n----------------------------------------\n\nTITLE: Managing Child Proportion in Sizer in Phaser 3\nDESCRIPTION: Demonstrates how to set and get the proportion of a specific child within the sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setChildProportion(child, proportion)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar align = sizer.getChildProportion(child)\n```\n\n----------------------------------------\n\nTITLE: Checking Playing Status in Youtube Player for Phaser 3\nDESCRIPTION: Method to check if the Youtube video is currently playing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPlaying = player.isPlaying;\n```\n\n----------------------------------------\n\nTITLE: Loading the Full Window Rectangle Plugin\nDESCRIPTION: Loads the minified plugin file in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfullwindowrectangleplugin', 'https://raw.githubusercontent.com/rexrainbow/    phaser3-rex-notes/master/dist/rexfullwindowrectangleplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Getting Next Question in Quest Task (JavaScript)\nDESCRIPTION: Demonstrates how to retrieve the next question object in a quest task, optionally specifying a question key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar question = quest.getNextQuestion();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar question = quest.getNextQuestion(questionKey);\n```\n\n----------------------------------------\n\nTITLE: Creating Vector2 Objects in Phaser 3\nDESCRIPTION: Creates a new Vector2 object which represents a 2D vector with x and y components. This can be instantiated with no parameters (defaults to 0,0), with x and y values directly, or from an object with x and y properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar vector = new Phaser.Math.Vector2();\n// var vector = new Phaser.Math.Vector2(x, y);\n// var vector = new Phaser.Math.Vector2({x, y});\n```\n\n----------------------------------------\n\nTITLE: Getting Bob Object Alpha in Phaser 3\nDESCRIPTION: Retrieves the current alpha (transparency) value of a Bob object. Alpha ranges from 0 (completely transparent) to 1 (completely opaque).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = bob.alpha;\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents\nDESCRIPTION: Insert an array of documents into a collection in a single operation for better performance when adding multiple items.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncollection.insert(docArray);  // documents in array\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Achievement States\nDESCRIPTION: Methods to persist and restore achievement states, useful for saving game progress.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/achievements.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar states = achievements.getObtainedStates();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nachievements.loadObtainedStates(states);\n```\n\n----------------------------------------\n\nTITLE: Adding Images to Text in Phaser 3\nDESCRIPTION: Methods for embedding images within text content. Allows configuration of image dimensions, positioning, and padding with support for multiple image definitions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.addImage(imgKey, {\n    key: textureKey,\n    frame: frameName,\n    width: undefined,\n    height: undefined,\n    y: 0,\n    left: 0,\n    right: 0\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.addImage(data);\n```\n\n----------------------------------------\n\nTITLE: Getting Light Position in Phaser 3\nDESCRIPTION: Code for retrieving a light's current position coordinates in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = light.x;\nvar y = light.y;\n```\n\n----------------------------------------\n\nTITLE: Getting Alias from ID\nDESCRIPTION: JavaScript code for retrieving the alias associated with an ID from the FireStore database.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nidAlias.getAlias(id)\n    .then(function(result) { \n        // var alias = result.alias; // Return undefined if id is not existed.\n        // var id = result.id;\n    })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DropDownList Class in Phaser 3\nDESCRIPTION: Example of defining a custom class that extends the DropDownList component with constructor setup.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyDropDownList extends RexPlugins.UI.DropDownList {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Chess to MiniBoard\nDESCRIPTION: Code for adding a chess piece to the MiniBoard at specific tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-miniboard.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nminiBoard.addChess(gameObject, tileX, tileY, tileZ);\n```\n\n----------------------------------------\n\nTITLE: Toggling Image Flips in Phaser 3 Transition\nDESCRIPTION: Methods to toggle the current flip state of both current and next textures, either horizontally (toggleFlipX) or vertically (toggleFlipY).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimage.toggleFlipX();\nimage.toggleFlipY();\n```\n\n----------------------------------------\n\nTITLE: Setting Thickness of Circular Progress Bar\nDESCRIPTION: Demonstrates how to set the thickness of the circular progress bar, which is calculated as radius * thickness.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setThickness(thickness);\n```\n\n----------------------------------------\n\nTITLE: Toggling Checkbox State\nDESCRIPTION: Toggles the checkbox between checked and unchecked states using the toggleChecked method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.toggleChecked();\n// checkbox.setValue(!checkbox.checked);\n```\n\n----------------------------------------\n\nTITLE: Getting Timer Progress\nDESCRIPTION: Retrieves the progress of all timers in the Real-Time Timers instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = realTimeTimers.getTimersProgress()\n// var result = realTimeTimers.getTimersProgress(currentTimestamp);\n```\n\n----------------------------------------\n\nTITLE: Initializing Game Objects in Phaser 3\nDESCRIPTION: Creates various game objects including background, dialog box, title, characters, choice menu, and name input. Each object is given specific properties like position, size, and initial state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/mds/command-executor.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBG\n  id=Background\n  vpw=1\n  vph=1\n  scaleMode=ENVELOP\n\nTEXTBOX\n  id=Dialog\n  vpw=0.6\n  vph=0.2\n  vpy=0.99\n\nTITLE\n  id=Title\n  vpx=0.99\n  vpy=0.1\n  text0=Day0\n  text1=Classroom\n\nSPRITE\n  id=CharacterA\n  key=characters\n  name=A\n  expression=smile\n  vpx=-1\n\nSPRITE\n  id=CharacterB\n  key=characters\n  name=B\n  expression=smile\n  vpx=-1\n\nSPRITE\n  id=CharacterC\n  key=characters\n  name=C\n  expression=smile\n  vpx=-1\n\nCHOICE\n  id=Choice\n  vpw=0.6\n\nNAMEINPUT\n  id=NameInput\n  vpw=0.4\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install Rex plugins from npm package manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Playing Animation in Reverse on Sprite in Phaser 3\nDESCRIPTION: Plays an animation in reverse on the sprite. The 'key' parameter can be either a string key of the animation or an animation config object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.playReverse(key);\n// sprite.playReverse(key, ignoreIfPlaying);\n```\n\n----------------------------------------\n\nTITLE: Getting Tile Position\nDESCRIPTION: Shows how to retrieve the current tile position (X, Y, Z coordinates) of a chess piece\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-chessdata.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYZ = gameObject.rexChess.tileXYZ;\n```\n\n----------------------------------------\n\nTITLE: Creating ShatterImage with Configuration Options\nDESCRIPTION: Demonstrates how to create a ShatterImage with various configuration options for controlling the shatter pattern.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexShatterImage(x, y, texture, frame, {\n    // ringRadiusList: [1 / 27, 3 / 27, 9 / 27],\n    // ringRadiusList: function(width, height) {\n    //    return [1 / 27, 3 / 27, 9 / 27];\n    // },\n\n    // samplesPerRing: 12\n    // variation: 0.25,    \n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document by ID\nDESCRIPTION: Get a document from a collection using its unique $loki identifier.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar doc = collection.get(id);  // id: `$loki`\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with OR Condition\nDESCRIPTION: Find documents that match any of multiple conditions using the $or operator. Each condition is specified as a separate object in an array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({'$or': [\n    {key0: {'$lt': value0}},\n    {key1: {'$gte': value1}},\n    // ...\n]});\n```\n\n----------------------------------------\n\nTITLE: Attaching Polar Coordinate Properties to Game Object\nDESCRIPTION: Demonstrates how to attach polar coordinate properties to a game object using the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/polar-coordinate.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexpolarcoordinateplugin').add(gameObject, ox, oy, rotation, radius);\ngameObject.polarRadius = 200;\ngameObject.polarAngle = -45;\n```\n\n----------------------------------------\n\nTITLE: Scaling X and Y axes of Game Objects in Phaser3\nDESCRIPTION: Sets both horizontal and vertical scales of game objects, with optional step values for each axis to create varied scaling patterns.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.ScaleXY(gameObjects, x, y, stepX, stepY, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Mask in Phaser3\nDESCRIPTION: Creates a geometry mask from a shape object that can be used for masking other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = shape.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Managing Blocker State\nDESCRIPTION: Shows various methods for handling the blocker state of a chess piece, including setting, disabling, and checking blocker status\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-chessdata.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.rexChess.setBlocker();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.rexChess.setBlocker(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar blocker = gameObject.rexChess.blocker;\n```\n\n----------------------------------------\n\nTITLE: Capturing Single Pixel Snapshot in Phaser 3\nDESCRIPTION: This snippet illustrates how to capture the color of a single pixel in the game. It uses the game.renderer.snapshotPixel method, which takes x and y coordinates as parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/snapshot.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngame.renderer.snapshotPixel(x, y, callback);\n```\n\n----------------------------------------\n\nTITLE: Managing Life-time Duration and State\nDESCRIPTION: Demonstrates various methods to manage the Life-time duration, check remaining time, and query the alive state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lifetime.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlifeTime.setLifeTime(time);\nlifeTime.addToLifeTime(time);\nvar time = lifeTime.lifeTime;\nvar time = lifeTime.remainder;\nvar isAlive = lifeTime.isAlive;\n```\n\n----------------------------------------\n\nTITLE: Grid Alignment and Overlap Checking (JavaScript)\nDESCRIPTION: Shows methods for aligning chess pieces to the grid and checking if world positions overlap with grid tiles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nboard.gridAlign(chess);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nboard.gridAlign();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isOverlapping = board.isOverlappingPoint(worldX, worldY);\n```\n\n----------------------------------------\n\nTITLE: Configuring Board Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Board plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-image.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Extending TextPlayer Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom TextPlayer class by extending the base component. This allows for adding custom functionality to text typing animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends RexPlugins.UI.TextPlayer {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Buttons from Dialog - JavaScript\nDESCRIPTION: Methods for removing specific buttons from the dialog. The index parameter can be a number index, string name, or button game object. Set destroyChild to true to destroy the button game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.removeChoice(index, destroyChild);\ndialog.removeAction(index, destroyChild);\ndialog.removeToolbar(index, destroyChild);\ndialog.removeLeftToolbar(index, destroyChild);\n```\n\n----------------------------------------\n\nTITLE: Showing Dialog Buttons - JavaScript\nDESCRIPTION: Methods for showing specific buttons. The index parameter can be a number index, string name, or button game object. Layout needs to be called after showing buttons.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.showChoice(index);\ndialog.showAction(index);\ndialog.showToolbar(index);\ndialog.showLeftToolbar(index);\n```\n\n----------------------------------------\n\nTITLE: Creating a Skewable Image from JSON\nDESCRIPTION: Creates a skewable image using the make factory with JSON configuration data, useful for loading from external configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar quadimage = scene.make.rexSkewImage({\n    x: 0,\n    y: 0,\n    \n    key: null,\n    frame: null,\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Text in Phaser 3 Label Component\nDESCRIPTION: These snippets illustrate how to get, set, and append text in a Label component. They show different methods to modify the text content of the label.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = label.text;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setText(s);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.text = s;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.appendText(text);\n// label.text += '\\n' + text;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.appendText(text, false);\n// label.text += text;\n```\n\n----------------------------------------\n\nTITLE: Setting Playback Time in Youtube Player for Phaser 3\nDESCRIPTION: Methods to set the current playback time of the Youtube video in seconds or using a setter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.setPlaybackTime(time); // time in seconds\n// player.playbackTime = time;\n```\n\n----------------------------------------\n\nTITLE: Managing TextAreaInput Read-Only State in JavaScript\nDESCRIPTION: These snippets demonstrate how to enable, disable, and check the read-only state of the TextAreaInput.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.setReadOnly();\n// textAreaInput.setReadOnly(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.readOnly = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.setReadOnly(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.readOnly = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar readOnlyEanble = txt.readOnly;\n```\n\n----------------------------------------\n\nTITLE: Accessing AwayTime from Minify File Plugin in Phaser3\nDESCRIPTION: Retrieves the elapsed away time from the plugin loaded via minify file. This returns the time in milliseconds since the application was last closed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar awayTime = scene.plugins.get('rexawaytimeplugin').awayTime;\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Specific Line in TextArea\nDESCRIPTION: Shows how to scroll the content to display a specific line by its index.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.scrollToLine(lineIndex);\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin via Minified File\nDESCRIPTION: Demonstrates how to load the plugin using a minified file in the preload stage and create a carousel instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-imagecarousel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexperspectiveimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexperspectiveimageplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar carousel = scene.add.rexPerspectiveImageCarousel(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Collision Sensing for Matter.js Physics Objects\nDESCRIPTION: Methods to check and set whether a physics object acts as a sensor (detects collisions without physical response).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar isSensor = gameObject.isSensor();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setSensor(value);\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements by Name in Holy Grail Layout\nDESCRIPTION: Retrieves a game object by its name, with optional recursive search through all child elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = holyGrail.getElement('#' + name);\n// var gameObject = holyGrail.getElement('#' + name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Handling Slider Events in JavaScript\nDESCRIPTION: Event handlers for value change, input start, and input end events of the slider.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-slider.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nslider.on('valuechange', function(newValue, oldValue, slider){\n    //\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.on('inputstart', function(pointer) {\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.on('inputend', function(pointer) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling User List Update Event\nDESCRIPTION: JavaScript code showing how to set up an event listener that triggers when the user list is updated, which can happen when users join, leave, or change their names.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.on('update', users);\n```\n\n----------------------------------------\n\nTITLE: Emitting Tabs Button Click Events in Phaser 3\nDESCRIPTION: Shows how to programmatically emit button click events for the Tabs object in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.emitButtonClick(groupName, index);\n\ntabs.emitLeftButtonClick(index);\ntabs.emitRightButtonClick(index);\ntabs.emitTopButtonClick(index);\ntabs.emitBottomButtonClick(index);\n```\n\n----------------------------------------\n\nTITLE: Importing Line Plugin in Game Configuration\nDESCRIPTION: How to import and configure the Line plugin in the Phaser 3 game configuration and add a line object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/line.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport LinePlugin from 'phaser3-rex-plugins/plugins/line-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexLinePlugin',\n            plugin: LinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = scene.add.rexLine(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Game Object\nDESCRIPTION: Command to create a custom game object with parameters for identification, layer placement, auto-clearing, and custom parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\nGOTYPE\n  id=NAME\n  layer=\n  autoClear=\n  param0=value\n  param1=value\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners for an Event (Alternative) in Phaser 3\nDESCRIPTION: Demonstrates an alternative method to remove all listeners for a specific event in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nee.removeListener(eventName); \n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with startAt in Firestore\nDESCRIPTION: Creates pagination by starting at a specific value in an ordered query, useful for implementing 'first page' functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).orderBy(key).startAt(value).limit(count).get()\n    .then(function(querySnapshot) { /* ... */ })\n    .catch(function(error){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Creating Text Edit Component\nDESCRIPTION: Creates an input text object above a text object for string content editing. Can include an optional onClose callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexUI.edit(textObject, config);\n// scene.rexUI.edit(textObject, config, onClose);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Storage in JavaScript\nDESCRIPTION: Initialize Firebase app and create a storage reference for file operations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-storage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar firebaseApp = firebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n});\nvar storageRef = firebaseApp.storage().ref();\n```\n\n----------------------------------------\n\nTITLE: Checking Movement Possibility in Phaser 3 Board\nDESCRIPTION: Method to check if a chess piece can move to a specific tile position based on the configured rules.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar canMoveTo = moveTo.canMoveTo(tileX, tileY);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Render Texture in Perspective Image (JavaScript)\nDESCRIPTION: Demonstrates various methods to manipulate the internal render texture of a perspective image, including drawing, erasing, clearing, and filling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-rendertexture.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar rt = image.rt;\n\nimage.rt.draw(gameObject, x, y);\n// image.rt.draw(gameObject, x, y, alpha, tint);\n\nimage.rt.draw(group, x, y);\n// image.rt.draw(group, x, y, alpha, tint);\n\nimage.rt.draw(scene.children, x, y);\n// image.rt.draw(scene.children, x, y, alpha, tint);\n\nimage.rt.draw(key, x, y);\n// image.rt.draw(key, x, y, alpha, tint);\n\nimage.rt.drawFrame(key, frame, x, y);\n// image.rt.drawFrame(key, frame, x, y, alpha, tint);\n\nimage.snapshot(gameObjects);\n\nimage.rt.erase(gameObject, x, y);\n\nimage.rt.clear();\n\nimage.rt.fill(rgb, alpha);\n// image.rt.fill(rgb, alpha, x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Handling Child Removal Events in Phaser 3 Sizer\nDESCRIPTION: Demonstrates how to listen for the 'sizer.remove' event on child elements when they are removed from the sizer without being destroyed. This allows for custom cleanup or processing when a child is removed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nchild.on('sizer.remove', function(child, sizer){\n\n})\n```\n\n----------------------------------------\n\nTITLE: Working with Video Markers in Phaser 3\nDESCRIPTION: Methods to add, play, and remove markers that define specific sections of the video for playback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.addMarker(key, markerIn, markerOut);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.playMarker(key, loop);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.removeMarker(key);\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Color Tints for Rope Vertices in Phaser 3\nDESCRIPTION: Applies different color tints to each vertex point in the rope by providing an array of color values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nrope.setAlphas(colorArray);\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Pointer Up Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for when a pointer is released on any tile in the board. The callback receives the pointer object and the tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('tileup', function(pointer, tileXY) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Points Around Triangle Edge in Phaser 3 (By Quantity)\nDESCRIPTION: Generates a specific number of evenly spaced points around the edge of the triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = triangle.getPoints(quantity);\n// var points = triangle.getPoints(quantity, null, points);  // push points\n```\n\n----------------------------------------\n\nTITLE: Setting Values with Auto-Conversion in JavaScript\nDESCRIPTION: Methods for setting a value that will be automatically converted to a string representation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setValue(value);\n// txt.value = value;\n```\n\n----------------------------------------\n\nTITLE: Handling Ready Event in Youtube Player for Phaser 3\nDESCRIPTION: Event handler for when the Youtube player API is ready to receive commands.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('ready', function(player){ }, scope);\n```\n\n----------------------------------------\n\nTITLE: Appending Images in Phaser 3 Dynamic Text\nDESCRIPTION: Method to append an image to a dynamic text object with optional sizing and coloring parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.appendImage(key, frame, {\n    // width: ,\n    // height: ,\n    // scaleX: ,\n    // scaleY: ,\n    // color: ,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ToggleSwitch Instance\nDESCRIPTION: Creates an instance of a custom-defined ToggleSwitch class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar toggleSwitch = new MyToggleSwitch(scene, x, y, width, height, color, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Audio Sprites in Phaser 3\nDESCRIPTION: Method for loading audio sprites, which are audio files with multiple sound effects defined by timestamps in a JSON file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.audioSprite(key, jsonURL, audioURL, audioConfig);\n// scene.load.audioSprite(key, jsonURL, audioURL, audioConfig, audioXhrSettings, jsonXhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Starting a Particle Emitter in Phaser 3\nDESCRIPTION: Starts (or restarts) the particle emitter with optional parameters to advance time or set duration. This function activates the emitter to begin generating particles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.start();\n// emitter.start(advance, duration);\n```\n\n----------------------------------------\n\nTITLE: Handling Sub-menu Expand Events in Phaser3 Menu\nDESCRIPTION: Event handler for when a sub-menu begins to expand (pop-up). Provides access to the expanding sub-menu and the parent button that triggered the expansion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.on('expand', function(subMenu, parentButton) {\n    // ....\n}, scope)\n```\n\n----------------------------------------\n\nTITLE: Enable State Management\nDESCRIPTION: Shows how to get, set, and toggle the enabled state of the click-outside behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clickoutside.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar enabled = clickOutside.enable;\nclickOutside.setEnable(enabled);\nclickOutside.toggleEnable();\n```\n\n----------------------------------------\n\nTITLE: Applying GrayScale PostFx to Game Object\nDESCRIPTION: Applies the grayscale post-processing effect to a game object using the PostFx class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(GrayScalePostFx);\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Tree Objects in Phaser3\nDESCRIPTION: Basic methods for adding tree objects to the UI hierarchy. Allows optional nodeKey parameter for reference tracking.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar tree = trees.addTree();\n// var tree = trees.addTree(nodeKey);\n\nvar subTree = tree.addTree();\n// var subTree = tree.addTree(nodeKey);\n```\n\n----------------------------------------\n\nTITLE: Playing Youtube Video in Phaser 3\nDESCRIPTION: Method to start playback of the currently loaded Youtube video.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.play();\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Texture in Phaser 3 UI Label\nDESCRIPTION: Demonstrates how to set and get the texture and frame of the icon element.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setTexture(key);\n// label.setTexture(key, frame);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setTexture(texture);\n// label.setTexture(texture, frame);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar texture = label.texture;\nvar frame = label.frame;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textureKey = label.texture.key;\nvar frameName = label.frame.name;\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Table Class in Phaser 3\nDESCRIPTION: Shows how to import the Grid Table class and create an instance in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport GridTable from 'phaser3-rex-plugins/plugins/gridtable.js';\n\nvar table = new GridTable(scene, x, y, width, height, config);\nscene.add.existing(table);\n```\n\n----------------------------------------\n\nTITLE: Applying GrayScale PostFx to Camera\nDESCRIPTION: Applies the grayscale post-processing effect to a camera using the PostFx class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(GrayScalePostFx);\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcade Physics in Phaser 3\nDESCRIPTION: Enable the Arcade physics engine in the game configuration. This is a prerequisite for using the Eight Direction plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eightdirection.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    physics: {\n        default: 'arcade',\n        arcade: {\n            // debug: true\n        }\n    }\n}\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting TCRP Player State Information\nDESCRIPTION: Properties to check the TCRP player's current state, including if it's playing, completed, and the current time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPlaying = player.isPlaying;\nvar completed = player.completed;\nvar now = player.now;\n```\n\n----------------------------------------\n\nTITLE: IsPlainObject Check in Phaser3\nDESCRIPTION: Utility function to check if an object is a plain JavaScript object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/config-data.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPlainObject = Phaser.Utils.Objects.IsPlainObject(object);\n```\n\n----------------------------------------\n\nTITLE: Executing Tag Commands\nDESCRIPTION: Methods to execute tag commands with promise support for completion callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.play(commands);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.playPromise(commands)\n    .then(function(){\n        // Typing content complete\n    })\n```\n\n----------------------------------------\n\nTITLE: Getting Video Duration in Youtube Player for Phaser 3\nDESCRIPTION: Method to retrieve the total duration of the current Youtube video in seconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar duration = player.duration;  // time in seconds\n```\n\n----------------------------------------\n\nTITLE: Getting Points on Lines in Phaser 3\nDESCRIPTION: Demonstrates various methods for getting points on a line including specific positions, random points, and arrays of points.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = line.getPoint(t);  // t : 0 ~ 1. 0=start, 0.5=middle, 1=end\n// var point = line.getPoint(t, point);  // modify point\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = line.getRandomPoint();\n// var point = line.getRandomPoint(point);  // modify point\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = line.getPoints(quantity);\n// var points = line.getPoints(quantity, null, points);  // push points\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = line.getPoints(false, step);\n// var points = line.getPoints(false, step, points);  // push points\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = Phaser.Geom.Line.BresenhamPoints(line, step);\n// var points = Phaser.Geom.Line.BresenhamPoints(line, step, points);  // push points\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = Phaser.Geom.Line.GetEasedPoints(line, ease, quantity);\n// var points = Phaser.Geom.Line.GetEasedPoints(line, ease, quantity, collinearThreshold, easeParams);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = Phaser.Geom.Line.GetNearestPoint(line, pointIn);\n// var point = Phaser.Geom.Line.GetNearestPoint(line, pointIn, point);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar distance = Phaser.Geom.Line.GetShortestDistance(line, point);\n```\n\n----------------------------------------\n\nTITLE: Tweening Local State of Child in Container-Lite (JavaScript)\nDESCRIPTION: Methods to create tween animations for the local state of a child object within a Container-Lite instance. This allows for animating properties like position, rotation, scale, and alpha.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar tweenObj = container.tweenChild({\n    targets: child,\n    // x: '+=100',\n    // y: '+=100',\n    // repeat: -1,\n    // yoyo: true\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tweenObj = containerLiteChild.tweenSelf({    \n    // x: '+=100',\n    // y: '+=100',\n    // repeat: -1,\n    // yoyo: true\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tweenConfig = container.createTweenChildConfig({\n     targets: child,\n    // x: '+=100',\n    // y: '+=100',\n    // repeat: -1,\n    // yoyo: true\n});\nscene.tweens.add(tweenConfig);\n```\n\n----------------------------------------\n\nTITLE: Setting Vector2 Angle in Phaser 3\nDESCRIPTION: Sets the angle of the Vector2 while maintaining its length. The angle is specified in radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvector.setAngle(angle);\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Firebase\nDESCRIPTION: Sends a message using the Firebase messages object and handles the promise.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmessages.send(message)    \n    .then(function() { })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Drawing Texture Frames with Advanced Options in Phaser 3\nDESCRIPTION: Draws a texture frame with detailed control over properties like alpha, tint, angle, scale, origin, and blend mode. Can also erase instead of draw when erase is set to true.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrt.stamp(key, frame, x, y, {\n    alpha: 1,\n    tint: 0xffffff,\n    angle: 0,\n    rotation: 0,\n    scale: 1,\n    scaleX: 1,\n    scaleY: 1,\n    originX: 0.5,\n    originY: 0.5,\n    blendMode: 0,\n    erase: false,\n    skipBatch: false\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Text Margins, Offsets and Resolution in Phaser 3\nDESCRIPTION: Methods for measuring left margin of text, setting horizontal offset, and configuring text resolution. Provides fine control over text positioning and rendering quality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar leftMargin = txt.measureTextMargins(testString).left;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setXOffset(value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar resolution = txt.style.resolution;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setResolution(resolution);\n```\n\n----------------------------------------\n\nTITLE: Controlling Sound Playback in Phaser 3\nDESCRIPTION: Methods to control sound playback including play, stop, pause, and resume functions for sound instances.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.play();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.play(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.stop();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.pause();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.resume();\n```\n\n----------------------------------------\n\nTITLE: Tileset Management\nDESCRIPTION: Methods for getting and modifying tilesets, including texture changes\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileset = map.getTileset(name);\n\nvar texture = scene.sys.textures.get(key);\ntileset.setImage(texture);\n```\n\n----------------------------------------\n\nTITLE: Listening for Button Out Events in DropDownList\nDESCRIPTION: Sets up an event listener for when the pointer moves out of a button in the dropdown list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.on('button.out', function(dropDownList, listPanel, button, index, pointer, event) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Await Loader Class\nDESCRIPTION: Shows how to import the Await Loader class directly and use it in your code.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaitloader.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Awaitloader from 'phaser3-rex-plugins/plugins/awaitloader.js';\n\nAwaitloader.call(scene.load, function(successCallback, failureCallback) {\n    // successCallback();\n}, scope)\n```\n\n----------------------------------------\n\nTITLE: Creating a Geometry Mask from IsoTriangle in Phaser 3\nDESCRIPTION: Creates a geometry mask based on the iso-triangle's shape for masking other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isotriangle.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = isoTriangle.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Handling Particle Effect Events\nDESCRIPTION: Demonstrates how to handle the completion event when the last particle dies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles-along-bounds.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nparticles.on('complete', function(gameObject, particles){\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Game Setup\nDESCRIPTION: Configuring the localStorage plugin in game configuration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage-data.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport LocalStorageDataPlugin from 'phaser3-rex-plugins/plugins/localstoragedata-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexLocalStorageData',\n            plugin: LocalStorageDataPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Pixel Size Properties\nDESCRIPTION: Code for getting and setting the pixel size properties of the pixelation effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-pixelation.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pixelWidth = pipelineInstance.pixelWidth;\nvar pixelHeight = pipelineInstance.pixelHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.pixelWidth = pixelWidth;\npipelineInstance.pixelHeight = pixelHeight;\n// pipelineInstance.pixelWidth += value;\n// pipelineInstance.pixelHeight += value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setPixelWidth(pixelWidth);\npipelineInstance.setPixelHeight(pixelHeight);\npipelineInstance.setPixelSize(pixelWidth, pixelHeight);\n```\n\n----------------------------------------\n\nTITLE: Configuring GrayScale Effect with Options\nDESCRIPTION: Applies the grayscale effect to a game object with configuration options, including intensity settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGrayScalePipeline').add(gameObject, {\n    // intensity: 1,\n    \n    // name: 'rexGrayScalePostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Mesh Object\nDESCRIPTION: Two methods for adding a mesh object to the scene - either directly or using configuration object\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mesh.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar mesh = scene.add.mesh(x, y, texture, frame);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar mesh = scene.make.mesh({\n    x: 0,\n    y: 0,\n    add: true,\n\n    key: null,\n    frame: null\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Child Game Objects Within a Layer in Phaser 3\nDESCRIPTION: Demonstrates various methods to move and reorder child game objects within a Layer, including swapping, moving to specific positions, and sorting.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.swap(gameObject1, gameObject2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.moveTo(gameObject, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.bringToTop(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.sendToBack(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.moveUp(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.moveDown(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.moveAbove(child1, child2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.moveBelow(child1, child2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.sort(property);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.sort('', function(gameObject1, gameObject2) { \n    return 1; // 0, or -1\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.reverse();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.shuffle();\n```\n\n----------------------------------------\n\nTITLE: Using Modal Promise with Imported Plugin\nDESCRIPTION: Code to add modal behavior to a game object after importing the plugin via npm, with a Promise to handle the dialog's closing event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexModal').promise(gameObject, config)\n    .then(function(closeEventData) {\n    })\n```\n\n----------------------------------------\n\nTITLE: Resetting Vector2 to Zero\nDESCRIPTION: Resets both x and y components of the Vector2 to 0.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvector.reset();\n```\n\n----------------------------------------\n\nTITLE: Updating User Profile\nDESCRIPTION: Updates the profile information for the currently authenticated user. This method allows changing the display name and photo URL for the user's account.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-auth.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nuser.updateProfile({\n    displayName: '...',\n    photoURL: '...'\n}).then(function() {\n    // Update successful.\n}).catch(function(error) {\n    // An error happened.\n});\n```\n\n----------------------------------------\n\nTITLE: Sound Events in Phaser 3\nDESCRIPTION: Event handlers for sound instance lifecycle and property changes, including play, complete, loop, pause, resume, stop, and various property changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('play', function(music){});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('complete', function(music){});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('looped', function(music){});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('pause', function(music){});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('resume', function(music){});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('stop', function(music){});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('mute', function(music, mute){});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('volume', function(music, volume){});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('detune', function(music, detune){});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('rate', function(music, rate){});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('seek', function(music, time){});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.once('loop', function(music, loop){});\n```\n\n----------------------------------------\n\nTITLE: TCRP Commands Format Example\nDESCRIPTION: Shows the format of the commands returned by the getCommands method. Each entry contains a timestamp and an array of commands to execute at that time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    [time, [command]],\n    [time, [command0,command1]],\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Clearing All Emit Zones from Particle Emitter in JavaScript\nDESCRIPTION: Removes all emit zones from the particle emitter. This can be done using the clearEmitZones method or by directly manipulating the emitZones array and resetting the zoneIndex.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.clearEmitZones();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.emitZones.length = 0;\nemitter.zoneIndex = 0;\n```\n\n----------------------------------------\n\nTITLE: Adding Pinch Input to Phaser 3 Scene\nDESCRIPTION: Shows how to add a pinch input to a Phaser 3 scene or game object after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pinch.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pinch = scene.rexGestures.add.pinch(config);\n// var pinch = scene.rexGestures.add.pinch(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation Speed\nDESCRIPTION: Demonstrates how to set or change the rotation speed of the Rotate behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotate.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrotate.setSpeed(speed);\n// rotate.speed = speed;\n```\n\n----------------------------------------\n\nTITLE: RetroFont TEXT_SET2 Definition\nDESCRIPTION: Character set with uppercase letters, numbers and basic special characters\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n' !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n```\n\n----------------------------------------\n\nTITLE: Custom Progress Bar Configuration with Position Parameters\nDESCRIPTION: Detailed configuration example for creating a custom progress bar with explicit position parameters and various options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar customProgress = scene.add.rexCustomProgress(x, y, width, height, {\n    // type: 'rexCustomProgress',\n\n    create: [\n        { name: name0, type: shapeType},\n        { name: name1, type: shapeType},\n        ...\n    ],\n\n    // create: {\n    //     shapeType: [name0, name1, ...],\n    //     shapeType: number,\n    //     shapeType: name,\n    // },\n\n    // create: function() {\n    // \n    // },\n\n    update: function() {\n\n    },\n\n    value: 0,\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n    valuechangeCallback: function(newValue, oldValue, circularProgress) {\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Image Texture in Phaser 3\nDESCRIPTION: Loads an image texture into the Phaser texture cache using the scene loader. This method requires a unique key and the URL path to the image resource.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Sheets from Manager\nDESCRIPTION: Shows different methods to remove event sheets from the manager, including by title, group, or removing all event sheets.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.removeEventSheet(title);\n\n// Remove from specific group\neventSheetManager.removeEventSheet(title, groupName);\n\n// Remove all from default group\neventSheetManager.removeAllEventSheets();\n\n// Remove all from specific group\neventSheetManager.removeAllEventSheets(groupName);\n```\n\n----------------------------------------\n\nTITLE: Creating Chart Instance\nDESCRIPTION: Creating a chart instance with position, size, and configuration parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-chart.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar chart = scene.rexUI.add.chart(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Bracket Parser 2 Class in JavaScript\nDESCRIPTION: Demonstrates how to import the Bracket Parser 2 class directly in a JavaScript file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport BracketParser from 'phaser3-rex-plugins/plugins/bracketparser2.js';\n```\n\n----------------------------------------\n\nTITLE: Updating Bitmap Zone Source\nDESCRIPTION: Shows how to update the source game object for an existing bitmap zone.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmapzone.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbitmapZone.setSource(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Handling Confirm Events from Edit Dialog\nDESCRIPTION: Sets up an event listener for the 'confirm' event, which is triggered when the user confirms the dialog. The handler receives the input data containing firstName and lastName values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.on('confirm', function (data) {\n    var firstName = data.firstName;\n    var lastName = data.lastName;\n  }, scope);\n```\n\n----------------------------------------\n\nTITLE: Removing WarpPostFX Effect in Phaser 3\nDESCRIPTION: This snippet shows how to remove the WarpPostFX effect from a game object in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp-transition.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.removePostPipeline(WarpPostFX); // WarpPostFX class\n```\n\n----------------------------------------\n\nTITLE: Removing Glow Effect from a Game Object\nDESCRIPTION: Removes the glow effect from a Phaser 3 game object using the plugin's remove method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexGlowFilterPipeline').remove(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Creating Wait Events Instance Directly\nDESCRIPTION: Shows how to create an instance of the Wait Events class directly after importing it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar waitEvents = new WaitEvents(completeCallback, completeCallbackScope);\n```\n\n----------------------------------------\n\nTITLE: Setting Slider End Points\nDESCRIPTION: Methods for setting the slider's end points\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/slider.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nslider.setEndPoints(p0x, p0y, p1x, p1y);\n// slider.setEndPoints(p0, p1); // p0, p1: {x, y}\n// slider.setEndPoints(points); // points: [p0, p1]\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating Hidden Input Text Class in Phaser 3\nDESCRIPTION: Demonstrates how to import the Hidden Input Text class and create an instance of it for a text game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/hiddeninputtext.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport HiddenInputText from 'phaser3-rex-plugins/plugins/hiddeninputtext.js';\nvar hiddenInputText = new HiddenInputText(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Applying Glow Filter to Game Object using Plugin Instance\nDESCRIPTION: Applies the glow filter effect to a game object using the plugin instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGlowFilterPipeline').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Using the Transit Method in TransitionImage for Phaser 3\nDESCRIPTION: Shows how to use the transit method to transition between textures with optional configuration of transition parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimage\n    // .setTransitionDirection(dir)\n    // .setTransitionStartCallback(onStart, onStartScope)\n    // .setTransitionProgressCallback(onProgress, onProgressScope)\n    // .setTransitionCompleteCallback(onComplete, onCompleteScope)\n    // .setDuration(duration)\n    // .setEaseFunction(ease)\n    // .setMaskEnable(enable)\n    .transit(texture, frame)\n```\n\n----------------------------------------\n\nTITLE: Setting Background Game Object Properties\nDESCRIPTION: Command for setting properties of a Background game object including position, viewport position, alpha, and animation parameters like duration, easing, repetition, and wait time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/background-commands.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNAME.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Setting Color Tint for Rope Object in Phaser 3\nDESCRIPTION: Applies a color tint to the entire rope object using a single color value that will be applied to all vertices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrope.setColors(color);\n```\n\n----------------------------------------\n\nTITLE: Setting Vector2 Components Method 2\nDESCRIPTION: Sets both x and y components of a Vector2 by copying values from an object containing x and y properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvector.copy({x, y});\n// vector.setFromObject({x, y});\n```\n\n----------------------------------------\n\nTITLE: Importing PathFollower Class\nDESCRIPTION: Shows how to import and use the PathFollower class directly from the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pathfollower.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport PathFollower from 'phaser3-rex-plugins/plugins/pathfollower.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Skew Values for Skewable Image in Radians\nDESCRIPTION: Methods for setting the horizontal, vertical, or both skew values using radians to manipulate the image appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setSkewX(skewXRad);\nimage.setSkewY(skewXRad);\nimage.setSkew(skewXRad, skewYRad);\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Display in Circular Progress Bar\nDESCRIPTION: Shows how to set text color, stroke, font, and format callback for the displayed text in the circular progress bar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setTextColor(color);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setTextStrokeColor(color, thickness);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setTextFont(fontSize, fontFamily, fontStyle);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setTextFormatCallback(callback, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(value) {\n    return Math.floor(value * 100).toString(); \n}\n```\n\n----------------------------------------\n\nTITLE: Element Access in Phaser3 Label Component\nDESCRIPTION: Methods to access various UI elements like background, icon, text, action, and file chooser components from the label.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = label.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar icon = label.getElement('icon');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = label.getElement('text');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar action = label.getElement('action');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileChooser = label.getElement('fileChooser');\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Cover Class\nDESCRIPTION: Shows how to create a custom class that extends the Cover plugin with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCover extends RexPlugins.GameObjects.Cover {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Viewport in Phaser 3\nDESCRIPTION: Retrieves the viewport Rectangle representing the visible area of the game. Optionally takes a camera parameter to get the viewport for a specific camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scalemanager.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar viewport = scene.scale.getViewPort();\n// var viewport = scene.scale.getViewPort(camera, out);\n```\n\n----------------------------------------\n\nTITLE: Pixel Color Manipulation\nDESCRIPTION: Methods for setting and getting pixel colors in the texture\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-texture.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.setPixel(x, y, red, green, blue);\n// texture.setPixel(x, y, red, green, blue, alpha);\n\nvar color = texture.getPixel(x, y);\n// var color = texture.getPixel(x, y, color);\n\nvar colors = texture.getPixels(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event to Sizer in Phaser 3 Rex UI\nDESCRIPTION: Demonstrates how to add a click event to a Sizer object. The method accepts a callback function and an optional scope. Additional configuration can be provided similar to the Button component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.onClick(callback, scope);\n// sizer.onClick(callback, scope, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Transition Start Callback in Phaser 3\nDESCRIPTION: Defines a callback function that will be executed when a transition starts. The callback receives the parent container, current image, next image, and the progress value (always 0 at start).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTransitionStartCallback(onStart, onStartScope)\n```\n\n----------------------------------------\n\nTITLE: Setting Horrifi PostPipeline on Camera\nDESCRIPTION: Applies the Horrifi post-processing effect as a post pipeline to a camera after importing the class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(HorrifiPostFx);\n```\n\n----------------------------------------\n\nTITLE: Adding Slider Behavior\nDESCRIPTION: Adds slider behavior to a game object using the loaded plugin\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/slider.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar slider = scene.plugins.get('rexsliderplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Collapsing a Menu in Phaser 3 Rex UI\nDESCRIPTION: Demonstrates how to collapse a menu or just its sub-menu using methods from the Menu component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.collapse();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.collapseSubMenu();\n```\n\n----------------------------------------\n\nTITLE: Managing Resolution in Phaser 3 Text\nDESCRIPTION: Methods to get and set the resolution of a text object, affecting the crispness of the text rendering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar resolution = txt.style.resolution;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setResolution(resolution);\n```\n\n----------------------------------------\n\nTITLE: Adding Vectors in Phaser 3\nDESCRIPTION: Adds the components of another vector or vector-like object to the current Vector2.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvector.add(src); // src: {x, y}\n```\n\n----------------------------------------\n\nTITLE: Handling Toggle Switch Value Change Events in Phaser 3\nDESCRIPTION: Event listener implementation for toggle switch value changes. Triggers callback when switch state changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.on('valuechange', function(value) {\n    // value: checked\n})\n```\n\n----------------------------------------\n\nTITLE: Handling File Selection Event in ImageInputLabel\nDESCRIPTION: Shows how to listen for the 'select' event when a file is chosen in the ImageInputLabel.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimageInputLabel.on('select', function(file, imageInputLabel) {\n    \n})\n```\n\n----------------------------------------\n\nTITLE: Post FX Pipeline with Color Matrix Implementation\nDESCRIPTION: Implementation of a post FX pipeline that uses color matrix for visual effects like grayscale.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPostFxClass extends Phaser.Renderer.WebGL.Pipelines.PostFXPipeline {\n    constructor(game) {\n        super({\n            game: game,\n            renderTarget: true,\n            fragShader: '...',  // GLSL shader\n            uniforms: []\n        });\n    }\n\n    onPreRender() {\n        // this.set1f('intensity', this._intensity);\n        this.colorMatrix.grayscale(this._intensity);\n    }\n\n    onDraw(renderTarget) {\n        this.colorMatrix.grayscale(this._intensity);\n        this.drawFrame(renderTarget, this.fullFrame1);\n        this.bindAndDraw(this.fullFrame1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Audio Data from Cache in Phaser 3\nDESCRIPTION: Method to retrieve loaded audio data from the audio cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.audio;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Accessing the Shape Game Object from Masks in Phaser 3\nDESCRIPTION: Retrieves the original shape game object used to create a mask. Different properties are used depending on whether it's a bitmap or geometry mask.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mask.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar shape = mask.bitmapMask;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar shape = mask.geometryMask;\n```\n\n----------------------------------------\n\nTITLE: Importing UI Plugin in Game Configuration\nDESCRIPTION: Code showing how to import and configure the UI Plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring File Drop Zone in Phaser 3\nDESCRIPTION: Sets up a file drop zone with optional configuration including style, drop enable flag, and file filters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filedropzone.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileDropZone = scene.add.rexFileDropZone({\n    // style: { },\n    \n    // dropEnable: true,\n    // filters: { filterType: (file, files) => boolean }\n});\n// var fileDropZone = scene.add.rexFileDropZone(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Options from SimpleDropDownList\nDESCRIPTION: Retrieves the current options array from a SimpleDropDownList instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = dropDownList.options;\n```\n\n----------------------------------------\n\nTITLE: Handling Window Focus Event in Phaser\nDESCRIPTION: Registers an event handler for when the browser window containing the game receives focus.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ngame.events.on('focus', function() {})\n```\n\n----------------------------------------\n\nTITLE: Extending LineProgress Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom LineProgress class by extending the base component. This allows for adding custom functionality to linear progress bars.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLineProgress extends RexPlugins.UI.LinerProgress {\n    constructor(scene, x, y, width, height, barColor, value, config) {\n        super(scene, x, y, width, height, barColor, value, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting and Parsing Text Values in JavaScript\nDESCRIPTION: Methods for getting the value from the text input, with optional parsing through a custom callback function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = txt.getValue();\n// var value = txt.value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setParseTextCallback(callback);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(text) {\n    return text;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting World to Local Point in Phaser 3\nDESCRIPTION: Demonstrates how to convert a world point to a local point relative to the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = gameObject.getLocalPoint(x, y);  // point : {x, y}\n// var out = gameObject.getLocalPoint(x, y, out);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = gameObject.getLocalPoint(x, y, out, camera);\n```\n\n----------------------------------------\n\nTITLE: Stopping Transition Animation in Phaser 3\nDESCRIPTION: Completely stops the current transition animation and fires the 'complete' event. This is different from pausing as it finalizes the transition.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimage.stop();\n```\n\n----------------------------------------\n\nTITLE: Handling Fullscreen Unsupported Event in Phaser 3\nDESCRIPTION: Shows how to listen for the 'fullscreenunsupported' event, which fires when the browser doesn't support fullscreen mode or the request is denied.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fullscreen.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scale.on('fullscreenunsupported', function() {});\n```\n\n----------------------------------------\n\nTITLE: Extending CircularProgressCanvas Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom CircularProgressCanvas class by extending the base component. This allows for adding custom functionality to canvas-based circular progress bars.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCircularProgress extends RexPlugins.UI.CircularProgressCanvas {\n    constructor(scene, x, y, radius, barColor, value, config) {\n        super(scene, x, y, radius, barColor, value, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Text Color in Phaser 3\nDESCRIPTION: Shows how to get and set the text color for a Phaser 3 Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = txt.style.color;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setColor(color);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setFill(color);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sleep Properties in Matter.js\nDESCRIPTION: Configuration and event handling for physics body sleep states\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n        physics: {\n            matter: {\n                // ...\n                enableSleeping: true\n                // ...\n            }\n        }\n\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setSleepThreshold(value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.world.on('sleepstart', function (event, body) {\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.world.on('sleepend', function (event, body) {\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Expressions Directly\nDESCRIPTION: Shows how to execute expressions in a single step, either from an expression string or from a previously compiled function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = parser.exec(expressionString, context);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = parser.exec(f, context);\n```\n\n----------------------------------------\n\nTITLE: Running a Confirm Action Dialog with Loaded Plugin\nDESCRIPTION: Code for creating a confirm action dialog using the loaded Rex UI plugin. The dialog will be destroyed after any button is clicked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmaction.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = scene.rexUI.confirmAction(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Joining the Online User List\nDESCRIPTION: JavaScript code showing how to join an online user list with promise handling for success and error cases.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.join()\n// .then(function() { })\n// .catch(function() { })\n```\n\n----------------------------------------\n\nTITLE: Getting Bob Object Position in Phaser 3\nDESCRIPTION: Retrieves the current X and Y coordinates of a Bob object. These properties determine where the Bob will be rendered within the game world.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = bob.x;\nvar y = bob.y;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shine Effect in Phaser 3\nDESCRIPTION: Creates a shine effect with adjustable speed, line width, gradient, and reveal parameters. Applicable to both game objects and cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addShine(speed, lineWidth, gradient, reveal);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addShine(speed, lineWidth, gradient, reveal);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addShine(speed, lineWidth, gradient, reveal);\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Script in Phaser 3 CSV Scenario\nDESCRIPTION: Demonstrates how to load a CSV script into the CSV Scenario instance with various options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvscenario.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscenario.load(csvString, scope, {\n    // timeUnit: 0,        // 'ms'|0|'s'|'sec'|1\n    // prefix: /^#([a-zA-Z]+)/\n    // argsConvert: true,\n    // argsConvertScope: undefined,\n    // delimiter: ',',\n    // translateCommandNameCallback: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Changing Rope Orientation in Phaser 3\nDESCRIPTION: Converts a rope between horizontal and vertical orientations. These methods only take effect if the rope is not already in the target orientation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrope.setHorizontal(points);\n// rope.setHorizontal(points, colors, alphas);\n```\n\n----------------------------------------\n\nTITLE: Getting Game Time in Phaser\nDESCRIPTION: Retrieves the current game time, which represents when the current game step started.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar time = game.getTime();\n// var time = scene.game.getTime();\n```\n\n----------------------------------------\n\nTITLE: Setting Iteration Value of Round Rectangle\nDESCRIPTION: Sets the iteration value for corner interpolation using either the setIteration method or direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nrect.setIteration(value);\n```\n\n----------------------------------------\n\nTITLE: Managing User List\nDESCRIPTION: Retrieves and checks information about users in the room including the full user list, first user check, room capacity, and current user status.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = room.getUsers();\nvar isFirstUser = room.isFirstUser(userID);\n// var isFirstUser = room.isFirstUser();  // Current user is first user\nvar isFull = room.isFull();\nvar maxUsers = room.maxUsers;\nvar isInRoom = room.isInRoom();\n```\n\n----------------------------------------\n\nTITLE: Applying Color Replace Effect to Camera in Phaser 3\nDESCRIPTION: Demonstrates applying the color replace effect to a camera using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-colorreplace.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexcolorreplacepipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Managing Folder Expanded State\nDESCRIPTION: Shows how to directly set or retrieve the expanded state of a folder without triggering animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.setExpandedState(expanded);  // true, or false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar expanded = folder.expanded;\n```\n\n----------------------------------------\n\nTITLE: Working with Fixed Size Text in Phaser 3\nDESCRIPTION: Code for retrieving and setting fixed dimensions for text objects. Constrains the text to specific width and height values rather than automatically sizing to content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = txt.style.fixedWidth;\nvar height = txt.style.fixedHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setFixedSize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Creating Step Instance with Configuration\nDESCRIPTION: Shows how to create a Step instance with configuration options, including enable status and step length.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/step.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar step = scene.plugins.get('rexStep').add(gameObject, {\n    // enable: true,\n    // stepLength: 5,    \n});\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Game Object in Phaser 3\nDESCRIPTION: Creates a bitmap mask using an existing game object. The game object should be created first (image, sprite, bitmap text, particles, text, or shader) and then converted to a mask.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mask.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar shape = scene.add.image(x, y, key).setVisible(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = shape.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Shapes Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the custom shapes plugin in the global plugins configuration of a Phaser 3 game, then add a custom shapes object to a scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport CustomShapesPlugin from 'phaser3-rex-plugins/plugins/customshapes-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCustomShapesPlugin',\n            plugin: CustomShapesPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar customShapes = scene.add.rexCustomShapes(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Checkbox Checked State\nDESCRIPTION: Retrieves the current checked state of a checkbox component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar checked = checkbox.checked;\n// var checked = checkbox.value;\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements by Name in Phaser3\nDESCRIPTION: Methods for retrieving tree elements by name with optional recursive search functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = trees.getElement('#' + name);\n// var gameObject = trees.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = trees.getByName(name);\n// var gameObject = trees.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Creating TextAreaInput Instance in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an instance of a custom TextAreaInput class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar textAreaInput = new MyTextAreaInput(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Clearing All Death Zones from Particle Emitter in JavaScript\nDESCRIPTION: Removes all death zones from the particle emitter. This can be done using the clearDeathZones method or by directly emptying the deathZones array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.clearDeathZones();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.deathZones.length = 0;\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Keys Hub\nDESCRIPTION: These snippets show how to handle various events in Keys Hub, including key plugging/unplugging and key definition events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyshub.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHub.on('plug', function(key, keyObject) {\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHub.on('unplug', function(key, keyObject) {\n    \n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHub.on('definekey.start', function(key) {\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHub.on('definekey.complete', function(key, keyObject) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Number Input from Buttons in Phaser 3 Tweaker\nDESCRIPTION: Creates a button group for selecting numeric values. The component binds to a numeric property of an object and provides multiple buttons representing different values that can be selected.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput(object, key, {\n    view: 'buttons',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    options: [\n        {text: text0, value: value0},\n        {text: text1, value: value1},\n        // ...\n    ],\n\n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating FSM Instance Directly\nDESCRIPTION: Shows how to create an FSM instance directly using the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar states = new FSM(config);\n```\n\n----------------------------------------\n\nTITLE: Applying Dissolve PostFx to Camera Directly in Phaser 3\nDESCRIPTION: Applies the dissolve post processing effect directly to a camera using the setPostPipeline method. This is used after importing the effect class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(DissolvePostFx);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Documents from Firestore Collection\nDESCRIPTION: Fetches all documents from a Firestore collection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).get()\n    .then(function(querySnapshot) { /* ... */ })\n    .catch(function(error){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Setting Up Real-time Document Updates in Firestore\nDESCRIPTION: Creates a listener for real-time updates to a specific document, returning an unsubscribe function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar unsubscribe = db.collection(collectionName).doc(docName)\n    .onSnapshot(function(doc) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Event Handling Setup\nDESCRIPTION: Examples of setting up event handlers for click-outside, enable, and disable events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clickoutside.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclickOutside.on('clickoutside', function (clickoutside, gameObject, pointer) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Importing Polar Coordinate Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to import and configure the polar coordinate plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/polar-coordinate.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport PolarCoordinatePlugin from 'phaser3-rex-plugins/plugins/polarcoordinate-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPolarCoordinate',\n            plugin: PolarCoordinatePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Child Index in Sizer in Phaser 3\nDESCRIPTION: Shows how to get the index of a specific child within the sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar index = sizer.getChildIndex(child);\n```\n\n----------------------------------------\n\nTITLE: Rotating Game Object Towards Position with Shortest Angle\nDESCRIPTION: Rotates a game object towards a specific x,y position using the shortest angle path.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.rotateTowardsPosition(x, y);\n```\n\n----------------------------------------\n\nTITLE: Setting Shape Alpha Value in Phaser3\nDESCRIPTION: Sets the alpha (transparency) value of a shape object using either the setAlpha method or direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nshape.setAlpha(alpha);\n// shape.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Filtering Game Objects in a Group by Property in Phaser 3\nDESCRIPTION: Retrieves an array of game objects from the group that match a specific property value, with optional start and end indices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObjects = group.getMatching(property, value);\n// var gameObjects = group.getMatching(property, value, startIndex, endIndex);\n```\n\n----------------------------------------\n\nTITLE: Applying Pre-FX Pipeline to Game Object in Phaser 3\nDESCRIPTION: This snippet demonstrates how to apply a pre-fx pipeline instance to a game object, replacing the current effect instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/prefx-pipeline.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPipeline(pipelineInstance);\n```\n\n----------------------------------------\n\nTITLE: Adding Messages Object to Phaser 3 Scene\nDESCRIPTION: Creates a messages object using the Firebase plugin in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar messages = scene.plugins.get('rexfirebaseplugin').add.messages(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Transition Complete Callback in Phaser 3\nDESCRIPTION: Defines a callback function that will be executed when a transition completes. The callback receives the parent container, current image, next image, and the progress value (always 1 at completion).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTransitionCompleteCallback(onComplete, onCompleteScope)\n```\n\n----------------------------------------\n\nTITLE: Loading Kawase-blur Pipeline Plugin in Phaser 3\nDESCRIPTION: Demonstrates how to load the Kawase-blur pipeline plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-kawaseblur.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexkawaseblurpipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexkawaseblurpipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Adding Video from Cache in Phaser 3\nDESCRIPTION: Creates a Video Game Object that references a video from the Video Cache using its key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar video = scene.add.video(x, y, key);\n```\n\n----------------------------------------\n\nTITLE: Adding Mouse Wheel Scroller Object - Plugin Method\nDESCRIPTION: Creates a mouse wheel scroller object instance using the plugin method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheelscroller.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar scroller = scene.plugins.get('rexmousewheelscrollerplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Initializing Random Data Generator in Phaser3\nDESCRIPTION: Different ways to create and initialize a random data generator instance in Phaser 3, including using the pre-defined generator or creating a new one with a seed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/random-data-generator.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar rnd = Phaser.Math.RND;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar rnd = new Phaser.Math.RandomDataGenerator(seed);\n```\n\n----------------------------------------\n\nTITLE: Callback function for List iteration in Phaser 3\nDESCRIPTION: Example of a callback function that gets called for each child when using each() or iterate() methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(child, arg0, arg1, ...) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Vector2 Length in Phaser 3\nDESCRIPTION: Ensures the Vector2 length does not exceed the specified maximum value, scaling it down if necessary while preserving direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvector.limit(value);\n```\n\n----------------------------------------\n\nTITLE: Shuffling Array in Phaser 3 JavaScript\nDESCRIPTION: Illustrates how to shuffle an array in place using Phaser.Utils.Array.Shuffle(). This method randomizes the order of elements in the given array and returns the shuffled array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-random.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = Phaser.Utils.Array.Shuffle(arr);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element by Name in Phaser3 Scrollable Panel (Method 1)\nDESCRIPTION: Gets a game object by its name using the getElement method with a '#' prefix. Optional recursive parameter to search through all children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = panel.getElement('#' + name);\n// var gameObject = panel.getElement('#' + name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Adding Texture Atlas Using Existing Texture in Phaser 3\nDESCRIPTION: Adds a texture atlas to the texture cache using an existing Phaser texture instead of an HTML image element. The atlas data defines the frames within the texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.addAtlas(undefined, texture, data);\n// scene.textures.addAtlas(undefined, texture, data, dataSource);\n```\n\n----------------------------------------\n\nTITLE: Manipulating ScrollBar Value in JavaScript\nDESCRIPTION: Methods to get, set, and increment the value of the ScrollBar, which affects the position of the slider thumb and width of the indicator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = scrollBar.getValue(min, max); // value : min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = scrollBar.getValue(); // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = scrollBar.value; // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.setValue(value, min, max); // value: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.setValue(value); // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.value = value; // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.addValue(inc, min, max); // inc: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.addValue(inc); // inc: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.value += inc; // inc: 0 ~ 1\n```\n\n----------------------------------------\n\nTITLE: Managing Real-Time Timers State\nDESCRIPTION: Shows how to get and set the state of the Real-Time Timers instance using JSON.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar states = realtimetimers.toJSON();\nvar s = JSON.stringify(realtimetimers);\nrealtimetimers.resetFromJSON(states)\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Press Start Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for press-start gestures on any tile in the board. The callback receives the press behavior object and the tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('tilepressstart', function(press, tileXY) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Anchor Configuration\nDESCRIPTION: Method to reset the anchor configuration with new parameters including position, size, and viewport callback settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/anchor.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nanchor.resetFromJSON({\n    // left: '0%+0',\n    // right: '0%+0',\n    // centerX: '0%+0',\n    // x: '0%+0',\n\n    // top: '0%+0',\n    // bottom: '0%+0',\n    // centerY: '0%+0',\n    // y: '0%+0',\n\n    // width: '100%+0',\n    // height: '100%+0',    \n\n    // onUpdateViewportCallback: function(viewport, gameObject, anchor) {}\n    // onUpdateViewportCallbackScope: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Easing Sprite Properties by Name\nDESCRIPTION: Animates sprite properties using easing functions for a named sprite.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_8\n\nLANGUAGE: phaser\nCODE:\n```\nNAME.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: Configures and initializes the Firebase application with required authentication and connection details.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Text Typing Instance with Configuration\nDESCRIPTION: Shows how to create a text typing instance with various configuration options including wrap, speed, and typing mode\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttyping.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar typing = scene.plugins.get('rexTextTyping').add(textGameObject, {\n    // wrap: false,\n    // speed: 333,       // typing speed in ms\n    // typeMode: 0,      //0|'left-to-right'|1|'right-to-left'|2|'middle-to-sides'|3|'sides-to-middle'\n    // setTextCallback: function(text, isLastChar, insertIdx){ return text; }  // callback before set-text\n    // setTextCallbackScope: null,   \n});\n```\n\n----------------------------------------\n\nTITLE: Setting Test String for Text Measurement in Phaser 3\nDESCRIPTION: Sets a test string used when measuring font metrics. Useful for consistent text measurements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setTestString(text);\n```\n\n----------------------------------------\n\nTITLE: Using Modal Dialog with Promise in JavaScript\nDESCRIPTION: Shows how to use the modal Dialog with a Promise for handling the dialog closure.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndialog\n    .modalPromise(config)\n    .then(function(data){\n        \n    })\n```\n\n----------------------------------------\n\nTITLE: Clearing RenderTexture Content in Phaser 3\nDESCRIPTION: Clears the entire render texture or a specific rectangular area, removing all drawn content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrt.clear();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrt.clear(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Setting X Velocity for Group Objects in Phaser 3\nDESCRIPTION: Sets the X velocity for all objects in a group. The 'step' parameter allows for incremental velocity changes across the group members.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setVelocityX(value, step);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Typing Speed\nDESCRIPTION: Changes the typing speed for any future typing animations. The speed parameter specifies the delay between characters in milliseconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.setTypingSpeed(speed);\n```\n\n----------------------------------------\n\nTITLE: Adding Value Change Event Listener in Phaser 3 Round Rectangle Progress\nDESCRIPTION: Code snippet for adding an event listener for value changes in a round rectangle progress bar in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nroundRectangleProgress.on('valuechange', function(newValue, oldValue, roundRectangleProgress){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Listening for Specific Texture Added Event in Phaser 3\nDESCRIPTION: Sets up an event listener for when a specific texture is added to the texture cache. This event is specific to a particular texture key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.on('addtexture-' + key, function() {\n    \n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Predicted Results in Phaser 3 Interception\nDESCRIPTION: Demonstrates how to access the predicted position and angle from the Interception behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interception.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Predicted position\nvar position = interception.predictedPosition; // {x, y}\n\n// Angle to predicted position\nvar rotation = interception.predictedAngle; // Angle in radian\n```\n\n----------------------------------------\n\nTITLE: Importing Rex UI Plugin via NPM\nDESCRIPTION: Configures the Rex UI plugin through game configuration after installing via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-badgelabel.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar badgeLabel = scene.rexUI.add.badgeLabel(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Size Directly\nDESCRIPTION: Sets the width and height of the toggle-switch directly through properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.width = width;\ntoggleSwitch.height = height;\n```\n\n----------------------------------------\n\nTITLE: Offsetting a Triangle Position in Phaser 3\nDESCRIPTION: Moves the triangle by the specified delta x and y values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Triangle.Offset(triangle, dx, dy); // triangle.x += dx, triangle.y += dy\n```\n\n----------------------------------------\n\nTITLE: Manipulating FishEye Center Position\nDESCRIPTION: Gets or sets the center position of the FishEye effect, which determines the focal point of the distortion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = pipelineInstance.centerX;\nvar y = pipelineInstance.centerY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.centerX = x;\npipelineInstance.centerY = y;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setCenter(x, y);\n// pipelineInstance.setCenter();   // set to center of window\n```\n\n----------------------------------------\n\nTITLE: Creating NinePatch2 with Simplified Parameters\nDESCRIPTION: Creates a NinePatch2 instance with simplified parameters, where baseFrame is omitted. This is useful when using the default base frame naming convention.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch2(x, y, width, height, key, columns, rows, {\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    baseFrame: undefined,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Skew Values (JavaScript)\nDESCRIPTION: Shows various methods to set skew values for a ContainerSkew instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-skew.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setSkewX(skewXRad);\nimage.setSkewXDeg(skewXDeg);\n\nimage.setSkewY(skewXRad);\nimage.setSkewYDeg(skewXDeg);\n\nimage.setSkew(skewXRad, skewYRad);\nimage.setSkewDeg(skewXDeg, skewYDeg);\n\nimage.skewX = skewXRad;\nimage.skewXDeg = skewXDeg;\n\nimage.skewY = skewYRad;\nimage.skewYDeg = skewYDeg;\n```\n\n----------------------------------------\n\nTITLE: Getting Polygon Type in Phaser 3\nDESCRIPTION: Retrieves the numerical type identifier for the polygon geometry (which is 4).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar type = polygon.type; // 4\n```\n\n----------------------------------------\n\nTITLE: Accessing and Manipulating Zone Source in JavaScript\nDESCRIPTION: Shows how to access, update, and change the source of an emit zone. For edge-type zones, updateSource refreshes the points and changeSource sets a new curve source.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// var zone = emitter.emitZones[i];\nvar source = zone.source;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nzone.updateSource();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nzone.changeSource(curve);\n```\n\n----------------------------------------\n\nTITLE: Creating ToggleSwitch Instance from Class\nDESCRIPTION: Creates a toggle-switch input instance from the imported class and adds it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar toggleswitch = new ToggleSwitch(scene, x, y, width, height, color, config);\nscene.add.existing(toggleSwitch);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Frequency Properties\nDESCRIPTION: Code to get and set the horizontal and vertical frequency properties of the warp effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar frequencyX = pipelineInstance.frequencyX;\nvar frequencyY = pipelineInstance.frequencyY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.frequencyX = frequencyX;\npipelineInstance.frequencyY = frequencyY;\n// pipelineInstance.frequencyX += value;\n// pipelineInstance.frequencyY += value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setFrequencyX(frequencyX);\npipelineInstance.setFrequencyY(frequencyY);\npipelineInstance.setFrequency(frequencyX, frequencyY);\n```\n\n----------------------------------------\n\nTITLE: Creating Interception Instance in Phaser 3\nDESCRIPTION: Creates an instance of the Interception behavior with optional configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interception.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar interception = scene.plugins.get('rexInterception').add(gameObject, {\n    // target: undefined,\n    // enable: true\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Color Replace Effect in Phaser 3\nDESCRIPTION: Demonstrates how to remove the color replace effect from a game object or camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-colorreplace.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexColorReplacePipeline').remove(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexColorReplacePipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Setting Transition Callbacks for Folder UI Component in JavaScript\nDESCRIPTION: Demonstrates how to set expand and collapse callbacks for a folder UI component. The callbacks receive the game object and duration as parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.setExpandCallback(callback);\nfolder.setCollapseCallback(callback);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(gameObject, duration) {\n}\n```\n\n----------------------------------------\n\nTITLE: Tree State Change Event Handlers\nDESCRIPTION: Event listeners for tree expand and collapse state changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on('expand.start', function(tree){\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on('expand.complete', function(tree){\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on('collapse.start', function(tree){\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrees.on('collapse.complete', function(tree){\n\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Angle of Game Objects in Phaser3\nDESCRIPTION: Sets the angle of game objects in radians, with optional step, index, and direction parameters for creating rotational patterns.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.Angle(gameObjects, value, step, index, direction);\n// value: angle in radians\n```\n\n----------------------------------------\n\nTITLE: Importing Inverse PostFx Class in Phaser 3\nDESCRIPTION: Imports the Inverse PostFx class and adds it to the game configuration in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport InversePostFx from 'phaser3-rex-plugins/plugins/inversepipeline.js';\nvar config = {\n    // ...\n    pipeline: [InversePostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Polygon Shape Configuration for Matter.js Physics\nDESCRIPTION: Configuration object for creating a regular polygon physics body. Parameters control the radius and number of sides.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'polygon',\n    // radius: (Math.max(gameObject.width, gameObject.height) / 2),\n    // sides: 5,\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Slider Value in JavaScript\nDESCRIPTION: Methods to increase the value of the slider by a specified increment. The increment can be in the range of min to max, or normalized between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-slider.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nslider.addValue(inc, min, max); // inc: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.addValue(inc); // inc: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.value += inc; // inc: 0 ~ 1\n```\n\n----------------------------------------\n\nTITLE: Setting Style Properties for Tag Text\nDESCRIPTION: Methods to set various style properties of a Tag Text object, including font family, size, and style.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setStyle(style);\ntxt.setFont(font);  // font: {fontFamily, fontSize, fontStyle}\ntxt.setFontFamily(family);\ntxt.setFontSize(size);\ntxt.setFontStyle(style);\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Counting Active Group Members in Phaser 3\nDESCRIPTION: An alternative method to count the number of active group members using getTotalUsed().\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nvar activeCount = group.getTotalUsed();\n```\n\n----------------------------------------\n\nTITLE: File Loading to Cache\nDESCRIPTION: Methods for loading files to the cache system, with both callback and Promise-based approaches.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfileChooser.loadFile(file, loaderType, key);\n// fileChooser.loadFile(file, loaderType, key, cahceType);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfileChooser.loadFilePromise(file, loaderType, key, cahceType)\n    .then(function(content) {\n\n    })\n```\n\n----------------------------------------\n\nTITLE: Accessing Background Element in TextArea\nDESCRIPTION: Demonstrates how to get a reference to the background game object of the TextArea component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = textArea.getElement('background');\n```\n\n----------------------------------------\n\nTITLE: Seeking to Specific Time in Clock for Phaser 3\nDESCRIPTION: Sets the clock to a specific elapsed time in milliseconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclock.seek(time);   // elapsed time in ms\n```\n\n----------------------------------------\n\nTITLE: Setting Up Real-time Query Updates in Firestore\nDESCRIPTION: Creates a listener for real-time updates to documents matching a query, returning an unsubscribe function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar unsubscribe = db.collection(collectionName).where(key, op, value)\n    .onSnapshot(function(querySnapshot) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Importing Circular Progress Plugin in Game Configuration\nDESCRIPTION: Code to import and configure the circular progress plugin in the game configuration, enabling global access to the plugin throughout the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport CircularProgressPlugin from 'phaser3-rex-plugins/plugins/circularprogress-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCircularProgressPlugin',\n            plugin: CircularProgressPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Copying Frame Between Render Targets\nDESCRIPTION: Method to copy a frame from one render target to another, with optional brightness adjustment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.copyFrame(source, target);\n// pipelineInstance.copyFrame(source, target, brightness, clear, clearAlpha);\n```\n\n----------------------------------------\n\nTITLE: Transforming Perspective Image Vertices\nDESCRIPTION: Applies offset and rotation transformations to all vertices of the perspective image.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimage.transformVerts(x, y, z, rotateX, rotateY, rotateZ);\n```\n\n----------------------------------------\n\nTITLE: Toggling Swipe Enable Status\nDESCRIPTION: Shows how to toggle the enable status of a swipe instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nswipe.toggleEnable();\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Shape Properties in Phaser 3\nDESCRIPTION: Demonstrates how to get and set various properties of shapes including style, visibility, and custom data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar fillColor = shape.fillColor;\nvar fillAlpha = shape.fillAlpha;\nvar lineWidth = shape.lineWidth;\nvar strokeColor = shape.strokeColor;\nvar strokeAlpha = shape.strokeAlpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.fillStyle(color, alpha);\nshape.lineStyle(lineWidth, color, alpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.fillStyle().lineStyle();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar visible = shape.visible;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.setVisible(visible);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = shape.getData(key);\n// var data = shape.getData(key, defaultValue);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.setData(key, value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.setData({key:value, ...});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.incData(key, incValue);\n// shape.incData(key, incValue, defaultValue);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.mulData(key, mulValue);\n// shape.mulData(key, mulValue, defaultValue);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.clearData();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = shape.name;\n```\n\n----------------------------------------\n\nTITLE: Getting Pixelation Effect Instances\nDESCRIPTION: Retrieving the pixelation effect instances from game objects or cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-pixelation.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexPixelationPipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexPixelationPipeline').get(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexPixelationPipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexPixelationPipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Resetting Display Content in Phaser 3 UI Label\nDESCRIPTION: Shows how to reset the display content of the label, including title, text, icon, and action elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.resetDisplayContent({\n    title: '',\n    text: '',\n\n    icon: undefined, \n    iconFrame: undefined,\n    iconSize: undefined,\n\n    action: undefined, \n    actionFrame: undefined,\n    actionSize: undefined,\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.resetDisplayContent(text);\n```\n\n----------------------------------------\n\nTITLE: Getting Normalized Canvas Width\nDESCRIPTION: Method that returns the normalized canvas width for the model. The width is normalized by dividing the raw canvas width by the pixels per unit value from the canvas info.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\npublic getCanvasWidth(): number {\n  if (this._model == null) {\n    return 0.0;\n  }\n  return (\n    this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Friction in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the friction of an immovable physics body. This determines how much of the body's movement is transferred to other bodies riding on it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setFriction(x, y);\n```\n\n----------------------------------------\n\nTITLE: Managing Current Face in Perspective Carousel\nDESCRIPTION: Code to get and set the current face (face at angle 0) in a perspective carousel using getter/setter methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar face = carousel.face;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.setFace(face)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Dialog Class in JavaScript\nDESCRIPTION: Creates a custom Dialog class extending the RexPlugins.UI.Dialog, allowing for additional customization and functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyDialog extends RexPlugins.UI.Dialog {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Frame Manager Class in Phaser 3 (JavaScript)\nDESCRIPTION: Imports the Frame Manager class and creates a new instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/framemanager.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport FrameManager from 'phaser3-rex-plugins/plugins/framemanager.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar frameManager = new FrameManager(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotation for Eight Direction Movement\nDESCRIPTION: Enable or disable rotation towards the moving direction for the Eight Direction behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eightdirection.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neightDirection.setRotateToDirection(rotateToDirection);\n```\n\n----------------------------------------\n\nTITLE: Configuring Youtube Player Plugin in Phaser 3 Game Config\nDESCRIPTION: Configuration setup to import and register the Youtube Player plugin in the global plugins section of a Phaser 3 game config.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport YoutubePlayerPlugin from 'phaser3-rex-plugins/plugins/youtubeplayer-plugin.js';\nvar config = {\n    parent: divId,\n    // fullscreenTarget: divId, // For fullscreen\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    },\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexYoutubePlayer',\n            plugin: YoutubePlayerPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Post-FX Pipeline to Camera\nDESCRIPTION: Demonstrates how to add a post-processing pipeline to a camera instance using setPostPipeline method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-shader-effect.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(PostFxClass);\n```\n\n----------------------------------------\n\nTITLE: Clearing All Effects\nDESCRIPTION: Removes all effects from a game object or camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.preFX.clear();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.postFX.clear();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postFX.clear();\n```\n\n----------------------------------------\n\nTITLE: Managing Video Looping in Phaser 3\nDESCRIPTION: Methods to get and set whether the video should loop after reaching its end.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar loop = video.getLoop();  // loop: true/false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.setLoop(loop);  // loop: true/false\n```\n\n----------------------------------------\n\nTITLE: Setting Direction Mode for Eight Direction Movement\nDESCRIPTION: Set the direction mode for the Eight Direction behavior, determining which cursor keys are accepted for movement.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eightdirection.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\neightDirection.setDirMode(dir);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Swipe Enable Status\nDESCRIPTION: Shows how to get, set, and toggle the enable status of a swipe instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = swipe.enable;  // enable: true, or false\n```\n\n----------------------------------------\n\nTITLE: Spinning Game Objects with Rotate Input\nDESCRIPTION: Shows how to use the spinObject method to rotate game objects around the center of two dragging pointers.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrotate.spinObject(gameObejects);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Expressions for Event Sheets\nDESCRIPTION: Shows how to add custom expressions that can be used within event sheets to extend functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.addExpression(name, callback);\n```\n\n----------------------------------------\n\nTITLE: Shattering an Image with Custom Parameters\nDESCRIPTION: Demonstrates how to shatter an image with additional configuration options for controlling the shatter pattern.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimage.shatter(centerX, centerY, {\n    // ringRadiusList:\n    // samplesPerRing: \n    // variation\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Top-Bottom Alpha Gradient for Rope in Phaser 3\nDESCRIPTION: Creates a gradient alpha effect from top to bottom of the rope by specifying different alpha values for the top and bottom vertices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrope.setAlphas(topAlpha, bottomAlpha);\n```\n\n----------------------------------------\n\nTITLE: Default Transform Callback for Viewport Coordinate in Phaser 3\nDESCRIPTION: Shows the default transform callback used by the Viewport Coordinate plugin to update game object position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/viewport-coordinate.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(vpx, vpy, vpxOffset, vpyOffset, viewport, out) {\n    gameObject.x = viewport.x + (viewport.width * vpx) + vpxOffset;\n    gameObject.y = viewport.y + (viewport.height * vpy) + vpyOffset;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Value Directly\nDESCRIPTION: Sets the value of the toggle-switch directly through the value property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.value = value;\n```\n\n----------------------------------------\n\nTITLE: Disabling All Effects\nDESCRIPTION: Disables all effects on a game object or camera, with optional removal of effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.preFX.disable();\n// gameObject.preFX.disable(true);  // Also remove all effects\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.postFX.disable();\n// gameObject.postFX.disable(true);  // Also remove all effects\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postFX.disable();\n// camera.postFX.disable(true);  // Also remove all effects\n```\n\n----------------------------------------\n\nTITLE: Unregistering Pre-FX Pipeline in Phaser 3\nDESCRIPTION: This snippet shows how to unregister a pre-fx pipeline from the pipeline manager in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/prefx-pipeline.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineManager = scene.sys.renderer.pipelines;\npipelineManager.remove(PreFxName);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Left-Toolbar Buttons in Dialog - JavaScript\nDESCRIPTION: Multiple ways to access left-toolbar buttons in a dialog. Allows retrieving all left-toolbar buttons or a specific button by index.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = dialog.getElement('leftToolbar');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = dialog.getLeftToolbar(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = dialog.getElement('leftToolbar[' + index + ']');\n```\n\n----------------------------------------\n\nTITLE: Smoother Step Interpolation in Phaser 3\nDESCRIPTION: Performs an enhanced smooth step interpolation between min and max values based on parameter t (0-1). This creates an even smoother transition than SmoothStep.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interpolation.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.Interpolation.SmootherStep(t, min, max);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Parser Class with Methods\nDESCRIPTION: Shows how to extend the Expression Parser class to include custom methods for expressions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyParser extends ExpressionParser {\n    randomInt(a, b) {\n        return Math.floor(Math.random()*(b-a)+a); \n    }\n}\nvar parser = new MyParser();\n// var value = parser.exec('randomInt(a, b)', {a:10, b:20});\n```\n\n----------------------------------------\n\nTITLE: Enabling Damping in Phaser 3 Arcade Physics\nDESCRIPTION: Enables damping on a physics body. Damping is a more realistic form of drag that scales with velocity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setDamping(value);\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Canvas in Phaser 3\nDESCRIPTION: Method to create a bitmap mask from the Canvas in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = canvas.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Setting Acceleration for Ship\nDESCRIPTION: Method to set the acceleration rate of the ship after creation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nship.setAcceleration(acc);\n```\n\n----------------------------------------\n\nTITLE: Configuring Game for DOM Elements in Phaser 3\nDESCRIPTION: Basic configuration required to enable DOM elements in a Phaser 3 game. This setup is necessary before using the file selector button component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    parent: divId,\n    // fullscreenTarget: divId, // For fullscreen\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    },\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Timeline Event Handling\nDESCRIPTION: Event listener setup for timeline completion events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timeline.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntimeline.on('complete', function(){\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using XOR Encryption with Imported Plugin\nDESCRIPTION: Demonstrates how to encrypt and decrypt data using the imported plugin configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/xor.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar encResult = scene.plugins.get('rexXOR').Encrypt(src, pwd);\nvar decResult = scene.plugins.get('rexXOR').Decrypt(encResult, pwd);\n```\n\n----------------------------------------\n\nTITLE: NPM Installation Command\nDESCRIPTION: Command to install Rex plugins via npm\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletitlelabel.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Negating a Vector2 in Phaser 3\nDESCRIPTION: Inverts both x and y components of the Vector2, effectively rotating it by 180 degrees.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvector.negate();\n```\n\n----------------------------------------\n\nTITLE: Handling TCRP Player Events\nDESCRIPTION: Demonstrates how to handle completion and command execution events from the TCRP player.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('complete', function(player){});\n```\n\n----------------------------------------\n\nTITLE: Loading Text Typing Plugin in Phaser 3\nDESCRIPTION: Loads the minified plugin file in the preload stage and adds typing behavior to a text object\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttyping.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextexttypingplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextexttypingplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar typing = scene.plugins.get('rextexttypingplugin').add(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Managing Message History in JavaScript\nDESCRIPTION: Demonstrates how to retrieve and clear the history of received messages. This is useful for maintaining a log of communications.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-broadcast.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar messages = messager.getHistory();\n\nmessager.clearHistory();\n```\n\n----------------------------------------\n\nTITLE: Setting User Information and Joining Room\nDESCRIPTION: Sets the user ID and name, then joins the chat room with those credentials.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nroom.setUser(userID, userName);\nroom.joinRoom();\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas from JSON in Phaser 3\nDESCRIPTION: Creates a Canvas instance from a JSON configuration in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = scene.make.rexCanvas({\n    x: 0,\n    y: 0,\n    width: 256,\n    height: 256,\n    // resolution: 1,\n\n    // origin: {x: 0.5, y: 0.5},\n    // fill: null,\n    \n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'quest' Event in Quest Task (JavaScript)\nDESCRIPTION: Shows how to listen for the 'quest' event fired when calling quest.getNextQuestion(). The event provides the question object, question manager, and quest task.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nquest.on('quest', function(question, questionManager, quest){\n    // questionManager.getNextQuestion();\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin via Minified File\nDESCRIPTION: Demonstrates how to load the circular progress plugin using its minified version in the preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcircularprogresscanvasplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcircularprogresscanvasplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Listening for Texture Error Event in Phaser 3\nDESCRIPTION: Sets up an event listener for when an error occurs while adding a texture. The event handler receives the key of the texture that failed to load.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.on('onerror', function(key) {\n    \n})\n```\n\n----------------------------------------\n\nTITLE: Picking Items from Gashapon in Phaser 3\nDESCRIPTION: Demonstrates various methods to pick items from a Gashapon instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar item = gashapon.next();\nvar item = gashapon.next(name);\nvar item = gashapon.result;\n```\n\n----------------------------------------\n\nTITLE: Creating Static Sprite with Arcade Physics in Phaser 3\nDESCRIPTION: Creates a static physics sprite object that extends from the Sprite object class. Static sprites won't move when forces are applied to them.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.physics.add.staticSprite(x, y, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Creating Firebase Item Table Instance with Configuration\nDESCRIPTION: JavaScript code to create a Firebase item table with specific root path and dimension type (1D, 2D, or 3D).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = scene.plugins.get('rexFirebase').add.itemTable({\n    root: '',\n    type: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if a Game Object is in a Group in Phaser 3\nDESCRIPTION: Returns a boolean indicating whether a specific game object is a member of the group.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInGroup = group.contains(child);\n```\n\n----------------------------------------\n\nTITLE: Reading Data from LocalForage using Promise\nDESCRIPTION: Shows how to read data from LocalForage using the Promise-based approach. The getItem method returns a Promise that resolves with the retrieved value or rejects with an error.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlocalforage.getItem(key)\n    .then(function(value){ /* ... */ })\n    .catch(function(err){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Managing Layer Depth in LayerManager\nDESCRIPTION: Shows various methods for changing the display order of layers, including bringing layers to top/bottom and moving them relative to other layers.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlayerManager.bringLayerToTop(layerName);\n\nlayerManager.sendLayerToBack(layerName);\n\nlayerManager.moveLayerAbove(layerName, baseLayerName)\n\nlayerManager.moveLayerBelow(layerName, baseLayerName)\n```\n\n----------------------------------------\n\nTITLE: Finding Moving Path in Phaser 3 Pathfinder\nDESCRIPTION: Demonstrates how to find a moving path to a specific tile using the Pathfinder, with options for moving points and closest path.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-pathfinder.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = pathFinder.findPath(endTileXY);\n// var tileXYArray = pathFinder.findPath(endTileXY, movingPoints, isClosest, out);\n```\n\n----------------------------------------\n\nTITLE: Handling Error Event in Youtube Player for Phaser 3\nDESCRIPTION: Event handler for when an error occurs in the Youtube player, providing both the player instance and error message.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('error', function(player, errorMessage){ }, scope);\n```\n\n----------------------------------------\n\nTITLE: Importing Run Commands Class in Phaser 3\nDESCRIPTION: Imports the Run Commands class directly to use without plugin registration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/runcommands.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport RunCommands from 'phaser3-rex-plugins/plugins/runcommands.js';\n```\n\n----------------------------------------\n\nTITLE: Creating Label Instance with Class Import\nDESCRIPTION: Demonstrates creating a label instance using the imported class\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletitlelabel.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = new SimpleTitleLabel(scene, style);\n// var label = new SimpleTitleLabel(scene, style, creators);\nscene.add.existing(label);\nlabel.resetDisplayContent(config)\n```\n\n----------------------------------------\n\nTITLE: Creating a FileSelectorButton Instance with Class Import in Phaser 3\nDESCRIPTION: Code for creating a file selector button by directly using the imported class, then adding it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = new FileSelectorButton(scene, config);\nscene.add.existing(button);\n```\n\n----------------------------------------\n\nTITLE: Adding Step Behavior to Game Object\nDESCRIPTION: Shows how to add the Step behavior to a game object after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/step.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar step = scene.plugins.get('rexstepplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Instance\nDESCRIPTION: Example of creating a perspective instance with configuration options for parent bounds and face hiding\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-perspective.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar perspective = scene.plugins.get('rexPerspectiveImagePlugin').addContainerPerspective(container, {\n    useParentBounds: false,\n    // hideCCW: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Overall Progress of a Timer in Phaser 3\nDESCRIPTION: Retrieves the overall progress of the timer, factoring in repeats, as a value between 0 and 1. This is calculated as total elapsed time divided by total duration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar progress = timer.getOverallProgress();  // totalElapsed / totalDuration\n```\n\n----------------------------------------\n\nTITLE: Managing Sound Mute State in Phaser 3\nDESCRIPTION: Methods to set and get the mute state of a sound instance, controlling whether audio is audible.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.setMute(mute); // mute: true/false\n// music.mute = mute;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar mute = music.mute;\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Array Element in JavaScript\nDESCRIPTION: Returns the first element in the array that satisfies the provided testing function. Returns undefined if no elements pass the test. The callback should return true when the desired element is found.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-filter.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar element = arr.find(function(element, index, arr) {\n    return true; // false\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Options in a DropDownList\nDESCRIPTION: Sets the available options in the dropdown list using the setOptions method or direct assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.setOptions(options);\n```\n\n----------------------------------------\n\nTITLE: Making a Physics Body Non-Pushable in Phaser 3\nDESCRIPTION: Makes a physics body non-pushable, preventing it from being moved by other bodies during collisions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPushable(false);\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin with Chart.js\nDESCRIPTION: Loading both Chart.js and Rex UI plugin in the preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-chart.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.script('chartjs', 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js');\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Threshold for Pan in Phaser 3\nDESCRIPTION: Sets the drag threshold value for the pan gesture detector to control sensitivity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\npan.setDragThreshold(dragThreshold);\n// pan.dragThreshold = dragThreshold;\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Game Setup\nDESCRIPTION: Configures the perspective image plugin in the game's initialization settings\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-card.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport PerspectiveImagePlugin from 'phaser3-rex-plugins/plugins/perspectiveimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPerspectiveImagePlugin',\n            plugin: PerspectiveImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Glow Filter Class Directly\nDESCRIPTION: Imports the Glow Filter PostFx class directly and adds it to the pipeline configuration in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport GlowFilterPostFx from 'phaser3-rex-plugins/plugins/glowfilterpipeline.js';\nvar config = {\n    // ...\n    pipeline: [GlowFilterPostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Implementing Fontsize Expand Text in Phaser3\nDESCRIPTION: Helper method to create a font-size expandable text object that can be added to a sizer container. Supports optional proportion and expand properties for controlling text width.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-text-helper.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsizer\n    .add(\n        this.rexUI.fontSizeExpandText(this.add.text(0, 0, content)),\n        {\n            // proportion: 1,\n            // expand: true\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Shapes Object with Positional Parameters in Phaser 3\nDESCRIPTION: Demonstrates how to create a custom shapes object with positional parameters, including creation and update configurations with different shape types.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar customShapes = scene.add.rexCustomShapes(x, y, width, height, {\n    // type: 'rexCustomShapes',\n\n    create: [\n        { name: name0, type: shapeType},\n        { name: name1, type: shapeType},\n        ...\n    ],\n\n    // create: {\n    //     shapeType: [name0, name1, ...],\n    //     shapeType: number,\n    //     shapeType: name,\n    // },\n\n    // create: function() {\n    // \n    // },\n\n    update: function() {\n\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Frame from Texture in Phaser 3\nDESCRIPTION: Removes a frame from a texture by its name. Returns a boolean indicating whether the frame was successfully removed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar removed = texture.remove(frameName);\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling MoveTo Behavior in Phaser 3 Board\nDESCRIPTION: Methods to enable or disable the MoveTo behavior for a chess piece, allowing for temporary pausing of movement logic.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.setEnable();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.enable = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.setEnable(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.enable = false;\n```\n\n----------------------------------------\n\nTITLE: Creating Global Aseprite Animation in Phaser 3\nDESCRIPTION: Creates a global animation from Aseprite data that can be used by any sprite. The 'key' parameter is the Aseprite data key, and 'tags' specifies which animations to create.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.anims.createFromAseprite(key, tags);\n```\n\n----------------------------------------\n\nTITLE: Accessing Bitmap Font Data from Cache in Phaser 3\nDESCRIPTION: Method to retrieve loaded bitmap font data from the bitmap font cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.bitmapFont;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: DropDownList Custom Transition In Callback\nDESCRIPTION: Example of a custom callback function for controlling the opening transition of the dropdown list panel. It receives the list panel and duration as parameters, allowing for custom animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(listPanel, duration) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Warp Effect to Game Object via Plugin\nDESCRIPTION: Code to apply the warp effect to a game object using the loaded plugin with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexwarppipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Online User List Instance with Configuration\nDESCRIPTION: Initialize an online user list with root path and optional maximum users configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar userList = rexFire.add.onlineUserList({\n    root: '',\n    // maxUsers: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Masks from Text in Phaser 3\nDESCRIPTION: Method for generating a bitmap mask from a text object. Allows the text shape to be used as a mask for other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = txt.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Text Alignment Configuration\nDESCRIPTION: Methods for getting and setting horizontal and vertical text alignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setHAlign(align);\ntxt.setVAlign(align);\n```\n\n----------------------------------------\n\nTITLE: Loading Perspective Image Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the Perspective Image plugin from a minified file during the preload stage of a Phaser 3 game scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexperspectiveimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexperspectiveimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Managing User List and Room Status\nDESCRIPTION: JavaScript code snippets for various user list management operations including getting all users, checking if a user is first in room, checking if room is full, and checking if current user is in room.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = room.getUsers();\nvar isFirstUser = room.isFirstUser(userID);\n// var isFirstUser = room.isFirstUser();  // Current user is first user\nvar isFull = room.isFull();\nvar maxUsers = room.maxUsers;\nvar isInRoom = room.isInRoom();\n```\n\n----------------------------------------\n\nTITLE: Getting Point on Ellipse Edge in Phaser 3\nDESCRIPTION: Calculates a point on the edge of an ellipse based on parameter t (0-1).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = ellipse.getPoint(t);  // t : 0 ~ 1 (angle/360)\n// var point = ellipse.getPoint(t, point);  // modify point\n```\n\n----------------------------------------\n\nTITLE: Getting Text Content from TextArea\nDESCRIPTION: Demonstrates how to retrieve the current text content from the TextArea component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = textArea.text;\n```\n\n----------------------------------------\n\nTITLE: Pre-compiling Handlebars Templates\nDESCRIPTION: Shows how to pre-compile a Handlebars template for better performance, with optional configuration for prototype property access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/handlebars.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst template = Handlebars.compile(\"{{foo}}\");\ntemplate({}, {\n    // allowProtoPropertiesByDefault: false,\n    // allowProtoMethodsByDefault: false\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Individual Symbols on the Board\nDESCRIPTION: Functions for setting and getting individual symbols at specific tile positions on the board.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmatch.setSymbol(tileX, tileY, symbol);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar symbol = match.getSymbol(tileX, tileY);\n```\n\n----------------------------------------\n\nTITLE: Managing Depth in Phaser 3 Sizer Plugin\nDESCRIPTION: Methods for getting, setting, and manipulating the depth of sizer objects and their children, including bringing objects to the top or bottom of the display list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar depth = sizer.depth;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDepth(value, true);\n// sizer.depth = depth;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDepth(value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.bringToTop();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizerA.swapDepth(sizerB);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.incDepth(value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.moveDepthBelow(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.moveDepthAbove(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.bringChildToTop(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.sendChildToBack(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Adding Interception Behavior to a Game Object in Phaser 3\nDESCRIPTION: Adds the Interception behavior to a game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interception.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar interception = scene.plugins.get('rexinterceptionplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Texture Information in TransitionImage\nDESCRIPTION: Shows how to access the current texture key and frame name from a TransitionImage instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar textureKey = image.texture.key;\nvar frameName = image.frame.name;\n```\n\n----------------------------------------\n\nTITLE: Calculating Triangle Circumcircle in Phaser 3\nDESCRIPTION: Creates a circle object that passes through all vertices of the triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Geom.Triangle.CircumCircle(triangle);  // out: a circle object\n// var out = Phaser.Geom.Triangle.CircumCircle(triangle, out);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Tags to Tag Text\nDESCRIPTION: Adds multiple tag definitions to an existing Tag Text object using an object with tag name-property pairs.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.addTags({\n    name: prop\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Progress of a Timer in Phaser 3\nDESCRIPTION: Retrieves the progress of the current timer iteration as a value between 0 and 1, calculated as elapsed time divided by delay time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar progress = timer.getProgress();  // elapsed / delay\n```\n\n----------------------------------------\n\nTITLE: Adding Flip Behavior\nDESCRIPTION: Adds flip behavior to a game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flip.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar flip = scene.plugins.get('rexflipplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Checking Content Overflow in TextArea\nDESCRIPTION: Shows how to check if the content height exceeds the display height, indicating that scrolling is necessary.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar isOverflow = textArea.isOverflow;\n```\n\n----------------------------------------\n\nTITLE: Getting Children from ContainerLite in Phaser 3\nDESCRIPTION: Shows various methods to retrieve child game objects from a ContainerLite instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = container.getByName(name);\n// var gameObject = container.getByName(name, recursive);\n\nvar gameObject = container.getRandom();\n// var gameObject = container.getRandom(startIndex, length);\n\nvar gameObjects = container.getChildren();\n\nvar gameObjects = container.getAllChildren();\n```\n\n----------------------------------------\n\nTITLE: Configuring Masks in TransitionImage for Phaser 3\nDESCRIPTION: Shows various methods for applying masks to current and next images during transition effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setCurrentImageMaskEnable();\n// image.setCurrentImageMaskEnable(enable, invertAlpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setNextImageMaskEnable();\n// image.setNextImageMaskEnable(enable, invertAlpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setMaskEnable();\n// image.setMaskEnable(enable, invertAlpha);\n```\n\n----------------------------------------\n\nTITLE: Inverting Alpha in Geometry Masks in Phaser 3\nDESCRIPTION: Controls the inverse alpha feature for geometry masks. This feature inverts which parts of the mask are visible or invisible.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mask.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmask.setInvertAlpha();\n// mask.invertAlpha = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmask.setInvertAlpha(false);\n// mask.invertAlpha = false;\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Mouse Wheel Scrolling in Phaser3 Tables\nDESCRIPTION: Methods for enabling and disabling the mouse wheel scrolling functionality of a Phaser3 grid table. Includes setting and getting the mouse wheel scroller enable state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntable.setMouseWheelScrollerEnable(enabled);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.mouseWheelScrollerEnable = enabled;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = table.mouseWheelScrollerEnable;\n```\n\n----------------------------------------\n\nTITLE: Sorting UniqueItemList (JavaScript)\nDESCRIPTION: Shows methods for sorting, reversing, and shuffling items in a UniqueItemList.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlist.sort(function(itemA, itemB) {\n    if (itemA > itemB) {\n        return 1;\n    } else if (itemA < itemB) {\n        return -1;\n    } else {\n        return 0;\n    }\n})\nlistA.reverse();\nlistA.shuffle();\n```\n\n----------------------------------------\n\nTITLE: Getting Scene References in Phaser 3\nDESCRIPTION: Retrieves a reference to a scene instance by key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene = scene.scene.get(key);\n```\n\n----------------------------------------\n\nTITLE: Extending CircleMaskImage Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom CircleMaskImage class by extending the base component. This allows for adding custom functionality to images with circular masks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyImage extends RexPlugins.UI.CircleMaskImage {\n    constructor(scene, x, y, key, frame, config) {\n        super(scene, x, y, key, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Origin Position of Quad Grid\nDESCRIPTION: Demonstrates how to set the world position of tile (0, 0) in the Quad Grid. This can be done using a dedicated method or by directly setting x and y properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-quadgrid.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.setOriginPosition(worldX, worldY);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.x = worldX;\ngrid.y = worldY;\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Sprites Properties\nDESCRIPTION: Sets properties for multiple sprites simultaneously using the exclamation prefix.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_7\n\nLANGUAGE: phaser\nCODE:\n```\n!NAME.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Event Handling Methods in Command Executor\nDESCRIPTION: Methods for waiting on events and manipulating game object properties. Includes waitEvent and setGOProperty functions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ncommandExecutor.waitEvent(eventEmitter, eventName);\n\ncommandExecutor.setGOProperty({\n    goType, id, \n    property, ... \n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Color Replace Effect Properties in Phaser 3\nDESCRIPTION: Demonstrates how to get and set various properties of the color replace effect, such as original color, new color, and epsilon.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-colorreplace.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = pipelineInstance.originalColor;\npipelineInstance.setOriginalColor(value);\npipelineInstance.originalColor = value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = pipelineInstance.newColor;\npipelineInstance.setNewColor(value);\npipelineInstance.newColor = value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar epsilon = pipelineInstance.epsilon;\npipelineInstance.epsilon = epsilon;\npipelineInstance.setEpsilon(value);\n```\n\n----------------------------------------\n\nTITLE: Setting Turn Speed for Ship\nDESCRIPTION: Method to set the angular velocity (turn speed) of the ship.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nship.setTurnSpeed(angularVelocity);\n```\n\n----------------------------------------\n\nTITLE: Loading Script Tags in Phaser 3 Preload Stage\nDESCRIPTION: These snippets demonstrate different ways to load script tags in the preload stage of Phaser 3 using the Script Tag Loader plugin. It includes options for specifying an availability test callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scripttagloader.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.load.rexScriptTag(url);\n// this.load.rexScriptTag(url, availableTest);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.load.rexScriptTag({\n    url: url,\n    availableTest: undefined\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction() {        \n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Table from JSON in Phaser 3\nDESCRIPTION: Shows how to create a Grid Table instance from a JSON configuration in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = scene.make.rexGridTable({\n    x: 0,\n    y: 0,\n    width: 256,\n    height: 256,\n\n    // cellsCount: 0,   // total cells count\n    // ...\n    // origin: {x: 0.5, y: 0.5},\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Lumen Adjustment in HSL Adjust Pipeline for Phaser 3\nDESCRIPTION: Set the lumen adjustment value for the HSL adjust effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-hsladjust.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setLumAdjust(value);\n```\n\n----------------------------------------\n\nTITLE: Checking Loader Active Status in Phaser 3\nDESCRIPTION: Method to check if the loader is currently in the process of loading assets.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar isLoading = scene.load.isLoading();\n```\n\n----------------------------------------\n\nTITLE: Handling Key0 Removal in 1D Firebase Item Table\nDESCRIPTION: JavaScript code to set up an event handler for when a key0 is removed from a 1D Firebase item table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('removekey0', function(key0) {  });\n```\n\n----------------------------------------\n\nTITLE: Path Utilities in Phaser 3\nDESCRIPTION: Utility methods for working with paths including polygon conversion and point access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar polygon = lines.toPolygon();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.setInteractive({\n    hitArea: shape.getShapes()[0].toPolygon(),\n    hitAreaCallback: Phaser.Geom.Polygon.Contains,\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar p0x = lines.firstPointX;\nvar p0y = lines.firstPointY;\nvar pNx = lines.lastPointX;\nvar pNy = lines.lastPointY;\n```\n\n----------------------------------------\n\nTITLE: Executing a Transaction in Firestore\nDESCRIPTION: Performs a transaction that can read, modify, and write documents atomically, with automatic retries for conflicts.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar docRef = db.collection(collectionName).doc(docName);\ndb.runTransaction(function(transaction) {\n        // read-modify-write\n        // This code may get re-run multiple times if there are conflicts.\n        return transaction.get(docRef).then(function(doc) {\n                    // doc.exists\n                    transaction.update(docRef, keyValues);\n                });\n    })\n    .then(function() {\n        //console.log(\"Transaction successfully committed!\");\n    })\n    .catch(function(error) {\n        //console.log(\"Transaction failed: \", error);\n    });\n```\n\n----------------------------------------\n\nTITLE: Laying Out Color Input Elements in Phaser 3\nDESCRIPTION: Demonstrates how to arrange the position of all elements in a Color Input object after configuration or updates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorinput.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncolorInput.layout();\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Styles in Phaser 3 Rex UI (JavaScript)\nDESCRIPTION: Defines the style configuration for column components, including title background, text styling, icon properties, spacing, and column background options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        columns: {\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n\n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                },\n\n                expandedIcon: {\n                    color: undefined,\n                    alpha: 1,\n\n                    strokeColor: undefined,\n                    strokeAlpha: 1,\n                    strokeWidth: 1,\n                    arrowOnly: false,\n\n                    easeDuration: 0,\n                }\n            },\n\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            //background: [\n            //    {\n            //        radius: 0,\n            //        // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n            //\n            //        color: undefined,\n            //        alpha: undefined,\n            //        strokeColor: undefined,\n            //        strokeAlpha: undefined,\n            //        strokeWidth: undefined,\n            //    }\n            //],\n\n            space: {\n                left: 0, right: 0, top: 0, bottom:0, \n                column: 0,\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ImageInputLabel Class\nDESCRIPTION: Demonstrates how to create a custom class extending the ImageInputLabel component and instantiate it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLabel extends RexPlugins.UI.ImageInputLabel {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n\nvar imageInputLabel = new MyLabel(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Stroke Color of Round Rectangle\nDESCRIPTION: Retrieves the stroke color of a round rectangle shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = rect.strokeColor;\n```\n\n----------------------------------------\n\nTITLE: Layouting Dialog Children in JavaScript\nDESCRIPTION: Shows how to arrange the position of all elements within the Dialog.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.layout();\n```\n\n----------------------------------------\n\nTITLE: Stopping a Timer in Phaser 3\nDESCRIPTION: Stops a running timer, preventing any further callback executions. The timer is removed from the scene's time system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntimer.remove();\n```\n\n----------------------------------------\n\nTITLE: Toggling Toggle-Switch Value\nDESCRIPTION: Toggles the current value of the toggle-switch with optional animation duration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.toggleValue();\n// toggleSwitch.toggleValue(duration);\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin Via Minified File in Phaser3\nDESCRIPTION: Demonstrates how to load the Tag Player plugin using its minified version during the preload stage and create a tag player instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextagplayerplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextagplayerplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tagPlayer = scene.plugins.get('rextagplayerplugin').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Using Injected Step Methods on Game Objects\nDESCRIPTION: Shows how to use the injected Step methods on game objects, including starting and stopping the step behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/step.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.stepStart(stepLength);\n// gameObject.stepStart({stepLength});\n\ngameObject.stepStop();\n\ngameObject.on('step.step', function(gameObject, x, y) { \n    \n});\n```\n\n----------------------------------------\n\nTITLE: Creating Hexagon Grid Instance in Phaser 3\nDESCRIPTION: Initializes a hexagon grid object using the Phaser 3 scene's rexBoard plugin. Sets up grid properties including position, cell dimensions, and stagger configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagongrid.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar grid = scene.rexBoard.add.hexagonGrid({\n    x: 0,\n    y: 0,\n    cellWidth: 0,\n    cellHeight: 0,\n    // size: undefined,\n    staggeraxis: 1,\n    staggerindex: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Press Start Event in Phaser 3\nDESCRIPTION: Adds an event listener for the 'pressstart' event to detect when a press interaction begins.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\npress.on('pressstart', function(press, gameObject, lastPointer){\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Loading Texture for Nine Slice in Phaser 3\nDESCRIPTION: Loads an image to be used as a texture for a Nine Slice object. The image is loaded using the scene's load manager with a key for later reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/nineslice.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n```\n\n----------------------------------------\n\nTITLE: Configuring GroupNavigator with Options\nDESCRIPTION: Creates a GroupNavigator with configuration options including targets, columns, and focus enable callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar navigator = scene.plugins.get('rexGroupNavigator').add({\n    // enable: true,\n\n    targets: gameObjects,\n    // columns: undefined,\n\n    // getFocusEnableCallback(gameObject) { \n    //     return focusEnable;\n    // }\n    // focusEnableDataKey: undefined,\n    // focusEnableKey: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Pinch Class from Rex Plugins in Phaser 3\nDESCRIPTION: Demonstrates how to import the Pinch class directly from the Rex Plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pinch.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pinch } from 'phaser3-rex-plugins/plugins/gestures.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring Flip Plugin in Game Setup\nDESCRIPTION: Configuration code for installing the flip plugin in the game's global plugins.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flip.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport FlipPlugin from 'phaser3-rex-plugins/plugins/flip-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFlip',\n            plugin: FlipPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Accessing Left-Side Element in Holy Grail Layout\nDESCRIPTION: Retrieves the left-side game object from the Holy Grail layout.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar leftSide = holyGrail.getElement('leftSide');\n```\n\n----------------------------------------\n\nTITLE: Controlling Bloom Effect in Horrifi Pipeline\nDESCRIPTION: Methods to enable, disable, and configure the Bloom effect in the Horrifi pipeline. Includes setter and getter methods for all Bloom parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Enable\npipelineInstance.setBloomEnable();\n// pipelineInstance.setBloomEnable(true);\n// or\npipelineInstance.bloomEnable = true;\n\n// Disable\npipelineInstance.setBloomEnable(false);\n// or\npipelineInstance.bloomEnable = false;\n\n// Get\nvar bloomEnable = pipelineInstance.bloomEnable;\n\n// Set parameters\npipelineInstance.setBloomRadius(value);\npipelineInstance.setBloomIntensity(value);\npipelineInstance.setBloomThreshold(value);\npipelineInstance.setBloomTexelSize(width, height);\n// or\npipelineInstance.bloomRadius = value;\npipelineInstance.bloomIntensity = value;\npipelineInstance.bloomThreshold = value;\npipelineInstance.bloomTexelWidth = width;\npipelineInstance.bloomTexelHeight = height;\n\n// Get parameters\nvar bloomRadius = pipelineInstance.bloomRadius;\nvar bloomIntensity = pipelineInstance.bloomIntensity;\nvar bloomThreshold = pipelineInstance.bloomThreshold;\nvar bloomTexelWidth = pipelineInstance.bloomTexelWidth;\nvar bloomTexelHeight = pipelineInstance.bloomTexelHeight;\n```\n\n----------------------------------------\n\nTITLE: Adding Background with Padding and Key\nDESCRIPTION: Adding a background to the Pages container with specified padding and a key for retrieval.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\npages.addBackground(child, {left: 0, right: 0, top: 0, bottom: 0}, key);\n```\n\n----------------------------------------\n\nTITLE: Flipping a TransitionImagePack in Phaser 3\nDESCRIPTION: Demonstrates methods to flip the TransitionImagePack horizontally or vertically, either by setting specific values or toggling current states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimage.flipX(value);\nimage.flipY(value);\nimage.flip(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.toggleFlipX();\nimage.toggleFlipY();\n```\n\n----------------------------------------\n\nTITLE: Setting Point Light Color with RGB Values\nDESCRIPTION: Demonstrates how to set the color of a point light using RGB values between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npointLight.color.set(red, green, blue);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners (Alias) in Phaser 3\nDESCRIPTION: Shows an alternative method to attach event listeners in Phaser 3, including one-time listeners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nee.addListener(eventName, callback, scope);\nee.addListener(eventName, callback, scope, true);  // only fire listeners one time\n```\n\n----------------------------------------\n\nTITLE: Importing TransitionImage Class in Phaser 3\nDESCRIPTION: Demonstrates importing the TransitionImage class directly from npm and creating an instance in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TransitionImage from 'phaser3-rex-plugins/plugins/transitionimage.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new TransitionImage(scene, x, y, texture, frame, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Stroke Style in Phaser 3\nDESCRIPTION: Sets the stroke style including line width, color, and alpha for a circle game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.setStrokeStyle(lineWidth, color, alpha);\n```\n\n----------------------------------------\n\nTITLE: Removing Split Effect\nDESCRIPTION: Removes the Split Pipeline effect from a game object or camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexSplitPipeline').remove(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexSplitPipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Chart Data Manipulation Methods\nDESCRIPTION: Methods for getting and setting chart data and datasets.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-chart.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar dataset = chart.getChartDataset(datasetIndex);\nvar data = chart.getChartData(datasetIndex, dataIndex);\nchart.setChartData(datasetIndex, dataIndex, value).updateChart();\n```\n\n----------------------------------------\n\nTITLE: Converting Base64 to ArrayBuffer in Phaser\nDESCRIPTION: Demonstrates how to decode a Base64 string into an ArrayBuffer using Phaser's built-in utility method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/base64.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar arrayBuffer = Phaser.Utils.Base64.Base64ToArrayBuffer(base64);\n```\n\n----------------------------------------\n\nTITLE: Converting Polygon to Triangles in Phaser 3\nDESCRIPTION: Converts polygon data into an array of triangles. Supports optional parameters for holes and scaling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Geom.Triangle.BuildFromPolygon(data);\n// var out = Phaser.Geom.Triangle.BuildFromPolygon(data, holes, scaleX, scaleY);\n// out = Phaser.Geom.Triangle.BuildFromPolygon(data, holes, scaleX, scaleY, out);\n```\n\n----------------------------------------\n\nTITLE: Using PNG Appender Plugin to Append and Extract Data\nDESCRIPTION: This snippet demonstrates how to use the PNG Appender plugin to append data to a PNG buffer and extract data from it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/png-appender.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar resultBuffer = scene.plugins.get('rexpngappenderplugin').append(pngBuffer, data);\nvar data = scene.plugins.get('rexpngappenderplugin').extract(pngBuffer);\n```\n\n----------------------------------------\n\nTITLE: Importing NinePatch Class Directly in Phaser 3\nDESCRIPTION: Shows how to import the NinePatch class directly from the NPM package rather than using the plugin approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport NinePatch from 'phaser3-rex-plugins/plugins/ninepatch.js';\n```\n\n----------------------------------------\n\nTITLE: Getting Progress Value\nDESCRIPTION: Different methods to retrieve the current progress value from a circular progress instance, with options for scaled or normalized values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = circularProgress.getValue(min, max); // value : min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = circularProgress.getValue(); // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = circularProgress.value; // value: 0 ~ 1\n```\n\n----------------------------------------\n\nTITLE: Custom Triangle Class Extension in Phaser 3\nDESCRIPTION: Extending the base Triangle class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTriangle extends Phaser.GameObjects.Triangle {\n    constructor(scene, x, y, x1, y1, x2, y2, x3, y3, fillColor) {\n        super(scene, x, y, x1, y1, x2, y2, x3, y3, fillColor);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: MoveTo Event Handling\nDESCRIPTION: Event handlers for movement start and completion events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/moveto.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.on('start', function(gameObject, moveTo){});\n\nmoveTo.on('complete', function(gameObject, moveTo){});\n// moveTo.once('complete', function(gameObject, moveTo){});\n```\n\n----------------------------------------\n\nTITLE: Loading Rex Keys Hub Plugin in Phaser 3\nDESCRIPTION: This snippet shows how to load the minified Keys Hub plugin file in the preload stage and add a keys-hub object to your scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyshub.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexkeyshubplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexkeyshubplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keysHub = scene.plugins.get('rexkeyshubplugin').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Triangle Line Width Configuration in Phaser 3\nDESCRIPTION: Setting line width properties of a Triangle object, with WebGL-specific endWidth parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntriangle.setLineWidth(startWidth, endWidth);\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Mask in Phaser 3\nDESCRIPTION: Creates a geometry mask using graphics. Geometry masks act as clipping paths that make pixels either fully visible or invisible without affecting their alpha values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mask.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar shape = scene.make.graphics();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = shape.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Creating a Full Window Rectangle Object\nDESCRIPTION: Standard method to create a full window rectangle object using the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = scene.add.rexFullWindowRectangle(fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tree Objects with Options\nDESCRIPTION: Detailed configuration options for creating tree objects including background, toggle buttons, node styling, transitions, spacing and expansion settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar tree = trees.addTree({\n    // nodeKey: UUID()\n\n    // background: backgroundGameObject,\n    // background: function(scene {isLeaf}) { return gameObject; },\n    // background: backgroundStyle,\n\n    toggleButton: toggleButtonGameObject,\n    // toggleButton: function(scene {isLeaf}) { \n    //      gameObject\n    //          .on('expand.start', function (gameObject) {\n    //           })\n    //           .on('collapse.start', function (gameObject) {\n    //           })\n    //     return gameObject; \n    // },\n    // toggleButton : triangleStyle,\n\n    // nodeBackground: nodeBackgroundGameObject,\n    // nodeBackground: function(scene {isLeaf}) { return gameObject; },\n    // nodeBackground: backgroundStyle,\n\n    nodeBody: nodeBodyGameObject,\n    // nodeBody: function(scene {isLeaf}) { return gameObject; },\n    // nodeBody: simpleLabelStyle,\n\n    // transition: {\n    //     duration: 200,\n    //     expandCallback: undefined,\n    //     collapseCallback: undefined,\n    // },\n\n    // orientation: 'y',\n\n    // space: {\n    //     indent: 0,\n    //     indentLeft: 0, indentRight: 0, indentTop: 0, indentBottom: 0,\n    // \n    //     nodeLeft: 0, nodeRight: 0, nodeTop: 0, nodeBottom: 0,\n    //     toggleButton: 0,\n    // },\n    \n    // align: {\n    //     title: 'left',\n    //     child: 'left',\n    // },\n\n    // expand: {\n    //     title: true,\n    //     child: true,\n    // },\n\n    // expanded: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Camera Binding in LayerManager\nDESCRIPTION: Shows how to bind layers to specific cameras and retrieve the camera associated with a layer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlayerManager.setCamera(layerName, cameraName);\n\nvar camera = layerManager.getCamera(layerName);\n```\n\n----------------------------------------\n\nTITLE: Creating Waiting Callback in Wait Events\nDESCRIPTION: Shows how to create a waiting callback that can be used to signal the completion of an event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar callback = waitEvents.waitCallback();\n```\n\n----------------------------------------\n\nTITLE: Creating IdAlias Instance with Configuration\nDESCRIPTION: JavaScript code showing how to create an IdAlias instance with configuration specifying the root collection name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar idAlias = scene.plugins.get('rexFirebase').add.idAlias({\n    root: ''\n});\n```\n\n----------------------------------------\n\nTITLE: Progress Callback Function\nDESCRIPTION: Callback function that is triggered during loading progress updates, receiving the game object and progress value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(gameObject, progress) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Quadrilateral Grid Configuration\nDESCRIPTION: Shows the full configuration options for quadrilateral grid alignment including width, height, cell dimensions, and positioning.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridalign.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexGridAlign').quad(gameObjects, {\n    width: -1,\n    height: -1,\n    cellWidth: 1,\n    cellHeight: 1,\n    type: 0,\n    position: Phaser.Display.Align.CENTER,\n    x: 0,\n    y: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Center Circle\nDESCRIPTION: Methods to get and set the color of the center circle in the circular progress component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar centerColor = circularProgress.centerColor;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setCenterColor(centerColor);\n// circularProgress.centerColor = centerColor;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the phaser3-rex-plugins package from npm, which includes the Loading Animation Scene plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loading-animation-scene.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Accessing Video Data from Cache in Phaser 3\nDESCRIPTION: Method to retrieve loaded video data from the video cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.video;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Creating a Geometry Mask from an Arc in Phaser 3\nDESCRIPTION: Creates a geometry mask from an Arc game object. This mask can be used to control the visibility of other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = arc.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Path Transformation and Display in Phaser 3\nDESCRIPTION: Methods for transforming paths through offset and rotation, and displaying path segments.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlines.offset(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.rotateAround(centerX, centerY, angle);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.setDisplayPathSegment(startT, endT);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlines.setDisplayPathSegment(endT);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Folder Class\nDESCRIPTION: Demonstrates how to extend the Folder class to create a custom UI component with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyFolder extends RexPlugins.UI.Folder {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Opening text editor directly using plugin method\nDESCRIPTION: Opening the text editor directly for a text game object using the plugin's edit method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = scene.plugins.get('rextexteditplugin').edit(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Alpha in Phaser 3 Round Rectangle Progress\nDESCRIPTION: Code snippets for retrieving and setting the alpha (transparency) of a round rectangle progress bar in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = roundRectangleProgress.alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nroundRectangleProgress.setAlpha(alpha);\n// roundRectangleProgress.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Board Configuration\nDESCRIPTION: Example configuration for creating a quad or hexagon grid board\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar board = scene.rexBoard.add.board({\n    grid: {\n        gridType: 'quadGrid',\n        x: 0,\n        y: 0,\n        cellWidth: 0,\n        cellHeight: 0,\n        type: 'orthogonal'  // 'orthogonal'|'isometric'\n    },\n    // width: 0,\n    // height: 0,\n    // wrap: false,\n    // infinity: false,\n});\n```\n\n----------------------------------------\n\nTITLE: RetroFont TEXT_SET5 Definition\nDESCRIPTION: Uppercase letters with common punctuation and numbers\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ.,/() \\'!?-*:0123456789'\n```\n\n----------------------------------------\n\nTITLE: Removing Random Item from Array in Phaser 3 JavaScript\nDESCRIPTION: Shows how to remove and return a random element from an array using Phaser.Utils.Array.RemoveRandomElement(). Like GetRandom, it can also take optional start index and length parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-random.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar item = Phaser.Utils.Array.RemoveRandomElement(arr);\n// var item = Phaser.Utils.Array.RemoveRandomElement(arr, startIndex, length);\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle Shape in Phaser 3\nDESCRIPTION: Creates a circle game object at specified coordinates with a defined radius and fill color. Optionally, a fill alpha can be provided to control transparency.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar circle = scene.add.circle(x, y, radius, fillColor);\n// var circle = scene.add.circle(x, y, radius, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Using RandomPlace Plugin (Minified Version) in Phaser 3\nDESCRIPTION: Uses the loaded RandomPlace plugin to place game objects randomly within an area without overlapping.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/randomplace.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexrandomplaceplugin').randomPlace(gameObjects, config);\n```\n\n----------------------------------------\n\nTITLE: Creating TouchEventStop Instance Directly\nDESCRIPTION: Code to create a TouchEventStop instance directly using the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/toucheventstop.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar touchEventStop = newe TouchEventStop(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Moving a child down in a Phaser 3 List\nDESCRIPTION: Method to move a child one position down (toward the beginning) in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlist.moveDown(child);\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Alignment Usage\nDESCRIPTION: Demonstrates basic usage of quad and hexagon grid alignment methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridalign.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexgridalignplugin').quad(gameObjects, config);\nscene.plugins.get('rexgridalignplugin').hexagon(gameObjects, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Life-time Behavior to a Game Object (Minified Plugin)\nDESCRIPTION: Shows how to add the Life-time behavior to a game object using the minified plugin version.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lifetime.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar lifeTime = scene.plugins.get('rexlifetimeplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Factor for Layers\nDESCRIPTION: Demonstrates how to set the scroll factor for all children of a layer, affecting how they respond to camera movement.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlayerManager.setScrollFactor(scrollFactor);\n// layerManager.setScrollFactor(scrollFactorX, scrollFactorY);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Match Class in Phaser 3\nDESCRIPTION: Demonstrates how to extend the Match class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyMatch extends RexPlugins.Board.Match {\n    constructor(config) {\n        super(config);\n        // ...\n    }\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = new MyMatch(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Phaser 3 Game for DOM Element Support\nDESCRIPTION: Configuration settings for enabling DOM element support in Phaser 3, which is required for the Image Input Label plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    parent: divId,\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    },\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Using Image URI Loader via Direct Class Import\nDESCRIPTION: Example of importing the Image URI Loader class directly from the npm package and calling it with the scene loader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imageuriloader.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ImageURILoader from 'phaser3-rex-plugins/plugins/imageuriloader.js';\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the phaser3-rex-plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Handling Menu Popup Complete Events in Phaser3\nDESCRIPTION: Event handler for when a menu (root or sub-menu) has completely finished its popup animation. Provides access to the menu that completed the animation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.on('popup.complete', function(menu) {\n    // ....\n}, scope)\n```\n\n----------------------------------------\n\nTITLE: Layout Grid Table Children in Phaser 3\nDESCRIPTION: Shows how to arrange the position of all elements within the Grid Table. This method is used to update the layout after making changes to the table's content or configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntable.layout();\n```\n\n----------------------------------------\n\nTITLE: Applying Shockwave Effect to Game Object with Imported Plugin\nDESCRIPTION: Applies the shockwave effect to a game object using the imported plugin instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexShockwavePipeline').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Ellipse Dimensions in Phaser 3\nDESCRIPTION: Retrieves the width and height of an ellipse.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = ellipse.width;\nvar height = ellipse.height;\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Package\nDESCRIPTION: Command to install Rex plugins from npm\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/slider.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Enabling Mask for Current Image in Phaser 3 Transition\nDESCRIPTION: Applies a mask to the current texture in the transition. Can optionally specify whether the mask is enabled and whether to invert the alpha channel.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setCurrentImageMaskEnable();\n// image.setCurrentImageMaskEnable(enable, invertAlpha);\n```\n\n----------------------------------------\n\nTITLE: Offsetting an Ellipse in Phaser 3\nDESCRIPTION: Moves an ellipse by a specified distance on both axes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Ellipse.Offset(ellipse, dx, dy); // ellipse.x += dx, ellipse.y += dy\n```\n\n----------------------------------------\n\nTITLE: Managing Items in Gashapon for Phaser 3\nDESCRIPTION: Shows methods for setting, adding, and removing items in a Gashapon instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngashapon.setItem(name, count);\ngashapon.addItem(name, count);\ngashapon.putItemBack(name, count);\ngashapon.removeItem(name);\ngashapon.removeAllItems();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Canvas Class in Phaser 3\nDESCRIPTION: Defines a custom Canvas class extending the base Canvas functionality in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCanvas extends Canvas {\n    constructor(scene, x, y, width, height, resolution) {\n        super(scene, x, y, width, height, resolution);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Base Texture for NinePatch with Edge Dimensions\nDESCRIPTION: Shows how to set a new base texture for a NinePatch object with explicit left, right, top and bottom edge dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setBaseTexture(key, baseFrame, leftWidth, rightWidth, topHeight, bottomHeight);\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Float Array (Three Values)\nDESCRIPTION: Methods for setting three float array uniform values in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set3fv(name, value0, value1, value2);\n// pipelineInstance.set3fv(name, value0, value1, value2, shader);\n```\n\n----------------------------------------\n\nTITLE: Custom TileSprite Class Definition\nDESCRIPTION: Creates a custom class extending Phaser.GameObjects.TileSprite with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilesprite.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTileSprite extends Phaser.GameObjects.TileSprite {\n    constructor(scene, x, y, width, height, texture, frame) {\n        super(scene, x, y, width, height, texture, frame);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Triangle-Rectangle Intersection Points in Phaser 3\nDESCRIPTION: Calculates the points where a triangle intersects with a rectangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetRectangleToTriangle(rect, triangle);\n// var out = Phaser.Geom.Intersects.GetRectangleToTriangle(rect, triangle, out);\n```\n\n----------------------------------------\n\nTITLE: Getting Elements by Key in Phaser 3 UI Tweakers\nDESCRIPTION: Retrieves a game object from the tweaker using the key defined when adding the input. Demonstrates both the retrieval method and how to configure the key parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tweaker.getElement(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput({\n    key: ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Perspective Sprite in Phaser 3\nDESCRIPTION: Creates a bitmap mask from a perspective sprite instance for use in a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-sprite.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = sprite.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Starting Individual Event Sheet Execution\nDESCRIPTION: Shows different methods to start running individual event sheets with or without condition testing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Start default group\neventSheetManager.start();\n\n// Start event sheet by title (default group, no condition testing)\neventSheetManager.start(title);\n\n// Start event sheet by title (specific group, no condition testing)\neventSheetManager.start(title, groupName);\n\n// Start event sheet by title (default group, with condition testing)\neventSheetManager.start(title, false);\n\n// Start event sheet by title (specific group, with condition testing)\neventSheetManager.start(title, groupName, false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Plugin in Game Configuration\nDESCRIPTION: JavaScript code showing how to include the Firebase plugin in the Phaser game configuration for global availability.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport FirebasePlugin from 'phaser3-rex-plugins/plugins/firebase-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFirebase',\n            plugin: FirebasePlugin,\n            start: true\n        }]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Carousel Instance with Configuration\nDESCRIPTION: Demonstrates full configuration options for creating a perspective image carousel instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-imagecarousel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar carousel = scene.add.rexPerspectiveImageCarousel({\n    x: 0, y: 0,\n\n    images: [],  // Array of {key, frame}\n    // index: 0,\n    // rtl: false,\n    // repeat: true,\n\n    // width,\n    // height,\n    // faceCount: 4,\n\n    // z: 1,\n    // zEnd: 0,\n\n    // roll : {\n    //     duration: 1000,\n    //     ease: 'Cubic',\n    //     delay: 0,\n    // }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask from a Perspective Image\nDESCRIPTION: Creates a bitmap mask from the perspective image that can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Loading Drop-down List Plugin in Phaser 3 Preload Stage\nDESCRIPTION: This snippet shows how to load the drop-down list plugin (minified file) in the preload stage of a Phaser 3 scene. It uses the scene's load.scenePlugin method to load the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Applying Barrel Effect to Game Objects\nDESCRIPTION: Code to apply the barrel effect to a game object with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-barrel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexBarrelPipeline').add(gameObject, {\n    // shrink: false,\n    // center: {\n    //    x: windowWidth / 2,\n    //    y: windowHeight / 2\n    //}\n    // radius: 0,\n    // power: 0.5,\n    // intensity: 1,\n    // name: 'rexBarrelPostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Bar Color in Phaser 3 Round Rectangle Progress\nDESCRIPTION: Code snippets for retrieving and setting the bar color of a round rectangle progress bar in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar barColor = roundRectangleProgress.barColor;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nroundRectangleProgress.setBarColor(barColor);\n// roundRectangleProgress.barColor = barColor;\n```\n\n----------------------------------------\n\nTITLE: Flipping Images in Phaser 3 Transition\nDESCRIPTION: Methods to flip both current and next textures horizontally (flipX), vertically (flipY), or both. The flip method accepts two boolean parameters for x and y flipping.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimage.flipX(value);\nimage.flipY(value);\nimage.flip(x, y);\n```\n\n----------------------------------------\n\nTITLE: Loading Chart.js Alternative Version\nDESCRIPTION: Loading an alternative version of Chart.js library via CDN.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-chart.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.script('chartjs', 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js');\n```\n\n----------------------------------------\n\nTITLE: Loading Tap Gesture Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the tap gesture plugin as a scene plugin in the preload stage of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-tap.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexgesturesplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgesturesplugin.min.js', 'rexGestures', 'rexGestures');\n```\n\n----------------------------------------\n\nTITLE: Command Execution Examples in Run Commands Plugin\nDESCRIPTION: Shows how commands are executed by the Run Commands plugin, either by calling a method on the scope object or by executing a callback function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/runcommands.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscope[fnName].call(scope, param0, param1 ...)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncallback.call(scope, param0, param1 ...)\n```\n\n----------------------------------------\n\nTITLE: Loading File Packs from JSON Object in Phaser 3\nDESCRIPTION: Alternative method to load file packs directly from a JSON object rather than from a URL, useful for preloaded or dynamically generated asset collections.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.pack(key, json);\n// scene.load.pack(key, json, dataKey);\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Not In Array\nDESCRIPTION: Find documents where a property does not match any value in a specified array using the $nin operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$nin': [value0, value1, ...]}});\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from RenderTexture in Phaser 3\nDESCRIPTION: Creates a bitmap mask from the render texture that can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = rt.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Perspective Carousel Instance in Phaser 3\nDESCRIPTION: Code to instantiate a custom perspective carousel class after it has been defined.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar carousel = new MyPerspectiveCarousel(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Checking Key State in Phaser 3\nDESCRIPTION: Demonstrates how to check if a key is pressed down or released using a key object in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardevents.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObject = scene.input.keyboard.addKey('W');  // Get key object\nvar isDown = keyObject.isDown;\nvar isUp = keyObject.isUp;\nvar shiftKey = keyObject.shiftKey;\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data into Conditions Table\nDESCRIPTION: Shows how to load CSV data into the Conditions Table instance, with an optional delimiter parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/conditionstable.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntable.loadCSV(csvString, {\n    // delimiter: ','\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing and Swapping Tiles in Phaser 3\nDESCRIPTION: Methods for replacing tiles by index and swapping tiles between two indices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nmap.replaceByIndex(findIndex, newIndex);\nmap.swapByIndex(indexA, indexB);\nlayer.replaceByIndex(findIndex, newIndex, tileX, tileY, width, height);\nlayer.swapByIndex(indexA, indexB, tileX, tileY, width, height);\n```\n\n----------------------------------------\n\nTITLE: Creating Name Input Dialog Object\nDESCRIPTION: Creates a new name input dialog game object with configurable position, dimensions, and viewport settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/nameinput-dialog-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNAMEINPUT\n  id=NameInput\n  width=0\n  height=0\n  vpx=0.5\n  vpy=0.5\n  vpw=\n  vph=\n```\n\n----------------------------------------\n\nTITLE: Creating ContainerLite from JSON in Phaser 3\nDESCRIPTION: Shows how to create a ContainerLite object from a JSON configuration in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar container = scene.make.rexContainerLite({\n    x: 0,\n    y: 0,\n    width: 1,\n    height: 1,\n\n    // angle: 0,\n    // alpha: 1,\n    // scale : {\n    //    x: 1,\n    //    y: 1\n    //},\n    // origin: {x: 0.5, y: 0.5},\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Plugin Instance in Phaser 3\nDESCRIPTION: Demonstrates how to get an instance of a global plugin in a Phaser 3 scene using the plugins.get() method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pluginsystem.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pluginInst = scene.plugins.get(key);\n```\n\n----------------------------------------\n\nTITLE: Managing Rotation in Perspective Carousel\nDESCRIPTION: Methods to get and set rotation angles of a perspective carousel in either degrees or radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar angleY = carousel.angleY; // Angle in degrees\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotationY = carousel.rotationY; // Angle in radians\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.angleY = angleY; // Angle in degrees\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.rotationY = rotationY; // Angle in radians\n```\n\n----------------------------------------\n\nTITLE: Creating Bracket Parser Instance in Phaser 3\nDESCRIPTION: Initializes a new Bracket Parser instance with configuration options for delimiters, value conversion, and tag name translation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = scene.plugins.get('rexBracketParser').add({\n    // delimiters: '<>', // or ['<', '>']\n    // valueConvert: true,\n    // translateTagNameCallback: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox State in Dialog - JavaScript\nDESCRIPTION: Method to set the state of a specific checkbox button in choices. Set state to true if the button should be selected.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.setChoicesButtonState(name, state);\n```\n\n----------------------------------------\n\nTITLE: Custom Perspective Card Class Definition\nDESCRIPTION: Demonstrates how to create a custom perspective card class extending the base functionality\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-card.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPerspectiveCard extends PerspectiveCard {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Checkbox Value Change Event\nDESCRIPTION: Registers an event listener to be notified when the checkbox value changes, providing the new value in the callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.on('valuechange', function(value) {\n    // value: checked\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Dropdown Events\nDESCRIPTION: Shows how to handle open and close events of the dropdown dialog.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dropdown.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndropDown.on('open', function(gameObject, dropdown) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndropDown.on('close', function(closeEventData) {\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Drag Threshold for Pan in Phaser 3\nDESCRIPTION: Retrieves the current drag threshold value for the pan gesture detector.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar dragThreshold = pan.dragThreshold;\n```\n\n----------------------------------------\n\nTITLE: Seeking to Next Command in TCRP Player\nDESCRIPTION: Method to seek to the next command in the TCRP player, executing it immediately.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.seekToNext();\n```\n\n----------------------------------------\n\nTITLE: Setting Volume in Youtube Player for Phaser 3\nDESCRIPTION: Methods to set the volume level of the Youtube player using a value between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.setVolume(volume);  // volume: 0~1\n// player.volume = volume;\n```\n\n----------------------------------------\n\nTITLE: Basic Flip Control Methods\nDESCRIPTION: Essential methods for controlling flip animation including start, stop, and duration settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flip.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nflip.flip();\nflip.stop();\nflip.setDuration(duration);\nflip.setEase(ease);\n```\n\n----------------------------------------\n\nTITLE: Handling Rotation Start Event\nDESCRIPTION: Sets up an event listener for when the rotation animation starts in the RotateTo behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.on('start', function(gameObject, rotateTo){});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Click Interval in Phaser 3\nDESCRIPTION: Shows how to set the interval between allowed clicks for a Button instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.setClickInterval(interval);  // interval in ms\n```\n\n----------------------------------------\n\nTITLE: Setting Stitching Size Using Setter Methods\nDESCRIPTION: Sets the stitching width and height values using dedicated setter methods on the pipeline instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setStitchingWidth(stitchingWidth);\npipelineInstance.setStitchingHeight(stitchingHeight);\npipelineInstance.setStitchingSize(stitchingWidth, stitchingHeight);\n```\n\n----------------------------------------\n\nTITLE: Adding Interception Behavior Using Imported Plugin in Phaser 3\nDESCRIPTION: Adds the Interception behavior to a game object using the imported plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interception.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar interception = scene.plugins.get('rexInterception').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Game Object Callback\nDESCRIPTION: Callback function definition for creating game objects with parameters passed from tag commands.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(scene, a, b, c) {\n    // return gameObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Wave Width Value\nDESCRIPTION: Retrieves the current wave width value from a shockwave pipeline instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar waveWidth = pipelineInstance.waveWidth;\n```\n\n----------------------------------------\n\nTITLE: Triangle Display Size Management in Phaser 3\nDESCRIPTION: Getting and setting display dimensions of a Triangle object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = triangle.displayWidth;\nvar height = triangle.displayHeight;\ntriangle.setDisplaySize(width, height);\ntriangle.displayWidth = width;\ntriangle.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Adding Questions to Question Manager in Phaser 3\nDESCRIPTION: Demonstrates how to add questions to the question manager, including configuration options for parsing and converting data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nquestionManager.add(questions, config);\n```\n\n----------------------------------------\n\nTITLE: Achievement Testing and State Management\nDESCRIPTION: Code examples for testing achievements and managing their states including running tests and retrieving results.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ymlachievements.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar achievements.runTest(levelName, values);\nvar states = achievements.getObtainedState(levelName);\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Progress from JSON with scene.make\nDESCRIPTION: Code to create a circular progress instance from a JSON configuration using scene.make, which allows adding it to the scene with the add flag.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar circularProgress = scene.make.rexCircularProgress({\n    x: 0,\n    y: 0,\n    radius: 1,\n\n    barColor: undefined,\n    trackColor: undefined,\n    centerColor: undefined,\n    thickness: 0.2,\n    startAngle: Phaser.Math.DegToRad(270),\n    anticlockwise: false,\n\n    value: 0,\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n    valuechangeCallback: function(newValue, oldValue, circularProgress) {\n    },  \n    \n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Custom CircularProgress Class Definition\nDESCRIPTION: Example of creating a custom class extending the base CircularProgressCanvas with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCircularProgressCanvas extends CircularProgressCanvas {\n    constructor(scene, x, y, radius, barColor, value, config) {\n        super(scene, x, y, radius, barColor, value, config);\n        scene.add.existing(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Logical View Boundaries for Coordinate System\nDESCRIPTION: Sets up the logical view boundaries based on canvas dimensions and aspect ratio. This creates the coordinate space that will be used for hit testing and rendering, taking into account the canvas proportions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { width, height } = canvas;\nconst ratio: number = width / height;\nconst left: number = -ratio;\nconst right: number = ratio;\nconst bottom: number = LAppDefine.ViewLogicalLeft;\nconst top: number = LAppDefine.ViewLogicalRight;\n```\n\n----------------------------------------\n\nTITLE: Accessing TextBox Separator Element\nDESCRIPTION: Retrieves the separator game object that divides title from content for direct manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = textBox.getElement('separator');\n```\n\n----------------------------------------\n\nTITLE: Loading Modal Plugin in Phaser3\nDESCRIPTION: Demonstrates how to load the minified plugin file in the preload stage and add modal behavior to a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexmodalplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexmodalplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar modal = scene.plugins.get('rexmodalplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Click Outside Event to Sizer in Phaser 3 Rex UI\nDESCRIPTION: Demonstrates how to add a click-outside event to a Sizer object. This event is triggered when a click occurs outside the Sizer's bounds. The method accepts a callback function and an optional scope.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.onClickOutside(callback, scope);\n// sizer.onClickOutside(callback, scope, config);\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Getting TextBox Elements by Name\nDESCRIPTION: Another approach to retrieve game objects by name, allowing optional recursive search through child elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = textBox.getByName(name);\n// var gameObject = textBox.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Setting Immovable Property of Physics Body in Phaser 3\nDESCRIPTION: Demonstrates how to make a physics body immovable, preventing it from being moved by collisions with other bodies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setImmovable();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setImmovable(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar immovable = body.immovable;\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask from Nine Slice in Phaser 3\nDESCRIPTION: Creates a bitmap mask from a Nine Slice object. This mask can be used to control the visibility of other game objects based on the Nine Slice's shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/nineslice.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = nineSlice.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Property Easing in Command Executor\nDESCRIPTION: Method to ease game object properties with support for duration, easing functions, and repeat options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nif (wait) {\n    commandExecutor.setWaitEventFlag();\n}\ncommandExecutor.easeGOProperty({\n    goType, id, \n    duration, ease, repeat, yoyo, \n    wait, \n    property, ... \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Online User List with Options\nDESCRIPTION: JavaScript code showing the configuration options when creating an online user list instance, including root path, maximum users, and user identity settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar userList = scene.plugins.get('rexFirebase').add.onlineUserList({\n    root: '',\n    // maxUsers: 0,\n\n    // userID: '',\n    // userName: '',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Bullet Behavior to Game Object in Phaser 3\nDESCRIPTION: Adds the bullet behavior to a game object using the loaded plugin. This allows the object to move with constant speed in its current direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bullet.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar bullet = scene.plugins.get('rexbulletplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Version Management Operations\nDESCRIPTION: Examples of committing and restoring data versions, including version aliases.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/restorabledata.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndata.commit();\n// or\ndata.commit(alias);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndata.restore(version);\n// or\ndata.version = version;\n// Rebuild from version 0\ndata.restore(version, true);\n// Reverse to last version\ndata.restore();\n```\n\n----------------------------------------\n\nTITLE: Setting Stretch Mode for a NinePatch2 Object\nDESCRIPTION: Sets the stretch mode for a NinePatch2 object, controlling how edges and internal areas are rendered when stretched. Supports both scaling and repeating modes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setStretchMode(mode);\n```\n\n----------------------------------------\n\nTITLE: Adding Sprite Sheet in Phaser 3\nDESCRIPTION: Adds a sprite sheet to the texture cache. This method automatically creates frames from a single image using a configuration object that defines frame dimensions and spacing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.addSpriteSheet(key, HTMLImageElement, config);\n// scene.textures.addAtlas(key, HTMLImageElement, config, dataSource);\n```\n\n----------------------------------------\n\nTITLE: Adding Wrap Container to Tweaker\nDESCRIPTION: Creates a container that wraps input rows into multiple lines with configurable item dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar childTweaker = tweaker.addWrap({\n    // title: titleA,\n\n    itemWidth: 0,\n    itemHeight: 0,\n});\n\n// childTweaker.addInput(...)\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Shapes Class in Phaser 3\nDESCRIPTION: Shows how to import the Custom Shapes class directly, create an instance, and add it to a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport CustomShapes from 'phaser3-rex-plugins/plugins/bbcodetext.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar customShapes = new CustomShapes(scene, x, y, width, height, config);\nscene.add.existing(customShapes);\n```\n\n----------------------------------------\n\nTITLE: Applying Kawase-blur Effect to Game Object in Phaser 3\nDESCRIPTION: Shows how to apply the Kawase-blur effect to a game object using the plugin instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-kawaseblur.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexkawaseblurpipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Columns Configuration in JavaScript\nDESCRIPTION: Configuration object for creating a multi-column layout in the Tweaker component. Each column can specify width, expansion behavior, and contain its own set of properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    $type: 'columns',\n    // $target:\n    columns: [\n        {\n            // width: 0,\n            // expand: true,\n            $properties: [\n                // ...\n            ]\n        },\n        {\n            // width: 0,\n            // expand: true,\n            $properties: [\n                // ...\n            ]\n        },\n        // ... More columns\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Chess Sprite Instance\nDESCRIPTION: Creates a new chess sprite instance and adds it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-sprite.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = new Sprite(board, tileX, tileY, tileZ, key, frame);\nscene.add.existing(chess);\n```\n\n----------------------------------------\n\nTITLE: Setting Bob Object Alpha in Phaser 3\nDESCRIPTION: Sets the alpha (transparency) value of a Bob object. This allows making the Bob partially or completely transparent without affecting its other properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nbob.setAlpha(v);\n// bob.aplha = v;\n```\n\n----------------------------------------\n\nTITLE: Controlling RotateTo Animation Flow\nDESCRIPTION: Methods to pause, resume, or stop the rotation animation of a game object with the RotateTo behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.pause();\nrotateTo.resume();\nrotateTo.stop();\n```\n\n----------------------------------------\n\nTITLE: Custom Expression Example: Random Integer\nDESCRIPTION: An example of adding a custom expression that generates a random integer between two values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.addExpression('randomInt', function (a, b) {\n    return Math.floor(a + Math.random() * (b - a + 1));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Question Manager Instance in Phaser 3\nDESCRIPTION: Shows how to create a question manager instance with various configuration options for handling questions and options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar questionManager = scene.plugins.get('rexQuest').add({\n    questions: undefined,\n    // format: undefined,\n    // delimiter: ',',\n    // types: {\n    //     question: 'q',\n    //     option: '',\n    // },\n    // convert: true,\n\n    quest: undefined,\n    // quest: {\n    //     shuffleQuestions: false,\n    //     shuffleOptions: false,\n    // }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Blitter Container in Phaser 3\nDESCRIPTION: Creates a new Blitter container at the specified coordinates using the given texture key. The Blitter is a specialized container for efficiently rendering multiple static images.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar blitter = scene.add.blitter(x, y, key);\n```\n\n----------------------------------------\n\nTITLE: Listening for List Open Events in DropDownList\nDESCRIPTION: Sets up an event listener for when the dropdown list panel opens.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.on('list.open', function(dropDownList, listPanel) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for List Close Events in DropDownList\nDESCRIPTION: Sets up an event listener for when the dropdown list panel closes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.on('list.close', function(dropDownList, listPanel) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Triggering TextBox Layout in Phaser 3\nDESCRIPTION: Shows how to trigger the layout of all TextBox elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.layout();\n```\n\n----------------------------------------\n\nTITLE: Easing Properties of Custom Game Objects\nDESCRIPTION: Commands to ease properties of game objects using to, from, and yoyo methods with configuration for duration, delay, easing function, and repetition.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_38\n\nLANGUAGE: markdown\nCODE:\n```\nNAME.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  delay=0\n  ease=Linear\n  repeat=0\n  wait=\n```\n\nLANGUAGE: markdown\nCODE:\n```\nNAME.from\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  delay=0\n  ease=Linear\n  repeat=0\n  wait=\n```\n\nLANGUAGE: markdown\nCODE:\n```\nNAME.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  delay=0\n  ease=Linear\n  repeat=0\n  wait=\n```\n\nLANGUAGE: markdown\nCODE:\n```\nGOTYPE.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  delay=0\n  ease=Linear\n  repeat=0\n  wait=\n```\n\nLANGUAGE: markdown\nCODE:\n```\nGOTYPE.from\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  delay=0\n  ease=Linear\n  repeat=0\n  wait=\n```\n\nLANGUAGE: markdown\nCODE:\n```\nGOTYPE.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  delay=0\n  ease=Linear\n  repeat=0\n  wait=\n```\n\nLANGUAGE: markdown\nCODE:\n```\n!NAME.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  delay=0\n  ease=Linear\n  repeat=0\n  wait=\n```\n\nLANGUAGE: markdown\nCODE:\n```\n!NAME.from\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  delay=0\n  ease=Linear\n  repeat=0\n  wait=\n```\n\nLANGUAGE: markdown\nCODE:\n```\n!NAME.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  delay=0\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Configuring Direction Masks for Different Grid Types\nDESCRIPTION: Examples of direction mask configurations for quad grid (4 and 8 directions) and hexagon grid to enable/disable matching in specific directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Quad grid, 4 directions\n{\n    0: true,  // set false to disable left/right matching\n    1: true   // set false to disable up/down matching\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Quad grid, 8 directions\n{\n    0: true,  // set false to disable left/right matching\n    1: true,  // set false to disable up/down matching\n    4: true,  // set false to disable left-down/right-up matching\n    5: true   // set false to disable right-down/left-up matching\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Hexagon grid\n{\n    0: true,\n    1: true,\n    3: true\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Children in Sizer in Phaser 3\nDESCRIPTION: Shows different methods to sort children within a sizer, including sorting by data, property, or custom callback function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.sortChildrenByData(key, descending).layout();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.sortChildrenByProperty(key, descending).layout();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.sortChildren(function(childA, childB){\n    // var valueA = childA.getData(key);\n    // var valueB = childB.getData(key);\n    // return valueB - valueA\n}).layout();\n```\n\n----------------------------------------\n\nTITLE: Handling Scroll Events\nDESCRIPTION: Example of handling scroll events emitted by the mouse wheel scroller, including the scroll increment value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheelscroller.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscroller.on('scroll', function(inc, gameObject, scroller) {\n\n}, scope)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in Game Setup\nDESCRIPTION: Demonstrates how to install and configure the path follower plugin in the game's configuration when using npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pathfollower.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport PathFollowerPlugin from 'phaser3-rex-plugins/plugins/pathfollower-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPathFollower',\n            plugin: PathFollowerPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Slider Enable State in TextArea\nDESCRIPTION: Shows how to enable or disable the slider component for scrolling the TextArea content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.setSliderEnable(enabled);\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Shape in Phaser 3\nDESCRIPTION: Creates a new grid shape game object in Phaser 3. Parameters include position, dimensions, cell size, fill color, and outline color.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-grid.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar grid = scene.add.grid(x, y, width, height, cellWidth, cellHeight, fillColor, fillAlpha, outlineFillColor, outlineFillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Creating Gravity Well for Particles in JavaScript\nDESCRIPTION: Creates a gravity well that attracts or repels particles based on their position. Parameters control the well's position, power, epsilon value, and gravity strength.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar well = particles.createGravityWell({\n    // x: 0,\n    // y: 0,\n    // power: 0,\n    // epsilon: 100,\n    // gravity: 50\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color for Graphics in Phaser 3\nDESCRIPTION: Sets the fill style color for subsequent drawing operations, specifying color in hexadecimal format and an optional alpha value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.fillStyle(color, alpha);   // color: 0xRRGGBB\n```\n\n----------------------------------------\n\nTITLE: Importing Cover Class Directly\nDESCRIPTION: Demonstrates how to import the Cover class directly for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Cover from 'phaser3-rex-plugins/plugins/cover.js';\n```\n\n----------------------------------------\n\nTITLE: Loading Bounds Plugin (Minify File)\nDESCRIPTION: Load the Bounds plugin in the preload stage and add bounds behavior to a game object\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bounds.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexboundsplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboundsplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bounds = scene.plugins.get('rexboundsplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Touch State Instance\nDESCRIPTION: Demonstrates how to create a Touch State instance and add it to a game object with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/touchstate.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar touchState = scene.plugins.get('rexTouchState').add(gameObject, {\n    // enable: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Questions from Question Manager in Phaser 3\nDESCRIPTION: Shows how to remove individual questions or all questions from the question manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nquestionManager.remove(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nquestionManager.removeAll();\n```\n\n----------------------------------------\n\nTITLE: Updating and Managing Frames in Phaser 3 Frame Manager (JavaScript)\nDESCRIPTION: Shows how to update textures, remove frames, and export to bitmap font using the Frame Manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/framemanager.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nframeManager.updateTexture();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nframeManager.remove(frameName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nframeManager.clear();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nframeManager.addToBitmapFont();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nframeManager.destroy();\n```\n\n----------------------------------------\n\nTITLE: Data Change Events in Phaser3 Tag Player\nDESCRIPTION: Event handlers for data setting and changing events in the Tag Player's data manager. These allow reacting to data changes with custom logic.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('setdata', function(tagPlayer, key, value){ /* ... */ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('changedata', function(tagPlayer, key, value, previousValue){ /* ... */ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('changedata-' + key, function(tagPlayer, value, previousValue){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Adding Raycaster Object via Plugin\nDESCRIPTION: Shows how to add a raycaster object to the scene using the global plugin reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar raycaster = scene.plugins.get('rexRaycaster').add(config);\n```\n\n----------------------------------------\n\nTITLE: Applying FishEye Effect to a Camera\nDESCRIPTION: Applies the FishEye post-processing effect to a Phaser camera using the plugin approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexfisheyepipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Button Class Directly in Phaser 3\nDESCRIPTION: Imports the Buttons class directly from the UI components package. This approach gives more control over initialization and is useful when extending the class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buttons } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = new Buttons(scene, config);\nscene.add.existing(buttons);\n```\n\n----------------------------------------\n\nTITLE: Configuring Press Gesture Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the gesture plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport GesturesPlugin from 'phaser3-rex-plugins/plugins/gestures-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexGestures',\n            plugin: GesturesPlugin,\n            mapping: 'rexGestures'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Transition Direction in Phaser 3 Transition Image\nDESCRIPTION: Sets the direction of the transition between textures. Options are '0' or 'out' to transit current texture out, or '1' or 'in' to transit next texture in.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTransitionDirection(dir);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Bar Color in Circular Progress\nDESCRIPTION: Demonstrates how to retrieve and set the color of the circular progress bar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar barColor = circularProgress.barColor;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setBarColor(color);\n// circularProgress.barColor = color;\n```\n\n----------------------------------------\n\nTITLE: Custom Round Rectangle Class Definition\nDESCRIPTION: Example of creating a custom class extending the RoundRectangleCanvas base class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-roundrectangle.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyRoundRectangleCanvas extends RexPlugins.GameObjects.RoundRectangleCanvas {\n    constructor(scene, x, y, width, height, radiusConfig, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient) {\n        super(scene, x, y, width, height, radiusConfig, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying GrayScale Effect to Camera with Global Plugin\nDESCRIPTION: Applies the grayscale effect to a camera using the globally configured plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGrayScalePipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Origin Position of Hexagon Grid\nDESCRIPTION: Sets the world position of the origin tile (0, 0) in the hexagon grid. Can be done using a method or by directly setting x and y properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagongrid.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.setOriginPosition(worldX, worldY);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.x = worldX;\ngrid.y = worldY;\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Coordinate Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to include the Viewport Coordinate plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/viewport-coordinate.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ViewportCoordinatePlugin from 'phaser3-rex-plugins/plugins/viewportcoordinate-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexViewportCoordinate',\n            plugin: ViewportCoordinatePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Calculating Squared Distance in Phaser 3\nDESCRIPTION: Method to calculate squared distance between two points without taking the square root, useful for performance optimization\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/distance.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar d = Phaser.Math.Distance.BetweenPointsSquared(a, b); // a, b: {x, y}\n```\n\n----------------------------------------\n\nTITLE: Configuring a TitleLabel with Comprehensive Options\nDESCRIPTION: Complete configuration example for creating a title label with all available options including layout mode, backgrounds, alignments, and spacing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = scene.rexUI.add.titleLabel({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    layoutMode: 0,\n\n    // rtl: false,\n\n    background: backgroundGameObject,\n\n    innerBackground: backgroundGameObject,\n\n    title: titleGameObject,\n    // wrapTitle: false,\n    // adjustTitleFontSize: false,\n    // expandTitleWidth: false,\n    // expandTitleHeight: false,\n    \n    separator: separatorGameObject,\n\n    icon: iconGameObject,\n    iconMask: false,\n\n    text: textGameObject,\n    // wrapText: false,\n    // adjustTextFontSize: false,\n    // expandTextWidth: false,\n    // expandTextHeight: false,\n\n    action: actionGameObject,\n    actionMask: false,\n\n    align: {\n        title: 'left',\n        text: 'left',\n        icon: 'center',\n        action: 'center'\n    },\n\n    space: {\n        left: 0, right: 0, top: 0, bottom: 0,\n        innerLeft: 0, innerRight: 0, innerTop: 0, innerBottom: 0,\n\n        title: 0, titleLeft: 0, titleRight: 0,\n        icon: 0, iconTop: 0, iconBottom: 0,\n        text: 0, textLeft: 0, textRight: 0,\n        separator: 0, separatorLeft: 0, separatorRight: 0,\n        actionTop: 0, actionBottom: 0,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Triangle with Advanced Configuration\nDESCRIPTION: Creates a triangle instance with detailed configuration options including color, direction, and padding settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle2.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = scene.add.rexTriangle({\n    x: 0,\n    y: 0,\n    width: 2,\n    height: 2,\n    color: undefined,\n    alpha: undefined,\n    strokeColor: undefined,\n    strokeAlpha: undefined,\n    strokeWidth: undefined,\n    arrowOnly: false,\n    direction: 0,\n    easeDuration: 0,\n    padding: 0,\n    radius: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tap Input to a Phaser 3 Scene or Game Object\nDESCRIPTION: Shows how to add tap input to either a scene or a specific game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-tap.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar tap = scene.rexGestures.add.tap(config);\n// var tap = scene.rexGestures.add.tap(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Starting CSV Scenario Execution in Phaser 3\nDESCRIPTION: Shows how to start running instructions in the CSV Scenario with optional label and offset.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvscenario.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscenario.start({\n    // label: '',\n    // offset: 0\n})\n```\n\n----------------------------------------\n\nTITLE: Extending RoundRectangleProgress with Custom Class\nDESCRIPTION: Demonstrates how to create a custom class that extends the RoundRectangleProgress base class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyRoundRectangleProgress extends RoundRectangleProgress {\n    constructor(scene, x, y, width, height, radius, barColor, value, config) {\n        super(scene, x, y, width, height, radius, barColor, value, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Text in Phaser 3 Dynamic Text\nDESCRIPTION: Method to remove text at a specific index position in a dynamic text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.removeText(index);\n```\n\n----------------------------------------\n\nTITLE: Handling Progress Value Change Events\nDESCRIPTION: Example of how to listen for and handle value change events from the custom progress bar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncustomProgress.on('valuechange', function(newValue, oldValue, customProgress){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Getting Cameras Below Pointer in Phaser 3\nDESCRIPTION: Shows how to retrieve an array of cameras that are below a specific pointer position in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar cameras = scene.cameras.getCamerasBelowPointer(pointer);\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Player Instance with Class Import in Phaser 3\nDESCRIPTION: Code for creating a TCRP player instance after importing the TCRP class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar player = new TCRP.Player(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Applying Split Effect to Game Object\nDESCRIPTION: Applies the Split Pipeline effect to a game object with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexsplitpipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Viewport Coordinate Properties to Game Object in Phaser 3\nDESCRIPTION: Shows how to add viewport-relative positioning properties to a game object using the imported method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/viewport-coordinate.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nAddViewportCoordinateProperties(gameObject, viewport, vpx, vpy);\ngameObject.vpx = 0.5;\ngameObject.vpy = 0.5;\ngameObject.vpxOffset = 0;\ngameObject.vpyOffset = 0;\n```\n\n----------------------------------------\n\nTITLE: Syncing Body Position and Size in Phaser 3\nDESCRIPTION: Refreshes the body of a static game object to sync its position and size. This method is useful when the game object's properties have been modified outside of the physics system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.refreshBody();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Skewable Render Texture Class in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to create a custom class extending the SkewRenderTexture class, allowing for additional functionality or overrides.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-rendertexture.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MySkewRenderTexturege extends SkewRenderTexturege {\n    constructor(scene, x, y, width, height, config) {\n        super(scene, x, y, width, height, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Start Angle of an Arc in Phaser 3\nDESCRIPTION: Sets the start angle (in degrees) for an Arc game object. This can be done with the setStartAngle method or by directly setting the startAngle property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\narc.setStartAngle(startAngle);\n// arc.setStartAngle(startAngle, anticlockwise);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Transition Duration in TransitionImagePack\nDESCRIPTION: Demonstrates how to set and get the duration for transitions in a TransitionImagePack instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setDuration(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar duration = image.duration;\n```\n\n----------------------------------------\n\nTITLE: Reading Current and Previous States\nDESCRIPTION: Demonstrates how to read the current and previous states of an FSM instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar curState = states.state;\nvar preState = states.prevState;\n```\n\n----------------------------------------\n\nTITLE: Setting Radius Properties of Round Rectangle\nDESCRIPTION: Sets the radius values for all corners or individual corners of a round rectangle using setter methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nrect.setRadius(value);\nrect.setRadiusTL(value);  // number, or {x,y}\nrect.setRadiusTR(value);  // number, or {x,y}\nrect.setRadiusBL(value);  // number, or {x,y}\nrect.setRadiusBR(value);  // number, or {x,y}\n```\n\n----------------------------------------\n\nTITLE: Importing Line Progress Canvas Class in Phaser 3\nDESCRIPTION: Shows how to import the Line Progress Canvas class directly and create an instance in a Phaser 3 game scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-lineprogress.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport LineProgressCanvas from 'phaser3-rex-plugins/plugins/lineprogresscanvas.js';\n\nvar lineProgress = new LineProgressCanvas(scene, x, y, width, height, barColor, value, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Render Texture\nDESCRIPTION: Examples of various operations that can be performed on the render texture including drawing, erasing, clearing, and filling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-rendertexture.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar rt = image.rt;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.rt.draw(gameObject, x, y);\n// image.rt.draw(gameObject, x, y, alpha, tint);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.rt.erase(gameObject, x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.rt.clear();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.rt.fill(rgb, alpha);\n// image.rt.fill(rgb, alpha, x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Expanding Text Size in ImageInputLabel\nDESCRIPTION: Shows how to create a custom text object with a resize method for use in an ImageInputLabel when text expansion is enabled.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends Phaser.GameObjects.Text {\n    constructor(scene, x, y, text, style) {\n        super(scene, x, y, text, style);\n        scene.add.existing(this);\n    }\n    resize(width, height) {\n        this.setFixedSize(width, height);\n        return this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gradually Rotating Towards Target Angle in Phaser 3\nDESCRIPTION: Rotates from a current angle towards a target angle by a specified lerp factor. This is useful for smooth rotational animations and gradual turning.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar rad = Phaser.Math.Angle.RotateTo(currentAngle, targetAngle, lerp)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Orientation in Phaser 3 Round Rectangle Progress\nDESCRIPTION: Code snippets for retrieving and setting the orientation of a round rectangle progress bar in Phaser 3. Orientation can be horizontal (0) or vertical (1).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar orientation = roundRectangleProgress.orientation;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nroundRectangleProgress.setOrientation(orientation);\n// roundRectangleProgress.orientation = orientation;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements by Name in Color Components\nDESCRIPTION: Retrieves a game object by its name within the color components hierarchy. The optional recursive parameter determines whether to search through all children recursively.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = colorComponents.getElement('#' + name);\n// var gameObject = colorComponents.getElement('#' + name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Creating a Keys Hub Instance\nDESCRIPTION: This snippet demonstrates how to create a Keys Hub instance with configuration options including the singleMode setting.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyshub.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar keysHub = scene.plugins.get('rexKeysHub').add(scene, {\n    // singleMode: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Tag to Tag Text\nDESCRIPTION: Adds a single tag definition to an existing Tag Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.addTag(name, prop);\n```\n\n----------------------------------------\n\nTITLE: Creating Wait Events Instance from Global Plugin\nDESCRIPTION: Shows how to create an instance of the Wait Events plugin when it's configured globally in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar waitEvents = scene.plugins.get('rexWaitEvents').add(completeCallback, completeCallbackScope);\n```\n\n----------------------------------------\n\nTITLE: Swapping positions of two children in Phaser 3 List\nDESCRIPTION: Method to swap the positions of two children in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlist.swap(child1, child2);\n```\n\n----------------------------------------\n\nTITLE: Adding Quad Image Object in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to add a Quad Image object to a Phaser 3 game scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-image.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexQuadImage(x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Color Value from Color Components\nDESCRIPTION: Retrieves the current color value from the color components instance. Returns the color in the format configured for the component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = colorComponents.value;\n// var value = colorComponents.color;\n```\n\n----------------------------------------\n\nTITLE: Creating Round Rectangle with Object Parameter\nDESCRIPTION: Creates a round rectangle shape using an object parameter with configurable properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = scene.add.rexRoundRectangle({\n    x: 0,\n    y: 0,\n    width: undefined,\n    height: undefined,\n    radius: 0,\n\n    color: undefined,\n    alpha: undefined,\n\n    strokeColor: undefined,\n    strokeAlpha: undefined,\n    strokeWidth: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Group Remove Callback Function in Phaser 3\nDESCRIPTION: Defines a callback function that is called when removing group members, receiving the removed game object as a parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar callback = function(gameObject) {\n}\n```\n\n----------------------------------------\n\nTITLE: Object URL Management\nDESCRIPTION: Creating and releasing object URLs for file references.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar objectURL = URL.createObjectURL(file);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nURL.createObjectURL(objectURL);\n```\n\n----------------------------------------\n\nTITLE: Loading Eight Direction Plugin in Phaser 3 Scene\nDESCRIPTION: Load the minified version of the Eight Direction plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eightdirection.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexeightdirectionplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexeightdirectionplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Creating Messages Instance with Configuration\nDESCRIPTION: Creates a new instance of the Messages class with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar messages = scene.plugins.get('rexFirebase').add.messages({\n    root: '',\n    // pageItemCount: 100,\n\n    // senderID: '',\n    // senderName: '',\n    // receiverID: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Vertical Scroll Position in TextArea\nDESCRIPTION: Demonstrates how to retrieve the current vertical scroll position from the TextArea component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar childOY = textArea.childOY;\n```\n\n----------------------------------------\n\nTITLE: Playing Animation on Rope Object in Phaser 3\nDESCRIPTION: Starts an animation on the rope object using the specified animation key. Can control whether to ignore if already playing and specify a start frame.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrope.play(key);\n// rope.play(key, ignoreIfPlaying, startFrame);\n```\n\n----------------------------------------\n\nTITLE: Handling Data Easing Events in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to handle completion events for data easing, both for specific keys and for all easings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/easedata.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neasedata.on('complete-' + key, function(gameObject, easedata){\n\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neasedata.on('complete', function(key, gameObject, easedata){\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Injected Method Examples\nDESCRIPTION: Demonstrates usage of injected movement methods with various parameter options\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/easemove.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.moveFrom(duration, x, y);\ngameObject.moveFromPromise(duration, x, y, ease);\ngameObject.moveFromDestroy(duration, x, y);\ngameObject.moveTo(duration, x, y);\ngameObject.moveToPromise(duration, x, y, ease);\ngameObject.moveToDestroy(duration, x, y);\ngameObject.moveStop();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Focused Game Object\nDESCRIPTION: Methods for getting the currently focused game object and focusing on a specific game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = navigator.getFocusedTarget();\n// var gameObject = navigator.focusedTarget;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.focus(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.blur();\n```\n\n----------------------------------------\n\nTITLE: Getting Skew Values from a Skewable Image\nDESCRIPTION: Methods to retrieve the current horizontal and vertical skew values in both radians and degrees.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar skewXRad = image.skewX;\nvar skewXDeg = image.skewXDeg;\nvar skewYRad = image.skewY;\nvar skewYDeg = image.skewYDeg;\n```\n\n----------------------------------------\n\nTITLE: Handling File Complete Event in Phaser 3 Loader\nDESCRIPTION: Event handlers for when individual files complete loading, allowing for specific actions when certain assets are ready.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.on('filecomplete', function(key, type, data) {}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.on('filecomplete-' + type + '-' + key, function(key, type, data) {}, scope);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Display Text in JavaScript\nDESCRIPTION: Methods for getting and setting the text displayed on a dynamic text game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = txt.text;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = txt.displayText;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setText(text);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setDisplayText(text);\n```\n\n----------------------------------------\n\nTITLE: Setting Warp Parameters through Direct Property Assignment\nDESCRIPTION: Sets new horizontal and vertical warp parameter values for a CRT pipeline instance using direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.warpX = warpX;\npipelineInstance.warpY = warpY;\n```\n\n----------------------------------------\n\nTITLE: Importing Color Input Class in Phaser 3\nDESCRIPTION: Demonstrates how to import the Color Input class directly and create a color input object in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorinput.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ColorInput } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar colorInput = new ColorInput(scene, config);\nscene.add.existing(colorInput);\n```\n\n----------------------------------------\n\nTITLE: Manipulating FishEye Intensity\nDESCRIPTION: Gets or sets the intensity of the FishEye effect, which controls the strength of the distortion from 0 (none) to 1 (full).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar intensity = pipelineInstance.intensity;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.intensity = intensity;\n// pipelineInstance.intensity += value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setIntensity(intensity);\n```\n\n----------------------------------------\n\nTITLE: Adding ContainerLite Object in Phaser 3\nDESCRIPTION: Shows how to add a ContainerLite object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar container = scene.add.rexContainerLite(x, y);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Class Directly\nDESCRIPTION: Import and instantiate the CsvToHashTable class directly from the NPM package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvtohashtable.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport CsvToHashTable from 'phaser3-rex-plugins/plugins/csvtohashtable.js';\nvar table = new CsvToHashTable();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Line Progress Class\nDESCRIPTION: Shows how to create a custom class extending the base LineProgress functionality with additional features.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-lineprogress.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLineProgress extends LineProgress {\n    constructor(scene, x, y, width, height, barColor, value, config) {\n        super(scene, x, y, width, height, barColor, value, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Progress Plugin in Phaser 3\nDESCRIPTION: Code snippet showing how to load the custom progress plugin via the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcustomprogressplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcustomprogressplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Extending CircularProgress Class in Phaser3 Rex UI\nDESCRIPTION: Shows how to create a custom CircularProgress class by extending the base component. This allows for adding custom functionality to circular progress bars.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCircularProgress extends RexPlugins.UI.CircularProgress {\n    constructor(scene, x, y, radius, barColor, value, config) {\n        super(scene, x, y, radius, barColor, value, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Font Loading Event Handlers\nDESCRIPTION: Event handlers for monitoring font loading status and handling success/failure cases.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/webfontloader.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.load.on('webfontactive', function(fileObj, familyName){});\n\nthis.load.on('webfontinactive', function(fileObj, familyName){});\n```\n\n----------------------------------------\n\nTITLE: Loading Toast Queue Plugin\nDESCRIPTION: Code to load the toast queue plugin in the scene preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-toastqueue.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Creating Online User List Instance (Plugin Method)\nDESCRIPTION: JavaScript code to create an instance of the online user list using the Firebase plugin in a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar userList = scene.plugins.get('rexfirebaseplugin').add.onlineUserList(config);\n```\n\n----------------------------------------\n\nTITLE: Checking Last Question Status in Quest Task (JavaScript)\nDESCRIPTION: Illustrates how to determine if the current question is the last one in the Quest Task.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar isLast = quest.isLastQuestion();\n```\n\n----------------------------------------\n\nTITLE: Importing Real-Time Timers Class\nDESCRIPTION: Imports the Real-Time Timers class from the plugin package for direct usage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport RealTimeTimers from 'phaser3-rex-plugins/plugins/realtimetimers.js';\n```\n\n----------------------------------------\n\nTITLE: Getting Split Effect Instance\nDESCRIPTION: Retrieves the Split Pipeline effect instance from a game object or camera for further manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexSplitPipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexSplitPipeline').get(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexSplitPipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexSplitPipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Handling Rotate Event\nDESCRIPTION: Shows how to listen for the rotate event, which fires when any caught touch pointer moves when there are two pointers active.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrotate.on('rotate', function(rotate) {\n    // rotate.spinObject(gameObejects);\n    // var angle = rotate.rotation;\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating Slider Instance with Configuration\nDESCRIPTION: Comprehensive example of creating a slider instance with all available configuration options\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/slider.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar slider = scene.plugins.get('rexSlider').add(gameObject, {\n    // endPoints: [\n    //     {x:0, y:0},\n    //     {x:0, y:0}\n    // ],\n    // value: 0,\n    // enable: true,\n\n    // valuechangeCallback: null,\n    // valuechangeCallbackScope: null\n});\n```\n\n----------------------------------------\n\nTITLE: Handling TextBox Stop Event\nDESCRIPTION: Sets up an event handler that fires when typing is stopped via the stop() method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.on('stop', function() {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Incrementing X Position of Game Objects in Phaser3\nDESCRIPTION: Increments the x position of game objects by a specified value, with optional step, index, and direction parameters for creating graduated positions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.IncX(gameObjects, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Setting Bob Object Visibility in Phaser 3\nDESCRIPTION: Sets the visibility state of a Bob object. This allows showing or hiding a Bob without removing it from the Blitter container.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbob.setVisible(boolean);\n// bob.visible = v;\n```\n\n----------------------------------------\n\nTITLE: Wrap Configuration in JavaScript\nDESCRIPTION: Configuration object for creating a wrap container in the Tweaker component. Provides a titled wrapper around a set of properties with optional target override.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    $type: 'wrap', title: '',\n    // $target: \n    $properties: [\n        // ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FixWidthButtons Class in Phaser 3\nDESCRIPTION: Imports the FixWidthButtons class directly from the Rex UI components module. This allows manual instantiation of the FixWidthButtons object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthbuttons.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FixWidthButtons } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\nvar buttons = new FixWidthButtons(scene, config);\nscene.add.existing(buttons);\n```\n\n----------------------------------------\n\nTITLE: Placing Game Objects on a Line in Phaser3\nDESCRIPTION: Places game objects along a line geometry, evenly distributed from start to end. Optional ease parameter controls the distribution pattern.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.PlaceOnLine(gameObjects, line);\n// Phaser.Actions.PlaceOnLine(gameObjects, line, ease);\n```\n\n----------------------------------------\n\nTITLE: DropDownList List Background Callback Function\nDESCRIPTION: Example of the callback function used to create a background for the dropdown list panel. The function is called with the scene as parameter and the 'this' context is set to the dropdown list instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(scene) {\n    // this : dropDownList\n    return gameObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Game Objects Randomly in a Rectangle in Phaser3\nDESCRIPTION: Places game objects at random positions within a rectangle geometry, useful for creating scattered rectangular distributions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.RandomRectangle(gameObjects, rect);\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty RenderTexture in Phaser 3\nDESCRIPTION: Creates an empty render texture game object at specified coordinates with given dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar rt = scene.add.renderTexture(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Removing Constraints in Matter.js for Phaser 3\nDESCRIPTION: Method to remove a constraint from the Matter.js physics world in Phaser 3. Used to disconnect previously connected objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-world.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.world.removeConstraint(constraint);\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Progress with Config Object\nDESCRIPTION: Alternative approach to create a circular progress instance using a configuration object that includes all settings in one structure.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar circularProgress = scene.add.rexCircularProgress({\n    x: 0,\n    y: 0,\n    radius: 1,\n\n    barColor: undefined,\n    trackColor: undefined,\n    centerColor: undefined,\n    thickness: 0.2,\n    startAngle: Phaser.Math.DegToRad(270),\n    anticlockwise: false,\n    // iterations: 128,\n\n    value: 0,\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n    valuechangeCallback: function(newValue, oldValue, circularProgress) {\n    },  \n});\n```\n\n----------------------------------------\n\nTITLE: Setting Post Pipeline Effect on Camera\nDESCRIPTION: Applies the shockwave post pipeline effect directly to a camera using the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(ShockwavePostFx);\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Not Equal\nDESCRIPTION: Find documents where a property does not equal a specified value using the $ne operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$ne': value}});\n```\n\n----------------------------------------\n\nTITLE: Custom Font CSS Configuration\nDESCRIPTION: CSS configuration for loading custom web fonts with different weights and styles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/webfontloader.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n    font-family: 'My Font';\n    src: ...;\n}\n@font-face {\n    font-family: 'My Other Font';\n    font-style: normal;\n    font-weight: normal; /* or 400 */\n    src: ...;\n}\n@font-face {\n    font-family: 'My Other Font';\n    font-style: italic;\n    font-weight: normal; /* or 400 */\n    src: ...;\n}\n@font-face {\n    font-family: 'My Other Font';\n    font-style: normal;\n    font-weight: bold; /* or 700 */\n    src: ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Tabs Plugin in Phaser 3 Scene Preload\nDESCRIPTION: Loads the minified Tabs plugin file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Loading Anchor Plugin in Phaser3 Scene\nDESCRIPTION: Code to load the minified plugin file in the preload stage of a Phaser3 scene and add anchor behavior to a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/anchor.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexanchorplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexanchorplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar anchor = scene.plugins.get('rexanchorplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Loading the Board Plugin via Scene Plugin\nDESCRIPTION: Code to load the board plugin as a scene plugin during the preload stage of a Phaser3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagonmap.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\n----------------------------------------\n\nTITLE: Setting Board ID for LeaderBoard\nDESCRIPTION: JavaScript code to set the board ID property for the leaderboard, which is used to distinguish between different leaderboards.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.setBoardID(boardID);\n```\n\n----------------------------------------\n\nTITLE: Creating Toggle-Switch with Detailed Configuration Object\nDESCRIPTION: Creates a toggle-switch with a detailed configuration object that specifies all available options including appearance, behavior, and initial value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar toggleSwitch = scene.add.rexToggleSwitch({\n    x: 0,\n    y: 0,\n    width: undefined,\n    height: undefined,\n\n    color: 0x005cb2,\n    trackFillAlpha: 1,\n    falseValueTrackColor: undefined,\n    falseValueTrackFillAlpha: 1,\n\n    thumbColor: 0xffffff,\n    thumbAlpha: 1,\n\n    trackWidth: 0.9,\n    trackHeight: 0.5,\n    trackCornerRadius: (trackHeight * 0.5),\n\n    thumbHeight: (trackHeight * 0.9),\n    thumbWidth: (thumbHeight),\n    thumbCornerRadius: (thumbHeight * 0.5),\n\n    thumbLeft: 0.3,\n    thumbRight: (1 - thumbLeft),\n    rtl: false,\n\n    animationDuration: 150,\n\n    value: false,\n\n    click: undefined,\n    // click: {\n    //     mode: 1,            // 0|'press'|1|'release'\n    //     clickInterval: 100  // ms\n    //     threshold: undefined\n    // },\n    readOnly: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Light Size by Diameter in Phaser 3\nDESCRIPTION: Alternative methods for setting a light's size by specifying its diameter. Phaser provides multiple equivalent properties that can be used.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlight.diameter = diameter;\n// light.width = diameter;\n// light.height = diameter;\n// light.displayWidth = diameter;\n// light.displayHeight = diameter;\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha of Group Members in Phaser 3\nDESCRIPTION: Sets the alpha (transparency) of all group members to a given value, with an optional step parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setAlpha(value);\n// group.setAlpha(value, step);\n```\n\n----------------------------------------\n\nTITLE: Setting Hold Time in Phaser 3 Press Input\nDESCRIPTION: Sets the hold time requirement for the press input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npress.setHoldTime(holdTime);\n// press.holdTime = holdTime;\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Symbol Cache\nDESCRIPTION: A utility method to iterate through all stored symbols in the match object's cache with their corresponding tile positions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmatch.forEach(function(tileXY, symbol, board) {\n    // return true; // Break for each loop\n}, scope)\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating Rex Firebase Plugin (NPM Version)\nDESCRIPTION: JavaScript code to import the RexFirebase class from the phaser3-rex-plugins package and instantiate it. This approach is used when installing the plugin via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-overview.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js';    \nvar rexFire = new RexFirebase();\n```\n\n----------------------------------------\n\nTITLE: Importing UI Plugin in Game Configuration\nDESCRIPTION: Code snippet showing how to import and configure the UI plugin in the game configuration. This approach is used when installing via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Checking Press Status in Phaser 3\nDESCRIPTION: Determines if the press input is currently in a pressing state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPressing = press.isPressing;\n```\n\n----------------------------------------\n\nTITLE: Capturing Mouse Wheel Events Through Input Plugin in Phaser 3\nDESCRIPTION: Shows how to listen for wheel events via the scene's input plugin, which provides information about which game object was affected. This event fires for each touched game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheel.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.on('gameobjectwheel', function(pointer, gameObject, dx, dy, dz, event){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Managing Gashapon State in Phaser 3\nDESCRIPTION: Demonstrates how to get, clone, and reset the state of a Gashapon instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar status = gashapon.toJSON();\nvar state = gashapon.toJSON();\nvar gashapon2 = new Gashapon(state);\ngashapon.resetFromJSON(status);\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of Tile or Chess in Phaser 3 Field of View\nDESCRIPTION: Shows how to check if a specific tile or chess object is visible within the Field of View.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar isVisible = fieldOfView.isInLOS(chess);\n// var isVisible = fieldOfView.isInLOS(chess, visiblePoints);\n// var isVisible = fieldOfView.isInLOS(chess, visiblePoints, originTileXY);\n```\n\n----------------------------------------\n\nTITLE: Using Vector2 Right Constant in Phaser 3\nDESCRIPTION: References the constant Vector2 representing the right direction (1,0).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar vector = Phaser.Math.Vector2.RIGHT;\n```\n\n----------------------------------------\n\nTITLE: Creating a Triangle in Phaser 3\nDESCRIPTION: Initializes a new Triangle shape with three points defined by their coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = new Phaser.Geom.Triangle(x1, y1, x2, y2, x3, y3);\n```\n\n----------------------------------------\n\nTITLE: Calculating Line Slopes in Phaser 3\nDESCRIPTION: Demonstrates how to calculate both the slope and perpendicular slope of a line.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar slope = Phaser.Geom.Line.Slope(line);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar perpSlope = Phaser.Geom.Line.PerpSlope(line);\n```\n\n----------------------------------------\n\nTITLE: Loading Rex UI Plugin\nDESCRIPTION: Loading the minified version of the Rex UI plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simplelabel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Creating a Rectangle with Round Rectangle Plugin\nDESCRIPTION: Creates a regular rectangle by setting the radius of all corners to 0.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = scene.add.rexRoundRectangle(x, y, width, height, 0, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Creating an Octagon with Round Rectangle Plugin\nDESCRIPTION: Creates an octagon by setting iteration to 0 with defined width, height, and radius values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = scene.add.rexRoundRectangle(x, y, width, height, {\n    radius: radius,\n    iteration: 0\n}, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Getting Star Display Size in Phaser 3\nDESCRIPTION: Retrieves the display width and height of a star shape in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = star.displayWidth;\nvar height = star.displayHeight;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shake Effect in Phaser 3 Sizer Plugin\nDESCRIPTION: Methods for adding a shake effect to a sizer object, including duration and magnitude parameters. Also includes the related completion event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.shake(duration);\n// sizer.shake(duration, magnitude);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.shakePromise(duration, magnitude)\n    .then(function(){\n        // ...\n    })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.on('shake.complete', function(sizer) { });\n```\n\n----------------------------------------\n\nTITLE: Timeline Sound Configuration\nDESCRIPTION: Configuration object for playing sounds in timeline events, specifying sound key and additional config options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timeline.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    key,\n    config\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Achievement and Level Names\nDESCRIPTION: Methods to retrieve the names of all levels and achievements defined in the system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/achievements.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar names = achievements.getLevelNames();\n// var names = achievements.getLevelNames(out);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar names = achievements.getAchievementNames(levelName);\n// var names = achievements.getAchievementNames(levelName, out);\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Data in Firebase Item Table\nDESCRIPTION: JavaScript code for updating multiple values in a Firebase item table with a single operation using key paths.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntable.updateData({\n    `${key0}` : value0,\n    `${key0}/${key1}` : value1,\n    `${key0}/${key1}/${key2}` : value2,\n    ...\n})\n    .then(function() { })\n    .catch(function() { })    \n```\n\n----------------------------------------\n\nTITLE: Creating Event Sheet Manager with Configuration\nDESCRIPTION: Creates an event sheet manager with specific configuration options including a command executor.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar eventSheetManager = scene.plugins.get('rexMarkedEventSheets').add({\n    commandExecutor: Object,\n    parallel: false\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Polar Coordinate Plugin in Phaser 3 Scene\nDESCRIPTION: Loads the minified version of the polar coordinate plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/polar-coordinate.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexpolarcoordinateplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexpolarcoordinateplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Scene Files in Phaser 3\nDESCRIPTION: Method for loading external scene class files dynamically. The key must match the class name in the JavaScript file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.sceneFile(key, url);\n// scene.load.sceneFile(key, url, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Converting World to Local Coordinates in Phaser 3 Custom Shapes\nDESCRIPTION: Demonstrates how to convert world coordinates to local coordinates within a custom shapes object, with optional camera parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar localXY = customShapes.worldToLocalXY(worldX, worldY); // localXY: {x, y}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = customShapes.worldToLocalXY(worldX, worldY, camera, out);\n```\n\n----------------------------------------\n\nTITLE: Adding Gashapon Object Using Plugin in Phaser 3\nDESCRIPTION: Shows how to add a Gashapon object to a Phaser 3 scene using the plugin after configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar gashapon = scene.plugins.get('rexGashapon').add(config);\n```\n\n----------------------------------------\n\nTITLE: Removing Documents from a Result Set\nDESCRIPTION: Remove all documents in a result set from the collection using the remove method in a chain.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ncollection.chain().find({}).remove();\n```\n\n----------------------------------------\n\nTITLE: Listening for Language Change Events\nDESCRIPTION: Code demonstrating how to listen for language change events using the plugin's event system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexTextTranslation').on('languageChanged', function (lng) {\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Text in Phaser 3 Dynamic Text\nDESCRIPTION: Methods to insert text at a specific index position in a dynamic text object, with optional styling parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.insertText(index, text);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.insertText(index, text, \n    {\n        // bold: false,\n        // italic: false,\n        // fontSize: '16px',\n        // fontFamily: 'Courier',\n        // color: '#fff',\n        // stroke: '#fff',\n        // strokeThickness: 0,\n        // shadowColor: null,\n        // shadowOffsetX: 0,\n        // shadowOffsetY: 0,\n        // shadowBlur: 0,\n        // backgroundColor: null,\n        // backgroundHeight: undefined,\n        // backgroundBottomY: undefined,\n        // offsetY: 0,\n        // offsetY: 0,\n        // align: undefined\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Achievements Class Directly in Phaser 3\nDESCRIPTION: Demonstrates how to import and use the Achievements class directly without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/achievements.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Achievements from 'phaser3-rex-plugins/plugins/achievements.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar achievements = new Achievements();\n```\n\n----------------------------------------\n\nTITLE: Getting Line Type in Phaser 3\nDESCRIPTION: Shows how to get the type identifier for a line object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar type = line.type; // 2\n```\n\n----------------------------------------\n\nTITLE: Circle Shape Configuration for Matter.js Physics\nDESCRIPTION: Configuration object for creating a circular physics body. Default radius is calculated from the game object's dimensions if not specified.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'circle',\n    // radius: (Math.max(gameObject.width, gameObject.height) / 2),\n    // maxSides: 25\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Image from JSON Configuration\nDESCRIPTION: Creates a perspective image using the scene.make factory method with a JSON configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar perspectiveimage = scene.make.rexPerspectiveImage({\n    x: 0,\n    y: 0,\n    \n    key: null,\n    frame: null,\n\n    // hideCCW: false,\n    // gridWidth: 32,\n    // girdHeight: 32,\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Unity Texture Atlas in Phaser 3\nDESCRIPTION: Method for loading a texture atlas in Unity format, which consists of a texture image and a Unity-specific atlas data file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.unityAtlas(key, textureURL, atlasURL);\n// scene.load.unityAtlas(key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Setting Interpolation Values\nDESCRIPTION: Code demonstrating how to set interpolation values for dynamic text content in translations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation\n    .setInterpolation(object)\n    .updateText()\n```\n\n----------------------------------------\n\nTITLE: Custom DOM Element Class Implementation\nDESCRIPTION: Definition and instantiation of a custom DOM element class extending Phaser.GameObjects.DOMElement.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/domelement.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyDOMElement extends Phaser.GameObjects.DOMElement {\n    constructor(scene, x, y, element, style, innerText) {\n        super(scene, x, y, element, style, innerText);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar domElement = new MyDOMElement(scene, x, y, element);\n```\n\n----------------------------------------\n\nTITLE: Leaving and Managing Room\nDESCRIPTION: Handles leaving the room and kicking other users from the room.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nroom.leaveRoom();\nroom.kickUser(userID);\n```\n\n----------------------------------------\n\nTITLE: Managing Sizer Properties in JavaScript\nDESCRIPTION: Demonstrates how to get and set various properties of a sizer, including minimum size, dirty state, bounds, and different size measurements. It also shows how to push a sizer into bounds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar minWidth = sizer.minWidth;\nvar minHeight = sizer.minHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setMinSize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setMinWidth(width);\nsizer.setMinHeight(height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar dirty = sizer.dirty;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDirty();\n// sizer.setDirty(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.dirty = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setDirty(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.dirty = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar leftBound = sizer.left;\nvar rightBound = sizer.right;\nvar topBound = sizer.top;\nvar bottomBound = sizer.bottom;\nvar centerX = sizer.centerX;\nvar centerY = sizer.centerY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.left = leftBound;\nsizer.right = rightBound;\nsizer.top = topBound;\nsizer.bottom = bottomBound;\nsizer.centerX = centerXBound;\nsizer.centerY = centerYBound;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.alignLeft(leftBound);\nsizer.alignRight(rightBound);\nsizer.alignTop(topBound);\nsizer.alignBottom(bottomBound);\nsizer.alignCenterX(centerXBound);\nsizer.alignCenterY(centerYBound);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = sizer.width;\nvar height = sizer.height;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar displayWidth = sizer.displayWidth;\nvar displayHeight = sizer.displayHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar innerWidth = sizer.innerWidth;\nvar innerHeight = sizer.innerHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar minWidth = sizer.minWidth;\nvar minHeight = sizer.minHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar minInnerWidth = sizer.minInnerWidth;\nvar minInnerHeight = sizer.minInnerHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.pushIntoBounds();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.pushIntoBounds(bounds);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Namespace\nDESCRIPTION: Code showing how to set the default namespace for translations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexTextTranslation').setDefaultNamespace(namespace);\n```\n\n----------------------------------------\n\nTITLE: Measuring Text Margins in Phaser 3\nDESCRIPTION: Measures the left margin of a test string. Useful for determining text positioning and alignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar leftMargin = txt.measureTextMargins(testString).left;\n```\n\n----------------------------------------\n\nTITLE: Shifting Positions of Game Objects in Phaser3\nDESCRIPTION: Sets the position of the first game object to (x, y), and places each subsequent game object at the position of the previous one, creating a chain effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.ShiftPosition(gameObjects, x, y, direction, output);\n```\n\n----------------------------------------\n\nTITLE: Creating RoundRectangleProgress Instance with Minify Plugin\nDESCRIPTION: Creates a RoundRectangleProgress game object after loading the minified plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar roundRectangleProgress = scene.add.rexRoundRectangleProgress(x, y, width, height, radius, barColor, value, config);\n```\n\n----------------------------------------\n\nTITLE: Creating CharacterCache Instance\nDESCRIPTION: Demonstrates the configuration options when creating a new CharacterCache instance\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/charactercache.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar characterCache = scene.plugins.get('rexCharacterCache').add({\n    key: '',  \n    cellWidth: 32,\n    cellHeight: 32,\n    maxCharacterCount: 4096,\n    freqMode: true,\n    style: textStyle,\n    // textObject: textGameOject,\n    content: '',\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Rotate Behavior\nDESCRIPTION: Shows different methods to enable or disable the Rotate behavior on a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotate.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrotate.setEnable();\n// or\nrotate.enable = true;\n\n// Disable\nrotate.setEnable(false);\n// or\nrotate.enable = false;\n```\n\n----------------------------------------\n\nTITLE: Loading rexUI Plugin via Minified File in Phaser 3\nDESCRIPTION: Code for loading the rexUI plugin as a scene plugin using the minified file and creating a simple text box instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletextbox.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Adding Horrifi Effect to Camera with Configuration\nDESCRIPTION: Applies the Horrifi post-processing effect to a camera with specified configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexHorrifiPipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Registering Post FX Pipeline at Runtime\nDESCRIPTION: Code to register a post FX pipeline class after the game has started running.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineManager = scene.sys.renderer.pipelines;\npipelineManager.addPostPipeline(PostFxName, MyPostFxClass);\n```\n\n----------------------------------------\n\nTITLE: Setting Translation Key and Updating Text\nDESCRIPTION: Code showing how to set a translation key and update the text object's content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation\n    .setTranslationKey(key)\n    .updateText()\n```\n\n----------------------------------------\n\nTITLE: Handling Post-Layout Events for Children in Phaser 3 Sizer\nDESCRIPTION: Demonstrates how to listen for the 'sizer.postlayout' event on child elements after a layout operation. This event provides access to the child's previous state, allowing for comparison and additional processing based on layout changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nchild.on('sizer.postlayout', function(child, sizer){\n    var prevState = sizer.getChildPrevState(child);\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Content Element in Dialog - JavaScript\nDESCRIPTION: Gets the content game object from a dialog. This allows access to the content element for further manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar content = dialog.getElement('content');\n```\n\n----------------------------------------\n\nTITLE: Accessing Quad Image Control Points in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to access the control points of a Quad Image instance in Phaser 3, for both 4-point and 9-point modes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-image.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar controlPoints = image.controlPoints;\n\n// 4 vertex control points\nvar topLeftPoint = image.topLeft;         // image.controlPoints[0]\nvar topRightPoint = image.topRight;       // image.controlPoints[1]\nvar bottomLeftPoint = image.bottomLeft;   // image.controlPoints[2]\nvar bottomRightPoint = image.bottomRight; // image.controlPoints[3]\n\n// 9 vertex control points\nvar topLeft = image.topLeft;               // image.controlPoints[0]\nvar topCenter = image.topCenter;           // image.controlPoints[1]\nvar topRight = image.topRight;             // image.controlPoints[2]\nvar centerLeft = image.centerLeft;         // image.controlPoints[3]\nvar center = image.center;                 // image.controlPoints[4]\nvar centerRight = image.centerRight;       // image.controlPoints[5]\nvar bottomLeft = image.bottomLeft;         // image.controlPoints[6]\nvar bottomCenter = image.bottomCenter;     // image.controlPoints[7]\nvar bottomRight = image.bottomRight;       // image.controlPoints[8]\n```\n\n----------------------------------------\n\nTITLE: Removing children from a Phaser 3 List\nDESCRIPTION: Methods for removing a specific child, a child at a specific index, or clearing the entire List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlist.remove(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlist.removeAt(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlist.removeBetween(startIndex, endIndex);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlist.removeAll();\n```\n\n----------------------------------------\n\nTITLE: Handling Rotation Complete Event\nDESCRIPTION: Sets up an event listener for when the rotation animation completes (reaches target) in the RotateTo behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.on('complete', function(gameObject, rotateTo){});\n```\n\n----------------------------------------\n\nTITLE: Setting Board for Match Object\nDESCRIPTION: Shows how to set or change the board object after creating a match instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmatch.setBoard(board);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Glow Quality\nDESCRIPTION: Gets and sets the quality of the glow effect, which affects performance and appearance. Higher values give better quality but lower performance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Get\nvar quality = pipelineInstance.quality;\n\n// Set\npipelineInstance.setQuality(quality);\n// Or\npipelineInstance.quality = quality;\n// quality: 0 ~ 1, default is 0.1.\n// 0.1: 10 sample points.\n// 0.08: 8 sample points.\n// 1: 100 sample points.\n```\n\n----------------------------------------\n\nTITLE: Handling TCRP Recorder Events\nDESCRIPTION: Listens for events from the TCRP recorder such as start, pause, resume, and stop. This allows you to respond to changes in the recording state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.on('start', function(scene, recorder){});\n\nrecorder.on('pause', function(scene, recorder){});\n\nrecorder.on('resume', function(scene, recorder){});\n\nrecorder.on('stop', function(scene, recorder){});\n```\n\n----------------------------------------\n\nTITLE: Layout Elements in Edit Dialog\nDESCRIPTION: Arranges the position of all elements in the dialog. This should be called after modifying content to ensure proper layout and alignment of UI components.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.layout();\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha Values for Rope Object in Phaser 3\nDESCRIPTION: Sets alpha transparency for rope vertices. Can set a single alpha for all vertices, a gradient from top to bottom, or individual alpha values for each vertex.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrope.setAlphas(alpha);\n```\n\n----------------------------------------\n\nTITLE: Accessing Catched Touch Pointers\nDESCRIPTION: Shows how to access the caught touch pointers and their properties within the rotate input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar pointer0 = rotate.pointers[0];\n\nvar x = pointer0.x;\nvar y = pointer0.y;\nvar worldX = pointer0.worldX;\nvar worldY = pointer0.worldY;\n\nvar pointer0 = rotate.pointers[1];\n```\n\n----------------------------------------\n\nTITLE: Scrollable Configuration in JavaScript\nDESCRIPTION: Configuration object for creating a scrollable container in the Tweaker component. Contains a set of properties with optional title and target override.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    $type: 'scrollable', title: undefined,\n    // $target: \n    $properties: [\n        // ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Children's Align Mode in Phaser 3 Label Component\nDESCRIPTION: This snippet demonstrates how to change the alignment mode of children in a Label component. The 'mode' parameter determines the alignment (left/top, center, right/bottom) of icon, text, and action game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlabel\n    .setChildrenAlignMode(mode)\n    .layout();\n```\n\n----------------------------------------\n\nTITLE: FileChooser Accept Filter Configuration\nDESCRIPTION: Setting file type filters for the file chooser dialog.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfileChooser.setAccept(accept);\n```\n\n----------------------------------------\n\nTITLE: Getting Cover Fill Color and Alpha\nDESCRIPTION: Demonstrates how to retrieve the fill color and alpha values of a Cover object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = cover.fillColor;\nvar alpha = cover.fillAlpha;\n```\n\n----------------------------------------\n\nTITLE: Removing Dissolve Effect from Game Object in Phaser 3\nDESCRIPTION: Removes the dissolve effect from a game object using the plugin's remove method. This completely removes the post processing pipeline from the object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexDissolvePipeline').remove(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Grid Class in Phaser 3\nDESCRIPTION: Creates a custom grid class extending Phaser.GameObjects.Grid. Includes constructor and optional preUpdate method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-grid.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyGrid extends Phaser.GameObjects.Grid {\n    constructor(scene, x, y, width, height, cellWidth, cellHeight, fillColor, fillAlpha, outlineFillColor, outlineFillAlpha) {\n        super(scene, x, y, width, height, cellWidth, cellHeight, fillColor, fillAlpha, outlineFillColor, outlineFillAlpha);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Scroller Drag End Events in TextArea\nDESCRIPTION: Demonstrates how to listen for the end of touch/drag interactions in the TextArea's scroller component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.getElement('scroller').on('dragend', function(panel) {\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Triangle Class\nDESCRIPTION: Creates a custom triangle class extending the base Triangle implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle2.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTriangle extends Triangle {\n    constructor(scene, x, y, width, height, fillColor, fillAlpha) {\n        super(scene, x, y, width, height, fillColor, fillAlpha);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Progress Instance from Class\nDESCRIPTION: Code snippet showing how to create a custom progress bar instance when using the direct class import method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar customProgress = new CustomProgress(scene, x, y, width, height, config);\nscene.add.existing(customProgress);\n```\n\n----------------------------------------\n\nTITLE: Handling Roll Animation Events in Perspective Carousel\nDESCRIPTION: Code to listen for the 'complete' event that fires when a rolling animation finishes to trigger additional actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.roll.on('complete', function(){\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ExpBar Instance in Phaser 3\nDESCRIPTION: This code snippet demonstrates how to create an instance of a custom ExpBar class in Phaser 3. It uses the previously defined MyExpBar class to create a new ExpBar object with custom configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-expbar.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar expBar = new MyExpBar(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Importing ImageBox Class\nDESCRIPTION: Code for importing the ImageBox class directly from the Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imagebox.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ImageBox from 'phaser3-rex-plugins/plugins/imagebox.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Stretch Mode for NinePatch\nDESCRIPTION: Shows how to set the stretch mode for a NinePatch object, controlling how edges and internal cells are stretched.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setStretchMode(mode);\n```\n\n----------------------------------------\n\nTITLE: Drag State and Configuration Methods\nDESCRIPTION: Methods to check dragging state and configure axis rotation and mode.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/drag.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar isDragging = drag.isDragging;\ndrag.setAxisRotation(rad);\ndrag.setAxisMode(axis);\ndrag.drag();\ndrag.dragend();\n```\n\n----------------------------------------\n\nTITLE: Loading Dropped File to Cache in Phaser 3\nDESCRIPTION: Demonstrates how to load a dropped file into the Phaser cache, with both callback and Promise-based approaches.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filedropzone.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfileDropZone.loadFile(file, loaderType, key);\n// fileDropZone.loadFile(file, loaderType, key, cahceType, onComplete);\n\nfileDropZone.loadFilePromise(file, loaderType, key, cahceType)\n    .then(function(content) {\n\n    })\n```\n\n----------------------------------------\n\nTITLE: Updating Live2d Model in TypeScript\nDESCRIPTION: This snippet shows the process of updating a Live2d model, including loading parameters, updating motions, and saving the model's state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthis._model.loadParameters(); // 前回セーブされた状態をロード\nif (this._motionManager.isFinished()) {\n  // モーションの再生がない場合、待機モーションの中からランダムで再生する\n  this.startRandomMotion(\n    LAppDefine.MotionGroupIdle,\n    LAppDefine.PriorityIdle\n  );\n} else {\n  motionUpdated = this._motionManager.updateMotion(\n    this._model,\n    deltaTimeSeconds\n  ); // モーションを更新\n}\nthis._model.saveParameters(); // 状態を保存\n```\n\n----------------------------------------\n\nTITLE: Managing ScrollBar Tick in JavaScript\nDESCRIPTION: Methods to set and get the tick value of the ScrollBar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.setTick(tick);  // tick: 0~1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.setTick(tick, min, max);  // tick: min~max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tick = scrollBar.tick;  // tick: 0~1\n```\n\n----------------------------------------\n\nTITLE: Reading Data from LocalForage using Callback\nDESCRIPTION: Demonstrates how to read data from LocalForage using the callback approach. The getItem method accepts a key and a callback function that receives any error and the retrieved value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlocalforage.getItem(key, function(err, value){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiled JSON Parser in Phaser 3\nDESCRIPTION: Creates a new MapData object from a Tiled JSON object. Takes a map name, JSON data, and a flag for handling empty tiles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tiledmapdata.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar mapData = Phaser.Tilemaps.Parsers.Tiled.ParseJSONTiled(name, json, insertNull);\n```\n\n----------------------------------------\n\nTITLE: Adding TextAreaInput Object in Phaser 3\nDESCRIPTION: Creates a TextAreaInput object instance in a Phaser 3 scene using the Rex UI plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar textAreaInput = scene.rexUI.add.textAreaInput(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Polygon Points in Phaser 3\nDESCRIPTION: Updates the polygon's points using the setTo method. Points can be provided as coordinate pairs or as point objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npolygon.setTo(points);\n// points = [x0, y0, x1, y1, x2, y2, ...] , or [{x,y}, {x,y}, {x,y}, ...]\n```\n\n----------------------------------------\n\nTITLE: Removing Pages from TabPages Component\nDESCRIPTION: Methods for removing individual pages or all pages from the TabPages component, with options to destroy the removed game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.removePage(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.removePage(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.removePage(key, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.removePage(index, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.removeAllPages();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.removeAllPages(true);\n```\n\n----------------------------------------\n\nTITLE: Tween Seek and Management\nDESCRIPTION: Methods for seeking through tweens and managing tween instances including removal and destruction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tween.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntween.seek(amount);\ntween.remove();\ntween.destroy();\n```\n\n----------------------------------------\n\nTITLE: Creating TextArea Instance in Phaser 3\nDESCRIPTION: Demonstrates how to instantiate a custom TextArea class with scene and configuration parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar textArea = new MyTextArea(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Scanlines Parameters in Phaser 3 Pipeline\nDESCRIPTION: Methods to set and get the scanlines strength parameter. The scan strength determines the intensity of the scanlines effect applied to the rendered scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setScanStrength(value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.scanStrength = value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar scanStrength = pipelineInstance.scanStrength;\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Table Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the Grid Table plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport GridTablePlugin from 'phaser3-rex-plugins/plugins/gridtable-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexGridTablePlugin',\n            plugin: GridTablePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Dissolve Effect Instance from Game Object in Phaser 3\nDESCRIPTION: Retrieves the dissolve effect pipeline instance from a game object. Returns the first instance by default or can get all instances as an array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexDissolvePipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexDissolvePipeline').get(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Creating ContainerSkew Instance (JavaScript)\nDESCRIPTION: Shows how to create a new instance of ContainerSkew and add it to a container.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-skew.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar quad = scene.plugins.get('rexQuadImagePlugin').addContainerSkew(container, {\n    useParentBounds: false\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Step Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Illustrates how to import and configure the Step plugin in the game configuration when using npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/step.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport StepPlugin from 'phaser3-rex-plugins/plugins/step-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexStep',\n            plugin: StepPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Destroying Any Sprite\nDESCRIPTION: Destroys any sprite game object without specifying a name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_3\n\nLANGUAGE: phaser\nCODE:\n```\nSPRITE.destroy\n```\n\n----------------------------------------\n\nTITLE: Layouting Children in Overlap Sizer for Phaser 3\nDESCRIPTION: Shows how to trigger the layout of all children in the Overlap Sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overlapsizer.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.layout();\n```\n\n----------------------------------------\n\nTITLE: Stopping a Scene in Phaser 3\nDESCRIPTION: Shuts down a scene, clearing its display list, timers, and other resources.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scenemanager.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scene.stop(key);\n// scene.scene.stop();  // stop myself\n```\n\n----------------------------------------\n\nTITLE: Loading Phaser3 Rex UI Plugin in Preload Stage\nDESCRIPTION: Loads the Rex UI plugin as a scene plugin in the preload stage of a Phaser 3 game, making the UI components available through the scene.rexUI namespace.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Importing NumberBar Class in Phaser 3\nDESCRIPTION: Shows how to import the NumberBar class directly from the UI components package. This approach allows for more granular control over the imported components.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NumberBar } from \"phaser3-rex-plugins/templates/ui/ui-components.js\";\n\nvar sizer = new NumberBar(scene, config);\nscene.add.existing(sizer);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TabPages Subclass\nDESCRIPTION: Example of how to extend the TabPages class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTabPages extends RexPlugins.UI.TabPages {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tabPages = new MyTabPages(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Popping Expired Timers\nDESCRIPTION: Retrieves and removes expired timers from the Real-Time Timers instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar timers = realTimeTimers.popExpiredTimers();\n// var timers = realTimeTimers.popExpiredTimers(currentTimestamp);\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Top in TextArea\nDESCRIPTION: Shows how to scroll the content to the top position, equivalent to setting the scroll percentage to 0.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.scrollToTop();\n```\n\n----------------------------------------\n\nTITLE: Handling Game Object Pointer Out Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for when a pointer moves out of a game object (chess piece) on the board. The callback receives the pointer object and the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('gameobjectout', function(pointer, gameObject) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('board.pointerout', function(pointer) {\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Cost Function for Monopoly Instance\nDESCRIPTION: Sets the cost function for a Monopoly instance, either as a constant value or a callback function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-monopoly.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmonopoly.setCostFunction(cost);\n// Or\nmonopoly.setCostFunction(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Installs the Rex plugins package from npm, which includes the bullet plugin. This is the recommended method for projects using a build system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bullet.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Alpha Management Methods\nDESCRIPTION: Methods for getting and setting the alpha transparency of the line.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-line.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = line.alpha;\n\nline.setAlpha(alpha);\n// line.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Implementing Word Wrap by Width in Phaser 3 Text\nDESCRIPTION: Demonstrates how to create a text object with word wrapping based on a specific width constraint.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.make.text({\n    x: 400,\n    y: 100,\n    text: 'The sky above the port was the color of television, tuned to a dead channel.',\n    origin: { x: 0.5, y: 0.5 },\n    style: {\n        font: 'bold 25px Arial',\n        fill: 'white',\n        wordWrap: { width: 300 }\n    },\n    // origin: {x: 0.5, y: 0.5},\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Music Instances in Phaser 3\nDESCRIPTION: Shows various methods to retrieve music instances in a Phaser 3 scene, including getting a single instance by key, all instances by key, all instances, and all currently playing instances.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvar music = scene.sound.get(key); // music instance, or null\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar musicArray = scene.sound.getAll(key); // music instance, or null\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar musicArray = scene.sound.getAll();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar musicArray = scene.sound.getAllPlaying();\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Bottom in TextArea\nDESCRIPTION: Demonstrates how to scroll the content to the bottom position, equivalent to setting the scroll percentage to 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.scrollToBottom();\n```\n\n----------------------------------------\n\nTITLE: Implementing Scale-Down Animation for Height Only in Phaser 3\nDESCRIPTION: Scales down a game object's height over a specified duration without destroying it, while keeping the width constant. Can be used with either callbacks or Promises.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDown(duration, 'y');\n// gameObject.scaleDown(duration, 'y', ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDownPromise(duration, 'y', ease)\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating Tile Texture with Rex Board Plugin in Phaser 3\nDESCRIPTION: Creates a tile texture using the Rex Board Plugin after it has been loaded.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-texture.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexBoard.createTileTexture(board, key, fillStyle, strokeStyle, lineWidth);\n```\n\n----------------------------------------\n\nTITLE: Setting Drag for Ship\nDESCRIPTION: Method to set the drag coefficient that affects how quickly the ship slows down.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nship.setDrag(drag);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ToggleSwitch Class\nDESCRIPTION: Imports the ToggleSwitch class directly and creates a new toggle-switch input instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ToggleSwitch from 'phaser3-rex-plugins/plugins/toggleswitch.js';\n```\n\n----------------------------------------\n\nTITLE: Importing NameValueLabel Class Directly\nDESCRIPTION: Code showing how to import the NameValueLabel class directly from the UI components module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NameValueLabel } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Opening DropDownList Panel Programmatically\nDESCRIPTION: Manually opens the dropdown list panel instead of waiting for user interaction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.openListPanel();\n```\n\n----------------------------------------\n\nTITLE: Adding Sprite Object in Phaser 3\nDESCRIPTION: Creates and adds a sprite object to the scene at the specified coordinates (x, y) using the given texture key. Optionally, a specific frame can be specified.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar sprite = scene.add.sprite(x, y, key);\n// var sprite = scene.add.sprite(x, y, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Script Block Execution in Pseudocode\nDESCRIPTION: Sets block value to 0 and prints text message\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/branch/1.if-a.md#2025-04-21_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nset\n  block=0\n\nprint\n  text=If A\n```\n\n----------------------------------------\n\nTITLE: Setting properties for all children in a Phaser 3 List\nDESCRIPTION: Method to set a specific property to a value for all children in the List, with optional start and end indices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nlist.setAll(property, value, startIndex, endIndex);\n```\n\n----------------------------------------\n\nTITLE: Calculating Ellipse Circumference in Phaser 3\nDESCRIPTION: Computes the circumference of an ellipse.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar circumference = Phaser.Geom.Ellipse.Circumference(ellipse);\n```\n\n----------------------------------------\n\nTITLE: Moving a child above another child in Phaser 3 List\nDESCRIPTION: Method to move one child above another specific child in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlist.moveAbove(child1, child2);  // Move child1 above child2\n```\n\n----------------------------------------\n\nTITLE: Conditional Check for Block Value\nDESCRIPTION: Checks if block variable equals 1\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/branch/3.else.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nblock == 1\n```\n\n----------------------------------------\n\nTITLE: Handling Particle Emitter Explode Event in JavaScript\nDESCRIPTION: Registers a callback function that executes when the emitter explodes a set of particles. The callback receives the emitter instance and the particle object as parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.on('explode', function(emitter, particle) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Minified Plugin in Phaser Scene\nDESCRIPTION: Loads the path follower plugin from a CDN in the scene's preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pathfollower.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexpathfollowerplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexpathfollowerplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Performing Set operations in Phaser 3\nDESCRIPTION: Shows how to perform standard set operations: union (A | B), intersection (A & B), and difference (A - B) between two Sets.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-set.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar setC = setA.union(setB);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar setC = setA.intersect(setB);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar setC = setA.difference(setB);\n```\n\n----------------------------------------\n\nTITLE: Adding Scrollable Panel to Tweaker\nDESCRIPTION: Creates a scrollable panel containing tweaker elements with optional height and title.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar childTweaker = tweaker.addScrollable({\n    // title: title,\n\n    // height: 0\n});\n\n// childTweaker.addInput(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hidden Input Text Plugin in Phaser 3\nDESCRIPTION: Shows the configuration options available when adding a hidden input text object to a text game object in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/hiddeninputtext.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar hiddenInputText = scene.plugins.get('rexHiddenInputTextPlugin').add(textGameObject, {\n    // inputType: 'text',    // 'text'|'password'|'textarea'|...\n    // type: 'text',    // 'text'|'password'|'textarea'|...\n\n    cursor: '|',\n    cursorFlashDuration: 1000,\n\n    // enterClose: true,\n\n    // onOpen: function (textObject, hiddenInputText) {   // Or onFocus:\n    // },\n    // onClose: function (textObject, hiddenInputText) {  // Or onBlur:\n    // },\n    // onUpdate: function (text, textObject, hiddenInputText) {\n    //     return text;\n    // },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Text Content from Tag Text\nDESCRIPTION: Methods to retrieve the source text with tags, plain text without tags, or specific substrings from a Tag Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar curContent = txt.text;\n\nvar plainText = txt.getPlainText();\n\nvar text = txt.getText(start, end);\n```\n\n----------------------------------------\n\nTITLE: Adding Page to Pages Container (Simple)\nDESCRIPTION: Methods to add a page to the Pages container with key, alignment, padding, and expansion options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npages.addPage(child, key, align, padding, expand);\n// pages.add(child, key, align, padding, expand);\n```\n\n----------------------------------------\n\nTITLE: Filtering Visible Tiles in Phaser 3 Field of View\nDESCRIPTION: Shows how to filter an array of chess objects or tile positions to only those that are visible within the Field of View.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = fieldOfView.LOS(chessArray);\n// var out = fieldOfView.LOS(chessArray, originTileXY);\n// var out = fieldOfView.LOS(chessArray, out);\n// var out = fieldOfView.LOS(chessArray, originTileXY, out);\n```\n\n----------------------------------------\n\nTITLE: Using Transit Method with Configuration Object in TransitionImage\nDESCRIPTION: An alternative approach to the transit method using a configuration object to specify transition parameters including key, frame, and callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimage.transit({\n    key: undefined,\n    // frame: undefined,\n    // dir: 0,\n    // onStart: function(parent, currentImage, nextImage, t) { },\n    // onStartScope: undefined,\n    // onProgress: function(parent, currentImage, nextImage, t) { },\n    // onProgressScope: undefined,\n    // onComplete: function(parent, currentImage, nextImage, t) { },\n    // onCompleteScope: undefined,\n    // duration: 1000,\n    // ease: 'Linear',\n    // mask: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Tabs Object to Phaser 3 Scene\nDESCRIPTION: Creates a new Tabs object and adds it to the current Phaser 3 scene using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar tabs = scene.rexUI.add.tabs(config);\n```\n\n----------------------------------------\n\nTITLE: Checking if a User is First in Online User List\nDESCRIPTION: JavaScript code showing how to determine if a specific user (or the current user) is the first user in the list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar isFirstUser = userList.isFirstUser(userID);\n// var isFirstUser = userList.isFirstUser();  // Current user is first user\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Properties in Phaser 3\nDESCRIPTION: Demonstrates various methods to set Circle properties such as position and radius.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-circle.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.setTo(x, y, radius);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Circle.CopyFrom(source, dest);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.setPosition(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.x = 0;\ncircle.y = 0;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.left = 0;       // circle.x\ncircle.top = 0;        // circle.y\n// circle.right = 0;   // circle.x\n// circle.bottom = 0;  // circle.y\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Circle.Offset(circle, dx, dy); // circle.x += dx, circle.y += dy\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Circle.OffsetPoint(circle, point); // circle.x += point.x, circle.y += point.y\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.radius = radius;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.diameter = diameter;  // diameter = 2 * radius\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Start Angle of Circular Progress Bar\nDESCRIPTION: Shows how to retrieve and set the start angle of the circular progress bar in radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar startAngle = circularProgress.startAngle;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setStartAngle(startAngle);\ncircularProgress.startAngle = startAngle;\n```\n\n----------------------------------------\n\nTITLE: Setting Scroller Enable State in TextArea\nDESCRIPTION: Demonstrates how to enable or disable the scroller component for touch/drag scrolling of the TextArea content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.setScrollerEnable(enabled);\n```\n\n----------------------------------------\n\nTITLE: Defining Cost Function for Monopoly Movement\nDESCRIPTION: Defines a cost function callback for calculating movement costs in the Monopoly behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-monopoly.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar callback = function(curTileXY, preTileXY, monopoly) {\n    return cost;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Choice Buttons in Dialog - JavaScript\nDESCRIPTION: Multiple ways to access choice buttons in a dialog. Allows retrieving all choice buttons or a specific button by index.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = dialog.getElement('choices');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = dialog.getChoice(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = dialog.getElement('choices[' + index + ']');\n```\n\n----------------------------------------\n\nTITLE: Getting Display Size of an Arc in Phaser 3\nDESCRIPTION: Retrieves the display width and height values of an Arc game object. These represent the rendered dimensions of the arc.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = arc.displayWidth;\nvar height = arc.displayHeight;\n```\n\n----------------------------------------\n\nTITLE: Creating LayerManager with Array Configuration\nDESCRIPTION: Demonstrates creating a LayerManager with a simpler array configuration that just defines the layer names or properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar layerManager = scene.plugins.get('rexLayerManager').add(scene, \n    ['layer0', 'layer1', ...]\n    // [{name, cameraName, scrollFactor}, ...]\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Line Class Extension\nDESCRIPTION: Defines a custom class extending Phaser.GameObjects.Line with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-line.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCurve extends Phaser.GameObjects.Line {\n    constructor(scene, x, y, x1, y1, x2, y2, strokeColor) {\n        super(scene, x, y, x1, y1, x2, y2, strokeColor);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing i18next with Configuration Options\nDESCRIPTION: Code showing the full list of configuration options for initializing i18next, including language, namespaces, and backend options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexTextTranslation').initI18Next(scene, {\n    lng: 'dev',\n    fallbackLng: 'dev',\n    ns: 'translation',\n\n    // resources: {\n    //     'dev': {\n    //         'translation': {\n    //             key: value,  \n    //         }\n    //     }\n    // }\n\n    // debug: true,\n    \n    // backend: {\n    //     loadPath: '',\n    //     parse: function(data) { return JSON.parse(data); }\n    // },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Expression Parser Instance\nDESCRIPTION: Shows the standard way to create an Expression Parser instance from the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = scene.plugins.get('rexExpressionParserPlugin').add();\n```\n\n----------------------------------------\n\nTITLE: Face Management Methods\nDESCRIPTION: Methods for managing and modifying face states and textures.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flip.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar face = flip.face;\nflip.setFace(face);\nflip.toggleFace();\nflip.setFrontFace(key, frame);\nflip.setBackFace(key, frame);\n```\n\n----------------------------------------\n\nTITLE: Getting Plugged Key Objects from Keys Hub\nDESCRIPTION: This snippet shows how to retrieve plugged key objects from the Keys Hub using a key string or keyCode number.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyshub.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObject = keysHub.getKeyObjects(key);\n```\n\n----------------------------------------\n\nTITLE: Adding FSM Object Using Imported Plugin\nDESCRIPTION: Shows how to add an FSM object to a scene using the imported plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar states = scene.plugins.get('rexFSM').add(config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pre-FX Pipeline from Game Object in Phaser 3\nDESCRIPTION: This snippet shows how to get the current pre-fx pipeline instance from a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/prefx-pipeline.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = gameObject.pipeline;\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Image Instance Using Imported Class\nDESCRIPTION: Creates a perspective image game object using the imported class and adds it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new PerspectiveImage(scene, x, y, texture, frame, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Starting Animation Scene with Imported Plugin in Phaser 3\nDESCRIPTION: Starts the loading animation scene using the imported plugin configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loading-animation-scene.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexLoadingAnimationScene').startScene(config);\n```\n\n----------------------------------------\n\nTITLE: Accessing Slider Thumb Element in TextArea\nDESCRIPTION: Shows how to get a reference to the thumb part of the slider component in the TextArea.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nvar thumb = textArea.getElement('slider.thumb');\n```\n\n----------------------------------------\n\nTITLE: Adding ContainerSkew Behavior with Imported Plugin (JavaScript)\nDESCRIPTION: Shows how to add the ContainerSkew behavior using the imported QuadImagePlugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-skew.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar skew = scene.plugins.get('rexQuadImagePlugin').addContainerSkew(container, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Rotation Angles in Degrees\nDESCRIPTION: Retrieves the rotation angles of the perspective image in degrees.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar angleX = image.angleX; // Angle in degrees\nvar angleY = image.angleY; // Angle in degrees\nvar angleZ = image.angleZ; // Angle in degrees\n```\n\n----------------------------------------\n\nTITLE: Managing Line Spacing in Phaser 3 Text\nDESCRIPTION: Methods for getting and setting text line spacing, which adds to the height of the font when calculating overall line height. Controls vertical spacing between lines of text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineSpacing = txt.style.lineSpacing;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setLineSpacing(value);\n```\n\n----------------------------------------\n\nTITLE: Removing Data from Firebase Item Table\nDESCRIPTION: JavaScript code for removing data at specified keys in a Firebase item table with promise handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntable.removeData(key0)\n// table.removeData(key0, key1)\n// table.inremoveDatacValue(key0, key1, key2)\n    .then(function() { })\n    .catch(function() { })    \n```\n\n----------------------------------------\n\nTITLE: Adding InTouching Behavior to a Game Object via Plugin\nDESCRIPTION: Adds the InTouching behavior to a game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar intouching = scene.plugins.get('rexintouchingplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Layers from LayerManager\nDESCRIPTION: Demonstrates how to get a specific layer by name or retrieve all layers from the LayerManager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar layer = layerManager.getLayer(name);\n\nvar layers = layerManager.getLayers();\n// var out = layerManager.getLayers(out);\n```\n\n----------------------------------------\n\nTITLE: Importing CharacterCache Class\nDESCRIPTION: Shows how to import and instantiate the CharacterCache class directly\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/charactercache.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport CharacterCache from 'phaser3-rex-plugins/plugins/charactercache.js';\nvar characterCache = new CharacterCache(game, config);\n```\n\n----------------------------------------\n\nTITLE: Clearing TCRP Recorder Commands\nDESCRIPTION: Clears all recorded commands from the TCRP recorder, allowing you to start fresh.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.clear();\n```\n\n----------------------------------------\n\nTITLE: Managing Drop Enable State in Phaser 3 File Drop Zone\nDESCRIPTION: Provides methods to enable, disable, or toggle the drop functionality of the file drop zone.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filedropzone.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfileDropZone.setDropEnable();\n// fileDropZone.setDropEnable(true);\n\nfileDropZone.setDropEnable(false);\n\nfileDropZone.toggleDropEnable();\n```\n\n----------------------------------------\n\nTITLE: Getting Game Window Height in Phaser\nDESCRIPTION: Retrieves the configured height of the game window from the game config.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar height = game.config.height;\n// var height = scene.game.config.height;\n```\n\n----------------------------------------\n\nTITLE: Getting Video State as String in Youtube Player\nDESCRIPTION: Method to get the current state of the Youtube video as a descriptive string.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar videoStateString = player.videoStateString;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Camera Alpha in Phaser 3\nDESCRIPTION: Demonstrates how to set and get the alpha (transparency) value of a camera in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setAlpha(value);\n// camera.alpha = value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = camera.alpha;\n```\n\n----------------------------------------\n\nTITLE: Custom Sizer Class Definition\nDESCRIPTION: Shows how to create a custom sizer class extending the base Sizer functionality\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MySizer extends RexPlugins.UI.Sizer {\n    constructor(scene, x, y, minWidth, minHeight, orientation, config) {\n        super(scene, x, y, minWidth, minHeight, orientation, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Reveal Pre-FX Effect\nDESCRIPTION: Adds a reveal pre-fx effect to a game object with configurable wipe width, direction, and axis parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addReveal(wipeWidth, direction, axis);\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Instance with Configuration Options\nDESCRIPTION: Code demonstrating how to create a translation instance with configuration options including translation key, interpolation settings, and text update behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar translation = scene.plugins.get('rexTextTranslation').add(textGameObject, {\n    // translationKey: '',\n    // interpolation: {},\n\n    // updateText: true,\n\n    // setText: function(gameObject, text) { \n    //     gameObject.setText(text); \n    // }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Focus and Blur Events in GroupNavigator\nDESCRIPTION: Sets up event handlers for focus and blur events on navigated game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.on('focus', function(gameObject){\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.on('blur', function(gameObject){\n    \n})\n```\n\n----------------------------------------\n\nTITLE: Custom Label Class Implementation\nDESCRIPTION: Example of creating a custom label class by extending the base SimpleLabel component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simplelabel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLabel extends RexPlugins.UI.SimpleLabel {\n    constructor(scene, config, creators) {\n        super(scene, config, creators);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Float (Single Value)\nDESCRIPTION: Methods for setting a single float uniform value in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set1f(name, value0);\n// pipelineInstance.set1f(name, value0, shader);\n```\n\n----------------------------------------\n\nTITLE: Reusing a Timer in Phaser 3\nDESCRIPTION: Resets an existing timer with new configuration options and adds it back to the scene's time system. This allows for recycling timer objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntimer.reset({\n    delay: 500,                // ms\n    callback: callback,\n    args: [],\n    callbackScope: thisArg,\n    loop: false,\n    repeat: 0,\n    startAt: 0,\n    timeScale: 1,\n    paused: false\n})\nscene.time.addEvent(timer);\n```\n\n----------------------------------------\n\nTITLE: Frame Name Callback Function Example for NinePatch\nDESCRIPTION: An example of a custom frame name callback function that generates frame names based on column and row indices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(colIndex, rowIndex, baseFrame) {\n    return `${colIndex},${rowIndex}`\n}\n```\n\n----------------------------------------\n\nTITLE: Checking RotateTo Animation Status\nDESCRIPTION: Checks if the RotateTo behavior is currently active and rotating the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRunning = rotateTo.isRunning;\n```\n\n----------------------------------------\n\nTITLE: Flow Control Commands in Markdown\nDESCRIPTION: Lists various flow control commands for leaving current heading, exiting event sheet, and activating/deactivating event sheets.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/command-list.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[break]\n\n[exit]\n\n[deactivate]\n\n[deactivate title]\n\n[activate]\n\n[activate title]\n```\n\n----------------------------------------\n\nTITLE: Removing HSL Adjust Effect from Game Object in Phaser 3\nDESCRIPTION: Remove the HSL adjust effect from a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-hsladjust.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexHslAdjustPipeline').remove(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Rotating Group Members Around a Point in Phaser 3\nDESCRIPTION: Rotates all group members around a specified point by a given angle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.rotateAround(point, angle);\n```\n\n----------------------------------------\n\nTITLE: Configuring ConfirmActionButton Dialog Content in Phaser 3\nDESCRIPTION: Demonstrates how to set the content of the confirm dialog, including title, content, and button texts.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmactionbutton.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.setConfirmDialogContent({\n    title: {\n        text: '',\n        icon: undefined, iconFrame: undefined,\n        iconSize: undefined,\n        action: undefined, actionFrame: undefined,\n        actionSize: undefined,\n    },\n    content: {\n        text: '',\n        icon: undefined, iconFrame: undefined,\n        iconSize: undefined,\n        action: undefined, actionFrame: undefined,\n        actionSize: undefined,\n    },\n    buttonA: {\n        text: '',\n        icon: undefined, iconFrame: undefined,\n        iconSize: undefined,\n        action: undefined, actionFrame: undefined,\n        actionSize: undefined,\n    },\n    buttonB: {\n        text: '',\n        icon: undefined, iconFrame: undefined,\n        iconSize: undefined,\n        action: undefined, actionFrame: undefined,\n        actionSize: undefined,\n    },\n    choices: [\n        {\n            text: '', value: undefined,\n            icon: undefined, iconFrame: undefined,\n            iconSize: undefined,\n            action: undefined, actionFrame: undefined,\n            actionSize: undefined,\n        },\n        // ...\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Quad Render Texture Instance in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates two ways to create a Quad Render Texture instance with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-rendertexture.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexQuadRenderTexturege(x, y, width, height, {\n    // hideCCW: true,\n    // ninePointMode: false,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexQuadRenderTexturege({\n    // x: 0,\n    // y: 0,\n    // width: 32,\n    // height: 32,\n    // hideCCW: true,\n    // ninePointMode: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Loading and Creating DOM Elements\nDESCRIPTION: Methods to load HTML content and create DOM elements in the game scene, including loading from cache and direct HTML string creation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/domelement.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.html(key, url);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar domElement = scene.add.dom(x, y).createFromCache(key);  // elementType = 'div'\n// var domElement = scene.add.dom(x, y).createFromCache(key, elementType);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar domElement = scene.add.dom(x, y).createFromHTML(htmlString);  // elementType = 'div'\n// var domElement = scene.add.dom(x, y).createFromHTML(htmlString, elementType);\n```\n\n----------------------------------------\n\nTITLE: Checking Movement Status in Phaser 3 Board\nDESCRIPTION: Property to check if a chess piece is currently in motion, useful for conditional logic based on movement state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRunning = moveTo.isRunning;\n```\n\n----------------------------------------\n\nTITLE: Defining Typing Animation Flow with Mermaid Diagram\nDESCRIPTION: A mermaid graph diagram that illustrates the finite state machine (FSM) for a typing animation system, showing how typing progresses through different states, handles interruptions, and manages pagination.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/commandexecutor/textbox/Typing.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n\n    start --> typing((\"typing...\"))\n    typing --> |\"typing complete\"| pageend\n    typing --> |\"isTyping<br>click\"|pageend\n    pageend --> onPause[\"on pause<br>fire pause.input<br>wait click\"]\n    onPause --> |\"click\"| onResume[\"on resume<br>fire resume.input\"]\n    onResume --> isLastPage{\"isLastPage\"}\n    isLastPage --> |no| nextpage\n    isLastPage --> |yes| complete\n    nextpage --> typing\n\n    onPause --> autoResume\n    autoResume --> |\"timeout<br>fire click\"|onResume\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Repeat Image Class\nDESCRIPTION: Code for creating a custom class that extends the RepeatImage base class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyImage extends RepeatImage {\n    constructor(scene, x, y, width, height, key, frame) {\n        super(scene, x, y, width, height, key, frame);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Open Event Listener\nDESCRIPTION: Sets up an event listener for the open event, which triggers when the loading dialog has fully opened.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nloadingProgress.on('open', function(gameObject, loadingProgress) {\n})\n```\n\n----------------------------------------\n\nTITLE: JSON Conversion with Luxon DateTime\nDESCRIPTION: Demonstrates how to convert DateTime objects to and from JSON format.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/luxon.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar json = dt.toObject();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt = DateTime.fromObject(json);\n// var dt = DateTime.fromObject({year: 2017, month: 5, day: 15, hour: 17, minute: 36});\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Cover Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to import and configure the Cover plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport CoverPlugin from 'phaser3-rex-plugins/plugins/cover-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCoverPlugin',\n            plugin: CoverPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Toggle-Switch Input Object to Scene\nDESCRIPTION: Creates a toggle-switch input game object and adds it to the current scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar toggleSwitch = scene.add.rexToggleSwitch(x, y, width, height, color, config);\n```\n\n----------------------------------------\n\nTITLE: Loading PNG Appender Plugin in Phaser 3 Preload Stage\nDESCRIPTION: This snippet shows how to load the minified version of the PNG Appender plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/png-appender.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexpngappenderplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexpngappenderplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Getting Checker Style\nDESCRIPTION: Retrieves the current checker color and alpha values used for the checkbox check mark.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = checkbox.checkerColor;\nvar alpha = checkbox.checkAlpha;\n```\n\n----------------------------------------\n\nTITLE: Removing All Buttons of a Type from Dialog - JavaScript\nDESCRIPTION: Methods for clearing all buttons of a specific type from the dialog. Set destroyChild to true to destroy the button game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.clearChoices(destroyChild);\ndialog.clearActions(destroyChild);\ndialog.clearToolbar(destroyChild);\ndialog.clearLeftToolbar(destroyChild);\n```\n\n----------------------------------------\n\nTITLE: Getting Expired Timers\nDESCRIPTION: Retrieves an array of expired timers from the Real-Time Timers instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar timers = realTimeTimers.getExpiredTimers();\n// var timers = realTimeTimers.getExpiredTimers(currentTimestamp);\n```\n\n----------------------------------------\n\nTITLE: Configuring Glow Filter Plugin via Game Config\nDESCRIPTION: Configures the Glow Filter Pipeline plugin in the Phaser 3 game configuration as a global plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport GlowFilterPipelinePlugin from 'phaser3-rex-plugins/plugins/glowfilterpipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexGlowFilterPipeline',\n            plugin: GlowFilterPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing ContainerLite Class in Phaser 3\nDESCRIPTION: Shows how to import the ContainerLite class and create an instance in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ContainerLite from 'phaser3-rex-plugins/plugins/containerlite.js';\n\nvar container = new ContainerLite(scene, x, y);\nscene.add.existing(container);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Queries\nDESCRIPTION: Implement pagination by using offset and limit to retrieve a specific subset of documents in a result set.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.chain().find({}).offset(start).limit(count).data();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tree Elements in Phaser3\nDESCRIPTION: Examples of accessing different tree elements including background, toggle button, node body, and children nodes using getElement method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = tree.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar toggleButton = trees.getElement('toggleButton');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar nodeBody = trees.getElement('nodeBody');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar childrenNodes = trees.getElement('childrenNodes');\n```\n\n----------------------------------------\n\nTITLE: Creating Image Objects from JSON Configuration in Phaser 3\nDESCRIPTION: Creates an image game object using a JSON configuration object that supports various properties including position, texture, angle, alpha, and scaling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/image.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.make.image({\n    x: 0,\n    y: 0,\n    key: '',\n    // frame: '',\n\n    // angle: 0,\n    // alpha: 1,\n    // flipX: true,\n    // flipY: true,\n    // scale : {\n    //    x: 1,\n    //    y: 1\n    //},\n    // origin: {x: 0.5, y: 0.5},\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation Speed in RotateTo\nDESCRIPTION: Sets the rotation speed (in degrees per second) for the RotateTo behavior using method call or property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.setSpeed(speed);\n// rotateTo.speed = speed;\n```\n\n----------------------------------------\n\nTITLE: Loading GLSL Code in Phaser 3\nDESCRIPTION: Loads a GLSL shader file into the Phaser cache. The key is used to reference the shader in other parts of your game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.glsl(key, url);\n```\n\n----------------------------------------\n\nTITLE: Creating Color Input in Phaser 3 Tweaker\nDESCRIPTION: Creates a color picker input for selecting color values. The component binds to a numeric property of an object representing a color value (typically in hexadecimal format).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput(object, key, {\n    view: 'color',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n    \n    // orientation: 'x',\n\n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Bar-rectangle (Line-progress) Style in Phaser 3\nDESCRIPTION: This snippet demonstrates the structure for styling a Bar-rectangle (Line-progress) object in Phaser 3. It includes properties for bar color, ease settings, and various other styling options with state-specific overrides.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // $type: 'bar',\n\n    barColor: 0xffffff,\n    // easeDuration: 200,\n    // ease: 'Quad',\n    // rtl: false,\n\n    // alpha: 1,\n    // origin:\n    // originX: \n    // originY:\n    // color: 0xffffff,\n    // strokeColor: 0xffffff,\n    // strokeAlpha: 1,\n    // strokeWidth: 2,    \n    // width: 0,\n    // height: 0,\n\n    // Style override in active state\n    // 'active.barColor': undefined,\n    // 'active.color': undefined,\n    // 'active.alpha': undefined,\n    // 'active.strokeColor': undefined,\n    // 'active.strokeAlpha': undefined,\n    // 'active.strokeWidth': undefined,\n    // 'active.radius': undefined,\n    // 'active.xxx': ...\n\n    // Style override in hover state\n    // 'hover.barColor': undefined,\n    // 'hover.color': undefined,\n    // 'hover.alpha': undefined,\n    // 'hover.strokeColor': undefined,\n    // 'hover.strokeAlpha': undefined,\n    // 'hover.strokeWidth': undefined,\n    // 'hover.radius': undefined,\n    // 'hover.xxx': ...,\n    // 'hover.bar: true,\n\n    // Style override in disable state\n    // 'disable.barColor': undefined,\n    // 'disable.color': undefined,\n    // 'disable.alpha': undefined,\n    // 'disable.strokeColor': undefined,\n    // 'disable.strokeAlpha': undefined,\n    // 'disable.strokeWidth': undefined,\n    // 'disable.radius': undefined,\n    // 'disable.xxx': ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading UI Plugin in Phaser 3 Scene\nDESCRIPTION: Code to load the minified UI plugin in the preload stage of a Phaser 3 scene and create a title label.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = scene.rexUI.add.titleLabel(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Holy Grail Class Directly\nDESCRIPTION: Code for importing the Holy Grail class directly from UI components.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HolyGrail } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Accessing Board and Match Instances in Phaser 3 Bejeweled Plugin\nDESCRIPTION: These snippets demonstrate how to access the Board and Match instances from the Bejeweled plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar board = bejeweled.getBoard();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = bejeweled.getMatch();\n```\n\n----------------------------------------\n\nTITLE: Perspective Mode Controls\nDESCRIPTION: Methods for entering and exiting perspective mode and checking current state\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-perspective.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nperspective.enter();\nperspective.exit();\nvar isInPerspectiveMode = perspective.perspectiveState;\n```\n\n----------------------------------------\n\nTITLE: Removing from Collision Mask in Phaser 3 Arcade Physics\nDESCRIPTION: Removes a category from the collision mask, preventing this body from colliding with bodies in that category.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.removeCollidesWith(category);\n```\n\n----------------------------------------\n\nTITLE: Creating LZString Instance with Configuration\nDESCRIPTION: Demonstrates creating an LZString instance with encoding configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lzstring.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar lzstring = scene.plugins.get('rexLZString').add({\n    // encoding: 'none'     // 'none'|0, 'base64'|1, 'utf16'|2, 'uri'|3\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Angular Velocity in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current angular velocity of a physics body.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nvar av = gameObject.body.angularVelocity;\n```\n\n----------------------------------------\n\nTITLE: Using Phaser.Math.floorTo for Basic Floor Operation in JavaScript\nDESCRIPTION: Rounds a value down to the nearest integer using the floor function. This is the simplest form with default parameters (place=0, base=10).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/round-to.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.floorTo(value);\n```\n\n----------------------------------------\n\nTITLE: Listening for Button Click Events in DropDownList\nDESCRIPTION: Sets up an event listener for button click events in the dropdown list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.on('button.click', function(dropDownList, listPanel, button, index, pointer, event) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Getting Neighbor Chess in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This snippet shows how to get an array of neighbor chess objects for a given chess game object using the board object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObjects = board.getNeighborChess(chess, null);\n```\n\n----------------------------------------\n\nTITLE: Creating Typing Animation in Text-Box\nDESCRIPTION: Command to display text with a typing animation effect, supporting customization of display name, icon, animation speed, and interaction behavior after completion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/textbox-commands.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.typing\n  displayName=\n  icon=\n  iconFrame=\n  name=\n  expression=\n  more=false\n  text=\n  typingSpeed=\n  iconCrossDuration=\n  iconCrossMode='crossFade'\n  waitIconAnimationMode\n  clickAfterComplete=true\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Managing Touch State Enable Status\nDESCRIPTION: Shows how to get, set, and toggle the enabled status of the Touch State instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/touchstate.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar enabled = touchState.enable;  // enabled: true, or false\n\ntouchState.setEnable(enabled);  // enabled: true, or false\n// touchState.enable = enabled;\n\ntouchState.toggleEnable();\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Configuration\nDESCRIPTION: Demonstrates how to install and configure the plugin using NPM and game configuration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-slider.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading ConfirmActionButton Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the ConfirmActionButton plugin in the preload stage of a Phaser 3 scene using the minified file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmactionbutton.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Playing Animation on Perspective Sprite in Phaser 3\nDESCRIPTION: Plays an animation on a perspective sprite instance in a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-sprite.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.play(key);\n// sprite.play(key, ignoreIfPlaying);\n```\n\n----------------------------------------\n\nTITLE: Creating DropDownList in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Demonstrates how to add a dropdown list UI component to a Phaser 3 scene using the Rex UI plugin. The configuration includes options for the dropdown itself and the expandable list panel with extensive customization options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropDownList = scene.rexUI.add.dropDownList({\n    options: [\n        option0,\n        option1,\n        // ...\n    ],\n\n    list: {\n        // createBackgroundCallback: function(scene) {\n        //     // this : dropDownList\n        //     return gameObject;\n        // },\n\n        createButtonCallback: function(scene, option, index, options) {\n            // this : dropDownList\n            return gameObject;\n        },\n\n        // createTrackCallback: function(scene) {\n        //     // this : dropDownList\n        //     return gameObject;\n        // },\n\n        // createThumbCallback: function(scene) {\n        //     // this : dropDownList\n        //     return gameObject;\n        // },\n\n        mouseWheelScroller: undefined,\n        // mouseWheelScroller: {\n        //     focus: true,\n        //     speed: 0.1\n        // },\n\n        onButtonClick: function(button, index, pointer, event) {\n            // this : dropDownList\n        },\n\n        // onButtonOver: function(button, index, pointer, event) {\n        //     // this : dropDownList\n        // },\n\n        // onButtonOut: function(button, index, pointer, event) {\n        //     // this : dropDownList\n        // },\n\n        // easeIn: 500,\n        // transitIn: undefined,\n        // transitIn: function(listPanel, duration) {  },\n\n        // easeOut: 100,\n        // transitOut: undefined,\n        // transitOut: function(listPanel, duration) {  },\n\n        // wrap: false,\n        // maxHeight: undefined,\n        // width: undefined, \n        // height: undefined,\n        // alignParent: 'text',\n        // alignSide: '',\n        // expandDirection: 0,\n        // bounds: undefined,\n\n        // space: {\n        //     left: 0, right: 0, top: 0, bottom: 0, item: 0,\n        //     line: 0\n        // },\n\n        // draggable: false\n    },\n\n    setValueCallback: function(dropDownList, value, previousValue) {\n\n    },\n    setValueCallbackScope: undefined,\n    value: undefined,\n\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    orientation: 0,\n    // rtl: false,\n\n    background: backgroundGameObject,\n    icon: iconGameObject,\n    iconMask: false,\n    text: textGameObject,\n    expandTextWidth: false,\n    expandTextHeight: false,\n    action: actionGameObject,\n    actionMask: false,\n    align: undefined,\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        icon: 0,\n        text: 0,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: DropDownList Custom Transition Out Callback\nDESCRIPTION: Example of a custom callback function for controlling the closing transition of the dropdown list panel. It receives the list panel and duration as parameters, allowing for custom animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(listPanel, duration) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Drop-down List Class in Phaser 3\nDESCRIPTION: This snippet shows how to import the DropDownList class directly from the rex plugins package for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DropDownList } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Default Namespace\nDESCRIPTION: Method to set the default namespace for translations\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/i18next.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ni18next.setDefaultNamespace(namespace);\n```\n\n----------------------------------------\n\nTITLE: Configuring Eased Value Transitions\nDESCRIPTION: Methods for setting up and controlling animated transitions between progress values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Set ease duration\ncustomProgress.setEaseValueDuration(duration);\n\n// Set ease function\ncustomProgress.setEaseValueFunction(ease);\n\n// Ease value to\ncustomProgress.easeValueTo(value, min, max);  // value: min ~ max\n// or\ncustomProgress.easeValueTo(value);  // value: 0 ~ 1\n\n// Ease value repeat\ncustomProgress.easeValueRepeat(from, to);  // from, to: 0 ~ 1\n// customProgress.easeValueRepeat(from, to, repeat, repeatDelay);\n\n// Stop ease\ncustomProgress.stopEaseValue();\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle in Phaser 3 Graphics\nDESCRIPTION: Methods to draw filled and stroked rectangles using the Graphics object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rectangle.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// graphics.fillStyle(color, alpha);   // color: 0xRRGGBB\ngraphics.fillRectShape(rect);\n\n// graphics.lineStyle(lineWidth, color, alpha);   // color: 0xRRGGBB\ngraphics.strokeRectShape(rect);\n```\n\n----------------------------------------\n\nTITLE: Adding Child to Overlap Sizer in Phaser 3\nDESCRIPTION: Demonstrates how to add a child game object to the Overlap Sizer with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overlapsizer.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.add(child,\n    {\n        key: undefined,\n        align: 'center',     \n        offsetX: 0,\n        offsetY: 0,\n        offsetOriginX: 0,\n        offsetOriginY: 0,\n        padding: {left: 0, right: 0, top: 0, bottom: 0},\n        expand: true,        // expand: {width, height}\n        minWidth: undefined,\n        minHeight: undefined,\n        aspectRatio: 0,\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Button Click Event in Phaser 3\nDESCRIPTION: Shows how to set up an event listener for the 'click' event on a Button instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.on('click', function (button, gameObject, pointer, event) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Accessing Color Input Elements by Name in Phaser 3\nDESCRIPTION: Shows two methods to retrieve color input elements by name, with an optional recursive search parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorinput.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = colorInput.getElement('#' + name);\n// var gameObject = colorInput.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = colorInput.getByName(name);\n// var gameObject = colorInput.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Class\nDESCRIPTION: Code for importing the Slider class and creating a new instance\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/slider.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Slider from 'phaser3-rex-plugins/plugins/slider.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar slider = new Slider(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Importing FishEye PostFX Class\nDESCRIPTION: Imports the FishEye post-processing effect class directly and adds it to the game's pipeline configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport FishEyePostFx from 'phaser3-rex-plugins/plugins/fisheyepipeline.js';\nvar config = {\n    // ...\n    pipeline: [FishEyePostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Perspective Carousel Class in Phaser 3\nDESCRIPTION: Example of extending the PerspectiveCarousel class to create a custom carousel implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPerspectiveCarousel extends PerspectiveCarousel {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting ID from Alias\nDESCRIPTION: JavaScript code for retrieving the original ID associated with an alias from the FireStore database.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nidAlias.getId(alias)\n    .then(function(result) { \n        // var alias = result.alias;\n        // var id = result.id; // Return undefined if alias is not existed.\n    })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Managing Time Scale in Arcade TCRP\nDESCRIPTION: Code for setting and getting the time scale of the recorder, which must be an integer greater than or equal to 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.setTimeScale(value);\n// recorder.timeScale = value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar timeScale = recorder.timeScale;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Color Input Elements in Phaser 3\nDESCRIPTION: Demonstrates how to access various elements of a color input object, including background, swatch, and input text game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorinput.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = colorInput.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar icon = colorInput.getElement('swatch');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = colorInput.getElement('inputText');\n```\n\n----------------------------------------\n\nTITLE: Loading RoundRectangleProgress Plugin via Minify File in Phaser 3\nDESCRIPTION: Shows how to load the RoundRectangleProgress plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexroundrectangleprogressplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexroundrectangleprogressplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Complete Callback Function in Phaser 3\nDESCRIPTION: Custom callback function that gets invoked when loading is complete, allowing for delayed completion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loading-animation-scene.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(finishLoading, animationScene) {\n    // finishLoading();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring WarpPostFX in Phaser 3\nDESCRIPTION: This snippet shows how to import the WarpPostFX class and add it to the game config. It requires obtaining the minified file from GitHub and specifying the correct path.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp-transition.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WarpPostFX } from './dist/WarpPostFX.js';  // Path to your minify file\nvar config = {\n    // ...\n    pipeline: { WarpPostFX }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Handling InTouching 'intouch' Event\nDESCRIPTION: Adds an event listener for the 'intouch' event that fires when an object is being touched.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nintouching.on('intouch', function (intouching, gameObject, pointer) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Importing Alpha Mask Image Class in Phaser 3\nDESCRIPTION: Shows how to install the plugin from npm, import the class directly, and create an alpha-mask-image object instance in a scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/alphamaskimage.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport AlphaMaskImage from 'phaser3-rex-plugins/plugins/alphamaskimage.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new AlphaMaskImage(scene, x, y, key, frame, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Loading Sequence Plugin in Phaser3\nDESCRIPTION: Loads the minified sequence plugin in the preload stage of a Phaser3 scene\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sequence.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexsequenceplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexsequenceplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Getting Pixel Alpha from Texture in Phaser 3\nDESCRIPTION: Retrieves only the alpha value (transparency) of a specific pixel from a texture. The value ranges from 0 to 255, with 0 being fully transparent and 255 being fully opaque.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = scene.textures.getPixelAlpha(x, y, key);\n// var alpha = scene.textures.getPixelAlpha(x, y, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Configuring Clock Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Sets up the clock plugin in the global plugins configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ClockPlugin from 'phaser3-rex-plugins/plugins/clock-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexClock',\n            plugin: ClockPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Alpha Values for Rope Vertices in Phaser 3\nDESCRIPTION: Applies different alpha transparency values to each vertex point in the rope by providing an array of alpha values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrope.setAlphas(alphaArray);\n```\n\n----------------------------------------\n\nTITLE: Importing Split Pipeline Plugin via npm\nDESCRIPTION: Imports the Split Pipeline plugin from npm package and sets it up in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Images After Grid Cutting in Phaser 3\nDESCRIPTION: Retrieves the array of cell image game objects that were created after grid cutting either the current or next image.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar cellImageGameObjects = image.getCellImages();\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Terminal command to install the Phaser3 Rex Plugins package via NPM. This is required when using the import method for plugin installation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-overview.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Configuring Visible Faces of IsoBox in Phaser 3\nDESCRIPTION: Demonstrates how to control which faces of the IsoBox are visible. Each face (top, left, right) can be shown or hidden individually.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isobox.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nisoBox.setFaces(showTop, showLeft, showRight);\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation Angles in Degrees\nDESCRIPTION: Sets the rotation angles of the perspective image in degrees.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimage.angleX = angleX; // Angle in degrees\nimage.angleY = angleY; // Angle in degrees\nimage.angleZ = angleZ; // Angle in degrees\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Game Setup\nDESCRIPTION: Shows how to configure the plugin in the main game configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clickoutside.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ClickOutsidePlugin from 'phaser3-rex-plugins/plugins/clickoutside-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexClickOutsiden',\n            plugin: ClickOutsidePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Checking Character Status Conditions\nDESCRIPTION: Evaluates if a character has sufficient HP and MP values (both greater than 50). This condition likely determines if subsequent game actions can be performed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/json-data/json-data.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCharA.hp > 50 && CharA.mp > 50\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements using getByName Method\nDESCRIPTION: Alternative method to retrieve a game object by name within the color components. Functions identically to getElement with '#' prefix, providing direct access to named elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = colorComponents.getByName(name);\n// var gameObject = colorComponents.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Icon Texture in Phaser 3 Label Component\nDESCRIPTION: These snippets show how to set and get the texture and frame of the icon in a Label component. They demonstrate various methods to manipulate the icon's appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setTexture(key);\n// label.setTexture(key, frame);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setTexture(texture);\n// label.setTexture(texture, frame);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar texture = label.texture;\nvar frame = label.frame;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textureKey = label.texture.key;\nvar frameName = label.frame.name;\n```\n\n----------------------------------------\n\nTITLE: Getting Kawase-blur Effect Instance in Phaser 3\nDESCRIPTION: Shows how to retrieve the Kawase-blur effect instance from a game object or camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-kawaseblur.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexKawaseBlurPipeline').get(gameObject)[0];\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document by Unique Index\nDESCRIPTION: Get a document from a collection using a unique index key and value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar doc = collection.by(key, value);\n```\n\n----------------------------------------\n\nTITLE: Matter.js Physics Configuration Object Structure\nDESCRIPTION: Comprehensive configuration object for Matter.js physics bodies, including properties for shape, collision, friction, gravity effects, and more.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    label: 'Body',\n    shape: 'rectangle',\n    chamfer: null,\n\n    isStatic: false,\n    isSensor: false,\n    isSleeping: false,\n    ignoreGravity: false,\n    ignorePointer: false,\n\n    sleepThreshold: 60,\n    density: 0.001,\n    restitution: 0,\n    friction: 0.1,\n    frictionStatic: 0.5,\n    frictionAir: 0.01,\n\n    force: { x: 0, y: 0 },\n    angle: 0,\n    torque: 0,\n\n    collisionFilter: {\n        group: 0,\n        category: 0x0001,\n        mask: 0xFFFFFFFF,\n    },\n\n    // parts: [],\n\n    // plugin: {\n    //     attractors: [\n    //         (function(bodyA, bodyB) { return {x, y}}),\n    //     ]\n    // },\n\n    slop: 0.05,\n\n    timeScale: 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding UniqueItemList Object After Plugin Load (JavaScript)\nDESCRIPTION: Creates a new UniqueItemList instance after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar listA = scene.plugins.get('rexuniqueitemlistplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Panel Layer in Phaser3 Scrollable Panel\nDESCRIPTION: Gets the layer of panel assigned at config panel.mask.layer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar layer = panel.getElement('panelLayer');\n```\n\n----------------------------------------\n\nTITLE: Setting Star Outer Radius in Phaser 3\nDESCRIPTION: Sets the outer radius of a star shape in Phaser 3 using the setOuterRadius method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nstar.setOuterRadius(outerRadius);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shatter Class\nDESCRIPTION: Shows how to create a custom class extending the ShatterRenderTexture with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-rendertexture.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyShatterRenderTexturege extends ShatterRenderTexturege {\n    constructor(scene, x, y, width, height, config) {\n        super(scene, x, y, width, height, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new MyShatterRenderTexturege(scene, x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Camera to ScaleOuter\nDESCRIPTION: Code to manually add a camera for the ScaleOuter plugin to control.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaleouter.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexScaleOuter.add(camera);\n```\n\n----------------------------------------\n\nTITLE: Managing Time Scale for Clock in Phaser 3\nDESCRIPTION: Gets and sets the time scale of the clock, affecting the rate of time passage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar timeScale = clock.timeScale;\n\nclock.setTimeScale(timeScale);\n// clock.timeScale = timeScale;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Quad Image Class in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to define a custom Quad Image class extending the base QuadImage class in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-image.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyQuadImage extends QuadImage {\n    constructor(scene, x, y, texture, frame, config) {\n        super(scene, x, y, texture, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data Easing Plugin in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to load the data easing plugin in the preload stage of a Phaser 3 scene and add the ease-data behavior to a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/easedata.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexeasedataplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexeasedataplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar easedata = scene.plugins.get('rexeasedataplugin').add(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Setting TextBox Icon Texture\nDESCRIPTION: Changes the texture of the icon displayed in the text box. Optionally accepts a frame parameter for sprite atlases.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.setTexture(key);\n// label.setTexture(key, frame);\n```\n\n----------------------------------------\n\nTITLE: Binding Target to Tweaker in Phaser 3 UI\nDESCRIPTION: Sets a binding target object for a tweaker component. All input rows will bind to this target and update display status accordingly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.setBindingTarget(object);\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Status Properties in TextPage for Phaser 3\nDESCRIPTION: Properties for checking page status such as if current page is first or last, current page index, and total page count.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textpage.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar isLastPage = page.isLastPage;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isFirstPage = page.isFirstPage;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pageIndex = page.pageIndex;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pageIndex = page.pageCount;\n```\n\n----------------------------------------\n\nTITLE: Creating Rotate Instance with Configuration\nDESCRIPTION: Demonstrates how to create a Rotate instance with optional configuration parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotate.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotate = scene.plugins.get('rexRotate').add(gameObject, {\n    // speed: 180,\n    // enable: true,\n    // timeScale: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Easing Slider Value in JavaScript\nDESCRIPTION: Methods to ease the slider value to a target value, stop easing, set easing duration, and set easing function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-slider.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nslider.easeValueTo(value, min, max);  // value: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.easeValueTo(value);  // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.stopEaseValue();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.setEaseValueDuration(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.setEaseValueFunction(ease);\n```\n\n----------------------------------------\n\nTITLE: Creating RotateTo Instance with Class Import Approach\nDESCRIPTION: Creates a new RotateTo instance after importing the class directly, attaching the behavior to a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotateTo = new RotateTo(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Flipping Rope Object in Phaser 3\nDESCRIPTION: Toggles horizontal or vertical flipping of the rope texture. This is a rendering effect and doesn't affect the physical properties of the object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nrope.flipX = flip;\nrope.flipY = flip;\n```\n\n----------------------------------------\n\nTITLE: Resetting to Default Cursor in Phaser 3\nDESCRIPTION: Resets the cursor to the default style defined for the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursor.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.resetCursor(null, true);\n```\n\n----------------------------------------\n\nTITLE: Creating Triangle Game Object in Phaser 3\nDESCRIPTION: Basic triangle creation with position, vertices coordinates, and fill color parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = scene.add.triangle(x, y, x1, y1, x2, y2, x3, y3, fillColor);\n// var triangle = scene.add.triangle(x, y, x1, y1, x2, y2, x3, y3, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Saving File in Firebase File Manager\nDESCRIPTION: JavaScript code to save a file with header and content in the Firebase file manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-files.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.save(fileID, header, content);\n\n// Update\nfileManager.save(fileID, header, content, true);\n```\n\n----------------------------------------\n\nTITLE: Adding Folder to Tweaker\nDESCRIPTION: Creates a collapsible folder containing child tweaker elements. Can be expanded or collapsed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvar childTweaker = tweaker.addFolder({\n    title: titleA,\n\n    // expanded: true,\n});\n\n// childTweaker.addInput(...)\n```\n\n----------------------------------------\n\nTITLE: Checking Particle Effect Status\nDESCRIPTION: Shows how to check if the particle effect is currently running.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles-along-bounds.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRunning = particles.isRunning;\n```\n\n----------------------------------------\n\nTITLE: Layer Structure Visualization using Mermaid\nDESCRIPTION: A diagram showing the relationship between cameras, layers, and game objects in the Layer Manager system. It illustrates how different layers (BG, GO, UI) are connected to their respective cameras and how game objects are assigned to these layers.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph RL\n\n    subgraph Cameras\n      cameraBG[BG]\n      cameraGO[GO]\n      cameraUI[UI]\n    end\n\n    subgraph Layers\n      subgraph BG\n        layerBGBottom[BG-bottom]\n        layerBG[BG]\n        layerBGTop[BG-top]\n      end\n\n      subgraph GO\n        layerGOBottom[GO-bottom]\n        layerGO[GO]\n        layerGOTop[GO-top]\n      end\n\n      subgraph UI\n        layerUIBottom[UI-bottom]\n        layerUI[UI]\n        layerUITop[UI-top]\n      end\n    end\n\n    layerBGBottom --> cameraBG\n    layerBG --> cameraBG\n    layerBGTop --> cameraBG\n\n    layerGOBottom --> cameraGO\n    layerGO --> cameraGO\n    layerGOTop --> cameraGO\n\n    layerUIBottom --> cameraUI\n    layerUI --> cameraUI\n    layerUITop --> cameraUI\n\n    subgraph GameObjects\n      goBG0[\"Background\"] --> layerBG\n      goBG1[\"Background\"] --> layerBG\n\n      go0[GameObject] --> layerGO\n      go1[GameObject] --> layerGO\n      go2[GameObject] --> layerGO\n      go3[GameObject] --> layerGO\n\n      goUI0[Panel] --> layerUI\n      goUI1[Panel] --> layerUI\n      goSYSUI[System dialog] --> layerUITop\n    end\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask with Parameters in Phaser 3\nDESCRIPTION: Creates a bitmap mask directly with position and texture parameters without requiring a separate game object to be created first.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mask.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask =  scene.add.bitmapMask(undefined, x, y, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Enable State\nDESCRIPTION: Demonstrates how to get, set, and toggle the enable state of the rotate input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = rotate.enable;  // enable: true, or false\n\nrotate.setEnable(enable);  // enable: true, or false\n// rotate.enable = enable;\n\nrotate.toggleEnable();\n```\n\n----------------------------------------\n\nTITLE: Progress Event Listener\nDESCRIPTION: Sets up an event listener for the progress event, which triggers when the loading progress updates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nloadingProgress.on('progress', function(progress) {\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase Plugin in Phaser Preload\nDESCRIPTION: JavaScript code to load the Firebase plugin in the preload stage of a Phaser scene. This loads the minified plugin file from the GitHub repository.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfirebaseplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebaseplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Texture for Plane\nDESCRIPTION: Loads an image texture that can be used with a Plane object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/plane.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n```\n\n----------------------------------------\n\nTITLE: Updating a Firestore Document\nDESCRIPTION: Updates specific fields in an existing Firestore document without overwriting the entire document.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).doc(docName).update(keyValues)  // keyValues: { ... }\n    .then(function(doc) { /* ... */ })\n    .catch(function(error) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Line Start Position\nDESCRIPTION: Methods and properties for retrieving and setting the position of the line start point.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/line.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar x0 = line.x0;\nvar y0 = line.y0;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.setLineStartPosition(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.x0 = x;\nline.y0 = y;\n```\n\n----------------------------------------\n\nTITLE: Accessing Text Element in TextArea\nDESCRIPTION: Shows how to get a reference to the text game object of the TextArea component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = textArea.getElement('text');\n```\n\n----------------------------------------\n\nTITLE: Alternative Setting Star Outer Radius in Phaser 3\nDESCRIPTION: Sets the outer radius of a star shape in Phaser 3 using direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nstar.outerRadius = outerRadius;\n```\n\n----------------------------------------\n\nTITLE: Image Box Implementation\nDESCRIPTION: Creates an image box that maintains aspect ratio after scale-down resizing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.rexUI.add.imageBox(x, y, texture, frame, config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyImageBox extends RexPlugins.UI.ImageBox {\n    constructor(scene, x, y, texture, frame, config) {\n        super(scene, x, y, texture, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Image URI Loading Task with Direct Class Method\nDESCRIPTION: Code snippet showing how to invoke the Image URI Loader directly after importing the class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imageuriloader.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nImageURILoader.call(scene.load, key, uri);\n```\n\n----------------------------------------\n\nTITLE: Setting To-Texture Edge Parameters by Method in Phaser 3 Dissolve Effect\nDESCRIPTION: Sets the edge start and width parameters for the to-texture (target texture) using a method. These parameters control the appearance of the revealing edge.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setToEdge(edgeStart, edgeWidth);\n```\n\n----------------------------------------\n\nTITLE: Finding First Passing Test in Conditions Table\nDESCRIPTION: Shows how to find the first passing test name from the Conditions Table based on a given context.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/conditionstable.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar testName = table.anyPassTest(context);\n```\n\n----------------------------------------\n\nTITLE: Shape to Tile Position Conversions (JavaScript)\nDESCRIPTION: Demonstrates methods for converting various shapes (line, circle, rectangle, ellipse, triangle, polygon) to arrays of tile positions on the board.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = board.lineToTileXYArray(startWorldX, startWorldY, endWorldX, endWorldY);\n// var out = board.lineToTileXYArray(startWorldX, startWorldY, endWorldX, endWorldY, out);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = board.circleToTileXYArray(circle);\n// var out = board.circleToTileXYArray(circle, out);\n// var out = board.circleToTileXYArray(circle, testMode, out);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = board.rectangleToTileXYArray(rectangle);\n// var out = board.rectangleToTileXYArray(rectangle, out);\n// var out = board.rectangleToTileXYArray(rectangle, testMode, out);\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Events in Phaser 3 Drag-Rotate Plugin\nDESCRIPTION: Sets up event listeners for drag, dragstart, and dragend events in the drag-rotate plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dragrotate.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndragRotate.on('drag', function(dragRotate) {\n    // gameObject.rotation += dragRotate.deltaRotation;\n}, scope);\n\ndragRotate.on('dragstart', function(dragRotate) {\n\n}, scope);\n\ndragRotate.on('dragend', function(dragRotate) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Accessing Level and Experience Data in Phaser 3 Level Counter\nDESCRIPTION: Methods to retrieve current experience, level, required experience for next level, and to convert between experience and level values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/levelcounter.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar exp = levelCounter.getExp();\n// var exp = levelCounter.exp;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar level = levelCounter.getLevel();\n// var level = levelCounter.level;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar exp = levelCounter.requiredExp;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar exp = levelCounter.getExp(level);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar level = levelCounter.getLevel(exp);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar exp = levelCounter.getRequiredExpToNextLevel(level);\n// var exp = levelCounter.getRequiredExpToNextLevel(level, exp);\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Progress via Imported Plugin\nDESCRIPTION: Adds the loading-progress behavior after installing the plugin from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar loadingProgress = scene.plugins.get('rexLoadingProgress').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Getting All Child Elements in Phaser3 Rex UI\nDESCRIPTION: Method to retrieve all child items from the sizer component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar items = sizer.getElement('items');\n```\n\n----------------------------------------\n\nTITLE: Managing Max Lines in Phaser 3 Text\nDESCRIPTION: Methods to get and set the maximum number of lines allowed for a text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar maxLines = txt.style.maxLines;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setMaxLines(max);\n```\n\n----------------------------------------\n\nTITLE: Managing Event Sheet States\nDESCRIPTION: Shows methods to dump and load the state of all event sheets across all groups.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// Dump states\nvar states = eventSheetManager.dumpState();\n\n// Load states\neventSheetManager.loadState(states);\n```\n\n----------------------------------------\n\nTITLE: Accessing Movement Results and Destination in Phaser 3 Board\nDESCRIPTION: Properties to access the last movement result and destination information including tile coordinates and direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar lastMoveResult = moveTo.lastMoveResult;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar destinationTileX = moveTo.destinationTileX;\nvar destinationTileY = moveTo.destinationTileY;\nvar destinationDirection = moveTo.destinationDirection;\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Setting Mouse Wheel Scroller Enable State in TextArea\nDESCRIPTION: Demonstrates an alternative way to enable or disable mouse wheel scrolling using a property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.mouseWheelScrollerEnable = enabled;\n```\n\n----------------------------------------\n\nTITLE: Controlling Gravity Well State in JavaScript\nDESCRIPTION: Enables or disables a gravity well by setting its active property. When inactive, the gravity well has no effect on particles in the system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nwell.active = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwell.active = false;\n```\n\n----------------------------------------\n\nTITLE: Getting Mass in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current mass value of a physics body.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = gameObject.body.mass;\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Number Bar in JavaScript\nDESCRIPTION: Shows how to get and set the enable state of the number bar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = numberBar.enable;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.setEanble(enable);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.enable = enable;\n```\n\n----------------------------------------\n\nTITLE: Controlling Movement State in Phaser 3 Board\nDESCRIPTION: Methods to pause, resume, or stop the movement of a chess piece on the board.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.pause();\nmoveTo.resume();\nmoveTo.stop();\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Tabs UI plugin in the main Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Modal Event Handling\nDESCRIPTION: Examples of handling modal events for open and close actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodal.on('open', function(gameObject, modal) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodal.on('close', function(closeEventData) {\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Manager in Phaser3 Tag Player\nDESCRIPTION: Method to enable the data manager functionality in the Tag Player, which must be called before using data operations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.setDataEnabled();\n```\n\n----------------------------------------\n\nTITLE: Managing Drag Threshold and Detect Bounds\nDESCRIPTION: Shows how to get and set the drag threshold and detection bounds for the rotate input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar dragThreshold = rotate.dragThreshold;\n\nrotate.setDragThreshold(dragThreshold);\n// rotate.dragThreshold = dragThreshold;\n\nvar bounds = rotate.bounds;\n\nrotate.setDetectBounds(bounds);\n// rotate.bounds = bounds;\n```\n\n----------------------------------------\n\nTITLE: Importing GroupNavigator Class Directly\nDESCRIPTION: Imports the GroupNavigator class directly from the npm package for use without the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport GroupNavigator from 'phaser3-rex-plugins/plugins/groupnavigator.js';\n```\n\n----------------------------------------\n\nTITLE: Enabling RotateTo Behavior\nDESCRIPTION: Enables the RotateTo behavior on a game object using the setEnable method or property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.setEnable();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.enable = true;\n```\n\n----------------------------------------\n\nTITLE: Getting Video State in Youtube Player for Phaser 3\nDESCRIPTION: Methods to get the current state of the Youtube video as a numeric value or string representation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar videoState = player.videoState;\n```\n\n----------------------------------------\n\nTITLE: Adding Particle Bounds from Rectangle in JavaScript\nDESCRIPTION: Creates boundaries that restrict particle movement using a rectangle object. This can be a plain object with x, y, width, height properties or a Phaser.Geom.Rectangle instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar bounds = emitter.addParticleBounds(rect);\n```\n\n----------------------------------------\n\nTITLE: Getting Friction Values in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current friction values of a physics body in both X and Y directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar fx = gameObject.body.friction.x;\nvar fy = gameObject.body.friction.y;\n```\n\n----------------------------------------\n\nTITLE: Importing ExpBar Class Directly\nDESCRIPTION: Shows how to import and instantiate the ExpBar class directly from the UI components package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-expbar.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExpBar } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar expBar = new ExpBar(scene, config);\nscene.add.existing(expBar);\n```\n\n----------------------------------------\n\nTITLE: Handling Pan End Event in Phaser 3\nDESCRIPTION: Sets up an event handler for the 'panend' event that fires when panning finishes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\npan.on('panend', function(pan, gameObject, lastPointer){\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Adding Child Elements to Button Group in Phaser 3\nDESCRIPTION: Methods for adding button and non-button child elements to the button group. Non-button children can be added with specific padding and positioning options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthbuttons.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.addButton(gameObject)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.add(gameObject,\n    {\n        padding: {left: 0, right: 0, top: 0, bottom: 0},\n        key: undefined,\n        index: undefined\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Expression Parser Class Directly\nDESCRIPTION: Demonstrates importing the Expression Parser class directly instead of using the plugin system, useful for non-Phaser contexts.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport ExpressionParser from 'phaser3-rex-plugins/plugins/expressionparser.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = new ExpressionParser();\n```\n\n----------------------------------------\n\nTITLE: Stable Sorting Arrays in Phaser 3\nDESCRIPTION: Shows how to use Phaser's stable sort utility function, which maintains the relative order of equal elements during sorting.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-sort.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Utils.Array.StableSort(arr, compareFunction);\n```\n\n----------------------------------------\n\nTITLE: Increasing Timer Period with Specific Time Units\nDESCRIPTION: Increases the period of an existing timer using specific time units.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrealTimeTimers.incTimerPeriod(name, {\n    day: dayCount,        // d: dayCount,\n    hour: hourCount,      // h: hourCount,\n    minute: minuteCount,  // m: minuteCount,\n    second: secondCount,  // s: secondCount,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating NinePatch2 with Object Configuration for Layout\nDESCRIPTION: Creates a NinePatch2 instance using an object for layout configuration. This approach groups related layout parameters together for better organization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch2(x, y, width, height, key, {\n    columns: undefined,\n    rows: undefined,\n\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    baseFrame: undefined,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Rex UI Plugin in Phaser Game Configuration\nDESCRIPTION: Code for installing the Rex UI plugin through the game configuration. This allows the plugin to be used across scenes via the 'rexUI' mapping.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmaction.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Knob Instance in Phaser3\nDESCRIPTION: Code showing how to create an instance of a custom knob class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-knob.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar knob = new MyKnob(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Handling Menu Scale-down Complete Events in Phaser3\nDESCRIPTION: Event handler for when the root menu has completely finished its scale-down animation. Provides access to the root menu that completed the animation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.on('scaledown.complete', function(rootMenu) {\n    // ....\n}, scope)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrap Mode for Eight Direction Movement\nDESCRIPTION: Enable or disable wrap mode for the Eight Direction behavior, allowing the game object to wrap around the screen edges.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eightdirection.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nship.setWrapMode(wrap, padding);\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Player Instance with Plugin Import in Phaser 3\nDESCRIPTION: Code for creating a TCRP player instance after importing the plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar player = scene.plugins.get('rexTCRP').addPlayer(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Alpha Mask Image from JSON in Phaser 3\nDESCRIPTION: Shows how to add an Alpha Mask Image from a JSON configuration using the scene.make factory method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/alphamaskimage.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.make.rexAlphaMaskImage({\n    x: 0,\n    y: 0,\n    key: key,\n    frame: name,\n    mask: {\n        key: textureKey,\n        // frame: frameName,\n        // invertAlpha: false,\n        // scale: undefined,\n    }\n   \n    // backgroundColor: undefined,\n    \n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing iChannel Texture Keys in Phaser 3 Shaders\nDESCRIPTION: Retrieves the texture keys assigned to the iChannel sampler2D uniforms in a shader. These are commonly used for texture inputs in shaders.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar textureKey = shader.getUniform('iChannel0').textureKey;\nvar textureKey = shader.getUniform('iChannel1').textureKey;\nvar textureKey = shader.getUniform('iChannel2').textureKey;\nvar textureKey = shader.getUniform('iChannel3').textureKey;\n```\n\n----------------------------------------\n\nTITLE: Setting Update Shapes Callback in Phaser 3 Custom Shapes\nDESCRIPTION: Shows how to set the update shapes callback function for a custom shapes object, which is triggered when shapes need to be refreshed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncustomShapes.setUpdateShapesCallback(callback);\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Plugin from NPM\nDESCRIPTION: JavaScript code to import the Firebase plugin from the installed NPM package and create a new instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js';    \nvar rexFire = new RexFirebase();\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Velocity in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the maximum velocity limits for a physics body. The body's velocity will be capped at these values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setMaxVelocity(x, y);\n```\n\n----------------------------------------\n\nTITLE: Handling Wait Music Events in Phaser3 Tag Player\nDESCRIPTION: Event handler for wait.music events in the Tag Player system, which fires when a [wait=se], [wait=se2], [wait=bgm], or [wait=bgm2] tag is encountered. The music parameter contains the music object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('wait.music', function(music) {\n    // var key = music.key;\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Particle Bounds with Position and Dimensions in JavaScript\nDESCRIPTION: Creates boundaries that restrict particle movement using explicit x, y, width, and height values. Optional parameters control which sides of the bounds particles collide with.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar bounds = emitter.addParticleBounds(x, y, width, height);\n// var bounds = emitter.addParticleBounds(x, y, width, height, collideLeft, collideRight, collideTop, collideBottom);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Youtube Player Instance in Phaser 3\nDESCRIPTION: Code to instantiate a custom Youtube Player class in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar player = new MyYoutubePlayer(scene, x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Buttons in Tabs Component\nDESCRIPTION: Methods for iterating over buttons in different groups of the tabs component. These allow executing a callback function on each button in a specific group for custom operations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar enabled = tabs.forEachButton(groupName, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.forEachLeftButton(callback, scope);\ntabs.forEachRightButton(callback, scope);\ntabs.forEachTopButton(callback, scope);\ntabs.forEachBottomButton(callback, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(button, index, buttons) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration for Phaser 3 Scene\nDESCRIPTION: Configuration object for defining global and scene-specific plugins in a Phaser 3 scene, allowing extension of functionality through the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scene.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    global: [\n        //{key, plugin, start}\n    ],\n    scene: [\n        // ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle-Switch Thumb Size Ratio\nDESCRIPTION: Gets the current thumb width and height ratios of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar thumbWidth = toggleSwitch.thumbWidth;\nvar thumbHeight = toggleSwitch.thumbHeight;\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Amplitude Properties\nDESCRIPTION: Code to get and set the horizontal and vertical amplitude properties of the warp effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar amplitudeX = pipelineInstance.amplitudeX;\nvar amplitudeY = pipelineInstance.amplitudeY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.amplitudeX = amplitudeX;\npipelineInstance.amplitudeY = amplitudeY;\n// pipelineInstance.amplitudeX += value;\n// pipelineInstance.amplitudeY += value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setAmplitudeX(amplitudeX);\npipelineInstance.setAmplitudeY(amplitudeY);\npipelineInstance.setAmplitude(amplitudeX, amplitudeY);\n```\n\n----------------------------------------\n\nTITLE: Translation Methods\nDESCRIPTION: Methods for translating content with optional interpolation\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/i18next.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = i18next.t(key);\\n// var result = i18next.t(key, interpolation);\n```\n\n----------------------------------------\n\nTITLE: Applying Find Filter to Dynamic View\nDESCRIPTION: Apply a find filter to a dynamic view to restrict which documents are included in the view.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nview.applyFind({});\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents by Property Type\nDESCRIPTION: Find documents where a property is of a specified type (e.g., 'string', 'number') using the $type operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$type': value}}); // 'string', or 'number', ...\n```\n\n----------------------------------------\n\nTITLE: Adding Clock Object to Phaser 3 Scene\nDESCRIPTION: Creates a clock object instance in a Phaser 3 scene using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar clock = scene.plugins.get('rexclockplugin').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Input Control in Phaser 3 Bejeweled Plugin\nDESCRIPTION: These snippets show how to enable or disable input control temporarily in the Bejeweled plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.setInputEnable();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.setInputEnable(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Ellipse Position via Coordinates in Phaser 3\nDESCRIPTION: Updates the position of an ellipse by directly modifying its x and y properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.x = 0;\nellipse.y = 0;\n```\n\n----------------------------------------\n\nTITLE: Adding Commands to the Arcade TCRP StepRunner in Phaser 3\nDESCRIPTION: Adds commands to the StepRunner to be executed during the next WORLD_STEP event, which helps synchronize command execution with the Recorder's step counter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-step-runner.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstepRunner.add(commands, scope);\n```\n\n----------------------------------------\n\nTITLE: Converting ArrayBuffer to Base64 in Phaser\nDESCRIPTION: Shows how to encode an ArrayBuffer into a Base64 string, with optional media type parameter for specifying content type like 'audio/ogg' or 'image/jpeg'.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/base64.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar base64 = Phaser.Utils.Base64.ArrayBufferToBase64(arrayBuffer, mediaType);\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of a Custom Layer in Phaser 3\nDESCRIPTION: Demonstrates how to instantiate a custom Layer class in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar layer = new MyLayer(scene, children);\n```\n\n----------------------------------------\n\nTITLE: Getting Glow Filter Instance from Camera\nDESCRIPTION: Retrieves the glow filter pipeline instance from a camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGlowFilterPipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexGlowFilterPipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Adding Conditions Table Object (Imported Plugin)\nDESCRIPTION: Shows how to add a Conditions Table object to the scene after importing the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/conditionstable.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar conditionstable = scene.plugins.get('rexConditionsTable').add();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Color Input Class in Phaser 3\nDESCRIPTION: Shows how to define a custom Color Input class extending the base ColorInput and create an instance of it in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorinput.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyColorInput extends RexPlugins.UI.ColorInput {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar colorInput = new MyColorInput(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Setting X Scroll Factor of Game Objects in Phaser3\nDESCRIPTION: Sets the horizontal scroll factor of game objects, which determines how they move relative to camera scrolling. Lower values create parallax effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetScrollFactorX(gameObjects, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Transit Out Custom Callback\nDESCRIPTION: Custom callback function for handling the transition-out (closing) animation of the loading dialog.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(gameObject, duration) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Face Properties - Alpha\nDESCRIPTION: Demonstrates how to get and set the alpha (transparency) property of individual triangle faces.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = face.alpha;\n\nface.alpha = alpha;\n// or\nface.setAlpha(value);\n```\n\n----------------------------------------\n\nTITLE: Adding ConfirmActionButton to Phaser 3 Scene\nDESCRIPTION: Shows how to add a ConfirmActionButton object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmactionbutton.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = scene.rexUI.add.confirmActionButton(config);\n```\n\n----------------------------------------\n\nTITLE: RetroFont TEXT_SET3 Definition\nDESCRIPTION: Simple character set with uppercase letters, numbers and space\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 '\n```\n\n----------------------------------------\n\nTITLE: Loading Rex UI Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the Rex UI plugin as a scene plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Setting Radius via Direct Properties of Round Rectangle\nDESCRIPTION: Sets the radius values by directly assigning to the rectangle's radius properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nrect.radius = radius;\nrect.radiusTL = radius;  // number, or {x,y}\nrect.radiusTR = radius;  // number, or {x,y}\nrect.radiusBL = radius;  // number, or {x,y}\nrect.radiusBR = radius;  // number, or {x,y}\n```\n\n----------------------------------------\n\nTITLE: Creating Nine-Patch (Alternative) in Phaser 3 with Rex UI Plugin\nDESCRIPTION: An alternative method to create a nine-patch image using the ninePatch2 factory method which may have different behavior or performance characteristics.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.rexUI.add.ninePatch2(x, y, width, height, key, columns, rows, config);\n```\n\n----------------------------------------\n\nTITLE: Managing Video Playback Time in Phaser 3\nDESCRIPTION: Methods to get and set the current playback time, including seeking to specific points, forward, and backward.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar playbackTime = video.getCurrentTime();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar t = video.getProgress(); // t: 0~1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.setCurrentTime(playbackTime);  // time in seconds\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.seekTo(t); // t: 0~1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isSeeking = video.isSeeking();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.setCurrentTime('+' + time);  // time in seconds\n// video.setCurrentTime('+2');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.setCurrentTime('-' + time);  // time in seconds\n// video.setCurrentTime('-2');\n```\n\n----------------------------------------\n\nTITLE: Copying Tiles in Phaser 3 Tilemap\nDESCRIPTION: Methods for copying tiles between layers and within the same layer. Includes options for both map-level and layer-level operations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nmap.copy(srcTileX, srcTileY, width, height, destTileX, destTileY);\nmap.copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, layer);\nlayer.copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces);\n```\n\n----------------------------------------\n\nTITLE: Custom Chart Class Definition\nDESCRIPTION: Extending the base Chart class to create a custom chart implementation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-chart.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyChart extends RexPlugins.UI.Chart {\n    constructor(scene, x, y, width, height, config) {\n        super(scene, x, y, width, height, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Quad Render Texture Object in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to add a quad render texture object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-rendertexture.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexQuadRenderTexture(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Setting User Identity for Online User List\nDESCRIPTION: JavaScript code showing how to set a user's ID and name either through separate parameters or a configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.setUser(userID, userName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.setUser({\n    userID: userID,\n    userName: userName\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Wait Sprite Events in Phaser3 Tag Player\nDESCRIPTION: Event handler for wait.sprite events in the Tag Player system, which fires when waiting for sprite-related conditions. The name and prop parameters contain the sprite name and property being waited on.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('wait.sprite', function(name, prop) {\n})\n```\n\n----------------------------------------\n\nTITLE: Relative Time Formatting in Luxon\nDESCRIPTION: Shows how to format DateTime objects as relative time strings with customization options for base time, locale, and unit.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/luxon.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = dt.toRelativeCalendar();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = dt.toRelativeCalendar({\n    base: dt0,\n    locale: string,\n    unit: string\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping Camera Controls in Phaser 3\nDESCRIPTION: This snippet demonstrates how to stop the camera controls. This method is used to cease the control's effect on the camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-controller.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncontrols.stop();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Progress in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Adds a custom progress indicator to the scene. This allows for creating progress bars or other progress indicators with custom designs.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar customProgress = scene.rexUI.add.customProgress(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Adding InTouching Behavior via Configured Plugin\nDESCRIPTION: Adds the InTouching behavior to a game object using the globally configured plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar intouching = scene.plugins.get('rexInTouchingn').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Fill Color in Phaser 3\nDESCRIPTION: Sets the fill color and alpha (transparency) of a circle game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.setFillStyle(color, alpha);\n```\n\n----------------------------------------\n\nTITLE: Creating Swipe Instance with Direct Class Import\nDESCRIPTION: Shows how to create a swipe detection instance after importing the class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar swipe = new Swipe(scene, config);\n// var swipe = new Swipe(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Alpha Mask Image Plugin via NPM in Phaser 3\nDESCRIPTION: Demonstrates how to install the plugin from npm, import it in the game configuration, and add an alpha-mask-image object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/alphamaskimage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport AlphaMaskImagePlugin from 'phaser3-rex-plugins/plugins/alphamaskimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexAlphaMaskImagePlugin',\n            plugin: AlphaMaskImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexAlphaMaskImage(x, y, key, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Post Pipeline Effect on Game Object\nDESCRIPTION: Applies the shockwave post pipeline effect directly to a game object using the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(ShockwavePostFx);\n```\n\n----------------------------------------\n\nTITLE: Creating Instance of Custom Pages Class\nDESCRIPTION: Code to instantiate a custom Pages class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar pages = new MyPages(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners for All Events in Phaser 3\nDESCRIPTION: Shows how to remove all listeners for all events in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nee.removeAllListeners();\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the Phaser3 Rex plugins package from NPM, which includes the RotateTo plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating Instance of Custom Repeat Image Class\nDESCRIPTION: Code for creating an instance of a custom repeat image class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new MyImage(scene, x, y, width, height, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Loading Dialog Quest Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the Dialog Quest plugin and its dependencies in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dialog-quest.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');    \nscene.load.script('rexdialogquest', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexdialogquest.min.js');\n```\n\n----------------------------------------\n\nTITLE: Initializing Path Object in Phaser 3\nDESCRIPTION: Creates a new path object in a Phaser scene. Can be initialized at specific coordinates or without parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/path.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar path = scene.add.path();\n// var path = scene.add.path(x, y);  // curve start from (x, y)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar path = new Phaser.Curves.Path();\n// var path = new Phaser.Curves.Path(x, y);  // curve start from (x, y)\n```\n\n----------------------------------------\n\nTITLE: Creating a Nine Slice with Texture Packer Frame\nDESCRIPTION: Alternative method to create a Nine Slice object using a frame generated by Texture Packer. This simplifies the creation by using existing frame data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/nineslice.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar nineSlice = scene.add.nineslice(x, y, texture, frame, width, height);\n// var nineSlice = scene.add.nineslice(x, y, texture, frame);\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Game Setup\nDESCRIPTION: Configuration code for setting up the circular progress plugin in the game's initial configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport CircularProgressCanvasPlugin from 'phaser3-rex-plugins/plugins/circularprogresscanvas-plugin.js';\nvar config = {\n    plugins: {\n        global: [{\n            key: 'rexCircularProgressCanvasPlugin',\n            plugin: CircularProgressCanvasPlugin,\n            start: true\n        }]\n    }\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Face Direction in Phaser 3 Field of View\nDESCRIPTION: Demonstrates how to set and get the face direction of the Field of View object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar face = fieldOfView.face;\nfieldOfView.setFace(direction);\n// or\nfieldOfView.face = direction;\n// fieldOfView.face ++;\n```\n\n----------------------------------------\n\nTITLE: Modifying Grid Display Size in Phaser 3\nDESCRIPTION: Demonstrates getting and setting the display size of the grid object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-grid.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = grid.displayWidth;\nvar height = grid.displayHeight;\ngrid.setDisplaySize(width, height);\n// or\ngrid.displayWidth = width;\ngrid.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Importing Canvas Input Class Directly\nDESCRIPTION: Imports and instantiates the Canvas Input class directly after installing via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport CanvasInput from 'phaser3-rex-plugins/plugins/canvasinput.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = new CanvasInput(textGameObject, x, y, width, height, config);\nscene.add.existing(txt);\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Integer (Single Value)\nDESCRIPTION: Methods for setting a single integer uniform value in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set1i(name, value0);\n// pipelineInstance.set1i(name, value0, shader);\n```\n\n----------------------------------------\n\nTITLE: Injecting Methods into Root Game Object Class\nDESCRIPTION: Injects scale methods into the root GameObject class prototype to make them available for all game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexScale').injectMethodsToRootClass(e);\n// scene.plugins.get('rexScale').injectMethods(Phaser.GameObjects.GameObject.prototype);\n```\n\n----------------------------------------\n\nTITLE: Value Change Callback for Custom Progress Bar\nDESCRIPTION: Example implementation of the valuechangeCallback function that fires when the progress value changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(newValue, oldValue, customProgress) {\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Shockwave PostFx Class in Phaser 3\nDESCRIPTION: Imports the ShockwavePostFx class and adds it to the pipeline configuration in a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport ShockwavePostFx from 'phaser3-rex-plugins/plugins/shockwavepipeline.js';\nvar config = {\n    // ...\n    pipeline: [ShockwavePostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Board Plugin via Scene Plugin\nDESCRIPTION: Loads the board plugin as a scene plugin during the preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-sprite.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\n----------------------------------------\n\nTITLE: Injected Method Usage Examples\nDESCRIPTION: Examples of using the injected fade methods on game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadeoutdestroy.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.fadeIn(duration);\n\ngameObject.fadeIn(duration, endAlpha);\n\ngameObject.fadeIn(duration, {start:0, end:1});\n\ngameObject.fadeInPromise(duration, endAlpha)\n    .then(function(){\n        // ...\n    })\n\ngameObject.fadeInPromise(duration, {start:0, end:1})\n    .then(function(){\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating Drag Instance with Configuration\nDESCRIPTION: Initialize a drag instance with configuration options including axis constraints and rotation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/drag.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar drag = scene.plugins.get('rexDrag').add(gameObject, {\n    // enable: true,\n    // axis: 0,      //0|'both'|'h&v'|1|'horizontal'|'h'|2|'vertical'|'v'\n    // rotation: Phaser.Math.DegToRad(45)  // axis rotation in rad\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements by Name in TextArea\nDESCRIPTION: Shows how to get a reference to a game object by its name within the TextArea hierarchy.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = textArea.getElement('#' + name);\n// var gameObject = textArea.getElement('#' + name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Setting the Tint Color of a Perspective Image\nDESCRIPTION: Sets a new tint color for the perspective image using direct property assignment or a method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimage.tint = color;\n```\n\n----------------------------------------\n\nTITLE: Importing ContainerSkew Class (JavaScript)\nDESCRIPTION: Demonstrates how to import the ContainerSkew class directly from the Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-skew.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ContainerSkew } from 'phaser3-rex-plugins/plugins/quadimage.js';\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Player Instance (Class Method)\nDESCRIPTION: Shows how to create a TCRP player instance when importing the class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar player = new TCRP.Player(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Full Configuration for Confirm Action Dialog\nDESCRIPTION: Complete configuration example for creating a confirm action dialog with callback functions for confirm and cancel actions, styling options, and content configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmaction.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = scene.rexUI.confirmAction(scene, {    \n    style: confirmDialogConfig\n\n    content: confirmDialogResetChoiceDisplayContentConfig,\n\n    // modal: confirmDialogModalConfig,\n\n    // onCreateDialog: function(dialog) { },\n\n    confirm: function() {},\n    // confirmScope: \n    // confirmButtonIndex: 0,\n\n    // cancel: function() {},\n    // cancelScope: \n    // cancelButtonIndex: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Line Progress Plugin in Preload Stage\nDESCRIPTION: Demonstrates how to load the minified plugin file during the game's preload stage and create a line progress instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-lineprogress.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexlineprogressplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexlineprogressplugin.min.js', true);\n\nvar lineProgress = scene.add.rexLineProgress(x, y, width, height, barColor, value, config);\n```\n\n----------------------------------------\n\nTITLE: Creating TransitionImage with Expanded Configuration in Phaser 3\nDESCRIPTION: An alternative way to create a transition image with more explicit configuration options including position, texture key, and frame.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexTransitionImage(x, y, texture, frame, {\n    // x: 0,\n    // y: 0,\n    // key: \n    // frame: \n    // dir: 0,\n    // onStart: function(parent, currentImage, nextImage, t) { },\n    // onStartScope: undefined,\n    // onProgress: function(parent, currentImage, nextImage, t) { },\n    // onProgressScope: undefined,\n    // onComplete: function(parent, currentImage, nextImage, t) { },\n    // onCompleteScope: undefined,    \n    // duration: 1000,\n    // ease: 'Linear',\n    // mask: undefined,\n\n    // width: undefined, height: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: CursorAtBounds Configuration Example\nDESCRIPTION: Creates a CursorAtBounds instance with configuration options including bounds, sensitive distance, and pointer behavior settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursoratbounds.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar cursorAtBound = scene.plugins.get('rexCursorAtBounds').add(scene, {\n    // enable: true,\n    // bounds: undefined,\n    // sensitiveDistance: 20,\n    // pointerOutGameRelease: true,\n    // pointerOutBoundsRelease: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Batch Drawing Operations\nDESCRIPTION: Sequence of operations for batch drawing multiple objects or frames efficiently.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamic-texture.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.beginDraw();\ntexture.batchDraw(entries, x, y, alpha, tint);\ntexture.batchDrawFrame(key, frame, x, y, alpha, tint);\ntexture.endDraw();\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting Children in Phaser3 Rex UI\nDESCRIPTION: Method to sort child elements using a custom comparison callback function. The callback receives two children for comparison and should return their relative order.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.sortChildren(function(childA, childB){\n    // var valueA = childA.getData(key);\n    // var valueB = childB.getData(key);\n    // return valueB - valueA\n}).layout();\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Mask in Phaser 3 Round Rectangle Progress\nDESCRIPTION: Code snippet for creating a geometry mask from a round rectangle progress bar in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = roundRectangleProgress.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Cross Transition for Multiple Sprites\nDESCRIPTION: Transitions between images for multiple sprites simultaneously using the exclamation prefix.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_16\n\nLANGUAGE: phaser\nCODE:\n```\n!NAME.cross\n  name=\n  expression=\n  duration=\n  mode=fade\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Accessing Triangle Position Properties\nDESCRIPTION: Retrieves various position properties of a triangle including vertex coordinates and bounding box.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar x1 = triangle.x1;\nvar y1 = triangle.y1;\nvar x2 = triangle.x2;\nvar y2 = triangle.y2;\nvar x3 = triangle.x3;\nvar y3 = triangle.y3;\nvar top = triangle.top;\nvar left = triangle.left;\nvar right = triangle.right;\nvar bottom = triangle.bottom;\n```\n\n----------------------------------------\n\nTITLE: Setting Color Value using Properties\nDESCRIPTION: Sets the color value using direct property assignment. Provides an alternative to the setValue method for updating the component's color.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncolorComponents.value = value;\ncolorComponents.color = value;\n```\n\n----------------------------------------\n\nTITLE: Getting Angular Drag in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current angular drag of a physics body.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nvar ad = gameObject.body.angularDrag;\n```\n\n----------------------------------------\n\nTITLE: Registering Game Step Event Listener in JavaScript\nDESCRIPTION: Demonstrates how to register an event listener for the 'step' event in a Phaser 3 game. This event is part of the game loop and occurs after the 'prestep' event but before scene updates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.game.events.on('step', function(time, delta){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for All Child Game Objects in a Layer in Phaser 3\nDESCRIPTION: Demonstrates how to set a property for all child game objects in a Layer, optionally within a specific range.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.setAll(property, value);\n// layer.setAll(property, value, startIndex, endIndex);\n```\n\n----------------------------------------\n\nTITLE: Setting Detect Bounds\nDESCRIPTION: Shows how to set the detection bounds for swipe input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nswipe.setDetectBounds(bounds);\n// swipe.bounds = bounds;\n```\n\n----------------------------------------\n\nTITLE: Loading Color Components Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the Color Components plugin as a scene plugin in the preload stage of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Following Target with Particle Emitter\nDESCRIPTION: Methods to make particle emitter follow a game object target with optional offset and visibility tracking\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.startFollow(target);\n// emitter.startFollow(target, offsetX, offsetY, trackVisible);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.stopFollow();\n```\n\n----------------------------------------\n\nTITLE: Accessing TextBox Text Content Element\nDESCRIPTION: Retrieves the main text content game object for direct manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = textBox.getElement('text');\n```\n\n----------------------------------------\n\nTITLE: Creating Camera Controller Instance in Phaser 3 (JavaScript)\nDESCRIPTION: Creates an instance of the camera controller with various configuration options for pan, zoom, and scroll behaviors.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/input-to-camera.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar cameraController = scene.plugins.get('rexCameraController').add(scene, {\n    // camera: scene.cameras.main,\n    // minZoom: undefined,\n    // maxZoom: undefined,\n\n    // panScroll: true,\n    // panScrollEnable: true,\n\n    // pinchZoom: true,\n    // pinchZoomEnable: true,\n    // pinchZoomMin: undefined,\n    // pinchZoomMax: undefined,\n    // pinchZoomFocusEnable: true,\n    \n    // inputTarget: undefined,\n\n    // boundsScroll: true,\n    // boundsScrollEnable: true,\n\n    // mouseWheelZoom: truem\n    // mouseWheelZoomEnable: true,\n    // mouseWheelZoomStep: 0.01,\n    // mouseWheelZoomMin: undefined,\n    // mouseWheelZoomMax: undefined,\n\n    // enable: true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Loading Animation Scene plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loading-animation-scene.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport LoadingAnimationScenePlugin from 'phaser3-rex-plugins/plugins/loadinganimationscene-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexLoadingAnimationScene',\n            plugin: LoadingAnimationScenePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding to Vertical Scroll Position in TextArea\nDESCRIPTION: Demonstrates how to add a value to the current vertical scroll position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.addChildOY(oy);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Arc Class in Phaser 3\nDESCRIPTION: Defines a custom Arc class that extends the built-in Phaser.GameObjects.Arc. This allows for adding custom functionality while maintaining the base Arc behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyArc extends Phaser.GameObjects.Arc {\n    constructor(scene, x, y, radius, startAngle, endAngle, anticlockwise, fillColor) {\n        super(scene, x, y, radius, startAngle, endAngle, anticlockwise, fillColor);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Particle Emitter with Bitmap Zone\nDESCRIPTION: Example of creating a particle emitter using the bitmap zone as an emission source.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmapzone.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar particles = scene.add.particles(key,\n[\n    // emitter config\n    {\n        // blendMode:\n        // scale:\n        // speed:\n        // garvityY:\n        emitZone: {\n            type: 'random',\n            source: bitmapZone\n        }\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of Custom Perspective Image Class\nDESCRIPTION: Creates an instance of the custom MyPerspectiveImage class with specified parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new MyPerspectiveImage(scene, x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Glow Effect Intensity via Method\nDESCRIPTION: Sets the intensity of the glow effect using the setIntensity method on the pipeline instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setIntensity(radius);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Alpha for Full Window Rectangle\nDESCRIPTION: Methods to get and set the alpha transparency of the rectangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = rect.alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrect.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Getting Light Color RGB Values in Phaser 3\nDESCRIPTION: Code for retrieving a light's current color as individual RGB components.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar red = light.color.r;\nvar green = light.color.g;\nvar blue = light.color.b;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tag Text Class\nDESCRIPTION: Creates a custom class extending the TagText class to add custom functionality while maintaining the tag text capabilities.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends TagText {\n    constructor(scene, x, y, text, style) {\n        super(scene, x, y, text, style);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDK Scripts for Import Method\nDESCRIPTION: HTML code to include the Firebase core SDK and Database service when using the import method. These scripts are required for the Firebase functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-overview.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/10.13/firebase-app-compat.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/10.13/firebase-database-compat.js\"></script>\n</body>    \n```\n\n----------------------------------------\n\nTITLE: Drawing Images to Canvas Texture\nDESCRIPTION: Draws an HTML Image or Canvas element to the texture at specified coordinates\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-texture.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.draw(x, y, source);\n// texture.draw(x, y, source, update);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Detect Bounds\nDESCRIPTION: Shows how to get and set the detection bounds for swipe input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar bounds = swipe.bounds;\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask from a NinePatch2 Object\nDESCRIPTION: Creates a bitmap mask based on a NinePatch2 object's shape. This mask can be used to clip or mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = ninePatch.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Setting Kawase-blur Properties in Phaser 3\nDESCRIPTION: Demonstrates how to set various properties of the Kawase-blur effect, such as blur, quality, and pixel size.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-kawaseblur.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.blur = blur;\npipelineInstance.quality = quality;\npipelineInstance.pixelWidth = pixelWidth;\npipelineInstance.pixelHeight = pixelHeight;\n```\n\n----------------------------------------\n\nTITLE: Getting Drag Values in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current drag values of a physics body in both X and Y directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar dx = gameObject.body.drag.x;\nvar dy = gameObject.body.drag.y;\n```\n\n----------------------------------------\n\nTITLE: Value Setting Operations in Phaser3 Label\nDESCRIPTION: Methods for setting and animating values with optional min/max ranges.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setValue(value, min, max);\n// label.setValue(value);  // min, max are not changed\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setValue(value);  // min, max are not changed\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel\n    .setEaseValueDuration(duration)\n    .easeValueTo(value, min, max);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel\n    .setEaseValueDuration(duration)\n    .easeValueTo(value);  // min, max are not changed\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = label.value;\nvar max = label.maxValue;\nvar min = label.minValue;\n```\n\n----------------------------------------\n\nTITLE: Phaser 3 Scene Lifecycle Flowchart using Mermaid\nDESCRIPTION: A mermaid flowchart depicting the complete lifecycle of a Phaser 3 scene, including creation, update, pause/resume/sleep/wake states, and shutdown/destroy processes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scene.md#2025-04-21_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n\nsubgraph Stop\nSceneEventDestroy>\"scene.events: destroy\"]\nShutdown[\"Shutdown<br>Free game objects\"]\nend\n\nsubgraph Update\nSceneUpdate[\"Run: Every tick<br>scene.update()\"]\nSceneEventPauseSleep>\"scene.events: pause<br>scene.events: sleep\"]\nPause[\"Pause: render but no update<br>Sleep: no update, no render\"]\nSceneEventResumeWake>\"scene.events: resume<br>scene.events: wake\"]\nend\n\nsubgraph Create\nSceneEventStart>\"scene.events: start\"]\nSceneEventReady>\"scene.events: ready\"]\nSceneInit[\"scene.init()\"]\nScenePreLoad[\"Load assets<br>scene.preload()\"]\nSceneCreate[\"Create game objects<br>scene.create()\"]\nend\n\nStart((Start)) --> SceneEventStart\nSceneEventStart --> SceneEventReady\nSceneEventReady --> SceneInit\nSceneInit --> ScenePreLoad\nScenePreLoad --> SceneCreate\nSceneCreate --> SceneUpdate\nSceneUpdate --> SceneUpdate\nSceneUpdate --> |\"scene.scene.pause()<br>scene.scene.sleep()\"|SceneEventPauseSleep\nSceneEventPauseSleep --> Pause\nPause --> |\"scene.scene.resume()<br>scene.scene.wake()\"|SceneEventResumeWake\nSceneEventResumeWake --> SceneUpdate\n\nSceneUpdate --> |\"scene.scene.stop()<br>scene.scene.restart()\"|Stop\nPause --> |\"scene.scene.stop()<br>scene.scene.restart()\"|SceneEventDestroy\nSceneEventDestroy --> Shutdown\n\nShutdown --> |\"scene.scene.start()<br>scene.scene.launch()<br>scene.scene.restart()\"|SceneEventStart\n```\n\n----------------------------------------\n\nTITLE: Getting Hit Area by World Position in Phaser 3 Text Objects\nDESCRIPTION: Retrieves the hit area key at a specific world position. Optionally accepts a camera parameter, defaulting to scene.cameras.main if not provided.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar key = txt.getHitArea(worldX, worldY);\n// var key = txt.getHitArea(worldX, worldY, camera);\n```\n\n----------------------------------------\n\nTITLE: Removing Data from LocalForage using Promise\nDESCRIPTION: Shows how to remove data from LocalForage using the Promise-based approach. The removeItem method returns a Promise that resolves after the item is removed or rejects with an error.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlocalforage.removeItem(key)\n    .then(function(value){ /* ... */ })\n    .catch(function(err){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Creating TouchEventStop Instance with Configuration\nDESCRIPTION: Detailed example of creating a TouchEventStop instance with configuration options for hit area mode and enabling/disabling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/toucheventstop.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar touchEventStop = scene.plugins.get('rexTouchEventStop').add(gameObject, {\n    // hitAreaMode: 0,    // 0|1|'default'|'fullWindow'\n    // enable: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating TransitionImage from JSON in Phaser 3\nDESCRIPTION: Shows how to create a transition image from a JSON configuration object using the scene.make factory method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.make.rexTransitionImage({\n    x: 0,\n    y: 0,\n    key: null,\n    frame: null,\n\n    // dir: 0,\n    // onStart: function(parent, currentImage, nextImage, t) { },\n    // onStartScope: undefined,\n    // onProgress: function(parent, currentImage, nextImage, t) { },\n    // onProgressScope: undefined,\n    // onComplete: function(parent, currentImage, nextImage, t) { },\n    // onCompleteScope: undefined,\n    // duration: 1000,\n    // ease: 'Linear',\n    // mask: undefined,\n\n    // width: undefined, height: undefined,\n\n    // origin: {x: 0.5, y: 0.5},\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Mesh Class Definition\nDESCRIPTION: Template for creating a custom mesh class extending Phaser.GameObjects.mesh\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mesh.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyMesh extends Phaser.GameObjects.mesh {\n    constructor(scene, x, y, texture, frame, vertices, uvs, indicies, containsZ, normals, colors, alphas) {\n        super(scene, x, y, texture, frame, vertices, uvs, indicies, containsZ, normals, colors, alphas);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Files Manager Instance with Class Import\nDESCRIPTION: JavaScript code to create a new Files manager instance directly from the imported class with configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileManager = new Files(config);\n```\n\n----------------------------------------\n\nTITLE: Alternative Language Change Method\nDESCRIPTION: Code showing an alternative method to change the active language using i18next directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ni18next.changeLanguage(language, onComplete);\n```\n\n----------------------------------------\n\nTITLE: Accessing Board Reference\nDESCRIPTION: Demonstrates how to get a reference to the board object that the chess piece belongs to\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-chessdata.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar board = gameObject.rexChess.board;\n```\n\n----------------------------------------\n\nTITLE: Configuring TextTruncator Plugin in Phaser3 Game Configuration\nDESCRIPTION: Shows how to install the TextTruncator plugin in the game configuration after importing it from the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttruncator.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport TextTruncatorPlugin from 'phaser3-rex-plugins/plugins/texttruncator-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTextTruncator',\n            plugin: TextTruncatorPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar truncator = scene.plugins.get('rexTextTruncator').add(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Bar Value Operations in Phaser3 Label\nDESCRIPTION: Methods for manipulating bar values including getting, setting, and easing animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = label.barValue;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setBarValue(value);  // 0~1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setBarValue(value, min, max);  // min~max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.barValue = t;  // 0~1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.easeBarValueTo(value);  // 0~1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.easeBarValueTo(value, min, max);    // min~max\n```\n\n----------------------------------------\n\nTITLE: Applying Shockwave Effect to Camera with Minified Plugin\nDESCRIPTION: Applies the shockwave effect to a camera using the loaded plugin instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexshockwavepipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Setting Radius of an Arc in Phaser 3\nDESCRIPTION: Sets the radius for an Arc game object by directly modifying the radius property. This is an alternative to using the setRadius method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\narc.radius = radius;\n```\n\n----------------------------------------\n\nTITLE: Setting Sender for Messages\nDESCRIPTION: Sets the sender information for the messages object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmessages.setSender(userID, userName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmessages.setSender({\n    userID: userID,\n    userName: userName\n});\n```\n\n----------------------------------------\n\nTITLE: Setting CRT Parameters in Phaser 3 Pipeline\nDESCRIPTION: Methods to set and get the CRT size parameters. These parameters control the width and height dimensions of the CRT effect, affecting how the simulated CRT display appears.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setCrtSize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.crtWidth = width;\npipelineInstance.crtHeight = height;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar crtWidth = pipelineInstance.crtWidth;\nvar crtHeight = pipelineInstance.crtHeight;\n```\n\n----------------------------------------\n\nTITLE: Loading MoveTo Plugin in Phaser3\nDESCRIPTION: Loads the minified plugin file in the preload stage of a Phaser3 scene and adds move-to behavior to a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/moveto.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexmovetoplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexmovetoplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar moveTo = scene.plugins.get('rexmovetoplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Yoyo Scale Animation with Config Object in Phaser 3\nDESCRIPTION: Provides a flexible way to configure yoyo scale animations using a configuration object. The config can specify duration, peak value, repeat count, orientation, and ease function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScale(scaleX, scaleY)\n    .scaleYoyo({\n        duration: undefined,\n        peakValue: 1.2,\n        repeat: 0,\n        orientation: undefined,\n        ease: undefined,\n    })\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScale(scaleX, scaleY)\n    .scaleYoyoPromise(config)\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating Flash Instance in Phaser 3\nDESCRIPTION: Shows how to create a flash instance with optional configuration for duration and repeat count.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flash.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar flash = scene.plugins.get('rexFlash').add(gameObject, {\n    // duration: 500,\n    // repeat: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Tint of Game Objects in Phaser3\nDESCRIPTION: Sets the tint color of game objects to a specified value or to different values for each corner, allowing for color gradient effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.setTint(gameObjects, value);\n//Phaser.Actions.setTint(gameObjects, topLeft, topRight, bottomLeft, bottomRight);\n```\n\n----------------------------------------\n\nTITLE: Alternative Setting Star Display Size in Phaser 3\nDESCRIPTION: Sets the display width and height of a star shape in Phaser 3 using direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nstar.displayWidth = width;\nstar.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Importing Perspective Render Texture Class in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to import the PerspectiveRenderTexture class and create an instance in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-rendertexture.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PerspectiveRenderTexture } from 'phaser3-rex-plugins/plugins/perspectiveimage.js';\n\nvar image = new PerspectiveRenderTexture(scene, x, y, width, height, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Creating an Ellipse in Phaser3\nDESCRIPTION: Creates an ellipse geometry object with specified center coordinates, width, and height for use with elliptical placement actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar ellipse = new Phaser.Geom.Ellipse(x, y, width, height);\nPhaser.Actions.PlaceOnEllipse(gameObjects, ellipse, startAngle, endAngle);\n```\n\n----------------------------------------\n\nTITLE: Getting Color Replace Effect Instance in Phaser 3\nDESCRIPTION: Shows how to retrieve the color replace effect instance from a game object or camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-colorreplace.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexColorReplacePipeline').get(gameObject)[0];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexColorReplacePipeline').get(camera)[0];\n```\n\n----------------------------------------\n\nTITLE: Using XOR Encryption with Loaded Plugin\nDESCRIPTION: Demonstrates how to encrypt and decrypt data using the loaded plugin from CDN.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/xor.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar encResult = scene.plugins.get('rexxorplugin').Encrypt(src, pwd);\nvar decResult = scene.plugins.get('rexxorplugin').Decrypt(encResult, pwd);\n```\n\n----------------------------------------\n\nTITLE: Setting Star Display Size in Phaser 3\nDESCRIPTION: Sets the display width and height of a star shape in Phaser 3 using the setDisplaySize method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nstar.setDisplaySize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Getting Size of Round Rectangle\nDESCRIPTION: Retrieves the width and height of a round rectangle shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = rect.width;\nvar height = rect.height;\n```\n\n----------------------------------------\n\nTITLE: Setting Input for Fuzzy Logic Module in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to set input values for the fuzzy logic module using the fuzzify method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fuzzy.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfuzzyModule.fuzzify(variableName, value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfuzzyModule.fuzzify({\n    varName: value,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Fixed-Part Scale in NinePatch (Properties)\nDESCRIPTION: Sets the maximum scale factors for fixed parts of a NinePatch object by directly modifying properties. This approach allows setting X and Y scaling separately.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.maxFixedPartScaleX = scaleX;\nninePatch.maxFixedPartScaleY = scaleY;\n```\n\n----------------------------------------\n\nTITLE: Accessing Items in UniqueItemList (JavaScript)\nDESCRIPTION: Shows various methods for accessing items in a UniqueItemList, including getting first, last, at index, and random items.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar item = listA.getFirst();\nvar item = listA.getLast();\nvar item = listA.get(index);\nvar item = listA.getRandom();\nvar items = listA.getItems();\nvar items = listA.cloneItems();\n```\n\n----------------------------------------\n\nTITLE: Creating New Local Storage Data Manager\nDESCRIPTION: Initializes a new localStorage data manager instance with plugin\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage-data.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = scene.plugins.get('rexlocalstoragedataplugin').add(parent, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Acceleration Values in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current acceleration values of a physics body in both X and Y directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar ax = gameObject.body.acceleration.x;\nvar ay = gameObject.body.acceleration.y;\n```\n\n----------------------------------------\n\nTITLE: Getting Ellipse Bounding Rectangle in Phaser 3\nDESCRIPTION: Creates a Rectangle object that represents the rectangular bounds of an ellipse.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar bound = Phaser.Geom.Ellipse.GetBounds(ellipse);\n// var bound = Phaser.Geom.Ellipse.GetBounds(ellipse, bound);  // push bound\n```\n\n----------------------------------------\n\nTITLE: Starting Data Updates in Firebase Item Table\nDESCRIPTION: JavaScript code to start the data update process which triggers the 'init' event when initial data is loaded from Firebase.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntable.startUpdate();\n```\n\n----------------------------------------\n\nTITLE: Importing Polar Coordinate Method in Phaser 3\nDESCRIPTION: Demonstrates how to import the polar coordinate method and attach properties to a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/polar-coordinate.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport AddPolarCoordinateProperties from 'phaser3-rex-plugins/plugins/polarcoordinate.js';\n\nAddPolarCoordinateProperties(gameObject, ox, oy, rotation, radius);\ngameObject.polarOX = 400;\ngameObject.polarOY = 300;\ngameObject.polarRadius = 200;\ngameObject.polarAngle = -45;\n```\n\n----------------------------------------\n\nTITLE: Loading Image from URL to Canvas in Phaser 3\nDESCRIPTION: Methods to load an image from a URL onto the Canvas in Phaser 3, with callback and Promise variants.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.loadFromURL(url);\n// canvas.loadFromURL(url, callback);\n\n// or\n\ncanvas.loadFromURLPromise(url)\n    .then(function() {\n        \n    })\n```\n\n----------------------------------------\n\nTITLE: Ceiling Snap Using Phaser.Math.Snap.Ceil\nDESCRIPTION: Snaps a value to the next higher grid slice based on the gap parameter. Optionally accepts a start value. Example: with gap=5, both value=12 and value=14 return 15.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/snap.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Math.Snap.Ceil(value, gap);\n// var out = Phaser.Math.Snap.Ceil(value, gap, start);\n```\n\n----------------------------------------\n\nTITLE: Configuring RoundRectangleProgress Plugin in Game Configuration\nDESCRIPTION: Shows how to import and configure the RoundRectangleProgress plugin in the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RoundRectangleProgressPlugin from 'phaser3-rex-plugins/plugins/roundrectangleprogress-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRoundRectangleProgressPlugin',\n            plugin: RoundRectangleProgressPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Setting Scroller Enable State in TextArea\nDESCRIPTION: Shows an alternative way to enable or disable the scroller component using a property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.scrollerEnable = enabled;\n```\n\n----------------------------------------\n\nTITLE: Alternative TCRP Command Format\nDESCRIPTION: Shows an alternative format for specifying commands in the TCRP player using arrays.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    [time, [fnName, param0, param1, ...]]\n    // [time, [callback, param0, param1, ...]]\n]\n```\n\n----------------------------------------\n\nTITLE: Creating GridTable Instance in Phaser 3 Scene\nDESCRIPTION: Shows how to create a new instance of the GridTable class and add it to a Phaser 3 scene. This method is used when directly importing the GridTable class rather than using the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = new GridTable(scene, config);\nscene.add.existing(table);\n```\n\n----------------------------------------\n\nTITLE: Loading Database from String\nDESCRIPTION: Load a database from a serialized JSON string, replacing the current database content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\ndb.loadJSON(s);\n```\n\n----------------------------------------\n\nTITLE: Handling Scale Animation Events in Phaser 3\nDESCRIPTION: Registers event handlers for various scale animation completion events. These events can be used to trigger additional actions when animations complete.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('popup.complete', function(gameObject) { });\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('scaledown.complete', function(gameObject) { });\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('scaleyoyo.complete', function(gameObject) { });\n```\n\n----------------------------------------\n\nTITLE: Dialog Typing Page 0 Configuration\nDESCRIPTION: First page of dialog typing configuration with three lines of text. Uses null display name and icon properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/mds/fast-typing.md#2025-04-21_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\nDialog.typing, displayName=null, icon=null\nPage0:\nLine0...\nLine1...\nLine2...\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via Configuration\nDESCRIPTION: Shows how to install the plugin through game configuration after npm installation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-imagecarousel.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport PerspectiveImagePlugin from 'phaser3-rex-plugins/plugins/perspectiveimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPerspectiveImagePlugin',\n            plugin: PerspectiveImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom DOM Elements\nDESCRIPTION: Methods to create custom DOM elements with specific tag names, styles, and inner text content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/domelement.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.add.dom(x, y).createElement(tagName);\n// scene.add.dom(x, y).createElement(tagName, style, innerText);\n```\n\n----------------------------------------\n\nTITLE: Setting Tile Z Position\nDESCRIPTION: Demonstrates how to set the Z coordinate of a chess piece while maintaining X and Y positions\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-chessdata.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.rexChess.setTileZ(tileZ);\n```\n\n----------------------------------------\n\nTITLE: Handling Scroller Drag Start Events in TextArea\nDESCRIPTION: Shows how to listen for the start of touch/drag interactions in the TextArea's scroller component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.getElement('scroller').on('dragstart', function(panel) {\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Copying Ellipse Properties in Phaser 3\nDESCRIPTION: Copies properties from one ellipse to another.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Ellipse.CopyFrom(source, dest);\n```\n\n----------------------------------------\n\nTITLE: Creating ID-Alias Instance\nDESCRIPTION: JavaScript code for creating an ID-Alias instance with root collection configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-idalias.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar idAlias = rexFire.add.idAlias({\n    root: ''\n});\n```\n\n----------------------------------------\n\nTITLE: Using Vector2 Zero Constant in Phaser 3\nDESCRIPTION: References the constant Vector2 representing the zero vector (0,0).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvar vector = Phaser.Math.Vector2.ZERO;\n```\n\n----------------------------------------\n\nTITLE: Injecting Methods into Game Object Class Prototype\nDESCRIPTION: Injects scale methods into a game object class prototype to make them available for all instances.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexScale').injectMethods(GameObjectClass.prototype);\n// scene.plugins.get('rexScale').injectMethods(Phaser.GameObjects.Sprite.prototype);\n```\n\n----------------------------------------\n\nTITLE: Laying Out NameValueLabel Children\nDESCRIPTION: Code showing how to arrange the position of all elements within a NameValueLabel.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.layout();\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Vectors Method 1\nDESCRIPTION: Calculates the Euclidean distance between the current Vector2 and another vector or vector-like object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar distance = vector.distance(src);\n```\n\n----------------------------------------\n\nTITLE: Defining Leaderboard Entry Structure in Phaser3 Rex Notes\nDESCRIPTION: Specification of data fields for leaderboard entries. The structure includes user identification, board organization, time-based filtering tags, and score tracking across day, week, month, and year periods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/firebase/firestore/leaderboard/schema.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- <randomID>\n    - `userID` - Unique ID of owner\n    - `boardID` - Unique ID of board, optional\n    - `tag` - Custom filter tag, optional\n    - `tagD` - Updated day of day score, filter key of day mode\n    - `tagW` - Updated week of week score, filter key of week mode\n    - `tagM` - Updated month of month score, filter key of month mode\n    - `tagY` - Updated year of year score, filter key of year mode\n    - `scoreD` - Day score, sorting key of day mode\n    - `scoreW` - Week score, sorting key of week mode\n    - `scoreM` - Month score, sorting key of month mode\n    - `scoreY` - Year score, sorting key of year mode\n    - `userName` - Name of the owner, optional\n    - ...\n```\n\n----------------------------------------\n\nTITLE: Setting Pan Enable State in Phaser 3\nDESCRIPTION: Sets the enable state of the pan gesture detector to control whether it processes input events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npan.setEnable(enable);  // enable: true, or false\n// pan.enable = enable;\n```\n\n----------------------------------------\n\nTITLE: Configuring Phaser Game with Quad Image Plugin\nDESCRIPTION: Installs the QuadImagePlugin in the game configuration to make it available globally, allowing for the creation of skewable images.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport QuadImagePlugin from 'phaser3-rex-plugins/plugins/quadimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexQuadImagePlugin',\n            plugin: QuadImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask in JavaScript\nDESCRIPTION: Creates a bitmap mask from the text editor that can be used for masking other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = txt.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Loading Easemove Plugin\nDESCRIPTION: Demonstrates how to load the minified plugin file in the preload stage of a Phaser scene\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/easemove.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexeasemoveplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexeasemoveplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Importing Image Chess Class in Phaser 3\nDESCRIPTION: Imports the Image chess class from the phaser3-rex-plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-image.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image } from 'phaser3-rex-plugins/plugins/board-components.js';\n```\n\n----------------------------------------\n\nTITLE: DropDownList Button Out Callback\nDESCRIPTION: Example of the callback function that handles pointer out events for buttons in the dropdown list. It receives the button object, index, pointer, and event as parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(button, index, pointer, event) {\n    // this : dropDownList\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Radius of an Arc in Phaser 3\nDESCRIPTION: Sets the radius for an Arc game object using the setRadius method. This defines the size of the arc from its center point.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\narc.setRadius(radius);\n```\n\n----------------------------------------\n\nTITLE: Drawing Stroked Triangle on Graphics in Phaser 3\nDESCRIPTION: Strokes the outline of a triangle shape on a graphics object with the current line style.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// graphics.lineStyle(lineWidth, color, alpha);   // color: 0xRRGGBB\ngraphics.strokeTriangleShape(triangle);\n```\n\n----------------------------------------\n\nTITLE: Applying HSL Adjust Effect to Game Object in Phaser 3\nDESCRIPTION: Apply the HSL adjust effect to a game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-hsladjust.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexhsladjustpipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Movement Speed in Phaser 3 Board\nDESCRIPTION: Methods to set the movement speed of a chess piece, determining how fast it moves across the board.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.setSpeed(speed);\n// moveTo.speed = speed;\n```\n\n----------------------------------------\n\nTITLE: Attaching Viewport Properties to Game Object in Phaser 3\nDESCRIPTION: Demonstrates how to add viewport-relative positioning properties to a game object and set their values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/viewport-coordinate.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexviewportcoordinateplugin').add(gameObject, viewport, vpx, vpy);\ngameObject.vpx = 0.5;\ngameObject.vpy = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Listening for Value Change Events in DropDownList\nDESCRIPTION: Sets up an event listener for when the value of the dropdown list changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.on('valuechange', function(dropDownList, value, previousValue) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Managing Radius\nDESCRIPTION: Methods to get and set the radius of the circular progress, which also affects the overall size of the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar radius = circularProgress.radius;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setRadius(radius);\n// circularProgress.radius = radius;\n```\n\n----------------------------------------\n\nTITLE: Setting Bob Object Position in Phaser 3\nDESCRIPTION: Updates the position of a Bob object using the setPosition method. This allows moving the Bob to a new location in the game world.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nbob.setPosition(x, y);\n// bob.x = 0;\n// bob.y = 0;\n```\n\n----------------------------------------\n\nTITLE: Controlling Roll Animation in Perspective Carousel\nDESCRIPTION: Methods to stop rolling animation and set animation parameters like duration and easing function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.roll.stop();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.roll.setDuration(duration);\n// carousel.roll.duration = duration;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncarousel.roll.setEase(ease);\n// carousel.roll.ease = ease;\n```\n\n----------------------------------------\n\nTITLE: Placing Individual Tiles in Phaser 3\nDESCRIPTION: Methods for placing individual tiles at specific coordinates, supporting both tile indices and tile objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nmap.putTileAt(tile, tileX, tileY);\nvar tile = map.getTileAt(tileX, tileY);\nvar tile = map.getTileAtWorldXY(worldX, worldY);\nmap.putTileAt(tile, tileX, tileY, recalculateFaces, layer);\nlayer.putTileAt(tile, tileX, tileY, recalculateFaces);\n```\n\n----------------------------------------\n\nTITLE: Applying Glow Effect to a Game Object using PostPipeline Method\nDESCRIPTION: Applies the glow effect to a Phaser 3 game object using the post pipeline method after direct import.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(GlowFilterPostFx);\n```\n\n----------------------------------------\n\nTITLE: Getting Video Duration in Phaser 3\nDESCRIPTION: Retrieves the total duration of the video in seconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar duration = video.getDuration();  // time in seconds\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Interception Prediction in Phaser 3\nDESCRIPTION: Shows how to enable and disable the prediction functionality of the Interception behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interception.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Enable\ninterception.setEnable();\n\n// Disable, uses target position as predicted position\ninterception.setEnable(false);\n```\n\n----------------------------------------\n\nTITLE: Checking TCRP Recorder State\nDESCRIPTION: Checks the current state of the TCRP recorder, including whether it's recording and the current time position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRecording = recorder.isRecording;\nvar now = recorder.now;\n```\n\n----------------------------------------\n\nTITLE: Creating SimpleDropDownList Instance Directly\nDESCRIPTION: Creates a SimpleDropDownList instance directly using the imported class instead of the plugin factory method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropDownList = new SimpleDropDownList(scene, config);\nscene.add.existing(dropDownList);\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Size of Quad Grid\nDESCRIPTION: Shows how to set the cell size (width and height) of the Quad Grid. This can be done using a dedicated method or by directly setting width and height properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-quadgrid.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.setCellSize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.width = width;\ngrid.height = height;\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Data Object with Plugin\nDESCRIPTION: Extends game registry or scene data with localStorage functionality\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage-data.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = scene.plugins.get('rexlocalstoragedataplugin').extend(game.registry, config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options from a DropDownList\nDESCRIPTION: Gets the current options array from the dropdown list component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = dropDownList.options;\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Drop Down List with Rex UI Plugin\nDESCRIPTION: Creates a SimpleDropDownList object using the Rex UI plugin's factory method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropDownList = scene.rexUI.add.simpleDropDownList(config);\n```\n\n----------------------------------------\n\nTITLE: Accessing Slider Track Element in TextArea\nDESCRIPTION: Demonstrates how to get a reference to the track part of the slider component in the TextArea.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nvar track = textArea.getElement('slider.track');\n```\n\n----------------------------------------\n\nTITLE: Configuring ScrollBar Plugin in Game Config\nDESCRIPTION: Configuration code to integrate the ScrollBar UI plugin into the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from \"phaser3-rex-plugins/templates/ui/ui-plugin.js\";\nvar config = {\n  plugins: {\n    scene: [\n      {\n        key: \"rexUI\",\n        plugin: UIPlugin,\n        mapping: \"rexUI\"\n      }\n    ]\n  }\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting To-Texture Edge Parameters by Properties in Phaser 3 Dissolve Effect\nDESCRIPTION: Sets the edge start and width parameters for the to-texture (target texture) using direct property assignment. These control the revealing edge appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.toEdgeStart = edgeStart;\npipelineInstance.toEdgeWidth = edgeWidth;\n```\n\n----------------------------------------\n\nTITLE: Importing Rex UI Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Rex UI plugin in the Phaser 3 game configuration for scene-level access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Collapse Events for Folder UI Component in JavaScript\nDESCRIPTION: Shows how to listen for collapse events on the folder, title, and child elements of a folder UI component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.on('collapse.start', function(folder){\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntitle.on('folder.collapse', function(folder){\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchild.on('folder.collapse', function(folder){\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.on('collapse.complete', function(folder){\n    \n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of Custom Tag Text Class\nDESCRIPTION: Creates an instance of a custom Tag Text class with tagged content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = new MyText(scene, x, y, '<class=\"tag0\">h</class>ello', {tags:tags});\n```\n\n----------------------------------------\n\nTITLE: Creating Toast Instance\nDESCRIPTION: Basic code for adding a toast object to the scene using the Rex UI plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-toast.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar toast = scene.rexUI.add.toast(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Life-time Plugin in Phaser 3 (Minified Version)\nDESCRIPTION: Demonstrates how to load the minified version of the Life-time plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lifetime.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexlifetimeplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexlifetimeplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Getting TextBox Texture Information\nDESCRIPTION: Retrieves the current texture key and frame name used by the text box icon.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar textureKey = textBox.texture.key;\nvar frameName = textBox.frame.name;\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Shape with Class Constructor\nDESCRIPTION: Creates a checkbox shape (without click input) using the class constructor with position, size, color, and configuration parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// import CheckboxShape from 'phaser3-rex-plugins/plugins/checkboxshape.js';\nvar checkbox = new CheckboxShape(scene, x, y, width, height, color, config);\nscene.add.existing(checkbox);\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Window Rectangle Plugin in Game Config\nDESCRIPTION: Imports and configures the plugin in the game configuration for global availability.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport FullWindowRectanglePlugin from 'phaser3-rex-plugins/plugins/fullwindowrectangle-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFullWindowRectanglePlugin',\n            plugin: FullWindowRectanglePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Child Addition Events in Phaser 3 Sizer\nDESCRIPTION: Demonstrates how to listen for the 'sizer.add' event on child elements when they are added to the sizer. This allows for custom initialization or processing when a new child is added.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nchild.on('sizer.add', function(child, sizer){\n\n})\n```\n\n----------------------------------------\n\nTITLE: Update Function for Custom Progress Bar\nDESCRIPTION: Example implementation of the update callback function used to refresh the progress bar's appearance based on current state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction() {\n    // this : This custom shapes game object     \n    var shapes = this.getShapes();\n    var shape = this.getShape(name);\n    // ...\n    // var isSizeChanged = this.isSizeChanged;\n\n    // var fillColor = this.fillColor;\n    // var fillAlpha = this.fillAlpha;\n    // var lineWidth = this.lineWidth;\n    // var strokeColor = this.strokeColor;\n    // var strokeAlpha = this.strokeAlpha;\n    // ...\n    // var value = this.value;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slider Track in Phaser3 Scrollable Panel\nDESCRIPTION: Gets the track element of a slider from a panel component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar track = panel.getElement('slider.track');\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Configuration\nDESCRIPTION: Configuration code for installing the Rex UI plugin through NPM in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simplelabel.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Checking Audio Playback Status in Phaser 3\nDESCRIPTION: Illustrates how to check if any sound or a specific sound is currently playing in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPlaying = scene.sound.isPlaying();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPlaying = scene.sound.isPlaying(key);\n```\n\n----------------------------------------\n\nTITLE: Getting Child Index in Phaser3 Rex UI\nDESCRIPTION: Method to get the index of a specific child element in the sizer. Returns a number or null if the child is not found.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar index = sizer.getChildIndex(child);\n```\n\n----------------------------------------\n\nTITLE: Creating Line Shapes in Phaser 3\nDESCRIPTION: Shows how to create a new Line geometry object by specifying two points (x1,y1) and (x2,y2), and how to clone an existing line shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = new Phaser.Geom.Line(x1, y1, x2, y2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar line1 = Phaser.Geom.Line.Clone(line0);\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Player Instance (Minify File Method)\nDESCRIPTION: Shows how to create an instance of the TCRP player after loading it as a plugin using the minified file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar player = scene.plugins.get('rexarcadetcrpplugin').addPlayer(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Line Points Manipulation in Phaser 3\nDESCRIPTION: Methods to get and set end points of a line shape using x0,y0 and x1,y1 coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar x0 = line.x0;\nvar y0 = line.y0;\nvar x1 = line.x1;\nvar y1 = line.y1;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.setP0(x, y);\nline.setP1(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nline.x0 = x0;\nline.y0 = y0;\nline.x1 = x1;\nline.y1 = y1;\n```\n\n----------------------------------------\n\nTITLE: Controlling VHS Effect in Horrifi Pipeline\nDESCRIPTION: Methods to enable, disable, and configure the VHS Distortion effect in the Horrifi pipeline. Includes setter and getter methods for strength parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Enable\npipelineInstance.setVHSEnable();\n// pipelineInstance.setVHSEnable(true);\n// or\npipelineInstance.vhsEnable = true;\n\n// Disable\npipelineInstance.setVHSEnable(false);\n// or\npipelineInstance.vhsEnable = false;\n\n// Get\nvar vhsEnable = pipelineInstance.vhsEnable;\n\n// Set parameters\npipelineInstance.setVhsStrength(value);\n// or\npipelineInstance.vhsStrength = value;\n\n// Get parameters\nvar vhsStrength = pipelineInstance.vhsStrength;\n```\n\n----------------------------------------\n\nTITLE: DateTime Difference Calculations in Luxon\nDESCRIPTION: Demonstrates how to calculate time differences between DateTime objects with various units of measurement.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/luxon.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar i1 = DateTime.fromISO('1982-05-25T09:45'),\n    i2 = DateTime.fromISO('1983-10-14T10:30');\ni2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\ni2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\ni2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\ni2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Split Space\nDESCRIPTION: Sets or gets the split space parameters (left, right, top, bottom) of the Split Pipeline effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar left = pipelineInstance.spaceLeft;\nvar right = pipelineInstance.spaceRight;\nvar top = pipelineInstance.spaceTop;\nvar bottom = pipelineInstance.spaceBottom;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.spaceLeft = left;\npipelineInstance.spaceRight = right;\npipelineInstance.spaceTop = top;\npipelineInstance.spaceBottom = bottom;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setSpace(left, right, top, bottom);\n```\n\n----------------------------------------\n\nTITLE: Getting From-Texture Edge Parameters in Phaser 3 Dissolve Effect\nDESCRIPTION: Retrieves the edge start and width parameters for the from-texture (source texture) in the dissolve effect. These control the appearance of the dissolving edge.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar edgeStart = pipelineInstance.fromEdgeStart;\nvar edgeWidth = pipelineInstance.fromEdgeWidth;\n```\n\n----------------------------------------\n\nTITLE: Adding Perspective Sprite to Phaser 3 Scene\nDESCRIPTION: Adds a perspective sprite object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-sprite.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sprite = scene.add.rexPerspectiveSprite(x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Importing PNG Appender Class and Using Static Methods\nDESCRIPTION: This snippet shows how to import the PNG Appender class directly and use its static methods for appending and extracting data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/png-appender.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport PNGAppender from 'phaser3-rex-plugins/plugins/pngappender.js';\n\nvar resultBuffer = PNGAppender.append(pngBuffer, data);\nvar data = PNGAppender.extract(pngBuffer);\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM\nDESCRIPTION: Command to install the Rex plugins package via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imagebox.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Setting Radio Button State in Dialog - JavaScript\nDESCRIPTION: Method to set the selected radio button in choices by name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.setChoicesSelectedButtonName(name);\n```\n\n----------------------------------------\n\nTITLE: Triangle Mask Creation in Phaser 3\nDESCRIPTION: Creating a geometry mask from a Triangle object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = triangle.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Handling Key1 Addition in 2D Firebase Item Table\nDESCRIPTION: JavaScript code to set up an event handler for when a key1 is added to a 2D Firebase item table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('addkey1', function(key0, key1, value) {  });\n```\n\n----------------------------------------\n\nTITLE: Creating CircularProgress Shape in Phaser3 Rex UI\nDESCRIPTION: Demonstrates how to add a circular progress bar shape. This component visualizes progress in a circular format, commonly used for loading indicators or timers.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar circularProgress = scene.rexUI.add.circularProgress(x, y, radius, barColor, value, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Shockwave Effect from Game Object\nDESCRIPTION: Retrieves the shockwave pipeline instance from a game object. Can get either the first instance or an array of all instances.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexShockwavePipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexShockwavePipeline').get(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install Rex plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Getting Rotation Angles in Radians\nDESCRIPTION: Retrieves the rotation angles of the perspective image in radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotationX = image.rotationX; // Angle in radians\nvar rotationY = image.rotationY; // Angle in radians\nvar rotationZ = image.rotationZ; // Angle in radians\n```\n\n----------------------------------------\n\nTITLE: Loading Wait Events Plugin in Phaser 3 Preload Stage\nDESCRIPTION: Demonstrates how to load the minified version of the Wait Events plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexwaiteventsplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexwaiteventsplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Firebase Application Initialization - JavaScript\nDESCRIPTION: Configuration and initialization of Firebase application with required credentials.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-broadcast.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Importing SimpleDropDownList Class for Direct Usage\nDESCRIPTION: Shows how to import the SimpleDropDownList class directly from the components module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DropDownList } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Creating Sequence Instance from Plugin\nDESCRIPTION: Creates a new sequence instance after loading the plugin\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sequence.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar seq = this.plugins.get('rexsequenceplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom TileSprite Instance\nDESCRIPTION: Instantiates a custom TileSprite class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilesprite.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new MyTileSprite(scene, x, y, key);\n```\n\n----------------------------------------\n\nTITLE: Traversing ContainerLite Children in Phaser 3\nDESCRIPTION: Demonstrates methods for traversing child game objects in a ContainerLite instance using depth-first and breadth-first search.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.dfs(function(current) {\n    // return true;  // Discard children traveraling\n})\n\ncontainer.bfs(function(current) {\n    // return true;  // Discard children traveraling\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Scale-Down Animation for Width Only in Phaser 3\nDESCRIPTION: Scales down a game object's width over a specified duration without destroying it, while keeping the height constant. Supports both standard and Promise-based interfaces.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDowny(duration, 'x');\n// gameObject.scaleDowny(duration, 'x', ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDownPromise(duration, 'x', ease)\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring Nine-slice Style in Phaser 3\nDESCRIPTION: This snippet shows the structure for styling a Nine-slice object in Phaser 3. It includes properties for key, frame, width settings for left/right/top/bottom, tint, alpha, scale, flip, origin, and state-specific overrides.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // $type: 'nineSlice',\n\n    key: ,\n    frame: ,\n    leftWidth: , \n    rightWidth: ,\n    topHeight: , \n    bottomHeight: ,\n    // tint: 0xffffff,\n    // alpha: 1,\n    // scale: 1,\n    // flipX: false,\n    // flipY: false,\n    // origin:\n    // originX: \n    // originY:\n    // width: 0,\n    // height: 0,\n\n    // effects: true,\n\n    // Style override in active state\n    // 'active.key': undefined,\n    // 'active.frame': undefined,\n    // 'active.tint': undefined,\n    // 'active.alpha': undefined,\n    // 'active.scale': undefined,\n    // 'active.glowColor': null,\n    // ...\n\n    // Style override in hover state\n    // 'hover.key': undefined,\n    // 'hover.frame': undefined,\n    // 'hover.tint': undefined,\n    // 'hover.alpha': undefined,\n    // 'hover.scale': undefined,\n    // 'hover.glowColor': null,\n    // ...\n\n    // Style override in disable state\n    // 'disable.key': undefined,\n    // 'disable.frame': undefined,\n    // 'disable.tint': undefined,\n    // 'disable.alpha': undefined,\n    // 'disable.scale': undefined,\n    // 'disable.glowColor': null,\n    // ...  \n}\n```\n\n----------------------------------------\n\nTITLE: Loading Texture for Rope Object in Phaser 3\nDESCRIPTION: Loads an image texture that will be used with a Rope game object. The image is loaded with a key identifier and URL to the image resource.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n```\n\n----------------------------------------\n\nTITLE: Setting Y Scroll Factor of Game Objects in Phaser3\nDESCRIPTION: Sets the vertical scroll factor of game objects, which determines how they move relative to camera scrolling. Lower values create parallax effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetScrollFactorY(gameObjects, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Accessing Icon Element in imageInputLabel (JavaScript)\nDESCRIPTION: Retrieves the icon game object from an imageInputLabel component. The icon is implemented as an imageBox game object that is created internally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar imageBox = imageInputLabel.getElement('icon');\n```\n\n----------------------------------------\n\nTITLE: Triangle Stroke Style Operations in Phaser 3\nDESCRIPTION: Getting, setting, and clearing stroke style of a Triangle object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = triangle.strokeColor;\ntriangle.setStrokeStyle(lineWidth, color, alpha);\ntriangle.setStrokeStyle();\n```\n\n----------------------------------------\n\nTITLE: Customizing Circular Track\nDESCRIPTION: Methods to customize the appearance of the circular track, including color and thickness settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar trackColor = circularProgress.trackColor;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setTrackColor(trackColor);\n// circularProgress.trackColor = trackColor;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setThickness(thickness);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rex UI Plugin in Game Configuration\nDESCRIPTION: Code to configure the Rex UI Plugin in the Phaser 3 game configuration for scene-level access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Rotating a Vector2 in Phaser 3\nDESCRIPTION: Rotates the Vector2 by a specified angle delta in radians while maintaining its length.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvector.rotate(delta);\n```\n\n----------------------------------------\n\nTITLE: Adding Press Input in Phaser 3\nDESCRIPTION: Creates a press input instance after the plugin has been loaded.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar press = scene.rexGestures.add.press(config);\n// var press = scene.rexGestures.add.press(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Managing Render Layer in Container-Lite (JavaScript)\nDESCRIPTION: Methods for managing the render layer of a Container-Lite instance. This includes enabling the layer, getting the layer game object, and checking if a layer exists.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.enableLayer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar layer = container.getLayer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar layer = container.privateRenderLayer;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasLayer = container.hasLayer();\n```\n\n----------------------------------------\n\nTITLE: Loading Pinch Gesture Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the minified version of the Pinch Gesture plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pinch.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexgesturesplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgesturesplugin.min.js', 'rexGestures', 'rexGestures');\n```\n\n----------------------------------------\n\nTITLE: Creating GroupNavigator Instance from Plugin\nDESCRIPTION: Creates a new instance of the GroupNavigator from the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar navigator = scene.plugins.get('rexgroupnavigatorplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slider Thumb in Phaser3 Scrollable Panel\nDESCRIPTION: Gets the thumb element of a slider from a panel component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar thumb = panel.getElement('slider.thumb');\n```\n\n----------------------------------------\n\nTITLE: Handling Wait Click Events in Phaser3 Tag Player\nDESCRIPTION: Event handler for wait.click events in the Tag Player system, which fires when a [wait=click] or [click] tag is encountered in the content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('wait.click', function() {\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Carousel Class Implementation\nDESCRIPTION: Shows how to create a custom class extending the PerspectiveImageCarousel with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-imagecarousel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPerspectiveImageCarousel extends PerspectiveImageCarousel {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Class Instance\nDESCRIPTION: Shows how to import the CircularProgressCanvas class and create a new instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport CircularProgressCanvas from 'phaser3-rex-plugins/plugins/circularprogresscanvas.js';\nvar circularProgress = new CircularProgressCanvas(scene, x, y, radius, color, value, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Getting TextAreaInput Line Count in JavaScript\nDESCRIPTION: This snippet shows how to get the total number of lines in the TextAreaInput.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar linesCount = textAreaInput.linesCount;\n```\n\n----------------------------------------\n\nTITLE: Installing CRT Pipeline Plugin via NPM\nDESCRIPTION: Installs the CRT pipeline plugin from NPM package for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading File Headers\nDESCRIPTION: Shows how to load file headers using promises with success and error handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage-files.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.loadHeaders()\n    .then(function(result) { \n        // var headers = result.headers;\n    })\n    .catch(function(result) {\n        // var error = result.error;\n    })\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Setting Slider Enable State in TextArea\nDESCRIPTION: Demonstrates an alternative way to enable or disable the slider component using a property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.sliderEnable = enabled;\n```\n\n----------------------------------------\n\nTITLE: Instantiating Custom Arc Class in Phaser 3\nDESCRIPTION: Creates an instance of a custom Arc class with the specified parameters. This allows using the extended functionality defined in the custom class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar arc = new MyArc(scene, x, y, radius, startAngle, endAngle, anticlockwise, fillColor);\n```\n\n----------------------------------------\n\nTITLE: Getting Checkbox Display Size\nDESCRIPTION: Retrieves the current display width and height of the checkbox, which may differ from the actual size due to scaling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = checkbox.displayWidth;\nvar height = checkbox.displayHeight;\n```\n\n----------------------------------------\n\nTITLE: Configuring Scale Plugin in Game Configuration\nDESCRIPTION: Sets up the Scale plugin in the global plugins configuration for a Phaser game instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScalePlugin from 'phaser3-rex-plugins/plugins/scale-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexScale',\n            plugin: ScalePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Clearing Canvas Texture\nDESCRIPTION: Methods for clearing entire texture or specific regions\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-texture.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.clear();\n\ntexture.clear(x, y, width, height);\n// // texture.clear(x, y, width, height, update);\n```\n\n----------------------------------------\n\nTITLE: Creating SingleRoom Instance Directly\nDESCRIPTION: Instantiates the SingleRoom class directly with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar room = new SingleRoom(config);\n```\n\n----------------------------------------\n\nTITLE: Table Data Operations\nDESCRIPTION: Methods for manipulating and accessing table data including get, set, add, and checking for existence.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvtohashtable.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar val = table.get(rowKey, colKey);\ntable.set(rowKey, colKey, value);\ntable.add(rowKey, colKey, value);\nvar hasRow = table.hasRowKey(rowKey);\nvar hasCol = table.hasColKey(colKey);\nvar hasCell = table.hasKey(rowKey, colKey);\n```\n\n----------------------------------------\n\nTITLE: Sorting Documents by Single Key\nDESCRIPTION: Sort the result set by a single property in ascending or descending order using simplesort in a chain.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.chain().find({}).simplesort(key).data();  // ascending\n// var docArray = collection.chain().find({}).simplesort(key, {desc: true}).data();  // descending\n```\n\n----------------------------------------\n\nTITLE: Iterating through elements in a Phaser 3 Set\nDESCRIPTION: Demonstrates two methods for iterating through Set elements - 'each' for when the Set might be modified during iteration, and 'iterate' for when it won't be modified.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-set.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nset.each(function(element, index) {\n    // return false;  // return false to cancel iteration\n}, scope)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nset.iterate(function(element, index) {\n    // return false;  // return false to cancel iteration\n}, scope)\n```\n\n----------------------------------------\n\nTITLE: Adding Cross-Stitching Effect with Configurable Parameters\nDESCRIPTION: Applies the cross-stitching effect to a game object with configurable parameters for stitching dimensions and brightness.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexCrossStitchingPipeline').add(gameObject, {\n    // stitchingWidth: 6,\n    // stitchingHeight: 6,\n    // brightness: 0,\n\n    // name: 'rexCrossStitchingPostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Tint for Full Window Rectangle\nDESCRIPTION: Methods to get and set the tint property of the rectangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar tint = rect.tint;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrect.tint = tint;\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Perspective Render Texture (JavaScript)\nDESCRIPTION: Shows how to create a bitmap mask from a perspective render texture object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-rendertexture.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Wrap Mode\nDESCRIPTION: Methods to get the current wrap mode and set a new wrap mode for Tag Text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar mode = txt.style.wrapMode;\n\ntxt.setWrapMode(mode);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Frame Name Callback for NinePatch2\nDESCRIPTION: Sets a custom callback function for determining frame names in a NinePatch2 object. This allows for custom texture atlas mapping strategies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setGetFrameNameCallback(callback);\n```\n\n----------------------------------------\n\nTITLE: Importing Scrollable Panel Class in Phaser 3\nDESCRIPTION: Demonstrates how to import the ScrollablePanel class directly and create a panel object. This method provides the most flexibility for customization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ScrollablePanel } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar panel = new ScrollablePanel(scene, config);\nscene.add.existing(panel);\n```\n\n----------------------------------------\n\nTITLE: Accessing TextBox Inner Sizer Element\nDESCRIPTION: Retrieves the inner sizer container that holds various UI elements based on the text box mode.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar innerSizer = textBox.getElement('innerSizer');\n```\n\n----------------------------------------\n\nTITLE: Handling Pan Start Event in Phaser 3\nDESCRIPTION: Sets up an event handler for the 'panstart' event that fires when panning begins.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npan.on('panstart', function(pan, gameObject, lastPointer){\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Importing Touch State Class\nDESCRIPTION: Shows how to import the Touch State class directly for use in a project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/touchstate.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport TouchState from 'phaser3-rex-plugins/plugins/touchstate.js';\n```\n\n----------------------------------------\n\nTITLE: Checking if Pointer is Inside Another Game Object in Phaser 3\nDESCRIPTION: Checks if the pointer is inside another game object during a press event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npress.on('pressstart', function(press){\n    var isPointerInsideGameObject = press.isPointerInGameObject(anotherGameObject);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Skewable Image with Object Parameters\nDESCRIPTION: Alternative method to create a skewable image using an object with configuration parameters instead of separate arguments.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexSkewImage({\n    // x: 0,\n    // y: 0,\n    key,\n    // frame: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Board Plugin in Game Config\nDESCRIPTION: Configuration setup to include the board plugin in the game instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-sprite.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Rotate Plugin in Phaser 3 Scene Preload\nDESCRIPTION: Demonstrates how to load the minified version of the Rotate plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotate.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexrotateplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexrotateplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Adding Outline Effect Layer\nDESCRIPTION: Creates an outline effect layer instance after plugin loading.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effectlayer-outline.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar effectLayer = scene.add.rexOutlineEffectLayer(config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mask Element in Phaser3 Scrollable Panel\nDESCRIPTION: Gets the mask game object (a graphics object) from a panel component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar maskGameObject = panel.getElement('mask');\n```\n\n----------------------------------------\n\nTITLE: Normalizing a Vector2 in Phaser 3\nDESCRIPTION: Adjusts the Vector2 to have a length of 1 while maintaining its direction, creating a unit vector.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvector.normalize();\n```\n\n----------------------------------------\n\nTITLE: Managing Stroke Color and Thickness in Phaser 3 Text\nDESCRIPTION: Shows how to get, set, and clear stroke color and thickness for a Phaser 3 Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = txt.style.stroke;\nvar thickness = txt.style.strokeThickness;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setStroke(color, thickness);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setStroke();\n```\n\n----------------------------------------\n\nTITLE: Disabling Physics Body in Phaser 3\nDESCRIPTION: Disables the physics body on a game object, preventing it from participating in physics calculations until re-enabled.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.disableBody();\n// gameObject.disableBody(disableGameObject, hideGameObject);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask from a Skewable Image\nDESCRIPTION: Creates a bitmap mask from the skewable image that can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tab by Key or Index\nDESCRIPTION: Gets tab game objects using either a key string or numeric index\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObjects = tabPages.getTab(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObjects = tabPages.getTab(index);\n```\n\n----------------------------------------\n\nTITLE: Drag Event Handlers\nDESCRIPTION: Event handlers for drag start, drag, and drag end events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/drag.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('dragstart', function(pointer, dragX, dragY){ /*...*/ });\ngameObject.on('drag', function(pointer, dragX, dragY){ /*...*/ });\ngameObject.on('dragend', function(pointer, dragX, dragY, dropped){ /*...*/ });\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox by Property Assignment\nDESCRIPTION: Sets the checkbox checked state by directly assigning to the checked or value property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.checked = true;\n// checkbox.value = true;\n```\n\n----------------------------------------\n\nTITLE: Layout Children in Sizer in Phaser 3\nDESCRIPTION: Demonstrates how to trigger a layout update for all children in the sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.layout();\n```\n\n----------------------------------------\n\nTITLE: Accessing File Chooser Element in imageInputLabel (JavaScript)\nDESCRIPTION: Retrieves the file chooser game object from an imageInputLabel component. This element is only available if the domButton option was set to true when creating the input label.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileChooser = imageInputLabel.getElement('fileChooser');\n```\n\n----------------------------------------\n\nTITLE: Setting Text-Box Properties\nDESCRIPTION: Command to set various properties of a Text-box including position, transparency, and animation parameters. Supports easing with configurable duration and wait functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/textbox-commands.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Creating a Title Game Object in Phaser 3\nDESCRIPTION: Creates a TitleLabel as a Title game object with configurable parameters for positioning, alignment, and text content. Parameters include dimensions, viewport positioning, alignment options, and text content for upper and lower text objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/title-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTITLE\n  id=NAME\n  width=0\n  height=0  \n  vpx=0.5\n  vpy=1\n  vpw=\n  vph=\n  alignLeft=false\n  alignRight=true\n  alignTop=true\n  alignBottom=false\n  text0=\n  text1=\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom NameValueLabel Class\nDESCRIPTION: Example showing how to extend the NameValueLabel class with custom functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNameValueLabel extends RexPlugins.UI.NameValueLabel {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Position and Stopping Physics Body in Phaser 3\nDESCRIPTION: Shows methods for resetting the position of a physics body and stopping its movement by setting acceleration, velocity, and speed to zero.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nbody.reset(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.stop();\n```\n\n----------------------------------------\n\nTITLE: Handling Scroll Events in Phaser 3 Scrollable Panel\nDESCRIPTION: This snippet shows how to listen for and handle various scroll-related events in the scrollable panel, including general scroll, slider, and scroller events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npanel.on('scroll', function(panel) {\n    // ...\n})\n\npanel.getElement('slider').on('inputstart', function(panel) {\n    // ...\n})\n\npanel.getElement('slider').on('inputend', function(panel) {\n    // ...\n})\n\npanel.getElement('scroller').on('dragstart', function(panel) {\n    // ...\n})\n\npanel.getElement('scroller').on('dragend', function(panel) {\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Video Configuration Object\nDESCRIPTION: Default configuration options for the video plugin including element properties and playback settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rexvideo.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    x: 0,\n    y: 0,\n    width: undefined,\n    height: undefined,\n\n    // Element properties\n    src: url,\n    // src: {\n    //     webm: webmFileURL,\n    //     ogg: oggFileURL,\n    //     mp4: mp4FileURL,\n    //     h264: h264FileURL,\n    // }\n    id: undefined,\n    autoPlay: true,\n    controls: false,\n    loop: false,\n    muted: false,\n    playsInline: true,\n    crossOrigin: 'anonymous',\n    playbackTimeChangeEventEnable: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Point Light Color Values\nDESCRIPTION: Shows how to retrieve the current RGB color values of a point light.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar red = pointLight.color.r;\nvar green = pointLight.color.g;\nvar blue = pointLight.color.b;\n```\n\n----------------------------------------\n\nTITLE: Importing CRT Pipeline Class in Phaser 3 Game Configuration\nDESCRIPTION: Imports the CRT post-processing class and adds it to the pipeline array in Phaser 3 game configuration for direct use with game objects or cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport CrtPostFx from 'phaser3-rex-plugins/plugins/crtpipeline.js';\nvar config = {\n    // ...\n    pipeline: [CrtPostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Querying a Dynamic View with Additional Filters\nDESCRIPTION: Create a branched result set from a dynamic view to apply additional filters without modifying the view.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = view.branchResultset().find({}).data();\n```\n\n----------------------------------------\n\nTITLE: Adding Real-Time Timers Object to Phaser 3 Scene\nDESCRIPTION: Creates a Real-Time Timers object and adds it to the Phaser 3 scene using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar realTimeTimers = scene.plugins.get('rexrealtimetimersplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Calculating Triangle Area in Phaser 3\nDESCRIPTION: Calculates the area of a triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar area = Phaser.Geom.Triangle.Area(triangle);\n```\n\n----------------------------------------\n\nTITLE: Loading Button Plugin in Phaser 3 Scene Preload\nDESCRIPTION: Demonstrates how to load the Button plugin minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexbuttonplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexbuttonplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Display Size Management\nDESCRIPTION: Methods for getting and setting the display dimensions of the line.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-line.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = line.displayWidth;\nvar height = line.displayHeight;\n\nline.setDisplaySize(width, height);\n\nline.displayWidth = width;\nline.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Loading Rex UI Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the Rex UI plugin as a scene plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Configuring Pop-Up Animation with Config Object in Phaser 3\nDESCRIPTION: Provides a more flexible way to configure pop-up animations using a configuration object. The config can specify duration, orientation (x, y, or both), and ease function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScale(scaleX, scaleY)\n    .popUp({\n        duration: undefined,\n        orientation: undefined,\n        ease: undefined,\n    })\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScale(scaleX, scaleY)\n    .popUpPromise(config)\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Bob Objects in a Blitter Container\nDESCRIPTION: Creates multiple Bob objects with the same properties at once. This is more efficient than creating them individually when you need many similar objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar bobs = blitter.createMultiple(quantity, frame, visible);\n```\n\n----------------------------------------\n\nTITLE: Setting Data in Question Manager (JavaScript)\nDESCRIPTION: Shows how to set a value for a specific key in the Question Manager's data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nquestionManager.setData(key, value);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Footer Element in Phaser3 Scrollable Panel\nDESCRIPTION: Gets the footer game object from a panel component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar childPanel = panel.getElement('footer');\n```\n\n----------------------------------------\n\nTITLE: Hit Test Function Signature\nDESCRIPTION: Function signature for testing if a point hits a specific area of the model. Takes a hit area name and coordinates as parameters to check for collisions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nhitTest(hitAreaName, x, y)\n```\n\n----------------------------------------\n\nTITLE: Applying Split Effect to Camera\nDESCRIPTION: Applies the Split Pipeline effect to a camera with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexsplitpipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Managing Sound Seek Position in Phaser 3\nDESCRIPTION: Methods to set the playback position (seek) of a sound instance and get the current playback time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.setSeek(time); // seek: playback time\n// music.seek = seek;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar time = music.seek;  // return 0 when playback ends\n```\n\n----------------------------------------\n\nTITLE: Applying Horrifi Effect to Camera\nDESCRIPTION: Applies the Horrifi post-processing effect to a camera after loading the plugin from minified file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexhorrifipipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring DOM element in Phaser 3 game settings\nDESCRIPTION: Configuration setup required for the text editor plugin, including DOM container enablement and input targets.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    parent: divId,\n    // fullscreenTarget: divId, // For fullscreen\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    },\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Managing Pointer Input for Shaders in Phaser 3\nDESCRIPTION: Gets or sets the pointer used for the 'mouse' uniform in shaders. This allows shaders to respond to mouse/touch input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar pointer = shader.pointer;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshader.setPointer(pointer);\n```\n\n----------------------------------------\n\nTITLE: Checking if Point is Inside Ellipse in Phaser 3\nDESCRIPTION: Tests whether a coordinate point lies inside an ellipse.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInside = ellipse.contains(x, y);\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Input in Phaser 3 Tweaker\nDESCRIPTION: This snippet shows how to add a number input to a Tweaker instance. It includes options for integer conversion, customization of appearance, and monitoring of value changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput(object, key, {\n    // view: 'number',\n    // int: undefined,\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n    \n    // orientation: 'x',\n\n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Canvas Object to Phaser 3 Scene\nDESCRIPTION: Adds a Canvas object to the Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = scene.add.rexCanvas(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Adding a Cover Object After Plugin Import\nDESCRIPTION: Shows how to create a Cover object after importing the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar cover = scene.add.rexCover(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Elements by Name\nDESCRIPTION: Retrieves game objects by name with optional recursive search\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tabPages.getElement('#' + name);\n// var gameObject = pages.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tabPages.getByName(name);\n// var gameObject = tabPages.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Entering and Exiting Skew Mode (JavaScript)\nDESCRIPTION: Demonstrates how to enter and exit skew mode for a ContainerSkew instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-skew.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nskew.enter();\n\n// ...\n\nskew.exit();\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Image After Plugin Configuration\nDESCRIPTION: Creates a perspective image game object after configuring the plugin in game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexPerspectiveImage(x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: State Machine Flow\nDESCRIPTION: Mermaid diagram showing the state transitions of the scroller behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scroller.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n\nIDLE[\"Idle\"] --> |Drag| DRAG[\"Dragging<br>event 'valuechange'\"]\nDRAG --> |Release| OnRelease{\"Under bounds?\"}\n\nOnRelease --> |Yes| SLIDE[\"Sliding<br>Sliding-deceleration\"]\nSLIDE --> |Stop| IDLE\nSLIDE --> |Drag| DRAG\n\nOnRelease --> |No| BACK[\"Pull back to bounds<br>Back-deceleration\"]\nBACK --> |Stop| IDLE\nBACK --> |Drag| DRAG\n```\n\n----------------------------------------\n\nTITLE: Creating TextAreaInput Instance From Imported Class\nDESCRIPTION: Creates a TextAreaInput instance using the imported class and adds it to the Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar textAreaInput = new TextAreaInput(scene, config);\nscene.add.existing(textAreaInput);\n```\n\n----------------------------------------\n\nTITLE: Using ScaleDownDestroy with Minify File\nDESCRIPTION: Scales down a game object and then destroys it using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexscaleplugin').scaleDownDestroy(gameObject, duration);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM for TextTruncator\nDESCRIPTION: Command to install rex plugins package from npm to access the TextTruncator functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttruncator.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Padding in Phaser 3\nDESCRIPTION: Code for accessing and setting text padding on all sides (left, top, right, bottom). Controls the spacing between text content and the boundaries of the text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar left = txt.padding.left;\nvar top = txt.padding.top;\nvar right = txt.padding.right;\nvar bottom = txt.padding.bottom;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setPadding(left, top, right, bottom);\n// txt.setPadding(padding); // padding: {left, top, right, bottom}\n```\n\n----------------------------------------\n\nTITLE: Importing File Drop Zone Plugin in Phaser 3\nDESCRIPTION: Imports the file drop zone plugin and configures it in the game setup.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filedropzone.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport FileDropZonePlugin from 'phaser3-rex-plugins/plugins/filedropzone-plugin.js';\nvar config = {    \n    parent: divId,\n    // fullscreenTarget: divId, // For fullscreen\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    }, \n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFileDropZone',\n            plugin: FileDropZonePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Gesture Plugin via Minified File in Phaser 3\nDESCRIPTION: Shows how to load the gesture plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexgesturesplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgesturesplugin.min.js', 'rexGestures', 'rexGestures');\n```\n\n----------------------------------------\n\nTITLE: Setting Hue Rotation in HSL Adjust Pipeline for Phaser 3\nDESCRIPTION: Set the hue rotation value for the HSL adjust effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-hsladjust.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setHueRotate(value);\n```\n\n----------------------------------------\n\nTITLE: Transition Complete Callback Implementation for Phaser 3\nDESCRIPTION: Example of a complete callback function implementation. Receives the parent container, current and next image objects, and the progress value (t) which is 1 at the end of the transition.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(parent, currentImage, nextImage, t) { }\n```\n\n----------------------------------------\n\nTITLE: Creating a TextTruncator Instance with Configuration Options\nDESCRIPTION: Shows how to create a TextTruncator instance with various configuration options including symbol, maximum dimensions, and content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttruncator.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar truncator = scene.plugins.get('rexTextTruncator').add(textGameObject, {\n    // enable: true,\n    // symbol: '...',\n    // maxWidth: undefined,\n    // maxHeight: undefined,\n    // text: '',              // content in string or array\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Data Easing Plugin in Phaser 3 Configuration (JavaScript)\nDESCRIPTION: Shows how to import and configure the data easing plugin in the game configuration, and add the ease-data behavior to a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/easedata.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport EaseDataPlugin from 'phaser3-rex-plugins/plugins/easedata-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexEaseData',\n            plugin: EaseDataPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar easedata = scene.plugins.get('rexEaseData').add(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Filling Tiles in Tilemap Layers\nDESCRIPTION: Methods for filling tiles with a specific index in a map or layer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmap.fill(index);  // Fill all grids\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmap.fill(index, tileX, tileY, width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.fill(index);  // Fill all grids\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.fill(index, tileX, tileY, width, height);\n```\n\n----------------------------------------\n\nTITLE: Getting Test Results from Conditions Table\nDESCRIPTION: Demonstrates how to get test results from the Conditions Table based on a given context.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/conditionstable.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar results = table.getTestResults(context);\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcade Physics for Phaser 3 Game\nDESCRIPTION: Enables the Arcade physics engine in the Phaser 3 game configuration. This is a prerequisite for using the bullet plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bullet.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    physics: {\n        default: 'arcade',\n        arcade: {\n            // debug: true\n        }\n    }\n}\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Knob Plugin via Minify File in Phaser3\nDESCRIPTION: Code showing how to load the UI plugin via a minify file in the preload stage of a Phaser3 scene and add a knob object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-knob.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar knob = scene.rexUI.add.knob(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Star Points in Phaser 3\nDESCRIPTION: Retrieves the number of points on a star shape in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = star.points;\n```\n\n----------------------------------------\n\nTITLE: Creating Tweaker Object with Direct Class Import\nDESCRIPTION: Code to create a tweaker object by directly instantiating the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar tweaker = new Tweaker(scene, config);\nscene.add.existing(tweaker);\n```\n\n----------------------------------------\n\nTITLE: Loading Live2d Model Assets in TypeScript\nDESCRIPTION: This snippet demonstrates the process of loading various assets required for a Live2d model, including the model file, expressions, physics, pose, and textures.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfetch(`${modelHomePath}${jsonFileName}`)\n\nfetch(`${modelHomePath}${modelFileName}`);\n\nconst count: number = modelSetting.getExpressionCount();\nfor (let i = 0; i < count; i++) {\n    const expressionFileName = modelSetting.getExpressionFileName(i);\n    fetch(`${modelHomePath}${expressionFileName}`);\n}\n\nfetch(`${modelHomePath}${physicsFileName}`);\n\nfetch(`${modelHomePath}${poseFileName}`);\n\nfetch(`${modelHomePath}${userDataFileName}`);\n\nconst motionGroupCount: number = this._modelSetting.getMotionGroupCount();\nconst group: string[] = [];\nfor (let i = 0; i < motionGroupCount; i++) {\n     group[i] = modelSetting.getMotionGroupName(i);\n    fetch(`${modelHomePath}${expressionFileName}`);\n}\n\nconst textureCount: number = this._modelSetting.getTextureCount();\nfor (\n    let modelTextureNumber = 0;\n    modelTextureNumber < textureCount;\n    modelTextureNumber++\n  ) {\n    if (this._modelSetting.getTextureFileName(modelTextureNumber) == '') {\n      console.log('getTextureFileName null');\n      continue;\n    }\n\n    let texturePath =\n      this._modelSetting.getTextureFileName(modelTextureNumber);\n    texturePath = this._modelHomeDir + texturePath;\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling by Line Count in TextArea\nDESCRIPTION: Shows how to scroll the TextArea content down by a specified number of lines.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.scrollLine(lineCount);\n```\n\n----------------------------------------\n\nTITLE: Complete Spiral Curve Configuration\nDESCRIPTION: Demonstrates all available configuration options for creating a spiral curve, including origin points, radius settings, and angle properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/curve-spiral.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar spiral = scene.plugins.get('rexSpiralCurve').add({\n    // Origin point\n    // Ease origin point\n    // startX:0, endX: 0, easeX: 'Linear',\n    // startY:0, endY: 0, easeY: 'Linear',\n    // Fixed point\n    // x, y,\n\n    // x-radius\n    // startXRadius: 0, endXRadius, easeXRadius: 'Linear',\n    // y-radius\n    // startYRadius: 0, endYRadius, easeYRadius: 'Linear',\n    // start-end radius\n    // startRadius, endRadiux\n\n    // angle\n    // startAngle: 0, endAngle: 360, easeAngle: 'Linear',\n\n    // rotation: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Right-to-Left in Phaser 3 Round Rectangle Progress\nDESCRIPTION: Code snippets for retrieving and setting the right-to-left (or bottom-to-top) configuration of a round rectangle progress bar in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar rtl = roundRectangleProgress.rtl;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nroundRectangleProgress.setRTL(rtl);\n// roundRectangleProgress.rtl = rtl;\n```\n\n----------------------------------------\n\nTITLE: Loading Board Plugin in Phaser 3 Scene Preload\nDESCRIPTION: Loads the minified Board plugin file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-image.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Style of an Arc in Phaser 3\nDESCRIPTION: Sets the fill color and alpha (transparency) of an Arc game object. These determine how the interior of the arc appears.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\narc.setFillStyle(color, alpha);\n```\n\n----------------------------------------\n\nTITLE: Creating Mouse Wheel Scroller Instance - Class Import Method\nDESCRIPTION: Demonstrates how to create a mouse wheel scroller instance using direct class import.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheelscroller.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport MouseWheelScroller from 'phaser3-rex-plugins/plugins/mousewheelscroller.js';\nvar scroller = new MouseWheelScroller(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom Graphics Class in Phaser 3\nDESCRIPTION: Creates an instance of a custom Graphics class with scene and options parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar graphics = new MyGraphics(scene, options);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mouse Wheel Scroller Instance\nDESCRIPTION: Shows the configuration options when creating a mouse wheel scroller instance including focus behavior, speed, and enable state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheelscroller.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar scroller = scene.plugins.get('rexMouseWheelScroller').add(gameObject, {\n    // focus: true,\n    // speed: 0.1,\n    // enable: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Input Text in JavaScript\nDESCRIPTION: Methods for getting and setting the text in the hidden text edit behavior component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = txt.inputText;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = txt.setInputText(text);\n```\n\n----------------------------------------\n\nTITLE: Class Import and Usage\nDESCRIPTION: Demonstrates how to import and use the grid alignment classes directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridalign.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QuadGridAlign, HexagonGridAlign } from 'phaser3-rex-plugins/plugins/gridalign.js';\n\nQuadGridAlign(gameObjects, config);\nHexagonGridAlign(gameObjects, config);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom NinePatch2 Subclass\nDESCRIPTION: Creates an instance of a custom class that extends NinePatch2. This shows how to use a custom NinePatch2 implementation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = new MyNinePatch(scene, x, y, width, height, key, baseFrame, columns, rows, config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Element in Phaser3 Scrollable Panel\nDESCRIPTION: Gets the header game object from a panel component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar childPanel = panel.getElement('header');\n```\n\n----------------------------------------\n\nTITLE: Question Data Structure in CSV Format for Phaser 3 Quest Plugin\nDESCRIPTION: Shows the structure of question data in CSV format, demonstrating how to define questions and options with their parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_5\n\nLANGUAGE: raw\nCODE:\n```\ntype,key,param0,param1,...\nq,q0,value0,value1,...\n,o0,value0,value1,...\n,o1,value0,value1,...\nq,q1,value0,value1,...\n,o0,value0,value1,...\n,o1,value0,value1,...\n```\n\n----------------------------------------\n\nTITLE: Checking if Online User List is Full\nDESCRIPTION: JavaScript code showing how to determine if the online user list has reached its maximum capacity.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar isFull = userList.isFull();\n```\n\n----------------------------------------\n\nTITLE: Setting Base Texture for a NinePatch2 Object\nDESCRIPTION: Changes the base texture of an existing NinePatch2 object. This allows switching the visual appearance while maintaining the nine-patch structure.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setBaseTexture(key, baseFrame, columns, rows);\n// ninePatch.setBaseTexture(key, columns, rows);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Alpha Mask Image Class in Phaser 3\nDESCRIPTION: Demonstrates how to extend the Alpha Mask Image class to create a custom class with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/alphamaskimage.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyImage extends AlphaMaskImage {\n    constructor(scene, x, y, key, frame, config) {\n        super(scene, x, y, key, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new MyImage(scene, key, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Running Commands with the Plugin in Phaser 3\nDESCRIPTION: Executes commands using the Run Commands plugin after it has been loaded.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/runcommands.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexruncommandsplugin').run(commands, scope);\n```\n\n----------------------------------------\n\nTITLE: Fill Style Gradient Callback\nDESCRIPTION: Example of creating a radial gradient fill style using a callback function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-roundrectangle.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(canvas, context) {\n    // Radial gradient\n    var grd = context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n    grd.addColorStop(0, color0);\n    grd.addColorStop(1, color1);\n    return grd;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Image with Configuration Object\nDESCRIPTION: Creates a perspective image using a configuration object that includes texture key and other optional parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexPerspectiveImage({\n    // x: 0,\n    // y: 0,\n    key,\n    // frame: null,\n    // hideCCW: true,\n    // gridWidth: 32,\n    // girdHeight: 32\n});\n```\n\n----------------------------------------\n\nTITLE: Padding Configuration in Phaser3 Sizer\nDESCRIPTION: Methods for setting and getting inner and outer padding values for the sizer and its children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setInnerPadding({\n    left: leftPadding, \n    right: rightPadding,\n    top: topPadding,\n    bottom: bottomPadding\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Vector2 Equality in Phaser 3\nDESCRIPTION: Determines if the current Vector2 is approximately equal to another vector or vector-like object, with an optional epsilon for fuzzy comparison.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar equal = vector.fuzzyEquals(src); // src: {x, y}\n// var equal = vector.fuzzyEquals(src, epsilon);\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Cut Image Method from Rex Plugins in Phaser 3\nDESCRIPTION: Shows how to import the Grid Cut Image method directly instead of as a plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridcutimage.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport GridCutImage from 'phaser3-rex-plugins/plugins/gridcutimage.js';\n```\n\n----------------------------------------\n\nTITLE: Creating Private Aseprite Animation for Sprite in Phaser 3\nDESCRIPTION: Creates a private animation from Aseprite data for a specific sprite. The 'key' parameter is the Aseprite data key, and 'tags' specifies which animations to create.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.anims.createFromAseprite(key, tags);\n```\n\n----------------------------------------\n\nTITLE: Importing Flash Class in Phaser 3\nDESCRIPTION: Demonstrates how to import the Flash class from npm and create a new instance for a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flash.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Flash from 'phaser3-rex-plugins/plugins/flash.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar flash = new Flash(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Managing Fixed Size in Phaser 3 Text\nDESCRIPTION: Methods to get and set fixed width and height for text objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = txt.style.fixedWidth;\nvar height = txt.style.fixedHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setFixedSize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Calculating Median of a Property\nDESCRIPTION: Calculate the median value of a property across all documents in a collection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nvar medianValue = collection.median(key);\n```\n\n----------------------------------------\n\nTITLE: Setting Point Light Intensity\nDESCRIPTION: Shows how to set the intensity of a point light, which controls how strong the light effect is.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npointLight.intensity = intensity;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the Phaser 3 Rex plugins package from npm, which includes the Firebase components.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Getting Text from Phaser 3 Dynamic Text\nDESCRIPTION: Methods to retrieve text content from a dynamic text object, either only active characters or all characters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = txt.text;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = txt.getText();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = txt.getText(false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Cut Image Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to install the Grid Cut Image plugin in the global configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridcutimage.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport GridCutImagePlugin from 'phaser3-rex-plugins/plugins/gridcutimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexGridCutImage',\n            plugin: GridCutImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Conditions Table Plugin in Phaser 3 Configuration\nDESCRIPTION: Demonstrates how to import and configure the Conditions Table plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/conditionstable.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConditionsTablePlugin from 'phaser3-rex-plugins/plugins/conditionstable-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexConditionsTable',\n            plugin: ConditionsTablePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Rhombus Geometry Object in Phaser 3\nDESCRIPTION: Creates a new Rhombus geometry object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rhombus.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rhombus = scene.plugins.get('rexrhombusplugin').add(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Configuring Outline Effect Layer\nDESCRIPTION: Creates an outline effect layer with customizable options for knockout, thickness, and color.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effectlayer-outline.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar effectLayer = scene.add.rexOutlineEffectLayer({\n    // knockout: false,\n    // thickness: 3,\n    // outlineColor: 0x000000\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Accessing Elements by Name in Holy Grail Layout\nDESCRIPTION: An alternative method to get a game object by name, with optional recursive search through children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = holyGrail.getByName(name);\n// var gameObject = holyGrail.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Do-While Loop Body in Phaser3 Rex Plugin\nDESCRIPTION: Implements the body of a do-while loop that prints the current value of 'loopCount' and decrements it by 1. This will execute until the loop condition becomes false.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/repeat/repeat.md#2025-04-21_snippet_6\n\nLANGUAGE: pseudo-code\nCODE:\n```\nprint\\\n  text=do-while {{loopCount}}\n```\n\n----------------------------------------\n\nTITLE: Placing Multiple Tiles in Phaser 3\nDESCRIPTION: Methods for placing multiple tiles at once using arrays of tile indices or objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nmap.putTilesAt(tilesArray, tileX, tileY);\nmap.putTilesAt(tilesArray, tileX, tileY, recalculateFaces, layer);\nlayer.putTilesAt(tilesArray, tileX, tileY, recalculateFaces);\n```\n\n----------------------------------------\n\nTITLE: Importing Glow Filter Class in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the glow filter post-processing class directly in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport GlowFilterPostFx from 'phaser3-rex-plugins/plugins/glowfilter2pipeline.js';\nvar config = {\n    // ...\n    pipeline: [GlowFilterPostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Scale Yoyo Animation\nDESCRIPTION: Scale up/down animation that returns to original scale with configurable peak value and repeat count.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsizer\n    //.setScale(scaleX, scaleY)\n    .scaleYoyo(duration, peakValue);\n\n// sizer.scaleYoyo(duration, peakValue, repeat, undefined, ease);\n```\n\n----------------------------------------\n\nTITLE: Importing TextAreaInput Class from Rex Plugins\nDESCRIPTION: Imports the TextAreaInput class directly from the UI components in the Rex Plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TextAreaInput } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Progress Value in Phaser 3 Dissolve Effect\nDESCRIPTION: Sets the progress value of the dissolve effect transition. The progress value ranges from 0 to 1, with two alternative methods to set it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setProgress(value);  // value: 0~1\n```\n\n----------------------------------------\n\nTITLE: Setting Display Size of an Arc in Phaser 3\nDESCRIPTION: Sets the display width and height for an Arc game object using the setDisplaySize method. This affects the rendered dimensions of the arc.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\narc.setDisplaySize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Progress Behavior via Plugin\nDESCRIPTION: Adds the loading-progress behavior to a game object after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar loadingProgress = scene.plugins.get('rexloadingprogressplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Handling Match Event in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This code shows how to listen for the 'match' event, which fires when lines are matched. It provides access to the matched lines, board object, and bejeweled instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.on('match', function(lines, board, bejeweled) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Using plugin method after importing plugin\nDESCRIPTION: Adding text edit behavior and directly opening editor after importing the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = scene.plugins.get('rexTextEdit').add(textGameObject, config);\n// Or\nvar editor = scene.plugins.get('rexTextEdit').edit(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Custom Plane Class Definition\nDESCRIPTION: Creates a custom Plane class that extends Phaser.GameObjects.Plane with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/plane.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPlane extends Phaser.GameObjects.Plane {\n    constructor(scene, x, y, texture, frame, width, height, tile) {\n        super(scene, x, y, texture, frame, width, height, tile);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Pixel Dimensions\nDESCRIPTION: Retrieves the map's width and height in pixels.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tiledmapdata.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar mapWidth = mapData.widthInPixels;\nvar mapHeight = mapData.heightInPixels;\n```\n\n----------------------------------------\n\nTITLE: Easing Any Sprite Properties\nDESCRIPTION: Animates properties using easing functions for any sprite without specifying a name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_9\n\nLANGUAGE: phaser\nCODE:\n```\nSPRITE.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Clearing Tint from a NinePatch2 Object\nDESCRIPTION: Removes any tint effect from a NinePatch2 object, restoring its original colors. This is useful for returning to the unmodified appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.clearTint();\n```\n\n----------------------------------------\n\nTITLE: Adding a Board Object in Phaser 3 Scene\nDESCRIPTION: Shows how to add a board object to a Phaser 3 scene using the Rex Board Plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar board = scene.rexBoard.add.board(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Holy Grail Layout Instance with Loaded Plugin\nDESCRIPTION: Code snippet for creating a Holy Grail layout instance after loading the plugin. This is used with the minified plugin method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar holyGrail = scene.rexUI.add.holyGrail(config);\n```\n\n----------------------------------------\n\nTITLE: Opening File Chooser Dialog in ImageInputLabel\nDESCRIPTION: Shows how to programmatically open the file chooser dialog and handle the selected file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimageInputLabel.openPromise()\n    .then(function(file){\n    })\n```\n\n----------------------------------------\n\nTITLE: Importing ScaleOuter Class\nDESCRIPTION: Code to import the ScaleOuter class directly and create an instance manually.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaleouter.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScaleOuter from 'phaser3-rex-plugins/plugins/scaleouter.js';\n```\n\n----------------------------------------\n\nTITLE: Basic Condition Check\nDESCRIPTION: A simple equality condition checking if flag equals 1\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/ignore-condition/ignore-condition.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nflag == 1\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Document\nDESCRIPTION: Insert a document (JavaScript object) into a collection and get a reference to the inserted document in the collection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar docInColl = collection.insert(doc);  // doc: an object\n```\n\n----------------------------------------\n\nTITLE: Using Event Promise with Then Handler\nDESCRIPTION: Shows how to use the event promise with a then handler for custom event handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventpromise.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar promoise = scene.plugins.get('rexEventPromise').waitEvent(eventEmitter, eventName)\n    .then(function() {\n\n    })\n```\n\n----------------------------------------\n\nTITLE: Wrapping Objects in Phaser 3 Arcade Physics World\nDESCRIPTION: Demonstrates how to wrap game objects around the world bounds in the Arcade physics world of Phaser 3. This is commonly used for creating seamless looping environments.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.wrap(gameObject, padding);\n```\n\n----------------------------------------\n\nTITLE: Managing Sound Volume in Phaser 3\nDESCRIPTION: Methods to set and get the volume of a sound instance, with values ranging from 0 (silent) to 1 (full volume).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.setVolume(volume); // volume: 0 to 1\n// music.volume = volume;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar volume = music.volume;\n```\n\n----------------------------------------\n\nTITLE: Adding ID-Alias Object with Plugin\nDESCRIPTION: JavaScript code for adding an ID-alias object using the Firebase plugin in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar idAlias = scene.plugins.get('rexfirebaseplugin').add.idAlias(config);\n```\n\n----------------------------------------\n\nTITLE: Importing TextPage Class Directly in Phaser 3\nDESCRIPTION: Code to import the TextPage class directly from the npm package and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textpage.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TextPage from 'phaser3-rex-plugins/plugins/textpage.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar page = new TextPage(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Radius of an Arc in Phaser 3\nDESCRIPTION: Retrieves the radius value of an Arc game object. This defines the size of the arc from its center point.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar radius = arc.radius;\n```\n\n----------------------------------------\n\nTITLE: Hit Area Event Handling\nDESCRIPTION: Event listeners for handling pointer interactions with text hit areas, including down, click, up, over, and out events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('areadown', function(key, pointer, localX, localY, event){\n\n}, scope);\ntxt.drawAreaBounds(graphics, color);\n```\n\n----------------------------------------\n\nTITLE: Adding Tileset Images to a Tilemap\nDESCRIPTION: Methods for adding tileset images to a tilemap with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileset = map.addTilesetImage(tilesetName, key); // key: texture key\n// var tileset = map.addTilesetImage(tilesetName);  // key = tilesetName\n// var tileset = map.addTilesetImage(tilesetName, key, tileWidth, tileHeight, tileMargin, tileSpacing, gid, tileOffset);\n```\n\n----------------------------------------\n\nTITLE: Loading GridTable Plugin in Phaser 3 Preload Stage\nDESCRIPTION: Demonstrates how to load the GridTable plugin (minified version) in the preload stage of a Phaser 3 scene. This method allows you to use the plugin's functionality via the scene's 'rexUI' property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Importing FileSelectorButton Class in Phaser 3\nDESCRIPTION: Code for importing the FileSelectorButton class directly from the Rex UI components package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FileSelectorButton } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child-Panel Element in Phaser3 Scrollable Panel\nDESCRIPTION: Gets the child-panel game object from a panel component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar childPanel = panel.getElement('panel');\n```\n\n----------------------------------------\n\nTITLE: Loading Scale Plugin (Minify File) in Phaser 3\nDESCRIPTION: Loads the scale plugin from a CDN source during the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexscaleplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexscaleplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Star Class in Phaser 3\nDESCRIPTION: Defines a custom class that extends the Phaser.GameObjects.Star class. This allows for additional properties and methods to be added to the Star object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyStar extends Phaser.GameObjects.Star {\n    constructor(scene, x, y, points, innerRadius, outerRadius, fillColor) {\n        super(scene, x, y, points, innerRadius, outerRadius, fillColor);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Warp Effect Instances\nDESCRIPTION: Code to retrieve the warp effect instance(s) from a game object or camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexWarpPipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexWarpPipeline').get(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexWarpPipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexWarpPipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Resetting Bob Object Flip State in Phaser 3\nDESCRIPTION: Resets the flip state of a Bob object to false for both axes. This is equivalent to calling setFlip(false, false) and ensures the texture is rendered normally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nbob.resetFlip(); // bob.setFlip(false, false)\n```\n\n----------------------------------------\n\nTITLE: Applying Warp Effect via PostPipeline Method\nDESCRIPTION: Code to apply the warp effect directly to a game object or camera using the setPostPipeline method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(WarpPostFx);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(WarpPostFx);\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean Input in Phaser 3 Tweaker\nDESCRIPTION: Creates a checkbox input for toggling boolean values. The component binds to a boolean property of an object and allows switching between true and false states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput(object, key, {\n    // view: 'boolean',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n    \n    // orientation: 'x',\n\n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Gashapon Object to Phaser 3 Scene\nDESCRIPTION: Shows how to add a Gashapon object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar gashapon = scene.plugins.get('rexgashaponplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Wait Camera Events in Phaser3 Tag Player\nDESCRIPTION: Event handler for wait.camera events in the Tag Player system, which fires when a camera effect wait tag is encountered. The effectName parameter contains the name of the camera effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('wait.camera', function(effectName) {\n    // effectName : 'camera.fadein', 'camera.fadeout', 'camera.flash', 'camera.shake', 'camera.zoom', 'camera.rotate', 'camera.scroll'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating File Manager with Root Collection Configuration\nDESCRIPTION: JavaScript code to create a file manager instance with a configuration object specifying the root collection name for storing files.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileManager = rexFire.add.files({\n    root: ''\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Scrollable Panel Plugin in Phaser 3\nDESCRIPTION: Demonstrates how to load the scrollable panel plugin in the preload stage of a Phaser 3 scene and create a panel object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar panel = scene.rexUI.add.scrollablePanel(config);\n```\n\n----------------------------------------\n\nTITLE: Clearing Mask from Game Object in Phaser 3\nDESCRIPTION: Removes a mask from a game object. The mask object can be optionally destroyed in the process.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mask.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimage.clearMask();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimage.clearMask(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring RotateTo Plugin in Phaser3 Game Configuration\nDESCRIPTION: Sets up the RotateTo plugin in the global plugins configuration of a Phaser3 game instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RotateToPlugin from 'phaser3-rex-plugins/plugins/rotateto-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRotateTo',\n            plugin: RotateToPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pixelation Pipeline Plugin in Game Config\nDESCRIPTION: Importing and configuring the pixelation pipeline plugin in Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-pixelation.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport PixelationPipelinePlugin from 'phaser3-rex-plugins/plugins/pixelationpipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPixelationPipeline',\n            plugin: PixelationPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Chart Class\nDESCRIPTION: Importing and creating a chart instance using the Chart class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-chart.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Chart } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n\nvar chart = new Chart(scene, config);\nscene.add.existing(chart);\n```\n\n----------------------------------------\n\nTITLE: Color Processing Methods\nDESCRIPTION: Examples of extracting color and alpha values from color32 data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-data.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = value & 0xffffff;\n// or\nvar color = canvasData.color32ToColorInt(value);\n// Get alpha\nvar alpha = value >>> 24;\n// or\nvar alpha = canvasData.color32ToAlpha(value);\n```\n\n----------------------------------------\n\nTITLE: Accessing Line Status Properties in TextPage for Phaser 3\nDESCRIPTION: Properties for checking line status such as if current line is first or last, line indices, and total line count.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textpage.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar isLastLine = page.isLastLine;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isFirstLine = page.isFirstLine;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar startLineIndex = page.startLineIndex;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar endLineIndex = page.endLineIndex;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar totalLinesCount = page.totalLinesCount;\n```\n\n----------------------------------------\n\nTITLE: Creating a List instance in Phaser 3\nDESCRIPTION: Initializes a new List data structure instance which can be used to maintain an ordered collection of objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar list = new Phaser.Structs.List();\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Plugin from NPM Package\nDESCRIPTION: JavaScript code to import and instantiate the Firebase plugin from the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js';    \nvar rexFire = new RexFirebase();\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcade Physics Engine for Ship Behavior\nDESCRIPTION: Sets up the Arcade physics engine in the game configuration, which is required for the ship behavior to work properly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    physics: {\n        default: 'arcade',\n        arcade: {\n            // debug: true\n        }\n    }\n}\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Grid Alignment Plugin\nDESCRIPTION: Shows how to load the grid alignment plugin in Phaser 3's preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridalign.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexgridalignplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgridalignplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Adding a Text Input Row Using Configuration Object\nDESCRIPTION: Alternative configuration for adding a text input row using a single configuration object with bindingTarget and bindingKey.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput({\n    bindingTarget: object,\n    bindingKey: key,\n    // view: 'string',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    // monitor: false,\n\n    // key: undefined,\n\n    // autoUpdate: true,\n    // onValidate: undefined,\n    // onValueChange: undefined,    \n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Bokeh Effect in Phaser 3\nDESCRIPTION: Code for adding bokeh effect to game objects or camera with configurable radius, amount, and contrast properties. Bokeh creates a depth-of-field blur effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.preFX.addBokeh(radius, amount, contrast);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = gameObject.postFX.addBlur(quality, x, y, strength, color, steps);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar effect = camera.postFX.addBokeh(radius, amount, contrast);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setActive(false);\n// effect.active = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.preFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neffect.radius = radius;\neffect.amount = amount;\neffect.contrast = contrast;\n```\n\n----------------------------------------\n\nTITLE: Creating a NameInputDialog using Scene Plugin\nDESCRIPTION: Code to create a NameInputDialog instance using the Rex UI plugin that was loaded as a scene plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = scene.rexUI.add.nameInputDialog(style).resetDisplayContent(config);\n// var dialog = scene.rexUI.add.nameInputDialog(style, creators).resetDisplayContent(config);\n```\n\n----------------------------------------\n\nTITLE: Default Style Configuration for Tag Text\nDESCRIPTION: The default style configuration object for Tag Text, showing all available styling options including background, text styling, alignment, and padding.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    fontFamily: 'Courier',\n    fontSize: '16px',\n    fontStyle: '',\n    backgroundColor: null,\n    backgroundColor2: null,\n    backgroundHorizontalGradient: true,\n    backgroundStrokeColor: null,\n    backgroundStrokeLineWidth: 2,\n    \n    backgroundCornerRadius: 0,\n    // 0   : no round corner, \n    // > 0 : convex round corner\n    // < 0 : concave round corner\n\n    backgroundCornerIteration: null, \n    color: '#fff',\n    stroke: '#fff',\n    strokeThickness: 0,\n    shadow: {\n        offsetX: 0,\n        offsetY: 0,\n        color: '#000',\n        blur: 0,\n        stroke: false,\n        fill: false\n    },\n    underline: {\n        color: '#000',\n        thickness: 0,\n        offset: 0\n    },\n    strikethrough: {\n        color: '#000',\n        thickness: 0,\n        offset: 0\n    },    \n    // align: 'left',  // Equal to halign\n    halign: 'left', // 'left'|'center'|'right'\n    valign: 'top',  // 'top'|'center'|'bottom'\n    padding: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n    },\n    maxLines: 0,\n    lineSpacing: 0,\n    fixedWidth: 0,\n    fixedHeight: 0,\n    lineSpacing: 0,\n    testString: '|MÉqgy',\n    \n    wrap: {\n        mode: 'none'     // 0|'none'|1|'word'|2|'char'|'character'\n        width: null\n    },\n    // wordWrap: { width: 0 },   // Compatible with Text game object\n\n    // rtl: false,\n    metrics: false,\n    // metrics: {\n    //     ascent: 0,\n    //     descent: 0,\n    //     fontSize: 0\n    // },\n\n    // images: {\n    //    key: { y:-8 }\n    // }\n\n    tags: {\n        //tag0: {\n        //  color: 'red'\n        //},\n        //tag1: {\n        //  color: 'blue'\n        //}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog Typing Page 1 Configuration\nDESCRIPTION: Second page of dialog typing configuration with three lines of text. Uses null display name and icon properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/mds/fast-typing.md#2025-04-21_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\nDialog.typing, displayName=null, icon=null\nPage1:\nLine0...\nLine1...\nLine2...\n```\n\n----------------------------------------\n\nTITLE: Handling TextBox Pause Event\nDESCRIPTION: Sets up an event handler that fires when typing is paused via the pause() method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.on('pause', function() {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Loading Headers in Firebase File Manager\nDESCRIPTION: JavaScript code to load all headers for a file owner in the Firebase file manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-files.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.loadHeaders()\n    .then(function(result) { \n        // var headers = result.headers;\n        // var userID = result.userID;\n    })\n    .catch(function(result) {\n        // var error = result.error;\n        // var userID = result.userID;\n    })\n```\n\n----------------------------------------\n\nTITLE: Getting Star Inner Radius in Phaser 3\nDESCRIPTION: Retrieves the inner radius value of a star shape in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar innerRadius = star.innerRadius;\n```\n\n----------------------------------------\n\nTITLE: Importing Menu Class from Rex UI Components\nDESCRIPTION: Imports the Menu class directly from Rex UI components for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Menu } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Getting Stitching Size Properties\nDESCRIPTION: Retrieves the current stitching width and height values from a pipeline instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar stitchingWidth = pipelineInstance.stitchingWidth;\nvar stitchingHeight = pipelineInstance.stitchingHeight;\n```\n\n----------------------------------------\n\nTITLE: Setting Cursor Directly on Game Object Input in Phaser 3\nDESCRIPTION: Assigns a custom cursor directly to a game object's input property after it has been set as interactive.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursor.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.input.cursor = CSSString;\n// CSSString: 'url(assets/input/cursors/sword.cur), pointer'\n```\n\n----------------------------------------\n\nTITLE: Getting Delay Time of a Timer in Phaser 3\nDESCRIPTION: Retrieves the configured delay time of the timer in milliseconds. This is the interval between callback executions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar delay = timer.delay;   // ms\n```\n\n----------------------------------------\n\nTITLE: Loading Flip Plugin in Phaser3\nDESCRIPTION: Loads the flip plugin minified file in the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flip.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexflipplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexflipplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Inner Strength of Glow Filter\nDESCRIPTION: Gets and sets the inner strength property of the glow filter, which controls how far the glow extends inward from object edges.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Get\nvar innerStrength = pipelineInstance.innerStrength;\n\n// Set\npipelineInstance.innerStrength = innerStrength;\n// pipelineInstance.innerStrength += value;\n\n// Or use method\npipelineInstance.setInnerStrength(value);\n```\n\n----------------------------------------\n\nTITLE: Accessing TextBox Inner Background Element\nDESCRIPTION: Retrieves the background game object inside the inner sizer for direct manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar innerBackground = textBox.getElement('innerBackground');\n```\n\n----------------------------------------\n\nTITLE: Custom Ellipse Class Definition\nDESCRIPTION: Creating a custom ellipse class that extends Phaser.GameObjects.Ellipse with constructor and optional preUpdate method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-ellipse.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyEllipse extends Phaser.GameObjects.Ellipse {\n    constructor(scene, x, y, width, height, fillColor, fillAlpha) {\n        super(scene, x, y, width, height, fillColor, fillAlpha);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Header Element in Holy Grail Layout\nDESCRIPTION: Retrieves the header game object from the Holy Grail layout.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar header = holyGrail.getElement('header');\n```\n\n----------------------------------------\n\nTITLE: Getting Line Properties in Phaser 3\nDESCRIPTION: Shows how to access various properties of a line including coordinates, boundaries, and endpoint positions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar x1 = line.x1;\nvar y1 = line.y1;\nvar x2 = line.x2;\nvar y2 = line.y2;\nvar top = line.top;       // min(x1, x2)\nvar left = line.left;     // min(y1, y2)\nvar right = line.right;   // max(x1, x2)\nvar bottom = line.bottom; // max(y1, y2)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar start = line.getPointA();  // start: {x, y}\nvar start = line.getPointA(start);  // push start\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar end = line.getPointB();  // end: {x, y}\nvar end = line.getPointB(end);  // push end\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar middle = Phaser.Geom.Line.GetMidPoint(line);  // middle: {x, y}\n// var middle = Phaser.Geom.Line.GetMidPoint(line, middle);\n```\n\n----------------------------------------\n\nTITLE: Nested Command Array Example in Run Commands Plugin\nDESCRIPTION: Example showing how to structure nested command arrays for the Run Commands plugin, allowing for command grouping.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/runcommands.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    command0,\n    command1\n    [\n        command2,\n        command3\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document by Custom Unique Index\nDESCRIPTION: Get a document using a custom unique index for faster lookups compared to regular find operations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nvar doc = collection.by(key0, value);\n```\n\n----------------------------------------\n\nTITLE: Yo-yo Animation for Background Game Object Properties\nDESCRIPTION: Command for applying a yo-yo (back-and-forth) animation to properties of a Background game object. Similar parameters to the 'to' command but with a yo-yo effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/background-commands.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nNAME.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Testing Triangle Equality in Phaser 3\nDESCRIPTION: Checks if two triangles have the same position and dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar isEqual = Phaser.Geom.Triangle.Equals(triangle0, triangle1);\n```\n\n----------------------------------------\n\nTITLE: Getting Mouse Wheel Scroller Enable State in TextArea\nDESCRIPTION: Shows how to check if mouse wheel scrolling is currently enabled for the TextArea.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = textArea.mouseWheelScrollerEnable;\n```\n\n----------------------------------------\n\nTITLE: Accessing Action Icon Element in imageInputLabel (JavaScript)\nDESCRIPTION: Retrieves the action icon game object from an imageInputLabel component. This gives access to the actionable icon element for event handling or visual updates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar action = imageInputLabel.getElement('action');\n```\n\n----------------------------------------\n\nTITLE: Using Sound Fade Plugin (NPM Version)\nDESCRIPTION: Example of using the fade in/out methods with the NPM plugin version.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadevolume.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar sound = scene.plugins.get('rexSoundFade').fadeIn(sound, duration);\nvar sound = scene.plugins.get('rexSoundFade').fadeOut(sound, duration);\n```\n\n----------------------------------------\n\nTITLE: Importing LeaderBoard Class Directly\nDESCRIPTION: JavaScript code to import the LeaderBoard class directly from the firebase-components module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LeaderBoard } from 'phaser3-rex-plugins/plugins/firebase-components.js';\n```\n\n----------------------------------------\n\nTITLE: Setting PostPipeline Effect on Game Object\nDESCRIPTION: Applies the cross-stitching post-processing effect directly to a game object using setPostPipeline method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(CrossStitchingPostFx);\n```\n\n----------------------------------------\n\nTITLE: Creating Pinch Input Instance in Phaser 3\nDESCRIPTION: Shows how to create a pinch input instance with configuration options in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pinch.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pinch = scene.rexGestures.add.pinch({\n    // enable: true,\n    // bounds: undefined,\n\n    // threshold: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Custom Plugin in Phaser 3 Plugin Cache\nDESCRIPTION: Shows how to check if a custom plugin exists in the Phaser 3 Plugin Cache using the PluginCache.hasCustom() method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pluginsystem.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasPlugin = Phaser.Plugins.PluginCache.hasCustom(key);\n```\n\n----------------------------------------\n\nTITLE: Getting Data URL from Canvas in Phaser 3\nDESCRIPTION: Method to get the data URL of the Canvas content in Phaser 3, with options for format and quality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar dataURL = canvas.getDataURL();\n// var dataURL = canvas.getDataURL(type, encoderOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating RestorableData Instance\nDESCRIPTION: Shows how to create a new instance of RestorableData with optional event emitter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/restorabledata.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = scene.plugins.get('rexRData').add(parent);\n// var data = scene.plugins.get('rexRData').add(parent, eventEmitter);\n```\n\n----------------------------------------\n\nTITLE: Applying Effect via Plugin Import\nDESCRIPTION: Applies the Split Pipeline effect to a game object or camera after importing the plugin via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexSplitPipeline').add(gameObject, config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexSplitPipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Velocity Threshold\nDESCRIPTION: Shows how to get and set the velocity threshold for swipe detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar velocityThreshold = swipe.velocityThreshold;\n```\n\n----------------------------------------\n\nTITLE: Pausing a Timer in Phaser 3\nDESCRIPTION: Pauses a running timer, preventing the callback from executing until the timer is resumed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntimer.paused = true;\n```\n\n----------------------------------------\n\nTITLE: Getting Box Stroke Style\nDESCRIPTION: Retrieves the current box stroke line width, color, and alpha values for the checkbox.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineWidth = checkbox.boxLineWidth;\nvar color = checkbox.boxStrokeColor;\nvar alpah = checkbox.boxStrokeAlpha;\n```\n\n----------------------------------------\n\nTITLE: Getting Circle Alpha in Phaser 3\nDESCRIPTION: Retrieves the current alpha (transparency) value from a circle game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = circle.alpha;\n```\n\n----------------------------------------\n\nTITLE: Advanced Text Features in Phaser 3: Test String, Texture Generation and RTL\nDESCRIPTION: Methods for setting test strings used in font measurement, generating textures from text, and enabling right-to-left text direction. Provides utilities for specialized text handling needs.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setTestString(text);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.generateTexture(key);\n// txt.generateTexture(key, x, y, width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setRTL(rtl).setText(newContent);\n```\n\n----------------------------------------\n\nTITLE: Appending Additional Text to TextBox with Typing Animation\nDESCRIPTION: Adds more content to the existing text in the text box and continues the typing animation. Allows optional specification of a new typing speed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.more(content, typingSpeed);\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value of a Property\nDESCRIPTION: Find the minimum value of a property across all documents in a collection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nvar minValue = collection.min(key);\n```\n\n----------------------------------------\n\nTITLE: Getting Point Light Intensity\nDESCRIPTION: Shows how to retrieve the current intensity value of a point light.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar intensity = pointLight.intensity;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install Rex plugins package via npm for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Child Management and Iteration\nDESCRIPTION: Methods for iterating through and managing child elements including character children and renderable children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.forEachChild(function(child, childIndex, children){\n}, scope);\n\ntxt.forEachRenderableChild(function(child, charIndex, children){\n}, scope);\n\nvar children = txt.getChildren();\nvar activeChildren = txt.getActiveChildren();\n```\n\n----------------------------------------\n\nTITLE: Importing GrayScale PostFx Class in Phaser 3\nDESCRIPTION: Imports the GrayScale post-processing effect class and adds it to the pipeline in game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport GrayScalePostFx from 'phaser3-rex-plugins/plugins/grayscalepipeline.js';\nvar config = {\n    // ...\n    pipeline: [GrayScalePostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Mouse Wheel Scroller Plugin Via CDN\nDESCRIPTION: Loads the minified version of the mouse wheel scroller plugin during the scene preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheelscroller.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexmousewheelscrollerplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexmousewheelscrollerplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase Plugin in Phaser 3 (minify file method)\nDESCRIPTION: JavaScript code for loading the Firebase plugin from a CDN in the Phaser scene's preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfirebaseplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebaseplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Configuring GrayScale Plugin Globally in Phaser 3\nDESCRIPTION: Imports and configures the GrayScale pipeline plugin globally in the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport GrayScalePipelinePlugin from 'phaser3-rex-plugins/plugins/grayscalepipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexGrayScalePipeline',\n            plugin: GrayScalePipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Scan Line Parameters for CRT Effect\nDESCRIPTION: Sets new scan line strength and width parameter values for a CRT pipeline instance using dedicated methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setScanStrength(scanLineStrength);\npipelineInstance.setScanLineWidth(scanLineWidth);\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Plugin\nDESCRIPTION: Demonstrates plugin installation via npm and configuration in Phaser game setup\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvtoarray.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport CSVToArrayPlugin from 'phaser3-rex-plugins/plugins/csvtoarray-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCSVToArray',\n            plugin: CSVToArrayPlugin,\n            start: true\n        }\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Restarting Quest Task in Question Manager (JavaScript)\nDESCRIPTION: Illustrates how to restart the current quest task in the Question Manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nquestionManager.restartQuest();\n```\n\n----------------------------------------\n\nTITLE: Unfocusing All Sprites\nDESCRIPTION: Resets tint to 0xffffff for all sprites, removing any focus effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_18\n\nLANGUAGE: phaser\nCODE:\n```\nNAME.unfocus\n```\n\n----------------------------------------\n\nTITLE: Getting Playback Time in Youtube Player for Phaser 3\nDESCRIPTION: Methods to retrieve the current playback time of the Youtube video in seconds or as a normalized value (0-1).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar playbackTime = player.playbackTime; // time in seconds\n```\n\n----------------------------------------\n\nTITLE: Creating New Quest Task (JavaScript)\nDESCRIPTION: Illustrates how to create a new quest task with configuration options for shuffling questions and options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar quest = questionManager.newQuest(config);\n```\n\n----------------------------------------\n\nTITLE: Applying Shockwave Effect to Game Object with Minified Plugin\nDESCRIPTION: Applies the shockwave effect to a game object using the loaded plugin instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexshockwavepipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Properties of a Title Game Object in Phaser 3\nDESCRIPTION: Sets various properties of a Title game object including position, alpha, and animation parameters. Allows for immediate property changes with optional animation duration and easing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/title-commands.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Loading Commands into TCRP Player\nDESCRIPTION: Shows how to load command sequences into the TCRP player with specific time points.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.load(commands, scope);\n```\n\n----------------------------------------\n\nTITLE: Injecting Methods into Game Object Instance\nDESCRIPTION: Injects scale methods directly into a game object instance for easier access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexScale').injectMethods(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Managing Received Messages History\nDESCRIPTION: Retrieves and clears the history of received messages stored in the client side.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar messages = room.broadcast.getHistory();\nroom.broadcast.clearHistory();\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: NPM command to install the Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-sprite.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Smooth Step Interpolation in Phaser 3\nDESCRIPTION: Performs smooth step interpolation between min and max values based on parameter t (0-1). This creates a smoother transition than linear interpolation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interpolation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.Interpolation.SmoothStep(t, min, max);\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements to New Array in JavaScript\nDESCRIPTION: Creates a new array with the results of calling a provided function on every element. The callback function returns the new element value for each original array element.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-filter.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar newArray = arr.map(function(element, index, arr) {\n    return newElement;\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Regular Expression\nDESCRIPTION: Find documents where a property matches a regular expression pattern using the $regex operator. Optionally specify regex options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$regex': pattern}});\n// var docArray = collection.find({key: {'$regex': [pattern, options]}});\n```\n\n----------------------------------------\n\nTITLE: Getting Scroll Position Percentage in TextArea\nDESCRIPTION: Demonstrates how to get the current scroll position as a normalized value between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar t = textArea.t;\n```\n\n----------------------------------------\n\nTITLE: Managing Sound Markers in Phaser 3\nDESCRIPTION: Methods to add and play markers (defined sections) in a sound instance, allowing selective playback of portions of an audio file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.addMarker(marker);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.play(markerName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.play(markerName, config);\n```\n\n----------------------------------------\n\nTITLE: Loading a Single Image with Image URI Loader\nDESCRIPTION: Example of loading a single image in the preload stage using the Image URI Loader plugin. The method requires a key for the texture and a URI (base64 string).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imageuriloader.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nthis.load.rexImageURI(key, uri);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask for Perspective Carousel\nDESCRIPTION: Method to create a bitmap mask for a perspective carousel, which can be used to limit the visible area of the carousel.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = carousel.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Loading TextPage Plugin from Minified File in Phaser 3\nDESCRIPTION: Code to load the TextPage plugin from a CDN and add page behavior to a text game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textpage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextextpageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextextpageplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar page = scene.plugins.get('rextextpageplugin').add(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gestures Plugin in Phaser 3 Game Config\nDESCRIPTION: Shows how to include the Gestures Plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pinch.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport GesturesPlugin from 'phaser3-rex-plugins/plugins/gestures-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexGestures',\n            plugin: GesturesPlugin,\n            mapping: 'rexGestures'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding a Skewable Image with the Plugin\nDESCRIPTION: Creates a skewable image object using the loaded plugin with specified position, texture, and frame.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexSkewImage(x, y, texture, frame);\n```\n\n----------------------------------------\n\nTITLE: Adding elements to a Phaser 3 Set\nDESCRIPTION: Shows how to add a single element to a Set instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-set.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nset.set(element);\n```\n\n----------------------------------------\n\nTITLE: Line Width Configuration\nDESCRIPTION: Method to set the start and end widths of the line, with end width only applicable in WebGL.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-line.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nline.setLineWidth(startWidth, endWidth);\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Array in Phaser\nDESCRIPTION: Method to add single or multiple items to a Phaser array with optional size limit and callback functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-addremove.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.Add(arr, item);\n// Phaser.Utils.Array.Add(arr, item, limit, callback, context);\n```\n\n----------------------------------------\n\nTITLE: Importing Warp Class Directly\nDESCRIPTION: Code to import the warp post-processing class directly from the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport WarpPostFx from 'phaser3-rex-plugins/plugins/warppipeline.js';\nvar config = {\n    // ...\n    pipeline: [WarpPostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Game Setup\nDESCRIPTION: Configuration code to include the fade plugin in the Phaser3 game initialization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadeoutdestroy.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport FadePlugin from 'phaser3-rex-plugins/plugins/fade-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFade',\n            plugin: FadePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Callback Function for Snapshot Methods in Phaser 3\nDESCRIPTION: This code shows the structure of the callback function used in Phaser 3 snapshot methods. The function receives an image element as its parameter, which contains the captured snapshot.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/snapshot.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(image){ /* ... */};\n```\n\n----------------------------------------\n\nTITLE: Getting Bob Object Frame in Phaser 3\nDESCRIPTION: Retrieves the current Frame object used by a Bob. The Frame determines which portion of the texture is displayed for this Bob.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar frame = bob.frame;\n```\n\n----------------------------------------\n\nTITLE: Setting Glow Effect Intensity\nDESCRIPTION: Sets the intensity value of the glow effect on a pipeline instance. Values range from 0 (original color) to 1 (white color).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.intensity = intensity;\n// pipelineInstance.intensity += value;\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Game Object in JavaScript\nDESCRIPTION: JavaScript function to register a custom game object type with the command executor, including configuration for viewport coordination, fade effects, and custom commands.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ncommandExecutor.addGameObjectManager({\n    name: GOTYPE,\n\n    viewportCoordinate: false,\n    // viewportCoordinate: { viewport: new Phaser.Geom.Rectangle() },\n    \n    fade: 500,\n    // fade: {mode: 'tint', time: 500},\n    \n    defaultLayer: layerName,\n\n    autoClear: true,\n    \n    commands: {\n        commandName(gameObject, config, commandExecutor, eventSheetManager, eventSheet) {\n            // commandExecutor.waitEvent(eventEmitter, eventName);\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Triangle Fill Style Manipulation in Phaser 3\nDESCRIPTION: Setting and clearing fill style of a Triangle object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntriangle.setFillStyle(color, alpha);\ntriangle.setFillStyle();\n```\n\n----------------------------------------\n\nTITLE: Creating SimpleTextBox Instance using Scene Plugin\nDESCRIPTION: Code for creating a SimpleTextBox instance using the loaded rexUI plugin scene object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletextbox.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar textBox = scene.rexUI.add.simpleTextBox(style).resetDisplayContent(config);\n//var textBox = scene.rexUI.add.simpleTextBox(style, creators).resetDisplayContent(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Pan Behavior for Game Object in Phaser 3\nDESCRIPTION: Adds pan detection behavior directly to a game object with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar pan = scene.rexGestures.add.pan(gameObject, {\n    // enable: true,\n\n    // threshold: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Texture Data from Cache in Phaser 3\nDESCRIPTION: Method to retrieve loaded texture data from the texture cache after loading is complete.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.textures;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Cubic Bezier Interpolation in Phaser 3\nDESCRIPTION: Performs cubic bezier curve interpolation with start point p0, control points p1 and p2, and end point p3 based on parameter t (0-1).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interpolation.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.Interpolation.CubicBezier(t, p0, p1, p2, p3);\n```\n\n----------------------------------------\n\nTITLE: Disabling Reveal Effect\nDESCRIPTION: Controls the active state of a reveal effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setActive(false);\n// effect.active = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing Script Actions with Wait Steps\nDESCRIPTION: Defines a sequence of script actions that set a coin value, print messages, and include wait steps between actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/parallel/parallel0.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n## Script\n\nset\n  coin=3\n\nprint\n  text=Event 0 start\n\nwait\n\nprint\n  text=Event 0 progress 0\n\nwait\n\nprint\n  text=Event 0 progress 1\n\nwait\n\nprint\n  text=Event 0 complete\n```\n\n----------------------------------------\n\nTITLE: Updating NinePatch Texture\nDESCRIPTION: Updates the texture of a NinePatch object. This is necessary after making changes to the NinePatch configuration to rebuild the internal render texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.updateTexture();\n```\n\n----------------------------------------\n\nTITLE: Loading Rex Pixelation Pipeline Plugin in Phaser 3\nDESCRIPTION: Loads the minified version of the pixelation pipeline plugin in the scene's preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-pixelation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexpixelationpipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexpixelationpipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Importing RoundRectangleProgress Class Directly\nDESCRIPTION: Shows how to import the RoundRectangleProgress class directly from the NPM package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport RoundRectangleProgress from 'phaser3-rex-plugins/plugins/roundrectangleprogress.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Mass in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the mass of a physics body, which affects how it responds to collisions with other bodies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setMass(m);\n```\n\n----------------------------------------\n\nTITLE: Importing Quad Image Plugin in Phaser 3 Game Configuration (JavaScript)\nDESCRIPTION: Demonstrates how to import and configure the Quad Image Plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-rendertexture.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport QuadImagePlugin from 'phaser3-rex-plugins/plugins/quadimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexQuadImagePlugin',\n            plugin: QuadImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Proxy as Expression Context\nDESCRIPTION: Demonstrates how to use a JavaScript Proxy as the context for expressions, allowing dynamic access to scene data or other sources.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar context = new Proxy({}, {\n    has(target, key) {\n        return scene.data.has(key);\n    },\n    get(target, prop) {\n        return scene.data.get(prop);\n    }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar context = scene.plugins.get('rexExpressionParserPlugin').createProxyContext({\n    has(target, key) {\n        // return boolean\n    },\n    get(target, prop) {\n        // return any;\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha Value of Round Rectangle\nDESCRIPTION: Sets the alpha value of a round rectangle shape using either the setAlpha method or direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nrect.setAlpha(alpha);\n// rect.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Command to install Rex plugins package from npm, which includes the Gashapon plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Configuring Rex UI Plugin in Game Configuration\nDESCRIPTION: Code to install the UI plugin in the game configuration by importing from the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing BuildArcadeObject Plugin in Phaser 3 Configuration\nDESCRIPTION: This code demonstrates how to import and configure the BuildArcadeObject plugin in the game configuration. It sets up the plugin to be available globally in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buildarcadeobject.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BuildArcadeObjectPlugin from 'phaser3-rex-plugins/plugins/buildarcadeobject-plugin.js';\nvar config = {\n    physics: {\n        default: 'arcade',\n        arcade: {\n            // debug: true\n        }\n    },\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexBuildArcadeObject',\n            plugin: BuildArcadeObjectPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Parsing Custom Tag Open Events in Phaser3 Tag Player\nDESCRIPTION: Event handler for custom tag open events (+custom) in the Tag Player system. This fires when parsing a custom opening tag with parameters and allows setting a content callback for associated content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('+custom', function(parser, a, b) {\n    // console.log('Parse +custom tag:', a, b)\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Kawase-blur Effect in Phaser 3\nDESCRIPTION: Demonstrates how to remove the Kawase-blur effect from a game object or camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-kawaseblur.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexKawaseBlurPipeline').remove(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Getting ScrollBar Elements in JavaScript\nDESCRIPTION: Methods to retrieve various elements of the ScrollBar component, including background, slider parts, and buttons.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = scrollBar.getElement(\"background\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar sliderBackground = scrollBar.getElement(\"slider.background\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar sliderTrack = scrollBar.getElement(\"slider.track\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar sliderIndicator = scrollBar.getElement(\"slider.indicator\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar sliderThumb = scrollBar.getElement(\"slider.thumb\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = scrollBar.getElement(\"buttons\");\n```\n\n----------------------------------------\n\nTITLE: Setting PostPipeline Effect on Camera\nDESCRIPTION: Applies the cross-stitching post-processing effect directly to a camera using setPostPipeline method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(CrossStitchingPostFx);\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Read-Only State\nDESCRIPTION: Sets the toggle-switch to read-only mode to disable user input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setReadOnly();\n// toggleSwitch.setReadOnly(true);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Text in Phaser 3 UI Label\nDESCRIPTION: Shows how to get and set the text string of the label.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = label.text;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setText(s);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.text = s;\n```\n\n----------------------------------------\n\nTITLE: Format of Returned Commands from Arcade TCRP\nDESCRIPTION: Example showing the format of commands returned from the getCommands method, with timestamps and command arrays.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    [time, [command]],\n    [time, [command0,command1]],\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Float (Three Values)\nDESCRIPTION: Methods for setting three float uniform values in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set3f(name, value0, value1, value2);\n// pipelineInstance.set3f(name, value0, value1, value2, shader);\n```\n\n----------------------------------------\n\nTITLE: Handling Wait Time Events in Phaser3 Tag Player\nDESCRIPTION: Event handler for wait.time events in the Tag Player system, which fires when a [wait=timeInMs] tag is encountered. The time parameter contains the wait duration in milliseconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('wait.time', function(time) {\n})\n```\n\n----------------------------------------\n\nTITLE: Changing Language\nDESCRIPTION: Code demonstrating how to change the active language for all translations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexTextTranslation').changeLanguage(language);\n// scene.plugins.get('rexTextTranslation').changeLanguage(language, onComplete);\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Mask from Grid in Phaser 3\nDESCRIPTION: Shows how to create a geometry mask from the grid object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-grid.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = grid.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Loading Pathfinder Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the Pathfinder plugin as a scene plugin in Phaser 3 and add a pathfinder instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-pathfinder.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pathFinder = scene.rexBoard.add.pathFinder(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Configuration\nDESCRIPTION: Shows how to install and configure the plugin using NPM installation and game configuration setup.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/restorabledata.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport RestorableDataPlugin from 'phaser3-rex-plugins/plugins/restorabledata-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRestorableData',\n            plugin: RestorableDataPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = scene.plugins.get('rexRestorableData').add(parent);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: Initializes the Firebase application with configuration details.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Perlin Class Directly\nDESCRIPTION: Importing and instantiating the Perlin class directly from the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perlin.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Perlin from 'phaser3-rex-plugins/plugins/perlin.js';\nvar noise = new Perlin(seed);\n```\n\n----------------------------------------\n\nTITLE: Applying Glow Filter to Game Object using Minified Plugin\nDESCRIPTION: Applies the glow filter effect to a game object using the minified plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexglowfilter2pipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom TextAreaInput Class in JavaScript\nDESCRIPTION: This snippet shows how to define a custom class that extends the RexPlugins.UI.TextAreaInput class. It includes a constructor that calls the parent constructor and adds the instance to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTextAreaInput extends RexPlugins.UI.TextAreaInput {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Quest Object with Configuration\nDESCRIPTION: Shows how to create a Dialog Quest object with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dialog-quest.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar quest = new DialogQuest({\n    dialog: dialog,\n\n    questions: undefined,\n    // format: undefined,\n    // delimiter: ',',\n    // types: {\n    //     question: 'q',\n    //     option: '',\n    // },\n    // convert: true,\n\n    quest: true,\n    // quest: {\n    //     shuffleQuestions: false,\n    //     shuffleOptions: false,\n    // }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility of Game Objects in Phaser3\nDESCRIPTION: Sets the visibility of game objects to a specified boolean value, with optional index and direction parameters to control which objects are affected.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetVisible(gameObjects, value, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Placing Game Objects Randomly on a Triangle in Phaser3\nDESCRIPTION: Places game objects at random positions within a triangle geometry, useful for creating scattered triangular distributions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.RandomTriangle(gameObjects, triangle);\n```\n\n----------------------------------------\n\nTITLE: Folder Configuration in JavaScript\nDESCRIPTION: Configuration object for creating a folder in the Tweaker component. Folders can contain nested properties and optionally override the target for child elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    $type: 'folder', title: '',\n    // $target: \n    $properties: [\n        // ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rotate Input with Configuration Options\nDESCRIPTION: Shows how to create a rotate input instance with various configuration options including enable state, bounds, and threshold values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotate = scene.rexGestures.add.rotate({\n    // enable: true,\n    // bounds: undefined,\n\n    // threshold: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Image Data Operations\nDESCRIPTION: Methods for setting and getting image data from the texture\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-texture.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.putData(imageData, x, y);\n\nvar imageData = texture.getData(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM for Phaser 3 (Shell)\nDESCRIPTION: Command to install the Rex Plugins package from NPM, which includes the skewable render texture plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-rendertexture.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Checkbox Plugin\nDESCRIPTION: Shows how to import the checkbox plugin and add it to the global plugins configuration in a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport CheckboxPlugin from 'phaser3-rex-plugins/plugins/checkbox-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCheckboxPlugin',\n            plugin: CheckboxPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Event Handling\nDESCRIPTION: Event listener setup for completion and waiting callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('complete', function() {\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('wait.' + goType, function(name, prop) {\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rex UI Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Rex UI Plugin in the game configuration, making it available in all scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Converting Date to String Formats\nDESCRIPTION: Methods to convert a Date object to different string representations including locale-specific and ISO standard formats.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/date.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = d.toLocaleString();   // locale conventions\nvar iso = d.toISOString();    // ISO standard\n```\n\n----------------------------------------\n\nTITLE: Using Vector2 Up Constant in Phaser 3\nDESCRIPTION: References the constant Vector2 representing the up direction (0,-1). Note the negative y value is due to the coordinate system in many game frameworks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar vector = Phaser.Math.Vector2.UP;\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Rotation Axis\nDESCRIPTION: Sets or gets the rotation axis of the split edge in radians or degrees.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotation = pipelineInstance.rotation;  // radians\n// var angle = pipelineInstance.angle;     // degrees\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.rotation = rotation;\npipelineInstance.rotation += value;\n// pipelineInstance.angle = angle;\n// pipelineInstance.angle += value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setRotation(rotation);\n// pipelineInstance.setAngle(angle);\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Configuration\nDESCRIPTION: Steps for installing the plugin through NPM and configuring it in the game configuration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-perspective.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport PerspectiveImagePlugin from 'phaser3-rex-plugins/plugins/perspectiveimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPerspectiveImagePlugin',\n            plugin: PerspectiveImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Wheel Events on Game Objects in Phaser 3\nDESCRIPTION: Demonstrates how to listen for wheel events directly on a game object instance. The callback receives pointer information, delta values for x/y/z axes, and the original event object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('wheel', function(pointer, dx, dy, dz, event){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Polygon Display Size Management\nDESCRIPTION: Methods for getting and setting the display size of a polygon.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-polygon.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = polygon.displayWidth;\nvar height = polygon.displayHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npolygon.setDisplaySize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npolygon.displayWidth = width;\npolygon.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing i18next with Class Import\nDESCRIPTION: Code demonstrating how to import the necessary classes and initialize i18next when using the class import approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport TextTranslationBehavior from 'phaser3-rex-plugins/plugins/texttranslation.js';\nimport i18next from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport Awaitloader from 'phaser3-rex-plugins/plugins/awaitloader.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Unchecked Box Fill Style\nDESCRIPTION: Sets the box fill color and alpha values for the checkbox when unchecked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setUncheckedBoxFillStyle(color, alpha);\n// checkbox.uncheckedBoxFillColor = color;\n// checkbox.uncheckedBoxFillAlpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Applying Glow Effect to a Camera using PostPipeline Method\nDESCRIPTION: Applies the glow effect to a Phaser 3 camera using the post pipeline method after direct import.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(GlowFilterPostFx);\n```\n\n----------------------------------------\n\nTITLE: Setting Ease Function for Transition in Phaser 3\nDESCRIPTION: Sets the easing function to be used for the transition animation, which controls the rate of change during the transition progress.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setEaseFunction(ease);\n```\n\n----------------------------------------\n\nTITLE: Opening Text Editor in JavaScript\nDESCRIPTION: Opens the text editor. Optionally accepts a callback function that will be invoked when the editor is closed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.open();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.open(onCloseCallback);\n```\n\n----------------------------------------\n\nTITLE: Configuring Inverse Pipeline Plugin in Phaser 3 Game Config\nDESCRIPTION: Adds the Inverse Pipeline Plugin to the global plugins in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport InversePipelinePlugin from 'phaser3-rex-plugins/plugins/inversepipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexInversePipeline',\n            plugin: InversePipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Modal Promise Implementation\nDESCRIPTION: Creates a modal behavior wrapped in a promise with close functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexUI.modalPromise(gameObject, config)\n    .then(function(closeEventData){ })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.rexUI.modalClose(gameObject);\n// scene.rexUI.modalClose(gameObject, closeEventData);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.emit('modal.requestClose');\n// gameObject.emit('modal.requestClose', closeEventData);\n```\n\n----------------------------------------\n\nTITLE: Loading Rhombus Plugin in Phaser 3 Preload Stage\nDESCRIPTION: Loads the minified Rhombus plugin file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rhombus.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexrhombusplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexrhombusplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Importing Drag-Rotate Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the drag-rotate plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dragrotate.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport DragRotatePlugin from 'phaser3-rex-plugins/plugins/dragrotate-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexDragRotate',\n            plugin: DragRotatePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Wrapping Next Page in Phaser 3 Dynamic Text\nDESCRIPTION: Method to continue text wrapping for the next page based on previous wrapping results.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = txt.runWordWrap(prevResult);\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Track Size Ratio\nDESCRIPTION: Sets the track width and height ratios of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setTrackSize(trackWidth, trackHeight);\n// toggleSwitch.trackWidth = trackWidth;\n// toggleSwitch.trackHeight = trackHeight;\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleLabel Style in Phaser 3\nDESCRIPTION: Defines the style properties for a SimpleLabel object in Phaser 3, including background, icon, text, and action styles, as well as spacing and alignment options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    $type: 'label',\n\n    // width: undefined,\n    // height: undefined,\n    // origin:\n    // originX:\n    // originY:\n\n    orientation: 0,\n    // rtl: false,\n\n    background: backgroundStyle,\n\n    icon: iconStyle,\n    \n    // iconMask: false,\n    // squareFitIcon: false,\n    // iconSize: undefined, iconWidth: undefined, iconHeight: undefined,\n\n    text: testStyle,\n    // wrapText: false,  // false|'word'|'char',\n    // adjustTextFontSize: false,\n    // expandTextWidth: false,\n    // expandTextHeight: false,\n\n    action: actionStyle,\n\n    // squareFitAction: false,\n    // actionMask: false,\n    // actionSize: undefined, actionWidth: undefined, actionHeight: undefined,\n\n    space: {\n        left: 0, right: 0, top: 0, bottom:0, \n        icon: 0, text: 0\n    }\n\n    align: undefined,  // 'left' | 'top' | 'right' | 'bottom' | 'center\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Life-time Behavior (Plugin Version)\nDESCRIPTION: Shows how to add the Life-time behavior to a game object using the plugin version.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lifetime.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar lifeTime = scene.plugins.get('rexLifeTime').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Point on Triangle Edge in Phaser 3\nDESCRIPTION: Calculates a point on the edge of a triangle at a specific position parameter t (0-1).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = triangle.getPoint(t);  // t : 0 ~ 1 (angle/360)\n// var point = triangle.getPoint(t, point);  // modify point\n```\n\n----------------------------------------\n\nTITLE: Handling TextBox Typing Start Event\nDESCRIPTION: Sets up an event handler for when text typing begins in the text box.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.on('start', function() {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Loading Drop Shadow Plugin - Minified Version\nDESCRIPTION: Load the minified plugin file in the scene's preload stage and apply the effect to game objects or cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dropshadow.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexdropshadowpipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexdropshadowpipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Applying Horrifi Effect to Camera After Plugin Import\nDESCRIPTION: Applies the Horrifi post-processing effect to a camera after importing the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexHorrifiPipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Speed of Physics Body in Phaser 3\nDESCRIPTION: Shows how to get the absolute change in a physics body's position from the previous step.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar dx = body.deltaAbsX();\nvar dy = body.deltaAbsY();\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Custom Unique Index\nDESCRIPTION: Define a collection with a custom unique index for faster document retrieval by that property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nvar collection = db.addCollection(name, {\n    unique: [key0]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'quest' Event in Question Manager (JavaScript)\nDESCRIPTION: Demonstrates how to listen for the 'quest' event fired when calling questionManager.getNextQuestion(). The event provides the question object, question manager, and quest task.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nquestionManager.on('quest', function(question, questionManager, quest){\n    // questionManager.getNextQuestion();\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Bullet Class for Phaser 3\nDESCRIPTION: Imports the Bullet class directly from the Rex plugins package. This method provides more control over instantiation and is useful for typescript projects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bullet.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Bullet from 'phaser3-rex-plugins/plugins/bullet.js';\n```\n\n----------------------------------------\n\nTITLE: Creating Background Game Object Instance\nDESCRIPTION: Command for creating a TransitionImagePack as a Background game object. Parameters include ID, image key, frame, viewport position/size, and scale mode (FIT or ENVELOP).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/background-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBG\n  id=NAME\n  key=value\n  frame=value\n  vpx=0.5\n  vpy=0.5\n  vpw=\n  vph=\n  scaleMode=\n```\n\n----------------------------------------\n\nTITLE: Getting a child by name in Phaser 3 List\nDESCRIPTION: Method to retrieve a child from the List by its name property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar child = list.getByName(name);\n```\n\n----------------------------------------\n\nTITLE: Defining Chat Message Structure for Firebase Database\nDESCRIPTION: Specifies the structure of a chat message document in Firebase Realtime Database with fields for sender identification, message content, timestamp, and optional receiver identification.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/firebase/firestore/messages/schema.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- <randomID>\n    - `senderID` - Unique ID of sender\n\t- `senderName` - Name of sender\n    - `message` - Message\n    - `timestamp` - Server-timestamp\n    - `receiverID` - Unique ID of receiver, optional\n```\n\n----------------------------------------\n\nTITLE: Structured Patch Data Structure Example in JavaScript\nDESCRIPTION: Example of the data structure returned by the structuredPatch method, showing the format of hunks and file information.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/utils/jsdiff/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  oldFileName: 'oldfile', newFileName: 'newfile',\n  oldHeader: 'header1', newHeader: 'header2',\n  hunks: [{\n    oldStart: 1, oldLines: 3, newStart: 1, newLines: 3,\n    lines: [' line2', ' line3', '-line4', '+line5', '\\\\ No newline at end of file'],\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a child exists in a List in Phaser 3\nDESCRIPTION: Method to check if a specific child element exists within the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasChild = list.exists(child);\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements by Name in imageInputLabel (Method 2) (JavaScript)\nDESCRIPTION: Gets a child game object by its name using the getByName method. The optional recursive parameter determines whether to search all children recursively.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = imageInputLabel.getByName(name);\n// var gameObject = imageInputLabel.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Creating a NinePatch with Full Configuration (Method 1)\nDESCRIPTION: Shows how to create a NinePatch with x, y, width, height, texture key, base frame, columns, rows and additional configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch(x, y, width, height, key, baseFrame, columns, rows, {\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration\nDESCRIPTION: Configuration setup for integrating the UI plugin into the Phaser game instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-chart.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Touch Events in Touch State\nDESCRIPTION: Demonstrates how to set up event listeners for touch start, end, and move events using the Touch State instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/touchstate.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntouchState.on('touchstart', function (touchState, gameObject, pointer, localX, localY, event) {\n    // ...\n}, scope);\n\ntouchState.on('touchend', function (touchState, gameObject, pointer) {\n    // ...\n}, scope);\n\ntouchState.on('touchmove', function (touchState, gameObject, pointer, localX, localY, event) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling State Change Event in Youtube Player for Phaser 3\nDESCRIPTION: Event handler for when the Youtube video player's state changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('statechange', function(player){ }, scope);\n```\n\n----------------------------------------\n\nTITLE: Getting Top Scroll Position in TextArea\nDESCRIPTION: Shows how to get the top scroll position value, which represents the Y-offset at the top of content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar topOY = textArea.topChildOY;\n```\n\n----------------------------------------\n\nTITLE: Receiving Broadcast Messages\nDESCRIPTION: JavaScript code to register an event handler for receiving messages from other users in the chat room.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nroom.on('broadcast.receive', function(data){\n    // var senderID = data.senderID;\n    // var senderName = data.senderName;\n    // var message = data.message;\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Geometry Mask from Star in Phaser 3\nDESCRIPTION: Creates a geometry mask from a star shape in Phaser 3, which can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = star.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Configuring Device-to-Screen Transformation Matrix\nDESCRIPTION: Sets up the device-to-screen transformation matrix to handle different screen orientations. The matrix is configured to scale and translate coordinates appropriately based on whether the screen is in landscape or portrait mode.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis._deviceToScreen.loadIdentity();\nif (width > height) {\n  const screenW: number = Math.abs(right - left);\n  this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);\n} else {\n  const screenH: number = Math.abs(top - bottom);\n  this._deviceToScreen.scaleRelative(screenH / height, -screenH / height);\n}\nthis._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);\n```\n\n----------------------------------------\n\nTITLE: DropDownList Thumb Creation Callback\nDESCRIPTION: Example of the callback function used to create a slider thumb for the dropdown list panel. This is optional and only needed for scrollable lists, with the 'this' context set to the dropdown list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(scene) {\n    // this : dropDownList\n    return gameObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Tag Start Events in Bracket Parser 2\nDESCRIPTION: Demonstrates how to handle specific tag start events with payload in Bracket Parser 2.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nparser.on('+' + TagName, function(payload){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Importing FishEye Plugin in Phaser Game Configuration\nDESCRIPTION: Configures the Phaser game to include the FishEye pipeline plugin by importing and adding it to the global plugins list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport FishEyePipelinePlugin from 'phaser3-rex-plugins/plugins/fisheyepipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFishEyePipeline',\n            plugin: FishEyePipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Inserting Items at Specific Index in Phaser Array\nDESCRIPTION: Method to insert items at a specific index in a Phaser array with optional size limit and callback functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-addremove.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.AddAt(arr, item, index);\n// Phaser.Utils.Array.AddAt(arr, item, index, limit, callback, context);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Ellipse in Phaser 3\nDESCRIPTION: Basic creation of an ellipse shape with position, dimensions, and fill color parameters. Supports optional fill alpha parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-ellipse.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ellipse = scene.add.ellipse(x, y, width, height, fillColor);\n// var ellipse = scene.add.ellipse(x, y, width, height, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Pixelation PostFx Class\nDESCRIPTION: Importing the Pixelation PostFx class directly and adding it to the game's pipeline configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-pixelation.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport PixelationPostFx from 'phaser3-rex-plugins/plugins/pixelationpipeline.js';\nvar config = {\n    // ...\n    pipeline: [PixelationPostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Star Outer Radius in Phaser 3\nDESCRIPTION: Retrieves the outer radius value of a star shape in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar outerRadius = star.outerRadius;\n```\n\n----------------------------------------\n\nTITLE: Game Configuration with UI Plugin\nDESCRIPTION: Configuration code for installing the UI plugin via npm with game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-toastqueue.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Normalized Playback Time in Youtube Player\nDESCRIPTION: Method to get the current playback position as a normalized value between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar t = player.t; // t: 0~1\n```\n\n----------------------------------------\n\nTITLE: Handling Game Object N-Tap Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for specific N-tap gestures on a game object (chess piece) on the board. The event name is constructed dynamically based on the tap count. The callback receives the tap behavior object and the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('gameobject' + tapsCount + 'tap' , function(tap, gameObject) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('board.' + tapsCount + 'tap', function(tap) {\n})\n```\n\n----------------------------------------\n\nTITLE: Importing TintRGB Method Directly\nDESCRIPTION: Demonstrates how to import and use the TintRGB method directly from the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tintrgb.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport AddTintRGBProperties from 'phaser3-rex-plugins/plugins/tintrgb.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nAddTintRGBProperties(gameObject, tintRGB);\ngameObject.tintGray = 128;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the Rex Plugins package from NPM, which includes the RandomPlace plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/randomplace.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Stopping Custom AwayTimer in Phaser3\nDESCRIPTION: Stops a custom AwayTimer object from periodically saving timestamps. This prevents further updates to the stored timestamp until the timer is restarted.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawayTimer.stop();\n```\n\n----------------------------------------\n\nTITLE: Managing Padding in Phaser 3 Text\nDESCRIPTION: Methods to get and set padding values for text objects. Padding can be set for all sides individually or using a padding object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar left = txt.padding.left;\nvar top = txt.padding.top;\nvar right = txt.padding.right;\nvar bottom = txt.padding.bottom;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setPadding(left, top, right, bottom);\n// txt.setPadding(padding); // padding: {left, top, right, bottom}\n```\n\n----------------------------------------\n\nTITLE: Managing Global Sound Detune in Phaser 3\nDESCRIPTION: Methods to set and get the global detune value of the sound manager, affecting all sound instances in the game with values from -1200 to 1200.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.setDetune(detune); // detune: -1200 to 1200\n// scene.sound.detune = detune;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar detune = scene.sound.detune;\n```\n\n----------------------------------------\n\nTITLE: Quadratic Bezier Interpolation in Phaser 3\nDESCRIPTION: Performs quadratic bezier curve interpolation with start point p0, control point p1, and end point p2 based on parameter t (0-1).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interpolation.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.Interpolation.QuadraticBezier(t, p0, p1, p2);\n```\n\n----------------------------------------\n\nTITLE: Removing Reveal Effect\nDESCRIPTION: Removes a reveal effect from either a game object or camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-builtin.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.preFX.remove(effect);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.postFX.remove(effect);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Style for Shape Chess\nDESCRIPTION: Configures the outline stroke properties including line width, color, and alpha transparency for a shape chess object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-shape.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nchess.setStrokeStyle(lineWidth, color, alpha)\n```\n\n----------------------------------------\n\nTITLE: Triangle Alpha Management in Phaser 3\nDESCRIPTION: Getting and setting alpha values of a Triangle object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = triangle.alpha;\ntriangle.setAlpha(alpha);\n// triangle.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Adding a Binary Index to an Existing Collection\nDESCRIPTION: Add a binary index to an existing collection to improve query performance for a specific property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\ncollection.ensureIndex(key);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Colors for IsoBox in Phaser 3\nDESCRIPTION: Shows how to set the fill colors for the top, left, and right faces of an IsoBox object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isobox.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nisoBox.setFillStyle(fillTop, fillLeft, fillRight);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotate Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to include the Rotate plugin in the Phaser 3 game configuration when using the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotate.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RotatePlugin from 'phaser3-rex-plugins/plugins/rotate-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRotate',\n            plugin: RotatePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Managing TCRP Player Time Scale\nDESCRIPTION: Methods and properties to set and get the time scale of the TCRP player.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.setTimeScale(value);\n// player.timeScale = value;\n\nvar timeScale = player.timeScale;\n```\n\n----------------------------------------\n\nTITLE: Getting Triangle-Triangle Intersection Points in Phaser 3\nDESCRIPTION: Calculates the points where two triangles intersect with each other.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetTriangleToTriangle(triangleA, triangleB);\n// var out = Phaser.Geom.Intersects.GetTriangleToTriangle(triangleA, triangleB, out);\n```\n\n----------------------------------------\n\nTITLE: Implementing Yoyo Scale Animation for Height Only in Phaser 3\nDESCRIPTION: Animates a game object by scaling its height up to a peak value and then back to its original scale, while keeping the width constant. Works with both standard and Promise-based interfaces.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScaleY(scaleY)\n    .scaleYoyo(duration, peakValue, 0, 'y');\n\n// gameObject.popUp(duration, peakValue, repeat, 'y', ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScaleY(scaleY)\n    .scaleYoyoPromise(duration, peakValue, repeat, 'y')\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Getting Circle Radius in Phaser 3\nDESCRIPTION: Retrieves the current radius of a circle game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar radius = circle.radius;\n```\n\n----------------------------------------\n\nTITLE: Installing Cross-Stitching Pipeline Plugin via NPM\nDESCRIPTION: Command to install the Phaser 3 Rex plugins package from NPM, which includes the cross-stitching pipeline plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing TitleLabel Class Directly\nDESCRIPTION: Code to import the TitleLabel class directly and create an instance in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TitleLabel } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = new TitleLabel(scene, config);\nscene.add.existing(label);\n```\n\n----------------------------------------\n\nTITLE: Transit In Custom Callback\nDESCRIPTION: Custom callback function for handling the transition-in (opening) animation of the loading dialog.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(gameObject, duration) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Perspective Image Class\nDESCRIPTION: Creates a custom class that extends the PerspectiveImage class with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPerspectiveImage extends PerspectiveImage {\n    constructor(scene, x, y, texture, frame, config) {\n        super(scene, x, y, texture, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting HSL Adjust Effect Instance in Phaser 3\nDESCRIPTION: Retrieve the HSL adjust effect instance from a game object or camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-hsladjust.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexHslAdjustPipeline').get(gameObject)[0];\n```\n\n----------------------------------------\n\nTITLE: Color Properties and Cloning\nDESCRIPTION: Accessing color properties and creating color clones\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/color.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar c = color.color;\nvar c = color.color32;\nvar c = color.rgba;\nvar newColor = color.clone();\n```\n\n----------------------------------------\n\nTITLE: Transition Progress Callback Implementation for Phaser 3\nDESCRIPTION: Example of a progress callback function implementation showing how to manipulate image properties during transition. The progress value (t) ranges from 0 to 1 during the transition.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(parent, currentImage, nextImage, t) { \n    // parent.setChildLocalAlpha(currentImage, 1 - t);\n    // parent.setChildLocalScale(currentImage, 1 - t);\n    // parent.setChildLocalPosition(currentImage, x, 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Class for Direct Usage in Phaser 3\nDESCRIPTION: Imports the Tabs class directly for use in a Phaser 3 project without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tabs } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n\nvar tabs = new Tabs(scene, config);\nscene.add.existing(tabs);\n```\n\n----------------------------------------\n\nTITLE: Clearing All Shader Effects in Phaser 3\nDESCRIPTION: This code snippet demonstrates how to clear all applied shader effects from a game object in Phaser 3. It uses the clearAllEffects() method, which removes all previously applied shader effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effect-properties.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.clearAllEffects();\n```\n\n----------------------------------------\n\nTITLE: Getting Radius Properties of Round Rectangle\nDESCRIPTION: Retrieves various radius properties of a round rectangle including individual corner radii.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar radius = rect.radius;\nvar radiusTL = rect.radiusTL;\nvar radiusTR = rect.radiusTR;\nvar radiusBL = rect.radiusBL;\nvar radiusBR = rect.radiusBR;\n```\n\n----------------------------------------\n\nTITLE: Setting Number Input for Canvas Input in Phaser 3\nDESCRIPTION: This snippet shows how to set the canvas input to accept only number input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setNumberInput();\n```\n\n----------------------------------------\n\nTITLE: Accessing Background Element in imageInputLabel (JavaScript)\nDESCRIPTION: Retrieves the background game object from an imageInputLabel component. This provides access to the underlying background object for customization or manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = imageInputLabel.getElement('background');\n```\n\n----------------------------------------\n\nTITLE: Importing Color Replace Pipeline Plugin in Phaser 3 Configuration\nDESCRIPTION: Shows how to import and configure the color replace pipeline plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-colorreplace.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ColorReplacePipelinePlugin from 'phaser3-rex-plugins/plugins/colorreplacepipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexColorReplacePipeline',\n            plugin: ColorReplacePipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Printing Text with Variable Interpolation in Custom Script\nDESCRIPTION: Demonstrates how to print text with variable interpolation using a custom print command. It includes both single-line and multi-line print statements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/sample/sample.md#2025-04-21_snippet_0\n\nLANGUAGE: custom\nCODE:\n```\nprint\n text=I have {{coin}} coin\n\nset\n  coin=#( coin + randomInt(1, 10) )\n\nprint\n text=Now I have {{coin}} coin\n```\n\nLANGUAGE: custom\nCODE:\n```\n```print\nHello, {{name}}\nLine1\nLine2\nLine3\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Circular Progress Instance\nDESCRIPTION: Shows how to create a circular progress instance after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar circularProgress = scene.add.rexCircularProgressCanvas(x, y, radius, color, value, config);\n```\n\n----------------------------------------\n\nTITLE: Drawing Frames in Canvas Texture\nDESCRIPTION: Draws a frame from another texture at specified coordinates with optional update parameter\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-texture.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.drawFrame(key, frame, x, y);\n// texture.drawFrame(key, frame, x, y, update);\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Track Fill Style\nDESCRIPTION: Sets the track fill color and alpha for the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setTrackFillStyle(color, alpha);\n// toggleSwitch.trackFillColor = color;\n// toggleSwitch.trackFillAlpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Loading TextAreaInput Plugin via Minified File in Phaser 3\nDESCRIPTION: Loads the Rex UI plugin using a minified file in the preload stage of a Phaser 3 scene, enabling the use of the TextAreaInput component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Adding/Removing Container-Lite to/from Other Containers (JavaScript)\nDESCRIPTION: Methods for adding a Container-Lite instance to built-in containers or layers, and removing it from them. This allows for nesting and management of container hierarchies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ncontainerLite.addToContainer(p3Container);\n```\n\nLANGUAGE: javascript\nCODE:\n```\np3Container.add(containerLite);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.addToLayer(layer);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainerLite.removeFromContainer(p3Container);\n```\n\nLANGUAGE: javascript\nCODE:\n```\np3Container.remove(containerLite);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.removeFromLayer(layer);\n```\n\n----------------------------------------\n\nTITLE: Loading Hexagon Plugin\nDESCRIPTION: Loads the minified hexagon plugin in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-hexagon.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexhexagonplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexhexagonplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Adding Pan Input after Loading the Plugin in Phaser 3\nDESCRIPTION: Creates a pan input instance after the gesture plugin has been loaded into the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pan = scene.rexGestures.add.pan(config);\n// var pan = scene.rexGestures.add.pan(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Line Progress Canvas Plugin in Phaser 3 Configuration\nDESCRIPTION: Demonstrates how to import and configure the Line Progress Canvas plugin in the game configuration of a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-lineprogress.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport LineProgressCanvasPlugin from 'phaser3-rex-plugins/plugins/lineprogresscanvas-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexLineProgressCanvasPlugin',\n            plugin: LineProgressCanvasPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Compiling Expressions with Global Plugin\nDESCRIPTION: Shows how to compile an expression string to a function using the globally configured plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar f = scene.plugins.get('rexExpressionParserPlugin').compile(expressionString);\n// var value = f(context);\n```\n\n----------------------------------------\n\nTITLE: Creating a Triangle in Phaser3\nDESCRIPTION: Creates a triangle geometry object with specified vertex coordinates for use with triangular placement actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = new Phaser.Geom.Triangle(x1, y1, x2, y2, x3, y3);\nPhaser.Actions.PlaceOnTriangle(gameObjects, triangle, stepRate);\n```\n\n----------------------------------------\n\nTITLE: Configuring CRT Pipeline Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Configures the CRT pipeline plugin in the global plugins section of Phaser 3 game configuration after importing it from the NPM package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport CrtPipelinePlugin from 'phaser3-rex-plugins/plugins/crtpipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCrtPipeline',\n            plugin: CrtPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Checking Rotation State and Pointer Position\nDESCRIPTION: Shows how to check if rotation is active and if pointers are inside other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRotating = rotate.isRotating;\n\nrotate.on('rotate', function(rotate) {\n    var isPointer0InsideGameObject = rotate.isPointer0InGameObject(anotherGameObject);\n    var isPointer1InsideGameObject = rotate.isPointer1InGameObject(anotherGameObject);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an Event Sheet with Group Name\nDESCRIPTION: Adds an event sheet to a specific named group with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.addEventSheet(content, groupName, {\n    commentLineStart: '\\/\\/',\n    lineBreak: '\\\\',\n    parallel: undefined,\n    active: true,\n    once: false\n})\n```\n\n----------------------------------------\n\nTITLE: Value Conversion Callback\nDESCRIPTION: Custom callback function for converting values during CSV loading or column/row conversion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvtohashtable.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar convertCallback = function(table, rowKey, colKey, value) {\n    // value = ...\n    return value;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Triangle Plugin via NPM Configuration\nDESCRIPTION: Configures the triangle plugin in the game configuration after installing via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle2.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport TrianglePlugin from 'phaser3-rex-plugins/plugins/triangle-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTrianglePlugin',\n            plugin: TrianglePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Layout Method in JavaScript\nDESCRIPTION: Method to arrange the position of all elements in the Tweaker component. Used to refresh the UI layout after making changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.layout();\n```\n\n----------------------------------------\n\nTITLE: Setting Complete Callback for Wait Events\nDESCRIPTION: Demonstrates how to set or update the complete callback for a Wait Events instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwaitEvents.setCompleteCallback(completeCallback, completeCallbackScope);\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling CRT Effect in Phaser 3 Pipeline\nDESCRIPTION: Methods to enable, disable, and check the status of CRT (Cathode Ray Tube) effect in a pipeline instance. These methods control whether the CRT visual effect is applied to the rendered scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setCRTEnable();\n// pipelineInstance.setCRTEnable(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.crtEnable = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setCRTEnable(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.crtEnable = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar crtEnable = pipelineInstance.crtEnable;\n```\n\n----------------------------------------\n\nTITLE: Importing Color Components Class in Phaser 3\nDESCRIPTION: Shows how to import the Color Components class directly and create an instance in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ColorComponents } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n\nvar colorComponents = new ColorComponents(scene, config);\nscene.add.existing(colorComponents);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Rope Instance in Phaser 3\nDESCRIPTION: Creates an instance of a custom rope class with specified position, texture, and configuration parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar rope = new MyRope(scene, x, y, texture, frame, points, horizontal);\n```\n\n----------------------------------------\n\nTITLE: Creating Firebase Collection Reference\nDESCRIPTION: Creates a reference to a Firestore collection which can be used for various database operations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar collectionRef = db.collection(collectionName);\n```\n\n----------------------------------------\n\nTITLE: Polygon Color and Alpha Management\nDESCRIPTION: Collection of methods for getting and setting fill color, stroke color, and alpha values of a polygon.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-polygon.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = polygon.fillColor;\nvar alpha = polygon.fillAlpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npolygon.setFillStyle(color, alpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npolygon.setFillStyle();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = polygon.strokeColor;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npolygon.setStrokeStyle(lineWidth, color, alpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npolygon.setStrokeStyle();\n```\n\n----------------------------------------\n\nTITLE: Installing PNG Appender Plugin via npm and Configuring in Phaser 3\nDESCRIPTION: This snippet shows how to install the PNG Appender plugin via npm and configure it in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/png-appender.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport PNGAppenderPlugin from 'phaser3-rex-plugins/plugins/pngappender-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPNGAppender',\n            plugin: PNGAppenderPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Game Configuration with Canvas Data Plugin\nDESCRIPTION: Configuration for importing and initializing the plugin at game startup.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-data.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport CanvasDataPlugin from 'phaser3-rex-plugins/plugins/canvasdata-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCanvasData',\n            plugin: CanvasDataPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Dissolve PostFx Class Directly in Phaser 3\nDESCRIPTION: Imports the DissolvePostFx class directly and adds it to the game's pipeline configuration. This method gives more direct control over the effect class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport DissolvePostFx from 'phaser3-rex-plugins/plugins/dissolvepipeline.js';\nvar config = {\n    // ...\n    pipeline: [DissolvePostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Applying Dissolve Effect to Camera After Plugin Import in Phaser 3\nDESCRIPTION: Applies the dissolve effect to a camera after importing the plugin through npm. Uses the globally available plugin reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexDissolvePipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDKs and Rex Firebase Plugin\nDESCRIPTION: HTML markup for loading Firebase core SDK, Firestore services, and the rex-firebase minified JavaScript file. This needs to be placed at the bottom of the HTML body.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/7.7.0/firebase-app.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/7.7.0/firebase-firestore.js\"></script>\n\n    <script src=\"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Setting From-Texture Edge Parameters by Method in Phaser 3 Dissolve Effect\nDESCRIPTION: Sets the edge start and width parameters for the from-texture (source texture) using a method. These parameters control the appearance of the dissolving edge.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setFromEdge(edgeStart, edgeWidth);\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin Minified File in Phaser Scene\nDESCRIPTION: Load the minified plugin file in the scene's preload stage and create a hash table instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvtohashtable.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcsvtohashtableplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcsvtohashtableplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = scene.plugins.get('rexcsvtohashtableplugin').add();\n```\n\n----------------------------------------\n\nTITLE: Importing ContainerLite Plugin in Phaser 3 Configuration\nDESCRIPTION: Demonstrates how to import and configure the ContainerLite plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ContainerLitePlugin from 'phaser3-rex-plugins/plugins/containerlite-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexContainerLitePlugin',\n            plugin: ContainerLitePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Quad Render Texture from JSON in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to create a Quad Render Texture instance from a JSON configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-rendertexture.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.make.rexQuadRenderTexturege({\n    x: 0,\n    y: 0,    \n    width: 32,\n    height: 32,\n\n    // hideCCW: false,\n    // ninePointMode: false,\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Display Size\nDESCRIPTION: Sets the display width and height of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setDisplaySize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Threshold in Phaser 3 Press Input\nDESCRIPTION: Sets the drag threshold for the press input, which determines how much movement is allowed during a press.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\npress.setDragThreshold(dragThreshold);\n// press.dragThreshold = dragThreshold;\n```\n\n----------------------------------------\n\nTITLE: Getting CRT Effect Instance from Game Object\nDESCRIPTION: Retrieves the CRT pipeline instance applied to a game object, either as a single instance or as an array of instances if multiple are present.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexCrtPipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexCrtPipeline').get(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ScrollBar Class\nDESCRIPTION: Example of extending the ScrollBar class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyScrollBar extends RexPlugins.UI.ScrollBar {\n    constructor(scene, config) {\n        super(scene, config);\n        scene.add.existing(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shape Chess with Class Constructor\nDESCRIPTION: Creates a new Shape chess object using the class constructor and adds it to the scene manually.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-shape.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = new Shape(board, tileX, tileY, tileZ, fillColor);\nscene.add.existing(chess);\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of a Custom Menu Class\nDESCRIPTION: Instantiates a custom menu class in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar menu = new MyMenu(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Game with Ship Plugin Import\nDESCRIPTION: Sets up the game configuration with Arcade physics and the Ship plugin imported from the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ShipPlugin from 'phaser3-rex-plugins/plugins/ship-plugin.js';\nvar config = {\n    physics: {\n        default: 'arcade',\n        arcade: {\n            // debug: true\n        }\n    },\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexShip',\n            plugin: ShipPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Using the Key Object Interface in Keys Hub\nDESCRIPTION: These snippets demonstrate how to get key objects from the Keys Hub using various methods like addKey, addKeys, and createCursorKeys.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyshub.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObject = keysHub.addKey('W');  // see `Key map` section\n// var keyObject = keysHub.addKey(Phaser.Input.Keyboard.KeyCodes.W);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObject = keysHub.addKey('W');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObjects = keysHub.addKeys('W,S,A,D');  // keyObjects.W, keyObjects.S, keyObjects.A, keyObjects.D\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObjects = keysHub.addKeys({\n    up: 'W',\n    down: 'S',\n    left: 'A',\n    right: 'D'\n});  // keyObjects.up, keyObjects.down, keyObjects.left, keyObjects.right\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar cursorKeys = keysHub.createCursorKeys();\n```\n\n----------------------------------------\n\nTITLE: Scrolling Multiple Lines in TextArea\nDESCRIPTION: Demonstrates how to scroll the content down by a specified number of lines from the current position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.scrollToNextLine(n);\n```\n\n----------------------------------------\n\nTITLE: Bitmap Text Cropping and Scrolling\nDESCRIPTION: Methods for setting crop dimensions and scroll position of the bitmap text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamicbitmaptext.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setSize(width, height);\n\n// or\ntxt.cropWidth = width;\ntxt.cropHeight = height;\n\ntxt.setScrollX(scrollX);\ntxt.setScrollY(scrollY);\n\n// or\nthis.scrollX = scrollX;\nthis.scrollY = scrollY;\n```\n\n----------------------------------------\n\nTITLE: Implementing Scale-Down Animation for Both Dimensions in Phaser 3\nDESCRIPTION: Scales down a game object in both dimensions over a specified duration without destroying it. The animation can be customized with different ease functions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDown(duration);\n// gameObject.scaleDown(duration, undefined, ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDownPromise(duration, undefined, ease)\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Adding a Text Input Row Using Object and Key\nDESCRIPTION: Configuration for adding a text input row to a tweaker, binding it to a property of an object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput(object, key, {    \n    // view: 'string',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    // monitor: false,\n\n    // key: undefined,\n\n    // autoUpdate: true,\n    // onValidate: undefined,\n    // onValueChange: undefined,    \n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Next Page Pagination in Firestore\nDESCRIPTION: Continues pagination by starting after the last document from the previous query, useful for implementing 'next page' functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar lastDoc = querySnapshot.docs[querySnapshot.docs.length - 1];\ndb.collection(collectionName).orderBy(key).startAfter(lastDoc).limit(count).get()\n    .then(function(querySnapshot) { /* ... */ })\n    .catch(function(error){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Clearing Star Fill Style in Phaser 3\nDESCRIPTION: Clears the fill style of a star shape in Phaser 3, making it transparent.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nstar.setFillStyle();\n```\n\n----------------------------------------\n\nTITLE: Creating RoundRectangleProgress with Scene.make Factory\nDESCRIPTION: Creates a RoundRectangleProgress using the Scene.make factory method with full configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar roundRectangleProgress = scene.make.rexRoundRectangleProgress({\n    x: 0,\n    y: 0,\n    width: 2,\n    height: 2,\n    radius: 0,\n\n    barColor: undefined,\n    trackColor: undefined,\n    trackStrokeColor: undefined,\n    trackStrokeThickness: 2,\n\n    rtl: false,\n    orientation: 0,\n\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n    value: 0,\n    valuechangeCallback: function(newValue, oldValue, roundRectangleProgress) {\n    },\n    \n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Layouting NumberBar in Phaser 3\nDESCRIPTION: Shows how to trigger the layout method on a NumberBar instance. This is useful for arranging the positions of all elements within the NumberBar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.layout();\n```\n\n----------------------------------------\n\nTITLE: Applying Glow Effect with Configuration Options\nDESCRIPTION: Adds a glow effect to a game object with configuration options, including intensity settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGlowFilterPipeline').add(gameObject, {\n    // intensity: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Texture Pattern in Phaser 3 Graphics\nDESCRIPTION: Removes any texture pattern that has been set on the graphics object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.setTexture();\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Image Game Objects in Phaser 3 Transition\nDESCRIPTION: Methods to access the internal current/next and front/back image game objects used by the transition system. These can be used for direct manipulation if needed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar curentImageGO = image.currentImage;\nvar nextImageGO = image.nextImage;\n\nvar frontImageGO = image.frontImage;\nvar backImageGO = image.backImage;\n```\n\n----------------------------------------\n\nTITLE: Setting Skew Values for Skewable Image in Degrees\nDESCRIPTION: Methods for setting the horizontal, vertical, or both skew values using degrees to manipulate the image appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setSkewXDeg(skewXDeg);\nimage.setSkewYDeg(skewXDeg);\nimage.setSkewDeg(skewXDeg, skewYDeg);\n```\n\n----------------------------------------\n\nTITLE: Configuring All-in-One Spinner in Phaser 3 Rex Spinner Plugin\nDESCRIPTION: Demonstrates the configuration for the All-in-One (AIO) spinner type, which can display various animation modes or randomly select them.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-spinner.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar spinner = scene.rexSpinner.add.aio({\n  // ...\n  // animationMode: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Layers\nDESCRIPTION: Gets the array of map layers from the MapData object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tiledmapdata.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar layers = mapData.layers;\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value of a Property\nDESCRIPTION: Find the maximum value of a property across all documents in a collection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nvar maxValue = collection.max(key);\n```\n\n----------------------------------------\n\nTITLE: Iterating Array Elements with forEach in JavaScript\nDESCRIPTION: Executes a provided function once for each array element with access to the element, index, and array reference. Allows an optional scope parameter to set the 'this' value within the callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-filter.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\narr.forEach(function(element, index, arr) {\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Registering Scene Postupdate Event Listener in JavaScript\nDESCRIPTION: Demonstrates how to register an event listener for the 'postupdate' event in a Phaser 3 scene. This event occurs after all updates have been processed but before rendering begins.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.events.on('postupdate', function(time, delta){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM\nDESCRIPTION: Instructions for installing and configuring the webfont loader plugin using npm package manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/webfontloader.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport WebFontLoaderPlugin from 'phaser3-rex-plugins/plugins/webfontloader-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexWebFontLoader',\n            plugin: WebFontLoaderPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Triangle Shape in Phaser3 Rex UI\nDESCRIPTION: Shows how to add a triangle shape inside a rectangle bounds. This component creates a triangle shape that fills a rectangular area.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = scene.rexUI.add.triangle(x, y, width, height, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Creating NinePatch2 with Texture Configuration Object\nDESCRIPTION: Creates a NinePatch2 instance with texture configuration provided as an object. This focuses on separating texture information from positioning parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch2(x, y, width, height, {\n    key: undefined,\n    columns: undefined,\n    rows: undefined,\n\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    baseFrame: undefined,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Game Object Press End Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for press-end gestures on a game object (chess piece) on the board. The callback receives the press behavior object and the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('gameobjectpressend', function(press, gameObject) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('board.pressend', function(press) {\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Random 2D Vector in Phaser 3\nDESCRIPTION: Creates a random 2D vector with x and y components using Phaser.Math.RandomXY method. Optionally accepts a scale parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/random.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar vec = Phaser.Math.RandomXY(vec);    // return vec {x, y}\n// var vec = Phaser.Math.RandomXY(vec, scale);\n```\n\n----------------------------------------\n\nTITLE: Creating a NinePatch Object After Plugin Registration\nDESCRIPTION: Shows how to create a NinePatch object after registering the plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch(x, y, width, height, key, baseFrame, columns, rows, config);\n```\n\n----------------------------------------\n\nTITLE: Empty Tile Position Management in JavaScript\nDESCRIPTION: Functions for finding and managing empty tile positions on the board. Includes random empty tile selection and range-based empty tile queries.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar isEmpty = board.isEmptyTileXYZ(tileX, tileY, tileZ);\nvar tileXY = board.getRandomEmptyTileXY(tileZ);\n```\n\n----------------------------------------\n\nTITLE: Setting Size Ratios\nDESCRIPTION: Sets the size ratios for the box and checker elements of the checkbox, controlling their relative proportions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setBoxSize(sizeRatio);\ncheckbox.setCheckerSize(sizeRatio);\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integer Values in Phaser 3\nDESCRIPTION: Generates a random integer between minimum and maximum values (inclusive) using Phaser.Math.Between method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/random.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = Phaser.Math.Between(min, max);\n```\n\n----------------------------------------\n\nTITLE: Adding Checkbox Shape without Click Input\nDESCRIPTION: Creates a checkbox shape without click input functionality, useful for display-only checkboxes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar checkbox = scene.add.rexCheckboxShape(x, y, width, height, color, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Text Typing Class\nDESCRIPTION: Demonstrates how to import and instantiate the TextTyping class directly\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttyping.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport TextTyping from 'phaser3-rex-plugins/plugins/texttyping.js';\nvar typing = new TextTyping(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Handling Game Object Pointer Move Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for when a pointer moves to another game object (chess piece) on the board. The callback receives the pointer object and the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('gameobjectmove', function(pointer, gameObject) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('board.pointermove', function(pointer) {\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Chart Object\nDESCRIPTION: Creating a new chart instance using the Rex UI plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-chart.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar chart = scene.rexUI.add.chart(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Arcade TCRP Recorder Instance from npm-imported Plugin\nDESCRIPTION: Code for creating an instance of the Arcade TCRP recorder after importing the plugin via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar recorder = scene.plugins.get('rexTCRP').addRecorder(scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Quad Render Texture in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to create a bitmap mask from a Quad Render Texture instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-rendertexture.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Date Equality\nDESCRIPTION: Find documents where a date property equals a specified date using the $dteq operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$dteq': new Date('1/1/2017')}});\n```\n\n----------------------------------------\n\nTITLE: Loading a Sprite Sheet with Image URI Loader\nDESCRIPTION: Example of loading a sprite sheet in the preload stage using the Image URI Loader plugin. This method includes frameConfig parameters to define the sprite sheet structure.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imageuriloader.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nthis.load.rexImageURI(key, uri, frameConfig);\n```\n\n----------------------------------------\n\nTITLE: Action Class Implementation\nDESCRIPTION: Example implementation of an Action class that handles sequence commands with event emitters\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sequence.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass ActionKlass extends Phaser.Events.EventEmitter {\n    constructor(scene) {\n        super();\n\n        this.scene = scene;\n        this.myConsole = scene.add.text(100, 100, '');\n\n        this['wait-click'] = this.waitClick;\n        this['wait-time'] = this.waitTime;\n    }\n\n    print(msg) {\n        this.myConsole.setText(msg);\n    }\n\n    waitClick() {\n        this.scene.input.once('pointerup', this.complete, this);\n        return this;\n    }\n\n    waitTime(delay) {\n        this.scene.time.delayedCall(delay * 1000, this.complete, [], this);\n        return this;\n    }\n\n    complete() {\n        this.emit('complete');\n    }\n}\nvar actionScope = new ActionKlass(scene);\n```\n\n----------------------------------------\n\nTITLE: Class Import and Instance Creation\nDESCRIPTION: Imports the OutlineEffectLayer class and creates a new instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effectlayer-outline.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport OutlineEffectLayer from 'phaser3-rex-plugins/plugins/outlineeffectlayer.js';\nvar effectLayer = new OutlineEffectLayer(scene, config);\nscene.add.existing(effectLayer);\n```\n\n----------------------------------------\n\nTITLE: Getting Shape Alpha Value in Phaser3\nDESCRIPTION: Retrieves the alpha (transparency) value of a shape object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = shape.alpha;\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom Circle Class in Phaser 3\nDESCRIPTION: Creates an instance of a custom circle class with specified coordinates, radius, fill color, and alpha values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar circle = new MyCircle(scene, x, y, radius, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Configuring Name Input Fields\nDESCRIPTION: Sets up the name input dialog with customizable titles, buttons, and input field values. Stores input in variables using specified keys.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/nameinput-dialog-commands.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.input\n  title=\n  firstNameTitle=\n  lastNameTitle=\n  button=\n  firstName=\n  lastName=\n  firstNameKey=firstName\n  lastNameKey=lastName\n```\n\n----------------------------------------\n\nTITLE: Creating Bejeweled Object in Phaser 3\nDESCRIPTION: Instantiates a new Bejeweled object with the provided configuration in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar bejeweled = new rexbejeweled(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Installing Bounds Plugin via NPM Configuration\nDESCRIPTION: Install and configure the Bounds plugin using NPM package and game configuration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bounds.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoundsPlugin from 'phaser3-rex-plugins/plugins/bounds-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexBounds',\n            plugin: BoundsPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Destroying a Title Game Object in Phaser 3\nDESCRIPTION: Destroys a previously created Title game object, removing it from the scene and freeing up resources.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/title-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.destroy\n```\n\n----------------------------------------\n\nTITLE: Getting Arc Direction in Phaser 3\nDESCRIPTION: Retrieves the anticlockwise property of an Arc game object, which determines the drawing direction of the arc (true for anticlockwise, false for clockwise).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar anticlockwise = arc.anticlockwise;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Terminal command to install the phaser3-rex-plugins package via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading UI Plugin via Script\nDESCRIPTION: Code to load the minified UI plugin in Phaser 3's preload stage and create a grid buttons instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridbuttons.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\nvar buttons = scene.rexUI.add.gridButtons(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Canvas Plugin in Phaser 3 Scene\nDESCRIPTION: Loads the Canvas plugin minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcanvasplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcanvasplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Adding Single-Room Object via Plugin\nDESCRIPTION: Creates a Firebase single-room instance using the plugin reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar room = scene.plugins.get('rexfirebaseplugin').add.singleRoom(config);\n```\n\n----------------------------------------\n\nTITLE: Managing Experience Points with Level Counter in Phaser 3\nDESCRIPTION: Methods to accumulate experience points, reset experience value, and force level up. These operations can trigger levelup events or callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/levelcounter.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlevelCounter.gainExp(incExp);\n// levelCounter.exp += incExp;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlevelCounter.gainExp(incExp, callback, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(level, fromExp, toExp, levelStartExp, levelEndExp){        \n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlevelCounter.resetExp(exp);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlevelCounter.setLevel(level);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlevelCounter.setLevel(level, callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Loading Round Rectangle Canvas Plugin\nDESCRIPTION: Instructions for loading the plugin via minified file in the preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-roundrectangle.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexroundrectanglecanvasplugin', 'https://raw.githubusercontent.com/rexrainbow/    phaser3-rex-notes/master/dist/rexroundrectanglecanvasplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Accessing Canvas Element and Context in Phaser 3\nDESCRIPTION: Retrieves the Canvas element and 2D rendering context in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvasElem = canvas.getCanvas();\nvar context = canvas.getContext();\n\n// or\n\nvar canvaesElem = canvas.canvas;\nvar context = canvas.context;\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Condition\nDESCRIPTION: Displays a failure message when the initial condition check fails. This acts as an error handler in the control flow.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/json-data/json-data.md#2025-04-21_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\nprint\\\n  text=Condition failed\n```\n\n----------------------------------------\n\nTITLE: Setting and Manipulating Text Content in TextPage for Phaser 3\nDESCRIPTION: Methods for setting, appending, and clearing text content in a TextPage instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textpage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npage.setText(content);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npage.appendText(content);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npage.clearText()\n```\n\nLANGUAGE: javascript\nCODE:\n```\npage.appendPage(content);   // content in string or array\n```\n\n----------------------------------------\n\nTITLE: Getting Circle Fill Color Properties in Phaser 3\nDESCRIPTION: Retrieves the current fill color and alpha values from a circle game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = circle.fillColor;\nvar alpha = circle.fillAlpha;\n```\n\n----------------------------------------\n\nTITLE: Accessing Canvas Element in imageInputLabel (JavaScript)\nDESCRIPTION: Retrieves the canvas game object from an imageInputLabel component. The canvas is created internally as a canvas game object that can be modified directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = imageInputLabel.getElement('canvas');\n```\n\n----------------------------------------\n\nTITLE: Loading Horrifi Pipeline Plugin in Preload Stage\nDESCRIPTION: Loads the minified version of the Horrifi Pipeline plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexhorrifipipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexhorrifipipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Importing TCRP Plugin via NPM\nDESCRIPTION: Shows how to install the plugin via NPM and import it in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Applying Tint Fill to a NinePatch2 Object\nDESCRIPTION: Sets a tint fill for a NinePatch2 object, which applies a solid color that ignores texture alpha. This creates a solid-colored shape matching the object's outline.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setTintFill(tint);\n```\n\n----------------------------------------\n\nTITLE: Managing Letter Spacing in Phaser 3 Text\nDESCRIPTION: Shows how to get and set letter spacing for a Phaser 3 Text object. Enabling this feature causes Phaser to render each character individually, which can be performance intensive.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar letterSpacing = txt.letterSpacing;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setLetterSpacing(value);\n```\n\n----------------------------------------\n\nTITLE: Disabling RotateTo Behavior\nDESCRIPTION: Disables the RotateTo behavior on a game object using the setEnable method or property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.setEnable(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.enable = false;\n```\n\n----------------------------------------\n\nTITLE: Creating ShatterImage Object After Loading Plugin\nDESCRIPTION: Demonstrates how to add a ShatterImage object to a scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexShatterImage(x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Rotate Instance Directly\nDESCRIPTION: Shows how to create a Rotate instance directly using the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotate.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotate = new Rotate(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Package\nDESCRIPTION: Command to install the Phaser 3 Rex plugins from npm, which contains the TabPages component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Removing CRT Effect from Game Object\nDESCRIPTION: Removes the previously applied CRT post-processing effect from a game object using the plugin's remove method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexCrtPipeline').remove(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Getting Dialog Button Input State - JavaScript\nDESCRIPTION: Methods for checking if a specific button has input enabled. The index parameter can be a number index or a button game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar enabled = dialog.getChoiceEnable(index);\nvar enabled = dialog.getActionEnable(index);\nvar enabled = dialog.getToolbarEnable(index);\nvar enabled = dialog.getLeftToolbarEnable(index);\n```\n\n----------------------------------------\n\nTITLE: Setting Ellipse Position in Phaser 3\nDESCRIPTION: Updates the position of an ellipse while maintaining its dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.setPosition(x, y);\n```\n\n----------------------------------------\n\nTITLE: Pausing Youtube Video in Phaser 3\nDESCRIPTION: Method to pause the currently playing Youtube video.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.pause();\n```\n\n----------------------------------------\n\nTITLE: Creating Quad Image from JSON in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to create a Quad Image instance from a JSON configuration in a Phaser 3 game scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-image.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar quadimage = scene.make.rexQuadImage({\n    x: 0,\n    y: 0,\n    \n    key: null,\n    frame: null,\n\n    // ninePointMode: false,\n    // rtl: false\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative String Translation Method\nDESCRIPTION: Code showing an alternative method to translate a string using i18next directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = i18next.t(translationKey, interpolation);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the Phaser 3 Rex plugins package from npm, which includes the Perspective Image plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Reading Radio Button State in Dialog - JavaScript\nDESCRIPTION: Method to retrieve the name of the currently selected radio button in choices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = dialog.getChoicesSelectedButtonName();\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Shift Enable\nDESCRIPTION: Sets or gets the shift enable property which determines whether split parts are shifted out or not.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = pipelineInstance.shiftEnable;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.shiftEnable = enable;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setShiftEnable(enable);\n```\n\n----------------------------------------\n\nTITLE: Configuring Marked Event Sheets Plugin in Game Configuration\nDESCRIPTION: Demonstrates how to configure the Marked Event Sheets plugin in the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport MarkedEventSheetsPlugin from 'phaser3-rex-plugins/plugins/markedeventsheets-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexMarkedEventSheets',\n            plugin: MarkedEventSheetsPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Geometry Mask from Custom Progress\nDESCRIPTION: Method to create a geometry mask from the custom progress bar for use with other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = customProgress.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Accessing Data Tables\nDESCRIPTION: Gets a reference to a specific data table by its key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = room.getTable(key);\n```\n\n----------------------------------------\n\nTITLE: Importing Level Counter Class in Phaser 3\nDESCRIPTION: Code to import the Level Counter class directly and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/levelcounter.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport LevelCounter from 'phaser3-rex-plugins/plugins/levelcounter.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar levelCounter = new LevelCounter(config);\n```\n\n----------------------------------------\n\nTITLE: Getting the Tint Color of a Perspective Image\nDESCRIPTION: Retrieves the current tint color applied to the perspective image.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = image.tint;\n```\n\n----------------------------------------\n\nTITLE: Loading Phaser3 Dropdown Plugin\nDESCRIPTION: Loads the minified plugin file in the preload stage and adds dropdown behavior to a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dropdown.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexdropdownplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexdropdownplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropDown = scene.plugins.get('rexdropdownplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Checking if Swiping is Active\nDESCRIPTION: Shows how to check if a swipe action is currently in progress.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar isSwiping = swipe.isSwiping;\n```\n\n----------------------------------------\n\nTITLE: Alternative Interpolation Update Method\nDESCRIPTION: Code showing an alternative method to update multiple interpolation values at once.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation\n    .updateInterpolation(object)\n    .updateText()\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrap Mode for Bullet in Phaser 3\nDESCRIPTION: Sets the wrap mode for the bullet, which determines if the game object should wrap around the screen edges. This is useful for creating looping game areas.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bullet.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbullet.setWrapMode(wrap, padding);\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Scenario Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the CSV Scenario plugin in the game configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvscenario.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport CsvScenarioPlugin from 'phaser3-rex-plugins/plugins/csvscenario-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCsvScenario',\n            plugin: CsvScenarioPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Game Setup\nDESCRIPTION: Shows how to configure the Easemove plugin in the game configuration when importing from npm\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/easemove.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport EaseMovePlugin from 'phaser3-rex-plugins/plugins/easemove-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexEaseMove',\n            plugin: EaseMovePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Collision Category in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current collision category of a physics body. Collision categories determine what other bodies this body can collide with.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nvar collisionCategory = gameObject.body.collisionCategory;\n```\n\n----------------------------------------\n\nTITLE: Applying FishEye Effect with Imported Plugin\nDESCRIPTION: Applies the FishEye effect to a game object or camera using the imported plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexFishEyePipeline').add(gameObject, config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexFishEyePipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Choice Dialog Object\nDESCRIPTION: Creates a ConfirmDialog instance as a Choice dialog game object with configurable viewport positioning and dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/choice-dialog-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\nCHOICE\n  id=NAME\n  width=0\n  height=0\n  vpx=0.5\n  vpy=0.5\n  vpw=\n  vph=\n```\n\n----------------------------------------\n\nTITLE: Setting Cursor from Game Object Input in Phaser 3\nDESCRIPTION: Changes the current cursor to match the cursor style of a specific game object's input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursor.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.setCursor(gameObject.input);\n```\n\n----------------------------------------\n\nTITLE: Checking if Panning is Active in Phaser 3\nDESCRIPTION: Checks if panning is currently active (returns true if the object is being panned).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPanning = pan.isPanning;\n```\n\n----------------------------------------\n\nTITLE: Initializing Game Objects in Custom Narrative Script\nDESCRIPTION: Creates the initial game objects including a background, text dialog box, character sprites, and a choice UI element. Each object is given an ID and configured with basic properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/command-executor/command-executor.md#2025-04-21_snippet_0\n\nLANGUAGE: custom\nCODE:\n```\n// Create gameobjects\n\nBG\n  id=Background\n  key=classroom\n\nTEXTBOX\n  id=Dialog\n  width=500\n  height=120\n\nSPRITE\n  id=CharacterA\n  key=characters\n  name=A\n  expression=smile\n\nSPRITE\n  id=CharacterB\n  key=characters\n  name=B\n  expression=smile\n\nSPRITE\n  id=CharacterC\n  key=characters\n  name=C\n  expression=smile\n\nCHOICE\n  id=Choice\n  width=500\n```\n\n----------------------------------------\n\nTITLE: Getting Rectangle Iteration Value\nDESCRIPTION: Retrieves the current iteration value which determines the number of interpolation points in each round corner. Default value is 4.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-roundrectangle.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar iteration = rect.iteration;\n```\n\n----------------------------------------\n\nTITLE: Setting Scan Line Parameters through Direct Property Assignment\nDESCRIPTION: Sets new scan line strength and width parameter values for a CRT pipeline instance using direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.scanLineStrength = scanLineStrength;\npipelineInstance.scanLineWidth = scanLineWidth;\n```\n\n----------------------------------------\n\nTITLE: Accessing Cursor Key States\nDESCRIPTION: Shows how to access the state of cursor keys using either createCursorKeys() method or direct properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursoratbounds.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar cursorKeys = cursorAtBound.createCursorKeys();\n\nvar leftKeyDown = cursorKeys.left.isDown;\nvar rightKeyDown = cursorKeys.right.isDown;\nvar upKeyDown = cursorKeys.up.isDown;\nvar downKeyDown = cursorKeys.down.isDown;\n```\n\n----------------------------------------\n\nTITLE: Managing ShatterImage Tint Color\nDESCRIPTION: Demonstrates how to get and set the tint color of the entire ShatterImage object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = image.tint;\n\nimage.tint = color;\n// or\nimage.setTint(color);\n```\n\n----------------------------------------\n\nTITLE: Removing Obstacles from Raycaster\nDESCRIPTION: Shows how to remove specific game objects from the raycaster's obstacle list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nraycaster.removeObstacle(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pop-Up Animation for Height Only in Phaser 3\nDESCRIPTION: Animates a game object by scaling up its height from 0 to its current scale over a specified duration, while keeping the width constant. Can be used with either callbacks or Promises.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScaleY(scaleY)\n    .popUp(duration, 'y');\n\n// gameObject.popUp(duration, 'y', ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScaleY(scaleY)\n    .popUpPromise(duration, 'y')\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Using Hand Cursor for Interactive Game Object in Phaser 3\nDESCRIPTION: Sets the cursor to a hand (pointer) style when hovering over an interactive game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursor.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setInteractive({\n    useHandCursor: true\n});\n```\n\n----------------------------------------\n\nTITLE: Removing GrayScale Effect from Camera\nDESCRIPTION: Removes the grayscale post-processing effect from a camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexGrayScalePipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Adding Perspective Image from JSON in Phaser 3\nDESCRIPTION: Creates a perspective image instance from a JSON configuration in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-sprite.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar perspectiveimage = scene.make.rexPerspectiveImage({\n    x: 0,\n    y: 0,\n    \n    key: null,\n    frame: null,\n\n    // width: undefined,\n    // height: undefined,\n    // hideCCW: false,\n    // gridWidth: 32,\n    // girdHeight: 32,\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Value from DropDownList\nDESCRIPTION: Gets the current selected value from the dropdown list component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = dropDownList.value;\n```\n\n----------------------------------------\n\nTITLE: Getting Option from Quest Task (JavaScript)\nDESCRIPTION: Shows how to retrieve a specific option from a question in the Quest Task. The question can be specified by object, key, or left undefined for the current question.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar option = quest.getOption(question, optionKey);\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring UI Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to import and configure the UI plugin in the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Emitting Button Click Event in FixWidthButtons\nDESCRIPTION: Programmatically triggers a button click event for a specific button in the FixWidthButtons component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthbuttons.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.emitButtonClick(index);\n```\n\n----------------------------------------\n\nTITLE: Triggering Layout of Label Elements in Phaser 3\nDESCRIPTION: Code to arrange the position of all elements within the label container.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.layout();\n```\n\n----------------------------------------\n\nTITLE: Handling Game Object Swipe Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for swipe gestures on a game object (chess piece) on the board. The callback receives the swipe behavior object (which includes swipe direction) and the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('gameobjectswipe', function(swipe, gameObject) {\n    // var direction = swipe.direction;\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('board.swipe', function(swipe) {\n    // var direction = swipe.direction;\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Circle Stroke Style in Phaser 3\nDESCRIPTION: Removes the stroke style from a circle game object, eliminating the outline.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.setStrokeStyle();\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Alias for an ID\nDESCRIPTION: JavaScript code for adding a specific alias for an ID to the FireStore database.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nidAlias.add(id, alias)\n    .then(function(result) { \n        // var alias = result.alias;\n        // var id = result.id;\n    })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Removing Horrifi Effect from Camera\nDESCRIPTION: Removes the Horrifi post-processing effect from a camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexHorrifiPipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Adding Items to UniqueItemList (JavaScript)\nDESCRIPTION: Shows various methods for adding items to a UniqueItemList, including adding to the beginning or end, at a specific index, or multiple items at once.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlistA.add(item);\nlistA.addLast(item);\nlistA.addFirst(item);\nlistA.add(item, index);\nlistA.add(item, iindex, true);\nlistA.addMultiple(items);\nvar newList = listA.clone();\n// listA.clone(listB)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Progress for WarpPostFX in Phaser 3\nDESCRIPTION: These snippets demonstrate how to get and set the progress value for the WarpPostFX effect in Phaser 3. The progress value ranges from 0 to 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp-transition.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar progress = pipelineInstance.progress;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setProgress(value);  // value: 0~1\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.progress = value;  // value: 0~1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page by Key or Index\nDESCRIPTION: Gets a specific page game object using either a key string or numeric index\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tabPages.getPage(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tabPages.getPage(index);\n```\n\n----------------------------------------\n\nTITLE: Creating Hexagon Shapes\nDESCRIPTION: Shows different ways to create hexagon shapes including object configuration method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-hexagon.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar hexagon = scene.plugins.get('rexHexagon').add({\n    x: 0,\n    y: 0,\n    size: 20,\n    orientationType: 0     // 0|'flat'|'vertical'|1|'pointy'|'horizontal'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the rex plugins package from npm which contains the Cover plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling ScrollBar in JavaScript\nDESCRIPTION: Methods to get and set the enabled state of the ScrollBar component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = scrollBar.enable;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.setEanble(enable);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBar.enable = enable;\n```\n\n----------------------------------------\n\nTITLE: Updating Obstacle Shape in Raycaster\nDESCRIPTION: Shows how to update the collision shape of an existing obstacle, optionally with a custom polygon.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nraycaster.updateObstacle(gameObject);\n// raycaster.updateObstacle(gameObject, polygon);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tilemap Hierarchy with Mermaid\nDESCRIPTION: A diagram showing the relationship between tilemap components including layers and tiles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n\ntilemap --> layerA[\"layerA<br>(Game object)\"]\ntilemap --> layerB\n\nlayerA --> tilesA[\"tiles<br>(layer.data[x][y])\"]\nlayerB --> tilesB[\"tiles\"]\n```\n\n----------------------------------------\n\nTITLE: Setting From-Texture Edge Parameters by Properties in Phaser 3 Dissolve Effect\nDESCRIPTION: Sets the edge start and width parameters for the from-texture (source texture) using direct property assignment. These control the dissolving edge appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.fromEdgeStart = edgeStart;\npipelineInstance.fromEdgeWidth = edgeWidth;\n```\n\n----------------------------------------\n\nTITLE: Navigating Focus Between Game Objects\nDESCRIPTION: Methods for navigating focus between game objects using next, previous, nextRow, and previousRow.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.next();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.previous();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.nextRow();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.previousRow();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.first();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.last();\n```\n\n----------------------------------------\n\nTITLE: Adding Field of View Object in Phaser 3\nDESCRIPTION: Shows how to add a Field of View object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar fieldOfView = scene.rexBoard.add.fieldOfView(chess, config);\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Setting Options in a DropDownList\nDESCRIPTION: Shows how to set options directly as a property instead of using the setOptions method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.options = options;\n```\n\n----------------------------------------\n\nTITLE: Creating an Achievements Instance in Phaser 3\nDESCRIPTION: Shows how to create an instance of the Achievements plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/achievements.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar achievements = scene.plugins.get('rexAchievements').add();\n```\n\n----------------------------------------\n\nTITLE: Getting Drag Threshold in Phaser 3 Press Input\nDESCRIPTION: Retrieves the current drag threshold setting from the press input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar dragThreshold = press.dragThreshold;\n```\n\n----------------------------------------\n\nTITLE: Creating Quad Grid Instance in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to create a Quad Grid instance within a Phaser 3 scene using the rexBoard plugin. It includes configuration options for position, cell size, grid type, and direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-quadgrid.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar grid = scene.rexBoard.add.quadGrid({\n    x: 0,\n    y: 0,\n    cellWidth: 0,\n    cellHeight: 0,\n    type: 0,\n    // dir: 4\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of a Custom Container in Phaser 3\nDESCRIPTION: Demonstrates how to create an instance of a custom Container class in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/container.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar container = new MyContainer(scene, x, y, children);\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Radius in Phaser 3\nDESCRIPTION: Sets the radius of a circle game object. Can be done using the setRadius method or by directly setting the radius property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.setRadius(radius);\n```\n\n----------------------------------------\n\nTITLE: Handling User List Events\nDESCRIPTION: Registers event listeners for user join, leave, list update, and name change events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nroom.on('userlist.join', user);\nroom.on('userlist.leave', user);\nroom.on('userlist.update', users);\nroom.on('userlist.changename', userID, userName, prevUserName);\n```\n\n----------------------------------------\n\nTITLE: Configuring Bracket Parser Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Bracket Parser plugin in the global plugins section of a Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BracketParserPlugin from 'phaser3-rex-plugins/plugins/bracketparser-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexBracketParser',\n            plugin: BracketParserPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Stopping Music Instances in Phaser 3\nDESCRIPTION: Shows how to stop music instances in a Phaser 3 scene, either by key or stopping all instances. Returns the number of stopped instances when stopping by key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar stopped = scene.sound.stopByKey(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.stopAll();\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install Rex plugins from npm for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Handling Value Change Events\nDESCRIPTION: Code to listen for value change events from the circular progress component and execute a callback when they occur.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.on('valuechange', function(newValue, oldValue, circularProgress){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Using AwayTime as a Class Instance in Phaser3\nDESCRIPTION: Creates a new instance of the AwayTime class and accesses its awayTime property to get the elapsed time since the application was last closed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar awayTime = (new AwayTime()).awayTime;\n```\n\n----------------------------------------\n\nTITLE: Setting Random Generator Seed in Phaser3\nDESCRIPTION: Methods to set the random generator seed, either through game configuration or directly on the generator instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/random-data-generator.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    seed: seed,\n    // ...\n}\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrnd.init(seed);\n```\n\n----------------------------------------\n\nTITLE: Creating a Rectangle in Phaser3\nDESCRIPTION: Creates a rectangle geometry object with specified position, width, and height for use with rectangular placement actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Phaser.Geom.Rectangle(x, y, width, height);\nPhaser.Actions.PlaceOnRectangle(gameObjects, rect, shift;\n```\n\n----------------------------------------\n\nTITLE: Displaying the Last Page of Text\nDESCRIPTION: Stops typing and immediately shows all text on the last page. Triggers 'type', 'pageend', and 'complete' events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.showLastPage();\n```\n\n----------------------------------------\n\nTITLE: Alternative Configuration for Button Input in Phaser 3 Tweaker\nDESCRIPTION: An alternative approach to create a button group input using an object configuration. This method explicitly specifies binding target and key with multiple button options for selection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput({\n    bindingTarget: object,\n    bindingKey: key,\n    view: 'buttons',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    options: [\n        {text: text0, value: value0},\n        {text: text1, value: value1},\n        // ...\n    ],\n\n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing TransitionImagePack Class Directly in Phaser 3\nDESCRIPTION: Demonstrates how to import the TransitionImagePack class directly and create an instance without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TransitionImagePack from 'phaser3-rex-plugins/templates/transitionimagepack/TransitionImagePack.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new TransitionImagePack(scene, x, y, texture, frame, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin via Minified File\nDESCRIPTION: Loads the circle mask image plugin in the preload stage and shows how to add a masked image object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/circlemaskimage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcirclemaskimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcirclemaskimageplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexCircleMaskImage(x, y, key, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Minified Plugin\nDESCRIPTION: Code to load the minified plugin file in Phaser3 preload stage and add scroller behavior to a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scroller.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexscrollerplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexscrollerplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar scroller = scene.plugins.get('rexscrollerplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Grid Alpha in Phaser 3\nDESCRIPTION: Shows how to get and set the alpha value of the grid object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-grid.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = grid.alpha;\ngrid.setAlpha(alpha);\n// grid.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Layouting Children in FixWidthSizer for Phaser 3\nDESCRIPTION: Shows how to trigger the layout of all children in a FixWidthSizer object in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.layout();\n```\n\n----------------------------------------\n\nTITLE: Loading Fade Plugin via Minified File\nDESCRIPTION: Loads the fade plugin using its minified version during the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadeoutdestroy.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfadeplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfadeplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Debugging Field of View in Phaser 3\nDESCRIPTION: Shows how to clear debug graphics and set debug line colors for the Field of View object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfieldOfView.clearDebugGraphics();\nfieldOfView.setDebugLineColor(visibleLineColor, invisibleLineColor);\n```\n\n----------------------------------------\n\nTITLE: Getting Point Light Attenuation\nDESCRIPTION: Shows how to retrieve the current attenuation value of a point light.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar attenuation = pointLight.attenuation;\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Behavior to Text Game Object\nDESCRIPTION: Code showing how to add translation behavior to a text game object using the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar translation = scene.plugins.get('rextexttranslationplugin').add(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Calculating Triangle Circumcenter in Phaser 3\nDESCRIPTION: Calculates the circumcenter (center of the circle that passes through all vertices) of a triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Geom.Triangle.CircumCenter(triangle);  // out: {x,y}\n// var out = Phaser.Geom.Triangle.CircumCenter(triangle, out);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm (Shell)\nDESCRIPTION: Command to install the Rex plugins package, which includes the ContainerSkew plugin, via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-skew.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Easing Number Bar Value in JavaScript\nDESCRIPTION: Shows methods for easing the number bar value, including setting the ease duration and function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.easeValueTo(value, min, max);  // value: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.easeValueTo(value);  // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.stopEaseValue();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.setEaseValueDuration(duration);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.setEaseValueFunction(ease);\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Plugin via NPM\nDESCRIPTION: Shows how to import and use the plugin after installing it through npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar modal = scene.plugins.get('rexModal').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Board Component Class\nDESCRIPTION: Imports the CreateBoardFromTilemap class directly from the Rex plugins package for use without the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-tilemap.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CreateBoardFromTilemap } from 'phaser3-rex-plugins/plugins/board-components.js';\n```\n\n----------------------------------------\n\nTITLE: Closing a Modal via Plugin Method\nDESCRIPTION: Code to programmatically close a modal using the plugin's close method, with an optional parameter to pass closing event data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexModal').close(gameObject);\n// scene.plugins.get('rexModal').close(gameObject, closeEventData);\n```\n\n----------------------------------------\n\nTITLE: Advanced Value Retrieval - Function\nDESCRIPTION: Demonstrates retrieving a value from a function property using GetAdvancedValue.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/config-data.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar source = {x: function(key){return 4;}};\nvar value = Phaser.Utils.Objects.GetAdvancedValue(source, 'x');\n```\n\n----------------------------------------\n\nTITLE: Handling Scale Complete Events\nDESCRIPTION: Sets up an event listener for when the scaling animation completes or is stopped.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nscale.on('complete', function(gameObject, scale){\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom RoundRectangleProgress Instance\nDESCRIPTION: Creates an instance of a custom RoundRectangleProgress subclass.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar roundRectangleProgress = new MyRoundRectangleProgress(scene, x, y, width, height, radius, barColor, value, config);\n```\n\n----------------------------------------\n\nTITLE: Adding UniqueItemList Object with Global Plugin (JavaScript)\nDESCRIPTION: Creates a new UniqueItemList instance after configuring the plugin globally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar listA = scene.plugins.get('rexUniqueItemList').add(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sound Fade Plugin in Game Config\nDESCRIPTION: Configuration code to include the Sound Fade plugin in the game initialization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadevolume.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundFadePlugin from 'phaser3-rex-plugins/plugins/soundfade-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexSoundFade',\n            plugin: SoundFadePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Using Grid Cut Image Plugin in Phaser 3 After Global Configuration\nDESCRIPTION: Demonstrates how to use the Grid Cut Image plugin after it has been configured globally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridcutimage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar images = scene.plugins.get('rexGridCutImage').gridCut(gameObjects, columns, rows, config);\n```\n\n----------------------------------------\n\nTITLE: Accessing Icon Background Element in imageInputLabel (JavaScript)\nDESCRIPTION: Retrieves the icon background game object from an imageInputLabel component. This allows for customization of the background behind the icon element.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar iconBackground = imageInputLabel.getElement('iconBackground');\n```\n\n----------------------------------------\n\nTITLE: Getting Press Enable Status in Phaser 3\nDESCRIPTION: Retrieves the current enabled state of the press input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = press.enable;  // enable: true, or false\n```\n\n----------------------------------------\n\nTITLE: Opening a text editor manually\nDESCRIPTION: Manually opening a text editor with configuration options and an optional close callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\neditor.open(config);\n// editor.open(config, onClose);\n```\n\n----------------------------------------\n\nTITLE: Getting GrayScale Intensity Value\nDESCRIPTION: Retrieves the current intensity value of the grayscale effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar intensity = pipelineInstance.intensity;\n```\n\n----------------------------------------\n\nTITLE: Setting Data in Local Memory\nDESCRIPTION: Command to set a value for a specific key in the event sheet manager's local memory.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\nsetData\n  key=value\n```\n\n----------------------------------------\n\nTITLE: Setting Brightness Property Directly\nDESCRIPTION: Sets the brightness value directly on a cross-stitching pipeline instance, with options for incremental changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.brightness = brightness;\n// pipelineInstance.brightness += value;\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Collection by Name\nDESCRIPTION: Get a reference to an existing collection in the database by its name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar collection = db.getCollection(name);\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Behavior Instance with Class Import\nDESCRIPTION: Code showing how to create a translation behavior instance using the class import approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar translation = new TextTranslationBehavior(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Text Object with Global Plugin\nDESCRIPTION: Creates a Tag Text object after configuring the plugin globally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.rexTagText(x, y, content, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Ellipse Position via Edge Properties in Phaser 3\nDESCRIPTION: Updates the position of an ellipse using its edge properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.left = 0;       // ellipse.x\nellipse.top = 0;        // ellipse.y\n// ellipse.right = 0;   // ellipse.x\n// ellipse.bottom = 0;  // ellipse.y\n```\n\n----------------------------------------\n\nTITLE: Removing Cross-Stitching Effect from Camera\nDESCRIPTION: Removes the cross-stitching post-processing effect from a camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexCrossStitchingPipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Getting Random Alias for an ID\nDESCRIPTION: JavaScript code for getting or registering a random alias for an ID, with options for configuring the alias generation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nidAlias.getRandomAlias(id, {\n    digits: 10,\n    candidates: '0123456789',\n    retry: 1000\n})\n    .then(function(result) { \n        // var alias = result.alias;\n        // var id = result.id;\n    })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Mapping Documents to a New Result Set\nDESCRIPTION: Transform documents in a result set using a mapping function without modifying the original collection. Returns a new result set.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.chain().find({}).map(\n    function(doc) {\n        // ...\n        return doc\n    })\n    .data();\n```\n\n----------------------------------------\n\nTITLE: Pre-While Loop Message in Phaser3 Rex Plugin\nDESCRIPTION: Prints a message before entering a while loop and resets the loop counter to 3. This setup prepares for the conditional loop that follows.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/repeat/repeat.md#2025-04-21_snippet_3\n\nLANGUAGE: pseudo-code\nCODE:\n```\nprint\\\n  text=Before while\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDK Scripts in HTML\nDESCRIPTION: Adds the required Firebase core and Database SDK scripts to the HTML body before using any Firebase services.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/10.13/firebase-app-compat.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/10.13/firebase-database-compat.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Variable-based Repetition Loop Output in Phaser3 Rex Plugin\nDESCRIPTION: Prints a message during a loop that repeats based on the 'loopCount' variable value. The REPEAT directive uses a variable instead of a literal number.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/repeat/repeat.md#2025-04-21_snippet_2\n\nLANGUAGE: pseudo-code\nCODE:\n```\nprint\\\n  text=repeat 3 - 1\n```\n\n----------------------------------------\n\nTITLE: Adding LayerManager After Importing Plugin\nDESCRIPTION: Code snippet showing how to add a LayerManager instance after importing the plugin via NPM and registering it in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar layerManager = scene.plugins.get('rexLayerManager').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Incrementing Data in Local Memory\nDESCRIPTION: Commands to increase the value of a key in the event sheet manager's local memory. Two alternative methods are provided.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\nincData\n  key=value\n```\n\nLANGUAGE: markdown\nCODE:\n```\nsetData\n  key=#(key+value)\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring UI Plugin via NPM in Phaser 3\nDESCRIPTION: Installs the plugin from NPM and configures it in the game configuration. This approach allows for proper integration with module bundlers like Webpack.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar buttons = scene.rexUI.add.buttons(config);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom Folder Class\nDESCRIPTION: Shows how to create an instance of a custom folder class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar folder = new MyFolder(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Looped Timer in Phaser 3\nDESCRIPTION: Creates a timer that executes a callback repeatedly at a specified interval. The timer continues indefinitely until manually stopped.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar timer = scene.time.addEvent({\n    delay: 500,                // ms\n    callback: callback,\n    //args: [],\n    callbackScope: thisArg,\n    loop: true\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying a Keys Hub Instance\nDESCRIPTION: This code shows how to destroy a Keys Hub instance when it's no longer needed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyshub.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHub.destroy();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Mask Game Object in Phaser 3 Transition\nDESCRIPTION: Assigns a default mask game object to be used in the transition. Passing true creates a default mask internally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setMaskGameObject(true);\n```\n\n----------------------------------------\n\nTITLE: Importing ShatterImage Plugin via NPM in Game Configuration\nDESCRIPTION: Shows how to install and import the ShatterImage plugin from npm and configure it in the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ShatterImagePlugin from 'phaser3-rex-plugins/plugins/shatterimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexShatterImagePlugin',\n            plugin: ShatterImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Removing elements from a Phaser 3 Set\nDESCRIPTION: Demonstrates removing a specific element or clearing all elements from a Set.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-set.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nset.delete(element);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nset.clear();\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin via Minified File in Phaser3\nDESCRIPTION: Demonstrates how to load the restorable data plugin using its minified version in the preload stage and create a data instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/restorabledata.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexrestorabledataplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexrestorabledataplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = scene.plugins.get('rexrestorabledataplugin').add(parent);\n```\n\n----------------------------------------\n\nTITLE: Importing PerspectiveCard Class in Phaser 3\nDESCRIPTION: Shows how to import the PerspectiveCard class directly and add it to a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-perspectivecard.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PerspectiveCard } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n\nvar card = new PerspectiveCard(scene, config);\nscene.add.existing(card);\n```\n\n----------------------------------------\n\nTITLE: Creating Data Manager Instance with Configuration\nDESCRIPTION: Initializing a data manager instance with custom configuration options including name, load behavior, and default values\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage-data.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = scene.plugins.get('rexLocalStorageData').add({\n    // name: '',\n    // load: true,\n    // default: undefined,\n    // reset: false\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Horrifi Effect Instance from Game Object\nDESCRIPTION: Retrieves the Horrifi pipeline instance associated with a game object. Returns an array of instances, typically with just one element.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexHorrifiPipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexHorrifiPipeline').get(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Clearing All Checkbox States in Dialog - JavaScript\nDESCRIPTION: Method to clear the states of all checkbox buttons in choices to false.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.clearChoicesButtonStates();\n```\n\n----------------------------------------\n\nTITLE: Applying Dissolve Effect to a Game Object in Phaser 3\nDESCRIPTION: Applies the dissolve effect to a game object after loading the plugin as a minified file. This creates a pipeline instance that can be used to control the effect properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexdissolvepipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Touch Event Stop Plugin in Game Configuration\nDESCRIPTION: Code to import and configure the Touch Event Stop plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/toucheventstop.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport TouchEventStopPlugin from 'phaser3-rex-plugins/plugins/toucheventstop-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTouchEventStop',\n            plugin: TouchEventStopPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Transition Duration in Phaser 3\nDESCRIPTION: Retrieves the current duration setting for the transition animation in milliseconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar duration = image.duration;\n```\n\n----------------------------------------\n\nTITLE: Handling Wait Keydown Events in Phaser3 Tag Player\nDESCRIPTION: Event handler for wait.keydown events in the Tag Player system, which fires when a [wait=keyName] tag is encountered. The keyName parameter contains the name of the pressed key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('wait.keydown', function(keyName) {\n})\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Objects in Luxon\nDESCRIPTION: Shows different ways to create DateTime objects using local time or ISO format strings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/luxon.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dt = DateTime.local(2017, 5, 15, 8, 30);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt = DateTime.fromISO('2017-05-15');\n// var dt = DateTime.fromISO('2017-05-15T17:36');\n// var dt = DateTime.fromISO('2017-W33-4');\n// var dt = DateTime.fromISO('2017-W33-4T04:45:32.343');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst now = DateTime.now();\n// const now = DateTime.local();\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox to Read-Only\nDESCRIPTION: Sets the checkbox to read-only mode, disabling user interaction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setReadOnly();\n// checkbox.setReadOnly(true);\n```\n\n----------------------------------------\n\nTITLE: Loading Rex Gesture Plugin via Minify File in Phaser3\nDESCRIPTION: Code snippet showing how to load the Rex Gesture Plugin via minify file in the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexgesturesplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgesturesplugin.min.js', 'rexGestures', 'rexGestures');\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the Phaser 3 Rex Plugins package from NPM, which includes the Glow Filter Pipeline.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Controlling Gravity Effects on Matter.js Physics Objects\nDESCRIPTION: Method to make a physics object ignore the world's gravity, useful for floating or space-based objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setIgnoreGravity(ignore);\n```\n\n----------------------------------------\n\nTITLE: Creating Monopoly Instance with Configuration\nDESCRIPTION: Creates a new instance of the Monopoly behavior with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-monopoly.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar monopoly = scene.rexBoard.add.monopoly(chess, {\n    face: 0,\n\n    // ** cost **\n    // pathTileZ: 0,\n    // cost: 1,   // constant cost\n    // costCallback: undefined,\n    // costCallbackScope: undefined\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Triangle-Circle Intersection in Phaser 3\nDESCRIPTION: Determines whether a triangle intersects with a circle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.TriangleToCircle(triangle, circle);\n```\n\n----------------------------------------\n\nTITLE: Closing a Modal via Event Emission\nDESCRIPTION: Code to close a modal by emitting a request close event on the game object, with an optional parameter to pass closing event data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.emit('modal.requestClose');\n// gameObject.emit('modal.requestClose', closeEventData);\n```\n\n----------------------------------------\n\nTITLE: Importing Dropdown Plugin Class\nDESCRIPTION: Demonstrates importing the DropDownBehavior class and creating an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dropdown.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport DropDownBehavior from 'phaser3-rex-plugins/plugins/dropdown.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropDown = new DropDownBehavior(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Rex Spinner Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the Rex Spinner plugin in the Phaser 3 game configuration. This allows the plugin to be available in all scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-spinner.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport SpinnerPlugin from \"phaser3-rex-plugins/templates/spinner/spinner-plugin.js\";\nvar config = {\n  // ...\n  plugins: {\n    scene: [\n      {\n        key: \"rexSpinner\",\n        plugin: SpinnerPlugin,\n        mapping: \"rexSpinner\",\n      },\n      // ...\n    ],\n  },\n  // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Split Position\nDESCRIPTION: Sets or gets the split position of the Split Pipeline effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar splitX = pipelineInstance.splitX;\nvar splitY = pipelineInstance.splitY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.splitX = splitX;\npipelineInstance.splitY = splitY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setSplit(x, y);\n```\n\n----------------------------------------\n\nTITLE: Configuring Glow Filter Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Sets up the glow filter plugin in the global plugins configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport GlowFilterPipelinePlugin from 'phaser3-rex-plugins/plugins/glowfilter2pipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexGlowFilterPipeline',\n            plugin: GlowFilterPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Bitmap Font\nDESCRIPTION: Load bitmap font from texture and XML configuration files into a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.bitmapFont(key, textureURL, xmlURL);\n```\n\n----------------------------------------\n\nTITLE: Playing Animations in Phaser 3\nDESCRIPTION: Demonstrates different methods of playing animations in Phaser 3, including regular play, staggered play, pausing, and resuming all animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/animation.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.anims.play(key, children);\n\nscene.anims.staggerPlay(key, children, stagger, staggerFirst);\n\nscene.anims.pauseAll();\n\nscene.anims.resumeAll();\n```\n\n----------------------------------------\n\nTITLE: Compressing String with LZString\nDESCRIPTION: Shows how to compress a string using the LZString instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lzstring.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar compressionResult = lzstring.compress(src);\n```\n\n----------------------------------------\n\nTITLE: Getting Tile Cost in Phaser 3 Pathfinder\nDESCRIPTION: Shows how to get the cost of a path from the chess to a tile or the cost of a specific tile using the Pathfinder.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-pathfinder.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar pathCost = pathFinder.tileXYToCost(tileX, tileY, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileCost = pathFinder.tileXYToCost(tileX, tileY, false);\n```\n\n----------------------------------------\n\nTITLE: Deleting File from Firebase Storage in JavaScript\nDESCRIPTION: Delete a file from Firebase Storage using its reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-storage.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileRef = storageRef.child('path/to/filename');\nfileRef.delete()\n    .then(function() {})\n    .catch(function(error) {});\n```\n\n----------------------------------------\n\nTITLE: Listening for Button Over Events in DropDownList\nDESCRIPTION: Sets up an event listener for when the pointer moves over a button in the dropdown list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.on('button.over', function(dropDownList, listPanel, button, index, pointer, event) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: NPM Installation of Rex Plugins\nDESCRIPTION: Command to install Phaser 3 Rex plugins from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing Question Manager Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to import the question manager plugin in the game configuration and add a question manager object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport QuestPlugin from 'phaser3-rex-plugins/plugins/quest-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexQuest',\n            plugin: QuestPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar questionManager = scene.plugins.get('rexQuest').add(config);\n```\n\n----------------------------------------\n\nTITLE: Generating Random Angle in Degrees in Phaser 3\nDESCRIPTION: Generates a random angle in degrees within the range of -180 to 180. Provides a more intuitive degree value for random angle generation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar angle = Phaser.Math.Angle.RandomDegrees();\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Value\nDESCRIPTION: Sets the value of the toggle-switch with optional animation duration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setValue(value);\n// toggleSwitch.setValue(value, duration);\n```\n\n----------------------------------------\n\nTITLE: RetroFont TEXT_SET4 Definition\nDESCRIPTION: Alternative arrangement of uppercase letters, numbers and space\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789'\n```\n\n----------------------------------------\n\nTITLE: Applying GrayScale Effect to Game Object\nDESCRIPTION: Applies the grayscale post-processing effect to a Phaser game object using the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexgrayscalepipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Game Objects from a Layer in Phaser 3\nDESCRIPTION: Demonstrates various methods to get child game objects from a Layer, including by index, name, property, or randomly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = layer.getAt(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = layer.getByName(name);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = layer.getFirst(property, value);\n// var gameObject = layer.getFirst(property, value, startIndex, endIndex);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = layer.getRandom();\n// var gameObject = layer.getRandom(startIndex, length);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObjects = layer.getAll();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar index = layer.getIndex(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar count = layer.count(property, value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar count = layer.length;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasChild = layer.exists(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Installing rexUI Plugin via NPM for Phaser 3\nDESCRIPTION: Command to install the rexUI plugin from npm package registry.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletextbox.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Incrementing X and Y Positions of Game Objects in Phaser3\nDESCRIPTION: Increments both x and y positions of game objects by specified values, with optional step values for each axis.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.IncXY(gameObjects, x, y, stepX, stepY, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Importing Trees Class from Rex UI Components\nDESCRIPTION: Imports the Trees class directly from the UI components module when using the NPM package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Trees } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the Rex plugins package from npm, which includes the board plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-tilemap.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Terminal command to install Phaser 3 Rex plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/line.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating a Tilemap from CSV Data\nDESCRIPTION: Method for creating a tilemap from CSV file data, supporting only orthogonal maps.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar map = this.make.tilemap({\n    key: 'map',     // csv file\n    tileWidth: 32,\n    tileHeight: 32,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM for Phaser 3\nDESCRIPTION: Demonstrates the NPM command to install the Rex Plugins package for Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pinch.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Bounds Event Handling\nDESCRIPTION: Event listeners for handling different bound hitting scenarios in the game object\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bounds.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbounds.on('hitany', function(gameObject, bounds) {\n\n})\n\nbounds.on('hitleft', function(gameObject, bounds) {\n\n})\n\nbounds.on('hitright', function(gameObject, bounds) {\n\n})\n\nbounds.on('hittop', function(gameObject, bounds) {\n\n})\n\nbounds.on('hitbottom', function(gameObject, bounds) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Collision Mask in Phaser 3 Arcade Physics\nDESCRIPTION: Sets which categories of bodies this physics body can collide with.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setCollidesWith(categories);\n```\n\n----------------------------------------\n\nTITLE: Accessing No Wait Event Property\nDESCRIPTION: Demonstrates how to access the noWaitEvent property of a Wait Events instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar noWaitEvent = waitEvents.noWaitEvent;\n```\n\n----------------------------------------\n\nTITLE: Handling Initial Gamepad Button Press\nDESCRIPTION: Event handler for detecting the first button press on a gamepad.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gamepad.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.gamepad.once('down', function (gamepad, button, value) {\n})\n```\n\n----------------------------------------\n\nTITLE: Changing Origin in Phaser 3 Sizer Plugin\nDESCRIPTION: Method for changing the origin of a sizer object, which also resets all local states of its children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.changeOrigin(originX, originY);\n```\n\n----------------------------------------\n\nTITLE: Loading Text Translation Plugin via Minified File in Scene Config\nDESCRIPTION: Code showing how to load the text translation plugin using the minified file in a Phaser 3 scene configuration, mapping it to scene.translation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Demo extends Phaser.Scene {\n    constructor() {\n        super({\n            key: 'Scnee',\n            pack: {\n                files: [{\n                    type: 'plugin',\n                    key: 'rextexttranslationplugin',\n                    url: 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextexttranslationplugin.min.js',\n                    start: true,\n                    mapping: 'translation'  // Add text-translation plugin to `scene.translation`\n                }]\n            },\n            // ...\n        });\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase SDK Scripts - HTML\nDESCRIPTION: HTML script tags for loading Firebase App core and Database SDK.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-broadcast.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/10.13/firebase-app-compat.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/10.13/firebase-database-compat.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Handling Pause Event in Phaser\nDESCRIPTION: Registers an event handler for when the game is paused, which typically occurs when the window becomes invisible.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ngame.events.on('pause', function() {});\n```\n\n----------------------------------------\n\nTITLE: Calculating Chebyshev Distance in Phaser 3\nDESCRIPTION: Method to calculate Chebyshev distance, which represents the maximum of horizontal and vertical distances between two points\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/distance.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar d = Phaser.Math.Distance.Chebyshev(x1, y1, x2, y2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Jigsaw Image Cutting Plugin in Phaser 3 Game\nDESCRIPTION: Configures the jigsaw image cutting plugin in the global plugins section of a Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cutjigsawimage.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport CutJigsawImagePlugin from 'phaser3-rex-plugins/plugins/cutjigsawimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCutJigsawImage',\n            plugin: CutJigsawImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Drag-Rotate Plugin in Phaser 3 Preload Stage\nDESCRIPTION: Loads the minified version of the drag-rotate plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dragrotate.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexdragrotateplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexdragrotateplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Changing a User's Name in the Online User List\nDESCRIPTION: JavaScript code showing how to update a user's display name in the online user list with promise handling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.changeUserName(newUserName)\n// .then(function() { })\n// .catch(function() { })\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in Game Setup\nDESCRIPTION: Configuration code to integrate the UI plugin into the Phaser game instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridbuttons.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        }]\n    }\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Circle Display Size in Phaser 3\nDESCRIPTION: Retrieves the current display width and height of a circle game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = circle.displayWidth;\nvar height = circle.displayHeight;\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling TextAreaInput Scrolling in JavaScript\nDESCRIPTION: These snippets show how to enable or disable scrolling for the TextAreaInput, including slider and scroller controls.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.setSliderEnable(enabled);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.sliderEnable = enabled;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = textAreaInput.sliderEnable;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.setScrollerEnable(enabled);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.scrollerEnable = enabled;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = textAreaInput.scrollerEnable;\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDK Scripts in HTML\nDESCRIPTION: HTML snippet showing how to add Firebase App and Firestore SDK scripts to your HTML document before using any Firebase services.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/10.13/firebase-app-compat.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/10.13/firebase-firestore-compat.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox Display Size by Property Assignment\nDESCRIPTION: Sets the display width and height of the checkbox by directly assigning to the displayWidth and displayHeight properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.displayWidth = width;\ncheckbox.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase SDK and Plugin Script\nDESCRIPTION: HTML code for including Firebase core SDK, Firestore, and rex-firebase plugin scripts.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-idalias.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/7.7.0/firebase-app.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/7.7.0/firebase-firestore.js\"></script>\n\n    <script src=\"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Recorder Instance via Plugin\nDESCRIPTION: Creates a new TCRP recorder instance after loading the plugin. This allows you to start recording time-based commands.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar recorder = scene.plugins.get('rextcrpplugin').addRecorder(scene);\n```\n\n----------------------------------------\n\nTITLE: Adding a Full Window Rectangle Object with Plugin\nDESCRIPTION: Creates a rectangle object that covers the full window with specified fill color and alpha.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = scene.add.rexFullWindowRectangle(fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Less Than or Equal\nDESCRIPTION: Find documents where a property is less than or equal to a specified value using the $lte operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$lte': value}});\n```\n\n----------------------------------------\n\nTITLE: Checking Pushable Status in Phaser 3 Arcade Physics\nDESCRIPTION: Checks whether a physics body is currently pushable.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar pushable = gameObject.body.pushable;\n```\n\n----------------------------------------\n\nTITLE: Loading Color Replace Pipeline Plugin in Phaser 3\nDESCRIPTION: Demonstrates how to load the color replace pipeline plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-colorreplace.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcolorreplacepipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcolorreplacepipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Disabling Direct Control in Phaser 3 Arcade Physics\nDESCRIPTION: Disables direct control mode for a physics body. This is the default state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setDirectControl(false);\n```\n\n----------------------------------------\n\nTITLE: Updating TextTruncator Display\nDESCRIPTION: Method to manually update the displayed text after changing configurations or content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttruncator.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntruncator.updateText();\n```\n\n----------------------------------------\n\nTITLE: Configuring TCRP Plugin in Phaser 3 Game Config\nDESCRIPTION: Demonstrates how to include the TCRP plugin in the Phaser 3 game configuration after NPM installation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport TCRPPlugin from 'phaser3-rex-plugins/plugins/arcadetcrp-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTCRP',\n            plugin: TCRPPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Board Plugin via Scene Plugin in Phaser 3\nDESCRIPTION: Loads the board plugin as a scene plugin in the preload stage and adds the move-to behavior to a chess piece.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar moveTo = scene.rexBoard.add.moveTo(chess, config);\n```\n\n----------------------------------------\n\nTITLE: Flip Animation Implementation\nDESCRIPTION: Adds flip animation to game objects by scaling width/height.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nvar flip = scene.rexUI.add.flip(gameObject, config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar flip = new RexPlugins.UI.Flip(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Text Files in Phaser 3\nDESCRIPTION: Method for loading plain text files for use in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.text(key, url);\n// scene.load.text(key, url, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Script Tag Loader Class in Phaser 3\nDESCRIPTION: This snippet shows how to import the Script Tag Loader class directly and use it to start a loading task in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scripttagloader.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScriptTagLoader from 'phaser3-rex-plugins/plugins/scripttagloader.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nScriptTagLoader.call(scene.load, url);\n// ScriptTagLoader.call(scene.load, url, availableTest);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Number Bar Elements in JavaScript\nDESCRIPTION: Demonstrates how to retrieve different elements of the number bar, such as background, icon, slider components, and text object. It also shows how to get elements by name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = numberBar.getElement(\"background\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar icon = numberBar.getElement(\"icon\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar sliderBackground = numberBar.getElement(\"slider.background\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar sliderTrack = numberBar.getElement(\"slider.track\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar sliderIndicator = numberBar.getElement(\"slider.indicator\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar sliderThumb = numberBar.getElement(\"slider.thumb\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = numberBar.getElement(\"text\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = numberBar.getElement(\"#\" + name);\n// var gameObject = numberBar.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = numberBar.getByName(\"#\" + name);\n// var gameObject = numberBar.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Configuring Perlin Plugin in Game Configuration\nDESCRIPTION: Setting up the Perlin plugin in the game's configuration file after installing via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perlin.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport PerlinPlugin from 'phaser3-rex-plugins/plugins/perlin-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPerlin',\n            plugin: PerlinPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation Angles in Radians\nDESCRIPTION: Sets the rotation angles of the perspective image in radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimage.rotationX = rotationX; // Angle in radians\nimage.rotationY = rotationY; // Angle in radians\nimage.rotationZ = rotationZ; // Angle in radians\n```\n\n----------------------------------------\n\nTITLE: Creating a NameValueLabel with the Class Import Method\nDESCRIPTION: Code showing how to create a NameValueLabel instance after importing the class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = new NameValueLabel(scene, config);\nscene.add.existing(label);\n```\n\n----------------------------------------\n\nTITLE: Loading Effect Properties Plugin\nDESCRIPTION: Load the minified plugin file in the scene's preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effect-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexeffectpropertiesplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexeffectpropertiesplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration Value Extraction in Phaser3\nDESCRIPTION: Example of using GetValue utility to extract multiple properties from a configuration object with default values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/config-data.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst GetValue = Phaser.Utils.Objects.GetValue;\nvar myMethod = function(config) {\n    var x = GetValue(config, 'x', 0);\n    var y = GetValue(config, 'y', 0);\n    var width = GetValue(config, 'width', 0);\n    var height = GetValue(config, 'height', 0);\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling CSV Scenario Events in Phaser 3\nDESCRIPTION: Demonstrates how to handle various events emitted by the CSV Scenario, such as completion, waiting, and errors.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvscenario.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscenario.on('complete', function(scope, scenario){ \n\n});\n\nscenario.on('wait.' + eventName, function(scenario){ \n});\n\nscenario.on('wait', function(eventName, scenario){ \n});\n\nscenario.on('labelchange', function(lastLabel, prevLabel, scope, scenario){ \n\n});\n\nscenario.on('log', function(msg, scope, scenario){ \n    \n});\n\nscenario.on('error', function(msg, scope, scenario){ \n    \n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Date Components\nDESCRIPTION: Methods to extract individual components (year, month, day, hours, minutes, seconds, milliseconds) from a Date object. Each method returns a specific part of the date in numeric format.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/date.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar year = d.getFullYear();    // returns the year\nvar month = d.getMonth();      // returns the month (0-11)\nvar date = d.getDate();        // returns the day of the month (1-31)\nvar day = d.getDay();          // returns the day of the week\nvar hour = d.getHours();       // returns the hour (0-23)\nvar min = d.getMinutes();      // returns the minutes (0-59)\nvar sec = d.getSeconds();      // returns the seconds (0-59)\nvar ms = d.getMilliseconds();  // returns the milliseconds (0-999)\n```\n\n----------------------------------------\n\nTITLE: Creating Prefix-Number-Suffix String Array in Phaser 3 (JavaScript)\nDESCRIPTION: Creates an array of strings where each element consists of a prefix, a number from the specified range, and a suffix. This is particularly useful for generating sequences of file names or identifiers.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/create-number-array.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = Phaser.Utils.Array.NumberArray(start, end, prefix, suffix);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = Phaser.Utils.Array.NumberArray(5, 7, 'HD-', '.png');\n// arr = ['HD-5.png', 'HD-6.png', 'HD-7.png']\n```\n\n----------------------------------------\n\nTITLE: Creating Wait Events Instance from Loaded Plugin\nDESCRIPTION: Shows how to create an instance of the Wait Events plugin after loading it in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar waitEvents = scene.plugins.get('rexwaiteventsplugin').add(completeCallback, completeCallbackScope);\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Plugin in Game Configuration\nDESCRIPTION: Code to import and configure the UI plugin in the Phaser 3 game configuration and create a title label.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = scene.rexUI.add.titleLabel(config);\n```\n\n----------------------------------------\n\nTITLE: Defining Event Sheet Structure with Condition and Script in Pseudocode\nDESCRIPTION: This snippet defines an event sheet structure including a condition, a script with print and wait commands, and a catch block. It demonstrates a parallel execution flow and a condition check for coin value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/parallel/parallel1.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\n# Event sheet 1\n\nparallel\n\n## [Condition]\n\ncoin > 5\n\n## Script\n\nprint\n  text=Event 1 start\n\nwait\n\nprint\n  text=Event 1 progress 0\n\nwait\n\nprint\n  text=Event 1 progress 1\n\nwait\n\nprint\n  text=Event 1 complete\n\n## [Catch]\n\nprint\n  text=str(coin = {{coin}})\n```\n\n----------------------------------------\n\nTITLE: Translating a String\nDESCRIPTION: Code showing how to translate a string using the translation plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = scene.plugins.get('rexTextTranslation').t(translationKey, interpolation);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Installs the phaser3-rex-plugins package using npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Camera and Transform Controls\nDESCRIPTION: Methods for manipulating the internal camera including scroll, zoom, and rotation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamic-texture.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.camera.setScroll(x, y);\ntexture.camera.setZoom(zoom);\ntexture.camera.setAngle(angle);\n```\n\n----------------------------------------\n\nTITLE: Getting Bottom Scroll Position in TextArea\nDESCRIPTION: Demonstrates how to get the bottom scroll position value, which represents the Y-offset at the bottom of content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar bottomOY = textArea.bottomChildOY;\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Shapes Plugin via Minify File in Phaser 3\nDESCRIPTION: Demonstrates how to load the custom shapes plugin using the minified file in the preload stage of a Phaser 3 scene, then add a custom shapes object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcustomshapesplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcustomshapesplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar customShapes = scene.add.rexCustomShapes(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Quad Shape in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Adds a quad shape to the scene. Quad shapes allow for custom offsets on vertices and adding points on the sides for more complex shapes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar quad = scene.rexUI.add.quadShapes(x, y, width, height, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Loading Rex Board Plugin in Phaser 3 Scene Preload\nDESCRIPTION: Loads the minified version of the Rex Board Plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-texture.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\n----------------------------------------\n\nTITLE: Bypassing Key Input for Hidden Input Text in Phaser 3\nDESCRIPTION: Shows how to bypass key input to the hidden input text object when using keyboard events in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/hiddeninputtext.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObj = scene.input.keyboard.addKey('W', enableCapture, emitOnRepeat);\n```\n\n----------------------------------------\n\nTITLE: Setting Resize Mode in Phaser 3 Dissolve Effect\nDESCRIPTION: Sets the resize mode for the target texture in the dissolve effect. Options include stretch, contain, or cover to control how the texture is scaled.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setResizeMode(mode);\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle-Switch False Value Track Style\nDESCRIPTION: Gets the current track fill color and alpha values when the toggle-switch is in the false state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = toggleSwitch.falseValueTrackColor;\nvar alpha = toggleSwitch.falseValueTrackFillAlpha;\n```\n\n----------------------------------------\n\nTITLE: Importing RotateTo Class Directly\nDESCRIPTION: Imports the RotateTo class directly from the Phaser3 Rex plugins package for use in a project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport RotateTo from 'phaser3-rex-plugins/plugins/rotateto.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Fuzzy Logic Plugin in Phaser 3 Game Configuration (JavaScript)\nDESCRIPTION: Shows how to import and configure the fuzzy logic plugin in the game configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fuzzy.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport GashaponPlugin from 'phaser3-rex-plugins/plugins/fuzzy-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexGashapon',\n            plugin: GashaponPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar fuzzyModule = scene.plugins.get('rexFuzzy').add(config);\n```\n\n----------------------------------------\n\nTITLE: Saving Data to localStorage\nDESCRIPTION: Stores a value in localStorage using a specific key. Both key and value are automatically converted to strings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.setItem(key, value);\n```\n\n----------------------------------------\n\nTITLE: Redefining Key Mappings in Keys Hub\nDESCRIPTION: These snippets demonstrate how to redefine key mappings, including starting a definition task, listening for keyboard input, and canceling or completing the task.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyshub.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHub.defineKeyStart(key);  // key: key string\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHub.listenFromKeyboard();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHub.defineKeyCancel();\n```\n\n----------------------------------------\n\nTITLE: Loading TintRGB Plugin in Preload Stage\nDESCRIPTION: Loads the minified plugin file in the preload stage and demonstrates basic property attachment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tintrgb.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextintrgbplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextintrgbplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rextintrgbplugin').add(gameObject, tintRGB);\ngameObject.tintGray = 128;\n```\n\n----------------------------------------\n\nTITLE: Accessing Tween Data Properties in Phaser 3\nDESCRIPTION: Documentation showing how to access the tween.data array which contains TweenData objects. Each TweenData object contains information about a specific property being tweened, including the property name (key) and the start, end, and current values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tween.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- `tween.data` : An array of TweenData objects, each containing a unique property and target being tweened.\n    - `tween.data[i].key` : The property of the target to tween.\n    - `tween.data[i].start`, `tween.data[i].end`, `tween.data[i].current` : Ease Value Data.\n```\n\n----------------------------------------\n\nTITLE: Creating Timeline Commands in Phaser3\nDESCRIPTION: Creates a timeline object with configurable events and actions. Supports time conditions, enable conditions, and various actions like tweens, sounds, and custom functions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timeline.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar timeline = scene.add.timeline([    \n    {\n        // Time condition\n        at: 0,\n        in:\n        from:\n\n        // Enable condition\n        if(event) {\n            // this: target parameter\n            return true;  // false\n        },\n\n        set: {\n            key: value,\n        },\n        \n        tween: {\n            targets: gameObject,\n            alpha: 1,\n            ease: 'Linear',       // 'Cubic', 'Elastic', 'Bounce', 'Back'\n            duration: 1000,\n            repeat: 0,            // -1: infinity\n            yoyo: false\n        },\n\n        run(){ \n            // this: target parameter\n        },\n\n        loop() {\n\n        },\n\n        sound: '',\n\n        event: '',\n\n        // target: this,\n\n        // once: false,\n        // stop: false,\n    },\n\n    // ...\n])\n```\n\n----------------------------------------\n\nTITLE: Getting Current Frame Count in Phaser\nDESCRIPTION: Retrieves the current game frame count, which increments with each frame update.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar frameCount = game.getFrame();\n// var frameCount = scene.game.getFrame();\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of Custom TextBox Class\nDESCRIPTION: Shows how to create an instance of a custom TextBox class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar textBox = new MyTextBox(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Tap Class for Phaser 3 Gesture Recognition\nDESCRIPTION: Shows how to import the Tap class directly from the Rex plugins package for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-tap.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tap } from 'phaser3-rex-plugins/plugins/gestures.js';\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Value Change Events\nDESCRIPTION: Registers an event handler to respond when the color value changes. The handler receives the new value, old value, and a reference to the color components instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncolorComponents.on('valuechange', function(newValue, oldValue, colorComponents){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Button Configuration in JavaScript\nDESCRIPTION: Configuration object for adding a button element to the Tweaker component. Includes title, label, and callback function that receives the target object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    $type: 'button', title: '', label: '',\n    callback(target) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Real-Time Timers Instance\nDESCRIPTION: Creates an instance of the Real-Time Timers class with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar realTimeTimers = new RealTimeTimers(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Read-Only State Directly\nDESCRIPTION: Sets the toggle-switch read-only state directly through the readOnly property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.readOnly = true;\n```\n\n----------------------------------------\n\nTITLE: Adding Bitmap Text Object\nDESCRIPTION: Create and add a bitmap text object to the scene with optional size and alignment settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.bitmapText(x, y, key, text);\n// var txt = scene.add.bitmapText(x, y, key, text, size, align);\n```\n\n----------------------------------------\n\nTITLE: Setting Read-Only by Property Assignment\nDESCRIPTION: Sets the checkbox to read-only mode by directly assigning to the readOnly property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.readOnly = true;\n```\n\n----------------------------------------\n\nTITLE: Importing Kawase-blur PostFx Class in Phaser 3\nDESCRIPTION: Demonstrates how to import the Kawase-blur PostFx class and add it to the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-kawaseblur.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport KawaseBlurPostFx from 'phaser3-rex-plugins/plugins/kawaseblurpipeline.js';\nvar config = {\n    // ...\n    pipeline: [KawaseBlurPostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring RandomPlace Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the RandomPlace plugin in the global plugins section of the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/randomplace.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RandomPlacePlugin from 'phaser3-rex-plugins/plugins/randomplace-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRandomPlace',\n            plugin: RandomPlacePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangle from Points in Phaser 3\nDESCRIPTION: Creates a Rectangle that encompasses all given points. Points can be provided as arrays [x,y] or objects {x:0, y:0}.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rectangle.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = Phaser.Geom.Rectangle.FromPoints(points);\n// var rect = Phaser.Geom.Rectangle.FromPoints(points, rect);  // push rect\n```\n\n----------------------------------------\n\nTITLE: Configuring Warp Effect with Options\nDESCRIPTION: Code showing how to apply the warp effect with detailed configuration options for frequency, amplitude, and speed parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexWarpPipeline').add(gameObject, {\n    // frequencyX: 10,\n    // frequencyY: 10,\n\n    // amplitudeX: 10,\n    // amplitudeY: 10,\n\n    // speedX: 0,\n    // speedY: 0,\n    // speedEnable: \n\n    // name: 'rexWarpPostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Laying Out SimpleTextBox Elements in Phaser 3\nDESCRIPTION: Code for arranging the position of all elements in a SimpleTextBox instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletextbox.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.layout();\n```\n\n----------------------------------------\n\nTITLE: Loading Glow Filter Plugin via Minified File in Phaser 3\nDESCRIPTION: Loads the glow filter plugin as a minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexglowfilter2pipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexglowfilter2pipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Handling Medium Coin Value Condition (5-10)\nDESCRIPTION: Logic branch for when the coin value is between 5 and 10 inclusive. It logs the condition status and then increases the coin value by 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/memory-monitor/memory-monitor.md#2025-04-21_snippet_2\n\nLANGUAGE: pseudocode\nCODE:\n```\nlog\\\n  text=(coin > 5 and coin <=10)\n\nsetData\n  coin=#(coin+3)\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Ease Function in TransitionImagePack\nDESCRIPTION: Shows how to set and get the easing function used for transitions in a TransitionImagePack instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setEaseFunction(ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ease = image.easeFunction;\n```\n\n----------------------------------------\n\nTITLE: Importing Raycaster Class Directly\nDESCRIPTION: Demonstrates how to import the Raycaster class directly and instantiate it without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Raycaster from 'phaser3-rex-plugins/plugins/raycaster.js';\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Rex Gesture Plugin in Game Configuration\nDESCRIPTION: Shows how to import and configure the Gesture Plugin in the Phaser3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport GesturesPlugin from 'phaser3-rex-plugins/plugins/gestures-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexGestures',\n            plugin: GesturesPlugin,\n            mapping: 'rexGestures'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Applying Dissolve PostFx to Game Object Directly in Phaser 3\nDESCRIPTION: Applies the dissolve post processing effect directly to a game object using the setPostPipeline method. This is used after importing the effect class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(DissolvePostFx);\n```\n\n----------------------------------------\n\nTITLE: Controlling TCRP Playback\nDESCRIPTION: Illustrates methods for pausing, resuming, and stopping TCRP player playback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.pause();\nplayer.resume();\nplayer.stop();\n```\n\n----------------------------------------\n\nTITLE: Event Handling for Fade Completion\nDESCRIPTION: Event listener setup for fade completion events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadeoutdestroy.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfade.on('complete', function(gameObject, fade){\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Questions and Options in Phaser 3 Quest Plugin\nDESCRIPTION: Illustrates how to retrieve questions, question keys, and options from the question manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar question = questionManager.get(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar questionKeys = questionManager.getKeys();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar option = questionManager.getOption(question, optionKey);\n```\n\n----------------------------------------\n\nTITLE: Creating a Nine Slice Object in Phaser 3\nDESCRIPTION: Creates a Nine Slice game object with specified dimensions and corner sizes. This allows for stretching the central portions while keeping the corners at fixed sizes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/nineslice.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar nineSlice = scene.add.nineslice(x, y, texture, frame, width, height, leftWidth, rightWidth, topHeight, bottomHeight);\n```\n\n----------------------------------------\n\nTITLE: Simplifying Polygon in Phaser 3\nDESCRIPTION: Reduces the number of points in a polygon while maintaining its overall shape using Douglas-Peucker and Radial Distance algorithms. This improves performance when processing complex polygons.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar polygon = Phaser.Geom.Polygon.Simplify(polygon);\n// var polygon = Phaser.Geom.Polygon.Simplify(polygon, tolerance, highestQuality);\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle-Switch Thumb Style\nDESCRIPTION: Gets the current thumb color and alpha values of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = toggleSwitch.thumbColor;\nvar alpha = toggleSwitch.thumbAlpha;\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Text Object with Minified Plugin\nDESCRIPTION: Creates a Tag Text object after loading the minified plugin file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.rexTagText(x, y, content, config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom FileSelectorButton Class in Phaser 3\nDESCRIPTION: Example of extending the FileSelectorButton class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyFileSelectorButton extends RexPlugins.UI.FileSelectorButton {\n    constructor(scene, config) {\n        super(scene, config) {\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Warp Effect\nDESCRIPTION: Code to remove the warp effect from a game object or camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexWarpPipeline').remove(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexWarpPipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Clearing All Bob Objects from a Blitter Container\nDESCRIPTION: Removes all Bob objects from a Blitter container. This is useful for resetting a Blitter without destroying the container itself.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nblitter.clear();\n```\n\n----------------------------------------\n\nTITLE: Registering Game Postrender Event Listener in JavaScript\nDESCRIPTION: Demonstrates how to register an event listener for the 'postrender' event in a Phaser 3 game. This is the final event in the game loop before the process repeats for the next frame.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.game.events.on('postrender', function(renderer, time, delta){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Sprite Properties by Name\nDESCRIPTION: Sets various properties (position, alpha, etc.) of a named sprite with optional animation settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_5\n\nLANGUAGE: phaser\nCODE:\n```\nNAME.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Cloning a Polygon in Phaser 3\nDESCRIPTION: Creates a copy of an existing polygon using the static Clone method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar polygon1 = Phaser.Geom.Polygon.Clone(polygon0);\n```\n\n----------------------------------------\n\nTITLE: Managing Local Memory for Event Sheets\nDESCRIPTION: Shows methods to manipulate shared local memory used by all event sheets for data storage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Set value\neventSheetManager.setData(key, value);\n// or\neventSheetManager.setData(data);  // data : a plain json object\n\n// Toggle value\neventSheetManager.toggleData(key, value);\n\n// Increase value\neventSheetManager.incData(key, inc);\n\n// Get value\nvar value = eventSheetManager.getData(key);\n\n// Has key\nvar hasData = eventSheetManager.hasData(key);\n\n// Local memory as a dictionary\nvar data = eventSheetManager.memory;\n```\n\n----------------------------------------\n\nTITLE: Increasing Timer Period\nDESCRIPTION: Increases the period of an existing timer in the Real-Time Timers instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrealTimeTimers.incTimerPeriod(name, period);\n```\n\n----------------------------------------\n\nTITLE: Toggling Toggle-Switch Value Directly\nDESCRIPTION: Toggles the value of the toggle-switch by directly inverting the value property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.value = !toggleSwitch.value;\n// toggleSwitch.value = !toggleSwitch.value;\n```\n\n----------------------------------------\n\nTITLE: Configuring Wait Events Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to include the Wait Events plugin in the Phaser 3 game configuration for global use.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport WaitEventsPlugin from 'phaser3-rex-plugins/plugins/waitevents-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexWaitEvents',\n            plugin: WaitEventsPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Shows the NPM command to install the Phaser3 Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading the Line Plugin in Preload Stage\nDESCRIPTION: How to load the Line plugin from CDN in the preload stage of a Phaser 3 game and add a line object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/line.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexlineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexlineplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = scene.add.rexLine(config);\n```\n\n----------------------------------------\n\nTITLE: Converting Rope to Vertical Orientation in Phaser 3\nDESCRIPTION: Changes a horizontal rope to a vertical rope. Has no effect if the rope is already in vertical mode. Allows specifying points, colors, and alphas.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrope.setVertical(points);\n// rope.setVertical(points, colors, alphas);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Number Bar Text in JavaScript\nDESCRIPTION: Demonstrates how to get and set the text string of the number bar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = numberBar.text;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.setText(s);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnumberBar.text = s;\n```\n\n----------------------------------------\n\nTITLE: Resuming a Phaser Game\nDESCRIPTION: Resumes a paused game and emits a RESUME event for listeners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngame.resume();\n```\n\n----------------------------------------\n\nTITLE: Calculating Snake Distance in Phaser 3\nDESCRIPTION: Method to calculate Snake distance (also known as Manhattan or rectilinear distance), which sums the horizontal and vertical distances\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/distance.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar d = Phaser.Math.Distance.Snake(x1, y1, x2, y2);\n```\n\n----------------------------------------\n\nTITLE: Setting Test String in Phaser 3 Dynamic Text\nDESCRIPTION: Method to set a test string for calculating text dimensions in a dynamic text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setTestString(text);\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Setting End Angle of an Arc in Phaser 3\nDESCRIPTION: Sets the end angle (in degrees) for an Arc game object by directly modifying the endAngle property. This is an alternative to using seEndAngle method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\narc.endAngle = endAngle;\n```\n\n----------------------------------------\n\nTITLE: Working with Item Count in UniqueItemList (JavaScript)\nDESCRIPTION: Shows how to check the item count and whether a list is empty.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar count = listA.length;\nvar isEmpty = listA.isEmpty();\n```\n\n----------------------------------------\n\nTITLE: Setting Phaser Scale Mode to RESIZE\nDESCRIPTION: Configuration for setting up Phaser game with RESIZE scale mode, which is required for the ScaleOuter plugin to work properly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaleouter.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    scale: {\n        parent: divId,\n        mode: Phaser.Scale.RESIZE,\n        width: 1024,    // Default game window width\n        height: 768,    // Default game window height\n        // ...\n    }\n}\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Drag Class Directly\nDESCRIPTION: Import and instantiate the Drag class directly from the Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/drag.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Drag from 'phaser3-rex-plugins/plugins/drag.js';\nvar drag = new Drag(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Barrel Plugin in Game Config\nDESCRIPTION: Configuration code to add the barrel pipeline plugin to the game instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-barrel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BarrelPipelinePlugin from 'phaser3-rex-plugins/plugins/barrelpipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexBarrelPipeline',\n            plugin: BarrelPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading the Marked Event Sheets Plugin (Minify File)\nDESCRIPTION: Shows how to load the Marked Event Sheets plugin using the minified file in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexmarkedeventsheetsplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexmarkedeventsheetsplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Installing NinePatch Plugin from NPM\nDESCRIPTION: Shows the NPM command to install the Phaser 3 Rex plugins package which contains the NinePatch plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Updating Interpolation Values\nDESCRIPTION: Code showing how to update specific interpolation values for dynamic text content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation\n    .updateInterpolation(key, value)\n    .updateText()\n```\n\n----------------------------------------\n\nTITLE: Loading Phaser3 UI Plugin (Minified Version)\nDESCRIPTION: Demonstrates how to load the Rex UI plugin via the minified file in the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Creating Firebase Plugin Instance\nDESCRIPTION: Initialize the Rex Firebase plugin and create an online user list instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rexFire = new window.rexfirebase();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar userList = rexFire.add.onlineUserList(config);\n```\n\n----------------------------------------\n\nTITLE: Getting TCRP Time Scale\nDESCRIPTION: Demonstrates how to retrieve the current time scale value from the TCRP player.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar timeScale = player.timeScale;\n```\n\n----------------------------------------\n\nTITLE: Class Import and Instantiation\nDESCRIPTION: Importing and creating a new instance of LocalStorageData class\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage-data.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport LocalStorageData from 'phaser3-rex-plugins/plugins/localstoragedata.js';\nvar data = new LocalStorageData(parent, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Background Stroke in Phaser 3\nDESCRIPTION: Code for getting and setting background stroke properties for text objects, including color and line width. These control the border appearance around text backgrounds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = txt.style.backgroundStrokeColor;\nvar lineWidth = txt.style.backgroundStrokeLineWidth;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setBackgroundStrokeColor(color, lineWidth);\n```\n\n----------------------------------------\n\nTITLE: Creating Number Array in Phaser 3 (JavaScript)\nDESCRIPTION: Creates an array representing a range of numbers, inclusive of the start and end values. This function is useful for generating sequential number arrays.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/create-number-array.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = Phaser.Utils.Array.NumberArray(start, end);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = Phaser.Utils.Array.NumberArray(2, 4);\n// arr = [2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Setting File Owner in Firebase File Manager\nDESCRIPTION: JavaScript code to set the file owner in the Firebase file manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-files.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.setOwner(userID);\n\n// or\n\nfileManager.setOwner({\n    userID: userID\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Current Cursor Dynamically in Phaser 3\nDESCRIPTION: Updates the current cursor style for the game canvas. This can be used to change the cursor during gameplay.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursor.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.canvas.style.cursor = cursor;\n```\n\n----------------------------------------\n\nTITLE: Extending TagText Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom TagText class by extending the base component. This allows for adding custom functionality to tag-formatted text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyText extends RexPlugins.UI.TagText {\n    constructor(scene, x, y, text, style) {\n        super(scene, x, y, text, style);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Label Class Directly in Phaser 3\nDESCRIPTION: Code to import the Label class directly and create a label object instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Label } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = new Label(scene, config);\nscene.add.existing(label);\n```\n\n----------------------------------------\n\nTITLE: Loading Frame Manager Plugin in Phaser 3 (JavaScript)\nDESCRIPTION: Loads the Frame Manager plugin in the preload stage of a Phaser 3 scene and adds a frame manager object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/framemanager.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexframemanagerplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexframemanagerplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar frameManager = scene.plugins.get('rexframemanagerplugin').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin File in Phaser3\nDESCRIPTION: Loads the minified plugin file in the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effectlayer-outline.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexoutlineeffectlayerplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexoutlineeffectlayerplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase Plugin via Minify File in Phaser\nDESCRIPTION: Loads the Firebase plugin using the minified file in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfirebaseplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebaseplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Via NPM Configuration\nDESCRIPTION: Shows how to install and configure the Tag Player plugin using NPM package manager and game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TagPlayerPlugin from 'phaser3-rex-plugins/plugins/tagplayer-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTagPlayerPlugin',\n            plugin: TagPlayerPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask\nDESCRIPTION: Creating a bitmap mask from the text object for masking effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamicbitmaptext.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = txt.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Registering Post-FX Pipeline in Phaser 3\nDESCRIPTION: Demonstrates how to register a post-processing effect pipeline in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gameobject.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport PostFxClass from 'path';\nvar config = {\n    // ...\n    pipeline: [PostFxClass]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Repeat Image from JSON\nDESCRIPTION: Code showing how to create a repeat image from a JSON configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.make.rexRepeatImage({\n    x: 0,\n    y: 0,\n    width: 512,\n    height: 512,\n    key: '',\n    \n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Loading Progress Class\nDESCRIPTION: Imports the LoadingProgress class from the npm package for direct use.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport LoadingProgress from 'phaser3-rex-plugins/plugins/loadingprogress.js';\n```\n\n----------------------------------------\n\nTITLE: Setting GrayScale Intensity with Method\nDESCRIPTION: Sets the intensity value of the grayscale effect using the setIntensity method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setIntensity(radius);\n```\n\n----------------------------------------\n\nTITLE: Hiding Dialog Buttons - JavaScript\nDESCRIPTION: Methods for hiding specific buttons. The index parameter can be a number index, string name, or button game object. Layout needs to be called after hiding buttons.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.hideChoice(index);\ndialog.hideAction(index);\ndialog.hideToolbar(index);\ndialog.hideLeftToolbar(index);\n```\n\n----------------------------------------\n\nTITLE: Setting Content Callback in Phaser3 Tag Player\nDESCRIPTION: Code to set a general content callback function in the Tag Player. This callback will be invoked whenever content is parsed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.setContentCallback(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the Phaser 3 Rex Plugins package from NPM, which includes the Run Commands plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/runcommands.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Getting Lines from Triangle Edges in Phaser 3\nDESCRIPTION: Retrieves line objects representing each edge of the triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar line12 = rect.getLineA();     // line from (x1, y1) to (x2, y2)\nvar line23 = rect.getLineB();     // line from (x2, y2) to (x3, y3)\nvar line31 = rect.getLineC();     // line from (x3, y3) to (x1, y1)\n```\n\n----------------------------------------\n\nTITLE: Adding Touch Event Stop Behavior via Global Plugin\nDESCRIPTION: Code to add touch event stop behavior to a game object using the globally configured plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/toucheventstop.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar touchEventStop = scene.plugins.get('rexTouchEventStop').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Checking Fullscreen State in Phaser 3\nDESCRIPTION: Shows how to determine if the game is currently running in fullscreen mode by accessing the isFullscreen property of the scale manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fullscreen.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar isFullScreen = scene.scale.isFullscreen;\n```\n\n----------------------------------------\n\nTITLE: Initializing Game Object Manager\nDESCRIPTION: Configuration for adding a game object manager with customizable creation, fade effects, viewport coordinates, and symbol mapping.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.addGameObjectManager({\n    name: goType,\n    createGameObject: function(scene, ...) {\n        return gameObject\n    },\n\n    // fade: 500,\n    // fade: {mode: 'tint', time: 500},\n\n    // viewportCoordinate: false,\n    // viewportCoordinate: { viewport: new Phaser.Geom.Rectangle() },\n\n    // defaultLayer: layerName,\n\n    // symbols: undefined,  // { key:value },\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Rex Spinner Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the Rex Spinner plugin as a scene plugin in Phaser 3. This allows access to various spinner objects through the scene's rexSpinner property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-spinner.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin(\n  \"rexspinnerplugin\",\n  \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexspinnerplugin.min.js\",\n  \"rexSpinner\",\n  \"rexSpinner\"\n);\n```\n\n----------------------------------------\n\nTITLE: Importing TCRP Class Directly\nDESCRIPTION: Imports the TCRP class directly from the npm package. This approach provides more control over the plugin lifecycle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport TCRP from 'phaser3-rex-plugins/plugins/tcrp.js';\n```\n\n----------------------------------------\n\nTITLE: Resetting Display Content in Phaser 3 Label Component\nDESCRIPTION: These snippets demonstrate how to reset the display content of a Label component. They allow for changing text, icon, and action properties in a single method call.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.resetDisplayContent({\n    text: '',\n\n    icon: undefined, \n    iconFrame: undefined,\n    iconSize: undefined,\n\n    action: undefined, \n    actionFrame: undefined,\n    actionSize: undefined,\n\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.resetDisplayContent(text);\n```\n\n----------------------------------------\n\nTITLE: Close Event Listener\nDESCRIPTION: Sets up an event listener for the close event, which triggers when the loading dialog has fully closed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nloadingProgress.on('close', function() {\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Camera Controls in Phaser 3\nDESCRIPTION: This snippet shows how to start the camera controls. This method is used to begin the control's effect on the camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-controller.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncontrols.start();\n```\n\n----------------------------------------\n\nTITLE: Loading Minified Plugin in Phaser Scene Preload\nDESCRIPTION: Loads the minified version of the localStorage data plugin in the scene's preload stage\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage-data.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexlocalstoragedataplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexlocalstoragedataplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Game with UI Plugin\nDESCRIPTION: Demonstrates how to configure a Phaser3 game to use the Rex UI plugin through the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading NinePatch Plugin via Minified File in Phaser 3\nDESCRIPTION: Demonstrates how to load the NinePatch plugin using its minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexninepatchplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexninepatchplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Tweaker Plugin (Minify File) in Phaser 3\nDESCRIPTION: Instructions for loading the UI plugin minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Center Color of Circular Progress Bar\nDESCRIPTION: Demonstrates how to get and set the color of the center circle in the circular progress bar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar centerColor = circularProgress.centerColor;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setCenterColor(centerColor);\n// circularProgress.centerColor = centerColor;\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Tag Content in Phaser3 Tag Player\nDESCRIPTION: Event handler for content that follows a specific custom tag in the Tag Player system. This provides a way to process content specific to a custom tag type.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('custom#content', function(content) {   \n})\n```\n\n----------------------------------------\n\nTITLE: Getting Star Alpha in Phaser 3\nDESCRIPTION: Retrieves the alpha transparency value of a star shape in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = star.alpha;\n```\n\n----------------------------------------\n\nTITLE: Extending Triangle Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom Triangle class by extending the base component. This allows for adding custom functionality to triangle shapes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTriangle extends RexPlugins.UI.Triangle {\n    constructor(scene, x, y, width, height, fillColor, fillAlpha) {\n        super(scene, x, y, width, height, fillColor, fillAlpha);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Line Progress Canvas Object in Phaser 3\nDESCRIPTION: Shows how to add a Line Progress Canvas object to a Phaser 3 game scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-lineprogress.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineProgress = scene.add.rexLineProgressCanvas(x, y, width, height, barColor, value, config);\n```\n\n----------------------------------------\n\nTITLE: Checking Clock Running State in Phaser 3\nDESCRIPTION: Retrieves the current running state of the clock.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRunning = clock.isRunning;\n```\n\n----------------------------------------\n\nTITLE: Creating UniqueItemList Instance with Configuration (JavaScript)\nDESCRIPTION: Creates a new UniqueItemList instance with configuration options for initial items and auto cleanup behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar listA = scene.plugins.get('rexUniqueItemList').add({\n    // items: undefined,\n    // autoCleanup: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Loading Progress Instance with Class\nDESCRIPTION: Creates a new instance of the LoadingProgressBehavoir class after importing it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar loadingProgress = new LoadingProgressBehavoir(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Handling Generic Content in Phaser3 Tag Player\nDESCRIPTION: Event handler for any content that follows a tag in the Tag Player system. This provides a general way to process content regardless of the preceding tag.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('content', function(content) {   \n})\n```\n\n----------------------------------------\n\nTITLE: Backend Parse Configuration\nDESCRIPTION: Custom parser function for processing fetched data in backend configuration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/i18next.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(data) { \\n    return JSON.parse(data); \\n}\n```\n\n----------------------------------------\n\nTITLE: Scale Plugin Event Handling\nDESCRIPTION: Example of handling completion events for scale animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/popup.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscale.on('complete', function(gameObject, scale){\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners for an Event in Phaser 3\nDESCRIPTION: Shows how to remove all listeners for a specific event in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nee.off(eventName);\n```\n\n----------------------------------------\n\nTITLE: Importing Youtube Player Class in Phaser 3\nDESCRIPTION: Code to import the Youtube Player class directly from the phaser3-rex-plugins package for manual instantiation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport YoutubePlayer from 'phaser3-rex-plugins/plugins/youtubeplayer.js';\n```\n\n----------------------------------------\n\nTITLE: Incrementing Y Position of Group Members in Phaser 3\nDESCRIPTION: Increases the Y position of all group members by a given value, with an optional step parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.incY(value);\n// group.incY(value, step);\n```\n\n----------------------------------------\n\nTITLE: Skipping Events in Bracket Parser 2\nDESCRIPTION: Shows how to skip specific events during the parsing process of a Bracket Parser 2 instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nparser.skipEvent();\n```\n\n----------------------------------------\n\nTITLE: Applying Inverse PostFx to Game Object or Camera in Phaser 3\nDESCRIPTION: Applies the Inverse PostFx effect to a game object or camera in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(InversePostFx);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(InversePostFx);\n```\n\n----------------------------------------\n\nTITLE: Instantiating Custom SimpleTextBox Subclass in Phaser 3\nDESCRIPTION: Code for creating an instance of a custom SimpleTextBox subclass.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletextbox.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar textBox = new MyTextBox(scene, config, creators);\n```\n\n----------------------------------------\n\nTITLE: Sprite Say Command\nDESCRIPTION: Combined command that changes sprite image, focuses it, and displays text. Combines SPRITE.cross + SPRITE.focus + TEXTBOX.typing functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_19\n\nLANGUAGE: phaser\nCODE:\n```\nNAME.say\n  name=\n  expression=\n  duration=\n  mode=fade\n  tintOthers=\n  displayName=\n  icon=\n  iconFrame=\n  text=\n  more=false\n  typingSpeed=\n  iconCrossDuration=\n  iconCrossMode='crossFade'\n  waitIconAnimationMode\n  clickAfterComplete=true\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Rex Gesture Plugin in Game Configuration for Phaser 3\nDESCRIPTION: Sets up the Rex Gestures plugin in the game configuration to make it available in all scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport GesturesPlugin from 'phaser3-rex-plugins/plugins/gestures-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexGestures',\n            plugin: GesturesPlugin,\n            mapping: 'rexGestures'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Plugins\nDESCRIPTION: Configuration code for installing the UI plugin through npm and setting it up in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-toast.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Shaking a Sprite\nDESCRIPTION: Applies a shake effect to a sprite with configurable duration and magnitude.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_20\n\nLANGUAGE: phaser\nCODE:\n```\nNAME.shake\n  duration=\n  magnitude=\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Removing Child Elements from Button Group in Phaser 3\nDESCRIPTION: Methods for removing individual buttons, all buttons, or any child elements from the button group. Options are provided to destroy the removed elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthbuttons.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.removeButton(gameObject, destroyChild);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.clearButtons(destroyChild);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.remove(gameObject, destroyChild);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.removeAll(destroyChild);\n```\n\n----------------------------------------\n\nTITLE: Checking if a Timer is Paused in Phaser 3\nDESCRIPTION: Determines whether a timer is currently paused by checking the paused property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPaused = timer.paused;\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Package and Configuring Plugin\nDESCRIPTION: Shows how to install the plugin via npm and configure it in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buffdata.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport BuffDataPlugin from 'phaser3-rex-plugins/plugins/buffdata-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexBuffData',\n            plugin: BuffDataPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = scene.plugins.get('rexBuffData').add(parent);\n```\n\n----------------------------------------\n\nTITLE: Registering Game Prerender Event Listener in JavaScript\nDESCRIPTION: Demonstrates how to register an event listener for the 'prerender' event in a Phaser 3 game. This event occurs after 'prerenderclear' but before the SceneManager begins rendering scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mainloop.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.game.events.on('prerender', function(){\n    //\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling TCRP Player Events\nDESCRIPTION: Event handlers for various TCRP player events including start, pause, resume, stop, complete, and runcommand.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('start', function(scene, player){});\n\nplayer.on('pause', function(scene, player){});\n\nplayer.on('resume', function(scene, player){});\n\nplayer.on('stop', function(scene, player){});\n\nplayer.on('complete', function(scene, player){});\n\nplayer.on('runcommand', function(commands, scope){});\n```\n\n----------------------------------------\n\nTITLE: Grouping Neighbors with Same Symbol\nDESCRIPTION: Method to find all connected tiles with the same symbol, starting from a specified tile position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntileXYArray = match.group(startTileX, startTileY);\n// out = match.group(startTileX, startTileY, out);\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle-Switch Size\nDESCRIPTION: Gets the current width and height of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = toggleSwitch.width;\nvar height = toggleSwitch.height;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ToggleSwitch Class in Phaser 3\nDESCRIPTION: Defines a custom ToggleSwitch class that extends the plugin's ToggleSwitch class to add custom functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyToggleSwitch extends RexPlugins.GameObjects.ToggleSwitch {\n    constructor(scene, x, y, width, height, color, config) {\n        super(scene, x, y, width, height, color, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Bullet Angle in Phaser 3\nDESCRIPTION: Shows different methods to set the angle of the bullet. The angle determines the direction in which the game object moves.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bullet.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbullet.setAngle(degrees);\n// bullet.angle = degrees;\n\nbullet.setRotation(radians);\n// bullet.rotation  = radians;\n\nbullet.setAngle();\n// bullet.setRotation();\n```\n\n----------------------------------------\n\nTITLE: Setting InTouching Cooldown Time via Property\nDESCRIPTION: Alternative way to set the cooldown time by directly assigning to the cooldownTime property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nintouching.cooldownTime = cooldownTime;\n```\n\n----------------------------------------\n\nTITLE: Audio Marker Configuration in Phaser 3\nDESCRIPTION: Configuration object for defining markers that represent specific sections of an audio file, with start time, duration, and playback settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    name: '',\n    start: 0,\n    duration: music.duration,\n    config: {\n        mute: false,\n        volume: 1,\n        rate: 1,\n        detune: 0,\n        seek: 0,\n        loop: false,\n        delay: 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Grid Colors in Phaser 3\nDESCRIPTION: Demonstrates getting and setting various color properties of the grid, including fill color, stroke color, alternating color, and outline color.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-grid.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Fill color\nvar color = grid.fillColor;\nvar alpha = grid.fillAlpha;\ngrid.setFillStyle(color, alpha);\ngrid.setFillStyle();\n\n// Stroke color\nvar color = grid.strokeColor;\ngrid.setStrokeStyle(lineWidth, color, alpha);\ngrid.setStrokeStyle();\n\n// Alternating color\nvar color = grid.altFillColor;\ngrid.setAltFillStyle(color, alpha);\ngrid.setAltFillStyle();\n\n// Outline color\nvar color = grid.outlineFillColor;\ngrid.setOutlineStyle(color, alpha);\ngrid.setOutlineStyle();\n```\n\n----------------------------------------\n\nTITLE: Creating Anchor Instance with Configuration\nDESCRIPTION: Example of creating an anchor instance with comprehensive configuration options including positioning, sizing, and callback functions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/anchor.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar anchor = scene.plugins.get('rexAnchor').add(gameObject, {\n    // left: '0%+0',\n    // right: '0%+0',\n    // centerX: '0%+0',\n    // x: '0%+0',\n\n    // top: '0%+0',\n    // bottom: '0%+0',\n    // centerY: '0%+0',\n    // y: '0%+0',\n\n    // width: '100%+0',\n    // height: '100%+0',\n    // onResizeCallback: function(width, height, gameObject, anchor) {},\n    // onResizeCallbackScope: undefined,\n\n    // onUpdateViewportCallback: function(viewport, gameObject, anchor) {},\n    // onUpdateViewportCallbackScope: undefined,\n\n    // enable: true\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting First Name in Edit Dialog\nDESCRIPTION: Methods for retrieving and setting the first name value in the dialog. The getter accesses the current value while the setter updates it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar firstName = dialog.firstName;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.setFirstName(value);\n// data.firstName = value;\n```\n\n----------------------------------------\n\nTITLE: Raycasting from Point to Polygon in Phaser 3\nDESCRIPTION: Projects rays from a specified point to each line segment of the provided polygons, returning all intersection points with their angles and polygon indices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Geom.Intersects.GetRaysFromPointToPolygon(x, y, polygons);\n```\n\n----------------------------------------\n\nTITLE: Setting Light Size by Radius in Phaser 3\nDESCRIPTION: Methods for setting a light's size by specifying its radius. Both the setRadius method and direct property assignment are shown.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlight.setRadius(radius);\n// light.radius = radius;\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Data from Cache in Phaser 3\nDESCRIPTION: Method to retrieve loaded JSON data (including animation data) from the JSON cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.json;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Loading Drag Plugin in Phaser3\nDESCRIPTION: Load the minified plugin file in the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/drag.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexdragplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexdragplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Filling an Ellipse in Phaser 3 Graphics\nDESCRIPTION: Draws a filled ellipse on a graphics object using the specified style.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// graphics.fillStyle(color, alpha);   // color: 0xRRGGBB\ngraphics.fillEllipseShape(ellipse);\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Accessing Elements by Name in TextArea\nDESCRIPTION: Demonstrates an alternative way to get a reference to a game object by its name within the TextArea hierarchy.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = textArea.getByName(name);\n// var gameObject = textArea.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Managing Target Game Objects\nDESCRIPTION: Methods for getting, setting, and modifying the target game objects for navigation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObjects = navigator.targets;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.setTargets(targets);\n// navigator.setTargets(targets, columns);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.targets.push(newGameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.AddAt(navigator.targets, newGameObject, index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.Remove(navigator.targets, gameObject);\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog and Quest Objects in Phaser 3\nDESCRIPTION: Shows how to create dialog and quest objects after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dialog-quest.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = scene.rexUI.add.dialog(config); \nvar quest = new rexdialogquest({\n    dialog: dialog,\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Inverse Effect Using Plugin in Phaser 3\nDESCRIPTION: Applies the inverse effect to a game object or camera using the configured plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexInversePipeline').add(gameObject, config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexInversePipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Managing Line Spacing in Phaser 3 Text\nDESCRIPTION: Methods to get and set line spacing in text objects. Line spacing is added to the font height when calculating overall line height.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineSpacing = txt.style.lineSpacing;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setLineSpacing(value);\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox to Unchecked State\nDESCRIPTION: Sets the checkbox to the unchecked state using method calls.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setChecked(false);\n// checkbox.setValue(false);\n```\n\n----------------------------------------\n\nTITLE: Retrieving elements from a Phaser 3 Set\nDESCRIPTION: Shows how to access all elements in a Set, either directly or as a shallow copy array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-set.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar elements = set.entries;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar elements = set.getArray();\n```\n\n----------------------------------------\n\nTITLE: Directory Listing of Free Material Models in Live2D\nDESCRIPTION: This code snippet lists the directory paths to the free Live2D models that are available under the Free Material License. These models include Haru, Hiyori, Mark, Natori, and Rice.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/live2d/LICENSE.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSamples/Resources/Haru\nSamples/Resources/Hiyori\nSamples/Resources/Mark\nSamples/Resources/Natori\nSamples/Resources/Rice\n```\n\n----------------------------------------\n\nTITLE: Managing Specific Aliases\nDESCRIPTION: JavaScript code for adding, retrieving IDs and aliases using specific values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-idalias.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nidAlias.add(id, alias)\n    .then(function(result) { \n        // var alias = result.alias;\n        // var id = result.id;\n    })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Accessing Tables in Room\nDESCRIPTION: JavaScript code to retrieve a specific table from the room by its key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = room.getTable(key);\n```\n\n----------------------------------------\n\nTITLE: Creating Sequence Configuration\nDESCRIPTION: Creates a sequence instance with configuration options for yoyo, repeat, and loop behavior\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sequence.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar seq = this.plugins.get('rexSequence').add({\n    // yoyo: false,\n    // repeat: 0, \n    // loop: false\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Color Replace Effect with Configuration in Phaser 3\nDESCRIPTION: Shows how to apply the color replace effect to a game object with specific configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-colorreplace.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexColorReplacePipeline').add(gameObject, {\n    originalColor: 0xFF0000,\n    newColor: 0x000000,\n    // epsilon: 0.4,\n    \n    // name: 'rexColorReplacePostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Registering User List Event Handlers\nDESCRIPTION: JavaScript code snippets showing how to register event handlers for user join, leave, list update, and name change events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nroom.on('userlist.join', user);\nroom.on('userlist.leave', user);\nroom.on('userlist.update', users);\nroom.on('userlist.changename', userID, userName, prevUserName);\n```\n\n----------------------------------------\n\nTITLE: Toggling Data in Local Memory\nDESCRIPTION: Command to toggle the value of a key in the event sheet manager's local memory.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\ntoggleData\n  key\n```\n\n----------------------------------------\n\nTITLE: Checking Mute Status in Youtube Player for Phaser 3\nDESCRIPTION: Method to check if the Youtube player audio is currently muted.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar muted = player.muted;  // muted: true/false\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Installs the Phaser 3 Rex plugins package from npm to access the Firebase components.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading Circular Progress Plugin (Minified File)\nDESCRIPTION: Code to load the circular progress plugin from a minified file in the preload stage of a Phaser 3 game and add a circular progress object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcircularprogressplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcircularprogressplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar circularProgress = scene.add.rexCircularProgress(x, y, radius, color, value, config);\n```\n\n----------------------------------------\n\nTITLE: Forcing Clock Tick in Phaser 3\nDESCRIPTION: Manually advances the clock by a specified delta time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclock.tick(0);\n// clock.tick(delta);\n```\n\n----------------------------------------\n\nTITLE: Loading Split Pipeline Plugin via Minify File in Phaser3\nDESCRIPTION: Loads the minified version of the Split Pipeline plugin in the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexsplitpipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexsplitpipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Handling TextBox Complete Event\nDESCRIPTION: Sets up an event handler for when typing of all pages is complete, equivalent to the 'pageend' event when on the last page.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.on('complete', function() {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commands from TCRP Recorder\nDESCRIPTION: Gets the recorded commands either as a shallow copy or a reference to the internal command array. The commands are returned with their timestamps.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar commands = recorder.getCommands();        // Get a shallow copy of commands\n// var commands = recorder.getCommands(true); // Get reference of commands\n```\n\n----------------------------------------\n\nTITLE: Initializing MarkdownVisualNovel with Custom Default Variables in JavaScript\nDESCRIPTION: Example code showing how to instantiate a new MarkdownVisualNovel object with custom default variables. This allows developers to override the built-in default values for typing speed, transitions, and other behaviors when initializing the visual novel engine.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/default-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar mdvn = new MarkdownVisualNovel(scene, {\n    defaultVariables: {\n        // ...\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Console Messages\nDESCRIPTION: Commands to enable console messages for the current event sheet or a specific event sheet by title.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\nlog.enable\n```\n\nLANGUAGE: markdown\nCODE:\n```\nlog.enable\n  title=...\n```\n\n----------------------------------------\n\nTITLE: Setting User for LeaderBoard\nDESCRIPTION: JavaScript code showing two ways to set the user for the leaderboard - either by passing individual parameters or an object with user information.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.setUser(userID, userName);\n```\n\n----------------------------------------\n\nTITLE: Implementing Yoyo Scale Animation for Width Only in Phaser 3\nDESCRIPTION: Animates a game object by scaling its width up to a peak value and then back to its original scale, while keeping the height constant. Supports both callback and Promise patterns.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScaleX(scaleX)\n    .scaleYoyo(duration, peakValue, 0, 'x');\n\n// gameObject.popUp(duration, peakValue, repeat, 'x', ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScaleX(scaleX)\n    .scaleYoyoPromise(duration, peakValue, repeat, 'x')\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Float Array (Single Value)\nDESCRIPTION: Methods for setting a single float array uniform value in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set1fv(name, value0);\n// pipelineInstance.set1fv(name, value0, shader);\n```\n\n----------------------------------------\n\nTITLE: Importing FixWidthSizer Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the FixWidthSizer plugin in the main game configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Hold Time in Phaser 3 Press Input\nDESCRIPTION: Retrieves the current hold time setting from the press input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar holdTime = press.holdTime;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install Phaser 3 Rex plugins package from npm, which includes the Repeat Image plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin File in Phaser3\nDESCRIPTION: Demonstrates how to load the minified achievements plugin in the preload stage and create an achievements instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ymlachievements.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexymlachievementsplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexymlachievementsplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar achievements = scene.plugins.get('rexymlachievementsplugin').add();\n```\n\n----------------------------------------\n\nTITLE: Getting Light Size by Radius in Phaser 3\nDESCRIPTION: Code for retrieving a light's current size as radius.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar radius = light.radius;\n```\n\n----------------------------------------\n\nTITLE: Getting Start Angle of an Arc in Phaser 3\nDESCRIPTION: Retrieves the start angle (in degrees) of an Arc game object. This defines where the arc begins.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar startAngle = arc.startAngle;\n```\n\n----------------------------------------\n\nTITLE: Managing Video Volume in Phaser 3\nDESCRIPTION: Methods to get and set the volume of the video's audio track, with values ranging from 0 to 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar volume = video.getVolume();  // volume: 0~1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.setVolume(volume);  // volume: 0~1\n```\n\n----------------------------------------\n\nTITLE: Direct Class Import Usage\nDESCRIPTION: Examples of using the Canvas Data functionality after importing the class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-data.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport CanvasData from 'phaser3-rex-plugins/plugins/canvasdata.js';\nvar canvasdata = CanvasData.canvasObjectToBitmap(gameObject);\nvar canvasdata = CanvasData.textureTColorMap(textureKey, frameName);\n```\n\n----------------------------------------\n\nTITLE: Tab Configuration in JavaScript\nDESCRIPTION: Configuration object for creating a tabbed interface in the Tweaker component. Each tab can contain its own set of properties and optionally override the target for child elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    $type: 'tab',\n    // $target:\n    pages: [\n        {\n            title: '',\n            $properties: [\n                // ...\n            ]\n        },\n        {\n            title: '',\n            $properties: [\n                // ...\n            ]\n        },\n        // ... More pages\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Key0 Addition in 1D Firebase Item Table\nDESCRIPTION: JavaScript code to set up an event handler for when a key0 is added to a 1D Firebase item table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('addkey0', function(key0, value) {  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Perspective Image Plugin in Phaser 3 Game\nDESCRIPTION: Configures the perspective image plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-sprite.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport PerspectiveImagePlugin from 'phaser3-rex-plugins/plugins/perspectiveimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPerspectiveImagePlugin',\n            plugin: PerspectiveImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading InTouching Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the InTouching plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexintouchingplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexintouchingplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command for installing the Phaser 3 Rex Plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML5 Audio in Phaser 3\nDESCRIPTION: Configuration object to use HTML5 audio instead of the default Web Audio context by setting disableWebAudio to true.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ....\n    audio: {\n        disableWebAudio: true\n    }\n    // ....\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: JavaScript code to initialize a Firebase application with configuration details including API key, domain, database URL, and other required parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing TextBox Action Icon Element\nDESCRIPTION: Retrieves the action icon game object for direct manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar action = textBox.getElement('action');\n```\n\n----------------------------------------\n\nTITLE: Adding LZString Instance from Plugin\nDESCRIPTION: Shows how to create an LZString instance from the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lzstring.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar lzstring = scene.plugins.get('rexlzstringplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Ellipse Dimensions in Phaser 3\nDESCRIPTION: Modifies the width and height of an ellipse directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.width = width;\nellipse.height = height;\n```\n\n----------------------------------------\n\nTITLE: Alternative Configuration for Inc-Dec Number Input in Phaser 3 Tweaker\nDESCRIPTION: An alternative approach to create a number input with increment and decrement buttons using an object configuration. This method explicitly specifies binding target and key, allowing for deferred binding setup.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput({\n    bindingTarget: object,\n    bindingKey: key,\n    // view: 'incdec',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    // min: undefined, \n    // max: undefined,\n    // step: 1,\n\n    // format: function(value) { return s; },\n    // inputTextReadOnly: false,\n    \n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating PathFollower Instance\nDESCRIPTION: Creates a new path follower instance with configuration options including path, rotation, and spacing settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pathfollower.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar pathFollower = scene.plugins.get('rexPathFollower').add(gameObject, {\n    // path: path,          // path object\n    // t: 0,                // t: 0~1\n    // rotateToPath: false,\n    // rotationOffset: 0,\n    // angleOffset: 0,\n\n    // spacedPoints: false,\n    // spacedPoints: {\n    //     divisions: undefined,\n    //     stepRate: 10,\n    // }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Ended Event in Youtube Player for Phaser 3\nDESCRIPTION: Event handler for when the Youtube video playback ends.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('ended', function(player){ }, scope);\n```\n\n----------------------------------------\n\nTITLE: Installing TextPage Plugin via NPM Configuration in Phaser 3\nDESCRIPTION: Code to install the TextPage plugin through NPM and configure it in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textpage.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TextPagePlugin from 'phaser3-rex-plugins/plugins/textpage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTextPage',\n            plugin: TextPagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar page = scene.plugins.get('rexTextPage').add(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting User with Object Syntax\nDESCRIPTION: Alternative method to set a user for the leaderboard using an object with userID and userName properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.setUser({\n    userID: userID,\n    userName: userName\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing Data in Question Manager (JavaScript)\nDESCRIPTION: Illustrates how to increase a numeric value for a specific key in the Question Manager's data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nquestionManager.incData(key, inc, defaultValue);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Shows the NPM command to install the required Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Leaving the Online User List\nDESCRIPTION: JavaScript code showing how to leave an online user list with promise handling for success and error cases.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.leave()\n// .then(function() { })\n// .catch(function() { })\n```\n\n----------------------------------------\n\nTITLE: Importing Perspective Class\nDESCRIPTION: Instructions for importing the ContainerPerspective class directly and creating an instance\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-perspective.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ContainerPerspective } from 'phaser3-rex-plugins/plugins/perspectiveimage.js';\n// var container = scene.add.rexContainerLite(x, y);\nvar perspective = new ContainerPerspective(container, config);\n```\n\n----------------------------------------\n\nTITLE: Class Import Usage\nDESCRIPTION: Demonstrates importing and using the Hexagon class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-hexagon.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Hexagon from 'phaser3-rex-plugins/plugins/hexagon.js';\nvar hexagon = new Hexagon(x, y, size, orientationType);\n```\n\n----------------------------------------\n\nTITLE: Setting Bob Object Flip State in Phaser 3\nDESCRIPTION: Sets the flip state of a Bob object along both axes. This allows mirroring the texture horizontally, vertically, or both.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nbob.setFlip(boolX, boolY);\n// bob.setFlipX(boolean);\n// bob.setFlipY(boolean);\n// bob.flipX = flipX;\n// bob.flipY = flipY;\n```\n\n----------------------------------------\n\nTITLE: Creating Tag Text with Object Configuration\nDESCRIPTION: Creates a Tag Text object using object configuration with position, text content, and style settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.rexTagText({\n    x: 0,\n    y: 0,\n    text: '',\n    style: {\n        fontSize: '64px',\n        fontFamily: 'Arial',\n        color: '#ffffff',\n        align: 'center',\n        backgroundColor: '#ff00ff',\n        tags: {}\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Instance in JavaScript\nDESCRIPTION: Demonstrates how to create an instance of a custom Dialog class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = new MyDialog(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the rex plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating Youtube Player Instance with Class in Phaser 3\nDESCRIPTION: Code to manually create a Youtube Player instance using the imported class and add it to a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar youtubePlayer = new YoutubePlayer(scene, x, y, width, height, config);\nscene.add.existing(youtubePlayer);\n```\n\n----------------------------------------\n\nTITLE: Creating Text Area Using Direct Class Import\nDESCRIPTION: Creates a text area UI component by instantiating the TextArea class directly and adding it to the scene. This approach provides more control over the object lifecycle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar textArea = new TextArea(scene, config);\nscene.add.existing(textArea);\n```\n\n----------------------------------------\n\nTITLE: Adding Tab Panel to Tweaker\nDESCRIPTION: Creates a tabbed interface with multiple pages, each containing its own tweaker elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar childrenTweakers = tweaker.addTab({\n    pages: [\n        {\n            title: titleA, \n            // show: false\n        },\n        {\n            title: titleB\n            // show: false\n        },\n        // ...\n    ]\n});\n\n// childrenTweakers[0].addInput(...)\n// childrenTweakers[1].addInput(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Instance in Phaser 3\nDESCRIPTION: Demonstrates how to create and configure a Button instance with various options such as enable state, mode, and click interval.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = scene.plugins.get('rexButton').add(gameObject, {\n    // enable: true,\n    // mode: 1,              // 0|'press'|1|'release'\n    // clickInterval: 100    // ms\n    // threshold: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Programmatically Triggering Button Click Event in DropDownList\nDESCRIPTION: Manually triggers a button click event for a specific button index or the currently focused button.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.emitButtonClick(index);\n// dropDownList.emitButtonClick();\n```\n\n----------------------------------------\n\nTITLE: Handling TextBox Page End Event\nDESCRIPTION: Sets up an event handler for when typing reaches the last character of the current page, allowing special handling for the last page.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.on('pageend', function() {\n    if (textBox.isLastPage) {\n        // ...            \n    }\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Removing Glow Effect from a Camera\nDESCRIPTION: Removes the glow effect from a Phaser 3 camera using the plugin's remove method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexGlowFilterPipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Loading Toast Plugin in Phaser Scene\nDESCRIPTION: Code for loading the minified version of the Rex UI plugin in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-toast.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Applying Glow Filter to Camera using Minified Plugin\nDESCRIPTION: Applies the glow filter effect to a camera using the minified plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexglowfilter2pipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Display Size Directly\nDESCRIPTION: Sets the display width and height of the toggle-switch directly through properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.displayWidth = width;\ntoggleSwitch.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Manipulating Swirl Properties\nDESCRIPTION: Examples of getting and setting various swirl effect properties like radius, rotation, and center position\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-swirl.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Get/Set radius\nvar radius = pipelineInstance.radius;\npipelineInstance.radius = radius;\npipelineInstance.setRadius(radius);\n\n// Get/Set rotation\nvar rotation = pipelineInstance.rotation;\npipelineInstance.rotation = rotation;\npipelineInstance.setRotation(rotation);\n\n// Get/Set center position\nvar x = pipelineInstance.centerX;\nvar y = pipelineInstance.centerY;\npipelineInstance.setCenter(x, y);\n```\n\n----------------------------------------\n\nTITLE: Named Element Access in Phaser3\nDESCRIPTION: Methods to retrieve elements by their name, with optional recursive search through children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = label.getElement('#' + name);\n// var gameObject = label.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = label.getByName(name);\n// var gameObject = label.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Casting a Ray and Handling Results\nDESCRIPTION: Demonstrates how to cast a ray in a specific direction and handle the collision results, including information about the hit object and reflection angle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = raycaster.rayToward(x, y, angle);\n```\n\n----------------------------------------\n\nTITLE: Configuring Touch State Plugin in Phaser 3 Game\nDESCRIPTION: Demonstrates how to include the Touch State plugin in the global plugins configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/touchstate.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport TouchStatePlugin from 'phaser3-rex-plugins/plugins/touchstate-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTouchState',\n            plugin: TouchStatePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Rotating a Triangle Around a Point in Phaser 3\nDESCRIPTION: Rotates the triangle around a specified point by the given angle in radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = Phaser.Geom.Triangle.RotateAroundPoint(triangle, point, angle);\n```\n\n----------------------------------------\n\nTITLE: Managing All Pipeline Effects in Phaser 3\nDESCRIPTION: Methods to enable or disable all effects simultaneously in a pipeline instance. These methods provide a convenient way to toggle all visual effects without controlling each one individually.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setEnable();\n// pipelineInstance.setEnable(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setEnable(false);\n```\n\n----------------------------------------\n\nTITLE: Loading Viewport Coordinate Plugin in Phaser 3 Preload Stage\nDESCRIPTION: Loads the minified version of the Viewport Coordinate plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/viewport-coordinate.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexviewportcoordinateplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexviewportcoordinateplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Audio Sprites in Phaser 3\nDESCRIPTION: Method to load audio sprites, which are single audio files containing multiple sound effects with marker definitions for each section.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.audioSprite(key, urls, markersConfig, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring InTouching Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and adds the InTouching plugin to the global plugins in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport InTouchingPlugin from 'phaser3-rex-plugins/plugins/intouching-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexInTouchingn',\n            plugin: InTouchingPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Using ScaleDownDestroy with Imported Class\nDESCRIPTION: Scales down a game object and then destroys it using the imported class function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nScaleDownDestroy(gameObject, duration);\n```\n\n----------------------------------------\n\nTITLE: Accessing TCRP Player State\nDESCRIPTION: Demonstrates how to check the current state of the TCRP player including play status and current time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPlaying = player.isPlaying;\nvar completed = player.completed;\nvar now = player.now;\n```\n\n----------------------------------------\n\nTITLE: Setting Body Offset in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the offset of a physics body relative to its game object, allowing fine-tuning of collision detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setOffset(x, y);\n```\n\n----------------------------------------\n\nTITLE: Loading Retro Font Image\nDESCRIPTION: Load an image to be used as a retro bitmap font texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n```\n\n----------------------------------------\n\nTITLE: Accessing Rhombus Properties in Phaser 3\nDESCRIPTION: Shows how to access various properties of a Rhombus object, including position, size, and edges.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rhombus.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar centerX = rhombus.centerX;\nvar centerY = rhombus.centerY;\n\nvar top = rhombus.top;\nvar left = rhombus.left;\nvar right = rhombus.right;\nvar bottom = rhombus.bottom;\n\nvar width = rhombus.width;\nvar height = rhombus.height;\n\nvar edge01 = rhombus.getLineA();\nvar edge12 = rhombus.getLineB();\nvar edge23 = rhombus.getLineC();\nvar edge34 = rhombus.getLineD();\n// or\nvar edge = rhombus.getEdge(edgeIdx);\n// var out = rhombus.getEdge(edgeIdx, out);\n```\n\n----------------------------------------\n\nTITLE: Managing Projection Property of IsoTriangle in Phaser 3\nDESCRIPTION: Gets or sets the projection value of an iso-triangle, which controls how the 3D effect is rendered.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isotriangle.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar projection = isoTriangle.projection;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoTriangle.setProjection(value)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoTriangle.projection = value;\n```\n\n----------------------------------------\n\nTITLE: Adding Bracket Parser 2 Instance in Phaser 3\nDESCRIPTION: Shows how to add a Bracket Parser 2 instance to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = scene.plugins.get('rexbracketparser2plugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Importing TCRP Class Directly\nDESCRIPTION: Demonstrates importing the TCRP class directly without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport TCRP from 'phaser3-rex-plugins/plugins/arcadetcrp.js';\n```\n\n----------------------------------------\n\nTITLE: Creating SimpleTextBox via ES6 Import in Phaser 3\nDESCRIPTION: Code for importing the SimpleTextBox class directly and creating an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletextbox.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SimpleTextBox } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring rexUI Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Code for importing and configuring the rexUI plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletextbox.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Configuration\nDESCRIPTION: Shows how to install and configure the plugin using NPM and game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/circlemaskimage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport CircleMaskImagePlugin from 'phaser3-rex-plugins/plugins/circlemaskimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCircleMaskImagePlugin',\n            plugin: CircleMaskImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Ellipse Size Management\nDESCRIPTION: Methods for getting and setting the size dimensions of the ellipse.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-ellipse.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = ellipse.width;\nvar height = ellipse.height;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.setSize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Loading Dynamic Text Plugin in Phaser3\nDESCRIPTION: Shows how to load the minified plugin file in the preload stage and create a dynamic text object\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexdynamictextplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexdynamictextplugin.min.js', true);\nvar txt = scene.add.rexDynamicText(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm\nDESCRIPTION: Command to install Rex plugins package from npm for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-monopoly.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Target for Interception in Phaser 3\nDESCRIPTION: Demonstrates how to set, disable, and get the target for the Interception behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interception.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ninterception.setTarget(gameObject);\n// or\ninterception.target = gameObject;\n\n// Disable\ninterception.setTarget(undefined);\n// or\ninterception.target = undefined;\n\n// Get\nvar target = interception.target;\n```\n\n----------------------------------------\n\nTITLE: Printing BBCode Log Message\nDESCRIPTION: Commands to print BBCode-formatted messages to the console, with simple and advanced configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\nlog\n  text=...\n```\n\nLANGUAGE: markdown\nCODE:\n```\nlog\n  text=...\n  // logType='log'\n  // showTitle=true\n  // title\n  // titleColor='green'\n```\n\n----------------------------------------\n\nTITLE: Offsetting an Ellipse by a Point in Phaser 3\nDESCRIPTION: Moves an ellipse by the x and y values of a point object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Ellipse.OffsetPoint(ellipse, point); // ellipse.x += point.x, ellipse.y += point.y\n```\n\n----------------------------------------\n\nTITLE: Size and Color Operations\nDESCRIPTION: Methods for setting texture size and filling with color. Includes options for partial fills with alpha values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamic-texture.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.setSize(width, height);\n\ntexture.fill(rgb);\n// texture.fill(rgb, alpha, x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Adding Ship Behavior via Imported Plugin\nDESCRIPTION: Adds ship behavior to a game object after importing the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar ship = scene.plugins.get('rexShip').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the rex plugins package from npm, which includes the loading-progress plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Clearing Circle Fill Color in Phaser 3\nDESCRIPTION: Removes the fill style from a circle game object, making it transparent.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.setFillStyle();\n```\n\n----------------------------------------\n\nTITLE: Example of Abstract Equality Filtering\nDESCRIPTION: Example of how to use abstract equality to match documents where numeric and string values are considered equal (e.g., 20 and '20').\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar results = coll.find({age: {'$aeq': 20}});  // age == '20' or age == 20\n```\n\n----------------------------------------\n\nTITLE: Setting Delimiters for Text Parsing in Phaser 3\nDESCRIPTION: Sets the delimiters used for parsing special text segments. Can be provided as a pair of strings or an array of two strings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setDelimiters(delimiters);  // '<>', or ['<', '>']\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setDelimiters(delimiterLeft, delimiterRight); // '<', '>'\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration\nDESCRIPTION: Configures the hexagon plugin in the game configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-hexagon.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport HexagonPlugin from 'phaser3-rex-plugins/plugins/hexagon-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexHexagon',\n            plugin: HexagonPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Touch Event Stop Plugin via Minify File\nDESCRIPTION: Code to load the touch event stop plugin using a minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/toucheventstop.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextoucheventstopplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextoucheventstopplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Separator Configuration in JavaScript\nDESCRIPTION: Configuration object for adding a separator element to the Tweaker component, which creates a visual divider between other UI elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{ $type: 'separator' }\n```\n\n----------------------------------------\n\nTITLE: Loading AwayTime Plugin via Minify File in Phaser3\nDESCRIPTION: Loads the AwayTime plugin using the minify file approach in a Phaser3 scene's preload stage. This allows access to the plugin's functionality through the scene's plugin manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexawaytimeplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexawaytimeplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Scenario Plugin in Phaser 3\nDESCRIPTION: Demonstrates how to load the CSV Scenario plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvscenario.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcsvscenarioplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcsvscenarioplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Event Sheet Structure in Markdown\nDESCRIPTION: Example of the main headings structure for an event sheet in Markdown format, including title, settings, conditions, and actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n# Title\n\ngroupName\nparallel\nactive=false\nonce\n\n## [Condition]\n\ncoin > 5\n\n## Script\n\n## [Catch]\n\n```\n\n----------------------------------------\n\nTITLE: Cloning an Ellipse in Phaser 3\nDESCRIPTION: Creates a copy of an existing ellipse geometry.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ellipse1 = Phaser.Geom.Ellipse.Clone(ellipse0);\n```\n\n----------------------------------------\n\nTITLE: Loading All Headers for Current Owner\nDESCRIPTION: JavaScript code to load all file headers belonging to the current file owner, with promise handling for success and error cases.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.loadHeaders()\n    .then(function(result) { \n        // var headers = result.headers;\n        // var userID = result.userID;\n    })\n    .catch(function(result) {\n        // var error = result.error;\n        // var userID = result.userID;\n    })\n```\n\n----------------------------------------\n\nTITLE: Importing Bejeweled Template in Phaser 3 Game Configuration\nDESCRIPTION: Imports the BoardPlugin and Bejeweled template, and configures them in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nimport Bejeweled from 'phaser3-rex-plugins/templates/bejeweled/Bejeweled.js';\n\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Slider Enable State in TextArea\nDESCRIPTION: Shows how to check if the slider component is currently enabled for the TextArea.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = textArea.sliderEnable;\n```\n\n----------------------------------------\n\nTITLE: Icon Texture Management in Phaser3 Label\nDESCRIPTION: Methods for handling icon textures including setting and getting texture properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setTexture(key);\n// label.setTexture(key, frame);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setTexture(texture);\n// label.setTexture(texture, frame);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar texture = label.texture;\nvar frame = label.frame;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textureKey = label.texture.key;\nvar frameName = label.frame.name;\n```\n\n----------------------------------------\n\nTITLE: Applying Shake Effect to Background Game Object\nDESCRIPTION: Command for applying a shake effect to a Background game object. Parameters include duration, magnitude of the shake, and whether to wait for completion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/background-commands.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nNAME.shake\n  duration=\n  magnitude=\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Creating an Ellipse with Round Rectangle Plugin\nDESCRIPTION: Creates an ellipse by setting width and height to undefined, and providing radiusX and radiusY values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = scene.add.rexRoundRectangle(x, y, undefined, undefined, {x: radiusX, y: radiusY}, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: JavaScript code to initialize a Firebase application with configuration parameters including API key, domain, database URL, and other required settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Applying HSL Adjust Effect to Camera in Phaser 3\nDESCRIPTION: Apply the HSL adjust effect to a camera using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-hsladjust.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexhsladjustpipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Run Commands Plugin via Minified File in Phaser 3\nDESCRIPTION: Loads the Run Commands plugin using its minified file during the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/runcommands.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexruncommandsplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexruncommandsplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rex UI Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Sets up the Rex UI plugin in the Phaser 3 game configuration, making UI components available in all scenes. This imports the plugin from the installed npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Tile Scale\nDESCRIPTION: Code showing how to set the scale of tiles in a repeat image.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTileScale(scaleX, scaleY);\n```\n\n----------------------------------------\n\nTITLE: Creating a Rhombus with Round Rectangle Plugin\nDESCRIPTION: Creates a rhombus by setting width and height to undefined, providing a radius and setting iteration to 0.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = scene.add.rexRoundRectangle(x, y, undefined, undefined, {\n    radius: radius,\n    iteration: 0\n}, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Applying Cross-Stitching Effect to Game Object using Global Plugin\nDESCRIPTION: Applies the cross-stitching effect to a game object using the globally configured plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexCrossStitchingPipeline').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Point Light Color with Individual RGB Properties\nDESCRIPTION: Shows how to set the color of a point light by individually setting its red, green, and blue color properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npointLight.color.r = red;\npointLight.color.g = green;\npointLight.color.b = blue;\n```\n\n----------------------------------------\n\nTITLE: Creating a TransitionImagePack from JSON in Phaser 3\nDESCRIPTION: Shows how to create a TransitionImagePack instance using the scene.make factory with JSON configuration including position, texture, and other settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.make.rexTransitionImagePack({\n    x: 0,\n    y: 0,\n    key: null,\n    frame: null,\n\n    // duration: 1000,\n    // width: undefined, height: undefined,\n\n    // origin: {x: 0.5, y: 0.5},\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Seeking to Specific Time in TCRP Recording\nDESCRIPTION: Seeks to a specific elapsed time in the recording. This allows you to position the recorder at a particular point in time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.seek(time);   // elapsed time in ms\n```\n\n----------------------------------------\n\nTITLE: Using Await Loader in Preload Stage\nDESCRIPTION: Examples of starting loading tasks using the Await Loader in the preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaitloader.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.rexAwait(function(successCallback, failureCallback) {\n    // successCallback();\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar callback = function(successCallback, failureCallback) {\n    // successCallback();\n};\nscene.load.rexAwait(key, {\n    callback: callback,\n    // scope: scope\n});\n```\n\n----------------------------------------\n\nTITLE: Pausing Bracket Parser 2 Until Event\nDESCRIPTION: Shows how to pause the Bracket Parser 2 until a specific event is emitted.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nparser.pauseUntilEvent(eventEmitter, eventName);\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase SDKs for NPM Import Method\nDESCRIPTION: HTML code for importing Firebase core SDK and Firebase Database service when using the NPM import approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/7.7.0/firebase-app.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/7.7.0/firebase-database.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Loading Line Progress Canvas Plugin in Phaser 3\nDESCRIPTION: Demonstrates how to load the Line Progress Canvas plugin in the preload stage of a Phaser 3 game scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-lineprogress.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexlineprogresscanvasplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexlineprogresscanvasplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM for Youtube Player\nDESCRIPTION: NPM command to install the phaser3-rex-plugins package which contains the Youtube Player plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading Checkbox Plugin via Minified File in Phaser 3\nDESCRIPTION: Shows how to load the checkbox plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcheckboxplugin', 'https://raw.githubusercontent.com/rexrainbow/    phaser3-rex-notes/master/dist/rexcheckboxplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Recorder via Direct Class Import\nDESCRIPTION: Creates a TCRP recorder instance directly using the imported class. This method gives you full control over the recorder's lifecycle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar recorder = new TCRP.Recorder(scene);\n```\n\n----------------------------------------\n\nTITLE: Getting Normalized Canvas Height\nDESCRIPTION: Method that returns the normalized canvas height for the model. The height is normalized by dividing the raw canvas height by the pixels per unit value from the canvas info.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\npublic getCanvasHeight(): number {\n  if (this._model == null) {\n    return 0.0;\n  }\n  return (\n    this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Point Light Position with Properties\nDESCRIPTION: Shows how to set the position of a point light by directly modifying its x and y properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npointLight.x = x;\npointLight.y = y;\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask from Line\nDESCRIPTION: How to create a bitmap mask from a line object for masking other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/line.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = line.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Importing Rhombus Class in Phaser 3\nDESCRIPTION: Imports the Rhombus class from the Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rhombus.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Rhombus from 'phaser3-rex-plugins/plugins/rhombus.js';\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Full Window Rectangle Class\nDESCRIPTION: Creates a custom class that extends the FullWindowRectangle with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyFullWindowRectangle extends RexPlugins.GameObjects.FullWindowRectangle {\n    constructor(scene, fillColor, fillAlpha) {\n        super(scene, fillColor, fillAlpha);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button State Changes in Dialog - JavaScript\nDESCRIPTION: Event listener for button state changes in radio buttons or checkboxes. Provides the button, group name, index, current value, and previous value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.on('button.statechange', function(button, groupName, index, value, previousValue) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling Event Sheet Manager Events in JavaScript\nDESCRIPTION: Examples of event listeners for various event sheet manager events including start, complete, enter, exit, and catch events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.on('start', function(groupName, eventSheetManager){ \n\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.on('complete', function(groupName, eventSheetManager){ \n\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.on('eventsheet.enter', function(title, groupName, eventSheetManager){ \n\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.on('eventsheet.exit', function(title, groupName, eventSheetManager){ \n\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.on('label.enter', function(headingTitle, eventSheetTitle, groupName, eventSheetManager){ \n\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.on('label.exit', function(headingTitle, eventSheetTitle, groupName, eventSheetManager){ \n\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.on('eventsheet.catch', function(title, groupName, eventSheetManager){ \n\n});\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Cursor in Hidden Input Text for Phaser 3\nDESCRIPTION: Shows how to set and get the cursor character for the hidden input text object in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/hiddeninputtext.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nhiddenInputText.setCursor(s);\nvar cursor = hiddenInputText.cursor;\n```\n\n----------------------------------------\n\nTITLE: Adding CSV Scenario Object to Phaser 3 Scene\nDESCRIPTION: Shows how to add a CSV Scenario object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvscenario.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar scenario = scene.plugins.get('rexcsvscenarioplugin').add(scene);\n```\n\n----------------------------------------\n\nTITLE: Using Canvas Data Plugin\nDESCRIPTION: Basic usage examples for canvas data plugin methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-data.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvasData = scene.plugins.get('rexcanvasdataplugin').canvasObjectToBitmap(gameObject);\nvar canvasData = scene.plugins.get('rexcanvasdataplugin').textureTColorMap(textureKey, frameName);\n```\n\n----------------------------------------\n\nTITLE: Creating a Geometry Mask from Cover\nDESCRIPTION: Shows how to create a geometry mask from a Cover object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = cover.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Quest Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the Dialog Quest plugin in the main game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dialog-quest.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nimport DialogQuest from 'phaser3-rex-plugins/templates/dialog-quest/DialogQuest.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Installing the Board Plugin via NPM\nDESCRIPTION: Command to install the Phaser3 Rex plugins package from NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagonmap.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading FishEye Plugin (Minified Version) in Phaser 3\nDESCRIPTION: Loads the minified version of the FishEye pipeline plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfisheyepipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfisheyepipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Getting Listeners for an Event in Phaser 3\nDESCRIPTION: Shows how to retrieve all listeners for a specific event in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar listeners = ee.listeners(eventName);\n```\n\n----------------------------------------\n\nTITLE: Scrolling TextAreaInput by Percentage in JavaScript\nDESCRIPTION: These snippets demonstrate how to scroll the TextAreaInput content by percentage, including setting, clamping, and getting the scroll position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.t = t;  // t: 0~1\n// textAreaInput.setT(t);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.setT(t, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar t = textAreaInput.t;\n```\n\n----------------------------------------\n\nTITLE: Using Phaser.Math.RoundTo with Custom Precision in JavaScript\nDESCRIPTION: Rounds a value to a specified precision. The 'place' parameter controls the rounding position (positive for units, negative for decimals), while 'base' defines the numbering system (default is 10).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/round-to.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.RoundTo(value, place, base);\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Cut Images in Phaser 3 Using Plugin Method\nDESCRIPTION: Shows how to use the loaded plugin to cut game objects into a grid of images.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridcutimage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar images = scene.plugins.get('rexgridcutimageplugin').gridCut(gameObjects, columns, rows, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Tweaker\nDESCRIPTION: Creates multiple column layout for tweaker elements with configurable widths and expansion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar childrenTweakers = tweaker.addColumns({\n    // title: title,\n\n    columns: [\n        {\n            // width: 0,\n            // expand: true\n        },\n        {\n            // width: 0,\n            // expand: true\n        },\n    ]\n});\n\n// childrenTweakers[0].addInput(...)\n// childrenTweakers[1].addInput(...)\n```\n\n----------------------------------------\n\nTITLE: Loading text edit plugin via minify file\nDESCRIPTION: Loading the text edit plugin in the preload stage of a Phaser scene using the minified file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextexteditplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextexteditplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Adding Round Rectangle Shape (Minify Plugin Method)\nDESCRIPTION: Creates a round rectangle shape using the loaded minified plugin in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = scene.add.rexRoundRectangle(x, y, width, height, radius, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer-out Button Events in Phaser3 Menu\nDESCRIPTION: Event handler for pointer-out events (when pointer leaves a button) in a menu system. Provides access to the button object, its index, and the pointer that triggered the event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.on('button.out', function(button, index, pointer, event) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Removing CRT Effect from Camera\nDESCRIPTION: Removes the previously applied CRT post-processing effect from a camera using the plugin's remove method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexCrtPipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Setting Collision Category in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the collision category for a physics body. A body belongs to only one collision category at a time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setCollisionCategory(category);\n```\n\n----------------------------------------\n\nTITLE: Importing Video Plugin via NPM Configuration\nDESCRIPTION: Configure the video plugin in the game configuration after installing via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rexvideo.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport VideoPlugin from 'phaser3-rex-plugins/plugins/video-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexVideo',\n            plugin: VideoPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Image Chess Object to Board in Phaser 3\nDESCRIPTION: Creates an Image chess object and adds it to the board using the rexBoard plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-image.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = scene.rexBoard.add.image(board, tileX, tileY, tileZ, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Options for Youtube Player in Phaser 3\nDESCRIPTION: Default configuration object for the Youtube Player, showing all available options including position, size, video ID, and playback controls.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    x: 0,\n    y: 0,\n    width: undefined,\n    height: undefined,\n\n    videoId: '',\n    autoPlay: true,\n    controls: false,\n    keyboardControl: true,\n    modestBranding: false,\n    loop: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning a Triangle in Phaser 3\nDESCRIPTION: Creates a copy of an existing Triangle object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle1 = Phaser.Geom.Triangle.Clone(triangle0);\n```\n\n----------------------------------------\n\nTITLE: Loading Phaser3 Slider Plugin\nDESCRIPTION: Loads the minified slider plugin in the scene's preload stage\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/slider.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexsliderplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexsliderplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Cross Transition for Named Sprite\nDESCRIPTION: Transitions between images for a named sprite with various effects like fade, slide, zoom or mask transitions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_14\n\nLANGUAGE: phaser\nCODE:\n```\nNAME.cross\n  name=\n  expression=\n  duration=\n  mode=fade\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Setting Cost Function for Field of View in Phaser 3\nDESCRIPTION: Demonstrates how to set a cost function for the Field of View object, which determines the visibility cost for each tile.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfieldOfView.setCostFunction(cost);\n// or\nfieldOfView.setCostFunction(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Configuring Folder Styles in Phaser 3 Rex UI (JavaScript)\nDESCRIPTION: Defines the style configuration for folder components, including title background, text styling, icon properties, spacing, and expand/collapse icon settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        folder: {\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n\n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                },\n\n                expandedIcon: {\n                    color: undefined,\n                    alpha: 1,\n\n                    strokeColor: undefined,\n                    strokeAlpha: 1,\n                    strokeWidth: 1,\n                    arrowOnly: false,\n\n                    easeDuration: 0,\n                }\n            },\n\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            space: {\n                left: 0, right: 0, top: 0, bottom:0, \n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ItemTable Instance Directly\nDESCRIPTION: JavaScript code to create an instance of the ItemTable class directly without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = new ItemTable(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Properties of Custom Game Objects\nDESCRIPTION: Commands to set properties of a specific game object, all game objects of a type, or all game objects of a type excluding a specific one.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\nNAME.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n```\n\nLANGUAGE: markdown\nCODE:\n```\nGOTYPE.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n```\n\nLANGUAGE: markdown\nCODE:\n```\n!NAME.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n```\n\n----------------------------------------\n\nTITLE: Smoothing Polygon Shape in Phaser 3\nDESCRIPTION: Applies Chaikin's smoothing algorithm to the polygon's points, creating a more rounded shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Polygon.Smooth(polygon)\n```\n\n----------------------------------------\n\nTITLE: Setting Face Direction for Monopoly Movement\nDESCRIPTION: Sets the face direction for movement in the Monopoly behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-monopoly.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmonopoly.setFace(direction);\n```\n\n----------------------------------------\n\nTITLE: Applying HSL Adjust Effect with Configuration in Phaser 3\nDESCRIPTION: Apply the HSL adjust effect to a game object with specific configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-hsladjust.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexHslAdjustPipeline').add(gameObject, {\n    // hueRotate: 0,\n    // satAdjust: 1,\n    // lumAdjust: 0.5,\n\n    // name: 'rexHslAdjustPostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling IsoTriangle Orientation in Phaser 3\nDESCRIPTION: Gets or sets whether the iso-triangle is rendered upside down (reversed).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isotriangle.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar isReversed = isoTriangle.isReversed;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoTriangle.setReversed(reversed);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoTriangle.reversed = reversed;\n```\n\n----------------------------------------\n\nTITLE: Toggling DropDownList Panel State\nDESCRIPTION: Toggles the dropdown list panel between open and closed states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.toggleListPanel();\n```\n\n----------------------------------------\n\nTITLE: Importing Kawase-blur Pipeline Plugin in Phaser 3 Configuration\nDESCRIPTION: Shows how to import and configure the Kawase-blur pipeline plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-kawaseblur.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport KawaseBlurPipelinePlugin from 'phaser3-rex-plugins/plugins/kawaseblurpipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexKawaseBlurPipeline',\n            plugin: KawaseBlurPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Transition Target Texture Information in Phaser 3 Dissolve Effect\nDESCRIPTION: Retrieves the texture key and frame name of the transition target texture from a dissolve pipeline instance. These values identify the texture being used as the transition target.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar textureKey = pipelineInstance.toFrame.texture.key;\nvar frameName = pipelineInstance.toFrame.name;\n```\n\n----------------------------------------\n\nTITLE: Applying Glow Effect to a Camera using Imported Plugin\nDESCRIPTION: Applies the glow effect to a Phaser 3 camera using the plugin imported and configured globally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGlowFilterPipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Handling Any Tag End Events in Bracket Parser 2\nDESCRIPTION: Demonstrates how to handle any tag end events with payload in Bracket Parser 2, including accessing previous tag and content information.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nparser.on('-', function(tagName, payload){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Loading Rex UI Plugin (Minified)\nDESCRIPTION: Loads the minified Rex UI plugin in the preload stage of a Phaser 3 scene and creates a badge label instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-badgelabel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar badgeLabel = scene.rexUI.add.badgeLabel(config);\n```\n\n----------------------------------------\n\nTITLE: Applying Cross-Stitching Effect to Game Object using Plugin Reference\nDESCRIPTION: Applies the cross-stitching post-processing effect to a specific game object using the loaded plugin reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexcrossstitchingpipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Demonstrates the npm command to install the rex plugins package, which includes the GridTable plugin. This is a prerequisite for importing the plugin or individual classes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading GroupNavigator Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the GroupNavigator plugin from a minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexgroupnavigatorplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgroupnavigatorplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Importing PerspectiveSprite Class in Phaser 3\nDESCRIPTION: Imports the PerspectiveSprite class from the Rex plugins package for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-sprite.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PerspectiveSprite } from 'phaser3-rex-plugins/plugins/perspectiveimage.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring List Input Row Styles in Phaser 3\nDESCRIPTION: Defines the styling configuration for list input rows, including background, title, and list item properties. Contains settings for text formatting, backgrounds, icons, spacing, and layout proportions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        inputRow: {\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    \n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n    \n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                }\n            },\n\n            list: {\n                label: {\n                    background: {\n                        radius: 0,\n                        // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                        color: undefined,\n                        alpha: undefined,\n                        strokeColor: undefined,\n                        strokeAlpha: undefined,\n                        strokeWidth: undefined,\n                    },\n\n                    text: {\n                        fontFamily: 'Courier',\n                        fontSize: '16px',\n                        fontStyle: '',\n                        backgroundColor: null,\n                        color: '#fff',\n                        stroke: '#fff',\n                        strokeThickness: 0,\n                        shadow: {\n                            offsetX: 0,\n                            offsetY: 0,\n                            color: '#000',\n                            blur: 0,\n                            stroke: false,\n                            fill: false\n                        },                  \n                        padding: {\n                            left: 0,\n                            right: 0,\n                            top: 0,\n                            bottom: 0,\n                        },\n                        // more text styles\n                    },\n\n                    iconSize: undefined,\n                    iconWidth: undefined, iconHeight: undefined,\n\n                    space: {\n                        left: 0, right: 0, top: 0, bottom:0, \n                        icon: 0, text: 0\n                    }\n\n                },\n\n                button: {\n                    background: {\n                        radius: 0,\n                        // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                        color: undefined,\n                        alpha: undefined,\n                        strokeColor: undefined,\n                        strokeAlpha: undefined,\n                        strokeWidth: undefined,\n    \n                        'hover.color': undefined,\n                        'hover.alpha': undefined,\n                        'hover.strokeColor': undefined,\n                        'hover.strokeAlpha': undefined,\n                        'hover.strokeWidth': undefined,\n                    },\n\n                    text: {\n                        fontFamily: 'Courier',\n                        fontSize: '16px',\n                        fontStyle: '',\n                        backgroundColor: null,\n                        color: '#fff',\n                        stroke: '#fff',\n                        strokeThickness: 0,\n                        shadow: {\n                            offsetX: 0,\n                            offsetY: 0,\n                            color: '#000',\n                            blur: 0,\n                            stroke: false,\n                            fill: false\n                        },                  \n                        padding: {\n                            left: 0,\n                            right: 0,\n                            top: 0,\n                            bottom: 0,\n                        },\n                        // more text styles\n                    },\n\n                    iconSize: undefined,\n                    iconWidth: undefined, iconHeight: undefined,\n\n                    space: {\n                        left: 0, right: 0, top: 0, bottom:0, \n                        icon: 0, text: 0\n                    }\n                },\n\n                list: {\n                    alignParent: 'text',\n                    alignSide: 'left',\n                    expandDirection: 'down',\n                }\n            },\n\n            space: {\n                left: 0, right: 0, top: 0, bottom: 0,\n                title: 0\n            },\n            \n            proportion: {\n                title: 0, inputField: 0,\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Configuration for Boolean Input in Phaser 3 Tweaker\nDESCRIPTION: An alternative approach to create a boolean input using an object configuration. This method explicitly specifies binding target and key, with options for either checkbox or toggle switch styles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput({\n    bindingTarget: object,\n    bindingKey: key,\n    // view: 'boolean',\n    // view: 'toggleSwitch',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n    \n    // orientation: 'x',\n\n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle Animation Duration\nDESCRIPTION: Sets the animation duration for the toggle-switch animation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setToggleAnimationDuration(duration);\ntoggleSwitch.toggleAnimProgress = duration;\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox in Phaser3 Rex UI\nDESCRIPTION: Shows how to add a checkbox input with drawing checker path animation. This component provides an interactive checkbox that animates when toggled.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvar checkbox = scene.rexUI.add.checkbox(x, y, width, height, color, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Box Fill Style\nDESCRIPTION: Retrieves the current box fill color and alpha values for the checkbox.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = checkbox.boxFillColor;\nvar alpha = checkbox.boxFillAlpha;\n```\n\n----------------------------------------\n\nTITLE: Camera Mask Operations in Phaser 3\nDESCRIPTION: Methods for adding and clearing camera masks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera-effects.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setMask(mask);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.clearMask();\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox Display Size\nDESCRIPTION: Sets the display width and height of the checkbox using the setDisplaySize method, which affects scaling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setDisplaySize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Filtering Points Inside Triangle in Phaser 3\nDESCRIPTION: Filters an array of points to find those that lie inside the triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Geom.Triangle.ContainsArray(triangle, points, returnFirst);\n// var out = Phaser.Geom.Triangle.ContainsArray(triangle, points, returnFirst, out);\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrap Style Properties in JavaScript for Phaser 3 UI\nDESCRIPTION: Defines the complete style configuration for a wrap component in a UI tweaker. Includes settings for title appearance, background properties, spacing, and alignment of child elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        wrap: {\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n\n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                },\n\n                expandedIcon: {\n                    color: undefined,\n                    alpha: 1,\n\n                    strokeColor: undefined,\n                    strokeAlpha: 1,\n                    strokeWidth: 1,\n                    arrowOnly: false,\n\n                    easeDuration: 0,\n                }\n            },\n\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            space: {\n                item: 0, line: 0\n            },\n\n            align: 'justify-cneter'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Easing in Phaser 3 Sizer Plugin\nDESCRIPTION: Methods for easing data properties of a sizer object, including start, stop, and related events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.easeDataTo(key, value, duration);\n// sizer.easeDataTo(key, value, duration, ease);\n// sizer.easeDataTo({ key, value, duration, ease });\n// sizer.easeDataTo({ key, value, speed, ease });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.easeDataToPromise(key, value, duration, ease)\n    .then(function(){\n        // ...\n    })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.stopEaseData(key);           // Set to end value\n// sizer.stopEaseData(key, false); // Stop at current value\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.stopAllEaseData();           // Set to end value\n// sizer.stopAllEaseData(false);   // Stop at current value\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.on('easedata.' + key + '.complete', function(sizer) { });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.on('easedata.complete', function(key, sizer) { });\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase SDK and Plugin Scripts\nDESCRIPTION: HTML script tags for loading Firebase core SDK, database service, and Rex Firebase plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-itemtable.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/7.7.0/firebase-app.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/7.7.0/firebase-database.js\"></script>\n\n    <script src=\"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm\nDESCRIPTION: Command to install the Rex Plugins package, which includes the Wait Events plugin, using npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing Canvas Class in Phaser 3\nDESCRIPTION: Imports the Canvas class and adds a Canvas object to the Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Canvas from 'phaser3-rex-plugins/plugins/canvas.js';\n\nvar canvas = new Canvas(scene, x, y, width, height);\nscene.add.existing(canvas);\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Input Styles in Phaser3\nDESCRIPTION: Comprehensive style configuration object for range input components. Includes settings for background, title formatting, slider appearance, input text styling, and spacing/proportion controls. Each component supports detailed customization of colors, dimensions, typography, and layout properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        inputRow: {\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    \n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n    \n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                }\n            },\n\n            slider: {\n                track: {\n                    height: 0,\n\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n\n                indicator: {\n                    height: 0,\n\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n\n                thumb: {\n                    width: 0, height: 0,\n\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                }\n            },\n\n            inputText: {\n                background: {\n                    color: null,\n                    color2: null,\n                    horizontalGradient: true,\n\n                    stroke: null,\n                    strokeThickness: 2,\n\n                    cornerRadius: 0,\n                    cornerIteration: null\n                },\n                focusStyle: {\n                    // color:\n                    // color2:\n                    // horizontalGradient:\n\n                    // stroke:\n                    // strokeThickness:\n\n                    // cornerRadius:\n                    // cornerIteration:\n                },\n\n                style: {\n                    bold: false,\n                    italic: false,\n                    fontSize: '16px',\n                    fontFamily: 'Courier',\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadowColor: null,\n                    shadowOffsetX: 0,\n                    shadowOffsetY: 0,\n                    shadowBlur: 0,\n                    backgroundColor: null,\n                    backgroundHeight: undefined,\n                    backgroundBottomY: undefined,\n                    offsetX: 0,\n                    offsetY: 0\n                },\n                cursorStyle: {\n                    // bold:\n                    // italic:\n                    // fontSize:\n                    // fontFamily:\n                    // color:\n                    // stroke:\n                    // strokeThickness:\n                    // shadowColor:\n                    // shadowOffsetX:\n                    // shadowOffsetY:\n                    // shadowBlur:\n                    // backgroundColor:\n                    // backgroundHeight:\n                    // backgroundBottomY:\n                    // offsetX:\n                    // offsetY:\n                }\n            },\n\n            space: {\n                left: 0, right: 0, top: 0, bottom: 0,\n                title: 0\n            },\n            \n            proportion: {\n                title: 0, inputField: 0,\n                range: {\n                    slider: 0,\n                    inputText: 0,\n                }\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Installs the Rex plugins package from npm, which includes the clock plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Handling Key1 Removal in 2D Firebase Item Table\nDESCRIPTION: JavaScript code to set up an event handler for when a key1 is removed from a 2D Firebase item table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('removekey1', function(key0, key1) {  });\n```\n\n----------------------------------------\n\nTITLE: Starting TCRP Player Playback\nDESCRIPTION: Methods to start the TCRP player, with an optional parameter to specify a starting time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.start();\n// player.start(startAt);  // Start-at time in ms\n```\n\n----------------------------------------\n\nTITLE: Set Operations with UniqueItemList (JavaScript)\nDESCRIPTION: Shows set operations between two UniqueItemLists, including union, intersection, and difference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar listC = listA.union(listB);\n// listA.union(listB, listC);\nvar listC = listA.intersect(listB);\n// listA.intersect(listB, listC);\nvar listC = listA.difference(listB);\n// listA.difference(listB, listC);\n```\n\n----------------------------------------\n\nTITLE: Deleting Entire Board from LeaderBoard\nDESCRIPTION: JavaScript code to delete an entire board from the leaderboard based on board ID and tag, returning a Promise that resolves when deletion is complete.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.deleteBoard(boardID, tag)\n    .then(function(){ })\n    .catch(function(){ })\n```\n\n----------------------------------------\n\nTITLE: Accessing TextBox Title Element\nDESCRIPTION: Retrieves the title text game object for direct manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = textBox.getElement('title');\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Plugin in Game Configuration\nDESCRIPTION: Sets up the Firebase plugin in the global plugins configuration of the Phaser game instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport FirebasePlugin from 'phaser3-rex-plugins/plugins/firebase-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFirebase',\n            plugin: FirebasePlugin,\n            start: true\n        }]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TransitionImagePack Class in Phaser 3\nDESCRIPTION: Shows how to extend the TransitionImagePack class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTransitionImagePack extends TransitionImagePack {\n    constructor(scene, x, y, texture, frame, config) {\n        super(scene, x, y, texture, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar transitionimage = new MyTransitionImagePack(scene, x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Tweaker Object with Plugin Method\nDESCRIPTION: Code to add a tweaker object to the scene after importing the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar tweaker = scene.rexUI.add.tweaker(config);\n```\n\n----------------------------------------\n\nTITLE: Clearing Content Callback in Phaser3 Tag Player\nDESCRIPTION: Code to clear a previously set content callback function in the Tag Player, typically used when a custom tag closing event is encountered.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.setContentCallback();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pack JSON Data from Cache in Phaser 3\nDESCRIPTION: Shows how to access previously loaded file pack JSON data from the Phaser JSON cache using a key identifier.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.json;  // pack json is stored in json cache\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Importing Frame Manager Plugin in Phaser 3 Game Configuration (JavaScript)\nDESCRIPTION: Installs the Frame Manager plugin in the configuration of a Phaser 3 game and adds a frame manager object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/framemanager.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport FrameManagerPlugin from 'phaser3-rex-plugins/plugins/framemanager-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFrameManager',\n            plugin: FrameManagerPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar frameManager = scene.plugins.get('rexFrameManager').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Drawing Final Result to Screen\nDESCRIPTION: Method to draw the final processed image back to the screen.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.bindAndDraw(source);\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming Video in Phaser 3\nDESCRIPTION: Methods to pause and resume video playback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.setPaused();\n// video.setPaused(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.setPaused(false);\n```\n\n----------------------------------------\n\nTITLE: Creating Plane from JSON Configuration\nDESCRIPTION: Initializes a Plane object using a JSON configuration object that can specify position, texture, dimensions, and additional properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/plane.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar plane = scene.make.plane({\n    x: 0,\n    y: 0,\n    key: '',\n    // frame: '',\n    // width: 8,\n    // height: 8,\n    // tile: false,\n    // checkerboard: null,\n    // checkerboard: { color1, color2, alpha1, alpha2, height }\n\n    // angle: 0,\n    // alpha: 1,\n    // scale : {\n    //    x: 1,\n    //    y: 1\n    //},\n    // origin: {x: 0.5, y: 0.5},\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Texture in Phaser3\nDESCRIPTION: Creates a new dynamic texture with specified key, width and height. Optionally can disable sprite texture flag.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamic-texture.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar texture = scene.textures.addDynamicTexture(key, width, height);\n\ntexture.setIsSpriteTexture(false);\n```\n\n----------------------------------------\n\nTITLE: Using Phaser.Math.Wrap Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Phaser.Math.Wrap function to wrap a value between a minimum and maximum range. The function takes three parameters: the value to wrap, the minimum value, and the maximum value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/wrap.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.Wrap(value, min, max);\n```\n\n----------------------------------------\n\nTITLE: Creating OnlineUserList Instance with Direct Class Import\nDESCRIPTION: JavaScript code to create an instance of OnlineUserList directly using the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar userList = new OnlineUserList(config);\n```\n\n----------------------------------------\n\nTITLE: Using XOR Encryption with Direct Class Import\nDESCRIPTION: Demonstrates how to encrypt and decrypt data using the directly imported XOR class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/xor.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar encResult = XOR.Encrypt(src, pwd);\nvar decResult = XOR.Decrypt(encResult, pwd);\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase Plugin in Phaser Scene Preload\nDESCRIPTION: JavaScript code to load the Firebase plugin using the minify file in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfirebaseplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebaseplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Importing Horrifi PostFX Class\nDESCRIPTION: Imports the Horrifi PostFx class directly and adds it to the Phaser 3 game pipeline configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport HorrifiPostFx from 'phaser3-rex-plugins/plugins/horrifipipeline.js';\nvar config = {\n    // ...\n    pipeline: [HorrifiPostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Frames to Texture\nDESCRIPTION: Adds a new frame definition to the texture with specified dimensions and source index\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-texture.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.add(name, sourceIndex, x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Configuring Board Plugin in Phaser 3 Game Config\nDESCRIPTION: Configures the Board plugin in the Phaser 3 game configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-monopoly.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving Messages in JavaScript\nDESCRIPTION: Shows how to send messages and set up a listener for receiving messages using the Broadcast instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-broadcast.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmessager.send(message);\n\nmessager.on('receive', function(data){\n    // var senderID = data.senderID;\n    // var senderName = data.senderName;\n    // var message = data.message;\n})\n\nmessager.startReceiving();\n\nmessager.stopReceiving();\n```\n\n----------------------------------------\n\nTITLE: Loading Clock Plugin in Phaser 3 Preload Stage\nDESCRIPTION: Loads the minified clock plugin file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexclockplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexclockplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Calculating Triangle Incenter in Phaser 3\nDESCRIPTION: Calculates the incenter (point where the angle bisectors meet) of a triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Geom.Triangle.InCenter(triangle);  // out: {x,y}\n// var out = Phaser.Geom.Triangle.InCenter(triangle, out);\n```\n\n----------------------------------------\n\nTITLE: Accessing Right-Side Element in Holy Grail Layout\nDESCRIPTION: Retrieves the right-side game object from the Holy Grail layout.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar rightSide = holyGrail.getElement('rightSide');\n```\n\n----------------------------------------\n\nTITLE: Importing Viewport Coordinate Method in Phaser 3\nDESCRIPTION: Demonstrates how to import the Viewport Coordinate method directly for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/viewport-coordinate.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport AddViewportCoordinateProperties from 'phaser3-rex-plugins/plugins/viewportcoordinate.js';\n```\n\n----------------------------------------\n\nTITLE: Resetting Game Object to Default Effect in Phaser 3\nDESCRIPTION: This snippet demonstrates how to reset a game object to its default effect, removing any applied pre-fx pipeline.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/prefx-pipeline.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.resetPipeline();\n```\n\n----------------------------------------\n\nTITLE: Creating Shatter Instance with Configuration\nDESCRIPTION: Examples of different ways to create and configure a shatter render texture instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-rendertexture.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexShatterRenderTexturege(x, y, width, height, {\n    // gridWidth: 32,\n    // girdHeight: 32\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexShatterRenderTexturege({\n    // x: 0,\n    // y: 0,\n    // width: 32,\n    // height: 32,\n    // gridWidth: 32,\n    // girdHeight: 32\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.make.rexShatterRenderTexturege({\n    x: 0,\n    y: 0,    \n    width: 32,\n    height: 32,\n\n    // gridWidth: 32,\n    // girdHeight: 32,\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping Data Updates in Firebase Item Table\nDESCRIPTION: JavaScript code to stop the data update process from Firebase to the client.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ntable.stopUpdate();\n```\n\n----------------------------------------\n\nTITLE: Basic String Template Rendering with Mustache\nDESCRIPTION: Demonstrates basic string templating using Mustache syntax to replace a variable placeholder with actual data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/handlebars.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar template = 'hello, {{name}}';\nvar view = {\n    name: 'rex'\n};\nvar result = Mustache.render(template, view);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ConfirmActionButton Class in Phaser 3\nDESCRIPTION: Demonstrates how to create a custom class extending the ConfirmActionButton for more specialized functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmactionbutton.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyButton extends RexPlugins.UI.ConfirmActionButton {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n\nvar button = new MyButton(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Quad Render Texture Plugin in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to load the minified plugin file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-rendertexture.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexquadimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexquadimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Width Only\nDESCRIPTION: Scales down only the width of a game object before destroying it, with optional ease function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar scale = scene.plugins.get('rexScale').scaleDownDestroy(gameObject, duration, 'x');\n// var scale = scene.plugins.get('rexScale').scaleDownDestroy(gameObject, duration, 'x', ease);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tweaker Class\nDESCRIPTION: Example of defining a custom class that extends the Tweaker component with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTweaker extends RexPlugins.UI.Tweaker {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Size of Round Rectangle\nDESCRIPTION: Sets the width and height of a round rectangle shape using the setSize method or direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nrect.setSize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Getting Line Measurements in Phaser 3\nDESCRIPTION: Shows how to get the length, width, and height of a line.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar length = Phaser.Geom.Line.Length(line);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = Phaser.Geom.Line.Width(line);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = Phaser.Geom.Line.Height(line);\n```\n\n----------------------------------------\n\nTITLE: Loading Scale Plugin via Minified File\nDESCRIPTION: Demonstrates how to load the plugin using its minified version in the preload stage and use it to create popup effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/popup.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexscaleplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexscaleplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexscaleplugin').popup(gameObject, duration);\n```\n\n----------------------------------------\n\nTITLE: Setting Checker Style\nDESCRIPTION: Sets the checker color and alpha values for the checkbox check mark.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setCheckerStyle(color, alpha);\n// checkbox.checkerColor = color;\n// checkbox.checkAlpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Adding Hidden Input Text Behavior Using Imported Plugin in Phaser 3\nDESCRIPTION: Shows how to add the hidden input text behavior to a text game object using the imported plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/hiddeninputtext.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar hiddenInputText = scene.plugins.get('rexHiddenInputTextPlugin').add(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Controlling Face Property Updates\nDESCRIPTION: Shows how to start and stop updating face properties during animations or other changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Start updating\nimage.startUpdate();\n// or\nimage.ignoreDirtyCache = true;\n\n// Stop updating\nimage.stopUpdate();\n// or\nimage.ignoreDirtyCache = false;\n```\n\n----------------------------------------\n\nTITLE: Importing Tweaker Class Directly\nDESCRIPTION: Code to import the Tweaker class directly from the rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tweaker } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Getting Points Around Triangle Edge in Phaser 3 (By Step)\nDESCRIPTION: Generates points around the edge of the triangle based on a step size.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = triangle.getPoints(false, step);\n// var points = triangle.getPoints(false, step, points);  // push points\n```\n\n----------------------------------------\n\nTITLE: Adding RotateTo Behavior to a Game Object with Minify Approach\nDESCRIPTION: Adds the RotateTo behavior to a game object after loading the plugin via the minify file approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotateTo = scene.plugins.get('rexrotatetoplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Pages Container\nDESCRIPTION: Comprehensive configuration options for creating a Pages container object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar pages = scene.rexUI.add.pages({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n    // space: { left: 0, right:0, top:0, bottom:0 },\n    // swapMode: 0,\n    // fadeIn: 0,\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating Custom Grid Class in Phaser 3\nDESCRIPTION: Creates an instance of the custom MyGrid class with specified parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-grid.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar grid = new MyGrid(scene, x, y, width, height, cellWidth, cellHeight, fillColor, fillAlpha, outlineFillColor, outlineFillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Class Directly\nDESCRIPTION: Shows how to import and use the Slider class directly from the components file\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-slider.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Slider } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\nvar slider = new Slider(scene, config);\nscene.add.existing(slider);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Folder UI Component\nDESCRIPTION: Shows a complete configuration example for creating a folder UI component with all available options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar folder = scene.rexUI.add.folder({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    orientation: 0,\n    // rtl: false,\n\n    background: backgroundGameObject,\n\n    title: titleGameObject,    \n    \n    child: childGameObject,\n    // customChildOrigin: false,\n\n    toggleByTarget: undefined,\n    toggleClickConfig: {\n        mode:'pointerup',\n        clickInterval: 100,\n        threshold: undefined,\n    },\n\n    align: {\n        title: 'left',\n        child: 'left',\n    },\n\n    expand: {\n        title: true,\n        child: true,\n    },\n\n    space: { \n        left: 0, right:0, top:0, bottom:0, item:0,\n\n        titleLeft: 0, titleRight: 0, titleTop: 0, titleBottom: 0,\n        childLeft: 0, childRight: 0, childTop: 0, childBottom: 0,\n    },\n    \n    transition: {\n        duration: 200,\n        expandCallback: undefined,\n        collapseCallback: undefined,\n    },\n\n    reLayoutTarget: undefined,\n\n    onExpandStart: undefined,\n    onExpandComplete: undefined,\n    onCollapseStart: undefined,\n    onCollapseComplete: undefined,\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n\n        item: 0,\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing jsdiff via npm\nDESCRIPTION: Command to install the diff package from npm and save it as a dependency in package.json.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/utils/jsdiff/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install diff --save\n```\n\n----------------------------------------\n\nTITLE: Creating a Trees Instance with Rex UI Plugin (Minified Version)\nDESCRIPTION: Creates a Trees instance using the Rex UI Plugin after loading the minified version.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar trees = scene.rexUI.add.trees(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Fuzzy Logic Plugin in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to load the fuzzy logic plugin in the preload stage of a Phaser 3 scene and add a fuzzy module object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fuzzy.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfuzzyplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfuzzyplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar fuzzyModule = scene.plugins.get('rexfuzzyplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Triangle Plugin via Minified File\nDESCRIPTION: Loads the minified version of the triangle plugin in the preload stage and creates a triangle instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle2.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextriangleplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextriangleplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = scene.add.rexTriangle(x, y, width, height, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Getting Movement Path in Monopoly Behavior\nDESCRIPTION: Retrieves the movement path for a given number of moving points in the Monopoly behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-monopoly.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = monopoly.getPath(movingPoints);\n// var out = monopoly.getPath(movingPoints, out);\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase User Authentication Properties in Markdown\nDESCRIPTION: Describes the essential user properties in Firebase authentication, including userID for unique identification and userName for display purposes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/firebase/database/onlineuserlist/schema.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- <randomID>\n    - `userID` - Unique ID of user\n    - `userName` - Name of the user\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Slider Tick in JavaScript\nDESCRIPTION: Methods to set and get the tick value of the slider. The tick can be set in the range of min to max, or normalized between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-slider.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nslider.setTick(tick);  // tick: 0~1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.setTick(tick, min, max);  // tick: min~max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tick = slider.tick;  // tick: 0~1\n```\n\n----------------------------------------\n\nTITLE: Implementing Hit Test Logic with Model Settings\nDESCRIPTION: Implements hit testing by iterating through defined hit areas to find a match with the specified hit area name. When a match is found, it calls the isHit method with the corresponding drawable ID and coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfor (let i = 0; i < count; i++) {\n  if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\n    const drawId: CubismIdHandle = this._modelSetting.getHitAreaId(i);\n    return this.isHit(drawId, x, y);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Size Ratios\nDESCRIPTION: Retrieves the current size ratios for the box and checker elements of the checkbox.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar boxSize = checkbox.boxSize;\nvar checkerSize =checkbox.checkerSize;\n```\n\n----------------------------------------\n\nTITLE: Scaling Y-axis of Game Objects in Phaser3\nDESCRIPTION: Sets the vertical scale of game objects, with optional step, index, and direction parameters for creating graduated scaling effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.ScaleY(gameObjects, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Handling Chess Falling Event in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This code shows how to listen for the 'fall' event, which fires when chess pieces are falling. It provides access to the board object and the bejeweled instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.on('fall', function(board, bejeweled) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents by Array Size\nDESCRIPTION: Find documents where an array property has a specified length using the $size operator. This does not work for strings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$size': value}});\n```\n\n----------------------------------------\n\nTITLE: Configuring Inverse Effect for Game Object in Phaser 3\nDESCRIPTION: Adds the inverse effect to a game object with configuration options in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexInversePipeline').add(gameObject, {\n    // intensity: 1,\n\n    // name: 'rexInversePostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Field of View Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the Field of View plugin as a scene plugin in Phaser 3's preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\n----------------------------------------\n\nTITLE: Handling Game Object Pointer Down Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for when a pointer is pressed down on a game object (chess piece) on the board. The callback receives the pointer object and the game object that was clicked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('gameobjectdown', function(pointer, gameObject) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('board.pointerdown', function(pointer) {\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Rotate Class Directly\nDESCRIPTION: Shows how to import the Rotate class directly from the gestures module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rotate } from 'phaser3-rex-plugins/plugins/gestures.js';\n```\n\n----------------------------------------\n\nTITLE: Canvas-Only Blend Modes\nDESCRIPTION: Extended set of blend modes only available in Canvas renderer. Includes advanced compositing operations like OVERLAY, COLOR_DODGE, and various source/destination blend modes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blendmode.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.BlendModes.OVERLAY        // 4\nPhaser.BlendModes.DARKEN         // 5\nPhaser.BlendModes.LIGHTEN        // 6\nPhaser.BlendModes.COLOR_DODGE    // 7\nPhaser.BlendModes.COLOR_BURN     // 8\nPhaser.BlendModes.HARD_LIGHT     // 9\nPhaser.BlendModes.SOFT_LIGHT     // 10\nPhaser.BlendModes.DIFFERENCE     // 11\nPhaser.BlendModes.EXCLUSION      // 12\nPhaser.BlendModes.HUE            // 13\nPhaser.BlendModes.SATURATION     // 14\nPhaser.BlendModes.COLOR          // 15\nPhaser.BlendModes.LUMINOSITY     // 16\n```\n\n----------------------------------------\n\nTITLE: Rendering Shader to Texture with Buffer Sampling in Phaser 3\nDESCRIPTION: Renders shader output to an internal WebGL texture and enables sampling from the buffer. Useful for feedback effects or post-processing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nshader.setRenderToTexture(undefined, true);\nvar texture = shader.glTexture;\n```\n\n----------------------------------------\n\nTITLE: Basic XOR Decryption Example\nDESCRIPTION: Simple example of decrypting data using the XOR plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/xor.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar decResult = scene.plugins.get('rexXOR').Decrypt(encResult, pwd);\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Names and Objects\nDESCRIPTION: Methods to retrieve the current, previous, and all page names, as well as page objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar pageName = pages.currentKey;\n\nvar pageName = pages.previousKey;\n\nvar names = pages.keys;\n\nvar pageObject = pages.getPage(key);\n\nvar pageObject = pages.currentPage;\n\nvar pageObject = pages.previousPage;\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Image with Position and Configuration Options\nDESCRIPTION: Creates a perspective image with specified coordinates, texture, and optional configuration parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexPerspectiveImage(x, y, texture, frame, {\n    // hideCCW: true,\n    // gridWidth: 32,\n    // girdHeight: 32\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Matter.js Object Wrap Boundaries\nDESCRIPTION: Object-level configuration for setting wrap boundaries. Defines the minimum and maximum x/y coordinates within which the object will be wrapped.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-wrap.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n    // ...\n    plugin: {\n        wrap: {\n            min: {\n                x: 0,\n                y: 0\n            },\n        max: {\n            x: 1024,\n            y: 1024\n        }\n    }\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Scale Plugin via NPM Configuration\nDESCRIPTION: Shows how to install the plugin through NPM and configure it in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/popup.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScalePlugin from 'phaser3-rex-plugins/plugins/scale-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexScale',\n            plugin: ScalePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexScale').popup(gameObject, duration);\n```\n\n----------------------------------------\n\nTITLE: Changing Language\nDESCRIPTION: Method to change the current language in i18next\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/i18next.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ni18next.changeLanguage(\"en\");\n```\n\n----------------------------------------\n\nTITLE: Loading Event Promise Plugin in Phaser3 Preload\nDESCRIPTION: Demonstrates how to load the minified plugin file in the preload stage and get an event promise from it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventpromise.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexeventpromiseplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexeventpromiseplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar promoise = scene.plugins.get('rexeventpromiseplugin').waitEvent(eventEmitter, eventName);\n// var promoise = scene.plugins.get('rexeventpromiseplugin').waitComplete(eventEmitter);\n```\n\n----------------------------------------\n\nTITLE: Applying Horrifi Effect to Game Object After Plugin Import\nDESCRIPTION: Applies the Horrifi post-processing effect to a game object after importing the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexHorrifiPipeline').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Managing Drag Functionality\nDESCRIPTION: Methods for controlling and checking drag functionality\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/slider.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = slider.enable;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.setEnable(enable);  // enable: true, or false\nslider.enable = enable;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.toggleEnable();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isDragging = slider.isDragging;\n```\n\n----------------------------------------\n\nTITLE: Creating Number Input from List in Phaser 3 Tweaker\nDESCRIPTION: Creates a dropdown list input for selecting numeric values. The component binds to a numeric property of an object and provides a list of predefined options to choose from.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput(object, key, {\n    // view: 'list',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    options: [\n        {text: text0, value: value0},\n        {text: text1, value: value1},\n        // ...\n    ],\n    \n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Input Row Configuration in JavaScript\nDESCRIPTION: Configuration object for creating an input row in the Tweaker component. Defines key bindings and additional properties specific to the input type being created.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    $key: '',\n    // $target:\n    // More properties...\n}\n```\n\n----------------------------------------\n\nTITLE: Music and Sound Commands in Markdown\nDESCRIPTION: Lists commands for controlling music and sound in Phaser 3, including playing, pausing, resuming, and adjusting properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/command-list.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nbgm.set\n  volume\n  mute\n  unmute\n\nbgm.play\n  key=\n  // volume\n  // detune\n  // rate\n  fadeIn=0\n  // loop\n  wait=false\n\nbgm.pause\n\nbgm.resume\n\nbgm.mute\n\nbgm.unmute\n\nbgm.cross\n  key=\n  duration=500\n  wait=false\n\nbgm.stop\n\nbgm.fadeIn\n  duration=500\n\nbgm.fadeOut\n  duration=500\n  stop=true\n  wait=false\n```\n\n----------------------------------------\n\nTITLE: Adding Color Components Object to Phaser 3 Scene\nDESCRIPTION: Shows how to add a Color Components object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar colorComponents = scene.rexUI.add.colorComponents(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Press End Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for press-end gestures on any tile in the board. The callback receives the press behavior object and the tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('tilepressend', function(press, tileXY) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Canvas Texture in ImageInputLabel\nDESCRIPTION: Demonstrates how to save the image on the canvas as a texture in the texture manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimageInputLabel.saveTexture(key);\n```\n\n----------------------------------------\n\nTITLE: Setting TextTruncator Padding Symbol\nDESCRIPTION: Method to change the padding symbol used for text truncation and update the display.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttruncator.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntruncator.setSymbol(symbol).updateText();\n```\n\n----------------------------------------\n\nTITLE: Getting Wave Radius Value\nDESCRIPTION: Retrieves the current wave radius value from a shockwave pipeline instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar waveRadius = pipelineInstance.waveRadius;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Color Component Input Text Objects\nDESCRIPTION: Retrieves an array of text input objects representing the color components. Returns three canvas input game objects that allow users to edit individual color values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObjects = colorComponents.getElement('components');\n```\n\n----------------------------------------\n\nTITLE: Extending NinePatch2 with a Custom Class in Phaser 3\nDESCRIPTION: Creates a custom class that extends NinePatch2, allowing for additional functionality. This demonstrates object-oriented extension of the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNinePatch extends NinePatch2 {\n    constructor(scene, x, y, width, height, key, baseFrame, columns, rows, config) {\n        super(scene, x, y, width, height, key, baseFrame, columns, rows, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Mustache.js String Template Rendering\nDESCRIPTION: Demonstrates basic string template rendering using Mustache.js. The template uses {{name}} syntax to define a variable placeholder that gets replaced with the corresponding value from the view object during rendering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mustache.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar template = 'hello, {{name}}';\nvar view = {\n    name: 'rex'\n};\nvar result = Mustache.render(template, view);\n```\n\n----------------------------------------\n\nTITLE: Using Phaser.Math.RoundTo for Basic Rounding in JavaScript\nDESCRIPTION: Rounds a numerical value to the nearest integer. This is the simplest form of the RoundTo method with default parameters (place=0, base=10).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/round-to.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.RoundTo(value);\n```\n\n----------------------------------------\n\nTITLE: Rendering Live2d Model with Projection Matrix in TypeScript\nDESCRIPTION: This snippet shows how to set up the projection matrix for rendering a Live2d model, including scaling and view matrix multiplication.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst projection: CubismMatrix44 = new CubismMatrix44();\nif(width < height) {\n    projection.scale(1.0, width / height);\n} else {\n    projection.scale(height / width, 1.0);\n}\n\nif (this._viewMatrix != null) {\n  projection.multiplyByMatrix(this._viewMatrix);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cross-Stitching Effect Instance from Camera\nDESCRIPTION: Retrieves the cross-stitching pipeline instance applied to a camera, with options to get single or multiple instances.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexCrossStitchingPipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexCrossStitchingPipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Loading Inverse Pipeline Plugin in Phaser 3\nDESCRIPTION: Loads the inverse pipeline plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexinversepipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexinversepipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm\nDESCRIPTION: Command to install the Phaser 3 Rex Plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing Color Replace PostFx Class in Phaser 3\nDESCRIPTION: Demonstrates how to import the Color Replace PostFx class and add it to the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-colorreplace.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ColorReplacePostFx from 'phaser3-rex-plugins/plugins/colorreplacepipeline.js';\nvar config = {\n    // ...\n    pipeline: [ColorReplacePostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Drag1 Event in Rotate Input\nDESCRIPTION: Shows how to listen for the drag1 event, which fires when the first touch pointer is moving.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrotate.on('drag1', function(rotate) {\n    // var drag1Vector = rotate.drag1Vector; // drag1Vector: {x, y}\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Handling Flash Events in Phaser 3\nDESCRIPTION: Demonstrates how to listen for the 'complete' event when the flash animation finishes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flash.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nflash.on('complete', function(flash, gameObject){});\n```\n\n----------------------------------------\n\nTITLE: Getting Circle Properties in Phaser 3\nDESCRIPTION: Shows how to retrieve various properties of a Circle shape, including position, radius, bounds, area, and circumference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-circle.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = circle.x;\nvar y = circle.y;\nvar top = circle.top;\nvar left = circle.left;\nvar right = circle.right;\nvar bottom = circle.bottom;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar radius = circle.radius;\n// var diameter = circle.diameter;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bound = Phaser.Geom.Circle.GetBounds(circle);\n// var bound = Phaser.Geom.Circle.GetBounds(circle, bound);  // push bound\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar area = Phaser.Geom.Circle.Area(circle);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar circumference = Phaser.Geom.Circle.Circumference(circle);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar type = circle.type; // 0\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM\nDESCRIPTION: NPM command to install the rex plugins package\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sequence.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating CanvasInput in Phaser3 Rex UI\nDESCRIPTION: Shows how to add an invisible input DOM element to receive character input and display on DynamicText. This creates an editable text field using canvas rendering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.rexUI.add.canvasInput(config);\n```\n\n----------------------------------------\n\nTITLE: Importing the HexagonMap Class\nDESCRIPTION: Code to import the HexagonMap class directly from the board-components module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagonmap.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HexagonMap } from 'phaser3-rex-plugins/plugins/board-components.js';\n```\n\n----------------------------------------\n\nTITLE: Loading Jigsaw Image Cutting Plugin in Phaser 3 Scene\nDESCRIPTION: Loads the minified version of the jigsaw image cutting plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cutjigsawimage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcutjigsawimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcutjigsawimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Configuring BitmapText Style in Phaser 3\nDESCRIPTION: Defines the style properties for a BitmapText object in Phaser 3, including font, size, alignment, and state-specific overrides.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // $type: 'bitmaptext',  // or 'bitmap'\n\n    font: '',\n    fontSize: undefined,\n    align: undefined,\n    tint: undefined,\n    letterSpacing: undefined,\n    lineSpacing: undefined,\n\n    // tint: 0xffffff,\n    // alpha: 1,\n    // scale: 1,\n    // origin:\n    // originX: \n    // originY:\n\n    // Style override in active state\n    'active.font': undefined,\n    'active.fontSize': undefined,\n    'active.tint': undefined,\n    'active.letterSpacing': undefined,\n    'active.lineSpacing': undefined,\n\n    // Style override in hover state\n    'hover.font': undefined,\n    'hover.fontSize': undefined,\n    'hover.tint': undefined,\n    'hover.letterSpacing': undefined,\n    'hover.lineSpacing': undefined,\n\n    // Style override in disable state\n    'disable.font': undefined,\n    'disable.fontSize': undefined,\n    'disable.tint': undefined,\n    'disable.letterSpacing': undefined,\n    'disable.lineSpacing': undefined,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Swipe Enable Status\nDESCRIPTION: Shows how to set the enable status of a swipe instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nswipe.setEnable(enable);  // enable: true, or false\n// swipe.enable = enable;\n```\n\n----------------------------------------\n\nTITLE: Importing UI Plugin Configuration\nDESCRIPTION: Shows how to import and configure the UI plugin in the game configuration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Checking Paused Status in Youtube Player for Phaser 3\nDESCRIPTION: Method to check if the Youtube video is currently paused.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPaused = player.isPaused;\n```\n\n----------------------------------------\n\nTITLE: Resuming Bracket Parser 2 Execution\nDESCRIPTION: Demonstrates how to resume parsing after pausing a Bracket Parser 2 instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nparser.next();\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Fonts in Phaser 3\nDESCRIPTION: Method for loading custom font files in TrueType or OpenType format with font descriptors.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.font(key, fontURL);\n// scene.load.font(key, fontURL, format, descriptors, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Using Sound Fade Plugin (Minified Version)\nDESCRIPTION: Example of using the fade in/out methods with the minified plugin version.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadevolume.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sound = scene.plugins.get('rexsoundfadeplugin').fadeIn(sound, duration);\nvar sound = scene.plugins.get('rexsoundfadeplugin').fadeOut(sound, duration);\n```\n\n----------------------------------------\n\nTITLE: Getting Results from Fuzzy Logic Module in Phaser 3 (JavaScript)\nDESCRIPTION: Shows different ways to retrieve results from the fuzzy logic module using the defuzzify method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fuzzy.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = fuzzyModule.defuzzify(variableName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = fuzzyModule.defuzzify([varName0, varName1, ...]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = fuzzyModule.defuzzify();\n```\n\n----------------------------------------\n\nTITLE: Loading Barrel Plugin via CDN\nDESCRIPTION: Loads the minified barrel effect plugin in the scene's preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-barrel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexbarrelpipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexbarrelpipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Getting User's Rank from LeaderBoard\nDESCRIPTION: JavaScript code to retrieve a user's rank from the leaderboard, with an optional user ID parameter, returning a Promise with the rank object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.getRank()\n// leaderBoard.getRank(userID)\n    .then(function(rank) { })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Importing Perspective Carousel Class Directly\nDESCRIPTION: Alternative approach to import the Perspective Carousel class directly and create a carousel without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PerspectiveCarousel } from 'phaser3-rex-plugins/plugins/perspectiveimage.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar carousel = new PerspectiveCarousel(scene, config);\nscene.add.existing(carousel);\n```\n\n----------------------------------------\n\nTITLE: Importing CharacterCache Plugin via NPM\nDESCRIPTION: Demonstrates how to import and configure the plugin through NPM installation and game configuration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/charactercache.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport CharacterCachePlugin from 'phaser3-rex-plugins/plugins/charactercache-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCharacterCache',\n            plugin: CharacterCachePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar characterCache = scene.plugins.get('rexCharacterCache').add(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: NPM command to install the phaser3-rex-plugins package which contains the Firebase plugin component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating DynamicText in Phaser3 Rex UI\nDESCRIPTION: Shows how to add text with control over position and angle of each character drawn on a canvas. This component allows precise control over each character's rendering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.rexUI.add.dynamicText(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the phaser3-rex-plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase Plugin in Phaser 3 Preload Stage\nDESCRIPTION: JavaScript code for loading the Firebase plugin in the preload stage of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfirebaseplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebaseplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Bypassing Key Input in JavaScript\nDESCRIPTION: Configuration to prevent keyboard events from capturing key inputs, allowing them to reach the text editor.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyObj = scene.input.keyboard.addKey('W', enableCapture, emitOnRepeat);\n```\n\n----------------------------------------\n\nTITLE: Checking if Current Page is First Page\nDESCRIPTION: JavaScript code to check if the current page is the first page of the leaderboard.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar isFirstPage = leaderBoard.isFirstPage;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using BuffData Class\nDESCRIPTION: Demonstrates direct class import and instantiation of the buff data manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buffdata.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BuffData from 'phaser3-rex-plugins/plugins/buffdata.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = new BuffData(parent);\n```\n\n----------------------------------------\n\nTITLE: Importing Pan Class Directly in Phaser 3\nDESCRIPTION: Imports the Pan class directly from the gestures module for more granular control over the implementation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pan } from 'phaser3-rex-plugins/plugins/gestures.js';\n```\n\n----------------------------------------\n\nTITLE: Destroying Mouse Wheel to Up/Down Instance in Phaser 3\nDESCRIPTION: This snippet shows how to destroy the Mouse Wheel to Up/Down instance when it's no longer needed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheeltoupdown.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmouseWheelToUpDown.destroy();\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Mask from IsoBox in Phaser 3\nDESCRIPTION: Demonstrates how to create a geometry mask from an IsoBox object, which can be used for masking other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isobox.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = isoBox.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Setting a Document with Specific ID in Firestore\nDESCRIPTION: Creates or overwrites a document with a specific ID in a Firestore collection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).doc(docName).set(keyValues)  // keyValues: { ... }\n    .then(function(doc) { /* ... */ })\n    .catch(function(error) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Using Image URI Loader in Preload Stage with Plugin Method\nDESCRIPTION: Code snippet showing how to use the Image URI Loader plugin in the preload stage after it has been installed as a plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imageuriloader.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.rexImageURI(key, uri);\n```\n\n----------------------------------------\n\nTITLE: Importing Wait Events Class for Direct Usage\nDESCRIPTION: Demonstrates how to import the Wait Events class for direct instantiation without using Phaser's plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport WaitEvents from 'phaser3-rex-plugins/plugins/waitevents.js';\n```\n\n----------------------------------------\n\nTITLE: Loading Round Rectangle Plugin (Minify File) in Phaser 3\nDESCRIPTION: Loads the minified version of the round rectangle plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexroundrectangleplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexroundrectangleplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Getting Checkbox Size\nDESCRIPTION: Retrieves the current width and height of the checkbox.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = checkbox.width;\nvar height = checkbox.height;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install Rex plugins package from NPM, which includes the custom progress bar functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Adding a Cover Object After Loading Minify File\nDESCRIPTION: Shows how to create a Cover object after loading the plugin via the minify file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar cover = scene.add.rexCover(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Game Objects to Phaser3 Tag Player\nDESCRIPTION: Method to add an existing game object to the Tag Player's game object manager with a specific type and name for later reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.addGameObject(goType, name, gameObject);\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin File in Phaser Scene\nDESCRIPTION: Shows how to load the minified plugin file in the scene's preload stage and start emitting particles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles-along-bounds.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexparticlesalongboundsplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexparticlesalongboundsplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar particles = scene.plugins.get('rexparticlesalongboundsplugin').startEffect(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Nested Commands in TCRP\nDESCRIPTION: Demonstrates how to specify multiple commands to run at the same time point.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    [time, [command0, command1, ...]]\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Drag-Rotate Input to Phaser 3 Scene\nDESCRIPTION: Adds the drag-rotate input to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dragrotate.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dragRotate = scene.plugins.get('rexdragrotateplugin').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Creating Chess Without Board Addition\nDESCRIPTION: Creates a chess sprite at world coordinates without adding it to the board.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-sprite.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = scene.rexBoard.add.sprite(board, x, y, undefined, key, frame, false);\n```\n\n----------------------------------------\n\nTITLE: Dialog Typing Page 2 Configuration\nDESCRIPTION: Third page of dialog typing configuration with three lines of text. Uses null display name and icon properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/mds/fast-typing.md#2025-04-21_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\nDialog.typing, displayName=null, icon=null\nPage2:\nLine0...\nLine1...\nLine2...\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Repeat Image\nDESCRIPTION: Code for creating a bitmap mask from a repeat image instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Frame Name Callback for NinePatch\nDESCRIPTION: Shows how to set a custom callback function that determines the frame names for each cell in the NinePatch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setGetFrameNameCallback(callback);\n```\n\n----------------------------------------\n\nTITLE: Creating Chess Object Without Adding to Board in Phaser 3\nDESCRIPTION: Creates an Image chess object at a specific world position without adding it to the board.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-image.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = scene.rexBoard.add.image(board, x, y, undefined, key, frame, false);\n```\n\n----------------------------------------\n\nTITLE: Wrapping Radians to -PI to PI Range in Phaser 3\nDESCRIPTION: Wraps an angle in radians to ensure it falls within the range of -PI to PI. Useful for normalizing angle values after calculations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rad = Phaser.Math.Angle.Wrap(angle);\n```\n\n----------------------------------------\n\nTITLE: Emitting a Request Close Event\nDESCRIPTION: Code to emit a request close event on a game object to invoke the modal.requestClose() method with closing event data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.emit('modal.requestClose', closeEventData);\n```\n\n----------------------------------------\n\nTITLE: Manipulating FishEye Radius\nDESCRIPTION: Gets or sets the radius property of the FishEye effect, which controls the size of the distortion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar radius = pipelineInstance.radius;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.radius = radius;\n// pipelineInstance.radius += value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setRadius(radius);\n```\n\n----------------------------------------\n\nTITLE: Clearing Data in Question Manager (JavaScript)\nDESCRIPTION: Shows how to clear all data stored in the Question Manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nquestionManager.clearData();\n```\n\n----------------------------------------\n\nTITLE: Importing Loading Animation Scene Class Directly\nDESCRIPTION: Imports the StartLoadingAnimationScene class directly from the phaser3-rex-plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loading-animation-scene.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport StartLoadingAnimationScene from 'phaser3-rex-plugins/plugins/loadinganimationscene.js';\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase SDKs and Rex Firebase Plugin in HTML\nDESCRIPTION: HTML code to include Firebase SDK scripts (core, database, firestore) and the rex-firebase minified JavaScript file in the body of the HTML document, before using any Firebase services.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/7.7.0/firebase-app.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/7.7.0/firebase-database.js\"></script>\n    <script src=\"/__/firebase/7.7.0/firebase-firestore.js\"></script>\n\n    <script src=\"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating a NinePatch with Simplified Columns and Rows (Method 2)\nDESCRIPTION: Shows an alternative way to create a NinePatch where the baseFrame is omitted and included in the configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch(x, y, width, height, key, columns, rows, {\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    baseFrame: undefined,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Setting Star Points in Phaser 3\nDESCRIPTION: Sets the number of points on a star shape in Phaser 3 using direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nstar.points = points;\n```\n\n----------------------------------------\n\nTITLE: Configuring Retro Bitmap Font\nDESCRIPTION: Configuration object for creating a retro bitmap font with character spacing and layout settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    image: '',\n    offset: {\n        x: 0,\n        y: 0\n    },\n    width: 32,\n    height: 32,\n    chars: '',\n    charsPerRow: 10,\n    spacing: {\n        x: 0,\n        y: 0\n    },\n    lineSpacing: 0\n}\nscene.cache.bitmapFont.add(key, Phaser.GameObjects.RetroFont.Parse(scene, config));\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDK Scripts in HTML\nDESCRIPTION: HTML script tags to include Firebase core SDK and database module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/7.7.0/firebase-app.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/7.7.0/firebase-database.js\"></script>\n\n    <script src=\"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds in Phaser 3\nDESCRIPTION: Methods to play sounds that will be automatically destroyed when playback ends, with optional configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.play(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.play(key, config);\n/*\nvar sound = scene.sound.add(key);\nsound.play(config);\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting Velocity Threshold\nDESCRIPTION: Shows how to set the velocity threshold for swipe detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nswipe.setVelocityThreshold(velocityThreshold);\n// swipe.velocityThreshold = velocityThreshold;\n```\n\n----------------------------------------\n\nTITLE: Adding Separator to Tweaker\nDESCRIPTION: Adds a visual separator line between tweaker elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addSeparator();\n```\n\n----------------------------------------\n\nTITLE: Setting Spatial Audio Listener Position in Phaser 3\nDESCRIPTION: Method to set the position of the spatial audio listener for Web Audio context, defaulting to the center of the game canvas.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.setListenerPosition(x, y)\n```\n\n----------------------------------------\n\nTITLE: Controlling TCRP Recording Flow\nDESCRIPTION: Controls the recording flow with pause, resume, and stop operations. These methods allow you to temporarily halt recording or end it completely.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.pause();\nrecorder.resume();\nrecorder.stop();\n```\n\n----------------------------------------\n\nTITLE: Creating a NinePatch with Width/Height in Configuration (Method 5)\nDESCRIPTION: Shows how to create a NinePatch with position and size parameters in the configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch(x, y, {\n    width: 1, height: 1,\n    key: undefined,\n    columns: undefined, // leftWidth: undefined, right: undefined,\n    rows: undefined,    // topHeight: undefined, bottomHeight: undefined,\n\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    baseFrame: undefined,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Installs the phaser3-rex-plugins package using npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-image.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing the SkewImage Class\nDESCRIPTION: Imports the SkewImage class directly for use in a Phaser project after installing the rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SkewImage } from 'phaser3-rex-plugins/plugins/quadimage.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Integer (Four Values)\nDESCRIPTION: Methods for setting four integer uniform values in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set4i(name, value0, value1, value2, value3);\n// pipelineInstance.set4i(name, value0, value1, value2, value3, shader);\n```\n\n----------------------------------------\n\nTITLE: Installing ScrollBar Plugin via NPM\nDESCRIPTION: NPM command to install the Phaser3 Rex plugins package which includes the ScrollBar component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Using Phaser.Math.floorTo with Custom Precision in JavaScript\nDESCRIPTION: Performs a floor operation with customizable precision. The 'place' parameter determines rounding position, and 'base' defines the numbering system (default is 10).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/round-to.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.floorTo(value, place, base);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Outer Strength of Glow Filter\nDESCRIPTION: Gets and sets the outer strength property of the glow filter, which controls how far the glow extends outward from object edges.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Get\nvar outerStrength = pipelineInstance.outerStrength;\n\n// Set\npipelineInstance.outerStrength = outerStrength;\n// pipelineInstance.outerStrength += value;\n\n// Or use method\npipelineInstance.setOuterStrength(value);\n```\n\n----------------------------------------\n\nTITLE: Loading TextTruncator Plugin via Minified File in Phaser3\nDESCRIPTION: Shows how to load the TextTruncator plugin using its minified file in the preload stage and add the behavior to a text game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttruncator.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextexttruncatorplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextexttruncatorplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar truncator = scene.plugins.get('rextexttruncatorplugin').add(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Unchecking Checkbox by Property Assignment\nDESCRIPTION: Sets the checkbox to unchecked by directly assigning false to the checked or value property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.checked = false;\n// checkbox.value = false;\n```\n\n----------------------------------------\n\nTITLE: Loading Previous Page of Scores\nDESCRIPTION: JavaScript code to load the previous page of scores from the leaderboard, returning a Promise with an array of score objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.loadPreviousPage()\n    .then(function(scores) { })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Importing Plugin via NPM Configuration\nDESCRIPTION: Shows how to import and configure the achievements plugin using NPM installation and game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ymlachievements.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport AchievementsPlugin from 'phaser3-rex-plugins/plugins/ymlachievements-plugin.js';\nvar config = {\n    plugins: {\n        global: [{\n            key: 'rexAchievements',\n            plugin: AchievementsPlugin,\n            start: true\n        }]\n    }\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding CursorAtBounds Instance\nDESCRIPTION: Creates a cursor-at-bound object instance after plugin loading.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursoratbounds.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar cursorAtBound = scene.plugins.get('rexcursoratboundsplugin').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Custom Text Instance Creation\nDESCRIPTION: Creating an instance of the custom MyText class with required parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamicbitmaptext.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = new MyText(scene, x, y, key, text);\n```\n\n----------------------------------------\n\nTITLE: Creating a NameValueLabel Instance with the Plugin\nDESCRIPTION: Code showing how to add a nameValueLabel object to a scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = scene.rexUI.add.nameValueLabel(config);\n```\n\n----------------------------------------\n\nTITLE: Controlling Noise Effect in Horrifi Pipeline\nDESCRIPTION: Methods to enable, disable, and configure the Noise effect in the Horrifi pipeline. Includes setter and getter methods for strength and seed parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Enable\npipelineInstance.setNoiseEnable();\n// pipelineInstance.setNoiseEnable(true);\n// or\npipelineInstance.noiseEnable = true;\n\n// Disable\npipelineInstance.setNoiseEnable(false);\n// or\npipelineInstance.noiseEnable = false;\n\n// Get\nvar noiseEnable = pipelineInstance.noiseEnable;\n\n// Set parameters\npipelineInstance.setNoiseStrength(value);\npipelineInstance.setNoiseSeed(value);\n// or\npipelineInstance.noiseStrength = value;\npipelineInstance.noiseSeed = value;\n\n// Get parameters\nvar noiseStrength = pipelineInstance.noiseStrength;\nvar noiseSeed = pipelineInstance.noiseSeed;\n```\n\n----------------------------------------\n\nTITLE: Resizing Text Editor in JavaScript\nDESCRIPTION: Methods for resizing the canvas size, text wrapping size, and adjusting to minimum required size.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setCanvasSize(width, height)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setSize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setFixedSize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setToMinSize();\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic View\nDESCRIPTION: Create a persistent view of a collection with predefined filters for faster access to a specific subset of documents.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nvar view = children.addDynamicView(name);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Command to install Rex plugins package from npm, which includes the Button plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Accessing Touch State Properties\nDESCRIPTION: Shows how to access various properties of the Touch State instance, including pointer state, position, and drag speed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/touchstate.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar isDown = touchState.isDown;\nvar isUp = touchState.isUp;\nvar isInTouching = touchState.isInTouching;\nvar localX = touchState.localX;\nvar localY = touchState.localY;\nvar speed = touchState.speed;\nvar speedX =  touchState.speedX;\nvar speedY =  touchState.speedY;\nvar dx = touchState.dx;\nvar dy = touchState.dy;\nvar dt = touchState.dt;\n```\n\n----------------------------------------\n\nTITLE: Setting Stitching Size Properties Directly\nDESCRIPTION: Sets the stitching width and height values directly on a pipeline instance, with options for incremental changes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.stitchingWidth = stitchingWidth;\npipelineInstance.stitchingHeight = stitchingHeight;\n// pipelineInstance.stitchingWidth += value;\n// pipelineInstance.stitchingHeight += value;\n```\n\n----------------------------------------\n\nTITLE: Loading Skewable Image Plugin in Phaser 3 (Minify File)\nDESCRIPTION: Loads the skewable image plugin using the minified file in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexquadimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexquadimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Clearing Commands in TCRP Player\nDESCRIPTION: Method to clear all commands from the TCRP player.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.clear();\n```\n\n----------------------------------------\n\nTITLE: Adding an Event Sheet with Group Name in Options\nDESCRIPTION: Adds an event sheet using a configuration object that includes the group name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.addEventSheet(content, {\n    groupName: '_'\n    commentLineStart: '\\/\\/',\n    lineBreak: '\\\\',\n    parallel: undefined,\n    active: true,\n    once: false\n})\n```\n\n----------------------------------------\n\nTITLE: Calling Methods on All Items in UniqueItemList (JavaScript)\nDESCRIPTION: Shows how to call a method on each item in a UniqueItemList or apply a callback function to each item.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlistA.call(fnName, arg0, arg1, arg2, ...);\nlistA.call(function(item, i) {\n    // ....\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Getting Iterations Value of an Arc in Phaser 3\nDESCRIPTION: Retrieves the iterations value of an Arc game object. This value affects the smoothness of the arc rendering, with higher values producing smoother arcs at the cost of performance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar iterations = arc.iterations;\n```\n\n----------------------------------------\n\nTITLE: NPM Installation Command\nDESCRIPTION: Command to install Rex plugins via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-chart.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Custom Game Object Commands in Markdown\nDESCRIPTION: Demonstrates commands for creating, setting properties, and manipulating custom game objects in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/command-list.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nGOTYPE\n  id=NAME\n  param0=value\n  param1=value\n\nNAME.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n\nNAME.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n\nNAME.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n\nNAME.commandName\n  param0=value\n  param1=value\n\nNAME.destroy\n```\n\n----------------------------------------\n\nTITLE: Handling Registry Set Data Event in Phaser\nDESCRIPTION: Shows how to listen for the 'setdata' event that fires when data is set in the registry.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.registry.events.on('setdata', function(parent, key, value){ /* ... */ });\n// game.registry.events.on('setdata', function(parent, key, value){ /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: Adding Circular Progress Object with Plugin\nDESCRIPTION: Code to add a circular progress object to the scene using the imported plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar circularProgress = scene.add.rexCircularProgress(x, y, radius, color, value, config);\n```\n\n----------------------------------------\n\nTITLE: Importing SplitPanels Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the SplitPanels plugin in the main Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-splitpanels.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration Import\nDESCRIPTION: Steps to import and configure the plugin in the game configuration after npm installation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scroller.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScrollerPlugin from 'phaser3-rex-plugins/plugins/scroller-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexScroller',\n            plugin: ScrollerPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Star Stroke Color in Phaser 3\nDESCRIPTION: Retrieves the stroke color of a star shape in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = star.strokeColor;\n```\n\n----------------------------------------\n\nTITLE: Appending Data to PNG Buffer Using PNG Appender Plugin\nDESCRIPTION: This snippet demonstrates how to append custom data to a PNG buffer using the PNG Appender plugin. It includes comments explaining the parameters and return value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/png-appender.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar resultBuffer = scene.plugins.get('rexPNGAppender').append(pngBuffer, data);\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Cover Object\nDESCRIPTION: Demonstrates creating a Cover object with custom color and alpha settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar cover = scene.add.rexCover({\n    // color: 0x0,\n    // alpha: 0.8\n});\n```\n\n----------------------------------------\n\nTITLE: Importing i18next Modules\nDESCRIPTION: JavaScript import statements for i18next core and HTTP backend modules\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/i18next.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport i18next from 'i18next';\\nimport Backend from 'i18next-http-backend';\n```\n\n----------------------------------------\n\nTITLE: Fast Value Retrieval in Phaser3\nDESCRIPTION: Optimized method for retrieving top-level properties from an object with default value fallback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/config-data.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = Phaser.Utils.Objects.GetFastValue(source, key, defaultValue);\n```\n\n----------------------------------------\n\nTITLE: Setting Random Generator for Gashapon in Phaser 3\nDESCRIPTION: Demonstrates how to set a custom random generator for a Gashapon instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngashapon.setRND(rnd);\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in Game Config\nDESCRIPTION: Configuration code to include the sequence plugin in Phaser3 game configuration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sequence.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport SequencePlugin from 'phaser3-rex-plugins/plugins/sequence-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexSequence',\n            plugin: SequencePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Method Import and Usage\nDESCRIPTION: Demonstrates importing and using individual EaseMove methods directly\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/easemove.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EaseMoveTo, EaseMoveFrom } from 'phaser3-rex-plugins/plugins/easemove.js';\nvar easemove = EaseMoveTo(gameObject, duration, x, y, ease);\nvar easemove = EaseMoveFrom(gameObject, duration, x, y, ease);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Line Progress Canvas Class in Phaser 3\nDESCRIPTION: Shows how to define a custom Line Progress Canvas class extending the base class in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-lineprogress.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLineProgressCanvas extends LineProgressCanvas {\n    constructor(scene, x, y, width, height, barColor, value, config) {\n        super(scene, x, y, width, height, barColor, value, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Gashapon Plugin in Phaser 3 Preload Stage\nDESCRIPTION: Demonstrates how to load the minified Gashapon plugin file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexgashaponplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgashaponplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Minified Plugin in Phaser3\nDESCRIPTION: Demonstrates how to load the minified plugin file in the preload stage and create a buff data manager instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buffdata.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexbuffdataplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexbuffdataplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = scene.plugins.get('rexbuffdataplugin').add(parent);\n```\n\n----------------------------------------\n\nTITLE: Getting Firebase Plugin Instance\nDESCRIPTION: JavaScript code to create a new instance of the rex firebase plugin when using the minified file approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rexFire = new window.rexfirebase();\n```\n\n----------------------------------------\n\nTITLE: Setting File Owner by User ID\nDESCRIPTION: JavaScript code showing two ways to set the owner of files: by passing a user ID string directly, or by passing an object with a userID property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.setOwner(userID);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.setOwner({\n    userID: userID\n});\n```\n\n----------------------------------------\n\nTITLE: Particle State Management\nDESCRIPTION: Methods for managing particle states, counts, and callbacks for particle lifecycle events\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar count = emitter.getAliveParticleCount();\nvar count = emitter.alive.length;\n\nvar callback = function(particle, emitter) { /* ... */ }\nemitter.onParticleEmit(callback, context);\n\nemitter.onParticleEmit();\n\nemitter.forEachAlive(callback, context);\n\nvar count = emitter.getDeadParticleCount();\nvar count = emitter.dead.length;\n```\n\n----------------------------------------\n\nTITLE: Getting Circle Iterations in Phaser 3\nDESCRIPTION: Retrieves the iterations value that controls the smoothness of the circle rendering. Higher values create smoother circles at the cost of more polygons.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar iterations = circle.iterations;\n```\n\n----------------------------------------\n\nTITLE: Adding Single Room Object (Minify File Method)\nDESCRIPTION: JavaScript code to create a single room object using the Rex Firebase plugin when loaded via the minified file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar room = rexFire.add.singleRoom(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Load Start Event in Phaser 3\nDESCRIPTION: Event handler for when the loader begins loading assets, useful for initializing loading UI.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.once('start', function(){}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Star Inner Radius in Phaser 3\nDESCRIPTION: Sets the inner radius of a star shape in Phaser 3 using either the setInnerRadius method or direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nstar.setInnerRadius(innerRadius);\n```\n\n----------------------------------------\n\nTITLE: Broadcast Instance Creation - JavaScript\nDESCRIPTION: Creating a broadcast messenger instance with configuration options including root path, sender and receiver details.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-broadcast.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar messager = scene.plugins.get('rexFirebase').add.broadcast({\n    root: '',\n    // senderID: '',\n    // senderName: '',\n    // receiverID: '',\n    // history: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Import Configuration\nDESCRIPTION: Configuration code for importing the Firebase plugin in Phaser game config\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-leaderboard.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport FirebasePlugin from 'phaser3-rex-plugins/plugins/firebase-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFirebase',\n            plugin: FirebasePlugin,\n            start: true\n        }]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Player Instance with Minify File in Phaser 3\nDESCRIPTION: Code for creating a TCRP player instance after loading the plugin via the minified file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar player = scene.plugins.get('rextcrpplugin').addPlayer(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Obstacles to Raycaster\nDESCRIPTION: Demonstrates how to add multiple game objects as obstacles at once.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nraycaster.addObstacle(gameObjects);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Plugin Class\nDESCRIPTION: Shows how to import the plugin class directly and create particle effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles-along-bounds.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ParticlesAlongBounds from 'phaser3-rex-plugins/plugins/particlesalongbounds.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar particles = ParticlesAlongBounds(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Iteration Value of Round Rectangle\nDESCRIPTION: Retrieves the iteration value that determines the number of interpolation points in each corner of a round rectangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar iteration = rect.iteration;\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox Size by Property Assignment\nDESCRIPTION: Sets the width and height of the checkbox by directly assigning to the width and height properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.width = width;\ncheckbox.height = height;\n```\n\n----------------------------------------\n\nTITLE: Loading Tag Text Plugin in Preload Stage\nDESCRIPTION: Loads the Tag Text plugin minified file in the preload stage of a Phaser 3 game scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextagtextplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextagtextplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Scale and Fade Event Handlers\nDESCRIPTION: Event handlers for animation completion events including pop-up, scale-down, and fade animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.on('popup.complete', function(sizer) { });\nsizer.on('scaledown.complete', function(sizer) { });\nsizer.on('fadein.complete', function(sizer) { });\n```\n\n----------------------------------------\n\nTITLE: Creating IdAlias Instance with Class Constructor\nDESCRIPTION: JavaScript code for creating an ID-alias instance using the IdAlias class constructor.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar idAlias = new IdAlias(config);\n```\n\n----------------------------------------\n\nTITLE: Checking Layer Existence in LayerManager\nDESCRIPTION: Shows how to check if a layer with a specific name exists in the LayerManager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasLayer = layerManager.has(name);\n// var hasLayer = layerManager.exists(name);\n```\n\n----------------------------------------\n\nTITLE: Creating ScaleOuter Instance\nDESCRIPTION: Creating a ScaleOuter instance manually when importing the class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaleouter.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar scaleouter = new ScaleOuter(scene);\n```\n\n----------------------------------------\n\nTITLE: Adding and Clamping Vertical Scroll Position in TextArea\nDESCRIPTION: Shows how to add a value to the current vertical scroll position with clamping to content boundaries.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.addChildOY(oy, true);\n```\n\n----------------------------------------\n\nTITLE: Using Sound Fade Methods Directly\nDESCRIPTION: Example of using the fade in/out methods directly after importing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadevolume.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar sound = SoundFade.fadeIn(sound, duration);\nvar sound = SoundFade.fadeOut(sound, duration);\n```\n\n----------------------------------------\n\nTITLE: Checking Rotate Status\nDESCRIPTION: Shows how to check if the Rotate behavior is currently enabled or running.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotate.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = rotate.enable;\n// var isRunning = rotate.isRunning;\n```\n\n----------------------------------------\n\nTITLE: Getting Child Index from Sizer in JavaScript\nDESCRIPTION: Method for retrieving the index of a child within a Sizer component. Returns a number, string, or null.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overlapsizer.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar index = sizer.getChildIndex(child);\n```\n\n----------------------------------------\n\nTITLE: Managing Fixed Size in Phaser 3 Text\nDESCRIPTION: Shows how to get and set fixed width and height for a Phaser 3 Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = txt.style.fixedWidth;\nvar height = txt.style.fixedHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setFixedSize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha of Game Objects in Phaser3\nDESCRIPTION: Sets the alpha (transparency) of game objects to a specified value, with optional step, index, and direction parameters for creating fade effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetAlpha(gameObjects, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Color Values in Phaser 3\nDESCRIPTION: Illustrates how to retrieve and set color values for a color input object. Changing the value also affects the position of markers on H-palette and SV-palette.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorinput.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = colorInput.value;\n// var value = colorInput.color;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncolorInput.setValue(value);\n// colorInput.setColor(value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncolorInput.value = value;\ncolorInput.color = value;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Command to install the Rex Plugins package, which includes the Bracket Parser, via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing Quad Render Texture Class in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to import the QuadRenderTexture class and add it to a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-rendertexture.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QuadRenderTexture } from 'phaser3-rex-plugins/plugins/quadimage.js';\n\nvar image = new QuadRenderTexture(scene, x, y, width, height, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Handling Movement Events in Phaser 3 Board\nDESCRIPTION: Event handlers for occupied tile detection and movement completion, allowing for custom reactions to movement states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.on('occupy', function(occupiedChess, gameObject, moveTo){\n    // Move away occupiedChess\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.on('complete', function(gameObject, moveTo){});\n// moveTo.once('complete', function(gameObject, moveTo){});\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Setting Value in DropDownList\nDESCRIPTION: Shows how to set the dropdown value directly as a property instead of using the setValue method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.value = value;\n```\n\n----------------------------------------\n\nTITLE: Setting TCRP Time Scale\nDESCRIPTION: Shows how to adjust the playback speed of the TCRP player by setting the time scale.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.setTimeScale(value);\n// player.timeScale = value;\n```\n\n----------------------------------------\n\nTITLE: Custom Tree Class Implementation\nDESCRIPTION: Example of creating a custom tree class by extending the base Trees class with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTrees extends RexPlugins.UI.Trees {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n\nvar trees = new MyTrees(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Resize Mode in Phaser 3 Dissolve Effect\nDESCRIPTION: Retrieves the current resize mode setting from the dissolve pipeline instance. The resize mode determines how the target texture is scaled relative to the source.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar mode = pipelineInstance.resizeMode;\n```\n\n----------------------------------------\n\nTITLE: Destroying a Text-Box Instance\nDESCRIPTION: Command to destroy a previously created Text-box instance referenced by its NAME identifier.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/textbox-commands.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.destroy\n```\n\n----------------------------------------\n\nTITLE: Closing Text Editor in JavaScript\nDESCRIPTION: Closes the text editor when it's currently open.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.close();\n```\n\n----------------------------------------\n\nTITLE: Importing Folder Class Directly\nDESCRIPTION: Shows how to import the Folder class directly from the rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Folder } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Loading First Page of Scores\nDESCRIPTION: JavaScript code to load the first page of scores from the leaderboard, returning a Promise with an array of score objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.loadFirstPage()\n    .then(function(scores) { })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Tag for LeaderBoard\nDESCRIPTION: JavaScript code to set a custom tag for the leaderboard, which can be used for additional filtering or categorization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.setTag(tag);\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcade Physics in Phaser 3\nDESCRIPTION: Sets up the configuration object for Arcade physics in a Phaser 3 game. It includes various options for gravity, collision checking, debug settings, and performance optimization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    physics: {\n        default: 'arcade',\n        arcade: {\n        //    x: 0,\n        //    y: 0,\n        //    width: scene.sys.scale.width,\n        //    height: scene.sys.scale.height,\n        //    gravity: {\n        //        x: 0,\n        //        y: 0\n        //    },\n        //    checkCollision: {\n        //        up: true,\n        //        down: true,\n        //        left: true,\n        //        right: true\n        //    },\n        //    customUpdate: false,\n        //    fixedStep: true,\n        //    fps: 60,\n        //    timeScale: 1,     // 2.0 = half speed, 0.5 = double speed\n        //    customUpdate: false,\n        //    overlapBias: 4,\n        //    tileBias: 16,\n        //    forceX: false,\n        //    isPaused: false,\n        //    debug: false,\n        //    debugShowBody: true,\n        //    debugShowStaticBody: true,\n        //    debugShowVelocity: true,\n        //    debugBodyColor: 0xff00ff,\n        //    debugStaticBodyColor: 0x0000ff,\n        //    debugVelocityColor: 0x00ff00,\n        //    maxEntries: 16,\n        //    useTree: true   // set false if amount of dynamic bodies > 5000\n        }\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Starting TCRP Recording\nDESCRIPTION: Starts the recording process, optionally specifying a start time. Commands will be recorded with timestamps relative to the start time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.start();\n// recorder.start(startAt);  // start-at time in ms\n```\n\n----------------------------------------\n\nTITLE: Drawing Live2d Model with Projection in TypeScript\nDESCRIPTION: This snippet demonstrates how to draw a Live2d model using the calculated projection matrix and the model's own matrix.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nprojection.multiplyByMatrix(this._modelMatrix);\nthis.getRenderer().setMvpMatrix(projection);\nthis.doDraw();\n```\n\n----------------------------------------\n\nTITLE: Setting X and Y Scroll Factors of Game Objects in Phaser3\nDESCRIPTION: Sets both horizontal and vertical scroll factors of game objects, with optional step values for each axis to create varied parallax effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetScrollFactor(gameObjects, x, y, stepX, stepY, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Checking Loop Status in Youtube Player for Phaser 3\nDESCRIPTION: Method to check if the Youtube player is currently set to loop video playback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar loop = player.loop;  // loop: true/false\n```\n\n----------------------------------------\n\nTITLE: Setting PostPipeline Effect on Game Objects and Cameras\nDESCRIPTION: Setting the pixelation post-processing effect on game objects or cameras using the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-pixelation.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(PixelationPostFx);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(PixelationPostFx);\n```\n\n----------------------------------------\n\nTITLE: Disabling Click Functionality in DropDownList\nDESCRIPTION: Disables click interactions for the dropdown list component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.disableClick();\n```\n\n----------------------------------------\n\nTITLE: Setting RenderTexture Size in Phaser 3\nDESCRIPTION: Changes the dimensions of an existing render texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrt.setSize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Importing Flip Class\nDESCRIPTION: Import statement for the Flip class when using it directly without plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flip.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Flip from 'phaser3-rex-plugins/plugins/flip.js';\nvar flip = new Flip(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Custom Board Class Definition\nDESCRIPTION: Example of creating a custom board class extending the base Board functionality\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyBoard extends RexPlugins.Board.Board {\n    constructor(scene) {\n        super(scene, {\n            grid: {\n                gridType: 'quadGrid',\n                x: 0,\n                y: 0,\n                cellWidth: 0,\n                cellHeight: 0,\n                type: 'orthogonal'\n            },\n            width: 0,\n            height: 0\n        });\n        // ...\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install Phaser 3 Rex plugins from npm, required before importing the plugin components.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Geometry Mask Creation\nDESCRIPTION: Method to create a geometry mask from the line shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-line.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = line.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Alternative Language Change Event Listener\nDESCRIPTION: Code showing an alternative method to listen for language change events using i18next directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ni18next.on('languageChanged', function (lng) {\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Unchecked Box Fill Style\nDESCRIPTION: Retrieves the box fill color and alpha values used when the checkbox is unchecked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = checkbox.uncheckedBoxFillColor;\nvar alpha = checkbox.uncheckedBoxFillAlpha;\n```\n\n----------------------------------------\n\nTITLE: Importing Monopoly Class from Rex Plugins\nDESCRIPTION: Imports the Monopoly class from the Rex plugins package for direct use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-monopoly.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Monopoly } from 'phaser3-rex-plugins/plugins/board-components.js';\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Messages\nDESCRIPTION: Commands to disable console messages for the current event sheet or a specific event sheet by title.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\nlog.disable\n```\n\nLANGUAGE: markdown\nCODE:\n```\nlog.disable\n  title=...\n```\n\n----------------------------------------\n\nTITLE: Getting Elapsed Time from Clock in Phaser 3\nDESCRIPTION: Retrieves the current elapsed time from the clock in milliseconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar now = clock.now;  // Elapsed time in ms\n```\n\n----------------------------------------\n\nTITLE: Retrieving Background Element in Phaser3 Scrollable Panel\nDESCRIPTION: Gets the background game object from a panel component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = panel.getElement('background');\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Cover Tint Value\nDESCRIPTION: Shows how to get and set the tint property of a Cover object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar tint = cover.tint;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncover.tint = tint;\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Mask for Toggle Switch in Phaser 3\nDESCRIPTION: Method to create a geometry mask for the toggle switch component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = toggleSwitch.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command for installing Rex plugins package from npm repository.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmaction.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing TransitionImagePack Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to install the plugin from npm and configure it in the game configuration, then create a transition image instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TransitionImagePackPlugin from 'phaser3-rex-plugins/templates/transitionimagepack/transitionimagepack-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTransitionImagePackPlugin',\n            plugin: TransitionImagePackPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexTransitionImagePack(x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Video Plugin in Preload Stage\nDESCRIPTION: Load the minified video plugin file during the scene's preload phase and create a video object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rexvideo.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexvideoplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexvideoplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar video = scene.add.rexVideoCanvas(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Minified Gesture Plugin in Phaser3\nDESCRIPTION: Loads the minified version of the gesture plugin in the scene preload stage using scene.load.scenePlugin method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexgesturesplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgesturesplugin.min.js', 'rexGestures', 'rexGestures');\n```\n\n----------------------------------------\n\nTITLE: Importing Clock Class for Phaser 3\nDESCRIPTION: Imports the Clock class directly from the Rex plugins package for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Clock from 'phaser3-rex-plugins/plugins/clock.js';\n```\n\n----------------------------------------\n\nTITLE: Handling TCRP Run Command Events\nDESCRIPTION: Shows how to add a listener for when commands are executed by the TCRP player.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('runcommand', function(commands, scope){});\n```\n\n----------------------------------------\n\nTITLE: Instantiating SimpleTextBox via Class Import in Phaser 3\nDESCRIPTION: Code for creating a SimpleTextBox instance after importing the class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletextbox.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar textBox = new SimpleTextBox(scene, style);\n// var textBox = new SimpleTextBox(scene, style, creators);\nscene.add.existing(textBox);\ntextBox.resetDisplayContent(config)\n```\n\n----------------------------------------\n\nTITLE: Setting Brightness Using Setter Method\nDESCRIPTION: Sets the brightness value using a dedicated setter method on the cross-stitching pipeline instance. Brightness ranges from 0 (black) to 1 (white).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setBrightness(radius);\n```\n\n----------------------------------------\n\nTITLE: NPM Package Installation\nDESCRIPTION: Command to install the rex plugins package via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clickoutside.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Getting Collision Mask in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current collision mask of a physics body, which determines what categories of bodies it can collide with.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nvar collisionMask = gameObject.body.collisionMask;\n```\n\n----------------------------------------\n\nTITLE: Creating Polygon Shape in Phaser 3\nDESCRIPTION: Demonstrates basic polygon creation with position, points, and fill color parameters. Points can be specified as number arrays, point objects, or space-separated strings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-polygon.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar polygon = scene.add.polygon(x, y, points, fillColor);\n// var polygon = scene.add.polygon(x, y, points, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Managing TCRP Time Scale\nDESCRIPTION: Sets and gets the time scale of the TCRP recorder. This affects the speed at which time progresses during recording.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.setTimeScale(value);\n// recorder.timeScale = value;\n\nvar timeScale = recorder.timeScale;\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrap Mode for Ship\nDESCRIPTION: Method to enable or disable screen wrapping for the ship and set padding for the wrap area.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nship.setWrapMode(wrap, padding);\n```\n\n----------------------------------------\n\nTITLE: Setting Y Position of Game Objects in Phaser3\nDESCRIPTION: Sets the y position of game objects to a specified value, with optional step, index, and direction parameters for creating patterns.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetY(gameObjects, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Installing i18next Dependencies via NPM\nDESCRIPTION: NPM commands to install required i18next packages and their dependencies\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/i18next.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i i18next\\nnpm i i18next-http-backend\n```\n\n----------------------------------------\n\nTITLE: Visualizing EventSheet Manager Hierarchical Structure with Mermaid\nDESCRIPTION: This diagram illustrates the hierarchical organization of the EventSheet manager, showing how it manages groups of EventSheet trees. It demonstrates the relationship between Manager.groups, EventSheetGroup, and individual EventSheet trees.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/eventsheetmanager/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n\nEventSheetGroups[\"Manager.groups<br>EventSheetGroup {}\"] --> EventSheetGroupDefault[\"EventSheetGroup.trees<br>Tree []\"]\nEventSheetGroups --> EventSheetGroup0[\"EventSheetGroup.trees<br>Tree []\"]\n\nEventSheetGroupDefault --> Tree0[\"EventSheet<br>Tree\"]\nEventSheetGroupDefault --> Tree1[\"EventSheet<br>Tree\"]\n\nEventSheetGroup0 --> Tree2[\"EventSheet<br>Tree\"]\nEventSheetGroup0 --> Tree3[\"EventSheet<br>Tree\"]\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Contains\nDESCRIPTION: Find documents where an array property contains a specified value using the $contains operator. The property should be an array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$contains': value}});\n```\n\n----------------------------------------\n\nTITLE: Creating Firebase Plugin Instance (Minify File Method)\nDESCRIPTION: JavaScript code to create a new instance of the Rex Firebase plugin when loaded via the minified file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rexFire = new window.rexfirebase();\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Fixed-Part Scale of a NinePatch2 Object\nDESCRIPTION: Retrieves the maximum scale values for fixed parts of a NinePatch2 object. This indicates the upper limits for non-stretched section scaling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar scaleX = ninePatch.maxFixedPartScaleX;\nvar scaleY = ninePatch.maxFixedPartScaleY;\n```\n\n----------------------------------------\n\nTITLE: Custom Ellipse Instance Creation\nDESCRIPTION: Instantiating a custom ellipse class with position, size, and color parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-ellipse.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar ellipse = new MyEllipse(scene, x, y, width, height, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Using ScaleDownDestroy with Imported Plugin\nDESCRIPTION: Scales down a game object and then destroys it using the imported plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexScale').scaleDownDestroy(gameObject, duration);\n```\n\n----------------------------------------\n\nTITLE: Getting Unix Timestamp from Date Object\nDESCRIPTION: Method to retrieve the Unix timestamp in milliseconds from a Date object instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/date.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar timestamp = d.getTime();;   // unix-timestamp in milliseconds\n```\n\n----------------------------------------\n\nTITLE: Creating TileSprite from JSON Configuration\nDESCRIPTION: Creates a tile sprite using a JSON configuration object with various optional properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilesprite.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.make.tileSprite({\n    x: 0,\n    y: 0,\n    width: 512,\n    height: 512,\n    key: '',\n\n    // angle: 0,\n    // alpha: 1\n    // flipX: true,\n    // flipY: true,\n    // scale : {\n    //    x: 1,\n    //    y: 1\n    //},\n    // origin: {x: 0.5, y: 0.5},\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TextTruncator Class Directly\nDESCRIPTION: Shows how to import the TextTruncator class from the npm package and instantiate it directly on a text game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttruncator.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport TextTruncator from 'phaser3-rex-plugins/plugins/texttruncator.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar truncator = new TextTruncator(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Quad Image Control Points in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the position of control points in a Quad Image instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-image.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Get position\nvar worldXY = controlPoint.getWorldXY();\nvar x = worldXY.x;\nvar y = worldXY.y;\n\n// or\nvar x = controlPoint.x;\nvar y = controlPoint.y;\n\n// Set position\ncontrolPoint.setPosition(x, y);\n// controlPoint.setWorldXY(x, y);\n\n// or\ncontrolPoint.x = x;\ncontrolPoint.y = y;\n```\n\n----------------------------------------\n\nTITLE: Importing Marked Event Sheets Class\nDESCRIPTION: Shows how to import the Marked Event Sheets class directly for use in your project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport MarkedEventSheets from 'phaser3-rex-plugins/plugins/markedeventsheets.js';\n```\n\n----------------------------------------\n\nTITLE: Reading Data from localStorage\nDESCRIPTION: Retrieves a value from localStorage using its key. Returns the stored string value associated with the given key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = localStorage.getItem(key);\n```\n\n----------------------------------------\n\nTITLE: Accessing Content Element in Holy Grail Layout\nDESCRIPTION: Retrieves the content game object from the Holy Grail layout.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar content = holyGrail.getElement('content');\n```\n\n----------------------------------------\n\nTITLE: Configuring and Creating a SingleRoom Instance\nDESCRIPTION: JavaScript code showing how to create a single room instance with configuration options including root path, broadcast settings, and table configurations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar room = rexFire.add.singleRoom({\n    root: '',\n    // broadcast: true,\n    // tables: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Display Size in Phaser 3\nDESCRIPTION: Sets the display width and height of a circle game object using the setDisplaySize method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.setDisplaySize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin File in Phaser3 Scene\nDESCRIPTION: Demonstrates how to load the minified plugin file in the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clickoutside.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexclickoutsideplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexclickoutsideplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Creating an Ellipse in Phaser 3\nDESCRIPTION: Instantiates a new Ellipse geometry object with specified position and dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ellipse = new Phaser.Geom.Ellipse(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Width and Height\nDESCRIPTION: Scales down both width and height of a game object before destroying it, with optional ease function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar scale = scene.plugins.get('rexScale').scaleDownDestroy(gameObject, duration);\n// var scale = scene.plugins.get('rexScale').scaleDownDestroy(gameObject, duration, undefined, ease);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pages by Line Index in TextPage for Phaser 3\nDESCRIPTION: Methods for retrieving pages based on line indices including specific line index, next line, and previous line.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textpage.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar lines = page.getPageByLineIndex(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar lines = page.getPageOfNextLine(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar lines = page.getPageOfPreviousLine(index);\n```\n\n----------------------------------------\n\nTITLE: Adding ID-Alias Object with rexFirebase Plugin\nDESCRIPTION: JavaScript code for adding an ID-alias object using the rexFirebase plugin in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar idAlias = scene.plugins.get('rexFirebase').add.idAlias(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Warp Plugin in Game Configuration\nDESCRIPTION: Code to set up the warp pipeline plugin in the Phaser game configuration when using npm imports.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport WarpPipelinePlugin from 'phaser3-rex-plugins/plugins/warppipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexWarpPipeline',\n            plugin: WarpPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving Broadcast Messages\nDESCRIPTION: Sends broadcast messages to all users in the room and registers a listener for incoming messages.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nroom.broadcast.send(message);\n\nroom.on('broadcast.receive', function(data){\n    // var senderID = data.senderID;\n    // var senderName = data.senderName;\n    // var message = data.message;\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDK scripts in HTML\nDESCRIPTION: HTML code to include the required Firebase SDK scripts (App and Database) in your web page, placed at the bottom of the HTML body before using any Firebase services.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/10.13/firebase-app-compat.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/10.13/firebase-database-compat.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Handling Buffering Event in Youtube Player for Phaser 3\nDESCRIPTION: Event handler for when the Youtube video is buffering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('buffering', function(player){ }, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating Frame Manager Instance in Phaser 3 (JavaScript)\nDESCRIPTION: Creates a new Frame Manager instance with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/framemanager.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar frameManager = scene.plugins.get('rexFrameManager').add(scene, {\n    key: '',\n    width: 4096,\n    height: 4096,\n    cellWidth: 64,\n    cellHeight: 64,\n    cellPadding: 0,\n    columns: undefined,\n    rows: undefined,\n    fillColor: undefined,\n    useDynamicTexture: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Spiral Curve Class\nDESCRIPTION: Shows how to import and instantiate the spiral curve class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/curve-spiral.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport SpiralCurve from 'phaser3-rex-plugins/plugins/spiralcurve.js';\nvar spiral = new SpiralCurve(config);\n```\n\n----------------------------------------\n\nTITLE: Importing XOR Class Directly\nDESCRIPTION: Shows how to import the XOR class directly from the NPM package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/xor.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport XOR from 'phaser3-rex-plugins/plugins/xor.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Event Promise Class Directly\nDESCRIPTION: Demonstrates how to import and use the Event Promise class directly from the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventpromise.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WaitEvent, WaitComplete } from 'phaser3-rex-plugins/plugins/eventpromise.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar promoise = WaitEvent(eventEmitter, eventName);\n// var promoise = WaitComplete(eventEmitter);\n```\n\n----------------------------------------\n\nTITLE: NPM Installation Command\nDESCRIPTION: Installs rex plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursoratbounds.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Accessing Shattered Image Faces\nDESCRIPTION: Shows how to access the triangle faces created by the shatter effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar faces = image.faces;\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Cover Alpha Value\nDESCRIPTION: Shows how to get and set the alpha property of a Cover object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = cover.alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncover.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Getting Image Texture from Frame Object in Phaser 3\nDESCRIPTION: Retrieves an image texture using a frame object reference instead of a key string. This is useful when you already have a frame object and need its associated texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar texture = scene.textures.get(frameObject);\n```\n\n----------------------------------------\n\nTITLE: Installing Dynamic Text Plugin via NPM\nDESCRIPTION: Command to install the rex plugins package via npm\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamictext.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating InTouching Instance with Configuration\nDESCRIPTION: Creates an instance of InTouching with optional configuration parameters including enable status and cooldown period.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar intouching = scene.plugins.get('rexInTouching').add(gameObject, {\n    // enable: true,\n    // cooldown: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Format Label Element in Color Components\nDESCRIPTION: Retrieves the format label game object from a color components instance. This provides access to the label that indicates the current color format.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar icon = colorComponents.getElement('formatLabel');\n```\n\n----------------------------------------\n\nTITLE: Collision Detection Methods\nDESCRIPTION: Methods for checking collision states with world boundaries and tiles, including floor, ceiling, and wall detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar onFloor = body.onFloor();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar onCeiling = body.onCeiling();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar onWall = body.onWall();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar blocked = body.blocked;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    none: true,\n    up: false,\n    down: false,\n    left: false,\n    right: false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FSM Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to include the FSM plugin in the global plugins configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport FSMPlugin from 'phaser3-rex-plugins/plugins/fsm-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFSM',\n            plugin: FSMPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Tint Using Method\nDESCRIPTION: Sets the tint color of a perspective image using the setTint method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTint(color);\n```\n\n----------------------------------------\n\nTITLE: Setting TouchEventStop Enable Status\nDESCRIPTION: Code to set the enabled status of a TouchEventStop instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/toucheventstop.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntouchEventStop.setEnable(enable);  // enable: true, or false\n// touchEventStop.enable = enable;\n```\n\n----------------------------------------\n\nTITLE: Loading PerspectiveCard Plugin in Phaser 3\nDESCRIPTION: Demonstrates how to load the PerspectiveCard plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-perspectivecard.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Thumb Size Ratio\nDESCRIPTION: Sets the thumb width and height ratios of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setThumbSize(thumbWidth, thumbHeight);\n// toggleSwitch.thumbWidth = thumbWidth;\n// toggleSwitch.thumbHeight = thumbHeight;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the Phaser 3 Rex Plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Color Components Class in Phaser 3\nDESCRIPTION: Demonstrates how to create a custom class extending the Color Components functionality and create an instance of it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyColorComponents extends RexPlugins.UI.ColorComponents {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n\nvar colorComponents = new MyColorComponents(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM for Level Counter\nDESCRIPTION: Command to install the Phaser 3 Rex plugins package from NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/levelcounter.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Adding RotateTo Behavior with Plugin Import Approach\nDESCRIPTION: Adds the RotateTo behavior to a game object after configuring the plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotateTo = scene.plugins.get('rexRotateTo').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Clearing All Waiting Events\nDESCRIPTION: Shows how to clear all waiting events from a Wait Events instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nwaitEvents.clear();\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlap Sizer in Phaser 3\nDESCRIPTION: Demonstrates various configuration options when creating an Overlap Sizer instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overlapsizer.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar sizer = scene.rexUI.add.overlapSizer({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,    \n    // origin: 0.5\n    // originX:\n    // originY:\n    // space: { left: 0, right:0, top:0, bottom:0 },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Circle Mask Image Class\nDESCRIPTION: Shows how to create a custom class extending the CircleMaskImage with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/circlemaskimage.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyImage extends CircleMaskImage {\n    constructor(scene, x, y, key, frame, config) {\n        super(scene, x, y, key, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Checkerboard Pattern Methods\nDESCRIPTION: Methods for creating and removing checkerboard patterns on the Plane object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/plane.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nplane.createCheckerboard(color1, color2, alpha1, alpha2, height);\nplane.removeCheckerboard();\n```\n\n----------------------------------------\n\nTITLE: RetroFont TEXT_SET11 Definition\nDESCRIPTION: Uppercase letters with comprehensive punctuation and numbers\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ.,\"-+!?()\\':;0123456789'\n```\n\n----------------------------------------\n\nTITLE: Documenting Phaser 3 File Header in JavaScript\nDESCRIPTION: A typical file header for Phaser 3 source files, including author information, copyright notice, and license details. This structure is consistent across multiple files in the Phaser 3 codebase.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/projects/ui-dragdrop/app/js/app.bundle.js.LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n```\n\n----------------------------------------\n\nTITLE: Loading Alpha Mask Image Plugin (Minify File) in Phaser 3\nDESCRIPTION: Loads the minified plugin file in the preload stage of a Phaser 3 scene, then demonstrates how to add an alpha-mask-image object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/alphamaskimage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexalphamaskimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexalphamaskimageplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexAlphaMaskImage(x, y, key, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Folder Object with Class Import\nDESCRIPTION: Demonstrates how to create a folder object after importing the Folder class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar folder = new Folder(scene, config);\nscene.add.existing(folder);\n```\n\n----------------------------------------\n\nTITLE: Setting Button Mode in Phaser 3\nDESCRIPTION: Demonstrates how to set the mode of a Button instance, determining when the 'click' event is fired.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/button.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.setMode(mode);\n```\n\n----------------------------------------\n\nTITLE: Shuffling Game Objects in Phaser3\nDESCRIPTION: Randomly rearranges the order of game objects in an array, useful for randomizing positions or processing order of objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.Shuffle(gameObjects);\n```\n\n----------------------------------------\n\nTITLE: Loading GrayScale Pipeline Plugin in Phaser 3\nDESCRIPTION: Loads the GrayScale pipeline plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexgrayscalepipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgrayscalepipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Text in Phaser 3\nDESCRIPTION: Creates a bitmap mask from the text object that can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = txt.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Creating ToggleSwitchShape Instance from Class\nDESCRIPTION: Creates a toggle-switch shape instance (without click input) from the imported class and adds it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// import ToggleSwitchShape from 'phaser3-rex-plugins/plugins/toggleswitchshape.js';\nvar toggleSwitch = new ToggleSwitchShape(scene, x, y, width, height, color, config);\nscene.add.existing(toggleSwitch);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom AwayTimer Object in Phaser3\nDESCRIPTION: Creates a new AwayTimer object with custom configuration for storage key and update period. This creates an independent timer instance that can be managed separately.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar awayTimer = scene.plugins.get('rexAwayTime').add({\n    key: 'away',\n    period: 1000\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle Animation Duration\nDESCRIPTION: Gets the current animation duration for the toggle-switch animation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar duration = toggleSwitch.toggleAnimProgress;\n```\n\n----------------------------------------\n\nTITLE: Installing Image URI Loader from npm Package\nDESCRIPTION: Command to install the Phaser 3 Rex Plugins package from npm, which includes the Image URI Loader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imageuriloader.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Applying Cross-Stitching Effect to Camera using Plugin Reference\nDESCRIPTION: Applies the cross-stitching post-processing effect to a camera using the loaded plugin reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexcrossstitchingpipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase SDKs in HTML\nDESCRIPTION: HTML code for including Firebase App and Firestore SDKs in the project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-files.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/10.13/firebase-app-compat.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/10.13/firebase-firestore-compat.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Toggling Checkbox by Property Assignment\nDESCRIPTION: Toggles the checkbox state by negating the current value in a property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.checked = !checkbox.checked;\n// checkbox.value = !checkbox.value;\n```\n\n----------------------------------------\n\nTITLE: Setting Wave Radius Value\nDESCRIPTION: Sets the wave radius value for a shockwave pipeline instance using either property assignment or a setter method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.waveRadius = waveRadius;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setWaveRadius(waveRadius);\n```\n\n----------------------------------------\n\nTITLE: Creating Instance of Custom ShatterImage Class\nDESCRIPTION: Shows how to create an instance of a custom ShatterImage class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new MyShatterImage(scene, x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Managing Round Counter\nDESCRIPTION: Shows methods to manipulate the round counter for event sheets execution tracking.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Increase round counter\neventSheetManager.updateRoundCounter();\n// eventSheetManager.$roundCounter += 1;\n\n// Set round counter\neventSheetManager.updateRoundCounter(value);\n// eventSheetManager.$roundCounter = value;\n\n// Get round counter\nvar roundCounter = eventSheetManager.getRoundCounter();\n// var roundCounter = eventSheetManager.$roundCounter;\n```\n\n----------------------------------------\n\nTITLE: Shuffling children in a Phaser 3 List\nDESCRIPTION: Method to randomly shuffle all children in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nlist.shuffle();\n```\n\n----------------------------------------\n\nTITLE: Applying Cross-Stitching Effect to Camera using Global Plugin\nDESCRIPTION: Applies the cross-stitching effect to a camera using the globally configured plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexCrossStitchingPipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Dividing Vectors in Phaser 3\nDESCRIPTION: Divides the components of the current Vector2 by the corresponding components of another vector or vector-like object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvector.divide(src); // src: {x, y}\n```\n\n----------------------------------------\n\nTITLE: Alternative i18next Initialization with Backend\nDESCRIPTION: Code showing an alternative way to initialize i18next using the Backend module for loading external resources.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ni18next\n    .use(Backend)\n    .init(config, onComplete);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Sort Function to Dynamic View\nDESCRIPTION: Apply a custom sort function to a dynamic view for complex sorting requirements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nview.applySort(function(doc1, doc2) {\n    return result; // 0, 1, -1\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Press Class from Rex Plugins in Phaser 3\nDESCRIPTION: Imports the Press class directly from the gestures module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Press } from 'phaser3-rex-plugins/plugins/gestures.js';\n```\n\n----------------------------------------\n\nTITLE: Initializing i18next with Imported Plugin\nDESCRIPTION: Code showing how to initialize i18next when using the imported plugin version.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexTextTranslation').initI18Next(scene, {\n    lng: 'dev',\n    fallbackLng: 'dev',\n    ns: 'translation',\n\n    // resources: {\n    //     'dev': {\n    //         'translation': {\n    //             key: value,  \n    //         }\n    //     }\n    // }\n\n    // debug: true,\n    \n    // backend: {\n    //     loadPath: '',\n    //     parse: function(data) { return JSON.parse(data); }\n    // },\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing EventSheet Tree Structure with Mermaid\nDESCRIPTION: This diagram details the internal structure of an EventSheet Tree, showing the relationships between Conditions, Labels, Tasks, and control flow elements like If, Else If, and Catch. It illustrates the behavior tree pattern used in the EventSheet implementation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/eventsheetmanager/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n\nTree --> Condition[\"Condition<br>IfSelector\"]\nCondition --> Labels[\"Labels<br>Sequence\"]\nLabels --> Tasks0[\"Label--Tasks<br>Sequence\"]\nLabels --> IfSelector[\"If<br>Selector\"]\nIfSelector --> If[\"If<br>If decorator\"]\nIf --> IfLabels[\"Labels<br>Sequence\"]\nIfLabels --> Tasks1[\"Label--Tasks<br>Sequence\"]\n\nIfSelector --> ElseIf[\"Else If<br>If decorator\"]\nElseIf --> ElseIfLabels[\"Labels<br>Sequence\"]\nElseIfLabels --> Tasks2[\"Label--Tasks<br>Sequence\"]\n\nCondition --> Catch[\"Catch<br>ForceFailure\"]\nCatch --> CatchTasks[\"Tasks<br>Sequence\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Float Array (Two Values)\nDESCRIPTION: Methods for setting two float array uniform values in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set2fv(name, value0, value1);\n// pipelineInstance.set2fv(name, value0, value1, shader);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting End Angle of Circular Progress Bar\nDESCRIPTION: Demonstrates how to get and set the end angle of the circular progress bar in radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar endAngle = circularProgress.endAngle;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setEndAngle(endAngle);\ncircularProgress.endAngle = endAngle;\n```\n\n----------------------------------------\n\nTITLE: Importing LZString Class\nDESCRIPTION: Shows how to import the LZString class directly and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lzstring.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport LZString from 'phaser3-rex-plugins/plugins/lzstring.js';\n```\n\n----------------------------------------\n\nTITLE: Easing Name Input Properties\nDESCRIPTION: Animates the name input dialog properties using linear or yoyo easing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/nameinput-dialog-commands.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Importing and Using UniqueItemList Class Directly (JavaScript)\nDESCRIPTION: Shows how to import the UniqueItemList class directly and create an instance without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport UniqueItemList from 'phaser3-rex-plugins/plugins/uniqueitemlist.js';\nvar listA = new UniqueItemList();\n```\n\n----------------------------------------\n\nTITLE: Setting Normalized Playback Time in Youtube Player\nDESCRIPTION: Methods to set the playback position using a normalized value between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.setT(t); // t: 0~1\n// player.t = t;\n```\n\n----------------------------------------\n\nTITLE: Handling User Name Change Event\nDESCRIPTION: JavaScript code showing how to set up an event listener for when a user changes their display name in the online user list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.on('changename', userID, userName, prevUserName);\n```\n\n----------------------------------------\n\nTITLE: Loading Texture in Phaser 3\nDESCRIPTION: Loads an image texture into the scene that can be used for tile sprites.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilesprite.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data Structure\nDESCRIPTION: Example of CSV data format and its corresponding JSON structure after conversion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvtohashtable.md#2025-04-21_snippet_4\n\nLANGUAGE: raw\nCODE:\n```\nname,hp,mp\nRex,100,20\nAlice,300,40\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Alice\": {\n        \"name\": \"Alice\",\n        \"hp\": 300,\n        \"mp\": 40\n    },\n    \"Rex\": {\n        \"name\": \"Rex\",\n        \"hp\": 100,\n        \"mp\": 20\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Device Touch Coordinates to Screen Coordinates in TypeScript\nDESCRIPTION: Converts touch input coordinates from device space to screen space using transformation methods. The coordinates are read from a touch manager and transformed using a device-to-screen transformation matrix.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: number = this._deviceToScreen.transformX(\n  this._touchManager.getX()\n); // 論理座標変換した座標を取得。\nconst y: number = this._deviceToScreen.transformY(\n  this._touchManager.getY()\n); // 論理座標変化した座標を取得。\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Rope Class in Phaser 3\nDESCRIPTION: Creates a custom rope class by extending Phaser.GameObjects.Rope. This allows for adding custom functionality while maintaining the base rope functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyRope extends Phaser.GameObjects.Rope {\n    constructor(scene, x, y, texture, frame, points, horizontal, colors, alphas) {\n        super(scene, x, y, texture, frame, points, horizontal, colors, alphas);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NameInputDialog Class Directly\nDESCRIPTION: Code to import the NameInputDialog class directly from the Rex UI components package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NameInputDialog } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Defining Custom IsoBox Class in Phaser 3\nDESCRIPTION: Shows how to create a custom class extending Phaser.GameObjects.IsoBox. This allows for additional customization and functionality beyond the built-in IsoBox object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isobox.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyIsoBox extends Phaser.GameObjects.IsoBox {\n    constructor(scene, x, y, width, height, fillTop, fillLeft, fillRight) {\n        super(scene, x, y, width, height, fillTop, fillLeft, fillRight);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Perspective Image Plugin in Game Configuration\nDESCRIPTION: Imports and configures the Perspective Image plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport PerspectiveImagePlugin from 'phaser3-rex-plugins/plugins/perspectiveimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPerspectiveImagePlugin',\n            plugin: PerspectiveImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Label Component\nDESCRIPTION: Comprehensive configuration example for creating a label component with various styling and layout options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simplelabel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = scene.rexUI.add.simpleLabel({\n    orientation: 0,\n    background: backgroundStyle,\n    icon: iconStyle,\n    text: textStyle,\n    action: actionStyle,\n    space: {\n        left: 0, right: 0, top: 0, bottom:0, \n        icon: 0, text: 0\n    },\n    align: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Toast Queue Class\nDESCRIPTION: Example of creating a custom toast queue class extending the base functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-toastqueue.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyToastQueue extends RexPlugins.UI.ToastQueue {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Threshold\nDESCRIPTION: Shows how to set the drag threshold for swipe detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nswipe.setDragThreshold(dragThreshold);\n// swipe.dragThreshold = dragThreshold;\n```\n\n----------------------------------------\n\nTITLE: Creating Quad Grid Instance using Constructor\nDESCRIPTION: Shows how to create a Quad Grid instance using the QuadGrid constructor. This method allows for direct instantiation without the Phaser 3 scene context.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-quadgrid.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// import { QuadGrid } from 'phaser3-rex-plugins/plugins/board-components.js';\nvar grid = new QuadGrid(config);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Field from Firestore Document\nDESCRIPTION: Removes a specific field from a Firestore document using the FieldValue.delete() method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(collectionName).doc(docName).update({\n        key: firebase.firestore.FieldValue.delete()\n    })\n    .then(function() { /* ... */ })\n    .catch(function(error) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Creating Stepped Number Array in Phaser 3 (JavaScript)\nDESCRIPTION: Generates an array of numbers progressing from start up to but not including end, advancing by the specified step. This is useful for creating number sequences with specific intervals.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/create-number-array.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = Phaser.Utils.Array.NumberArray(start, end, step);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = Phaser.Utils.Array.NumberArrayStep(0, 20, 5);\n// arr =  [0, 5, 10, 15]\n```\n\n----------------------------------------\n\nTITLE: Subtracting Vectors in Phaser 3\nDESCRIPTION: Subtracts the components of another vector or vector-like object from the current Vector2.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvector.subtract(src); // src: {x, y}\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Installs the Rex Plugins package from NPM, which contains the dialog UI component and other UI templates for Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Installing Canvas Input Plugin via NPM Configuration\nDESCRIPTION: Configures the Canvas Input plugin through game configuration after installing via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport CanvasInputPlugin from 'phaser3-rex-plugins/plugins/canvasinput-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCanvasInputPlugin',\n            plugin: CanvasInputPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.rexCanvasInput(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Using Vector2 Left Constant in Phaser 3\nDESCRIPTION: References the constant Vector2 representing the left direction (-1,0).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar vector = Phaser.Math.Vector2.LEFT;\n```\n\n----------------------------------------\n\nTITLE: Importing ScaleDownDestroy Class\nDESCRIPTION: Imports the ScaleDownDestroy class directly from the rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScaleDownDestroy from 'phaser3-rex-plugins/plugins/scale-down-destroy.js';\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Function Filter to Dynamic View\nDESCRIPTION: Apply a custom function filter to a dynamic view using applyWhere method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nview.applyWhere(function(doc) { return true; });\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the Phaser 3 Rex Plugins package from NPM, which includes the TextAreaInput component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Setting Text Style Properties in Phaser 3\nDESCRIPTION: Shows how to set various style properties for a Phaser 3 Text object, including font family, size, and style.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setStyle(style);\ntxt.setFont(font);\ntxt.setFontFamily(family);\ntxt.setFontSize(size);\ntxt.setFontStyle(style);\n```\n\n----------------------------------------\n\nTITLE: Web Browser Example of Character-based Diff with HTML Formatting\nDESCRIPTION: Example demonstrating how to use jsdiff in a web browser to compare two strings and display differences with color-coded HTML elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/utils/jsdiff/README.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<pre id=\"display\"></pre>\n<script src=\"diff.js\"></script>\n<script>\nconst one = 'beep boop',\n    other = 'beep boob blah',\n    color = '';\n    \nlet span = null;\n\nconst diff = Diff.diffChars(one, other),\n    display = document.getElementById('display'),\n    fragment = document.createDocumentFragment();\n\ndiff.forEach((part) => {\n  // green for additions, red for deletions\n  // grey for common parts\n  const color = part.added ? 'green' :\n    part.removed ? 'red' : 'grey';\n  span = document.createElement('span');\n  span.style.color = color;\n  span.appendChild(document\n    .createTextNode(part.value));\n  fragment.appendChild(span);\n});\n\ndisplay.appendChild(fragment);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Sprite Game Object with Multiple Atlas\nDESCRIPTION: Creates a sprite game object using multiple atlas textures. Sets the texture key to 'name' and frame name to 'expression'. Default origin is (0.5, 1).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: phaser\nCODE:\n```\nSPRITE\n  id=NAME\n  name=\n  expression=\n  vpx=0.5\n  vpy=1\n  scale=1\n  scaleX=\n  scaleY=\n```\n\n----------------------------------------\n\nTITLE: Getting Bob Object Visibility in Phaser 3\nDESCRIPTION: Retrieves the current visibility state of a Bob object. When visible is false, the Bob will not be rendered even though it still exists in the Blitter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar visible = bob.visible;\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Body Color for Game Objects in Phaser 3\nDESCRIPTION: Sets the debug body color for a game object. This is useful for distinguishing different objects or groups during debugging.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setDebugBodyColor(bodyColor);\n```\n\n----------------------------------------\n\nTITLE: Importing Knob Class Directly in Phaser3\nDESCRIPTION: Code showing how to import the Knob class directly and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-knob.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Knob } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar knob = new Knob(scene, config);\nscene.add.existing(knob);\n```\n\n----------------------------------------\n\nTITLE: Logic Mapping While Loop\nDESCRIPTION: Example of mapping a while loop to behavior tree nodes using RepeaterUntilFailure pattern.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/behaviortree/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nwhile ConditionA\n    TaskA\n```\n\n----------------------------------------\n\nTITLE: Creating File Manager Instance in Phaser 3\nDESCRIPTION: JavaScript code to create a file manager instance with a specified root collection name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-files.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileManager = scene.plugins.get('rexFirebase').add.files({\n    root: ''\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Tint Fill Mode for Rope in Phaser 3\nDESCRIPTION: Controls how color tinting is applied to the rope. Options include additive blending (default), fill with alpha, or fill without alpha.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nrope.setTintFill(mode);\n```\n\n----------------------------------------\n\nTITLE: Importing Messages Class from Firebase Components\nDESCRIPTION: Imports the Messages class from the Firebase components module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Messages } from 'phaser3-rex-plugins/plugins/firebase-components.js';\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Rectangle\nDESCRIPTION: Creates a bitmap mask from the rectangle object which can be used for masking other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-roundrectangle.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = rect.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Importing SingleRoom Class Directly\nDESCRIPTION: Imports the SingleRoom class from Firebase components for direct instantiation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SingleRoom } from 'phaser3-rex-plugins/plugins/firebase-components.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Speed for Eight Direction Movement\nDESCRIPTION: Set the movement speed for the Eight Direction behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eightdirection.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neightDirection.setSpeed(speed);\n// eightDirection.speed = speed;\n```\n\n----------------------------------------\n\nTITLE: Importing Board Match Class Directly\nDESCRIPTION: Shows how to import and use the Match class directly from the plugins package without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Match } from 'phaser3-rex-plugins/plugins/board-components.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = new Match(config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving WarpPostFX Instance from Game Objects and Cameras in Phaser 3\nDESCRIPTION: These snippets demonstrate how to get the WarpPostFX pipeline instance from both game objects and cameras in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp-transition.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = gameObject.getPostPipeline(WarpPostFX); // WarpPostFX class\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = camera.getPostPipeline(WarpPostFX); // WarpPostFX class\n```\n\n----------------------------------------\n\nTITLE: Reversing Polygon Points Order in Phaser 3\nDESCRIPTION: Reverses the order of points in the polygon, which can affect drawing direction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar polygon = Phaser.Geom.Polygon.Reverse(polygon);\n```\n\n----------------------------------------\n\nTITLE: Creating LocalForage Files Instance\nDESCRIPTION: Demonstrates how to create a new instance of the file manager with optional configuration for storage name and compression.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage-files.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileManager = scene.plugins.get('rexFiles').add.files({\n    // name: 'files',\n    // zip: true\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Noise Parameters in Phaser 3 Dissolve Effect\nDESCRIPTION: Retrieves the current noise parameters (X, Y, Z) used in the Perlin noise calculation for the dissolve effect. These parameters control the pattern of the dissolve transition.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar noiseX = pipelineInstance.noiseX;\nvar noiseY = pipelineInstance.noiseY;\nvar noiseZ = pipelineInstance.noiseZ;\n```\n\n----------------------------------------\n\nTITLE: Configuring Choice Dialog Options\nDESCRIPTION: Sets up the choice dialog with title, content, and up to three options. Returns choice index based on user selection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/choice-dialog-commands.md#2025-04-21_snippet_5\n\nLANGUAGE: markup\nCODE:\n```\nNAME.choice\n  title=\n  content=\n  option1=\n  option2=\n  option3=\n  resultKey=choiceIndex\n```\n\n----------------------------------------\n\nTITLE: Applying Glow Filter to Camera using Plugin Instance\nDESCRIPTION: Applies the glow filter effect to a camera using the plugin instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGlowFilterPipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Vectors Method 2\nDESCRIPTION: Calculates the squared Euclidean distance between the current Vector2 and another vector, which is more efficient for comparison as it avoids the square root calculation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar distanceSq = vector.distanceSq(src); // squared\n```\n\n----------------------------------------\n\nTITLE: Creating RoundRectangleProgress with Position Parameters\nDESCRIPTION: Creates a RoundRectangleProgress instance using positional parameters with detailed configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar roundRectangleProgress = scene.add.rexRoundRectangleProgress(x, y, width, height, radius, barColor, value, {    \n    trackColor: undefined,\n    trackStrokeColor: undefined,\n    trackStrokeThickness: 2,\n    \n    rtl: false,\n    orientation: 0,\n\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n    valuechangeCallback: function(newValue, oldValue, roundRectangleProgress) {\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation of Group Members in Phaser 3\nDESCRIPTION: Sets the rotation of all group members to a given value, with an optional step parameter to create variation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.rotate(value);\n// group.rotate(value, step);\n```\n\n----------------------------------------\n\nTITLE: NPM Installation\nDESCRIPTION: Command to install the Phaser3 Rex plugins package via npm\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Making a Physics Body Movable in Phaser 3\nDESCRIPTION: Makes a physics body movable, allowing it to receive momentum from collisions with other bodies. This is the default state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setImmovable(false);\n```\n\n----------------------------------------\n\nTITLE: Handling InTouching 'touchstart' Event\nDESCRIPTION: Adds an event listener for the 'touchstart' event that fires when touch begins on an object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nintouching.on('touchstart', function (intouching, gameObject) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugin via NPM\nDESCRIPTION: Command to install the rex plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-label.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Setting Glow Filter as Post Pipeline on Game Object\nDESCRIPTION: Applies the glow filter effect to a game object using setPostPipeline method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(GlowFilterPostFx);\n```\n\n----------------------------------------\n\nTITLE: Custom Command Addition\nDESCRIPTION: Method to add custom commands to the command executor with event sheet management capabilities.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\ncommandExecutor.addCommand(commandName, function(config, eventSheetManager){\n    // var resumeCallback = eventSheetManager.pauseEventSheet();\n    // ... \n    // resumeCallback()\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Destroying a Bob Object in Phaser 3\nDESCRIPTION: Removes and destroys a Bob object from its parent Blitter. This frees up memory and should be used when a specific Bob is no longer needed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nbob.destroy();\n```\n\n----------------------------------------\n\nTITLE: Managing Alpha Transparency\nDESCRIPTION: Methods to get and set the alpha (transparency) value of the circular progress component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = circularProgress.alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setAlpha(alpha);\n// circularProgress.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Importing File Drop Zone Class in Phaser 3\nDESCRIPTION: Imports the FileDropZone class for manual instantiation in a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filedropzone.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FileDropZone } from 'phaser3-rex-plugins/plugins/filedropzone.js';\n\nvar fileDropZone = new FileDropZone(config);\nscene.add.existing(fileDropZone);\n```\n\n----------------------------------------\n\nTITLE: Appending Text to TextArea\nDESCRIPTION: Shows how to append text to the existing content in the TextArea component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.appendText(text);\n```\n\n----------------------------------------\n\nTITLE: Configuring Arrow Spinner in Phaser 3 Rex Spinner Plugin\nDESCRIPTION: Shows the configuration options specific to the Arrow spinner type, including the direction of the arrow animation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-spinner.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar spinner = scene.rexSpinner.add.audio({\n  // ...\n  // direction: 'down'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Line Endpoints\nDESCRIPTION: Method to update the start and end points of the line.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-line.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nline.setTo(x1, y1, x2, y2);\n```\n\n----------------------------------------\n\nTITLE: Translating a Polygon in Phaser 3\nDESCRIPTION: Shifts all points of the polygon by the specified x and y amounts.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Polygon.Translate(polygon, x, y);\n```\n\n----------------------------------------\n\nTITLE: Duration Handling in Luxon\nDESCRIPTION: Shows how to work with Duration objects including creation and conversion to different formats.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/luxon.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar dur = Duration.fromObject({ hours: 2, minutes: 7 });\n// dt.plus(dur);\n\ndur.as('seconds') //=> 7620\ndur.toObject()    //=> { hours: 2, minutes: 7 }\ndur.toISO()       //=> 'PT2H7M'\n```\n\n----------------------------------------\n\nTITLE: Configuring AwayTime Plugin in Phaser3 Game Configuration\nDESCRIPTION: Imports and configures the AwayTime plugin in the Phaser3 game configuration. This makes the plugin available globally throughout the game instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport AwayTimePlugin from 'phaser3-rex-plugins/plugins/awaytime-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexAwayTime',\n            plugin: AwayTimePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Kicking User from Chat Room\nDESCRIPTION: JavaScript code for removing a specific user from the chat room.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nroom.kickUser(userID);\n```\n\n----------------------------------------\n\nTITLE: Enabling Matter.js Wrap Plugin at Runtime\nDESCRIPTION: Method to enable the wrap plugin during game runtime through the scene's matter system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-wrap.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.matter.system.enableWrapPlugin();\n```\n\n----------------------------------------\n\nTITLE: Getting Glow Effect Instance from a Game Object\nDESCRIPTION: Retrieves the glow effect pipeline instance from a game object for manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGlowFilterPipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexGlowFilterPipeline').get(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Setting Mute Status in Youtube Player for Phaser 3\nDESCRIPTION: Methods to mute or unmute the Youtube player audio.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.setMute(muted);  // muted: true/false\n// player.muted = muted;\n```\n\n----------------------------------------\n\nTITLE: Removing Waiting Event in Wait Events\nDESCRIPTION: Demonstrates two methods to remove a waiting event from a Wait Events instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncallback();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwaitEvents.remove(callback);\n```\n\n----------------------------------------\n\nTITLE: Loading Warp Plugin via Minify File\nDESCRIPTION: Code to load the warp pipeline plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexwarppipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexwarppipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Bejeweled Object in Phaser 3\nDESCRIPTION: Demonstrates the full configuration options for creating a Bejeweled object, including board setup, chess creation, and custom actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar bejeweled = new Bejeweled(scene, {\n    // rexBoard: 'rexBoard',\n\n    board: {\n        grid: {\n            gridType: 'quadGrid',\n            x: 30,\n            y: 30 - 600,\n            cellWidth: 60,\n            cellHeight: 60,\n        },\n        width: 10,\n        height: 20 // Prepared rows: upper 10 rows\n    },\n    match: {\n        // wildcard: undefined\n        // dirMask: undefined\n    },\n    chess: {\n        // pick random symbol from array, or a callback to return symbol\n        symbols: [0, 1, 2, 3, 4, 5],\n        // symbols: function(board, tileX, tileY, excluded) { return symbol; }\n\n        // User-defined chess game object\n        create: function (board) {\n            // Create Game object (Shape, Image, or Sprite)\n            var scene = board.scene;\n            var gameObject = scene.add.sprite(0, 0, textureKey, frame);\n            // Initial 'symbol' value\n            gameObject.setData('symbol', undefined);\n            // Add data changed event of 'symbol` key\n            gameObject.data.events.on('changedata_symbol', function (gameObject, value, previousValue) {\n                // Change the appearance of game object via new symbol value\n                gameObject.setFrame(newFrame);\n            });\n            return gameObject;\n        },\n\n        // scope for callbacks\n        scope: undefined,\n\n        // moveTo behavior\n        moveTo: {\n            speed: 400\n        },\n        // tileZ: 1,\n    },\n    // mask: false,\n\n    placeAction: undefined,\n    select1Action: undefined,\n    select2Action: undefined,\n    swapAction: undefined,\n    undoSwapAction: undefined,\n    eliminatingAction: undefined,\n    fallingAction: undefined,\n\n    // input: true\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Components in Phaser 3\nDESCRIPTION: Provides a comprehensive configuration example for creating a Color Components object with various options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar colorComponents = scene.rexUI.add.colorComponents({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    background: backgroundGameObject,\n\n    formatLabel: {\n        background: {\n            radius: 0,\n            color: undefined, alpha: undefined,\n            strokeColor: undefined, strokeAlpha: undefined, strokeWidth: 2\n        },\n\n        text: {\n            fontFamily: 'Courier',\n            fontSize: '16px',\n            fontStyle: '',\n            backgroundColor: null,\n            color: '#fff',\n            stroke: '#fff',\n            strokeThickness: 0,\n            shadow: {\n                offsetX: 0,\n                offsetY: 0,\n                color: '#000',\n                blur: 0,\n                stroke: false,\n                fill: false\n            },\n            align: 'left',  // 'left'|'center'|'right'|'justify'\n            padding: {\n                left: 0,\n                right: 0,\n                top: 0,\n                bottom: 0,\n            },\n        },\n\n        space: {left: 0, right: 0, top: 0, bottom: 0}\n    },\n\n    // formatLabel: labelGameObject,\n\n    inputText: {\n        width: undefined, \n        height: undefined,\n    \n        padding: 0,  // {left: 0, right: 0, top: 0, bottom: 0}\n    \n        background: {\n            color: null,\n            color2: null,\n            horizontalGradient: true,\n    \n            stroke: null,\n            strokeThickness: 2,\n    \n            cornerRadius: 0,\n            cornerIteration: null,\n            \n            // Style when focus\n            // 'focus.color': ...\n            // 'focus.color2': ...\n            // 'focus.stroke': ...\n        },\n        focusStyle: undefined,\n    \n        innerBounds: {\n            color: null,\n            color2: null,\n            horizontalGradient: true,\n    \n            stroke: null,\n            strokeThickness: 2\n        },\n    \n        style: {\n            bold: false,\n            italic: false,\n            fontSize: '16px',\n            fontFamily: 'Courier',\n            color: '#fff',\n            stroke: '#fff',\n            strokeThickness: 0,\n            shadowColor: null,\n            shadowOffsetX: 0,\n            shadowOffsetY: 0,\n            shadowBlur: 0,\n            backgroundColor: null,\n            backgroundHeight: undefined,\n            backgroundBY: undefined,\n            offsetX: 0,\n            offsetY: 0,\n    \n            // Style when cursor move on\n            // 'cursor.color': ...\n            // 'cursor.backgroundColor': ...\n            // 'cursor.xxx': ...\n        },\n        cursorStyle: undefined,\n\n        wrap: {\n            padding: {\n                left: 0,\n                right: 0,\n                top: 0,\n                bottom: 0\n            },\n            lineHeight: undefined,\n            maxLines: undefined,\n            wrapWidth: undefined,\n            letterSpacing: 0,\n            hAlign: 0,\n            vAlign: 'center',  // For single line text input\n            charWrap: true,    // For single line text input\n        },\n\n        // enterClose: true,\n        // readOnly: false,\n    \n        // Callbacks\n        // onOpen: function (textObject, hiddenInputText) {\n        // },\n    \n        // onClose: function (textObject, hiddenInputText) {\n        // },\n\n        // onUpdate: function (text, textObject, hiddenInputText) {\n        //     return text;\n        // },   \n    \n        // onAddChar: function(child, index, canvasInput) {\n        //    child.modifyStyle({...})\n        // },\n    \n        // onCursorOut: function(child, cursorIndex, canvasInput) {\n        //     child.modifyStyle({\n        //         \n        //     });\n        // },\n    \n        // onCursorIn: function(child, cursorIndex, canvasInput) {\n        //     child.modifyStyle({\n        //         \n        //     });\n        // },\n    },\n\n    // inputText0: canvasInputGameObject,\n    // inputText1: canvasInputGameObject,\n    // inputText2: canvasInputGameObject,\n\n    // proportion: { formatLabel: 0 },\n\n    valuechangeCallback: function(newValue, oldValue, knob) {\n    },\n    valuechangeCallbackScope: undefined,\n\n    value: 0xffffff,\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        item: 0\n    },\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,    \n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Circular Progress Class\nDESCRIPTION: Example of creating a custom class that extends the CircularProgress class, allowing for additional customization and functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCircularProgress extends CircularProgress {\n    constructor(scene, x, y, radius, color, value, config) {\n        super(scene, x, y, radius, color, value, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar circularProgress = new MyCircularProgress(scene, x, y, radius, color, value, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Value in DropDownList\nDESCRIPTION: Sets the current value of the dropdown list using the setValue method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.setValue(value);\n```\n\n----------------------------------------\n\nTITLE: Getting Time Scale of a Timer in Phaser 3\nDESCRIPTION: Retrieves the current time scale value of a timer, which indicates how quickly the timer is progressing relative to real time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar timeScale = timer.timeScale;\n```\n\n----------------------------------------\n\nTITLE: Extending ImageBox Class\nDESCRIPTION: Example showing how to create a custom class extending ImageBox functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imagebox.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyImageBox extends ImageBox {\n    constructor(scene, x, y, texture, frame, config) {\n        super(scene, x, y, texture, frame, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fade-In Duration\nDESCRIPTION: Method to set the fade-in duration for page transitions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npages.setFadeInDuration(duration);\n```\n\n----------------------------------------\n\nTITLE: Importing TouchEventStop Method Directly\nDESCRIPTION: Code to import the TouchEventStop class directly from the Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/toucheventstop.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport TouchEventStop from 'phaser3-rex-plugins/plugins/toucheventstop.js';\n```\n\n----------------------------------------\n\nTITLE: Getting Display Size of Round Rectangle\nDESCRIPTION: Retrieves the display width and height of a round rectangle shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = rect.displayWidth;\nvar height = rect.displayHeight;\n```\n\n----------------------------------------\n\nTITLE: Configuring Mouse Wheel to Up/Down Plugin in Phaser 3 Game Configuration\nDESCRIPTION: This code shows how to include the Mouse Wheel to Up/Down plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheeltoupdown.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport MouseWheelToUpDownPlugin from 'phaser3-rex-plugins/plugins/mousewheeltoupdown-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexMouseWheelToUpDown',\n            plugin: MouseWheelToUpDownPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Toggling Pan Enable State in Phaser 3\nDESCRIPTION: Toggles the enable state of the pan gesture detector between true and false.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npan.toggleEnable();\n```\n\n----------------------------------------\n\nTITLE: Adding Hexagon Object\nDESCRIPTION: Creates a new hexagon geometry object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-hexagon.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar hexagon = scene.plugins.get('rexhexagonplugin').add(x, y, size, orientationType);\n```\n\n----------------------------------------\n\nTITLE: Getting GrayScale Effect Instance from Game Object\nDESCRIPTION: Retrieves the grayscale post-processing effect instance from a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGrayScalePipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexGrayScalePipeline').get(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration Setup\nDESCRIPTION: Configuration setup for importing the plugin through game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-roundrectangle.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport RoundRectanglePlugin from 'phaser3-rex-plugins/plugins/roundrectanglecanvas-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRoundRectangleCanvasPlugin',\n            plugin: RoundRectangleCanvasPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Badge Label Class\nDESCRIPTION: Example of extending the BadgeLabel class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-badgelabel.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyBadgeLabel extends RexPlugins.UI.BadgeLabel {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar badgeLabel = new MyBadgeLabel(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Ellipse Display Size Management\nDESCRIPTION: Methods for getting and setting the display size of the ellipse, which affects its rendered dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-ellipse.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = ellipse.displayWidth;\nvar height = ellipse.displayHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.setDisplaySize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.displayWidth = width;\nellipse.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Stitching Pipeline Plugin in Game Configuration\nDESCRIPTION: Imports and configures the cross-stitching pipeline plugin in the global plugins section of the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport CrossStitchingPipelinePlugin from 'phaser3-rex-plugins/plugins/crossstitchingpipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCrossStitchingPipeline',\n            plugin: CrossStitchingPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Sound Fade Methods\nDESCRIPTION: Importing the Sound Fade functionality as a standalone method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadevolume.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport SoundFade from 'phaser3-rex-plugins/plugins/soundfade.js';\n```\n\n----------------------------------------\n\nTITLE: Handling Press End Event in Phaser 3\nDESCRIPTION: Adds an event listener for the 'pressend' event to detect when a press interaction ends.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npress.on('pressend', function(press, gameObject, lastPointer){\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Applying CRT Effect to Game Object with Minify Plugin\nDESCRIPTION: Applies the CRT post-processing effect to a Phaser game object using the plugin loaded from the minified file. Configuration options can be passed to customize the effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexcrtpipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Value Text Operations in Phaser3 Label\nDESCRIPTION: Methods for getting and setting the value text property of a label component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = label.valueText;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setValueText(s);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.valueText = s;\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application in JavaScript\nDESCRIPTION: Shows how to initialize the Firebase application with configuration details. This step is crucial for connecting the game to the specific Firebase project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-broadcast.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Unix Timestamp\nDESCRIPTION: Static method to get the current Unix timestamp in milliseconds without creating a Date instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/date.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar timestamp = Date.now();;    // unix-timestamp in milliseconds\n```\n\n----------------------------------------\n\nTITLE: Setting Tile Scale via Properties\nDESCRIPTION: Alternative method to set tile scale using direct property access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimage.tileScaleX = scaleX;\nimage.tileScaleY = scaleY;\n```\n\n----------------------------------------\n\nTITLE: Getting All Event Names in Phaser 3\nDESCRIPTION: Demonstrates how to get all event names from an event emitter in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventemitter3.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar names = ee.eventNames();\n```\n\n----------------------------------------\n\nTITLE: Import FadeOutDestroy Method\nDESCRIPTION: Imports the standalone FadeOutDestroy method from the Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadeoutdestroy.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport FadeOutDestroy from 'phaser3-rex-plugins/plugins/fade-out-destroy.js';\n```\n\n----------------------------------------\n\nTITLE: Basic Greater Than Condition Check\nDESCRIPTION: Tests if coin value is greater than 10 with print statements showing the outcome.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/if-else/if-else.md#2025-04-21_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nprint\\\n  text=----\n\nset\n  coin=8\n\n### [If coin > 10]\n\nprint\\\n  text=(coin > 10)\n\n### [Else]\n\nprint\\\n  text=NOT (coin > 10)\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Installs the Rex Plugins package using npm for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-texture.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Using Phaser.Utils.String.UppercaseFirst in JavaScript\nDESCRIPTION: Demonstrates how to use Phaser's built-in utility method to capitalize the first letter of a string. This method is part of Phaser.Utils.String namespace and was authored by Richard Davey.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/capitalizes-first.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Utils.String.UppercaseFirst(str);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document ID\nDESCRIPTION: Get the unique identifier ($loki) of a document that has been inserted into a collection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = docInColl.$loki;\n```\n\n----------------------------------------\n\nTITLE: Importing TintRGB Plugin via npm Configuration\nDESCRIPTION: Shows how to import and configure the plugin via npm installation in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tintrgb.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport TintRGBPlugin from 'phaser3-rex-plugins/plugins/tintrgb-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTintRGB',\n            plugin: TintRGBPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Cutting Image into Jigsaw Pieces in Phaser 3\nDESCRIPTION: Uses the loaded plugin to cut a game object's image into jigsaw puzzle pieces based on the provided configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cutjigsawimage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pieces = scene.plugins.get('rexcutjigsawimageplugin').gridCut(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Iteration via Direct Property of Round Rectangle\nDESCRIPTION: Sets the iteration value by directly assigning to the rectangle's iteration property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nrect.iteration = value;\n```\n\n----------------------------------------\n\nTITLE: NPM Installation Command\nDESCRIPTION: Command to install the Rex plugins package via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadeoutdestroy.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Users Setting\nDESCRIPTION: JavaScript code showing how to access the maximum users setting value for the online user list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar maxUsers = userList.maxUsers;\n```\n\n----------------------------------------\n\nTITLE: Loading Canvas Data Plugin\nDESCRIPTION: Load the minified plugin file in the scene's preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-data.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcanvasdataplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcanvasdataplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Managing Read-Only State in JavaScript\nDESCRIPTION: Methods for enabling, disabling, and checking the read-only state of the text editor.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setReadOnly();\n// txt.setReadOnly(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.readOnly = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setReadOnly(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.readOnly = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar readOnlyEanble = txt.readOnly;\n```\n\n----------------------------------------\n\nTITLE: Advanced Value Retrieval - Implicit\nDESCRIPTION: Example of retrieving a direct value using GetAdvancedValue utility.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/config-data.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar source = {x: 4};\nvar value = Phaser.Utils.Objects.GetAdvancedValue(source, 'x');\n```\n\n----------------------------------------\n\nTITLE: Fade Out Sound with Stop\nDESCRIPTION: Fading out sound and stopping it without destroying.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadevolume.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexSoundFade').fadeOut(sound, duration, false);\n```\n\n----------------------------------------\n\nTITLE: Fade Out Sound with Destroy\nDESCRIPTION: Fading out sound and destroying it afterward.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadevolume.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexSoundFade').fadeOut(sound, duration);\n```\n\n----------------------------------------\n\nTITLE: Manually Updating a NinePatch2 Texture\nDESCRIPTION: Forces an update of the texture for a NinePatch2 object. This is useful after making multiple property changes to ensure the visual appearance is updated.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.updateTexture();\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Style for Shape Chess\nDESCRIPTION: Changes the fill color and alpha transparency of a shape chess object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-shape.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nchess.setFillStyle(color, alpha)\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm\nDESCRIPTION: Command to install the Rex plugins package from npm, which includes the Life-time plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lifetime.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Initializing i18next with Awaitloader\nDESCRIPTION: Code showing how to initialize i18next using Awaitloader to handle asynchronous loading of translation resources.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nAwaitloader.call(scene.load, function (successCallback, failureCallback) {\n    i18next\n        .use(Backend)\n        .init({\n            lng: 'dev',\n            fallbackLng: 'dev',\n            ns: 'translation',\n            \n            // resources: {\n            //     'dev': {\n            //         'translation': {\n            //             key: value,  \n            //         }\n            //     }\n            // }\n        \n            // debug: true,\n            \n            // backend: {\n            //     loadPath: '',\n            //     parse: function(data) { return JSON.parse(data); }\n            // },\n        }, successCallback);\n})\nTextTranslationBehavior.setI18Next(i18next);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item Information from Gashapon in Phaser 3\nDESCRIPTION: Shows various methods to retrieve information about items in a Gashapon instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar items = gashapon.getItems();\nvar items = gashapon.getRemain();\nvar count = gashapon.getItemCount(name);\nvar count = gashapon.getRemainCount(name);\ngashapon.forEachItem(function(name, count) {\n\n}, scope);\ngashapon.forEachRemain(function(name, count) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: NPM command to install the Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadevolume.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom NinePatch Instance\nDESCRIPTION: Shows how to instantiate a custom NinePatch class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = new MyNinePatch(scene, x, y, width, height, key, baseFrame, columns, rows, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Modal Plugin Minified File in Phaser 3\nDESCRIPTION: Code to load the modal plugin from a CDN in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexmodalplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexmodalplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Version Requirement\nDESCRIPTION: Specifies the TypeScript version used in the framework\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/framework/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n5.0.4\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle in Phaser3\nDESCRIPTION: Creates a circle geometry object with specified center coordinates and radius for use with circular placement actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar circle = new Phaser.Geom.Circle(x, y, radius);\nPhaser.Actions.PlaceOnCircle(gameObjects, circle, startAngle, endAngle);\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Abstract Equality\nDESCRIPTION: Find documents where a property loosely matches a value using abstract equality ($aeq operator), allowing type coercion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$aeq': value}});\n```\n\n----------------------------------------\n\nTITLE: Loading Perspective Image Plugin in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to load the perspective image plugin in the preload stage of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-rendertexture.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexperspectiveimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexperspectiveimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Placing Game Objects Randomly on a Circle in Phaser3\nDESCRIPTION: Places game objects at random positions within a circle geometry, useful for creating scattered circular distributions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.RandomCircle(gameObjects, circle);\n```\n\n----------------------------------------\n\nTITLE: Configuring Wait-Icon Style in JavaScript\nDESCRIPTION: Configuration object for customizing the wait-icon appearance and animation mode in a text-box. The animationMode property determines which spinner animation to display.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/textbox-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  action: { width: 40, height: 40, animationMode: 'downArrow' },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding LayerManager Instance After Loading Minified Plugin\nDESCRIPTION: Code snippet demonstrating how to create a LayerManager instance after loading the plugin via the minified file method. The config parameter allows for customizing the layer manager setup.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar layerManager = scene.plugins.get('rexlayermanagerplugin').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Mouse Wheel Scroller Enable State in TextArea\nDESCRIPTION: Shows how to enable or disable mouse wheel scrolling for the TextArea content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.setMouseWheelScrollerEnable(enabled);\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Equality\nDESCRIPTION: Find documents where a property exactly matches a specified value using strict equality ($eq operator).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: value});\n// var docArray = collection.find({key: {'$eq': value}});\n```\n\n----------------------------------------\n\nTITLE: Loading Expression Parser Plugin in Phaser3 Scene\nDESCRIPTION: Loads the minified version of the Expression Parser plugin in the preload phase of a Phaser scene and creates a parser instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexexpressionparserplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexexpressionparserplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = scene.plugins.get('rexexpressionparserplugin').add();\n```\n\n----------------------------------------\n\nTITLE: Node Execution Method\nDESCRIPTION: Core method for executing a behavior tree node within a tick cycle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/behaviortree/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnode._execute(tick);\n```\n\n----------------------------------------\n\nTITLE: Loading Previous Messages from Firebase\nDESCRIPTION: Loads previous messages from Firebase and handles the returned promise.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmessages.loadPreviousMessages()\n    .then(function(messageObjs) { })\n    .catch(function(error) { })    \n```\n\n----------------------------------------\n\nTITLE: Configuring Interception Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Interception plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interception.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport InterceptionPlugin from 'phaser3-rex-plugins/plugins/interception-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexInterception',\n            plugin: InterceptionPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading HTML Files in Phaser 3\nDESCRIPTION: Method for loading HTML content for use in the game, such as for UI elements or dynamic content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.html(key, url);\n// scene.load.html(key, url, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Creating a Geometry Mask from Full Window Rectangle\nDESCRIPTION: Creates a geometry mask from the rectangle that can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = rect.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Adding Single-Room Object via Global Plugin\nDESCRIPTION: Creates a Firebase single-room instance using the global plugin reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar room = scene.plugins.get('rexFirebase').add.singleRoom(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Y Position of Group Members in Phaser 3\nDESCRIPTION: Sets the Y position of all group members, with an optional step parameter to create spacing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setX(value);\n// group.setY(value, step);\n```\n\n----------------------------------------\n\nTITLE: Implementing Delay Call in Phaser 3 Sizer Plugin\nDESCRIPTION: Method for adding a delayed function call to a sizer object. The timer is automatically removed when the game object is destroyed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.delayCall(delay, callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Word Wrap Callback in Phaser 3 Text\nDESCRIPTION: Shows how to get and set the word wrap callback function and its scope for a text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar callback = txt.style.wordWrapCallback;\nvar scope = txt.style.wordWrapCallbackScope;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setWordWrapCallback(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Plugin Instance Configuration\nDESCRIPTION: Shows the full configuration options when creating a new click-outside instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clickoutside.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar clickOutside = scene.plugins.get('rexClickOutside').add(gameObject, {\n    // enable: true,\n    // mode: 1,              // 0|'press'|1|'release'\n    // clickInterval: 100,   // ms\n    // threshold: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Point Light Position\nDESCRIPTION: Shows how to set the position of a point light using the setPosition method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/point-light.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npointLight.setPosition(x, y);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Content of a Title Game Object in Phaser 3\nDESCRIPTION: Updates the text content of the upper (text0) and lower (text1) text components of a Title game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/title-commands.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.setText\n  text0=\n  text1=\n```\n\n----------------------------------------\n\nTITLE: Destroying Sizer in Phaser 3 Sizer Plugin\nDESCRIPTION: Method for destroying a sizer object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.destroy();\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the Rex plugins package from npm, which includes the Ship plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading Sound Fade Plugin (Minified Version)\nDESCRIPTION: Loads the minified plugin file in the Phaser scene preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadevolume.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexsoundfadeplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexsoundfadeplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Setting Rectangle Collision Body in Phaser 3 Arcade Physics\nDESCRIPTION: Sets a rectangular collision body for a game object with the specified width and height.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setBodySize(width, height, center);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rhombus Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Rhombus plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rhombus.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RhombusPlugin from 'phaser3-rex-plugins/plugins/rhombus-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRhombus',\n            plugin: RhombusPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin via Minify File in Phaser 3\nDESCRIPTION: Demonstrates how to load the minified plugin file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage-files.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexlocalforagefilesplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexlocalforagefilesplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Saving RenderTexture to Texture Manager in Phaser 3\nDESCRIPTION: Stores a copy of the render texture in the Texture Manager with a specified key, allowing it to be used as a regular texture elsewhere in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nrt.saveTexture(key);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Page Index\nDESCRIPTION: JavaScript code to get the current page index from the leaderboard.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar pageIndex = leaderBoard.pageIndex;\n```\n\n----------------------------------------\n\nTITLE: Generating Random 3D Vector in Phaser 3\nDESCRIPTION: Creates a random 3D vector with x, y, and z components using Phaser.Math.RandomXYZ method. Optionally accepts a scale parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/random.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar vec = Phaser.Math.RandomXYZ(vec);    // return vec {x, y, z}\n// var vec = Phaser.Math.RandomXYZ(vec, scale);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Face Properties - Position\nDESCRIPTION: Demonstrates how to get and set the position of individual triangle faces.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = face.x;\nvar y = face.y;\n\nface.x = x;\nface.y = y;\n// or\nface.translate(x, y);\n```\n\n----------------------------------------\n\nTITLE: Accessing Tabs Element in TabPages\nDESCRIPTION: Retrieves the tabs game object from a TabPages component\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tabPages.getElement('tabs');\n```\n\n----------------------------------------\n\nTITLE: Reducing Character HP and Updating Data\nDESCRIPTION: Decreases the character's HP by 10 points and updates the internal data store. Uses a specialized syntax with '#(' and ')' which appears to be specific to this scripting system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/json-data/json-data.md#2025-04-21_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nsetData\n  CharA.hp=#( CharA.hp - 10 )\n```\n\n----------------------------------------\n\nTITLE: ScrollBar Full Configuration Example\nDESCRIPTION: Complete configuration example showing all available options for creating a ScrollBar instance including background, slider, buttons and event callbacks.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar scrollBar = scene.rexUI.add.scrollBar({\n    orientation: 0,\n    background: backgroundGameObject,    \n    slider: {\n        background: backgroundGameObject,\n        track: trackGameObject,\n        indicator: indicatorGameObject,\n        thumb: thumbGameObject,\n        input: 'drag',\n        tick: undefined,        \n        easeValue: {\n            duration: 0,\n            ease: 'Linear'\n        }\n    },\n    buttons: {\n        top: topButtonGameObject, \n        bottom: bottomButtonGameObject,\n        left: leftButtonGameObject, \n        right: rightButtonGameObject,\n        step: 0.01\n    },\n    valuechangeCallback: function(newValue, oldValue, scrollBar) {\n    },\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        item: 0\n    },\n    enable: true\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Editor Open State in JavaScript\nDESCRIPTION: Returns a boolean indicating whether the text editor is currently open.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar isOpened = txt.isOpened;\n```\n\n----------------------------------------\n\nTITLE: Generating Textures from Graphics in Phaser 3\nDESCRIPTION: Converts the current graphics object into a texture with the specified key, width, and height for reuse in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.generateTexture(key, width, height);  // key: texture key\n```\n\n----------------------------------------\n\nTITLE: Getting Inverse Effect Instance in Phaser 3\nDESCRIPTION: Retrieves the inverse effect instance from a game object or camera in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexInversePipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexInversePipeline').get(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexInversePipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexInversePipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Game Objects and Flow Control in Phaser 3\nDESCRIPTION: Demonstrates various operations on game objects including logging, data setting, animations, character movements, and dialog presentation. It also shows how to control game flow with wait commands and conditional branches.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/mds/command-executor.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlog.disable\n\nlog\n  text=Test disable\n\nlog.enable\n\nlog\n  text=Start...\n\nsetData\n  coin=#(randomInt(1,10))\n\nlog\n  text=I have {{coin}} coins\n\nDialog.set\n  alpha=0.8\n\nTitle.popUp\n  separatorDir=left\n  duration=1000\n\nCharacterA.set\n  vpx=-0.2\n\nCharacterB.set\n  vpx=-0.4\n\nCharacterC.set\n  vpx=-0.3\n\nDialog.typing, displayName=null, icon=null\n\nbgm.play\n  key=theme0\n\nBackground.cross\n  key=classroom\n  mode=curtain\n  duration=2000\n\nNameInput.input\n  title=My name is ...\n  firstName=BBB\n  lastName=AAA\n\nCharacterA.to\n  vpx=0.8\n  ease=Back\n  duration=2000\n  wait=false\n\nCharacterA.say\n  name=A\n  expression=smile\n  displayName=???\n  icon=portraits\n  text=Hi, {{firstName}} {{lastName}}\n\nCharacterA.say\n  expression=happy\n  text=Hello\n  clickAfterComplete=false\n\nCharacterA.say\n  text= World\n  typingSpeed=500\n  more=true\n\n!CharacterA.shake\n\nDialog.shake\n  wait=false\n\nDialog.typing, displayName=A, icon=portraits, name=A, expression=smile\nLine0...\nLine1...\nLine2...\nLine3...\n\nDialog.typing\nAAAA\nBBBB\nCCCC\nDDDD\n```\n\n----------------------------------------\n\nTITLE: Importing GridButtons Class\nDESCRIPTION: Code to import the GridButtons class directly and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridbuttons.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GridButtons } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\nvar buttons = new GridButtons(scene, config);\nscene.add.existing(sizer);\n```\n\n----------------------------------------\n\nTITLE: Controlling Life-time Behavior\nDESCRIPTION: Shows methods to control the Life-time behavior, including starting, stopping, pausing, and resuming the countdown.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lifetime.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlifeTime.start();\nlifeTime.stop();\nlifeTime.pause();\nlifeTime.resume();\n```\n\n----------------------------------------\n\nTITLE: Starting Bracket Parser in Phaser 3\nDESCRIPTION: Begins the parsing process on a given text string using the Bracket Parser instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nparser.start(text);\n```\n\n----------------------------------------\n\nTITLE: DropDownList Value Change Callback\nDESCRIPTION: Example of the callback function that handles value changes in the dropdown list. It receives the dropdown list object, the new value, and the previous value as parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(dropDownList, value, previousValue) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Slider Value in JavaScript\nDESCRIPTION: Methods to set the value of the slider. The value can be set in the range of min to max, or normalized between 0 and 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-slider.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nslider.setValue(value, min, max); // value: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.setValue(value); // value: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.value = value; // value: 0 ~ 1\n```\n\n----------------------------------------\n\nTITLE: Getting InTouching Enable Status\nDESCRIPTION: Retrieves whether the InTouching behavior is currently enabled.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar enabled = intouching.enable;  // enabled: true, or false\n```\n\n----------------------------------------\n\nTITLE: Importing Conditions Table Class in JavaScript\nDESCRIPTION: Demonstrates how to import the Conditions Table class directly in JavaScript.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/conditionstable.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConditionsTable from 'phaser3-rex-plugins/plugins/conditionstable.js';\n```\n\n----------------------------------------\n\nTITLE: Extending RoundRectangleCanvas Class in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Creates a custom canvas-based round rectangle class by extending RexPlugins.UI.RoundRectangleCanvas. This allows for customization of canvas-rendered round rectangles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyRoundRectangleCanvas extends RexPlugins.UI.RoundRectangleCanvas {\n    constructor(scene, x, y, width, height, radiusConfig, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient) {\n        super(scene, x, y, width, height, radiusConfig, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the Rex plugins package from NPM, which includes the RoundRectangleProgress plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing ScaleOuter Plugin in Game Configuration\nDESCRIPTION: Code to import and configure the ScaleOuter plugin as a scene plugin in the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaleouter.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScaleOuterPlugin from 'phaser3-rex-plugins/plugins/scaleouter-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexScaleOuter',\n            plugin: ScaleOuterPlugin,\n            mapping: 'rexScaleOuter'\n        }]\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading FixWidthSizer Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the FixWidthSizer plugin as a scene plugin in the preload stage of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Alpha in Phaser 3\nDESCRIPTION: Sets the alpha (transparency) value of a circle game object. Can be done using the setAlpha method or by directly setting the alpha property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.setAlpha(alpha);\n// circle.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Transition Start Callback Implementation for Phaser 3\nDESCRIPTION: Example of a start callback function implementation. Receives the parent container, current and next image objects, and the progress value (t) which is 0 at the start of the transition.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(parent, currentImage, nextImage, t) { }\n```\n\n----------------------------------------\n\nTITLE: Changing the Texture of a Perspective Image\nDESCRIPTION: Changes the texture of a perspective image, optionally specifying a specific frame.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTexture(key);\n// image.setTexture(key, frame);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: NPM command to install the phaser3-rex-plugins package which contains the shockwave plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Game Setup\nDESCRIPTION: Configures the spiral curve plugin in the game's global plugins configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/curve-spiral.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport SpiralCurvePlugin from 'phaser3-rex-plugins/plugins/spiralcurve-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexSpiralCurve',\n            plugin: SpiralCurvePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Canvas Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Canvas plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport CanvasPlugin from 'phaser3-rex-plugins/plugins/canvas-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCanvasPlugin',\n            plugin: CanvasPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Cloning Data from Firebase Item Table\nDESCRIPTION: JavaScript code to get a clone of data stored in the client-side cache of the Firebase item table using specific keys.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = table.cloneData(key0);\n// var data = table.cloneData(key0, key1);\n// var data = table.cloneData(key0, key1, key2);    \n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Command\nDESCRIPTION: Command to install the rex plugins package via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lzstring.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing Gashapon Class in Phaser 3\nDESCRIPTION: Demonstrates how to import the Gashapon class directly for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gashapon.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Gashapon from 'phaser3-rex-plugins/plugins/gashapon.js';\n```\n\n----------------------------------------\n\nTITLE: Color String Conversion and Interpolation\nDESCRIPTION: Converting colors to hex strings and interpolating between colors\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/color.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar hexString = Phaser.Display.Color.RGBToString(color.r, color.g, color.b, color.a);\nvar colorOut = Phaser.Display.Color.Interpolate.RGBWithRGB(r1, g1, b1, r2, g2, b2, length, index);\nvar colorOut = Phaser.Display.Color.Interpolate.ColorWithColor(color1, color2, length, index);\nvar colorOut = Phaser.Display.Color.Interpolate.ColorWithRGB(color, r, g, b, length, index);\n```\n\n----------------------------------------\n\nTITLE: Class Import and Instance Creation\nDESCRIPTION: Imports the CursorAtBounds class and creates a new instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursoratbounds.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport CursorAtBounds from 'phaser3-rex-plugins/plugins/cursoratboundss.js';\nvar cursorAtBound = new CursorAtBounds(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Controlling Chromatic Aberration Effect in Horrifi Pipeline\nDESCRIPTION: Methods to enable, disable, and configure the Chromatic Aberration effect in the Horrifi pipeline. Includes setter and getter methods for intensity parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Enable\npipelineInstance.setChromaticEnable();\n// pipelineInstance.setChromaticEnable(true);\n// or\npipelineInstance.chromaticEnable = true;\n\n// Disable\npipelineInstance.setChromaticEnable(false);\n// or\npipelineInstance.chromaticEnable = false;\n\n// Get\nvar chromaticEnable = pipelineInstance.chromaticEnable;\n\n// Set parameters\npipelineInstance.setChabIntensity(value);\n// or\npipelineInstance.chabIntensity = value;\n\n// Get parameters\nvar chabIntensity = pipelineInstance.chabIntensity;\n```\n\n----------------------------------------\n\nTITLE: Adding Clock Object using Configured Plugin in Phaser 3\nDESCRIPTION: Creates a clock object instance using the configured plugin in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar clock = scene.plugins.get('rexClock').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Alternative Cursor Key State Access\nDESCRIPTION: Demonstrates direct property access for cursor key states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursoratbounds.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar leftKeyDown = cursorAtBound.left;\nvar rightKeyDown = cursorAtBound.right;\nvar upKeyDown = cursorAtBound.up;\nvar downKeyDown = cursorAtBound.down;\nvar noKeyDown = cursorAtBound.noKey;\n```\n\n----------------------------------------\n\nTITLE: Configuring Perspective Image Plugin in Phaser 3 Game\nDESCRIPTION: Code to import and configure the Perspective Image Plugin in the game configuration, making it available globally across all scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport PerspectiveImagePlugin from 'phaser3-rex-plugins/plugins/perspectiveimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexPerspectiveImagePlugin',\n            plugin: PerspectiveImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Package for Dropdown Plugin\nDESCRIPTION: Shows npm installation command for the plugin package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dropdown.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Print Text Command\nDESCRIPTION: Basic print command to output 'Hello world' text\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/ignore-condition/ignore-condition.md#2025-04-21_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nprint\\n text=Hello world\n```\n\n----------------------------------------\n\nTITLE: Getting User Data from the Online User List\nDESCRIPTION: JavaScript code showing how to retrieve the array of users in the user list, each entry containing userID and userName.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = userList.getUsers();\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Plugin for Phaser3\nDESCRIPTION: Command to install Rex plugins from npm package manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-knob.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Circle Empty and Equality Operations in Phaser 3\nDESCRIPTION: Shows how to set a Circle to empty, check if it's empty, and compare two Circles for equality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-circle.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.setEmpty();     // circle.radius = 0\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isEmpty = circle.isEmpty();   // circle.radius <= 0\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isEqual = Phaser.Geom.Circle.Equals(circle0, circle1);\n```\n\n----------------------------------------\n\nTITLE: Serializing Database to String\nDESCRIPTION: Convert the entire database to a serialized JSON string for storage or transmission.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = db.serialize();\n```\n\n----------------------------------------\n\nTITLE: Loading CharacterCache Plugin File\nDESCRIPTION: Shows how to load the minified plugin file in the preload stage and create a character cache instance\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/charactercache.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcharactercacheplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcharactercacheplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar characterCache = scene.plugins.get('rexcharactercacheplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Event Handling for Flip Animation\nDESCRIPTION: Event listener setup for flip completion callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flip.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nflip.on('complete', function(gameObject, flip){\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Button Iteration Methods in Phaser3\nDESCRIPTION: Method for iterating through all buttons in the group with a callback function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-buttons.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nbuttons.forEachButtton(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Storage in JavaScript\nDESCRIPTION: Import Firebase and its storage module for use in a JavaScript project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-storage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\n```\n\n----------------------------------------\n\nTITLE: Updating Text Display\nDESCRIPTION: Code showing how to manually trigger a text update based on current translation key and interpolation values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation.updateText()\n```\n\n----------------------------------------\n\nTITLE: Decompressing String with LZString\nDESCRIPTION: Shows how to decompress a previously compressed string.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lzstring.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar decompressionResult = lzstring.decompress(compressionResult);\n```\n\n----------------------------------------\n\nTITLE: Loading Level Counter Plugin from Minify File in Phaser 3\nDESCRIPTION: Code for loading the level counter plugin from a minified file in the preload stage and adding a level counter object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/levelcounter.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexlevelcounterplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexlevelcounterplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar levelCounter = scene.plugins.get('rexlevelcounterplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Loop Counter for While Loop in Phaser3 Rex Plugin\nDESCRIPTION: Initializes the 'loopCount' variable to 3 before entering a while loop. This variable will control the number of iterations in the upcoming while loop.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/repeat/repeat.md#2025-04-21_snippet_4\n\nLANGUAGE: pseudo-code\nCODE:\n```\nset\\\n  loopCount=3\n```\n\n----------------------------------------\n\nTITLE: Importing SimpleTitleLabel Class\nDESCRIPTION: Shows how to import and use the SimpleTitleLabel class directly\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletitlelabel.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SimpleTitleLabel } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Contains Any\nDESCRIPTION: Find documents where an array property contains any of the specified values using the $containsAny operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$containsAny': [value0, value1, ...]}});\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDK Scripts to HTML Document\nDESCRIPTION: HTML code for inserting the required Firebase SDK scripts including the core Firebase App and the Firebase Database service.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/10.13/firebase-app-compat.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/10.13/firebase-database-compat.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Getting Scroller Enable State in TextArea\nDESCRIPTION: Demonstrates how to check if the scroller component is currently enabled for the TextArea.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = textArea.scrollerEnable;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: NPM command to install the phaser3-rex-plugins package, which includes the Firebase integration functionality among other plugins.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Handling File Addition Event in Phaser 3 Loader\nDESCRIPTION: Event handler for when a new file is added to the loading queue, useful for tracking what assets are being loaded.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.on('addfile', function(key, type, file) {}, scope);\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Between Range\nDESCRIPTION: Find documents where a property is between two specified values (inclusive) using the $between operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$between': [value0, value1]}});\n```\n\n----------------------------------------\n\nTITLE: Firebase Realtime Database Header Collection Structure\nDESCRIPTION: Defines the schema for the required Header collection, specifying fields including userID, fileID, type, and contentDocID. Each document is identified by a randomID.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/firebase/firestore/files/schema.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- <randomID>\n    - `userID` - Unique ID of owner\n    - `fileID` - Unique file ID of each owner\n    - `type` - 'header'\n    - `contentDocID` - Document ID of content\n    - ...\n```\n\n----------------------------------------\n\nTITLE: Applying Warp Effect to Camera via Plugin\nDESCRIPTION: Code to apply the warp effect to a camera using the loaded plugin with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexwarppipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fixed-Part Scale of a NinePatch2 Object\nDESCRIPTION: Gets the current scale values for fixed parts of a NinePatch2 object. This tells you how the non-stretched sections are being scaled.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar scaleX = ninePatch.fixedPartScaleX;\nvar scaleY = ninePatch.fixedPartScaleY;\n```\n\n----------------------------------------\n\nTITLE: Loading ImageBox Plugin - Minified Version\nDESCRIPTION: Instructions for loading the minified plugin file in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imagebox.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('reximageboxplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/reximageboxplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Calculating Triangle Perimeter in Phaser 3\nDESCRIPTION: Calculates the perimeter (sum of all sides) of a triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar perimeter = Phaser.Geom.Triangle.Perimeter(triangle);\n```\n\n----------------------------------------\n\nTITLE: Scale-down Destroy Animation\nDESCRIPTION: Scale down animation that destroys the component after completion. Supports both all axes and individual axis scaling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.scaleDownDestroy(duration);\n// sizer.scaleDownDestroy(duration, undefined, ease);\n```\n\n----------------------------------------\n\nTITLE: Adding an Event Sheet with Options\nDESCRIPTION: Shows how to add an event sheet with various configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.addEventSheet(content, {\n    commentLineStart: '\\/\\/',\n    lineBreak: '\\\\',\n    parallel: undefined,\n    active: true,\n    once: false\n})\n```\n\n----------------------------------------\n\nTITLE: Selective Effect Properties Configuration\nDESCRIPTION: Configure specific effects to attach to game objects using object or array syntax.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effect-properties.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexEffectProperties').add(gameObject, {\n    barrel: true,\n    blackWhite: true,\n    bloom: true,\n    blur: true,\n    bokeh: true,\n    brightness: true,\n    brown: true,\n    circle: true,\n    contrast: true\n});\n```\n\n----------------------------------------\n\nTITLE: Importing PerspectiveCard Plugin in Phaser 3 Configuration\nDESCRIPTION: Demonstrates how to import and configure the PerspectiveCard plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-perspectivecard.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Any Sprite Properties\nDESCRIPTION: Sets properties for any sprite without specifying a name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_6\n\nLANGUAGE: phaser\nCODE:\n```\nSPRITE.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Removing Glow Filter Effect from Camera\nDESCRIPTION: Removes the glow filter effect from a camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexGlowFilterPipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Getting User Information\nDESCRIPTION: Retrieves the current user's name and ID from the room instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar userName = room.userInfo.userName;\nvar userID = room.userInfo.userID;\n```\n\n----------------------------------------\n\nTITLE: Cell Visibility Event Handling in Phaser3\nDESCRIPTION: Demonstrates how to handle cell visibility events and manage cell containers when cells become visible in the grid table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('cellvisible', function(cell, cellContainer, table){\n    if (cellContainer === null) { // No reusable cell container, create a new one\n        var scene = cell.scene;\n        // cellContainer = scene.add.container();\n    }\n    // Set child properties of cell container ...\n    cell.setContainer(cellContainer); // Assign cell container\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Light Color in Phaser 3 using Integer Value\nDESCRIPTION: Method for setting a light's color using a single integer color value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlight.setColor(colorInteger);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Shows how to install the Rex plugins package using npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom Blitter Class in Phaser 3\nDESCRIPTION: Creates an instance of a custom Blitter class. This code would be used after defining a custom Blitter class to create a new instance with specific coordinates and texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar blitter = new MyBlitter(scene, x, y, key);\n```\n\n----------------------------------------\n\nTITLE: Handling Modal Open Event\nDESCRIPTION: Code to listen for the modal open event on a game object, which fires when the modal has completed its opening transition.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('modal.open', function(modalBehavior) {\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements by Name in Phaser 3 UI Label\nDESCRIPTION: Shows how to retrieve elements by name, with an optional recursive search.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = label.getElement('#' + name);\n// var gameObject = label.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = label.getByName(name);\n// var gameObject = label.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Importing TextEdit class directly\nDESCRIPTION: Importing the TextEdit class directly from the module and using it to add text edit functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TextEdit, Edit } from 'phaser3-rex-plugins/plugins/textedit.js';\n// Add text-edit behavior\nvar editor = new TextEdit(textGameObject, config);\n// Or open editor directly\nvar editor = Edit(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Documenting Alias ID Parameter\nDESCRIPTION: Documents the id parameter for an alias configuration, using inline code formatting\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/firebase/firestore/idalias/schema.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`id` - ID\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcade Physics in Phaser 3\nDESCRIPTION: This snippet shows how to enable the arcade physics engine in the game configuration. It sets up the default physics system as 'arcade' and allows for optional debug mode.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buildarcadeobject.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    physics: {\n        default: 'arcade',\n        arcade: {\n            // debug: true\n        }\n    }\n}\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Arcade TCRP Class Directly\nDESCRIPTION: Instructions for importing the TCRP class directly and creating an instance without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TCRP from 'phaser3-rex-plugins/plugins/arcadetcrp.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar recorder = new TCRP.Recorder(scene);\n```\n\n----------------------------------------\n\nTITLE: Appending Commands to TCRP Player\nDESCRIPTION: Method to append a new command to the TCRP player with time and parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.append(time, fn, param0, param1, ...);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Face Properties - Rotation\nDESCRIPTION: Demonstrates how to get and set the rotation angle of individual triangle faces.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar radians = face.rotation;\n// var degree = face.angle;\n\nface.rotation = radians;\n// face.angle = degree;\n// or\nface.setRotation(radians);\n// face.setAngle(degree);\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Top/Bottom in Phaser 3 Scrollable Panel\nDESCRIPTION: This code shows how to quickly scroll the panel content to the top or bottom positions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npanel.scrollToTop();\n\npanel.scrollToBottom();\n```\n\n----------------------------------------\n\nTITLE: Complete Grid Cut Image Configuration and Usage in Phaser 3\nDESCRIPTION: Shows the full configuration options for the Grid Cut Image plugin, including custom callbacks, image class selection, origin settings, and object pooling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridcutimage.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar cellImages = scene.plugins.get('rexGridCutImage').gridCut(gameObjects, columns, rows, {\n    // createImageCallback: undefined,\n    // ImageClass: Phaser.GameObjects.Image,\n\n    // originX: 0.5,\n    // originY: 0.5,\n    // add: true,\n    // align: true,\n    // objectPool: undefined\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Vector2 Angle in Phaser 3\nDESCRIPTION: Calculates and returns the angle of the Vector2 in radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar angle = vector.angle(); // angle in radians\n```\n\n----------------------------------------\n\nTITLE: Getting Post FX Pipeline Instance from a Camera\nDESCRIPTION: Method to retrieve a specific post FX pipeline instance from a camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = camera.getPostPipeline(MyPostFxClass);\n```\n\n----------------------------------------\n\nTITLE: Scrolling Content in Phaser 3 Grid Table\nDESCRIPTION: Demonstrates various methods to scroll the content of a Grid Table, including setting and getting the scroll position, adding to the current position, and clamping the values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntable.childOY = oy;\n// table.setChildOY(oy);\n\ntable.setChildOY(oy, true);\n\ntable.addChildOY(oy);\n\ntable.addChildOY(oy, true);\n\nvar childOY = table.childOY;\n\nvar topOY = table.topChildOY;\n\nvar bottomOY = table.bottomChildOY;\n\nvar isOverflow = textArea.isOverflow;\n```\n\n----------------------------------------\n\nTITLE: Implementing While Loop in Markdown\nDESCRIPTION: Shows the structure for a while loop in the command list using markdown headings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/command-list.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [While loopCount > 0]\n\nactions...\n```\n\n----------------------------------------\n\nTITLE: Removing GrayScale Effect from Game Object\nDESCRIPTION: Removes the grayscale post-processing effect from a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexGrayScalePipeline').remove(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Getting Pixel Color from Texture in Phaser 3\nDESCRIPTION: Retrieves the color value of a specific pixel from a texture. Returns an object with r, g, b, a components and a combined color integer value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = scene.textures.getPixel(x, y, key);\n// var color = scene.textures.getPixel(x, y, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Using String Pad Utility in Phaser 3 JavaScript\nDESCRIPTION: Demonstrates how to use Phaser.Utils.String.Pad to pad strings to a specified length. The function accepts a string or number input, desired length, padding character, and direction (left, right, or both).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/pad.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Utils.String.Pad(str, len, pad, dir);\n```\n\n----------------------------------------\n\nTITLE: Creating ItemTable Instance\nDESCRIPTION: Instantiating an ItemTable with root path and dimension type configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-itemtable.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = rexFire.add.itemTable({\n    root: '',\n    type: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Base Texture for NinePatch with Columns and Rows\nDESCRIPTION: Shows how to set a new base texture for a NinePatch object along with column and row configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setBaseTexture(key, baseFrame, columns, rows);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM for Phaser 3\nDESCRIPTION: Shows how to install the Rex plugins package from NPM for use with Phaser 3 projects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Clearing Fill Style of an Arc in Phaser 3\nDESCRIPTION: Removes the fill style from an Arc game object, making it transparent. This is done by calling setFillStyle with no parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\narc.setFillStyle();\n```\n\n----------------------------------------\n\nTITLE: Adding Removed Game Object Back to Scene's Display List in Phaser 3\nDESCRIPTION: Shows how to add a game object back to the scene's display list after it has been removed from a Layer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.addToDisplayList();\n```\n\n----------------------------------------\n\nTITLE: Cloning All Data from Firebase Item Table\nDESCRIPTION: JavaScript code to get a clone of all data stored in the client-side cache of the Firebase item table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = table.cloneData();\n```\n\n----------------------------------------\n\nTITLE: Loading Image URI Loader Plugin via Minify File in Phaser Scene Configuration\nDESCRIPTION: Configuration to load the Image URI Loader plugin using the minified file in the scene's preload stage. This approach uses the pack property in scene configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imageuriloader.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar sceneConfig = {\n    // ....\n    pack: {\n        files: [{\n            type: 'plugin',\n            key: 'reximageuriloaderplugin',\n            url: 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/reximageuriloaderplugin.min.js',\n            start: true\n        }]\n    }\n};\nclass MyScene extends Phaser.Scene {\n    constructor() {\n        super(sceneConfig)\n    }\n    // ....\n\n    preload() {\n        // reximageuriloaderplugin will be installed before preload(), but not added to loader yet\n        // Call addToScene(scene) to add this await loader to loader of this scene\n        this.plugins.get('reximageuriloaderplugin').addToScene(this);\n\n        this.load.rexImageURI(key, uri);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Image URI Loader Plugin via npm and Game Configuration\nDESCRIPTION: Instructions for installing the Image URI Loader plugin from npm and configuring it in the global plugins section of the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imageuriloader.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ImageURILoaderPlugin from 'phaser3-rex-plugins/plugins/imageuriloader-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexImageURILoader',\n            plugin: ImageURILoaderPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Perspective Image Plugin in Phaser 3\nDESCRIPTION: Code to load the perspective image plugin in the preload stage of a Phaser 3 game, followed by creating a carousel object in the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexperspectiveimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexperspectiveimageplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar carousel = scene.add.rexPerspectiveCarousel(config);\n```\n\n----------------------------------------\n\nTITLE: Defining Main Headings in Markdown\nDESCRIPTION: Demonstrates the structure for defining main headings in the command list, including title, parallel execution, active state, and condition checking.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/command-list.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Title\n\nparallel\nactive=false\nonce\n\n## [Condition]\n\ncoin > 5\n\n## Script\n\n## [Catch]\n```\n\n----------------------------------------\n\nTITLE: Destroying Background Game Object\nDESCRIPTION: Command for destroying a Background game object with the specified name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/background-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNAME.destroy\n```\n\n----------------------------------------\n\nTITLE: Loading Rex Board Plugin in Phaser 3 (Minify File)\nDESCRIPTION: Loads the Rex Board plugin as a scene plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-tilemap.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\n----------------------------------------\n\nTITLE: Reading All Data from Firebase Item Table\nDESCRIPTION: JavaScript code to read all data stored in the client-side cache of the Firebase item table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = table.getData();\n```\n\n----------------------------------------\n\nTITLE: Creating SingleRoom Instance Directly\nDESCRIPTION: JavaScript code to create a new instance of SingleRoom class when imported directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar room = new SingleRoom(config);\n```\n\n----------------------------------------\n\nTITLE: Managing Alpha Transparency\nDESCRIPTION: Methods for getting and setting the alpha transparency of the custom progress bar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Get\nvar alpha = customProgress.alpha;\n\n// Set\ncustomProgress.setAlpha(alpha);\n// customProgress.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Getting End Angle of an Arc in Phaser 3\nDESCRIPTION: Retrieves the end angle (in degrees) of an Arc game object. This defines where the arc ends.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar endAngle = arc.endAngle;\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Grid Dimensions\nDESCRIPTION: Retrieves the map's width and height in grid units.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tiledmapdata.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar mapWidth = mapData.width;\nvar mapHeight = mapData.height;\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Label - Minify File Method\nDESCRIPTION: Shows how to add a simple label after loading the minified plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletitlelabel.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = scene.rexUI.add.simpleLabel(style).resetDisplayContent(config);\n//var label = scene.rexUI.add.simpleLabel(style, creators).resetDisplayContent(config);\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Catch Block in Custom Script\nDESCRIPTION: Demonstrates error handling using a catch block in the custom scripting language. This can be used to handle exceptions or errors in the script execution.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/sample/sample.md#2025-04-21_snippet_4\n\nLANGUAGE: custom\nCODE:\n```\n## [Catch]\n\nprint\n  text=Try again\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install Phaser 3 Rex plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Compiling Expressions Using Plugin\nDESCRIPTION: Demonstrates how to directly compile an expression string into a function object using the plugin instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar f = scene.plugins.get('rexexpressionparserplugin').compile(expressionString);\n// var value = f(context);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: This snippet demonstrates how to install the rex plugins package using npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheeltoupdown.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading Grid Table Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the Grid Table plugin minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexgridtableplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgridtableplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Importing Broadcast Class in JavaScript\nDESCRIPTION: Demonstrates how to directly import the Broadcast class for more granular control over the Firebase messaging functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-broadcast.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Broadcast } from 'phaser3-rex-plugins/plugins/firebase-components.js';\nvar messager = new Broadcast(config);\n```\n\n----------------------------------------\n\nTITLE: Incrementing Progress Value\nDESCRIPTION: Methods to increase the progress value by a specified increment amount, with options for scaled or normalized increments.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.addValue(inc, min, max); // inc: min ~ max\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.addValue(inc); // inc: 0 ~ 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.value += inc; // inc: 0 ~ 1\n```\n\n----------------------------------------\n\nTITLE: Destroying Custom Game Objects\nDESCRIPTION: Commands to destroy a specific game object, all game objects of a type, or all game objects of a type excluding a specific one.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\nNAME.destroy\n```\n\nLANGUAGE: markdown\nCODE:\n```\nGOTYPE.destroy\n```\n\nLANGUAGE: markdown\nCODE:\n```\n!NAME.destroy\n```\n\n----------------------------------------\n\nTITLE: Adding Image Input Label Object to Scene\nDESCRIPTION: Code snippet for adding an Image Input Label object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar imageInputLabel = scene.rexUI.add.imageInputLabel(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM\nDESCRIPTION: Shows the NPM command to install the plugin package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Displaying Edit Dialog as Modal (Custom Configuration)\nDESCRIPTION: Opens the edit dialog as a modal with custom configuration options for appearance, behavior, and transitions. Includes settings for backdrop, close conditions, and animation durations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.modal({\n    // cover: {\n    //     color: 0x0,\n    //     alpha: 0.8,\n    //     transitIn: function(gameObject, duration) { },\n    //     transitOut: function(gameObject, duration) { },\n    // },\n    // cover: false, \n\n    // When to close modal dialog?\n    // touchOutsideClose: false,\n    // anyTouchClose: false,\n    // timeOutClose: false,\n    // manualClose: false,\n\n    // duration: {\n    //     in: 200,\n    //     hold: 2000,\n    //     out: 200\n    // }\n\n    // transitIn: 0,\n    // transitOut: 0,\n\n    // destroy: true\n}, onClose);\n```\n\n----------------------------------------\n\nTITLE: Handling Value Change Events\nDESCRIPTION: Event listener for slider value changes\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/slider.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nslider.on('valuechange', function(newValue, prevValue){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Creating LayerManager Instance Directly from Class\nDESCRIPTION: Creates a LayerManager instance directly using the imported class, bypassing the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar layerManager = new LayerManager(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Adding LocalForage Files Object\nDESCRIPTION: Shows how to add the LocalForage files object to the scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage-files.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileManager = scene.plugins.get('rexlocalforagefilesplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Rotate Behavior to a Game Object\nDESCRIPTION: Shows how to add the Rotate behavior to a game object after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotate.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotate = scene.plugins.get('rexrotateplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Uploading String to Firebase Storage in JavaScript\nDESCRIPTION: Upload a string to Firebase Storage using putString method. Supports regular strings, base64, base64url, and data URL formatted strings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-storage.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileRef = storageRef.child('path/to/filename');\nvar uploadTask = fileRef.putString(content)\n    .then(function (snapshot) {})\n    .catch(function (error) {});\n```\n\n----------------------------------------\n\nTITLE: Loading Canvas Input Plugin via CDN\nDESCRIPTION: Loads the minified plugin file in the game's preload stage and creates a canvas input object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvasinput.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcanvasinputplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcanvasinputplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.rexCanvasInput(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Creating TileSprite Bitmap Mask\nDESCRIPTION: Creates a bitmap mask for the TileSprite object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilesprite.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase Plugin in Phaser 3 Preload Stage\nDESCRIPTION: Loads the minified Firebase plugin file in the Phaser 3 preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfirebaseplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebaseplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Handling Pause Event in Youtube Player for Phaser 3\nDESCRIPTION: Event handler for when the Youtube video is paused.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('pause', function(player){ }, scope);\n```\n\n----------------------------------------\n\nTITLE: Applying Dissolve Effect to a Camera in Phaser 3\nDESCRIPTION: Applies the dissolve effect to a camera after loading the plugin as a minified file. This allows the effect to be applied to everything the camera renders.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexdissolvepipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Installing Horrifi Pipeline Plugin via NPM\nDESCRIPTION: Command to install the Phaser 3 Rex Plugins package which includes the Horrifi Pipeline plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Configuring Alpha Mask Image Plugin in Game Config\nDESCRIPTION: Demonstrates how to install the Alpha Mask Image plugin in the configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/alphamaskimage.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexAlphaMaskImagePlugin',\n            plugin: AlphaMaskImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating InTouching Instance via Class Constructor\nDESCRIPTION: Creates a new InTouching instance by directly instantiating the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar intouching = new InTouching(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Origin of Group Members in Phaser 3\nDESCRIPTION: Sets the origin point of all group members, with optional step parameters for variation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setOrigin(originX, originY);\n// group.setOrigin(originX, originY, stepX, stepY);\n```\n\n----------------------------------------\n\nTITLE: Importing Rex UI Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Rex UI Plugin in the main game configuration. This allows the plugin to be available in all scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthbuttons.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Installs the phaser3-rex-plugins package via NPM, which includes the TCRP plugin among other Phaser 3 extensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Stopping Animation on Sprite in Phaser 3\nDESCRIPTION: Immediately stops the currently playing animation on the sprite.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.stop();\n```\n\n----------------------------------------\n\nTITLE: Listening for Key Combo Match Events in Phaser 3\nDESCRIPTION: Sets up an event listener that triggers when a key combo is successfully matched. The callback receives both the keyCombo object and the keyboard event that completed the match.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyboardcombo.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.keyboard.on('keycombomatch', function (keyCombo, keyboardEvent) { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Effect with TintRGB\nDESCRIPTION: Demonstrates how to create a fade effect using tweens with the TintRGB properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tintrgb.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.tweens.add({\n    targets: gameObject,\n    tintR: 0,\n    tintG: 0,\n    tintB: 0,\n    // tintGray: 0,\n    duration: 3000\n})\n```\n\n----------------------------------------\n\nTITLE: Resetting Display Content in Edit Dialog (Simple Version)\nDESCRIPTION: Sets or resets the text content of the dialog's title, name labels, and button using a simple configuration object. Each property accepts a string value that will be displayed in the corresponding UI element.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.resetDisplayContent({\n    title: '',\n    firstNameTitle: '',\n    lastNameTitle: '',\n    button: '',\n\n    firstName: '',\n    lastName: '',\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Ellipse Type in Phaser 3\nDESCRIPTION: Retrieves the type identifier for an ellipse geometry object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar type = ellipse.type; // 1\n```\n\n----------------------------------------\n\nTITLE: Importing BitmapZone Class Directly\nDESCRIPTION: Shows how to import and use the BitmapZone class directly from the plugin package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmapzone.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BitmapZone from 'phaser3-rex-plugins/plugins/bitmapzone.js';\nvar bitmapZone = new BitmapZone(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Adding to Collision Mask in Phaser 3 Arcade Physics\nDESCRIPTION: Adds a category to the collision mask, allowing this body to collide with bodies in that category.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.addCollidesWith(category):\n```\n\n----------------------------------------\n\nTITLE: Importing Full Window Rectangle Class\nDESCRIPTION: Imports the FullWindowRectangle class for direct usage without plugin installation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport FullWindowRectangle from 'phaser3-rex-plugins/plugins/fullwindowrectangle.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Direction Mode\nDESCRIPTION: Shows how to set the direction mode for swipe detection using either numeric or string values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nswipe.setDirectionMode(dirMode);  // 0,1,2,3,'up&down','left&right','4dir','8dir'\n// swipe.dirMode = dirMode;  // 0,1,2,3\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Command to install the Rex plugins package from npm, which includes the tap gesture plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-tap.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase SDK Scripts\nDESCRIPTION: HTML script tags for including required Firebase SDK components\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-leaderboard.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/10.13/firebase-app-compat.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/10.13/firebase-firestore-compat.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Repeated Loop Section\nDESCRIPTION: Loop block that repeats 7 times, printing a message and waiting for 1 second each iteration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/parallel-groups/parallel0.md#2025-04-21_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nprint\n  text=Task0 loop\n\nwait\n  duration=1000\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins Package via NPM\nDESCRIPTION: Command to install the Rex plugins package from npm repository.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Getting Tint Properties from a NinePatch2 Object\nDESCRIPTION: Retrieves the current tint value and tintFill state from a NinePatch2 object. This can be used to check the current tinting configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar tint = ninePatch.tint;\nvar tintFill = ninePatch.tintFill;\n```\n\n----------------------------------------\n\nTITLE: Accessing Text Element in imageInputLabel (JavaScript)\nDESCRIPTION: Retrieves the text game object from an imageInputLabel component. This provides access to the text display portion for customization or content updates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = imageInputLabel.getElement('text');\n```\n\n----------------------------------------\n\nTITLE: Updating Documents in a Result Set\nDESCRIPTION: Update all documents in a result set using a function that modifies each document. The function must return the modified document.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.chain().find({}).update(\n    function(doc) { \n        //\n        return doc;\n    });\n```\n\n----------------------------------------\n\nTITLE: Leaving Chat Room\nDESCRIPTION: JavaScript code for leaving the chat room.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nroom.leaveRoom();\n```\n\n----------------------------------------\n\nTITLE: Setting and Clamping Vertical Scroll Position in TextArea\nDESCRIPTION: Shows how to set the vertical scroll position with clamping to prevent scrolling beyond content boundaries.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.setChildOY(oy, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Rectangle Iteration Value Direct\nDESCRIPTION: Sets the iteration value directly through property assignment to determine the number of interpolation points in round corners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-roundrectangle.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrect.iteration = value;\n```\n\n----------------------------------------\n\nTITLE: Importing Text Translation Plugin via Game Configuration\nDESCRIPTION: Code demonstrating how to import and install the text translation plugin in the game configuration using npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport TextTranslationPlugin from 'phaser3-rex-plugins/plugins/texttranslation-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTextTranslation',\n            plugin: TextTranslationPlugin,\n            start: true,\n            mapping: 'translation'  // Add text-translation plugin to `scene.translation`\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Cued Event in Youtube Player for Phaser 3\nDESCRIPTION: Event handler for when a Youtube video is cued and ready to play.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('cued', function(player){ }, scope);\n```\n\n----------------------------------------\n\nTITLE: Importing OnlineUserList Class\nDESCRIPTION: JavaScript code to import the OnlineUserList class directly from the firebase-components module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OnlineUserList } from 'phaser3-rex-plugins/plugins/firebase-components.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Integer (Three Values)\nDESCRIPTION: Methods for setting three integer uniform values in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set3i(name, value0, value1, value2);\n// pipelineInstance.set3i(name, value0, value1, value2, shader);\n```\n\n----------------------------------------\n\nTITLE: Getting Brightness Property\nDESCRIPTION: Retrieves the current brightness value from a cross-stitching pipeline instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar brightness = pipelineInstance.brightness;\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: NPM command to install the phaser3-rex-plugins package which contains the toggle-switch plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Adding Conditions Table Object (Minified Plugin)\nDESCRIPTION: Shows how to add a Conditions Table object to the scene after loading the minified plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/conditionstable.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar conditionstable = scene.plugins.get('rexconditionstableplugin').add();\n```\n\n----------------------------------------\n\nTITLE: Loading Perspective Plugin (Minified Version)\nDESCRIPTION: Instructions for loading the minified plugin file in the preload stage and adding perspective behavior to a container\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-perspective.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexperspectiveimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexperspectiveimageplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar perspective = scene.plugins.get('rexperspectiveimageplugin').addContainerPerspective(container, config);\n```\n\n----------------------------------------\n\nTITLE: Node.js Example of Character-based Diff with Colored Output\nDESCRIPTION: Example showing how to use jsdiff in a Node.js environment to compare two strings character by character and display differences with color coding.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/utils/jsdiff/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('colors');\nconst Diff = require('diff');\n\nconst one = 'beep boop';\nconst other = 'beep boob blah';\n\nconst diff = Diff.diffChars(one, other);\n\ndiff.forEach((part) => {\n  // green for additions, red for deletions\n  // grey for common parts\n  const color = part.added ? 'green' :\n    part.removed ? 'red' : 'grey';\n  process.stderr.write(part.value[color]);\n});\n\nconsole.log();\n```\n\n----------------------------------------\n\nTITLE: Importing CSV to Array Module\nDESCRIPTION: Shows how to import the CSV to Array converter as a module\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvtoarray.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport rexCSVToArray from './plugins/csvtoarray.js';\n```\n\n----------------------------------------\n\nTITLE: Removing Private Animation from Sprite in Phaser 3\nDESCRIPTION: Removes a private animation from a specific sprite's animation state. The 'key' parameter is the unique identifier of the animation to remove.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.anims.remove(key);\n```\n\n----------------------------------------\n\nTITLE: RetroFont TEXT_SET9 Definition\nDESCRIPTION: Uppercase letters with brackets, numbers and basic punctuation\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ()-0123456789.:,\\'\"?!'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local State of Child in Container-Lite (JavaScript)\nDESCRIPTION: Methods to get the local state of a child object within a Container-Lite instance. The local state includes properties such as position, rotation, scale, visibility, and alpha.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar localState = container.getLocalState(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar localState = child.rexContainer;\n```\n\n----------------------------------------\n\nTITLE: Loading Quad Image Plugin in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to load the Quad Image plugin minify file in the preload stage of a Phaser 3 game scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-image.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexquadimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexquadimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Game Objects and Camera Effects\nDESCRIPTION: Controls logging, positions game objects using viewport coordinates, plays background music, and applies camera effects like rotation, zoom, scrolling, shaking, and flashing. Also demonstrates character movement using tween animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/command-executor/command-executor.md#2025-04-21_snippet_1\n\nLANGUAGE: custom\nCODE:\n```\n// Manipulate gameobjects\n\nlog.disable\n\nlog\n  text=Test disable\n\nlog.enable\n\nlog\n  text=Start...\n\n\nDialog.set\n  vpy=0.99\n  alpha=0.8\n\nCharacterA.set\n  vpx=-0.2\n  vpy=1\n\nCharacterB.set\n  vpx=-0.4\n  vpy=1\n\nCharacterC.set\n  vpx=-0.3\n  vpy=1\n\nbgm.play\n  key=theme0\n\ncamera.set\n  x=0\n  y=200\n  rotate=-90\n  zoom=2\n\ncamera.rotateTo\n  rotate=0\n  duration=2000\n  ease=Cubic\n\ncamera.zoomTo\n  zoom=1\n  duration=2000\n  ease=Cubic\n  wait\n\nwait\n  time=300\n\ncamera.scrollTo\n  x=0\n  y=0\n  duration=2000\n  ease=Cubic\n  wait\n\ncamera.shake\n  duration=500\n\ncamera.flash\n\n\nCharacterA.to\n  vpx=0.8\n  ease=Back\n  duration=2000\n  wait=false\n\nCharacterB.to\n  vpx=0.2\n  ease=Back\n  duration=2000\n  wait=false\n\nCharacterC.to\n  vpx=0.5\n  ease=Back\n  duration=2000\n// Wait until tween complete\n\nlog\n  text=CharacterA.x = {{@CharacterA.x}}\n\n\n// Ease all SPRITE game objects excluding CharacterA\n// !CharacterA.to\n//   alpha=0.5\n//   duration=300\n// Wait until tween complete\n\nCharacterA.focus\n```\n\n----------------------------------------\n\nTITLE: Importing LocalForage Files Class\nDESCRIPTION: Shows how to import the Files class directly from the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage-files.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Files from 'phaser3-rex-plugins/plugins/localforagefiles.js';\n```\n\n----------------------------------------\n\nTITLE: Adding Event Sheet Manager Object (Plugin Import Method)\nDESCRIPTION: Creates an event sheet manager object after importing the plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar eventSheetManager = scene.plugins.get('rexMarkedEventSheets').add(config);\n```\n\n----------------------------------------\n\nTITLE: Creating and Revoking Object URLs for Dropped Files in Phaser 3\nDESCRIPTION: Shows how to create and revoke object URLs for dropped files, useful for temporary file references.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filedropzone.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar objectURL = URL.createObjectURL(file);\n\nURL.revokeObjectURL(objectURL);\n```\n\n----------------------------------------\n\nTITLE: Accessing List elements with positional properties in Phaser 3\nDESCRIPTION: Properties to access the first, next, previous, and last elements in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar firstChild = list.first;\nvar nextChild = list.next;\nvar prevChild = list.previous;\nvar lastChild = list.last;\n```\n\n----------------------------------------\n\nTITLE: Projecting a Vector2 in Phaser 3\nDESCRIPTION: Projects the current vector onto another Vector2 source, changing the current vector.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvector.project(srcVector2);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Secondary Bar Color in Circular Progress\nDESCRIPTION: Shows how to get and set a secondary color for the circular progress bar.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-circularprogress.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar barColor2 = circularProgress.barColor2;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncircularProgress.setBarColor2(color);\n// circularProgress.barColor2 = color;\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Render Texture Instance in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates different ways to create a perspective render texture instance in a Phaser 3 scene, including configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-rendertexture.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexPerspectiveRenderTexturege(x, y, width, height, {\n    // hideCCW: true,\n    // gridWidth: 32,\n    // girdHeight: 32\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexPerspectiveRenderTexturege({\n    // x: 0,\n    // y: 0,\n    // width: 32,\n    // height: 32,\n    // hideCCW: true,\n    // gridWidth: 32,\n    // girdHeight: 32\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.make.rexPerspectiveRenderTexturege({\n    x: 0,\n    y: 0,    \n    width: 32,\n    height: 32,\n\n    // hideCCW: false,\n    // gridWidth: 32,\n    // girdHeight: 32,\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Thumb Corner Ratio in Phaser 3\nDESCRIPTION: Methods to get and set the corner radius of the toggle switch thumb. Uses thumbRadius property for controlling the corner ratio of track.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar thumbRadius = toggleSwitch.thumbRadius;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setThumbRadius(thumbRadius);\n// toggleSwitch.thumbRadius = thumbRadius;\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of Custom Full Window Rectangle\nDESCRIPTION: Instantiates the custom rectangle class with the required parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new MyFullWindowRectangle(scene, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Using Simplex2 and Simplex3 Noise Functions\nDESCRIPTION: Generating 2D and 3D Simplex noise values that range from -1 to 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perlin.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = noise.simplex2(x, y);\nvar value = noise.simplex3(x, y, z);\n```\n\n----------------------------------------\n\nTITLE: Shifting Text Start Position in Phaser 3\nDESCRIPTION: Sets the X-offset for the starting position of text rendering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setXOffset(value);\n```\n\n----------------------------------------\n\nTITLE: Defining Print Commands for Event Tracking in Event Sheet 0\nDESCRIPTION: A series of print commands that track the lifecycle of Event 0, from start through progress stages to completion. Each command outputs a descriptive text message indicating the current state of the event execution.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/save-load/eventsheet0.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nprint\n  text=Event 0 start\n\nprint\n  text=Event 0 progress 0\n\nprint\n  text=Event 0 progress 1\n\nprint\n  text=Event 0 complete\n```\n\n----------------------------------------\n\nTITLE: Polygon Shape Smoothing\nDESCRIPTION: Method to smooth the polygon vertices over specified iterations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-polygon.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npolygon.smooth(iterations);\n```\n\n----------------------------------------\n\nTITLE: NPM Plugin Installation\nDESCRIPTION: Command to install the plugin package via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-hexagon.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating GroupNavigator Instance from Global Plugin\nDESCRIPTION: Creates a new instance of the GroupNavigator from the globally registered plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar navigator = scene.plugins.get('rexGroupNavigator').add(config);\n```\n\n----------------------------------------\n\nTITLE: Basic Less Than Condition Check\nDESCRIPTION: Tests if coin value is less than 10 with print statements showing the outcome.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/if-else/if-else.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nprint\\\n  text=----\n\nset\n  coin=8\n\n### [If coin < 10]\n\nprint\\\n  text=(coin < 10)\n\n### [Else]\n\nprint\\\n  text=NOT (coin < 10)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game with Slider Plugin\nDESCRIPTION: Game configuration code for including the slider plugin globally\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/slider.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport SliderPlugin from 'phaser3-rex-plugins/plugins/slider-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexSlider',\n            plugin: SliderPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Element by Name in Phaser3 Rex UI\nDESCRIPTION: Methods to retrieve a specific child element by its name, with optional recursive search through all children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = sizer.getElement('#' + name);\n// var gameObject = sizer.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = sizer.getByName(name);\n// var gameObject = sizer.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Installs the Rex plugins package using npm for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Extending Lines in Phaser 3\nDESCRIPTION: Demonstrates how to extend a line by adding length to either end.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = Phaser.Geom.Line.Extend(line, left, right);\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Tag End Events in Bracket Parser 2\nDESCRIPTION: Demonstrates how to handle specific tag end events with payload in Bracket Parser 2.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nparser.on('-' + TagName, function(payload){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Tab and Page Focus Event Handlers\nDESCRIPTION: Event handlers for tab and page focus/blur events when switching between pages\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\npages.on('tab.focus', function(tab, key) {\n    // ...\n}, scope);\npages.on('page.focus', function(page, key) {\n    // ...\n}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npages.on('tab.blur', function(tab, key) {\n    // ...\n}, scope);\npages.on('page.blur', function(page, key) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Angular Velocity in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the angular velocity of a physics body, which determines how fast it rotates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setAngularVelocity(v);\n```\n\n----------------------------------------\n\nTITLE: Creating Full Window Rectangle with Direct Class Import\nDESCRIPTION: Creates a rectangle instance from the imported class and adds it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new FullWindowRectangle(scene, fillColor, fillAlpha);\nscene.add.existing(rect);\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangle from XY Coordinates in Phaser 3\nDESCRIPTION: Creates a Rectangle using two sets of x,y coordinates representing opposite corners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rectangle.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = Phaser.Geom.Rectangle.FromXY(x1, y1, x2, y2);\n// var rect = Phaser.Geom.Rectangle.FromXY(x1, y1, x2, y2, rect);  // push rect\n```\n\n----------------------------------------\n\nTITLE: Getting Repeat Count of a Timer in Phaser 3\nDESCRIPTION: Retrieves the number of times the timer will repeat or has repeated.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar repeat = timer.getRepeatCount();\n```\n\n----------------------------------------\n\nTITLE: Setting Checker Animation Duration\nDESCRIPTION: Sets the animation duration for the checkbox checker animation, controlling how long the check mark drawing animation takes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setCheckerAnimDuration(duration);\ncheckbox.checkerAnimDuration = duration;\n```\n\n----------------------------------------\n\nTITLE: Removing Post FX Pipeline from a Camera\nDESCRIPTION: Method to remove a specific post FX pipeline from a camera.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.removePostPipeline(MyPostFxClass);\n```\n\n----------------------------------------\n\nTITLE: Getting Cross-Stitching Effect Instance from Game Object\nDESCRIPTION: Retrieves the cross-stitching pipeline instance applied to a specific game object, with options to get single or multiple instances.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexCrossStitchingPipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexCrossStitchingPipeline').get(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Size\nDESCRIPTION: Sets the width and height of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setSize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Importing Text Area Class Directly\nDESCRIPTION: Imports the TextArea class directly from the UI components module, allowing for more granular control over which UI components are included in the game bundle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TextArea } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Getting Skew Values (JavaScript)\nDESCRIPTION: Demonstrates how to retrieve current skew values from a ContainerSkew instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-skew.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar skewXRad = image.skewX;\nvar skewXDeg = image.skewXDeg;\n\nvar skewYRad = image.skewY;\nvar skewYDeg = image.skewYDeg;\n```\n\n----------------------------------------\n\nTITLE: Importing Cross-Stitching PostFx Class and Adding to Game Pipeline\nDESCRIPTION: Imports the CrossStitchingPostFx class directly and adds it to the game pipeline configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport CrossStitchingPostFx from 'phaser3-rex-plugins/plugins/crossstitchingpipeline.js';\nvar config = {\n    // ...\n    pipeline: [CrossStitchingPostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading TransitionImagePack Plugin via Minify File in Phaser 3\nDESCRIPTION: Demonstrates how to load the TransitionImagePack plugin using the minified file in the preload stage and create a transition image instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimagepack.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextransitionimagepackplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextransitionimagepackplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexTransitionImagePack(x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Triangle Type in Phaser 3\nDESCRIPTION: Retrieves the type identifier of a triangle shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar type = triangle.type; // 6\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM for Phaser 3\nDESCRIPTION: Command to install the Rex plugins package, which includes the jigsaw image cutting functionality, via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cutjigsawimage.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing NumberBar Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the NumberBar plugin in the main game configuration. This method is used when managing plugins through npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from \"phaser3-rex-plugins/templates/ui/ui-plugin.js\";\nvar config = {\n  // ...\n  plugins: {\n    scene: [\n      {\n        key: \"rexUI\",\n        plugin: UIPlugin,\n        mapping: \"rexUI\",\n      },\n      // ...\n    ],\n  },\n  // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Exporting Minified Plugin Files in Phaser3 Rex Notes Project\nDESCRIPTION: Instructions for building and exporting minified versions of the plugins using npm scripts.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Click `export-plugins.bat`\n    - `npm run build`\n```\n\n----------------------------------------\n\nTITLE: Setting Unchecked Box Stroke Style\nDESCRIPTION: Sets the box stroke line width, color, and alpha values for the checkbox when unchecked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setUncheckedBoxStrokeStyle(lineWidth, color, alpha);\n// checkbox.uncheckedBoxLineWidth = lineWidth;\n// checkbox.uncheckedBoxStrokeColor = color;\n// checkbox.uncheckedBoxStrokeAlpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Configuring ImageBox Plugin in Game Config\nDESCRIPTION: Setup code for including the ImageBox plugin in the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imagebox.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ImageBoxPlugin from 'phaser3-rex-plugins/plugins/imagebox-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexImageBoxPlugin',\n            plugin: ImageBoxPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Data State Serialization\nDESCRIPTION: Methods for saving and loading data states using JSON serialization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/restorabledata.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar o = data.toJSON();\ndata.resetFromJSON(o);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = JSON.stringify(data);\ndata.resetFromJSON(JSON.parse(s));\n```\n\n----------------------------------------\n\nTITLE: Accessing XML Data from Cache in Phaser 3\nDESCRIPTION: Method to retrieve loaded XML data from the XML cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.xml;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the Phaser 3 Rex Plugins package from NPM, which includes the NameInputDialog component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the Loading Animation Scene plugin using the minified file in a Phaser 3 game's preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loading-animation-scene.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexloadinganimationsceneplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexloadinganimationsceneplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Getting Bob Object Tint in Phaser 3\nDESCRIPTION: Retrieves the current tint color of a Bob object. The tint is applied to the entire texture of the Bob, modifying its appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar tint = bob.tint;\n```\n\n----------------------------------------\n\nTITLE: Importing IdAlias Class\nDESCRIPTION: JavaScript code for importing the IdAlias class from the Firebase components module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IdAlias } from 'phaser3-rex-plugins/plugins/firebase-components.js';\n```\n\n----------------------------------------\n\nTITLE: Accessing Particle Bounds Rectangle in JavaScript\nDESCRIPTION: Retrieves the Rectangle instance that defines the particle bounds. This can be used to inspect or modify the bounds geometry.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = bounds.bounds;\n```\n\n----------------------------------------\n\nTITLE: Importing Split Pipeline Class for Direct Use\nDESCRIPTION: Imports the Split Pipeline class directly and configures it in the Phaser3 game pipeline configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport SplitPostFx from 'phaser3-rex-plugins/plugins/splitpipeline.js';\nvar config = {\n    // ...\n    pipeline: [SplitPostFx]\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Plugin in Phaser3 Game Configuration\nDESCRIPTION: JavaScript code showing how to import and configure the UI plugin in the game configuration, enabling the use of the knob component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-knob.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrap-Expand Text\nDESCRIPTION: Configures text wrapping with optional minimum width. Supports various text object types including bitmap and dynamic text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = scene.rexUI.wrapExpandText(textObject);\n// var textObject = scene.rexUI.wrapExpandText(textObject, minWidth);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    lineHeight: 24,\n    padding: {bottom: 12}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rhombus Properties in Phaser 3\nDESCRIPTION: Demonstrates various methods to set properties of a Rhombus object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rhombus.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrhombus.setTo(x, y, width, height);\n\nrhombus.setPosition(x, y);\n// or\nrhombus.x = 0;\nrhombus.y = 0;\n// or\nrhombus.left = 0;       // rhombus.x\nrhombus.top = 0;        // rhombus.y\nrhombus.right = 0;      // rhombus.x\nrhombus.bottom = 0;     // rhombus.y\n\nrhombus.setSize(width, height);\n// or\nrhombus.width = width;\nrhombus.height = height;\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Height Only\nDESCRIPTION: Scales down only the height of a game object before destroying it, with optional ease function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar scale = scene.plugins.get('rexScale').scaleDownDestroy(gameObject, duration, 'y');\n// var scale = scene.plugins.get('rexScale').scaleDownDestroy(gameObject, duration, 'y', ease);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: JavaScript configuration to initialize Firebase with required credentials and settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Receiver for Messages\nDESCRIPTION: Sets the receiver ID for the messages object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-messages.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmessages.setReceiver(userID);\n```\n\n----------------------------------------\n\nTITLE: Getting Fixed-Part Scale in NinePatch\nDESCRIPTION: Retrieves the current scale factors for fixed parts of a NinePatch object. These properties indicate how the fixed parts (corners and edges) are scaled.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar scaleX = ninePatch.fixedPartScaleX;\nvar scaleY = ninePatch.fixedPartScaleY;\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Progress Class\nDESCRIPTION: Code snippet showing how to import the CustomProgress class directly from the Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport CustomProgress from 'phaser3-rex-plugins/plugins/bbcodetext.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Hidden Input Text Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the Hidden Input Text plugin in the game configuration of a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/hiddeninputtext.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport HiddenInputTextPlugin from 'phaser3-rex-plugins/plugins/hiddeninputtext-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexHiddenInputTextPlugin',\n            plugin: HiddenInputTextPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Bullet Instance in Phaser 3\nDESCRIPTION: Creates a new bullet instance with specified configuration options. This sets up the bullet behavior for a game object, defining its speed, wrap settings, and initial angle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bullet.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar bullet = scene.plugins.get('rexBullet').add(gameObject, {\n    speed: 200,\n    // wrap: false,\n    // padding: 0,\n    // enable: true,\n\n    // angle: undefined,\n    // rotation: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Parallel Event Sheet with Condition Check\nDESCRIPTION: Specifies an event sheet that runs in parallel mode with a condition check requiring coins to be greater than 5.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/parallel/parallel0.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Event sheet 0\n\nparallel\n\n## [Condition]\n\ncoin > 5\n```\n\n----------------------------------------\n\nTITLE: Importing Pages Class Directly\nDESCRIPTION: Code to import the Pages class directly without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pages } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the Phaser 3 Rex Plugins package from NPM, which includes the UI components like the text area.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Accessing All Bob Objects in a Blitter Container\nDESCRIPTION: Retrieves the array of all Bob objects contained within a Blitter. This allows for iterating over or directly manipulating all Bobs at once.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar bobs = blitter.children.list;\n```\n\n----------------------------------------\n\nTITLE: Iterating over children in a Phaser 3 List\nDESCRIPTION: Methods to iterate over all children in the List and execute a callback function for each child.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nlist.each(callback);\n// list.each(callback, context);\n// list.iterate(callback, context, arg0, arg1, ...);\n```\n\n----------------------------------------\n\nTITLE: Importing BuildArcadeObject Class in Phaser 3\nDESCRIPTION: This snippet shows how to import the BuildArcadeObject class directly from the phaser3-rex-plugins package. This allows for more direct use of the BuildArcadeObject functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buildarcadeobject.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport BuildArcadeObject from 'phaser3-rex-plugins/plugins/buildarcadeobject.js';\n```\n\n----------------------------------------\n\nTITLE: Shuffling Arrays in Phaser 3\nDESCRIPTION: Demonstrates how to randomly shuffle the elements of an array using Phaser's utility function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-sort.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = Phaser.Utils.Array.Shuffle(arr);\n```\n\n----------------------------------------\n\nTITLE: Getting all children with specific property value in Phaser 3 List\nDESCRIPTION: Method to get all children that have a property matching a specific value, with optional start and end indices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar child = list.getAll(property, value, startIndex, endIndex);\n// value: the value to test the property against. Must pass a strict (`===`) comparison check.\n```\n\n----------------------------------------\n\nTITLE: Getting Points Around Ellipse Edge by Step in Phaser 3\nDESCRIPTION: Creates an array of points around the edge of an ellipse with a specific step distance between points.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = ellipse.getPoints(false, step);\n// var points = ellipse.getPoints(false, step, points);  // push points\n```\n\n----------------------------------------\n\nTITLE: Resizing Youtube Player in Phaser 3\nDESCRIPTION: Method to resize the Youtube player element to new width and height dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.resize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Setting Triangle Properties in Phaser 3 (Method 2)\nDESCRIPTION: Copies properties from one triangle to another.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Triangle.CopyFrom(source, dest);\n```\n\n----------------------------------------\n\nTITLE: Setting Name Input Properties\nDESCRIPTION: Sets various properties of the name input dialog including position, transparency, and animation parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/nameinput-dialog-commands.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Creating ShatterImage from JSON Configuration\nDESCRIPTION: Shows how to create a ShatterImage using scene.make and a JSON configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar perspectiveimage = scene.make.rexShatterImage({\n    x: 0,\n    y: 0,\n    key: null,\n    frame: null,\n\n    // ringRadiusList: [1 / 27, 3 / 27, 9 / 27],\n    // ringRadiusList: function(width, height) {\n    //    return [1 / 27, 3 / 27, 9 / 27];\n    // },\n\n    // samplesPerRing: 12,\n    // variation: 0.25,\n    \n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Value\nDESCRIPTION: Getting the default value for a specific key from the data manager\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage-data.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = data.getDefaultValue(key);\n```\n\n----------------------------------------\n\nTITLE: Loading File in Firebase File Manager\nDESCRIPTION: JavaScript code to load a specific file by ID in the Firebase file manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-files.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfileManager.load(fileID)\n    .then(function(result) { \n        // var header = result.header;\n        // var content = result.content;\n        // var fileID = result.fileID;\n        // var userID = result.userID;\n    })\n    .catch(function(result) {\n        // var error = result.error;\n        // var fileID = result.fileID;\n        // var userID = result.userID;\n    })\n```\n\n----------------------------------------\n\nTITLE: Handling Key2 Change in 3D Firebase Item Table\nDESCRIPTION: JavaScript code to set up an event handler for when a key2's value changes in a 3D Firebase item table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('changekey2', function(key0, key1, key2, value) {  });\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Configuration\nDESCRIPTION: Demonstrates how to install and configure the plugin through NPM in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles-along-bounds.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport DragPlugin from 'phaser3-rex-plugins/plugins/particlesalongbounds-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexParticlesAlongBounds',\n            plugin: ParticlesAlongBoundsPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Polygon Mask\nDESCRIPTION: Method to create a geometry mask from a polygon shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-polygon.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = polygon.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha Value of an Arc in Phaser 3\nDESCRIPTION: Sets the alpha (transparency) value for an Arc game object. This can be done either with the setAlpha method or by directly setting the alpha property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\narc.setAlpha(alpha);\n// arc.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: NPM Package Installation\nDESCRIPTION: Installing Rex plugins package via npm\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage-data.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Loading Spiral Curve Plugin\nDESCRIPTION: Loads the minified spiral curve plugin during the game's preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/curve-spiral.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexspiralcurveplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexspiralcurveplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Promise Plugin in Game Configuration\nDESCRIPTION: Shows how to install the plugin through npm and configure it in the game configuration file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eventpromise.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport EventPromisePlugin from 'phaser3-rex-plugins/plugins/eventpromise-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexEventPromise',\n            plugin: EventPromisePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar promoise = scene.plugins.get('rexEventPromise').waitEvent(eventEmitter, eventName);\n// var promoise = scene.plugins.get('rexEventPromise').waitComplete(eventEmitter);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install Phaser 3 Rex plugins package from NPM, which includes the ScaleOuter plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaleouter.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Float (Four Values)\nDESCRIPTION: Methods for setting four float uniform values in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set4f(name, value0, value1, value2, value3);\n// pipelineInstance.set4f(name, value0, value1, value2, value3, shader);\n```\n\n----------------------------------------\n\nTITLE: Scrolling TextAreaInput to Specific Lines in JavaScript\nDESCRIPTION: These snippets demonstrate how to scroll the TextAreaInput to specific lines, including next line, next n lines, and a specific line index.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.scrollToNextLine();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.scrollToNextLine(n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntextAreaInput.scrollToLine(lineIndex);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineIndex = textAreaInput.lineIndex;\n```\n\n----------------------------------------\n\nTITLE: Removing Cross-Stitching Effect from Game Object\nDESCRIPTION: Removes the cross-stitching post-processing effect from a specific game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crossstitching.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexCrossStitchingPipeline').remove(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Importing Keys Hub Class Directly\nDESCRIPTION: This code shows how to import the Keys Hub class directly and create an instance without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyshub.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport KeysHub from 'phaser3-rex-plugins/plugins/keyshub.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keysHub = new KeysHub(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Destroying Name Input Dialog\nDESCRIPTION: Removes the name input dialog from the game scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/nameinput-dialog-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.destroy\n```\n\n----------------------------------------\n\nTITLE: Adding ContainerSkew Behavior to a Container (JavaScript)\nDESCRIPTION: Shows how to add the ContainerSkew behavior to a Phaser 3 container object after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-skew.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar skew = scene.plugins.get('rexquadimageplugin').addContainerSkew(container, config);\n```\n\n----------------------------------------\n\nTITLE: Loading CursorAtBounds Plugin in Phaser3\nDESCRIPTION: Loads the minified plugin file in the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cursoratbounds.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcursoratboundsplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcursoratboundsplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Checking Tap Status and Properties in Phaser 3\nDESCRIPTION: Demonstrates how to check the current tapping status and access various properties of the tap input instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-tap.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar isTapping = tap.isTapping;\nvar holdTime = tap.holdTime;\nvar tapInterval = tap.tapInterval;\nvar dragThreshold = tap.dragThreshold;\nvar tapOffset = tap.tapOffset;\nvar maxTaps = tap.maxTaps;\nvar minTaps = tap.minTaps;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Shapes Object with Config Object in Phaser 3\nDESCRIPTION: Shows how to create a custom shapes object using a configuration object that includes position, size, creation, and update configurations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-shapes.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar customShapes = scene.add.rexCustomShapes({\n    // x: 0,\n    // y: 0,\n    // width: 64,\n    // height: 64,\n    // type: 'rexCustomShapes',\n\n    create: [\n        { name: name0, type: shapeType},\n        { name: name1, type: shapeType},\n        ...\n    ],\n\n    // create: {\n    //     shapeType: [name0, name1, ...],\n    //     shapeType: number,\n    //     shapeType: name,\n    // },\n\n    // create: function() {\n    // \n    // },\n\n    update: function() {\n\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Buttons from Tabs Component\nDESCRIPTION: Methods for removing buttons from different groups in the tabs component. These allow removal of individual buttons or clearing all buttons from a specific group, with optional destruction of the game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabs.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntabls.removeButton(groupName, index, destroyChild);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.removeLeftButton(index, destroyChild);\ntabs.removeRightButton(index, destroyChild);\ntabs.removeTopButton(index, destroyChild);\ntabs.removeBottomButton(index, destroyChild);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabls.clearButtons(groupName, destroyChild);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabs.clearLeftButtons(destroyChild);\ntabs.clearRightButtons(destroyChild);\ntabs.clearTopButtons(destroyChild);\ntabs.clearBottomButtosn(destroyChild);\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle-Switch Track Fill Style\nDESCRIPTION: Gets the current track fill color and alpha values for both true and false states.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = toggleSwitch.trackFillColor;\nvar alpha = toggleSwitch.trackFillAlpha;\n```\n\n----------------------------------------\n\nTITLE: Handling Slider Input Start Events in TextArea\nDESCRIPTION: Shows how to listen for the start of slider drag interactions in the TextArea's slider component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ntextArea.getElement('slider').on('inputstart', function(panel) {\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Imported Grid Cut Image Method in Phaser 3\nDESCRIPTION: Demonstrates how to use the directly imported Grid Cut Image method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridcutimage.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar images = GridCutImage(gameObjects, columns, rows, config);\n```\n\n----------------------------------------\n\nTITLE: Checking If Texture Has Frame in Phaser 3\nDESCRIPTION: Checks if a texture contains a specific frame by name. Returns a boolean indicating whether the frame exists in the texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasFrame = texture.has(frameName);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom RenderTexture Class in Phaser 3\nDESCRIPTION: Creates an instance of a custom RenderTexture class with position and dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar rt = new MyRenderTexture(scene, x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Iterations in Phaser 3\nDESCRIPTION: Sets the iterations value that controls the smoothness of the circle. Default is 0.01, with lower values creating smoother circles at the cost of performance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.iterations = iterations;\n```\n\n----------------------------------------\n\nTITLE: Initial Memory Logging in Phaser\nDESCRIPTION: Logs the memory state at initialization. This is likely used for debugging or monitoring resource usage in a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/memory-monitor/memory-monitor.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nlog.memory\n```\n\n----------------------------------------\n\nTITLE: Creating MoveTo Instance with Configuration in Phaser 3\nDESCRIPTION: Creates a MoveTo instance with configuration options including speed, rotation, occupancy testing, and custom movement behaviors.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar moveTo = scene.rexBoard.add.moveTo(chess, {\n    // speed: 400,\n\n    // rotateToTarget: false,\n\n    // occupiedTest: false,\n    // blockerTest: false,\n    // moveableTest: undefined,\n    // moveableTestScope: undefined,\n    \n    // sneak: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing TCRP Class in Phaser 3\nDESCRIPTION: Instructions for importing the TCRP class directly from the Rex Plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport TCRP from 'phaser3-rex-plugins/plugins/tcrp.js';\n```\n\n----------------------------------------\n\nTITLE: Animating Shattered Face Properties with Tweens\nDESCRIPTION: Demonstrates how to animate multiple properties of shattered faces using Phaser's tween system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimage.startUpdate();\nscene.tweens.add({\n    targets: image.faces,\n    alpha: 0,\n    angle: function () { return -90 + Math.random() * 180; },\n    y: '-=0.5',\n    ease: 'Linear',       // 'Cubic', 'Elastic', 'Bounce', 'Back'\n    duration: 1000,\n    delay: scene.tweens.stagger(20),\n    repeat: 0,            // -1: infinity\n    yoyo: false,\n    onComplete: function () {\n        image.stopUpdate()\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Bullet Plugin via Minified File in Phaser 3\nDESCRIPTION: Loads the bullet plugin using its minified file in the preload stage of a Phaser 3 scene. This method is suitable for quick prototyping or when not using a build system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bullet.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexbulletplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexbulletplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Setting Noise Parameters by Properties in Phaser 3 Dissolve Effect\nDESCRIPTION: Sets the noise parameters (X, Y, Z) for the Perlin noise calculation in the dissolve effect using direct property assignment. These control the dissolve pattern.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.noiseX = noiseX;\npipelineInstance.noiseY = noiseY;\npipelineInstance.noiseZ = noiseZ;\n```\n\n----------------------------------------\n\nTITLE: Setting Display Size of Round Rectangle\nDESCRIPTION: Sets the display width and height of a round rectangle shape using setDisplaySize method or direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nrect.setDisplaySize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Starting TCRP Playback\nDESCRIPTION: Shows how to start playback of the TCRP player, optionally specifying a starting time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.start();\n// player.start(startAt);  // Start-at time in step-count\n```\n\n----------------------------------------\n\nTITLE: Binding Events in Sizer for Phaser 3 Rex UI\nDESCRIPTION: Shows how to bind various events to a Sizer object, including scene events like preupdate, update, postupdate, render, pause, resume, sleep, wake, and shutdown. These bindings are automatically removed when the Sizer is destroyed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.bindEvent(eventEmitter, eventName, callback, scope);\n\nsizer.bindScenePreupdateEvent(callback, scope);\n\nsizer.bindSceneUpdateEvent(callback, scope);\n\nsizer.bindScenePostupdateEvent(callback, scope);\n\nsizer.bindSceneRenderEvent(callback, scope);\n\nsizer.bindScenePauseEvent(callback, scope);\n\nsizer.bindSceneResumeEvent(callback, scope);\n\nsizer.bindSceneSleepEvent(callback, scope);\n\nsizer.bindSceneWakeEvent(callback, scope);\n\nsizer.bindSceneShutdownEvent(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Configuring Swirl Pipeline Plugin\nDESCRIPTION: Game configuration setup for importing and initializing the swirl pipeline plugin\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-swirl.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwirlPipelinePlugin from 'phaser3-rex-plugins/plugins/swirlpipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexSwirlPipeline',\n            plugin: SwirlPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Board Plugin in Phaser 3 Scene\nDESCRIPTION: Loads the Board plugin as a scene plugin in the preload stage of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-monopoly.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\n----------------------------------------\n\nTITLE: Loading Image Texture via Base64 String in Phaser 3\nDESCRIPTION: Adds an image texture to the Phaser texture cache using a base64 encoded string. This is useful when loading images without requiring separate image files.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.addBase64(key, data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mouse Wheel Scroller Plugin in Game Config\nDESCRIPTION: Shows how to import and configure the mouse wheel scroller plugin in the game's configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheelscroller.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport MouseWheelScrollerPlugin from 'phaser3-rex-plugins/plugins/mousewheelscroller-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexMouseWheelScroller',\n            plugin: MouseWheelScrollerPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Rex UI Plugin - Minify File\nDESCRIPTION: Demonstrates how to load the Rex UI plugin using the minified file in the preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletitlelabel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Removing Shockwave Effect from Camera\nDESCRIPTION: Removes the shockwave effect from a camera using the plugin's remove method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexShockwavePipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Sheet Manager Object (Minify Method)\nDESCRIPTION: Creates an event sheet manager object after loading the plugin via minify file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar eventSheetManager = scene.plugins.get('rexmarkedeventsheetsplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Loading File Chooser Plugin in Phaser3\nDESCRIPTION: Loading the file chooser plugin in the preload stage of the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filechooser.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfilechooserplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfilechooserplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Importing MiniBoard Class\nDESCRIPTION: Code for importing and creating a MiniBoard instance using the class import approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-miniboard.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MiniBoard } from 'phaser3-rex-plugins/plugins/board-components.js';\nvar miniBoard = new MiniBoard(scene, x, y, config);\n```\n\n----------------------------------------\n\nTITLE: Handling Update Event in Firebase Item Table\nDESCRIPTION: JavaScript code to set up an event handler for the update event which fires when any value in the table is updated.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('update', function(data) { })\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the phaser3-rex-plugins package from npm, which includes the AwayTime plugin along with other Rex plugins for Phaser3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Custom sort handler function for Phaser 3 List\nDESCRIPTION: Optional handler function that can be provided to the sort method for custom sorting logic.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (childA, childB) {\n    return 0; // 0, 1, -1\n}\n```\n\n----------------------------------------\n\nTITLE: Fade In Sound with Parameters\nDESCRIPTION: Example of fading in sound with optional volume parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fadevolume.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar sound = scene.plugins.get('rexSoundFade').fadeIn(sound, duration);\n// var sound = scene.plugins.get('rexSoundFade').fadeIn(sound, duration, endVolume, startVolume);\n```\n\n----------------------------------------\n\nTITLE: Checking if Current Page is Last Page\nDESCRIPTION: JavaScript code to check if the current page is the last page of the leaderboard.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar isLastPage = leaderBoard.isLastPage;\n```\n\n----------------------------------------\n\nTITLE: RetroFont TEXT_SET8 Definition\nDESCRIPTION: Numbers followed by uppercase letters with minimal punctuation\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n'0123456789 .ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n```\n\n----------------------------------------\n\nTITLE: Creating Conditions Table Instance (Imported Class)\nDESCRIPTION: Shows how to create a new instance of the Conditions Table class after importing it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/conditionstable.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar conditionstable = new ConditionsTable();\n```\n\n----------------------------------------\n\nTITLE: Importing Jigsaw Image Cutting Method in Phaser 3\nDESCRIPTION: Imports the standalone jigsaw image cutting method from the Rex plugins package for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/cutjigsawimage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport CutJigsawImage from 'phaser3-rex-plugins/plugins/cutjigsawimage.js';\n```\n\n----------------------------------------\n\nTITLE: Alternative Default Namespace Setting Method\nDESCRIPTION: Code showing an alternative method to set the default namespace using i18next directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ni18next.setDefaultNamespace(namespace);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grid Points in Phaser 3 Board Plugin\nDESCRIPTION: Gets an array of grid points at a specific tile position or chess piece. These points represent the world coordinates of the grid vertices at the specified location.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = board.getGridPoints(tileX, tileY);\n// var out = board.getGridPoints(tileX, tileY, out);\n// var points = board.getGridPoints(chess, out);  // chess or tileXY\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.strokePoints(points, true);\n```\n\n----------------------------------------\n\nTITLE: Changing User Name\nDESCRIPTION: Updates the current user's display name in the room.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-singleroom.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nroom.changeUserName(newUserName);\n```\n\n----------------------------------------\n\nTITLE: Loading FSM Plugin in Phaser 3 Scene Preload\nDESCRIPTION: Demonstrates how to load the minified version of the FSM plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfsmplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfsmplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Creating Life-time Instance (Class Version)\nDESCRIPTION: Shows how to create a Life-time instance using the imported class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lifetime.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar lifeTime = new LifeTime(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Advanced Value Retrieval - Random Array Element\nDESCRIPTION: Shows how to randomly select an element from an array using GetAdvancedValue.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/config-data.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar source = {x: [a, b, c]};\nvar value = Phaser.Utils.Objects.GetAdvancedValue(source, 'x');\n```\n\n----------------------------------------\n\nTITLE: Loading Perspective Sprite Plugin in Phaser 3\nDESCRIPTION: Loads the perspective sprite plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-sprite.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexperspectiveimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexperspectiveimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Removing FishEye Effect\nDESCRIPTION: Removes the FishEye post-processing effect from a game object or camera using the plugin's remove method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexFishEyePipeline').remove(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexFishEyePipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Configuring Real-Time Timers Instance\nDESCRIPTION: Creates a Real-Time Timers instance with optional configuration for start timestamp and custom timestamp callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar realTimeTimers = scene.plugins.get('rexRealTimeTimers').add({\n    // startTimestamp: new Date().getTime(),\n    // getTimestampCallback: functio() { return timestamp; }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Spinner Update Callback Function\nDESCRIPTION: Example of the update callback function for a custom spinner. This function is called during animation progress and provides access to spinner properties like position, radius, color, and animation progress value for manipulating shapes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-spinner.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction() {\n    // this : This spinner game object\n    var centerX = this.centerX;\n    var centerY = this.centerY;\n    var radius = this.radius;\n    var color = this.color;\n    var shapes = this.getShapes();\n    var shape = this.getShape(name);\n    var t = this.value;\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the Rex Plugins package from NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Applying Dissolve Effect to Game Object After Plugin Import in Phaser 3\nDESCRIPTION: Applies the dissolve effect to a game object after importing the plugin through npm. Uses the globally available plugin reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexDissolvePipeline').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Moving a child up in a Phaser 3 List\nDESCRIPTION: Method to move a child one position up (toward the end) in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlist.moveUp(child);\n```\n\n----------------------------------------\n\nTITLE: Getting Vector2 Length Method 2\nDESCRIPTION: Calculates and returns the squared length of the Vector2, which is more efficient when comparing lengths as it avoids the square root calculation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar lengthSq = vector.lengthSq(); // squared\n```\n\n----------------------------------------\n\nTITLE: Clearing Layers in LayerManager\nDESCRIPTION: Demonstrates how to clear layers by either destroying all children or moving them to the scene's display list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlayerManager.clearLayer(name);\n\n// Move all children from layer to scene's display list\nlayerManager.clearLayer(name, false);\n```\n\n----------------------------------------\n\nTITLE: Managing Data in Phaser 3 Bejeweled Plugin\nDESCRIPTION: These snippets show how to get, set, and manage data in the Bejeweled plugin, including enabling data management and handling data-related events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = bejeweled.getData(key);\nvar values = bejeweled.getData(keys); // keys: an array of keys\nvar value = bejeweled.data.values[key];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.setData(key, value);\nbejeweled.setData(obj); // obj: {key0:value0, key1:value1, ...}\nbejeweled.data.values[key] = value;\nbejeweled.data.values[key] += inc;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.setDataEnabled();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.on('setdata', function(bejeweled, key, value){ /* ... */ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.on('changedata', function(bejeweled, key, value, previousValue){ /* ... */ });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.on('changedata-' + key, function(bejeweled, value, previousValue){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Getting the number of children in a Phaser 3 List\nDESCRIPTION: Property to get the number of children in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar size = list.length;\n```\n\n----------------------------------------\n\nTITLE: Loading Ship Plugin via Minified File\nDESCRIPTION: Loads the ship plugin using the minified file approach in the scene's preload method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexshipplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexshipplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Removing Inverse Effect in Phaser 3\nDESCRIPTION: Removes the inverse effect from a game object or camera in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexInversePipeline').remove(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexInversePipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Getting Tile Dimensions\nDESCRIPTION: Retrieves the width and height of individual tiles in pixels.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tiledmapdata.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileWidth = mapData.tileWidth;\nvar tileHeight = mapData.tileHeight;\n```\n\n----------------------------------------\n\nTITLE: Creating LeaderBoard Instance Direct Class Import\nDESCRIPTION: JavaScript code to create a new instance of the LeaderBoard class when using direct class import.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar leaderBoard = new LeaderBoard(config);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: JavaScript code for initializing a Firebase application with configuration parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Usage\nDESCRIPTION: Simple translation lookup using i18next\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/i18next.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = i18next.t(key);\n```\n\n----------------------------------------\n\nTITLE: Creating Tag Text with Padding and Advanced Configuration\nDESCRIPTION: Creates a Tag Text object using scene.make with advanced configuration including padding, origin, and text styling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.make.rexTagText({\n    x: 100,\n    y: 100,\n    padding: {\n        left: 64,\n        right: 16,\n        top: 20,\n        bottom: 40\n        //x: 32,    // 32px padding on the left/right\n        //y: 16     // 16px padding on the top/bottom\n    },\n    text: 'Text\\nGame Object\\nCreated from config',\n    style: {\n        fontSize: '64px',\n        fontFamily: 'Arial',\n        color: '#ffffff',\n        align: 'center',\n        backgroundColor: '#ff00ff',\n        tags: {}\n    },\n    // origin: {x: 0.5, y: 0.5},\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Yoyo Animation for Multiple Sprites\nDESCRIPTION: Applies a yoyo animation to multiple sprites simultaneously using the exclamation prefix.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_13\n\nLANGUAGE: phaser\nCODE:\n```\n!NAME.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Adding File Selector Button to a Scene in Phaser 3\nDESCRIPTION: Basic code for creating a file selector button instance in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = scene.add.fileSelectorButton(config);\n```\n\n----------------------------------------\n\nTITLE: Initializing CubismModelMatrix with Canvas Dimensions\nDESCRIPTION: Creates a new CubismModelMatrix instance using the model's canvas width and height. This matrix is used for transformations between model and screen coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nthis._modelMatrix = new CubismModelMatrix(\n  this._model.getCanvasWidth(),\n  this._model.getCanvasHeight()\n);\n```\n\n----------------------------------------\n\nTITLE: Time Scale Management\nDESCRIPTION: Methods for getting and setting the time scale affecting typing, animations, and property easing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar timeScale = tagPlayer.timeScale;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.setTimeScale(timeScale);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.timeScale = timeScale;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom NumberBar Class in Phaser 3\nDESCRIPTION: Demonstrates how to create a custom class that extends the base NumberBar functionality. This allows for adding custom methods or overriding existing ones.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNumberBar extends RexPlugins.UI.NumberBar {\n  constructor(scene, config) {\n    super(scene, config);\n    // ...\n    scene.add.existing(this);\n  }\n  // ...\n}\n\nvar numberBar = new MyNumberBar(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Using Phaser.Math.CeilTo with Custom Precision in JavaScript\nDESCRIPTION: Performs a ceiling operation with customizable precision. The 'place' parameter determines rounding position, and 'base' defines the numbering system (default is 10).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/round-to.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.CeilTo(value, place, base);\n```\n\n----------------------------------------\n\nTITLE: Using Random Float Values for Image Properties in Phaser 3\nDESCRIPTION: Shows how to use random float values between specified minimum and maximum for image properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/image.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{ randFloat: [min, max] }\n```\n\n----------------------------------------\n\nTITLE: Importing ConfirmAction Class Directly\nDESCRIPTION: Code for importing the ConfirmAction class directly from the UI components module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmaction.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConfirmAction } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Adding NinePatch2 Object to a Scene\nDESCRIPTION: Creates a NinePatch2 object and adds it to the current scene. This is the basic method to instantiate a NinePatch2 object after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch2(x, y, width, height, key, baseFrame, columns, rows, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Direction Masks\nDESCRIPTION: Method to enable or disable matching in specific directions after the match object has been created.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmatch.setDirMask(dir, value);\n```\n\n----------------------------------------\n\nTITLE: Adding Bracket Parser Object to Phaser 3 Scene\nDESCRIPTION: Creates a new Bracket Parser object using the loaded plugin in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = scene.plugins.get('rexbracketparserplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Flow Chart of Event Sheet Execution Process\nDESCRIPTION: A mermaid flow chart depicting the execution process when starting a group of event sheets, including condition testing and event firing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n\n    startGroup{{\nstartGroup()}}  ------>  eventstart>Fire event\\nstart]\n    eventstart --> foreacheventsheet((For each\\nevent sheet))\n    foreacheventsheet --> |Next| activate{activate}\n    \n    subgraph Event sheet\n    activate --> |True| condition{\"Test\\n[condition]\"}\n    condition --> |True| enterevent>Fire event\\neventsheet.enter]\n    condition --> |False| eventcatch>Fire event\\neventsheet.catch] \n\n    subgraph Run\n    enterevent --> actions[Run\\nactions\\n...\\n...]\n    actions --> exitevent>Fire event\\neventsheet.exit]    \n    end\n\n    subgraph Catch\n    eventcatch --> catch[\"Run\\n[catch]\"]\n    end\n   \n    end\n\n    exitevent --> foreacheventsheet\n    catch --> foreacheventsheet\n\n    activate --> |False| foreacheventsheet\n\n    foreacheventsheet --> eventcomplete>Fire event\\ncomplete]\n    eventcomplete --> endnode{{End}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TitleLabel Class\nDESCRIPTION: Example of extending the TitleLabel class to create a custom implementation with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyTitleLabel extends RexPlugins.UI.TitleLabel {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar label = new MyTitleLabel(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Applying CRT Effect to Camera with NPM Plugin\nDESCRIPTION: Applies the CRT post-processing effect to a Phaser camera using the plugin imported from NPM package. Configuration options can be passed to customize the effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexCrtPipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Applying Kawase-blur Effect with Configuration in Phaser 3\nDESCRIPTION: Shows how to apply the Kawase-blur effect to a game object with specific configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-kawaseblur.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexKawaseBlurPipeline').add(gameObject, {\n    // blur: 4,\n    // quality: 3,\n    // pixelWidth: 1,\n    // pixelHeight: 1,\n\n    // name: 'rexKawaseBlurPostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a SkewImage Instance Directly\nDESCRIPTION: Creates a new SkewImage object and adds it to the scene when importing the class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new SkewImage(scene, x, y, texture, frame);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Adding Shake Effect\nDESCRIPTION: Applies a shake animation to the name input dialog with configurable duration and magnitude.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/nameinput-dialog-commands.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.shake\n  duration=\n  magnitude=\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Importing InTouching Class\nDESCRIPTION: Imports the InTouching class directly from the phaser3-rex-plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport InTouching from 'phaser3-rex-plugins/plugins/intouching.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Shatter Class Directly\nDESCRIPTION: Instructions for importing the ShatterRenderTexture class directly and creating instances.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-rendertexture.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ShatterRenderTexture } from 'phaser3-rex-plugins/plugins/shatterimage.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new ShatterRenderTexture(scene, x, y, width, height, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Using Vector2 One Constant in Phaser 3\nDESCRIPTION: References the constant Vector2 representing the unit vector (1,1).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar vector = Phaser.Math.Vector2.ONE;\n```\n\n----------------------------------------\n\nTITLE: Setting X Position of Group Members in Phaser 3\nDESCRIPTION: Sets the X position of all group members, with an optional step parameter to create spacing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setX(value);\n// group.setX(value, step);\n```\n\n----------------------------------------\n\nTITLE: Extending CustomProgress Class in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Creates a custom progress class by extending the RexPlugins.UI.CustomProgress class. This allows for customization of progress indicator behavior and appearance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomProgress extends RexPlugins.UI.CustomProgress {\n    constructor(scene, x, y, width, height, config) {\n        super(scene, x, y, width, height, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}    \n```\n\n----------------------------------------\n\nTITLE: Creating RoundRectangleProgress Instance with Direct Class Import\nDESCRIPTION: Creates a RoundRectangleProgress game object after importing the class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangleprogress.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar roundRectangleProgress = new RoundRectangleProgress(scene, x, y, width, height, radius, barColor, value, config);\nscene.add.existing(roundRectangleProgress);\n```\n\n----------------------------------------\n\nTITLE: Getting Parser Instance from Global Plugin\nDESCRIPTION: Retrieves an Expression Parser instance from the globally configured plugin for use in a scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = scene.plugins.get('rexExpressionParserPlugin').add();\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag Text Plugin in Game Configuration\nDESCRIPTION: Imports and configures the Tag Text plugin in the Phaser game configuration to make it available globally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport TagTextPlugin from 'phaser3-rex-plugins/plugins/tagtext-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTagTextPlugin',\n            plugin: TagTextPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Yoyo Animation for Any Sprite\nDESCRIPTION: Applies a yoyo animation to any sprite's properties without specifying a name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_12\n\nLANGUAGE: phaser\nCODE:\n```\nSPRITE.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Creating Image Chess Object Manually in Phaser 3\nDESCRIPTION: Creates an Image chess object manually and adds it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-image.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = new Image(board, tileX, tileY, tileZ, key, frame);\nscene.add.existing(chess);\n```\n\n----------------------------------------\n\nTITLE: Getting Glow Effect Intensity\nDESCRIPTION: Gets the current intensity value of the glow effect from a pipeline instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar intensity = pipelineInstance.intensity;\n```\n\n----------------------------------------\n\nTITLE: Setting Triangle Properties in Phaser 3 (Method 1)\nDESCRIPTION: Configures all triangle coordinates at once using the setTo method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntriangle.setTo(x1, y1, x2, y2, x3, y3);\n```\n\n----------------------------------------\n\nTITLE: Handling Any Tag Start Events in Bracket Parser 2\nDESCRIPTION: Shows how to handle any tag start events with payload in Bracket Parser 2.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nparser.on('+', function(tagName, payload){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Adding Single Room with Import Plugin Method\nDESCRIPTION: JavaScript code to create a single room object when using the import plugin method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar room = rexFire.add.singleRoom(config);\n```\n\n----------------------------------------\n\nTITLE: Managing Sound Loop State in Phaser 3\nDESCRIPTION: Methods to set and get the loop state of a sound instance, determining whether it plays once or repeats continuously.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.setLoop(loop); // loop: true/false\n// music.loop = loop;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar loop = music.loop;\n```\n\n----------------------------------------\n\nTITLE: Custom SimpleDropDownList Class Implementation\nDESCRIPTION: Defines a custom class that extends the SimpleDropDownList to add custom functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyDropDownList extends RexPlugins.UI.SimpleDropDownList {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Ellipses for Equality in Phaser 3\nDESCRIPTION: Tests whether two ellipses have the same position and dimensions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar isEqual = Phaser.Geom.Ellipse.Equals(ellipse0, ellipse1);\n```\n\n----------------------------------------\n\nTITLE: Getting Vector2 Length Method 1\nDESCRIPTION: Calculates and returns the length (magnitude) of the Vector2.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar length = vector.length();\n```\n\n----------------------------------------\n\nTITLE: Getting Slider Value\nDESCRIPTION: Methods for retrieving the current value of the slider\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/slider.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = slider.value;          // value: between 0 to 1\n// var value = slider.getValue();  // value: between 0 to 1\n// var value = slider.getValue(min, max);  // value: between min to max\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Type of Quad Grid\nDESCRIPTION: Demonstrates how to set the grid type (orthogonal or isometric) of the Quad Grid using the setType method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-quadgrid.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.setType(mode);\n```\n\n----------------------------------------\n\nTITLE: Toggling InTouching Enable Status\nDESCRIPTION: Toggles the enabled state of the InTouching behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nintouching.toggleEnable();\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the rex plugins package via NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/xor.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Setting X Scale of Group Members in Phaser 3\nDESCRIPTION: Sets the X scale of all group members to a given value, with an optional step parameter for variation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.scaleX(value);\n// group.scaleX(value, step);\n```\n\n----------------------------------------\n\nTITLE: Creating CircularProgress Canvas in Phaser3 Rex UI\nDESCRIPTION: Shows how to add a circular progress bar drawn on a canvas. This creates a circular progress indicator using canvas drawing methods rather than shapes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar circularProgress = scene.rexUI.add.circularProgressCanvas(x, y, radius, barColor, value, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Overlap Sizer Class in Phaser 3\nDESCRIPTION: Shows how to import the Overlap Sizer class directly and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overlapsizer.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OverlapSizer } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\nvar sizer = new OverlapSizer(scene, config);\nscene.add.existing(sizer);\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle-Switch Track Size Ratio\nDESCRIPTION: Gets the current track width and height ratios of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar trackWidth = toggleSwitch.trackWidth;\nvar trackHeight = toggleSwitch.trackHeight;\n```\n\n----------------------------------------\n\nTITLE: Pause and Resume Controls\nDESCRIPTION: Methods for pausing and resuming tag player execution, including event-based pausing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.pause();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.pauseUntilEvent(eventEmitter, eventName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPaused = !tagPlayer.isPlaying;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.resume();\n```\n\n----------------------------------------\n\nTITLE: Checking editor open state and closing the editor\nDESCRIPTION: Checking if the text editor is currently open and programmatically closing it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textedit.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar isOpened = editor.isOpened;\n\neditor.close();\n```\n\n----------------------------------------\n\nTITLE: Getting Detect Bounds in Phaser 3 Press Input\nDESCRIPTION: Retrieves the current detection bounds from the press input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar bounds = press.bounds;\n```\n\n----------------------------------------\n\nTITLE: Testing Line Intersections with Triangles in Phaser 3\nDESCRIPTION: Shows how to test if a line intersects with a triangle and get the intersection points.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.TriangleToLine(triangle, line);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.GetTriangleToLine(triangle, line);\n// var out = Phaser.Geom.Intersects.GetTriangleToLine(triangle, line, out);\n```\n\n----------------------------------------\n\nTITLE: Applying Kawase-blur Effect to Camera in Phaser 3\nDESCRIPTION: Demonstrates how to apply the Kawase-blur effect to a camera using the plugin instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-kawaseblur.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexkawaseblurpipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Creating GroupNavigator Instance from Class\nDESCRIPTION: Creates a new instance of the GroupNavigator directly from the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar navigator = new GroupNavigator(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Spinner in Phaser 3 Rex Plugin\nDESCRIPTION: Creates a custom spinner game object using the Rex Spinner plugin. The code demonstrates configuration options including position, size, color, animation duration, and the create/update callbacks that define the spinner's appearance and behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-spinner.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar customSpinner = scene.rexSpinner.add.custom({\n    // x: 0,\n    // y: 0,\n    // width: 64,\n    // height: 64,\n    // color: 0xffffff,\n\n    // duration: 1000,\n    // start: true,\n\n    create: {\n        // shapeType: [name0, name1, ...],\n        // shapeType: number,\n        // shapeType: name,\n    },\n\n    // create: function() {\n    // \n    // },\n\n    update: function() {\n\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Phaser 3 Game with File Chooser Plugin\nDESCRIPTION: Configuration for installing the file chooser plugin in a Phaser 3 game when importing from NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport FileChooserPlugin from 'phaser3-rex-plugins/plugins/filechooser-plugin.js';\nvar config = {    \n    parent: divId,\n    // fullscreenTarget: divId, // For fullscreen\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    },\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Child to FixWidthSizer in Phaser 3\nDESCRIPTION: Demonstrates how to add a child game object to a FixWidthSizer with various configuration options in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.add(child,\n    {\n        padding: {left: 0, right: 0, top: 0, bottom: 0},\n        key: undefined,\n        index: undefined,\n        offsetX: 0,\n        offsetY: 0,\n        offsetOriginX: 0,\n        offsetOriginY: 0,\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Loading the UI Plugin via Minify File in Phaser 3\nDESCRIPTION: Code showing how to load the UI plugin using its minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Applying Multi-Key Sort to Dynamic View\nDESCRIPTION: Apply a sort by multiple properties to a dynamic view with specified sort directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nview.applySortCriteria([key0, key1]);\n// view.applySortCriteria([key0, [key1, true]]);\n```\n\n----------------------------------------\n\nTITLE: Color Management Methods\nDESCRIPTION: Methods for getting and setting fill and stroke colors of the line.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-line.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = line.fillColor;\nvar alpha = line.fillAlpha;\n\nline.setFillStyle(color, alpha);\n\nline.setFillStyle();\n\nvar color = line.strokeColor;\n\nline.setStrokeStyle(lineWidth, color, alpha);\n\nline.setStrokeStyle();\n```\n\n----------------------------------------\n\nTITLE: Configuring XOR Plugin in Phaser3 Game Setup\nDESCRIPTION: Shows how to configure the XOR plugin in the Phaser3 game configuration when using NPM package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/xor.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport XORPlugin from 'phaser3-rex-plugins/plugins/xor-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexXOR',\n            plugin: XORPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading UI Plugin via CDN\nDESCRIPTION: Loads the UI plugin from a CDN in the scene's preload stage and creates an experience bar instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-expbar.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar expBar = scene.rexUI.add.expBar(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Box Fill Style\nDESCRIPTION: Sets the box fill color and alpha values for the checkbox when checked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setBoxFillStyle(color, alpha);\n// checkbox.boxFillColor = color;\n// checkbox.boxFillAlpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Loading Interception Plugin in Phaser 3 Preload Stage\nDESCRIPTION: Loads the minified version of the Interception plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interception.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexinterceptionplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexinterceptionplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Setting Wave Width Value\nDESCRIPTION: Sets the wave width value for a shockwave pipeline instance using either property assignment or a setter method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.waveWidth = waveWidth;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setWaveWidth(waveWidth);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Canvas Texture\nDESCRIPTION: Updates the texture after modifications\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-texture.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.refresh();\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the Rex plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Controlling TCRP Player Playback\nDESCRIPTION: Methods to pause, resume, and stop the TCRP player.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.pause();\nplayer.resume();\nplayer.stop();\n```\n\n----------------------------------------\n\nTITLE: Adding Perlin Noise Object via Plugin\nDESCRIPTION: Creating a new Perlin noise instance using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perlin.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar noise = scene.plugins.get('rexperlinplugin').add(seed);\n```\n\n----------------------------------------\n\nTITLE: Resuming Transition Animation in Phaser 3\nDESCRIPTION: Resumes a previously paused transition animation from the point where it was paused.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimage.resume();\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Visualization for Rope in Phaser 3\nDESCRIPTION: Renders a debug visualization of the rope's mesh structure using a graphics object. Can optionally provide a custom callback for custom debug rendering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rope.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nrope.setDebug(graphic);\n// rope.setDebug(graphic, callback);\n```\n\n----------------------------------------\n\nTITLE: Adding Sprite Sheet Using Existing Texture in Phaser 3\nDESCRIPTION: Adds a sprite sheet to the texture cache using an existing Phaser texture instead of an HTML image element. The configuration defines how to divide the texture into frames.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.addSpriteSheet(undefined, texture, config);\n// scene.textures.addSpriteSheet(undefined, texture, config, dataSource);\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle-Switch Track Corner Ratio\nDESCRIPTION: Gets the current track corner radius ratio of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar trackRadius = toggleSwitch.trackRadius;\n```\n\n----------------------------------------\n\nTITLE: Setting Start Timestamp for Real-Time Timers\nDESCRIPTION: Sets the start timestamp for the Real-Time Timers instance, which doesn't affect existing timers.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrealTimeTimers.setStartTimestamp(timestamp);\n```\n\n----------------------------------------\n\nTITLE: Checking for Any Match-N\nDESCRIPTION: A utility method to check if there are any matches of length N on the board without processing them individually.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasAnyMatchN = match.anyMatch(n);\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Table Scroller in Phaser3\nDESCRIPTION: Methods for enabling and disabling the scroller functionality of a Phaser3 grid table. Includes setting and getting the scroller enable state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-gridtable.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntable.setScrollerEnable(enabled);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.scrollerEnable = enabled;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = table.scrollerEnable;\n```\n\n----------------------------------------\n\nTITLE: Creating Event Sheet Manager Instance from Class\nDESCRIPTION: Creates an event sheet manager object after directly importing the class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar eventSheetManager = new MarkedEventSheets(config);\n```\n\n----------------------------------------\n\nTITLE: Generating Random 4D Vector in Phaser 3\nDESCRIPTION: Creates a random 4D vector with x, y, z, and w components using Phaser.Math.RandomXYZW method. Optionally accepts a scale parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/random.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar vec = Phaser.Math.RandomXYZW(vec);    // return vec {x, y, z, w}\n// var vec = Phaser.Math.RandomXYZW(vec, scale);\n```\n\n----------------------------------------\n\nTITLE: Alternative Configuration for Color Input in Phaser 3 Tweaker\nDESCRIPTION: An alternative approach to create a color picker input using an object configuration. This method explicitly specifies binding target and key for color selection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput({\n    bindingTarget: object,\n    bindingKey: key,\n    view: 'color',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n    \n    // orientation: 'x',\n\n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Stopping Video in Phaser 3\nDESCRIPTION: Stops video playback and clears all internal event listeners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.stop();\n```\n\n----------------------------------------\n\nTITLE: Creating a NinePatch Object After Loading Minified Plugin\nDESCRIPTION: Shows how to create a NinePatch object after loading the plugin via minified file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch(x, y, width, height, key, baseFrame, columns, rows, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Unchecked Box Stroke Style\nDESCRIPTION: Retrieves the box stroke line width, color, and alpha values used when the checkbox is unchecked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar lineWidth = checkbox.uncheckedBoxLineWidth;\nvar color = checkbox.uncheckedBoxStrokeColor;\nvar alpah = checkbox.uncheckedBoxStrokeAlpha;\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Phaser 3 Data Manager\nDESCRIPTION: Methods to set single or multiple values in the Data Manager. Includes direct setting, incrementing numeric values, and toggling boolean values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/datamanager.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.set(key, value);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.values[key] = value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.inc(key, data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.values[key] += value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.toggle(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.data.values[key] = !parent.data.values[key];\n```\n\n----------------------------------------\n\nTITLE: Managing Display Size of IsoBox in Phaser 3\nDESCRIPTION: Shows how to get and set the display size (width and height) of an IsoBox object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isobox.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = isoBox.displayWidth;\nvar height = isoBox.displayHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoBox.setDisplaySize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoBox.displayWidth = width;\nisoBox.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch False Value Track Fill Style\nDESCRIPTION: Sets the track fill color and alpha for when the toggle-switch is in the false state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setFalseValueTrackFillStyle(color, alpha);\n// toggleSwitch.falseValueTrackColor = color;\n// toggleSwitch.falseValueTrackFillAlpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Implementing Yoyo Scale Animation for Both Dimensions in Phaser 3\nDESCRIPTION: Animates a game object by scaling it up to a peak value and then back to its original scale. This affects both dimensions and can be configured with repeat counts and ease functions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScale(scaleX, scaleY)\n    .scaleYoyo(duration, peakValue);\n\n// gameObject.scaleYoyo(duration, peakValue, repeat, undefined, ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScale(scaleX, scaleY)\n    .scaleYoyoPromise(duration, peakValue, repeat)\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Adding Knob Component via Plugin in Phaser3\nDESCRIPTION: Code showing how to add a knob component to a scene using the rexUI plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-knob.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar knob = scene.rexUI.add.knob(config);\n```\n\n----------------------------------------\n\nTITLE: Importing LayerManager Class Directly\nDESCRIPTION: Shows how to import the LayerManager class directly from the NPM package for manual instantiation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport LayerManager from 'phaser3-rex-plugins/plugins/layermanager.js';\n```\n\n----------------------------------------\n\nTITLE: Testing Triangle-Line Intersection in Phaser 3\nDESCRIPTION: Determines whether a triangle intersects with a line.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Geom.Intersects.TriangleToLine(triangle, line);\n```\n\n----------------------------------------\n\nTITLE: Setting Saturation Adjustment in HSL Adjust Pipeline for Phaser 3\nDESCRIPTION: Set the saturation adjustment value for the HSL adjust effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-hsladjust.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setSatAdjust(value);\n```\n\n----------------------------------------\n\nTITLE: Accessing Folder Elements\nDESCRIPTION: Demonstrates how to access the various elements (background, title, child) of a folder component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = folder.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar title = folder.getElement('title');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar child = folder.getElement('child');\n```\n\n----------------------------------------\n\nTITLE: Checking If Texture Exists in Phaser 3\nDESCRIPTION: Checks if a texture with the specified key exists in the texture cache. Returns a boolean indicating whether the key exists.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasKey = scene.textures.exists(key);\n```\n\n----------------------------------------\n\nTITLE: Ellipse Alpha Management\nDESCRIPTION: Methods for getting and setting the alpha transparency of the ellipse.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-ellipse.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = ellipse.alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.setAlpha(alpha);\n// ellipse.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage with Phaser.Math.Percent in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Phaser.Math.Percent function to calculate the percentage of a value within a specified range. The function returns a result between 0 and 1, representing the percentage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/percentage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Math.Percent(value, min, max);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Title in Phaser 3 UI Label\nDESCRIPTION: Demonstrates how to get and set the title string of the label.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-titlelabel.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = label.title;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setTitle(s);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.title = s;\n```\n\n----------------------------------------\n\nTITLE: Setting Recorder Offset for Arcade TCRP in Phaser 3\nDESCRIPTION: Sets the necessary offset for the recorder to account for the delay in command execution. Commands are executed in the next WORLD_STEP event, so a step-count offset of 1 is needed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-step-runner.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.start(1);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.addCommand([fnName, param0, param1, ...], 1);\n```\n\n----------------------------------------\n\nTITLE: Importing Interception Class in Phaser 3\nDESCRIPTION: Imports the Interception class from the Rex plugins package for direct use.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interception.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Interception from 'phaser3-rex-plugins/plugins/interception.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring CanvasInput Style in Phaser 3\nDESCRIPTION: Defines the style properties for a CanvasInput object in Phaser 3, including background, inner bounds, text style, and cursor style options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    width: undefined, \n    height: undefined,\n\n    background: {\n        color: null,\n        color2: null,\n        horizontalGradient: true,\n\n        stroke: null,\n        strokeThickness: 2,\n\n        cornerRadius: 0,\n        cornerIteration: null,\n        \n        // Style when focus\n        // 'focus.color': ...\n        // 'focus.color2': ...\n        // 'focus.stroke': ...\n    },\n    focusStyle: undefined,\n\n    innerBounds: {\n        color: null,\n        color2: null,\n        horizontalGradient: true,\n\n        stroke: null,\n        strokeThickness: 2\n    },\n    \n    style: {\n        bold: false,\n        italic: false,\n        fontSize: '16px',\n        fontFamily: 'Courier',\n        color: '#fff',\n        stroke: '#fff',\n        strokeThickness: 0,\n        shadowColor: null,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0,\n        shadowBlur: 0,\n        backgroundColor: null,\n        backgroundHeight: undefined,\n        backgroundBY: undefined,\n        offsetX: 0,\n        offsetY: 0,\n\n        // Style when cursor move on\n        // 'cursor.color': ...\n        // 'cursor.backgroundColor': ...\n        // 'cursor.xxx': ...\n    },\n    cursorStyle: undefined,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Recorder from Plugin after Configuration\nDESCRIPTION: Creates a TCRP recorder instance using the globally registered plugin after game initialization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar recorder = scene.plugins.get('rexTCRP').addRecorder(scene);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Resize Mode for WarpPostFX in Phaser 3\nDESCRIPTION: These snippets show how to get and set the resize mode for the WarpPostFX effect in Phaser 3. The resize mode can be 'stretch', 'contain', or 'cover'.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp-transition.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar mode = pipelineInstance.resizeMode;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setResizeMode(mode);\n```\n\n----------------------------------------\n\nTITLE: Creating BuffData Instance and Extending Data Manager\nDESCRIPTION: Shows how to create a new buff data instance or extend an existing data manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buffdata.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = scene.plugins.get('rexBuffData').add(parent);\n// var data = scene.plugins.get('rexBuffData').add(parent, eventEmitter);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = scene.plugins.get('rexBuffData').extend(data);\n```\n\n----------------------------------------\n\nTITLE: Checking Flash Status in Phaser 3\nDESCRIPTION: Shows how to check if the flash animation is currently running.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flash.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRunning = flash.isRunning;\n```\n\n----------------------------------------\n\nTITLE: Starting Group Execution by Event\nDESCRIPTION: Shows how to start a group of event sheets using an event name trigger.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.startGroup(eventName, groupName);\n// eventSheetManager.startGroup(eventName, groupName, once);\n\n// Or using object syntax\neventSheetManager.startGroup({\n    eventName:\n    groupName:\n    once: false\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Options via Property Assignment\nDESCRIPTION: Alternative way to set options by directly assigning to the options property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.options = options;\n```\n\n----------------------------------------\n\nTITLE: Setting Triangle Position Properties (Direct Assignment)\nDESCRIPTION: Sets individual vertex coordinates directly on the triangle object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntriangle.x1 = 0;\ntriangle.y1 = 0;\ntriangle.x2 = 0;\ntriangle.y2 = 0;\ntriangle.x3 = 0;\ntriangle.y3 = 0;\n```\n\n----------------------------------------\n\nTITLE: Importing UI Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the UI plugin, including Color Components, in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Text-Box Game Object in Phaser 3\nDESCRIPTION: Command to create a TextBox game object with configurable properties including dimensions, viewport positioning, and user interaction settings like click targets and shortcut keys.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/textbox-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTEXTBOX\n  id=NAME\n  width=0\n  height=0  \n  vpx=0.5\n  vpy=1\n  vpw=\n  vph=\n  frameDelimiter=-\n  clickTarget=\n  clickShortcutKeys=\n  fastTypingShortcutKeys=\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Playback Rate in Phaser 3\nDESCRIPTION: Demonstrates how to set and get the playback rate of audio in a Phaser 3 scene. The rate can be adjusted to change the speed of audio playback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.setRate(rate); // rate: 1.0(normal speed), 0.5(half speed), 2.0(double speed)\n// scene.sound.rate = rate;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar rate = scene.sound.rate;\n```\n\n----------------------------------------\n\nTITLE: Removing Pixelation Effect\nDESCRIPTION: Code for removing the pixelation effect from game objects or cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-pixelation.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexPixelationPipeline').remove(gameObject);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexPixelationPipeline').remove(camera);\n```\n\n----------------------------------------\n\nTITLE: Creating a Shader Game Object from JSON in Phaser 3\nDESCRIPTION: Alternative method to create a shader game object using a configuration object. Supports randomization and callbacks for positioning and scaling properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar shader = scene.make.shader({\n    x: 0,\n    y: 0,\n    key: '',\n\n    // angle: 0,\n    // alpha: 1\n    // flipX: true,\n    // flipY: true,\n    // scale : {\n    //    x: 1,\n    //    y: 1\n    //},\n    // origin: {x: 0.5, y: 0.5},\n\n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Last Question Status in Question Manager (JavaScript)\nDESCRIPTION: Shows how to determine if the current question is the last one in the Question Manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar isLast = questionManager.isLastQuestion();\n```\n\n----------------------------------------\n\nTITLE: Creating Bounds Instance with Configuration\nDESCRIPTION: Initialize a bounds instance with detailed configuration options including target, bounds, enable settings, and hit modes\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bounds.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar bounds = scene.plugins.get('rexBounds').add(gameObject, {\n    // target: undefined,\n    // bounds: undefined,\n    // enable: true,\n\n    // boundsHitMode: 'clamp',  // 'clamp', or 'wrap'\n    // boundsHitMode: {\n    //     left: 'clamp',\n    //     right: 'clamp',\n    //     top: 'clamp',\n    //     bottom: 'clamp' \n    // },\n\n    // alignMode: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Branching with Player Choices\nDESCRIPTION: Implements conditional game logic based on player choices. Each branch contains different character dialogue, expressions, and adjusts game state variables like health points and coins accordingly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/command-executor/command-executor.md#2025-04-21_snippet_4\n\nLANGUAGE: custom\nCODE:\n```\n### [IF choiceIndex == 1]\n\nDialog.typing\n  name=A\n  expression=anger\n  text=Not today\n  speed=100\n\nsetData\n  hp=#(hp+3)\n  coin=#(coin-10)\n\n### [IF choiceIndex == 2]\n\nDialog.typing\n  name=A\n  expression=dizzy\n  text=Too fat\n  speed=100\n\nincData\n  hp=5\n  coin=-10\n\n### [IF choiceIndex == 3]\n\nDialog.typing\n  name=A\n  expression=happy\n  text=Another bottle!\n  speed=100\n\nincData\n  hp=10\n  coin=-20\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Pages in TabPages\nDESCRIPTION: Methods for switching between pages in the TabPages component, including by key, index, or relative position (first/last).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.swapPage(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.swapPage(index);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.swapFirstPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.swapLastPage();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.swapPage(key, 0);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.swapPage(index, 0);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.swapFirstPage(0);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntabPages.swapLastPage(0);\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Realtime Database Structure for Chat Rooms in YAML\nDESCRIPTION: This snippet outlines the database structure for chat rooms, including user management, message broadcasting, and table data storage. It uses a hierarchical structure with room IDs as the top-level keys, followed by users, broadcast, and table data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/firebase/database/singleroom/schema.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Body of room data. Each room has unique roomID\nrooms/\n    <roomID>\n        # users in this room.\n        users/\n            <joinAt>\n                userID - Unique ID of user\n                userName - The name of the user\n\n        broadcast/\n            - `message` - Message\n            - `senderID` - Unique ID of sender\n            - `senderName` - Name of sender\n            - `stamp` - Toggle between true and false        \n\n        table/\n            - <key0>\n                - <key1>\n                    - <key2> : value\n```\n\n----------------------------------------\n\nTITLE: Setting Display Size via Direct Properties of Round Rectangle\nDESCRIPTION: Sets the display width and height by directly assigning to the rectangle's properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nrect.displayWidth = width;\nrect.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Fixed-Part Scale in NinePatch (Method)\nDESCRIPTION: Sets the maximum scale factors for fixed parts of a NinePatch object using a method. This can be set with a single value for both axes or separate values for X and Y.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setMaxFixedPartScale(scale);\n// ninePatch.setMaxFixedPartScale(scaleX, scaleY);\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Group Member in Phaser 3\nDESCRIPTION: Sets a group member to inactive (but still visible), useful for object pooling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.kill(gameObject);         // gameObject.setActive(false)\n```\n\n----------------------------------------\n\nTITLE: Importing Files Class Directly\nDESCRIPTION: JavaScript code to import the Files class directly from the firebase-components module when using the class import approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Files } from 'phaser3-rex-plugins/plugins/firebase-components.js';\n```\n\n----------------------------------------\n\nTITLE: Triangle Vertex Manipulation in Phaser 3\nDESCRIPTION: Setting vertex positions of a Triangle object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntriangle.setTo(x1, y1, x2, y2, x3, y3);\n```\n\n----------------------------------------\n\nTITLE: Reflecting Vector2 Using Normal in Phaser 3\nDESCRIPTION: Reflects the Vector2 off a line defined by a normal vector, which should be perpendicular to the reflection line.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvector.reflect(normal);\n```\n\n----------------------------------------\n\nTITLE: Setting Cover Fill Style\nDESCRIPTION: Shows how to set the fill style (color and alpha) of a Cover object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncover.setFillStyle(color, alpha);\n```\n\n----------------------------------------\n\nTITLE: Applying FishEye PostFX to Game Objects and Cameras\nDESCRIPTION: Sets the FishEye post-processing effect directly on game objects or cameras using the setPostPipeline method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(FishEyePostFx);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(FishEyePostFx);\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle-Switch Read-Only State\nDESCRIPTION: Gets the current read-only state of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar readOnly = toggleSwitch.readOnly;\n```\n\n----------------------------------------\n\nTITLE: Creating Repeat Image with Factory Method\nDESCRIPTION: Code showing how to create a repeat image using the scene.add factory method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexRepeatImage(x, y, width, height, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Handling Real-Time Timers Events\nDESCRIPTION: Demonstrates how to listen for and handle events emitted by the Real-Time Timers instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nrealtimetimers.on('add', function(timer, timers){ })\nrealtimetimers.on('remove', function(timer, timers){ })\nrealtimetimers.on('update', function(timers){ \n    var s = JSON.stringify(realtimetimers);\n    // Store current states to webstorage or server here.\n})\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Alpha for IsoTriangle in Phaser 3\nDESCRIPTION: Retrieves or sets the alpha (transparency) value of an iso-triangle game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isotriangle.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = isoTriangle.alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoTriangle.setAlpha(alpha);\n// isoTriangle.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Loading LZString Plugin via CDN in Phaser 3\nDESCRIPTION: Demonstrates how to load the minified plugin file in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lzstring.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexlzstringplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexlzstringplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Swapping to a Specific Page\nDESCRIPTION: Method to switch the visible page in the Pages container, with optional fade-in duration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npages.swapPage(key);\n// pages.swapPage(key, fadeInDuration);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commands from Arcade TCRP Recorder\nDESCRIPTION: Code for getting the recorded commands, either as a shallow copy or as a direct reference.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar commands = recorder.getCommands();        // Get a shallow copy of commands\n// var commands = recorder.getCommands(true); // Get reference of commands\n```\n\n----------------------------------------\n\nTITLE: Removing Shockwave Effect from Game Object\nDESCRIPTION: Removes the shockwave effect from a game object using the plugin's remove method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexShockwavePipeline').remove(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Importing Question Manager Class in Phaser 3\nDESCRIPTION: Demonstrates how to import the Question Manager class directly and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Quest from 'phaser3-rex-plugins/plugins/quest.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar questionManager = new Quest(config);\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Interaction for Live2d Model in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement drag interaction for a Live2d model, adjusting various parameters based on drag input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ドラッグによる変化\n// ドラッグによる顔の向きの調整\nthis._model.addParameterValueById(this._idParamAngleX, this._dragX * 30); // -30から30の値を加える\nthis._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\nthis._model.addParameterValueById(\n  this._idParamAngleZ,\n  this._dragX * this._dragY * -30\n);\n\n// ドラッグによる体の向きの調整\nthis._model.addParameterValueById(\n  this._idParamBodyAngleX,\n  this._dragX * 10\n); // -10から10の値を加える\n\n// ドラッグによる目の向きの調整\nthis._model.addParameterValueById(this._idParamEyeBallX, this._dragX); // -1から1の値を加える\nthis._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\n```\n\n----------------------------------------\n\nTITLE: Creating Pages Object After Loading Minify File\nDESCRIPTION: Code to create a pages container object after loading the plugin via minify file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pages = scene.rexUI.add.pages(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Interactive Children in Sizer for Phaser 3 Rex UI\nDESCRIPTION: Demonstrates how to set children of a Sizer as interactive. This applies various input behaviors like click, tap, press, and swipe to the Sizer to detect input events on its children.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.setChildrenInteractive({\n    // dropZone: false,\n\n    // down: undefined,\n    // up: undefined,\n    // over: undefined,\n    \n    // click: {mode: 'release', clickInterval: 100},\n\n    // press: {time: 251, threshold: 9},\n\n    // tap: {time: 250, tapInterval: 200, threshold: 9, tapOffset: 10, \n    //       taps: undefined, minTaps: undefined, maxTaps: undefined,},\n\n    // swipe: {threshold: 10, velocityThreshold: 1000, dir: '8dir'},\n\n    // inputEventPrefix: 'child.',\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Speed Properties and Animation\nDESCRIPTION: Code to control the speed properties and enable/disable animation of the warp effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setSpeedEnable();\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setSpeedEnable(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar speedX = pipelineInstance.speedX;\nvar speedY = pipelineInstance.speedY;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.speedX = speedX;\npipelineInstance.speedY = speedY;\n// pipelineInstance.speedX += value;\n// pipelineInstance.speedY += value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setSpeedX(speedX);\npipelineInstance.setSpeedY(speedY);\npipelineInstance.setSpeed(speedX, speedY);\n```\n\n----------------------------------------\n\nTITLE: Loading Shockwave Plugin from Minified File in Phaser 3\nDESCRIPTION: Loads the shockwave pipeline plugin from a minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexshockwavepipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexshockwavepipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Handling Key2 Removal in 3D Firebase Item Table\nDESCRIPTION: JavaScript code to set up an event handler for when a key2 is removed from a 3D Firebase item table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('removekey2', function(key0, key1, key2) {  });\n```\n\n----------------------------------------\n\nTITLE: Importing Data Easing Method in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to import the EaseData method directly and create an instance for a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/easedata.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EaseData } from 'phaser3-rex-plugins/plugins/easedata.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar easedata = new EaseData(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Ellipse Smoothness Control\nDESCRIPTION: Methods for adjusting the smoothness of the ellipse's curve by controlling the number of points used in rendering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-ellipse.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.setSmoothness(smoothness);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.smoothness = smoothness;\n```\n\n----------------------------------------\n\nTITLE: Loading TransitionImage Plugin via Minified File in Phaser 3\nDESCRIPTION: Loads the TransitionImage plugin using the minified file in the preload stage of a Phaser 3 scene and demonstrates how to add a transition image to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextransitionimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextransitionimageplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexTransitionImage(x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Adding Tweaker Object with Minify File Method\nDESCRIPTION: Code to add a tweaker object to the scene after loading the plugin via minify file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar tweaker = scene.rexUI.add.tweaker(config);\n```\n\n----------------------------------------\n\nTITLE: Running Examples in Phaser3 Rex Notes Project\nDESCRIPTION: Instructions for running example applications in the browser using batch files.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Click `*.bat` in folder `examples`, it will open application on browser\n```\n\n----------------------------------------\n\nTITLE: Stroking a Polygon with Graphics in Phaser 3\nDESCRIPTION: Draws the outline of a polygon shape using the graphics object. The lineStyle method should be called first to set line properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// graphics.lineStyle(lineWidth, color, alpha);   // color: 0xRRGGBB\ngraphics.strokePoints(polygon.points, true);\n```\n\n----------------------------------------\n\nTITLE: Rotating Game Object to Specific Angle with Direction Control\nDESCRIPTION: Rotates a game object to a specific angle with control over rotation direction (clockwise or counter-clockwise) and optional speed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.rotateTo(angle, dir);\n// rotateTo.rotateTo(angle, dir, speed);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slider Element in Phaser3 Scrollable Panel\nDESCRIPTION: Gets the slider top element from a panel component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar slider = panel.getElement('slider');\n```\n\n----------------------------------------\n\nTITLE: Loading BBCode Text Plugin in Phaser 3 Scene\nDESCRIPTION: Code to load the BBCode Text plugin in the preload stage of a Phaser 3 scene and create a BBCode text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexbbcodetextplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexbbcodetextplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = scene.add.rexBBCodeText(x, y, content, config);\n```\n\n----------------------------------------\n\nTITLE: Calculating Ellipse Area in Phaser 3\nDESCRIPTION: Computes the area of an ellipse.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar area = Phaser.Geom.Ellipse.Area(ellipse);\n```\n\n----------------------------------------\n\nTITLE: Adding Commands to TCRP Recorder\nDESCRIPTION: Adds commands to the TCRP recorder. Commands can be function names with parameters or arrays of commands, with optional time offsets.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.addCommand([fnName, param0, param1, ...]);\n// recorder.addCommand([command0, command1, ...]);\n// recorder.addCommand([fnName, param0, param1, ...], offset);  // time-offset in ms\n```\n\n----------------------------------------\n\nTITLE: Adding Background to Pages Container\nDESCRIPTION: Methods to add a background to the Pages container, with options for padding and key mapping.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npages.addBackground(child);\n```\n\n----------------------------------------\n\nTITLE: Applying Tint to a NinePatch2 Object\nDESCRIPTION: Sets a tint color for a NinePatch2 object. Tinting applies a color overlay to the texture while preserving its alpha properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setTint(tint);\n```\n\n----------------------------------------\n\nTITLE: Loading RandomPlace Plugin (Minified Version) in Phaser 3\nDESCRIPTION: Loads the minified version of the RandomPlace plugin in the Phaser 3 preload stage, allowing it to be used throughout the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/randomplace.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexrandomplaceplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexrandomplaceplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pop-up Scale Animation in Phaser3\nDESCRIPTION: Scale up animation from 0 to current scale with optional duration and ease parameters. Supports both width/height and individual axis scaling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsizer\n    //.setScale(scaleX, scaleY)\n    .popUp(duration);\n\n// sizer.popUp(duration, undefined, ease);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Wrap Width\nDESCRIPTION: Methods to get the current wrap width and set a new wrap width for Tag Text.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = txt.style.wrapWidth;\n\ntxt.setWrapWidth(width);\n// txt.setWordWrapWidth(width);\n```\n\n----------------------------------------\n\nTITLE: Importing AwayTime Class in Phaser3\nDESCRIPTION: Imports the AwayTime class directly from the phaser3-rex-plugins package. This approach allows using the AwayTime functionality without registering it as a plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport AwayTime from 'phaser3-rex-plugins/plugins/awaytime.js';\n```\n\n----------------------------------------\n\nTITLE: Adding Line Curves in Phaser 3\nDESCRIPTION: Creates and adds line curves to a path using different methods including direct coordinates or vector objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/path.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar curve = new Phaser.Curves.Line({x: x0, y: y0}, {x: x1, y: y1});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar curve = new Phaser.Curves.Line([x0, y0, x1, y1]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npath.add(curve);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npath.lineTo(endX, endY);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npath.lineTo(new Phaser.Math.Vector2({x, y}));\n```\n\n----------------------------------------\n\nTITLE: Setting Iterations Value of an Arc in Phaser 3\nDESCRIPTION: Sets the iterations value for an Arc game object. Higher values produce smoother arcs but require more processing power.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\narc.iterations = iterations;\n```\n\n----------------------------------------\n\nTITLE: Loading Board Plugin in Phaser Scene\nDESCRIPTION: Instructions for loading the Board plugin via CDN in the preload stage of a Phaser scene\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Greater Than\nDESCRIPTION: Find documents where a property is greater than a specified value using the $gt operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$gt': value}});\n```\n\n----------------------------------------\n\nTITLE: Accessing TextAreaInput Elements in JavaScript\nDESCRIPTION: These snippets demonstrate how to access various elements of the TextAreaInput, including background, text, slider components, and named elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textareainput.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = textAreaInput.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = textAreaInput.getElement('text');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar track = textAreaInput.getElement('slider.track');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar thumb = textAreaInput.getElement('slider.thumb');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = textAreaInput.getElement('#' + name);\n// var gameObject = textAreaInput.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = textAreaInput.getByName(name);\n// var gameObject = textAreaInput.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Getting Glow Filter Instance from Game Object\nDESCRIPTION: Retrieves the glow filter pipeline instance from a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGlowFilterPipeline').get(gameObject)[0];\n// var pipelineInstances = scene.plugins.get('rexGlowFilterPipeline').get(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Class Directly\nDESCRIPTION: Demonstrates how to import and instantiate the ModalBehavior class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ModalBehavoir } from 'phaser3-rex-plugins/plugins/modal.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar modal = new ModalBehavoir(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: RetroFont TEXT_SET1 Definition\nDESCRIPTION: Complete character set including lowercase, uppercase, numbers and special characters\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n' !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'\n```\n\n----------------------------------------\n\nTITLE: Managing Game State with Variables and Choices\nDESCRIPTION: Implements choice-based interactions using a choice UI component. Sets initial game state data (hp and coin values), presents player with options, and logs their selection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/command-executor/command-executor.md#2025-04-21_snippet_3\n\nLANGUAGE: custom\nCODE:\n```\n// Test choice and IF-branch\n\nsetData\n  hp=5\n  coin=100\n\n\nlog.memory\n  text=Befor choice\n\n\nChoice.choice\n  title=Would you like some...\n  resultKey=choiceIndex\n  option1=Ice cream\n  option2=Burger\n  option3=Cola Cola Cola Cola Cola Cola Cola Cola Cola Cola Cola Cola\n// Wait until clicking any chioce button\n\nlog\n  text=Select option[color=red]{{choiceIndex}}[/color]\n```\n\n----------------------------------------\n\nTITLE: Sequential Game Event Script in Phaser 3 Rex Notes Format\nDESCRIPTION: A structured event script that displays a series of text messages with pauses between each step. The script shows the progression of 'Event 2' from start through two intermediate stages to completion, using print commands separated by wait statements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/save-load/eventsheet2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Event sheet 2\n\n## Script\n\nprint\n  text=Event 2 start\n\nwait\n\nprint\n  text=Event 2 progress 0\n\nwait\n\nprint\n  text=Event 2 progress 1\n\nwait\n\nprint\n  text=Event 2 complete\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Step Behavior\nDESCRIPTION: Demonstrates methods to enable or disable the Step behavior on a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/step.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstep.setEnable();\n// or\nstep.enable = true;\n\n// Disable\nstep.setEnable(false);\n// or\nstep.enable = false;\n```\n\n----------------------------------------\n\nTITLE: Retrieving GLSL Shader Data from Cache in Phaser 3\nDESCRIPTION: Shows how to access previously loaded GLSL shader data from the Phaser cache using the shader cache and a key identifier.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.shader;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Stroking an Ellipse in Phaser 3 Graphics\nDESCRIPTION: Draws the outline of an ellipse on a graphics object using the specified line style.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// graphics.lineStyle(lineWidth, color, alpha);   // color: 0xRRGGBB\ngraphics.strokeEllipseShape(ellipse);\n```\n\n----------------------------------------\n\nTITLE: Importing Scale Plugin as Class\nDESCRIPTION: Instructions for importing and using the plugin as a class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/popup.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopUp from 'phaser3-rex-plugins/plugins/popup.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPopUp(gameObject, duration);\n```\n\n----------------------------------------\n\nTITLE: Group Create Multiple Callback Function in Phaser 3\nDESCRIPTION: Defines a callback function that is called when creating several group members at once, receiving an array of game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar callback = function(gameObjects) {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cover Object via Class Import\nDESCRIPTION: Shows how to create a Cover object after directly importing the class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar cover = new Cover(scene, config);\nscene.add.existing(cover);\n```\n\n----------------------------------------\n\nTITLE: Easing Multiple Sprites Properties\nDESCRIPTION: Animates properties using easing functions for multiple sprites using the exclamation prefix.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_10\n\nLANGUAGE: phaser\nCODE:\n```\n!NAME.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Adding Rotate Behavior Using Configured Plugin\nDESCRIPTION: Shows how to add the Rotate behavior to a game object using the configured plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotate.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotate = scene.plugins.get('rexRotate').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Adding SplitPanels Object to Phaser 3 Scene\nDESCRIPTION: Creates a new SplitPanels object and adds it to the current Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-splitpanels.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar splitPanels = scene.rexUI.add.splitPanels(config);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Input Control in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This code demonstrates how to implement custom input control for the Bejeweled plugin, including handling pointer down and move events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar bejeweled = new Bejeweled(scene, {\n    // ...\n    input: false\n});\n\nscene.input\n    .on('pointerdown', function (pointer) {\n        var chess = bejeweled.worldXYToChess(pointer.worldX, pointer.worldY);\n        if (chess) {\n            bejeweled.selectChess1(chess);\n        }\n    }, scene)\n    .on('pointermove', function (pointer) {\n        if (!pointer.isDown) {\n            return;\n        }\n        var chess = bejeweled.worldXYToChess(pointer.worldX, pointer.worldY);\n        if (chess && (chess !== this.bejeweled.getSelectedChess1())) {\n            bejeweled.selectChess2(chess);\n        }\n    }, scene);\n```\n\n----------------------------------------\n\nTITLE: Importing BBCode Text Class in Phaser 3\nDESCRIPTION: Code to import the BBCode Text class directly from npm and create a text object instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport BBCodeText from 'phaser3-rex-plugins/plugins/bbcodetext.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = new BBCodeText(scene, x, y, content, config);\nscene.add.existing(txt);\n```\n\n----------------------------------------\n\nTITLE: Importing RandomPlace Class from NPM Package\nDESCRIPTION: Imports the RandomPlace class directly from the Rex Plugins NPM package for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/randomplace.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport RandomPlace from 'phaser3-rex-plugins/plugins/randomplace.js';\n```\n\n----------------------------------------\n\nTITLE: Creating a Trees Instance Directly from Class\nDESCRIPTION: Creates a Trees instance directly using the imported class and adds it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar trees = new Trees(scene, config);\nscene.add.existing(trees);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Glow Distance\nDESCRIPTION: Gets and sets the distance property of the glow filter, which affects how far the glow extends. Note that this cannot be changed after filter creation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Get\nvar distance = pipelineInstance.distance;\n\n// Set\npipelineInstance.setDistance(distance);\n// Or\npipelineInstance.distance = distance;\n```\n\n----------------------------------------\n\nTITLE: Examples of Regular Expression Filtering\nDESCRIPTION: Examples of using regular expressions to match document properties, including case-sensitive and case-insensitive matching.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: { '$regex': 'din' }});\nvar docArray = collection.find({key: { '$regex': ['din', 'i'] }});\n```\n\n----------------------------------------\n\nTITLE: Adding Toggle-Switch Shape Without Click Input\nDESCRIPTION: Creates a toggle-switch shape without click input functionality and adds it to the current scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar toggleSwitch = scene.add.rexToggleSwitchShape(x, y, width, height, color, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Texture for Blitter in Phaser 3\nDESCRIPTION: Loads an image asset to be used with a Blitter object. The key parameter is a unique identifier for the texture, while url is the path to the image file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Plugin in Phaser 3 Game Configuration\nDESCRIPTION: JavaScript code showing how to install the Firebase plugin in the configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-idalias.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport FirebasePlugin from 'phaser3-rex-plugins/plugins/firebase-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFirebase',\n            plugin: FirebasePlugin,\n            start: true\n        }]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Youtube Player with Different Parameter Configurations\nDESCRIPTION: Different ways to add a Youtube Player to a Phaser 3 scene, showing optional parameter configurations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar player = scene.add.rexYoutubePlayer(x, y, width, height, config);\n// var player = scene.add.rexYoutubePlayer(x, y, config);\n// var player = scene.add.rexYoutubePlayer(config);\n```\n\n----------------------------------------\n\nTITLE: Decomposing a Triangle to Points in Phaser 3\nDESCRIPTION: Extracts the vertices of a triangle as an array of point objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Geom.Triangle.Decompose(triangle);  // out: [{x1,y1}, {x2,y2}, {x3,y3}]\n// var out = Phaser.Geom.Triangle.Decompose(triangle, out);\n```\n\n----------------------------------------\n\nTITLE: Importing the Arcade TCRP Class Directly in Phaser 3\nDESCRIPTION: Imports the TCRP class directly from npm package and creates a StepRunner instance without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-step-runner.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TCRP from 'phaser3-rex-plugins/plugins/arcadetcrp.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar stepRunner = new TCRP.StepRunner(scene);\n```\n\n----------------------------------------\n\nTITLE: Getting Ease Function for Transition in Phaser 3\nDESCRIPTION: Retrieves the current ease function being used for the transition animation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar ease = image.easeFunction;\n```\n\n----------------------------------------\n\nTITLE: Adding Mouse Wheel to Up/Down Object to Phaser 3 Scene\nDESCRIPTION: This snippet demonstrates how to add the Mouse Wheel to Up/Down object to a Phaser 3 scene using different methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheeltoupdown.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar mouseWheelToUpDown = scene.plugins.get('rexMouseWheelToUpDown').add(scene);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport MouseWheelToUpDown from 'phaser3-rex-plugins/plugins/mousewheeltoupdown.js';\nvar mouseWheelToUpDown = new MouseWheelToUpDown(scene);\n```\n\n----------------------------------------\n\nTITLE: Listening for Texture Manager Ready Event in Phaser 3\nDESCRIPTION: Sets up an event listener for when the texture manager is ready. This event is triggered when the texture manager has initialized and is ready to be used.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.on('ready', function() {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Progress Bar Configuration with Object Parameter\nDESCRIPTION: Alternative configuration example for creating a custom progress bar using a single object parameter with implicit positioning.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar customProgress = scene.add.rexCustomProgress({\n    // x: 0,\n    // y: 0,\n    // width: 64,\n    // height: 64,\n    // type: 'rexCustomProgress',\n\n    create: [\n        { name: name0, type: shapeType},\n        { name: name1, type: shapeType},\n        ...\n    ],\n\n    // create: {\n    //     shapeType: [name0, name1, ...],\n    //     shapeType: number,\n    //     shapeType: name,\n    // },\n\n    // create: function() {\n    // \n    // },\n\n    update: function() {\n\n    },\n    \n    value: 0,\n    easeValue: {\n        duration: 0,\n        ease: 'Linear'\n    },\n\n    valuechangeCallback: function(newValue, oldValue, circularProgress) {\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Emit Zone for Particle Emitter in JavaScript\nDESCRIPTION: Assigns an emit zone to the particle emitter. The zone parameter can be either a zone object created with addEmitZone or a number representing the index of an existing zone.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.setEmitZone(zone);\n```\n\n----------------------------------------\n\nTITLE: Camera Commands in Markdown\nDESCRIPTION: Provides commands for manipulating the camera in Phaser 3, including setting properties, fading, flashing, shaking, zooming, rotating, and scrolling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/command-list.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\ncamera.set\n  x=\n  y=\n  rotate=\n  zoom=\n  name=\n\ncamera.fadeIn\n  duration=1000\n  red\n  green\n  blue\n  name\n  wait=false\n\ncamera.fadeOut\n  duration=1000\n  red\n  green\n  blue\n  name\n  wait=false\n\ncamera.flash\n  duration=1000\n  red\n  green\n  blue\n  name\n  wait=false\n\ncamera.shake\n  duration=1000\n  intensity\n  name\n  wait=false\n\ncamera.zoomTo\n  duration=1000\n  zoom\n  name\n  wait=false\n\ncamera.rotateTo\n  duration=1000\n  rotate\n  ease\n  name\n  wait=false\n\ncamera.scrollTo\n  duration=1000\n  x\n  y\n  ease\n  name\n  wait=false\n```\n\n----------------------------------------\n\nTITLE: Adding a Timer to Real-Time Timers\nDESCRIPTION: Adds a new timer to the Real-Time Timers instance with a name, period, optional data, and current timestamp.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrealTimeTimers.addTimer(name, period);\n// realTimeTimers.addTimer(name, period, data);\n// realTimeTimers.addTimer(name, period, data, currentTimestamp);\n```\n\n----------------------------------------\n\nTITLE: Retrieving UI Elements from Edit Dialog\nDESCRIPTION: Methods for accessing individual UI elements within the dialog using element keys or custom names. This allows customizing or manipulating specific parts of the dialog.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = dialog.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar title = dialog.getElement('title');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar firstNameTitle = dialog.getElement('firstNameTitle');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar firstNameInput = dialog.getElement('firstNameInput');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar lastNameTitle = dialog.getElement('lastNameTitle');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar lastNameInput = dialog.getElement('lastNameInput');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = dialog.getElement('button');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = dialog.getElement('#' + name);\n// var gameObject = dialog.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = dialog.getByName(name);\n// var gameObject = dialog.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Loading CSS Files in Phaser 3\nDESCRIPTION: Method for loading CSS stylesheets for use with HTML content in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.css(key, url);\n// scene.load.css(key, url, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Using Imported Class to Start Animation Scene in Phaser 3\nDESCRIPTION: Starts the loading animation scene using the directly imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loading-animation-scene.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nStartLoadingAnimationScene(config);\n```\n\n----------------------------------------\n\nTITLE: Loading the Rex UI Plugin (Minified File) in Phaser 3\nDESCRIPTION: Loads the Rex UI Plugin as a scene plugin in the preload stage, allowing access to the UI components including Trees.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Checking if Ellipse is Empty in Phaser 3\nDESCRIPTION: Tests whether an ellipse is empty (has zero or negative width or height).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar isEmpty = ellipse.isEmpty();   // ellipse.width <= 0 || ellipse.height <= 0\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of a Custom Cover Class\nDESCRIPTION: Demonstrates how to instantiate a custom Cover class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar cover = new MyCover(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Moving a child below another child in Phaser 3 List\nDESCRIPTION: Method to move one child below another specific child in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlist.moveBelow(child1, child2);  // Move child1 below child2\n```\n\n----------------------------------------\n\nTITLE: Creating a Modal Promise\nDESCRIPTION: Basic pattern for creating a modal promise using the plugin, which returns a Promise that resolves when the modal is closed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexModal').promise(gameObject, config)\n    .then(function(closeEventData) {\n    })\n```\n\n----------------------------------------\n\nTITLE: Importing Camera Controller Plugin in Phaser 3 Configuration (JavaScript)\nDESCRIPTION: Imports and configures the camera controller plugin in the game configuration of Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/input-to-camera.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport CameraControllerPlugin from 'phaser3-rex-plugins/plugins/cameracontroller-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCameraController',\n            plugin: CameraControllerPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting AwayTime Save Period in Phaser3\nDESCRIPTION: Sets the time period in milliseconds for how often the current timestamp is saved to localStorage. Lower values provide more accurate tracking but increase storage operations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexAwayTime').setPeriod(time);\n```\n\n----------------------------------------\n\nTITLE: Configuring BBCodeText Style in Phaser 3\nDESCRIPTION: Defines the style properties for a BBCodeText object in Phaser 3, including font settings, colors, alignment, and wrapping options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    $type: 'bbcodetext', // or 'bbcode'\n\n    fontFamily: 'Courier',\n    fontSize: '16px',\n    fontStyle: '',\n    backgroundColor: null,\n    color: '#fff',\n    stroke: '#fff',\n    strokeThickness: 0,\n    shadow: {\n        offsetX: 0,\n        offsetY: 0,\n        color: '#000',\n        blur: 0,\n        stroke: false,\n        fill: false\n    },\n    align: 'left',  // 'left'|'center'|'right'|'justify'\n    padding: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n    },\n    maxLines: 0,\n    lineSpacing: 0,\n    fixedWidth: 0,\n    fixedHeight: 0,\n    rtl: false,\n    testString: '|MÉqgy',\n    wrap: {\n        mode: 'none'     // 0|'none'|1|'word'|2|'char'|'character'|3|'mix'\n        width: null\n    },\n    // wordWrap: { width: 0 },   // Compatible with Text game object\n    metrics: false,\n    // metrics: {\n    //     ascent: 0,\n    //     descent: 0,\n    //     fontSize: 0\n    // },\n\n    // tint: 0xffffff,\n    // alpha: 1,\n    // scale: 1,\n    // flipX: false,\n    // flipY: false,\n    // origin:\n    // originX: \n    // originY:\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Triangle Instance Creation in Phaser 3\nDESCRIPTION: Creating an instance of custom Triangle class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = new MyTriangle(scene, x, y, x1, y1, x2, y2, x3, y3, fillColor);\n```\n\n----------------------------------------\n\nTITLE: Creating Sprite from JSON Configuration in Phaser 3\nDESCRIPTION: Creates a sprite using a JSON configuration object, allowing for more detailed setup including position, key, frame, angle, alpha, flipping, scaling, animations, and origin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar sprite = scene.make.sprite({\n    x: 0,\n    y: 0,\n    key: '',\n    // frame: '',\n\n    // angle: 0,\n    // alpha: 1\n    // flipX: true,\n    // flipY: true,\n    // scale : {\n    //    x: 1,\n    //    y: 1\n    //},\n\n    // anims: {\n        // key: ,\n        // repeat: ,\n        // ...\n    // },\n    // origin: {x: 0.5, y: 0.5},\n    \n    add: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Field of View Instance with Configuration in Phaser 3\nDESCRIPTION: Demonstrates the creation of a Field of View instance with various configuration options, including face direction, cone settings, and debug options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar fieldOfView = scene.rexBoard.add.fieldOfView(chess, {\n    // face: 0,\n    // cone: undefined,\n    // coneMode: 0,\n    // perspective: false,\n\n    // ** pre-test **\n    // occupiedTest: false,\n    // blockerTest: false,\n    // preTestCallback: undefined,\n    // preTestCallbackScope: undefined,\n\n    // ** cost **\n    // costCallback: undefined,\n    // costCallbackScope: undefined,\n    // cost: undefined,   // constant cost\n\n    // debug: {\n    //     graphics: undefined,\n    //     visibleLineColor: 0x00ff00,\n    //     invisibleLineColor: 0xff0000,\n    //     log: false,\n    // }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic and Static Arcade Bodies in Phaser 3\nDESCRIPTION: These snippets show how to create dynamic and static arcade bodies for game objects using the BuildArcadeObject plugin. The 'build' method is used with an optional boolean parameter to specify static bodies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buildarcadeobject.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = scene.plugins.get('rexBuildArcadeObject').build(gameObject);\n// var gameObjects = scene.plugins.get('rexBuildArcadeObject').build(gameObjects);\n\nvar gameObject = scene.plugins.get('rexBuildArcadeObject').build(gameObject, true);\n// var gameObjects = scene.plugins.get('rexBuildArcadeObject').build(gameObjects, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values with Float (Two Values)\nDESCRIPTION: Methods for setting two float uniform values in a post FX pipeline shader.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/postfx-pipeline.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.set2f(name, value0, value1);\n// pipelineInstance.set2f(name, value0, value1, shader);\n```\n\n----------------------------------------\n\nTITLE: Listening for Metadata Changes in Firestore\nDESCRIPTION: Creates a listener that includes document metadata changes, useful for tracking local versus server state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar unsubscribe = db.collection(collectionName).doc(docName)\n    .onSnapshot({\n            includeMetadataChanges: true    // Listen for document metadata changes\n        },\n        function(doc) { /* ... */ } );\n```\n\n----------------------------------------\n\nTITLE: Triangle Color Property Access in Phaser 3\nDESCRIPTION: Accessing fill and stroke color properties of a Triangle object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = triangle.fillColor;\nvar alpha = triangle.fillAlpha;\n```\n\n----------------------------------------\n\nTITLE: Adding Chess Sprite to Board\nDESCRIPTION: Creates and adds a chess sprite object to the game board at specified tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-sprite.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = scene.rexBoard.add.sprite(board, tileX, tileY, tileZ, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Setting Step Length for Interpolation\nDESCRIPTION: Shows how to set the step length for interpolation between points.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/step.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nstep.setStepLength(stepLength);\n// step.stepLength = stepLength;\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of a Custom Tweaker Class\nDESCRIPTION: Code to instantiate the custom Tweaker class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar tweaker = new MyTweaker(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Calculating Triangle Centroid in Phaser 3\nDESCRIPTION: Calculates the centroid (arithmetic mean position of all vertices) of a triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = Phaser.Geom.Triangle.Centroid(triangle);  // out: {x,y}\n```\n\n----------------------------------------\n\nTITLE: Building a Right Triangle in Phaser 3\nDESCRIPTION: Creates a right triangle with specified width and height, starting from a point.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = Phaser.Geom.Triangle.BuildRight(x1, y1, width, height);\n```\n\n----------------------------------------\n\nTITLE: Getting Dissolve Effect Instance from Camera in Phaser 3\nDESCRIPTION: Retrieves the dissolve effect pipeline instance from a camera. Returns the first instance by default or can get all instances as an array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexDissolvePipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexDissolvePipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Managing RTL (Right-to-Left) Text in Phaser 3\nDESCRIPTION: Methods for setting and updating right-to-left text rendering. Requires calling setRTL before setting new content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setRTL(rtl).setText(newContent);\n```\n\n----------------------------------------\n\nTITLE: Setting Glow Filter as Post Pipeline on Camera\nDESCRIPTION: Applies the glow filter effect to a camera using setPostPipeline method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(GlowFilterPostFx);\n```\n\n----------------------------------------\n\nTITLE: Generating Grid Vertices\nDESCRIPTION: Creates a grid of vertices for the mesh with configurable properties\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mesh.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Geom.Mesh.GenerateGridVerts({\n    mesh: mesh,\n    texture: textureKey,\n    frame: frameName,\n    width: 1,\n    height: 1,\n    widthSegments: 1,\n    heightSegments: 1,\n\n    // x: 0,\n    // y: 0,\n    // colors: 0xffffff,\n    // alphas: 1,\n    // tile: false,\n    // isOrtho: false\n})\n```\n\n----------------------------------------\n\nTITLE: Alternative Setting Circle Radius in Phaser 3\nDESCRIPTION: Sets the radius of a circle game object by directly modifying the radius property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.radius = radius;\n```\n\n----------------------------------------\n\nTITLE: Configuring Skewable Render Texture Plugin in Phaser 3 Game Config (JavaScript)\nDESCRIPTION: Demonstrates how to import and configure the QuadImagePlugin in the Phaser 3 game configuration. This method is used when importing the plugin from an NPM package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-rendertexture.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport QuadImagePlugin from 'phaser3-rex-plugins/plugins/quadimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexQuadImagePlugin',\n            plugin: QuadImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Installing LayerManager via NPM for Class Import\nDESCRIPTION: Command to install the required NPM package for using the LayerManager class directly instead of as a plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Configuring Phaser 3 Game with QuadImagePlugin (JavaScript)\nDESCRIPTION: Demonstrates how to include the QuadImagePlugin in the Phaser 3 game configuration for global use.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite-skew.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport QuadImagePlugin from 'phaser3-rex-plugins/plugins/quadimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexQuadImagePlugin',\n            plugin: QuadImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Seeking to Specific Time in TCRP Player\nDESCRIPTION: Method to seek to a specific elapsed time in the TCRP player.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.seek(time);   // Elapsed time in ms\n```\n\n----------------------------------------\n\nTITLE: Setting TileSprite Scale\nDESCRIPTION: Methods for setting the tile scale of a TileSprite.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilesprite.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTileScale(scaleX, scaleY);\n\n// or\nimage.tileScaleX = scaleX;\nimage.tileScaleY = scaleY;\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Firestore Real-time Updates\nDESCRIPTION: Detaches a listener from real-time updates to prevent memory leaks and unnecessary network usage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Accessing Pages Element in TabPages\nDESCRIPTION: Retrieves the pages game object from a TabPages component\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = tabPages.getElement('pages');\n```\n\n----------------------------------------\n\nTITLE: Loading RotateTo Plugin via Minify File in Phaser3\nDESCRIPTION: Loads the RotateTo plugin using the minified file approach in the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexrotatetoplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexrotatetoplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Sequential Event Script with Print and Wait Actions in Phaser3 Rex Notes\nDESCRIPTION: This event sheet script demonstrates a simple sequence of actions. It first prints 'Task1 start', then waits for 4000 milliseconds (4 seconds), and finally prints 'Task1 end'. This pattern is common for creating timed sequences in Phaser3 games.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/parallel-groups/parallel1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprint\n  text=Task1 start\n\nwait\n  duration=4000\n\nprint\n  text=Task1 end\n```\n\n----------------------------------------\n\nTITLE: Showing/Hiding IsoTriangle Faces in Phaser 3\nDESCRIPTION: Controls visibility of individual faces (top, left, right) of an iso-triangle by setting boolean flags.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isotriangle.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nisoTriangle.setFaces(showTop, showLeft, showRight);\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase SDKs and Rex Plugin via HTML Scripts\nDESCRIPTION: HTML code for importing Firebase core SDK, Firestore service, and the minified Rex Firebase plugin script at the bottom of the HTML body.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/7.7.0/firebase-app.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/7.7.0/firebase-firestore.js\"></script>\n\n    <script src=\"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Broadcast Instance in JavaScript\nDESCRIPTION: Shows the configuration options for creating a Broadcast instance, including setting the root path, receiver ID, and history options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-broadcast.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar messager = rexFire.add.broadcast({\n    root: '',\n    // receiverID: '',\n    // history: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Immovable Status in Phaser 3 Arcade Physics\nDESCRIPTION: Checks whether a physics body is currently immovable.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar immovable = gameObject.body.immovable;\n```\n\n----------------------------------------\n\nTITLE: Resetting Collision Category in Phaser 3 Arcade Physics\nDESCRIPTION: Resets the collision category of a physics body to the default, making it collide with all other bodies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.resetCollisionCategory();\n```\n\n----------------------------------------\n\nTITLE: Loading Audio Files in Phaser 3\nDESCRIPTION: Method to load audio files using the scene's loader, where key is the identifier and urls is an array of file paths.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.audio(key, urls);  // urls: an array of file url\n// scene.load.audio(key, urls, {instances: 1}, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Real-time Database Structure for Chat Rooms\nDESCRIPTION: This code snippet outlines the structure of a Firebase Real-time Database for a chat room system. It includes sections for room filters, room data, room body, and user data, detailing the properties and nested structures for each section.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/firebase/database/room/schema.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Filter to monitor opened rooms\nroom-filters/\n    <roomID>\n        filter -  open/closed + \"|\" + public/private/...\n        name - The display name of the room\n        data - null, or JSON data\n\n\n# Header of room, write by owner of room. Each room has unique roomID\nroom-data/\n    <roomID>\n        name - The display name of the room\n\n        # monitor filter to catch room open/closed event\n        filter -  open/closed + \"|\" + public/private/...\n\n        # moderators of this room\n        moderators/\n            <userID> - Unique ID of user \n\n        # join permission\n        permission - null(\"anyone\")/(\"black-list\")/(\"white-list\")\n        black-list/\n            <userID> - Unique ID of user\n        white-list/\n            <userID> - Unique ID of user\n        # ignore room if user can not join\n\n        maxUsers - The maximum number of users that can join this room.\n        # limit the amount of users\n\n        table/\n            - <key0>\n                - <key1>\n                    - <key2> : value\n\n# Body of room data. Each room has unique roomID\nrooms/\n    <roomID>\n        alive - true or null\n\n        # users in this room.\n        users/\n            <joinAt>\n                userID - Unique ID of user\n                userName - The name of the user\n\n        broadcast/\n            - `message` - Message\n            - `senderID` - Unique ID of sender\n            - `senderName` - Name of sender\n            - `stamp` - Toggle between true and false        \n\n\n# Write by each user, user could join to many rooms\nuser-data\\\n    <joinAt>\n        user/\n            ID - Unique ID of user\n            name - The display name of the user\n        room/\n            ID - The id of the room\n            name - The display name of the room\n```\n\n----------------------------------------\n\nTITLE: Getting Glow Effect Instance from a Camera\nDESCRIPTION: Retrieves the glow effect pipeline instance from a camera for manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGlowFilterPipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexGlowFilterPipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Normalizing Radians to 0 to 2*PI Range in Phaser 3\nDESCRIPTION: Normalizes an angle in radians to ensure it falls within the range of 0 to 2*PI. This is often used when a positive-only angle range is required.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar rad = Phaser.Math.Angle.Normalize(angle);\n```\n\n----------------------------------------\n\nTITLE: Replacing a child in a Phaser 3 List\nDESCRIPTION: Method to replace an existing child with a new child while maintaining the same position in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nlist.replace(oldChild, newChild);\n```\n\n----------------------------------------\n\nTITLE: Flow Control Instructions in Markdown\nDESCRIPTION: Examples of flow control instructions in event sheets, including If-Else, Repeat, While loops, Break, Exit, and Activate/Deactivate commands.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n### [If coin > 10]\n\nactions...\n\n### [Else If (coin > 5) && (coin <10)]\n\nactions...\n\n### [Else]\n\nactions...\n```\n\nLANGUAGE: markdown\nCODE:\n```\n## [Repeat 3]\n\nactions...\n```\n\nLANGUAGE: markdown\nCODE:\n```\n## [While loopCount > 0]\n\nactions...\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[break]\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[exit]\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[deactivate]\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[activate]\n```\n\n----------------------------------------\n\nTITLE: Pausing Bracket Parser 2 Execution\nDESCRIPTION: Demonstrates how to pause the parsing process of a Bracket Parser 2 instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nparser.pause();\n```\n\n----------------------------------------\n\nTITLE: Configuring Styles for Separator in Phaser3 Rex UI\nDESCRIPTION: Defines the styling options for separator components, including height, radius, color, and stroke properties. This allows for customization of visual dividers in the UI.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        separator: {\n            height: 0,\n\n            radius: 0,\n            // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n            color: undefined,\n            alpha: undefined,\n            strokeColor: undefined,\n            strokeAlpha: undefined,\n            strokeWidth: undefined,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase SDK in HTML (Import Method)\nDESCRIPTION: HTML code for including just the core Firebase SDK and database functionality when using the import method, to be placed in the body before using any Firebase services.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-overview.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/7.7.0/firebase-app.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/7.7.0/firebase-database.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Disabling Light System in Phaser 3\nDESCRIPTION: Two different methods for disabling the lighting system in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.lights.disable();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.lights.active = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring List Input in Phaser 3 Tweaker\nDESCRIPTION: This snippet shows how to add a list input to a Tweaker instance. It allows selecting from predefined options and includes customization for appearance and monitoring.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput(object, key, {\n    // view: 'list',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    options: [\n        {text: text0, value: value0, /* icon: , iconFrame, .. */ },\n        {text: text1, value: value1, /* icon: , iconFrame, .. */ },\n        // ...\n    ],\n    \n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Bob Object Data Property in Phaser 3\nDESCRIPTION: Retrieves the data object associated with a Bob. This object can be used to store custom properties or metadata about the Bob.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = bob.data;  // {}\n```\n\n----------------------------------------\n\nTITLE: Injecting Arcade Methods in Phaser 3\nDESCRIPTION: This code demonstrates various ways to inject arcade methods into game objects and classes. It includes injecting methods into a single game object, a game object class prototype, and the root of all game object classes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buildarcadeobject.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexBuildArcadeObject').injectMethods(gameObject);\n// scene.physics.add.existing(gameObject);        // Dynamic arcade body\n// scene.physics.add.existing(gameObject, true);  // Static arcade body\n\nscene.plugins.get('rexBuildArcadeObject').injectMethods(GameObjectClass.prototype);\n\nscene.plugins.get('rexBuildArcadeObject').injectMethodsToRootClass();\n```\n\n----------------------------------------\n\nTITLE: Starting Event Sheet Group Execution\nDESCRIPTION: Shows how to start running a group of event sheets, either the default group or a specified group.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Start default group\neventSheetManager.startGroup();\n\n// Start specific group\neventSheetManager.startGroup(groupName);\n```\n\n----------------------------------------\n\nTITLE: Importing Repeat Image Class\nDESCRIPTION: Code for importing the Repeat Image class directly from the npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport RepeatImage from 'phaser3-rex-plugins/plugins/repeatimage.js';\n```\n\n----------------------------------------\n\nTITLE: Listening for Specific Key Data Changes in Phaser Registry\nDESCRIPTION: Shows how to listen for data changes for a specific key in the registry.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/game.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.registry.events.on('changedata-' + key, function(parent, value, previousValue){ /* ... */ });\n// game.registry.events.on('changedata-' + key, function(parent, value, previousValue){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Accessing TextBox Background Element\nDESCRIPTION: Retrieves the background game object of the text box for direct manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = textBox.getElement('background');\n```\n\n----------------------------------------\n\nTITLE: Configuring PerspectiveCard in Phaser 3\nDESCRIPTION: Detailed configuration options for creating a PerspectiveCard object in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-perspectivecard.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar sizer = scene.rexUI.add.perspectiveCard({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    back: backGameObject,\n    front: frontGameObject,\n    // face: 0,\n    // orientation: 0,\n    // snapshotPadding: 0,\n\n    // flip : {\n    //     frontToBack: 0,\n    //     backToFront: 1,\n    //     duration: 1000,\n    //     ease: 'Cubic',\n    //     delay: 0,\n    // }\n\n    // space: { left: 0, right:0, top:0, bottom:0 },\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Lines in Phaser 3\nDESCRIPTION: Shows how to check if two lines have equal coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-line.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar isEqual = Phaser.Geom.Line.Equals(line0, line1);\n```\n\n----------------------------------------\n\nTITLE: Pausing Transition Animation in Phaser 3\nDESCRIPTION: Pauses the current transition animation, freezing it at the current progress point.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimage.pause();\n```\n\n----------------------------------------\n\nTITLE: Tween Retrieval and Management\nDESCRIPTION: Methods for getting tweens associated with targets and managing tween collections.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tween.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar tweens = scene.tweens.getTweensOf(target);\nvar tweens = scene.tweens.getTweens();\nscene.tweens.killTweensOf(target);\n```\n\n----------------------------------------\n\nTITLE: Importing ShatterImage Class Directly\nDESCRIPTION: Shows how to import the ShatterImage class directly from npm and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ShatterImage } from 'phaser3-rex-plugins/plugins/shatterimage.js';\n\nvar image = new ShatterImage(scene, x, y, texture, frame, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Dialog Quest Flow Chart in Mermaid\nDESCRIPTION: A flow chart illustrating the sequence of events and actions in the Dialog Quest plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dialog-quest.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n\nStart[\"quest.start()\"] --> EventUpdateChoice[\"quest.emit('update-choice', choice, option, quest)<br>----<br>Update each choice button via question.option[i]\"]\n\nEventUpdateChoice --> EventUpdateDialog[\"quest.emit('update-dialog', dialog, question, quest)<br>----<br>Update dialog, action button via question\"]\n\nEventUpdateDialog --> EventClickChoice[\"quest.emit('click-choice', choice, dialog, quest)<br>----<br>Click any choice button\"]\n\nEventClickChoice --> EventClickAction[\"quest.emit('click-action', action, dialog, quest)<br>----<br>Click any action button\"]\n\nEventClickAction --> IsLast{\"quest.isLast()\"}\nEventClickChoice --> IsLast\n\nIsLast --> |No| Next[\"quest.next()\"]\nIsLast --> |Yes| Complete(\"Complete\")\n\nNext --> EventUpdateChoice\n```\n\n----------------------------------------\n\nTITLE: Importing LayerManager Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to import the LayerManager plugin via NPM and set it up in the Phaser 3 game configuration. This approach registers the plugin globally for use across multiple scenes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport LayerManagerPlugin from 'phaser3-rex-plugins/plugins/layermanager-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexLayerManager',\n            plugin: LayerManagerPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting AwayTime Storage Key in Phaser3\nDESCRIPTION: Sets the localStorage key used by AwayTime to store timestamps. This allows using different keys for different tracking purposes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexAwayTime').setKey(key);\n```\n\n----------------------------------------\n\nTITLE: Adding Button to Tweaker\nDESCRIPTION: Adds a single button with optional icon, label and callback function. Can be bound to a target object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addButton({\n    // bindingTarget: object,\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    title: undefined,\n\n    label: undefined,\n\n    callback: function(target) {},\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Background Color in Phaser 3 Text\nDESCRIPTION: Shows how to get and set the background color for a Phaser 3 Text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/text.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = txt.style.backgroundColor;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setBackgroundColor(color);\n```\n\n----------------------------------------\n\nTITLE: Configuring Styles for Boolean Input in Phaser3 Rex UI\nDESCRIPTION: Defines the styling options for boolean input components, including background, title, checkbox, and toggle switch styles. It covers various properties such as colors, sizes, animations, and layout spacing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        inputRow: {\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    \n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n    \n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                }\n            },\n\n            // For checkbox view\n            checkbox: {\n                // size: undefined,\n\n                color: 0x005cb2,\n                boxFillAlpha: 1,\n                uncheckedColor: null,\n                uncheckedBoxFillAlpha: 1,\n\n                boxLineWidth: 4,\n                boxStrokeColor: 0x005cb2,\n                boxStrokeAlpha: 1,\n                uncheckedBoxStrokeColor: 0x005cb2,\n                uncheckedBoxStrokeAlpha: 1,\n\n                checkerColor: 0xffffff,\n                checkerAlpha: 1,\n\n                circleBox: false\n\n                animationDuration: 150,\n\n                readOnly: false,\n            },\n\n            // For toggle switch view\n            toggleSwitch: {\n                // size: undefined,\n                \n                color: 0x005cb2,\n                trackFillAlpha: 1,\n                falseValueTrackColor: undefined,\n                falseValueTrackFillAlpha: 1,\n\n                thumbColor: 0xffffff,\n                thumbAlpha: 1,\n\n                trackWidth: 0.9,\n                trackHeight: 0.5,\n                trackCornerRadius: (trackHeight * 0.5),\n\n                thumbHeight: (trackHeight * 0.9),\n                thumbWidth: (thumbHeight),\n                thumbCornerRadius: (thumbHeight * 0.5),\n\n                thumbLeft: 0.3,\n                thumbRight: (1 - thumbLeft),\n                rtl: false,\n\n                animationDuration: 150,\n\n                readOnly: false,\n            },\n\n            space: {\n                left: 0, right: 0, top: 0, bottom: 0,\n                title: 0\n            },\n            \n            proportion: {\n                title: 0, inputField: 0,\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Board Instance in Phaser 3 Board Plugin\nDESCRIPTION: Various methods to get the board instance from chess pieces or miniboards. These utilities help access the main board from different contexts.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nvar board = Board.GetBoard(chess);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar board = board.chessToBoard(chess);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar board = chess.rexChess.board;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar board = miniboard.mainBoard;\n```\n\n----------------------------------------\n\nTITLE: Scaling X-axis of Game Objects in Phaser3\nDESCRIPTION: Sets the horizontal scale of game objects, with optional step, index, and direction parameters for creating graduated scaling effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.ScaleX(gameObjects, value, step, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Setting Y Scale of Group Members in Phaser 3\nDESCRIPTION: Sets the Y scale of all group members to a given value, with an optional step parameter for variation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.scaleY(value);\n// group.scaleY(value, step);\n```\n\n----------------------------------------\n\nTITLE: Getting Scan Line Parameters from CRT Effect\nDESCRIPTION: Retrieves the current scan line strength and width parameter values from a CRT pipeline instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar scanLineStrength = pipelineInstance.scanLineStrength;\nvar scanLineWidth = pipelineInstance.scanLineWidth;\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Setting Display Size of an Arc in Phaser 3\nDESCRIPTION: Sets the display width and height for an Arc game object by directly modifying the displayWidth and displayHeight properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\narc.displayWidth = width;\narc.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Accessing TextBox Icon Element\nDESCRIPTION: Retrieves the icon game object for direct manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar icon = textBox.getElement('icon');\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Point-in-Polygon Test in Phaser 3\nDESCRIPTION: Tests whether a point is contained within the polygon using a static method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInside = Phaser.Geom.Polygon.ContainsPoint(polygon, point);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bob Object in a Blitter Container\nDESCRIPTION: Adds a Bob object to a Blitter container at the specified coordinates. Bob objects are the individual sprites that are managed by the Blitter for efficient rendering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar bob = blitter.create(x, y);\n// var bob = blitter.create(x, y, frame, visible, index);\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollable Panel Mask Update Configuration\nDESCRIPTION: Configuration setting for the scrollable panel to ensure proper masking of dragged elements. Sets the mask update mode to refresh every tick, which is necessary when objects move without scrolling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/projects/ui-dragdrop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Set config's parameter `panel.mask.updateMode` to `'everyTick'`, to get masked\n  game object every tick, since ColumnPanel or Item can move without scrolling.\n```\n\n----------------------------------------\n\nTITLE: Creating Tag Text Object with Imported Class\nDESCRIPTION: Creates a Tag Text object using the imported class and adds it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar txt = new TagText(scene, x, y, content, config);\nscene.add.existing(txt);\n```\n\n----------------------------------------\n\nTITLE: Importing Rex Spinner Classes in Phaser 3\nDESCRIPTION: Shows how to import individual spinner classes from the Rex Spinner plugin. This allows for more granular control and custom implementations of spinners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-spinner.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { \n  AIO, Arrow, Audio, Ball, Bars, Box, Clock, Cube, Custom, Dots, \n  Facebook, Grid, Hearts, Ios, Orbit, Oval, Puff, Radio, Rings, Spinner\n} from \"phaser3-rex-plugins/templates/spinner/spinner-components.js\";\n\nvar spinner = new Audio(scene, config);\nscene.add.existing(spinner);\n```\n\n----------------------------------------\n\nTITLE: DropDownList Button Creation Callback\nDESCRIPTION: Example of the callback function used to create option buttons for the dropdown list. The function receives the scene, option item, index, and all options as parameters, with 'this' context set to the dropdown list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(scene, option, index, options) {\n    // this : dropDownList\n    return gameObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FixWidthSizer Object with Configuration in Phaser 3\nDESCRIPTION: Shows how to create a FixWidthSizer object with detailed configuration options in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar sizer = scene.rexUI.add.fixWidthSizer({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,    \n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // orientation: 0,\n\n    // space: {\n    //     left: 0, right: 0, top: 0, bottom: 0,\n    //     item: 0, line: 0, \n    //     indentLeftOdd: 0, indentLeftEven: 0,\n    // },\n\n    // rtl: false,\n    // align: 0,\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Eight Direction Instance with Configuration\nDESCRIPTION: Create an instance of the Eight Direction behavior with various configuration options including speed, direction mode, rotation, and wrap settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/eightdirection.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar eightDirection = scene.plugins.get('rexEightDirection').add(gameObject, {\n    speed: 200,\n    // dir: '8dir',     // 0|'up&down'|1|'left&right'|2|'4dir'|3|'8dir'\n    // rotateToDirection: false,\n    // wrap: false,\n    // padding: 0,\n    // enable: true,\n    // cursorKeys: scene.input.keyboard.createCursorKeys()\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Nine Slice Class in Phaser 3\nDESCRIPTION: Defines a custom Nine Slice class that extends the Phaser.GameObjects.NineSlice. This allows for adding custom functionality while maintaining the core Nine Slice behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/nineslice.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNineSlice extends Phaser.GameObjects.NineSlice {\n    constructor(scene, x, y, texture, frame, width, height, leftWidth, rightWidth, topHeight, bottomHeight) {\n        super(scene, x, y, texture, frame, width, height, leftWidth, rightWidth, topHeight, bottomHeight);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase SDKs and Rex Firebase Plugin via HTML\nDESCRIPTION: HTML code for loading the Firebase core SDK, Firebase database service, and Rex Firebase plugin from CDN.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/7.7.0/firebase-app.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/7.7.0/firebase-database.js\"></script>\n\n    <script src=\"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\"></script>\n</body>    \n```\n\n----------------------------------------\n\nTITLE: Creating AlphaMaskImage in Phaser3 Rex UI\nDESCRIPTION: Shows how to add an alpha-masked image that applies an alpha mask from another texture. This allows for complex masking shapes based on the alpha channel of another image.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.rexUI.add.alphaMaskImage(x, y, key, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Easing Properties with 'to' Animation in Phaser 3\nDESCRIPTION: Animates properties of a Title game object from current values to specified targets. Configurable parameters include position, alpha, duration, easing function, and repeat options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/title-commands.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Setting Origin for Drag-Rotate in Phaser 3\nDESCRIPTION: Sets the origin point for the drag-rotate input using either a game object or fixed coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dragrotate.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndragRotate.setOrigin(gameObject);\n// or\ndragRotate.setOrigin(x, y);\n// or\ndragRotate.setOrigin(pointer); // pointer: {x, y}\n```\n\n----------------------------------------\n\nTITLE: Parsing Custom Tag Close Events in Phaser3 Tag Player\nDESCRIPTION: Event handler for custom tag close events (-custom) in the Tag Player system. This fires when parsing a custom closing tag and typically clears the content callback.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('-custom', function(parser) {\n    // console.log('Parse -custom tag')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Slider Value\nDESCRIPTION: Methods for setting the slider value directly or incrementally\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/slider.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nslider.value = newValue;       // newValue: between 0 to 1\n// slider.setValue(newValue);  // newValue: between 0 to 1\n// slider.setValue(newValue, min, max);  // newValue: between min to max\n```\n\nLANGUAGE: javascript\nCODE:\n```\nslider.addValue(inc);  // inc: between 0 to 1\n// slider.addValue(inc, min, max);  // inc: between min to max\n```\n\n----------------------------------------\n\nTITLE: Loading Skewable Render Texture Plugin in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to load the plugin file in the preload stage of a Phaser 3 scene. This method uses a minified version of the plugin loaded from a CDN.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-rendertexture.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexquadimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexquadimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Firebase Realtime Database Content Collection Structure\nDESCRIPTION: Defines the schema for the optional Content collection, specifying fields including userID, fileID, and type. Each document is identified by a randomID.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/firebase/firestore/files/schema.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- <randomID>\n    - `userID` - Unique ID of owner\n    - `fileID` - Unique file ID of each owner\n    - `type` - 'content'\n    - ...\n```\n\n----------------------------------------\n\nTITLE: Setting InTouching Enable Status\nDESCRIPTION: Enables or disables the InTouching behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nintouching.setEnable(enabled);  // enabled: true, or false\n// intouching.enable = enabled;\n```\n\n----------------------------------------\n\nTITLE: Configuring Nine-patch Style in Phaser 3\nDESCRIPTION: This snippet illustrates the structure for styling a Nine-patch object in Phaser 3. It includes properties similar to Nine-slice, with an additional 'stretchMode' property and state-specific overrides.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-style.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // $type: 'nineSlice',\n\n    key: ,\n    frame: ,\n    leftWidth: , \n    rightWidth: ,\n    topHeight: , \n    bottomHeight: ,\n    stretchMode: ,\n    // tint: 0xffffff,\n    // alpha: 1,\n    // scale: 1,\n    // flipX: false,\n    // flipY: false,\n    // origin:\n    // originX: \n    // originY:\n    // width: 0,\n    // height: 0,\n\n    // effects: true,\n\n    // Style override in active state\n    // 'active.key': undefined,\n    // 'active.frame': undefined,\n    // 'active.tint': undefined,\n    // 'active.alpha': undefined,\n    // 'active.scale': undefined,\n    // 'active.glowColor': null,\n    // ...\n\n    // Style override in hover state\n    // 'hover.key': undefined,\n    // 'hover.frame': undefined,\n    // 'hover.tint': undefined,\n    // 'hover.alpha': undefined,\n    // 'hover.scale': undefined,\n    // 'hover.glowColor': null,\n    // ...\n\n    // Style override in disable state\n    // 'disable.key': undefined,\n    // 'disable.frame': undefined,\n    // 'disable.tint': undefined,\n    // 'disable.alpha': undefined,\n    // 'disable.scale': undefined,\n    // 'disable.glowColor': null,\n    // ...  \n}\n```\n\n----------------------------------------\n\nTITLE: Executing Event 1 Sequence in Pseudocode\nDESCRIPTION: This script defines the sequence of actions for Event 1. It prints status messages and includes wait commands between each step, likely to control timing or allow for user interaction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/save-load/eventsheet1.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nprint\n  text=Event 1 start\n\nwait\n\nprint\n  text=Event 1 progress 0\n\nwait\n\nprint\n  text=Event 1 progress 1\n\nwait\n\nprint\n  text=Event 1 complete\n```\n\n----------------------------------------\n\nTITLE: Getting Polygon Area in Phaser 3\nDESCRIPTION: Retrieves the area of the polygon.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar area = polygon.area;\n```\n\n----------------------------------------\n\nTITLE: Setting Tile Position\nDESCRIPTION: Code showing how to set the position of tiles in a repeat image.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTilePosition(x, y);\n```\n\n----------------------------------------\n\nTITLE: Handling Match End Event in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This snippet shows how to listen for the 'match-end' event, which fires when a match sequence ends. It provides access to the board object and the bejeweled instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.on('match-end', function(board, bejeweled) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating Sprite Game Object with Single Atlas\nDESCRIPTION: Creates a sprite game object using a single atlas texture. Sets texture key to 'key' and frame name as 'name + frameDelimiter + expression'. Default origin is (0.5, 1).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: phaser\nCODE:\n```\nSPRITE\n  id=NAME\n  key=\n  name=\n  expression=\n  frameDelimiter=-\n  vpx=0.5\n  vpy=1\n```\n\n----------------------------------------\n\nTITLE: Easing Properties with 'yoyo' Animation in Phaser 3\nDESCRIPTION: Animates properties of a Title game object with a yoyo effect (animating to target values and back). Similar to 'to' method but with back-and-forth animation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/title-commands.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase SDKs for Import Plugin Method\nDESCRIPTION: HTML code for loading Firebase Core SDK and Database service when using the import plugin method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/7.7.0/firebase-app.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/7.7.0/firebase-database.js\"></script>\n</body>    \n```\n\n----------------------------------------\n\nTITLE: Getting Stroke Color of an Arc in Phaser 3\nDESCRIPTION: Retrieves the stroke color value from an Arc game object. This represents the outline color of the arc.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = arc.strokeColor;\n```\n\n----------------------------------------\n\nTITLE: Mirroring Vector2 Across Another Vector in Phaser 3\nDESCRIPTION: Reflects the Vector2 across another vector, treating the other vector as an axis of reflection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvector.mirror(axis);\n```\n\n----------------------------------------\n\nTITLE: Getting Checker Animation Duration\nDESCRIPTION: Retrieves the current animation duration for the checkbox checker animation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvar duration = checkbox.checkerAnimDuration;\n```\n\n----------------------------------------\n\nTITLE: Accessing Viewport Properties\nDESCRIPTION: Code to access the inner and outer viewport rectangles that define the visible game area.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaleouter.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar innerViewport = scene.rexScaleOuter.innerViewport;\nvar outerViewport = scene.rexScaleOuter.outerViewport;\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Input Styles in Phaser 3 Rex UI\nDESCRIPTION: A comprehensive configuration object that defines styling options for color input components. The structure includes settings for the background, title text formatting, color input fields, color picker, and spacing properties. Each section contains detailed customization parameters for visual presentation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        inputRow: {\n            background: {\n                radius: 0,\n                // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                color: undefined,\n                alpha: undefined,\n                strokeColor: undefined,\n                strokeAlpha: undefined,\n                strokeWidth: undefined,\n            },\n\n            title: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n    \n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n                },\n    \n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                }\n            },\n\n            colorInput: {\n                swatch: {\n                    radius: 0,\n                    size: undefined,\n                },\n\n                inputText: {\n                    background: {\n                        color: null,\n                        color2: null,\n                        horizontalGradient: true,\n    \n                        stroke: null,\n                        strokeThickness: 2,\n    \n                        cornerRadius: 0,\n                        cornerIteration: null\n                    },\n                    focusStyle: {\n                        // color:\n                        // color2:\n                        // horizontalGradient:\n    \n                        // stroke:\n                        // strokeThickness:\n    \n                        // cornerRadius:\n                        // cornerIteration:\n                    },\n\n                    style: {\n                        bold: false,\n                        italic: false,\n                        fontSize: '16px',\n                        fontFamily: 'Courier',\n                        color: '#fff',\n                        stroke: '#fff',\n                        strokeThickness: 0,\n                        shadowColor: null,\n                        shadowOffsetX: 0,\n                        shadowOffsetY: 0,\n                        shadowBlur: 0,\n                        backgroundColor: null,\n                        backgroundHeight: undefined,\n                        backgroundBottomY: undefined,\n                        offsetX: 0,\n                        offsetY: 0\n                    },\n                    cursorStyle: {\n                        // bold:\n                        // italic:\n                        // fontSize:\n                        // fontFamily:\n                        // color:\n                        // stroke:\n                        // strokeThickness:\n                        // shadowColor:\n                        // shadowOffsetX:\n                        // shadowOffsetY:\n                        // shadowBlur:\n                        // backgroundColor:\n                        // backgroundHeight:\n                        // backgroundBottomY:\n                        // offsetX:\n                        // offsetY:\n                    }\n                },                \n                // inputText: false,\n\n                colorPicker: {\n                    background: {\n                        radius: 0,\n                        // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                        color: undefined,\n                        alpha: undefined,\n                        strokeColor: undefined,\n                        strokeAlpha: undefined,\n                        strokeWidth: undefined,\n                    }\n                },\n\n                colorComponents: {\n                    inputText: {\n                        background: {\n                            color: null,\n                            color2: null,\n                            horizontalGradient: true,\n\n                            stroke: null,\n                            strokeThickness: 2,\n\n                            cornerRadius: 0,\n                            cornerIteration: null\n                        },\n                        focusStyle: {\n                            // color:\n                            // color2:\n                            // horizontalGradient:\n\n                            // stroke:\n                            // strokeThickness:\n\n                            // cornerRadius:\n                            // cornerIteration:\n                        },\n\n                        style: {\n                            bold: false,\n                            italic: false,\n                            fontSize: '16px',\n                            fontFamily: 'Courier',\n                            color: '#fff',\n                            stroke: '#fff',\n                            strokeThickness: 0,\n                            shadowColor: null,\n                            shadowOffsetX: 0,\n                            shadowOffsetY: 0,\n                            shadowBlur: 0,\n                            backgroundColor: null,\n                            backgroundHeight: undefined,\n                            backgroundBottomY: undefined,\n                            offsetX: 0,\n                            offsetY: 0\n                        },\n                        cursorStyle: {\n                            // bold:\n                            // italic:\n                            // fontSize:\n                            // fontFamily:\n                            // color:\n                            // stroke:\n                            // strokeThickness:\n                            // shadowColor:\n                            // shadowOffsetX:\n                            // shadowOffsetY:\n                            // shadowBlur:\n                            // backgroundColor:\n                            // backgroundHeight:\n                            // backgroundBottomY:\n                            // offsetX:\n                            // offsetY:\n                        }\n\n                    }\n                }\n\n                // colorComponents: false,\n\n            },\n\n            space: {\n                left: 0, right: 0, top: 0, bottom: 0,\n                title: 0\n            },\n            \n            proportion: {\n                title: 0, inputField: 0,\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Touch State Behavior to Game Object\nDESCRIPTION: Shows how to add the Touch State behavior to a game object after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/touchstate.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar touchState = scene.plugins.get('rextouchstateplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Progress Plugin in Game Config\nDESCRIPTION: Code snippet showing how to import and configure the custom progress plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-custom-progress.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport CustomProgressPlugin from 'phaser3-rex-plugins/plugins/customprogress-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCustomProgressPlugin',\n            plugin: CustomProgressPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Accessing Faces in a Perspective Carousel\nDESCRIPTION: Code to access the array of face instances in a perspective carousel, which can be used to manipulate individual faces.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar faces = carousel.faces;\n```\n\n----------------------------------------\n\nTITLE: Manipulating Face Properties - Tint Color\nDESCRIPTION: Demonstrates how to get and set the tint color of individual triangle faces.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = face.tint;\n\nface.tint = color;\n// or\nface.setTint(color);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grid Bounds in Phaser 3 Board Plugin\nDESCRIPTION: Gets a rectangle object that represents the bounds of a specific tile or chess piece. This can be used to draw a rectangle around the tile or for collision detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar rectangle = board.getGridBounds(tileX, tileY);\n// var out = board.getGridBounds(tileX, tileY, out);\n// var rectangle = board.getGridBounds(chess, out);  // chess or tileXY\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.strokeRectShape(rectangle);\n```\n\n----------------------------------------\n\nTITLE: Clearing Stroke Style of an Arc in Phaser 3\nDESCRIPTION: Removes the stroke (outline) style from an Arc game object. This is done by calling setStrokeStyle with no parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\narc.setStrokeStyle();\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Binary Indices\nDESCRIPTION: Define a collection with binary indices for properties that will be frequently used in queries to improve performance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nvar collection = db.addCollection(name, {\n    indices: [key0]\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Inverse Effect to Game Object in Phaser 3\nDESCRIPTION: Applies the inverse effect to a game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexinversepipelineplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: DropDownList Track Creation Callback\nDESCRIPTION: Example of the callback function used to create a slider track for the dropdown list panel. This is optional and only needed for scrollable lists, with the 'this' context set to the dropdown list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(scene) {\n    // this : dropDownList\n    return gameObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Pointer Out Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for when a pointer moves out of a tile on the board. The event only triggers when the tile coordinates change. The callback receives the pointer object and the tile coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('tileout', function(pointer, tileXY) {\n    // var tileX = tileXY.x;\n    // var tileY = tileXY.y;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Rex Spinner Object in Phaser 3\nDESCRIPTION: Demonstrates the configuration options available when creating a Rex Spinner object. This includes positioning, sizing, color, and animation settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-spinner.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar spinner = scene.rexSpinner.add.audio({\n  // x: 0,\n  // y: 0,\n  // width: 64,\n  // height: 64,\n  // color: 0xffffff,\n\n  // duration: 1000,\n  // start: true,\n  // delay: 0,\n  // repeatDelay: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Locking Device Orientation in Phaser 3\nDESCRIPTION: Locks the device to a specific orientation using Phaser's Scale Manager. This can force the device to remain in portrait or landscape mode regardless of how the user holds their device, though browser support varies.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/orientation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.scale.lockOrientation(orientation)\n```\n\n----------------------------------------\n\nTITLE: Label Layout Method\nDESCRIPTION: Method to arrange the position of all elements in the label\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletitlelabel.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.layout();\n```\n\n----------------------------------------\n\nTITLE: Creating Pop-up Animation for a Title Game Object in Phaser 3\nDESCRIPTION: Applies a pop-up animation effect to a Title game object. Configurable parameters include text content, animation directions for separator and text elements, animation sequence, and duration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/title-commands.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.popUp\n  text0=\n  text1=\n  separatorDir=right\n  text0Dir=up\n  text1Dir=down\n  separatorThenText=true\n  duration\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Handling Sizer Removal Events in Phaser 3\nDESCRIPTION: Shows how to listen for the 'remove' event on the sizer itself, which fires when any child is removed. This allows for centralized handling of child removal across the entire sizer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.on('remove', function(child, sizer){\n\n})\n```\n\n----------------------------------------\n\nTITLE: Injecting Arcade Object Methods in Phaser 3\nDESCRIPTION: This snippet shows how to inject arcade object methods into a game object using the BuildArcadeObject plugin. It uses the 'build' method of the plugin to add arcade physics properties to the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buildarcadeobject.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = scene.plugins.get('rexbuildarcadeobjectplugin').build(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Multiple Condition Checks with Else-If\nDESCRIPTION: Complex conditional logic testing multiple ranges for coin value using if, else-if, and else statements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/if-else/if-else.md#2025-04-21_snippet_2\n\nLANGUAGE: pseudocode\nCODE:\n```\nprint\\\n  text=----\n\nset\n  coin=8\n\n### [If coin > 10]\n\nprint\\\n  text=(coin > 10)\n\n### [Else If (coin > 5) && (coin <=10)]\n\nprint\\\n  text=(coin > 5 and coin <10)\n\n### [Else]\n\nprint\\\n  text=(coin < 5)\n```\n\n----------------------------------------\n\nTITLE: Sorting Documents by Multiple Keys\nDESCRIPTION: Sort the result set by multiple properties using compoundsort in a chain. Specify ascending or descending order for each key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.chain().find({}).compoundsort([key0, key1]).data();  // key0, key1: ascending\n// var docArray = collection.chain().find({}).compoundsort([key0, [key1, true]]).data(); // key0: ascending, key1: descending\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Image Instance After Loading Minify File\nDESCRIPTION: Creates a perspective image game object after loading the plugin via minify file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexPerspectiveImage(x, y, texture, frame, config);\n```\n\n----------------------------------------\n\nTITLE: Using PNG Appender Plugin after npm Installation\nDESCRIPTION: This snippet demonstrates how to use the PNG Appender plugin after installing it via npm and configuring it in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/png-appender.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar resultBuffer = scene.plugins.get('rexPNGAppender').append(pngBuffer, data);\nvar data = scene.plugins.get('rexPNGAppender').extract(pngBuffer);\n```\n\n----------------------------------------\n\nTITLE: Applying Inverse Effect to Camera in Phaser 3\nDESCRIPTION: Applies the inverse effect to a camera using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexinversepipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Quad Image Plugin in Phaser 3 Game Configuration (JavaScript)\nDESCRIPTION: Demonstrates how to import and configure the Quad Image plugin in the game configuration of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-image.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport QuadImagePlugin from 'phaser3-rex-plugins/plugins/quadimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexQuadImagePlugin',\n            plugin: QuadImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating UniqueItemList with Initial Items (JavaScript)\nDESCRIPTION: Creates a new UniqueItemList instance with initial items provided directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar listA = scene.plugins.get('rexUniqueItemList').add(items);\n```\n\n----------------------------------------\n\nTITLE: Loading TabPages Plugin (Minified File)\nDESCRIPTION: Instructions for loading the UI plugin via minified file in the preload stage of a Phaser 3 scene and creating a TabPages instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tabpages.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar tabPages = scene.rexUI.add.tabPages(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Rhombus Geometry Object Using Configured Plugin in Phaser 3\nDESCRIPTION: Creates a new Rhombus geometry object using the configured plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rhombus.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar rhombus = scene.plugins.get('rexRhombus').add(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic Implementation in Custom Script\nDESCRIPTION: Shows how to implement if-else conditions in the custom scripting language. It includes multiple if statements and an else block.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/sample/sample.md#2025-04-21_snippet_1\n\nLANGUAGE: custom\nCODE:\n```\n## [If]\n\ncoin < 5\n\n### Label A\n\nprint\n  text=If (coin < 5)\n\n## [Else]\n\n### Label Else\n\nprint\n  text=Else (coin < 5)\n\n## [If]\n\ncoin > 10\n\n### Label B\n\nprint\n  text=If (coin > 10)\n```\n\n----------------------------------------\n\nTITLE: Easing Text-Box Properties with Yoyo Effect\nDESCRIPTION: Command to animate a Text-box's properties with a yoyo effect, which alternates between the start and end values. Useful for creating oscillating animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/textbox-commands.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Importing and Using RestorableData Class\nDESCRIPTION: Demonstrates how to import and use the RestorableData class directly from the plugin package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/restorabledata.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport RestorableData from 'phaser3-rex-plugins/plugins/restorabledata.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = new RestorableData(parent);\n```\n\n----------------------------------------\n\nTITLE: Filling Paths in Phaser 3 Graphics\nDESCRIPTION: Method to fill the current path with the active fill style.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.fillPath();\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Declaration for Rex UI Plugin in Phaser 3\nDESCRIPTION: Demonstrates how to use TypeScript declarations to add type support for the Rex UI plugin in Phaser 3 projects. This allows for better IDE support and type checking.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'phaser';\nimport RexUIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\ndeclare module 'phaser' {\n  interface Scene {\n    rexUI: RexUIPlugin;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Timer with All Properties in Phaser 3\nDESCRIPTION: Creates a timer with all available configuration options specified. This shows the complete set of properties that can be used when creating a timer.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar timer = scene.time.addEvent({\n    delay: 500,                // ms\n    callback: callback,\n    args: [],\n    callbackScope: thisArg,\n    loop: false,\n    repeat: 0,\n    startAt: 0,\n    timeScale: 1,\n    paused: false\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing All Mouse Wheel Events in Phaser 3\nDESCRIPTION: Demonstrates how to listen for all wheel events through the scene's input plugin, providing access to all game objects currently under the pointer when the wheel event occurred.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.input.on('wheel', function(pointer, currentlyOver, dx, dy, dz, event){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Handling Button Click Events in Phaser3 Menu\nDESCRIPTION: Event handler for button click events in a menu system. Provides access to the clicked button object, its index, and the pointer (input) that triggered the event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-menu.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.on('button.click', function(button, index, pointer, event) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Configuring Split Pipeline Plugin in Game Configuration\nDESCRIPTION: Configures the Split Pipeline plugin in the Phaser3 game configuration via the plugins global property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport SplitPipelinePlugin from 'phaser3-rex-plugins/plugins/splitpipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexSplitPipeline',\n            plugin: SplitPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Game Setup\nDESCRIPTION: Shows how to configure the grid alignment plugin in the game's configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridalign.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport GridAlignPlugin from 'phaser3-rex-plugins/plugins/gridalign-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexGridAlign',\n            plugin: GridAlignPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Managing Display Size of IsoTriangle in Phaser 3\nDESCRIPTION: Gets or sets the display width and height of an iso-triangle game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isotriangle.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = isoTriangle.displayWidth;\nvar height = isoTriangle.displayHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoTriangle.setDisplaySize(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoTriangle.displayWidth = width;\nisoTriangle.displayHeight = height;\n```\n\n----------------------------------------\n\nTITLE: Question Data Structure in YAML Format for Phaser 3 Quest Plugin\nDESCRIPTION: Illustrates the structure of question data in YAML format, showing how to define questions with their options and parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkey: q0\nparam0: value0\nparam1: value1\noptions:\n    - key: o0\n      param0: value0\n      param1: value1\n    - key: o1\n      param0: value0\n      param1: value1\n---\nkey: q1\nparam0: value0\nparam1: value1\noptions:\n    - key: o0\n      param0: value0\n      param1: value1\n    - key: o1\n      param0: value0\n      param1: value1\n```\n\n----------------------------------------\n\nTITLE: Loading Mesh Texture\nDESCRIPTION: Loads an image texture that will be used for the mesh\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mesh.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.image(key, url);\n```\n\n----------------------------------------\n\nTITLE: Getting Default AwayTime with Configuration Options in Phaser3\nDESCRIPTION: Gets the elapsed away time with optional configuration for storage key and time period. This also starts the internal timer that periodically saves the current timestamp.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar awayTime = scene.plugins.get('rexAwayTime').awayTime;\n// var awayTime = scene.plugins.get('rexAwayTime').setKey(key).setPeriod(time).awayTime;\n```\n\n----------------------------------------\n\nTITLE: Getting Random Point Inside Ellipse in Phaser 3\nDESCRIPTION: Generates a random point inside the ellipse.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = ellipse.getRandomPoint();\n// var point = ellipse.getRandomPoint(point);  // modify point\n```\n\n----------------------------------------\n\nTITLE: Counting Free Group Slots in Phaser 3\nDESCRIPTION: Returns the number of available slots in the group based on maxSize and used members.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nvar freeCount = group.getTotalFree();  // group.maxSize - group.getTotalUsed()\n```\n\n----------------------------------------\n\nTITLE: Importing Skewable Render Texture Class in Phaser 3 (JavaScript)\nDESCRIPTION: Shows how to import the SkewRenderTexture class directly from the Rex Plugins package and create an instance of it in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-rendertexture.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SkewRenderTexture } from 'phaser3-rex-plugins/plugins/quadimage.js';\n\nvar image = new SkewRenderTexture(scene, x, y, width, height);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Checking Ended Status in Youtube Player for Phaser 3\nDESCRIPTION: Method to check if the Youtube video has ended.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasEnded = player.hasEnded;\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Projection\nDESCRIPTION: Methods for setting perspective or orthographic projection for the mesh view\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mesh.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.setPerspective(width, height, fov);\n// mesh.setPerspective(width, height, fov, near, far);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.setOrtho(mesh.width/mesh.height, 1);\n// mesh.setOrtho(scaleX, scaleY, near, far);\n```\n\n----------------------------------------\n\nTITLE: Creating Shape Chess at World Position without Adding to Board\nDESCRIPTION: Creates a chess object at world coordinates rather than tile coordinates, with the option to not add it to the board automatically.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-shape.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = scene.rexBoard.add.shape(board, x, y, undefined, fillColor, fillAlpha, false);\n```\n\n----------------------------------------\n\nTITLE: Converting Texture to Base64 in Phaser 3\nDESCRIPTION: Converts a texture to a base64 encoded string. Optional parameters allow specifying the image format, frame, and encoder options for the conversion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = scene.textures.getBase64(key);  // type= 'image/png', encoderOptions= 0.92\n// var s = scene.textures.getBase64(key, frame, type, encoderOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Tile Positions with Scene Plugin\nDESCRIPTION: Methods to create different hexagon grid patterns (hexagon, parallelogram, triangle) using the scene plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagonmap.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYArray = scene.rexBoard.add.hexagonMap.hexagon(board, radius);\nvar tileXYArray = scene.rexBoard.add.hexagonMap.parallelogram(board, type, width, height);\nvar tileXYArray = scene.rexBoard.add.hexagonMap.triangle(board, type, height);\n```\n\n----------------------------------------\n\nTITLE: Creating Shake Animation for a Title Game Object in Phaser 3\nDESCRIPTION: Applies a shake animation effect to a Title game object. Parameters control the duration, magnitude of the shake, and whether to wait for completion before continuing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/title-commands.md#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.shake\n  duration=\n  magnitude=\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom SkewImage Class\nDESCRIPTION: Creates a custom class that extends the SkewImage class, allowing for additional functionality or overriding existing methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MySkewImage extends SkewImage {\n    constructor(scene, x, y, texture, frame) {\n        super(scene, x, y, texture, frame);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Rex UI Plugin in Phaser 3 Game Config\nDESCRIPTION: Shows how to import and configure the Rex UI Plugin in the Phaser 3 game configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Input Configuration for Phaser 3 Scene\nDESCRIPTION: Configuration object for input handling in a Phaser 3 scene, with settings for keyboard, mouse, touch, gamepad and general input properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scene.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    keyboard: {\n        target: window\n    },\n    mouse: {\n        target: null,\n        capture: true\n    },\n    activePointers: 1,\n    touch: {\n        target: null,\n        capture: true\n    },\n    smoothFactor: 0,\n    gamepad: false,\n    windowEvents: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing a String with Phaser Utility in JavaScript\nDESCRIPTION: Demonstrates how to use Phaser's built-in ReverseString utility method to reverse a string. This utility function is part of the Phaser.Utils.String namespace and was authored by Richard Davey.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/reverse-string.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = Phaser.Utils.String.ReverseString(str);\n```\n\n----------------------------------------\n\nTITLE: Break and Exit Commands in Custom Script\nDESCRIPTION: Shows how to use break and exit commands to control script execution flow. These commands can be used to terminate loops or script execution.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/sample/sample.md#2025-04-21_snippet_3\n\nLANGUAGE: custom\nCODE:\n```\n## Break label test\n\nprint\n  text=Before break-label\n\n[break]\n\nprint\n  text=After break-label\n\n## Exit test\n\nprint\n  text=Before exit\n\n[exit]\n\nprint\n  text=After exit\n```\n\n----------------------------------------\n\nTITLE: Loading Board Plugin via Scene Plugin in Phaser3\nDESCRIPTION: Loads the Rex board plugin as a scene plugin in the preload stage of a Phaser3 scene, allowing access to board functionality via scene.rexBoard.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-shape.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\n----------------------------------------\n\nTITLE: Enabling Mask for Both Images in Phaser 3 Transition\nDESCRIPTION: Applies a mask to both the current and next textures in the transition. Can optionally specify whether the mask is enabled and whether to invert the alpha channel.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setMaskEnable();\n// image.setMaskEnable(enable, invertAlpha);\n```\n\n----------------------------------------\n\nTITLE: Grid Cutting Next Image in Phaser 3 Transition\nDESCRIPTION: Divides the next texture into a grid of cell images that can be individually manipulated during transition. Returns an array of the cell image game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar cellImageGameObjects = image.gridCutNextImage(columns, rows);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Youtube Player Class in Phaser 3\nDESCRIPTION: Example of extending the Youtube Player class to create a custom implementation with additional functionality in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyYoutubePlayer extends YoutubePlayer {  // or YoutubePlayerCanvas\n    constructor(scene, x, y, width, height, config) {\n        super(scene, x, y, width, height, config) {\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta)\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Y Velocity for Group Objects in Phaser 3\nDESCRIPTION: Sets the Y velocity for all objects in a group. The 'step' parameter allows for incremental velocity changes across the group members.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.setVelocityY(value, step);\n```\n\n----------------------------------------\n\nTITLE: Standard Value Retrieval in Phaser3\nDESCRIPTION: Basic method to retrieve a value from an object using dot notation for nested properties with fallback to default value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/config-data.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = Phaser.Utils.Objects.GetValue(source, key, defaultValue);\n```\n\n----------------------------------------\n\nTITLE: Event Sheet Manager Event Handlers\nDESCRIPTION: Event handlers for input pause and resume functionality in the event sheet manager.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\neventSheetManager.on('pause.input', function(){ \n\n});\n\neventSheetManager.on('resume.input', function(){ \n\n});\n\neventSheetManager.on('pause.click', function(){ \n\n});\n\neventSheetManager.on('pause.key', function(keyName){ \n\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Line Class Directly\nDESCRIPTION: How to import the Line class directly and create a line instance by adding it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/line.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Line from 'phaser3-rex-plugins/plugins/line.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = new Line(scene, config);\nscene.add.existing(line);\n```\n\n----------------------------------------\n\nTITLE: Applying CRT Effect to Game Object with Class Import\nDESCRIPTION: Applies the CRT post-processing effect directly to a game object using setPostPipeline method after importing the CRT pipeline class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(CrtPostFx);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Drag Threshold\nDESCRIPTION: Shows how to get and set the drag threshold for swipe detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar dragThreshold = swipe.dragThreshold;\n```\n\n----------------------------------------\n\nTITLE: Creating Repeat Image Object (After Minify Load)\nDESCRIPTION: Code for creating a repeat image object after loading the plugin via minify file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexRepeatImage(x, y, width, height, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Hexagon Grid Configuration\nDESCRIPTION: Shows the full configuration options for hexagonal grid alignment including stagger axis and index options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridalign.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexGridAlign').hexagon(gameObjects, {\n    width: -1,\n    height: -1,\n    cellWidth: 1,\n    cellHeight: 1,\n    staggeraxis: 'x',\n    staggerindex: 'odd',\n    position: Phaser.Display.Align.CENTER,\n    x: 0,\n    y: 0\n});\n```\n\n----------------------------------------\n\nTITLE: CubismUserModel.isHit Method Call\nDESCRIPTION: Method call to the CubismUserModel's isHit function that determines if a point collides with a specific drawable element. Takes a drawable ID and the x/y coordinates as parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/note.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nCubismUserModel.isHit(drawableId,pointX,pointY);\n```\n\n----------------------------------------\n\nTITLE: Using Modal Promise with Loaded Plugin\nDESCRIPTION: Code to add modal behavior to a game object after loading the plugin, with a Promise to handle the dialog's closing event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexmodalplugin').promise(gameObject, config)\n    .then(function(closeEventData) {\n    })\n```\n\n----------------------------------------\n\nTITLE: Getting Shockwave Effect from Camera\nDESCRIPTION: Retrieves the shockwave pipeline instance from a camera. Can get either the first instance or an array of all instances.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-shockwave.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexShockwavePipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexShockwavePipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Handling Game Object Pointer Over Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for when a pointer moves over a game object (chess piece) on the board. The callback receives the pointer object and the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('gameobjectover', function(pointer, gameObject) {\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('board.pointerover', function(pointer) {\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Plugin in JavaScript\nDESCRIPTION: Shows how to import the Firebase plugin when using npm and ES6 modules. This method is suitable for more complex project setups.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-broadcast.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js';    \nvar rexFire = new RexFirebase();\nvar messager = rexFire.add.broadcast(config);\n```\n\n----------------------------------------\n\nTITLE: Resetting Bob Object Position and Frame in Phaser 3\nDESCRIPTION: Resets a Bob object's position and optionally its frame. This is a shorthand method for both repositioning and changing the appearance of a Bob.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nbob.reset(x, y);\n// bob.reset(x, y, frame);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the phaser3-rex-plugins package from npm, which contains the board plugin and related components.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-shape.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Setting Warp Parameters for CRT Effect\nDESCRIPTION: Sets new horizontal and vertical warp parameter values for a CRT pipeline instance using the setWarp method or direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setWarp(warpX, warpY);\n```\n\n----------------------------------------\n\nTITLE: Instantiating Rex Firebase Plugin (Browser Version)\nDESCRIPTION: JavaScript code to create a new instance of the rex-firebase plugin from the global window object, typically used after loading the minified JavaScript file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rexFire = new window.rexfirebase();\n```\n\n----------------------------------------\n\nTITLE: Getting Frame Names Including Base Frame in Phaser 3\nDESCRIPTION: Retrieves an array of all frame names in a texture, including the '__BASE' frame. This is useful when you need a complete list of all frames.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar nameList = texture.getFrameNames(true);\n// nameList includes `__BASE`\n```\n\n----------------------------------------\n\nTITLE: Accessing Chess Position in Phaser 3 Bejeweled Plugin\nDESCRIPTION: These snippets demonstrate how to get the tile position of a chess game object and how to get a chess game object from a tile position using the board object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar tileXYZ = board.chessToTileXYZ(gameObject);\n//var tileXYZ = gameObject.rexChess.tileXYZ;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = board.tileXYZToChess(tileX, tileY, tileZ);\n```\n\n----------------------------------------\n\nTITLE: Easing Background Game Object Properties\nDESCRIPTION: Command for animating (easing) properties of a Background game object to new values. Parameters include position, viewport position, alpha, and animation settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/background-commands.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNAME.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Removing Data from LocalForage using Callback\nDESCRIPTION: Demonstrates how to remove data from LocalForage using the callback approach. The removeItem method accepts a key and a callback function that executes after the item is removed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlocalforage.removeItem(key, function(){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Setting Blend Mode of Game Objects in Phaser3\nDESCRIPTION: Sets the blend mode of game objects, which controls how they blend with objects behind them. Different blend modes create various visual effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetBlendMode(gameObjects, blendMode, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Setting Origin of Game Objects in Phaser3\nDESCRIPTION: Sets the origin point of game objects, which determines their pivot point for transformations. Supports different step values for x and y origins.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SetOrigin(gameObjects, originX, originY, stepX, stepY, index, direction);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotation During Movement in Phaser 3 Board\nDESCRIPTION: Method to set whether a chess piece should rotate to face its target direction while moving across the board.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.setRotateToTarget(rotateToTarget);\n```\n\n----------------------------------------\n\nTITLE: Importing NinePatch2 Class Directly\nDESCRIPTION: Imports the NinePatch2 class directly and creates an instance manually. This gives more control over instantiation and is useful for extending the class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport NinePatch2 from 'phaser3-rex-plugins/plugins/ninepatch2.js';\n```\n\n----------------------------------------\n\nTITLE: Loading Conditions Table Plugin in Phaser 3 (Minified File)\nDESCRIPTION: Demonstrates how to load the minified version of the Conditions Table plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/conditionstable.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexconditionstableplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexconditionstableplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Cover Plugin via Minify File in Phaser 3\nDESCRIPTION: Demonstrates how to load the Cover plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcoverplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcoverplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Toast Queue Configuration\nDESCRIPTION: Detailed configuration object for creating a toast queue instance with customizable properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-toastqueue.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar toastQueue = scene.rexUI.add.toastQueue({\n    x: 0,\n    y: 0,\n    orientation: 1,\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        item: 0,\n    },\n    createMessageLabelCallback(scene, message, toastQueue) {\n        // return gameObject;\n    },\n    queueDirection: 1,\n    duration: {\n        in: 200,\n        hold: 2000,\n        out: 200,\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: RetroFont TEXT_SET6 Definition\nDESCRIPTION: Uppercase letters with punctuation marks and numbers\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ!?:;0123456789\"(),-.\\'  '\n```\n\n----------------------------------------\n\nTITLE: Setting Noise Parameters by Method in Phaser 3 Dissolve Effect\nDESCRIPTION: Sets the noise parameters (X, Y, Z) for the Perlin noise calculation in the dissolve effect using a method. Can generate random values if no parameters are provided.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setNoise(noiseX, noiseY, noiseZ);\n// pipelineInstance.setNoise(); // Passing 3 random float numbers\n```\n\n----------------------------------------\n\nTITLE: Getting AwayTime from Custom Timer in Phaser3\nDESCRIPTION: Accesses the elapsed away time from a custom AwayTimer object. This also starts the timer if it wasn't already running.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar awayTime = awayTimer.awayTime;\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Smoothness for WarpPostFX in Phaser 3\nDESCRIPTION: These snippets demonstrate how to get and set the smoothness value for the WarpPostFX effect in Phaser 3. The smoothness value ranges from 0 to 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp-transition.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar smoothness = pipelineInstance.smoothness;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setSmoothness(value);  // value: 0~1\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.smoothness = value;  // value: 0~1\n```\n\n----------------------------------------\n\nTITLE: Fixed Repetition Loop Output in Phaser3 Rex Plugin\nDESCRIPTION: Prints a message during a fixed repetition loop that iterates exactly 3 times. The REPEAT directive is used to define the fixed number of iterations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/repeat/repeat.md#2025-04-21_snippet_1\n\nLANGUAGE: pseudo-code\nCODE:\n```\nprint\\\n  text=repeat 3 - 0\n```\n\n----------------------------------------\n\nTITLE: Replacing Items in Phaser Array\nDESCRIPTION: Method to replace an existing item with a new item in a Phaser array. The new item must not already exist in the array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-addremove.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.Replace(arr, oldItem, newItem);\n```\n\n----------------------------------------\n\nTITLE: Seeking to Specific Time in TCRP\nDESCRIPTION: Shows how to seek to a specific time point in the TCRP player's timeline.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.seek(time);   // Elapsed time in step-count\n```\n\n----------------------------------------\n\nTITLE: Creating a NinePatch with All Parameters in Single Configuration Object (Method 6)\nDESCRIPTION: Shows how to create a NinePatch with all parameters including position, size, and texture information in a single configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch({\n    x: 0, y: 0,\n    width: 1, height: 1,\n    key: undefined,\n    columns: undefined, // leftWidth: undefined, rightWidth: undefined,\n    rows: undefined,    // topHeight: undefined, bottomHeight: undefined,\n\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    baseFrame: undefined,  // frame: undefined,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Angle Between Two Points Using Coordinates in Phaser 3\nDESCRIPTION: Calculates the angle in radians between two points specified by their x and y coordinates. Returns the angle from the first point to the second point.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/angle.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar rad = Phaser.Math.Angle.Between(x1, y1, x2, y2);\n```\n\n----------------------------------------\n\nTITLE: Importing Raycaster Plugin in Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the raycaster plugin in the global plugins configuration of a Phaser game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport RaycasterPlugin from 'phaser3-rex-plugins/plugins/raycaster-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRaycaster',\n            plugin: RaycasterPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask from a Bob Object in Phaser 3\nDESCRIPTION: Creates a bitmap mask from a Bob object. The mask can be used to selectively show or hide portions of other game objects based on the Bob's shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = bob.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: BBCode Logging Commands in Markdown\nDESCRIPTION: Provides commands for BBCode logging, including printing messages, enabling/disabling logging, and dumping memory.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/command-list.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nlog\n  text=...\n  // logType='log'\n  // showTitle=true\n  // title\n  // titleColor='green'\n\nlog.disable\n\nlog.disable\n  title=...\n\nlog.enable\n\nlog.enable\n  title=...\n\nlog.memory\n\nlog.memory\n  text=...\n  keys=a,b,c\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Text Typing Plugin\nDESCRIPTION: Shows how to install the plugin via npm and configure it in the game configuration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttyping.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport TextTypingPlugin from 'phaser3-rex-plugins/plugins/texttyping-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTextTyping',\n            plugin: TextTypingPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Variable and Printing Text in Shell Script\nDESCRIPTION: This shell script sets a block variable to 1 and prints a message indicating that this code executes before a branch operation. It demonstrates basic variable assignment and printing in shell scripting.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/branch/0.before.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nset\n  block=1\n\nprint\n  text=Before branch\n```\n\n----------------------------------------\n\nTITLE: Defining Conditions for IF Block in Phaser 3\nDESCRIPTION: Specifies the conditions that need to be met for the IF block to execute. It checks if the 'block' variable is equal to 1 and if the 'coin' variable is less than 10.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/branch/2.if-b.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [Condition]\n\nblock == 1\ncoin < 10\n```\n\n----------------------------------------\n\nTITLE: Setting Data on Disconnect in Firebase Item Table\nDESCRIPTION: JavaScript code to set up automatic data setting when the current user disconnects from the Firebase database.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntable.setDataOnDisconnect(key0, value)\n// table.setDataOnDisconnect(key0, key1, value)\n// table.setDataOnDisconnect(key0, key1, key2, value)\n    .then(function() { })\n    .catch(function() { })        \n```\n\n----------------------------------------\n\nTITLE: Installing Await Loader Plugin via Scene Config\nDESCRIPTION: Shows how to load and initialize the await loader plugin through scene configuration and use it in the preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaitloader.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar sceneConfig = {\n    // ....\n    pack: {\n        files: [{\n            type: 'plugin',\n            key: 'rexawaitloaderplugin',\n            url: 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/    rexawaitloaderplugin.min.js',\n            start: true\n        }]\n    }\n};\nclass MyScene extends Phaser.Scene {\n    constructor() {\n        super(sceneConfig)\n    }\n    // ....\n\n    preload() {\n        this.plugins.get('rexawaitloaderplugin').addToScene(this);\n\n        this.load.rexAwait(function(successCallback, failureCallback) { \n            // successCallback()\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Plugin in Phaser Game Configuration\nDESCRIPTION: JavaScript code showing how to include the Firebase plugin in the Phaser game configuration as a global plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport FirebasePlugin from 'phaser3-rex-plugins/plugins/firebase-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFirebase',\n            plugin: FirebasePlugin,\n            start: true\n        }]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Managing Text Content Operations\nDESCRIPTION: Methods for getting and setting text content, including plain text extraction, substring operations, and text appending.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar curContent = txt.text;\nvar plainText = txt.getPlainText();\nvar text = txt.getText(start, end);\nvar linesArray = txt.getWrappedText();\ntxt.setText('[b]h[/b]ello');\ntxt.appendText(text);\n```\n\n----------------------------------------\n\nTITLE: Creating Firebase Broadcast Instance in JavaScript\nDESCRIPTION: Demonstrates how to create a Firebase Broadcast instance using the Rex Firebase plugin. This instance is used for sending and receiving messages through Firebase.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-broadcast.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rexFire = new window.rexfirebase();\nvar messager = rexFire.add.broadcast(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Shape Chess Object to Board\nDESCRIPTION: Creates a polygon shape chess object and adds it to a board at the specified tile coordinates with given fill color.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-shape.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chess = scene.rexBoard.add.shape(board, tileX, tileY, tileZ, fillColor);\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Anchor Plugin via NPM\nDESCRIPTION: Installation of the plugin via NPM and configuration in the game setup, including plugin import and initialization.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/anchor.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport AnchorPlugin from 'phaser3-rex-plugins/plugins/anchor-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexAnchor',\n            plugin: AnchorPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm\nDESCRIPTION: Command to install Rex plugins package from npm for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fsm.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask from Quad Image in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to create a bitmap mask from a Quad Image instance in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-image.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Handling Content Events in Bracket Parser 2\nDESCRIPTION: Shows how to handle content events in Bracket Parser 2, including accessing the last tag start information.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nparser.on('content', function(content){ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Checking Item Containment in UniqueItemList (JavaScript)\nDESCRIPTION: Shows methods for checking if a list contains specific items, any items from another list, or all items from another list.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar hasItem = listA.contains(item);\nvar hasAny = listA.any(listB);\nvar hasAll = listA.all(listB);\n```\n\n----------------------------------------\n\nTITLE: Loading NinePatch2 Plugin in Phaser 3 Game Preload\nDESCRIPTION: Loads the minified version of the NinePatch2 plugin during the preload stage of a Phaser 3 game scene. This is the simplest way to add the plugin to a project without npm installation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexninepatch2plugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexninepatch2plugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Importing Pathfinder Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to import and configure the Pathfinder plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-pathfinder.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pathFinder = scene.rexBoard.add.pathFinder(config);\n```\n\n----------------------------------------\n\nTITLE: Loading NumberBar Plugin in Phaser 3 Scene\nDESCRIPTION: Loads the NumberBar plugin as a scene plugin in the preload stage of a Phaser 3 game. This method uses a minified file loaded from a CDN.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin(\n  \"rexuiplugin\",\n  \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js\",\n  \"rexUI\",\n  \"rexUI\"\n);\n```\n\n----------------------------------------\n\nTITLE: While Loop Condition in Phaser3 Rex Plugin\nDESCRIPTION: Defines the condition for a while loop that continues as long as 'loopCount' is greater than 0. The loop will execute until this condition becomes false.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/repeat/repeat.md#2025-04-21_snippet_5\n\nLANGUAGE: pseudo-code\nCODE:\n```\nloopCount > 0\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Shapes in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Adds custom shapes to the scene based on a configuration object. This allows for creating complex shapes with custom rendering.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar customShapes = scene.rexUI.add.customShapes(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Horrifi Pipeline Plugin in Game Configuration\nDESCRIPTION: Sets up the Horrifi Pipeline plugin in the global plugins section of the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport HorrifiPipelinePlugin from 'phaser3-rex-plugins/plugins/horrifipipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexHorrifiPipeline',\n            plugin: HorrifiPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading TCRP Plugin via Minify File in Phaser 3\nDESCRIPTION: Demonstrates how to load the Arcade TCRP plugin using the minified file in a Phaser 3 scene's preload function.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexarcadetcrpplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexarcadetcrpplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Decrementing Loop Counter in Phaser3 Rex Plugin\nDESCRIPTION: Decrements the 'loopCount' variable by 1 using an expression. The '#()' syntax indicates that the contents should be evaluated as an expression.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/repeat/repeat.md#2025-04-21_snippet_7\n\nLANGUAGE: pseudo-code\nCODE:\n```\nset\\\n  loopCount=#(loopCount-1)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Round Rectangle Class\nDESCRIPTION: Creates a custom class that extends the RoundRectangle class with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyRoundRectangle extends RexPlugins.GameObjects.RoundRectangle {\n    constructor(scene, x, y, width, height, radius, fillColor, fillAlpha) {\n        super(scene, x, y, width, height, radius, fillColor, fillAlpha);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Configuration in Phaser 3 Physics\nDESCRIPTION: Settings for debugging physics bodies and velocities, including color configurations\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-world.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nscene.physics.world.defaults.debugShowBody = true;\nscene.physics.world.defaults.bodyDebugColor = 0xff00ff;\nscene.physics.world.defaults.debugShowStaticBody = true;\nscene.physics.world.defaults.staticBodyDebugColor = 0x0000ff;\nscene.physics.world.defaults.debugShowVelocity = true;\nscene.physics.world.defaults.velocityDebugColor = 0x00ff00;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom IsoBox Instance in Phaser 3\nDESCRIPTION: Demonstrates how to create an instance of a custom IsoBox class. This allows for using the extended functionality defined in the custom class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isobox.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar isoBox = new MyIsoBox(scene, x, y, width, height, fillTop, fillLeft, fillRight);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Installs the phaser3-rex-plugins package from npm which includes the NinePatch2 plugin. This is required for importing the plugin or class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Rotating Game Objects in Phaser3\nDESCRIPTION: Sets the rotation of game objects in degrees, with optional step, index, and direction parameters for creating rotational patterns.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.Rotate(gameObjects, value, step, index, direction);\n// value: angle in degree\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Custom Function\nDESCRIPTION: Find documents using a custom filter function with the where method. Return true to include a document in the results.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.where(function(doc){\n    // ...\n    return isPicked;  // true to pick this document\n})\n```\n\n----------------------------------------\n\nTITLE: Getting User's Score from LeaderBoard\nDESCRIPTION: JavaScript code to retrieve a user's score from the leaderboard, with an optional user ID parameter, returning a Promise with the score object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.getScore()\n// leaderBoard.getScore(userID)\n    .then(function(score) { })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Setting Choice Dialog Properties\nDESCRIPTION: Modifies properties of the choice dialog including position, transparency, and animation settings with configurable duration and easing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/choice-dialog-commands.md#2025-04-21_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\nNAME.set\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Map Neighbor Positions in JavaScript\nDESCRIPTION: Function to map over neighboring tile positions and transform them using a callback function. Supports optional distance parameter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar newArray = board.mapNeighbors(chess, function(neighborTileXY, index, neighborTileXYArray){\n    return {};\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Get Neighbor Chess Position in JavaScript\nDESCRIPTION: Methods to find neighboring chess pieces on the board. Supports finding neighbors in specific directions, multiple directions, or all directions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar neighborChess = board.getNeighborChess(chess, direction);\n// var neighborChess = board.getNeighborChess(chess, direction, neighborTileZ);\n```\n\n----------------------------------------\n\nTITLE: Importing HSL Adjust Pipeline Plugin in Phaser 3 Configuration\nDESCRIPTION: Import and configure the HSL Adjust Pipeline plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-hsladjust.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport HSLAdjustPipelinePlugin from 'phaser3-rex-plugins/plugins/hsladjustpipeline-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexHSLAdjustPipeline',\n            plugin: HSLAdjustPipelinePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Tween Event Handlers\nDESCRIPTION: Event handling setup for various tween lifecycle events including start, update, complete, and loop.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tween.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntween.on('active', function(tween, targets){\n});\ntween.on('complete', function(tween, targets){\n});\ntween.on('update', function(tween, key, target, current, previous){\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Time Filter Type for LeaderBoard\nDESCRIPTION: JavaScript code to set the time filter type for the leaderboard, which determines how scores are filtered based on time periods (day/week/month/year).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.setTimeFilterType(type);\n```\n\n----------------------------------------\n\nTITLE: Loading Bitmap Zone Plugin via Minified File\nDESCRIPTION: Shows how to load the plugin using a minified file in the preload stage and create a bitmap zone object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmapzone.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexbitmapzoneplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexbitmapzoneplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bitmapZone = scene.plugins.get('rexbitmapzoneplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Saving Text as Texture in Phaser 3\nDESCRIPTION: Generates a texture from the text object and saves it with the specified key. Optionally allows specifying a region to capture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bbcodetext.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.generateTexture(key);\n// txt.generateTexture(key, x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Handling High Coin Value Condition (>10)\nDESCRIPTION: Logic branch for when the coin value exceeds 10. It logs the condition status and then decreases the coin value by 5.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/memory-monitor/memory-monitor.md#2025-04-21_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nlog\\\n  text=(coin > 10)\n\nsetData\n  coin=#(coin-5)\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask\nDESCRIPTION: Shows how to create a bitmap mask from the shatter render texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-rendertexture.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = image.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeat Image Plugin in Game Configuration\nDESCRIPTION: Code for importing and configuring the Repeat Image plugin in the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RepeatImagePlugin from 'phaser3-rex-plugins/plugins/repeatimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRepeatImagePlugin',\n            plugin: RepeatImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: File Selection Event Handling\nDESCRIPTION: Event handler for file selection changes in FileChooser.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.on('select', function(files, button) {        \n    var file = files[0];\n    var url = URL.createObjectURL(file);\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Scrollable Panel Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to install the plugin via npm and import it in the game configuration. This method allows for more control over the plugin integration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar panel = scene.rexUI.add.scrollablePanel(config);\n```\n\n----------------------------------------\n\nTITLE: Accessing Polygon Points in Phaser 3\nDESCRIPTION: Retrieves the array of points that define the polygon.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = polygon.points;    // array of points {x,y}\n```\n\n----------------------------------------\n\nTITLE: Tracking Loading Progress in Phaser 3\nDESCRIPTION: Event handler for monitoring overall loading progress, which can be used to update a loading bar or progress indicator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.on('progress', function(progress){}, scope);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar loader = scene.load;\nvar total = loader.totalToLoad;\nvar remainder = loader.list.size + loader.inflight.size;\nvar progress = 1 - (remainder / total);\n```\n\n----------------------------------------\n\nTITLE: Clearing Star Stroke Style in Phaser 3\nDESCRIPTION: Clears the stroke style of a star shape in Phaser 3, removing its outline.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nstar.setStrokeStyle();\n```\n\n----------------------------------------\n\nTITLE: Setting Bob Object Tint in Phaser 3\nDESCRIPTION: Sets the tint color of a Bob object using a hex value between 0 and 0xffffff. This allows changing the color appearance of the Bob without modifying its texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nbob.setTint(tint);\n// bob.tint = tint;\n```\n\n----------------------------------------\n\nTITLE: Filling a Polygon with Graphics in Phaser 3\nDESCRIPTION: Draws a filled polygon shape using the graphics object. The fillStyle method should be called before this to set the fill color and alpha.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// graphics.fillStyle(color, alpha);   // color: 0xRRGGBB\ngraphics.fillPoints(polygon.points, true);\n```\n\n----------------------------------------\n\nTITLE: Loading Rex UI Plugin as a Scene Plugin in Phaser 3\nDESCRIPTION: Code to load the Rex UI Plugin as a scene plugin using the minified version during game preload.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the phaser3-rex-plugins package from npm, which includes the FishEye pipeline plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Erasing Content from RenderTexture in Phaser 3\nDESCRIPTION: Erases content from the render texture using the shape of specified game objects, working as a reverse of the draw method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrt.erase(entries);\n// rt.erase(entries, x, y);\n```\n\n----------------------------------------\n\nTITLE: Getting Fill Color Properties of an Arc in Phaser 3\nDESCRIPTION: Retrieves the fill color and alpha values from an Arc game object. These represent the interior color and transparency of the arc.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = arc.fillColor;\nvar alpha = arc.fillAlpha;\n```\n\n----------------------------------------\n\nTITLE: Loading Achievements Plugin (Minify File) in Phaser 3\nDESCRIPTION: Demonstrates how to load the Achievements plugin via minified file in the preload stage and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/achievements.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexachievementsplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexachievementsplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar achievements = scene.plugins.get('rexachievementsplugin').add();\n```\n\n----------------------------------------\n\nTITLE: Setting Sender and Receiver for Messaging in JavaScript\nDESCRIPTION: Demonstrates how to set the sender and receiver for messaging. This is necessary before sending or receiving messages.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-broadcast.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmessager.setSender(userID, userName);\n\nmessager.setReceiver(receiverID);\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Axis Friction in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the friction of an immovable physics body along individual axes, allowing separate control of horizontal and vertical friction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setFrictionX(x);\ngameObject.setFrictionY(y);\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Contains None\nDESCRIPTION: Find documents where an array property contains none of the specified values using the $containsNone operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$containsNone': [value0, value1, ...]}});\n```\n\n----------------------------------------\n\nTITLE: Setting Bounce Properties in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the bounce (restitution) properties of a physics body in both X and Y directions, determining how much velocity is maintained after collisions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setBounce(x, y);\n```\n\n----------------------------------------\n\nTITLE: Setting Light Intensity in Phaser 3\nDESCRIPTION: Two methods for setting a light's intensity in a Phaser 3 scene. You can use the setIntensity method or directly assign the intensity property.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlight.setIntensity(intensity);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlight.intensity = intensity;\n```\n\n----------------------------------------\n\nTITLE: Importing Flash Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Shows how to import the flash plugin from npm and include it in the game configuration. Also demonstrates adding flash behavior to a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/flash.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport FlashPlugin from 'phaser3-rex-plugins/plugins/flash-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFlash',\n            plugin: FlashPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar flash = scene.plugins.get('rexFlash').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Deleting User's Score from LeaderBoard\nDESCRIPTION: JavaScript code to delete a user's score from the leaderboard, returning a Promise that resolves when deletion is complete.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nleaderBoard.deleteUserScore(userID)\n    .then(function(){ })\n    .catch(function(){ })\n```\n\n----------------------------------------\n\nTITLE: Loading Bracket Parser 2 Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the minified version of the Bracket Parser 2 plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexbracketparser2plugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexbracketparser2plugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Checking Arcade TCRP Recorder State\nDESCRIPTION: Code for checking the current state of the recorder, including recording status and current time position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRecording = recorder.isRecording;\nvar now = recorder.now;\n```\n\n----------------------------------------\n\nTITLE: Implementing Flow Control with If-Else Statements in Markdown\nDESCRIPTION: Shows how to structure if-else statements for flow control in the command list using markdown headings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/command-list.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### [If coin > 10]\n\nactions...\n\n### [Else If (coin > 5) && (coin <10)]\n\nactions...\n\n### [Else]\n\nactions...\n```\n\n----------------------------------------\n\nTITLE: Loading ScaleOuter Plugin via Minified File\nDESCRIPTION: Instructions for loading the ScaleOuter plugin using the minified file in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaleouter.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexscaleouterplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexscaleouterplugin.min.js', 'rexScaleOuter', 'rexScaleOuter');\n```\n\n----------------------------------------\n\nTITLE: Defining Catch Handler for Exception Handling\nDESCRIPTION: Specifies a catch handler that prints the current coin value using string interpolation when an exception occurs.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/parallel/parallel0.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n## [Catch]\n\nprint\n  text=str(coin = {{coin}})\n```\n\n----------------------------------------\n\nTITLE: Creating a NameInputDialog from Class Import\nDESCRIPTION: Code to create a NameInputDialog instance directly from the imported class, without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = new NameInputDialog(scene, config);\n// var dialog = new NameInputDialog(scene, config, creators);\nscene.add.existing(dialog);\ndialog.resetDisplayContent(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Game with Board Plugin\nDESCRIPTION: Configuration code for installing the Board plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-miniboard.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Counting children with specific property value in Phaser 3 List\nDESCRIPTION: Method to count the number of children that have a property matching a specific value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar child = list.count(property, value);\n// value: the value to test the property against. Must pass a strict (`===`) comparison check.\n```\n\n----------------------------------------\n\nTITLE: Loading Press Gesture Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the press gesture plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexgesturesplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgesturesplugin.min.js', 'rexGestures', 'rexGestures');\n```\n\n----------------------------------------\n\nTITLE: Checking if Data Exists in Cache in Phaser 3\nDESCRIPTION: Demonstrates how to check if data with a specific key exists in a cache (text cache in this example) using the exists or has methods.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.text;\nvar hasData = cache.exists(key);\n// var hasData = cache.has(key);\n```\n\n----------------------------------------\n\nTITLE: Getting TouchEventStop Enable Status\nDESCRIPTION: Code to get the current enabled status of a TouchEventStop instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/toucheventstop.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = touchEventStop.enable;  // enable: true, or false\n```\n\n----------------------------------------\n\nTITLE: Rotating Vector2 Perpendicular in Phaser 3\nDESCRIPTION: Rotates the Vector2 to be perpendicular to its current direction. The right-hand rotation is clockwise, while left-hand is counter-clockwise.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/vector2.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvector.normalizeRightHand();\nvector.normalizeLeftHand();\n```\n\n----------------------------------------\n\nTITLE: Setting Loop Counter Variable in Phaser3 Rex Plugin\nDESCRIPTION: Initializes a loop counter variable named 'loopCount' with a value of 3. This variable will be used in subsequent loop structures.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/repeat/repeat.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudo-code\nCODE:\n```\nset\\\n  loopCount=3\n```\n\n----------------------------------------\n\nTITLE: Configuring NumberBar in Phaser 3\nDESCRIPTION: Provides a comprehensive configuration object for creating a NumberBar instance. This includes settings for background, icon, slider, text, and various behavioral options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-numberbar.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar numberBar = scene.rexUI.add.numberBar({\n    // x: 0,\n    // y: 0,\n    // anchor: undefined,\n    // width: undefined,\n    // height: undefined,\n    // origin: 0.5\n    // originX:\n    // originY:\n\n    background: backgroundGameObject,\n    icon: iconGameObject,\n    iconMask: false,\n    slider: {\n        background: backgroundGameObject,\n        track: trackGameObject,\n        indicator: indicatorGameObject,\n        thumb: thumbGameObject,\n        input: 'drag',\n        gap: undefined,        \n        easeValue: {\n            duration: 0,\n            ease: 'Linear'\n        },\n    },\n    text: textGameObject,\n\n    valuechangeCallback: function(newValue, oldValue, numberBar) {\n        // numberBar.text = Math.round(Phaser.Math.Linear(0, 100, newValue));\n    },\n\n    space: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        icon: 0,\n        slider: 0,\n    },\n    \n    enable: true,\n\n    // name: '',\n    // draggable: false,\n    // sizerEvents: false,\n    // enableLayer: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Dialogue with Typing Effect\nDESCRIPTION: Sets up dialogue for a character with typing animation effect. The text is displayed line by line with specified character name, expression, icon and typing speed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/command-executor/command-executor.md#2025-04-21_snippet_2\n\nLANGUAGE: custom\nCODE:\n```\n```Dialog.typing, name=A, expression=smile, icon=portraits, speed=100\nLine0...\nLine1...\nLine2...\nLine3...\n```\n// Wait until typing complete\n```\n\n----------------------------------------\n\nTITLE: Adding LeaderBoard Object (Minified Version)\nDESCRIPTION: JavaScript code to add a leaderboard object to the rex firebase plugin instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-leaderboard.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar leaderBoard = rexFire.add.leaderBoard(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Pre-Test Function for Field of View in Phaser 3\nDESCRIPTION: Shows how to set a pre-test function for the Field of View object, which is called before the main visibility test.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfieldOfView.setPreTestFunction(callback, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting End Angle of an Arc in Phaser 3\nDESCRIPTION: Sets the end angle (in degrees) for an Arc game object using the seEndAngle method. This defines where the arc ends.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\narc.seEndAngle(endAngle);\n```\n\n----------------------------------------\n\nTITLE: Loading UI Plugin via Minify File in Phaser 3\nDESCRIPTION: Instructions for loading the plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Removing Items Between Indices in Phaser Array\nDESCRIPTION: Method to remove a range of items between specified start and end indices from a Phaser array.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-addremove.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar removed = Phaser.Utils.Array.RemoveBetween(arr, startIndex, endIndex);\n// var removed = Phaser.Utils.Array.RemoveBetween(arr, startIndex, endIndex, callback, context);\n```\n\n----------------------------------------\n\nTITLE: Resizing a NinePatch2 Object\nDESCRIPTION: Resizes an existing NinePatch2 object to new dimensions. This will update the texture to maintain the nine-patch scaling properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.resize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Managing Thumb Position Properties in Phaser 3\nDESCRIPTION: Methods to get and set thumb position properties including left/right positions and RTL (Right-to-Left) settings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nvar thumbLeft = toggleSwitch.thumbLeftX;\nvar thumbRight = toggleSwitch.thumbRightX;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar rtl = toggleSwitch.rtl;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setThumbPosition(thumbLeft, thumbRight);\n// toggleSwitch.thumbLeftX = thumbLeft;\n// toggleSwitch.thumbRightX = thumbRight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setRTL(rtl);\n// toggleSwitch.rtl = rtl;\n```\n\n----------------------------------------\n\nTITLE: Applying Mask to Game Object in Phaser 3\nDESCRIPTION: Applies a created mask (either bitmap or geometry) to a game object. The same mask can be applied to multiple game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mask.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setMask(mask); // image.mask = mask;\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Game Object Commands in JavaScript\nDESCRIPTION: Shows how to register custom game object commands using JavaScript in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/command-list.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncommandExecutor.addGameObjectManager({\n    name: GOTYPE,\n\n    // ...\n\n    commands: {\n        commandName(gameObject, config, commandExecutor, eventSheetManager, eventSheet) {\n            // commandExecutor.waitEvent(eventEmitter, eventName);\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Items at Specific Index in Phaser Array\nDESCRIPTION: Method to remove an item at a specific index from a Phaser array, returning the removed item.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-addremove.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar removed = Phaser.Utils.Array.RemoveAt(arr, index);\n// var removed = Phaser.Utils.Array.RemoveAt(arr, index, callback, context);\n```\n\n----------------------------------------\n\nTITLE: MiniBoard Event Handling\nDESCRIPTION: Event handling code for pointer interactions with the MiniBoard and its chess pieces.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-miniboard.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nminiBoard.on('pointerdown', function(pointer, miniBoard) {\n});\n\nminiBoard.on('gameobjectdown', function(pointer, gameObject) {\n});\n\ngameObject.on('miniboard.pointerdown', function(pointer) {\n});\n```\n\n----------------------------------------\n\nTITLE: Dialog Typing Page 3 Configuration\nDESCRIPTION: Fourth page of dialog typing configuration with three lines of text. Uses null display name and icon properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/mds/fast-typing.md#2025-04-21_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\nDialog.typing, displayName=null, icon=null\nPage3:\nLine0...\nLine1...\nLine2...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chess Data from Game Object\nDESCRIPTION: Shows how to access the chess data object attached to a game object via the rexChess property\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-chessdata.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chessData = gameObject.rexChess;\n```\n\n----------------------------------------\n\nTITLE: Starting Arcade TCRP Recording\nDESCRIPTION: Code for starting the recording process, with an optional parameter to specify the starting step count.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.start();\n// recorder.start(startAt);  // start-at in step-count\n```\n\n----------------------------------------\n\nTITLE: Retrieving Background Element in Color Components\nDESCRIPTION: Retrieves the background game object from a color components instance. This allows access to the background element for customization or manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorcomponents.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = colorComponents.getElement('background');\n```\n\n----------------------------------------\n\nTITLE: Handling Key0 Change in 1D Firebase Item Table\nDESCRIPTION: JavaScript code to set up an event handler for when a key0's value changes in a 1D Firebase item table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('changekey0', function(key0, value) {  });\n```\n\n----------------------------------------\n\nTITLE: Getting Random Alias\nDESCRIPTION: JavaScript code for getting or registering a random alias for an ID with customizable parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-idalias.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nidAlias.getRandomAlias(id, {\n    digits: 10,\n    candidates: '0123456789',\n    retry: 1000\n})\n    .then(function(result) { \n        // var alias = result.alias;\n        // var id = result.id;\n    })\n    .catch(function(error) { })\n```\n\n----------------------------------------\n\nTITLE: Setting User Identity and Joining Room\nDESCRIPTION: JavaScript code showing how to set user ID and name, then join the chat room.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nroom.setUser(userID, userName);\nroom.joinRoom();\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Configuration\nDESCRIPTION: Demonstrates how to install and configure the plugin using NPM, including game configuration setup.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmapzone.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport BitmapZonePlugin from 'phaser3-rex-plugins/plugins/bitmapzone-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexBitmapZone',\n            plugin: BitmapZonePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bitmapZone = scene.plugins.get('rexBitmapZone').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install the phaser3-rex-plugins package from npm to gain access to the skewable image functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Setting Progress Value Using Property in Phaser 3 Dissolve Effect\nDESCRIPTION: Sets the progress value of the dissolve effect transition using direct property assignment. The progress value ranges from 0 to 1.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.progress = value;  // value: 0~1\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask for Sprite in Phaser 3\nDESCRIPTION: Creates a bitmap mask for the sprite, which can be used to control the visibility of parts of the sprite based on the mask's shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/sprite.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = sprite.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Document\nDESCRIPTION: Find the first document that matches the specified criteria using findOne, which returns a single document or null.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar doc = collection.findOne({});\n```\n\n----------------------------------------\n\nTITLE: Configuring Rex Board Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Rex Board Plugin in the Phaser 3 game configuration object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-texture.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install Rex plugins package from npm, which includes the Grid Cut Image plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridcutimage.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Configuring DOM Element for Youtube Player in Phaser 3\nDESCRIPTION: Configuration setup required to enable DOM elements in a Phaser 3 game to support the Youtube Player. Sets proper parent container and input targets.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    parent: divId,\n    // fullscreenTarget: divId, // For fullscreen\n    dom: {\n        createContainer: true\n    },\n    input: {\n        mouse: {\n            target: divId\n        },\n        touch: {\n            target: divId\n        },\n    },\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Accessing CSS Data from Cache in Phaser 3\nDESCRIPTION: Method to retrieve loaded CSS data from the CSS cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.css;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Importing Board Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the Board plugin, which includes Field of View functionality, in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-fieldofview.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Greater Than or Equal\nDESCRIPTION: Find documents where a property is greater than or equal to a specified value using the $gte operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$gte': value}});\n```\n\n----------------------------------------\n\nTITLE: Restarting Quest Task (JavaScript)\nDESCRIPTION: Shows how to restart the current Quest Task.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nquest.start();\n```\n\n----------------------------------------\n\nTITLE: Adding FixWidthSizer Object in Phaser 3\nDESCRIPTION: Shows how to add a FixWidthSizer object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fixwidthsizer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sizer = scene.rexUI.add.fixWidthSizer(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Ellipse to Empty in Phaser 3\nDESCRIPTION: Resets an ellipse to an empty state by setting width and height to zero.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.setEmpty();     // ellipse.width = 0, ellipse.height = 0\n```\n\n----------------------------------------\n\nTITLE: Custom Label Class Definition\nDESCRIPTION: Example of creating a custom label class extending SimpleTitleLabel\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletitlelabel.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLabel extends RexPlugins.UI.SimpleTitleLabel {\n    constructor(scene, config, creators) {\n        super(scene, config, creators);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping Memory Contents\nDESCRIPTION: Commands to dump all memory keys or specific memory keys, with optional BBCode-formatted message.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\nlog.memory\n```\n\nLANGUAGE: markdown\nCODE:\n```\nlog.memory\n  text=...\n  keys=a,b,c\n```\n\n----------------------------------------\n\nTITLE: Calculating Grid Distance and Ring Operations (JavaScript)\nDESCRIPTION: Provides methods for calculating grid distance between tiles and performing ring-based operations to get tile positions or chess pieces.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar distance = board.getDistance(tileA, tileB);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = board.ringToTileXYArray(centerTileXY, radius);\n// var out = board.ringToTileXYArray(centerTileXY, radius, out);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar out = board.filledRingToTileXYArray(centerTileXY, radius);\nvar out = board.filledRingToTileXYArray(centerTileXY, radius, nearToFar);\n// var out = board.filledRingToTileXYArray(centerTileXY, radius, out);\n// var out = board.filledRingToTileXYArray(centerTileXY, radius, nearToFar, out);\n```\n\n----------------------------------------\n\nTITLE: Removing Death Zone from Particle Emitter in JavaScript\nDESCRIPTION: Removes a specific death zone from the particle emitter. The zone parameter must be a reference to an existing death zone object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nemitter.removeDeathZone(zone)\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle with Round Rectangle Plugin\nDESCRIPTION: Creates a circle by setting width and height to undefined and providing a radius value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = scene.add.rexRoundRectangle(x, y, undefined, undefined, radius, fillColor, fillAlpha);\n```\n\n----------------------------------------\n\nTITLE: Ellipse Color Management\nDESCRIPTION: Methods for getting and setting fill and stroke colors of the ellipse, including alpha values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-ellipse.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = ellipse.fillColor;\nvar alpha = ellipse.fillAlpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.setFillStyle(color, alpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.setFillStyle();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = ellipse.strokeColor;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.setStrokeStyle(lineWidth, color, alpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nellipse.setStrokeStyle();\n```\n\n----------------------------------------\n\nTITLE: Using RandomPlace Plugin (NPM Version) in Phaser 3\nDESCRIPTION: Uses the RandomPlace plugin installed from NPM to place game objects randomly without overlapping.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/randomplace.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexRandomPlace').randomPlace(gameObjects, config);\n```\n\n----------------------------------------\n\nTITLE: Checking Camera Controller Status in Phaser 3 (JavaScript)\nDESCRIPTION: Methods to check the current status of the camera controller, such as whether it is currently pinching or panning.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/input-to-camera.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPinching = cameraController.isPinching;\nvar isPanning = cameraController.isPanning;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Question Manager (JavaScript)\nDESCRIPTION: Demonstrates how to get data from the Question Manager, either a specific key or all data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = questionManager.getData(key, defaultValue);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = questionManager.getData();\n```\n\n----------------------------------------\n\nTITLE: Creating Triangle Instance via Class Import\nDESCRIPTION: Imports the Triangle class directly and creates a new instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-triangle2.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Triangle from 'phaser3-rex-plugins/plugins/triangle.js';\nvar triangle = new Triangle(scene, x, y, width, height, fillColor, fillAlpha);\nscene.add.existing(triangle);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the Rex plugins package from NPM, which includes the touch event stop plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/toucheventstop.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating Pan Instance Directly in Phaser 3\nDESCRIPTION: Creates a new Pan instance directly using the imported class rather than through the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pan = new Pan(scene, config);\n// var pan = new Pan(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Swirl Pipeline Plugin\nDESCRIPTION: Load the minified plugin file in the scene's preload stage\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-swirl.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexswirlpipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexswirlpipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Description Element in Dialog - JavaScript\nDESCRIPTION: Gets the description game object from a dialog. This allows access to the description element for further manipulation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar description = dialog.getElement('description');\n```\n\n----------------------------------------\n\nTITLE: Class Import and Instance Creation\nDESCRIPTION: Demonstrates importing the ClickOutside class and creating a new instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clickoutside.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ClickOutside from 'phaser3-rex-plugins/plugins/clickoutside.js';\nvar clickOutside = new ClickOutside(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Installing Await Loader via NPM and Game Config\nDESCRIPTION: Demonstrates how to install the plugin using npm and configure it in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaitloader.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport AwaitLoaderPlugin from 'phaser3-rex-plugins/plugins/awaitloader-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexAwaitLoader',\n            plugin: AwaitLoaderPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing MoveTo Class in Phaser 3\nDESCRIPTION: Shows how to import the MoveTo class directly from the board-components module and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MoveTo } from 'phaser3-rex-plugins/plugins/board-components.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar moveTo = new MoveTo(chess, config);\n```\n\n----------------------------------------\n\nTITLE: Transaction Callback Function\nDESCRIPTION: JavaScript callback function used in Firebase transactions to determine the new value based on the previous value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(preValue) { \n    return newValue; \n}\n```\n\n----------------------------------------\n\nTITLE: Custom Outline Effect Layer Class\nDESCRIPTION: Defines a custom class extending OutlineEffectLayer with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effectlayer-outline.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyOutlineEffectLayer extends OutlineEffectLayer {\n    constructor(scene, config) {\n        super(scene, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm\nDESCRIPTION: Command to install rex plugins package from npm, which includes the Touch State plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/touchstate.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating Firebase Plugin Instance\nDESCRIPTION: JavaScript code to create a new instance of the Rex Firebase plugin when using the minified file approach.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rexFire = new window.rexfirebase();\n```\n\n----------------------------------------\n\nTITLE: Accessing Folder Elements by Name\nDESCRIPTION: Shows how to access folder child elements by their name, with optional recursive search.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = folder.getElement('#' + name);\n// var gameObject = folder.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = folder.getByName(name);\n// var gameObject = folder.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Adding Touch Event Stop Behavior via Plugin\nDESCRIPTION: Code to add touch event stop behavior to a game object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/toucheventstop.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar touchEventStop = scene.plugins.get('rextoucheventstopplugin').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Taking Video Snapshots in Phaser 3\nDESCRIPTION: Methods to capture the current frame of the video as a canvas texture, either the entire frame or a specific area.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.saveSnapshotTexture(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvasTexture = video.video.snapshot();\n// var canvasTexture = video.snapshot(width, height);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvasTexture = video.snapshotArea(x, y, srcWidth, srcHeight);\n// var canvasTexture = video.snapshotArea(x, y, srcWidth, srcHeight, destWidth, destHeight);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar key = canvasTexture.key;\n```\n\n----------------------------------------\n\nTITLE: Multiplying Data in Question Manager (JavaScript)\nDESCRIPTION: Demonstrates how to multiply a numeric value for a specific key in the Question Manager's data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nquestionManager.mulData(key, mul, defaultValue);\n```\n\n----------------------------------------\n\nTITLE: Animating Choice Dialog Properties\nDESCRIPTION: Animates the dialog properties using a tween animation with configurable parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/choice-dialog-commands.md#2025-04-21_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\nNAME.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Importing SplitPanels Class for Direct Usage in Phaser 3\nDESCRIPTION: Imports the SplitPanels class for direct instantiation without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-splitpanels.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SplitPanels } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n\nvar splitPanels = new SplitPanels(scene, config);\nscene.add.existing(splitPanels);\n```\n\n----------------------------------------\n\nTITLE: Adding File Manager Object\nDESCRIPTION: JavaScript code to create a file manager object from the Rex Firebase plugin instance with configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar fileManager = rexFire.add.files(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Alpha Value of an Arc in Phaser 3\nDESCRIPTION: Retrieves the alpha (transparency) value from an Arc game object. This affects the overall transparency of the arc.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = arc.alpha;\n```\n\n----------------------------------------\n\nTITLE: Yoyo Animation for Named Sprite\nDESCRIPTION: Applies a yoyo animation (back and forth) to a named sprite's properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_11\n\nLANGUAGE: phaser\nCODE:\n```\nNAME.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom NameInputDialog Class\nDESCRIPTION: Example of extending the NameInputDialog class to create a custom dialog with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyDialog extends RexPlugins.UI.NameInputDialog {\n    constructor(scene, config, creators) {\n        super(scene, config, creators);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Bounce Properties for Physics Body in Phaser 3\nDESCRIPTION: Shows how to set and get bounce properties for a physics body, controlling how it reacts to collisions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setBounce(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbody.setBounceX(x);\nbody.setBounceY(y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bx = body.bounce.x;\nvar by = body.bounce.y;\n```\n\n----------------------------------------\n\nTITLE: Adding Existing DOM Elements\nDESCRIPTION: Process of creating and adding existing DOM elements to the Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/domelement.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar el = document.createElement('div');\n// el.style = '...';\n// el.innerText = '...';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar domElement = scene.add.dom(x, y, el);\n// var domElement = scene.add.dom(x, y, el, style, innerText);\n```\n\n----------------------------------------\n\nTITLE: Basic XOR Encryption Example\nDESCRIPTION: Simple example of encrypting data using the XOR plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/xor.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar encResult = scene.plugins.get('rexXOR').Encrypt(src, pwd);\n```\n\n----------------------------------------\n\nTITLE: Destroying a Group in Phaser 3\nDESCRIPTION: Destroys the group object itself without affecting its members.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.destroy();\n```\n\n----------------------------------------\n\nTITLE: Accessing Shatter Center Position\nDESCRIPTION: Shows how to access the center position of the shatter effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar shatterCenter = image.shatterCenter; // {x, y}\n```\n\n----------------------------------------\n\nTITLE: Implementing Word Hit Areas in Phaser 3 Text\nDESCRIPTION: Code for setting up interactive hit areas for words in text, including event handling for pointer interactions and visualization of hit areas. Enables clickable regions within text content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('areadown', function(key, pointer, localX, localY, event){\n\n}, scope)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('areadown-' + key, function(pointer, localX, localY, event){\n\n}, scope)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('areaup', function(key, pointer, localX, localY, event){\n\n}, scope)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.on('areaup-' + key, function(pointer, localX, localY, event){\n\n}, scope)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.drawAreaBounds(graphics, color);\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Components\nDESCRIPTION: Different ways to import and initialize the Firebase components, including NPM and class imports.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-itemtable.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js';\nvar rexFire = new RexFirebase();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ItemTable } from 'phaser3-rex-plugins/plugins/firebase-components.js';\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents by String Length\nDESCRIPTION: Find documents where a string property has a specified length using the $len operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$len': value}});\n```\n\n----------------------------------------\n\nTITLE: Importing TextBox Class and Creating an Instance\nDESCRIPTION: Demonstrates how to import the TextBox class directly and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TextBox } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n```\n\n----------------------------------------\n\nTITLE: Manipulating Quad Render Texture in Phaser 3 (JavaScript)\nDESCRIPTION: Shows various operations that can be performed on a Quad Render Texture, including drawing, erasing, clearing, and filling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-rendertexture.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar rt = image.rt;\n\nimage.rt.draw(gameObject, x, y);\n// image.rt.draw(gameObject, x, y, alpha, tint);\n\nimage.rt.draw(group, x, y);\n// image.rt.draw(group, x, y, alpha, tint);\n\nimage.rt.draw(scene.children, x, y);\n// image.rt.draw(scene.children, x, y, alpha, tint);\n\nimage.rt.draw(key, x, y);\n// image.rt.draw(key, x, y, alpha, tint);\n\nimage.rt.drawFrame(key, frame, x, y);\n// image.rt.drawFrame(key, frame, x, y, alpha, tint);\n\nimage.snapshot(gameObjects);\n\nimage.rt.erase(gameObject, x, y);\n\nimage.rt.clear();\n\nimage.rt.fill(rgb, alpha);\n// image.rt.fill(rgb, alpha, x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Yoyo Animation for Choice Dialog\nDESCRIPTION: Applies a back-and-forth animation to the dialog properties with configurable parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/choice-dialog-commands.md#2025-04-21_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\nNAME.yoyo\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Creating Board from Tilemap using Plugin\nDESCRIPTION: Creates a board object from a tilemap using the Rex Board plugin. This requires the plugin to be loaded first.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-tilemap.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar board = scene.rexBoard.createBoardFromTilemap(tilemap, layers);\n```\n\n----------------------------------------\n\nTITLE: Drawing Points with Graphics in Phaser 3\nDESCRIPTION: Methods for drawing filled points of a specific size using either point objects or individual coordinates.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.fillPointShape(point, size); // point: {x, y}\ngraphics.fillPoint(x, y, size);\n```\n\n----------------------------------------\n\nTITLE: Setting GrayScale Intensity Value\nDESCRIPTION: Sets the intensity value of the grayscale effect, from 0 (original color) to 1 (full grayscale).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.intensity = intensity;\n// pipelineInstance.intensity += value;\n```\n\n----------------------------------------\n\nTITLE: Moving Chess to Destination Tile in Phaser 3\nDESCRIPTION: Methods to move a chess piece to a specified destination tile using coordinates or a tile object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-moveto.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoveTo.moveTo(tileX, tileY);\n// moveTo.moveTo(tileXY);\n```\n\n----------------------------------------\n\nTITLE: Splitting at Center of Render\nDESCRIPTION: Sets the split position to the center of the render with optional width and height parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.splitAtCenter();\n// pipelineInstance.splitAtCenter(width, height);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Circular Progress Class\nDESCRIPTION: Code to import the circular progress class directly and create an instance that is added to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circularprogress.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport CircularProgress from 'phaser3-rex-plugins/plugins/circularprogress.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar circularProgress = new CircularProgress(scene, x, y, radius, color, value, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Wait Commands in Markdown\nDESCRIPTION: Provides commands for implementing wait functionality, including waiting for clicks and other events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/command-list.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nclick\n\nwait\n  click\n  key=keyName\n  time=\n```\n\n----------------------------------------\n\nTITLE: Advancing to Next Text Page\nDESCRIPTION: Initiates typing for the next page of text content when working with multi-page texts.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.typeNextPage();\n```\n\n----------------------------------------\n\nTITLE: Setting User Information and List Management\nDESCRIPTION: Methods for setting user information, joining/leaving the list, and managing users.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-onlineuserlist.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.setUser(userID, userName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.setUser({\n    userID: userID,\n    userName: userName\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.join();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.leave();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.leave(userID);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuserList.changeUserName(newUserName);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from a Dynamic View\nDESCRIPTION: Get the documents in a dynamic view after applying filters and sorts.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = view.data();\n```\n\n----------------------------------------\n\nTITLE: Adding Bracket Parser 2 Instance After Plugin Import\nDESCRIPTION: Shows how to add a Bracket Parser 2 instance after importing the plugin in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = scene.plugins.get('rexBracketParser').add(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Lines Count in TextArea\nDESCRIPTION: Shows how to get the total number of lines in the TextArea content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textarea.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nvar linesCount = textArea.linesCount;\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Color for Full Window Rectangle\nDESCRIPTION: Methods to get and set the fill color and alpha of the rectangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = rect.fillColor;\nvar alpha = rect.fillAlpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrect.setFillStyle(color, alpha);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrect.setFillStyle();\n```\n\n----------------------------------------\n\nTITLE: Loading Bejeweled Plugin in Phaser 3 Scene Preload\nDESCRIPTION: Loads the minified rexBoard plugin and rexbejeweled script in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\nscene.load.script('rexbejeweled', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexbejeweled.min.js');\n```\n\n----------------------------------------\n\nTITLE: Method Import Usage\nDESCRIPTION: Import and use the effect properties method directly from npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effect-properties.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport AddEffectPropertiesProperties from 'phaser3-rex-plugins/plugins/effectproperties.js';\nAddEffectPropertiesProperties(gameObject);\nAddEffectPropertiesProperties(camera);\n```\n\n----------------------------------------\n\nTITLE: Importing Pathfinder Class in Phaser 3\nDESCRIPTION: Demonstrates how to import the Pathfinder class directly and create an instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-pathfinder.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PathFinder } from 'phaser3-rex-plugins/plugins/board-components.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pathFinder = new PathFinder(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Press Behavior for Game Object in Phaser 3\nDESCRIPTION: Attaches press behavior to a specific game object with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar press = scene.rexGestures.add.press(gameObject, {\n    // enable: true,\n\n    // time: 251,\n    // threshold: 9,\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Camera Controller Plugin in Phaser 3 (JavaScript)\nDESCRIPTION: Loads the minified camera controller plugin file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/input-to-camera.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcameracontrollerplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcameracontrollerplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Adding Checkbox Input in Phaser 3\nDESCRIPTION: Creates a checkbox input instance with position, size, color, and configuration parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar checkbox = scene.add.rexCheckbox(x, y, width, height, color, config);\n```\n\n----------------------------------------\n\nTITLE: RetroFont TEXT_SET7 Definition\nDESCRIPTION: Specialized character arrangement with grouped letters and symbols\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n'AGMSY+:4BHNTZ!;5CIOU.?06DJPV,(17EKQW\")28FLRX-\\'39'\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Alpha of IsoBox in Phaser 3\nDESCRIPTION: Shows how to get and set the alpha (transparency) value of an IsoBox object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-isobox.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = isoBox.alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisoBox.setAlpha(alpha);\n// isoBox.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Custom Command Structure in Markdown\nDESCRIPTION: Example of a custom command structure in event sheets, including command name and parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\ncommandName\n  param0=value\n  param1=value\n```\n\n----------------------------------------\n\nTITLE: Managing Message History\nDESCRIPTION: JavaScript code for retrieving and clearing the history of received messages.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar messages = room.broadcast.getHistory();\nroom.broadcast.clearHistory();\n```\n\n----------------------------------------\n\nTITLE: Getting Physics Body in Phaser 3\nDESCRIPTION: Shows how to retrieve the physics body associated with a game object after enabling physics on it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-body.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar body = gameObject.body;\n```\n\n----------------------------------------\n\nTITLE: Loading Perspective Image Plugin\nDESCRIPTION: Loads the perspective image plugin in the preload stage of a Phaser 3 game\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-card.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexperspectiveimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexperspectiveimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Importing SingleRoom Class Directly\nDESCRIPTION: JavaScript code to import the SingleRoom class directly from the firebase-components module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SingleRoom } from 'phaser3-rex-plugins/plugins/firebase-components.js';\n```\n\n----------------------------------------\n\nTITLE: Adding Grid Table Object to Phaser 3 Scene\nDESCRIPTION: Shows how to add a Grid Table object to a Phaser 3 scene after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridtable.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = scene.add.rexGridTable(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Managing Path Operations in Phaser 3 Graphics\nDESCRIPTION: Controls path drawing operations including beginning, closing, filling, and stroking paths.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/graphics.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngraphics.beginPath();\ngraphics.closePath();\ngraphics.fillPath(); // = graphics.fill()\ngraphics.strokePath(); // = graphics.stroke()\n```\n\n----------------------------------------\n\nTITLE: Creating Press Instance with Class Import in Phaser 3\nDESCRIPTION: Creates a new Press instance after importing the class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar press = new Press(scene, config);\n// var press = new Press(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Extending NinePatch Class in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Creates a custom nine-patch class by extending the RexPlugins.UI.NinePatch class. This allows for customization of nine-patch behavior.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNinePatch extends RexPlugins.UI.NinePatch {\n    constructor(scene, x, y, width, height, key, columns, rows, config) {\n        super(scene, x, y, width, height, key, columns, rows, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Item Table Object via Plugin\nDESCRIPTION: JavaScript code to create an item table object using the Firebase plugin instance in a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar table = scene.plugins.get('rexfirebaseplugin').add.itemTable(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Raycaster Plugin (Minify File) in Phaser 3\nDESCRIPTION: Demonstrates how to load the raycaster plugin via its minified file in the preload stage and add a raycaster object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/raycaster.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexraycasterplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexraycasterplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar raycaster = scene.plugins.get('rexraycasterplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Setting GroupNavigator Enable State\nDESCRIPTION: Sets whether the GroupNavigator is enabled and responding to navigation actions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupnavigator.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.setEnable(enable);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Mask from a Layer in Phaser 3\nDESCRIPTION: Demonstrates how to create a bitmap mask from a Layer for use with other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layer.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = layer.createBitmapMask();\n```\n\n----------------------------------------\n\nTITLE: Pausing Text Typing Animation\nDESCRIPTION: Pauses the ongoing typing animation. This will trigger the 'pause' event.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntextBox.pause();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Direction Mode\nDESCRIPTION: Shows how to get and set the direction mode for swipe detection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-swipe.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar dirMode = swipe.dirMode;  // 0,1,2,3\n```\n\n----------------------------------------\n\nTITLE: Loading Color Input Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the Color Input plugin in the preload stage of a Phaser 3 scene and add a color input object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-colorinput.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar colorInput = scene.rexUI.add.colorInput(config);\n```\n\n----------------------------------------\n\nTITLE: Rotating Game Object to Specific Angle with Shortest Path\nDESCRIPTION: Rotates a game object to a specific angle in degrees using the shortest angle path.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotateto.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrotateTo.rotateTo(angle);\n```\n\n----------------------------------------\n\nTITLE: Handling Unstarted Event in Youtube Player for Phaser 3\nDESCRIPTION: Event handler for when the Youtube video enters the unstarted state.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('unstarted', function(player){ }, scope);\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM\nDESCRIPTION: Command to install the Rex plugins package via npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-barrel.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating Rhombus Object from Imported Class in Phaser 3\nDESCRIPTION: Instantiates a new Rhombus geometry object using the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rhombus.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar rhombus = new Rhombus(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Applying Split Effect with Post Pipeline\nDESCRIPTION: Applies the Split Pipeline effect to a game object or camera using the post pipeline method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setPostPipeline(SplitPostFx);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(SplitPostFx);\n```\n\n----------------------------------------\n\nTITLE: Creating a Geometry Mask from Circle in Phaser 3\nDESCRIPTION: Creates a geometry mask from a circle game object that can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = circle.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Name Text Operations in Phaser3 Label\nDESCRIPTION: Methods for getting and setting the name text property of a label component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = label.nameText;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.setNameText(s);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.nameText = s;\n```\n\n----------------------------------------\n\nTITLE: Changing Video Source in Phaser 3\nDESCRIPTION: Methods to get the current video key and change to a different video source.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar key = video.getVideoKey();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvideo.changeSource(key);\n// video.changeSource(key, autoplay, loop, markerIn, markerOut);\n```\n\n----------------------------------------\n\nTITLE: Importing Rotate Class for Direct Usage\nDESCRIPTION: Demonstrates how to import the Rotate class for direct usage without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotate.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Rotate from 'phaser3-rex-plugins/plugins/rotate.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Style of Round Rectangle\nDESCRIPTION: Sets the fill color and alpha of a round rectangle shape or clears the fill style.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nrect.setFillStyle(color, alpha);\n```\n\n----------------------------------------\n\nTITLE: Loading MiniBoard Plugin in Phaser3\nDESCRIPTION: Code for loading the MiniBoard plugin in the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-miniboard.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexboardplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexboardplugin.min.js', 'rexBoard', 'rexBoard');\n```\n\n----------------------------------------\n\nTITLE: Setting Angular Acceleration in Phaser 3 Arcade Physics\nDESCRIPTION: Sets the angular acceleration of a physics body, which changes its angular velocity over time.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.setAngularAcceleration(v);\n```\n\n----------------------------------------\n\nTITLE: Setting LZString Encoding Method\nDESCRIPTION: Shows how to set the encoding method for compression/decompression.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lzstring.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlzstring.setEncoding(m);  // 0|'none'|1|'base64'|2|'utf16'|3|'uri'\n```\n\n----------------------------------------\n\nTITLE: Generating Random Timestamps and UUIDs in Phaser3\nDESCRIPTION: Methods for generating random timestamps within a date range and unique UUIDs.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/random-data-generator.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar timestamp = rnd.timestamp(min, max);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar uuid = rnd.uuid();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar sign = rnd.sign();\n```\n\n----------------------------------------\n\nTITLE: Importing Chess Sprite Class\nDESCRIPTION: Direct class import for chess sprite component from Rex plugins.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-sprite.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sprite } from 'phaser3-rex-plugins/plugins/board-components.js';\n```\n\n----------------------------------------\n\nTITLE: Handling Playing Event in Youtube Player for Phaser 3\nDESCRIPTION: Event handler for when the Youtube video starts playing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.on('playing', function(player){ }, scope);\n```\n\n----------------------------------------\n\nTITLE: Calculating Power Distance in Phaser 3\nDESCRIPTION: Method to calculate power distance by summing horizontal and vertical power distances\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/distance.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar d = Phaser.Math.Distance.Power(x1, y1, x2, y2);\n```\n\n----------------------------------------\n\nTITLE: Loading Chart.js Script\nDESCRIPTION: Loading the Chart.js library via CDN in the Phaser scene preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.script('chartjs', 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js');\n```\n\n----------------------------------------\n\nTITLE: Random Array Operations in Phaser3\nDESCRIPTION: Methods for picking random items from arrays and shuffling arrays.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/random-data-generator.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar item = rnd.pick(arr);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar item = rnd.weightedPick(arr);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = rnd.shuffle(arr);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the rex plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-fullwindowrectangle.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle-Switch Display Size\nDESCRIPTION: Gets the current display width and height of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = toggleSwitch.displayWidth;\nvar height = toggleSwitch.displayHeight;\n```\n\n----------------------------------------\n\nTITLE: Starting Clock in Phaser 3\nDESCRIPTION: Starts the clock, optionally specifying a start time in milliseconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/clock.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclock.start();\n// clock.start(startAt);  // start-at time in ms\n```\n\n----------------------------------------\n\nTITLE: Importing ConfirmActionButton Class in Phaser 3\nDESCRIPTION: Shows how to import the ConfirmActionButton class directly and add it to a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmactionbutton.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConfirmActionButton } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\n\nvar button = new ConfirmActionButton(scene, config);\nscene.add.existing(button);\n```\n\n----------------------------------------\n\nTITLE: Setting Rectangle Iteration Value Method\nDESCRIPTION: Sets the iteration value using the setIteration method to determine the number of interpolation points in round corners.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/canvas-roundrectangle.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrect.setIteration(value);\n```\n\n----------------------------------------\n\nTITLE: Handling Value Change Events in Phaser 3 UI Tweakers\nDESCRIPTION: Event handler for value changes in the tweaker component. Provides access to the new value, old value, binding target, and binding key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.on('valuechange', function(newValue, oldValue, bindingTarget, bindingKey) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Texture Content\nDESCRIPTION: Methods to clear entire texture or specific areas within the texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamic-texture.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.clear();\n\ntexture.clear(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Class Directly\nDESCRIPTION: Shows how to import the Checkbox class directly from the plugins package and create a checkbox instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Checkbox from 'phaser3-rex-plugins/plugins/checkbox.js';\n\n```\n\n----------------------------------------\n\nTITLE: Getting Ellipse Position in Phaser 3\nDESCRIPTION: Retrieves the position and edge coordinates of an ellipse.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = ellipse.x;\nvar y = ellipse.y;\nvar top = ellipse.top;\nvar left = ellipse.left;\nvar right = ellipse.right;\nvar bottom = ellipse.bottom;\n```\n\n----------------------------------------\n\nTITLE: Checking if Point is Inside Polygon in Phaser 3\nDESCRIPTION: Tests whether a point is contained within the polygon using the instance method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-polygon.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInside = polygon.contains(x, y);\n```\n\n----------------------------------------\n\nTITLE: Getting Star Fill Color and Alpha in Phaser 3\nDESCRIPTION: Retrieves the fill color and alpha transparency of a star shape in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = star.fillColor;\nvar alpha = star.fillAlpha;\n```\n\n----------------------------------------\n\nTITLE: Changing User Name\nDESCRIPTION: JavaScript code to change the current user's display name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nroom.changeUserName(newUserName);\n```\n\n----------------------------------------\n\nTITLE: Loading Shatter Plugin in Preload\nDESCRIPTION: Demonstrates how to load the minified plugin file in the scene's preload stage and create a shatter render texture object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-rendertexture.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexshatterimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexshatterimageplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexShatterRenderTexture(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Removing Horrifi Effect from Game Object\nDESCRIPTION: Removes the Horrifi post-processing effect from a game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexHorrifiPipeline').remove(gameObject);\n```\n\n----------------------------------------\n\nTITLE: Installing Viewport Coordinate Plugin via NPM in Phaser 3\nDESCRIPTION: Shows how to install the Viewport Coordinate plugin using NPM for a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/viewport-coordinate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Print Task Message Script\nDESCRIPTION: Simple print command to output a task-related message for debugging or logging\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/active/task.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nprint\n  text=[Task] Run me\n```\n\n----------------------------------------\n\nTITLE: Resuming a Timer in Phaser 3\nDESCRIPTION: Resumes a paused timer, allowing the callback to execute again according to the timer's configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timer.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntimer.paused = false;\n```\n\n----------------------------------------\n\nTITLE: Backend Load Path Configuration\nDESCRIPTION: Custom function for defining resource loading path in backend configuration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/i18next.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(lngs, namespaces) { \\n    return customPath; \\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Path from JSON in Phaser 3\nDESCRIPTION: Initializes a path object using JSON data containing curve definitions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/path.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar path = scene.add.path(json);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar path = new Phaser.Curves.Path(json);\n```\n\n----------------------------------------\n\nTITLE: Destroying Multiple Sprites\nDESCRIPTION: Destroys multiple sprite game objects at once using the exclamation prefix.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_4\n\nLANGUAGE: phaser\nCODE:\n```\n!NAME.destroy\n```\n\n----------------------------------------\n\nTITLE: Focusing on a Sprite\nDESCRIPTION: Brings the sprite to the top and tints other sprites to highlight it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_17\n\nLANGUAGE: phaser\nCODE:\n```\nNAME.focus\n  tintOthers=\n```\n\n----------------------------------------\n\nTITLE: Running Commands with the Imported Class in Phaser 3\nDESCRIPTION: Executes commands directly using the imported Run Commands class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/runcommands.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nRunCommands(commands, scope);\n```\n\n----------------------------------------\n\nTITLE: NPM Installation of Rex Plugins\nDESCRIPTION: Command to install Phaser 3 Rex plugins from npm repository.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Split Length\nDESCRIPTION: Sets or gets the split length of the Split Pipeline effect.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-split.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar splittedWidth = pipelineInstance.splittedWidth;\nvar splittedHeight = pipelineInstance.splittedHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.splittedWidth = splittedWidth;\npipelineInstance.splittedHeight = splittedHeight;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setSplittedWidth(splittedWidth);\npipelineInstance.setSplittedHeight(splittedHeight);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Application\nDESCRIPTION: JavaScript code for initializing Firebase with configuration parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-idalias.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.initializeApp({\n   apiKey: '...',\n   authDomain: '...',\n   databaseURL: '...',\n   projectId: '...',\n   storageBucket: '...',\n   messagingSenderId: '...'\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Text Data from Cache in Phaser 3\nDESCRIPTION: Method to retrieve loaded text data from the text cache.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = scene.cache.text;\nvar data = cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Starting Gameplay in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This snippet shows how to start the gameplay in the Bejeweled plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.start();\n```\n\n----------------------------------------\n\nTITLE: Adding Real-Time Timers Object Using Imported Plugin\nDESCRIPTION: Creates a Real-Time Timers object using the imported plugin in a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar realTimeTimers = scene.plugins.get('rexRealTimeTimers').add(config);\n```\n\n----------------------------------------\n\nTITLE: Removing Data from localStorage\nDESCRIPTION: Removes a key-value pair from localStorage using the specified key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localstorage.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.removeItem(key);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the Phaser 3 Rex Plugins package from NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Setting Press Enable Status in Phaser 3\nDESCRIPTION: Sets the enabled state of the press input.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npress.setEnable(enable);  // enable: true, or false\n// press.enable = enable;\n```\n\n----------------------------------------\n\nTITLE: Importing Perspective Image Class\nDESCRIPTION: Imports the PerspectiveImage class directly from the plugin module.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-image.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PerspectiveImage } from 'phaser3-rex-plugins/plugins/perspectiveimage.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle-Switch Track Corner Ratio\nDESCRIPTION: Sets the track corner radius ratio of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleSwitch.setTrackRadius(trackRadius);\n// toggleSwitch.trackRadius = trackRadius;\n```\n\n----------------------------------------\n\nTITLE: Adding Rotate Input Using Loaded Plugin\nDESCRIPTION: Demonstrates how to add a rotate input instance after the plugin has been loaded.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-rotate.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar rotate = scene.rexGestures.add.rotate(config);\n// var rotate = scene.rexGestures.add.rotate(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Calculating Average of a Property\nDESCRIPTION: Calculate the average value of a property across all documents in a collection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nvar avgValue = collection.avg(key);\n```\n\n----------------------------------------\n\nTITLE: Getting Point on Ellipse Circumference by Angle in Phaser 3\nDESCRIPTION: Calculates a point on the circumference of an ellipse at a specified angle in degrees.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = Phaser.Geom.Ellipse.CircumferencePoint(ellipse, angle);  // angle in degrees\n// var point = Phaser.Geom.Ellipse.CircumferencePoint(ellipse, angle, point);  // modify point\n```\n\n----------------------------------------\n\nTITLE: Configuring Run Commands Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the Run Commands plugin in the Phaser 3 game configuration as a global plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/runcommands.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RunCommandsPlugin from 'phaser3-rex-plugins/plugins/runcommands-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexRunCommands',\n            plugin: RunCommandsPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the loading-progress plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loadingprogress.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexloadingprogressplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexloadingprogressplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Element Access in Phaser3 Label\nDESCRIPTION: Methods for accessing various child elements of the label component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-namevaluelabel.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar background = label.getElement('background');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar icon = label.getElement('icon');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar nameTextObject = label.getElement('name');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar valueTextObject = label.getElement('value');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textObject = label.getElement('bar');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar action = label.getElement('action');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = label.getElement('#' + name);\n// var gameObject = label.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = label.getByName(name);\n// var gameObject = label.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Getting TextBox Elements by Name\nDESCRIPTION: Retrieves any game object within the text box by its name, with optional recursive search.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = textBox.getElement('#' + name);\n// var gameObject = textBox.getElement('#' + name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Listening for Audio Decode Events in Phaser 3\nDESCRIPTION: Event handlers for audio decoding completion, triggered when individual files or all audio files have been decoded.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.on('decoded', key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sound.on('decodedall');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Event Emitter Events in Wait Events\nDESCRIPTION: Shows how to set up Wait Events to wait for events from an event emitter.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/waitevents.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nwaitEvents.waitEvent(eventEmitter, eventName);\n```\n\n----------------------------------------\n\nTITLE: Getting InTouching Cooldown Time\nDESCRIPTION: Retrieves the current cooldown time between 'intouch' events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar cooldownTime = intouching.cooldownTime;\n```\n\n----------------------------------------\n\nTITLE: Checking Roll Animation Status in Perspective Carousel\nDESCRIPTION: Code to check if a rolling animation is currently running in a perspective carousel.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perspective-carousel.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar isRunning = carousel.roll.isRunning;\n```\n\n----------------------------------------\n\nTITLE: Creating MiniBoard Instance\nDESCRIPTION: Code for adding a MiniBoard container instance to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-miniboard.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar miniBoard = scene.rexBoard.add.miniBoard(x, y, config);\n```\n\n----------------------------------------\n\nTITLE: Moving a child to the top of a Phaser 3 List\nDESCRIPTION: Method to move a child to the top (end) of the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlist.bringToTop(child);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command to install Phaser 3 Rex Plugins package from NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-trees.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom SimpleDropDownList Instance\nDESCRIPTION: Creates an instance of a custom SimpleDropDownList class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar dropDownList = new MyDropDownList(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Getting Pan Enable State in Phaser 3\nDESCRIPTION: Retrieves the current enable state of the pan gesture detector.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar enable = pan.enable;  // enable: true, or false\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Phaser3 Rex Notes Project\nDESCRIPTION: Instructions for installing project dependencies using npm. This snippet assumes Node.js (version 10+) is already installed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Install [node.js](https://nodejs.org/en/) (ver 10+, for rollup)\n2. Click `install.bat`\n    - `npm install`\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle-Switch Value\nDESCRIPTION: Gets the current boolean value of the toggle-switch.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar value = toggleSwitch.value;\n// var value = toggleSwitch.value;\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Speed for Ship\nDESCRIPTION: Method to set the maximum speed of the ship after creation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nship.setMaxSpeed(speed);\n```\n\n----------------------------------------\n\nTITLE: Deactivation Action Script\nDESCRIPTION: Script that prints a deactivation message and executes the deactivate command\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/active/deactivate.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprint\n  text=[deactivate] Run me\n\n[deactivate]\n```\n\n----------------------------------------\n\nTITLE: Getting Detect Bounds for Pan in Phaser 3\nDESCRIPTION: Retrieves the current detection bounds for the pan gesture detector.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar bounds = pan.bounds;\n```\n\n----------------------------------------\n\nTITLE: Accessing the underlying array in Phaser 3 List\nDESCRIPTION: Property to get the underlying array of children in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar children = list.list;\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling TextTruncator Functionality\nDESCRIPTION: Method to toggle the text truncation behavior on or off and update the display.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttruncator.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntruncator.setEnable(enable).updateText();\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Promise Class\nDESCRIPTION: Code to import the ModalPromise class from the Rex Plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal-promise.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ModalPromise } from 'phaser3-rex-plugins/plugins/modal.js';\n```\n\n----------------------------------------\n\nTITLE: Loading TCRP Plugin via Minified File in Phaser 3\nDESCRIPTION: Loads the minified TCRP plugin file during the preload stage and creates a recorder instance. This method is suitable for direct inclusion without a build process.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextcrpplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextcrpplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading LayerManager Plugin via Minified File in Phaser 3\nDESCRIPTION: Code example showing how to load the LayerManager plugin using the minified file approach. This method loads the plugin in the preload stage and then adds a layer manager instance to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexlayermanagerplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexlayermanagerplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM (Command Line)\nDESCRIPTION: Command to install Rex Plugins package from npm which includes the UniqueItemList plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Reversing the order of children in Phaser 3 List\nDESCRIPTION: Method to reverse the order of all children in the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nlist.reverse();\n```\n\n----------------------------------------\n\nTITLE: Getting Random Point Inside Triangle in Phaser 3\nDESCRIPTION: Generates a random point within the triangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = triangle.getRandomPoint();\n// var point = triangle.getRandomPoint(point);  // modify point\n```\n\n----------------------------------------\n\nTITLE: Setting Texture on Repeat Image\nDESCRIPTION: Code for changing the texture of an existing repeat image instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setTexture(key, frame);\n```\n\n----------------------------------------\n\nTITLE: Creating Ellipse Mask\nDESCRIPTION: Method for creating a geometry mask from the ellipse shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-ellipse.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = ellipse.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Multiple File Selection Configuration\nDESCRIPTION: Enable or disable multiple file selection in FileChooser.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfileChooser.setMultiple();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfileChooser.setMultiple(false);\n```\n\n----------------------------------------\n\nTITLE: Destroying Sprite by Name\nDESCRIPTION: Destroys a sprite game object identified by its name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_2\n\nLANGUAGE: phaser\nCODE:\n```\nNAME.destroy\n```\n\n----------------------------------------\n\nTITLE: Generating Random Angles in Phaser3\nDESCRIPTION: Methods for generating random angles in degrees and radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/random-data-generator.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar angle = rnd.angle();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar angle = rnd.rotation();\n```\n\n----------------------------------------\n\nTITLE: Triggering Folder Layout\nDESCRIPTION: Shows how to trigger layout calculation for a folder component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfolder.layout();\n```\n\n----------------------------------------\n\nTITLE: Language Change Event Handler\nDESCRIPTION: Event listener for language change events\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/i18next.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ni18next.on('languageChanged', function (lng) {\\n});\n```\n\n----------------------------------------\n\nTITLE: Applying CRT Effect to Camera with Class Import\nDESCRIPTION: Applies the CRT post-processing effect directly to a camera using setPostPipeline method after importing the CRT pipeline class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.setPostPipeline(CrtPostFx);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Hidden Input Text Class in Phaser 3\nDESCRIPTION: Demonstrates how to create a custom class extending the Hidden Input Text functionality in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/hiddeninputtext.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyHiddenText extends HiddenInputText {\n    constructor(textGameObject, config) {\n        super(textGameObject, config) {\n        // ...            \n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: This snippet shows the npm command to install the rex plugins package, which includes the drop-down list plugin, for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Applying Glow Effect to a Camera using Minify File Method\nDESCRIPTION: Applies the glow effect to a Phaser 3 camera using the plugin loaded from the minified file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexglowfilterpipelineplugin').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Options for SimpleDropDownList\nDESCRIPTION: Sets the options array for a SimpleDropDownList instance using both method and property approaches.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpledropdownlist.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.setOptions(options);\n```\n\n----------------------------------------\n\nTITLE: Configuring UniqueItemList Plugin in Game Configuration (JavaScript)\nDESCRIPTION: Shows how to install the UniqueItemList plugin in the global plugins configuration of a Phaser game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UniqueItemListPlugin from 'phaser3-rex-plugins/plugins/uniqueitemlist-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexUniqueItemList',\n            plugin: UniqueItemListPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Checkbox Read-Only State\nDESCRIPTION: Retrieves the current read-only state of a checkbox component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar readOnly = checkbox.readOnly;\n```\n\n----------------------------------------\n\nTITLE: Checking for element presence in a Phaser 3 Set\nDESCRIPTION: Shows how to check if a specific element exists in the Set.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-set.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nset.contains(element);\n```\n\n----------------------------------------\n\nTITLE: Running Confirm Action with Imported Class\nDESCRIPTION: Code for creating a confirm action dialog using the directly imported ConfirmAction class. The dialog will be destroyed after any button is clicked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmaction.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = ConfirmAction(scene, config)\n```\n\n----------------------------------------\n\nTITLE: Getting Angular Acceleration in Phaser 3 Arcade Physics\nDESCRIPTION: Retrieves the current angular acceleration of a physics body.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nvar aa = gameObject.body.angularAcceleration;\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Fixed-Part Scale for a NinePatch2 Object\nDESCRIPTION: Sets the maximum scale values for fixed parts of a NinePatch2 object. This limits how large the non-stretched sections can become.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setMaxFixedPartScale(scale);\n// ninePatch.setMaxFixedPartScale(scaleX, scaleY);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pop-Up Animation for Width Only in Phaser 3\nDESCRIPTION: Animates a game object by scaling up its width from 0 to its current scale over a specified duration, while keeping the height constant. Supports both callback and Promise-based approaches.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScaleX(scaleX)\n    .popUp(duration, 'x');\n\n// gameObject.popUp(duration, 'x', ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject\n    //.setScaleX(scaleX)\n    .popUpPromise(duration, 'x')\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Getting Server Timestamp in Firestore\nDESCRIPTION: Retrieves the current timestamp from the Firestore server, useful for consistently tracking document creation or update times.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-firestore.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.firestore.FieldValue.serverTimestamp()\n```\n\n----------------------------------------\n\nTITLE: Print Start Statement\nDESCRIPTION: Initial print statement to indicate task startup\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/parallel-groups/parallel0.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nprint\n  text=Task0 start\n```\n\n----------------------------------------\n\nTITLE: Unplugging Key Objects from Keys Hub\nDESCRIPTION: These snippets show how to unplug key objects from the Keys Hub, either individually or as a set.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyshub.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHubunplugKeyObjects(keyObjects);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeysHub.unplugKeyObject(keyObject);\n```\n\n----------------------------------------\n\nTITLE: Shuffling Group Members in Phaser 3\nDESCRIPTION: Randomly rearranges the order of game objects within the group.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.shuffle();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Death Zone Source in JavaScript\nDESCRIPTION: Defines a custom death zone source that implements the contains method. This allows for creating custom shapes that can trigger particle destruction based on position.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/particles.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    contains: function (x, y) {\n        // ...\n        return bool;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox Size\nDESCRIPTION: Sets the width and height of the checkbox using the setSize method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setSize(width, height);\n```\n\n----------------------------------------\n\nTITLE: RetroFont TEXT_SET10 Definition\nDESCRIPTION: Uppercase letters only\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n```\n\n----------------------------------------\n\nTITLE: Timeline Event Handler Function\nDESCRIPTION: Example of a run function handler for timeline events with target parameter context.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/timeline.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction() {\n    // this: target parameter\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating FishEye Mode\nDESCRIPTION: Gets or sets the mode of the FishEye effect, which can be either 'asin' (0) or 'sin' (1) to create different distortion patterns.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar mode = pipelineInstance.fishEyeMode;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setFishEyeMode(mode);\n```\n\n----------------------------------------\n\nTITLE: Creating Repeat Image with Class Import\nDESCRIPTION: Code for creating a repeat image instance after importing the class directly.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new RepeatImage(scene, x, y, key, frame, config);\nscene.add.existing(image);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom Holy Grail Class\nDESCRIPTION: Code snippet for creating an instance of a custom Holy Grail class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar holyGrail = new MyHolyGrail(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Video in Youtube Player for Phaser 3\nDESCRIPTION: Methods to load a video into the Youtube Player by providing a video ID and optional autoplay setting.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.load(videoId);\n// player.load(videoId, autoPlay);\n```\n\n----------------------------------------\n\nTITLE: Loading Perlin Plugin via Minified File in Phaser 3\nDESCRIPTION: Instructions for loading the plugin via minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/perlin.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexperlinplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexperlinplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Creating Holy Grail Layout with Imported Plugin\nDESCRIPTION: Code for creating a Holy Grail layout instance when using the imported plugin method.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar holyGrail = scene.rexUI.add.holyGrail(config);\n```\n\n----------------------------------------\n\nTITLE: Applying Transition Effects to Background Images\nDESCRIPTION: Command for applying transition effects when changing the image of a Background game object. Supports various modes including fade, slide, zoom, mask, and shader effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/background-commands.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nNAME.cross\n  key=\n  frame=\n  duration=\n  mode=fade\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Setting InTouching Cooldown Time\nDESCRIPTION: Sets the cooldown time between 'intouch' events using method or property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/intouching.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nintouching.setCooldown(time);\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Label Class Directly\nDESCRIPTION: Imports the BadgeLabel class directly and creates an instance without using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-badgelabel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BadgeLabel } from 'phaser3-rex-plugins/templates/ui/uiComponents.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar badgeLabel = new BadgeLabel(scene, config);\nscene.add.existing(badgeLabel);\n```\n\n----------------------------------------\n\nTITLE: Clearing Camera Render to Texture in Phaser 3\nDESCRIPTION: Shows how to clear a camera's render-to-texture in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/camera.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.clearRenderToTexture();\n```\n\n----------------------------------------\n\nTITLE: Getting Current Text Typing Speed\nDESCRIPTION: Retrieves the current typing speed value in milliseconds.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar speed = textBox.typingSpeed;\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Configuration\nDESCRIPTION: Configuration code for installing the plugin via NPM and setting it up in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/localforage-files.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport FilesPlugin from 'phaser3-rex-plugins/plugins/localforagefiles-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexFiles',\n            plugin: FilesPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Moving a child to the bottom of a Phaser 3 List\nDESCRIPTION: Method to move a child to the bottom (beginning) of the List.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-list.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlist.sendToBack(child);\n```\n\n----------------------------------------\n\nTITLE: YAML Achievement Definition Example\nDESCRIPTION: Example of defining achievements in YAML format with conditional expressions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ymlachievements.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nLv1 :\n    Ach1 : (A >= 10) && (A < 20)\n    Ach2 : (A >= 20) && (A < 50)\n    Ach3 : A >= 50\n```\n\n----------------------------------------\n\nTITLE: Implementing Scale-Down Destroy Animation for Width Only in Phaser 3\nDESCRIPTION: Scales down a game object's width over a specified duration and then destroys it, while keeping the height constant. Supports both standard and Promise-based interfaces.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scaledowndestroy.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDownDestroy(duration, 'x');\n// gameObject.scaleDownDestroy(duration, 'x', ease);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.scaleDownDestroyPromise(duration, 'x');\n    .then(function() {\n        // ....\n    })\n```\n\n----------------------------------------\n\nTITLE: Importing Line Progress Plugin via NPM\nDESCRIPTION: Shows how to import and configure the plugin using NPM installation and game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-lineprogress.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LineProgressPlugin from 'phaser3-rex-plugins/plugins/lineprogress-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexLineProgressPlugin',\n            plugin: LineProgressPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Keys Hub Plugin via npm\nDESCRIPTION: This snippet demonstrates how to import and configure the Keys Hub plugin using npm in the game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/keyshub.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport KeysHubPlugin from 'phaser3-rex-plugins/plugins/keyshub-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexKeysHub',\n            plugin: KeysHubPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar keysHub = scene.plugins.get('rexKeysHub').add(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Setting Box Stroke Style\nDESCRIPTION: Sets the box stroke line width, color, and alpha values for the checkbox when checked.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setBoxStrokeStyle(lineWidth, color, alpha);\n// checkbox.boxLineWidth = lineWidth;\n// checkbox.boxStrokeColor = color;\n// checkbox.boxStrokeAlpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Creating Pages Object from Direct Class Import\nDESCRIPTION: Code to create a pages container after directly importing the Pages class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pages = new Pages(scene, config);\nscene.add.existing(pages);\n```\n\n----------------------------------------\n\nTITLE: While Loop Implementation in Custom Script\nDESCRIPTION: Demonstrates how to create and use a while loop in the custom scripting language. It includes a loop counter and a do-while structure.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/sample/sample.md#2025-04-21_snippet_2\n\nLANGUAGE: custom\nCODE:\n```\nset\n  loopCount=3\n\n## [While]\n\nloopCount > 0\n\n### do-while\n\nprint\n  text=do-while {{loopCount}}\n\nset\n  loopCount=#(loopCount-1)\n```\n\n----------------------------------------\n\nTITLE: Loading UI Plugin via Scene Plugin in Phaser 3\nDESCRIPTION: Code snippet for loading the UI plugin as a scene plugin in the preload stage. This method uses the minified version of the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Alternate Multi-line Typing Animation Syntax\nDESCRIPTION: Alternative syntax for typing animation that allows for multiple lines of text to be defined in a code block format. Supports the same parameters as the standard typing command.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/textbox-commands.md#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n```NAME.typing, name=, expression=, icon=, iconFrame=, typingSpeed=, iconCrossDuration=, iconCrossMode='crossFade', wait=true\ntext-line0\ntext-line1\ntext-line2\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling Arcade TCRP Recording Session\nDESCRIPTION: Code for pausing, resuming, and stopping the recording process.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrecorder.pause();\nrecorder.resume();\nrecorder.stop();\n```\n\n----------------------------------------\n\nTITLE: Creating Arcade TCRP Recorder Instance from Minify-loaded Plugin\nDESCRIPTION: Code for creating an instance of the Arcade TCRP recorder after loading the plugin via minify file.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar recorder = scene.plugins.get('rexarcadetcrpplugin').addRecorder(scene);\n```\n\n----------------------------------------\n\nTITLE: Logic Mapping If-Else Structure\nDESCRIPTION: Example of mapping traditional if-else control structure to behavior tree nodes using Selector pattern.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/behaviortree/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nif ConditionA\n    TaskA\nelse if ConditionB\n    TaskB\nelse\n    TaskC\n```\n\n----------------------------------------\n\nTITLE: Checking if DropDownList Panel is Open\nDESCRIPTION: Determines whether the dropdown list panel is currently open.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar isOpened = dropDownList.isOpened;\n```\n\n----------------------------------------\n\nTITLE: Getting Fill Color Properties of Round Rectangle\nDESCRIPTION: Retrieves the fill color and fill alpha values of a round rectangle shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = rect.fillColor;\nvar alpha = rect.fillAlpha;\n```\n\n----------------------------------------\n\nTITLE: Enabling Click Functionality in DropDownList\nDESCRIPTION: Enables click interactions for the dropdown list component.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.enableClick();\n```\n\n----------------------------------------\n\nTITLE: Setting Light Position in Phaser 3\nDESCRIPTION: Two different methods for setting a light's position in a Phaser 3 scene. You can either use the setPosition method or directly set the x and y properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlight.setPosition(x, y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlight.x = x;\nlight.y = y;\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Game Setup\nDESCRIPTION: Configuration code to set up the UI plugin in the game configuration\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-simpletitlelabel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport UIPlugin from 'phaser3-rex-plugins/templates/ui/ui-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexUI',\n            plugin: UIPlugin,\n            mapping: 'rexUI'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Instance with Configuration\nDESCRIPTION: Complete example of creating a modal instance with all available configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/modal.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar modal = scene.plugins.get('rexModal').add(gameObject, {\n    // cover: {\n    //     color: 0x0,\n    //     alpha: 0.8,\n    //     transitIn: function(gameObject, duration) { },\n    //     transitOut: function(gameObject, duration) { },\n    // },\n    // cover: false, \n\n    // When to close modal dialog?\n    // touchOutsideClose: false,\n    // anyTouchClose: false,\n    // timeOutClose: false,\n    // manualClose: false,\n\n    // duration: {\n    //     in: 200,\n    //     hold: 2000,\n    //     out: 200\n    // }\n\n    // transitIn: 0,\n    // transitOut: 0,\n\n    // destroy: true,\n    // openOnStart: true\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: Command for installing the Rex plugins package from NPM.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-pixelation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating a NameInputDialog after Plugin Configuration\nDESCRIPTION: Code to create a NameInputDialog instance after configuring the Rex UI plugin in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar dialog = scene.rexUI.add.nameInputDialog(style).resetDisplayContent(config);\n// var dialog = scene.rexUI.add.nameInputDialog(style, creators).resetDisplayContent(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Named Custom Wait Events in Phaser3 Tag Player\nDESCRIPTION: Event handler for named custom wait events in the Tag Player system, which fires for [wait=xxx] tags with custom wait conditions. The callback function should be invoked to continue typing.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagplayer.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntagPlayer.on('wait.xxx', function(callback) {\n    // Invoke `callback()` to continue typing\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Continuous Dragging in Phaser 3\nDESCRIPTION: Event handler for continuous dragging of the mini-board. Updates position based on drag coordinates and handles alignment with the main board when overlapping occurs.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-miniboard.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nminiBoard.on('drag', function(pointer, dragX, dragY){\n    /*\n    miniBoard.setPosition(dragX, dragY);\n    if (miniBoard.isOverlapping(mainBoard)) {\n        miniBoard.alignToMainBoard(mainBoard);\n    }\n    */\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Setting Transition Duration in Phaser 3\nDESCRIPTION: Sets the duration of the transition animation in milliseconds, controlling how long it takes to transition between textures.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/transitionimage.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimage.setDuration(duration);\n```\n\n----------------------------------------\n\nTITLE: Example CSV Format for Achievements Plugin\nDESCRIPTION: Shows the expected CSV format for defining achievements with conditions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/achievements.md#2025-04-21_snippet_5\n\nLANGUAGE: raw\nCODE:\n```\n,A,A\nLv1,Ach1,>= 10,<= 20,\nLv1,Ach2,>= 20,< 50,\nLv1,Ach3,>= 50,,\n```\n\n----------------------------------------\n\nTITLE: Condition Block Evaluation in Pseudocode\nDESCRIPTION: Defines conditions for block equality and coin comparison\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/branch/1.if-a.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nblock == 1\ncoin < 5\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Last Name in Edit Dialog\nDESCRIPTION: Methods for retrieving and setting the last name value in the dialog. The getter accesses the current value while the setter updates it.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar lastName = dialog.lastName;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.setLastName(value);\n// data.lastName = value;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Inverse Effect Intensity in Phaser 3\nDESCRIPTION: Gets and sets the intensity of the inverse effect in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-inverse.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar intensity = pipelineInstance.intensity;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.intensity = intensity;\n// pipelineInstance.intensity += value;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipelineInstance.setIntensity(radius);\n```\n\n----------------------------------------\n\nTITLE: Custom File Chooser Class Definition\nDESCRIPTION: Creating a custom file chooser class by extending the base FileChooser class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filechooser.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyFlieChooser extends FileChooser {\n    constructor(scene, x, y, width, height, config) {\n        super(scene, x, y, width, height, config) {\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements by Name in imageInputLabel (Method 1) (JavaScript)\nDESCRIPTION: Gets a child game object by its name using the getElement method with a '#' prefix. The optional recursive parameter determines whether to search all children recursively.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = imageInputLabel.getElement('#' + name);\n// var gameObject = imageInputLabel.getElement('#' + name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Creating Ship Behavior via Direct Class Import\nDESCRIPTION: Creates a ship behavior instance directly using the imported class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar ship = new Ship(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Handling Key2 Addition in 3D Firebase Item Table\nDESCRIPTION: JavaScript code to set up an event handler for when a key2 is added to a 3D Firebase item table.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-itemtable.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ntable.on('addkey2', function(key0, key1, key2, value) {  });\n```\n\n----------------------------------------\n\nTITLE: Toggling TouchEventStop Enable Status\nDESCRIPTION: Code to toggle the enabled status of a TouchEventStop instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/toucheventstop.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntouchEventStop.toggleEnable();\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Styles in Phaser 3 Rex UI (JavaScript)\nDESCRIPTION: Defines the style configuration for tab components, including tab background, text styling, icon properties, spacing, and page transition effects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // style: {...}\n    styles: {\n        tab: {\n            tab: {\n                background: {\n                    radius: 0,\n                    // radius: {tl: {x,y}, tr: {x,y}, bl: {x,y}, br: {x,y}}\n\n                    color: undefined,\n                    alpha: undefined,\n                    strokeColor: undefined,\n                    strokeAlpha: undefined,\n                    strokeWidth: undefined,\n\n                    'active.color': undefined,\n                    'active.alpha': undefined,\n                    'active.strokeColor': undefined,\n                    'active.strokeAlpha': undefined,\n                    'active.strokeWidth': undefined,\n                },\n\n                text: {\n                    fontFamily: 'Courier',\n                    fontSize: '16px',\n                    fontStyle: '',\n                    backgroundColor: null,\n                    color: '#fff',\n                    stroke: '#fff',\n                    strokeThickness: 0,\n                    shadow: {\n                        offsetX: 0,\n                        offsetY: 0,\n                        color: '#000',\n                        blur: 0,\n                        stroke: false,\n                        fill: false\n                    },                  \n                    padding: {\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                    },\n                    // more text styles\n                },\n\n                iconSize: undefined,\n                iconWidth: undefined, iconHeight: undefined,\n\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    icon: 0, text: 0\n                }\n            },\n\n            wrapTabs: false,\n\n            tabs: {\n                space: {\n                    left: 0, right: 0, top: 0, bottom:0, \n                    item: 0,\n                }\n            },\n\n            pages: {\n                fadeIn: 0,\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GrayScale Plugin via NPM\nDESCRIPTION: Installs the Rex plugins package from npm which includes the GrayScale pipeline.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-grayscale.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM for Phaser 3\nDESCRIPTION: Command to install the Rex plugins package via npm for use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-pan.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: File Change Event Handler\nDESCRIPTION: Handling file selection changes and accessing selected file properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filechooser.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfileChooser.on('change', function(fileChooser) {\n    var files = fileChooser.files;\n    if (files.length === 0) { // No selected file\n        return;\n    }\n\n    var file = files[0];\n    var url = URL.createObjectURL(file);\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Board Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Configures the Rex Board plugin in the Phaser 3 game configuration for scene-level access.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-tilemap.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox to Checked State\nDESCRIPTION: Sets the checkbox to the checked state using method calls or property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncheckbox.setChecked();\n// checkbox.setChecked(true);\n// checkbox.setValue(true);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Quad Render Texture Class in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to create a custom class extending QuadRenderTexture with additional functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quad-rendertexture.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyQuadRenderTexturege extends QuadRenderTexturege {\n    constructor(scene, x, y, width, height, config) {\n        super(scene, x, y, width, height, config);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     super.preUpdate(time, delta);\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Command Executor for Phaser 3\nDESCRIPTION: JavaScript code for creating a command executor instance in Phaser 3, including configuration options for layers, logging, and event sheet management.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/markedeventsheet.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar commandExecutor = scene.plugins.get('rexMarkedEventSheets').addCommandExecutor(scene, {\n    // layers: ['layer0', 'layer1', ...]\n    // layers: [{name, cameraName}, ...]\n\n    // layerDepth: undefined,\n    // rootLayer: undefined,\n\n    log: {\n        delimiters: '[]'\n        enable: true\n    }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar commandExecutor = new CommandExecutor(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Phaser Array\nDESCRIPTION: Method to remove specified items from a Phaser array with optional callback functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/array-addremove.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Utils.Array.Remove(arr, item);\n// Phaser.Utils.Array.Remove(arr, item, callback, context);\n```\n\n----------------------------------------\n\nTITLE: Configuring Shape Types in Matter.js\nDESCRIPTION: Configuration objects for different shape types when using setBody method\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-gameobject.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'rectangle',\n    // width: gameObject.width\n    // height: gameObject.height\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'circle',\n    // radius: (Math.max(gameObject.width, gameObject.height) / 2),\n    // maxSides: 25\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'trapezoid',\n    // slope: 0.5,\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: 'polygon',\n    // radius: (Math.max(gameObject.width, gameObject.height) / 2),\n    // sides: 5,\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Documents with Query\nDESCRIPTION: Count the number of documents that match a specific query in a collection.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nvar amount = collection.count(query);  // {key: {'$gt': value}}\n```\n\n----------------------------------------\n\nTITLE: Calculating Basic Distance in Phaser 3\nDESCRIPTION: Methods to calculate straight-line distance between two points, either using separate coordinates or point objects\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/distance.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar d = Phaser.Math.Distance.Between(x1, y1, x2, y2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar d = Phaser.Math.Distance.BetweenPoints(a, b); // a, b: {x, y}\n```\n\n----------------------------------------\n\nTITLE: Alternative Configuration for List Input in Phaser 3 Tweaker\nDESCRIPTION: An alternative approach to create a dropdown list input using an object configuration. This method explicitly specifies binding target and key, providing options with text labels and corresponding values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-tweaker.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ntweaker.addInput({\n    bindingTarget: object,\n    bindingKey: key,\n    // view: 'list',\n\n    // icon: undefined,\n    // iconFrame: undefined,\n    // iconSize: undefined,\n\n    // title: undefined,\n\n    // orientation: 'x',\n\n    options: [\n        {text: text0, value: value0},\n        {text: text1, value: value1},\n        // ...\n    ],\n    \n    // monitor: false,\n\n    // key: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Text Typing and Page Components\nDESCRIPTION: Initializes text typing and text page components with custom configurations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nvar textTyping = scene.rexUI.add.textTyping(textObject, config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar textPage = scene.rexUI.add.textPage(textObject, config);\n```\n\n----------------------------------------\n\nTITLE: Database Operations and Event Handling\nDESCRIPTION: Examples of database operations like setting data, incrementing values, and handling events.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-itemtable.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntable.setData(key0, value)\n    .then(function() { })\n    .catch(function() { })\n\ntable.on('update', function(data) { })\n\ntable.on('addkey0', function(key0, value) {  });\n```\n\n----------------------------------------\n\nTITLE: Loading ScrollBar Plugin via CDN\nDESCRIPTION: How to load the ScrollBar plugin using the minified file from CDN in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollbar.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin(\"rexuiplugin\", \"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js\", \"rexUI\", \"rexUI\");\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Files in Phaser 3\nDESCRIPTION: Method for loading JSON data files, with an option to only store a specific property from the loaded data.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loader.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.json(key, url);\n// scene.load.json(key, url, dataKey, xhrSettings);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Installs the phaser3-rex-plugins package from npm to use the Tag Text plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Extending AIO-Spinner Class in Phaser3 Rex UI\nDESCRIPTION: Demonstrates creating a custom AIOSpinner class by extending the base component. This allows for adding custom functionality to spinner animations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nclass MySpinner extends RexPlugins.UI.AIOSpinner {\n    constructor(scene, configa) {\n        super(scene, configa);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Instance of Custom Scrollable Panel in Phaser 3\nDESCRIPTION: This snippet demonstrates how to create an instance of a custom scrollable panel class in a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-scrollablepanel.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar panel = new MyPanel(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Starting Parsing with Bracket Parser 2\nDESCRIPTION: Shows how to start parsing text using a Bracket Parser 2 instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nparser.start(text);\n```\n\n----------------------------------------\n\nTITLE: Sending Broadcast Messages\nDESCRIPTION: JavaScript code to send a message to all users in the chat room using the broadcast functionality.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-singleroom.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nroom.broadcast.send(message);\n```\n\n----------------------------------------\n\nTITLE: Handling Game Object Tap Events in Phaser 3 Board Plugin\nDESCRIPTION: Registers an event listener for tap gestures on a game object (chess piece) on the board. The callback receives the tap behavior object (which includes tap count) and the game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nboard.on('gameobjecttap', function(tap, gameObject) {\n    // var tapsCount = tap.tapsCount;\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('board.tap', function(tap) {\n    // var tapsCount = tap.tapsCount;\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Blitter Class in Phaser 3\nDESCRIPTION: Creates a custom Blitter class by extending the Phaser.GameObjects.Blitter class. This allows for adding custom functionality to the Blitter object through inheritance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blitter.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyBlitter extends Phaser.GameObjects.Blitter {\n    constructor(scene, x, y, texture, frame) {\n        super(scene, x, y, texture, frame);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Checkbox Instance\nDESCRIPTION: Creates an instance of a custom checkbox class with position, size, color, and configuration parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar checkbox = new MyCheckbox(scene, x, y, width, height, color, config);\n```\n\n----------------------------------------\n\nTITLE: Loading the Arcade TCRP Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the Arcade TCRP plugin using the minified file in the preload stage and creates a StepRunner instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-step-runner.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexarcadetcrpplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexarcadetcrpplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar stepRunner = scene.plugins.get('rexarcadetcrpplugin').addStepRunner(scene);\n```\n\n----------------------------------------\n\nTITLE: Checking if Point Object is Inside Ellipse in Phaser 3\nDESCRIPTION: Tests whether a point object lies inside an ellipse.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-ellipse.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar isInside = Phaser.Geom.Ellipse.ContainsPoint(ellipse, point);\n```\n\n----------------------------------------\n\nTITLE: Slicing UniqueItemList (JavaScript)\nDESCRIPTION: Shows how to extract a portion of a UniqueItemList into a new list based on start and end indices.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/uniqueitemlist.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar newList = listA.slice(startIndex, endIndex);\n// listA.slice(startIndex, endIndex, listB);\n```\n\n----------------------------------------\n\nTITLE: Checking Rotation Status in Phaser 3 Arcade Physics\nDESCRIPTION: Checks whether a physics body currently allows rotation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-gameobject.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar allowRotation = gameObject.body.allowRotation;\n```\n\n----------------------------------------\n\nTITLE: Getting Alpha Value of Round Rectangle\nDESCRIPTION: Retrieves the alpha value of a round rectangle shape.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = rect.alpha;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom RenderTexture Class in Phaser 3\nDESCRIPTION: Defines a custom class that extends Phaser.GameObjects.RenderTexture with additional functionality, including the constructor that initializes the texture and adds it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rendertexture.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyRenderTexture extends Phaser.GameObjects.RenderTexture {\n    constructor(scene, x, y, width, height) {\n        super(scene, x, y, width, height);\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying LayerManager Instance\nDESCRIPTION: Shows how to properly destroy a LayerManager instance, which also destroys all the layers it contains.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/layermanager.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlayerManager.destroy()\n```\n\n----------------------------------------\n\nTITLE: Loading Mouse Wheel to Up/Down Plugin in Phaser 3\nDESCRIPTION: This snippet shows how to load the plugin in the preload stage of a Phaser 3 scene and add it to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheeltoupdown.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexmousewheeltoupdownplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexmousewheeltoupdownplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar mouseWheelToUpDown = scene.plugins.get('rexmousewheeltoupdownplugin').add(scene);\n```\n\n----------------------------------------\n\nTITLE: Importing Rex UI Plugin from NPM in Phaser 3\nDESCRIPTION: Installation command and configuration required to use the Rex UI Plugin from NPM packages.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-fileselectorbutton.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing Plugin via NPM Configuration\nDESCRIPTION: Shows how to import and configure the plugin using NPM installation and game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-rendertexture.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport ShatterImagePlugin from 'phaser3-rex-plugins/plugins/shatterimage-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexShatterImagePlugin',\n            plugin: ShatterImagePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexShatterRenderTexturege(x, y, width, height, config);\n```\n\n----------------------------------------\n\nTITLE: Loading Touch State Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the Touch State plugin minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/touchstate.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextouchstateplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextouchstateplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Applying Smooth Step Function to Game Object Properties in Phaser3\nDESCRIPTION: Applies a smooth step function to a property of game objects, creating a gradual transition between min and max values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/groupactions.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Actions.SmoothStep(gameObjects, key, min, max, inc));\n```\n\n----------------------------------------\n\nTITLE: Implementing Repeat Loop in Markdown\nDESCRIPTION: Demonstrates how to create a repeat loop structure in the command list using markdown headings.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/logic/eventsheets/command-list.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [Repeat 3]\n\nactions...\n```\n\n----------------------------------------\n\nTITLE: Cloning a Result Set\nDESCRIPTION: Create a copy of a result set using branch to perform additional operations without affecting the original result set.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar resultSet = collection.chain().find({});\nvar resultSetClone = resultSet.branch();\n\n// resultSetClone.find({}).data();\n```\n\n----------------------------------------\n\nTITLE: Creating NinePatch2 Instance with Class Import\nDESCRIPTION: Creates a NinePatch2 instance and adds it to the scene when using the direct class import approach. This manually adds the object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = new NinePatch2(scene, x, y, width, height, key, baseFrame, columns, rows, config);\nscene.add.existing(ninePatch);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rex Board Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the Rex Board Plugin in the Phaser 3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading File Drop Zone Plugin in Phaser 3\nDESCRIPTION: Loads the file drop zone plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/filedropzone.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfiledropzoneplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfiledropzoneplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Disabling Dialog Buttons - JavaScript\nDESCRIPTION: Methods for disabling input on specific buttons. The index parameter can be a number index or a button game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dialog.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.setChoiceEnable(index, false);\ndialog.setActionEnable(index, false);\ndialog.setToolbarEnable(index, false);\ndialog.setLeftToolbarEnable(index, false);\n```\n\n----------------------------------------\n\nTITLE: Installing Glow Filter Plugin via NPM\nDESCRIPTION: Installation command for the Phaser 3 rex plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter2.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Displaying Character HP Information\nDESCRIPTION: Outputs the character's current HP value to display or console. Uses string interpolation with double curly braces to show the variable's value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/json-data/json-data.md#2025-04-21_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nprint\n  text=Sheet: {{CharA.hp}}\n```\n\n----------------------------------------\n\nTITLE: Importing CreateTileTexture Function from Rex Plugins in Phaser 3\nDESCRIPTION: Imports the CreateTileTexture function from the Rex Plugins package for direct use in a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-texture.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CreateTileTexture } from 'phaser3-rex-plugins/plugins/board-components.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Board Components in TypeScript for Phaser 3\nDESCRIPTION: Shows how to import specific board components when using TypeScript with the Rex Board Plugin in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-overview.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Board } from 'phaser3-rex-plugins/plugins/board-components';\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas-Based Round Rectangle in Phaser 3 with Rex UI Plugin\nDESCRIPTION: Adds a round rectangle rendered on a canvas to the scene. Canvas-based rendering allows for more complex visual effects like gradients and custom stroke styles.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overview.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar shape = scene.rexUI.add.roundRectangleCanvas(x, y, width, height, radiusConfig, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm\nDESCRIPTION: Command to install the Rex plugins package from npm, which includes the Rotate plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rotate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Less Than\nDESCRIPTION: Find documents where a property is less than a specified value using the $lt operator.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lokijs.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar docArray = collection.find({key: {'$lt': value}});\n```\n\n----------------------------------------\n\nTITLE: Creating a NinePatch Object with Direct Class Import\nDESCRIPTION: Demonstrates how to create a NinePatch instance when importing the class directly instead of using the plugin system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = new NinePatch(scene, x, y, width, height, key, baseFrame, columns, rows, config);\nscene.add.existing(ninePatch);\n```\n\n----------------------------------------\n\nTITLE: Handling Board Fill Event in Phaser 3 Bejeweled Plugin\nDESCRIPTION: This code demonstrates how to listen for the 'fill' event, which fires when the upper board is being filled. It provides access to the board object and the bejeweled instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-bejeweled.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nbejeweled.on('fill', function(board, bejeweled) {\n\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating NinePatch2 with Full Parameter Specification\nDESCRIPTION: Creates a NinePatch2 instance with all parameters explicitly specified. This provides complete control over the appearance and behavior of the nine-patch image.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch2.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar ninePatch = scene.add.rexNinePatch2(x, y, width, height, key, baseFrame, columns, rows, {\n    // preserveRatio: true,\n    // maxFixedPartScale: 1,\n    // stretchMode: 0,\n    getFrameNameCallback: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Spiral Curve Object\nDESCRIPTION: Creates a new spiral curve object using the loaded plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/curve-spiral.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar spiral = scene.plugins.get('rexspiralcurveplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via NPM Configuration\nDESCRIPTION: Configure the plugin in the game configuration after installing via NPM. Shows import and setup process.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvtohashtable.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport CsvToHashTablePlugin from 'phaser3-rex-plugins/plugins/csvtohashtable-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexCsvToHashTable',\n            plugin: CsvToHashTablePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Low Coin Value Condition (<5)\nDESCRIPTION: Logic branch for when the coin value is less than 5. It logs the condition status and then increases the coin value by 7.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/memory-monitor/memory-monitor.md#2025-04-21_snippet_3\n\nLANGUAGE: pseudocode\nCODE:\n```\nlog\\\n  text=(coin < 5)\n\nsetData\n  coin=#(coin+7)\n```\n\n----------------------------------------\n\nTITLE: Configuring FishEye Effect with Parameters\nDESCRIPTION: Creates a FishEye effect with various configuration options including center position, radius, intensity, and mode.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-fisheye.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexFishEyePipeline').add(gameObject, {\n    // center: {\n    //    x: windowWidth / 2,\n    //    y: windowHeight / 2\n    //}\n    // radius: 0,\n    // intensity: 1,\n    // mode:0,  // 0|1|'asin'|'sin'\n\n    // name: 'rexFishEyePostFx'\n});\n```\n\n----------------------------------------\n\nTITLE: Cross Transition for Any Sprite\nDESCRIPTION: Transitions between images for any sprite without specifying a name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/sprite-commands.md#2025-04-21_snippet_15\n\nLANGUAGE: phaser\nCODE:\n```\nSPRITE.cross\n  name=\n  expression=\n  duration=\n  mode=fade\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Configuring LZString Plugin in Game Config\nDESCRIPTION: Shows how to configure the LZString plugin in the Phaser game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lzstring.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport LZStringPlugin from 'phaser3-rex-plugins/plugins/lzstring-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexLZString',\n            plugin: LZStringPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Task Configuration\nDESCRIPTION: Basic task configuration settings specifying task state and execution mode\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/active/task.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nactive=false\nonce\n```\n\n----------------------------------------\n\nTITLE: Importing Bracket Parser 2 Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to import and configure the Bracket Parser 2 plugin in the main game configuration of a Phaser 3 project.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BracketParserPlugin from 'phaser3-rex-plugins/plugins/bracketparser2-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexBracketParser',\n            plugin: BracketParserPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Defining Attractor Callback Function Returning Force in Phaser 3\nDESCRIPTION: This code defines an attractor callback function that returns a force object to be applied to bodyB. The function takes bodyA (attractor) and bodyB (other object) as parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/matterjs-attractor.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(bodyA, bodyB) {\n    return {x, y}; // Force\n}\n```\n\n----------------------------------------\n\nTITLE: DateTime Math Operations in Luxon\nDESCRIPTION: Shows how to perform mathematical operations on DateTime objects including addition, subtraction, and finding period boundaries.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/luxon.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt1 = dt0.plus({ hours: 3, minutes: 2 });\nvar dt1 = dt0.minus({ days: 7 });\nvar dt1 = dt0.startOf('day');\nvar dt1 = dt0.endOf('hour');\n```\n\n----------------------------------------\n\nTITLE: Getting Corner Radius Object of Round Rectangle\nDESCRIPTION: Retrieves the corner radius object containing detailed information about each corner of a round rectangle.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar cornerRadius = rect.cornerRadius;\n```\n\n----------------------------------------\n\nTITLE: Easing Text-Box Properties with Linear Movement\nDESCRIPTION: Command to animate a Text-box's properties using linear easing. Similar to the 'set' command but specifically for creating smooth transitions between property values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/textbox-commands.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.to\n  x=\n  vpx=\n  y=\n  vpy=\n  alpha=\n  duration=1000\n  ease=Linear\n  repeat=0\n  wait=\n```\n\n----------------------------------------\n\nTITLE: Toggling Press Enable Status in Phaser 3\nDESCRIPTION: Toggles the enabled state of the press input between true and false.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gesture-press.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npress.toggleEnable();\n```\n\n----------------------------------------\n\nTITLE: Loading Hidden Input Text Plugin in Phaser 3 Preload Stage\nDESCRIPTION: Demonstrates how to load the minified version of the Hidden Input Text plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/hiddeninputtext.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexhiddeninputtextplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexhiddeninputtextplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Importing Round Rectangle Class from NPM Package\nDESCRIPTION: Imports the RoundRectangle class from the Phaser 3 Rex plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport RoundRectangle from 'phaser3-rex-plugins/plugins/roundrectangle.js';\n```\n\n----------------------------------------\n\nTITLE: Closing Dropdown Dialog\nDESCRIPTION: Demonstrates how to programmatically close the dropdown dialog.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dropdown.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndropDown.requestClose();\n// dropDown.requestClose();\n```\n\n----------------------------------------\n\nTITLE: Creating Holy Grail Layout with Direct Class Import\nDESCRIPTION: Code for creating and adding a Holy Grail layout instance when directly importing the class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-holygrail.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar holyGrail = new HolyGrail(scene, config);\nscene.add.existing(holyGrail);\n```\n\n----------------------------------------\n\nTITLE: Destroying Choice Dialog Object\nDESCRIPTION: Removes the specified choice dialog instance from the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/choice-dialog-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\nNAME.destroy\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase SDKs and Plugin in HTML\nDESCRIPTION: Demonstrates how to include the necessary Firebase SDK scripts and the Rex Firebase plugin in the HTML file. This setup is required before using any Firebase services in the game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-broadcast.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->\n    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->\n    <script src=\"/__/firebase/7.7.0/firebase-app.js\"></script>\n    <!-- Add Firebase products that you want to use -->\n    <script src=\"/__/firebase/7.7.0/firebase-database.js\"></script>\n\n    <script src=\"https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebase.min.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Custom Video Class Implementation\nDESCRIPTION: Example of creating a custom video class by extending the base Video or VideoCanvas class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/rexvideo.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyVideo extends Video {  // or VideoCanvas\n    constructor(scene, x, y, width, height, config) {\n        super(scene, x, y, width, height, config) {\n        // ...\n        scene.add.existing(this);\n    }\n    // ...\n\n    // preUpdate(time, delta) {\n    //     if (super.preUpdate) {\n    //         super.preUpdate(time, delta)\n    //     }\n    // }\n}\n```\n\n----------------------------------------\n\nTITLE: Print End Statement\nDESCRIPTION: Final print statement to indicate task completion\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/parallel-groups/parallel0.md#2025-04-21_snippet_2\n\nLANGUAGE: pseudocode\nCODE:\n```\nprint\n  text=Task0 end\n```\n\n----------------------------------------\n\nTITLE: Building an Equilateral Triangle in Phaser 3\nDESCRIPTION: Creates an equilateral triangle with equal sides of specified length starting from a point.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = Phaser.Geom.Triangle.BuildEquilateral(x1, y1, length);\n```\n\n----------------------------------------\n\nTITLE: Loading Arcade TCRP Plugin via Minify File in Phaser 3\nDESCRIPTION: Code for loading the Arcade TCRP plugin using the minified file in the preload stage of a Phaser 3 scene and creating a recorder instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-recorder.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexarcadetcrpplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexarcadetcrpplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Setting Triangle Position by Bounds\nDESCRIPTION: Manages triangle position using its bounding box properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntriangle.left = 0;       // triangle.x1, triangle.x2, triangle.x3\ntriangle.top = 0;        // triangle.y1, triangle.y2, triangle.y3\n// triangle.right = 0;   // triangle.x1, triangle.x2, triangle.x3\n// triangle.bottom = 0;  // triangle.y1, triangle.y2, triangle.y3\n```\n\n----------------------------------------\n\nTITLE: Plugin Import Configuration\nDESCRIPTION: Import and configure the plugin in game configuration when using npm package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/effect-properties.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport EffectPropertiesPlugin from 'phaser3-rex-plugins/plugins/effectproperties-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexEffectProperties',\n            plugin: EffectPropertiesPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading XOR Plugin from CDN in Phaser3\nDESCRIPTION: Loads the minified XOR plugin file in the preload stage of a Phaser3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/xor.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexxorplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexxorplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Printing 'After branch' Message in Plaintext\nDESCRIPTION: This snippet prints the text 'After branch' using a simple key-value pair format. It's designed to output a message indicating the execution point is after a branch operation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/branch/4.after.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nprint\n  text=After branch\n```\n\n----------------------------------------\n\nTITLE: Getting Horrifi Effect Instance from Camera\nDESCRIPTION: Retrieves the Horrifi pipeline instance associated with a camera. Returns an array of instances, typically with just one element.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexHorrifiPipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexHorrifiPipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Disabling Tile Collision Methods\nDESCRIPTION: Methods for disabling collision detection on tiles by index, range, and properties\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nmap.setCollision(index, false);\nmap.setCollisionBetween(start, stop, false);\nmap.setCollisionByProperty({key:value}, false);\nmap.setCollisionByProperty({key:[value0, value1]}, false);\nmap.setCollisionFromCollisionGroup(false);\n```\n\n----------------------------------------\n\nTITLE: Loading BuildArcadeObject Plugin in Phaser 3\nDESCRIPTION: This code demonstrates how to load the BuildArcadeObject plugin in the preload stage of a Phaser 3 scene. It uses the minified version of the plugin from a GitHub repository.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/buildarcadeobject.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexbuildarcadeobjectplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexbuildarcadeobjectplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Rex UI Plugin via Minify File in Phaser 3\nDESCRIPTION: Code for loading the Rex UI plugin as a scene plugin using the minified file in the preload stage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-confirmaction.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase Plugin in Phaser 3 Preload\nDESCRIPTION: JavaScript code to load the Firebase plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/firebase-files.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexfirebaseplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexfirebaseplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Specifying Node.js Version Requirements\nDESCRIPTION: Lists supported Node.js versions for the framework\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/plugins/gameobjects/live2d/framework/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* 20.1.0\n* 18.16.0\n* 16.20.0\n```\n\n----------------------------------------\n\nTITLE: Getting Light Size by Diameter in Phaser 3\nDESCRIPTION: Alternative methods for retrieving a light's current size as diameter. Multiple equivalent properties can be used.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/light.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar diameter = light.diameter;\n// var diameter = light.displayWidth;\n// var diameter = light.displayHeight;\n// var diameter = light.width;\n// var diameter = light.height;\n```\n\n----------------------------------------\n\nTITLE: Disabling Audio in Phaser 3\nDESCRIPTION: Configuration object to disable audio completely in a Phaser 3 game by setting noAudio to true.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/audio.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    // ....\n    audio: {\n        noAudio: true\n    }\n    // ....\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Tag Text Class Directly\nDESCRIPTION: Imports the Tag Text class directly from the phaser3-rex-plugins package.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tagtext.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport TagText from 'phaser3-rex-plugins/plugins/tagtext.js';\n```\n\n----------------------------------------\n\nTITLE: Loading Real-Time Timers Plugin in Phaser 3 Scene Preload\nDESCRIPTION: Loads the minified version of the Real-Time Timers plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/realtimetimers.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexrealtimetimersplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexrealtimetimersplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Toggle-Switch Plugin in Phaser 3 Preload Stage\nDESCRIPTION: Loads the toggle-switch plugin minified file in the preload stage of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-toggleswitch.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextoggleswitchplugin', 'https://raw.githubusercontent.com/rexrainbow/    phaser3-rex-notes/master/dist/rextoggleswitchplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Controlling Vignette Effect in Horrifi Pipeline\nDESCRIPTION: Methods to enable, disable, and configure the Vignette effect in the Horrifi pipeline. Includes setter and getter methods for strength and intensity parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-horrifi.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Enable\npipelineInstance.setVignetteEnable();\n// pipelineInstance.setVignetteEnable(true);\n// or\npipelineInstance.vignetteEnable = true;\n\n// Disable\npipelineInstance.setVignetteEnable(false);\n// or\npipelineInstance.vignetteEnable = false;\n\n// Get\nvar vignetteEnable = pipelineInstance.vignetteEnable;\n\n// Set parameters\npipelineInstance.setVignetteStrength(value);\npipelineInstance.setVignetteIntensity(value);\n// or\npipelineInstance.vignetteStrength = value;\npipelineInstance.vignetteIntensity = value;\n\n// Get parameters\nvar vignetteStrength = pipelineInstance.vignetteStrength;\nvar vignetteIntensity = pipelineInstance.vignetteIntensity;\n```\n\n----------------------------------------\n\nTITLE: Rotating a Triangle Around Coordinates in Phaser 3\nDESCRIPTION: Rotates the triangle around specified x and y coordinates by the given angle in radians.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-triangle.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar triangle = Phaser.Geom.Triangle.RotateAroundXY(triangle, x, y, angle);\n```\n\n----------------------------------------\n\nTITLE: HSV Color Wheel Generation\nDESCRIPTION: Create and access HSV color wheel array\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/color.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar colorArray = Phaser.Display.Color.HSVColorWheel(s, v);\nvar color = colorArray[i].color;\n```\n\n----------------------------------------\n\nTITLE: Managing Scene Transitions and Final Sequence\nDESCRIPTION: Handles final scene sequence with logging, wait states, audio effects, character expression changes, background transitions, and UI fading. Demonstrates waiting for time or player input to advance the narrative.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/command-executor/command-executor.md#2025-04-21_snippet_5\n\nLANGUAGE: custom\nCODE:\n```\nlog.memory\n  text=After choice\n\nwait\n  time=3000\n  click\n// Wait until 3s or any touch\n\n// SPRITE.set\n//  tint=0xffffff\n\nCharacterA.unfocus\n\nse.play\n  key=explosion\n  wait\n// Wait until playing se complete\n\nSPRITE.cross\n  expression=dizzy\n\nbgm.cross\n  key=theme1\n\nwait\n  time=200\n\nBackground.cross\n  key=road\n  mode=irisOut\n\nwait\n  time=200\n\n// Ease all SPRITE game objects\nSPRITE.to\n  vpx=-0.3\n// Wait until tween complete\n\nuiLayer.to\n  alpha=0\n// Wait until ui layer fade-out\n\nbgm.stop\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Line Instance\nDESCRIPTION: Instantiates a custom Line class object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-line.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = new MyLine(scene, x, y, x1, y1, x2, y2, strokeColor);\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM for Phaser 3\nDESCRIPTION: Installs the Rex plugins package from npm, which includes the Interception plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/interception.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Creating a Folder UI Object (With Plugin)\nDESCRIPTION: Shows how to create a folder object after loading the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-folder.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar folder = scene.rexUI.add.folder(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Fuzzy Logic Class in Phaser 3 (JavaScript)\nDESCRIPTION: Demonstrates how to import the fuzzy logic class directly and create a fuzzy module object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/fuzzy.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport BuildFuzzyModule from 'phaser3-rex-plugins/plugins/fuzzy.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar fuzzyModule = BuildFuzzyModule(config);\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Class\nDESCRIPTION: Code for importing the Toast class directly and creating a new instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-toast.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Toast } from 'phaser3-rex-plugins/templates/ui/ui-components.js';\nvar toast = new Toast(scene, config);\nscene.add.existing(toast);\n```\n\n----------------------------------------\n\nTITLE: Creating TCRP Player Instance (Plugin Method)\nDESCRIPTION: Shows how to create an instance of the TCRP player after configuring it in the game config.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-player.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar player = scene.plugins.get('rexTCRP').addPlayer(scene, config);\n```\n\n----------------------------------------\n\nTITLE: Deactivation Condition Check\nDESCRIPTION: Condition that triggers deactivation when round counter reaches or exceeds 5\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/active/deactivate.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n($roundCounter) >= 5\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via npm for Phaser 3\nDESCRIPTION: Command to install Rex plugins package using npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/geom-rhombus.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Setting Base Texture for NinePatch with Default Configuration\nDESCRIPTION: Shows how to set just the texture key and base frame for a NinePatch, keeping the existing column and row configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ninepatch.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nninePatch.setBaseTexture(key, baseFrame);\n```\n\n----------------------------------------\n\nTITLE: Getting Circle Stroke Color in Phaser 3\nDESCRIPTION: Retrieves the current stroke color from a circle game object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-circle.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = circle.strokeColor;\n```\n\n----------------------------------------\n\nTITLE: Custom Polygon Instance Creation\nDESCRIPTION: Demonstrates instantiation of a custom polygon class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-polygon.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar polygon = new MyPolygon(scene, x, y, points, fillColor);\n```\n\n----------------------------------------\n\nTITLE: Accessing AwayTime from Imported Plugin in Phaser3\nDESCRIPTION: Retrieves the elapsed away time from the plugin configured in the game configuration. This returns the time in milliseconds since the application was last closed.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/awaytime.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar awayTime = scene.plugins.get('rexAwayTime').awayTime;\n```\n\n----------------------------------------\n\nTITLE: Applying Warp Effect via Imported Plugin\nDESCRIPTION: Code to apply the warp effect to a game object or camera using the imported plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-warp.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexWarpPipeline').add(gameObject, config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexWarpPipeline').add(camera, config);\n```\n\n----------------------------------------\n\nTITLE: Executing Actions in IF Block for Phaser 3\nDESCRIPTION: Defines the actions to be performed when the conditions are met. It sets the 'block' variable to 0 and prints the text 'If b'.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/branch/2.if-b.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Script\n\nset\n  block=0\n\nprint\n  text=If b\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins from NPM\nDESCRIPTION: Command to install the Phaser 3 Rex plugins package from npm.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Start Event in Phaser 3\nDESCRIPTION: Event handler for when dragging of the mini-board begins. Implements logic to pull the mini-board out from the main board to prepare for dragging.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-miniboard.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nminiBoard.on('dragstart', function(pointer, dragX, dragY){\n    /*\n    miniBoard.pullOutFromMainBoard();\n    */\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Loading Step Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the Step plugin minify file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/step.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexstepplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexstepplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Alternative Setting Star Inner Radius in Phaser 3\nDESCRIPTION: Sets the inner radius of a star shape in Phaser 3 using direct property assignment.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nstar.innerRadius = innerRadius;\n```\n\n----------------------------------------\n\nTITLE: Importing MoveTo Plugin via NPM\nDESCRIPTION: NPM installation command and configuration setup for importing the MoveTo plugin into a Phaser3 game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/moveto.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport MoveToPlugin from 'phaser3-rex-plugins/plugins/moveto-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexMoveTo',\n            plugin: MoveToPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Level-up Events in Phaser 3 Level Counter\nDESCRIPTION: Code to listen for and handle level-up events when experience is accumulated, providing information about the level change and experience values.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/levelcounter.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlevelCounter.on('levelup', function(level, fromExp, toExp, levelStartExp, levelEndExp){        \n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Creating Alpha Mask Image Instances with Configuration\nDESCRIPTION: Shows various ways to create an Alpha Mask Image instance with different configuration options for mask settings, including texture key, frame, invert behavior, and scaling.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/alphamaskimage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexAlphaMaskImage(x, y, key, frame, {\n    mask: {\n        key: textureKey,\n        // frame: frameName,\n        // invertAlpha: false,\n        // scale: undefined,\n    }\n   \n    // backgroundColor: undefined,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexAlphaMaskImage(x, y, key, {\n    mask: {\n        key: textureKey,\n        // frame: frameName,\n        // invertAlpha: false,\n        // scale: undefined,\n    }\n   \n    // backgroundColor: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if Current Page is the Last Page\nDESCRIPTION: Returns a boolean indicating whether the current page is the last page in the multi-page text content.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar isLastPage = textBox.isLastPage;\n```\n\n----------------------------------------\n\nTITLE: Importing Level Counter Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Code to import and configure the Level Counter plugin in the game configuration and add a level counter object to the scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/levelcounter.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport LevelCounterPlugin from 'phaser3-rex-plugins/plugins/levelcounter-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexLevelCounter',\n            plugin: LevelCounterPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar levelCounter = scene.plugins.get('rexLevelCounter').add(config);\n```\n\n----------------------------------------\n\nTITLE: Accessing Video Capabilities in Phaser 3\nDESCRIPTION: This snippet shows how to check for support of various video formats in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/device.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar h264Video = scene.sys.game.device.video.h264;  // Can this device play h264 mp4 video files?\nvar hlsVideo = scene.sys.game.device.video.hls;    // Can this device play hls video files?\nvar mp4Video = scene.sys.game.device.video.mp4;    // Can this device play h264 mp4 video files?\nvar m4vVideo = scene.sys.game.device.video.m4v;    // Can this device play m4v (typically mp4) video files?\nvar oggVideo = scene.sys.game.device.video.ogg;    // Can this device play ogg video files?\nvar vp9Video = scene.sys.game.device.video.vp9;    // Can this device play vp9 video files?\nvar webmVideo = scene.sys.game.device.video.webm;  // Can this device play webm video files?\n```\n\n----------------------------------------\n\nTITLE: Handling Page Visibility Events\nDESCRIPTION: Event listeners for page visibility changes, triggered when pages are swapped in or out.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-pages.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\npages.on('pageinvisible', function(pageObject, key, pages) {\n    // ...\n}, scope);\n\npages.on('pagevisible', function(pageObject, key, pages) {\n    // ...\n}, scope);\n```\n\n----------------------------------------\n\nTITLE: Loading HSL Adjust Pipeline Plugin in Phaser 3\nDESCRIPTION: Load the minified plugin file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-hsladjust.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexhsladjustpipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexhsladjustpipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Polygon Alpha Management\nDESCRIPTION: Methods for getting and setting the alpha value of a polygon.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-polygon.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar alpha = polygon.alpha;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npolygon.setAlpha(alpha);\n// polygon.alpha = alpha;\n```\n\n----------------------------------------\n\nTITLE: Starting Animation Scene with Minify Plugin in Phaser 3\nDESCRIPTION: Starts the loading animation scene or monitors the loading status of the main scene using the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/loading-animation-scene.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.plugins.get('rexloadinganimationsceneplugin').startScene(scene, animationSceneKey);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Page Index\nDESCRIPTION: Retrieves the index of the currently displayed page (zero-based).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-textbox.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar pageIndex = textBox.pageIndex;\n```\n\n----------------------------------------\n\nTITLE: Loading SplitPanels Plugin in Phaser 3 Scene\nDESCRIPTION: Loads the SplitPanels plugin as a scene plugin in the preload stage of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-splitpanels.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Getting CRT Effect Instance from Camera\nDESCRIPTION: Retrieves the CRT pipeline instance applied to a camera, either as a single instance or as an array of instances if multiple are present.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexCrtPipeline').get(camera)[0];\n// var pipelineInstances = scene.plugins.get('rexCrtPipeline').get(camera);\n```\n\n----------------------------------------\n\nTITLE: Creating a Level Counter Instance in Phaser 3\nDESCRIPTION: Example of creating a level counter instance with configuration options including a level table function or array, maximum level setting, and initial experience value.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/levelcounter.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar levelCounter = scene.plugins.get('rexLevelCounter').add({\n    table: function(level) { return level * 100; },\n    // table: [0, 100, 200, 300,],\n    \n    // maxLevel: -1,\n    \n    // exp: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Repeat Image After Plugin Configuration\nDESCRIPTION: Code for creating a repeat image object after configuring the plugin in game configuration.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/repeatimage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexRepeatImage(x, y, width, height, key, frame);\n```\n\n----------------------------------------\n\nTITLE: Creating ImageBox Instance\nDESCRIPTION: Example showing how to create an ImageBox instance with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/imagebox.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexImageBox(x, y, texture, frame, {\n    // scaleUp: false,\n    // width: undefined,\n    // height: undefined,\n    // background: undefined,\n    // image: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Behavior with Imported Plugin\nDESCRIPTION: Code showing how to add translation behavior to a text game object using the imported plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/texttranslation.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar translation = scene.plugins.get('rexTextTranslation').add(textGameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Text Content Manipulation\nDESCRIPTION: Methods for updating the text content of the bitmap text object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/dynamicbitmaptext.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntxt.setText('...');\n\n// or\n\ntxt.text = '...';\n```\n\n----------------------------------------\n\nTITLE: Loading CRT Pipeline Plugin via Minify File in Phaser 3\nDESCRIPTION: Loads the CRT pipeline plugin using the minified file in the preload stage of a Phaser 3 scene. This allows the effect to be applied to game objects or cameras.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-crt.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcrtpipelineplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcrtpipelineplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Mask from Checkbox\nDESCRIPTION: Creates a geometry mask from the checkbox shape, which can be used to mask other game objects.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-checkbox.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = checkbox.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Setting Arc Direction in Phaser 3\nDESCRIPTION: Sets the drawing direction for an Arc game object by modifying the anticlockwise property (true for anticlockwise, false for clockwise).\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-arc.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\narc.anticlockwise = anticlockwise;\n```\n\n----------------------------------------\n\nTITLE: Creating a Set instance in Phaser 3\nDESCRIPTION: Demonstrates how to create a new Set instance in Phaser 3, either empty or initialized with elements.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/structs-set.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar set = new Phaser.Structs.Set();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar set = new Phaser.Structs.Set(elements);\n```\n\n----------------------------------------\n\nTITLE: Loading Image Input Label Plugin in Preload Stage\nDESCRIPTION: Code snippet for loading the Image Input Label plugin (minified version) in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-imageinputlabel.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data into Hash Table\nDESCRIPTION: Load and convert CSV string data into the hash table with optional configuration for delimiter and value conversion.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/csvtohashtable.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntable.loadCSV(csvString, {\n    // delimiter: ',',\n    // convert: true\n    // convertScope: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Rex Plugins via NPM\nDESCRIPTION: NPM command to install the required Rex plugins package\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-swirl.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\n----------------------------------------\n\nTITLE: Importing Rex Firebase Plugin via NPM\nDESCRIPTION: JavaScript code to import the Rex Firebase plugin when using the NPM module approach and create a new instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/standalone-docs/docs/firebase-files.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport RexFirebase from 'phaser3-rex-plugins/plugins/firebase.js';    \nvar rexFire = new RexFirebase();\n```\n\n----------------------------------------\n\nTITLE: Importing Ship Class Directly\nDESCRIPTION: Imports the Ship class directly from the npm package for use in your game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ship.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Ship from 'phaser3-rex-plugins/plugins/ship.js';\n```\n\n----------------------------------------\n\nTITLE: Creating a Geometry Mask from Custom Spinner\nDESCRIPTION: Creates a geometry mask from the custom spinner, which can be used to mask other game objects. The mask will follow the spinner's shape and animation.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-spinner.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar mask = customSpinner.createGeometryMask();\n```\n\n----------------------------------------\n\nTITLE: Getting Elements from Sizer in Phaser 3\nDESCRIPTION: Demonstrates how to retrieve elements from a sizer, including all children or specific elements by name.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-sizer.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar items = sizer.getElement('items');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = sizer.getElement('#' + name);\n// var gameObject = sizer.getElement('#' + name, recursive);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar gameObject = sizer.getByName(name);\n// var gameObject = sizer.getByName(name, recursive);\n```\n\n----------------------------------------\n\nTITLE: Setting Size via Direct Properties of Round Rectangle\nDESCRIPTION: Sets the width and height of a round rectangle by directly assigning to its properties.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-roundrectangle.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nrect.width = width;\nrect.height = height;\n```\n\n----------------------------------------\n\nTITLE: Accessing Cursor Key States in Mouse Wheel to Up/Down Plugin\nDESCRIPTION: These snippets show how to access the up and down cursor key states using the Mouse Wheel to Up/Down plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/mousewheeltoupdown.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar cursorKeys = mouseWheelToUpDown.createCursorKeys();\n\nvar upKeyDown = cursorKeys.up.isDown;\nvar downKeyDown = cursorKeys.down.isDown;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar upKeyDown = mouseWheelToUpDown.up;\nvar downKeyDown = mouseWheelToUpDown.down;\nvar noKeyDown = mouseWheelToUpDown.noKey;\n```\n\n----------------------------------------\n\nTITLE: Applying Glow Effect to a Game Object using Imported Plugin\nDESCRIPTION: Applies the glow effect to a Phaser 3 game object using the plugin imported and configured globally.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-glowfilter.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipelineInstance = scene.plugins.get('rexGlowFilterPipeline').add(gameObject, config);\n```\n\n----------------------------------------\n\nTITLE: Importing Board Match Plugin via NPM\nDESCRIPTION: Demonstrates how to install and import the Board Match plugin from npm, configure it in a Phaser 3 game, and add a match object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-match.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        scene: [{\n            key: 'rexBoard',\n            plugin: BoardPlugin,\n            mapping: 'rexBoard'\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar match = scene.rexBoard.add.match(config);\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of a Custom SkewImage Class\nDESCRIPTION: Instantiates a custom skewable image class with the specified parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/skew-image.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = new MySkewImage(scene, x, y, texture, frame);\n```\n\n----------------------------------------\n\nTITLE: Initializing Dialog Text Box in Phaser 3\nDESCRIPTION: Creates a text box game object with specific viewport dimensions and positioning. Sets the width to 60% of viewport width, height to 20% of viewport height, and positions it at 99% of viewport height.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/mds/fast-typing.md#2025-04-21_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\nTEXTBOX\n  id=Dialog\n  vpw=0.6\n  vph=0.2\n  vpy=0.99\n```\n\n----------------------------------------\n\nTITLE: Using RandomPlace Class Directly in Phaser 3\nDESCRIPTION: Directly uses the imported RandomPlace class to place game objects randomly without overlapping.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/randomplace.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nRandomPlace(gameObjects, config);\n```\n\n----------------------------------------\n\nTITLE: Fade Animations Implementation\nDESCRIPTION: Fade in/out animations with configurable duration and alpha values. Includes destroy option and promise-based implementations.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-basesizer.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.fadeIn(duration);\n\nsizer.fadeOutDestroy(duration);\n\nsizer.fadeOut(duration);\n```\n\n----------------------------------------\n\nTITLE: Removing Children from Sizer in JavaScript\nDESCRIPTION: Methods for removing children from a Sizer component. Includes options for removing single children, all children, and removing with destruction.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-overlapsizer.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.remove(child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.remove(key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.remove(child, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.remove(key, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.removeAll();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.removeAll(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.clear();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.clear(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsizer.removeFromParentSizer();\n```\n\n----------------------------------------\n\nTITLE: Loading Grid Cut Image Plugin via Minify File in Phaser 3\nDESCRIPTION: Demonstrates how to load the Grid Cut Image plugin using the minified file in the preload stage of a Phaser scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/gridcutimage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexgridcutimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexgridcutimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Map Orientation Type\nDESCRIPTION: Gets the map orientation type which can be orthogonal, isometric, or hexagonal.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tiledmapdata.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar mapType = mapData.orientation;\n```\n\n----------------------------------------\n\nTITLE: Configuring TCRP Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports and configures the TCRP plugin in the Phaser 3 game configuration. This method is suitable for projects using a module bundler.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-recoder.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport TCRPPlugin from 'phaser3-rex-plugins/plugins/tcrp-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTCRP',\n            plugin: TCRPPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Youtube Player Plugin via Minified File in Phaser 3\nDESCRIPTION: Code to load the Youtube Player plugin minified file in the preload stage of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/youtubeplayer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexyoutubeplayerplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexyoutubeplayerplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Accessing Browser Information in Phaser 3\nDESCRIPTION: This snippet shows how to access browser-specific information in Phaser 3, including browser type and version.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/device.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.sys.game.device.browser.chrome       // Is running in Chrome?\nscene.sys.game.device.browser.edge         // Is running in Microsoft Edge browser?\nscene.sys.game.device.browser.firefox      // Is running in Firefox?\nscene.sys.game.device.browser.ie           // Is running in Internet Explorer 11 or less (not Edge)?\nscene.sys.game.device.browser.mobileSafari // Is running in Mobile Safari?\nscene.sys.game.device.browser.opera        // Is running in Opera?\nscene.sys.game.device.browser.safari       // Is running in Safari?\nscene.sys.game.device.browser.silk         // Is running in the Silk browser (as used on the Amazon Kindle)?\nscene.sys.game.device.browser.trident       // Is running a Trident version of Internet Explorer (IE11+)?\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar version = scene.sys.game.device.browser.chromeVersion;\nvar version = scene.sys.game.device.browser.firefoxVersion;\nvar version = scene.sys.game.device.browser.ieVersion;\nvar version = scene.sys.game.device.browser.safariVersion;\nvar version = scene.sys.game.device.browser.tridentVersion;\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to Expression Context\nDESCRIPTION: Demonstrates adding custom methods directly to the context object used when executing expressions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/expression-parser.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar context = {\n    a: 10,\n    b: 20,\n    randomInt(a, b) {  // Custom method\n        return Math.floor(Math.random()*(b-a)+a);\n    }\n}\nvar value = parser.exec('randomInt(a, b)', context);\n```\n\n----------------------------------------\n\nTITLE: Creating Shake Effect for Text-Box\nDESCRIPTION: Command to apply a shake animation to a Text-box with configurable duration, magnitude, and wait behavior. Useful for emphasizing dialogue or indicating character emotions.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/templates/mdscenario/readme/textbox-commands.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME.shake\n  duration=\n  magnitude=\n  wait=true\n```\n\n----------------------------------------\n\nTITLE: Loading TCRP Plugin via Minify File in Phaser 3\nDESCRIPTION: Instructions for loading the TCRP plugin using the minified file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tcrp-player.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rextcrpplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rextcrpplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Setting Star Fill Style in Phaser 3\nDESCRIPTION: Sets the fill color and alpha transparency of a star shape in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-star.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstar.setFillStyle(color, alpha);\n```\n\n----------------------------------------\n\nTITLE: Loading Video in Phaser 3\nDESCRIPTION: Loads a video file using Phaser's loader system. The video can be referenced later by its key.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/video.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.video(key, url, noAudio);\n```\n\n----------------------------------------\n\nTITLE: Importing the Arcade TCRP Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Imports the Arcade TCRP plugin from npm package and configures it in the game configuration, then creates a StepRunner instance.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/arcade-tcrp-step-runner.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i phaser3-rex-plugins\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TCRPPlugin from 'phaser3-rex-plugins/plugins/arcadetcrp-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexTCRP',\n            plugin: TCRPPlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar stepRunner = scene.plugins.get('rexTCRP').addStepRunner(scene);\n```\n\n----------------------------------------\n\nTITLE: Counting Active Group Members in Phaser 3\nDESCRIPTION: Returns the number of active group members, useful for monitoring object pool usage.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/group.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nvar activeCount = group.countActive();\n```\n\n----------------------------------------\n\nTITLE: Command Format Examples in Run Commands Plugin\nDESCRIPTION: Examples showing the format of commands for the Run Commands plugin, including function name or callback with parameters.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/runcommands.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n[fnName, param0, param1, ...]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[callback, param0, param1, ...]\n```\n\n----------------------------------------\n\nTITLE: Loading ContainerLite Plugin in Phaser 3\nDESCRIPTION: Demonstrates how to load the ContainerLite plugin in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/containerlite.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexcontainerliteplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexcontainerliteplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Bracket Parser Plugin in Phaser 3 Scene\nDESCRIPTION: Loads the minified Bracket Parser plugin file in the preload stage of a Phaser 3 scene.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexbracketparserplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexbracketparserplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: WebGL and Canvas Blend Modes\nDESCRIPTION: Core blend modes supported in both WebGL and Canvas renderers. Includes NORMAL, ADD, MULTIPLY, SCREEN, and ERASE modes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/blendmode.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.BlendModes.NORMAL    // 0\nPhaser.BlendModes.ADD       // 1\nPhaser.BlendModes.MULTIPLY   // 2\nPhaser.BlendModes.SCREEN    // 3\nPhaser.BlendModes.ERASE     // 17\n```\n\n----------------------------------------\n\nTITLE: Loading Tilemap Data in Phaser 3\nDESCRIPTION: Methods for loading tilemap data in JSON or CSV format using Phaser's loader system.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/tilemap.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.tilemapTiledJSON(key, url);   // JSON\nscene.load.tilemapCSV(key, url);         // CSV\n```\n\n----------------------------------------\n\nTITLE: Configuring Life-time Plugin in Phaser 3 Game Configuration\nDESCRIPTION: Demonstrates how to include the Life-time plugin in the Phaser 3 game configuration for global use.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lifetime.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport LifeTimePlugin from 'phaser3-rex-plugins/plugins/lifetime-plugin.js';\nvar config = {\n    // ...\n    plugins: {\n        global: [{\n            key: 'rexLifeTime',\n            plugin: LifeTimePlugin,\n            start: true\n        },\n        // ...\n        ]\n    }\n    // ...\n};\nvar game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Loading the UI Plugin via Scene Plugin in Phaser 3\nDESCRIPTION: Code to load the Rex UI plugin as a scene plugin during the preload stage of a Phaser 3 game.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-nameinputdialog.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n```\n\n----------------------------------------\n\nTITLE: Removing Texture from Cache in Phaser 3\nDESCRIPTION: Removes a texture from the texture cache using its key. This frees up memory but makes the texture unavailable for further use unless reloaded.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/textures.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.textures.remove(key);\n```\n\n----------------------------------------\n\nTITLE: Programmatically Triggering Button Over Event in DropDownList\nDESCRIPTION: Manually triggers the over event for a button at a specific index.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/ui-dropdownlist.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ndropDownList.emitButtonOver(index);\n```\n\n----------------------------------------\n\nTITLE: Loading ShatterImage Plugin in Phaser 3 Scene\nDESCRIPTION: Shows how to load the ShatterImage plugin minified file in the preload stage of a Phaser scene and create a shattered image object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexshatterimageplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexshatterimageplugin.min.js', true);\n```\n\n----------------------------------------\n\nTITLE: Checking and Locking Orientation in Phaser 3\nDESCRIPTION: Shows how to check the current orientation and lock the orientation to either landscape or portrait mode in Phaser 3.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/scalemanager.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar isPortrait = scene.scale.isPortrait;\nvar isLandscape = scene.scale.isLandscape;\nscene.scale.lockOrientation(orientation);\n```\n\n----------------------------------------\n\nTITLE: Creating Bracket Parser 2 Instance Directly\nDESCRIPTION: Shows how to create a Bracket Parser 2 instance directly after importing the class.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bracketparser2.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = new BracketParser(config);\n```\n\n----------------------------------------\n\nTITLE: Loading Question Manager Plugin in Phaser 3 Scene\nDESCRIPTION: Demonstrates how to load the question manager plugin in the preload stage of a Phaser 3 scene and add a question manager object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/quest.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.load.plugin('rexquestplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexquestplugin.min.js', true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar questionManager = scene.plugins.get('rexquestplugin').add(config);\n```\n\n----------------------------------------\n\nTITLE: Alternative ShatterImage Creation Syntax\nDESCRIPTION: Shows an alternative syntax for creating a ShatterImage object with configuration options.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shatter-image.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = scene.add.rexShatterImage({\n    // x: 0,\n    // y: 0,\n    key,\n    // frame: null,\n\n    // ringRadiusList: [1 / 27, 3 / 27, 9 / 27],\n    // ringRadiusList: function(width, height) {\n    //    return [1 / 27, 3 / 27, 9 / 27];\n    // },\n\n    // samplesPerRing: 12,\n    // variation: 0.25,\n    \n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Cover Fill Style\nDESCRIPTION: Demonstrates how to clear the fill style of a Cover object.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shape-cover.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncover.setFillStyle();\n```\n\n----------------------------------------\n\nTITLE: Handling Life-time Completion Event\nDESCRIPTION: Shows how to listen for the 'complete' event when the Life-time countdown finishes.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/lifetime.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlifeTime.on('complete', function(gameObject, lifeTime){});\n// lifeTime.once('complete', function(gameObject, lifeTime){});\n```\n\n----------------------------------------\n\nTITLE: Script Execution Block\nDESCRIPTION: Sets block value to 0 and prints 'Else' text\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/assets/markedeventsheet/branch/3.else.md#2025-04-21_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nset\n  block=0\n\nprint\n  text=Else\n```\n\n----------------------------------------\n\nTITLE: Creating Image from Bitmap Font Texture\nDESCRIPTION: Create an image using a character from the loaded bitmap font texture.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/bitmaptext.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.add.image(x, y, key, char);\n```\n\n----------------------------------------\n\nTITLE: Creating Hexagon Grid Instance using Constructor\nDESCRIPTION: Alternative method to create a hexagon grid object by directly using the HexagonGrid constructor. Requires importing the class from the plugin.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/board-hexagongrid.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// import { HexagonGrid } from 'phaser3-rex-plugins/plugins/board-components.js';\nvar grid = new HexagonGrid(config);\n```\n\n----------------------------------------\n\nTITLE: Getting Progress Value in Phaser 3 Dissolve Effect\nDESCRIPTION: Retrieves the current progress value of the dissolve effect transition. The progress value ranges from 0 to 1, representing the completion percentage of the transition.\nSOURCE: https://github.com/rexrainbow/phaser3-rex-notes/blob/master/docs/docs/shader-dissolve.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar progress = pipelineInstance.progress;\n```"
  }
]