[
  {
    "owner": "jetify-com",
    "repo": "devbox",
    "content": "TITLE: Disabled Python Plugin Configuration\nDESCRIPTION: Configuration showing how to disable the Python plugin in Devbox.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/python.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"python\": {\n            \"version\": \"3.10\",\n            \"disable_plugin\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox via Curl\nDESCRIPTION: Command to download and install the latest version of Devbox using a curl script\nSOURCE: https://github.com/jetify-com/devbox/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.jetify.com/devbox | bash\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox on Linux using curl\nDESCRIPTION: This command downloads and runs the Devbox installation script for Linux. Must be run as a non-root user. Devbox will automatically install the Nix Package Manager if not detected.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/installing_devbox.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.jetify.com/devbox | bash\n```\n\n----------------------------------------\n\nTITLE: Defining Basic devbox.json Structure in JSON\nDESCRIPTION: Shows the basic structure of a devbox.json file, including sections for packages, environment variables, shell configuration, and includes.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [] | {},\n    \"env\": {},\n    \"shell\": {\n        \"init_hook\": \"...\",\n        \"scripts\": {}\n    },\n    \"include\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL and glibcLocales in Devbox JSON Configuration\nDESCRIPTION: JSON configuration for installing the latest version of PostgreSQL and glibcLocales in a Devbox environment. glibcLocales is added for specific Linux platforms.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/postgres.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": {\n    \"postgresql\": \"latest\",\n    \"glibcLocales\": {\n      \"version\":   \"latest\",\n      \"platforms\": [\"x86_64-linux\", \"aarch64-linux\"]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Devbox Badge to README (Markdown)\nDESCRIPTION: Markdown code to add a Devbox badge to a project's README file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/quickstart.mdx#2025-04-14_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[![Built with Devbox](https://www.jetify.com/img/devbox/shield_galaxy.svg)](https://www.jetify.com/devbox/docs/contributor-quickstart/)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[![Built with Devbox](https://www.jetify.com/img/devbox/shield_moon.svg)](https://www.jetify.com/devbox/docs/contributor-quickstart/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Packages as a Map in JSON\nDESCRIPTION: Shows how to configure packages using the map structure in devbox.json, including version specification and platform-specific options.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"go\" : \"latest\",\n        \"golangci-lint\": \"latest\",\n        \"glibcLocales\": {\n            \"version\": \"latest\",\n            \"platforms\": [\"x86_64-linux, aarch64-linux\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in JSON\nDESCRIPTION: Shows how to set environment variables in the devbox.json file using the env field.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"env\": {\n        \"FOO\": \"bar\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Packages to Devbox Project\nDESCRIPTION: Commands to add packages to a Devbox project. Examples include adding the latest version of RipGrep and a specific version of Python.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/quickstart.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add ripgrep\n```\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add python@3.10\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Project\nDESCRIPTION: Command to initialize a new Devbox project, creating a devbox.json file in the current directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/quickstart.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox init\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from .env File in JSON\nDESCRIPTION: Demonstrates how to load environment variables from a .env file using the env_from field in devbox.json.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"env_from\": \"path/to/.env\"\n}\n```\n\n----------------------------------------\n\nTITLE: Devbox Package Configuration Example\nDESCRIPTION: Sample devbox.json configuration file showing how to specify required packages for a development environment\nSOURCE: https://github.com/jetify-com/devbox/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"python@3.10\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Command Scripts in JSON\nDESCRIPTION: Demonstrates how to define multi-command scripts in the devbox.json file for more complex operations.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shell\": {\n        \"scripts\": {\n            \"print_twice\": [\n                \"echo \\\"Hello Once!\\\"\",\n                \"echo \\\"Hello Twice!\\\"\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Devbox Package Installation\nDESCRIPTION: Command syntax for installing packages using devbox with optional flags for configuration path and output control. The command creates a shell, installs specified packages, then exits automatically.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_install.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox install [flags]\n```\n\n----------------------------------------\n\nTITLE: Devbox Run Command Syntax\nDESCRIPTION: Shows the basic syntax structure for the devbox run command with script or command arguments and optional flags\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_run.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  devbox run <script | command> [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Devbox Plugin Structure in JSON\nDESCRIPTION: This snippet outlines the JSON schema for defining a Devbox plugin. It includes fields for name, version, description, environment variables, file creation, and initialization hooks.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/plugins/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"\",\n  \"version\": \"\",\n  \"description\": \"\",\n  \"env\": {\n    \"<key>\": \"<value>\"\n  },\n  \"create_files\": {\n    \"<destination>\": \"<source>\"\n  },\n  \"init_hook\": [\n    \"<bash commands>\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Devbox Usage Commands\nDESCRIPTION: Common commands for initializing Devbox, adding packages, and managing the development shell\nSOURCE: https://github.com/jetify-com/devbox/blob/main/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox init\n```\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add python@3.10\n```\n\nLANGUAGE: bash\nCODE:\n```\ndevbox shell\n```\n\nLANGUAGE: bash\nCODE:\n```\npython --version\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit config --get user.name\n```\n\nLANGUAGE: bash\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from a File\nDESCRIPTION: This example shows how to load environment variables from a file using the '--env-file' flag with devbox run. The command loads variables from a .env.devbox file in the current directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/scripts.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run --env-file .env.devbox echo $MY_VAR\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies in requirements.txt\nDESCRIPTION: This requirements.txt file specifies two Python package dependencies: emoji library version 2.1.0 and pytest for testing. These packages will be installed when setting up the development environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/python/pip/requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nemoji==2.1.0\npytest\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies in requirements.txt\nDESCRIPTION: A requirements.txt file that specifies two Python package dependencies: temporalio in beta version 0.1b4 and cython. These packages would be installed using pip install -r requirements.txt.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/cloud_development/temporal/requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntemporalio==0.1b4\ncython\n```\n\n----------------------------------------\n\nTITLE: Using Installed Packages in Devbox Shell\nDESCRIPTION: Examples of using installed packages (Python and RipGrep) within the Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/quickstart.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python --version\nPython 3.10.0\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ rg --version\nripgrep 13.0.0\n-SIMD -AVX (compiled)\n```\n\n----------------------------------------\n\nTITLE: Running Named Scripts with devbox run\nDESCRIPTION: This example demonstrates running predefined scripts using the 'devbox run' command. When the command is executed, it installs Nix packages, starts a devbox shell, runs the init_hook, and then executes the specified script.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/scripts.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ devbox run echo_once\nInstalling nix packages. This may take a while... done.\nStarting a devbox shell...\nHello\nWorld\n\n$ devbox run echo_twice\nInstalling nix packages. This may take a while... done.\nStarting a devbox shell...\nHello\nWorld\nAgain\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox on WSL2 using curl\nDESCRIPTION: This command downloads and runs the Devbox installation script for Windows Subsystem for Linux 2. Must be run as a non-root user. Devbox will automatically install Nix in single-user mode if needed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/installing_devbox.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.jetify.com/devbox | bash\n```\n\n----------------------------------------\n\nTITLE: Executing Test Commands with Devbox\nDESCRIPTION: A series of test commands that verify devbox's script execution capabilities. Each command tests a different aspect of devbox's functionality, including running single-line scripts, multi-line scripts, init hooks, and using installed packages.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/script.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# A single-line script should execute\nexec devbox run single_line\nstdout 'single line'\n\n# A multi-line script should execute\nexec devbox run multi_line\nstdout 'second line'\nstdout 'first line'\n\n# Ensure init hook is being run\nexec devbox run hook_runs\nstdout 'hook'\n\n# Use a package installed by devbox through a script\nexec devbox run hello_with_script\nstdout 'with script'\n\n# Use a package installed by devbox directly\nexec devbox run -- hello -g directly\nstdout 'directly'\n\n# TBD: Bad init hook should result in non-zero exit code\n#exec devbox --config bad_init run test\n#! stdout 'test'\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Devbox using Nix Flake\nDESCRIPTION: Command to install the latest version of Devbox directly from the GitHub repository using Nix Flakes. This provides access to the most recent releases as soon as they are published.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/installing_devbox.mdx#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnix profile install github:jetify-com/devbox/latest\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox on MacOS using curl\nDESCRIPTION: This command downloads and runs the Devbox installation script for MacOS. Devbox will automatically install the Nix Package Manager in multi-user mode if not detected.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/installing_devbox.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.jetify.com/devbox | bash\n```\n\n----------------------------------------\n\nTITLE: Adding Packages with Devbox CLI in Bash\nDESCRIPTION: Examples of using the 'devbox add' command to add packages to a devbox environment. Demonstrates adding a single package, specifying platforms, excluding platforms, and installing specific package outputs.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_add.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add the latest version of the `ripgrep` package\ndevbox add ripgrep\n\n# Install glibcLocales only on x86_64-linux and aarch64-linux\ndevbox add glibcLocales --platform x86_64-linux,aarch64-linux\n\n# Exclude busybox from installation on macOS\ndevbox add busybox --exclude-platform aarch64-darwin,x86_64-darwin\n\n# Install non-default outputs for a package, such as the promtool CLI\ndevbox add prometheus --outputs=out,cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Packages in JSON\nDESCRIPTION: Shows how to include or exclude packages for specific platforms using the platforms and excluded_platforms fields in devbox.json.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        // Only install busybox on linux\n        \"busybox\": {\n            \"version\": \"latest\",\n            \"platforms\": [\"x86_64-linux\", \"aarch64-linux\"]\n        },\n        // Exclude UTM on Linux\n        \"utm\": {\n            \"version\": \"latest\",\n            \"excluded_platforms\": [\"x86_64-linux\", \"aarch64-linux\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox Environment for GPU Support\nDESCRIPTION: Devbox configuration JSON that specifies required packages for TensorFlow GPU support, including the latest Python, CUDA toolkit, and cuDNN libraries. It also sets various PIP environment variables to control installation behavior.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_cuda.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"python\":                   \"latest\",\n    \"cudaPackages.cudatoolkit\": \"latest\",\n    \"cudaPackages.cuda_cudart\": {\"version\": \"latest\", \"outputs\": [\"lib\"]},\n    \"cudaPackages.cudnn\":       {\"version\": \"latest\", \"outputs\": [\"lib\"]},\n    \"cudaPackages.libcublas\":   {\"version\": \"latest\", \"outputs\": [\"lib\"]}\n  },\n  \"env\": {\n    \"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\",\n    \"PIP_NO_CACHE_DIR\":              \"1\",\n    \"PIP_NO_INPUT\":                  \"1\",\n    \"PIP_NO_PYTHON_VERSION_WARNING\": \"1\",\n    \"PIP_ONLY_BINARY\":               \"tf_nightly\",\n    \"PIP_PROGRESS_BAR\":              \"off\",\n    \"PIP_REQUIRE_VIRTUALENV\":        \"1\",\n    \"PIP_ROOT_USER_ACTION\":          \"ignore\",\n    \"TF_CPP_MIN_LOG_LEVEL\":          \"0\"\n  },\n  \"shell\": {\n    \"scripts\": {\n      \"venv\": \". $VENV_DIR/bin/activate && \\\"$@\\\"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox Environment for Python and PostgreSQL\nDESCRIPTION: This JSON configuration file specifies the Python and PostgreSQL versions, sets environment variables for pip, and defines a shell script for activating a virtual environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_old_glibc.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"python\":     \"3.7\",\n    \"postgresql\": \"15.5\"\n  },\n  \"env\": {\n    \"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\",\n    \"PIP_NO_INPUT\":                  \"1\",\n    \"PIP_NO_PYTHON_VERSION_WARNING\": \"1\",\n    \"PIP_PROGRESS_BAR\":              \"off\",\n    \"PIP_REQUIRE_VIRTUALENV\":        \"1\",\n    \"PIP_ROOT_USER_ACTION\":          \"ignore\"\n  },\n  \"shell\": {\n    \"scripts\": {\n      \"venv\": \". $VENV_DIR/bin/activate && \\\"$@\\\"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Devbox Command Usage\nDESCRIPTION: The main devbox command syntax showing basic usage with optional flags. Supports quiet mode and help options.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Haskell and Stack Packages to Devbox Configuration\nDESCRIPTION: This JSON snippet shows the configuration for adding Haskell-related packages to a Devbox project. It includes Stack, Cabal, Zlib, and Hpack at their latest versions, which are essential for Haskell development using the Stack framework.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/haskell.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"stack@latest\",\n    \"cabal-install@latest\",\n    \"zlib@latest\",\n    \"hpack@latest\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Service Status Display\nDESCRIPTION: Example output showing the status of running services managed by process-compose, including their names, status, and exit codes.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/services.md#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nServices running in process-compose:\nNAME              STATUS          EXIT CODE\ndjango            Running         0\npostgresql        Launched        0\n```\n\n----------------------------------------\n\nTITLE: Using Devbox Services Command in Bash\nDESCRIPTION: This command allows interaction with Devbox services through process-compose. It supports operations like listing, restarting, starting, and stopping services. The command can be used with various flags to customize its behavior.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_services.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services <ls|restart|start|stop> [flags]\n```\n\n----------------------------------------\n\nTITLE: Devbox JSON Configuration\nDESCRIPTION: Example of a devbox.json file content after adding packages to the project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/quickstart.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"ripgrep@latest\",\n        \"python@3.10\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Devbox Init Command in Bash\nDESCRIPTION: Command syntax for initializing a directory as a devbox project. This creates an empty devbox.json in the specified directory or current directory if none is provided. After initialization, you can add packages using 'devbox add'.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_init.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox init [<dir>] [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding PHP Extensions to Devbox Configuration\nDESCRIPTION: This example illustrates how to add PHP extensions, specifically the 'ds' extension, to a Devbox project configuration. It shows the inclusion of PHP, Composer, and the extension in the packages list.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/php/latest/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"php@latest\",\n        \"php83Packages.composer\",\n        \"php83Extensions.ds\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Elixir Package in Devbox JSON Configuration\nDESCRIPTION: Basic configuration for adding Elixir to a Devbox project's package list.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/elixir.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"elixir@latest\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding Bun to Devbox Project\nDESCRIPTION: Command to add the latest version of Bun to a Devbox project. This installs the Bun runtime and package manager.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/bun/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add bun@latest\n```\n\n----------------------------------------\n\nTITLE: Rust Project Configuration Example in Devbox\nDESCRIPTION: Example configuration for a Rust project showing package dependencies, environment variables, and shell scripts setup. Includes initialization hooks and common development commands.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"rustup@latest\",\n        \"libiconv@latest\"\n    ],\n    \"env\": {\n        \"PROJECT_DIR\": \"$PWD\"\n    },\n    \"shell\": {\n        \"init_hook\": [\n            \". conf/set-env.sh\",\n            \"rustup default stable\",\n            \"cargo fetch\"\n        ],\n        \"scripts\": {\n            \"build-docs\": \"cargo doc\",\n            \"start\": \"cargo run\",\n            \"run_test\": [\n                \"cargo test -- --show-output\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Devbox Project with Template in Bash\nDESCRIPTION: Command syntax for creating a new devbox project directory with an optional template. This creates an empty devbox.json file which can be populated with packages using 'devbox add' afterward.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_create.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox create [dir] --template <template> [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Package Options Schema in JavaScript\nDESCRIPTION: Outlines the schema for specifying package options when using the map structure for packages in devbox.json.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"packages\": {\n        // If only a version is specified, you can abbreviate the maps as \"package_name\": \"version\"\n        \"package_name\": string,\n        \"package_name\": {\n            // Version of the package to install. Defaults to \"latest\"\n            \"version\": string,\n            // Whether native library patching is enabled for this package. This defaults to `auto`, but can be overridden to `always` or `never` for individual packages.\n            \"patch\": [\"auto\" | \"always\" | \"never\"],\n            // List of platforms to install the package on. Defaults to all platforms\n            \"platforms\": [string],\n            // List of platforms to exclude this package from. Defaults to no excluded platforms\n            \"excluded_platforms\": [string],\n            // Whether to disable a built-in plugin, if one exists for this package. Defaults to false\n            \"disable_plugin\": boolean\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete devbox.json for Java Maven Project\nDESCRIPTION: Full devbox.json configuration for a Java Maven project. This includes packages for maven, jdk, and binutils with an empty initialization hook, providing all necessary tools for Java development.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/maven/hello-world/README.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"maven\",\n    \"jdk\",\n    \"binutils\"\n  ],\n  \"shell\": {\n    \"init_hook\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing NumPy Shared Library Dependencies in Devbox\nDESCRIPTION: A shell script that tests if Devbox correctly handles native dependencies for Python packages. It installs NumPy as a binary wheel and verifies that it can be imported without missing shared library errors.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_missing_so.test.txt#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Python Missing Shared Library Test\n#\n# Install NumPy as a binary wheel using pip and verify that it loads.\n# The PIP_ONLY_BINARY environment variable forces downloading the binary wheel.\n#\n# Naively installing and loading NumPy fails because it cannot find\n# libstdc++.so. The nixpkgs Python interpreter doesn't search standard system\n# paths, so Devbox must patch it or provide the location of native dependencies.\n\nexec devbox install\n\n# pip install numpy\nexec devbox run venv -- pip install numpy==2.1.0\nstdout 'Successfully installed numpy'\n\n# run python test script that imports numpy\nexec devbox run venv -- python main.py\n! stderr 'libstdc\\+\\+\\.so\\.6: cannot open shared object file: No such file or directory'\n```\n\n----------------------------------------\n\nTITLE: Basic Python Setup in Devbox\nDESCRIPTION: Basic configuration to add Python 3.10 to a Devbox project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/python.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"python@3.10\"\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Devbox Project with Nginx\nDESCRIPTION: Bash commands to initialize a new Devbox project and add the Nginx package, which will automatically activate the Nginx plugin.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/plugins.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/my_proj\ndevbox init && devbox add nginx\n```\n\n----------------------------------------\n\nTITLE: Using the Devbox Shell Command in Bash\nDESCRIPTION: The basic syntax for using the devbox shell command to start a new shell or run a command with access to your packages. This command can be configured with various flags to customize the environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_shell.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox shell [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox with Python and Automatic Virtual Environment Activation\nDESCRIPTION: A complete devbox.json configuration that installs Python 3.10 and pip, with an init_hook to automatically activate the virtual environment when entering the shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/python/pip/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"python310\",\n        \"python310Packages.pip\"\n    ],\n    \"shell\": {\n        \"init_hook\": \". $VENV_DIR/bin/activate\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Global NodeJS Packages in Devbox\nDESCRIPTION: Configuration for installing global NodeJS packages like yalc and pm2 using Devbox package management instead of npm global install\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/nodejs/nodejs-npm/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"nodejs@18\",\n        \"nodePackages.yalc@latest\",\n        \"nodePackages.pm2@latest\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing R Package in Devbox JSON Configuration\nDESCRIPTION: Basic configuration for adding R version 4.4.1 to a Devbox project through devbox.json.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/data_science/R/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"R@4.4.1\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Plugin for Devbox in JSON\nDESCRIPTION: This JSON configuration installs MongoDB and Mongo shell, sets up environment variables, and creates necessary files and directories for running MongoDB in Devbox. It specifies package versions, data and config paths, and includes process composition and MongoDB configuration files.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/creating_plugins.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mongodb\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Plugin for the [`mongodb`](https://www.nixhub.io/packages/mongodb) package. This plugin configures MonogoDB to use a local config file and data directory for this project, and configures a mongodb service.\",\n  \"packages\": [\n    \"mongodb@latest\",\n    \"mongosh@latest\"\n  ],\n  \"env\": {\n    \"MONGODB_DATA\": \"{{.Virtenv}}/data\",\n    \"MONGODB_CONFIG\": \"{{.DevboxDir}}/mongod.conf\"\n  },\n  \"create_files\": {\n    \"{{.Virtenv}}/data\": \"\",\n    \"{{.Virtenv}}/process-compose.yaml\": \"config/process-compose.yaml\",\n    \"{{.DevboxDir}}/mongod.conf\": \"config/mongod.conf\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LAPP Stack Components with Devbox\nDESCRIPTION: Command to install PostgreSQL 14, PHP with PostgreSQL extension, and Apache 2.4 using Devbox package manager. This installation automatically activates necessary plugins for each component.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/lapp.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add postgresql@14 php php83Extensions.pgsql@latest apache@2.4\n```\n\n----------------------------------------\n\nTITLE: Pinning Package Versions in JSON\nDESCRIPTION: Demonstrates how to pin specific versions of packages in the devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"go@1.19\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Variables in Devbox\nDESCRIPTION: A set of test commands to verify that devbox correctly loads and applies environment variables from the env_from file. Each test echoes a different environment variable to verify proper loading behavior.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/envfrom.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox run test\nstdout 'BAR'\n\nexec devbox run test2\nstdout 'BAZ'\n\nexec devbox run test3\nstdout 'BAS'\n\nexec devbox run test4\nstdout ''\n```\n\n----------------------------------------\n\nTITLE: Adding JDK to Devbox Project Configuration\nDESCRIPTION: This snippet shows how to add the JDK and binutils packages to your Devbox project configuration. It installs the latest version of the JDK.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/java.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"jdk@latest\",\n    \"binutils@latest\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: Launching Devbox Shell\nDESCRIPTION: Command to start a new shell with Devbox packages and tools installed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/quickstart.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Configuring Packages as a List in JSON\nDESCRIPTION: Demonstrates how to specify packages as a list in the devbox.json file, including version pinning and flake references.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"go@latest\",\n        \"golangci-lint@latest\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: MariaDB Environment Variables Configuration in Devbox\nDESCRIPTION: Bash environment variables automatically configured by the MariaDB Plugin, including data directory, socket file location, and base directory settings.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mariadb.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMYSQL_BASEDIR=.devbox/nix/profile/default\nMYSQL_HOME=./.devbox/virtenv/mariadb/run\nMYSQL_DATADIR=./.devbox/virtenv/mariadb/data\nMYSQL_UNIX_PORT=./.devbox/virtenv/mariadb/run/mysql.sock\nMYSQL_PID_FILE=./.devbox/mariadb/run/mysql.pid\n```\n\n----------------------------------------\n\nTITLE: Customizing MariaDB Socket Path in Devbox JSON\nDESCRIPTION: JSON configuration for customizing the MYSQL_UNIX_PORT environment variable to specify a different socket file path, which is necessary when the default path exceeds 100 characters.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mariadb.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"env\": {\n    \"MYSQL_UNIX_PORT\": \"/<some-other-path>/mysql.sock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Specific Flake with Jetify Cache\nDESCRIPTION: Shows the command to upload and cache a specific Flake reference using the Jetify Cache to speed up future builds.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/using_flakes.md#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndevbox cache upload <flake-reference>\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox using Nix profile\nDESCRIPTION: Alternative command to install Devbox using the newer Nix profile system. This approach is available on systems with the Nix Package Manager installed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/installing_devbox.mdx#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnix profile install nixpkgs#devbox\n```\n\n----------------------------------------\n\nTITLE: Devbox Run Command Examples\nDESCRIPTION: Multiple examples showing how to use devbox run with different scenarios including direct commands, commands with flags, and running predefined scripts\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_run.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run a command directly:\n  devbox add cowsay\n  devbox run cowsay hello\n# Run a command that takes flags:\n  devbox run cowsay -d hello\n# Pass flags to devbox while running a command.\n# All `devbox run` flags must be passed before the command\n  devbox run -q cowsay -d hello\n\n#Run a script (defined as `\"moo\": \"cowsay moo\"`) in your devbox.json:\n  devbox run moo\n```\n\n----------------------------------------\n\nTITLE: Running Commands with Arguments in Devbox Shell\nDESCRIPTION: This snippet demonstrates running commands with arguments in the Devbox shell. The example uses 'lsof' with the '-i :80' flag to check connections on port 80.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/scripts.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run lsof -i :80\n```\n\n----------------------------------------\n\nTITLE: Including Nginx Plugin in devbox.json\nDESCRIPTION: Example of explicitly adding the Nginx plugin to your project by including it in the devbox.json configuration file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/plugins.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\n    \"plugin:nginx\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NodeJS Package to Devbox Configuration\nDESCRIPTION: Basic configuration to add NodeJS 18 to a Devbox environment using devbox.json.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/nodejs.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"nodejs@18\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack in Devbox Configuration\nDESCRIPTION: Configuration to enable Corepack for managing Node package managers like Yarn and pnpm in Devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/nodejs.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\"nodejs@18\"],\n  \"env\": {\n    \"DEVBOX_COREPACK_ENABLED\": \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages with Devbox\nDESCRIPTION: Command to add necessary packages for Laravel development including MariaDB, PHP 8.1, Node.js 18, Redis, and Composer.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/laravel/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add mariadb@latest, php@8.1, nodejs@18, redis@latest, php81Packages.composer@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Packages with Devbox Global\nDESCRIPTION: This command demonstrates how to add multiple packages (ripgrep, vim, and git) to your global Devbox profile. Once installed, these packages will be available in any Devbox Shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_global.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global add ripgrep vim git\n\n# Output:\nripgrep is now installed\nvim is now installed\ngit is now installed\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox with GitHub Actions\nDESCRIPTION: Basic syntax for adding the devbox-install-action to a GitHub workflow file. This step installs the Devbox CLI and any packages defined in your devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/continuous_integration/github_action.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install devbox\n  uses: jetify-com/devbox-install-action@v0.12.0\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Process Compose\nDESCRIPTION: Shows how to install a specific version (0.40.2) of Process Compose using a tagged Nix Flake reference.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/using_flakes.md#2025-04-14_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\ngithub:F1bonacc1/process-compose/v0.40.2\n```\n\n----------------------------------------\n\nTITLE: Python with Specific Pip Version\nDESCRIPTION: Configuration for installing Python with a specific version of pip package manager.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/python.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"python@3.10\"\n        \"python310Packages.pip\"\n    ],\n    \"shell\": {\n        \"init_hook\": \". $VENV_DIR/bin/activate\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Package from Specific Nixpkgs Branch\nDESCRIPTION: Shows how to install the 'hello' package from a specific branch (nixos-20.09) of the Nixpkgs repository using a Flake reference.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/using_flakes.md#2025-04-14_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\ngithub:NixOS/nixpkgs/nixos-20.09#hello\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment and Installing Dependencies\nDESCRIPTION: Commands to activate the Python virtual environment and install dependencies from requirements.txt file. These commands can be added to init_hook for automatic activation when starting a shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/django.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n. $VENV_DIR/bin/activate\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Complete Devbox GitHub Actions Workflow Example\nDESCRIPTION: A complete GitHub Actions workflow example that installs Devbox and demonstrates running both arbitrary commands and defined Devbox scripts. This workflow runs on every push to the repository.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/continuous_integration/github_action.md#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Testing with devbox\n\non: push\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Install devbox\n        uses: jetify-com/devbox-install-action@v0.12.0\n\n      - name: Run arbitrary commands\n        run: devbox run -- echo \"done!\"\n\n      - name: Run a script called test\n        run: devbox run test\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Service with Process Compose\nDESCRIPTION: YAML configuration for defining a Django development server as a service in process-compose.yml. Sets up auto-restart functionality and specifies the command to run the Django server.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/services.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Process compose for starting django\nversion: \"0.5\"\n\nprocesses:\n  django:\n   command: python todo_project/manage.py runserver\n   availability:\n    restart: \"always\"\n```\n\n----------------------------------------\n\nTITLE: Including MongoDB Plugin in Devbox\nDESCRIPTION: JSON configuration for including the MongoDB plugin from the devbox-plugins repository.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mongodb.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"include\": [\n        \"github:jetify-com/devbox-plugins?dir=mongodb\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Listing Available Services Command\nDESCRIPTION: Example output of the devbox services ls command showing available but inactive services in a project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/services.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services ls\n\nNo services currently running. Run `devbox services up` to start them:\n\n  django\n  postgresql\n```\n\n----------------------------------------\n\nTITLE: MySQL Environment Variables Configuration\nDESCRIPTION: Bash environment variables set by the MySQL plugin in Devbox. These variables define important paths like data directory, socket file location, and configuration file paths.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mysql.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMYSQL_BASEDIR=.devbox/nix/profile/default\nMYSQL_HOME=./.devbox/virtenv/mysql/run\nMYSQL_DATADIR=./.devbox/virtenv/mysql/data\nMYSQL_UNIX_PORT=./.devbox/virtenv/mysql/run/mysql.sock\nMYSQL_PID_FILE=./.devbox/virtenv/mysql/run/mysql.pid\nMYSQL_CONF=./devbox.d/mysql/my.cnf\n```\n\n----------------------------------------\n\nTITLE: Devbox Services Up Usage Examples\nDESCRIPTION: Demonstrates different ways to use the devbox services up command, including starting all services, running in background mode, and starting specific services.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_services_up.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Start all services with process compose in the foreground\ndevbox services up\n\n#Start all services with process compose in the background\ndevbox services up -b\n\n# Start only the web service with process compose in the foreground\ndevbox services up web\n```\n\n----------------------------------------\n\nTITLE: Disabling Built-in Plugins for Packages in JSON\nDESCRIPTION: Demonstrates how to disable built-in plugins for specific packages in the devbox.json configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"glibcLocales\": {\n            \"version\": \"latest\",\n            \"disable_plugin\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Virtual Environment Configuration\nDESCRIPTION: Configuration for setting up Python with a virtual environment using pip, including automatic activation on shell start.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/python.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"python@3.10\"\n    ],\n    \"shell\": {\n        \"init_hook\": \". $VENV_DIR/bin/activate\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JDK in devbox.json\nDESCRIPTION: JSON configuration for adding the Java Development Kit (JDK) and binutils to a Devbox project. This configuration installs the latest version of the JDK and binutils which are required for Java development.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/maven/hello-world/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"jdk@latest\",\n    \"binutils@latest\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Outputs from a Flake\nDESCRIPTION: Demonstrates how to install multiple outputs (out and dev) from the libcap package using a Flake reference with output specification.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/using_flakes.md#2025-04-14_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\ngithub:nixos/nixpkgs#libcap^out,dev\n```\n\n----------------------------------------\n\nTITLE: Installing Package from Local Flake\nDESCRIPTION: Demonstrates how to install packages from a local Flake located in the './my-flake' directory, using a specific attribute 'my-package'.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/using_flakes.md#2025-04-14_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\npath:./my-flake#my-package\n```\n\n----------------------------------------\n\nTITLE: Activating Poetry Shell in Devbox\nDESCRIPTION: Commands to enter and exit the Poetry virtual environment within a Devbox shell. The environment is automatically activated via init_hook when entering the Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/python/poetry/poetry-demo/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Uploading Packages from Github and Nixpkgs\nDESCRIPTION: Commands to cache packages from external sources like Github repositories or Nixpkgs. This is useful for caching build artifacts that don't exist in the public Nix cache or require building from source.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/cache/usage.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Cache an installable hosted on Github (process-compose)\ndevbox cache upload github:F1bonnac1/process-compose\n\n# Cache a package from nixpkgs\ndevbox cache upload nixpkgs#mongodb\n```\n\n----------------------------------------\n\nTITLE: Importing Secrets from a File\nDESCRIPTION: This command shows how to bulk import secrets from a .env file using devbox secrets import. It uploads 3 environment variables from the .env.dev file to the dev environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/secrets/secrets_cli.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndevbox secrets import .env.dev\n[DONE] Uploaded 3 environment variable(s) from file '.env.dev' to environment: dev\n```\n\n----------------------------------------\n\nTITLE: Running Devbox Version Update Command\nDESCRIPTION: Command syntax for updating Devbox to the latest version. Supports quiet mode operation and includes help option for additional information.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_version_update.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox version update [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Devbox Update Command in Bash\nDESCRIPTION: Command syntax for updating packages in a devbox project. Allows updating specific packages or all packages to their latest compatible versions while respecting version constraints.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_update.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox update [pkg]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox with Scripts and Packages\nDESCRIPTION: The main devbox.json configuration file that defines packages to install and scripts to run. It includes 'hello' as a package and defines several scripts including single-line, multi-line, and scripts that use environmental variables set in the init hook.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/script.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"hello@latest\"\n  ],\n  \"shell\": {\n    \"init_hook\": \"export HOOK=hook\",\n    \"scripts\": {\n      \"single_line\": \"echo \\\"single line\\\"\",\n      \"multi_line\": [\n        \"echo \\\"first line\\\"\",\n        \"echo \\\"second line\\\"\"\n      ],\n      \"hook_runs\": \"echo $HOOK\",\n      \"hello_with_script\": \"hello -g \\\"with script\\\"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running One-off Commands in Devbox Shell\nDESCRIPTION: This example shows how to use 'devbox run' to execute arbitrary commands in your Devbox shell without defining them as scripts in devbox.json. The shell will execute the command and exit when complete.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/scripts.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run echo \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Testing curl Package Installation in Devbox\nDESCRIPTION: This bash script tests if curl was properly installed by Devbox by running 'curl --version' and checking if the output contains the expected version (7.87.0).\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/lockfile/nopaths.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox run curl --version | grep -o 'curl\\s7\\.87\\.0'\nstdout 'curl 7.87.0'\n```\n\n----------------------------------------\n\nTITLE: Generating Direnv Configuration for a New Devbox Project\nDESCRIPTION: This command generates a .envrc file in your project directory and enables it with direnv allow. This allows direnv to automatically load your Devbox environment when you navigate to the project directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/direnv.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n➜  devbox generate direnv\nSuccess: generated .envrc file\nSuccess: ran `direnv allow`\ndirenv: loading ~/src/docs/devbox/.envrc\ndirenv: using devbox\n```\n\n----------------------------------------\n\nTITLE: Defining Devbox Plugin Schema in JSON\nDESCRIPTION: This snippet shows the JSON schema for defining a Devbox plugin, including fields for name, version, description, packages, environment variables, file creation, shell initialization, and script definitions.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/creating_plugins.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"\",\n  \"version\": \"\",\n  \"description\": \"\",\n  \"packages\":[] | {},\n  \"env\": {\n    \"<key>\": \"<value>\"\n  },\n  \"create_files\": {\n    \"<destination>\": \"<source>\"\n  },\n  \"shell\": {\n    \"init_hook\": [\n      \"<bash commands>\"\n    ],\n     \"scripts\": {\n      \"<key>\": \"<value>\"\n    }\n  },\n  \"include\": [\n   \"<path_to_plugin>\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Package Version in devbox.json\nDESCRIPTION: Example of how to pin a specific version of nodejs in the devbox.json file. This ensures that exactly version 20.1.0 will be installed when setting up the development environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/pinning_packages.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"packages\": [\n\t\"nodejs@20.1.0\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox JSON for Java Development\nDESCRIPTION: This devbox.json file configures the necessary packages for Java development with Gradle. It includes Gradle, JDK, and binutils packages.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/gradle/hello-world/README.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"gradle\",\n    \"jdk\",\n    \"binutils\"\n  ],\n  \"shell\": {\n    \"init_hook\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Devbox Cache Upload Command in Bash\nDESCRIPTION: Command syntax for uploading nix packages to cache. The command accepts an optional installable parameter and various flags to customize the upload behavior. If no specific installable is provided, all packages in the project will be uploaded.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_cache_upload.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox cache upload [installable] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build File for Java Application\nDESCRIPTION: This Gradle build configuration sets up a Java application project. It specifies the Java version, main class, and JAR manifest attributes for the application.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/README.md#2025-04-14_snippet_4\n\nLANGUAGE: gradle\nCODE:\n```\napply plugin: 'java'\napply plugin: 'application'\nsourceCompatibility = 17\ntargetCompatibility = 17\nmainClassName = 'hello.HelloWorld'\njar {\n    manifest {\n        attributes 'Main-Class': 'hello.HelloWorld'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Global Devbox Packages with the Devbox CLI\nDESCRIPTION: Command syntax for installing packages globally using the Devbox CLI. This command allows users to specify one or more packages to install in the global devbox.json configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_install.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global install <pkg>... [flags]\n```\n\n----------------------------------------\n\nTITLE: Temporarily Adding Global Packages to Current Shell\nDESCRIPTION: This command adds your Devbox global packages to the current shell session. This is useful when you need temporary access to your global tools without permanently modifying your shell configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_global.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n. <(devbox global shellenv --init-hook)\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Project\nDESCRIPTION: Command to create a new blank Devbox project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/spring/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndevbox init\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Devbox Config JSON\nDESCRIPTION: Demonstrates how to set non-secret environment variables directly in the devbox.json file under the 'env' object. This method is suitable for variables that don't require secure storage.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/secrets.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": {\n    \"MY_VAR\": \"my_value\"\n  },\n  \"packages\": {},\n  \"shell\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Pipenv Configuration\nDESCRIPTION: Setup for using Pipenv as the Python package and virtual environment manager.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/python.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"python310\",\n        \"pipenv\"\n    ],\n    \"shell\": {\n        \"init_hook\": \"pipenv shell\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Database in Devbox\nDESCRIPTION: Shell command to initialize the PostgreSQL database in a Devbox environment. This is a necessary step after installation.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/postgres.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ninitdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Includes in Devbox JSON\nDESCRIPTION: Demonstrates how to include additional configuration from plugins in a Devbox project. Shows different methods of including plugins from Github repos, local files, and builtin plugins.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"include\": [\n        // Include a plugin from a Github Repo. The repo must have a plugin.json in it's root,\n        // or in the directory specified by ?dir\n        \"github:org/repo/ref?dir=<path-to-plugin>\"\n        // Include a local plugin. The path must point to a plugin.json\n        \"path:path/to/plugin.json\"\n        // Force activate a builtin plugin\n        \"plugin:php-config\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ruby Packages to Devbox JSON Configuration\nDESCRIPTION: JSON configuration for adding Ruby 3.1 and bundler to your Devbox environment. This should be added to your devbox.json file to install these packages in your development environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/ruby.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"ruby@3.1\",\n        \"bundler@latest\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using the Devbox Generate Command in Bash\nDESCRIPTION: Command syntax for using devbox generate to create configuration files for Devbox projects. The command supports generating devcontainers, dockerfiles, and direnv files with various configuration options.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_generate.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox generate <devcontainer|dockerfile|direnv> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring devbox.json for Go Project Deployment in Jetify Cloud\nDESCRIPTION: This JSON configuration sets up a Go project for deployment in Jetify Cloud. It specifies the required Go package, environment variables, and shell scripts for installation, building, and starting the application.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/deploys/setup.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"go@1.19.8\"\n    ],\n    \"env\": {\n        \"GOPATH\": \"$HOME/go/\",\n        \"PATH\": \"$PATH:$HOME/go/bin\"\n    },\n    \"shell\": {\n        \"init_hook\": [\n            \"export \\\"GOROOT=$(go env GOROOT)\\\"\"\n        ],\n        \"scripts\": {\n            \"install\": \"go get ./...\",\n            \"build\": \"go build -o main.go\",\n            \"start\": \"go run\",\n            \"run_test\": \"go run main.go\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Package Configuration in Devbox\nDESCRIPTION: JSON configuration for adding PHP and Composer to a Devbox project using the latest versions.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/php.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"php@latest\",\n        \"php83Packages.composer@latest\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Including Local Plugin in devbox.json\nDESCRIPTION: Example of adding a local plugin to your project by specifying its path in the include section of the devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/plugins.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"include\": [\n    \"path:./path/to/plugin.json\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Running Basic Command in Devbox Shell\nDESCRIPTION: Demonstrates how to run a simple echo command within the devbox shell environment\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_run.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  devbox run echo \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build for Java Project\nDESCRIPTION: This Gradle configuration sets up a basic Java project. It specifies the Java version, main class, and JAR manifest attributes. The sourceCompatibility and targetCompatibility should be adjusted to match the installed JDK version.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/java.md#2025-04-14_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\n/* build.gradle */\napply plugin: 'java'\napply plugin: 'application'\n/* Change these versions to the JDK version you have installed */\nsourceCompatibility = 17\ntargetCompatibility = 17\nmainClassName = 'hello.HelloWorld'\njar {\n    manifest {\n      /* assuming main class is in src/main/java/hello/HelloWorld.java */\n        attributes 'Main-Class': 'hello.HelloWorld'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Devbox Global Run Command with Syntax\nDESCRIPTION: Demonstrates the basic syntax for running the 'devbox global run' command, which starts a new shell to execute scripts or commands defined in devbox.json.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_run.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global run <pkg>... [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the devbox global push Command in Bash\nDESCRIPTION: Command for pushing global Devbox configurations to a git repository or Jetify sync. If no git repository is specified, Jetify sync is used by default.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_push.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global push <git-repo> [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the Devbox Secrets Set Command in Bash\nDESCRIPTION: Command syntax for securely storing environment variables in Devbox. Users can set multiple variables at once by providing name-value pairs as arguments.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_set.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox secrets set <NAME1>=<value1> [<NAME2>=<value2>]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages with Devbox\nDESCRIPTION: This command adds the necessary packages to the Devbox environment, including MariaDB, PHP 8.1, Node.js 18, Redis, and Composer.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/laravel.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add mariadb@latest, php@8.1, nodejs@18, redis@latest, php81Packages.composer@latest\n```\n\n----------------------------------------\n\nTITLE: Defining File Creation in Devbox Plugin JSON\nDESCRIPTION: This snippet demonstrates how to define file creation in a Devbox plugin's JSON configuration, using template placeholders for destination paths.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/creating_plugins.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"create_files\": {\n    \"{{ .DevboxDir }}/Caddyfile\": \"caddy/Caddyfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Development Environment with Devbox\nDESCRIPTION: JSON configuration for setting up a Rust development environment with Devbox. It installs rustup and libiconv packages, configures the Rust toolchain locally, and provides shell scripts for common Rust commands like testing, running, and building documentation.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/rust.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"rustup@latest\",\n        \"libiconv@latest\"\n    ],\n    \"shell\": {\n        \"init_hook\": [\n            \"projectDir=$(dirname $(readlink -f \\\"$0\\\"))\",\n            \"rustupHomeDir=\\\"$projectDir\\\"/.rustup\",\n            \"mkdir -p $rustupHomeDir\",\n            \"export RUSTUP_HOME=$rustupHomeDir\",\n            \"export LIBRARY_PATH=$LIBRARY_PATH:\\\"$projectDir/nix/profile/default/lib\\\"\",\n            \"rustup default stable\",\n            \"cargo fetch\"\n        ],\n        \"scripts\": {\n            \"test\": \"cargo test -- --show-output\",\n            \"start\" : \"cargo run\",\n            \"build-docs\": \"cargo doc\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pipenv Configuration with Virtual Environment\nDESCRIPTION: Complete Devbox configuration for Python using pipenv, including package specifications and automatic virtual environment initialization\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/python/pipenv/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"python310\",\n        \"pipenv\"\n    ],\n    \"shell\": {\n        \"init_hook\": \"pipenv shell\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Package Outputs with Devbox\nDESCRIPTION: Demonstrates how to install specific outputs of a package using the '--outputs' flag with the 'devbox add' command, which allows accessing development headers and libraries.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/faq.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add prometheus --outputs=out,cli\n```\n\n----------------------------------------\n\nTITLE: Using devbox search command in Bash\nDESCRIPTION: This snippet demonstrates the basic syntax for using the 'devbox search' command to search for Nix packages. It allows users to specify a package name and optional flags.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_search.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox search <pkg> [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application with Devbox\nDESCRIPTION: Commands to set up the database and run the Spring Boot application using Devbox. These commands initialize the MySQL database and start the Spring Boot service.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/spring.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndevbox run setup_db\ndevbox run bootRun\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Environment for Java and Maven\nDESCRIPTION: These commands initialize a Devbox environment and add Java Development Kit (JDK) and Maven packages. The JDK version can be specified as needed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox init\ndevbox add jdk\ndevbox add maven\n```\n\n----------------------------------------\n\nTITLE: Using devbox generate dockerfile Command in Bash\nDESCRIPTION: Command syntax for generating a Dockerfile that replicates the devbox shell environment. This can be used to containerize a devbox development environment into an OCI container.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_generate_dockerfile.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox generate dockerfile [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Django Migrations\nDESCRIPTION: Commands to create and apply database migrations for the Django project. This sets up the necessary database tables according to the Django models.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/django.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython todo_project/manage.py makemigrations\npython todo_project/manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Defining Packages with GitHub Flake Reference in JSON\nDESCRIPTION: Shows how to add a Flake hosted on GitHub to the packages list in a JSON configuration file. The format includes optional reference and flake attribute specifications.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/using_flakes.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"packages\": [\n    \"github:<org>/<repo>/<ref>#<optional_flake_attr>\"\n]\n```\n\n----------------------------------------\n\nTITLE: Testing Devbox Package Installation and Execution (Shell)\nDESCRIPTION: This shell script tests the Devbox package manager's ability to install and run a simple 'hello' package. It checks for initial absence of the package, initializes Devbox, adds the package, and verifies its correct execution.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/basic/install_hello.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Ensure hello is not found anywhere in the environment\n! exec hello\n! exec devbox run hello\n\n# Initialize devbox\nexec devbox init\n\n# Add the package and run hello with devbox\nexec devbox add hello\n! exec hello\n\n# Run hello and check it prints the right output\nexec devbox run hello\nstdout 'Hello, world!'\n\n# Once we have better progress output, we should check that stderr is empty, with:\n# ! stderr .+  # No stderr output\n# As is, we always print 'Ensuring packages are installed'.\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Shell and Preventing Inception in Shell\nDESCRIPTION: This script initializes the Devbox shell, sets an environment variable to indicate an active shell, and prevents running a new shell within an existing one. It displays an error message when attempting shell inception.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/shellception.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Do not support shell inception\nexec devbox init\nenv DEVBOX_SHELL_ENABLED=1\n! exec devbox shell\nstderr 'Error: You are already in an active devbox shell.'\n```\n\n----------------------------------------\n\nTITLE: Generating Direnv Configuration for an Existing Devbox Project\nDESCRIPTION: This command adds a .envrc file to an existing Devbox project and enables it with direnv allow. The generated file works with installed direnv and Devbox without requiring additional configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/direnv.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n➜  devbox generate direnv\nSuccess: generated .envrc file\nSuccess: ran `direnv allow`\ndirenv: loading ~/src/docs/devbox/.envrc\ndirenv: using devbox\n```\n\n----------------------------------------\n\nTITLE: Installing Python in Devbox Environment\nDESCRIPTION: Example command to add Python 3.11 to a Devbox environment. This demonstrates the practical use of the 'devbox add' command with a specific version.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/devspace/index.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add python@3.11\n```\n\n----------------------------------------\n\nTITLE: Adding Devbox Global to Shell Environment\nDESCRIPTION: Command to add Devbox global packages to your shell environment. This allows using Devbox as a primary package manager by adding the global packages to your PATH.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(devbox global shellenv)\"\n```\n\n----------------------------------------\n\nTITLE: Including GitHub-Hosted Plugin in devbox.json\nDESCRIPTION: Example of adding a GitHub-hosted plugin to your project by specifying its repository and directory in the include section of the devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/plugins.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"include\": [\n    \"github:<org>/<repo>?dir=<plugin-dir>\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Custom Socket Path Configuration in Devbox JSON\nDESCRIPTION: JSON configuration that demonstrates how to customize the MySQL socket file path using the env property in devbox.json. This is useful when the default path exceeds the 100 character limit.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mysql.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"env\": {\n    \"MYSQL_UNIX_PORT\": \"/<some-other-path>/mysql.sock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Devbox Info Command in Bash\nDESCRIPTION: Command syntax for using devbox info to display package information. The command accepts a package name as an argument and supports various flags for customizing output and behavior.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_info.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox info <pkg> [flags]\n```\n\n----------------------------------------\n\nTITLE: Apache Environment Variables Configuration\nDESCRIPTION: Bash environment variables set by the Apache plugin that define log file locations, server port, and configuration directories for the Apache web server.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/servers/apache.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHTTPD_ACCESS_LOG_FILE={PROJECT_DIR}/.devbox/virtenv/apacheHttpd/access.log\nHTTPD_ERROR_LOG_FILE={PROJECT_DIR}/.devbox/virtenv/apacheHttpd/error.log\nHTTPD_PORT=8080\nHTTPD_DEVBOX_CONFIG_DIR={PROJECT_DIR}\nHTTPD_CONFDIR={PROJECT_DIR}/devbox.d/apacheHttpd\n```\n\n----------------------------------------\n\nTITLE: Removing Packages using Devbox CLI\nDESCRIPTION: Command syntax for removing one or more packages from a devbox environment. Supports optional flags for help and quiet mode operation.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_rm.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox rm <pkg>... [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Devbox Global Command in Bash\nDESCRIPTION: The basic syntax for using the devbox global command. This command allows users to manage packages that should be available across all Devbox projects without adding them to each project's devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global <subcommand> [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Required Packages to Devbox Project\nDESCRIPTION: Command to add necessary packages (JDK, MySQL, and Gradle) to the Devbox project. This sets up the development environment with the required tools.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/spring.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndevbox add jdk@17 mysql@latest gradle@latest\n```\n\n----------------------------------------\n\nTITLE: Basic Go SDK Configuration in Devbox\nDESCRIPTION: Minimal configuration to add Go SDK to a Devbox project using the latest version.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/go.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"go@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing psycopg2 with Python 3.7\nDESCRIPTION: This bash script installs psycopg2 using pip and runs a Python test script to verify successful import without glibc version conflicts.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_old_glibc.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox install\n\n# pip install psycopg2\nexec devbox run venv -- pip install psycopg2==2.9.5\nstdout 'Successfully installed psycopg2'\n\n# run python test script that imports psycopg2\nexec devbox run venv -- python main.py\n! stderr '.*glibc-2.35-224/lib/libc\\.so\\.6: version `GLIBC_2.38'' not found \\(required by .*/site-packages/psycopg2/_psycopg\\.cpython-37m-x86_64-linux-gnu\\.so\\)'\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Environment for Java and Gradle\nDESCRIPTION: These commands initialize a Devbox environment and add Java Development Kit (JDK) and Gradle packages. The JDK version can be specified as needed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox init\ndevbox add jdk\ndevbox add gradle\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build File for Java Project\nDESCRIPTION: This Gradle build file configures a basic Java project. It sets the source and target compatibility to Java 17, specifies the main class, and configures the JAR manifest.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/gradle/hello-world/README.md#2025-04-14_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\n/* build.gradle */\napply plugin: 'java'\napply plugin: 'application'\n/* Change these versions to the JDK version you have installed */\nsourceCompatibility = 17\ntargetCompatibility = 17\nmainClassName = 'hello.HelloWorld'\njar {\n    manifest {\n      /* assuming main class is in src/main/java/hello/HelloWorld.java */\n        attributes 'Main-Class': 'hello.HelloWorld'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Nim Application with Devbox\nDESCRIPTION: This command uses Devbox to build a Nim application, likely invoking the Nim compiler via a predefined configuration or script called 'nim-build' in the Devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/nim/spinnytest/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run nim-build\n```\n\n----------------------------------------\n\nTITLE: Adding Global Packages to All New Shell Sessions with Devbox\nDESCRIPTION: This command adds global Devbox packages to all new shell sessions by adding it to your shell's config file (like ~/.bashrc or ~/.zshrc).\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_shellenv.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(devbox global shellenv)\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Devbox Services Command Syntax\nDESCRIPTION: Command syntax for restarting devbox services. Can be used to restart specific services by naming them or restart all services if no specific service is specified. Supports environment variables and quiet mode options.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_services_restart.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services restart [service]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Using devbox global add command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'devbox global add' command to add new global packages in Devbox. It includes the command syntax and placeholders for package names and flags.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_add.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global add <pkg>... [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Global NodeJS Packages in Devbox\nDESCRIPTION: Configuration for installing global NodeJS packages like yalc and pm2 using Devbox's package management system.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/nodejs.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"nodejs@18\",\n    \"nodePackages.yalc@latest\",\n    \"nodePackages.pm2@latest\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Services using Command Line\nDESCRIPTION: Command syntax for starting services in a Devbox environment. When no service is specified, it starts all services plus process-compose.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_services_start.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services start [service]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a New PostgreSQL Database in Devbox\nDESCRIPTION: Optional shell command to create a new PostgreSQL database in a Devbox environment. This is necessary if the user doesn't have permissions to create or drop databases.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/postgres.md#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncreatedb <db-name>\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Package to Devbox Configuration\nDESCRIPTION: JSON configuration for adding the latest version of Redis to your Devbox project. This snippet shows how to include Redis in the 'packages' array of your Devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/redis.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"redis@latest   \"\n    ],\n```\n\n----------------------------------------\n\nTITLE: Adding Python to Devbox Configuration\nDESCRIPTION: Configuration to add Python 3.10 to a Devbox environment by specifying it in the packages array of devbox.json.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/python/pip/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"python@3.10\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: Adding NodeJS to Devbox Configuration\nDESCRIPTION: This snippet shows how to add NodeJS version 18 to the Devbox configuration. It demonstrates the JSON structure for specifying NodeJS as a package in the devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/nodejs/nodejs-yarn/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"nodejs@18\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: Manual PostgreSQL Server Control\nDESCRIPTION: Commands for manually starting and stopping the PostgreSQL server, specifying the log file location.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/postgres/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npg_ctl -l .devbox/conf/postgresql/logfile start\npg_ctl stop\n```\n\n----------------------------------------\n\nTITLE: Uploading a Devbox Project to Cache\nDESCRIPTION: Command to push the entire closure of a Devbox project to the Jetify Cache. This should be run from the project root directory and requires Admin permissions.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/cache/usage.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox cache upload\n```\n\n----------------------------------------\n\nTITLE: Starting Django Development Server in Devbox\nDESCRIPTION: Command to start the Django development server. This makes the application accessible through a web browser at localhost:8000.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/django/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython todo_project/manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Loading Devbox Fish Completions Temporarily\nDESCRIPTION: This command generates the autocompletion script for Devbox and sources it in the current Fish shell session. The completions will be available immediately but only for the current session.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_fish.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox completion fish | source\n```\n\n----------------------------------------\n\nTITLE: Installing Python 3.10 using Devbox\nDESCRIPTION: This snippet demonstrates how to add Python 3.10 to your Devbox environment using the 'devbox add' command.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/tutorial/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add python310\n```\n\n----------------------------------------\n\nTITLE: Adding Packages from Flakes in JSON\nDESCRIPTION: Illustrates how to add packages from flakes, including GitHub repositories and local paths, in the devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        // Add the default package from a github repository\n        \"github:numtide/flake-utils\",\n        // Install a specific attribute or package from a Github hosted flake\n        \"github:nix-community/fenix#stable.toolchain\",\n        // Install a package from a specific channel of Nixpkgs\n        \"github:nixos/nixpkgs/21.05#hello\",\n        // Install a package form a specific commit of Nixpkgs\n        \"github:nixos/nixpkgs/5233fd2ba76a3accb5aaa999c00509a11fd0793c#hello\",\n        // Install a package from a local flake. This should point to a directory that contains a flake.nix file.\n        \"path:../my-flake#my-package\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Go Environment Configuration with CLI Support\nDESCRIPTION: Full Devbox configuration including Go SDK, environment variables for GOPATH and PATH, and shell initialization settings for CLI tool support.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/go.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"go@latest\"\n  ],\n  \"env\": {\n    \"GOPATH\": \"$PWD\",\n    \"PATH\": \"$PATH:$PWD/bin\"\n  },\n  \"shell\": {\n    \"init_hook\": [\n      \"echo 'Welcome to devbox!' > /dev/null\"\n    ],\n    \"scripts\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Secrets Command Syntax\nDESCRIPTION: Command syntax for uploading environment variables from .env files to devbox. Files should contain NAME=VALUE pairs per line.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_upload.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox secrets upload <file1> [<fileN>]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Searching for Package Versions with devbox search\nDESCRIPTION: Example of using the devbox search command to find available versions of nodejs. The command displays package versions in descending order and truncates results by default.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/pinning_packages.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ devbox search nodejs\n\nFound 2+ results for \"nodejs\":\n\n* nodejs  (20.5.1, 20.5.0, 20.4.0, 20.3.1, 20.3.0, 20.2.0, 20.1.0, 20.0.0, 19.9.0, 19.8.1)\n* nodejs-slim  (20.5.1, 20.5.0, 20.4.0, 20.3.1, 20.3.0, 20.2.0, 20.1.0, 20.0.0, 19.9.0, 19.8.1)\n\nWarning: Showing top 10 results and truncated versions. Use --show-all to show all.\n```\n\n----------------------------------------\n\nTITLE: Setting Direnv Load Method in Zed\nDESCRIPTION: JSON configuration to set the direnv load method to 'shell_hook' in Zed. This helps resolve conflicts between host-installed binaries and Devbox packages. Add this to the ~/.config/zed/config.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/zed.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"load_direnv\": \"shell_hook\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Flake in Package List\nDESCRIPTION: Shows how to reference a local Flake in the packages list, including an optional flake attribute specification.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/using_flakes.md#2025-04-14_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\npath:<path_to_flake>#<optional_flake_attr>\n```\n\n----------------------------------------\n\nTITLE: Basic Devbox Services Up Command Syntax\nDESCRIPTION: Shows the basic command syntax for starting services using devbox services up, with optional service names as arguments and flags.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_services_up.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services up [services]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Nginx Package to Devbox JSON Configuration\nDESCRIPTION: This JSON snippet shows how to add the latest version of Nginx to the packages list in the devbox.json file. This ensures Nginx is installed and available in the Devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/servers/nginx/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"nginx@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Adding Go SDK to Devbox Configuration\nDESCRIPTION: This snippet shows how to add the latest version of Go SDK to the devbox.json configuration file. It demonstrates the basic package configuration for a Go project in Devbox.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/go/hello-world/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"go@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Starting MariaDB Server\nDESCRIPTION: Command to initialize and start the MariaDB server service in Devbox environment\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/mariadb/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services up\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox Cache Manually\nDESCRIPTION: Command to manually configure the Devbox cache. Once configured, Devbox will use the cache when installing packages for your project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/cache/usage.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox cache configure \n```\n\n----------------------------------------\n\nTITLE: Installing Devbox Bash Completion On macOS\nDESCRIPTION: Command to permanently install devbox bash completion on macOS systems using Homebrew. This writes the completion script to the Homebrew bash completion directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_bash.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox completion bash > $(brew --prefix)/etc/bash_completion.d/devbox\n```\n\n----------------------------------------\n\nTITLE: Configuring Scripts in devbox.json\nDESCRIPTION: This example shows how to configure shell scripts in your devbox.json file. Scripts can be defined as a single command string or an array of command strings, each with a unique name. The init_hook runs before any script execution.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/scripts.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"shell\": {\n    \"init_hook\": \"echo \\\"Hello \\\"\",\n    \"scripts\": {\n        \"echo_once\": \"echo \\\"World\\\"\",\n        \"echo_twice\": [\n            \"echo \\\"World\\\"\",\n            \"echo \\\"Again\\\"\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Dockerfile exists\nDESCRIPTION: Command to verify if a Dockerfile already exists in the current directory. This is likely used as a conditional check in a script.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/generate/dockerfile.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexists Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Haskell Project with Stack in Devbox\nDESCRIPTION: A set of commands to create a new Haskell project using Stack, build it, and run the executable. This workflow demonstrates the basic project initialization and execution process within a Devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/haskell/my-project/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstack new my-project\ncd my-project\nstack build\nstack exec my-project-exe\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling for Non-existent Packages in Devbox\nDESCRIPTION: Initializes a Devbox project and attempts to retrieve information about a non-existent package. Tests error handling in the info command when querying for invalid packages.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/info/info.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox init\n! exec devbox info notapackage\nstderr 'Package \"notapackage\" not found'\n```\n\n----------------------------------------\n\nTITLE: Deleting Environment Variables Using Devbox CLI Command\nDESCRIPTION: Command syntax for removing one or more environment variables from Devbox storage. Allows specifying multiple variable names and supports environment-specific deletion with optional organization and project scoping.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_rm.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox secrets rm <NAME1> [<NAME2>]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Devbox Secrets Command in Bash\nDESCRIPTION: This snippet shows the basic usage of the 'devbox secrets' command. It can be used with various flags to manage environment variables and secrets securely in the cloud.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox secrets [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating Project Readme with Devbox CLI in Bash\nDESCRIPTION: This command generates a markdown readme file for a project using the Devbox CLI. It requires specifying a filename for the readme and supports optional flags for configuration and output control.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_generate_readme.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox generate readme [filename] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Python Package Configuration in Devbox\nDESCRIPTION: Minimal configuration for adding Python 3.10 to a Devbox project using devbox.json\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/python/pipenv/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"python@3.10\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Devbox Configuration with Environment Variables in JSON\nDESCRIPTION: The devbox.json configuration file that defines packages and environment variables. It includes variables with static values, references to other variables, and overrides for plugin-defined variables.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/env.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\"nginx@latest\"],\n  \"env\": {\n    \"CONFIG_VAR1\": \"abc\",\n    \"CONFIG_VAR2\": \"$DEVBOX_FOO\",\n    \"CONFIG_VAR3\": \"${PWD}\",\n    \"NGINX_CONFDIR\": \"devbox-json-override\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Plugin to Devbox Configuration\nDESCRIPTION: JSON snippet demonstrating how to manually add the MySQL plugin to your Devbox configuration. This is done by adding the plugin to the include list in your devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mysql.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"include\": [\n        \"plugin:mysql\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Listing Available Services with Devbox in Bash\nDESCRIPTION: Command to list all available services in a Devbox environment. It supports options for help and quiet mode to suppress logs.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_services_ls.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services ls [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding NodeJS Package to Devbox Configuration\nDESCRIPTION: Configuration snippet for adding NodeJS 18 to a Devbox environment through devbox.json\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/nodejs/nodejs-npm/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"nodejs@18\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Disabling PostgreSQL Plugin in Devbox JSON Configuration\nDESCRIPTION: JSON configuration to disable the PostgreSQL plugin in a Devbox environment. This can be used when custom configuration is needed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/postgres.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"postgresql\": {\n            \"version\": \"latest\",\n            \"disable_plugin\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database and User\nDESCRIPTION: Commands to create a new PostgreSQL database named 'todo_db' and a user 'todo_user' with a password. This setup is required for the Django application to connect to the database.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/django.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb todo_db\npsql todo_db -c \"CREATE USER todo_user WITH PASSWORD 'secretpassword';\"\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox Bash Completion On Linux\nDESCRIPTION: Command to permanently install devbox bash completion on Linux systems. This writes the completion script to the system-wide bash completion directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_bash.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox completion bash > /etc/bash_completion.d/devbox\n```\n\n----------------------------------------\n\nTITLE: Checking PATH Order\nDESCRIPTION: Validates correct PATH ordering with virtual env path nix packages before host path\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/path.test.txt#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npath.order '.devbox/nix/profile/default/bin' '/some/clean/path'\n```\n\n----------------------------------------\n\nTITLE: Adding .NET SDK to Devbox Configuration\nDESCRIPTION: JSON configuration snippet for including the dotnet-sdk package in your devbox.json file. This configuration installs the latest version of the .NET SDK to enable F# and .NET development in your Devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/fsharp.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"dotnet-sdk@latest\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: Example Java Home Path Output\nDESCRIPTION: This snippet shows an example of the Java home path output from the Devbox shell. This path is used to configure the JRE in Eclipse.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/eclipse.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/nix/store/qaf9fysymdoj19qtyg7209s83lajz65b-zulu17.34.19-ca-jdk-17.0.3\n```\n\n----------------------------------------\n\nTITLE: Devbox Configuration for Maven Java Project\nDESCRIPTION: This Devbox configuration specifies the required packages for a Java project using Maven. It includes Maven, JDK, and binutils.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/java.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"maven\",\n    \"jdk\",\n    \"binutils\"\n  ],\n  \"shell\": {\n    \"init_hook\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Secret\nDESCRIPTION: This command shows how to remove a secret named FOO from the dev environment using devbox secrets rm. It provides confirmation upon successful deletion.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/secrets/secrets_cli.md#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndevbox secrets rm FOO\n[DONE] Deleted environment variable 'FOO' in environment: dev\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Definition File\nDESCRIPTION: A .env file that defines environment variables to be loaded by devbox. Shows variables with and without spaces after the equals sign, and includes a commented line to test comment handling.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/envfrom.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nFOO=BAR\nFOO2 = BAZ\nFOO3=ToBeOverwrittenByDevboxJSON\n# FOO4=comment shouldn't be processed\n```\n\n----------------------------------------\n\nTITLE: Adding NodeJS to Devbox Configuration\nDESCRIPTION: JSON configuration for adding NodeJS 18 to your Devbox environment. This adds NodeJS 18 which comes bundled with npm.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/nodejs/nodejs-pnpm/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"nodejs@18\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Superuser with Role Creation Privileges in Devbox\nDESCRIPTION: Shell command to create a PostgreSQL superuser with the ability to create new roles in a Devbox environment. This grants extensive privileges to the user.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/postgres.md#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncreateuser -s -r your_new_user_name\n```\n\n----------------------------------------\n\nTITLE: Running Direct Commands with Devbox Global Run\nDESCRIPTION: Shows examples of using 'devbox global run' to execute direct commands. It demonstrates adding a package (cowsay), running it directly, and passing arguments using the -- separator.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_run.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  devbox add cowsay\n  devbox global run cowsay hello\n  devbox global run -- cowsay -d hello\n```\n\n----------------------------------------\n\nTITLE: Using Devbox Global Services Command in Bash\nDESCRIPTION: This command allows interaction with Devbox services for global packages. It mirrors the functionality of 'devbox services' but applies to global packages instead of project-specific ones.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_services.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global services [command]\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Package Configuration\nDESCRIPTION: JSON configuration showing the required package entry for adding RabbitMQ server to a Devbox project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/rabbitmq.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"rabbitmq-server@latest\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Exporting Secrets to a File\nDESCRIPTION: This command demonstrates how to export secrets from the dev environment to a .env file using devbox secrets download. It confirms the successful download of environment variables.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/secrets/secrets_cli.md#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndevbox secrets download .env\n[DONE] Downloaded environment variables to '.env' for environment: dev\n```\n\n----------------------------------------\n\nTITLE: Using devbox shellenv Command in Bash\nDESCRIPTION: Example syntax for using the devbox shellenv command. This command prints shell commands that add Devbox packages to your PATH.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_shellenv.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox shellenv [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox Zsh Completion for macOS\nDESCRIPTION: Command to generate and install the Devbox Zsh completion script for macOS systems using Homebrew. This places the completion file in the Homebrew-managed Zsh site-functions directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_zsh.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndevbox completion zsh > $(brew --prefix)/share/zsh/site-functions/_devbox\n```\n\n----------------------------------------\n\nTITLE: Testing Package Availability in Pure Mode\nDESCRIPTION: Confirms that packages defined in devbox.json are available and executable in pure mode.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/pure.test.txt#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox run --pure hello\nstdout 'Hello, world!'\n```\n\n----------------------------------------\n\nTITLE: Installing .NET SDK Configuration in Devbox\nDESCRIPTION: JSON configuration for adding the latest .NET SDK to a Devbox project's package list.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/csharp.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"dotnet-sdk@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Listing Project Secrets\nDESCRIPTION: This command and its output demonstrate how to view all secrets across different environments using devbox secrets ls. It shows secrets in dev, prod, and preview environments with masked values.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/secrets/secrets_cli.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nEnvironment: dev\n+-----------------+-------+\n|      NAME       | VALUE |\n+-----------------+-------+\n| FOO             | ***** |\n| DEV_SERVER      | ***** |\n| PG_PASSWORD     | ***** |\n+-----------------+-------+\n\nEnvironment: prod\n+-----------------+-------+\n|      NAME       | VALUE |\n+-----------------+-------+\n| FOO             | ***** |\n| PG_PASSWORD     | ***** |\n+-----------------+-------+\n\nEnvironment: preview\n+-----------------+-------+\n|      NAME       | VALUE |\n+-----------------+-------+\n| FOO             | ***** |\n| PG_PASSWORD     | ***** |\n+-----------------+-------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox JSON\nDESCRIPTION: This is the devbox.json configuration file for the project. It currently has an empty packages array, which can be used to specify project dependencies.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/packages/flakes.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Devbox Secrets Remove Command Options\nDESCRIPTION: Available command line flags for the devbox secrets rm command, including environment selection, help option, and organization/project namespace specifications.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_rm.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --environment string   Environment name, such as dev or prod (default \"dev\")\n  -h, --help                 help for rm\n      --org-id string        Organization id to namespace secrets by\n      --project-id string    Project id to namespace secrets by\n```\n\n----------------------------------------\n\nTITLE: Referencing Env File in Devbox Config JSON\nDESCRIPTION: Shows how to reference an external env file in the devbox.json configuration. This method is useful for keeping environment variables separate from the main configuration file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/secrets.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {},\n  \"shell\": {},\n  \"env_from\": \"path/to/.env\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Devbox Bash Completion For Current Session\nDESCRIPTION: Command to load devbox autocompletion in the current bash shell session. This provides immediate autocompletion functionality without persistent configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_bash.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource <(devbox completion bash)\n```\n\n----------------------------------------\n\nTITLE: Using the Devbox Global Pull Command in Bash\nDESCRIPTION: This command allows pulling a global configuration from a file or URL. URLs must be prefixed with 'http://' or 'https://'. The command supports optional flags for help and quiet mode.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_pull.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global pull <file> | <url> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox JSON for Haskell Development\nDESCRIPTION: This JSON configuration for devbox.json installs the Stack framework, Cabal package manager, and required dependencies for Haskell development. It includes zlib for compilation support and hpack for package description conversion.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/haskell/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"stack@latest\",\n    \"cabal-install@latest\",\n    \"zlib@latest\",\n    \"hpack@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Environment Variables to Direnv Configuration\nDESCRIPTION: This command adds custom environment variables to your direnv configuration using the --env flag. The example adds a custom environment variable named MY_CUSTOM_ENV_VAR with a value of my-value.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/direnv.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox generate direnv --env MY_CUSTOM_ENV_VAR=my-value\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Command Script in Devbox Plugin JSON\nDESCRIPTION: This snippet illustrates how to define a script with multiple commands in a Devbox plugin's JSON configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/creating_plugins.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shell\": {\n        \"scripts\": {\n            \"print_twice\": [\n                \"echo \\\"Hello Once!\\\"\",\n                \"echo \\\"Hello Twice!\\\"\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Devbox Secrets Download Command in Bash\nDESCRIPTION: Command syntax for downloading environment variables from Devbox into a specified file. The command downloads variables in a NAME=VALUE per line format, typically used for .env files.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_download.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox secrets download <file1> [flags]\n```\n\n----------------------------------------\n\nTITLE: Including External Plugins in Devbox Plugin JSON\nDESCRIPTION: This snippet demonstrates how to include external plugins from GitHub repositories or local paths in a Devbox plugin's JSON configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/creating_plugins.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"include\": [\n        \"github:org/repo/ref?dir=<path-to-plugin>\",\n        \"path:path/to/plugin.json\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rails Application\nDESCRIPTION: Command to generate a new Rails application named 'blog' after entering the Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/rails/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrails new blog\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Service Process Configuration\nDESCRIPTION: YAML configuration for process-compose defining the RabbitMQ service and log monitoring processes.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/rabbitmq.md#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprocesses:\n  rabbitmq:\n    command: \"rabbitmq-server\"\n    availability:\n      restart: on_failure\n      max_restarts: 5\n    daemon: true\n    shutdown:\n      command: \"rabbitmqctl shutdown\"\n  rabbitmq-logs:\n    command: \"tail -f $RABBITMQ_LOG_BASE/$RABBITMQ_NODENAME@$(hostname -s).log\"\n    availability:\n      restart: \"always\"\n```\n\n----------------------------------------\n\nTITLE: Executing Devbox Generate Devcontainer Command in Bash\nDESCRIPTION: This command generates Dockerfile and devcontainer.json files in the .devcontainer/ directory for VSCode remote container environments. It accepts various flags to customize the generation process.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_generate_devcontainer.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox generate devcontainer [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Zig Package to Devbox Configuration\nDESCRIPTION: This JSON snippet shows how to add the latest version of Zig to the packages array in the devbox.json configuration file. This will install Zig in the Devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/zig.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"zig@latest\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Viewing MariaDB Configuration\nDESCRIPTION: Command to display MariaDB configuration information and environment variables\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/mariadb/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndevbox info mariadb\n```\n\n----------------------------------------\n\nTITLE: Devbox Secrets Command Options in Bash\nDESCRIPTION: This snippet displays the available options for the 'devbox secrets' command. Currently, it only shows the help flag, which provides assistance for using the command.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for devbox secrets\n```\n\n----------------------------------------\n\nTITLE: Adding Required Packages to Devbox\nDESCRIPTION: Command to add Ruby 3.1, Bundler, Node.js 19.x, Yarn, and SQLite packages to a Devbox project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/rails.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add ruby_3_1 bundler nodejs-19_x yarn sqlite\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Database\nDESCRIPTION: Commands for initializing and creating a new PostgreSQL database. Includes steps for database initialization, server startup, database creation, and connection.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/postgres/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninitdb\ndevbox services up\ncreatedb <name_of_db>\npsql <name_of_db>\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh Shell Completion\nDESCRIPTION: Command to enable Zsh shell completion by adding the necessary autoload command to the .zshrc file. This is required if shell completion is not already enabled in the environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_zsh.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"autoload -U compinit; compinit\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: PHP Extension Configuration in Devbox\nDESCRIPTION: Example of adding PHP extensions (ds) to the Devbox configuration alongside the base PHP installation.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/php.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"php@latest\",\n        \"php83Packages.composer\",\n        \"php83Extensions.ds\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Starting Temporalite Server with Devbox\nDESCRIPTION: Command to start the Temporalite server for testing Temporal workflows. This makes the WebUI available at localhost:8233 and the server listening on port 7233.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/cloud_development/temporal/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run start-temporal\n```\n\n----------------------------------------\n\nTITLE: Generated .envrc File with Environment Variables from a File\nDESCRIPTION: This is the content of the generated .envrc file when environment variables from a file are specified. It uses the devbox generate direnv --print-envrc command with the --env-file flag to load the environment variables.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/direnv.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Automatically sets up your devbox environment whenever you cd into this\n# directory via our direnv integration:\n\neval \"$(devbox generate direnv --print-envrc --env-file .env.devbox)\"\n\n# check out https://www.jetify.com/docs/devbox/ide_configuration/direnv/\n# for more details\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Service in Devbox\nDESCRIPTION: Command to start Redis as a background daemon service using Devbox's service management functionality.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/redis/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services start redis\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application with Devbox\nDESCRIPTION: Command to start the Spring Boot service using Devbox. This command starts the MySQL service and runs the application.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/spring/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndevbox run bootRun\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tensorflow Project with Devbox\nDESCRIPTION: Series of commands to clone the repository, navigate to the Tensorflow example directory, enter devbox shell and run the Python script.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/data_science/tensorflow/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/jetify-com/devbox.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd devbox/examples/data_science/tensorflow/\n```\n\nLANGUAGE: bash\nCODE:\n```\ndevbox shell\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: VSCode Launch Configuration for Java\nDESCRIPTION: JSON configuration for setting up Java debugging in VSCode with Devbox integration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/vscode.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"java\",\n    \"name\": \"Launch Current File\",\n    \"request\": \"launch\",\n    \"mainClass\": \"<project_directory_name>/<main_package>.<main_class>\",\n    \"projectName\": \"<project_name>\",\n    \"javaExec\": \"<path_to_java_executable_from_step_4>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding latest ripgrep package globally in Devbox\nDESCRIPTION: This example shows how to add the latest version of the 'ripgrep' package globally using the Devbox command.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_add.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global add ripgrep\n```\n\n----------------------------------------\n\nTITLE: Empty Package Configuration\nDESCRIPTION: JSON configuration file with an empty package list\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/manual.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Shell Exit Command\nDESCRIPTION: Command to exit the Devbox shell environment\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/drupal.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Opening VSCode in Devbox\nDESCRIPTION: Command to open Visual Studio Code in the current directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Generating Maven Project Structure\nDESCRIPTION: This Maven command generates a basic project structure for a Java application. It sets up the group ID, artifact ID, and uses a quickstart archetype.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -DgroupId=com.devbox.mavenapp -DartifactId=devbox-maven-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false\n```\n\n----------------------------------------\n\nTITLE: Using the devbox cache configure Command\nDESCRIPTION: Command syntax for configuring Nix to use the Devbox cache as a substituter. This command sets up necessary permissions and credentials for Devbox caches, particularly in multi-user Nix installations.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_cache_configure.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  devbox cache configure [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the devbox services stop Command in Bash\nDESCRIPTION: This command stops a specified service in Devbox. If no service is specified, it stops all running services and shuts down process-compose. The command accepts optional flags for environment variables and quiet mode.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_services_stop.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services stop [service]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Package to Devbox JSON Configuration\nDESCRIPTION: JSON snippet showing how to include MySQL 8.0 in your Devbox packages list. This configuration tells Devbox to include MySQL in your development environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mysql.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"mysql80@latest\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Testing a Custom PHP Extension in Interactive Mode\nDESCRIPTION: Command to test the skeleton_nop PHP extension in PHP's interactive mode. This extension simply returns the input string without modifications.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/flakes/php-extension/README.md#2025-04-14_snippet_0\n\nLANGUAGE: php\nCODE:\n```\necho skeleton_nop(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Running Temporal Workflow Example\nDESCRIPTION: Commands to navigate to the example directory and run a hello world Temporal workflow using the Python SDK. Must be executed from within the Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/cloud_development/temporal/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd temporal_example/hello\npython run hello_activity.py\n```\n\n----------------------------------------\n\nTITLE: Apache Environment Variables Configuration\nDESCRIPTION: Environment variables used for Apache configuration in Devbox, including log file locations, port settings, and configuration directories.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/servers/apache/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHTTPD_ACCESS_LOG_FILE={PROJECT_DIR}/.devbox/virtenv/apacheHttpd/access.log\nHTTPD_ERROR_LOG_FILE={PROJECT_DIR}/.devbox/virtenv/apacheHttpd/error.log\nHTTPD_PORT=8080\nHTTPD_DEVBOX_CONFIG_DIR={PROJECT_DIR}\nHTTPD_CONFDIR={PROJECT_DIR}/devbox.d/apacheHttpd\n```\n\n----------------------------------------\n\nTITLE: Starting Valkey Service in Devbox\nDESCRIPTION: Command to start the Valkey service as a background daemon using Devbox's service management.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/valkey/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services start valkey\n```\n\n----------------------------------------\n\nTITLE: Initializing LEPP Stack with Devbox Template\nDESCRIPTION: Commands to create a new project using the LAPP stack template and install the required packages through Devbox.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/lepp-stack/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox create --template lapp-stack\ndevbox install\n```\n\n----------------------------------------\n\nTITLE: Activating Python Environment and Installing Requirements in Devbox\nDESCRIPTION: Commands for activating a Python virtual environment and installing dependencies from requirements.txt. These commands are automatically added to the init_hook in the Devbox configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/django/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n. $VENV_DIR/bin/activate\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Global NodeJS Packages in Devbox\nDESCRIPTION: JSON configuration showing how to install global NodeJS packages in Devbox by adding them to the packages list in devbox.json. This example adds yalc and pm2 as global packages.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/nodejs/nodejs-pnpm/README.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"nodejs@18\",\n        \"nodePackages.yalc@latest\",\n        \"nodePackages.pm2@latest\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Devbox Secrets Download Command Options\nDESCRIPTION: Available command-line flags for the 'devbox secrets download' command. Options include specifying environment name, output format, and organization/project IDs for namespacing secrets.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_download.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --environment string   Environment name, such as dev or prod (default \"dev\")\n  -f, --format string        File format: env or json (default \"env\")\n  -h, --help                 help for download\n      --org-id string        Organization id to namespace secrets by\n      --project-id string    Project id to namespace secrets by\n```\n\n----------------------------------------\n\nTITLE: Schema Definition for Package Source\nDESCRIPTION: Schema structure defining package source attributes including owner, repository, and revision details\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/resolve-a-package-version.api.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"description\": \"The owner of the repository that contains the flake. Usually `NixOS`.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flake Installable Schema in JSON\nDESCRIPTION: This snippet defines the schema for the 'flake_installable' object, which contains information needed to install a package as a flake reference. It includes details about the flake reference and the attribute path to the package.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/resolve-a-package-version.api.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flake_installable\": {\n    \"type\": \"object\",\n    \"description\": \"The information needed to install this package as a flake reference.\",\n    \"properties\": {\n      \"ref\": {\n        \"type\": \"object\",\n        \"description\": \"The full Nix reference to the flake that contains this package.\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"The type of flake reference. Usually this will be `github`.\"\n          },\n          \"owner\": {\n            \"type\": \"string\",\n            \"description\": \"The owner of the repository that contains the flake. Usually `NixOS`.\"\n          },\n          \"repo\": {\n            \"type\": \"string\",\n            \"description\": \"the repository that contains the flake. Usually `nixpkgs`\"\n          },\n          \"rev\": {\n            \"type\": \"string\",\n            \"description\": \"The Git revision of the flake. This is usually a commit hash.\"\n          }\n        }\n      },\n      \"attr_path\": {\n        \"type\": \"string\",\n        \"description\": \"The attribute path to the package in the flake. This can be used to install the package with Nix or Devbox.\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Ruby Environment Variables\nDESCRIPTION: Bash environment variables that configure Gem to install packages locally. These variables set the Ruby configuration directory, Gem configuration file location, Gem home directory, and update the PATH to include the local gem binaries.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/ruby.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRUBY_CONFDIR={PROJECT_DIR}/.devbox/virtenv/ruby\nGEMRC={PROJECT_DIR}/.devbox/virtenv/ruby/.gemrc\nGEM_HOME={PROJECT_DIR}/.devbox/virtenv/ruby\nPATH={PROJECT_DIR}/.devbox/virtenv/ruby/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Go Configuration with C Dependencies\nDESCRIPTION: Extended Devbox configuration that includes Go SDK along with gcc and C libraries required for cgo support.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/go.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"packages\": [\n    \"go\",\n    \"gcc\",\n    \"libcap\"\n]\n```\n\n----------------------------------------\n\nTITLE: Adding MariaDB Package to Devbox JSON Configuration\nDESCRIPTION: JSON configuration for adding MariaDB to your Devbox environment by listing it in the packages array.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mariadb.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"mariadb@latest\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using Devbox Cache Info Command in Bash\nDESCRIPTION: This command allows users to output information about the nix cache in a devbox environment. It can be run with optional flags to control output verbosity.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_cache_info.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox cache info [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Packages in Devbox\nDESCRIPTION: JSON configuration for adding MongoDB server and shell packages to the Devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mongodb.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"mongodb@latest\",\n        \"mongosh@latest\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Testing Devbox Package Outputs for Prometheus\nDESCRIPTION: A test script that demonstrates adding Prometheus with different output configurations in Devbox. It first adds Prometheus with default outputs (which excludes promtool), then adds it with custom 'cli' and 'out' outputs to make promtool available.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_outputs.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox init\n\n# Add prometheus with default outputs. It will not have promtool.\nexec devbox add prometheus\nexec devbox run -- prometheus --version\n! exec devbox run -- promtool --version\n\n# Add prometheus with cli and out outputs. It will have promtool as well.\nexec devbox add prometheus --outputs cli,out\njson.superset devbox.json expected_devbox.json\nexec devbox run -- promtool --version\nexec devbox run -- prometheus --version\n```\n\n----------------------------------------\n\nTITLE: Using the Devbox Version Command in Bash\nDESCRIPTION: Command syntax for displaying Devbox version information. Can be used with optional 'update' subcommand and supports flags for help, verbosity, and quiet mode.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_version.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox version [update] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy via Devbox JSON Configuration\nDESCRIPTION: JSON configuration for adding Caddy to your Devbox environment. This snippet shows how to specify Caddy in the packages array of devbox.json.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/servers/caddy/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"caddy@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Running Devbox Commands for Jekyll\nDESCRIPTION: Commands to initialize Devbox, add required packages, start a shell, and run scripts for Jekyll blog setup.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/jekyll.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox init\ndevbox add ruby_3_1 bundler\ndevbox shell\ndevbox run generate\ndevbox run server\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Project with Composer\nDESCRIPTION: These commands create a new Laravel project using Composer and move its contents to the current directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/laravel.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project laravel/laravel tmp\n\nmv tmp/* tmp/.* .\n```\n\n----------------------------------------\n\nTITLE: Defining Single-Command Scripts in JSON\nDESCRIPTION: Shows how to define single-command scripts in the devbox.json file for use with devbox run.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shell\": {\n        \"scripts\": {\n            \"print_once\": \"echo \\\"Hello Once!\\\"\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple R Packages in Devbox Configuration\nDESCRIPTION: Extended devbox.json configuration showing installation of R with multiple CRAN packages including data.table, ggplot2, and tidyverse.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/data_science/R/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n      \"R@4.4.1\",\n      \"rPackages.data_table@latest\",\n      \"rPackages.ggplot2@latest\",\n      \"rPackages.tidyverse@latest\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Response Tabs in JSX\nDESCRIPTION: This code snippet defines a React component structure for displaying API response samples. It uses nested tab components to organize responses by status code and MIME type.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/search-packages.api.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiTabs>\n  <TabItem label={\"200\"} value={\"200\"}>\n    <div>\n      <MimeTabs schemaType={\"response\"}>\n        <TabItem label={\"application/json\"} value={\"application/json\"}>\n          <SchemaTabs>\n            <TabItem label={\"Schema\"} value={\"Schema\"}>\n              <details style={{}} data-collapsed={false} open={true}>\n                <summary style={{}}>\n                  <strong>Schema</strong>\n                </summary>\n                <div style={{ textAlign: \"left\", marginLeft: \"1rem\" }}>\n                </div>\n                <ul style={{ marginLeft: \"1rem\" }}>\n                  {Object.entries(responseProperties).map(([name, value]) => (\n                    <SchemaItem key={name} {...value} name={name} />\n                  ))}\n                </ul>\n              </details>\n            </TabItem>\n            <TabItem label={\"Example (from schema)\"} value={\"Example (from schema)\"}>\n              <ResponseSamples responseExample={exampleFromSchema} language={\"json\"} />\n            </TabItem>\n            <TabItem label={\"Example\"} value={\"Example\"}>\n              <ResponseSamples responseExample={example} language={\"json\"} />\n            </TabItem>\n          </SchemaTabs>\n        </TabItem>\n      </MimeTabs>\n    </div>\n  </TabItem>\n</ApiTabs>\n```\n\n----------------------------------------\n\nTITLE: Setting Nginx Environment Variables in Bash\nDESCRIPTION: This Bash snippet defines environment variables for Nginx configuration. These variables specify the locations of various Nginx-related directories and files, allowing for easy customization of the Nginx setup within the Devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/servers/nginx/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNGINX_CONFDIR=devbox.d/nginx/nginx.conf\nNGINX_PATH_PREFIX=.devbox/virtenv/nginx\nNGINX_TMPDIR=.devbox/virtenv/nginx/temp\n```\n\n----------------------------------------\n\nTITLE: Listing Globally Installed Packages in Devbox (Bash)\nDESCRIPTION: This command lists all packages installed globally in Devbox. It can be used with optional package names and flags. The command supports a quiet mode to suppress logs.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_list.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global list <pkg>... [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting up MariaDB for Laravel\nDESCRIPTION: This script starts the MariaDB service, creates the default Laravel database, and then stops the service. It's executed within the Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/laravel.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Start the MariaDB service\ndevbox services up mariadb -b\n\n# Create the database\nmysql -u root -e \"CREATE DATABASE laravel;\"\n\n# Once you're done, stop the MariaDB service\ndevbox services stop mariadb\n```\n\n----------------------------------------\n\nTITLE: MongoDB Service Configuration in Process Compose\nDESCRIPTION: YAML configuration for the MongoDB service defining the command, restart policy, and failure handling.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mongodb.md#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprocesses:\n  mongodb:\n    command: \"mongod --config=$MONGODB_CONFIG --dbpath=$MONGODB_DATA --bind_ip_all\"\n    availability:\n      restart: on_failure\n      max_restarts: 5\n```\n\n----------------------------------------\n\nTITLE: Example of searching for 'ripgrep' package using devbox search\nDESCRIPTION: This example shows how to use the 'devbox search' command to search for the 'ripgrep' package. It displays the search results, including available versions, and provides instructions on how to add a specific version to the project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_search.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ devbox search ripgrep\n\nWarning: Search is experimental and may not work as expected.\n\nFound 8+ results for \"ripgrep\":\n\n* ripgrep (13.0.0, 12.1.1, 12.0.1)\n* ripgrep-all (0.9.6, 0.9.5)\n\n# To add ripgrep 12.1.1 to your project:\n\n$ devbox add ripgrep@12.1.1\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Database\nDESCRIPTION: Command to connect to the MySQL database using DevBox run command\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/mysql/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run connect_db\n```\n\n----------------------------------------\n\nTITLE: Executing Devbox Generate Direnv Command in Bash\nDESCRIPTION: This command generates a .envrc file for a Devbox project. It can be customized with various flags to specify configuration paths, environment variables, and output preferences.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_generate_direnv.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox generate direnv [flags]\n```\n\n----------------------------------------\n\nTITLE: Including PHP Plugin in Devbox Configuration\nDESCRIPTION: This snippet demonstrates how to manually include the PHP plugin in a Devbox configuration file. It shows the use of the 'include' field to add the PHP plugin.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/php/latest/README.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"include\": [\n        \"plugin:php\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Elixir Plugin in Devbox Configuration\nDESCRIPTION: JSON configuration to disable the Elixir plugin while maintaining package installation.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/elixir.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"elixir\": {\n            \"version\": \"latest\",\n            \"disable_plugin\": true\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET SDK in devbox.json\nDESCRIPTION: JSON configuration to add the latest version of .NET SDK to a Devbox project. This enables F# and .NET development capabilities in the development environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/fsharp/hello-world/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"dotnet-sdk@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Installing Process Compose Using Nix Flake\nDESCRIPTION: Demonstrates how to install the latest version of Process Compose from the main branch using a Nix Flake reference.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/using_flakes.md#2025-04-14_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\ngithub:F1bonacc1/process-compose\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Configuration in Devbox\nDESCRIPTION: Configuration for setting locale-specific environment variables in devbox.json to resolve R startup locale warnings.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/data_science/R/README.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shell\": {\n    \"init_hook\": [\n      \"export LANG=en_NZ.UTF-8\",\n      \"export LC_ALL=en_NZ.UTF-8\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Caddy Environment Variables Configuration in Devbox\nDESCRIPTION: Environment variables created by the Devbox Caddy plugin. These variables define the location of the Caddyfile configuration, log directory, and web root directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/servers/caddy/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n* CADDY_CONFIG={PROJECT_DIR}/devbox.d/caddy/Caddyfile\n* CADDY_LOG_DIR={PROJECT_DIR}/.devbox/virtenv/caddy/log\n* CADDY_ROOT_DIR={PROJECT_DIR}/devbox.d/web\n```\n\n----------------------------------------\n\nTITLE: Starting Django Development Server\nDESCRIPTION: Command to run the Django development server, making the application accessible at localhost:8000.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/django.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython todo_project/manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Running Django Migrations in Devbox\nDESCRIPTION: Commands to generate and apply Django migrations to create the necessary database tables. This prepares the database schema for the Django application.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/django/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython todo_project/manage.py makemigrations\npython todo_project/manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeJS with Yarn in Devbox\nDESCRIPTION: This code snippet illustrates how to configure both NodeJS and Yarn in the Devbox environment. It specifies NodeJS version 18 and the latest version of Yarn as packages in the devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/nodejs/nodejs-yarn/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"nodejs@18\",\n    \"yarn@latest\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Package Configuration in Devbox\nDESCRIPTION: JSON configuration for adding NGINX package to devbox.json file to install the latest version of NGINX.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/servers/nginx.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"nginx@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Disabling MariaDB Plugin in Devbox JSON Configuration\nDESCRIPTION: JSON configuration for disabling the MariaDB plugin while keeping the package installed, using the disable_plugin property in the Devbox configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mariadb.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"mariadb\": {\n            \"version\": \"latest\",\n            \"disable_plugin\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Devbox Secrets Initialization in Bash\nDESCRIPTION: This command initializes devbox secrets in the project directory, creating or connecting to an existing Jetify cloud project. It can be run with optional flags.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_init.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox secrets init [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Global Packages to Zsh Configuration\nDESCRIPTION: This adds the Devbox global packages to your ~/.zshrc file, making them permanently available in all new Zsh shell sessions. The command loads your global profile during shell initialization.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_global.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(devbox global shellenv --init-hook)\"\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for NixHub Package Version Resolution\nDESCRIPTION: An example of a GET request to the /resolve endpoint that requires two query parameters: 'name' (a valid Nixpkgs package name) and 'version' (the version string to resolve).\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/resolve-a-package-version.api.mdx#2025-04-14_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /resolve?name={packageName}&version={versionString}\n```\n\n----------------------------------------\n\nTITLE: Testing Devbox Plugin with Python Installation\nDESCRIPTION: Shell commands that test Devbox initialization, adding Python package with and without plugin, and verifying the expected outputs and configurations.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/plugin.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox init\nexec devbox add python\nstderr 'This plugin'\n\nexec devbox run ls .devbox/virtenv/python\n\njson.superset devbox.json expected_devbox.json\n\nexec devbox add python --disable-plugin\nexec devbox add hello\n\njson.superset devbox.json expected_devbox2.json\n```\n\n----------------------------------------\n\nTITLE: Service Management Commands\nDESCRIPTION: Commands for starting and stopping PHP, MySQL, and NGINX services in Devbox\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/drupal.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run start_services\ndevbox run stop_services\n```\n\n----------------------------------------\n\nTITLE: Configuring Nim Packages in Devbox JSON\nDESCRIPTION: This JSON snippet shows the configuration for adding Nim, Nimble, and OpenSSL to a Devbox project. It specifies the latest versions of each package to be installed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/nim.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"nim@latest\",\n        \"nimble-unwrapped@latest\",\n        \"openssl_1_1@latest\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding Apache Package to Devbox Configuration\nDESCRIPTION: JSON configuration snippet for adding Apache to your devbox.json file, which will install the latest version of Apache in your Devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/servers/apache.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"apache@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox Packages\nDESCRIPTION: Command to install the required packages defined in the Devbox configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/rails/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox install\n```\n\n----------------------------------------\n\nTITLE: Starting Rails Server in Devbox Shell\nDESCRIPTION: Commands to navigate to the blog directory and start the Rails server after installing dependencies with Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/rails.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd blog\nbin/rails server\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Service with Devbox\nDESCRIPTION: Command to start the MySQL service using Devbox. This is required before initializing the database for the Spring Boot application.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/spring.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndevbox services up\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Flakes in devbox.json\nDESCRIPTION: Demonstrates how to reference remote flakes from GitHub in your devbox.json configuration. This example installs the 'hello' package from a specific Nixpkgs commit and the default output from the process-compose repository.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/flakes/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"github:nixos/nixpkgs/5233fd2ba76a3accb5aaa999c00509a11fd0793c#hello\",\n    \"github:F1bonacc1/process-compose\"\n  ],\n  \"shell\": {\n    \"init_hook\": null\n  },\n  \"nixpkgs\": {\n    \"commit\": \"f80ac848e3d6f0c12c52758c0f25c10c97ca3b62\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Global Packages to Current Shell Session with Devbox\nDESCRIPTION: This command sources the output of 'devbox global shellenv' to add global Devbox packages to the PATH of your current shell session only.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_shellenv.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n. <(devbox global shellenv)\n```\n\n----------------------------------------\n\nTITLE: Using the Devbox Secrets List Command in Bash\nDESCRIPTION: Command syntax for listing stored environment variables in Devbox. When executed, this command shows all environment variables, with optional filtering by environment name.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_list.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox secrets list [flags]\n```\n\n----------------------------------------\n\nTITLE: Generated .envrc File with Custom Environment Variables\nDESCRIPTION: This is the content of the generated .envrc file when custom environment variables are specified. It uses the devbox generate direnv --print-envrc command with the --env flag to set the environment variables.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/direnv.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Automatically sets up your devbox environment whenever you cd into this\n# directory via our direnv integration:\n\neval \"$(devbox generate direnv --print-envrc --env MY_CUSTOM_ENV_VAR=my-value)\"\n\n# check out https://www.jetify.com/docs/devbox/ide_configuration/direnv/\n# for more details\n```\n\n----------------------------------------\n\nTITLE: Initializing a Devbox Secrets Project\nDESCRIPTION: This command initializes a new project in Jetify Cloud and configures it to use Jetify Secrets. It prompts for confirmation and project name before creating the project in the organization.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/secrets/secrets_cli.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/Users/puckworth/my-project❯ devbox secrets init\n? Setup project in /Users/puckworth/my-project? Yes\nInitializing project in org\n? What's the name of your new project? my-test-project\nCreated project my-test-project in org\n```\n\n----------------------------------------\n\nTITLE: Available Command Options\nDESCRIPTION: Configuration options for the secrets upload command including environment selection, format specification, and organization/project namespacing.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_upload.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --environment string   Environment name, such as dev or prod (default \"dev\")\n  -f, --format string        File format: env or json (default \"env\")\n  -h, --help                 help for upload\n      --org-id string        Organization id to namespace secrets by\n      --project-id string    Project id to namespace secrets by\n```\n\n----------------------------------------\n\nTITLE: Service Management Commands\nDESCRIPTION: Commands for managing MariaDB service state within Devbox\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/mariadb/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services start|stop [service]\n```\n\n----------------------------------------\n\nTITLE: Poetry Configuration\nDESCRIPTION: Setup for using Poetry as the Python package and dependency manager.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/python.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"python3\",\n        \"poetry\"\n    ],\n    \"shell\": {\n        \"init_hook\": \"poetry shell\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling NGINX Plugin Configuration\nDESCRIPTION: JSON configuration to disable the NGINX plugin in devbox.json by setting the disable_plugin flag.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/servers/nginx.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"nginx\": {\n      \"version\": \"latest\",\n      \"disable_plugin\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Project and Setting Up Direnv\nDESCRIPTION: This snippet shows the commands to initialize a Devbox project, generate direnv configuration, and check for an existing .envrc file. It demonstrates the basic setup process for a Devbox development environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/generate/direnv.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox init\nexec devbox generate direnv\nexists .envrc\n```\n\n----------------------------------------\n\nTITLE: Devbox JSON configuration for platform-excluded packages\nDESCRIPTION: Example of how platform-excluded packages are represented in the devbox.json configuration file. This shows the structure for packages that should be installed on all platforms except those explicitly excluded.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/platform_specific_packages.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"ripgrep\": {\n            \"version\": \"latest\",\n            \"excluded_platforms\": [\"aarch64-darwin\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive PostgreSQL User in Devbox\nDESCRIPTION: Shell command to create a new PostgreSQL user interactively in a Devbox environment. This step is required for user management.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/postgres.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncreateuser --interactive\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages with Devbox\nDESCRIPTION: Command to add PostgreSQL 14, PHP 8.1 with PostgreSQL extension, and Nginx 1.24 to a Devbox project using the devbox add command. This ensures that appropriate plugins are activated.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/lepp.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add postgresql@14 php@8.1 php81Extensions.pgsql@latest nginx@1.24\n```\n\n----------------------------------------\n\nTITLE: Using the Devbox Services Attach Command in Bash\nDESCRIPTION: This command attaches to a running instance of devbox services launched in the background with 'devbox services up -b'. It opens the TUI for process-compose, but note that closing the TUI won't stop backgrounded services.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_services_attach.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services attach [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting a Secret Command Output\nDESCRIPTION: This shows the output after successfully setting a secret using the devbox secrets set command, confirming that the variable FOO has been set in the dev environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/secrets/secrets_cli.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[DONE] Set environment variable 'FOO' in environment: dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Whitelist Settings for Direnv\nDESCRIPTION: This TOML configuration enables automatic reloading of direnv when changes are made to a whitelisted project directory. It should be added to the direnv config file at ~/.config/direnv/direnv.toml.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/direnv.md#2025-04-14_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[whitelist]\nprefix = [ \"/absolute/path/to/project\" ]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JDK in Devbox JSON\nDESCRIPTION: This snippet shows how to add the JDK and binutils packages to the devbox.json file. It installs the latest version of the JDK and binutils.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/gradle/hello-world/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"jdk@latest\",\n    \"binutils@latest\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: Starting Valkey Server via Manual Command in Bash\nDESCRIPTION: This command shows how to manually start the Valkey server in the foreground using environment variables for configuration and port settings.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/valkey/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvalkey-server $VALKEY_CONF --port $VALKEY_PORT\n```\n\n----------------------------------------\n\nTITLE: Bundler Configuration Example\nDESCRIPTION: Example of a bundler configuration file (.bundle/config) that passes build flags to specific gems. This example disables Link Time Optimization for the sassc gem compilation.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/ruby.md#2025-04-14_snippet_3\n\nLANGUAGE: dotenv\nCODE:\n```\nBUNDLE_BUILD__SASSC: \"--disable-lto\"\n```\n\n----------------------------------------\n\nTITLE: Setting Elixir Environment Variables\nDESCRIPTION: Environment variable configuration for Mix/Hex artifacts and IEx shell history.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/elixir.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMIX_HOME={PROJECT_DIR}/.devbox/virtenv/elixir/mix\nHEX_HOME={PROJECT_DIR}/.devbox/virtenv/elixir/hex\nERL_AFLAGS=\"-kernel shell_history enabled\"\n```\n\n----------------------------------------\n\nTITLE: Adding Caddy Package to Devbox JSON Configuration\nDESCRIPTION: JSON configuration to add Caddy to your Devbox project. This adds the latest version of Caddy to your development environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/servers/caddy.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"caddy@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rails Application\nDESCRIPTION: Command to create a new Rails application named 'blog' once inside the Devbox shell with Rails installed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/rails.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrails new blog\n```\n\n----------------------------------------\n\nTITLE: Devbox JSON configuration for platform-specific packages\nDESCRIPTION: Example of how platform-specific packages are represented in the devbox.json configuration file. This shows the structure for packages that should only be installed on specified platforms.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/platform_specific_packages.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"busybox\": {\n            \"version\": \"latest\",\n            \"platforms\": [\"x86_64-linux\", \"aarch64-linux\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Devbox Environment\nDESCRIPTION: This snippet shows a series of Devbox commands for initializing an environment, adding and removing packages, and running commands. It tests the basic functionality of Devbox package management and command execution.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/multi.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox init\n\nexec devbox add hello vim\nexec devbox run hello\nstdout 'Hello, world!'\n\nexec devbox rm vim hello\n! exec devbox run hello\n! exec devbox run vim\n\njson.superset devbox.json expected.json\n\n# Check that profile history was cleaned up. There should only be\n# default and default-N-link.\nglob -count=2 .devbox/nix/profile/*\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Environment Variables\nDESCRIPTION: Bash environment variables set by the Redis plugin. These variables define the Redis port and the path to the Redis configuration file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/redis.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_PORT=6379\nREDIS_CONF=./devbox.d/redis/redis.conf\n```\n\n----------------------------------------\n\nTITLE: Devbox Configuration for Gradle Java Project\nDESCRIPTION: This Devbox configuration specifies the required packages for a Java project using Gradle. It includes Gradle, JDK, and binutils.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/java.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"gradle\",\n    \"jdk\",\n    \"binutils\"\n  ],\n  \"shell\": {\n    \"init_hook\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning a Specific Devbox Version using Environment Variable\nDESCRIPTION: Command to set the DEVBOX_USE_VERSION environment variable which pins Devbox to a specific version (0.8.0 in this example). This works even if a newer version is installed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/installing_devbox.mdx#2025-04-14_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport DEVBOX_USE_VERSION=0.8.0\n```\n\n----------------------------------------\n\nTITLE: Devbox Secrets Set Command Options in Bash\nDESCRIPTION: Available flags and options for the 'devbox secrets set' command, including environment specification, help flag, and options to namespace secrets by organization or project ID.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_set.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --environment string   Environment name, such as dev or prod (default \"dev\")\n  -h, --help                 help for set\n      --org-id string        Organization id to namespace secrets by\n      --project-id string    Project id to namespace secrets by\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Devbox Version using Nix Flake\nDESCRIPTION: Command to install a specific version of Devbox using Nix Flakes. This example installs version 0.13.2, only supporting versions 0.13.2 and above.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/installing_devbox.mdx#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnix profile install github:jetify-com/devbox/0.13.2\n```\n\n----------------------------------------\n\nTITLE: Sample Maven Project Command\nDESCRIPTION: Command to generate a new Maven project using the maven-archetype-quickstart template. This creates a basic Java application structure with a sample App class and POM configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/maven/hello-world/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -DgroupId=com.devbox.mavenapp -DartifactId=devbox-maven-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Environment Variables in Devbox\nDESCRIPTION: Default environment variables set by the Caddy plugin. These variables define the locations of the Caddyfile configuration, log directory, and web root directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/servers/caddy.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n* CADDY_CONFIG={PROJECT_DIR}/devbox.d/caddy/Caddyfile\n* CADDY_LOG_DIR={PROJECT_DIR}/.devbox/virtenv/caddy/log\n* CADDY_ROOT_DIR={PROJECT_DIR}/devbox.d/web\n```\n\n----------------------------------------\n\nTITLE: Starting a Rails Server in Devbox\nDESCRIPTION: Commands to navigate to the blog directory and start the Rails server after entering the Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/rails/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd blog\nbin/rails server\n```\n\n----------------------------------------\n\nTITLE: Disabling MySQL Plugin in Devbox JSON\nDESCRIPTION: JSON configuration example showing how to disable the MySQL plugin for a specific package. This is done by setting the disable_plugin field to true in the package definition.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mysql.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"mysql80\": {\n            \"version\": \"latest\",\n            \"disable_plugin\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Jekyll Server\nDESCRIPTION: Command to start the Jekyll server after project generation.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/jekyll/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run serve\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Bun in Devbox\nDESCRIPTION: Command to start the development server and watch for changes using Bun in a Devbox project. Typically used for running the project in development mode.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/bun/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run dev\n```\n\n----------------------------------------\n\nTITLE: Setting a Secret via Command Line\nDESCRIPTION: This command sets a secret named FOO with value BAR in the default dev environment. It shows how to use the devbox secrets set command for adding individual secrets.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/secrets/secrets_cli.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenvsec set FOO=BAR\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Packages in Devbox Configuration\nDESCRIPTION: JSON configuration for installing Ruby 3.1 and Bundler in devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/ruby/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"ruby@3.1\",\n        \"bundler@latest\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler Settings\nDESCRIPTION: Example of Bundler configuration file (.bundle/config) showing how to set build flags for gems.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/ruby/README.md#2025-04-14_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nBUNDLE_BUILD__SASSC: \"--disable-lto\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Global Package\nDESCRIPTION: This command shows how to remove a package (ripgrep in this example) from your global Devbox profile when it's no longer needed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_global.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global rm ripgrep\n\n# Output:\nremoving 'github:NixOS/nixpkgs/ripgrep'\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Devbox Version with Environment Variable\nDESCRIPTION: Shows how to roll back to a previous version of Devbox by setting the DEVBOX_USE_VERSION environment variable in your shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/faq.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport DEVBOX_USE_VERSION=0.8.0\n```\n\n----------------------------------------\n\nTITLE: Defining Last Updated and Outputs Schema in JSON\nDESCRIPTION: This snippet defines the schema for the 'last_updated' field and the 'outputs' array. The 'last_updated' field indicates when the package was last updated in the Nixpkgs repo, while the 'outputs' array contains additional package information.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/resolve-a-package-version.api.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"last_updated\": {\n    \"type\": \"string\",\n    \"description\": \"The last time this package was updated in the Nixpkgs repo\"\n  },\n  \"outputs\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"object\"\n    },\n    \"description\": \"Additional package output information\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Flakes in devbox.json\nDESCRIPTION: Shows how to reference local flakes in your devbox.json configuration using the path syntax. This example installs the 'php' and 'hello' outputs from a local flake directory named 'my-php-flake'.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/flakes/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"path:my-php-flake#php\",\n    \"path:my-php-flake#hello\"\n  ],\n  \"shell\": {\n    \"init_hook\": null\n  },\n  \"nixpkgs\": {\n    \"commit\": \"f80ac848e3d6f0c12c52758c0f25c10c97ca3b62\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Testing psycopg2 Connection\nDESCRIPTION: This Python script imports psycopg2 and attempts to establish a connection to a PostgreSQL database, catching any operational errors.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_old_glibc.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(dbname=\"test\", user=\"postgres\")\nexcept psycopg2.OperationalError:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Custom Virtual Environment Path Configuration\nDESCRIPTION: Configuration showing how to customize the virtual environment path and auto-activate it.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/python.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"python@3.10\"\n    ],\n    \"env\": {\n        \"VENV_DIR\": \".venv\"\n    },\n    \"shell\": {\n        \"init_hook\": \". $VENV_DIR/bin/activate\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Host in Devbox JSON\nDESCRIPTION: JSON configuration to set a custom PostgreSQL socket path using the PGHOST environment variable in devbox.json. This is needed when the default socket filepath exceeds the 100 character limit.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/lepp.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"env\": {\n    \"PGHOST\": \"/<some-shorter-path>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Zig Project\nDESCRIPTION: Command to build and install a Zig project using the Zig build system.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/zig/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzig build install\n```\n\n----------------------------------------\n\nTITLE: Devbox Configuration for Python Environment\nDESCRIPTION: JSON configuration for a Devbox project that sets up Python with specific environment variables to control pip behavior and provides a shell script for virtualenv activation.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_missing_ref.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"python\": \"latest\"\n  },\n  \"env\": {\n    \"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\",\n    \"PIP_NO_INPUT\":                  \"1\",\n    \"PIP_NO_PYTHON_VERSION_WARNING\": \"1\",\n    \"PIP_PROGRESS_BAR\":              \"off\",\n    \"PIP_REQUIRE_VIRTUALENV\":        \"1\",\n    \"PIP_ROOT_USER_ACTION\":          \"ignore\"\n  },\n  \"shell\": {\n    \"scripts\": {\n      \"venv\": \". $VENV_DIR/bin/activate && \\\"$@\\\"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Jetify Devspace from GitHub URL\nDESCRIPTION: This code snippet demonstrates how to create a Jetify Devspace by prepending a specific URL to any GitHub repository URL. It allows users to quickly open a Devspace for any GitHub project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/devspace/start_a_devspace.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://cloud.jetify.com/new/\n```\n\n----------------------------------------\n\nTITLE: Setting a Secret for a Specific Environment\nDESCRIPTION: This command demonstrates how to set a secret for a specific environment by using the --environment flag. In this example, it sets FOO=BAR in the prod environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/secrets/secrets_cli.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox secrets set FOO=BAR --environment prod\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET SDK in devbox.json\nDESCRIPTION: JSON configuration for adding the latest .NET SDK to a Devbox project. This configuration is added to the devbox.json file to specify the required .NET SDK package.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/csharp/hello-world/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"dotnet-sdk@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun in Devbox\nDESCRIPTION: Command to install project dependencies using Bun package manager in a Devbox environment. Equivalent to 'npm install' or 'yarn install'.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/bun/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run bun install\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox on NixOS\nDESCRIPTION: Command to install Devbox directly through the Nix Package Manager on a NixOS system. Uses nix-env to install from the nixos repository.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/installing_devbox.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -iA nixos.devbox\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for Nix Package Attributes in JSON\nDESCRIPTION: This snippet defines the schema for various attributes of a Nix package, including owner, repo, and revision information for the flake containing the package.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/resolve-a-package-version.api.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"description\": \"The owner of the repository that contains the flake. Usually `NixOS`.\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"description\": \"the repository that contains the flake. Usually `nixpkgs`\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"description\": \"The Git revision of the flake. This is usually a commit hash.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jekyll with Gem in Devbox Init Hook\nDESCRIPTION: A command to add to your Devbox init hook for installing the Jekyll gem with a specific version constraint.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/jekyll.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"gem install jekyll --version \\\"~> 3.9.2\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Java Home in Gradle Properties\nDESCRIPTION: This Gradle properties file sets the Java home directory. The <JAVA_HOME_VALUE> should be replaced with the actual path obtained from the Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/gradle/hello-world/README.md#2025-04-14_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\n/* gradle.properties */\norg.gradle.java.home=<JAVA_HOME_VALUE>\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Service with Devbox\nDESCRIPTION: Command to start the MySQL service using Devbox.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/spring/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndevbox services up\n```\n\n----------------------------------------\n\nTITLE: NGINX Environment Variables Configuration\nDESCRIPTION: Default environment variables used by the NGINX plugin for configuring paths and directories.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/servers/nginx.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNGINX_CONFDIR=devbox.d/nginx/nginx.conf\nNGINX_PATH_PREFIX=.devbox/virtenv/nginx\nNGINX_TMPDIR=.devbox/virtenv/nginx/temp\n```\n\n----------------------------------------\n\nTITLE: Manual ERL_AFLAGS Configuration\nDESCRIPTION: Environment variable configuration for preserving IEx shell history when plugin is disabled.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/elixir.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"env\": {\n      \"ERL_AFLAGS\": \"-kernel shell_history enabled\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Connecting to Upstash Redis in Python\nDESCRIPTION: Example code showing how to establish a connection to Upstash Redis using environment variables in Python. The code demonstrates using the redis-py client to create a secure SSL connection with host, password, and port credentials stored in environment variables.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/deploys/integrations/upstash.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport redis\n\nredis_cache = redis.StrictRedis(\n    host=os.getenv('REDIS_HOST'),\n    password=os.getenv('REDIS_PASSWORD'),\n    port=os.getenv('REDIS_PORT'),\n    ssl=True\n)\n```\n\n----------------------------------------\n\nTITLE: Opening Devbox Repo in Jetify Devspace\nDESCRIPTION: This code snippet shows an example of how to open the Devbox repository in a Jetify Devspace using the prepended URL method. It combines the Jetify URL with the GitHub repository URL.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/devspace/start_a_devspace.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://cloud.jetify.com/new/github.com/jetify-com/devbox\n```\n\n----------------------------------------\n\nTITLE: Creating LAPP Stack Project with Devbox\nDESCRIPTION: This snippet shows how to create a new LAPP stack project using Devbox. It uses the 'lapp-stack' template and installs necessary dependencies.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/lapp-stack/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox create --template lapp-stack\ndevbox install\n```\n\n----------------------------------------\n\nTITLE: Adding Global Packages to Bash Configuration\nDESCRIPTION: This adds the Devbox global packages to your ~/.bashrc file, making them permanently available in all new Bash shell sessions. The command loads your global profile during shell initialization.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_global.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(devbox global shellenv --init-hook)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Rust Toolchain with Fenix\nDESCRIPTION: Demonstrates how to use Fenix to install a specific Rust toolchain by referencing a particular attribute in the Flake.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/using_flakes.md#2025-04-14_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\ngithub:nix-community/fenix#stable.toolchain\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox on non-NixOS systems with Nix\nDESCRIPTION: Command to install Devbox using the Nix Package Manager on a non-NixOS system that has Nix installed. Uses nix-env to install from nixpkgs.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/installing_devbox.mdx#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -iA nixpkgs.devbox\n```\n\n----------------------------------------\n\nTITLE: Schema Definition for Package Outputs\nDESCRIPTION: Schema for package outputs array defining properties like name, path, default status and NAR file location\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/resolve-a-package-version.api.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"boolean\",\n  \"description\": \"Whether this output is the default output for the package\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Apache Package Configuration in Devbox\nDESCRIPTION: JSON configuration for installing Apache in devbox.json file. Specifies the package name and version to be installed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/servers/apache/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": [\n    \"apache@latest\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Adding Devbox Badge to README (HTML)\nDESCRIPTION: HTML code to add a Devbox badge to a project's README file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/quickstart.mdx#2025-04-14_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.jetify.com/devbox/docs/contributor-quickstart/\">\n    <img\n        src=\"https://www.jetify.com/img/devbox/shield_galaxy.svg\"\n        alt=\"Built with Devbox\"\n    />\n</a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.jetify.com/devbox/docs/contributor-quickstart/\">\n    <img\n        src=\"https://www.jetify.com/img/devbox/shield_moon.svg\"\n        alt=\"Built with Devbox\"\n    />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Expected Devbox Configuration with Prometheus Outputs\nDESCRIPTION: The expected Devbox configuration after adding Prometheus with custom outputs. It specifies the 'cli' and 'out' outputs for the Prometheus package to enable additional tools like promtool.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_outputs.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"prometheus\": {\n      \"version\": \"latest\",\n      \"outputs\": [\"cli\", \"out\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Maven Project\nDESCRIPTION: These commands build the Maven project and run the compiled Java application. The 'mvn package' command compiles and packages the project, while the 'java' command executes the resulting JAR file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn package\njava -cp target/devbox-maven-app-1.0-SNAPSHOT.jar com.devbox.mavenapp.App\n```\n\n----------------------------------------\n\nTITLE: Disabling Redis Plugin in Devbox Configuration\nDESCRIPTION: JSON configuration to disable the Redis plugin in Devbox. This snippet demonstrates how to set the 'disable_plugin' flag for the Redis package in your Devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/redis.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"redis\": {\n            \"version\": \"latest\",\n            \"disable_plugin\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Environment Variables Configuration\nDESCRIPTION: Bash environment variables for MongoDB configuration and data directory paths.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mongodb.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMONGODB_CONFIG = ./devbox.d/mongodb/mongod.conf\n# Tells Devbox where to look for your mongod.conf file\nMONGODB_DATA = ./devbox/virtenv/mongodb/data\n# Tells Devbox where MongoDB's data directory should be located\n```\n\n----------------------------------------\n\nTITLE: Configuring Go with C Libraries in Devbox\nDESCRIPTION: This snippet illustrates how to configure devbox.json for a Go project that requires additional C libraries. It includes Go, GCC, and libcap as an example of handling cgo and C dependencies.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/go/hello-world/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"packages\": [\n    \"go\",\n    \"gcc\",\n    \"libcap\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating and Installing Jekyll Project with Devbox\nDESCRIPTION: Commands for creating a new Jekyll project using a template and installing required packages.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/jekyll/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox create --template jekyll\ndevbox install\n```\n\n----------------------------------------\n\nTITLE: Excluding busybox installation on macOS in Devbox\nDESCRIPTION: This example shows how to add the 'busybox' package globally while excluding its installation on macOS platforms using the '--exclude-platform' flag.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_add.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global add busybox --exclude-platform aarch64-darwin,x86_64-darwin\n```\n\n----------------------------------------\n\nTITLE: Running Nix Garbage Collection in Devbox\nDESCRIPTION: Command for cleaning up unused packages from the Nix store to free up disk space, using experimental nix-command features.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/faq.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run -- nix store gc --extra-experimental-features nix-command\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Devbox CLI\nDESCRIPTION: Command to initiate browser-based authentication flow for accessing the Jetify build cache\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/cache/authenticating.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox auth login\n```\n\n----------------------------------------\n\nTITLE: Testing Devbox Global Package Installation Workflow in Bash\nDESCRIPTION: This script tests the process of adding packages globally in Devbox. It first checks if ripgrep and vim are installed, adds them globally, recomputes the shell environment, and then verifies they are correctly installed by checking their versions.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/global_add.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n! exec rg --version\n! exec vim --version\nexec devbox global add ripgrep vim\n\nexec devbox global shellenv --recompute\nsource.path\nexec rg --version\nexec vim --version\n```\n\n----------------------------------------\n\nTITLE: Adding Global Packages to Fish Configuration\nDESCRIPTION: This adds the Devbox global packages to your Fish shell configuration, making them permanently available in all new Fish shell sessions. Fish uses a different syntax for evaluating command output.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_global.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global shellenv --init-hook | source\n```\n\n----------------------------------------\n\nTITLE: Creating Database from SQL File\nDESCRIPTION: Command to create a database using a SQL setup file, connecting via Unix socket with no password\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/mariadb/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql --socket-path=$MYSQL_UNIX_PORT --password='' < setup_db.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetify Secrets in JSON\nDESCRIPTION: Shows how to configure Jetify Secrets for secure secret loading in the devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"env_from\": \"jetify-cloud\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Bun in Devbox Project\nDESCRIPTION: Command to update Bun to the latest version in a Devbox project. Ensures the project uses the most recent Bun release.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/bun/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox update bun\n```\n\n----------------------------------------\n\nTITLE: Creating Nix Overlay for Yarn Package\nDESCRIPTION: This Nix code defines an overlay that modifies the 'yarn' package to use NodeJS 16 instead of its default NodeJS 14. The overlay is used to fix issues with 'yarn start' in the default Nixpkgs configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/flakes/overlay/README.md#2025-04-14_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\noverlay = (final: prev: {\n   yarn = prev.yarn.override { nodejs = final.pkgs.nodejs-16_x; };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database\nDESCRIPTION: Command to create a new database using SQL setup file with root access\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/mysql/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root --password='' < setup_db.sql\n```\n\n----------------------------------------\n\nTITLE: Defining Devbox Plugin Directory Structure in Bash\nDESCRIPTION: This snippet illustrates the recommended directory structure for organizing a Devbox plugin, including essential files and folders.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/creating_plugins.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmy-plugin/\n├── README.md\n├── plugin.json\n├── config/\n│   ├── my-plugin.conf\n│   └── process-compose.yaml\n└── test/\n    ├── devbox.json\n    └── devbox.lock\n```\n\n----------------------------------------\n\nTITLE: Devbox Configuration for Python Environment\nDESCRIPTION: The devbox.json configuration file sets up the Python environment with specific pip settings to force binary wheel installation for NumPy. It includes environment variables to control pip's behavior and a shell script for activating the virtual environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_missing_so.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"python\": \"latest\"\n  },\n  \"env\": {\n    \"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\",\n    \"PIP_NO_CACHE_DIR\":              \"1\",\n    \"PIP_NO_INPUT\":                  \"1\",\n    \"PIP_NO_PYTHON_VERSION_WARNING\": \"1\",\n    \"PIP_ONLY_BINARY\":               \"numpy\",\n    \"PIP_PROGRESS_BAR\":              \"off\",\n    \"PIP_REQUIRE_VIRTUALENV\":        \"1\",\n    \"PIP_ROOT_USER_ACTION\":          \"ignore\"\n  },\n  \"shell\": {\n    \"scripts\": {\n      \"venv\": \". $VENV_DIR/bin/activate && \\\"$@\\\"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required Packages to Devbox Project\nDESCRIPTION: Command to add necessary packages (JDK, MySQL, and Gradle) to the Devbox project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/spring/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndevbox add jdk@17 mysql@latest gradle@latest\n```\n\n----------------------------------------\n\nTITLE: Starting a Devbox Shell\nDESCRIPTION: Command to initialize and enter a Devbox shell environment for a project\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/contributor-quickstart.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Uploading a Specific Package from a Local Flake\nDESCRIPTION: Command to push a single package from a local flake.nix file to the Jetify Cache. This example pushes a custom mongodb package from a specified flake file path.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/cache/usage.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox cache upload path:./path/to/flake.nix#mongodb\n```\n\n----------------------------------------\n\nTITLE: Managing Package Resolution with devbox.lock\nDESCRIPTION: This lock file contains the resolved package information for curl 7.87.0, including its source, version, last modification timestamp, and the resolved GitHub path to the specific package in the NixOS/nixpkgs repository.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/lockfile/nopaths.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lockfile_version\": \"1\",\n  \"packages\": {\n    \"curl@7.87.0\": {\n      \"last_modified\": \"2023-02-26T03:47:33Z\",\n      \"resolved\": \"github:NixOS/nixpkgs/9952d6bc395f5841262b006fbace8dd7e143b634#curl\",\n      \"source\": \"devbox-search\",\n      \"version\": \"7.87.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Java Home Path in Devbox Shell\nDESCRIPTION: This command activates the Devbox shell temporarily to find the path to the Java home directory. The output path should be copied for later use in Eclipse configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/eclipse.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox shell -- 'echo $JAVA_HOME'\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox using curl\nDESCRIPTION: Command to download and install the latest version of Devbox using a curl-based installation script\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/contributor-quickstart.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.jetify.com/devbox | bash\n```\n\n----------------------------------------\n\nTITLE: Defining Single Command Script in Devbox Plugin JSON\nDESCRIPTION: This snippet shows how to define a single command script in a Devbox plugin's JSON configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/creating_plugins.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shell\": {\n        \"scripts\": {\n            \"print_once\": \"echo \\\"Hello Once!\\\"\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Devbox for Linux AMD64\nDESCRIPTION: Go build command to compile devbox for Linux AMD64 architecture.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nGOOS=linux GOARCH=amd64 go build -o dist/devbox-linux-amd64 ./cmd/devbox\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Jetify DevBox\nDESCRIPTION: This snippet lists the required Python packages for the Jetify DevBox project. It specifies the emoji library version 2.1.0 and includes pytest for testing.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/python/pipenv/requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nemoji==2.1.0\npytest\n```\n\n----------------------------------------\n\nTITLE: Passing Flags to devbox run Command\nDESCRIPTION: This example shows the correct way to pass flags to the 'devbox run' command itself. Flags for devbox run must be placed before the command to execute, as illustrated with the quiet mode flag (-q).\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/scripts.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Run `lsof -i :80` in your devbox shell in quiet mode\ndevbox run -q lsof -i :80\n```\n\n----------------------------------------\n\nTITLE: PHP Environment Variables Configuration\nDESCRIPTION: Bash environment variables for PHP-FPM configuration including port, log files, and PHP configuration paths.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/php.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPHPFPM_PORT=8082\nPHPFPM_ERROR_LOG_FILE={PROJECT_DIR}/.devbox/virtenv/php/php-fpm.log\nPHPFPM_PID_FILE={PROJECT_DIR}/.devbox/virtenv/php/php-fpm.pid\nPHPRC={PROJECT_DIR}/devbox.d/php/php.ini\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Lists required Python packages with pinned version numbers for reproducible deployments. Includes Django 4.2.20 as the web framework, psycopg2 2.9.5 for PostgreSQL integration, and supporting utilities asgiref 3.6.0 and sqlparse 0.5.0.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/django/requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.6.0\nDjango==4.2.20\npsycopg2==2.9.5\nsqlparse==0.5.0\n```\n\n----------------------------------------\n\nTITLE: Setting up MariaDB for Laravel\nDESCRIPTION: Commands to start the MariaDB service, create a database named 'laravel', and then stop the service when done.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/laravel/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Start the MariaDB service\ndevbox services up mariadb -b\n\n# Create the database\nmysql -u root -e \"CREATE DATABASE laravel;\"\n\n# Once you're done, stop the MariaDB service\ndevbox services stop mariadb\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox using Curl\nDESCRIPTION: This command installs Devbox using a curl command that downloads and executes an installation script.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.jetify.com/devbox | bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox Environment Variables\nDESCRIPTION: Environment variables set for the devbox project, including GOENV and PATH.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nGOENV=\"off\"\nPATH=\"$PATH:$PWD/dist\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Project in Shell\nDESCRIPTION: This command initializes a new Devbox project in the current directory. It sets up the necessary configuration files for Devbox to manage the project's development environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/shell/shellenv.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox init\n```\n\n----------------------------------------\n\nTITLE: Running Compiled Java Project in Devbox Shell\nDESCRIPTION: These commands demonstrate how to run a compiled Java project within the Devbox shell. It includes changing to the appropriate directory and executing the Java class.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/eclipse.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd src/\njava main/hello\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Server\nDESCRIPTION: Command to initialize and start the MySQL server service in DevBox\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/mysql/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services up\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox to Use Modified Yarn Package\nDESCRIPTION: This JSON configuration for Devbox specifies the use of the modified 'yarn' package from the local overlay flake. It also includes 'fnm' as an additional package. This configuration allows the use of the custom yarn package in the Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/flakes/overlay/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"packages\": [\n      \"path:./yarn-overlay#yarn\"\n      \"fnm\"\n   ]\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Devbox for Current Platform\nDESCRIPTION: Go build command to compile devbox for the current platform.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo build -o dist/devbox ./cmd/devbox\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox Zsh Completion for Oh My Zsh\nDESCRIPTION: Commands to generate and install the Devbox Zsh completion script for Oh My Zsh users. This creates a completion file in the Oh My Zsh completions directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_zsh.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.oh-my-zsh/completions\ndevbox completion zsh > ~/.oh-my-zsh/completions/_devbox\n```\n\n----------------------------------------\n\nTITLE: Testing Devbox Package Addition Workflow in Bash\nDESCRIPTION: A shell script that tests the Devbox package addition workflow, including initialization, adding packages not in the index, and adding regular packages.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Testscript for exercising adding packages\n\nexec devbox init\n\n# Add a package that is not part of the Devbox Search index.\n# This exercises the fallback codepath for adding packages.\nexec devbox add stdenv.cc.cc.lib\njson.superset devbox.json expected_devbox1.json\n\n# Add regular packages. Even though this is the more common scenario,\n# we test this later, because the source.path below removes \"devbox\"\n# from the PATH.\n! exec rg --version\n! exec vim --version\nexec devbox add ripgrep vim\n\nexec devbox shellenv\nsource.path\nexec rg --version\nexec vim --version\njson.superset devbox.json expected_devbox2.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Cache Information\nDESCRIPTION: Command to show current cache connection status and URL details\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/cache/authenticating.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox cache info\n```\n\n----------------------------------------\n\nTITLE: Running a Devbox script to display README\nDESCRIPTION: This snippet shows how to execute a Devbox script named 'readme' using the 'devbox run' command, which likely displays the project's README or help text.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/tutorial/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run readme\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database and User in Devbox\nDESCRIPTION: Commands to create a new PostgreSQL database named 'todo_db' and a user with password. These steps are necessary to prepare the database for the Django application.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/django/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb todo_db\npsql todo_db -c \"CREATE USER todo_user WITH PASSWORD 'secretpassword';\"\n```\n\n----------------------------------------\n\nTITLE: Creating Files in Devbox Plugin JSON\nDESCRIPTION: This JSON snippet demonstrates how to use the 'create_files' field in a Devbox plugin to copy a configuration file (Caddyfile) from the plugin directory to the user's project directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/plugins/README.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"create_files\": {\n    \"{{ .DevboxDir }}/Caddyfile\": \"caddy/Caddyfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Devbox Without Devbox\nDESCRIPTION: These commands clone the Devbox repository, build Devbox using Go, and run a simple command using the built Devbox.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/CONTRIBUTING.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/jetify-com/devbox.git go.jetify.com/devbox\ncd go.jetify.com/devbox\ngo build ./cmd/devbox\n./devbox run -- echo hello, world\n```\n\n----------------------------------------\n\nTITLE: Running Devbox Scripts\nDESCRIPTION: Generic command to run a script within the devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndevbox run <script>\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Development Shell\nDESCRIPTION: This command starts a Devbox development shell using the built Devbox CLI.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndist/devbox shell\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Status\nDESCRIPTION: Command to verify current user authentication status with the Jetify build cache\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/cache/authenticating.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox auth whoami\n```\n\n----------------------------------------\n\nTITLE: Installing Global NodeJS Packages in Devbox\nDESCRIPTION: This snippet demonstrates how to install global NodeJS packages in Devbox by adding them to the packages list in devbox.json. It includes examples of adding 'yalc' and 'pm2' as global packages alongside NodeJS version 18.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/nodejs/nodejs-yarn/README.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"nodejs@18\",\n        \"nodePackages.yalc@latest\",\n        \"nodePackages.pm2@latest\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Including RabbitMQ Plugin Configuration\nDESCRIPTION: JSON configuration for including the RabbitMQ plugin in the devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/rabbitmq.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"include\": [\n        \"github:jetify-com/devbox-plugins?dir=rabbitmq\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Environment Variables for Scripts\nDESCRIPTION: This example demonstrates how to set custom environment variables when running a Devbox script using the '--env' flag. The environment variable 'MY_VAR' is set to 'my_value' and then echoed in the shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/scripts.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run --env MY_VAR=my_value echo $MY_VAR\n```\n\n----------------------------------------\n\nTITLE: Executing Compiled Java Application\nDESCRIPTION: Command to run the compiled Java application from the Maven target directory. This executes the App class from the packaged JAR file to display the Hello World output.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/maven/hello-world/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava -cp target/devbox-maven-app-1.0-SNAPSHOT.jar com.devbox.mavenapp.App\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database\nDESCRIPTION: Command to connect to the MariaDB database using Devbox's built-in connection handler\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/mariadb/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run connect_db\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Environment Variables Configuration\nDESCRIPTION: Bash environment variable declarations for configuring RabbitMQ paths and settings.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/rabbitmq.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRABBITMQ_CONFIG_FILE = {{.DevboxDir}}/conf.d\nRABBITMQ_MNESIA_BASE = {{.Virtenv}}/mnesia\nRABBITMQ_ENABLED_PLUGINS_FILE = {{.DevboxDir}}/conf.d/enabled_plugins\nRABBITMQ_LOG_BASE = {{.Virtenv}}/log\nRABBITMQ_NODENAME = rabbit\nRABBITMQ_PID_FILE = {{.Virtenv}}/pid/$RABBITMQ_NODENAME.pid\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME in Gradle Properties\nDESCRIPTION: This Gradle properties file sets the JAVA_HOME path for the Gradle build. Replace <JAVA_HOME_VALUE> with the actual path to your JDK installation, which can be obtained by running 'echo $JAVA_HOME' in the Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/java.md#2025-04-14_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n/* gradle.properties */\norg.gradle.java.home=<JAVA_HOME_VALUE>\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Host in Devbox JSON\nDESCRIPTION: JSON configuration example for setting a custom PostgreSQL socket path in the devbox.json file through the PGHOST environment variable. This is useful when the default socket path exceeds the 100 character limit.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/lepp-stack/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"env\": {\n    \"PGHOST\": \"/<some-shorter-path>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Valkey Environment Variables\nDESCRIPTION: Bash environment variables for configuring Valkey port and configuration file location\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/valkey.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVALKEY_PORT=6379\nVALKEY_CONF=./devbox.d/valkey/valkey.conf\n```\n\n----------------------------------------\n\nTITLE: Linting Go Code in Devbox\nDESCRIPTION: Commands to run golangci-lint and gofumpt for linting and formatting Go code.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ngolangci-lint run --timeout 5m && scripts/gofumpt.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning Devbox Repository\nDESCRIPTION: These commands clone the Devbox repository and change the current directory to the cloned repository.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/jetify-com/devbox.git go.jetify.com/devbox\ncd go.jetify.com/devbox\n```\n\n----------------------------------------\n\nTITLE: Devbox Configuration with Echo Script\nDESCRIPTION: A Devbox configuration JSON file that defines a shell script named 'ekko' which echoes all arguments passed to it using the $@ variable.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/args.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [],\n  \"shell\": {\n    \"scripts\": {\n      \"ekko\": \"echo $@\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Development Container Configuration\nDESCRIPTION: Command to generate a development container configuration for use with Visual Studio Code Remote Containers or GitHub Codespaces. This creates the necessary .devcontainer directory and files.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/generate/devcontainer.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox generate devcontainer\n```\n\n----------------------------------------\n\nTITLE: DevBox CLI Commands\nDESCRIPTION: Series of DevBox commands showing initialization, package addition and removal operations.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/add-rm.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox init\n\nexec devbox add hello vim cowsay php\njson.superset devbox.json all.json\n\nexec devbox rm vim hello php\njson.superset devbox.json cowsay.json\n\nexec devbox add vim hello vim hello vim hello vim hello cowsay php php\njson.superset devbox.json all.json\n\nexec devbox rm vim hello cowsay cowsay php\njson.superset devbox.json empty.json\n```\n\n----------------------------------------\n\nTITLE: Environment File Format Example\nDESCRIPTION: This snippet shows the expected format for an environment file when importing secrets. Each line should contain a single environment variable in the form VARIABLE_NAME=VARIABLE_VALUE.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/secrets/secrets_cli.md#2025-04-14_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nVARIABLE_NAME=VARIABLE_VALUE\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Home Page Layout\nDESCRIPTION: This YAML Front Matter block sets the layout for the home page of a Jekyll site. It uses the 'home' layout, which is typically defined in the Jekyll theme. The commented lines indicate that additional content and custom Front Matter can be added to this file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/jekyll/myblog/index.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Feel free to add content and custom Front Matter to this file.\n# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults\n\nlayout: home\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Package Information with Version Specification in Devbox\nDESCRIPTION: Initializes a Devbox project and retrieves information about the latest version of a package named 'hello'. Tests the info command with a versioned package specification.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/info/info.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox init\nexec devbox info hello@latest\nstdout 'hello '\n```\n\n----------------------------------------\n\nTITLE: Devbox Configuration with Environment Variables\nDESCRIPTION: The devbox.json configuration that defines scripts and environment variables. This includes the env_from directive to load variables from test.env and demonstrates variable overriding through the env object.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/envfrom.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [],\n  \"env\": {\n    \"FOO3\": \"BAS\"\n  },\n  \"shell\": {\n    \"scripts\": {\n      \"test\": \"echo $FOO\",\n      \"test2\": \"echo $FOO2\",\n      \"test3\": \"echo $FOO3\",\n      \"test4\": \"echo $FOO4\"\n    }\n  },\n  \"env_from\": \"test.env\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Server Manually in Foreground\nDESCRIPTION: Command to manually start Redis server in the foreground with configuration file and port specified by environment variables.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/redis/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nredis-server $REDIS_CONF --port $REDIS_PORT\n```\n\n----------------------------------------\n\nTITLE: Java Project Directory Structure\nDESCRIPTION: Example directory structure for a simple Java project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/vscode.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmy_java_project/\n-- src/\n-- -- main/\n-- -- -- hello.java\n```\n\n----------------------------------------\n\nTITLE: Managing Devbox Services\nDESCRIPTION: Generic command pattern to start or stop any service in Devbox, including Valkey.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/valkey/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services start|stop [service]\n```\n\n----------------------------------------\n\nTITLE: Updating Examples in Devbox\nDESCRIPTION: Commands to build devbox and run a Go script to update examples.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ndevbox run build && go run testscripts/testrunner/updater/main.go\n```\n\n----------------------------------------\n\nTITLE: Building Devbox for Linux ARM64\nDESCRIPTION: Go build command to compile devbox for Linux ARM64 architecture.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nGOOS=linux GOARCH=arm64 go build -o dist/devbox-linux-arm64 ./cmd/devbox\n```\n\n----------------------------------------\n\nTITLE: Running Devbox Package Installation and Testing Commands\nDESCRIPTION: A series of bash commands that installs default packages, adds a specific GitHub package with platform exclusion, and verifies the installation by checking the package version.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_platforms_flakeref.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox install\n\n# aside: choose armv7l-linux to verify that the add actually works on the\n# current host that is unlikely to be armv7l-linux\nexec devbox add github:F1bonacc1/process-compose/v0.40.2 --exclude-platform armv7l-linux\njson.superset devbox.json expected_devbox1.json\n\n# verify that the package is installed on this platform\nexec devbox run -- process-compose version\nstdout '0.40.2'\n```\n\n----------------------------------------\n\nTITLE: Setting Ruby Environment Variables\nDESCRIPTION: Environment variable configuration for Ruby and Gem installations in local project directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/ruby/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRUBY_CONFDIR={PROJECT_DIR}/.devbox/virtenv/ruby\nGEMRC={PROJECT_DIR}/.devbox/virtenv/ruby/.gemrc\nGEM_HOME={PROJECT_DIR}/.devbox/virtenv/ruby\nPATH={PROJECT_DIR}/.devbox/virtenv/ruby/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Devbox Configuration File (JSON)\nDESCRIPTION: This is the devbox.json configuration file that specifies the packages to be included in the Devbox project. It currently contains a single package entry for Go version 1.19.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_replace.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"go@1.19\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Devbox Playground Badge to README\nDESCRIPTION: Shows the Markdown code to add a 'Open in Devbox.sh' badge to a project's README. This allows users to easily launch the project in a Devbox playground environment directly from GitHub.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_cloud/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open In Devspace](https://www.jetify.com/img/devbox/open-in-devbox.svg)](https://devbox.sh/{path_to_repo})\n```\n\n----------------------------------------\n\nTITLE: Expected DevBox JSON Configuration with Disabled Plugin\nDESCRIPTION: JSON configuration that should be created when adding Python with the '--disable-plugin' option. It defines the Python package with the latest version and explicitly sets 'disable_plugin' to true.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/disable-plugin.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"python\": {\n      \"version\": \"latest\",\n      \"disable_plugin\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Available Bun Versions in Devbox\nDESCRIPTION: Command to list all available versions of Bun that can be installed in a Devbox project. Useful for version management.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/bun/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox search bun\n```\n\n----------------------------------------\n\nTITLE: Launching a GitHub Repo in Jetify Devspace\nDESCRIPTION: Shows the URL format for launching a GitHub repository in Jetify Devspace by prepending the repository URL with the Jetify cloud URL.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/devspace/index.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://cloud.jetify.com/new/\n```\n\n----------------------------------------\n\nTITLE: Building and Running Gradle Project\nDESCRIPTION: These commands build the Gradle project and run the compiled Java application. 'gradle build' compiles and packages the project, while 'gradle run' executes the application.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/java/README.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngradle build\ngradle run\n```\n\n----------------------------------------\n\nTITLE: Testing Spring Boot REST API Endpoints\nDESCRIPTION: Example curl commands to test the REST API endpoints for retrieving all items and adding a new item.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/spring/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nGET localhost:8080/demo/all\n```\n\nLANGUAGE: shell\nCODE:\n```\nPOST localhost:8080/demo/add\n```\n\n----------------------------------------\n\nTITLE: Installing WSL2 with default Ubuntu distribution\nDESCRIPTION: Command to install Windows Subsystem for Linux 2 with the default Ubuntu distribution. Must be run in Powershell or Windows Command Prompt as an administrator.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/installing_devbox.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwsl --install\n```\n\n----------------------------------------\n\nTITLE: Creating a New F# Console Project Using .NET CLI\nDESCRIPTION: Command to create a new F# console application using the .NET CLI. This command initializes a new F# project with the console template in a specified directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/fsharp.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new console -lang \"F#\" -o <name>\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox\nDESCRIPTION: Curl command to download and install devbox using a bash script.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://get.jetify.com/devbox | bash\n```\n\n----------------------------------------\n\nTITLE: Available Options for Devbox Secrets List Command\nDESCRIPTION: List of flags and options that can be used with the 'devbox secrets list' command, including environment selection, output format control, and options to show secret values.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_list.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --environment string   Environment name, such as dev or prod (default \"dev\")\n  -f, --format string        Display the key values in key=value format (default \"table\")\n  -h, --help                 help for ls\n      --org-id string        Organization id to namespace secrets by\n      --project-id string    Project id to namespace secrets by\n  -s, --show                 Display the value of each environment variable (secrets included)\n```\n\n----------------------------------------\n\nTITLE: Interacting with Devbox Services\nDESCRIPTION: Command pattern for starting and stopping services within Devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/redis/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services start|stop [service]\n```\n\n----------------------------------------\n\nTITLE: Devbox Configuration with Environment Variables\nDESCRIPTION: JSON configuration for Devbox that defines packages to install and environment variables to set in the isolated development environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/pure.test.txt#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\"hello@latest\"],\n  \"env\": {\n    \"FOO\": \"baz\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing MySQL Services\nDESCRIPTION: Command pattern for starting or stopping MySQL services in DevBox\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/mysql/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services start|stop [service]\n```\n\n----------------------------------------\n\nTITLE: Expected Devbox JSON Configuration with Python\nDESCRIPTION: JSON configuration that defines the expected state of devbox.json after adding Python with the plugin enabled. Contains a simple array of packages.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/plugin.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"python@latest\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Devbox Fish Completion Script\nDESCRIPTION: This command generates the autocompletion script for the Fish shell. It can be customized with flags to modify the output, such as disabling descriptions or suppressing logs.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_fish.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox completion fish [flags]\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Environment Variables\nDESCRIPTION: Environment variable configuration for PostgreSQL data directory and host location in the Devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/postgres/README.md#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nPGDATA=/<projectDir>/.devbox/conf/postgresql/data\nPGHOST=/<projectDir>/.devbox/virtenv/postgresql\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Variable Passing with Devbox Run\nDESCRIPTION: A series of test commands that verify how various environment variables are passed to the devbox run environment. Tests include parent shell variables, DEVBOX_* prefixed variables, variables from devbox.json, and variable precedence.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/env.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Parent shell vars should leak into the run environment\nenv HOMETEST=/home/test\nenv USER=test-user\nenv FOO=bar\nexec devbox run echo '$HOMETEST'\nstdout '/home/test'\nexec devbox run echo '$USER'\nstdout 'test-user'\nexec devbox run echo '$FOO'\nstdout 'bar'\n\n# DEVBOX_* vars are passed through\nenv DEVBOX_FOO=baz\nexec devbox run echo '$DEVBOX_FOO'\nstdout 'baz'\n\n# Vars defined in devbox.json are passed through\nenv DEVBOX_FEATURE_ENV_CONFIG=1\nexec devbox run echo '$CONFIG_VAR1'\nstdout 'abc'\n\n# Vars defined in devbox.json that reference another variable are set\nenv DEVBOX_FEATURE_ENV_CONFIG=1\nenv DEVBOX_FOO=baz\nexec devbox run echo '$CONFIG_VAR2'\nstdout 'baz'\n\n# Vars in devbox that refer to $PWD should get the project dir\nenv PWD=/test-pwd\nexec devbox run echo '$CONFIG_VAR3'\n! stdout '/test-pwd'\n\n# Variables are applied in order: nix vars, DEVBOX_*, leaked, leakedForShell, fixed/hard-coded vars,\n# plugin vars, and config vars. It really only makes sense to test for plugin and config vars order.\n# Note that the nginx plugin defines NGINX_CONFDIR, NGINX_PATH_PREFIX, and NGINX_TMPDIR.\nenv NGINX_TMPDIR=\"to-be-overwritten-by-plugin\"\nexec devbox run echo '$NGINX_TMPDIR'\n! stdout 'to-be-overwritten-by-plugin'\nstdout '/nginx/temp'\n\nexec devbox run echo '$NGINX_CONFDIR'\nstdout 'devbox-json-override'\n```\n\n----------------------------------------\n\nTITLE: Creating a Laravel Project with Composer\nDESCRIPTION: Commands to create a new Laravel project using Composer and move its contents to the current directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/laravel/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project laravel/laravel tmp\n\nmv tmp/* tmp/.* .\n```\n\n----------------------------------------\n\nTITLE: Testing GPU Support in TensorFlow with Python\nDESCRIPTION: Python script that verifies TensorFlow can access GPU hardware. It prints TensorFlow version, CUDA version, cuDNN version, and details about available GPU devices including memory and physical description.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_cuda.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tensorflow as tf\n\nprint(\"TensorFlow Version:\", tf.__version__)\nprint(\"CUDA Built with:\", tf.sysconfig.get_build_info()[\"cuda_version\"])\nprint(\"cuDNN Built with:\", tf.sysconfig.get_build_info()[\"cudnn_version\"])\n\nfrom tensorflow.python.client import device_lib\n\nfor device in device_lib.list_local_devices():\n    if device.device_type == 'GPU':\n        print(f\"Device: {device.name}\")\n        print(f\"  Type: {device.device_type}\")\n        print(f\"  Memory Limit: {device.memory_limit / (1024**3):.2f} GB\")\n        print(f\"  Description: {device.physical_device_desc}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Manually Including MariaDB Plugin in Devbox Configuration\nDESCRIPTION: JSON configuration for manually adding the MariaDB plugin to your Devbox environment via the include list.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/mariadb.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"include\": [\n        \"plugin:mariadb\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Tidying Go Modules in Devbox\nDESCRIPTION: Command to tidy and optimize the go.mod file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Environment Check and TensorFlow Installation\nDESCRIPTION: Script commands to check environment conditions, install dependencies via devbox, and install a specific TensorFlow nightly build using pip. Includes validation of successful installation through stdout checking.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_cuda.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[!env:DEVBOX_RUN_FAILING_TESTS] skip 'this test requires a CUDA-enabled GPU'\n\nexec devbox install\n\n# pip install tensorflow\nexec devbox run venv -- pip install tf_nightly==2.18.0.dev20240910\nstdout 'Successfully installed.* tf_nightly-2.18.0.dev20240910'\n```\n\n----------------------------------------\n\nTITLE: Setting up MariaDB Database for Drupal in Devbox\nDESCRIPTION: SQL command to create the required Drupal database. This should be executed from the terminal after starting the Devbox shell to prepare the database environment for Drupal installation.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/drupal/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmysql -u root < setup_db.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Auto Shell Setting\nDESCRIPTION: JSON configuration to disable automatic Devbox shell execution in VSCode's integrated terminal.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/vscode.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"devbox.autoShellOnTerminal\": false\n```\n\n----------------------------------------\n\nTITLE: Viewing MySQL Information\nDESCRIPTION: Command to display MySQL configuration information in DevBox\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/mysql/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndevbox info mysql\n```\n\n----------------------------------------\n\nTITLE: Testing devbox run Command\nDESCRIPTION: Shell commands demonstrating devbox behavior with the 'hello' package installed and then removed\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/manual.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox run hello\nstdout 'Hello, world!'\n\n# Simulate deleting the packages manually.\ncp empty.json devbox.json\n\n! exec devbox run hello\n! stdout 'Hello, world!'\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for Drupal Website\nDESCRIPTION: A comprehensive robots.txt configuration for Drupal websites. It allows search engines to access style, script, and image files while restricting access to core system directories, README files, administrative paths, and user authentication pages. The configuration addresses both clean URL and non-clean URL paths.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/drupal/web/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\n# CSS, JS, Images\nAllow: /core/*.css$\nAllow: /core/*.css?\nAllow: /core/*.js$\nAllow: /core/*.js?\nAllow: /core/*.gif\nAllow: /core/*.jpg\nAllow: /core/*.jpeg\nAllow: /core/*.png\nAllow: /core/*.svg\nAllow: /profiles/*.css$\nAllow: /profiles/*.css?\nAllow: /profiles/*.js$\nAllow: /profiles/*.js?\nAllow: /profiles/*.gif\nAllow: /profiles/*.jpg\nAllow: /profiles/*.jpeg\nAllow: /profiles/*.png\nAllow: /profiles/*.svg\n# Directories\nDisallow: /core/\nDisallow: /profiles/\n# Files\nDisallow: /README.md\nDisallow: /composer/Metapackage/README.txt\nDisallow: /composer/Plugin/ProjectMessage/README.md\nDisallow: /composer/Plugin/Scaffold/README.md\nDisallow: /composer/Plugin/VendorHardening/README.txt\nDisallow: /composer/Template/README.txt\nDisallow: /modules/README.txt\nDisallow: /sites/README.txt\nDisallow: /themes/README.txt\nDisallow: /web.config\n# Paths (clean URLs)\nDisallow: /admin/\nDisallow: /comment/reply/\nDisallow: /filter/tips\nDisallow: /node/add/\nDisallow: /search/\nDisallow: /user/register\nDisallow: /user/password\nDisallow: /user/login\nDisallow: /user/logout\nDisallow: /media/oembed\nDisallow: /*/media/oembed\n# Paths (no clean URLs)\nDisallow: /index.php/admin/\nDisallow: /index.php/comment/reply/\nDisallow: /index.php/filter/tips\nDisallow: /index.php/node/add/\nDisallow: /index.php/search/\nDisallow: /index.php/user/password\nDisallow: /index.php/user/register\nDisallow: /index.php/user/login\nDisallow: /index.php/user/logout\nDisallow: /index.php/media/oembed\nDisallow: /index.php/*/media/oembed\n```\n\n----------------------------------------\n\nTITLE: Building Devbox CLI\nDESCRIPTION: This command builds the Devbox CLI using the 'devbox run build' command.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run build\n```\n\n----------------------------------------\n\nTITLE: Starting Jekyll Server\nDESCRIPTION: Command to start the Jekyll server for local development and testing.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/jekyll.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njekyll serve\n```\n\n----------------------------------------\n\nTITLE: Connecting to Supabase with Python Client\nDESCRIPTION: This snippet demonstrates how to connect to a Supabase database using the Python client library. It retrieves the Supabase URL and API key from environment variables that are set by Devbox based on the secrets configured in Jetify Cloud.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/deploys/integrations/supabase.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom supabase import create_client, Client\n\nurl: str = os.getenv('SUPABASE_URL')\nkey: str = os.getenv('SUPABASE_KEY')\n\nsupabase: Client = create_client(url, key)\n```\n\n----------------------------------------\n\nTITLE: Excluding packages from specific platforms in Devbox\nDESCRIPTION: Command to add ripgrep to Devbox but exclude it from being installed on ARM-based Macs. This allows the package to be installed on all platforms except the excluded one.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/platform_specific_packages.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add ripgrep --exclude-platform aarch64-darwin\n```\n\n----------------------------------------\n\nTITLE: Initial Setup Command for Devbox Python Installation\nDESCRIPTION: Simple bash command to install all packages specified in the devbox.json configuration file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_missing_ref.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox install\n```\n\n----------------------------------------\n\nTITLE: Installing Valkey Package in Devbox.json\nDESCRIPTION: JSON configuration for adding Valkey package to Devbox environment using the latest version\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/valkey.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"packages\": [\n        \"valkey@latest   \"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Formatting Go Code in Devbox\nDESCRIPTION: Script to run gofumpt for formatting Go code.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nscripts/gofumpt.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token Environment Variable\nDESCRIPTION: Command to configure authentication using a personal access token on CI/build hosts\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/cache/authenticating.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport DEVBOX_ACCESS_TOKEN=<personal_token>\n```\n\n----------------------------------------\n\nTITLE: Configuring Corepack for Package Management in Devbox\nDESCRIPTION: JSON configuration that enables Corepack in your Devbox environment for managing Node package managers. When enabled, Corepack binaries will be installed in the project's .devbox directory and added to the path.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/nodejs/nodejs-pnpm/README.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\"nodejs@18\"],\n  \"env\": {\n    \"DEVBOX_COREPACK_ENABLED\": \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox via Curl\nDESCRIPTION: Command to install Devbox using a curl-based installation script. This step can be skipped if running on devbox.sh.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/cloud_development/maelstrom/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://get.jetify.com/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Displaying Redis Plugin Information\nDESCRIPTION: Command to show information about the Redis plugin configuration within Devbox.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/redis/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox info redis\n```\n\n----------------------------------------\n\nTITLE: Testing PATH Cleaning and Filtering\nDESCRIPTION: Tests PATH environment variable manipulation, ensuring relative paths are removed and absolute paths are cleaned\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/path.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv PATH=./relative/path:/some//dirty/../clean/path:$PATH\nexec devbox run echo '$PATH'\n! stdout 'relative/path'\n! stdout '/some//dirty/../clean/path'\nstdout '/some/clean/path'\n```\n\n----------------------------------------\n\nTITLE: Importing NumPy and Performing Basic Operations in Python\nDESCRIPTION: A simple Python script that imports NumPy, creates an array, and calculates its mean. This script is used to test if the NumPy library can be loaded correctly with its native dependencies.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_missing_so.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\n\narray = numpy.array([1, 2, 3, 4, 5])\nprint(\"Array:\", array)\nprint(\"Mean:\", numpy.mean(array))\n```\n\n----------------------------------------\n\nTITLE: Java Compilation Command\nDESCRIPTION: Command to compile a Java project in Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/vscode.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njavac my_java_project/src/main/hello.java\n```\n\n----------------------------------------\n\nTITLE: Running Tests in DevBox Environment with Error Handling\nDESCRIPTION: This bash script sets the DEVBOX_FEATURE_SCRIPT_EXIT_ON_ERROR environment variable to 1 to ensure the script exits on any error, then executes the run_test command within the DevBox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/testrunner/run_test.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv DEVBOX_FEATURE_SCRIPT_EXIT_ON_ERROR=1\nexec devbox run run_test\n```\n\n----------------------------------------\n\nTITLE: Running Jekyll Development Server\nDESCRIPTION: Commands for generating the Jekyll project with bundler and starting the development server on localhost:4000.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/jekyll/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox run generate\n```\n\n----------------------------------------\n\nTITLE: Installing Python 2.7.18.6 with Insecure Flag in Devbox\nDESCRIPTION: A sequence of Devbox commands that initialize a project, add an insecure Python package with the '--allow-insecure' flag, and install it. This demonstrates how to handle packages that are marked as insecure in the Devbox ecosystem.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_insecure.tst.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox init\nexec devbox add python@2.7.18.6 --allow-insecure python-2.7.18.6\nexec devbox install\n```\n\n----------------------------------------\n\nTITLE: Setting up MySQL Database with Devbox\nDESCRIPTION: Command to run the database setup script using Devbox. This creates the necessary user and database for the Spring Boot application.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/spring/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndevbox run setup_db\n```\n\n----------------------------------------\n\nTITLE: Adding Packages to Devbox Environment\nDESCRIPTION: Command syntax for adding packages to a Devbox environment with version specification. Packages are added to the devbox.json configuration file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/devspace/index.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add <package>@<version>\n```\n\n----------------------------------------\n\nTITLE: Running Zig Project\nDESCRIPTION: Command to execute a built Zig project using the Zig build system.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/zig/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzig build run\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox Fish Completions Permanently\nDESCRIPTION: This command generates the autocompletion script for Devbox and saves it to the Fish shell's completions directory. This ensures that completions are available for all new shell sessions, but requires starting a new shell for the changes to take effect.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_fish.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox completion fish > ~/.config/fish/completions/devbox.fish\n```\n\n----------------------------------------\n\nTITLE: Installing Nix Package Manager\nDESCRIPTION: This command installs the Nix Package Manager using the Determinate Systems installer script.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/CONTRIBUTING.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install\n```\n\n----------------------------------------\n\nTITLE: Database Setup Command\nDESCRIPTION: Command to initialize the Drupal database using MySQL\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/drupal.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root < setup_db.sql\n```\n\n----------------------------------------\n\nTITLE: Devbox Lock File Configuration\nDESCRIPTION: Lock file containing resolved package versions and system-specific paths for the hello package\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/update/update.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lockfile_version\": \"1\",\n  \"packages\": {\n    \"hello@2.10\": {\n      \"last_modified\": \"2022-01-26T13:01:16Z\",\n      \"resolved\": \"github:NixOS/nixpkgs/e722007bf05802573b41701c49da6c8814878171#hello\",\n      \"source\": \"devbox-search\",\n      \"version\": \"2.10\",\n      \"systems\": {\n        \"aarch64-darwin\": {\n          \"store_path\": \"/nix/store/c24460c0iw7kai6z5aan6mkgfclpl2qj-hello-2.10\"\n        },\n        \"x86_64-darwin\": {\n          \"store_path\": \"/nix/store/6wzargj47480y84cqqnm7n30xwqlbyrm-hello-2.10\"\n        },\n        \"x86_64-linux\": {\n          \"store_path\": \"/nix/store/nndmy96lswhxc4xp49n950i1905qlfpy-hello-2.10\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Vector Implementation with DS Extension\nDESCRIPTION: Example script demonstrating the usage of PHP DS extension's Vector class. Includes extension validation and basic vector operations with iteration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/php.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// Check that the extension is loaded.\nif (!extension_loaded('ds')) {\n    echo(\"ds extension is not enabled\");\n    exit(0);\n}\n\n$vec = new \\Ds\\Vector([\"hello\", \"world\"]);\n\necho(\"Original vector elements\\n\");\nforeach ($vec as $idx => $elem) {\n  echo(\"idx: $idx and elem: $elem\\n\");\n}\necho(\"done\\n\");\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP Path Lookup in Zed\nDESCRIPTION: JSON configuration to explicitly tell Zed's LSP to use binaries in the $PATH variable. This should be added to the ~/.config/zed/config.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/zed.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"lsp\": {\n    \"<lsp-name>\": {\n      \"binary\": {\"path_lookup\": true}\n    }\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox to Use Custom Go Module\nDESCRIPTION: This JSON snippet shows how to add a custom-built Go module (Ory CLI) to the packages list in the devbox.json configuration file. The 'path:ory-cli' syntax indicates that the package is located in a local directory named 'ory-cli'.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/flakes/go-mod/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"path:ory-cli\"\n  ],\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Globally Installed Packages\nDESCRIPTION: This command displays all packages installed in your Devbox global profile. It provides a simple way to check what tools are available across all your Devbox projects.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_global.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global list\n\n# Output:\n* ripgrep\n* vim\n* git\n```\n\n----------------------------------------\n\nTITLE: Cowsay Package Configuration\nDESCRIPTION: JSON configuration containing only the cowsay package.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/add-rm.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\"cowsay@latest\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Environment\nDESCRIPTION: Initializes a new devbox environment\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/packages/unfree.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox init\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox without Circular Dependencies\nDESCRIPTION: Valid devbox configuration that includes plugin3 without creating circular dependencies.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/plugin.cycle.test.txt#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"test-without-cycle\",\n  \"include\": [\"./plugin3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox in a Project\nDESCRIPTION: Command to initialize a new Devbox configuration in a project that doesn't already have one. This creates a devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/devspace/index.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox init\n```\n\n----------------------------------------\n\nTITLE: Running Commands with Quoted Arguments in Devbox\nDESCRIPTION: Demonstrates how to properly escape quoted arguments when using the 'devbox run' command with the '--' delimiter to ensure arguments are passed correctly to the command being run.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/quote_escaping.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox run -- echo 'this is a \"hello world\"'\n```\n\n----------------------------------------\n\nTITLE: Testing DevBox Plugin Disabling in Shell Testscript\nDESCRIPTION: A shell testscript that tests the functionality of disabling plugins in DevBox. It initializes DevBox, adds Python with the plugin disabled, checks that no plugin messages appear, verifies the virtual environment doesn't exist, and then re-enables the plugin.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/disable-plugin.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox init\nexec devbox add python --disable-plugin\n! stderr 'This plugin' \n\njson.superset devbox.json expected_devbox.json\n\n! exec devbox run ls .devbox/virtenv/python\n\n# remove disable plugin option\nexec devbox add python\n\njson.superset devbox.json expected_devbox2.json\n```\n\n----------------------------------------\n\nTITLE: Generating Personal Access Token\nDESCRIPTION: Command for admin users to create a personal access token for CI/build host authentication\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/cache/authenticating.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndevbox auth token new\n```\n\n----------------------------------------\n\nTITLE: Creating a New Jekyll Blog\nDESCRIPTION: Command to create a new Jekyll blog scaffold after Jekyll is installed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/jekyll.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njekyll new myblog\n```\n\n----------------------------------------\n\nTITLE: Devbox Configuration for PHP with DS Extension\nDESCRIPTION: JSON configuration for Devbox specifying PHP and its DS extension as required packages.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/php.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"php@latest\",\n    \"php83Extensions.ds@latest\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Rust Project with Cargo\nDESCRIPTION: Command to build and execute a Rust project using Cargo's run command.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/rust/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Initial Devbox Configuration in JSON\nDESCRIPTION: The initial empty Devbox configuration file with no packages installed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unfree Package (Slack)\nDESCRIPTION: Adds the Slack package to devbox.json as an example of an unfree package\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/packages/unfree.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox add slack\n```\n\n----------------------------------------\n\nTITLE: All Packages Configuration\nDESCRIPTION: JSON configuration containing all available packages with their latest versions.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/add-rm.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\"hello@latest\", \"vim@latest\", \"cowsay@latest\", \"php@latest\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Exiting Devbox Shell\nDESCRIPTION: Command to exit the Devbox shell and return to the regular shell environment\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/contributor-quickstart.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Project\nDESCRIPTION: Initializes a new devbox project in the current directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/rm.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox init\n```\n\n----------------------------------------\n\nTITLE: Loading Devbox Completions for Current Zsh Session\nDESCRIPTION: Commands to load Devbox completions for the current Zsh shell session. This generates the completion script and loads it into the current session.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_zsh.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource <(devbox completion zsh); compdef _devbox devbox\n```\n\n----------------------------------------\n\nTITLE: Running Command in Devbox\nDESCRIPTION: Executes the 'hello' command within the devbox environment, which should output 'Hello, world!'.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/rm.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox run hello\nstdout 'Hello, world!'\n```\n\n----------------------------------------\n\nTITLE: Compiling Java Project in Devbox Shell\nDESCRIPTION: This command compiles a Java project within the Devbox shell. It assumes the project structure from the previous example.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/eclipse.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njavac my_java_project/src/main/hello.java\n```\n\n----------------------------------------\n\nTITLE: Installing Package Outputs with Flake References\nDESCRIPTION: Shows how to specify non-default outputs when installing packages using flake references, which provides more flexibility for package configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/faq.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add github:NixOS/nixpkgs#prometheus^out,cli\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Nix Flake\nDESCRIPTION: This Nix flake definition creates a simple package using the 'hello' program from nixpkgs. It uses flake-utils for multi-system support and sets up nixpkgs as a dependency.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/packages/flakes.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{\n  description = \"Test\";\n\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs = { self, nixpkgs, flake-utils }:\n    flake-utils.lib.eachDefaultSystem (system:\n      let\n        pkgs = nixpkgs.legacyPackages.${system};\n      in\n      {\n        packages = {\n          default = pkgs.hello;\n        };\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Installation\nDESCRIPTION: Command to install Drupal dependencies using Composer\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/drupal.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Logging Out from Devbox\nDESCRIPTION: Command to end the current authentication session\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/cloud/cache/authenticating.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox auth logout\n```\n\n----------------------------------------\n\nTITLE: Initializing and Adding Packages in Devbox (Bash)\nDESCRIPTION: This script initializes a Devbox project and tests adding different versions of the Go package. It verifies that the correct package versions are added to the devbox.json file.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_replace.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox init\n\nexec devbox add go@1.20\ndevboxjson.packages.contains devbox.json go@1.20\n! devboxjson.packages.contains devbox.json go@1.19\n\nexec devbox add go@1.19\n! devboxjson.packages.contains devbox.json go@1.20\ndevboxjson.packages.contains devbox.json go@1.19\n```\n\n----------------------------------------\n\nTITLE: Accessing Port in Devbox Playground URL\nDESCRIPTION: Demonstrates how to construct a URL to access a specific port in a Devbox playground project. This is useful for accessing web services or applications running in the playground environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_cloud/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://devbox.sh/app/projects/<projectId>/port/8080\n```\n\n----------------------------------------\n\nTITLE: Expected Devbox Configuration JSON After Package Addition\nDESCRIPTION: The expected devbox.json configuration after adding a GitHub flake reference package. Shows the transition from array to object format and includes platform exclusion configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_platforms_flakeref.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"hello\": \"\",\n    \"cowsay\": \"latest\",\n    \"github:F1bonacc1/process-compose/v0.40.2\": {\n      \"excluded_platforms\": [\"armv7l-linux\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected DevBox JSON Configuration with Enabled Plugin\nDESCRIPTION: JSON configuration that should be created when adding Python without the disable option. It defines the Python package with the latest version and explicitly sets 'disable_plugin' to false.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/disable-plugin.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"python\": {\n      \"version\": \"latest\",\n      \"disable_plugin\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Testing 'hello' Command in Devbox\nDESCRIPTION: These commands add a 'hello' command to the Devbox project and attempt to execute it. The '!' prefix indicates an expected failure, as the command is not yet available in the current shell environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/shell/shellenv.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox add hello\n! exec hello\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Devbox Website\nDESCRIPTION: Command to generate static content for the Devbox website. This builds the website into the 'build' directory, which can then be served using any static contents hosting service.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Disabling Devbox Prompt Modification in Bash/Zsh\nDESCRIPTION: Configuration to prevent Devbox from modifying your shell prompt by setting the DEVBOX_NO_PROMPT environment variable.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/faq.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDEVBOX_NO_PROMPT=true\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Variable from devbox.json in Pure Mode\nDESCRIPTION: Executes a command in pure mode to verify that environment variables defined in devbox.json are accessible and override shell variables.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/pure.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox run --pure echo '$FOO'\nstdout 'baz'\n```\n\n----------------------------------------\n\nTITLE: Adding Packages to Devbox\nDESCRIPTION: Adds 'hello' and 'vim' packages to the devbox environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/rm.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox add hello vim\n```\n\n----------------------------------------\n\nTITLE: Devbox Service Management\nDESCRIPTION: Command syntax for managing Devbox services, allowing start and stop operations for specific services.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/postgres/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox services start|stop [service]\n```\n\n----------------------------------------\n\nTITLE: Devbox Shell Init Hook\nDESCRIPTION: Script that runs when initializing the devbox environment, unsets various Go-related environment variables.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ntest -z $FISH_VERSION && unset CGO_ENABLED GO111MODULE GOARCH GOFLAGS GOMOD GOOS GOROOT GOTOOLCHAIN GOWORK\n```\n\n----------------------------------------\n\nTITLE: Testing Argument Passing with Devbox Run Command\nDESCRIPTION: A test command that executes the 'ekko' script with arguments 'hello there' via devbox run, expecting those arguments to be echoed back.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/args.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox run ekko hello there\nstdout 'hello there'\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Environment\nDESCRIPTION: Command to enter the Devbox shell environment for development\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/drupal.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Expected Devbox Configuration After First Package Addition\nDESCRIPTION: The expected Devbox configuration after adding a package not in the Devbox Search index.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"stdenv.cc.cc.lib\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Git Configuration in Devbox Shell\nDESCRIPTION: Example command demonstrating access to host environment configurations within Devbox\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/contributor-quickstart.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit config --get user.name\n```\n\n----------------------------------------\n\nTITLE: Testing Shell Environment Variable in Pure Mode\nDESCRIPTION: Verifies that shell environment variables are not accessible in pure mode unless they are explicitly defined in devbox.json.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/pure.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox run --pure echo '$FOO2'\nstdout ''\n```\n\n----------------------------------------\n\nTITLE: Initial Devbox Configuration JSON\nDESCRIPTION: The starting devbox.json configuration file with basic packages 'hello' and 'cowsay' defined in an array format.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_platforms_flakeref.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"hello\",\n    \"cowsay@latest\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Devbox Prompt Modification in Fish Shell\nDESCRIPTION: Fish shell-specific configuration to prevent Devbox from modifying your shell prompt using Fish's environment variable syntax.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/faq.md#2025-04-14_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\nset -U devbox_no_prompt true\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Devbox Website\nDESCRIPTION: Commands to navigate to the docs directory, optionally start a devbox shell, and install dependencies using yarn. This is the first step to start working on the Devbox website.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/app     # from the devbox root directory\ndevbox shell    # optional, develop inside a devbox\nyarn install    # run in devbox shell\n```\n\n----------------------------------------\n\nTITLE: Final Platform Configuration\nDESCRIPTION: Final configuration with platform exclusions for cowsay and multiple platform support for other packages\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_platforms.test.txt#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"hello\": \"\",\n    \"cowsay\": {\n      \"version\": \"latest\",\n      \"excluded_platforms\": [\"x86_64-darwin\", \"x86_64-linux\", \"aarch64-darwin\"]\n    },\n    \"ripgrep\": {\n      \"version\": \"latest\",\n      \"platforms\": [\"x86_64-darwin\", \"x86_64-linux\"]\n    },\n    \"vim\": {\n      \"version\": \"latest\",\n      \"excluded_platforms\": [\"x86_64-linux\"]\n    },\n    \"hello\": {\n        \"version\": \"latest\",\n        \"platforms\": [\"x86_64-darwin\", \"x86_64-linux\", \"aarch64-darwin\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Environment Variables Configuration\nDESCRIPTION: This code block shows the environment variables set by the PHP plugin in Devbox. It includes configurations for PHP-FPM port, error log file, PID file, and PHP configuration file location.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/php/latest/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPHPFPM_PORT=8082\nPHPFPM_ERROR_LOG_FILE={PROJECT_DIR}/.devbox/virtenv/php/php-fpm.log\nPHPFPM_PID_FILE={PROJECT_DIR}/.devbox/virtenv/php/php-fpm.pid\nPHPRC={PROJECT_DIR}/devbox.d/php/php.ini\n```\n\n----------------------------------------\n\nTITLE: Expected Devbox JSON Configuration\nDESCRIPTION: The expected content of devbox.json configuration file, listing vim as the only package.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/rm.test.txt#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\"vim@latest\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Single Platform Package Configuration\nDESCRIPTION: Expected devbox configuration after adding ripgrep with x86_64-darwin platform\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_platforms.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"hello\": \"\",\n    \"cowsay\": \"latest\",\n    \"ripgrep\": {\n      \"version\": \"latest\",\n      \"platforms\": [\"x86_64-darwin\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Entire Project Closure with Jetify Cache\nDESCRIPTION: Demonstrates the command to cache the entire project closure, including all Flakes, using the Jetify Cache from the project root.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/using_flakes.md#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndevbox cache upload\n```\n\n----------------------------------------\n\nTITLE: Installing glibcLocales on specific Linux platforms in Devbox\nDESCRIPTION: This example demonstrates how to install the 'glibcLocales' package only on x86_64-linux and aarch64-linux platforms using the '--platform' flag.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_add.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global add glibcLocales --platform x86_64-linux,aarch64-linux\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables from a File to Direnv Configuration\nDESCRIPTION: This command configures direnv to load environment variables from a specified file using the --env-file flag. In this example, it loads variables from a .env.devbox file in the project root.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/direnv.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndevbox generate direnv --env-file .env.devbox\n```\n\n----------------------------------------\n\nTITLE: Running the Compiled Nim Binary\nDESCRIPTION: This command executes the compiled Nim application named 'spinnytest', which is the output of the build process. The executable is run from the current directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/nim/spinnytest/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./spinnytest\n```\n\n----------------------------------------\n\nTITLE: Creating and Testing Devbox Project with Whitespace\nDESCRIPTION: This shell script creates a project directory with spaces, runs Devbox commands, and verifies the expected outputs and file creation. It tests Devbox's ability to handle whitespace in paths and filenames.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/basic/path_whitespace.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir 'my project'\ncd 'my project'\n\nexec devbox run -- hello\nstdout 'Hello, world!'\n\nexec devbox run -- touch 'file1 with spaces'\nexists 'file1 with spaces'\n\nexec devbox run test\nexists 'file2 with spaces'\n```\n\n----------------------------------------\n\nTITLE: Executing Devbox Cache Command in Bash\nDESCRIPTION: This snippet shows the basic syntax for running the 'devbox cache' command. It can be followed by various subcommands to perform specific cache-related operations.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_cache.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  devbox cache [command]\n```\n\n----------------------------------------\n\nTITLE: Running Devbox Commands\nDESCRIPTION: These shell commands demonstrate how to run Devbox commands, including executing the 'hello' command and adding a custom flake to the project.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/packages/flakes.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! exec devbox run hello\nexec devbox add path:my-flake\n\nexec devbox run hello\n```\n\n----------------------------------------\n\nTITLE: Defining API Response Schema for Package Information in JSON\nDESCRIPTION: This JSON schema outlines the structure of the API response for package information. It includes fields for package metadata and a detailed breakdown of release information, including platform-specific details and output summaries.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/get-a-package.api.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"string\",\n  \"summary\": \"string\",\n  \"homepage_url\": \"string\",\n  \"license\": \"string\",\n  \"releases\": [\n    {\n      \"version\": \"string\",\n      \"last_updated\": \"string\",\n      \"platforms\": [\n        {\n          \"arch\": \"string\",\n          \"os\": \"string\",\n          \"systems\": \"string\",\n          \"attribute_path\": \"string\",\n          \"commit_hash\": \"string\",\n          \"date\": \"string\",\n          \"outputs\": [\n            {\n              \"name\": \"string\",\n              \"path\": \"string\",\n              \"default\": true,\n              \"nar\": \"string\"\n            }\n          ]\n        }\n      ],\n      \"platforms_summary\": \"string\",\n      \"outputs_summary\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Valkey Information in Devbox\nDESCRIPTION: Command to show configuration information about the Valkey plugin in Devbox.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/databases/valkey/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox info valkey\n```\n\n----------------------------------------\n\nTITLE: Plugin3 Configuration without Dependencies\nDESCRIPTION: Simple plugin configuration that doesn't include any other plugins, making it valid for inclusion.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/plugin.cycle.test.txt#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"plugin3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Devbox JSON Configuration with Go 1.19\nDESCRIPTION: This JSON configuration file specifies the initial package setup for devbox, including Go version 1.19.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/lockfile/lockfile_tidy.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"go@1.19\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Java Execution Commands\nDESCRIPTION: Commands to navigate and run a compiled Java program in Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/vscode.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd src/\njava main/hello\n```\n\n----------------------------------------\n\nTITLE: Expected devbox.json template structure\nDESCRIPTION: The expected JSON structure for a newly initialized devbox.json file. It defines an empty packages array which would later contain development dependencies.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/init/empty.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Devbox Package Version Update\nDESCRIPTION: This bash script tests the devbox package version update process. It starts with Go 1.19, verifies its presence in the lockfile, then updates to Go 1.20 and checks that the lockfile is updated accordingly.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/lockfile/lockfile_tidy.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Testscript to ensure lockfile is updated to remove the older version of a package\n\n# start with a devbox.json having go@1.19\ncp devbox_original.json devbox.json\nexec devbox install\ndevboxlock.packages.contains devbox.lock go@1.19\n\n# change devbox.json to instead have go@1.20\ncp devbox_changed.json devbox.json\nexec devbox install\ndevboxlock.packages.contains devbox.lock go@1.20\n! devboxlock.packages.contains devbox.lock go@1.19\n```\n\n----------------------------------------\n\nTITLE: Rendering Package Schema in JSX\nDESCRIPTION: This snippet defines the structure for rendering package metadata schema using JSX components. It includes details about flake installation, last update time, and package outputs.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/resolve-a-package-version.api.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nstyle={{\"marginLeft\":\"1rem\"}}\n>\n  <SchemaItem\n    collapsible={true}\n    className={\"schemaItem\"}\n  >\n    <details\n      style={{}}\n      className={\"openapi-markdown__details\"}\n    >\n      <summary\n        style={{}}\n      >\n        <span\n          className={\"openapi-schema__container\"}\n        >\n          <strong\n            className={\"openapi-schema__property\"}\n          >\n            flake_installable\n          </strong><span\n            className={\"openapi-schema__name\"}\n          >\n             object\n          </span>\n        </span>\n      </summary><div\n        style={{\"marginLeft\":\"1rem\"}}\n      >\n        <div\n          style={{\"marginTop\":\".5rem\",\"marginBottom\":\".5rem\"}}\n        >\n          \n          \n          The information needed to install this package as a flake reference.\n          \n          \n        </div><SchemaItem\n          collapsible={true}\n          className={\"schemaItem\"}\n        >\n          <details\n            style={{}}\n            className={\"openapi-markdown__details\"}\n          >\n            <summary\n              style={{}}\n            >\n              <span\n                className={\"openapi-schema__container\"}\n              >\n                <strong\n                  className={\"openapi-schema__property\"}\n                >\n                  ref\n                </strong><span\n                  className={\"openapi-schema__name\"}\n                >\n                   object\n                </span>\n              </span>\n            </summary><div\n              style={{\"marginLeft\":\"1rem\"}}\n            >\n              <div\n                style={{\"marginTop\":\".5rem\",\"marginBottom\":\".5rem\"}}\n              >\n                \n                \n                The full Nix reference to the flake that contains this package.\n                \n                \n              </div><SchemaItem\n                collapsible={false}\n                name={\"type\"}\n                required={false}\n                schemaName={\"string\"}\n                qualifierMessage={undefined}\n                schema={{\"type\":\"string\",\"description\":\"The type of flake reference. Usually this will be `github`.\"}}\n              >\n                \n              </SchemaItem><SchemaItem\n                collapsible={false}\n                name={\"owner\"}\n                required={false}\n                schemaName={\"string\"}\n                qualifierMessage={undefined}\n                schema={{\"type\":\"string\",\"description\":\"The owner of the repository that contains the flake. Usually `NixOS`.\"}}\n              >\n                \n              </SchemaItem><SchemaItem\n                collapsible={false}\n                name={\"repo\"}\n                required={false}\n                schemaName={\"string\"}\n                qualifierMessage={undefined}\n                schema={{\"type\":\"string\",\"description\":\"the repository that contains the flake. Usually `nixpkgs`\"}}\n              >\n                \n              </SchemaItem><SchemaItem\n                collapsible={false}\n                name={\"rev\"}\n                required={false}\n                schemaName={\"string\"}\n                qualifierMessage={undefined}\n                schema={{\"type\":\"string\",\"description\":\"The Git revision of the flake. This is usually a commit hash.\"}}\n              >\n                \n              </SchemaItem>\n            </div>\n          </details>\n        </SchemaItem><SchemaItem\n          collapsible={false}\n          name={\"attr_path\"}\n          required={false}\n          schemaName={\"string\"}\n          qualifierMessage={undefined}\n          schema={{\"type\":\"string\",\"description\":\"The attribute path to the package in the flake. This can be used to install the package with Nix or Devbox.\"}}\n        >\n          \n        </SchemaItem>\n      </div>\n    </details>\n  </SchemaItem><SchemaItem\n    collapsible={false}\n    name={\"last_updated\"}\n    required={false}\n    schemaName={\"string\"}\n    qualifierMessage={undefined}\n    schema={{\"type\":\"string\",\"description\":\"The last time this package was updated in the Nixpkgs repo\"}}\n  >\n    \n  </SchemaItem><SchemaItem\n    collapsible={true}\n    className={\"schemaItem\"}\n  >\n    <details\n      style={{}}\n      className={\"openapi-markdown__details\"}\n    >\n      <summary\n        style={{}}\n      >\n        <span\n          className={\"openapi-schema__container\"}\n        >\n          <strong\n            className={\"openapi-schema__property\"}\n          >\n            outputs\n          </strong><span\n            className={\"openapi-schema__name\"}\n          >\n             object[]\n          </span>\n        </span>\n      </summary><div\n        style={{\"marginLeft\":\"1rem\"}}\n      >\n        <div\n          style={{\"marginTop\":\".5rem\",\"marginBottom\":\".5rem\"}}\n        >\n          \n\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Development Container Files\nDESCRIPTION: Commands to check if the expected development container configuration files exist. These commands verify that the Dockerfile and devcontainer.json were properly generated.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/generate/devcontainer.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexists .devcontainer/Dockerfile\nexists .devcontainer/devcontainer.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox Package Dependencies with devbox.json\nDESCRIPTION: This JSON configuration file specifies the package dependencies for the Devbox project, listing curl version 7.87.0 as the only required package.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/lockfile/nopaths.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\"curl@7.87.0\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Devbox Configuration with Empty Packages\nDESCRIPTION: The initial Devbox configuration file (devbox.json) with an empty packages array, serving as a starting point for the test script.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_outputs.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New C# Console Project\nDESCRIPTION: Command line instruction for creating a new C# console application project using the dotnet CLI tool.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/csharp.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new console -lang \"C#\" -o <name>\n```\n\n----------------------------------------\n\nTITLE: Specifying TensorFlow Nightly Build Dependency\nDESCRIPTION: This line specifies a dependency on the nightly (development) build of TensorFlow. Nightly builds contain the latest features and fixes but may be less stable than release versions.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/data_science/tensorflow/requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntf-nightly\n```\n\n----------------------------------------\n\nTITLE: Devbox JSON Configuration with Go 1.20\nDESCRIPTION: This JSON configuration file specifies the updated package setup for devbox, including Go version 1.20.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/lockfile/lockfile_tidy.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"go@1.20\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Devbox Website\nDESCRIPTION: Command to start a local development server for the Devbox website. This opens a browser window and reflects most changes live without requiring server restart.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Devbox Lockfile with Specific Python Version\nDESCRIPTION: Lockfile that pins Python to a specific version (3.12.5) and nixpkgs commit hash. This particular configuration is crucial for reproducing the missing reference issue being tested.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_missing_ref.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lockfile_version\": \"1\",\n  \"packages\": {\n    \"python@latest\": {\n      \"last_modified\": \"2024-09-10T15:01:03Z\",\n      \"plugin_version\": \"0.0.4\",\n      \"resolved\": \"github:NixOS/nixpkgs/5ed627539ac84809c78b2dd6d26a5cebeb5ae269#python3\",\n      \"source\": \"devbox-search\",\n      \"version\": \"3.12.5\",\n      \"systems\": {\n        \"aarch64-darwin\": {\n          \"outputs\": [\n            {\n              \"name\": \"out\",\n              \"path\": \"/nix/store/9pj4rzx5pbynkkxq1srzwjhywmcfxws3-python3-3.12.5\",\n              \"default\": true\n            }\n          ],\n          \"store_path\": \"/nix/store/9pj4rzx5pbynkkxq1srzwjhywmcfxws3-python3-3.12.5\"\n        },\n        \"aarch64-linux\": {\n          \"outputs\": [\n            {\n              \"name\": \"out\",\n              \"path\": \"/nix/store/6iq3nhgdyp8a5wzwf097zf2mn4zyqxr6-python3-3.12.5\",\n              \"default\": true\n            },\n            {\n              \"name\": \"debug\",\n              \"path\": \"/nix/store/xc4hygp28y7g1rvjf0vi7fj0d83a75pj-python3-3.12.5-debug\"\n            }\n          ],\n          \"store_path\": \"/nix/store/6iq3nhgdyp8a5wzwf097zf2mn4zyqxr6-python3-3.12.5\"\n        },\n        \"x86_64-darwin\": {\n          \"outputs\": [\n            {\n              \"name\": \"out\",\n              \"path\": \"/nix/store/ks8acr22s4iggnmvxydm5czl30racy32-python3-3.12.5\",\n              \"default\": true\n            }\n          ],\n          \"store_path\": \"/nix/store/ks8acr22s4iggnmvxydm5czl30racy32-python3-3.12.5\"\n        },\n        \"x86_64-linux\": {\n          \"outputs\": [\n            {\n              \"name\": \"out\",\n              \"path\": \"/nix/store/h3i0acpmr8mrjx07519xxmidv8mpax4y-python3-3.12.5\",\n              \"default\": true\n            },\n            {\n              \"name\": \"debug\",\n              \"path\": \"/nix/store/0a39pi2s6kxqc3kjjz2y9yzibd62zhhb-python3-3.12.5-debug\"\n            }\n          ],\n          \"store_path\": \"/nix/store/h3i0acpmr8mrjx07519xxmidv8mpax4y-python3-3.12.5\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using devbox global update command in Bash\nDESCRIPTION: Command syntax for updating packages in Devbox global configuration. It can update specific packages by listing them as arguments or update all versioned packages when no arguments are provided.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_update.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox update [pkg]... [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Output Schema in JSX for Nix Package Documentation\nDESCRIPTION: This snippet defines the schema for an output object within a package release. It includes properties such as the output name, path in the Nix store, and whether it's the default output.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/get-a-package.api.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SchemaItem\n  collapsible={false}\n  name={\"name\"}\n  required={false}\n  schemaName={\"string\"}\n  qualifierMessage={undefined}\n  schema={{\"type\":\"string\",\"description\":\"The name of the output (e.g., `out`, `lib`, `dev`)\"}}\n>\n  \n</SchemaItem>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<SchemaItem\n  collapsible={false}\n  name={\"path\"}\n  required={false}\n  schemaName={\"string\"}\n  qualifierMessage={undefined}\n  schema={{\"type\":\"string\",\"description\":\"The unique path to the output in the Nix store.\"}}\n>\n  \n</SchemaItem>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<SchemaItem\n  collapsible={false}\n  name={\"default\"}\n  required={false}\n  schemaName={\"boolean\"}\n  qualifierMessage={undefined}\n  schema={{\"type\":\"boolean\",\"description\":\"Whether this output is the default output for the package\"}}\n>\n  \n</SchemaItem>\n```\n\n----------------------------------------\n\nTITLE: Querying Basic Package Information in Devbox\nDESCRIPTION: Initializes a Devbox project and retrieves information about a package named 'hello'. Tests the basic functionality of the info command with a simple package name.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/info/info.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox init\nexec devbox info hello\nstdout 'hello '\n```\n\n----------------------------------------\n\nTITLE: Expected Devbox JSON Configuration with Python Plugin Disabled\nDESCRIPTION: JSON configuration that defines the expected state of devbox.json after adding Python with the plugin disabled and adding the hello package. Uses object notation with package-specific options.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/plugin.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"hello\": \"latest\",\n    \"python\": {\n      \"version\": \"latest\",\n      \"disable_plugin\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Environment\nDESCRIPTION: Basic setup commands to initialize Devbox and add the 'which' utility\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/path.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox init\nexec devbox add which\n```\n\n----------------------------------------\n\nTITLE: Devbox Lockfile with Python Package Resolution\nDESCRIPTION: The devbox.lock file contains resolved package information for Python across multiple platforms. It includes version details, store paths, and outputs for different system architectures.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_missing_so.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lockfile_version\": \"1\",\n  \"packages\": {\n    \"python@latest\": {\n      \"last_modified\":  \"2024-07-07T07:43:47Z\",\n      \"plugin_version\": \"0.0.3\",\n      \"resolved\":       \"github:NixOS/nixpkgs/b60793b86201040d9dee019a05089a9150d08b5b#python3\",\n      \"source\":         \"devbox-search\",\n      \"version\":        \"3.12.4\",\n      \"systems\": {\n        \"aarch64-darwin\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/3swy1vadi125g0c1vxqp8ykdr749803j-python3-3.12.4\",\n              \"default\": true\n            }\n          ],\n          \"store_path\": \"/nix/store/3swy1vadi125g0c1vxqp8ykdr749803j-python3-3.12.4\"\n        },\n        \"aarch64-linux\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/sz2facg15yq3ziqkidb1dkkglwzkkg8a-python3-3.12.4\",\n              \"default\": true\n            },\n            {\n              \"name\": \"debug\",\n              \"path\": \"/nix/store/19vjjqg7jbfblqapf63nm9ich1xdq9dx-python3-3.12.4-debug\"\n            }\n          ],\n          \"store_path\": \"/nix/store/sz2facg15yq3ziqkidb1dkkglwzkkg8a-python3-3.12.4\"\n        },\n        \"x86_64-darwin\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/3y5wy1i9nq5293knm23mxsj5l6w41h2l-python3-3.12.4\",\n              \"default\": true\n            }\n          ],\n          \"store_path\": \"/nix/store/3y5wy1i9nq5293knm23mxsj5l6w41h2l-python3-3.12.4\"\n        },\n        \"x86_64-linux\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/z7xxy35k7620hs6fn6la5fg2lgklv72l-python3-3.12.4\",\n              \"default\": true\n            },\n            {\n              \"name\": \"debug\",\n              \"path\": \"/nix/store/3x6jqv5yw212v8rlwql88cn94dginq32-python3-3.12.4-debug\"\n            }\n          ],\n          \"store_path\": \"/nix/store/z7xxy35k7620hs6fn6la5fg2lgklv72l-python3-3.12.4\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Schema for Package Search API\nDESCRIPTION: The JSON schema that defines the response format for the `/search` endpoint. It includes the original query, total number of results, and an array of matching packages with their names, summaries, and last updated timestamps.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/search-packages.api.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"string\",\n  \"total_results\": 0,\n  \"results\": [\n    {\n      \"name\": \"string\",\n      \"summary\": \"string\",\n      \"last_updated\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables with Double Quotes in Devbox\nDESCRIPTION: Demonstrates how to access an environment variable within a Devbox command using double quotes, which allows for shell expansion of the variable before passing to Devbox.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/quote_escaping.test.txt#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox run echo \"$FOO\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Devbox Development Shell\nDESCRIPTION: Command to activate a Devbox shell which sets up a virtual environment with the Temporal Python SDK installed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/cloud_development/temporal/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Generating a Dockerfile from DevBox configuration\nDESCRIPTION: Command to generate a Dockerfile based on the existing DevBox configuration. This allows containerizing the development environment defined in DevBox.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/generate/dockerfile.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox generate dockerfile\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Shell\nDESCRIPTION: Command to start the devbox shell environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Verifying PATH Configuration and Command Execution in Devbox Test Environment\nDESCRIPTION: This script checks that the PATH environment variable contains exactly one entry as expected by the testing framework. It verifies that the 'devbox' command is accessible while ensuring other common utilities like 'grep' and 'echo' are not available, confirming proper environment isolation.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/basic/default_test_env.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# PATH should have a single entry: the one setup by the testing framework\nenv.path.len 1\n\n# Through that path we should be able to execute devbox:\nexec devbox version\n\n# But nothing else (including common tools):\n! exec grep --version\n! exec echo \"echo should not be in path\"\n```\n\n----------------------------------------\n\nTITLE: Removing Packages from Devbox\nDESCRIPTION: Removes the 'hello' package from the devbox environment and verifies it's no longer available.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/rm.test.txt#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox rm hello\n! exec devbox run hello\n! stdout 'Hello, world!'\n```\n\n----------------------------------------\n\nTITLE: DevBox JSON Configuration\nDESCRIPTION: Configuration file defining a multi-line script that tests error handling by outputting a line, generating an error, and attempting to output another line that should not execute.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/script_exit_on_error.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n  ],\n  \"shell\": {\n    \"scripts\": {\n      \"multi_line\": [\n        \"echo \\\"first line\\\"\",\n        \"exit 1\",\n        \"echo \\\"second line\\\"\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Locking Package Versions for Devbox Environment\nDESCRIPTION: This JSON lock file specifies the exact versions and paths for PostgreSQL and Python packages across different system architectures.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_old_glibc.test.txt#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lockfile_version\": \"1\",\n  \"packages\": {\n    \"postgresql@latest\": {\n      \"last_modified\":  \"2024-02-22T01:07:56Z\",\n      \"plugin_version\": \"0.0.2\",\n      \"resolved\":       \"github:NixOS/nixpkgs/98b00b6947a9214381112bdb6f89c25498db4959#postgresql\",\n      \"source\":         \"devbox-search\",\n      \"version\":        \"15.5\",\n      \"systems\": {\n        \"aarch64-darwin\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/6cn0kmav77wba54xibfg9clqzbpan74b-postgresql-15.5\",\n              \"default\": true\n            },\n            {\n              \"name\":    \"man\",\n              \"path\":    \"/nix/store/588y60371pqh3vc9rasjawfwmchpac9d-postgresql-15.5-man\",\n              \"default\": true\n            },\n            {\n              \"name\": \"doc\",\n              \"path\": \"/nix/store/dxivb9x0iwssqzz8wsswis9q9r1sjm18-postgresql-15.5-doc\"\n            },\n            {\n              \"name\": \"lib\",\n              \"path\": \"/nix/store/dbc9hjh5ll5pjgxwl3r9nymdxw7sw8cl-postgresql-15.5-lib\"\n            }\n          ]\n        },\n        \"aarch64-linux\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/kvpjir3cjbijs2w8b20yzqjq0nsd63mp-postgresql-15.5\",\n              \"default\": true\n            },\n            {\n              \"name\":    \"man\",\n              \"path\":    \"/nix/store/4kcdjf0gg9jl4n9kxvj5iq92byry6b7l-postgresql-15.5-man\",\n              \"default\": true\n            },\n            {\n              \"name\": \"debug\",\n              \"path\": \"/nix/store/srqwd7alwglrsjclsfnrlx01n69iyy9s-postgresql-15.5-debug\"\n            },\n            {\n              \"name\": \"doc\",\n              \"path\": \"/nix/store/5fn32sdar6nk5ha9d5zb6rfpndgdbg68-postgresql-15.5-doc\"\n            },\n            {\n              \"name\": \"lib\",\n              \"path\": \"/nix/store/addi70hgggl75jm74p0s435bfaay6m1w-postgresql-15.5-lib\"\n            }\n          ]\n        },\n        \"x86_64-darwin\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/v5ym92k3kss1af7n1788653vis1d6qsc-postgresql-15.5\",\n              \"default\": true\n            },\n            {\n              \"name\":    \"man\",\n              \"path\":    \"/nix/store/x9hm4ip61cichmhzhzpykzypn3pqkh01-postgresql-15.5-man\",\n              \"default\": true\n            },\n            {\n              \"name\": \"doc\",\n              \"path\": \"/nix/store/nd1mhmgpm9w5rfpiibg6m7g4difpl5af-postgresql-15.5-doc\"\n            },\n            {\n              \"name\": \"lib\",\n              \"path\": \"/nix/store/q8lijs7rmlkx4qssmh0sjyy77f41y2jh-postgresql-15.5-lib\"\n            }\n          ]\n        },\n        \"x86_64-linux\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/vvd65gjggb2n8wxbsk1cyxx0wpfidagf-postgresql-15.5\",\n              \"default\": true\n            },\n            {\n              \"name\":    \"man\",\n              \"path\":    \"/nix/store/88jhk99imah1v19xqkldi1lfyaayni71-postgresql-15.5-man\",\n              \"default\": true\n            },\n            {\n              \"name\": \"lib\",\n              \"path\": \"/nix/store/w109qgbl14afcg5akhnahf8r0hkdqqb6-postgresql-15.5-lib\"\n            },\n            {\n              \"name\": \"debug\",\n              \"path\": \"/nix/store/ia44jr4m4jyf3a48qwpf6vgrr95jig46-postgresql-15.5-debug\"\n            },\n            {\n              \"name\": \"doc\",\n              \"path\": \"/nix/store/7vfnvfb6scmf23y6yj5zx8p5r3wsgnq5-postgresql-15.5-doc\"\n            }\n          ]\n        }\n      }\n    },\n    \"python@3.7\": {\n      \"last_modified\":  \"2022-12-17T09:19:40Z\",\n      \"plugin_version\": \"0.0.3\",\n      \"resolved\":       \"github:NixOS/nixpkgs/80c24eeb9ff46aa99617844d0c4168659e35175f#python37\",\n      \"source\":         \"devbox-search\",\n      \"version\":        \"3.7.16\",\n      \"systems\": {\n        \"aarch64-darwin\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/a89sd5jwn01cdg97lkspl8cpf75y5142-python3-3.7.16\",\n              \"default\": true\n            }\n          ],\n          \"store_path\": \"/nix/store/a89sd5jwn01cdg97lkspl8cpf75y5142-python3-3.7.16\"\n        },\n        \"aarch64-linux\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/ymrbxfmljyl73rmh5cfk0bzk3ydcbqg8-python3-3.7.16\",\n              \"default\": true\n            },\n            {\n              \"name\": \"debug\",\n              \"path\": \"/nix/store/3x7736j3fyw6j9fzn1y9fc0iqyf1rncc-python3-3.7.16-debug\"\n            }\n          ],\n          \"store_path\": \"/nix/store/ymrbxfmljyl73rmh5cfk0bzk3ydcbqg8-python3-3.7.16\"\n        },\n        \"x86_64-darwin\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/i028a4nf177g23ksa7kc63ld9nys17nb-python3-3.7.16\",\n              \"default\": true\n            }\n          ],\n          \"store_path\": \"/nix/store/i028a4nf177g23ksa7kc63ld9nys17nb-python3-3.7.16\"\n        },\n        \"x86_64-linux\": {\n          \"outputs\": [\n            {\n              \"name\":    \"out\",\n              \"path\":    \"/nix/store/ik7s754pwxhiky396mjagzmjs1kp0wzq-python3-3.7.16\",\n              \"default\": true\n            },\n            {\n              \"name\": \"debug\",\n              \"path\": \"/nix/store/l0xi13a88d4vjn8ada3a58zkwm88hq7h-python3-3.7.16-debug\"\n            }\n          ],\n          \"store_path\": \"/nix/store/ik7s754pwxhiky396mjagzmjs1kp0wzq-python3-3.7.16\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Plugin Disable Configuration\nDESCRIPTION: JSON configuration to disable the PHP plugin in Devbox settings using the disable_plugin field.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/php.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"php\": {\n            \"version\": \"latest\",\n            \"disable_plugin\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package Information Schema in JSON\nDESCRIPTION: This JSON schema represents the response structure for package information queries in Devbox. It includes package metadata (name, version, summary) and system-specific details for different architectures (aarch64-darwin, aarch64-linux, x86_64-darwin, x86_64-linux) with flake installation references and output paths.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/resolve-a-package-version.api.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"string\",\n  \"version\": \"string\",\n  \"summary\": \"string\",\n  \"systems\": {\n    \"aarch64-darwin\": {\n      \"flake_installable\": {\n        \"ref\": {\n          \"type\": \"string\",\n          \"owner\": \"string\",\n          \"repo\": \"string\",\n          \"rev\": \"string\"\n        },\n        \"attr_path\": \"string\"\n      },\n      \"last_updated\": \"string\",\n      \"outputs\": [\n        {\n          \"name\": \"string\",\n          \"path\": \"string\",\n          \"default\": true,\n          \"nar\": \"string\"\n        }\n      ]\n    },\n    \"aarch64-linux\": {\n      \"flake_installable\": {\n        \"ref\": {\n          \"type\": \"string\",\n          \"owner\": \"string\",\n          \"repo\": \"string\",\n          \"rev\": \"string\"\n        },\n        \"attr_path\": \"string\"\n      },\n      \"last_updated\": \"string\",\n      \"outputs\": [\n        {\n          \"name\": \"string\",\n          \"path\": \"string\",\n          \"default\": true,\n          \"nar\": \"string\"\n        }\n      ]\n    },\n    \"x86_64-darwin\": {\n      \"flake_installable\": {\n        \"ref\": {\n          \"type\": \"string\",\n          \"owner\": \"string\",\n          \"repo\": \"string\",\n          \"rev\": \"string\"\n        },\n        \"attr_path\": \"string\"\n      },\n      \"last_updated\": \"string\",\n      \"outputs\": [\n        {\n          \"name\": \"string\",\n          \"path\": \"string\",\n          \"default\": true,\n          \"nar\": \"string\"\n        }\n      ]\n    },\n    \"x86_64-linux\": {\n      \"flake_installable\": {\n        \"ref\": {\n          \"type\": \"string\",\n          \"owner\": \"string\",\n          \"repo\": \"string\",\n          \"rev\": \"string\"\n        },\n        \"attr_path\": \"string\"\n      },\n      \"last_updated\": \"string\",\n      \"outputs\": [\n        {\n          \"name\": \"string\",\n          \"path\": \"string\",\n          \"default\": true,\n          \"nar\": \"string\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables with Single Quotes in Devbox\nDESCRIPTION: Shows how to set an environment variable and then access it within a Devbox command using single quotes, which prevents shell expansion of the variable.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/quote_escaping.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv FOO=bar\nexec devbox run echo '$FOO'\n```\n\n----------------------------------------\n\nTITLE: Generating Devbox Bash Completion Script\nDESCRIPTION: Basic command to generate the bash completion script for devbox. This outputs the completion script which can be redirected to a file or sourced directly.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_bash.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox completion bash\n```\n\n----------------------------------------\n\nTITLE: Example Java Project Directory Structure\nDESCRIPTION: This snippet illustrates a sample directory structure for a simple Java project. It's used to demonstrate the compilation and execution commands in the Devbox shell.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/eclipse.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmy_java_project/\n-- src/\n-- -- main/\n-- -- -- hello.java\n```\n\n----------------------------------------\n\nTITLE: Building Devbox for Darwin ARM64\nDESCRIPTION: Go build command to compile devbox for Darwin (macOS) ARM64 architecture.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nGOOS=darwin GOARCH=arm64 go build -o dist/devbox-darwin-arm64 ./cmd/devbox\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox with Circular Include\nDESCRIPTION: Root devbox.json configuration file that includes plugin1, which creates a circular dependency because plugin1 includes plugin2, and plugin2 includes plugin1 back.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/plugin.cycle.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"test-with-cycle\",\n  \"include\": [\"./plugin1\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Nix Profile Access\nDESCRIPTION: Test to confirm that nix is accessible from the default profile path\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/path.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox run which nix\nstdout '/nix/var/nix/profiles/default/bin/nix'\n```\n\n----------------------------------------\n\nTITLE: Package Configuration with Hello Package\nDESCRIPTION: JSON configuration file specifying the hello package as a dependency\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/manual.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\"hello\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Platform Configuration\nDESCRIPTION: Configuration with multiple platform specifications for hello package\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_platforms.test.txt#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"hello\": \"\",\n    \"cowsay\": \"latest\",\n    \"ripgrep\": {\n      \"version\": \"latest\",\n      \"platforms\": [\"x86_64-darwin\", \"x86_64-linux\"]\n    },\n    \"vim\": {\n      \"version\": \"latest\",\n      \"excluded_platforms\": [\"x86_64-linux\"]\n    },\n    \"hello\": {\n        \"version\": \"latest\",\n        \"platforms\": [\"x86_64-darwin\", \"x86_64-linux\", \"aarch64-darwin\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling the Caddy Plugin in Devbox JSON Configuration\nDESCRIPTION: JSON configuration example showing how to disable the Caddy plugin. This keeps the Caddy package installed but prevents the plugin from automatically configuring the environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/servers/caddy.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"caddy\": {\n      \"version\": \"latest\",\n      \"disable_plugin\": true\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Ruby Plugin in Devbox JSON\nDESCRIPTION: JSON configuration example showing how to disable the Ruby plugin by setting the disable_plugin flag in your devbox.json file. This allows customizing which Ruby version to use while preventing the automatic plugin configuration.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/ruby.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"ruby\": {\n            \"version\": \"3.1\",\n            \"disable_plugin\": true\n        },\n        \"bundler\": {\n            \"version\": \"latest\",\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix Store Paths for Python 3.12.5 in JSON\nDESCRIPTION: This JSON configuration defines Nix store paths for Python 3.12.5 across different system architectures (architecture not fully shown in snippet but includes x86_64-linux). For each architecture, it specifies the output paths for both the default Python installation and any additional components like debug packages.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_cuda.test.txt#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/nix/store/rv3rj95fxv57c7qwgl43qa7n0fabdy0a-python3-3.12.5\",\n  \"default\": true\n}\n],\n\"store_path\": \"/nix/store/rv3rj95fxv57c7qwgl43qa7n0fabdy0a-python3-3.12.5\"\n},\n\"x86_64-linux\": {\n\"outputs\": [\n  {\n    \"name\": \"out\",\n    \"path\": \"/nix/store/pgb120fb7srbh418v4i2a70aq1w9dawd-python3-3.12.5\",\n    \"default\": true\n  },\n  {\n    \"name\": \"debug\",\n    \"path\": \"/nix/store/4ws5lqhgsxdpfb924n49ma6ll7i8x0hf-python3-3.12.5-debug\"\n  }\n],\n\"store_path\": \"/nix/store/pgb120fb7srbh418v4i2a70aq1w9dawd-python3-3.12.5\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Project\nDESCRIPTION: Command to initialize a new Devbox project in the current directory. This creates the necessary configuration files for Devbox to manage development environments.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/generate/devcontainer.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox init\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox Zsh Completion for Linux\nDESCRIPTION: Command to generate and install the Devbox Zsh completion script for Linux systems. This places the completion file in the first directory of the fpath.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_zsh.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevbox completion zsh > \"${fpath[1]}/_devbox\"\n```\n\n----------------------------------------\n\nTITLE: Verifying devbox init functionality in bash test script\nDESCRIPTION: A test script that checks if 'devbox init' correctly creates a new devbox.json file in an empty directory. It verifies the file is created with the correct content and that a second init attempt generates a warning.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/init/empty.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n! exists devbox.json\nexec devbox init\nexists devbox.json\n\njson.superset devbox.json expected.json\n\n# Second init should be a no-op with a warning\nexec devbox init\nstderr 'devbox.json already exists in'\n```\n\n----------------------------------------\n\nTITLE: Empty Devbox Configuration File in JSON\nDESCRIPTION: This is a basic Devbox configuration file with an empty packages array, serving as the starting point before packages are added globally.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/global_add.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Package Configuration\nDESCRIPTION: JSON configuration with an empty package list.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/add-rm.test.txt#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Testing Devbox Pure Mode\nDESCRIPTION: Defines environment variables to be used in subsequent tests to verify how they are handled in pure mode.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/pure.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv FOO=bar\nenv FOO2=bar2\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox with Duplicate Includes\nDESCRIPTION: Devbox configuration that includes the same plugin (plugin4) twice, which causes a duplicate include error.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/plugin.cycle.test.txt#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"test-with-duplicate\",\n  \"include\": [\n    \"./plugin4\",\n    \"./plugin4\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: DevBox Test Script Commands\nDESCRIPTION: Test commands to verify script error handling behavior, checking for expected stdout and ensuring the script exits after an error.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/script_exit_on_error.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! exec devbox run multi_line\nstdout 'first line'\n! stdout 'second line'\n```\n\n----------------------------------------\n\nTITLE: Disabling Valkey Plugin Configuration\nDESCRIPTION: JSON configuration to disable the Valkey plugin while maintaining the package installation\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/databases/valkey.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": {\n        \"valkey\": {\n            \"version\" : \"latest\",\n            \"disable_plugin\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Devbox Commands\nDESCRIPTION: Shell commands to install and update packages using devbox\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/update/update.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox install\n\nexec devbox update\n```\n\n----------------------------------------\n\nTITLE: Available Options for Devbox Secrets Init Command\nDESCRIPTION: This code block shows the available options for the 'devbox secrets init' command. Currently, only the help flag is listed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_secrets_init.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for init\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu on existing WSL2\nDESCRIPTION: Command to install Ubuntu distribution on an already installed Windows Subsystem for Linux 2. Used when WSL2 is already present on the system.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/installing_devbox.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwsl --install -d Ubuntu\n```\n\n----------------------------------------\n\nTITLE: Community Contribution License Agreement\nDESCRIPTION: This is the community contribution license agreement for the Devbox project, specifying the terms under which contributions must be made.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/CONTRIBUTING.md#2025-04-14_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nBy making a contribution to this project, you certify that:\n\n  a. The contribution was created in whole or in part by you and you have the right\n  to submit it under the Apache 2 License; or\n\n  b. The contribution is based upon previous work that, to the best of your\n  knowledge, is covered under an appropriate open source license and you have the\n  right under that license to submit that work with modifications, whether\n  created in whole or in part by you, under the Apache 2 License; or\n\n  c. The contribution was provided directly to you by some other person who\n  certified (a), (b) or (c) and you have not modified it.\n\n  d. You understand and agree that this project and the contribution are public\n  and that a record of the contribution (including all personal information you\n  submit with it, including your sign-off) is maintained indefinitely and may be\n  redistributed consistent with this project or the open source license(s)\n  involved.\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox with Invalid Init Hook\nDESCRIPTION: A devbox.json configuration with an invalid init hook that attempts to run a command ('hello') that isn't available. This configuration is used to test error handling when the init hook fails.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/script.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [],\n  \"shell\": {\n    \"init_hook\": \"hello\",\n    \"scripts\": {\n      \"test\": \"echo \\\"test\\\"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a DevBox project\nDESCRIPTION: Command to initialize a new DevBox development environment. This creates the necessary configuration files for DevBox in the current directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/generate/dockerfile.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox init\n```\n\n----------------------------------------\n\nTITLE: Multi-Platform Package Configuration\nDESCRIPTION: Expected configuration after adding multiple platforms for ripgrep and excluding platforms for vim\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_platforms.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"hello\": \"\",\n    \"cowsay\": \"latest\",\n    \"ripgrep\": {\n      \"version\": \"latest\",\n      \"platforms\": [\"x86_64-darwin\", \"x86_64-linux\"]\n    },\n    \"vim\": {\n      \"version\": \"latest\",\n      \"excluded_platforms\": [\"x86_64-linux\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Devbox Configuration against Expected JSON\nDESCRIPTION: Confirms that the devbox.json configuration file matches the expected content with vim package listed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/rm.test.txt#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njson.superset devbox.json expected.json\n```\n\n----------------------------------------\n\nTITLE: Building a Rust Project with Cargo\nDESCRIPTION: Command to build a Rust project using Cargo, the Rust package manager and build system.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/rust/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Installing Linux-specific package with --platform flag in Devbox\nDESCRIPTION: Command to add the busybox package to Devbox but only install it on Linux platforms (both x86_64 and ARM architectures). This helps avoid installation errors on unsupported platforms.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/guides/platform_specific_packages.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox add busybox --platform x86_64-linux,aarch64-linux\n```\n\n----------------------------------------\n\nTITLE: Visualizing Devbox Shell Lifecycle with Mermaid\nDESCRIPTION: This Mermaid flowchart illustrates the lifecycle of a Devbox shell with plugins. It shows the sequence of steps from plugin environment setup to starting the interactive shell, running scripts, and starting services.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/plugins/README.md#2025-04-14_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Devbox Shell Lifecycle\n---\nflowchart TD\n   A[Plugin env] --> B\n   B[User env] --> C\n   C[Plugin init_hook] --> D[User Init Hook]\n   D -->  E{Start Shell}\n   E --> F & G & H\n   F[Interactive Shell]\n   G[Run Scripts]\n   H[Start Services]\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox Project with JSON\nDESCRIPTION: This JSON configuration file (devbox.json) specifies the project's package dependencies and defines a shell script for testing. It includes the 'hello' package and a test script that creates a file with spaces in its name.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/basic/path_whitespace.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\"hello@latest\"],\n  \"shell\": {\n    \"scripts\": {\n      \"test\": \"touch 'file2 with spaces'\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sourcing Devbox Shell Environment and Retesting 'hello' Command\nDESCRIPTION: This sequence sources the Devbox shell environment, making the 'hello' command available, and then successfully executes it. The 'stdout' command checks for the expected output.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/shell/shellenv.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox shellenv\nsource.path\nexec hello\nstdout 'Hello, world!'\n```\n\n----------------------------------------\n\nTITLE: Initializing a Devbox Environment\nDESCRIPTION: Initializes a new Devbox environment in the current directory.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/quote_escaping.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox init\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests in Devbox\nDESCRIPTION: Go test command to run tests with race detection and coverage for all packages.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ngo test -race -cover ./...\n```\n\n----------------------------------------\n\nTITLE: Plugin2 Configuration with Circular Dependency\nDESCRIPTION: Configuration for plugin2 that includes plugin1, completing the circular dependency chain.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/plugin.cycle.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"plugin2\",\n  \"include\": [\"../plugin1\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Schema in JSX for Nix Package Documentation\nDESCRIPTION: This snippet defines the schema for a platform object within a package release. It includes properties such as architecture, operating system, Nix system name, attribute path, commit hash, and last update date.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/get-a-package.api.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SchemaItem\n  collapsible={false}\n  name={\"arch\"}\n  required={false}\n  schemaName={\"string\"}\n  qualifierMessage={undefined}\n  schema={{\"type\":\"string\",\"description\":\"The chip architecture of the platform. This will be one of `arm64` or `x86-64`.\"}}\n>\n  \n</SchemaItem>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<SchemaItem\n  collapsible={false}\n  name={\"os\"}\n  required={false}\n  schemaName={\"string\"}\n  qualifierMessage={undefined}\n  schema={{\"type\":\"string\",\"description\":\"The operating system of the platform. This will be one of `macOS` or `Linux`.\"}}\n>\n  \n</SchemaItem>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<SchemaItem\n  collapsible={false}\n  name={\"systems\"}\n  required={false}\n  schemaName={\"string\"}\n  qualifierMessage={undefined}\n  schema={{\"type\":\"string\",\"description\":\"The full Nix compatible name of the system. This will be one of `aarch64-darwin`, `aarch64-linux`, `x86_64-darwin`, or `x86_64-linux`.\"}}\n>\n  \n</SchemaItem>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<SchemaItem\n  collapsible={false}\n  name={\"attribute_path\"}\n  required={false}\n  schemaName={\"string\"}\n  qualifierMessage={undefined}\n  schema={{\"type\":\"string\",\"description\":\"The attribute path to the package in the Nixpkgs. This can be used to install the package with Nix or Devbox.\"}}\n>\n  \n</SchemaItem>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<SchemaItem\n  collapsible={false}\n  name={\"commit_hash\"}\n  required={false}\n  schemaName={\"string\"}\n  qualifierMessage={undefined}\n  schema={{\"type\":\"string\",\"description\":\"The hash of the Nixpkgs commit that this package was last updated in.\"}}\n>\n  \n</SchemaItem>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<SchemaItem\n  collapsible={false}\n  name={\"date\"}\n  required={false}\n  schemaName={\"string\"}\n  qualifierMessage={undefined}\n  schema={{\"type\":\"string\",\"description\":\"The date this package was last updated in Nixpkgs.\"}}\n>\n  \n</SchemaItem>\n```\n\n----------------------------------------\n\nTITLE: Devbox Zsh Completion Command Usage\nDESCRIPTION: The command syntax for generating Zsh completion for Devbox. This command supports additional flags for customizing the output.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_completion_zsh.md#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ndevbox completion zsh [flags]\n```\n\n----------------------------------------\n\nTITLE: Locating Java Executable in Devbox Shell\nDESCRIPTION: Example path output when locating Java executable in Devbox shell environment.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/ide_configuration/vscode.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/nix/store/qaf9fysymdoj19qtyg7209s83lajz65b-zulu17.34.19-ca-jdk-17.0.3/bin/java\n```\n\n----------------------------------------\n\nTITLE: Devbox Package Configuration\nDESCRIPTION: JSON configuration file specifying the packages to be installed via devbox\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/update/update.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"hello@latest\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unfree Package\nDESCRIPTION: Removes the previously added Slack package from devbox configuration\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/packages/unfree.test.txt#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexec devbox rm slack\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for Nix Package Outputs in JSON\nDESCRIPTION: This snippet defines the schema for package outputs, including output name, path, default status, and NAR file information.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/resolve-a-package-version.api.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"description\": \"The name of the output (e.g., `out`, `lib`, `dev`)\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"description\": \"The unique path to the output in the Nix store.\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"boolean\",\n  \"description\": \"Whether this output is the default output for the package\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"description\": \"The path to the packages NAR (Nix Archive) file. This file contains the package's build artifacts.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Devbox Global Remove Command in Bash\nDESCRIPTION: This command removes a specified package from the Devbox global configuration. It requires specifying the package name to remove and supports additional flags for help and quiet operation.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_rm.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevbox global rm <pkg> [flags]\n```\n\n----------------------------------------\n\nTITLE: Building Devbox for All Platforms\nDESCRIPTION: Script to build devbox for multiple platforms (Darwin AMD64/ARM64, Linux AMD64/ARM64).\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndevbox run build-darwin-amd64\ndevbox run build-darwin-arm64\ndevbox run build-linux-amd64\ndevbox run build-linux-arm64\n```\n\n----------------------------------------\n\nTITLE: Verifying Nix Package Path Integration\nDESCRIPTION: Confirms that installed nix packages path is included in PATH\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/run/path.test.txt#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstdout '.devbox/nix/profile/default/bin'\n```\n\n----------------------------------------\n\nTITLE: Defining Shell Init Hook in JSON\nDESCRIPTION: Illustrates how to define an init hook for customizing the shell environment in devbox.json.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/configuration.md#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shell\": {\n        \"init_hook\": [\n            \"export PS1='📦 devbox> '\",\n            \"echo 'Welcome! See CONTRIBUTING.md for tips on contributing to devbox.'\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Scripts Defined in devbox.json\nDESCRIPTION: Shows how to run a predefined script from the devbox.json configuration file, where the script 'moo' is defined as 'cowsay moo'.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/cli_reference/devbox_global_run.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  devbox global run moo\n```\n\n----------------------------------------\n\nTITLE: Building Devbox for Darwin AMD64\nDESCRIPTION: Go build command to compile devbox for Darwin (macOS) AMD64 architecture.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/devbox.md#2025-04-14_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nGOOS=darwin GOARCH=amd64 go build -o dist/devbox-darwin-amd64 ./cmd/devbox\n```\n\n----------------------------------------\n\nTITLE: Testing Path Order Assertions in Shell\nDESCRIPTION: A series of assertions testing the path.order function. The tests verify that path segments are ordered correctly in a colon-delimited path string. Both positive assertions (path.order) and negative assertions (! path.order) are included.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/assert/assert.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexec print a:b:c:d:e:fg:h\npath.order 'a' 'c' 'e'\n! path.order 'a' 'b' 'a'\npath.order 'a' 'f'\n! path.order 'a' 'c' 'h' 'h'\n```\n\n----------------------------------------\n\nTITLE: Verifying Devbox Configuration JSON\nDESCRIPTION: This JSON snippet represents the expected configuration state after removing all packages from the Devbox environment. It's used to verify that the actual configuration matches the expected empty state.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/rm/multi.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Package Dependencies in Elixir's mix.exs\nDESCRIPTION: Code snippet showing how to add the elixir_hello package as a dependency in a mix.exs file. This enables importing the package into other Elixir projects with a specific version constraint.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/elixir/elixir_hello/README.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:elixir_hello, \"~> 0.1.0\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Initial Devbox Configuration\nDESCRIPTION: Basic devbox configuration with simple package list\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add_platforms.test.txt#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"hello\",\n    \"cowsay@latest\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin1 Configuration with Circular Dependency\nDESCRIPTION: Configuration for plugin1 that includes plugin2, creating part of a circular dependency chain.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/plugin.cycle.test.txt#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"plugin1\",\n  \"include\": [\"../plugin2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Printing a Greeting in Ruby\nDESCRIPTION: This Ruby code snippet defines a function 'print_hi' that takes a name parameter and prints a greeting to the standard output. It demonstrates string interpolation and function calling in Ruby.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/jekyll/myblog/_posts/2023-01-15-welcome-to-jekyll.markdown#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef print_hi(name)\n  puts \"Hi, #{name}\"\nend\nprint_hi('Tom')\n#=> prints 'Hi, Tom' to STDOUT.\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version in Devbox Shell\nDESCRIPTION: Example command showing how to verify the Python version in a Devbox environment\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/contributor-quickstart.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython --version\n```\n\n----------------------------------------\n\nTITLE: Plugin4 Configuration for Duplicate Include Test\nDESCRIPTION: Simple plugin configuration used to demonstrate duplicate include detection in Devbox.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/plugin/plugin.cycle.test.txt#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"plugin4\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Schema for Package Version Resolution\nDESCRIPTION: The schema for a successful (200 OK) response from the package resolution endpoint. It includes the resolved package name, version, summary, and system-specific installation details.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/nixhub/resolve-a-package-version.api.mdx#2025-04-14_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"string\",  // The name of the package that was resolved\n  \"version\": \"string\",  // The latest version that matches the requested version string\n  \"summary\": \"string\",  // A short description of the package\n  \"systems\": {  // A list of systems the package can be installed on\n    \"aarch64-darwin\": {  // System-specific installation details\n      // System-specific package information\n    }\n    // Other supported systems...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GPU Test Command with Debug Environment\nDESCRIPTION: Bash command that runs the TensorFlow GPU test with debugging environment variables to trace library loading. It executes the Python script within a virtual environment and checks expected output patterns.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/languages/python_patch_cuda.test.txt#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexec devbox run -e LD_DEBUG=files,libs,versions -e LD_DEBUG_OUTPUT=lddebug venv -- python main.py\n```\n\n----------------------------------------\n\nTITLE: Running Llama Inference with Custom Prompt in Bash\nDESCRIPTION: This command runs the Llama inference engine using a specific model file with a custom prompt. The -n parameter sets the number of tokens to generate (512), and the -p parameter specifies the prompt text.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/data_science/llama/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nllama -m ./models/vic7B/ggml-vic7b-q5_0.bin -n 512 -p \"your custom prompt\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Steps for Devbox VSCode Extension\nDESCRIPTION: Instructions for publishing a new version of the Devbox VSCode extension, including updating version numbers, changelog, and triggering the release workflow.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/vscode-extension/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSteps:\n\n1. Bump the version in `package.json`, and add notes to `CHANGELOG.md`. Sample PR: #951.\n2. Manually trigger the [`vscode-ext-release` in Github Actions](https://github.com/jetify-com/devbox/actions/workflows/vscode-ext-release.yaml).\n```\n\n----------------------------------------\n\nTITLE: Adding PHP Packages to Devbox Configuration\nDESCRIPTION: This snippet shows how to add PHP and Composer to a Devbox project configuration file. It demonstrates the use of the latest versions of PHP and Composer.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/php/latest/README.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        \"php@latest\",\n        \"php83Packages.composer@latest\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Page Front Matter in Markdown\nDESCRIPTION: This snippet defines the front matter for a Jekyll page, specifying the layout, title, and permalink. It sets up the basic structure for an 'About' page in a Jekyll-based website.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/stacks/jekyll/myblog/about.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: page\ntitle: About\npermalink: /about/\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Structure\nDESCRIPTION: Basic changelog structure with unreleased section and initial version placeholder following Keep a Changelog format.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/examples/development/haskell/my-project/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog for `my-project`\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to the\n[Haskell Package Versioning Policy](https://pvp.haskell.org/).\n\n## Unreleased\n\n## 0.1.0.0 - YYYY-MM-DD\n```\n\n----------------------------------------\n\nTITLE: Expected Final Devbox Configuration After Adding All Packages\nDESCRIPTION: The expected final Devbox configuration after adding both the non-indexed package and regular packages (ripgrep and vim).\nSOURCE: https://github.com/jetify-com/devbox/blob/main/testscripts/add/add.test.txt#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"ripgrep@latest\",\n    \"vim@latest\",\n    \"stdenv.cc.cc.lib\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Apache Plugin in Devbox Configuration\nDESCRIPTION: JSON configuration snippet showing how to disable the Apache plugin in your devbox.json file while keeping the Apache package installed.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/servers/apache.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"apache\": {\n      \"version\": \"latest\",\n      \"disable_plugin\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Umami Example Installation\nDESCRIPTION: Command to run the Umami example installation script for Drupal\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/stacks/drupal.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ninstall-drupal.sh\n```\n\n----------------------------------------\n\nTITLE: PHP Plugin Include Configuration\nDESCRIPTION: JSON configuration to manually include the PHP plugin in Devbox settings.\nSOURCE: https://github.com/jetify-com/devbox/blob/main/docs/app/docs/devbox_examples/languages/php.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"include\": [\n        \"plugin:php\"\n    ]\n```"
  }
]