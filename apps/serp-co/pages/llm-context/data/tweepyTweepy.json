[
  {
    "owner": "tweepy",
    "repo": "tweepy",
    "content": "TITLE: Initializing OAuth1UserHandler for Twitter API v1.1\nDESCRIPTION: Sets up OAuth 1.0a User Context authentication for Twitter API v1.1 using pre-generated credentials. Requires consumer key, consumer secret, access token, and access token secret to authenticate as a specific user.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\nauth = tweepy.OAuth1UserHandler(\n   \"API / Consumer Key here\", \"API / Consumer Secret here\",\n   \"Access Token here\", \"Access Token Secret here\"\n)\napi = tweepy.API(auth)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Object with Tweepy API\nDESCRIPTION: This snippet demonstrates how to use the Tweepy API to retrieve a User object for a specific Twitter username. It shows how to access the user's data and iterate through their friends.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/getting_started.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Get the User object that represents the user, @Twitter\nuser = api.get_user(screen_name=\"Twitter\")\n\nprint(user.screen_name)\nprint(user.followers_count)\nfor friend in user.friends():\n   print(friend.screen_name)\n```\n\n----------------------------------------\n\nTITLE: Posting a New Tweet with Tweepy in Python\nDESCRIPTION: Method to post a new tweet. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nAPI.update_status\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamingClient with Twitter API Bearer Token in Python\nDESCRIPTION: This snippet demonstrates how to import Tweepy and initialize a StreamingClient instance with a Twitter API Bearer Token. This is the first step in setting up a connection to Twitter's streaming API.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/streaming.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\nstreaming_client = tweepy.StreamingClient(\"Bearer Token here\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Retrieving Home Timeline Tweets with Tweepy\nDESCRIPTION: This example shows how to authenticate with Twitter API v1.1 using OAuth 1.0a User Context and retrieve tweets from the user's home timeline. It demonstrates setting up authentication, creating an API instance, and iterating through tweets.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/getting_started.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\nauth = tweepy.OAuth1UserHandler(\n    consumer_key, consumer_secret, access_token, access_token_secret\n)\n\napi = tweepy.API(auth)\n\npublic_tweets = api.home_timeline()\nfor tweet in public_tweets:\n    print(tweet.text)\n```\n\n----------------------------------------\n\nTITLE: Initializing API with OAuth1UserHandler\nDESCRIPTION: Shows how to use an OAuth1UserHandler instance to initialize the Tweepy API class after completing the 3-legged OAuth flow. This enables API calls on behalf of the authenticated user.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\napi = tweepy.API(oauth1_user_handler)\n```\n\n----------------------------------------\n\nTITLE: Installing Tweepy via pip\nDESCRIPTION: Command to install the latest version of Tweepy from PyPI using pip package manager.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install tweepy\n```\n\n----------------------------------------\n\nTITLE: Retweeting a Tweet with Tweepy in Python\nDESCRIPTION: Method to retweet a specified tweet. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nAPI.retweet\n```\n\n----------------------------------------\n\nTITLE: Getting User Timeline Tweets with Tweepy in Python\nDESCRIPTION: Method to fetch tweets from a specified user's timeline. Part of the 'Get Tweet timelines' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nAPI.user_timeline\n```\n\n----------------------------------------\n\nTITLE: Twitter API v2 Examples\nDESCRIPTION: Comprehensive examples for Twitter API v2 endpoints including tweet operations, user management, search functionality, and engagement metrics using Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/examples.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# References to v2 example files:\n# ../examples/API_v2/authentication.py\n# ../examples/API_v2/search_recent_tweets.py\n# ../examples/API_v2/tweet_fields.py\n# ../examples/API_v2/expansions.py\n# ../examples/API_v2/create_tweet.py\n# ../examples/API_v2/get_users_tweets.py\n# ../examples/API_v2/get_users_mentions.py\n# ../examples/API_v2/get_liked_tweets.py\n# ../examples/API_v2/get_retweeters.py\n# ../examples/API_v2/get_liking_users.py\n# ../examples/API_v2/get_users_followers.py\n# ../examples/API_v2/get_tweets.py\n# ../examples/API_v2/get_users.py\n# ../examples/API_v2/get_recent_tweets_count.py\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tweet with Tweepy in Python\nDESCRIPTION: Method to delete a specified tweet. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nAPI.destroy_status\n```\n\n----------------------------------------\n\nTITLE: Using Paginator with Twitter API in Python\nDESCRIPTION: Example demonstrating how to use Tweepy's Paginator class to handle pagination when retrieving Twitter data. Shows two common use cases: getting user followers with a limit of 5 responses and flattening search results with a limit of 250 tweets.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/v2_pagination.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\nclient = tweepy.Client(\"Bearer Token here\")\n\nfor response in tweepy.Paginator(client.get_users_followers, 2244994945,\n                                    max_results=1000, limit=5):\n    print(response.meta)\n\nfor tweet in tweepy.Paginator(client.search_recent_tweets, \"Tweepy\",\n                                max_results=100).flatten(limit=250):\n    print(tweet.id)\n```\n\n----------------------------------------\n\nTITLE: Unretweet a Tweet with Tweepy in Python\nDESCRIPTION: Method to undo a retweet of a specified tweet. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nAPI.unretweet\n```\n\n----------------------------------------\n\nTITLE: Twitter API v1.1 Examples\nDESCRIPTION: Collection of examples showcasing authentication, status updates, follower management, and rate limit handling using Twitter API v1.1 with Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/examples.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# References to v1.1 example files:\n# ../examples/API_v1/authentication.py\n# ../examples/API_v1/pin-based_authorization.py\n# ../examples/API_v1/update_status.py\n# ../examples/API_v1/follow_followers.py\n# ../examples/API_v1/rate_limit_handling.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Bearer Token for Twitter API v2\nDESCRIPTION: Sets up OAuth 2.0 Bearer Token (App-Only) authentication for Twitter API v2 using a pre-generated bearer token. This simplified approach directly passes the token to the Client constructor.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\nclient = tweepy.Client(\"Bearer Token here\")\n```\n\n----------------------------------------\n\nTITLE: Using OAuth2UserHandler for OAuth 2.0 Authorization Code Flow with PKCE\nDESCRIPTION: Initializes the OAuth 2.0 Authorization Code Flow with PKCE to authenticate as a user. Requires client ID, redirect URI, and scopes. For confidential clients, client secret is also required.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\noauth2_user_handler = tweepy.OAuth2UserHandler(\n    client_id=\"Client ID here\",\n    redirect_uri=\"Callback / Redirect URI / URL here\",\n    scope=[\"Scope here\", \"Scope here\"],\n    # Client Secret is only necessary if using a confidential client\n    client_secret=\"Client Secret here\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with OAuth 1.0a Credentials for Twitter API v2\nDESCRIPTION: Sets up OAuth 1.0a User Context authentication for Twitter API v2 using pre-generated credentials. Passes consumer key, consumer secret, access token, and access token secret directly to the Client constructor.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\nclient = tweepy.Client(\n    consumer_key=\"API / Consumer Key here\",\n    consumer_secret=\"API / Consumer Secret here\",\n    access_token=\"Access Token here\",\n    access_token_secret=\"Access Token Secret here\"\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Printing Full Text of Tweet or Retweet in Python using Tweepy\nDESCRIPTION: This snippet demonstrates how to retrieve a tweet's full text using Tweepy's extended mode. It handles both regular tweets and retweets, printing the full text in either case. The code uses the get_status method with tweet_mode set to \"extended\" and checks for the presence of a retweeted_status attribute.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/extended_tweets.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstatus = api.get_status(id, tweet_mode=\"extended\")\ntry:\n    print(status.retweeted_status.full_text)\nexcept AttributeError:  # Not a Retweet\n    print(status.full_text)\n```\n\n----------------------------------------\n\nTITLE: Adding Rules and Filtering Twitter Stream with StreamingClient in Python\nDESCRIPTION: This snippet demonstrates how to add rules to the StreamingClient and then use the filter() method to connect to and run a filtered stream. This allows you to receive Tweets that match specific criteria.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/streaming.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstreaming_client.add_rules(tweepy.StreamRule(\"Tweepy\"))\nstreaming_client.filter()\n```\n\n----------------------------------------\n\nTITLE: Account Settings and Profile Methods\nDESCRIPTION: API methods for managing account settings, credentials, saved searches and profile information.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nAPI.get_settings()\nAPI.verify_credentials()\nAPI.get_saved_searches()\nAPI.get_saved_search()\nAPI.get_profile_banner()\nAPI.remove_profile_banner()\nAPI.set_settings()\nAPI.update_profile()\nAPI.update_profile_banner()\nAPI.update_profile_image()\nAPI.create_saved_search()\nAPI.destroy_saved_search()\n```\n\n----------------------------------------\n\nTITLE: Customizing Tweet Processing with StreamingClient Subclass in Python\nDESCRIPTION: This example shows how to subclass StreamingClient to customize the processing of stream data. In this case, it creates a class that prints the ID of every Tweet received from the stream.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/streaming.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass IDPrinter(tweepy.StreamingClient):\n\n    def on_tweet(self, tweet):\n        print(tweet.id)\n\n\nprinter = IDPrinter(\"Bearer Token here\")\nprinter.sample()\n```\n\n----------------------------------------\n\nTITLE: Posting a Tweet with Media using Tweepy in Python\nDESCRIPTION: Method to post a new tweet with attached media. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nAPI.update_status_with_media\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Tweet with Tweepy in Python\nDESCRIPTION: Method to fetch a single tweet by its ID. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_status\n```\n\n----------------------------------------\n\nTITLE: Searching Tweets with Tweepy in Python\nDESCRIPTION: Method to search for tweets using a query. Part of the 'Search Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nAPI.search_tweets\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Lists with Tweepy in Python\nDESCRIPTION: Method to fetch lists owned by a user or subscribed to by a user. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_lists\n```\n\n----------------------------------------\n\nTITLE: Fetching Retweets of a Tweet with Tweepy in Python\nDESCRIPTION: Method to retrieve the most recent retweets of a given tweet. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_retweets\n```\n\n----------------------------------------\n\nTITLE: User Management Methods\nDESCRIPTION: API methods for managing user relationships, including following/unfollowing, getting followers/friends, and looking up user information.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nAPI.get_follower_ids()\nAPI.get_followers()\nAPI.get_friend_ids()\nAPI.get_friends()\nAPI.incoming_friendships()\nAPI.lookup_friendships()\nAPI.no_retweets_friendships()\nAPI.outgoing_friendships()\nAPI.get_friendship()\nAPI.lookup_users()\nAPI.search_users()\nAPI.get_user()\nAPI.create_friendship()\nAPI.destroy_friendship()\nAPI.update_friendship()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific List with Tweepy in Python\nDESCRIPTION: Method to fetch details of a specific list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_list\n```\n\n----------------------------------------\n\nTITLE: Favoriting a Tweet with Tweepy in Python\nDESCRIPTION: Method to favorite (like) a specified tweet. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nAPI.create_favorite\n```\n\n----------------------------------------\n\nTITLE: Media Upload Methods\nDESCRIPTION: API methods for uploading and managing media content on Twitter.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nAPI.get_media_upload_status()\nAPI.create_media_metadata()\nAPI.media_upload()\nAPI.simple_upload()\nAPI.chunked_upload()\nAPI.chunked_upload_append()\nAPI.chunked_upload_finalize()\nAPI.chunked_upload_init()\n```\n\n----------------------------------------\n\nTITLE: Updating a List with Tweepy in Python\nDESCRIPTION: Method to update the details of a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nAPI.update_list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Favorited Tweets with Tweepy in Python\nDESCRIPTION: Method to get tweets favorited by the specified user. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_favorites\n```\n\n----------------------------------------\n\nTITLE: Paginating through Twitter search results and followers using Tweepy's Cursor\nDESCRIPTION: This example demonstrates how to use Tweepy's Cursor class for pagination. It shows two common use cases: iterating through individual items from a search query and iterating through pages of followers. The Cursor handles the API rate limits and pagination tokens automatically.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/v1_pagination.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\nauth = tweepy.OAuth2AppHandler(\"Consumer Key here\", \"Consumer Secret here\")\napi = tweepy.API(auth)\n\nfor status in tweepy.Cursor(api.search_tweets, \"Tweepy\",\n                            count=100).items(250):\n    print(status.id)\n\nfor page in tweepy.Cursor(api.get_followers, screen_name=\"TwitterDev\",\n                            count=200).pages(5):\n    print(len(page))\n```\n\n----------------------------------------\n\nTITLE: Looking Up Multiple Tweets by ID with Tweepy in Python\nDESCRIPTION: Method to retrieve full tweet objects for multiple tweet IDs. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nAPI.lookup_statuses\n```\n\n----------------------------------------\n\nTITLE: Using StreamingClient to Sample Twitter Stream in Python\nDESCRIPTION: This code shows how to use the sample() method of StreamingClient to connect to and run a sampling stream. This allows you to receive a random sample of real-time Tweets.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/streaming.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstreaming_client.sample()\n```\n\n----------------------------------------\n\nTITLE: Trends and Geo Methods\nDESCRIPTION: API methods for accessing Twitter trends and geographic location data.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nAPI.available_trends()\nAPI.closest_trends()\nAPI.get_place_trends()\nAPI.geo_id()\nAPI.reverse_geocode()\nAPI.search_geo()\n```\n\n----------------------------------------\n\nTITLE: Getting Retweets of Me with Tweepy in Python\nDESCRIPTION: Method to fetch the authenticated user's tweets that have been retweeted by others. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_retweets_of_me\n```\n\n----------------------------------------\n\nTITLE: Retrieving Home Timeline Tweets with Tweepy in Python\nDESCRIPTION: Method to fetch the authenticated user's home timeline tweets. Part of the 'Get Tweet timelines' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nAPI.home_timeline\n```\n\n----------------------------------------\n\nTITLE: Retrieving Retweeter IDs for a Tweet with Tweepy in Python\nDESCRIPTION: Method to get user IDs of users who retweeted a specific tweet. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_retweeter_ids\n```\n\n----------------------------------------\n\nTITLE: Fetching Mentions Timeline with Tweepy in Python\nDESCRIPTION: Method to retrieve tweets mentioning the authenticated user. Part of the 'Get Tweet timelines' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nAPI.mentions_timeline\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth1UserHandler for 3-legged OAuth Flow\nDESCRIPTION: Sets up the OAuth 1.0a 3-legged flow to authenticate as a user other than your developer account. Requires consumer key, consumer secret, and callback URL to start the authentication process.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\noauth1_user_handler = tweepy.OAuth1UserHandler(\n    \"API / Consumer Key here\", \"API / Consumer Secret here\",\n    callback=\"Callback / Redirect URI / URL here\"\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Tweepy-Specific Logging Configuration with File Output\nDESCRIPTION: Configures logging specifically for the Tweepy library by creating a dedicated logger, setting the debug level, and directing output to a file. This approach allows for more granular control over Tweepy's logging separate from other libraries.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/logging.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogger = logging.getLogger(\"tweepy\")\nlogger.setLevel(logging.DEBUG)\nhandler = logging.FileHandler(filename=\"tweepy.log\")\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token for 3-legged OAuth Flow\nDESCRIPTION: Retrieves the access token and secret using the verifier from the OAuth callback. These credentials can then be used to authenticate API requests on behalf of the user.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\naccess_token, access_token_secret = oauth1_user_handler.get_access_token(\n    \"Verifier (oauth_verifier) here\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Configuration in Tweepy\nDESCRIPTION: Sets up basic console logging for Tweepy using Python's logging.basicConfig function with DEBUG level. This configuration will output logging from Tweepy and its dependencies directly to the console.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/logging.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth1UserHandler with Retrieved Credentials\nDESCRIPTION: Creates a new OAuth1UserHandler using previously retrieved access token and secret. This approach is useful when you've stored a user's credentials and want to reuse them without going through the authentication flow again.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nauth = tweepy.OAuth1UserHandler(\n   \"API / Consumer Key here\", \"API / Consumer Secret here\",\n   \"Access Token here\", \"Access Token Secret here\"\n)\napi = tweepy.API(auth)\n```\n\n----------------------------------------\n\nTITLE: User Block and Mute Methods\nDESCRIPTION: API methods for blocking, muting and reporting users on Twitter.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nAPI.get_blocked_ids()\nAPI.get_blocks()\nAPI.get_muted_ids()\nAPI.get_mutes()\nAPI.create_block()\nAPI.destroy_block()\nAPI.create_mute()\nAPI.destroy_mute()\nAPI.report_spam()\n```\n\n----------------------------------------\n\nTITLE: Reinitializing OAuth1UserHandler with Existing Request Token\nDESCRIPTION: Demonstrates how to reinitialize an OAuth1UserHandler with an existing request token and secret. This is useful when you need to maintain the OAuth state across different sessions or requests.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nrequest_token = oauth1_user_handler.request_token[\"oauth_token\"]\nrequest_secret = oauth1_user_handler.request_token[\"oauth_token_secret\"]\n\nnew_oauth1_user_handler = tweepy.OAuth1UserHandler(\n    \"API / Consumer Key here\", \"API / Consumer Secret here\",\n    callback=\"Callback / Redirect URI / URL here\"\n)\nnew_oauth1_user_handler.request_token = {\n    \"oauth_token\": \"Request Token (oauth_token) here\",\n    \"oauth_token_secret\": request_secret\n}\naccess_token, access_token_secret = (\n    new_oauth1_user_handler.get_access_token(\n        \"Verifier (oauth_verifier) here\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Tweepy Using Pip\nDESCRIPTION: The easiest way to install the latest version of Tweepy from PyPI using pip package manager.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/install.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install tweepy\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth1UserHandler for PIN-based OAuth\nDESCRIPTION: Sets up PIN-based OAuth flow by specifying 'oob' as the callback parameter. This method is useful for applications that cannot use a redirect URL, such as command-line applications.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\noauth1_user_handler = tweepy.OAuth1UserHandler(\n    \"API / Consumer Key here\", \"API / Consumer Secret here\",\n    callback=\"oob\"\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Handling for StreamingClient in Python\nDESCRIPTION: This example demonstrates how to subclass StreamingClient to customize error handling. In this case, it overrides the on_connection_error method to disconnect the client when a connection error occurs.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/streaming.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ConnectionTester(tweepy.StreamingClient):\n\n    def on_connection_error(self):\n        self.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Collecting PIN and Getting Access Token for PIN-based OAuth\nDESCRIPTION: Demonstrates how to collect the PIN from a user after they've authenticated with the authorization URL. The PIN is then used as the verifier to obtain access credentials.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nverifier = input(\"Input PIN: \")\naccess_token, access_token_secret = oauth1_user_handler.get_access_token(\n    verifier\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Rate Limits with Client.search_all_tweets\nDESCRIPTION: Shows how to handle the additional 1 request per second rate limit when using Client.search_all_tweets with Paginator. This involves adding a 1-second sleep between iterations.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/faq.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntime.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Creating a New List with Tweepy in Python\nDESCRIPTION: Method to create a new list for the authenticated user. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nAPI.create_list\n```\n\n----------------------------------------\n\nTITLE: Getting List Members with Tweepy in Python\nDESCRIPTION: Method to retrieve members of a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_list_members\n```\n\n----------------------------------------\n\nTITLE: Adding a Member to a List with Tweepy in Python\nDESCRIPTION: Method to add a user to a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nAPI.add_list_member\n```\n\n----------------------------------------\n\nTITLE: Getting Lists Owned by a User with Tweepy in Python\nDESCRIPTION: Method to retrieve lists owned by a specified user. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_list_ownerships\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Members to a List with Tweepy in Python\nDESCRIPTION: Method to add multiple users to a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nAPI.add_list_members\n```\n\n----------------------------------------\n\nTITLE: Retrieving List Timeline with Tweepy in Python\nDESCRIPTION: Method to get the timeline of tweets from a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nAPI.list_timeline\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Members from a List with Tweepy in Python\nDESCRIPTION: Method to remove multiple users from a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nAPI.remove_list_members\n```\n\n----------------------------------------\n\nTITLE: Retrieving List Subscriptions for a User with Tweepy in Python\nDESCRIPTION: Method to get lists that a specified user is subscribed to. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_list_subscriptions\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a List with Tweepy in Python\nDESCRIPTION: Method for the authenticated user to unsubscribe from a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nAPI.unsubscribe_list\n```\n\n----------------------------------------\n\nTITLE: Deleting a List with Tweepy in Python\nDESCRIPTION: Method to delete a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nAPI.destroy_list\n```\n\n----------------------------------------\n\nTITLE: Getting List Subscribers with Tweepy in Python\nDESCRIPTION: Method to retrieve users subscribed to a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_list_subscribers\n```\n\n----------------------------------------\n\nTITLE: Removing a Member from a List with Tweepy in Python\nDESCRIPTION: Method to remove a user from a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nAPI.remove_list_member\n```\n\n----------------------------------------\n\nTITLE: Direct Message Methods\nDESCRIPTION: API methods for sending, receiving and managing direct messages.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nAPI.delete_direct_message()\nAPI.get_direct_messages()\nAPI.get_direct_message()\nAPI.send_direct_message()\nAPI.indicate_direct_message_typing()\nAPI.mark_direct_message_read()\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a List with Tweepy in Python\nDESCRIPTION: Method for the authenticated user to subscribe to a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nAPI.subscribe_list\n```\n\n----------------------------------------\n\nTITLE: Developer Utility Methods\nDESCRIPTION: API methods for accessing Twitter platform information and rate limits.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nAPI.supported_languages()\nAPI.rate_limit_status()\n```\n\n----------------------------------------\n\nTITLE: Getting Authorization URL for OAuth 2.0 Authorization Code Flow\nDESCRIPTION: Generates and prints the authorization URL that users need to visit to authenticate your application using OAuth 2.0 Authorization Code Flow with PKCE.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(oauth2_user_handler.get_authorization_url())\n```\n\n----------------------------------------\n\nTITLE: Running Twitter Stream in a Separate Thread with StreamingClient in Python\nDESCRIPTION: This snippet shows how to run the streaming client in a separate thread by setting the 'threaded' parameter to True. This allows the stream to run in the background while other operations continue.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/streaming.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nthread = streaming_client.sample(threaded=True)\n```\n\n----------------------------------------\n\nTITLE: Fetching OAuth 2.0 Access Token from Authorization Response\nDESCRIPTION: Retrieves the access token from the authorization response URL after user authentication. The access token is then extracted from the response and can be used with the Client class.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = oauth2_user_handler.fetch_token(\n    \"Authorization Response URL here\"\n)\naccess_token = response[\"access_token\"]\n\nclient = tweepy.Client(access_token)\n```\n\n----------------------------------------\n\nTITLE: Twitter API Expansions Parameter Examples\nDESCRIPTION: Examples of expansion parameter values that can be used to request additional data objects in Twitter API responses. Each expansion returns specific metadata within the includes response object.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/expansions_and_fields.rst#2025-04-22_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\nauthor_id\nreferenced_tweets.id\nedit_history_tweet_ids\nin_reply_to_user_id\nattachments.media_keys\nattachments.poll_ids\ngeo.place_id\nentities.mentions.username\nreferenced_tweets.id.author_id\npinned_tweet_id\nowner_id\n```\n\n----------------------------------------\n\nTITLE: Getting Authorization URL for 3-legged OAuth Flow\nDESCRIPTION: Generates and prints the authorization URL that users need to visit to authenticate your application using the 3-legged OAuth flow. Optionally supports 'Sign in with Twitter' functionality.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nprint(oauth1_user_handler.get_authorization_url())\n```\n\n----------------------------------------\n\nTITLE: Field Parameters in Tweepy Constants\nDESCRIPTION: Constants available in the Tweepy module for specifying field parameters when making API requests. These include fields for direct messages, lists, media, places, polls, spaces, tweets, and users.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/expansions_and_fields.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Available constants in tweepy module\ntweepy.DIRECT_MESSAGE_EVENT_FIELDS\ntweepy.DM_EVENT_FIELDS\ntweepy.LIST_FIELDS\ntweepy.MEDIA_FIELDS\ntweepy.PLACE_FIELDS\ntweepy.POLL_FIELDS\ntweepy.PUBLIC_SPACE_FIELDS\ntweepy.SPACE_FIELDS\ntweepy.PUBLIC_TWEET_FIELDS\ntweepy.TWEET_FIELDS\ntweepy.USER_FIELDS\n```\n\n----------------------------------------\n\nTITLE: Getting Authorization URL with Sign in with Twitter option\nDESCRIPTION: Generates and prints an authorization URL with the Sign in with Twitter option enabled. This provides a more streamlined authentication experience for users already logged into Twitter.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprint(oauth1_user_handler.get_authorization_url(signin_with_twitter=True))\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Parameter Substitutions for Tweepy\nDESCRIPTION: ReStructuredText parameter substitutions that define and document the various API parameters used throughout the Tweepy library. These substitutions provide standardized descriptions for common parameters used across different API endpoints.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/parameters.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |additional_owners| replace:: A list of user IDs to set as additional owners allowed to use the returned ``media_id`` in Tweet or Cards. Up to 100 additional owners may be specified.\n.. |count| replace:: The number of results to try and retrieve per page.\n.. |cursor| replace:: Breaks the results into pages. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.\n.. |date| replace:: Permits specifying a start date for the report. The date should be formatted YYYY-MM-DD.\n.. |exclude| replace:: Setting this equal to hashtags will remove all hashtags from the trends list.\n.. |exclude_replies| replace:: This parameter will prevent replies from appearing in the returned timeline. Using ``exclude_replies`` with the ``count`` parameter will mean you will receive up-to count Tweets — this is because the ``count`` parameter retrieves that many Tweets before filtering out retweets and replies.\n.. |file| replace:: A file object, which will be used instead of opening ``filename``. ``filename`` is still required, for MIME type detection and to use as a form field in the POST data.\n.. |filename| replace:: The filename of the image to upload. This will automatically be opened unless ``file`` is specified.\n.. |full_text| replace:: A boolean indicating whether or not the full text of a message should be returned. If False the message text returned will be truncated to 140 chars. Defaults to False.\n.. |include_card_uri| replace:: A boolean indicating if the retrieved Tweet should include a card_uri attribute when there is an ads card attached to the Tweet and when that card was attached using the card_uri value.\n.. |include_entities| replace:: The entities node will not be included when set to false. Defaults to true.\n.. |include_ext_alt_text| replace:: If alt text has been added to any attached media entities, this parameter will return an ext_alt_text value in the top-level key for the media entity.\n.. |include_user_entities| replace:: The user object entities node will not be included when set to false. Defaults to true.\n.. |list_id| replace:: The numerical id of the list.\n.. |list_mode| replace:: Whether your list is public or private. Values can be public or private. Lists are public by default if no mode is specified.\n.. |list_owner| replace:: the screen name of the owner of the list\n.. |media_category| replace:: The category that represents how the media will be used. This field is required when using the media with the Ads API.\n.. |max_id| replace:: Returns only statuses with an ID less than (that is, older than) or equal to the specified ID.\n.. |owner_id| replace:: The user ID of the user who owns the list being requested by a slug.\n.. |owner_screen_name| replace:: The screen name of the user who owns the list being requested by a slug.\n.. |page| replace:: Specifies the page of results to retrieve. Note: there are pagination limits.\n.. |screen_name| replace:: Specifies the screen name of the user. Helpful for disambiguating when a valid screen name is also a user ID.\n.. |sid| replace:: The numerical ID of the status.\n.. |since_id| replace:: Returns only statuses with an ID greater than (that is, more recent than) the specified ID.\n.. |skip_status| replace:: A boolean indicating whether statuses will not be included in the returned user objects. Defaults to false.\n.. |slug| replace:: You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.\n.. |stringify_ids| replace:: Have IDs returned as strings instead\n.. |trim_user| replace:: A boolean indicating if user IDs should be provided, instead of complete user objects. Defaults to False.\n.. |uid| replace:: Specifies the ID or screen name of the user.\n.. |user_id| replace:: Specifies the ID of the user. Helpful for disambiguating when a valid user ID is also a valid screen name.\n```\n\n----------------------------------------\n\nTITLE: Installing Tweepy with Test Dependencies in Python\nDESCRIPTION: Commands to install Tweepy from source with test dependencies. The first command installs only test dependencies, while the second includes both test and dev dependencies.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/development.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install .[test]\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install .[dev,test]\n```\n\n----------------------------------------\n\nTITLE: Importing Tweepy Models\nDESCRIPTION: Core model classes from the Tweepy library that map to Twitter API response objects. Each class represents a specific Twitter platform entity with corresponding attributes and methods.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/v1_models.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntweepy.models.BoundingBox\ntweepy.models.DirectMessage\ntweepy.models.Friendship\ntweepy.models.List\ntweepy.models.Media\ntweepy.models.Place\ntweepy.models.Relationship\ntweepy.models.SavedSearch\ntweepy.models.SearchResults\ntweepy.models.Status\ntweepy.models.User\n```\n\n----------------------------------------\n\nTITLE: Accessing User Credentials in Tweepy v4\nDESCRIPTION: Demonstrates how to access user credentials in Tweepy v4 after the removal of API.me. Users should now use API.verify_credentials() instead.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/faq.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAPI.verify_credentials()\n```\n\n----------------------------------------\n\nTITLE: Importing Tweepy Exceptions in Python\nDESCRIPTION: Examples showing how to access Tweepy exceptions. The documentation demonstrates that exceptions like TweepyException can be accessed directly from the tweepy module without importing tweepy.errors separately.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/exceptions.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntweepy.errors.TweepyException\n```\n\nLANGUAGE: Python\nCODE:\n```\ntweepy.TweepyException\n```\n\n----------------------------------------\n\nTITLE: Getting oEmbed Data for a Tweet with Tweepy in Python\nDESCRIPTION: Method to fetch oEmbed data for a given tweet. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_oembed\n```\n\n----------------------------------------\n\nTITLE: Tweepy AsyncClient Method Documentation\nDESCRIPTION: ReStructuredText autodoc directives for documenting the AsyncClient class methods that implement Twitter API v2 endpoints.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/asyncclient.rst#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. automethod:: AsyncClient.remove_bookmark\n\n.. automethod:: AsyncClient.get_bookmarks\n\n.. automethod:: AsyncClient.bookmark\n```\n\n----------------------------------------\n\nTITLE: Unfavoriting a Tweet with Tweepy in Python\nDESCRIPTION: Method to unfavorite (unlike) a specified tweet. Part of the 'Post, retrieve, and engage with Tweets' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nAPI.destroy_favorite\n```\n\n----------------------------------------\n\nTITLE: Documenting StreamingClient Class in reStructuredText\nDESCRIPTION: Sphinx documentation markup for the StreamingClient class from Tweepy. Uses directive syntax to generate complete class documentation with inherited members, ordered by source code appearance.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/streamingclient.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _streamingclient_reference:\n\n.. currentmodule:: tweepy\n\n************************\n:class:`StreamingClient`\n************************\n\n.. autoclass:: StreamingClient\n   :members:\n   :inherited-members:\n   :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Checking List Membership for a User with Tweepy in Python\nDESCRIPTION: Method to check if a user is a member of a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_list_member\n```\n\n----------------------------------------\n\nTITLE: Defining StreamRule Reference in Sphinx Documentation\nDESCRIPTION: This snippet uses Sphinx documentation directives to create a reference label and set the current module for the StreamRule class documentation. It also creates a section header and sets up autoclass documentation generation.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/streamrule.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _streamrule:\n\n.. currentmodule:: tweepy\n\n``StreamRule``\n==============\n.. autoclass:: StreamRule\n   :class-doc-from: class\n```\n\n----------------------------------------\n\nTITLE: Retrieving List Memberships for a User with Tweepy in Python\nDESCRIPTION: Method to get lists that a specified user is a member of. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_list_memberships\n```\n\n----------------------------------------\n\nTITLE: Running Tweepy Tests with Python unittest\nDESCRIPTION: Command to run Tweepy tests using Python's unittest module. This discovers and runs all tests in the 'tests' directory.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/development.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m unittest discover tests\n```\n\n----------------------------------------\n\nTITLE: Checking List Subscription for a User with Tweepy in Python\nDESCRIPTION: Method to check if a user is subscribed to a specified list. Part of the 'Create and manage lists' category in Tweepy.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/api.rst#2025-04-22_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nAPI.get_list_subscriber\n```\n\n----------------------------------------\n\nTITLE: Measuring Test Coverage for Tweepy with coverage\nDESCRIPTION: Command to run Tweepy tests while measuring code coverage using the coverage tool. This requires the 'dev' extra to be installed.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/development.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncoverage run -m unittest discover tests\n```\n\n----------------------------------------\n\nTITLE: Installing Tweepy from GitHub repository via clone\nDESCRIPTION: Commands to clone the Tweepy repository from GitHub and install the latest development version locally.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tweepy/tweepy.git\ncd tweepy\npip install .\n```\n\n----------------------------------------\n\nTITLE: Installing Tweepy with async support\nDESCRIPTION: Command to install Tweepy with the async extra package to enable asynchronous functionality via the tweepy.asynchronous subpackage.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install tweepy[async]\n```\n\n----------------------------------------\n\nTITLE: Installing Tweepy directly from GitHub\nDESCRIPTION: Command to install Tweepy directly from the GitHub repository without cloning it locally.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/tweepy/tweepy.git\n```\n\n----------------------------------------\n\nTITLE: Installing Tweepy with Async Support\nDESCRIPTION: Installation command for Tweepy with support for the asynchronous functionality via the 'async' extra.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/install.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install tweepy[async]\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2BearerHandler with Bearer Token for Twitter API v1.1\nDESCRIPTION: Sets up OAuth 2.0 Bearer Token (App-Only) authentication for Twitter API v1.1 using a pre-generated bearer token. The token is passed to OAuth2BearerHandler which is then used to initialize the API instance.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\nauth = tweepy.OAuth2BearerHandler(\"Bearer Token here\")\napi = tweepy.API(auth)\n```\n\n----------------------------------------\n\nTITLE: Installing Tweepy from GitHub Repository via Git Clone\nDESCRIPTION: Commands to clone the Tweepy repository from GitHub and install the latest development version from the local directory.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/install.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tweepy/tweepy.git\ncd tweepy\npip install .\n```\n\n----------------------------------------\n\nTITLE: Twitter API v2 Endpoint Mapping for AsyncClient\nDESCRIPTION: A comprehensive mapping table showing the relationship between Twitter API v2 endpoints and their corresponding AsyncClient method implementations in Tweepy. The endpoints cover functionality like bookmarks, likes, retweets, tweet management, searches, and timelines.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/asyncclient.rst#2025-04-22_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\nDELETE /2/users/:id/bookmarks/:tweet_id -> AsyncClient.remove_bookmark\nGET /2/users/:id/bookmarks -> AsyncClient.get_bookmarks\nPOST /2/users/:id/bookmarks -> AsyncClient.bookmark\nPUT /2/tweets/:id/hidden -> AsyncClient.hide_reply\nPUT /2/tweets/:id/hidden -> AsyncClient.unhide_reply\nDELETE /2/users/:id/likes/:tweet_id -> AsyncClient.unlike\nGET /2/tweets/:id/liking_users -> AsyncClient.get_liking_users\nGET /2/users/:id/liked_tweets -> AsyncClient.get_liked_tweets\nPOST /2/users/:id/likes -> AsyncClient.like\nDELETE /2/tweets/:id -> AsyncClient.delete_tweet\nPOST /2/tweets -> AsyncClient.create_tweet\nGET /2/tweets/:id/quote_tweets -> AsyncClient.get_quote_tweets\nDELETE /2/users/:id/retweets/:source_tweet_id -> AsyncClient.unretweet\nGET /2/tweets/:id/retweeted_by -> AsyncClient.get_retweeters\nPOST /2/users/:id/retweets -> AsyncClient.retweet\nGET /2/tweets/search/all -> AsyncClient.search_all_tweets\nGET /2/tweets/search/recent -> AsyncClient.search_recent_tweets\nGET /2/users/:id/mentions -> AsyncClient.get_users_mentions\nGET /2/users/:id/timelines/reverse_chronological -> AsyncClient.get_home_timeline\nGET /2/users/:id/tweets -> AsyncClient.get_users_tweets\nGET /2/tweets/counts/all -> AsyncClient.get_all_tweets_count\nGET /2/tweets/counts/recent -> AsyncClient.get_recent_tweets_count\nGET /2/tweets/:id -> AsyncClient.get_tweet\nGET /2/tweets -> AsyncClient.get_tweets\n```\n\n----------------------------------------\n\nTITLE: Installing Tweepy Directly from GitHub\nDESCRIPTION: Command to install Tweepy directly from the GitHub repository URL without cloning it first.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/install.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/tweepy/tweepy.git\n```\n\n----------------------------------------\n\nTITLE: Twitter API v2 Section Headers\nDESCRIPTION: ReStructuredText section headers organizing the documentation into major functional areas like Tweets, Users, Spaces, Direct Messages, Lists, and Compliance.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/asyncclient.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nTweets\n======\n\nBookmarks\n---------\n\nHide replies\n------------\n\nLikes\n-----\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2AppHandler with API Keys for Twitter API v1.1\nDESCRIPTION: Sets up OAuth 2.0 App-Only authentication for Twitter API v1.1 using API/Consumer keys. This approach creates a bearer token automatically from the provided credentials.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tweepy\n\nauth = tweepy.OAuth2AppHandler(\n    \"API / Consumer Key here\", \"API / Consumer Secret here\"\n)\napi = tweepy.API(auth)\n```\n\n----------------------------------------\n\nTITLE: Documenting the create_compliance_job method in Tweepy's AsyncClient\nDESCRIPTION: This is an autodoc directive for the create_compliance_job method in Tweepy's AsyncClient class. It generates API documentation for this method which is used to create compliance jobs for Twitter API.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/asyncclient.rst#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. automethod:: AsyncClient.create_compliance_job\n```\n\n----------------------------------------\n\nTITLE: Twitter API v2 Endpoint Documentation References\nDESCRIPTION: ReStructuredText directives defining URL references for Twitter API v2 endpoints, used throughout the documentation to link to official API reference pages.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/asyncclient.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _GET /2/users/:id/following: https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/get-users-id-following\n.. _POST /2/users/:id/following: https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following\n.. |Mutes| replace:: *Mutes*\n```\n\n----------------------------------------\n\nTITLE: Configuring AsyncStreamingClient Documentation in RST\nDESCRIPTION: reStructuredText directives for configuring auto-documentation of the AsyncStreamingClient class in Tweepy, including module reference, class title, and documentation parameters.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/asyncstreamingclient.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _asyncstreamingclient_reference:\n\n.. currentmodule:: tweepy.asynchronous\n\n*****************************\n:class:`AsyncStreamingClient`\n*****************************\n\n.. autoclass:: AsyncStreamingClient\n   :members:\n   :inherited-members:\n   :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Reference to Twitter Developer Changelog\nDESCRIPTION: A footnote reference that links to Twitter's developer changelog, which likely contains information about API changes relevant to the compliance job functionality.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/asyncclient.rst#2025-04-22_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. rubric:: Footnotes\n\n.. [#changelog] https://developer.twitter.com/en/updates/changelog\n```\n\n----------------------------------------\n\nTITLE: Changelog Links in Markdown\nDESCRIPTION: Header section with link to GitHub releases page formatted in Markdown.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/changelog.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nChangelog\n=========\n\nThese changelogs are also at <https://github.com/tweepy/tweepy/releases> as release notes.\n```\n\n----------------------------------------\n\nTITLE: Version Numbers and Dates in Markdown\nDESCRIPTION: Section headers showing version numbers and release dates formatted in Markdown.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/changelog.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nUnreleased\n----------\n\nVersion 4.15.0 (2025-01-15)\n---------------------------\n\nVersion 4.14.0 (2023-04-24)\n---------------------------\n\nVersion 4.13.0 (2023-03-09)\n---------------------------\n\nVersion 4.12.1 (2022-11-06)\n---------------------------\n\nVersion 4.12.0 (2022-10-27)\n---------------------------\n\nVersion 4.11.0 (2022-10-24)\n---------------------------\n```\n\n----------------------------------------\n\nTITLE: Handling JSONDecodeError in HTTPException\nDESCRIPTION: This snippet shows how to handle simplejson being installed when handling JSONDecodeError in HTTPException. It's part of a bug fix in version 4.0.1.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/changelog.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nHandle simplejson being installed when handling `JSONDecodeError` in `HTTPException`\n```\n\n----------------------------------------\n\nTITLE: Initializing requests.Session for API\nDESCRIPTION: This code initializes a single requests.Session instance per API instance, rather than for each request. It's part of the rework of the API class in version 4.0.0.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/changelog.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nAdd `requests.Session` instance as `API.session` attribute\n```\n\n----------------------------------------\n\nTITLE: Logging Warning for Unexpected API.request Keywords\nDESCRIPTION: This snippet logs a warning when API.request is passed an unexpected keyword argument that isn't an endpoint parameter. It's part of the API rework in version 4.0.0.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/changelog.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nLog warning when API.request is passed an unexpected keyword argument that isn't an endpoint parameter\n```\n\n----------------------------------------\n\nTITLE: Displaying Tweepy ASCII Logo in Plain Text\nDESCRIPTION: An ASCII art representation of the Tweepy project name, styled to create a visually appealing header or banner using text characters.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/assets/ASCII_LOGO.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  ______                                   \n /_  __/_      __ ___   ___   ____   __  __\n  / /  | | /| / // _ \\ / _ \\ / __ \\ / / / /\n / /   | |/ |/ //  __//  __// /_/ // /_/ / \n/_/    |__/|__/ \\___/ \\___// .___/ \\__, /  \n                          /_/     /____/ \n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Retrieved OAuth 1.0a Credentials\nDESCRIPTION: Shows how to initialize a Tweepy Client using previously retrieved OAuth 1.0a credentials. This method directly passes the credentials to the Client constructor for use with Twitter API v2.\nSOURCE: https://github.com/tweepy/tweepy/blob/master/docs/authentication.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclient = tweepy.Client(\n    consumer_key=\"API / Consumer Key here\",\n    consumer_secret=\"API / Consumer Secret here\",\n    access_token=\"Access Token here\",\n    access_token_secret=\"Access Token Secret here\"\n)\n```"
  }
]