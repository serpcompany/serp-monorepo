[
  {
    "owner": "praw-dev",
    "repo": "praw",
    "content": "TITLE: Accessing Comments in a Submission using PRAW\nDESCRIPTION: This snippet demonstrates how to access both top-level comments and all comments from a submission using the comments attribute and list method.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a praw.Reddit instance bound to variable `reddit`\ntop_level_comments = list(submission.comments)\nall_comments = submission.comments.list()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Password Flow in Python using PRAW\nDESCRIPTION: This snippet demonstrates how to authenticate a Reddit script application using password flow. It requires client ID, client secret, username, and password.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/authentication.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreddit = praw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    password=\"1guiwevlfo00esyy\",\n    user_agent=\"testscript by u/fakebot3\",\n    username=\"fakebot3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hot Submissions from a Subreddit using PRAW\nDESCRIPTION: This snippet demonstrates how to fetch the top 10 hot submissions from a subreddit and print their titles using a read-only Reddit instance.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# continued from code above\n\nfor submission in reddit.subreddit(\"test\").hot(limit=10):\n    print(submission.title)\n\n# Output: 10 submissions\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit API Connection with PRAW in Python\nDESCRIPTION: Creates a Reddit API connection using PRAW by providing client credentials and user agent information. This is the required first step for accessing Reddit data through the API.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/comments.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport praw\n\nreddit = praw.Reddit(\n    client_id=\"CLIENT_ID\",\n    client_secret=\"CLIENT_SECRET\",\n    password=\"PASSWORD\",\n    user_agent=\"Comment Extraction (by u/USERNAME)\",\n    username=\"USERNAME\",\n)\n```\n\n----------------------------------------\n\nTITLE: Reddit API Interaction Examples\nDESCRIPTION: Various examples of interacting with Reddit using PRAW, including creating submissions, commenting, and accessing moderator information.\nSOURCE: https://github.com/praw-dev/praw/blob/main/README.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create a submission to r/test\nreddit.subreddit(\"test\").submit(\"Test Submission\", url=\"https://reddit.com\")\n\n# Comment on a known submission\nsubmission = reddit.submission(url=\"https://www.reddit.com/comments/5e1az9\")\nsubmission.reply(\"Super rad!\")\n\n# Reply to the first comment of a weekly top thread of a moderated community\nsubmission = next(reddit.subreddit(\"mod\").top(time_filter=\"week\"))\nsubmission.comments[0].reply(\"An automated reply\")\n\n# Output score for the first 256 items on the frontpage\nfor submission in reddit.front.hot(limit=256):\n    print(submission.score)\n\n# Obtain the moderator listing for r/test\nfor moderator in reddit.subreddit(\"test\").moderator():\n    print(moderator)\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-only Reddit Instance in Python using PRAW\nDESCRIPTION: This snippet demonstrates how to initialize a read-only Reddit instance using the PRAW library. It requires a client ID, client secret, and user agent to authenticate with Reddit's API.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport praw\n\nreddit = praw.Reddit(\n    client_id=\"my client id\",\n    client_secret=\"my client secret\",\n    user_agent=\"my user agent\",\n)\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Subreddit Instance in PRAW\nDESCRIPTION: This snippet shows how to get a Subreddit instance and access its basic properties like display name, title, and description.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a praw.Reddit instance bound to variable `reddit`\nsubreddit = reddit.subreddit(\"redditdev\")\n\nprint(subreddit.display_name)\n# Output: redditdev\nprint(subreddit.title)\n# Output: reddit development\nprint(subreddit.description)\n# Output: a subreddit for discussion of ...\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Hot Submissions in a Subreddit with PRAW\nDESCRIPTION: This code demonstrates how to iterate through the first 10 hot submissions in a subreddit and access their properties such as title, score, ID, and URL.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a Subreddit instance bound to variable `subreddit`\nfor submission in subreddit.hot(limit=10):\n    print(submission.title)\n    # Output: the submission's title\n    print(submission.score)\n    # Output: the submission's score\n    print(submission.id)\n    # Output: the submission's ID\n    print(submission.url)\n    # Output: the URL the submission points to or the submission's URL if it's a self post\n```\n\n----------------------------------------\n\nTITLE: Verifying Authentication in Python using PRAW\nDESCRIPTION: This snippet shows how to verify that the authentication was successful by printing the authenticated user's name.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/authentication.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(reddit.user.me())\n```\n\n----------------------------------------\n\nTITLE: Creating an Authorized Reddit Instance in PRAW\nDESCRIPTION: This snippet shows how to create an authorized Reddit instance by providing username and password in addition to client credentials. This allows for actions that require authentication.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport praw\n\nreddit = praw.Reddit(\n    client_id=\"my client id\",\n    client_secret=\"my client secret\",\n    password=\"my password\",\n    user_agent=\"my user agent\",\n    username=\"my username\",\n)\n\nprint(reddit.read_only)\n# Output: False\n```\n\n----------------------------------------\n\nTITLE: Monitoring New Submissions to a Subreddit\nDESCRIPTION: Uses PRAW's stream functionality to continuously monitor and iterate through new submissions to a specified subreddit (in this case r/AskReddit).\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/reply_bot.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsubreddit = reddit.subreddit(\"AskReddit\")\nfor submission in subreddit.stream.submissions():\n    # do something with submission\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing PRAW via pip\nDESCRIPTION: Standard command to install the Python Reddit API Wrapper (PRAW) using pip. PRAW supports Python 3.9+, and depending on your system setup, you might need to use pip3 for Python 3 installations.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/installation.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praw\n```\n\n----------------------------------------\n\nTITLE: Complete LMGTFY Bot Implementation\nDESCRIPTION: The full implementation of the LMGTFY bot, organized into proper functions with imports at the top, constants defined separately, and a main function to handle execution flow.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/reply_bot.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport praw\nimport time\nfrom urllib.parse import quote_plus\n\n\nQUESTIONS = [\"what is\", \"who is\", \"what are\"]\nREPLY_TEMPLATE = \"[Let me google that for you](https://lmgtfy.com/?q={})\"\n\n\ndef process_submission(submission):\n    # Ignore titles with more than 10 words as they probably are not simple questions.\n    if len(submission.title.split()) > 10:\n        return\n\n    normalized_title = submission.title.lower()\n    for question_phrase in QUESTIONS:\n        if question_phrase in normalized_title:\n            url_title = quote_plus(submission.title)\n            reply_text = REPLY_TEMPLATE.format(url_title)\n            print(f\"Replying to: {submission.title}\")\n            submission.reply(reply_text)\n            # A reply has been made so do not attempt to match other phrases.\n            break\n\n\ndef main():\n    reddit = praw.Reddit(\n        client_id=\"CLIENT_ID\",\n        client_secret=\"CLIENT_SECRET\",\n        password=\"PASSWORD\",\n        user_agent=\"LMGTFY (by u/USERNAME)\",\n        username=\"USERNAME\",\n    )\n    subreddit = reddit.subreddit(\"AskReddit\")\n\n    for submission in subreddit.stream.submissions():\n        process_submission(submission)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Initializing PRAW Reddit Instance\nDESCRIPTION: Example of creating a PRAW Reddit instance with OAuth credentials for authentication.\nSOURCE: https://github.com/praw-dev/praw/blob/main/README.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport praw\n\nreddit = praw.Reddit(\n    client_id=\"CLIENT_ID\",\n    client_secret=\"CLIENT_SECRET\",\n    password=\"PASSWORD\",\n    user_agent=\"USERAGENT\",\n    username=\"USERNAME\",\n)\n```\n\n----------------------------------------\n\nTITLE: Authorizing and Verifying Code Flow in Python using PRAW\nDESCRIPTION: This snippet demonstrates how to authorize using the code obtained from the redirect and verify the authenticated user.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/authentication.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(reddit.auth.authorize(code))\nprint(reddit.user.me())\n```\n\n----------------------------------------\n\nTITLE: Blocking Users in Python using PRAW\nDESCRIPTION: Added methods to block unwanted user contact for Comment, Message, and SubredditMessage instances.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\n:meth:`.Comment.block`, :meth:`.Message.block`, and :meth:`.SubredditMessage.block`\n```\n\n----------------------------------------\n\nTITLE: Award Methods for Reddit Content\nDESCRIPTION: Methods for awarding Reddit content (submissions and comments) with customization options for award type, anonymity, and message.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSubmission.award\n```\n\nLANGUAGE: python\nCODE:\n```\nComment.award\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Saved Refresh Token in Python using PRAW\nDESCRIPTION: This snippet shows how to authenticate using a previously obtained refresh token.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/authentication.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreddit = praw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    refresh_token=\"WeheY7PwgeCZj4S3QgUcLhKE5S2s4eAYdxM\",\n```\n\n----------------------------------------\n\nTITLE: Creating Submission Instances by ID or URL in PRAW\nDESCRIPTION: This snippet shows how to create a Submission instance by either providing a submission ID or URL, then accessing its title.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a praw.Reddit instance bound to variable `reddit`\nsubmission = reddit.submission(\"39zje0\")\nprint(submission.title)\n# Output: reddit will soon only be available ...\n\n# or\nsubmission = reddit.submission(url=\"https://www.reddit.com/...\")\n```\n\n----------------------------------------\n\nTITLE: PRAW Multi-Bot Configuration Example\nDESCRIPTION: Example INI configuration for multiple Reddit bots with separate OAuth credentials\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration/prawini.rst#2025-04-17_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[bot1]\nclient_id=revokedpDQy3xZ\nclient_secret=revokedoqsMk5nHCJTHLrwgvHpr\npassword=invalidht4wd50gk\nusername=fakebot1\n\n[bot2]\nclient_id=revokedcIqbclb\nclient_secret=revokedCClyu4FjVO77MYlTynfj\npassword=invalidzpiq8s59j\nusername=fakebot2\n\n[bot3]\nclient_id=revokedSbt0zor\nclient_secret=revokedNh8kwg8e5t4m6KvSrbTI\npassword=invalidlfo00esyy\nusername=fakebot3\n```\n\n----------------------------------------\n\nTITLE: Creating a Live Thread in Python using PRAW\nDESCRIPTION: Added the LiveHelper.__call__() method to provide an interface for creating new live threads.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n:meth:`.LiveHelper.__call__`\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Live Thread Updates in Python using PRAW\nDESCRIPTION: Added the LiveThread.updates() method to iterate through the updates of a live thread.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\n:meth:`.LiveThread.updates`\n```\n\n----------------------------------------\n\nTITLE: Obtaining Authorization URL for Code Flow in Python using PRAW\nDESCRIPTION: This snippet shows how to obtain the authorization URL for code flow authentication. It specifies scopes, state, and duration for the authorization.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/authentication.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreddit = praw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    redirect_uri=\"http://localhost:8080\",\n    user_agent=\"testscript by u/fakebot3\",\n)\nprint(reddit.auth.url(scopes=[\"identity\"], state=\"...\", duration=\"permanent\"))\n```\n\n----------------------------------------\n\nTITLE: Accessing Second-Level Comments in a Reddit Submission\nDESCRIPTION: Expands the comment forest and iterates through both top-level comments and their immediate replies (second-level comments). This demonstrates basic nested comment traversal.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/comments.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsubmission.comments.replace_more(limit=None)\nfor top_level_comment in submission.comments:\n    for second_level_comment in top_level_comment.replies:\n        print(second_level_comment.body)\n```\n\n----------------------------------------\n\nTITLE: Replacing All MoreComments Objects to Access Complete Comment Thread\nDESCRIPTION: Uses replace_more with limit=None to fully expand all comment threads before processing. This approach retrieves all available comments but may require multiple API requests.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/comments.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsubmission.comments.replace_more(limit=None)\nfor top_level_comment in submission.comments:\n    print(top_level_comment.body)\n```\n\n----------------------------------------\n\nTITLE: Inspecting PRAW Object Attributes with vars()\nDESCRIPTION: Demonstrates how to use Python's vars() function to inspect attributes of a PRAW Submission object. The code shows how to handle lazy loading by accessing an attribute before inspection, which triggers the API request to populate the object's data.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport pprint\n\n# assume you have a praw.Reddit instance bound to variable `reddit`\nsubmission = reddit.submission(\"39zje0\")\nprint(submission.title)  # to make it non-lazy\npprint.pprint(vars(submission))\n```\n\n----------------------------------------\n\nTITLE: Fetching Reddit OAuth2 Scopes using Python Requests\nDESCRIPTION: Script to retrieve and display all available Reddit API OAuth2 scopes and their descriptions using the Reddit API endpoint. Uses the requests library with a custom User-Agent header.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/refresh_token.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nresponse = requests.get(\n    \"https://www.reddit.com/api/v1/scopes.json\",\n    headers={\"User-Agent\": \"fetch-scopes by u/bboe\"},\n)\n\nfor scope, data in sorted(response.json().items()):\n    print(f\"{scope:>18s}  {data['description']}\")\n```\n\n----------------------------------------\n\nTITLE: Replying to Reddit Submissions\nDESCRIPTION: Uses PRAW's reply method to post a comment with the LMGTFY link as a response to the submission that matched the criteria.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/reply_bot.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsubmission.reply(reply_text)\n```\n\n----------------------------------------\n\nTITLE: Using Refresh Token with Token Manager in PRAW 8\nDESCRIPTION: Example demonstrating the new token_manager approach that replaces the deprecated refresh_token configuration in PRAW 8. This shows how to properly authenticate using the new token management system.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nReddit.user.me\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Logging for PRAW in Python\nDESCRIPTION: This code snippet sets up console logging for PRAW and prawcore at the DEBUG level. It configures a StreamHandler to output logs to the console for both PRAW and its core library.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/logging.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nhandler = logging.StreamHandler()\nhandler.setLevel(logging.DEBUG)\nfor logger_name in (\"praw\", \"prawcore\"):\n    logger = logging.getLogger(logger_name)\n    logger.setLevel(logging.DEBUG)\n    logger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Reddit OAuth2 Refresh Token\nDESCRIPTION: Reference to a script for obtaining Reddit OAuth2 refresh tokens. The script handles the OAuth2 flow including user authorization and token generation. Requires configuration of redirect URI to localhost:8080.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/refresh_token.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Reference to external file: ../examples/obtain_refresh_token.py\n```\n\n----------------------------------------\n\nTITLE: Removing All MoreComments Objects Before Processing Comments\nDESCRIPTION: Uses replace_more with limit=0 to remove all MoreComments objects before processing comments. This approach simplifies the code but discards comments that would be loaded through 'load more comments' links.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/comments.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsubmission.comments.replace_more(limit=0)\nfor top_level_comment in submission.comments:\n    print(top_level_comment.body)\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit Class with Explicit Keyword Arguments in Python\nDESCRIPTION: This snippet demonstrates how to initialize a Reddit instance by explicitly passing authentication credentials and user agent as keyword arguments. This approach allows direct configuration without relying on praw.ini settings.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration/reddit_initialization.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreddit = praw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    password=\"1guiwevlfo00esyy\",\n    user_agent=\"testscript by u/fakebot3\",\n    username=\"fakebot3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Subreddit Instance for Multiple Subreddits in PRAW (Python)\nDESCRIPTION: Shows how to create a Subreddit instance that represents multiple subreddits concatenated with '+' to avoid timeouts when dealing with large subreddits or actions like getting moderator logs.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/faq.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreddit.subreddit(\"pics+LifeProTips\")\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Reddit Submission by URL in Python\nDESCRIPTION: Retrieves a specific Reddit submission object using the full URL of the submission. This method allows access to all submission data including its comments.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/comments.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nurl = \"https://www.reddit.com/r/funny/comments/3g1jfi/buttons/\"\nsubmission = reddit.submission(url=url)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Reddit Objects in PRAW (Python)\nDESCRIPTION: Demonstrates how to refresh comments, subreddits, and submissions by directly calling their constructors with the object's ID or display name.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/faq.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreddit.comment(comment.id)\nreddit.subreddit(subreddit.display_name)\nreddit.submission(submission.id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Subreddit Submissions Stream in Python\nDESCRIPTION: This code snippet demonstrates how to initialize a stream of submissions from a subreddit using PRAW. It includes a new 'pause_after' parameter to allow pausing of the stream.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nSubredditStream.submissions(pause_after=None)\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit API Connection with PRAW\nDESCRIPTION: Creates a Reddit API connection using PRAW by providing OAuth2 credentials, including client ID, client secret, username, password, and user agent for the LMGTFY bot.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/reply_bot.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport praw\n\nreddit = praw.Reddit(\n    client_id=\"CLIENT_ID\",\n    client_secret=\"CLIENT_SECRET\",\n    password=\"PASSWORD\",\n    user_agent=\"LMGTFY (by u/USERNAME)\",\n    username=\"USERNAME\",\n)\n```\n\n----------------------------------------\n\nTITLE: Subreddit Emoji Management\nDESCRIPTION: Methods for managing subreddit emoji, including adding new emoji with permission settings and updating existing emoji permissions.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nEmoji.update\n```\n\nLANGUAGE: python\nCODE:\n```\nSubredditEmoji.add\n```\n\n----------------------------------------\n\nTITLE: Using CommentForest.list() for Simplified Comment Traversal\nDESCRIPTION: Utilizes the built-in list() method of CommentForest to easily traverse all comments in breadth-first order. This is a more concise alternative to implementing breadth-first traversal manually.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/comments.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsubmission.comments.replace_more(limit=None)\nfor comment in submission.comments.list():\n    print(comment.body)\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit Instance with Custom Requestor in Python\nDESCRIPTION: This code demonstrates how to initialize a Reddit instance with a custom requestor class and additional arguments for the requestor.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nReddit(requestor_class=cls, requestor_kwargs={\"param\": value})\n```\n\n----------------------------------------\n\nTITLE: Correct URL Searching in PRAW (Python)\nDESCRIPTION: Shows the proper way to search for URLs in Reddit by prefixing 'url:' to the URL and surrounding it with quotation marks to prevent redirects.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/faq.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreddit.subreddit(\"all\").search('url:\"https://google.com\"')\n```\n\n----------------------------------------\n\nTITLE: Configuring File Logging for PRAW in Python\nDESCRIPTION: This code snippet sets up both console and file logging for PRAW and prawcore at the DEBUG level. It uses a RotatingFileHandler to manage log files, with a maximum file size of 16MB and keeping up to 5 backup files.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/logging.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nstream_handler = logging.StreamHandler()\nstream_handler.setLevel(logging.DEBUG)\nfile_handler = logging.handlers.RotatingFileHandler(\n    \"praw_log.txt\", maxBytes=1024 * 1024 * 16, backupCount=5\n)\nfile_handler.setLevel(logging.DEBUG)\nfor logger_name in (\"praw\", \"prawcore\"):\n    logger = logging.getLogger(logger_name)\n    logger.setLevel(logging.DEBUG)\n    logger.addHandler(stream_handler)\n    logger.addHandler(file_handler)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Redditor Instances in PRAW\nDESCRIPTION: This code demonstrates two ways to obtain Redditor instances: through a submission's author attribute or directly using the redditor method.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a Submission instance bound to variable `submission`\nredditor1 = submission.author\nprint(redditor1.name)\n# Output: name of the redditor\n\n# assume you have a praw.Reddit instance bound to variable `reddit`\nredditor2 = reddit.redditor(\"bboe\")\nprint(redditor2.link_karma)\n# Output: u/bboe's karma\n```\n\n----------------------------------------\n\nTITLE: Streaming Reddit Content\nDESCRIPTION: Methods for streaming live updates from Reddit, specifically for live threads through the LiveThreadStream class.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nLiveThreadStream\n```\n\nLANGUAGE: python\nCODE:\n```\nLiveThreadStream.updates\n```\n\n----------------------------------------\n\nTITLE: Accessing Subreddit Rules in Python using PRAW\nDESCRIPTION: Added the ability to get the rules of a subreddit using the .rules attribute on a Subreddit instance.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n\".Subreddit.rules\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadth-First Traversal of Reddit Comment Forest\nDESCRIPTION: Uses a queue-based breadth-first traversal to process all comments in a submission at any depth. This approach visits comments level by level, from top to bottom.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/comments.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsubmission.comments.replace_more(limit=None)\ncomment_queue = submission.comments[:]  # Seed with top-level\nwhile comment_queue:\n    comment = comment_queue.pop(0)\n    print(comment.body)\n    comment_queue.extend(comment.replies)\n```\n\n----------------------------------------\n\nTITLE: Generating LMGTFY URLs from Submission Titles\nDESCRIPTION: Creates a properly formatted LMGTFY (Let Me Google That For You) URL by URL-encoding the submission title using quote_plus and formatting it into a Markdown link for the reply.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/reply_bot.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom urllib.parse import quote_plus\n\nreply_template = \"[Let me google that for you](https://lmgtfy.com/?q={})\"\n\nurl_title = quote_plus(submission.title)\nreply_text = reply_template.format(url_title)\n```\n\n----------------------------------------\n\nTITLE: Extracting Top-Level Comment Bodies from a Reddit Submission\nDESCRIPTION: Iterates through the top-level comments of a submission and prints their body text. Note that this basic approach will encounter errors with MoreComments objects.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/comments.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor top_level_comment in submission.comments:\n    print(top_level_comment.body)\n```\n\n----------------------------------------\n\nTITLE: Changing Comment Sort Order in PRAW\nDESCRIPTION: This code shows how to change the comment sort order before accessing comments by setting the comment_sort attribute on a Submission instance.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a praw.Reddit instance bound to variable `reddit`\nsubmission = reddit.submission(\"39zje0\")\nsubmission.comment_sort = \"new\"\ntop_level_comments = list(submission.comments)\n```\n\n----------------------------------------\n\nTITLE: Initializing PRAW Reddit Instance with Custom Rate Limit\nDESCRIPTION: This snippet demonstrates how to create a Reddit instance using PRAW with a custom rate limit setting. The 'ratelimit_seconds' parameter is set to 300 seconds, which affects how PRAW handles rate limit errors from Reddit.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/ratelimits.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport praw\n\nreddit = praw.Reddit(..., ratelimit_seconds=300)\n```\n\n----------------------------------------\n\nTITLE: Handling MoreComments Objects by Skipping Them\nDESCRIPTION: Processes top-level comments while skipping MoreComments objects to avoid AttributeError exceptions. This approach ignores additional comments that would be loaded through 'load more comments' links.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/comments.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom praw.models import MoreComments\n\nfor top_level_comment in submission.comments:\n    if isinstance(top_level_comment, MoreComments):\n        continue\n    print(top_level_comment.body)\n```\n\n----------------------------------------\n\nTITLE: Subreddit Submission Methods in PRAW\nDESCRIPTION: Collection of submission methods available on Subreddit objects, including gallery submission, image submission, video submission, poll submission, and text submissions with inline media.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSubreddit.submit_gallery\n```\n\nLANGUAGE: python\nCODE:\n```\nSubreddit.submit_image\n```\n\nLANGUAGE: python\nCODE:\n```\nSubreddit.submit_video\n```\n\nLANGUAGE: python\nCODE:\n```\nSubreddit.submit_poll\n```\n\nLANGUAGE: python\nCODE:\n```\nSubreddit.submit\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for PRAW Comment class in RST\nDESCRIPTION: A Sphinx documentation directive that automatically generates API documentation for the praw.models.Comment class, including all inherited members. This is part of PRAW's documentation system.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/comment.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.Comment\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Checking Reddit Authentication Scopes using PRAW in Python\nDESCRIPTION: Initializes a Reddit instance with a user agent and prints out the available authentication scopes. The code shows that redirect_uri is not required when only checking scopes, unlike when generating authentication URLs.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/authentication.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nuser_agent=\"testscript by u/fakebot3\",\n)\nprint(reddit.auth.scopes())\n```\n\n----------------------------------------\n\nTITLE: Configuring PRAW Async Check in Python\nDESCRIPTION: Example of how to disable PRAW's asynchronous environment check when initializing a Reddit instance. This configuration is useful when you want to prevent PRAW from performing its default async environment verification on every network request.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/multiple_instances.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport praw\n\nreddit = praw.Reddit(..., check_for_async=False)\n```\n\n----------------------------------------\n\nTITLE: Installing PRAW Package\nDESCRIPTION: Commands for installing PRAW via pip package manager, including both stable and development versions.\nSOURCE: https://github.com/praw-dev/praw/blob/main/README.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install praw\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade https://github.com/praw-dev/praw/archive/main.zip\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Two-Factor Authentication in Python using PRAW\nDESCRIPTION: This snippet demonstrates how to authenticate using a 2FA token by appending it to the password with a colon.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/authentication.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreddit = praw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    password=\"1guiwevlfo00esyy:955413\",\n    user_agent=\"testscript by u/fakebot3\",\n    username=\"fakebot3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation for PRAW's Message Class in reStructuredText\nDESCRIPTION: This reStructuredText directive uses Sphinx's autoclass feature to automatically generate documentation for the Message class in PRAW, including its inherited members. This approach centralizes the documentation maintenance by pulling the docstrings directly from the source code.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/message.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.Message\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Toggling Read-Only Mode in Python using PRAW\nDESCRIPTION: This snippet demonstrates how to enable and disable read-only mode for a Reddit instance.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/authentication.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Enable read-only mode\nreddit.read_only = True\n\n# Disable read-only mode (must have a valid authorization)\nreddit.read_only = False\n```\n\n----------------------------------------\n\nTITLE: Accessing Submission Stream in PRAW 4.0\nDESCRIPTION: Shows the new method for accessing the submission stream in PRAW 4.0, which has been moved to the SubredditStream class.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nSubredditStream.submissions\n```\n\n----------------------------------------\n\nTITLE: Initializing PRAW with Specific Site Configuration\nDESCRIPTION: Python code showing how to initialize PRAW with a specific site configuration\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration/prawini.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nreddit = praw.Reddit(\"bot2\", user_agent=\"bot2 user agent\")\n```\n\n----------------------------------------\n\nTITLE: Generating Multireddit Documentation with Sphinx in reStructuredText\nDESCRIPTION: Uses Sphinx's autoclass directive to automatically generate documentation for the Multireddit class from the PRAW library, including all inherited members. This directive extracts docstrings and method signatures directly from the Python source code.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/multireddit.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nMultireddit\n===========\n\n.. autoclass:: praw.models.Multireddit\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Switching to Read-only Mode in PRAW\nDESCRIPTION: This code demonstrates how to switch an authorized Reddit instance back to read-only mode by setting the read_only property to True.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# continued from code above\nreddit.read_only = True\n```\n\n----------------------------------------\n\nTITLE: Documenting LiveThread Class with Sphinx\nDESCRIPTION: RST directive to auto-generate documentation for the LiveThread class from the PRAW library, including all inherited members and methods.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/livethread.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nLiveThread\n==========\n\n.. autoclass:: praw.models.LiveThread\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing PRAW Directly from GitHub Main Branch\nDESCRIPTION: Command to install the latest development version of PRAW directly from the main branch on GitHub. This allows access to recently merged features that haven't been released in a stable version yet.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/installation.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade https://github.com/praw-dev/praw/archive/main.zip\n```\n\n----------------------------------------\n\nTITLE: Creating a Live Thread in Python using PRAW\nDESCRIPTION: Added the LiveHelper.create() method to create new live threads.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n:meth:`.LiveHelper.create`\n```\n\n----------------------------------------\n\nTITLE: Initializing PRAW with Configuration Interpolation\nDESCRIPTION: Python code showing how to initialize PRAW with basic configuration interpolation\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration/prawini.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreddit = praw.Reddit(\"bot1\", config_interpolation=\"basic\")\n```\n\n----------------------------------------\n\nTITLE: Installing PRAW Using Git Clone\nDESCRIPTION: Alternative command to install the latest development version of PRAW by cloning the repository directly using git. This provides the most current code from the repository.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/installation.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade git+https://github.com/praw-dev/praw.git\n```\n\n----------------------------------------\n\nTITLE: Checking Read-only Status of Reddit Instance in PRAW\nDESCRIPTION: This code shows how to verify if a Reddit instance is in read-only mode by checking the read_only property.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/quick_start.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(reddit.read_only)\n# Output: True\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Configuration Option in Python using PRAW\nDESCRIPTION: This snippet demonstrates how to retrieve a custom configuration option named 'app_debugging' from a PRAW Reddit instance. It assumes the option has been added to the praw.ini file.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration/options.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreddit.config.custom[\"app_debugging\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Title-Only Submission in Python\nDESCRIPTION: This code shows how to create a submission with only a title using PRAW's Subreddit.submit method. The empty string for selftext creates a title-only submission.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nSubreddit.submit(selftext='')\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Request Log Output in PRAW\nDESCRIPTION: This code block demonstrates the format of log output for HTTP requests made by PRAW when logging is properly configured. It includes details such as the request method, URL, timestamp, and response information.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/logging.rst#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nFetching: GET https://oauth.reddit.com/api/v1/me at 1691743155.4952002\nData: None\nParams: {'raw_json': 1}\nResponse: 200 (876 bytes) (rst-45:rem-892:used-104 ratelimit) at 1691743156.3847592\n```\n\n----------------------------------------\n\nTITLE: PRAW Configuration with Variable Interpolation\nDESCRIPTION: Example INI configuration demonstrating variable interpolation for user agent string\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration/prawini.rst#2025-04-17_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[bot1]\nbot_name=MyBot\nbot_version=1.2.3\nbot_author=MyUser\nuser_agent=script:%(bot_name)s:v%(bot_version)s (by u/%(bot_author)s)\n```\n\n----------------------------------------\n\nTITLE: Accessing Moderated Subreddits\nDESCRIPTION: Example showing the transition from deprecated moderator_subreddits method to the new moderated() method for getting a list of subreddits moderated by a user.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Old way (deprecated)\nreddit.user.moderator_subreddits()\n\n# New way\nreddit.user.moderated()\n```\n\n----------------------------------------\n\nTITLE: Filtering Submissions by Word Count\nDESCRIPTION: Filters out submissions with titles containing more than ten words, as part of identifying simple questions that the bot should respond to.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/reply_bot.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif len(submission.title.split()) > 10:\n    return\n```\n\n----------------------------------------\n\nTITLE: Checking for Question Phrases in Submission Titles\nDESCRIPTION: Analyzes submission titles to determine if they contain specific question phrases like \"what is\", \"who is\", or \"what are\" after normalizing the title to lowercase.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/reply_bot.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nquestions = [\"what is\", \"who is\", \"what are\"]\nnormalized_title = submission.title.lower()\nfor question_phrase in questions:\n    if question_phrase in normalized_title:\n        # do something with a matched submission\n        break\n```\n\n----------------------------------------\n\nTITLE: Obtaining Authorization URL for Implicit Flow in Python using PRAW\nDESCRIPTION: This snippet shows how to obtain the authorization URL for implicit flow authentication.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/authentication.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(reddit.auth.url(scopes=[\"identity\"], state=\"...\", implicit=True))\n```\n\n----------------------------------------\n\nTITLE: Documenting praw.Reddit Class in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText to document the praw.Reddit class, including its inherited members. It also creates a table of contents for related helper classes.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/reddit_instance.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.Reddit\n    :inherited-members:\n\n.. toctree::\n    :maxdepth: 2\n    :caption: Helper Classes\n\n    reddit/drafts\n    reddit/front\n    reddit/inbox\n    reddit/live\n    reddit/multireddit\n    reddit/redditors\n    reddit/subreddit\n    reddit/subreddits\n    reddit/user\n```\n\n----------------------------------------\n\nTITLE: Using HTTPS Proxy with PRAW via Environment Variables\nDESCRIPTION: Demonstrates how to use an HTTPS proxy with PRAW by setting the HTTPS_PROXY environment variable before running a Python script. This allows routing PRAW's HTTPS requests through a proxy server.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS_PROXY=http://localhost:3128 ./prawbot.py\n```\n\n----------------------------------------\n\nTITLE: Searching Subreddits in Python using PRAW\nDESCRIPTION: Added the Subreddits.search() method to search for subreddits by name and description.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\n:meth:`.Subreddits.search`\n```\n\n----------------------------------------\n\nTITLE: Subreddit Flair Management\nDESCRIPTION: Methods for managing subreddit link and redditor flair templates, including updating templates and applying flairs to submissions with template IDs.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nSubmissionModeration.flair\n```\n\nLANGUAGE: python\nCODE:\n```\nSubredditLinkFlairTemplates.update\n```\n\nLANGUAGE: python\nCODE:\n```\nSubredditRedditorFlairTemplates.update\n```\n\n----------------------------------------\n\nTITLE: Subreddit Moderation Tools\nDESCRIPTION: Various moderation-related methods including sticky post management, comment visibility control, and post requirement checking.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nSubmissionModeration.sticky\n```\n\nLANGUAGE: python\nCODE:\n```\nCommentModeration.show\n```\n\nLANGUAGE: python\nCODE:\n```\nSubreddit.post_requirements\n```\n\n----------------------------------------\n\nTITLE: Reddit Widget Configuration Classes\nDESCRIPTION: Classes that represent configuration options for Reddit widgets, including calendar configuration, hover states for buttons, and styling information.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nCalendarConfiguration\n```\n\nLANGUAGE: python\nCODE:\n```\nHover\n```\n\nLANGUAGE: python\nCODE:\n```\nStyles\n```\n\n----------------------------------------\n\nTITLE: Sample API Rate Limit Log Message in PRAW\nDESCRIPTION: This code block shows an example of the log message that is produced when PRAW encounters and handles an API rate limit. It indicates the duration of the sleep period before the next request attempt.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/logging.rst#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nRate limit hit, sleeping for 5.5 seconds\n```\n\n----------------------------------------\n\nTITLE: Streaming New Subreddits in Python using PRAW\nDESCRIPTION: Added the Subreddits.stream() method to obtain newly created subreddits in near real-time.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\n:meth:`.Subreddits.stream`\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for PRAW Submission Class\nDESCRIPTION: This restructuredtext directive configures Sphinx to automatically document the Submission class from PRAW, including its inherited members and a specific private method '_edit_experimental'.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/submission.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.Submission\n    :inherited-members:\n    :private-members: _edit_experimental\n```\n\n----------------------------------------\n\nTITLE: Subreddit Rules Management\nDESCRIPTION: Classes and methods for accessing and managing subreddit rules, including retrieving rule information and adding new rules.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nRule\n```\n\nLANGUAGE: python\nCODE:\n```\nSubredditRules\n```\n\n----------------------------------------\n\nTITLE: Reddit Error Handling\nDESCRIPTION: Classes for handling and representing Reddit API errors, including individual error items and container exceptions for API errors.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nRedditErrorItem\n```\n\nLANGUAGE: python\nCODE:\n```\nRedditAPIException\n```\n\nLANGUAGE: python\nCODE:\n```\nAPIException\n```\n\n----------------------------------------\n\nTITLE: Updating PRAW to Latest Version\nDESCRIPTION: Command to update an existing PRAW installation to the latest stable version available on PyPI using pip's upgrade flag.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/installation.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade praw\n```\n\n----------------------------------------\n\nTITLE: Submitting Content to Collections\nDESCRIPTION: Example of submitting posts directly to a collection using the submit methods.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsubreddit.submit(\n    title=\"Post Title\",\n    collection_id=\"collection_id\"\n)\n\nsubreddit.submit_image(\n    title=\"Image Post\",\n    image_path=\"path/to/image\",\n    collection_id=\"collection_id\"\n)\n\nsubreddit.submit_video(\n    title=\"Video Post\",\n    video_path=\"path/to/video\",\n    collection_id=\"collection_id\"\n)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText autodoc directive for PRAW Redditor class\nDESCRIPTION: This snippet defines a ReStructuredText directive that uses Sphinx's autodoc extension to automatically generate documentation for the praw.models.Redditor class, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/redditor.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.Redditor\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Reddit User and Friend Management\nDESCRIPTION: Methods for managing and checking friendship relationships between Reddit users, including retrieving lightweight redditor objects and checking friendship status.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npartial_redditors\n```\n\nLANGUAGE: python\nCODE:\n```\nUser.friends\n```\n\n----------------------------------------\n\nTITLE: Reddit Client Configuration\nDESCRIPTION: Configuration options for the Reddit client, including timeout settings, rate limit handling, and validation settings for submissions.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nReddit\n```\n\nLANGUAGE: python\nCODE:\n```\nconfig_interpolation\n```\n\nLANGUAGE: python\nCODE:\n```\ntimeout\n```\n\nLANGUAGE: python\nCODE:\n```\nratelimit_seconds\n```\n\nLANGUAGE: python\nCODE:\n```\nvalidate_on_submit\n```\n\n----------------------------------------\n\nTITLE: Applying Pytest Markers for PRAW Integration Tests (Python)\nDESCRIPTION: Demonstrates the use of pytest markers to control cassette recording and usage in PRAW integration tests.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.recorder_kwargs(allow_playback_repeats=True)\nclass TestClass:\n    @pytest.mark.recorder_kwargs(match_requests_on=[\"uri\", \"method\", \"body\"])\n    def test_example(self): ...\n\n    @pytest.mark.cassette_name(\"TestClass.test_example\")\n    @pytest.mark.recorder_kwargs(match_requests_on=[\"uri\", \"method\", \"body\"])\n    def test_example__different_assertion(self): ...\n\n    @pytest.mark.add_placeholder(generated_data_a=generate_data_a())\n    @pytest.mark.add_placeholder(generated_data_b=generate_data_b())\n    def test_example__with_generated_placeholders(self): ...\n```\n\n----------------------------------------\n\nTITLE: Reddit Fullname Format Example\nDESCRIPTION: Example of a Reddit fullname format, showing how object types and IDs are combined. Uses a submission (t3) with ID '1h4f3' as an example.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/glossary.rst#2025-04-17_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\nt3_1h4f3\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoDoc Directive for PRAW User Class\nDESCRIPTION: ReStructuredText directive to automatically generate documentation for the User class from PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/reddit/user.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.User\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring PRAW with Custom SSL Certificate\nDESCRIPTION: Shows how to create a custom requests Session object with a specific SSL certificate and pass it to PRAW. Useful for networks with self-signed SSL certificates that would normally cause validation errors.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport praw\nfrom requests import Session\n\n\nsession = Session()\nsession.verify = \"/path/to/certfile.pem\"\nreddit = praw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    password=\"1guiwevlfo00esyy\",\n    requestor_kwargs={\"session\": session},  # pass the custom Session instance\n    user_agent=\"testscript by u/fakebot3\",\n    username=\"fakebot3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect URL Searching in PRAW (Python)\nDESCRIPTION: Demonstrates the incorrect way to search for URLs in Reddit that causes redirects to the submit page.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/faq.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreddit.subreddit(\"all\").search(\"https://google.com\")\n```\n\n----------------------------------------\n\nTITLE: Defining Method with Keyword-Only Arguments in PRAW (Python)\nDESCRIPTION: Demonstrates the PRAW-specific style for defining methods with multiple arguments, making them keyword-only and sorted alphabetically.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleClass:\n    def example_method(\n        self,\n        *,\n        arg1,\n        arg2,\n        optional_arg1=None,\n    ): ...\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment for PRAW Development (Python)\nDESCRIPTION: Creates a virtual environment for isolating the PRAW development environment using Python's venv module.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Referencing the SubredditHelper class in reStructuredText\nDESCRIPTION: A reStructuredText directive that references the SubredditHelper class from the PRAW library for automatic documentation generation. It uses the autoclass directive and includes inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/reddit/subreddit.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.SubredditHelper\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Replying to a Message in Python using PRAW\nDESCRIPTION: Added the Message.reply() method to allow replying to a Message instance.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n:meth:`.Message.reply`\n```\n\n----------------------------------------\n\nTITLE: Redirect Error Example in PRAW (Python)\nDESCRIPTION: Shows the error text that appears when attempting to perform non-read-only actions with a read-only Reddit instance.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/faq.rst#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nprawcore.exceptions.Redirect: Redirect to /r/subreddit/login/ (You may be trying to perform a non-read-only action via a read-only instance.)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for PRAW Integration Tests (Bash)\nDESCRIPTION: Sets environment variables required for running PRAW integration tests without leaking account credentials.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport prawtest_client_id=myclientid\nexport prawtest_client_secret=myclientsecret\nexport prawtest_password=mypassword\nexport prawtest_test_subreddit=test\nexport prawtest_username=myusername\nexport prawtest_user_agent=praw_pytest\n```\n\n----------------------------------------\n\nTITLE: Running PRAW Test Suite (Pytest)\nDESCRIPTION: Executes the PRAW test suite using pytest.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for SubredditFlair Class with Sphinx in reST\nDESCRIPTION: This reStructuredText directive instructs Sphinx to automatically generate documentation for the SubredditFlair class from the praw.models.reddit.subreddit module. The :inherited-members: flag ensures that inherited methods and attributes are also included in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditflair.rst#2025-04-17_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. autoclass:: praw.models.reddit.subreddit.SubredditFlair\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Unblocking a Redditor in Python using PRAW\nDESCRIPTION: Added the Redditor.unblock() method to undo a block on a user.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\n:meth:`.Redditor.unblock`\n```\n\n----------------------------------------\n\nTITLE: Documenting ThingModerationMixin Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the ThingModerationMixin class from PRAW. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/thingmoderationmixin.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.mixins.ThingModerationMixin\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing PRAW Development Dependencies (Pip)\nDESCRIPTION: Installs PRAW in editable mode along with all development dependencies using pip.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .[dev]\n```\n\n----------------------------------------\n\nTITLE: Installing PRAW Linting Dependencies (Pip)\nDESCRIPTION: Installs PRAW linting dependencies separately using pip.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .[lint]\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for PRAW SubredditRelationship in RST\nDESCRIPTION: This RST (reStructuredText) code snippet uses Sphinx's autoclass directive to generate documentation for the SubredditRelationship class from PRAW's subreddit module, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditrelationship.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.subreddit.SubredditRelationship\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Reddit Submission by ID in Python\nDESCRIPTION: Retrieves a Reddit submission object using just the submission ID. This is a more concise alternative to using the full URL when you already know the submission ID.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/tutorials/comments.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsubmission = reddit.submission(\"3g1jfi\")\n```\n\n----------------------------------------\n\nTITLE: Defining CommentModeration Documentation with autoclass in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText and Sphinx's autoclass directive to automatically generate documentation for the CommentModeration class located in the praw.models.reddit.comment module, including documentation for any inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/commentmoderation.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nCommentModeration\n=================\n\n.. autoclass:: praw.models.reddit.comment.CommentModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for PRAW (Pre-commit)\nDESCRIPTION: Installs pre-commit hooks to automatically run checks when committing changes to PRAW.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows (Batch)\nDESCRIPTION: Activates the virtual environment on Windows systems using the activate.bat script.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_2\n\nLANGUAGE: bat\nCODE:\n```\n.venv\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PRAW Collection Class\nDESCRIPTION: This snippet uses Sphinx documentation syntax to automatically generate documentation for the Collection class in PRAW. It includes all inherited members in the documentation output.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/collection.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.Collection\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Method with Positional and Keyword Arguments in PRAW (Python)\nDESCRIPTION: Shows an exception to the PRAW-specific style, allowing positional arguments for clear mandatory parameters and keyword-only for optional ones.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Subreddit:\n    def submit(\n        self,\n        title,\n        *,\n        collection_id=None,\n        discussion_type=None,\n        draft_id=None,\n        flair_id=None,\n        flair_text=None,\n        inline_media=None,\n        nsfw=False,\n        resubmit=True,\n        selftext=None,\n        send_replies=True,\n        spoiler=False,\n        url=None,\n    ): ...\n```\n\n----------------------------------------\n\nTITLE: Documenting ContributorRelationship Class with Sphinx in RST\nDESCRIPTION: This RST (reStructuredText) snippet configures Sphinx to automatically document the ContributorRelationship class from PRAW's subreddit module, including all inherited members. This class likely handles the relationship between contributors and subreddits in the Reddit API.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/contributorrelationship.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nContributorRelationship\n=======================\n\n.. autoclass:: praw.models.reddit.subreddit.ContributorRelationship\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing PRAW Development Dependencies in Zsh (Pip)\nDESCRIPTION: Installs PRAW development dependencies using pip in Zsh shell, requiring double quotes around the extras.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Importing PRAW Subreddits Class\nDESCRIPTION: This snippet shows how to import the Subreddits class from the PRAW library. It is used to interact with subreddit-related functionalities in the Reddit API.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/reddit/subreddits.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom praw.models import Subreddits\n```\n\n----------------------------------------\n\nTITLE: Documenting the ModNote Class with Sphinx in reStructuredText\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the ModNote class from the PRAW library, including all inherited members. This is a common pattern in Python library documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/mod_note.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nModNote\n=======\n\n.. autoclass:: praw.models.ModNote\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Older Version of PRAW\nDESCRIPTION: Command to install a specific older version of PRAW by specifying the version number. This example shows how to install version 3.6.0.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/installation.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install praw==3.6.0\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for CollectionModeration Class in PRAW\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the CollectionModeration class in PRAW. It includes all inherited members, providing a comprehensive view of the class's functionality for moderating Reddit collections.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/collectionmoderation.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.collections.CollectionModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Reddit Object Type Identifiers in reStructuredText\nDESCRIPTION: Definition of Reddit's object type identifiers (t1 through t6) and their corresponding PRAW classes. These identifiers are used in object fullnames to specify the type of Reddit content being referenced.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/glossary.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nt1_* -> Comment\\s\nt2_* -> Redditor\\s\nt3_* -> Submission\\s\nt4_* -> Message\\s\nt5_* -> Subreddit\\s\nt6_* -> Trophy\\s\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PRAW Inbox Class with reStructuredText\nDESCRIPTION: A reStructuredText directive that instructs Sphinx to automatically generate documentation for the praw.models.Inbox class, including all inherited members. This is used in the PRAW documentation build process.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/reddit/inbox.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.Inbox\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting the ModAction Class using Sphinx autoclass in reStructuredText\nDESCRIPTION: This snippet uses Sphinx documentation directives to automatically generate API documentation for the ModAction class from PRAW. The autoclass directive is configured to include inherited members in the generated documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/mod_action.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nModAction\n=========\n\n.. autoclass:: praw.models.ModAction\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on MacOS/Linux (Bash)\nDESCRIPTION: Activates the virtual environment on MacOS or Linux systems using the source command.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for SubredditWidgetsModeration Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the SubredditWidgetsModeration class from the praw.models module. The :inherited-members: option ensures that inherited members are also included in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditwidgetsmoderation.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.SubredditWidgetsModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting PRAW Exceptions Module with Sphinx RST\nDESCRIPTION: Sphinx documentation directive that automatically documents all exception classes in the praw.exceptions module, including inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/exceptions.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: praw.exceptions\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Subreddit Class Documentation Structure with reStructuredText\nDESCRIPTION: This snippet defines the documentation structure for the Subreddit class in PRAW using reStructuredText format. It uses the autoclass directive to automatically include the class documentation along with all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/subreddit.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nSubreddit\n=========\n\n.. autoclass:: praw.models.Subreddit\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Trophy Class in PRAW (Python)\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the Trophy class in PRAW. It includes documentation for the __str__ method of the class.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/trophy.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.Trophy\n    :members: __str__\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variables in Windows Command Prompt\nDESCRIPTION: Command to echo environment variables in Windows Command Prompt\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration/prawini.rst#2025-04-17_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\necho \"%<variable>%\"\n```\n\n----------------------------------------\n\nTITLE: Defining SubredditFilters Class Documentation with Sphinx\nDESCRIPTION: RST markup that uses Sphinx's autoclass directive to generate documentation for the SubredditFilters class from the PRAW library. The directive includes inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditfilters.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.subreddit.SubredditFilters\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for PRAW MoreComments class in RST\nDESCRIPTION: This RST directive generates documentation for the MoreComments class in the PRAW library. It uses the autoclass sphinx directive to automatically pull documentation from the class docstrings and includes all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/more.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.MoreComments\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for PRAW LiveUpdate Class\nDESCRIPTION: A reStructuredText directive that configures Sphinx documentation generator to automatically include the LiveUpdate class from the praw.models module along with all its inherited members in the generated documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/liveupdate.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.LiveUpdate\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting PRAWBase Class with Sphinx\nDESCRIPTION: ReStructuredText directive for auto-documenting the PRAWBase class from praw.models.base module, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/prawbase.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.base.PRAWBase\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RST Note Block for PRAW Dynamic Attributes\nDESCRIPTION: A reStructuredText note block explaining PRAW's approach to handling dynamic attributes from the Reddit API and instructions for discovering available attributes.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/typical_attributes.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n\n    This table describes attributes that typically belong to objects of this class. PRAW\n    dynamically provides the attributes that Reddit returns via the API. Since those\n    attributes are subject to change on Reddit's end, PRAW makes no effort to document\n    any new/removed/changed attributes, other than to instruct you on how to discover\n    what is available. As a result, this table of attributes may not be complete. See\n    :ref:`determine-available-attributes-of-an-object` for detailed information.\n\n    If you would like to add an attribute to this table, feel free to open a `pull\n    request <https://github.com/praw-dev/praw/pulls>`_.\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for PRAW SubredditWidgets Class\nDESCRIPTION: This is a reStructuredText (rst) documentation snippet that uses Sphinx's autoclass directive to generate documentation for the SubredditWidgets class from PRAW. The directive includes the fully qualified class name and specifies that inherited members should be included in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditwidgets.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nSubredditWidgets\n================\n\n.. autoclass:: praw.models.SubredditWidgets\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PRAW Draft Class using Sphinx\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the Draft class in the praw.models module, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/draft.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.Draft\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Importing SubredditLinkFlairTemplates Class from PRAW\nDESCRIPTION: This code snippet demonstrates how to import the SubredditLinkFlairTemplates class from the PRAW library. It is used for managing link flair templates in subreddits.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditlinkflairtemplates.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom praw.models.reddit.subreddit import SubredditLinkFlairTemplates\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for PRAW DomainListing documentation\nDESCRIPTION: This ReStructuredText directive generates API documentation for the DomainListing class in the PRAW library. It uses the autoclass Sphinx directive to automatically pull class documentation from docstrings, with the inherited-members option to include documentation for inherited methods and attributes.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/domainlisting.rst#2025-04-17_snippet_0\n\nLANGUAGE: ReStructuredText\nCODE:\n```\n.. autoclass:: praw.models.DomainListing\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting CommentForest Class with Sphinx in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the CommentForest class from the praw.models.comment_forest module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/commentforest.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.comment_forest.CommentForest\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditWiki Class with Sphinx\nDESCRIPTION: RST documentation directive for auto-generating documentation for the SubredditWiki class from PRAW's subreddit module, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditwiki.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.subreddit.SubredditWiki\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for SubredditModeration Class in PRAW\nDESCRIPTION: This reStructuredText (rst) snippet defines documentation for the SubredditModeration class in PRAW. It uses the autoclass directive to automatically generate class documentation from the docstrings, including inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditmoderation.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nSubredditModeration\n===================\n\n.. autoclass:: praw.models.reddit.subreddit.SubredditModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for SubredditCollections in PRAW\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the SubredditCollections class from the praw.models.reddit.collections module, including inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditcollections.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.reddit.collections.SubredditCollections\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Autodoc Directive for PRAW Emoji Class\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the PRAW Emoji class, including all inherited members from parent classes.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/emoji.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.emoji.Emoji\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for SubmissionModeration Class in PRAW\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the SubmissionModeration class from PRAW. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/submissionmoderation.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.submission.SubmissionModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autodoc directive for SubredditRules class\nDESCRIPTION: ReStructuredText directive that automatically generates documentation for the SubredditRules class from PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditrules.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.rules.SubredditRules\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditModerationStream Class Using reStructuredText\nDESCRIPTION: This snippet defines a reStructuredText documentation block for the SubredditModerationStream class. It uses the autoclass directive to automatically pull documentation from the class definition in the PRAW library, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditmoderationstream.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nSubredditModerationStream\n=========================\n\n.. autoclass:: praw.models.reddit.subreddit.SubredditModerationStream\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditCollectionsModeration Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the SubredditCollectionsModeration class in PRAW. It includes all inherited members, providing a comprehensive view of the class's functionality for moderating subreddit collections.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditcollectionsmoderation.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.collections.SubredditCollectionsModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining RulesWidget Documentation with Sphinx Autoclass Directive in RST\nDESCRIPTION: This RST (reStructuredText) snippet configures the Sphinx documentation for the RulesWidget class in PRAW. It uses the autoclass directive to automatically generate documentation from the class's docstrings, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/ruleswidget.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nRulesWidget\n===========\n\n.. autoclass:: praw.models.RulesWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for PRAW ListingGenerator Class\nDESCRIPTION: A reStructuredText directive that uses Sphinx's autoclass feature to automatically generate documentation for the ListingGenerator class from the praw.models module, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/listinggenerator.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.ListingGenerator\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditRulesModeration Class with Sphinx\nDESCRIPTION: ReStructuredText documentation snippet using Sphinx autoclass directive to generate documentation for the SubredditRulesModeration class, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditrulesmoderation.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.rules.SubredditRulesModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx documentation for PRAW's Modmail class\nDESCRIPTION: This restructuredtext directive instructs Sphinx to automatically generate documentation for the Modmail class from PRAW's codebase, including any inherited members. The Modmail class is part of the subreddit module in PRAW and provides functionality for interacting with Reddit's modmail system.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/modmail.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.reddit.subreddit.Modmail\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining SubredditStylesheet Documentation with Sphinx in reStructuredText\nDESCRIPTION: This snippet uses Sphinx documentation directives to generate API documentation for the SubredditStylesheet class, including all inherited members. It's part of the PRAW (Python Reddit API Wrapper) documentation system.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditstylesheet.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nSubredditStylesheet\n===================\n\n.. autoclass:: praw.models.reddit.subreddit.SubredditStylesheet\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for PollOption class in PRAW\nDESCRIPTION: This RST directive configures Sphinx to automatically document the PollOption class from the praw.models.reddit.poll module, including its inherited members. This enables the generation of API documentation for this class.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/polloption.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.poll.PollOption\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autoclass Directive for SubredditStream Documentation\nDESCRIPTION: This code snippet uses the sphinx autoclass directive to automatically generate documentation for the SubredditStream class in PRAW. The directive includes the full path to the class and specifies that inherited members should also be documented.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditstream.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.reddit.subreddit.SubredditStream\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditQuarantine Class with Sphinx Autodoc\nDESCRIPTION: This snippet uses Sphinx's autodoc extension to automatically generate documentation for the SubredditQuarantine class from PRAW. The directive includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditquarantine.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.subreddit.SubredditQuarantine\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass Documentation for LiveUpdateContribution\nDESCRIPTION: ReStructuredText documentation configuration that uses Sphinx autoclass directive to generate API documentation for the LiveUpdateContribution class from PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/liveupdatecontribution.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.live.LiveUpdateContribution\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for SubListing Class in PRAW\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the SubListing class in PRAW. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/sublisting.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.listing.mixins.redditor.SubListing\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for SubredditModNotes Class\nDESCRIPTION: This RST (reStructuredText) directive instructs Sphinx to automatically generate documentation for the SubredditModNotes class from PRAW's models module, including all of its inherited members and methods.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subreddit_mod_notes.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.SubredditModNotes\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting ModmailConversation Class in Python using Sphinx\nDESCRIPTION: This snippet uses Sphinx documentation syntax to auto-generate documentation for the ModmailConversation class from the praw.models.reddit.modmail module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/modmailconversation.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.modmail.ModmailConversation\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Config Documentation using Sphinx directives in RST\nDESCRIPTION: This snippet uses reStructuredText (RST) format with Sphinx directives to automatically generate documentation for the Config class in PRAW, including all inherited members. This enables comprehensive API documentation generation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/config.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.config.Config\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: LiveThreadStream Class Documentation in Sphinx RST\nDESCRIPTION: A Sphinx documentation directive that automatically generates documentation for the LiveThreadStream class from the praw.models.reddit.live module, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/livethreadstream.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.live.LiveThreadStream\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RemovalReason Class Documentation Directive\nDESCRIPTION: Sphinx documentation directive that auto-generates documentation for the RemovalReason class from PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/removalreason.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.reddit.removal_reasons.RemovalReason\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PRAW IDCard Class using Sphinx\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the IDCard class in PRAW. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/idcard.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nIDCard\n======\n\n.. autoclass:: praw.models.IDCard\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining ModeratorRelationship Class Reference in RST\nDESCRIPTION: ReStructuredText documentation directive that auto-generates documentation for the ModeratorRelationship class from PRAW's subreddit module, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/moderatorrelationship.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.subreddit.ModeratorRelationship\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Auth Class Documentation in reStructuredText\nDESCRIPTION: A reStructuredText directive that generates documentation for the Auth class in PRAW. The directive includes inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/auth.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.Auth\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Structure for PRAW Stylesheet Class\nDESCRIPTION: RST directive for auto-generating documentation for the praw.models.Stylesheet class, including all inherited members. This is used by Sphinx to create the API documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/stylesheet.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.Stylesheet\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RedditorStream Class Documentation Definition\nDESCRIPTION: ReStructuredText directive for auto-generating documentation from the RedditorStream class, including inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/redditorstream.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.redditor.RedditorStream\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for PRAW InlineVideo Class\nDESCRIPTION: This is a restructuredtext (reST) directive that instructs Sphinx to automatically generate documentation for the InlineVideo class in PRAW, including all inherited members. This is part of the API documentation system for the Python Reddit API Wrapper.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/inlinevideo.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.InlineVideo\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting PRAW Preferences Class in RST\nDESCRIPTION: Sphinx documentation directive for auto-generating documentation from the PRAW Preferences class, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/preferences.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nPreferences\n===========\n\n.. autoclass:: praw.models.Preferences\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for PRAW InlineMedia Class\nDESCRIPTION: RST directive configuration for automatically generating documentation for the InlineMedia class from the PRAW library, including all inherited members from parent classes.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/inlinemedia.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.InlineMedia\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting PRAW Styles Class with Sphinx in reStructuredText\nDESCRIPTION: This reStructuredText directive generates documentation for the Styles class from the PRAW library. The 'autoclass' directive automatically pulls class documentation from docstrings, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/styles.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.Styles\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Auto-Documentation for RedditorList Class\nDESCRIPTION: RST directive that configures Sphinx to automatically generate documentation for the RedditorList class from PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/redditorlist.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.RedditorList\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting InboxableMixin Class Using reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to generate documentation for the InboxableMixin class from the PRAW library. The autoclass directive automatically includes the class documentation with all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/inboxablemixin.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.mixins.InboxableMixin\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting WidgetModeration Class in reStructuredText\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the WidgetModeration class from the PRAW library, including all inherited members. This is part of PRAW's API documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/widgetmoderation.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nWidgetModeration\n================\n\n.. autoclass:: praw.models.WidgetModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InlineImage Class in PRAW\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the InlineImage class from the praw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/inlineimage.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.InlineImage\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Autodoc for PRAW Submenu Class\nDESCRIPTION: This snippet uses reStructuredText directives to automatically generate documentation for the Submenu class from the PRAW library. It includes inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/submenu.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.Submenu\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation for RedditorModNotes Class in PRAW\nDESCRIPTION: This reStructuredText directive configures automatic documentation generation for the RedditorModNotes class from the PRAW package. It includes all inherited members to provide complete documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/redditor_mod_notes.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.RedditorModNotes\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autoclass directive for InlineGif in PRAW\nDESCRIPTION: Sets up Sphinx documentation for the InlineGif class in PRAW, including its inherited members. This directive tells Sphinx to automatically document the InlineGif class and include documentation for all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/inlinegif.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.InlineGif\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Widget Class with Sphinx RST\nDESCRIPTION: RST documentation code that generates automatic documentation for the Widget class in PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/widget.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nWidget\n======\n\n.. autoclass:: praw.models.Widget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting MenuLink Class with Sphinx\nDESCRIPTION: ReStructuredText directive to automatically generate documentation for the MenuLink class from PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/menulink.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nMenuLink\n========\n\n.. autoclass:: praw.models.MenuLink\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Referencing RedditBase Class Documentation with Sphinx\nDESCRIPTION: A Sphinx documentation directive that automates the generation of documentation for the RedditBase class from the PRAW library, including all inherited members. This is used in the PRAW documentation to provide a complete reference for this base class.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/redditbase.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.base.RedditBase\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for RedditModNotes Class\nDESCRIPTION: ReStructuredText directive to automatically generate documentation for the RedditModNotes class from PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/reddit_mod_notes.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.RedditModNotes\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting FullnameMixin Class with reStructuredText\nDESCRIPTION: Sphinx documentation directive that automatically generates class documentation for the FullnameMixin class from PRAW's models package, including inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/fullnamemixin.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.reddit.mixins.FullnameMixin\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting ModmailMessage Class in RST\nDESCRIPTION: Sphinx documentation directive for auto-generating API documentation for the ModmailMessage class from PRAW, including inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/modmailmessage.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.ModmailMessage\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Hover Class Documentation in reStructuredText\nDESCRIPTION: Sets up automated documentation generation for the PRAW Hover class using reStructuredText directives. Configures inheritance documentation to include inherited members in the generated docs.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/hover.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nHover\n=====\n\n.. autoclass:: praw.models.Hover\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting PartialRedditor Class in Python using Sphinx\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the PartialRedditor class from the praw.models.redditors module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/partialredditor.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.redditors.PartialRedditor\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoClass Documentation for PRAW ModeratedList\nDESCRIPTION: Sphinx documentation directive that automatically documents the ModeratedList class from the praw.models module. The :inherited-members: flag ensures that documentation includes methods and attributes inherited from parent classes.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/moderatedlist.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.ModeratedList\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting PostFlairWidget Class with Sphinx in RST\nDESCRIPTION: This RST code uses Sphinx's autoclass directive to generate documentation for the PostFlairWidget class in PRAW, including all of its inherited members. The documentation will be generated from the class's docstrings.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/postflairwidget.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nPostFlairWidget\n===============\n\n.. autoclass:: praw.models.PostFlairWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditFlairTemplates Class in reStructuredText\nDESCRIPTION: Directive to automatically generate documentation for the SubredditFlairTemplates class from the PRAW library, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditflairtemplates.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.subreddit.SubredditFlairTemplates\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PRAW Button Class\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the Button class in PRAW, including all inherited members. It's typically used in reStructuredText files for building comprehensive API documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/button.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.Button\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditMessage Class Using reStructuredText\nDESCRIPTION: This code snippet uses reStructuredText's autoclass directive to generate documentation for the SubredditMessage class in PRAW, including all its inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditmessage.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nSubredditMessage\n================\n\n.. autoclass:: praw.models.SubredditMessage\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting LiveContributorRelationship Class in RST\nDESCRIPTION: ReStructuredText documentation directive that auto-generates documentation for the LiveContributorRelationship class from PRAW, including inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/livecontributorrelationship.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.live.LiveContributorRelationship\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for UserSubredditModeration Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the UserSubredditModeration class from the PRAW library. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/usersubredditmoderation.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.user_subreddit.UserSubredditModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating ButtonWidget Class Documentation with Sphinx for PRAW in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the ButtonWidget class from the praw.models module. It includes inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/buttonwidget.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.ButtonWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating BaseModNotes Class Documentation with Sphinx\nDESCRIPTION: Sphinx directive for automatic documentation generation of the BaseModNotes class from the praw.models.mod_notes module. This includes all inherited members of the class to ensure comprehensive documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/base_mod_notes.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.mod_notes.BaseModNotes\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Referencing SubredditListingMixin Class with Sphinx Autoclass in reStructuredText\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the SubredditListingMixin class from PRAW's subreddit listing mixins module. The directive includes inherited members in the generated documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditlistingmixin.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.listing.mixins.subreddit.SubredditListingMixin\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass Documentation Directive for PRAW BaseList Class\nDESCRIPTION: This reStructuredText directive instructs Sphinx to automatically generate documentation for the BaseList class from the PRAW codebase. The :inherited-members: flag ensures that all inherited methods and attributes are also documented.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/baselist.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.list.base.BaseList\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting ModNoteMixin Class in PRAW (Python)\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the ModNoteMixin class. It includes all members of the class in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/mod_note_mixin.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.mixins.ModNoteMixin\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for SubmissionFlair in PRAW\nDESCRIPTION: A reStructuredText (rst) directive that automatically generates documentation for the SubmissionFlair class from the praw.models.reddit.submission module. The directive includes all inherited members in the generated documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/submissionflair.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.submission.SubmissionFlair\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for PollData Class\nDESCRIPTION: This RST (reStructuredText) snippet defines the documentation format for the PollData class in PRAW. It specifies that the documentation should be auto-generated from the class definition in the praw.models.reddit.poll module and include inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/polldata.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nPollData\n========\n\n.. autoclass:: praw.models.reddit.poll.PollData\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for SubredditEmoji Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the SubredditEmoji class from the PRAW library. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditemoji.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.emoji.SubredditEmoji\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting TextArea Class with Sphinx in RST\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the TextArea class from PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/textarea.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTextArea\n========\n\n.. autoclass:: praw.models.TextArea\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variables in Python\nDESCRIPTION: Python code to retrieve and print environment variables using os.environ\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration/prawini.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nprint(os.environ.get(\"<variable>\", \"\"))\n```\n\n----------------------------------------\n\nTITLE: Documenting LiveThreadContribution Class with Sphinx\nDESCRIPTION: Sphinx documentation configuration using autoclass directive to generate documentation for LiveThreadContribution class including inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/livethreadcontribution.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.reddit.live.LiveThreadContribution\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting UserSubreddit Class Using Sphinx/RST\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the UserSubreddit class from PRAW, including all inherited members\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/usersubreddit.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nUserSubreddit\n=============\n\n.. autoclass:: praw.models.UserSubreddit\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoClass Documentation for PRAW CommunityList in RST\nDESCRIPTION: This RST (reStructuredText) code snippet uses Sphinx's autoclass directive to automatically generate documentation for the CommunityList class from PRAW, including its inherited members. This approach is commonly used in Python library documentation to pull class documentation directly from docstrings.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/communitylist.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nCommunityList\n=============\n\n.. autoclass:: praw.models.CommunityList\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for RuleModeration Class with Sphinx in reStructuredText\nDESCRIPTION: Sphinx documentation configuration that uses the autoclass directive to automatically generate documentation for the RuleModeration class in the praw.models.reddit.rules module. The directive includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/rulemoderation.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.rules.RuleModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Running Pre-push Checks for PRAW (Python)\nDESCRIPTION: Runs all necessary checks and ensures the documentation builds correctly before pushing changes to PRAW.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/contributing.rst#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./pre_push.py\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autoclass Directive for PRAW Rule Model in reStructuredText\nDESCRIPTION: This reStructuredText directive instructs the Sphinx documentation generator to automatically document the Rule class from the praw.models module. The :inherited-members: flag ensures that any inherited attributes and methods are also included in the generated documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/rule.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.Rule\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoClass Documentation for PRAW Front Model\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the Front class from PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/reddit/front.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.Front\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting CustomWidget Class in PRAW using Sphinx\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the CustomWidget class from the praw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/customwidget.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.CustomWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for PRAW Models\nDESCRIPTION: A reStructuredText formatted table of contents that defines the documentation structure for various PRAW models. Uses toctree directive to organize documentation pages hierarchically.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/praw_models.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n    :caption: Models\n\n    models/comment\n    models/draft\n    models/livethread\n    models/liveupdate\n    models/message\n    models/modmailconversation\n    models/more\n    models/multireddit\n    models/redditor\n    models/submission\n    models/subreddit\n    models/wikipage\n```\n\n----------------------------------------\n\nTITLE: Including CHANGES.rst in RST Documentation\nDESCRIPTION: RST include directive that imports the CHANGES.rst file from two directory levels up. Used to include the main PRAW changelog in other documentation files.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/package_info/change_log.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../../CHANGES.rst\n```\n\n----------------------------------------\n\nTITLE: Defining ImageData Class Documentation with reStructuredText\nDESCRIPTION: A reStructuredText directive for generating automatic documentation for the ImageData class from the PRAW library. It specifies that the documentation should include members inherited from parent classes.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/imagedata.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nImageData\n=========\n\n.. autoclass:: praw.models.ImageData\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Handling Module Import Changes\nDESCRIPTION: Example showing the module path change for ModAction from modaction to mod_action.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Old import (deprecated)\nfrom praw.models.modaction import ModAction\n\n# New import\nfrom praw.models.mod_action import ModAction\n# or\nfrom praw.models import ModAction\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure for Redditors Class in PRAW using reStructuredText\nDESCRIPTION: reStructuredText markup that defines the documentation structure for the Redditors class in PRAW. It uses the autoclass directive to automatically include documentation from the class's docstrings, including inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/reddit/redditors.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nreddit.redditors\n================\n\n.. autoclass:: praw.models.Redditors\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Index with reStructuredText Directive\nDESCRIPTION: This snippet creates a hidden toctree that includes the genindex. This is a common pattern in Sphinx documentation to include the index page without displaying it in the navigation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/index.rst#2025-04-17_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :hidden:\n\n    genindex\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for PRAW Image Class\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the Image class from PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/image.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.Image\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Accessing a Live Update in Python using PRAW\nDESCRIPTION: Added the ability to access an individual LiveUpdate via indexing on a LiveThread instance.\nSOURCE: https://github.com/praw-dev/praw/blob/main/CHANGES.rst#2025-04-17_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\n\"reddit.live(\\\"THREAD_ID\\\")[\\\"UPDATE_ID\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Generating Menu Class Documentation with Sphinx in reStructuredText\nDESCRIPTION: This snippet configures Sphinx to automatically generate documentation for the Menu class from the praw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/menu.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nMenu\n====\n\n.. autoclass:: praw.models.Menu\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Creating Code Overview Section with reStructuredText TOC\nDESCRIPTION: This snippet defines the Code Overview section of the documentation using reStructuredText toctree directive. It includes links to pages about reddit instances, models, exceptions, and other components.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :caption: Code Overview\n\n    code_overview/reddit_instance\n    code_overview/praw_models\n    code_overview/exceptions\n    code_overview/other\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation for ImageWidget Class in RST\nDESCRIPTION: This RST (reStructuredText) snippet sets up automatic documentation generation for the ImageWidget class from the PRAW library. It uses Sphinx's autoclass directive to include the class documentation along with all its inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/imagewidget.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nImageWidget\n===========\n\n.. autoclass:: praw.models.ImageWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variables in MacOS/Linux\nDESCRIPTION: Command to echo environment variables in MacOS/Linux terminal\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration/prawini.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"$<variable>\"\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoDoc Directive for DraftList Class\nDESCRIPTION: ReStructuredText directive that automatically generates documentation for the DraftList class from PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/draftlist.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nDraftList\n=========\n\n.. autoclass:: praw.models.DraftList\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoDoc Configuration for CalendarConfiguration Class\nDESCRIPTION: ReStructuredText directive to automatically generate documentation for the CalendarConfiguration class from PRAW, including all inherited members\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/calendarconfiguration.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.CalendarConfiguration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variables in PowerShell\nDESCRIPTION: Command to output environment variables in PowerShell\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration/prawini.rst#2025-04-17_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Output \"$env:<variable>\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Calendar Class in PRAW using Sphinx\nDESCRIPTION: This snippet uses Sphinx autodoc directives to automatically generate documentation for the Calendar class in PRAW, including inherited members. It's typically used in reStructuredText files for generating API documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/calendar.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nCalendar\n========\n\n.. autoclass:: praw.models.Calendar\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for PRAW DraftHelper Class\nDESCRIPTION: ReStructuredText directive for auto-generating documentation from the DraftHelper class in PRAW, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/reddit/drafts.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.DraftHelper\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting MultiredditHelper Class in PRAW\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the MultiredditHelper class in PRAW. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/reddit/multireddit.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.MultiredditHelper\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting WikiPageModeration Class in PRAW\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the WikiPageModeration class including all inherited members. This class is part of PRAW's wiki page management functionality.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/wikipagemoderation.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.reddit.wikipage.WikiPageModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditRemovalReasons Class with Sphinx in reStructuredText\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the SubredditRemovalReasons class from the praw.models.reddit.removal_reasons module, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditremovalreasons.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: praw.models.reddit.removal_reasons.SubredditRemovalReasons\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting CommentHelper Class with Sphinx in reST\nDESCRIPTION: Sphinx documentation directive that automatically generates class documentation for the CommentHelper class in PRAW's subreddit mixins, including all inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/commenthelper.rst#2025-04-17_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. autoclass:: praw.models.listing.mixins.subreddit.CommentHelper\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Structuring PRAW Documentation with reStructuredText Directives\nDESCRIPTION: This snippet shows how to organize documentation sections using reStructuredText toctree directives. It creates categorized documentation sections with maxdepth parameter set to 1 and appropriate captions.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :caption: Getting Started\n\n    getting_started/quick_start\n    getting_started/installation\n    getting_started/authentication\n    getting_started/configuration\n    getting_started/multiple_instances\n    getting_started/logging\n    getting_started/ratelimits\n    getting_started/faq\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for PRAW Utilities\nDESCRIPTION: ReStructuredText documentation directives for PRAW utility classes and functions, including BoundedSet, ExponentialCounter, permissions_string, and stream_generator.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/util.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.util.BoundedSet\n    :inherited-members:\n\n.. autoclass:: praw.models.util.ExponentialCounter\n    :inherited-members:\n\n.. autofunction:: praw.models.util.permissions_string\n\n.. autofunction:: praw.models.util.stream_generator\n```\n\n----------------------------------------\n\nTITLE: Creating Package Info Section with reStructuredText TOC\nDESCRIPTION: This snippet defines the Package Info section of the documentation using reStructuredText toctree directive. It includes links to pages about change logs, contribution guidelines, glossary, and references.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/index.rst#2025-04-17_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :caption: Package Info\n\n    package_info/change_log\n    package_info/contributing\n    package_info/glossary\n    package_info/references\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for PRAW LiveHelper in RST\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the LiveHelper class in the PRAW package, including any members it inherits from parent classes.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/reddit/live.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.LiveHelper\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Tutorial Section with reStructuredText TOC\nDESCRIPTION: This snippet creates the Tutorial section of the documentation using reStructuredText toctree directive. It includes links to various tutorial pages such as comments, refresh token, and reply bot.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/index.rst#2025-04-17_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :caption: Tutorials\n\n    tutorials/comments.rst\n    tutorials/refresh_token.rst\n    tutorials/reply_bot.rst\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for PRAW ModeratorsWidget\nDESCRIPTION: Sphinx documentation directive that configures the autodoc extension to document the ModeratorsWidget class from praw.models, including all inherited members\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/moderatorswidget.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: praw.models.ModeratorsWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Setting PRAW Credentials Using Environment Variables in Shell\nDESCRIPTION: This example shows how to set Reddit username and password credentials using environment variables when executing a Python script. Variables prefixed with 'praw_' will be recognized by PRAW and override any corresponding values in praw.ini files.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/getting_started/configuration/environment_variables.rst#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npraw_username=bboe praw_password=not_my_password python my_script.py\n```\n\n----------------------------------------\n\nTITLE: Documenting WikiPage Class with reStructuredText Directives\nDESCRIPTION: This snippet uses reStructuredText directives to auto-document the WikiPage class from PRAW's models. The autoclass directive instructs the documentation generator to include documentation for the WikiPage class along with its inherited members.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/models/wikipage.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: praw.models.reddit.wikipage.WikiPage\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Importing SubredditRedditorFlairTemplates Class from PRAW\nDESCRIPTION: This code snippet demonstrates how to import the SubredditRedditorFlairTemplates class from the PRAW library. It is used for managing redditor flair templates in a subreddit.\nSOURCE: https://github.com/praw-dev/praw/blob/main/docs/code_overview/other/subredditredditorflairtemplates.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom praw.models.reddit.subreddit import SubredditRedditorFlairTemplates\n```"
  }
]