[
  {
    "owner": "jsdoc",
    "repo": "jsdoc.github.io",
    "content": "TITLE: Extending an ES 2015 Class in JavaScript with JSDoc\nDESCRIPTION: This example shows how to document a class that extends another class using the ES 2015 'extends' keyword. It demonstrates the use of the @extends tag to indicate the parent class in JSDoc comments.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-es2015-classes.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Class representing a dot.\n * @extends Point\n */\nclass Dot extends Point {\n    /**\n     * Create a dot.\n     * @param {number} x - The x value.\n     * @param {number} y - The y value.\n     * @param {number} width - The width of the dot, in pixels.\n     */\n    constructor(x, y, width) {\n        // ...\n    }\n\n    /**\n     * Get the dot's width.\n     * @return {number} The dot's width, in pixels.\n     */\n    getWidth() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type Definitions in JSDoc\nDESCRIPTION: Shows how to create a complex type definition using @typedef and then reference it in a variable declaration. This example defines an object type with specific properties.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @typedef PropertiesHash\n * @type {object}\n * @property {string} id - an ID.\n * @property {string} name - your name.\n * @property {number} age - your age.\n */\n\n/** @type {PropertiesHash} */\nvar props;\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Methods in JavaScript with JSDoc\nDESCRIPTION: This example demonstrates the proper use of the @abstract tag in JSDoc. It shows a parent DairyProduct class with an abstract method isSolid() that throws an error if not implemented, and a child Milk class that correctly implements this required method. The example illustrates how to document inheritance relationships and abstract method requirements.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-abstract.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Generic dairy product.\n * @constructor\n */\nfunction DairyProduct() {}\n\n/**\n * Check whether the dairy product is solid at room temperature.\n * @abstract\n * @return {boolean}\n */\nDairyProduct.prototype.isSolid = function() {\n    throw new Error('must be implemented by subclass!');\n};\n\n/**\n * Cool, refreshing milk.\n * @constructor\n * @augments DairyProduct\n */\nfunction Milk() {}\n\n/**\n * Check whether milk is solid at room temperature.\n * @return {boolean} Always returns false.\n */\nMilk.prototype.isSolid = function() {\n    return false;\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Types and Repeatable Parameters\nDESCRIPTION: Examples demonstrating how to document parameters that accept multiple types, any type, or can be repeated multiple times.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-param.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {(string|string[])} [somebody=John Doe] - Somebody's name, or an array of names.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    } else if (Array.isArray(somebody)) {\n        somebody = somebody.join(', ');\n    }\n    alert('Hello ' + somebody);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {*} somebody - Whatever you want.\n */\nfunction sayHello(somebody) {\n    console.log('Hello ' + JSON.stringify(somebody));\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Returns the sum of all numbers passed to the function.\n * @param {...number} num - A positive or negative number.\n */\nfunction sum(num) {\n    var i = 0, n = arguments.length, t = 0;\n    for (; i &lt; n; i++) {\n        t += arguments[i];\n    }\n    return t;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Detailed JSDoc Comments with Tags in JavaScript\nDESCRIPTION: Illustrates a more comprehensive JSDoc comment using multiple tags. It documents a Book constructor with @constructor, @param tags for title and author parameters.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Represents a book.\n * @constructor\n * @param {string} title - The title of the book.\n * @param {string} author - The author of the book.\n */\nfunction Book(title, author) {\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Namepath Syntax Examples in JSDoc\nDESCRIPTION: Demonstrates the basic syntax for referencing different types of JavaScript variables including functions, constructors, instance members, static members, and inner members.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-namepaths.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmyFunction\nMyConstructor\nMyConstructor#instanceMember\nMyConstructor.staticMember\nMyConstructor~innerMember // note that JSDoc 2 uses a dash\n```\n\n----------------------------------------\n\nTITLE: Basic JSDoc Example Documentation\nDESCRIPTION: Shows how to document multiple examples for a method that solves linear equations. Demonstrates using multiple @example tags to show different use cases with expected returns.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-example.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Solves equations of the form a * x = b\n * @example\n * // returns 2\n * globalNS.method1(5, 10);\n * @example\n * // returns 3\n * globalNS.method(5, 15);\n * @returns {Number} Returns the value of x for the equation.\n */\nglobalNS.method1 = function (a, b) {\n    return b / a;\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting a Simple ES 2015 Class in JavaScript\nDESCRIPTION: This snippet shows how to document a simple ES 2015 class named Point with a constructor, two instance methods, and one static method. It demonstrates the use of JSDoc comments for class, constructor, and method documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-es2015-classes.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** Class representing a point. */\nclass Point {\n    /**\n     * Create a point.\n     * @param {number} x - The x value.\n     * @param {number} y - The y value.\n     */\n    constructor(x, y) {\n        // ...\n    }\n\n    /**\n     * Get the x value.\n     * @return {number} The x value.\n     */\n    getX() {\n        // ...\n    }\n\n    /**\n     * Get the y value.\n     * @return {number} The y value.\n     */\n    getY() {\n        // ...\n    }\n\n    /**\n     * Convert a string containing two comma-separated numbers into a point.\n     * @param {string} str - The string containing two comma-separated numbers.\n     * @return {Point} A Point object.\n     */\n    static fromString(str) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Parameters in JSDoc\nDESCRIPTION: Shows two ways to document optional parameters in JSDoc: using square brackets or the equals sign notation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n@param {number} [foo]\n// or:\n@param {number=} foo\n```\n\n----------------------------------------\n\nTITLE: Defining a JSDoc Interface Using Virtual Comments\nDESCRIPTION: This example shows how to define the Color interface using virtual comments without actual code implementation. This approach uses JSDoc tags to describe the interface structure without requiring function stubs.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-interface.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Interface for classes that represent a color.\n *\n * @interface Color\n */\n\n/**\n * Get the color as an array of red, green, and blue values, represented as\n * decimal numbers between 0 and 1.\n *\n * @function\n * @name Color#rgb\n * @returns {Array&lt;number>} An array containing the red, green, and blue values,\n * in that order.\n */\n```\n\n----------------------------------------\n\nTITLE: Basic Type Tag Usage Examples in JSDoc\nDESCRIPTION: Demonstrates basic usage of the @type tag to document variables with different types, including a union type and a simple number type.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {(string|Array.<string>)} */\nvar foo;\n/** @type {number} */\nvar bar = 1;\n```\n\n----------------------------------------\n\nTITLE: Documenting Numeric Enum with JSDoc\nDESCRIPTION: Demonstrates how to document a tri-state enum using JSDoc annotations. Shows type specification, readonly designation, and member value documentation including type overrides for individual members.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-enum.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Enum for tri-state values.\n * @readonly\n * @enum {number}\n */\nvar triState = {\n    /** The true value */\n    TRUE: 1,\n    FALSE: -1,\n    /** @type {boolean} */\n    MAYBE: true\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Parameter Documentation in JavaScript\nDESCRIPTION: Examples showing different ways to document basic function parameters using @param tags, from simple name-only documentation to full type and description documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-param.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param somebody\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {string} somebody\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {string} somebody Somebody's name.\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {string} somebody - Somebody's name.\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @this Tag Usage in JavaScript with JSDoc\nDESCRIPTION: This example shows how to use the @this tag in JSDoc to properly document the context of 'this' within a function. It demonstrates how 'this.name' is documented as 'Greeter#name' instead of a global 'name' symbol.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-this.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/** @constructor */\nfunction Greeter(name) {\n    setName.apply(this, name);\n}\n\n/** @this Greeter */\nfunction setName(name) {\n    /** document me */\n    this.name = name;\n}\n```\n\n----------------------------------------\n\nTITLE: Callback Function Parameters\nDESCRIPTION: Example showing how to document callback function parameters using @callback and @param tags together.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-param.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This callback type is called `requestCallback` and is displayed as a global symbol.\n *\n * @callback requestCallback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\n\n/**\n * Does something asynchronously and executes the callback on completion.\n * @param {requestCallback} cb - The callback that handles the response.\n */\nfunction doSomethingAsynchronously(cb) {\n    // code\n};\n```\n\n----------------------------------------\n\nTITLE: Inheriting Documentation Using @inheritdoc Tag in JavaScript\nDESCRIPTION: Demonstrates how to use the @inheritdoc tag to explicitly inherit documentation from a parent class. Shows implementation of Connection and Socket classes where Socket inherits documentation for its open() method.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-inheritdoc.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @classdesc Abstract class representing a network connection.\n * @class\n */\nfunction Connection() {}\n\n/**\n * Open the connection.\n */\nConnection.prototype.open = function() {\n    // ...\n};\n\n\n/**\n * @classdesc Class representing a socket connection.\n * @class\n * @augments Connection\n */\nfunction Socket() {}\n\n/** @inheritdoc */\nSocket.prototype.open = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Object Parameters with Properties\nDESCRIPTION: Examples demonstrating how to document complex object parameters with nested properties and array parameters with object elements.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-param.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Assign the project to an employee.\n * @param {Object} employee - The employee who is responsible for the project.\n * @param {string} employee.name - The name of the employee.\n * @param {string} employee.department - The employee's department.\n */\nProject.prototype.assign = function(employee) {\n    // ...\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Assign the project to an employee.\n * @param {Object} employee - The employee who is responsible for the project.\n * @param {string} employee.name - The name of the employee.\n * @param {string} employee.department - The employee's department.\n */\nProject.prototype.assign = function({ name, department }) {\n    // ...\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Assign the project to a list of employees.\n * @param {Object[]} employees - The employees who are responsible for the project.\n * @param {string} employees[].name - The name of an employee.\n * @param {string} employees[].department - The employee's department.\n */\nProject.prototype.assign = function(employees) {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Function Return Value with Type in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the @returns tag to document a function's return value with a specified type. It shows a simple sum function that returns a number.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-returns.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Returns the sum of a and b\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction sum(a, b) {\n    return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Parameters and Default Values\nDESCRIPTION: Examples showing how to document optional parameters and their default values using different syntaxes including JSDoc and Google Closure Compiler.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-param.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {string} [somebody] - Somebody's name.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    }\n    alert('Hello ' + somebody);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {string=} somebody - Somebody's name.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    }\n    alert('Hello ' + somebody);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {string} [somebody=John Doe] - Somebody's name.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    }\n    alert('Hello ' + somebody);\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Function Return Value with Type and Description in JavaScript\nDESCRIPTION: This example shows how to use the @returns tag with both a type and a description. It documents a sum function, specifying that it returns a number and describing it as the sum of a and b.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-returns.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Returns the sum of a and b\n * @param {number} a\n * @param {number} b\n * @returns {number} Sum of a and b\n */\nfunction sum(a, b) {\n    return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Description Comment in JavaScript\nDESCRIPTION: Demonstrates how to add a basic description comment for a function using JSDoc syntax. This is the simplest form of documentation, consisting of just a description.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** This is a description of the foo function. */\nfunction foo() {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean and Custom Class Types in JSDoc\nDESCRIPTION: Shows how to specify boolean and custom class types using JSDoc notation. These examples demonstrate simple type name expressions.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n{boolean}\n{myNamespace.MyClass}\n```\n\n----------------------------------------\n\nTITLE: Documenting Asynchronous Function Returning a Promise in JavaScript\nDESCRIPTION: This example demonstrates how to use the @returns tag to document an asynchronous function that returns a Promise. It specifies that the Promise resolves to a number representing the sum of a and b.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-returns.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Returns the sum of a and b\n * @param {number} a\n * @param {number} b\n * @returns {Promise<number>} Promise object represents the sum of a and b\n */\nfunction sumAsync(a, b) {\n    return new Promise(function(resolve, reject) {\n        resolve(a + b);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting a Global Callback in JavaScript using JSDoc\nDESCRIPTION: This example shows how to document a global callback function that can be referenced from multiple classes. The callback is defined with a global namepath and then used as a parameter type in a class method.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-callback.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @class\n */\nfunction Requester() {}\n\n/**\n * Send a request.\n * @param {requestCallback} cb - The callback that handles the response.\n */\nRequester.prototype.send = function(cb) {\n    // code\n};\n\n/**\n * This callback is displayed as a global member.\n * @callback requestCallback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Objects with Specific Properties in JSDoc\nDESCRIPTION: Demonstrates two approaches to documenting an object with specific property types: using record type notation or documenting each property individually.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n{{a: number, b: string, c}} myObj\n// or:\n{Object} myObj\n{number} myObj.a\n{string} myObj.b\n{*} myObj.c\n```\n\n----------------------------------------\n\nTITLE: Documenting Function with Multiple Return Types in JavaScript\nDESCRIPTION: This snippet illustrates how to document a function that can return multiple types using the @returns tag. The function can return either a number or an array based on a boolean parameter.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-returns.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Returns the sum of a and b\n * @param {number} a\n * @param {number} b\n * @param {boolean} retArr If set to true, the function will return an array\n * @returns {(number|Array)} Sum of a and b or an array that contains a, b and the sum of a and b.\n */\nfunction sum(a, b, retArr) {\n    if (retArr) {\n        return [a, b, a + b];\n    }\n    return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Type Information with Other Tags in JSDoc\nDESCRIPTION: Shows how type information can be included with other tags like @const, either as a separate @type tag or directly with the other tag.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {number}\n * @const\n */\nvar FOO = 1;\n\n// same as:\n\n/** @const {number} */\nvar FOO = 1;\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Types in JSDoc\nDESCRIPTION: Demonstrates how to document a callback function type using the @callback tag and how to use that type in a variable declaration.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @callback myCallback\n * @param {number} x - ...\n */\n\n/** @type {myCallback} */\nvar cb;\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Object Types with @typedef for a Class in JavaScript\nDESCRIPTION: This example shows how to define a complex object type with multiple properties using @typedef. It creates a 'Triforce' type as an inner member of the 'WishGranter' class with three boolean properties, then uses this type in the class constructor.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-typedef.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * The complete Triforce, or one or more components of the Triforce.\n * @typedef {Object} WishGranter~Triforce\n * @property {boolean} hasCourage - Indicates whether the Courage component is present.\n * @property {boolean} hasPower - Indicates whether the Power component is present.\n * @property {boolean} hasWisdom - Indicates whether the Wisdom component is present.\n */\n\n/**\n * A class for granting wishes, powered by the Triforce.\n * @class\n * @param {...WishGranter~Triforce} triforce - One to three {@link WishGranter~Triforce} objects\n * containing all three components of the Triforce.\n */\nfunction WishGranter(triforce) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sum Function with Variadic Parameters in JSDoc\nDESCRIPTION: Shows a complete example of a function that accepts a variable number of numeric parameters and returns their sum, with JSDoc documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Returns the sum of all numbers passed to the function.\n * @param {...number} num A positive or negative number\n */\nfunction sum(num) {\n    var i=0, n=arguments.length, t=0;\n    for (; i&lt;n; i++) {\n        t += arguments[i];\n    }\n    return t;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Interface with @implements in JavaScript\nDESCRIPTION: This example demonstrates how to use the @implements tag to indicate that a class implements an interface. It shows the Color interface and a TransparentColor class that implements it, along with additional functionality.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-implements.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Interface for classes that represent a color.\n *\n * @interface\n */\nfunction Color() {}\n\n/**\n * Get the color as an array of red, green, and blue values, represented as\n * decimal numbers between 0 and 1.\n *\n * @returns {Array<number>} An array containing the red, green, and blue values,\n * in that order.\n */\nColor.prototype.rgb = function() {\n    throw new Error('not implemented');\n};\n\n/**\n * Class representing a color with transparency information.\n *\n * @class\n * @implements {Color}\n */\nfunction TransparentColor() {}\n\n// inherits the documentation from `Color#rgb`\nTransparentColor.prototype.rgb = function() {\n    // ...\n};\n\n/**\n * Get the color as an array of red, green, blue, and alpha values, represented\n * as decimal numbers between 0 and 1.\n *\n * @returns {Array<number>} An array containing the red, green, blue, and alpha\n * values, in that order.\n */\nTransparentColor.prototype.rgba = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Exported Values in ES 2015 Modules\nDESCRIPTION: Shows how to document various types of exported values in an ES 2015 module, including constants, variables, functions, and renamed exports.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-es2015-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @module color/mixer */\n\n/** The name of the module. */\nexport const name = 'mixer';\n\n/** The most recent blended color. */\nexport var lastColor = null;\n\n/**\n * Blend two colors together.\n * @param {string} color1 - The first color, in hexadecimal format.\n * @param {string} color2 - The second color, in hexadecimal format.\n * @return {string} The blended color.\n */\nexport function blend(color1, color2) {}\n\n// convert color to array of RGB values (0-255)\nfunction rgbify(color) {}\n\nexport {\n    /**\n     * Get the red, green, and blue values of a color.\n     * @function\n     * @param {string} color - A color, in hexadecimal format.\n     * @returns {Array.<number>} An array of the red, green, and blue values,\n     * each ranging from 0 to 255.\n     */\n    rgbify as toRgb\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting a Class-Specific Callback in JavaScript using JSDoc\nDESCRIPTION: This example demonstrates how to document a callback function that is specific to a class. The callback is defined with a namepath indicating it is an inner function of the Requester class, and is then used as a parameter type in a class method.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-callback.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @class\n */\nfunction Requester() {}\n\n/**\n * Send a request.\n * @param {Requester~requestCallback} cb - The callback that handles the response.\n */\nRequester.prototype.send = function(cb) {\n    // code\n};\n\n/**\n * This callback is displayed as part of the Requester class.\n * @callback Requester~requestCallback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\n```\n\n----------------------------------------\n\nTITLE: Using Inline Tags Within Block Tags\nDESCRIPTION: Demonstrates how to use an inline tag within a block tag's description. The example shows documentation for a method that sets shoe color using an enumerated type.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-block-inline-tags.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Set the shoe's color.\n *\n * @param {SHOE_COLORS} color - The shoe color. Must be an enumerated\n * value of {@link SHOE_COLORS}.\n */\nShoe.prototype.setColor = function(color) {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using @memberof with JavaScript Class Prototype\nDESCRIPTION: Shows various ways to use @memberof for documenting static and instance members of a class. Includes examples of using @memberof with class prototype and the @instance tag.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-memberof.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @class Observable */\ncreate(\n    'Observable',\n    {\n        /**\n         * This will be a static member, Observable.cache.\n         * @memberof Observable\n         */\n        cache: [],\n\n        /**\n         * This will be an instance member, Observable#publish.\n         * @memberof Observable.prototype\n         */\n        publish: function(msg) {},\n\n        /**\n         * This will also be an instance member, Observable#save.\n         * @memberof Observable#\n         */\n        save: function() {},\n\n        /**\n         * This will also be an instance member, Observable#end.\n         * @memberof Observable\n         * @instance\n         */\n        end: function() {}\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc Tag for Constructor in JavaScript\nDESCRIPTION: Shows how to use the @constructor JSDoc tag to indicate that a function is a constructor for a class. This example documents a Book constructor.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Represents a book.\n * @constructor\n */\nfunction Book(title, author) {\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Class Documentation with Constructor\nDESCRIPTION: Final example showing complete documentation using @lends and @constructs tags to properly document the class constructor and instance methods.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-lends.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar Person = makeClass(\n    /** @lends Person.prototype */\n    {\n        /**\n         * Create a `Person` instance.\n         * @constructs\n         * @param {string} name - The person's name.\n         */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /**\n         * Say something.\n         * @param {string} message - The message to say.\n         * @returns {string} The complete message.\n         */\n        say: function(message) {\n            return this.name + \" says: \" + message;\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Array Types in JSDoc\nDESCRIPTION: Demonstrates two ways to specify an array of a specific type in JSDoc: using the Array generic syntax or the bracket notation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n{Array.<MyClass>}\n// or:\n{MyClass[]}\n```\n\n----------------------------------------\n\nTITLE: Defining Object-Based Namespace in JavaScript\nDESCRIPTION: Demonstrates how to use the @namespace tag to document an object literal that creates a namespace. The example shows how child members are documented relative to the namespace.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-namespace.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * My namespace.\n * @namespace\n */\nvar MyNamespace = {\n    /** documented as MyNamespace.foo */\n    foo: function() {},\n    /** documented as MyNamespace.bar */\n    bar: 1\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Class/Subclass Relationships with @augments in JavaScript\nDESCRIPTION: This example demonstrates how to document a class/subclass relationship using the @augments tag. The Duck class inherits from the Animal class, gaining its 'alive' property while adding a unique 'speak' method.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-augments.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @constructor\n */\nfunction Animal() {\n    /** Is this animal alive? */\n    this.alive = true;\n}\n\n/**\n * @constructor\n * @augments Animal\n */\nfunction Duck() {}\nDuck.prototype = new Animal();\n\n/** What do ducks say? */\nDuck.prototype.speak = function() {\n    if (this.alive) {\n        alert('Quack!');\n    }\n};\n\nvar d = new Duck();\nd.speak(); // Quack!\nd.alive = false;\nd.speak(); // (nothing)\n```\n\n----------------------------------------\n\nTITLE: Defining Object with Specific Key-Value Types in JSDoc\nDESCRIPTION: Shows how to specify an object with string keys and number values using JSDoc's generic Object notation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n{Object.<string, number>}\n```\n\n----------------------------------------\n\nTITLE: Documenting Namespace with Special Characters in JavaScript\nDESCRIPTION: Illustrates how to document namespace members with unusual characters in their names. Shows the use of quoted names and proper escape sequences for special characters.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-namespace.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @namespace window */\n\n/**\n * Shorthand for the alert function.\n * Refer to it as {@link window.\"!\"} (note the double quotes).\n */\nwindow[\"!\"] = function(msg) { alert(msg); };\n```\n\n----------------------------------------\n\nTITLE: Documenting Object Literal Assigned to module.exports\nDESCRIPTION: Shows how to document an object literal with multiple methods assigned directly to module.exports, where JSDoc automatically sets the correct names.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Color mixer.\n * @module color/mixer\n */\n\nmodule.exports = {\n    /**\n     * Blend two colors together.\n     * @param {string} color1 - The first color, in hexadecimal format.\n     * @param {string} color2 - The second color, in hexadecimal format.\n     * @return {string} The blended color.\n     */\n    blend: function(color1, color2) {\n        // ...\n    },\n\n    /**\n     * Darken a color by the given percentage.\n     * @param {string} color - The color, in hexadecimal format.\n     * @param {number} percent - The percentage, ranging from 0 to 100.\n     * @return {string} The darkened color.\n     */\n    darken: function(color, percent) {\n        // ..\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Union Type with @typedef in JavaScript\nDESCRIPTION: This example demonstrates how to use the @typedef tag to create a union type called 'NumberLike' that can be either a number or a string containing a number. It then shows how to reference this custom type in a function parameter.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-typedef.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * A number, or a string containing a number.\n * @typedef {(number|string)} NumberLike\n */\n\n/**\n * Set the magic number.\n * @param {NumberLike} x - The magic number.\n */\nfunction setMagicNumber(x) {\n}\n```\n\n----------------------------------------\n\nTITLE: Basic @module Tag Usage in JavaScript\nDESCRIPTION: Example showing how the @module tag affects namepaths of variables within a module. It demonstrates a module-private (inner) variable and an exported static function.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-module.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @module myModule */\n\n/** will be module:myModule~foo */\nvar foo = 1;\n\n/** will be module:myModule.bar */\nvar bar = function() {};\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Constructor Class in JavaScript\nDESCRIPTION: This example demonstrates how to use the @class tag to mark a function as a constructor for creating Person instances. The function is documented as creating a new Person object and is intended to be called with the 'new' keyword.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-class.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Creates a new Person.\n * @class\n */\nfunction Person() {\n}\n\nvar p = new Person();\n```\n\n----------------------------------------\n\nTITLE: Documenting Complete Throws in JavaScript\nDESCRIPTION: Example showing how to document a function that throws an error using both the error type and a description.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-throws.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @throws {DivideByZero} Argument x must be non-zero.\n */\nfunction baz(x) {}\n```\n\n----------------------------------------\n\nTITLE: Multiple Inheritance with @augments Tag in JavaScript\nDESCRIPTION: This example shows multiple inheritance using the @augments tag where a Duck class inherits from both Flyable and Bird classes. When parent classes have identically named methods, JSDoc uses the documentation from the last listed parent.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-augments.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Abstract class for things that can fly.\n * @class\n */\nfunction Flyable() {\n    this.canFly = true;\n}\n\n/** Take off. */\nFlyable.prototype.takeOff = function() {\n    // ...\n};\n\n/**\n * Abstract class representing a bird.\n * @class\n */\nfunction Bird(canFly) {\n    this.canFly = canFly;\n}\n\n/** Spread your wings and fly, if possible. */\nBird.prototype.takeOff = function() {\n    if (this.canFly) {\n        this._spreadWings()\n            ._run()\n            ._flapWings();\n    }\n};\n\n/**\n * Class representing a duck.\n * @class\n * @augments Flyable\n * @augments Bird\n */\nfunction Duck() {}\n\n// Described in the docs as \"Spread your wings and fly, if possible.\"\nDuck.prototype.takeOff = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using @async Tag in JSDoc Virtual Comment for Asynchronous Function\nDESCRIPTION: This example demonstrates a virtual JSDoc comment that uses the @async tag to document an asynchronous function that downloads data from a URL. The comment includes parameter information and specifies that the function returns a Promise.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-async.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Download data from the specified URL.\n *\n * @async\n * @function downloadData\n * @param {string} url - The URL to download from.\n * @return {Promise<string>} The data from the URL.\n */\n```\n\n----------------------------------------\n\nTITLE: Documenting a Namespace with Nested Properties using @property in JavaScript\nDESCRIPTION: This example demonstrates how to document a namespace named 'config' with nested default properties using the @property tag. It shows how to keep all nested property documentation on the same page rather than splitting them across multiple pages.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-property.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @namespace\n * @property {object}  defaults               - The default values for parties.\n * @property {number}  defaults.players       - The default number of players.\n * @property {string}  defaults.level         - The default level for the party.\n * @property {object}  defaults.treasure      - The default treasure.\n * @property {number}  defaults.treasure.gold - How much gold the party starts with.\n */\nvar config = {\n    defaults: {\n        players: 1,\n        level:   'beginner',\n        treasure: {\n            gold: 0\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using @classdesc Tag with a JavaScript Class\nDESCRIPTION: This example demonstrates how to use the @classdesc tag alongside the @class tag to provide separate descriptions for the constructor function and the class itself. The @classdesc provides a description of the class in general, while the regular description applies to the constructor function.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-classdesc.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This is a description of the MyClass constructor function.\n * @class\n * @classdesc This is a description of the MyClass class.\n */\nfunction MyClass() {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Links with @link Tag in JSDoc Comments\nDESCRIPTION: Demonstrates various ways to create links using the @link tag, including linking to classes, properties, and external URLs with different text formatting options.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-inline-link.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * See {@link MyClass} and [MyClass's foo property]{@link MyClass#foo}.\n * Also, check out {@link http://www.google.com|Google} and\n * {@link https://github.com GitHub}.\n */\nfunction myFunction() {}\n```\n\n----------------------------------------\n\nTITLE: Documenting Instance Methods with @lends\nDESCRIPTION: Example showing how to document methods as instance members using @lends Person.prototype to associate them with the Person class instances.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-lends.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @class */\nvar Person = makeClass(\n    /** @lends Person.prototype */\n    {\n        /**\n         * Create a `Person` instance.\n         * @param {string} name - The person's name.\n         */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /**\n         * Say something.\n         * @param {string} message - The message to say.\n         * @returns {string} The complete message.\n         */\n        say: function(message) {\n            return this.name + \" says: \" + message;\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Documenting Required and Optional Properties with @property in JSDoc\nDESCRIPTION: This example shows how to create a type definition for a User object with both required and optional properties. The optional property is indicated by square brackets around its name.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-property.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * User type definition\n * @typedef {Object} User\n * @property {string} email\n * @property {string} [nickName]\n */\n```\n\n----------------------------------------\n\nTITLE: Documenting Generator Function with JSDoc\nDESCRIPTION: Example of using the @generator tag in a JSDoc virtual comment to document a Fibonacci sequence generator function. Shows how to properly document a generator function with its yields annotation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-generator.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Generate numbers in the Fibonacci sequence.\n *\n * @generator\n * @function fibonacci\n * @yields {number} The next number in the Fibonacci sequence.\n */\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc @see Tag in JavaScript\nDESCRIPTION: Demonstrates how to use the @see tag in JSDoc comments. It shows referencing other symbols with a namepath, using free-form text, and combining the @see tag with the inline {@link} tag to create links to functions or external resources.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-see.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Both of these will link to the bar function.\n * @see {@link bar}\n * @see bar\n */\nfunction foo() {}\n\n// Use the inline {@link} tag to include a link within a free-form description.\n/**\n * @see {@link foo} for further information.\n * @see {@link http://github.com|GitHub}\n */\nfunction bar() {}\n```\n\n----------------------------------------\n\nTITLE: Documenting Function Assigned to module.exports\nDESCRIPTION: Shows how to document a function that is directly assigned to module.exports, where JSDoc automatically sets the correct longname.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Color mixer.\n * @module color/mixer\n */\n\n/**\n * Blend two colors together.\n * @param {string} color1 - The first color, in hexadecimal format.\n * @param {string} color2 - The second color, in hexadecimal format.\n * @return {string} The blended color.\n */\nmodule.exports = function(color1, color2) {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting with CommonJS Module Pattern\nDESCRIPTION: Example of documenting a CommonJS module that exports a sayHello function using the exports object.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-exports.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A module that says hello!\n * @module hello/world\n */\n\n/** Say hello. */\nexports.sayHello = function() {\n    return 'Hello world';\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing the @override Tag in JavaScript Class Inheritance\nDESCRIPTION: Example showing how to use the @override tag to indicate that a method in a child class overrides a method in its parent class. The example defines a Connection class with an open method, then creates a Socket class that extends Connection and overrides the open method.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-override.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @classdesc Abstract class representing a network connection.\n * @class\n */\nfunction Connection() {}\n\n/**\n * Open the connection.\n */\nConnection.prototype.open = function() {\n    // ...\n};\n\n\n/**\n * @classdesc Class representing a socket connection.\n * @class\n * @augments Connection\n */\nfunction Socket() {}\n\n/**\n * Open the socket.\n * @override\n */\nSocket.prototype.open = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Nullable Types in JSDoc\nDESCRIPTION: Shows how to indicate that a value must be a number and cannot be null using the non-nullable type notation in JSDoc.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n{!number}\n```\n\n----------------------------------------\n\nTITLE: Marking a Variable as a Function in JSDoc\nDESCRIPTION: Example of using the @function tag to mark a variable as a function. Without this tag, the paginate object would be documented as a generic object (@member) since the parser can't determine its type from this line of code.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-function.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/** @function */\nvar paginate = paginateFactory(pages);\n```\n\n----------------------------------------\n\nTITLE: Documenting Module References with JSDoc\nDESCRIPTION: Demonstrates how to use the @module and @see tags to document a module and reference another module in JSDoc comments.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-es2015-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Pants module.\n * @module my/pants\n * @see module:my/shirt\n */\n```\n\n----------------------------------------\n\nTITLE: Generator Function Documentation with Basic @yields Tag\nDESCRIPTION: Example showing how to document a generator function using the @yields tag with a type specification.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-yields.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Generate the Fibonacci sequence of numbers.\n *\n * @yields {number}\n */\nfunction* fibonacci() {}\n```\n\n----------------------------------------\n\nTITLE: Using the @public tag in JavaScript with JSDoc\nDESCRIPTION: This example demonstrates how to use the @public tag in JSDoc to explicitly mark symbols as public. The example includes a Thingy class marked as public, with an inner member variable 'foo' also marked as public. Note that the @public tag doesn't change the scope relationship between the class and its members.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-public.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * The Thingy class is available to all.\n * @public\n * @class\n */\nfunction Thingy() {\n    /**\n     * The Thingy~foo member. Note that 'foo' is still an inner member\n     * of 'Thingy', in spite of the @public tag.\n     * @public\n     */\n    var foo = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Different Types of Methods in JavaScript with JSDoc\nDESCRIPTION: Demonstrates how to define and use instance, inner, and static methods all with the same name \"say\" but different scopes within a constructor function.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-namepaths.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @constructor */\nPerson = function() {\n    this.say = function() {\n        return \"I'm an instance.\";\n    }\n\n    function say() {\n        return \"I'm inner.\";\n    }\n}\nPerson.say = function() {\n    return \"I'm static.\";\n}\n\nvar p = new Person();\np.say();      // I'm an instance.\nPerson.say(); // I'm static.\n// there is no way to directly access the inner function from here\n```\n\n----------------------------------------\n\nTITLE: Generator Function Documentation with Detailed @yields Tag\nDESCRIPTION: Example demonstrating a generator function documentation using @yields tag with both type specification and description.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-yields.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Generate the Fibonacci sequence of numbers.\n *\n * @yields {number} The next number in the Fibonacci sequence.\n */\nfunction* fibonacci() {}\n```\n\n----------------------------------------\n\nTITLE: Using the @requires tag in JSDoc for JavaScript module dependencies\nDESCRIPTION: This example demonstrates how to use the @requires tag to document dependencies on JavaScript modules in a class definition. The example shows two different formats for specifying module requirements: using the 'module:' prefix and without it.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-requires.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This class requires the modules {@link module:xyzcorp/helper} and\n * {@link module:xyzcorp/helper.ShinyWidget#polish}.\n * @class\n * @requires module:xyzcorp/helper\n * @requires xyzcorp/helper.ShinyWidget#polish\n */\nfunction Widgetizer() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Union Types in JSDoc\nDESCRIPTION: Shows how to specify that a value can be one of multiple types (number or boolean) using a type union expression in JSDoc.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n{(number|boolean)}\n```\n\n----------------------------------------\n\nTITLE: Using the @interface Tag in JavaScript with JSDoc\nDESCRIPTION: This example demonstrates how to define a Color interface using the @interface tag with an actual function implementation. The interface includes a method that throws an error if not implemented by child classes.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-interface.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Interface for classes that represent a color.\n *\n * @interface\n */\nfunction Color() {}\n\n/**\n * Get the color as an array of red, green, and blue values, represented as\n * decimal numbers between 0 and 1.\n *\n * @returns {Array&lt;number>} An array containing the red, green, and blue values,\n * in that order.\n */\nColor.prototype.rgb = function() {\n    throw new Error('not implemented');\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Eventful Mixin in JavaScript with JSDoc Documentation\nDESCRIPTION: Demonstrates how to create and document a mixin object called 'Eventful' that provides event handling functionality. The mixin includes two methods: 'on' for registering event handlers and 'fire' for triggering events.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-mixin.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This provides methods used for event handling. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nvar Eventful = {\n    /**\n     * Register a handler function to be called whenever this event is fired.\n     * @param {string} eventName - Name of the event.\n     * @param {function(Object)} handler - The handler to call.\n     */\n    on: function(eventName, handler) {\n        // code...\n    },\n\n    /**\n     * Fire an event, causing all handlers for that event name to run.\n     * @param {string} eventName - Name of the event.\n     * @param {Object} eventData - The data provided to each handler.\n     */\n    fire: function(eventName, eventData) {\n        // code...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using @constructs Tag with @lends in JavaScript\nDESCRIPTION: This example demonstrates how to use the @constructs tag in conjunction with @lends when defining a class using an object literal. The initialize function is marked as the constructor for the Person class.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-constructs.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar Person = makeClass(\n    /** @lends Person.prototype */\n    {\n        /** @constructs */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /** Describe me. */\n        say: function(message) {\n            return this.name + \" says: \" + message;\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Documenting External jQuery Namespace and Plugin\nDESCRIPTION: This example demonstrates how to document the jQuery plugin namespace as an external symbol, and then document a custom plugin that's added to it. It includes a link to jQuery plugin documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-external.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * The jQuery plugin namespace.\n * @external \"jQuery.fn\"\n * @see {@link http://learn.jquery.com/plugins/|jQuery Plugins}\n */\n\n/**\n * A jQuery plugin to make stars fly around your home page.\n * @function external:\"jQuery.fn\".starfairy\n */\n```\n\n----------------------------------------\n\nTITLE: Documenting Methods Added to Built-in String Class Using @external\nDESCRIPTION: This example shows how to document the built-in String object as an external symbol and add a new rot13 method to it. It includes proper reference links to MDN documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-external.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * The built in string object.\n * @external String\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String|String}\n */\n\n/**\n * Create a ROT13-encoded version of the string. Added by the `foo` package.\n * @function external:String#rot13\n * @example\n * var greeting = new String('hello world');\n * console.log( greeting.rot13() ); // uryyb jbeyq\n */\n```\n\n----------------------------------------\n\nTITLE: Extending External XMLHttpRequest Class in JavaScript\nDESCRIPTION: This example shows how to document an extension of the built-in XMLHttpRequest class. It uses @external to document the base class and then extends it with a custom class using @extends.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-external.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n * The built-in class for sending HTTP requests.\n * @external XMLHttpRequest\n * @see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n */\n\n/**\n * Extends the built-in `XMLHttpRequest` class to send data encoded with a secret key.\n * @class EncodedRequest\n * @extends external:XMLHttpRequest\n */\n```\n\n----------------------------------------\n\nTITLE: Documenting Static Methods with @lends\nDESCRIPTION: Example showing how to document methods as static class members using the @lends tag to associate them with the Person class.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-lends.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @class */\nvar Person = makeClass(\n    /** @lends Person */\n    {\n        /**\n         * Create a `Person` instance.\n         * @param {string} name - The person's name.\n         */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /**\n         * Say something.\n         * @param {string} message - The message to say.\n         * @returns {string} The complete message.\n         */\n        say: function(message) {\n            return this.name + \" says: \" + message;\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Using @mixes Tag with a JavaScript Class\nDESCRIPTION: Demonstrates how to use the @mixes tag to indicate that a FormButton class incorporates functionality from the Eventful mixin. Shows the class definition and mixing in of event handling methods.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-mixes.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @constructor FormButton\n * @mixes Eventful\n */\nvar FormButton = function() {\n    // code...\n};\nFormButton.prototype.press = function() {\n  this.fire('press', {});\n}\nmix(Eventful).into(FormButton.prototype);\n```\n\n----------------------------------------\n\nTITLE: Documenting Constants with @constant Tag in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the @constant tag to document string and number constants in JavaScript. It shows the usage with both const and var declarations, and includes optional @type and @default tags.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-constant.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @constant\n    @type {string}\n    @default\n*/\nconst RED = 'FF0000';\n\n/** @constant {number} */\nvar ONE = 1;\n```\n\n----------------------------------------\n\nTITLE: Documenting a Method Assigned to Local Variable and Exports\nDESCRIPTION: Demonstrates how to document a function that's assigned to both a local variable and the exports object, where JSDoc doesn't automatically detect the export.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Shirt module.\n * @module my/shirt\n */\n\n/** Wash the shirt. */\nvar wash = exports.wash = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Type-Only Throws in JavaScript\nDESCRIPTION: Example showing how to document a function that throws an error using only the error type specification.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-throws.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @throws {InvalidArgumentException}\n */\nfunction foo(x) {}\n```\n\n----------------------------------------\n\nTITLE: Using @readonly Tag with Getters in JavaScript\nDESCRIPTION: Example demonstrating how to use the @readonly tag with a getter method in a namespace. The getter 'aLaMode' is marked as read-only, indicating it should not be assigned a value directly.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-readonly.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Options for ordering a delicious slice of pie.\n * @namespace\n */\nvar pieOptions = {\n\t/**\n\t * Plain.\n\t */\n\tplain: 'pie',\n\t/**\n\t * A la mode.\n\t * @readonly\n\t */\n\tget aLaMode() {\n\t\treturn this.plain + ' with ice cream';\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Using @file Tag for File Description in JavaScript\nDESCRIPTION: This example demonstrates how to use the @file tag in a JSDoc comment at the beginning of a file to provide a description and author information. The tag is used to describe the purpose of the file and include relevant metadata.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-file.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @file Manages the configuration settings for the widget.\n * @author Rowina Sanela <rsanela@example.com>\n */\n```\n\n----------------------------------------\n\nTITLE: Using @alias to Document Exported Local Variables\nDESCRIPTION: Shows how to use the @alias tag to properly document a function that's assigned to both a local variable and the exports object.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Shirt module.\n * @module my/shirt\n */\n\n/**\n * Wash the shirt.\n * @alias module:my/shirt.wash\n */\nvar wash = exports.wash = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Object Literal with AMD Module Pattern\nDESCRIPTION: Example of documenting an AMD module that exports an object literal with a sayHello method.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-exports.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function() {\n\n    /**\n     * A module that whispers hello!\n     * @module hello/world\n     */\n    var exports = {};\n\n    /** say hello. */\n    exports.sayHello = function() {\n        return 'hello world';\n    };\n\n    return exports;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Variadic Parameters in JSDoc\nDESCRIPTION: Shows how to document a function that accepts a variable number of parameters of a specific type using the rest parameter notation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n@param {...number} num\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @access Tag Usage in JavaScript Classes\nDESCRIPTION: Shows two equivalent ways to specify access levels for class members - using the @access tag and using direct access tags. Demonstrates private, protected, package, and public access levels.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-access.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @constructor */\nfunction Thingy() {\n\n    /** @access private */\n    var foo = 0;\n\n    /** @access protected */\n    this._bar = 1;\n\n    /** @access package */\n    this.baz = 2;\n\n    /** @access public */\n    this.pez = 3;\n\n}\n\n// same as...\n\n/** @constructor */\nfunction OtherThingy() {\n\n    /** @private */\n    var foo = 0;\n\n    /** @protected */\n    this._bar = 1;\n\n    /** @package */\n    this.baz = 2;\n\n    /** @public */\n    this.pez = 3;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using @static to Override Default Scope in JSDoc\nDESCRIPTION: This example shows how to use the @static tag to force a module's inner member to be documented as a static member. The 'wheel' variable is documented as Rollerskate.wheel rather than Rollerskate~wheel.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-static.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @module Rollerskate */\n\n/**\n * The 'wheel' variable is documented as Rollerskate.wheel\n * rather than Rollerskate~wheel.\n * @static\n */\nvar wheel = 1;\n```\n\n----------------------------------------\n\nTITLE: Using a Named Doclet to Document an Event in JavaScript with JSDoc\nDESCRIPTION: This example demonstrates how to document an event using a separate named doclet rather than inline documentation. The function references the event with @fires, while the event itself is documented separately with @event, @type, and @property tags.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-event.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Throw a snowball.\n *\n * @fires Hurl#snowball\n */\nHurl.prototype.snowball = function() {\n    // ...\n};\n\n/**\n * Snowball event.\n *\n * @event Hurl#snowball\n * @type {object}\n * @property {boolean} isPacked - Indicates whether the snowball is tightly packed.\n */\n```\n\n----------------------------------------\n\nTITLE: Documenting AMD Module with Constructor Return\nDESCRIPTION: Shows how to document an AMD module that returns a constructor function using @module and @alias tags.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-amd-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A module representing a jacket.\n * @module my/jacket\n */\ndefine('my/jacket', function() {\n    /**\n     * Create a new jacket.\n     * @class\n     * @alias module:my/jacket\n     */\n    var Jacket = function() {\n        // ...\n    };\n\n    /** Zip up the jacket. */\n    Jacket.prototype.zip = function() {\n        // ...\n    };\n\n    return Jacket;\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Constructor with AMD Module Pattern\nDESCRIPTION: Example of documenting an AMD module that exports a constructor function with prototype methods.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-exports.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function() {\n    /**\n     * A module that creates greeters.\n     * @module greeter\n     */\n\n    /**\n     * @constructor\n     * @param {string} subject - The subject to greet.\n     */\n    var exports = function(subject) {\n        this.subject = subject || 'world';\n    };\n\n    /** Say hello to the subject. */\n    exports.prototype.sayHello = function() {\n        return 'Hello ' + this.subject;\n    };\n\n    return exports;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Parameters with Default Values in JSDoc\nDESCRIPTION: Shows how to document an optional parameter with a default value in JSDoc using the square bracket notation with an equals sign.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n@param {number} [foo=1]\n```\n\n----------------------------------------\n\nTITLE: Documenting Properties Added After module.exports Assignment\nDESCRIPTION: Demonstrates how to document an object literal assigned to module.exports with additional properties defined afterwards.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Color mixer.\n * @module color/mixer\n */\n\nmodule.exports = {\n    /**\n     * Blend two colors together.\n     * @param {string} color1 - The first color, in hexadecimal format.\n     * @param {string} color2 - The second color, in hexadecimal format.\n     * @return {string} The blended color.\n     */\n    blend: function(color1, color2) {\n        // ...\n    }\n};\n\n/**\n * Darken a color by the given percentage.\n * @param {string} color - The color, in hexadecimal format.\n * @param {number} percent - The percentage, ranging from 0 to 100.\n * @return {string} The darkened color.\n */\nmodule.exports.darken = function(color, percent) {\n    // ..\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Description-Only Throws in JavaScript\nDESCRIPTION: Example showing how to document a function that throws an error using only a description without specifying the error type.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-throws.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @throws Will throw an error if the argument is null.\n */\nfunction bar(x) {}\n```\n\n----------------------------------------\n\nTITLE: Using @memberof! for JavaScript Object Properties\nDESCRIPTION: Demonstrates the use of the forced @memberof! tag to document properties of an object that is an instance member of a class. It shows how to make object properties linkable using @alias and @memberof!.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-memberof.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @class */\nfunction Data() {\n    /**\n     * @type {object}\n     * @property {number} y This will show up as a property of `Data#point`,\n     * but you cannot link to the property as {@link Data#point.y}.\n     */\n    this.point = {\n        /**\n         * The @alias and @memberof! tags force JSDoc to document the\n         * property as `point.x` (rather than `x`) and to be a member of\n         * `Data#`. You can link to the property as {@link Data#point.x}.\n         * @alias point.x\n         * @memberof! Data#\n         */\n        x: 0,\n        y: 1\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Using the @protected Tag in JavaScript with JSDoc\nDESCRIPTION: This example demonstrates how to use the @protected tag to mark an instance member as protected. The _bar property is annotated as protected, which will be reflected in the generated documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-protected.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @constructor */\nfunction Thingy() {\n    /** @protected */\n    this._bar = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nullable Types in JSDoc\nDESCRIPTION: Shows how to indicate that a value can be either a number or null using the nullable type notation in JSDoc.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-type.md#2025-04-20_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n{?number}\n```\n\n----------------------------------------\n\nTITLE: Namepath Syntax for Different Method Types in JSDoc\nDESCRIPTION: Shows the specific namepath syntax used to reference instance methods, static methods, and inner methods in JSDoc documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-namepaths.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPerson#say  // the instance method named \"say.\"\nPerson.say  // the static method named \"say.\"\nPerson~say  // the inner method named \"say.\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Method Events with JSDoc @fires Tag in JavaScript\nDESCRIPTION: This example demonstrates how to use the JSDoc @fires tag to document a method that triggers an event. The code shows a 'drink' method for a Milkshake prototype that fires a 'drain' event when called, illustrating proper event documentation syntax.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-fires.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Drink the milkshake.\n *\n * @fires Milkshake#drain\n */\nMilkshake.prototype.drink = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Primitive Value Assigned to module.exports\nDESCRIPTION: Shows how to document a primitive value (string, number, boolean) assigned to module.exports using the @type tag.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Module representing the word of the day.\n * @module wotd\n * @type {string}\n */\n\nmodule.exports = 'perniciousness';\n```\n\n----------------------------------------\n\nTITLE: Using @variation Tag to Distinguish Class and Namespace in JavaScript\nDESCRIPTION: This example demonstrates how to use the @variation tag to differentiate between a Widget class and a Widget namespace. It shows the syntax for both the namespace and the class, including how to reference the variation in JSDoc comments.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-variation.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * The Widget namespace.\n * @namespace Widget\n */\n\n// you can also use '@class Widget(2)' and omit the @variation tag\n/**\n * The Widget class. Defaults to the properties in {@link Widget.properties}.\n * @class\n * @variation 2\n * @param {Object} props - Name-value pairs to add to the widget.\n */\nfunction Widget(props) {}\n\n/**\n * Properties added by default to a new {@link Widget(2)} instance.\n */\nWidget.properties = {\n    /**\n     * Indicates whether the widget is shiny.\n     */\n    shiny: true,\n    /**\n     * Indicates whether the widget is metallic.\n     */\n    metallic: true\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Exported Module Members with 'module.exports' in JavaScript\nDESCRIPTION: Example demonstrating how to define and document exported symbols as members of 'module.exports' or 'exports'. This shows how both methods result in documented static members of the module.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-module.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/** @module color/mixer */\nmodule.exports = {\n    /** Blend two colours together. */\n    blend: function (color1, color2) {}\n};\n/** Darkens a color. */\nexports.darken = function (color, shade) {};\n```\n\n----------------------------------------\n\nTITLE: Documenting a Function Call as an Event in JavaScript with JSDoc\nDESCRIPTION: This example shows how to document a function that fires an event using JSDoc. The 'snowball' function emits an event of the same name, which is documented with the @event tag. The event object contains a property indicating whether the snowball is tightly packed.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-event.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Throw a snowball.\n *\n * @fires Hurl#snowball\n */\nHurl.prototype.snowball = function() {\n    /**\n     * Snowball event.\n     *\n     * @event Hurl#snowball\n     * @type {object}\n     * @property {boolean} isPacked - Indicates whether the snowball is tightly packed.\n     */\n    this.emit('snowball', {\n        isPacked: this._snowball.isPacked\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Using @since Tag in JSDoc Comments\nDESCRIPTION: Demonstrates how to add version information to a function using the @since JSDoc tag. The tag accepts a version descriptor to indicate when the documented element was first introduced.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-since.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Provides access to user information.\n * @since 1.0.1\n */\nfunction UserRecord() {}\n```\n\n----------------------------------------\n\nTITLE: Using @function Tag with a Name in JSDoc\nDESCRIPTION: Example showing how to use the @function tag with a name parameter. The first example is shorthand, while the second shows the equivalent using separate @function and @name tags.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-function.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @function myFunction */\n\n// the above is the same as:\n/** @function\n * @name myFunction */\n```\n\n----------------------------------------\n\nTITLE: Using @kind Tag with Constants in JavaScript\nDESCRIPTION: This example demonstrates two equivalent ways to document a constant in JSDoc - either using the explicit @kind constant tag or the shorthand @constant tag. Both approaches produce the same documentation result.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-kind.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// The following examples produce the same result:\n\n/**\n * A constant.\n * @kind constant\n */\nconst asdf = 1;\n\n/**\n * A constant.\n * @constant\n */\nconst asdf = 1;\n```\n\n----------------------------------------\n\nTITLE: Using @constructs Tag without @lends in JavaScript\nDESCRIPTION: This example shows how to use the @constructs tag when defining a class without @lends. In this case, the name of the class (Menu) must be provided explicitly in the @constructs tag.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-constructs.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmakeClass('Menu',\n    /**\n     * @constructs Menu\n     * @param items\n     */\n    function (items) { },\n    {\n        /** @memberof Menu# */\n        show: function(){\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Using @exports Tag for Local Variables Assigned to module.exports\nDESCRIPTION: Demonstrates using the @exports tag instead of @module when a module's export is assigned to both a local variable and module.exports.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Color mixer.\n * @exports color/mixer\n */\nvar mixer = module.exports = {\n    /**\n     * Blend two colors together.\n     * @param {string} color1 - The first color, in hexadecimal format.\n     * @param {string} color2 - The second color, in hexadecimal format.\n     * @return {string} The blended color.\n     */\n    blend: function(color1, color2) {\n        // ...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using @private Tag in JavaScript Namespace\nDESCRIPTION: Demonstrates how to use the @private tag to mark specific members within a namespace as private. The example shows a Documents namespace with both public and private members, where Newspaper is public and Diary is marked as private.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-private.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @namespace */\nvar Documents = {\n    /**\n     * An ordinary newspaper.\n     */\n    Newspaper: 1,\n    /**\n     * My diary.\n     * @private\n     */\n    Diary: 2\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Markdown Plugin in JSDoc Configuration (JSON)\nDESCRIPTION: This snippet shows how to enable the Markdown plugin in the JSDoc configuration file. It adds the 'plugins/markdown' string to the plugins array.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/plugins-markdown.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"plugins\": [\"plugins/markdown\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tutorial Tags in JSDoc Comments\nDESCRIPTION: Demonstrates different ways to create links to tutorials using the @tutorial tag, including various methods of specifying link text. The function shows how to reference multiple tutorials with different syntax formats.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-inline-tutorial.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * See {@tutorial gettingstarted} and [Configuring the Dashboard]{@tutorial dashboard}.\n * For more information, see {@tutorial create|Creating a Widget} and\n * {@tutorial destroy Destroying a Widget}.\n */\nfunction myFunction() {}\n```\n\n----------------------------------------\n\nTITLE: Basic Class Implementation without JSDoc\nDESCRIPTION: Example showing the basic structure of a class created using a makeClass helper function without any JSDoc documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-lends.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar Person = makeClass(\n    {\n        initialize: function(name) {\n            this.name = name;\n        },\n        say: function(message) {\n            return this.name + \" says: \" + message;\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Exported Module Members with 'this' in JavaScript\nDESCRIPTION: Example showing how to define and document exported symbols as members of 'this' within a module. This demonstrates documenting a class as a static member of the module.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-module.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/** @module bookshelf */\n/** @class */\nthis.Book = function (title) {\n    /** The title. */\n    this.title = title;\n};\n```\n\n----------------------------------------\n\nTITLE: Using @readonly Tag with Constants in JavaScript\nDESCRIPTION: Example showing how to apply the @readonly tag to a constant value. The tag indicates that FOO is intended to be read-only, along with @const to specify it's a constant number.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-readonly.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A constant.\n * @readonly\n * @const {number}\n */\nconst FOO = 1;\n```\n\n----------------------------------------\n\nTITLE: Comparing @alias and @lends for Object Literals in JavaScript\nDESCRIPTION: This example compares the use of @alias and @lends tags for documenting object literals. It demonstrates how both approaches can be used to achieve similar documentation results.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-alias.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Documenting objectA with @alias\n\nvar objectA = (function() {\n\n    /**\n     * Documented as objectA\n     * @alias objectA\n     * @namespace\n     */\n    var x = {\n        /**\n         * Documented as objectA.myProperty\n         * @member\n         */\n        myProperty: 'foo'\n    };\n\n    return x;\n})();\n\n// Documenting objectB with @lends\n\n/**\n * Documented as objectB\n * @namespace\n */\nvar objectB = (function() {\n\n    /** @lends objectB */\n    var x = {\n        /**\n         * Documented as objectB.myProperty\n         * @member\n         */\n        myProperty: 'bar'\n    };\n\n    return x;\n})();\n```\n\n----------------------------------------\n\nTITLE: Using @inner to make a virtual doclet an inner member in JSDoc\nDESCRIPTION: This example demonstrates how to use the @inner tag with @memberof to make a virtual function an inner member of a namespace. The function becomes accessible as 'MyNamespace~myFunction' rather than 'MyNamespace.myFunction'.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-inner.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/** @namespace MyNamespace */\n/**\n * myFunction is now MyNamespace~myFunction.\n * @function myFunction\n * @memberof MyNamespace\n * @inner\n */\n```\n\n----------------------------------------\n\nTITLE: Documenting an Event and its Listener in JavaScript with JSDoc\nDESCRIPTION: This example demonstrates how to document an event named 'module:hurler~event:snowball' and a method 'module:playground/monitor.reportThrowage' that listens for this event using JSDoc comments. It shows the usage of @event, @fires, and @listens tags.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-listens.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndefine('hurler', [], function () {\n    /**\n     * Event reporting that a snowball has been hurled.\n     *\n     * @event module:hurler~snowball\n     * @property {number} velocity - The snowball's velocity, in meters per second.\n     */\n\n    /**\n     * Snowball-hurling module.\n     *\n     * @module hurler\n     */\n    var exports = {\n        /**\n         * Attack an innocent (or guilty) person with a snowball.\n         *\n         * @method\n         * @fires module:hurler~snowball\n         */\n        attack: function () {\n            this.emit('snowball', { velocity: 10 });\n        }\n    };\n\n    return exports;\n});\n\ndefine('playground/monitor', [], function () {\n    /**\n     * Keeps an eye out for snowball-throwers.\n     *\n     * @module playground/monitor\n     */\n    var exports = {\n        /**\n         * Report the throwing of a snowball.\n         *\n         * @method\n         * @param {module:hurler~event:snowball} e - A snowball event.\n         * @listens module:hurler~event:snowball\n         */\n        reportThrowage: function (e) {\n            this.log('snowball thrown: velocity ' + e.velocity);\n        }\n    };\n\n    return exports;\n});\n```\n\n----------------------------------------\n\nTITLE: Using @instance to override inferred scope in JSDoc\nDESCRIPTION: This example shows how to use the @instance tag to override JSDoc's automatically inferred scope. It marks a property of an object literal as an instance member rather than a static member, making it 'BaseObject#foo' instead of 'BaseObject.foo'.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-instance.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @namespace */\nvar BaseObject = {\n    /**\n     * foo is now BaseObject#foo rather than BaseObject.foo.\n     * @instance\n     */\n    foo: null\n};\n\n/** Generates BaseObject instances. */\nfunction fooFactory(fooValue) {\n\tvar props = { foo: fooValue };\n\treturn Object.create(BaseObject, props);\n}\n```\n\n----------------------------------------\n\nTITLE: Using @inner with a namespace object in JSDoc\nDESCRIPTION: This example shows how to use the @inner tag to force a property of a namespace object to be documented as an inner member rather than a static member. The property 'foo' becomes accessible as 'MyNamespace~foo' instead of 'MyNamespace.foo'.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-inner.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @namespace */\nvar MyNamespace = {\n    /**\n     * foo is now MyNamespace~foo rather than MyNamespace.foo.\n     * @inner\n     */\n    foo: 1\n};\n```\n\n----------------------------------------\n\nTITLE: Using @alias with Anonymous Constructor Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the @alias tag with an anonymous constructor function in a class framework. It treats the function as the constructor for 'trackr.CookieManager'.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-alias.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nKlass('trackr.CookieManager',\n\n    /**\n     * @class\n     * @alias trackr.CookieManager\n     * @param {Object} kv\n     */\n    function(kv) {\n        /** The value. */\n        this.value = kv;\n    }\n\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to JSDoc Configuration File in JSON\nDESCRIPTION: This snippet shows how to include a plugin in JSDoc's configuration file. The example demonstrates adding a plugin located at 'plugins/shout' to the plugins array.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-plugins.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"plugins\": [\"plugins/shout\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting an Inner Variable as Global in JavaScript using JSDoc\nDESCRIPTION: This snippet demonstrates how to use the @global tag to specify that a locally defined variable should be documented as a global symbol. The code defines a variable inside an IIFE and assigns it to a property of the window object.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-global.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n    /** @global */\n    var foo = 'hello foo';\n\n    this.foo = foo;\n}).apply(window);\n```\n\n----------------------------------------\n\nTITLE: Chaining Namepaths for Nested Constructors in JSDoc\nDESCRIPTION: Demonstrates how to define nested constructors and chain namepaths together to form longer paths that reference deeply nested members.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-namepaths.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/** @constructor */\nPerson = function() {\n    /** @constructor */\n    this.Idea = function() {\n        this.consider = function(){\n            return \"hmmm\";\n        }\n    }\n}\n\nvar p = new Person();\nvar i = new p.Idea();\ni.consider();\n```\n\n----------------------------------------\n\nTITLE: Using @member with Data#point in JavaScript\nDESCRIPTION: This example demonstrates how to use the @member tag to document an object property 'point' within a class. The @member tag identifies 'point' as an Object member of the Data class.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-member.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/** @class */\nfunction Data() {\n    /** @member {Object} */\n    this.point = {};\n}\n```\n\n----------------------------------------\n\nTITLE: Applying @alias for Static Namespace Members in JavaScript\nDESCRIPTION: This snippet shows how to use the @alias tag with members created within an immediately invoked function expression (IIFE), exposing them outside the IIFE's scope.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-alias.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @namespace */\nvar Apple = {};\n\n(function(ns) {\n    /**\n     * @namespace\n     * @alias Apple.Core\n     */\n    var core = {};\n\n    /** Documented as Apple.Core.seed */\n    core.seed = function() {};\n\n    ns.Core = core;\n})(Apple);\n```\n\n----------------------------------------\n\nTITLE: Documenting Nested External Symbols in JavaScript\nDESCRIPTION: This example demonstrates how to document nested external symbols properly. The @external tag is applied only to the highest-level symbol (security namespace), while nested classes are documented using @memberof.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-external.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/**\n * External namespace for security-related classes.\n * @external security\n * @see http://example.org/docs/security\n */\n\n/**\n * External class that provides Transport Layer Security (TLS) encryption.\n * @class TLS\n * @memberof external:security\n */\n```\n\n----------------------------------------\n\nTITLE: Using @memberof Tag with JavaScript Namespace\nDESCRIPTION: Demonstrates how to use the @memberof tag to document a global function as a member of a namespace. The hammer function is assigned to the Tools namespace.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-memberof.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @namespace */\nvar Tools = {};\n\n/** @memberof Tools */\nvar hammer = function() {\n};\n\nTools.hammer = hammer;\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Mixin with JSDoc\nDESCRIPTION: Shows how to define a mixin object called Eventful that provides event handling methods. The mixin is documented using the @mixin tag and includes methods for event registration and firing.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-mixes.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This provides methods used for event handling. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nvar Eventful = {\n    /**\n     * Register a handler function to be called whenever this event is fired.\n     * @param {string} eventName - Name of the event.\n     * @param {function(Object)} handler - The handler to call.\n     */\n    on: function(eventName, handler) {\n        // code...\n    },\n\n    /**\n     * Fire an event, causing all handlers for that event name to run.\n     * @param {string} eventName - Name of the event.\n     * @param {Object} eventData - The data provided to each handler.\n     */\n    fire: function(eventName, eventData) {\n        // code...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Conflicting @kind Tags in JavaScript Documentation\nDESCRIPTION: This example shows how JSDoc handles conflicting kind declarations. When multiple tags imply different kinds, the last tag in the documentation block takes precedence and determines the final kind of the symbol.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-kind.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * This will show up as a constant\n * @module myModule\n * @kind constant\n */\n\n/**\n * This will show up as a module.\n * @kind constant\n * @module myModule\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring JSDoc Tags and Tag Dictionaries in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure JSDoc tags and tag dictionaries in a JSON configuration file. It shows how to set the 'allowUnknownTags' option and specify which tag dictionaries to use.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-configuring-jsdoc.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"tags\": {\n        \"allowUnknownTags\": true,\n        \"dictionaries\": [\"jsdoc\",\"closure\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Namespace Documentation in JavaScript\nDESCRIPTION: Shows how to create virtual JSDoc comments to define a namespace and its members without an actual object implementation. Uses @namespace and @memberof tags to establish relationships.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-namespace.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A namespace.\n * @namespace MyNamespace\n */\n\n/**\n * A function in MyNamespace (MyNamespace.myFunction).\n * @function myFunction\n * @memberof MyNamespace\n */\n```\n\n----------------------------------------\n\nTITLE: Documenting AMD Module with Object Literal Return\nDESCRIPTION: Demonstrates documenting an AMD module that returns an object literal with properties and a constructor function using @exports tag.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-amd-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndefine('my/shirt', function() {\n   /**\n    * A module representing a shirt.\n    * @exports my/shirt\n    */\n    var shirt = {\n        /** The module's `color` property. */\n        color: 'black',\n\n        /**\n         * Create a new Turtleneck.\n         * @class\n         * @param {string} size - The size (`XS`, `S`, `M`, `L`, `XL`, or `XXL`).\n         */\n        Turtleneck: function(size) {\n            /** The class's `size` property. */\n            this.size = size;\n        }\n    };\n\n    return shirt;\n});\n```\n\n----------------------------------------\n\nTITLE: Using @summary Tag in JSDoc Comment Block\nDESCRIPTION: Demonstrates how to use the @summary tag to provide a concise summary of a function while maintaining a longer, more detailed description. The @summary tag helps create more readable documentation by offering a brief overview.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-summary.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A very long, verbose, wordy, long-winded, tedious, verbacious, tautological,\n * profuse, expansive, enthusiastic, redundant, flowery, eloquent, articulate,\n * loquacious, garrulous, chatty, extended, babbling description.\n * @summary A concise summary.\n */\nfunction bloviate() {}\n```\n\n----------------------------------------\n\nTITLE: Using @hideconstructor with ES2015 class in JavaScript\nDESCRIPTION: Example of using the @hideconstructor tag with an ES2015 class to create a WaffleIron singleton. The constructor documentation is hidden while maintaining the getInstance method and cook method documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-hideconstructor.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Waffle iron singleton.\n */\nclass WaffleIron {\n    #instance = null;\n\n    /**\n     * Create the waffle iron.\n     *\n     * @hideconstructor\n     */\n    constructor() {\n        if (#instance) {\n            return #instance;\n        }\n\n        /**\n         * Cook a waffle.\n         *\n         * @param {Batter} batter - The waffle batter.\n         * @return {Waffle} The cooked waffle.\n         */\n        this.cook = function(batter) {};\n\n        this.#instance = this;\n    }\n\n    /**\n     * Get the WaffleIron instance.\n     *\n     * @return {WaffleIron} The WaffleIron instance.\n     */\n    getInstance() {\n        return new WaffleIron();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Tutorial Links\nDESCRIPTION: Shows the generated HTML output for tutorial links, demonstrating how the @tutorial tags are transformed into HTML anchor tags with appropriate href attributes and link text.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-inline-tutorial.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nSee &lt;a href=\"tutorial-gettingstarted.html\">Getting Started&lt;/a> and\n&lt;a href=\"tutorial-dashboard.html\">Configuring the Dashboard&lt;/a>.\nFor more information, see &lt;a href=\"tutorial-create.html\">Creating a Widget&lt;/a> and\n&lt;a href=\"tutorial-destroy.html\">Destroying a Widget&lt;/a>.\n```\n\n----------------------------------------\n\nTITLE: Documenting Methods Added to Exports Object in CommonJS\nDESCRIPTION: Shows how to document methods that are directly assigned to the exports object in a CommonJS module, which JSDoc automatically detects as exported symbols.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Shirt module.\n * @module my/shirt\n */\n\n/** Button the shirt. */\nexports.button = function() {\n    // ...\n};\n\n/** Unbutton the shirt. */\nexports.unbutton = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting AMD Module with Function Parameter\nDESCRIPTION: Shows how to document an AMD module when the module object is passed as a function parameter using @exports tag.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-amd-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndefine('my/jacket', function(\n    /**\n     * Utility functions for jackets.\n     * @exports my/jacket\n     */\n    module) {\n\n    /**\n     * Zip up a jacket.\n     * @param {Jacket} jacket - The jacket to zip up.\n     */\n    module.zip = function(jacket) {\n        // ...\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Configuration for JSDoc Markdown Plugin\nDESCRIPTION: Simple JSON configuration file that enables JSDoc's Markdown plugin for converting Markdown text to HTML.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-configuring-jsdoc.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"plugins\": [\"plugins/markdown\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc @todo Tag in JavaScript\nDESCRIPTION: Example showing how to use multiple @todo tags in a JSDoc comment block to document pending tasks for a function. Each @todo tag describes a separate task that needs to be completed.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-todo.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @todo Write the documentation.\n * @todo Implement this function.\n */\nfunction foo() {\n    // write me\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Tags from Markdown Processing (JSON)\nDESCRIPTION: This configuration example shows how to exclude specific tags (in this case, 'author') from Markdown processing. It uses the markdown.excludeTags array in the JSDoc configuration file.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/plugins-markdown.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"plugins\": [\"plugins/markdown\"],\n    \"markdown\": {\n        \"excludeTags\": [\"author\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Properties Added to 'this' in a Module\nDESCRIPTION: Shows how JSDoc automatically recognizes properties added to a module's 'this' object as exported by the module.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Module for bookshelf-related utilities.\n * @module bookshelf\n */\n\n/**\n * Create a new Book.\n * @class\n * @param {string} title - The title of the book.\n */\nthis.Book = function(title) {\n    /** The title of the book. */\n    this.title = title;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting AMD Module with Return Statement\nDESCRIPTION: Illustrates documenting an AMD module where the module object is declared in the return statement using @module and @alias tags.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-amd-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Module representing a shirt.\n * @module my/shirt\n */\n\ndefine('my/shirt', function() {\n    // Do setup work here.\n\n    return /** @alias module:my/shirt */ {\n        /** Color. */\n        color: 'black',\n        /** Size. */\n        size: 'unisize'\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Using the @version tag in JavaScript with JSDoc\nDESCRIPTION: This example demonstrates how to apply the @version tag in a JSDoc comment to document the version number of a function. The code shows a simple solver function with version 1.2.3 that solves linear equations.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-version.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Solves equations of the form a * x = b. Returns the value\n * of x.\n * @version 1.2.3\n * @tutorial solver\n */\nfunction solver(a, b) {\n    return b / a;\n}\n```\n\n----------------------------------------\n\nTITLE: Using -R/--readme Option in JSDoc Command\nDESCRIPTION: This command shows how to use the -R/--readme option to specify a README file when running JSDoc. This option takes precedence over README.md files in source paths and allows using any file name and extension, as long as it's in Markdown format.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-including-readme.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njsdoc --readme path/to/readme/README path/to/js\n```\n\n----------------------------------------\n\nTITLE: Marking a Function as Deprecated in JavaScript using JSDoc\nDESCRIPTION: This example demonstrates how to use the @deprecated tag in a JSDoc comment to indicate that a function has been deprecated since version 2.0. The tag is used by itself with additional text describing the deprecation details.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-deprecated.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @deprecated since version 2.0\n */\nfunction old() {\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Constructor Function Assigned to module.exports\nDESCRIPTION: Demonstrates how to document a constructor function assigned to module.exports, following the same pattern as regular functions.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Color mixer.\n * @module color/mixer\n */\n\n/** Create a color mixer. */\nmodule.exports = function ColorMixer() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Including README File in JSDoc Source Paths\nDESCRIPTION: This command demonstrates how to include a README.md file in the source paths when running JSDoc. JSDoc will use the first README.md file it finds in the specified paths.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-including-readme.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njsdoc path/to/js path/to/readme/README.md\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc @name Tag for Runtime-Generated Function\nDESCRIPTION: Demonstrates how to document a function that's generated at runtime using eval(). The @name tag forces JSDoc to document the function with specific parameters regardless of how it's created.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-name.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @name highlightSearchTerm\n * @function\n * @global\n * @param {string} term - The search term to highlight.\n */\neval(\"window.highlightSearchTerm = function(term) {};\")\n```\n\n----------------------------------------\n\nTITLE: Using @ignore Tag with Namespace and Child Class\nDESCRIPTION: Example demonstrating how to use the @ignore tag with a namespace containing a child class. Both the Clothes namespace and Clothes.Jacket class must be tagged with @ignore to be completely excluded from documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-ignore.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @namespace\n * @ignore\n */\nvar Clothes = {\n    /**\n     * @class\n     * @ignore\n     */\n    Jacket: function() {\n        /** The jacket's color. */\n        this.color = null;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Default Number Value of a Constant in JavaScript\nDESCRIPTION: This example demonstrates how to use the @default tag to automatically document the value of a constant. The @default tag is used without a value, allowing JSDoc to automatically capture the assigned value from the code.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-default.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n *  @constant\n *  @default\n */\nconst RED = 0xff0000;\n```\n\n----------------------------------------\n\nTITLE: JSDoc Example with Caption\nDESCRIPTION: Demonstrates how to add a caption to an example using the <caption> tag within JSDoc comments. Shows documentation for the same equation-solving method with a descriptive caption.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-example.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Solves equations of the form a * x = b\n * @example &lt;caption>Example usage of method1.&lt;/caption>\n * // returns 2\n * globalNS.method1(5, 10);\n * @returns {Number} Returns the value of x for the equation.\n */\nglobalNS.method1 = function (a, b) {\n    return b / a;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing JSDoc @borrows Tag in JavaScript\nDESCRIPTION: Example showing how to use the @borrows tag to duplicate documentation from a 'trstr' function to 'util.trim'. The tag allows referencing the same documentation in multiple places without duplication.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-borrows.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @namespace\n * @borrows trstr as trim\n */\nvar util = {\n    trim: trstr\n};\n\n/**\n * Remove whitespace from around a string.\n * @param {string} str\n */\nfunction trstr(str) {\n}\n```\n\n----------------------------------------\n\nTITLE: Including Complete MIT License in a Standalone JSDoc Comment\nDESCRIPTION: This example shows how to include the full text of the MIT license in a standalone JSDoc comment with the @license tag. This approach ensures the license text is preserved in generated JavaScript files when using tools like Google's Closure Compiler.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-license.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @license\n * Copyright (c) 2015 Example Corporation Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n```\n\n----------------------------------------\n\nTITLE: Documenting JavaScript Function Without @description Tag\nDESCRIPTION: Example showing how to document a function by providing a description at the beginning of the JSDoc comment without using the @description tag explicitly. The example demonstrates documenting a simple addition function.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-description.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Add two numbers.\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction add(a, b) {\n    return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting JavaScript Function With @description Tag\nDESCRIPTION: Example showing how to document a function using the explicit @description tag. This demonstrates that the description can be placed anywhere within the JSDoc comment when using the tag.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-description.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n * @description Add two numbers.\n */\nfunction add(a, b) {\n    return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Block and Inline Tags in JSDoc\nDESCRIPTION: Shows how to use block tags (@param) and inline tags ({@link}) together in a JSDoc comment. The example demonstrates documenting a method that sets a shoe's color with a reference to another method.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-block-inline-tags.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Set the shoe's color. Use {@link Shoe#setSize} to set the shoe size.\n *\n * @param {string} color - The shoe's color.\n */\nShoe.prototype.setColor = function(color) {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with Configuration File and Output Directory\nDESCRIPTION: Example showing how to run JSDoc with a configuration file, recursively process the src directory, and output documentation to a specific folder.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-commandline.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/jsdoc src -r -c /path/to/my/conf.json -d docs\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Derived Module Names in JSDoc\nDESCRIPTION: Example showing how module names are derived from file paths when not explicitly provided in the @module tag. This demonstrates the naming convention used when running JSDoc from different directories.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-module.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# from src/\njsdoc ./test.js   # module name 'test'\n\n# from src's parent directory:\njsdoc src/test.js # module name 'src/test'\njsdoc -r src/     # module name 'test'\n```\n\n----------------------------------------\n\nTITLE: Documenting the author of an item using JSDoc @author tag in JavaScript\nDESCRIPTION: This example shows how to use the @author tag to identify the author of a class, including their name and email address. When an email address is included in angle brackets, JSDoc 3.2+ will convert it to a mailto link in the generated documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-author.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @author Jane Smith &lt;jsmith@example.com>\n */\nfunction MyClass() {}\n```\n\n----------------------------------------\n\nTITLE: Error Reporting in JSDoc Plugins\nDESCRIPTION: Demonstrates proper error reporting in JSDoc plugins using the logger utility. Shows how to report non-fatal errors while allowing processing to continue.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-plugins.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar logger = require('jsdoc/util/logger');\n\nexports.handlers = {\n    newDoclet: function(e) {\n        // Your code here.\n\n        if (somethingBadHappened) {\n            logger.error('Oh, no, something bad happened!');\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using @static Tag in Virtual JSDoc Comment\nDESCRIPTION: This example demonstrates using the @static tag in a virtual comment to indicate that myFunction is a static member of MyNamespace. This approach is equivalent to writing '@function MyNamespace.myFunction' without using @memberof and @static tags.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-static.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/** @namespace MyNamespace */\n\n/**\n * @function myFunction\n * @memberof MyNamespace\n * @static\n */\n```\n\n----------------------------------------\n\nTITLE: Using @hideconstructor with pre-ES2015 class in JavaScript\nDESCRIPTION: Example of using the @hideconstructor tag with a pre-ES2015 class to create a Toaster singleton. The constructor is hidden from documentation while exposing getInstance method and instance methods.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-hideconstructor.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @classdesc Toaster singleton.\n * @class\n * @hideconstructor\n */\nvar Toaster = (function() {\n    var instance = null;\n\n    function Toaster() {}\n\n    /**\n     * Toast an item.\n     *\n     * @alias toast\n     * @memberof Toaster\n     * @instance\n     * @param {BreadyThing} item - The item to toast.\n     * @return {Toast} A toasted bready thing.\n     */\n    Toaster.prototype.toast = function(item) {};\n\n    return {\n        /**\n         * Get the Toaster instance.\n         *\n         * @alias Toaster.getInstance\n         * @returns {Toaster} The Toaster instance.\n         */\n        getInstance: function() {\n            if (instance === null) {\n                instance = new Toaster();\n                delete instance.constructor;\n            }\n\n            return instance;\n        }\n    };\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Synonyms in JSDoc\nDESCRIPTION: Shows how to create a synonym for a tag using the synonym method on the Tag object returned by defineTag.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-plugins.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndictionary.defineTag('exception', { /* options for exception tag */ })\n    .synonym('throws');\n```\n\n----------------------------------------\n\nTITLE: Using @instance to make a virtual doclet an instance member in JSDoc\nDESCRIPTION: This example demonstrates a longhand way to establish a function as an instance member of a namespace. By using @function, @memberof, and @instance together, 'myFunction' becomes 'MyNamespace#myFunction'.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-instance.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/** @namespace MyNamespace */\n/**\n * myFunction is now MyNamespace#myFunction.\n * @function myFunction\n * @memberof MyNamespace\n * @instance\n */\n```\n\n----------------------------------------\n\nTITLE: Documenting an ES 2015 Class Expression in JavaScript\nDESCRIPTION: This snippet demonstrates how to document a class that is defined as a class expression and assigned to a constant. It shows that the documentation approach is similar to regular class declarations.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-es2015-classes.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** Class representing a point. */\nconst Point = class {\n    // and so on\n}\n```\n\n----------------------------------------\n\nTITLE: Using @ignore Tag with Class Definition\nDESCRIPTION: Example showing how to use the @ignore tag to exclude a class and its properties from documentation. The Jacket class and its color property will not appear in the generated documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-ignore.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @class\n * @ignore\n */\nfunction Jacket() {\n    /** The jacket's color. */\n    this.color = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Module References in JSDoc\nDESCRIPTION: Shows how to reference other modules using proper namepath syntax with the module: prefix and @see tag.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-amd-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Pants module.\n * @module my/pants\n * @see module:my/shirt\n */\n```\n\n----------------------------------------\n\nTITLE: Exporting with Node.js Module Pattern\nDESCRIPTION: Example of documenting a Node.js module that exports a single function using module.exports.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-exports.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * A module that shouts hello!\n * @module hello/world\n */\n\n/** SAY HELLO. */\nmodule.exports = function() {\n    return \"HELLO WORLD\";\n};\n```\n\n----------------------------------------\n\nTITLE: Using {@tutorial} Inline Tag in JSDoc\nDESCRIPTION: Example demonstrating how to link to a tutorial using the {@tutorial} inline tag within documentation text.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-tutorials.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Class representing a socket connection. See {@tutorial socket-tutorial}\n * for an overview.\n *\n * @class\n */\nfunction Socket() {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @name vs @alias Tag Usage in JavaScript\nDESCRIPTION: This snippet illustrates the difference between @name and @alias tags. The @name tag ignores associated code, while @alias renames the function in the documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-alias.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Bar function.\n * @name bar\n */\nfunction foo() {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Bar function.\n * @alias bar\n */\nfunction foo() {}\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Object with AMD Module Pattern\nDESCRIPTION: Example of using @exports tag to document an AMD module that exports a custom-named object.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-exports.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function () {\n\n    /**\n     * A module that says hello!\n     * @exports hello/world\n     */\n    var ns = {};\n\n    /** Say hello. */\n    ns.sayHello = function() {\n        return 'Hello world';\n    };\n\n    return ns;\n});\n```\n\n----------------------------------------\n\nTITLE: Using @tutorial Block Tag in JSDoc\nDESCRIPTION: Example showing how to link to a tutorial using the @tutorial block tag in a class documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-tutorials.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Class representing a socket connection.\n *\n * @class\n * @tutorial socket-tutorial\n */\nfunction Socket() {}\n```\n\n----------------------------------------\n\nTITLE: Multiple Block Tags Usage in JSDoc\nDESCRIPTION: Shows proper formatting when using multiple block tags in a single JSDoc comment. The example documents a method that takes two parameters, demonstrating how block tags must be separated by line breaks.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-block-inline-tags.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Set the color and type of the shoelaces.\n *\n * @param {LACE_COLORS} color - The shoelace color.\n * @param {LACE_TYPES} type - The type of shoelace.\n */\nShoe.prototype.setLaceType = function(color, type) {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Positioning JSDoc Comment Before Exports Assignment\nDESCRIPTION: Demonstrates an alternative approach where the JSDoc comment is placed immediately before the exports assignment to enable automatic detection.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Shirt module.\n * @module my/shirt\n */\n\nvar wash =\n/** Wash the shirt. */\nexports.wash = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Tutorial Structure with JSON Tree Format\nDESCRIPTION: JSON configuration showing how to define tutorial hierarchy using nested objects with title and children properties. Example shows a structure with parent tutorials and child tutorials.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-tutorials.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tutorial1\": {\n        \"title\": \"Tutorial One\",\n        \"children\": {\n            \"childA\": {\n                \"title\": \"Child A\"\n            },\n            \"childB\": {\n                \"title\": \"Child B\"\n            }\n        }\n    },\n    \"tutorial2\": {\n        \"title\": \"Tutorial Two\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Module with @see Tag in JavaScript\nDESCRIPTION: Demonstrates how to reference another module using the @see tag with the module: prefix in JSDoc comments.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-commonjs-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Pants module.\n * @module my/pants\n * @see module:my/shirt\n */\n```\n\n----------------------------------------\n\nTITLE: Implicit Documentation Inheritance in JavaScript\nDESCRIPTION: Shows how documentation is automatically inherited when no JSDoc comment is provided for the child class method. This achieves the same result as using @inheritdoc explicitly.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-inheritdoc.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @classdesc Abstract class representing a network connection.\n * @class\n */\nfunction Connection() {}\n\n/**\n * Open the connection.\n */\nConnection.prototype.open = function() {\n    // ...\n};\n\n\n/**\n * @classdesc Class representing a socket connection.\n * @class\n * @augments Connection\n */\nfunction Socket() {}\n\nSocket.prototype.open = function() {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using @copyright Tag in JSDoc Comment Block in JavaScript\nDESCRIPTION: This example demonstrates how to use the @copyright tag in combination with the @file tag in a JSDoc comment block. The @copyright tag specifies the copyright holder and year for the file.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-copyright.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @file This is my cool script.\n * @copyright Michael Mathews 2011\n */\n```\n\n----------------------------------------\n\nTITLE: Using @var to document a virtual member in JavaScript\nDESCRIPTION: This example shows how to use the @var tag (a synonym of @member) to document a virtual variable 'foo' in the global namespace with a number type.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-member.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * A variable in the global namespace called 'foo'.\n * @var {number} foo\n */\n```\n\n----------------------------------------\n\nTITLE: Special Case Namepaths for Modules, Externals and Events in JSDoc\nDESCRIPTION: Shows the special prefix notation used for module, external, and event namepaths in JSDoc documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-namepaths.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/** A module. Its name is module:foo/bar.\n * @module foo/bar\n */\n/** The built in string object. Its name is external:String.\n * @external String\n */\n/** An event. Its name is module:foo/bar.event:MyEvent.\n * @event module:foo/bar.event:MyEvent\n */\n```\n\n----------------------------------------\n\nTITLE: HTML Output with Clever Links Enabled in JSDoc\nDESCRIPTION: Demonstrates the HTML output when the templates.cleverLinks configuration option is enabled. Code links use monospace font while URL links use normal text.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-inline-link.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nSee &lt;a href=\"MyClass.html\">&lt;code>MyClass&lt;/code>&lt;/a> and &lt;a href=\"MyClass.html#foo\">\n&lt;code>MyClass's foo property&lt;/code>&lt;/a>. Also, check out\n&lt;a href=\"http://www.google.com\">Google&lt;/a> and &lt;a href=\"https://github.com\">GitHub&lt;/a>.\n```\n\n----------------------------------------\n\nTITLE: Alternative way to document a global variable in JavaScript\nDESCRIPTION: This example shows an equivalent way to document the same global variable 'foo' using the @type tag instead of @var/@member, with an actual variable declaration.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-member.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n * A variable in the global namespace called 'foo'.\n * @type {number}\n */\nvar foo;\n```\n\n----------------------------------------\n\nTITLE: Handling Special Characters in Namepaths with JSDoc\nDESCRIPTION: Demonstrates how to reference objects with special characters in their names using quoted notation and escape sequences for internal quotes.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-namepaths.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/** @namespace */\nvar chat = {\n    /**\n     * Refer to this by {@link chat.\"#channel\"}.\n     * @namespace\n     */\n    \"#channel\": {\n        /**\n         * Refer to this by {@link chat.\"#channel\".open}.\n         * @type {boolean}\n         * @defaultvalue\n         */\n        open: true,\n        /**\n         * Internal quotes have to be escaped by backslash. This is\n         * {@link chat.\"#channel\".\"say-\\\"hello\\\"\"}.\n         */\n        'say-\"hello\"': function (msg) {}\n    }\n};\n\n/**\n * Now we define an event in our {@link chat.\"#channel\"} namespace.\n * @event chat.\"#channel\".\"op:announce-motd\"\n */\n```\n\n----------------------------------------\n\nTITLE: HTML Output of @link Tags in JSDoc\nDESCRIPTION: Shows the default HTML output generated from @link tags in JSDoc documentation. The links are rendered as standard anchor tags with the appropriate href attributes.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-inline-link.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nSee &lt;a href=\"MyClass.html\">MyClass&lt;/a> and &lt;a href=\"MyClass.html#foo\">MyClass's foo\nproperty&lt;/a>. Also, check out &lt;a href=\"http://www.google.com\">Google&lt;/a> and\n&lt;a href=\"https://github.com\">GitHub&lt;/a>.\n```\n\n----------------------------------------\n\nTITLE: Using the @package Tag in JavaScript with JSDoc\nDESCRIPTION: This example demonstrates how to use the @package tag to mark an instance member as package-private. The tag indicates that the _bar property is only available to code in the same directory as the Thingy constructor.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-package.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @constructor */\nfunction Thingy() {\n    /** @package */\n    this._bar = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the @tutorial tag in JSDoc comments\nDESCRIPTION: This example demonstrates how to link to tutorial files within JSDoc documentation. The @tutorial tag references tutorial identifiers, allowing multiple tutorial links from a single JSDoc comment.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-tutorial.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Description\n * @class\n * @tutorial tutorial-1\n * @tutorial tutorial-2\n */\nfunction MyClass() {}\n```\n\n----------------------------------------\n\nTITLE: Default JSDoc Configuration Options\nDESCRIPTION: Default configuration options used by JSDoc when no configuration file is specified, including plugin settings, recursion depth, and source file patterns.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-configuring-jsdoc.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"plugins\": [],\n    \"recurseDepth\": 10,\n    \"source\": {\n        \"includePattern\": \".+\\\\.js(doc|x)?$\",\n        \"excludePattern\": \"(^|\\\\/|\\\\\\\\)_\"\n    },\n    \"sourceType\": \"module\",\n    \"tags\": {\n        \"allowUnknownTags\": true,\n        \"dictionaries\": [\"jsdoc\",\"closure\"]\n    },\n    \"templates\": {\n        \"cleverLinks\": false,\n        \"monospaceLinks\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onTagged Callback in JSDoc Dictionary\nDESCRIPTION: Demonstrates how to define a custom tag with an onTagged callback that sets the doclet scope to 'instance'.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-plugins.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndictionary.defineTag('instance', {\n    onTagged: function(doclet, tag) {\n        doclet.scope = \"instance\";\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module Configuration for JSDoc\nDESCRIPTION: CommonJS module configuration file that exports a configuration object to enable the Markdown plugin.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-configuring-jsdoc.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nmodule.exports = {\n    plugins: ['plugins/markdown']\n};\n```\n\n----------------------------------------\n\nTITLE: Including a package file in JSDoc source paths\nDESCRIPTION: This command runs JSDoc with a path to JavaScript files and a path to package.json file. JSDoc will use the first package.json file it finds in the source paths.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-including-package.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njsdoc path/to/js path/to/package/package.json\n```\n\n----------------------------------------\n\nTITLE: Implementing a beforeParse Event Handler in JavaScript\nDESCRIPTION: This example shows how to create a plugin that adds virtual documentation for a function. The handler adds a JSDoc comment block to the source code before parsing begins to document methods that might not appear in the original source code.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-plugins.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexports.handlers = {\n    beforeParse: function(e) {\n        var extraDoc = [\n            '/**',\n            ' * Function provided by a superclass.',\n            ' * @name superFunc',\n            ' * @memberof ui.mywidget',\n            ' * @function',\n            ' */'\n        ];\n        e.source += extraDoc.join('\\n');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: JSDoc Plugin Configuration Example\nDESCRIPTION: Configuration file demonstrating how to enable multiple plugins including Markdown and summarize plugins.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-configuring-jsdoc.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"plugins\": [\n        \"plugins/markdown\",\n        \"plugins/summarize\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to rebuild HTML files and start a local development server for previewing documentation changes.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Creating an Event-Handler Plugin for 'newDoclet' Events in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic JSDoc plugin that handles 'newDoclet' events. The plugin exports a handlers object with a function that will be called when new doclets are created.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-plugins.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexports.handlers = {\n    newDoclet: function(e) {\n        // Do something when we see a new doclet\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: JSDoc Command-line Options in Configuration\nDESCRIPTION: Example showing how to incorporate command-line options into the configuration file using the opts object.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-configuring-jsdoc.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"opts\": {\n        \"template\": \"templates/default\",\n        \"encoding\": \"utf8\",\n        \"destination\": \"./out/\",\n        \"recurse\": true,\n        \"tutorials\": \"path/to/tutorials\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning JSDoc Documentation Repository\nDESCRIPTION: Command to clone the JSDoc documentation repository from GitHub to your local machine.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/jsdoc/jsdoc.github.io\n```\n\n----------------------------------------\n\nTITLE: Implementing AST Node Visitor in JSDoc Plugin\nDESCRIPTION: Example of creating a node visitor that processes each node in the abstract syntax tree. The visitor receives the node, event object, parser instance, and current source filename.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-plugins.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexports.astNodeVisitor = {\n    visitNode: function(node, e, parser, currentSourceName) {\n        // do all sorts of crazy things here\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using the -P/--package option with JSDoc\nDESCRIPTION: This command demonstrates using JSDoc's -P/--package option to explicitly specify a package.json file. This option takes precedence over any package.json files in source paths.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-including-package.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njsdoc --package path/to/package/package-docs.json path/to/js\n```\n\n----------------------------------------\n\nTITLE: Basic JSDoc Invocation Syntax\nDESCRIPTION: The most basic command to run JSDoc on source files. It accepts one or more JavaScript files as arguments to generate documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-commandline.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/jsdoc yourSourceCodeFile.js anotherSourceCodeFile.js ...\n```\n\n----------------------------------------\n\nTITLE: Configuring JSDoc Templates in JavaScript\nDESCRIPTION: This snippet shows how to configure JSDoc templates in a JSON configuration file. It demonstrates setting options for 'cleverLinks' and 'monospaceLinks', which affect the appearance of links in the generated documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-configuring-jsdoc.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"templates\": {\n        \"cleverLinks\": false,\n        \"monospaceLinks\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a newDoclet Handler to Transform Documentation in JavaScript\nDESCRIPTION: This example demonstrates a newDoclet handler that modifies doclet properties. The handler converts all descriptions to uppercase, effectively \"shouting\" the descriptions in the generated documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-plugins.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexports.handlers = {\n    newDoclet: function(e) {\n        // e.doclet will refer to the newly created doclet\n        // you can read and modify properties of that doclet if you wish\n        if (typeof e.doclet.description === 'string') {\n            e.doclet.description = e.doclet.description.toUpperCase();\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Running JSDoc Generator via Command Line\nDESCRIPTION: Demonstrates how to run the JSDoc documentation generator from the command line. This command will process the book.js file and create HTML documentation in the out/ directory.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-getting-started.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njsdoc book.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files Copy in JSDoc Template\nDESCRIPTION: JSON configuration example showing how to copy static files from a project directory to the JSDoc output directory. This allows including assets like images in the generated documentation.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-configuring-default-template.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"templates\": {\n    \"default\": {\n      \"staticFiles\": {\n        \"include\": [\n        \t\"./myproject/static\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tags in JSDoc Plugin in JavaScript\nDESCRIPTION: This snippet illustrates the basic structure for defining custom tags in a JSDoc plugin. The plugin exports a defineTags function that receives a dictionary parameter used to define new tags.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-plugins.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexports.defineTags = function(dictionary) {\n    // define tags here\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Tags for Markdown Processing (JSON)\nDESCRIPTION: This example demonstrates how to enable Markdown processing for additional tags ('foo' and 'bar') in the JSDoc configuration file. It adds these tags to the markdown.tags array.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/plugins-markdown.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"plugins\": [\"plugins/markdown\"],\n    \"markdown\": {\n        \"tags\": [\"foo\", \"bar\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 to a Module with JSDoc @license Tag\nDESCRIPTION: This snippet demonstrates how to apply the Apache License 2.0 to a JavaScript module using the @license tag with an SPDX identifier. The tag is included in the module's JSDoc comment.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/tags-license.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Utility functions for the foo package.\n * @module foo/util\n * @license Apache-2.0\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Tutorial Structure with Array Format\nDESCRIPTION: Alternative JSON configuration format using arrays to specify child tutorials. Demonstrates a flattened structure where child relationships are defined through arrays.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-tutorials.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tutorial1\": {\n        \"title\": \"Tutorial One\",\n        \"children\": [\"childA\", \"childB\"]\n    },\n    \"tutorial2\": {\n        \"title\": \"Tutorial Two\"\n    },\n    \"childA\": {\n        \"title\": \"Child A\"\n    },\n    \"childB\": {\n        \"title\": \"Child B\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running JSDoc Tests with Pattern Matching and Verbose Output\nDESCRIPTION: Example demonstrating how to run JSDoc's test suite, filtering tests by a pattern and enabling verbose logging for more detailed output.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/about-commandline.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/jsdoc -T --match tag --verbose\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for JSDoc Docs\nDESCRIPTION: Command to install all required npm dependencies for the documentation project.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Documenting Multiple AMD Modules in One File\nDESCRIPTION: Demonstrates how to document multiple AMD modules defined in a single file using @exports tags for each module.\nSOURCE: https://github.com/jsdoc/jsdoc.github.io/blob/main/content/howto-amd-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// one module\ndefine('html/utils', function() {\n    /**\n     * Utility functions to ease working with DOM elements.\n     * @exports html/utils\n     */\n    var utils = {\n        /**\n         * Get the value of a property on an element.\n         * @param {HTMLElement} element - The element.\n         * @param {string} propertyName - The name of the property.\n         * @return {*} The value of the property.\n         */\n        getStyleProperty: function(element, propertyName) { }\n    };\n\n    /**\n     * Determine if an element is in the document head.\n     * @param {HTMLElement} element - The element.\n     * @return {boolean} Set to `true` if the element is in the document head,\n     * `false` otherwise.\n     */\n    utils.isInHead = function(element) { }\n\n    return utils;\n    }\n);\n\n// another module\ndefine('tag', function() {\n    /** @exports tag */\n    var tag = {\n        /**\n         * Create a new Tag.\n         * @class\n         * @param {string} tagName - The name of the tag.\n         */\n        Tag: function(tagName) {\n            // ...\n        }\n    };\n\n    return tag;\n});\n```"
  }
]