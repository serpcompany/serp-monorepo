[
  {
    "owner": "lottiefiles",
    "repo": "dotlottie-web",
    "content": "TITLE: Using DotLottie State Machine Controls in JavaScript\nDESCRIPTION: Demonstrates how to use the DotLottie state machine methods including loading, starting, stopping and posting events to control animation behavior. Showcases various event types including boolean, string, numeric and pointer events.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/web/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dotLottie = new DotLottie(...);\n\nconst smLoaded = dotLottie.loadStateMachine(\"some_state_machine_id\"); // Load a state machine from the .lottie file\nconst smStarted = dotLottie.startStateMachine();                // Start the loaded state machine\n\ndotLottie.postStateMachineEvent(\"Bool: true\");         // Post a boolean event\ndotLottie.postStateMachineEvent(\"Bool: false\");        // Post a boolean event\ndotLottie.postStateMachineEvent(\"String: ...\");        // Post a string event\ndotLottie.postStateMachineEvent(\"Numeric: 0.0\");       // Post a numeric event\ndotLottie.postStateMachineEvent(\"OnPointerDown: 0.0 0.0\"); // Post a pointer down event\ndotLottie.postStateMachineEvent(\"OnPointerUp: 0.0 0.0\");   // Post a pointer up event\ndotLottie.postStateMachineEvent(\"OnPointerMove: 0.0 0.0\"); // Post a pointer move event\ndotLottie.postStateMachineEvent(\"OnPointerEnter: 0.0 0.0\"); // Post a pointer enter event\ndotLottie.postStateMachineEvent(\"OnPointerExit: 0.0 0.0\");  // Post a pointer exit event\ndotLottie.postStateMachineEvent(\"OnComplete\");             // Post a complete event\n\nconst smStopped = dotLottie.stopStateMachine(); // End the started state machine\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listeners for DotLottieReact in React\nDESCRIPTION: This snippet demonstrates how to use the dotLottieRefCallback prop to get a reference to the dotLottie player instance and set up event listeners for play, pause, complete, and frame change events. It also shows proper cleanup of event listeners on component unmount.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react';\n\nconst App = () => {\n  const [dotLottie, setDotLottie] = React.useState(null);\n\n  React.useEffect(() => {\n\n    // This function will be called when the animation starts playing.\n    function onPlay() {\n      console.log('Animation start playing');\n    }\n\n    // This function will be called when the animation is paused.\n    function onPause() {\n      console.log('Animation paused');\n    }\n\n    // This function will be called when the animation is completed.\n    function onComplete() {\n      console.log('Animation completed');\n    }\n\n    function onFrameChange({currentFrame}) {\n      console.log('Current frame: ', currentFrame);\n    }\n\n    // Listen to events emitted by the DotLottie instance when it is available.\n    if (dotLottie) {\n      dotLottie.addEventListener('play', onPlay);\n      dotLottie.addEventListener('pause', onPause);\n      dotLottie.addEventListener('complete', onComplete);\n      dotLottie.addEventListener('frame', onFrameChange);\n    }\n\n    return () => {\n      // Remove event listeners when the component is unmounted.\n      if (dotLottie) {\n        dotLottie.removeEventListener('play', onPlay);\n        dotLottie.removeEventListener('pause', onPause);\n        dotLottie.removeEventListener('complete', onComplete);\n        dotLottie.removeEventListener('frame', onFrameChange);\n      }\n    };\n  }, [dotLottie]);\n\n\n  const dotLottieRefCallback = (dotLottie) => {\n    setDotLottie(dotLottie);\n  };\n\n  return (\n    <DotLottieReact\n      src=\"path/to/animation.lottie\"\n      loop\n      autoplay\n      dotLottieRefCallback={dotLottieRefCallback}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listeners with DotLottieSolid Component in TypeScript and Solid.js\nDESCRIPTION: This snippet demonstrates how to use the DotLottieSolid component, set up event listeners for various animation events, and handle cleanup. It uses Solid.js hooks like createSignal, createEffect, and onCleanup to manage the component's lifecycle and event handling.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/solid/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSignal, createEffect, onCleanup } from 'solid-js';\nimport { DotLottieSolid } from '@lottiefiles/dotlottie-solid';\n\nconst App = () => {\n  const [dotLottie, setDotLottie] = createEffect();\n\n  createEffect(() => {\n    // This function will be called when the animation starts playing.\n    function onPlay() {\n      console.log('Animation start playing');\n    }\n\n    // This function will be called when the animation is paused.\n    function onPause() {\n      console.log('Animation paused');\n    }\n\n    // This function will be called when the animation is completed.\n    function onComplete() {\n      console.log('Animation completed');\n    }\n\n    function onFrameChange({currentFrame}) {\n      console.log('Current frame: ', currentFrame);\n    }\n\n    // Listen to events emitted by the DotLottie instance when it is available.\n    if (dotLottie()) {\n      dotLottie().addEventListener('play', onPlay);\n      dotLottie().addEventListener('pause', onPause);\n      dotLottie().addEventListener('complete', onComplete);\n      dotLottie().addEventListener('frame', onFrameChange);\n    }\n  });\n\n  onCleanup(() => {\n    if (dotLottie()) {\n      dotLottie().removeEventListener('play', onPlay);\n      dotLottie().removeEventListener('pause', onPause);\n      dotLottie().removeEventListener('complete', onComplete);\n      dotLottie().removeEventListener('frame', onFrameChange);\n    }\n  })\n\n  return (\n    <DotLottieSolid\n      src=\"path/to/animation.lottie\"\n      loop\n      autoplay\n      dotLottieRefCallback={setDotLottie}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listeners with DotLottieSvelte in Svelte\nDESCRIPTION: This snippet demonstrates how to use the dotLottieRefCallback prop to listen to animation events in a Svelte component. It shows how to set up listeners for load, play, pause, and complete events, and properly clean them up when the component is destroyed.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/svelte/README.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { DotLottieSvelte } from '@lottiefiles/dotlottie-svelte';\n    import type { DotLottie } from '@lottiefiles/dotlottie-svelte';\n\n    let dotLottie: DotLottie | null = null;\n\n    function onLoaded() {\n        console.log(\"Animation loaded\");\n    }\n\n    function onPlay() {\n        console.log(\"Animation started\");\n    }\n\n    function onPause() {\n        console.log(\"Animation paused\");\n    }\n\n    function onComplete() {\n        console.log(\"Animation completed\");\n    }\n    \n    function setupListeners(dotLottieInstance) {\n        dotLottieInstance.addEventListener('load', onLoaded);\n        dotLottieInstance.addEventListener('play', onPlay);\n        dotLottieInstance.addEventListener('pause', onPause);\n        dotLottieInstance.addEventListener('complete', onComplete);\n    }\n\n    function removeListeners(dotLottieInstance) {\n        dotLottieInstance.removeEventListener('load', onLoaded);\n        dotLottieInstance.removeEventListener('play', onPlay);\n        dotLottieInstance.removeEventListener('pause', onPause);\n        dotLottieInstance.removeEventListener('complete', onComplete);\n    }\n\n     onDestroy(() => {\n        if (dotLottie) {\n            removeListeners(dotLottie);\n        }\n    });\n</script>\n\n<DotLottieSvelte\n    src=\"path/to/your/animation.lottie\"\n    loop={true}\n    autoplay={true}\n    dotLottieRefCallback={(ref) => {\n        dotLottie = ref;\n        setupListeners(dotLottie);\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Listening to DotLottie Events in Vue\nDESCRIPTION: Example of how to listen to events from the DotLottieVue component using ref and onMounted hook.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/vue/README.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onMounted, ref, watch } from 'vue';\nimport { DotLottieVue } from '@lottiefiles/dotlottie-vue'\nconst playerRef = ref(null);\n\nonMounted(() => {\n  if (playerRef.value) {\n    const dotLottie = playerRef.value.getDotLottieInstance();\n    dotLottie.addEventListener('pause', () => {\n      console.log('paused')\n    });\n    dotLottie.addEventListener('frame', ({ currentFrame }) => {\n      console.log('Frame:', currentFrame)\n    });\n  }\n})\n</script>\n\n<template>\n  <DotLottieVue autoplay loop ref=\"playerRef\" src=\"path-to-lottie.lottie\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Playback Controls with DotLottieReact\nDESCRIPTION: Example demonstrating how to implement custom playback controls for a DotLottieReact component. It shows how to use the dotLottieRefCallback prop to get a reference to the dotLottie instance and control playback.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react';\n\nconst App = () => {\n  const [dotLottie, setDotLottie] = React.useState(null);\n\n  const dotLottieRefCallback = (dotLottie) => {\n    setDotLottie(dotLottie);\n  };\n\n  function play(){\n    if(dotLottie){\n      dotLottie.play();\n    }\n  }\n\n  function pause(){\n    if(dotLottie){\n      dotLottie.pause();\n    }\n  }\n\n  function stop(){\n    if(dotLottie){\n      dotLottie.stop();\n    }\n  }\n\n  function seek(){\n    if(dotLottie){\n      dotLottie.setFrame(30);\n    }\n  }\n\n  return (\n    <DotLottieReact\n      src=\"path/to/animation.lottie\"\n      loop\n      autoplay\n      dotLottieRefCallback={dotLottieRefCallback}\n    />\n    <div>\n      <button onClick={play}>Play</button>\n      <button onClick={pause}>Pause</button>\n      <button onClick={stop}>Stop</button>\n      <button onClick={seek}>Seek to frame no. 30</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Playback Controls for DotLottieSolid Component\nDESCRIPTION: Example demonstrating how to implement custom playback controls for the DotLottieSolid component using the dotLottieRefCallback prop and Solid.js signals.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/solid/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSignal } from 'solid-js';\nimport { DotLottieSolid } from '@lottiefiles/dotlottie-solid';\n\nconst App = () => {\n  const [dotLottie, setDotLottie] = createSignal();\n\n  function play() {\n    if (dotLottie()) {\n      dotLottie().play();\n    }\n  }\n\n  function pause() {\n    if (dotLottie()) {\n      dotLottie().pause();\n    }\n  }\n\n  function stop() {\n    if (dotLottie()) {\n      dotLottie().stop();\n    }\n  }\n\n  function seek() {\n    if (dotLottie()) {\n      dotLottie().setFrame(30);\n    }\n  }\n\n  return (\n    <DotLottieSolid\n      src=\"path/to/animation.lottie\"\n      loop\n      autoplay\n      dotLottieRefCallback={setDotLottie}\n    />\n    <div>\n      <button onClick={play}>Play</button>\n      <button onClick={pause}>Pause</button>\n      <button onClick={stop}>Stop</button>\n      <button onClick={seek}>Seek to frame no. 30</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Playback Controls Implementation\nDESCRIPTION: Advanced example demonstrating how to implement custom playback controls using the dotLottieRefCallback prop and player instance methods\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/svelte/README.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { DotLottieSvelte } from '@lottiefiles/dotlottie-svelte';\n  import type { DotLottie } from '@lottiefiles/dotlottie-svelte';\n  \n  let dotLottie: DotLottie | null = null;\n\n  function play() {\n    dotLottie?.play();\n  }\n\n  function pause() {\n    dotLottie?.pause();\n  }\n\n  function stop() {\n    dotLottie?.stop();\n  }\n</script>\n\n<DotLottieSvelte\n  src=\"path/to/your/animation.lottie\"\n  loop={true}\n  autoplay={true}\n  dotLottieRefCallback={(ref) => dotLottie = ref}\n/>\n\n<button on:click={play}>Play</button>\n<button on:click={pause}>Pause</button>\n<button on:click={stop}>Stop</button>\n```\n\n----------------------------------------\n\nTITLE: Initializing DotLottie Web Worker\nDESCRIPTION: Shows how to use DotLottieWorker for offloading animation rendering to a Web Worker, including worker grouping functionality.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/web/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DotLottieWorker } from '@lottiefiles/dotlottie-web';\n\nnew DotLottieWorker({\n  canvas: document.getElementById('canvas'),\n  src: 'url/to/animation.json',\n  autoplay: true,\n  loop: true,\n});\n\nnew DotLottieWorker({\n  canvas: document.getElementById('canvas-2'),\n  src: 'url/to/animation2.json',\n  autoplay: true,\n  loop: true,\n  workerId: 'worker-2',\n});\n```\n\n----------------------------------------\n\nTITLE: Checking DotLottie Runtime Ready State\nDESCRIPTION: Demonstrates how to check if the WASM runtime is fully initialized and handle the ready event.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/web/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst dotLottie = new DotLottie(...);\n\nif (dotLottie.isReady) {\n  // Safe to interact with the player\n} else {\n  dotLottie.addEventListener('ready', () => {\n    // Safe to interact with the player\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DotLottie Player with Layer Bounding Box\nDESCRIPTION: Demonstrates how to initialize a DotLottie player and draw a rectangle around a specific layer using the getLayerBoundingBox method.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/web/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst canvas = document.getElementById('dotLottie-canvas');\n\nconst dotLottie = new DotLottie({\n  canvas,\n  ...\n});\n\n// Draw a rectangle around the layer 'Layer 1' after a frame is renderered\ndotLottie.addEventListener('render', () => {\n  const boundingBox = dotLottie.getLayerBoundingBox('Layer 1');\n  const context = canvas.getContext('2d');\n\n  if (boundingBox && context) {\n    const { x, y, width, height } = boundingBox;\n    context.strokeRect(x, y, width, height);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DotLottieReact Component\nDESCRIPTION: Example of how to use the DotLottieReact component in a React application. It demonstrates setting up a basic animation with looping and autoplay.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react';\n\nconst App = () => {\n  return (\n    <DotLottieReact\n      src=\"path/to/animation.lottie\"\n      loop\n      autoplay\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DotLottieSolid Component in Solid.js\nDESCRIPTION: Basic example of how to use the DotLottieSolid component in a Solid.js application with autoplay and loop enabled.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/solid/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DotLottieSolid } from '@lottiefiles/dotlottie-solid';\n\nconst App = () => {\n  return (\n    <DotLottieSolid\n      src=\"path/to/animation.lottie\"\n      loop\n      autoplay\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic DotLottie Svelte Component Usage\nDESCRIPTION: Simple example showing how to use the DotLottie component in a Svelte application with autoplay and loop enabled\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/svelte/README.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\nimport { DotLottieSvelte } from '@lottiefiles/dotlottie-svelte';\n</script>\n\n<DotLottieSvelte\n  src=\"path/to/animation.lottie\"\n  loop\n  autoplay\n/>\n```\n\n----------------------------------------\n\nTITLE: Using DotLottie Vue Component\nDESCRIPTION: Example of how to use the DotLottieVue component in a Vue template with script setup.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/vue/README.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { DotLottieVue } from '@lottiefiles/dotlottie-vue'\n</script>\n\n<template>\n  <DotLottieVue style=\"height: 500px; width: 500px\" autoplay loop src=\"https://path-to-lottie.lottie\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using dotlottie-wc via CDN\nDESCRIPTION: Example of how to use the dotlottie-wc component directly via a CDN in an HTML file.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/wc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <title>@lottiefiles/dotlottie-wc | Basic Example</title>\n</head>\n<body>\n    <dotlottie-wc src=\"https://lottie.host/4db68bbd-31f6-4cd8-84eb-189de081159a/IGmMCqhzpt.lottie\" autoplay loop></dotlottie-wc>\n    <script type=\"module\" src=\"https://unpkg.com/@lottiefiles/dotlottie-wc@latest/dist/dotlottie-wc.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using dotlottie-wc in HTML\nDESCRIPTION: Example of how to use the dotlottie-wc component in an HTML file after installation via npm.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/wc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<dotlottie-wc src=\"https://lottie.host/4db68bbd-31f6-4cd8-84eb-189de081159a/IGmMCqhzpt.lottie\" autoplay=\"true\" loop=\"true\"></dotlottie-wc>\n```\n\n----------------------------------------\n\nTITLE: Importing dotlottie-wc in JavaScript\nDESCRIPTION: How to import the dotlottie-wc component in a JavaScript or TypeScript module.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/wc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@lottiefiles/dotlottie-wc';\n```\n\n----------------------------------------\n\nTITLE: Customizing DotLottie Web Animation Settings with Command Line Arguments\nDESCRIPTION: Comprehensive command format for customizing all available parameters of the DotLottie Web animation converter, including dimensions, framerate, repeat count, quality settings, input file, and animation speed.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/apps/dotlottie-web-node-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm start --width [width] --height [height] --fps [fps] --repeat [repeat] --quality [quality] --input [input file or URL] --speed [speed] \n```\n\n----------------------------------------\n\nTITLE: Example Command for DotLottie Web with Custom Settings\nDESCRIPTION: A specific example showing how to convert a Lottie animation from a URL to a high-quality GIF with custom dimensions, framerate, and playback speed settings.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/apps/dotlottie-web-node-example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm start --width 200 --height 200 --fps 30 --repeat 0 --quality high --input https://lottie.host/aaccfd1e-487e-4e9a-9d20-c57299089cfc/iVNpuLw0co.lottie --speed 1.5\n```\n\n----------------------------------------\n\nTITLE: Running DotLottie Web with Default Settings in Node.js\nDESCRIPTION: Basic command to run the DotLottie Web application with default settings. This will generate a GIF file saved to './output/animation.gif'.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/apps/dotlottie-web-node-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing DotLottie React Package\nDESCRIPTION: Command to install the @lottiefiles/dotlottie-react package using npm.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @lottiefiles/dotlottie-react\n```\n\n----------------------------------------\n\nTITLE: Installing dotLottie-Solid Package with npm\nDESCRIPTION: Command to install the @lottiefiles/dotlottie-solid package using npm package manager.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/solid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @lottiefiles/dotlottie-solid\n```\n\n----------------------------------------\n\nTITLE: Installing DotLottie Svelte Package\nDESCRIPTION: Command to install the @lottiefiles/dotlottie-svelte package using npm\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/svelte/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @lottiefiles/dotlottie-svelte\n```\n\n----------------------------------------\n\nTITLE: Installing DotLottie Vue Component\nDESCRIPTION: Command to install the @lottiefiles/dotlottie-vue package using npm.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/vue/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @lottiefiles/dotlottie-vue\n```\n\n----------------------------------------\n\nTITLE: Installing dotlottie-wc via npm\nDESCRIPTION: Command to install the @lottiefiles/dotlottie-wc package using npm.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/wc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @lottiefiles/dotlottie-wc\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes - Version 0.3.0\nDESCRIPTION: Details major changes including updates to dotLottie-rs wasm bindings, theme support, and breaking API changes.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/wc/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- 0d65643: feat: updated dotLottie-rs wasm bindings to v0.1.33 which includes the new v2 dotLottiespecs and theming\n  support. feat: Added `setSlots` methods to `DotLottie` class to set lottie slots in runtime. feat: Added `themeId`\n  prop to the `DotLottie` class config to initially load a .lottie with a specific theme. feat: Added `resetTheme`\n  method to the `DotLottie` class to reset the theme to the default one.\n\n  BREAKING CHANGE:\n\n  - DotLottie's `loadTheme` method is no longer supported, use `setTheme` instead.\n  - DotLottie's `setThemeData` method is no longer supported, use `setThemeData` instead.\n```\n\n----------------------------------------\n\nTITLE: DotLottie React Component Usage Example\nDESCRIPTION: Example showing how to use the DotLottieReact component with animation and theme selection capabilities. Demonstrates usage of animationId, themeId props and handling animation/theme changes.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react';\nimport React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  const [dotLottie, setDotLottie] = useState(null);\n  const [animations, setAnimations] = useState([]);\n  const [themes, setThemes] = useState([]);\n  const [currentThemeId, setCurrentThemeId] = useState('');\n  const [currentAnimationId, setCurrentAnimationId] = useState('');\n\n  useEffect(() => {\n    const onLoad = () => {\n      if (dotLottie) {\n        setAnimations(dotLottie.manifest.animations || []);\n        setThemes(dotLottie.manifest.themes || []);\n        setCurrentAnimationId(dotLottie.activeAnimationId);\n        setCurrentThemeId(dotLottie.activeThemeId);\n      }\n    };\n\n    dotLottie?.addEventListener('load', onLoad);\n\n    return () => {\n      dotLottie?.removeEventListener('load', onLoad);\n    };\n  }, [dotLottie]);\n\n  return (\n    <div>\n      <DotLottieReact dotLottieRefCallback={setDotLottie} animationId={currentAnimationId} />\n      <label>Theme:</label>\n      {currentThemeId && (\n        <select value={currentThemeId} onChange={(e) => setCurrentThemeId(e.target.value)}>\n          {themes.map((theme) => (\n            <option key={theme.id} value={theme.id}>\n              {theme.id}\n            </option>\n          ))}\n        </select>\n      )}\n      <label>Animation:</label>\n      {currentAnimationId && (\n        <select value={currentAnimationId} onChange={(e) => setCurrentAnimationId(e.target.value)}>\n          {animations.map((animation) => (\n            <option key={animation.id} value={animation.id}>\n              {animation.id}\n            </option>\n          ))}\n        </select>\n      )}\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.5.2\nDESCRIPTION: Documents dependency updates to @lottiefiles/dotlottie-web version 0.43.0\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/wc/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.5.2\n\n### Patch Changes\n\n- Updated dependencies [59f4ce4]\n- Updated dependencies [ce0d9a2]\n  - @lottiefiles/dotlottie-web@0.43.0\n```\n\n----------------------------------------\n\nTITLE: Cloning the dotLottie Web Repository\nDESCRIPTION: Commands to clone the dotLottie Web repository and navigate to its directory. This is the first step for setting up the project locally for development or contribution.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/LottieFiles/dotlottie-web.git\ncd dotlottie-web\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install all required dependencies using PNPM package manager. This must be run after cloning the repository to set up the development environment.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building All Packages in the Monorepo\nDESCRIPTION: Command to build all packages within the monorepo using the configured build script. This compiles the source code into distributable formats.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Development Environment\nDESCRIPTION: Command to start the local development environment for all packages in watch mode. This allows for real-time code changes and testing during development.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Example Application\nDESCRIPTION: Commands to navigate to the example application directory and start the development server. This allows for testing and viewing the dotLottie animations in a browser environment.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Change directory to the example app folder\ncd apps/dotlottie-web-example \npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Development Environment for DotLottieReact\nDESCRIPTION: This snippet provides bash commands for setting up the development environment, running the development server, and building the project for DotLottieReact.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/react/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for DotLottieSolid Project\nDESCRIPTION: This snippet provides bash commands for setting up the development environment, running the development server, and building the project. It uses pnpm as the package manager.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/solid/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Setting up the development environment\nDESCRIPTION: Command to install dependencies for development.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/wc/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Up DotLottie Vue Development Environment\nDESCRIPTION: Commands for setting up the development environment, running in dev mode, and building the project.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/vue/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n\npnpm dev\n\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Project Setup with PNPM\nDESCRIPTION: Instructions for setting up the development environment using PNPM package manager. This command installs all the necessary dependencies for the project.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/svelte/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the development server\nDESCRIPTION: Command to start the development server.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/wc/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server for local testing and development of the dotlottie-svelte component.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/svelte/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Building the project\nDESCRIPTION: Command to build the project for production.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/wc/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building the Project\nDESCRIPTION: Command to build the project for production, creating optimized and ready-to-deploy assets.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/packages/svelte/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running Changeset Command\nDESCRIPTION: Command to initiate the changelog creation process using pnpm package manager.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm changelog\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Pattern\nDESCRIPTION: Representation of the semantic versioning pattern used in the project, showing major, minor, and patch version components.\nSOURCE: https://github.com/lottiefiles/dotlottie-web/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nx.y.z\n```"
  }
]