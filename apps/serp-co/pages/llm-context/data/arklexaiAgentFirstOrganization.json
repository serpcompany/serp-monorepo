[
  {
    "owner": "arklexai",
    "repo": "agent-first-organization",
    "content": "TITLE: Configuring Customer Service Agent with RAG Integration in JSON\nDESCRIPTION: Complete configuration file for setting up a customer service agent. Includes role definition, objectives, domain specifications, document sources for RAG, and worker definitions for handling customer inquiries and information retrieval.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/tutorials/customer-service.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"role\": \"customer service assistant\",\n    \"user_objective\": \"The customer service assistant helps users with customer service inquiries. It can provide information about products, services, and policies, as well as help users resolve issues and complete transactions.\",\n    \"builder_objective\": \"The customer service assistant helps to request customer's contact information.\",\n    \"domain\": \"robotics and automation\",\n    \"intro\": \"Richtech Robotics's headquarter is in Las Vegas; the other office is in Austin. Richtech Robotics provide worker robots (ADAM, ARM, ACE), delivery robots (Matradee, Matradee X, Matradee L, Richie), cleaning robots (DUST-E SX, DUST-E MX) and multipurpose robots (skylark). Their products are intended for business purposes, but not for home purpose; the ADAM robot is available for purchase and rental for multiple purposes. This robot bartender makes tea, coffee and cocktails. Richtech Robotics also operate the world's first robot milk tea shop, ClouTea, in Las Vegas (www.cloutea.com), where all milk tea beverages are prepared by the ADAM robot. The delivery time will be one month for the delivery robot, 2 weeks for standard ADAM, and two months for commercial cleaning robot. \",\n    \"task_docs\": [{\n        \"source\": \"https://www.richtechrobotics.com/\",\n        \"num\": 20\n    }],\n    \"rag_docs\": [{\n        \"source\": \"https://www.richtechrobotics.com/\",\n        \"num\": 20\n    }],\n    \"tasks\": [],\n    \"workers\": [\n        {\"id\": \"9aa47724-0b77-4752-9528-cf4b06a46915\", \"name\": \"FaissRAGWorker\", \"path\": \"faiss_rag_worker.py\"},\n        {\"id\": \"26bb6634-3bee-417d-ad75-23269ac17bc3\", \"name\": \"MessageWorker\", \"path\": \"message_worker.py\"},\n        {\"id\": \"9c15af81-04b3-443e-be04-a3522124b905\", \"name\": \"SearchWorker\", \"path\": \"search_worker.py\"},\n        {\"id\": \"b06c2b58-12c5-41fe-9838-e93b530e42e8\", \"name\": \"DefaultWorker\", \"path\": \"default_worker.py\"}\n    ],\n    \"tools\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageState Class in Python\nDESCRIPTION: Defines the MessageState class as a TypedDict with various attributes representing system configuration, input messages, message flow, response, and task-related parameters. This class is crucial for maintaining the state of a conversation in an agent-based system.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/MessageState.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MessageState(TypedDict):\n    # system configuration\n    sys_instruct: str\n    # input message\n    user_message: ConvoMessage\n    orchestrator_message: OrchestratorMessage\n    # message flow between different nodes\n    message_flow: Annotated[str, \"message flow between different nodes\"]\n    # final response\n    response: str\n    # task-related params\n    status: StatusEnum\n    slots: list[Slot]\n```\n\n----------------------------------------\n\nTITLE: Configuring Customer Service Assistant TaskGraph in JSON\nDESCRIPTION: Complete TaskGraph configuration example for a customer service assistant, including nodes for different workers, edge definitions for intents, and configuration parameters. The structure defines the conversation flow, worker assignments, and system integrations.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Taskgraph/Generation.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"nodes\": [\n        [\n            \"0\",\n            {\n                \"name\": \"MessageWorker\",\n                \"attribute\": {\n                    \"value\": \"Hello! I'm your Customer Service Assistant. How may I assist you with your inquiries today? Whether you need information about our products, services, or policies, or need help resolving an issue or completing a transaction, I'm here to help.\",\n                    \"task\": \"start message\",\n                    \"directed\": false\n                },\n                \"limit\": 1,\n                \"type\": \"start\"\n            }\n        ],\n        [\n            \"1\",\n            {\n                \"name\": \"RAGWorker\",\n                \"attribute\": {\n                    \"value\": \"Here are the detailed specifications and features of our Richtech Robotics products: [insert specifications and features here]. If you have any more questions, feel free to ask!\",\n                    \"task\": \"Provide detailed information about the specifications and features of Richtech Robotics products\",\n                    \"directed\": false\n                },\n                \"limit\": 1\n            }\n        ],\n        ...\n    ],\n    \"edges\": [\n        [\n            \"0\",\n            \"1\",\n            {\n                \"intent\": \"User wants information about product specifications and features\",\n                \"attribute\": {\n                    \"weight\": 1,\n                    \"pred\": true,\n                    \"definition\": \"\",\n                    \"sample_utterances\": []\n                }\n            }\n        ],\n        [\n            \"0\",\n            \"2\",\n            {\n                \"intent\": \"User needs assistance with product purchasing or rental\",\n                \"attribute\": {\n                    \"weight\": 1,\n                    \"pred\": true,\n                    \"definition\": \"\",\n                    \"sample_utterances\": []\n                }\n            }\n        ],\n        ...\n    ],\n    \"role\": \"customer service assistant\",\n    \"user_objective\": \"The customer service assistant helps users with customer service inquiries. It can provide information about products, services, and policies, as well as help users resolve issues and complete transactions.\",\n    \"builder_objective\": \"The customer service assistant helps to request customer's contact information.\",\n    \"domain\": \"robotics and automation\",\n    \"intro\": \"Richtech Robotics's headquarter is in Las Vegas; the other office is in Austin. Richtech Robotics provide worker robots (ADAM, ARM, ACE), delivery robots (Matradee, Matradee X, Matradee L, Richie), cleaning robots (DUST-E SX, DUST-E MX) and multipurpose robots (skylark). Their products are intended for business purposes, but not for home purpose; the ADAM robot is available for purchase and rental for multiple purposes. This robot bartender makes tea, coffee and cocktails. Richtech Robotics also operate the world's first robot milk tea shop, ClouTea, in Las Vegas (www.cloutea.com), where all milk tea beverages are prepared by the ADAM robot. The delivery time will be one month for the delivery robot, 2 weeks for standard ADAM, and two months for commercial cleaning robot. \",\n    \"task_docs\": [\n        {\n            \"source\": \"https://www.richtechrobotics.com/\",\n            \"num\": 20\n        }\n    ],\n    \"rag_docs\": [\n        {\n            \"source\": \"https://www.richtechrobotics.com/\",\n            \"num\": 20\n        }\n    ],\n    \"tasks\": [],\n    \"workers\": [\n        \"RAGAWorker\",\n        \"RagMsgWorker\",\n        \"MessageWorker\",\n        \"SearchWorker\",\n        \"DefaultWorker\"\n    ],\n    \"nluapi\": \"http://localhost:55135/nlu/predict\",\n    \"slotfillapi\": \"http://localhost:55135/slotfill/predict\"\n}\n```\n\n----------------------------------------\n\nTITLE: Choosing Worker Method in DefaultWorker\nDESCRIPTION: Implements the _choose_worker method to select an appropriate worker based on the user's message and task. It uses a language model to make the selection, with a fallback to a base choice.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/DefaultWorker.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef _choose_worker(self, state: MessageState, limit=2):\n        user_message = state['user_message']\n        task = state[\"orchestrator_message\"].attribute.get(\"task\", \"\")\n        workers_info = \"\\n\".join([f\"{name}: {description}\" for name, description in self.available_workers.items()])\n        workers_name = \", \".join(self.available_workers.keys())\n\n        prompt = PromptTemplate.from_template(choose_worker_prompt)\n        input_prompt = prompt.invoke({\"message\": user_message.message, \"formatted_chat\": user_message.history, \"task\": task, \"workers_info\": workers_info, \"workers_name\": workers_name})\n        chunked_prompt = chunk_string(input_prompt.text, tokenizer=MODEL[\"tokenizer\"], max_length=MODEL[\"context\"])\n        final_chain = self.llm | StrOutputParser()\n        while limit > 0:\n            answer = final_chain.invoke(chunked_prompt)\n            for worker_name in self.available_workers.keys():\n                if worker_name in answer:\n                    logger.info(f\"Chosen worker for the default worker: {worker_name}\")\n                    return worker_name\n            limit -= 1\n        logger.info(f\"Base worker chosen for the default worker: {self.base_choice}\")\n        return self.base_choice\n```\n\n----------------------------------------\n\nTITLE: Executing DefaultWorker in Python\nDESCRIPTION: Implements the execute method for DefaultWorker. It chooses a worker using the _choose_worker method and then executes the chosen worker with the given message state.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/DefaultWorker.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef execute(self, msg_state: MessageState):\n        chose_worker = self._choose_worker(msg_state)\n        worker = WORKER_REGISTRY[chose_worker]()\n        result = worker.execute(msg_state)\n        return result\n```\n\n----------------------------------------\n\nTITLE: Implementing the Generator Function for Message Response\nDESCRIPTION: The complete generator function that processes MessageState, handles direct responses, generates messages with context, and updates the state with the response. It supports both building on existing message flow or creating new responses.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/MessageWorker.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef generator(self, state: MessageState) -> MessageState:\n    # get the input message\n    user_message = state['user_message']\n    orchestrator_message = state['orchestrator_message']\n    message_flow = state.get('response', \"\") + \"\\n\" + state.get(\"message_flow\", \"\")\n\n    # get the orchestrator message content\n    orch_msg_content = orchestrator_message.message\n    orch_msg_attr = orchestrator_message.attribute\n    direct_response = orch_msg_attr.get('direct_response', False)\n    if direct_response:\n        return orch_msg_content\n    \n    if message_flow and message_flow != \"\\n\":\n        prompt = PromptTemplate.from_template(message_flow_generator_prompt)\n        input_prompt = prompt.invoke({\n            \"sys_instruct\": state[\"sys_instruct\"], \n            \"message\": orch_msg_content, \n            \"formatted_chat\": user_message.history, \n            \"initial_response\": message_flow\n        })\n    else:\n        prompt = PromptTemplate.from_template(message_generator_prompt)\n        input_prompt = prompt.invoke({\n            \"sys_instruct\": state[\"sys_instruct\"], \n            \"message\": orch_msg_content, \n            \"formatted_chat\": user_message.history\n        })\n    logger.info(f\"Prompt: {input_prompt.text}\")\n    chunked_prompt = chunk_string(input_prompt.text, tokenizer=MODEL[\"tokenizer\"], max_length=MODEL[\"context\"])\n    final_chain = self.llm | StrOutputParser()\n    answer = final_chain.invoke(chunked_prompt)\n\n    state[\"message_flow\"] = \"\"\n    state[\"response\"] = answer\n    return state\n```\n\n----------------------------------------\n\nTITLE: Initializing DefaultWorker Class in Python\nDESCRIPTION: Defines the DefaultWorker class, inheriting from BaseWorker. It initializes with a language model, sets a base choice worker, and populates available workers from environment variables.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/DefaultWorker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DefaultWorker(BaseWorker):\n\n    description = \"Default worker decided by chat records if there is no specific worker for the user's query\"\n\n    def __init__(self):\n        super().__init__()\n        self.llm = ChatOpenAI(model=MODEL[\"model_type_or_path\"], timeout=30000)\n        self.base_choice = \"MessageWorker\"\n        available_workers = os.getenv(\"AVAILABLE_WORKERS\", \"\").split(\",\")\n        self.available_workers = {name: WORKER_REGISTRY[name].description for name in available_workers if name != \"DefaultWorker\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing RAGWorker Class in Python\nDESCRIPTION: The complete RAGWorker class implementation, including the class attributes, initialization, action graph creation, and execution method. This class handles the retrieval and generation process for RAG-based responses.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/RAGWorker.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass RAGWorker(BaseWorker):\n\n    description = \"Answer the user's questions based on the company's internal documentations (unstructured text data), such as the policies, FAQs, and product information\"\n\n    def __init__(self):\n        super().__init__()\n        self.action_graph = self._create_action_graph()\n        self.llm = ChatOpenAI(model=MODEL[\"model_type_or_path\"], timeout=30000)\n     \n    def _create_action_graph(self):\n        workflow = StateGraph(MessageState)\n        # Add nodes for each worker\n        workflow.add_node(\"retriever\", RetrieveEngine.retrieve)\n        workflow.add_node(\"tool_generator\", ToolGenerator.context_generate)\n        # Add edges\n        workflow.add_edge(START, \"retriever\")\n        workflow.add_edge(\"retriever\", \"tool_generator\")\n        return workflow\n\n    def execute(self, msg_state: MessageState):\n        graph = self.action_graph.compile()\n        result = graph.invoke(msg_state)\n        return result\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Class in Python\nDESCRIPTION: Implements the Slot class as a BaseModel with attributes for name, type, value, description, and prompt. This class is used to collect and structure information during conversations, typically used within the MessageState class.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/MessageState.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Slot(BaseModel):\n    name: str\n    type: str\n    value: str\n    description: str\n    prompt: str\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Service Bot Configuration in JSON\nDESCRIPTION: This JSON configuration defines a customer service assistant for a robotics company. It specifies the bot's role, objectives, domain, and required workers. The configuration includes documentation sources and allows for dynamic task generation based on the provided information.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Config/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"role\": \"customer service assistant\",\n    \"user_objective\": \"The customer service assistant helps users with customer service inquiries. It can provide information about products, services, and policies, as well as help users resolve issues and complete transactions.\",\n    \"builder_objective\": \"The customer service assistant helps to request customer's contact information.\",\n    \"domain\": \"robotics and automation\",\n    \"intro\": \"Richtech Robotics's headquarter is in Las Vegas; the other office is in Austin. Richtech Robotics provide worker robots (ADAM, ARM, ACE), delivery robots (Matradee, Matradee X, Matradee L, Richie), cleaning robots (DUST-E SX, DUST-E MX) and multipurpose robots (skylark). Their products are intended for business purposes, but not for home purpose; the ADAM robot is available for purchase and rental for multiple purposes. This robot bartender makes tea, coffee and cocktails. Richtech Robotics also operate the world's first robot milk tea shop, ClouTea, in Las Vegas (www.cloutea.com), where all milk tea beverages are prepared by the ADAM robot. The delivery time will be one month for the delivery robot, 2 weeks for standard ADAM, and two months for commercial cleaning robot. \",\n    \"task_docs\": [{\n        \"source\": \"https://www.richtechrobotics.com/\",\n        \"num\": 20\n    }],\n    \"rag_docs\": [{\n        \"source\": \"https://www.richtechrobotics.com/\",\n        \"num\": 20\n    }],\n    \"tasks\": [],\n    \"workers\": [\n        {\"id\": \"9aa47724-0b77-4752-9528-cf4b06a46915\", \"name\": \"FaissRAGWorker\", \"path\": \"faiss_rag_worker.py\"},\n        {\"id\": \"26bb6634-3bee-417d-ad75-23269ac17bc3\", \"name\": \"MessageWorker\", \"path\": \"message_worker.py\"},\n        {\"id\": \"9c15af81-04b3-443e-be04-a3522124b905\", \"name\": \"SearchWorker\", \"path\": \"search_worker.py\"},\n        {\"id\": \"b06c2b58-12c5-41fe-9838-e93b530e42e8\", \"name\": \"DefaultWorker\", \"path\": \"default_worker.py\"}\n    ],\n    \"tools\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Registration Decorator Implementation in Python\nDESCRIPTION: Complete example of registering a tool with the register_tool decorator, including parameter slots and output definitions for cart management.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Tools.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@register_tool(\n    \"Add items to cart\",\n    [\n        {\n            \"name\": \"cart_id\",\n            \"type\": \"str\",\n            \"description\": \"Cart ID to add items to, such as '2938501948327'\",\n            \"prompt\": \"\",\n            \"required\": True,\n            \"verified\": True\n        },\n        {\n            \"name\": \"item_ids\",\n            \"type\": \"list\",\n            \"items\": \"tuples\"\n            \"description\": \"list of (item_id, quantity) tuples of Items to add to the cart such as [('41552094527601', 5), ('41552094494833', 10)].\",\n            \"prompt\": \"\",\n            \"required\": True,\n            \"verified\": True\n        }\n    ],\n    [{\n        \"name\": \"cart\",\n        \"type\": \"dict\",\n        \"description\": \"The cart information after adding, such as {'id': 'sample_cart', 'items': {'41552094527601': 5, '41552094494833': 10}}.\",\n    }],\n    lambda x: x is not None and x not in ERROR_MSGS\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Existing Method to Tool in Python\nDESCRIPTION: Example showing how to convert an existing calculation method into a tool using the register_tool decorator.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Tools.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ast import eval as calculate\n\nregister_tool(\n    \"Calculates and return the function output of mathematical query.\",\n    [{\n        \"name\": \"expression\",\n        \"type\": \"string\",\n        \"description\": \"valid math expression extracted from the user message expressed with only numerical digits and these special characters ['(', ')', '+', '-', '*', '/', '%', '^'], like '21 * 2'\",\n        \"prompt\": \"Could you please provide the mathematical expression?\",\n        \"required\": True\n    }],\n    [{\n        \"name\": \"result\",\n        \"type\": \"float\",\n        \"value\": \"\",\n        \"description\": \"result of evaluated mathematical expression like 42\",\n    }],\n    lambda x: isinstance(x, (int, float, complex)) and not isinstance(x, bool)\n)(\n    calculate\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Calculator Tool Implementation in Python\nDESCRIPTION: Example of implementing a custom calculator tool that evaluates mathematical expressions using the register_tool decorator.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Tools.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport ast\n\n@register_tool(\n    \"Calculates and return the function output of mathematical query.\",\n    [{\n        \"name\": \"expression\",\n        \"type\": \"string\",\n        \"description\": \"valid math expression extracted from the user message expressed with only numerical digits and these special characters ['(', ')', '+', '-', '*', '/', '%', '^'], like '21 * 2'\",\n        \"prompt\": \"Could you please provide the mathematical expression?\",\n        \"required\": True\n    }],\n    [{\n        \"name\": \"result\",\n        \"type\": \"float\",\n        \"value\": \"\",\n        \"description\": \"result of evaluated mathematical expression like 42\",\n    }],\n    lambda x: isinstance(x, (int, float, complex)) and not isinstance(x, bool)\n)\ndef calculator(expression):\n    py_expression = expression.replace(\"^\", \"**\")\n    return ast.eval(py_expression)\n```\n\n----------------------------------------\n\nTITLE: Initializing MessageWorker Class in Python\nDESCRIPTION: The constructor and action graph creation method for the MessageWorker class. Sets up the LLM model and creates a StateGraph with the generator node.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/MessageWorker.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self):\n    super().__init__()\n    self.llm = ChatOpenAI(model=MODEL[\"model_type_or_path\"], timeout=30000)\n    self.action_graph = self._create_action_graph()\n\ndef _create_action_graph(self):\n        workflow = StateGraph(MessageState)\n        # Add nodes for each worker\n        workflow.add_node(\"generator\", self.generator)\n        # Add edges\n        workflow.add_edge(START, \"generator\")\n        return workflow\n```\n\n----------------------------------------\n\nTITLE: Defining Taskgraph Structure for Hubspot Integration Chatbot in JSON\nDESCRIPTION: This JSON structure defines the nodes, edges, and configuration for a taskgraph used in a Hubspot-integrated chatbot. It includes various tasks like searching for customers, answering questions using RAG, creating tickets, and scheduling meetings.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/Hubspot.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nodes\": [\n    [\n      \"0\",\n      {\n        \"resource\": {\n          \"id\": \"be303c9a-a902-4de9-bbb2-61343e59e888\",\n          \"name\": \"MessageWorker\"\n        },\n        \"attribute\": {\n          \"value\": \"Hello! Welcome to Richtech. How can I assist you today?\",\n          \"task\": \"start message\",\n          \"directed\": false\n        },\n        \"limit\": 1,\n        \"type\": \"start\"\n      }\n    ],\n    [\n      \"1\",\n      {\n        \"resource\": {\n          \"id\": \"ddbe6adc-cd0e-40bc-8a95-91cb69ed807b\",\n          \"name\": \"search_customer\"\n        },\n        \"attribute\": {\n          \"value\": \"\",\n          \"task\": \"Detect whether this is the existing customer from our hubspot platform\",\n          \"directed\": false\n        },\n        \"limit\": 1\n      }\n    ],\n    [\n      \"2\",\n      {\n        \"resource\": {\n          \"id\": \"40f05456-525c-4d9d-ac37-54482d6b220b\",\n          \"name\": \"FaissRAGWorker\"\n        },\n        \"attribute\": {\n          \"value\": \"\",\n          \"task\": \"Retrieve information from the documentations to answer customer question\",\n          \"directed\": false\n        },\n        \"limit\": 1\n      }\n    ],\n    [\n      \"3\",\n      {\n        \"resource\": {\n          \"id\": \"ddbe6adc-cd0e-40bc-8a95-91cb69ed807b\",\n          \"name\": \"search_customer\"\n        },\n        \"attribute\": {\n          \"value\": \"\",\n          \"task\": \"Detect whether this is the existing customer from our hubspot platform\",\n          \"directed\": false\n        },\n        \"limit\": 1\n      }\n    ],\n    [\n      \"4\",\n      {\n        \"resource\": {\n          \"id\": \"aa8dd20d-fda7-475b-91ce-8c5fc356a2b7\",\n          \"name\": \"create_ticket\"\n        },\n        \"attribute\": {\n          \"value\": \"\",\n          \"task\": \"create the ticket for the existing customer\",\n          \"directed\": false\n        },\n        \"limit\": 1\n      }\n    ],\n    [\n      \"5\",\n      {\n        \"resource\": {\n          \"id\": \"ddbe6adc-cd0e-40bc-8a95-91cb69ed807b\",\n          \"name\": \"search_customer\"\n        },\n        \"attribute\": {\n          \"value\": \"\",\n          \"task\": \"Detect whether this is the existing customer from our hubspot platform\",\n          \"directed\": false\n        },\n        \"limit\": 1\n      }\n    ],\n    [\n      \"6\",\n      {\n        \"resource\": {\n          \"id\": \"11860b97-dfcf-4f1d-9e44-8767c50fd371\",\n          \"name\": \"find_owner_id_by_contact_id\"\n        },\n        \"attribute\": {\n          \"value\": \"\",\n          \"task\": \"find the owner id of the contact\",\n          \"directed\": false\n        },\n        \"limit\": 1\n      }\n    ],\n    [\n      \"7\",\n      {\n        \"resource\": {\n          \"id\": \"8a6784c2-a130-4eb4-9924-4f4c58f4bf9d\",\n          \"name\": \"check_available\"\n        },\n        \"attribute\": {\n          \"value\": \"\",\n          \"task\": \"Show customer the busy time the representative has\",\n          \"directed\": false\n        },\n        \"limit\": 1\n      }\n    ],\n    [\n      \"8\",\n      {\n        \"resource\": {\n          \"id\": \"e86daf21-41a3-40b2-9695-3ed59be46cc4\",\n          \"name\": \"create_meeting\"\n        },\n        \"attribute\": {\n          \"value\": \"\",\n          \"task\": \"schedule a meeting for the customer to the specific representative\",\n          \"directed\": false\n        },\n        \"limit\": 1\n      }\n    ]\n  ],\n  \"edges\": [\n    [\n      \"0\",\n      \"1\",\n      {\n        \"intent\": \"User has questions about the product\",\n        \"attribute\": {\n          \"weight\": 1,\n          \"pred\": true,\n          \"definition\": \"\",\n          \"sample_utterances\": []\n        }\n      }\n    ],\n    [\n      \"1\",\n      \"2\",\n      {\n        \"intent\": \"none\",\n        \"attribute\": {\n          \"weight\": 1,\n          \"pred\": true,\n          \"definition\": \"\",\n          \"sample_utterances\": []\n        }\n      }\n    ],\n    [\n      \"0\",\n      \"3\",\n      {\n        \"intent\": \"User need technical support/User need repair service / User need exchange service\",\n        \"attribute\": {\n          \"weight\": 1,\n          \"pred\": true,\n          \"definition\": \"\",\n          \"sample_utterances\": []\n        }\n      }\n    ],\n    [\n      \"3\",\n      \"4\",\n      {\n        \"intent\": \"none\",\n        \"attribute\": {\n          \"weight\": 1,\n          \"pred\": true,\n          \"definition\": \"\",\n          \"sample_utterances\": []\n        }\n      }\n    ],\n    [\n      \"0\",\n      \"5\",\n      {\n        \"intent\": \"User want to schedule a meeting with the representative\",\n        \"attribute\": {\n          \"weight\": 1,\n          \"pred\": true,\n          \"definition\": \"\",\n          \"sample_utterances\": []\n        }\n      }\n    ],\n    [\n      \"5\",\n      \"6\",\n      {\n        \"intent\": \"none\",\n        \"attribute\": {\n          \"weight\": 1,\n          \"pred\": true,\n          \"definition\": \"\",\n          \"sample_utterances\": []\n        }\n      }\n    ],\n    [\n      \"6\",\n      \"7\",\n      {\n        \"intent\": \"none\",\n        \"attribute\": {\n          \"weight\": 1,\n          \"pred\": true,\n          \"definition\": \"\",\n          \"sample_utterances\": []\n        }\n      }\n    ],\n    [\n      \"7\",\n      \"8\",\n      {\n        \"intent\": \"none\",\n        \"attribute\": {\n          \"weight\": 1,\n          \"pred\": true,\n          \"definition\": \"\",\n          \"sample_utterances\": []\n        }\n      }\n    ]\n  ],\n  \"role\": \"customer service assistant\",\n  \"user_objective\": \"The customer service assistant helps users with customer service inquiries. It can provide information about products, services, and policies, as well as help users resolve issues and complete transactions.\",\n  \"builder_objective\": \"The customer service assistant helps to request customer's contact information.\",\n  \"domain\": \"robotics and automation\",\n  \"intro\": \"Richtech Robotics's headquarter is in Las Vegas; the other office is in Austin. Richtech Robotics provide worker robots (ADAM, ARM, ACE), delivery robots (Matradee, Matradee X, Matradee L, Richie), cleaning robots (DUST-E SX, DUST-E MX) and multipurpose robots (skylark). Their products are intended for business purposes, but not for home purpose; the ADAM robot is available for purchase and rental for multiple purposes. This robot bartender makes tea, coffee and cocktails. Richtech Robotics also operate the world's first robot milk tea shop, ClouTea, in Las Vegas (www.cloutea.com), where all milk tea beverages are prepared by the ADAM robot. The delivery time will be one month for the delivery robot, 2 weeks for standard ADAM, and two months for commercial cleaning robot. \",\n  \"task_docs\": [\n  ],\n  \"rag_docs\": [\n  ],\n  \"tasks\": [],\n  \"tools\": [\n    {\n      \"id\": \"ddbe6adc-cd0e-40bc-8a95-91cb69ed807b\",\n      \"name\": \"find_contact_by_email\",\n      \"path\": \"hubspot.find_contact_by_email\",\n      \"fixed_args\": { \"access_token\": \"<access_token>\" }\n    },\n    {\n      \"id\": \"aa8dd20d-fda7-475b-91ce-8c5fc356a2b7\",\n      \"name\": \"create_ticket\",\n      \"path\": \"hubspot.create_ticket\",\n      \"fixed_args\": { \"access_token\": \"<access_token>\" }\n    },\n    {\n      \"id\": \"8a6784c2-a130-4eb4-9924-4f4c58f4bf9d\",\n      \"name\": \"check_available\",\n      \"path\": \"hubspot.check_available\",\n      \"fixed_args\": { \"access_token\": \"<access_token>\" }\n    },\n    {\n      \"id\": \"e86daf21-41a3-40b2-9695-3ed59be46cc4\",\n      \"name\": \"create_meeting\",\n      \"path\": \"hubspot.create_meeting\",\n      \"fixed_args\": { \"access_token\": \"<access_token>\" }\n    },\n    {\n      \"id\": \"1437160f-6036-4fc9-99db-0e45afabd03c\",\n      \"name\": \"find_owner_by_owner_id\",\n      \"path\": \"hubspot.find_owner_by_owner_id\",\n      \"fixed_args\": { \"access_token\": \"<access_token>\" }\n    },\n    {\n      \"id\": \"11860b97-dfcf-4f1d-9e44-8767c50fd371\",\n      \"name\": \"find_owner_id_by_contact_id\",\n      \"path\": \"hubspot.find_owner_id_by_contact_id\",\n      \"fixed_args\": { \"access_token\": \"<access_token>\" }\n    }\n  ],\n  \"workers\": [\n    {\n      \"id\": \"be303c9a-a902-4de9-bbb2-61343e59e888\",\n      \"name\": \"MessageWorker\",\n      \"path\": \"message_worker.py\"\n    },\n    {\n      \"id\": \"40f05456-525c-4d9d-ac37-54482d6b220b\",\n      \"name\": \"FaissRAGWorker\",\n      \"path\": \"faiss_rag_worker.py\"\n    },\n    {\n      \"id\": \"b10555ac-0930-42c0-9016-6605f956e411\",\n\n```\n\n----------------------------------------\n\nTITLE: Searching for Contacts by Email in Hubspot CRM using Python\nDESCRIPTION: This code snippet demonstrates how to search for a contact in Hubspot CRM using their email address. It uses the Hubspot API client to perform a search request and returns the contact's information if found.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/Hubspot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npublic_object_search_request = PublicObjectSearchRequest(\n        filter_groups=[\n            {\n                \"filters\": [\n                    {\n                        \"propertyName\": \"email\",\n                        \"operator\": \"EQ\",\n                        \"value\": email\n                    }\n                ]\n            }\n        ]\n    )\n\ntry:\n    contact_search_response = api_client.crm.contacts.search_api.do_search(public_object_search_request=public_object_search_request)\n    logger.info(\"Found contact by email: {}\".format(email))\n    contact_search_response = contact_search_response.to_dict()\n```\n\n----------------------------------------\n\nTITLE: Creating Communication Object for Hubspot Contact using Python\nDESCRIPTION: This code snippet shows how to create a communication object in Hubspot CRM for an existing contact. It uses the contact's ID and the chat content to create a new communication entry and associates it with the contact.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/Hubspot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif contact_search_response['total'] == 1:\n    contact_id = contact_search_response['results'][0]['id']\n    communication_data = SimplePublicObjectInputForCreate(\n        properties = {\n            \"hs_communication_channel_type\": \"CUSTOM_CHANNEL_CONVERSATION\",\n            \"hs_communication_body\": chat,\n            \"hs_communication_logged_from\": \"CRM\",\n            \"hs_timestamp\": datetime.now(timezone.utc).isoformat(),\n        }\n    )\n    contact_info_properties = {\n        'contact_id': contact_id,\n        'contact_email': email,\n        'contact_first_name': contact_search_response['results'][0]['properties'].get('firstname'),\n        'contact_last_name': contact_search_response['results'][0]['properties'].get('lastname')\n    }\n    try:\n        communication_creation_response = api_client.crm.objects.communications.basic_api.create(communication_data)\n        communication_creation_response = communication_creation_response.to_dict()\n```\n\n----------------------------------------\n\nTITLE: Scheduling Meeting with HubSpot API in Python\nDESCRIPTION: This snippet makes an API request to HubSpot to schedule a meeting. It includes error handling and returns the API response as JSON. The function uses the /scheduler/v3/meetings/meeting-links/book endpoint.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/Hubspot.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    try:\n        create_meeting_response = api_client.api_request(\n            {\n                \"path\": \"/scheduler/v3/meetings/meeting-links/book\",\n                \"method\": \"POST\",\n                \"body\": {\n                    \"slug\": slug,\n                    \"duration\": duration,\n                    \"startTime\": meeting_start_time,\n                    \"email\": cus_email,\n                    \"firstName\": cus_fname,\n                    \"lastName\": cus_lname,\n                    \"timezone\": time_zone,\n                    \"locale\": \"en-us\",\n                },\n                \"qs\": {\n                    'timezone': time_zone\n                }\n            }\n\n        )\n        create_meeting_response = create_meeting_response.json()\n        return json.dumps(create_meeting_response)\n    except ApiException as e:\n        logger.info(\"Exception when scheduling a meeting: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Support Ticket in Hubspot CRM\nDESCRIPTION: Creates a support ticket for an existing customer and associates it with their contact record. Uses timestamp-based subject naming and sets initial ticket properties including pipeline stage and content.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/Hubspot.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntimestamp = datetime.now().strftime(\"%Y-%m-%dT%H:%M:%S.%fZ\")[:-3] + \"Z\"\nsubject_name = \"Issue of \" + cus_cid + \" at \" + timestamp\nticket_properties = {\n    'hs_pipeline_stage': 1,\n    'content': issue,\n    'subject': subject_name\n}\nticket_for_create = SimplePublicObjectInputForCreate(properties=ticket_properties)\ntry:\n    ticket_creation_response = api_client.crm.tickets.basic_api.create(simple_public_object_input_for_create=ticket_for_create)\n    ticket_creation_response = ticket_creation_response.to_dict()\n```\n\n----------------------------------------\n\nTITLE: Configuring Booking Assistant JSON for Irish Repertory Theatre\nDESCRIPTION: This JSON configuration sets up a booking assistant for the Irish Repertory Theatre. It defines the bot's role, objectives, domain, and specifies the workers to be used, including MessageWorker, DataBaseWorker, and DefaultWorker.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/tutorials/booking-service.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"role\": \"booking assistant\",\n    \"user_objective\": \"The booking assistant helps users book tickets for the show. It can provide information about events, venues, and ticket availability, as well as help users complete the booking process. It can also provide recommendations based on user preferences.\",\n    \"builder_objective\": \"The booking assistant ask for user feedback at the end of the conversation.\",\n    \"domain\": \"Theatre\",\n    \"intro\": \"The mission of Irish Repertory Theatre is to provide a context for understanding the contemporary Irish-American experience through evocative works of theater, music, and dance. This mission is accomplished by staging the works of Irish and Irish-American classic and contemporary playwrights, encouraging the development of new works focused on the Irish and Irish-American experience, and producing the works of other cultures interpreted through the lens of an Irish sensibility.\",\n    \"task_docs\": [\n        {\n            \"source\": \"https://irishrep.org/\",\n            \"num\": 20\n        }\n    ],\n    \"tasks\": [],\n    \"workers\": [\n        {\"id\": \"26bb6634-3bee-417d-ad75-23269ac17bc3\", \"name\": \"MessageWorker\", \"path\": \"message_worker.py\"},\n        {\"id\": \"9c15af81-04b3-443e-be04-a3522124b905\", \"name\": \"DataBaseWorker\", \"path\": \"database_worker.py\"},\n        {\"id\": \"b06c2b58-12c5-41fe-9838-e93b530e42e8\", \"name\": \"DefaultWorker\", \"path\": \"default_worker.py\"}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Taskgraph with OpenAI in Python\nDESCRIPTION: This snippet demonstrates how to generate a taskgraph using OpenAI's language model. It requires setting the OPEN_API_KEY in the .env file and uses the create.py script with specific command-line arguments.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Config/ChatModels.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython create.py --config ./examples/customer_service_config.json --output-dir ./examples/customer_service --model gpt-4o-mini --llm-provider openai\n```\n\n----------------------------------------\n\nTITLE: Generating Taskgraph with Google Gemini in Python\nDESCRIPTION: This code snippet shows how to generate a taskgraph using Google Gemini's language model. It requires setting both GOOGLE_API_KEY and GEMINI_API_KEY in the .env file and uses the create.py script with specific command-line arguments.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Config/ChatModels.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython create.py --config ./examples/customer_service_config.json --output-dir ./examples/customer_service --model gemini-2.0-flash --llm-provider gemini\n```\n\n----------------------------------------\n\nTITLE: Running Bot with Anthropic in Python\nDESCRIPTION: This code snippet illustrates how to run a bot using Anthropic's language model. It requires setting the ANTHROPIC_API_KEY in the .env file and uses the run.py script with specific command-line arguments.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Config/ChatModels.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npython run.py --input-dir ./examples/customer_service --model claude-3-5-haiku-20241022 --llm-provider anthropic\n```\n\n----------------------------------------\n\nTITLE: Creating Taskgraph and Initializing Workers\nDESCRIPTION: Command to generate a task plan and task graph based on a configuration file. It initializes workers needed for the chatbot, such as RAGWorker and DataBaseWorker, and saves all generated files to the specified output directory.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython create.py --config ./examples/customer_service_config.json --output-dir ./examples/customer_service\n```\n\n----------------------------------------\n\nTITLE: Running Bot with Hugging Face in Python\nDESCRIPTION: This snippet demonstrates how to run a bot using Hugging Face's language model. It requires setting the HUGGINGFACE_API_KEY in the .env file and uses the run.py script with specific command-line arguments.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Config/ChatModels.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython run.py --input-dir ./examples/customer_service --model microsoft/Phi-3-mini-4k-instruct --llm-provider huggingface\n```\n\n----------------------------------------\n\nTITLE: Running TaskGraph-Based Agent in Python\nDESCRIPTION: Command to run the agent using the generated TaskGraph. It initializes necessary services and starts the interactive session with the agent.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/tutorials/customer-service.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython run.py --input-dir ./examples/customer_service\n```\n\n----------------------------------------\n\nTITLE: Initializing RAGWorker and Creating Action Graph in Python\nDESCRIPTION: The __init__ and _create_action_graph methods of the RAGWorker class. These methods set up the LLM model and create a StateGraph with nodes and edges for the retrieval and generation process.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/RAGWorker.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self):\n        super().__init__()\n        self.action_graph = self._create_action_graph()\n        self.llm = ChatOpenAI(model=MODEL[\"model_type_or_path\"], timeout=30000)\n     \ndef _create_action_graph(self):\n    workflow = StateGraph(MessageState)\n    # Add nodes for each worker\n    workflow.add_node(\"retriever\", RetrieveEngine.retrieve)\n    workflow.add_node(\"tool_generator\", ToolGenerator.context_generate)\n    # Add edges\n    workflow.add_edge(START, \"retriever\")\n    workflow.add_edge(\"retriever\", \"tool_generator\")\n    return workflow\n```\n\n----------------------------------------\n\nTITLE: Checking Meeting Availability in Hubspot\nDESCRIPTION: Retrieves meeting scheduler link and checks availability for a specific owner. Uses owner ID to fetch meeting links and then retrieves busy time slots for a given date and timezone.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/Hubspot.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmeeting_link_response = api_client.api_request(\n    {\n        \"path\": \"/scheduler/v3/meetings/meeting-links\",\n        \"method\": \"GET\",\n        \"headers\": {\n            'Content-Type': 'application/json'\n        },\n        \"qs\": {\n            'organizerUserId': owner_id\n        }\n    }\n)\nmeeting_link_response = meeting_link_response.json()\n\nif meeting_link_response.get('total') == 0:\n    return MEETING_LINK_UNFOUND_ERROR\nelse:\n    meeting_links = meeting_link_response['results'][0]\n```\n\n----------------------------------------\n\nTITLE: Starting the Agent API Server for Customer Service Chatbot Evaluation\nDESCRIPTION: Command to start an API server for the agent at the default port 8000. This server will handle the dialogue system interactions during evaluation. It requires specifying the input directory containing necessary orchestrator files and worker documents.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Evaluation/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython model_api.py  --input-dir ./examples/customer_service\n```\n\n----------------------------------------\n\nTITLE: Configuring Roleplay Bot JSON Settings\nDESCRIPTION: Configuration file for setting up a roleplay villain bot that acts as an evil dragon. Defines the bot's role, objectives, and required MessageWorker for handling conversations.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/tutorials/roleplay-agent.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"role\": \"roleplay villain\",\n    \"user_objective\": \"The villain is a talking big evil red dragon that is trying to stop the user from finishing their quest to retrieve the holy grail. It is deadly and have killed many knights and heros in the past.\",\n    \"builder_objective\": \"\",\n    \"domain\": \"action roleplay\",\n    \"intro\": \"\",\n    \"docs\": [],\n    \"tasks\": [],\n    \"workers\": [\n        {\"id\": \"9244468a-5b0a-4bd2-99aa-650f0efeb0ac\", \"name\": \"MessageWorker\", \"path\": \"message_worker.py\"}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Dialogue System Evaluation Process\nDESCRIPTION: Command to initiate the evaluation process for the dialogue system. It connects to the previously established API server and uses configuration files to generate synthetic conversations for testing. Various parameters control the evaluation scope and output locations.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Evaluation/intro.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython eval.py \\\n--model_api http://127.0.0.1:8000/eval/chat \\\n--config ./examples/customer_service_config.json \\\n--documents_dir ./examples/customer_service \\\n--output-dir ./examples/customer_service\n```\n\n----------------------------------------\n\nTITLE: Visualizing DefaultWorker Flow with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the process flow of the DefaultWorker, showing how it chooses from available workers and executes the selected worker.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/DefaultWorker.mdx#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR;\n    input[\"input\"]\n\n    subgraph DefaultWorker\n        direction LR\n        choose[\"_choose_worker()\"]-.->Workers\n        subgraph Workers\n            direction LR\n            workerA[\"Worker A\"]\n            workerB[\"Worker B\"]\n            workerDot[\"...\"]\n            workerX[\"Worker X\"]\n        end\n    end\n\n    input --> choose\n    Workers --\"[worker].execute()\"--> response\n```\n\n----------------------------------------\n\nTITLE: Sample Conversation Bot Execution in Python\nDESCRIPTION: This code snippet shows how to run a sample conversation bot using Anthropic's language model. It uses the run.py script with specific command-line arguments to demonstrate a customer service interaction.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Config/ChatModels.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npython run.py --input-dir ./examples/customer_service --model claude-3-5-haiku-20241022 --llm-provider anthropic\n```\n\n----------------------------------------\n\nTITLE: Visualizing MessageWorker Flow with Mermaid Diagram\nDESCRIPTION: A mermaid diagram showing the simple two-node structure of MessageWorker, with a start node connecting to the generator node.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/MessageWorker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n    start[\"START\"]--\"generator()\"-->generator[\"generator\"];\n```\n\n----------------------------------------\n\nTITLE: Sample Conversation with SearchWorker in JSON\nDESCRIPTION: A sample conversation demonstrating the SearchWorker in action, showing a user query about Formula 1 results and the bot's response based on retrieved information.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/SearchWorker.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nBot: Hello! How can I help you today?\nYou: I want to know the latest gaming result of Formula 1.\nBot: The latest gaming result from Formula 1 is that Charles Leclerc won the United States Grand Prix, with Ferrari achieving a one-two finish. Max Verstappen finished behind the Ferrari drivers.\n```\n\n----------------------------------------\n\nTITLE: Initializing SearchWorker in Python\nDESCRIPTION: Code snippet showing the initialization of SearchWorker, including the constructor and the creation of the action graph with nodes and edges.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/SearchWorker.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self):\n        super().__init__()\n        self.action_graph = self._create_action_graph()\n        self.llm = ChatOpenAI(model=MODEL[\"model_type_or_path\"], timeout=30000)\n\ndef _create_action_graph(self):\n    workflow = StateGraph(MessageState)\n    # Add nodes for each worker\n    search_engine = SearchEngine()\n    workflow.add_node(\"search_engine\", search_engine.search)\n    workflow.add_node(\"tool_generator\", ToolGenerator.context_generate)\n    # Add edges\n    workflow.add_edge(START, \"search_engine\")\n    workflow.add_edge(\"search_engine\", \"tool_generator\")\n    return workflow\n```\n\n----------------------------------------\n\nTITLE: Retrieving Owner ID from Contact in Hubspot\nDESCRIPTION: Fetches the owner ID associated with a contact record using Hubspot's CRM API. Makes a GET request to contacts endpoint with specific property filter.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/Hubspot.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nget_owner_id_response = api_client.api_request(\n        {\n            \"path\": \"/crm/v3/objects/contacts/{}\".format(cus_cid),\n            \"method\": \"GET\",\n            \"headers\": {\n                'Content-Type': 'application/json'\n            },\n            \"qs\": {\n                \"properties\": 'hubspot_owner_id'\n            }\n        }\n\n    )\nget_owner_id_response = get_owner_id_response.json()\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Parameter Slots in Python\nDESCRIPTION: Example showing how to define parameter slots for a cart management tool. Demonstrates slot structure with required fields like name, type, description, and verification status.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Tools.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[\n    {\n        \"name\": \"cart_id\",\n        \"type\": \"str\",\n        \"description\": \"Cart ID to add items to, such as '2938501948327'\",\n        \"prompt\": \"\",\n        \"required\": True,\n        \"verified\": True\n    },\n    {\n        \"name\": \"item_ids\",\n        \"type\": \"list\",\n        \"items\": \"tuples\"\n        \"description\": \"list of (item_id, quantity) tuples of Items to add to the cart such as [('41552094527601', 5), ('41552094494833', 10)].\",\n        \"prompt\": \"\",\n        \"required\": True,\n        \"verified\": True\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Tool Output Definition Example in Python\nDESCRIPTION: Example showing how to define the output structure for a tool that returns user information.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Tools.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n[{\n   \"name\": \"user_id\",\n   \"type\": \"string\",\n   \"description\": \"The user id of the user. such as '13573257450893'.\",\n}]\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component from Docusaurus Theme\nDESCRIPTION: This code imports the DocCardList component from the Docusaurus theme package. This component is used to automatically generate a list of documentation cards based on the available documentation pages in the current section.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Running the Chatbot\nDESCRIPTION: Command to start the chatbot using the previously generated files. It automatically starts necessary services like NLUModelAPI and SlotFillModelAPI, then launches the agent for user interaction.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython run.py --input-dir ./examples/customer_service\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker and API Endpoints in JSON\nDESCRIPTION: This snippet defines a worker configuration with a name and path, along with empty API endpoint strings for NLU and slotfill services.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/Hubspot.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n  \"name\": \"DefaultWorker\",\n  \"path\": \"default_worker.py\"\n},\n\"nluapi\": \"\",\n\"slotfillapi\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Parameters for User Simulator\nDESCRIPTION: Command line parameters for controlling synthetic conversation generation, including number of conversations, goals, maximum turns per conversation, and the OpenAI model type for utterance synthesis.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Evaluation/UserSimulator.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `--num_convos`: Number of synthetic conversations to simulate. Default is 5.\n* `--num_goals`: Number of goals/tasks to simulate. Default is 5.\n* `--max_turns`: Maximum number of turns per conversation. Default is 5.\n* `--model`: The openai model type used to synthesize user's utterance. Default is `gpt-4o`. You could change it to other models like `gpt-4o-mini`.\n```\n\n----------------------------------------\n\nTITLE: Rendering Workers Documentation List with DocCardList Component\nDESCRIPTION: This JSX snippet embedded in Markdown renders the DocCardList component to display all available documentation pages under the Workers section, creating a navigable index for users.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/intro.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Associating Ticket with Contact in Hubspot\nDESCRIPTION: Associates a newly created ticket with an existing contact record using Hubspot's association API. Uses HUBSPOT_DEFINED association category with type ID 15.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/Hubspot.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nticket_id = ticket_creation_response['id']\nassociation_spec = [\n  AssociationSpec(\n              association_category=\"HUBSPOT_DEFINED\",\n              association_type_id=15\n      )\n]\ntry:\n  association_creation_response = api_client.crm.associations.v4.basic_api.create(\n      object_type=\"contact\",\n      object_id=cus_cid,\n      to_object_type=\"ticket\",\n      to_object_id=ticket_id,\n      association_spec=association_spec\n  )\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList Component in React\nDESCRIPTION: This code snippet imports the DocCardList component from the '@theme/DocCardList' module and renders it within a React component. The DocCardList is likely used to display a list of documentation or tutorial cards.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/tutorials/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n\n# Tutorials\n\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Example Worker Execution Implementation in Python\nDESCRIPTION: Example implementation of the execute method showing how to invoke a LangChain StateGraph with a MessageState input and return the processed result.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/Workers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef execute(self, msg_state: MessageState):\n    graph = self.action_graph.compile()\n    result = graph.invoke(msg_state)\n    return result\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Environment Setup via NVM\nDESCRIPTION: Commands to install Node Version Manager (nvm), set up Node.js v22, and verify the installation of Node.js and npm\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# installs nvm (Node Version Manager)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash\n\n# download and install Node.js (you may need to restart the terminal)\nnvm install 22\n\n# verifies the right Node.js version is in the environment\nnode -v # should print `v22.11.0`\n\n# verifies the right npm version is in the environment\nnpm -v # should print `10.9.0`\n```\n\n----------------------------------------\n\nTITLE: Generating TaskGraph from Config File in Python\nDESCRIPTION: Command to generate a TaskGraph from a configuration file. It initiates an interactive task planning panel and creates the final TaskGraph file along with RAG documents.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/tutorials/customer-service.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython create.py --config ./examples/customer_service_config.json --output-dir ./examples/customer_service\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for Production\nDESCRIPTION: Command to build the static files for production deployment, generating HTML, JavaScript, and CSS files in the build folder\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Testing Production Build Locally\nDESCRIPTION: Command to serve the production build locally for testing before deployment\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Running Evaluation of Chatbot Performance\nDESCRIPTION: Command to evaluate the chatbot by simulating synthetic conversations. It tests the bot's ability to handle various goals and tasks, measuring performance across multiple conversation turns, and saves results to the specified directory.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython eval.py \\\n--model_api http://127.0.0.1:8000/eval/chat \\\n--config ./examples/customer_service_config.json \\\n--documents_dir ./examples/customer_service \\\n--output-dir ./examples/customer_service\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Site for Production\nDESCRIPTION: Command to build the Docusaurus site and generate static files in the build folder.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/deploy-your-site.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Testing Production Build Locally\nDESCRIPTION: Command to serve the built static site locally at http://localhost:3000/ for testing purposes.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/deploy-your-site.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Generating Taskgraph with Anthropic in Python\nDESCRIPTION: This snippet illustrates how to generate a taskgraph using Anthropic's language model. It requires setting the ANTHROPIC_API_KEY in the .env file and uses the create.py script with specific command-line arguments.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Config/ChatModels.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython create.py --config ./examples/customer_service_config.json --output-dir ./examples/customer_service --model claude-3-5-haiku-20241022 --llm-provider anthropic\n```\n\n----------------------------------------\n\nTITLE: Running Bot with OpenAI in Python\nDESCRIPTION: This code snippet demonstrates how to run a bot using OpenAI's language model. It requires setting the OPEN_API_KEY in the .env file and uses the run.py script with specific command-line arguments.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Config/ChatModels.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython run.py --input-dir ./examples/customer_service --model gpt-4o-mini --llm-provider openai\n```\n\n----------------------------------------\n\nTITLE: Generating New Docusaurus Site with Classic Template\nDESCRIPTION: Command to create a new Docusaurus site using the classic template. This initializes a new project and installs all necessary dependencies.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init docusaurus@latest my-website classic\n```\n\n----------------------------------------\n\nTITLE: Running Bot with Google Gemini in Python\nDESCRIPTION: This snippet shows how to run a bot using Google Gemini's language model. It requires setting both GOOGLE_API_KEY and GEMINI_API_KEY in the .env file and uses the run.py script with specific command-line arguments.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Config/ChatModels.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npython run.py --input-dir ./examples/customer_service --model gemini-2.0-flash-lite --llm-provider gemini\n```\n\n----------------------------------------\n\nTITLE: Creating a Docs Version in Docusaurus using npm\nDESCRIPTION: Command to create a version 1.0 of documentation in Docusaurus. This copies the docs folder into versioned_docs/version-1.0 and creates a versions.json file.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-extras/manage-docs-versions.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus docs:version 1.0\n```\n\n----------------------------------------\n\nTITLE: Starting API for Agent Evaluation in Python\nDESCRIPTION: Command to create an API for the agent, which is necessary for automated evaluation. It starts an API server on the default port 8000.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/tutorials/customer-service.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython model_api.py  --input-dir ./examples/customer_service\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Markdown Document in Docusaurus\nDESCRIPTION: This snippet shows how to create a simple Markdown document for Docusaurus. It creates a hello.md file with a basic structure including a heading and formatted text.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/create-a-document.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello\n\nThis is my **first Docusaurus document**!\n```\n\n----------------------------------------\n\nTITLE: Customizing Document Sidebar Properties in Docusaurus\nDESCRIPTION: This snippet demonstrates how to add metadata to a Markdown document to customize its sidebar appearance. It includes properties for sidebar_label and sidebar_position to control how the document appears in the navigation.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/create-a-document.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_label: 'Hi!'\nsidebar_position: 3\n---\n\n# Hello\n\nThis is my **first Docusaurus document**!\n```\n\n----------------------------------------\n\nTITLE: Running Evaluation Script for Agent in Python\nDESCRIPTION: Command to start the evaluation process. It generates synthetic conversations and extracts task completion metrics for evaluating the agent's performance.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/tutorials/customer-service.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython eval.py \\\n--model_api http://127.0.0.1:8000/eval/chat \\\n--config ./examples/customer_service_config.json \\\n--documents_dir ./examples/customer_service \\\n--output_dir ./examples/customer_service\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit Sidebar Structure in Docusaurus\nDESCRIPTION: This JavaScript snippet shows how to manually configure the sidebar in Docusaurus using the sidebars.js file. It defines a custom structure with individual documents and a category containing nested documents.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/create-a-document.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  tutorialSidebar: [\n    'intro',\n    // highlight-next-line\n    'hello',\n    {\n      type: 'category',\n      label: 'Tutorial',\n      items: ['tutorial-basics/create-a-document'],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Page in Docusaurus (MDX)\nDESCRIPTION: This code shows how to create a simple Markdown page in Docusaurus. The file should be saved at src/pages/my-markdown-page.md and will be automatically available at http://localhost:3000/my-markdown-page.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/create-a-page.md#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n# My Markdown page\n\nThis is a Markdown page\n```\n\n----------------------------------------\n\nTITLE: Installing Arklex Framework via pip\nDESCRIPTION: Command to install the Arklex framework using pip package manager. This is the simplest way to get started with the framework.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install arklex\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Blog Post in Docusaurus with Markdown\nDESCRIPTION: This snippet demonstrates how to create a basic blog post in Docusaurus using Markdown. It includes frontmatter configuration for slug, title, authors (with their details like name, title, URL, and image), and tags. The post content consists of simple congratulatory text.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/create-a-blog-post.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: greetings\ntitle: Greetings!\nauthors:\n  - name: Joel Marcey\n    title: Co-creator of Docusaurus 1\n    url: https://github.com/JoelMarcey\n    image_url: https://github.com/JoelMarcey.png\n  - name: Sébastien Lorber\n    title: Docusaurus maintainer\n    url: https://sebastienlorber.com\n    image_url: https://github.com/slorber.png\ntags: [greetings]\n---\n\nCongratulations, you have made your first post!\n\nFeel free to play around and edit this post as much as you like.\n```\n\n----------------------------------------\n\nTITLE: Building Localized Site\nDESCRIPTION: Commands to build the website either for a specific locale (French) or for all configured locales.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-extras/translate-your-site.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build -- --locale fr\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting Model API Server for Evaluation\nDESCRIPTION: Command to create an API server for the chatbot, which runs on port 8000 by default. This API is required for the evaluation process to simulate conversations with the bot.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython model_api.py  --input-dir ./examples/customer_service\n```\n\n----------------------------------------\n\nTITLE: Creating Links in Markdown for Docusaurus\nDESCRIPTION: Demonstrates how to create links in Markdown using both URL paths and relative file paths. These links can be used to navigate between pages in the documentation.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/markdown-features.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLet's see how to [Create a page](/create-a-page).\n```\n\nLANGUAGE: markdown\nCODE:\n```\nLet's see how to [Create a page](./create-a-page.md).\n```\n\n----------------------------------------\n\nTITLE: Inserting Images in Markdown for Docusaurus\nDESCRIPTION: Shows how to insert images in Markdown using both absolute paths to the static directory and relative paths. This is useful for including visuals in the documentation.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/markdown-features.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Docusaurus logo](/img/docusaurus.png)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n![Docusaurus logo](./img/docusaurus.png)\n```\n\n----------------------------------------\n\nTITLE: Associating Communication with Contact in Hubspot CRM using Python\nDESCRIPTION: This code snippet demonstrates how to associate a newly created communication object with an existing contact in Hubspot CRM. It uses the Hubspot API client to create an association between the communication and the contact.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/Hubspot.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncommunication_id = communication_creation_response['id']\nassociation_spec = [\n    AssociationSpec(\n            association_category=\"HUBSPOT_DEFINED\",\n            association_type_id=82\n        )\n]\ntry:\n    association_creation_response = api_client.crm.associations.v4.basic_api.create(\n            object_type=\"contact\",\n            object_id=contact_id,\n            to_object_type=\"communication\",\n            to_object_id=communication_id,\n            association_spec=association_spec\n    )\n```\n\n----------------------------------------\n\nTITLE: Markdown Blog Post Frontmatter\nDESCRIPTION: YAML frontmatter section defining blog post metadata including slug, title, authors and tags\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/blog/2019-05-29-long-blog-post.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: long-blog-post\ntitle: Long Blog Post\nauthors: yangshun\ntags: [hello, docusaurus]\n---\n```\n\n----------------------------------------\n\nTITLE: Validating Meeting Time Slots in Python\nDESCRIPTION: This snippet parses and validates the meeting time against unavailable time slots. It converts input times to timestamps and checks for conflicts with existing appointments.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/Hubspot.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    meeting_date = parse_natural_date(meeting_date, timezone=time_zone, date_input=True)\n    meeting_start_time = parse_natural_date(meeting_start_time, meeting_date, timezone=time_zone)\n    meeting_start_time = int(meeting_start_time.timestamp() * 1000)\n\n\n    duration = int(duration)\n    duration = int(timedelta(minutes=duration).total_seconds() * 1000)\n\n    meeting_end_time = meeting_start_time + duration\n\n    bt_slots_ux = json.loads(bt_slots_ux)\n    for time_slot in bt_slots_ux:\n        if meeting_start_time >= time_slot['start'] and meeting_start_time < time_slot['end']:\n            return UNAVAILABLE_ERROR\n        elif meeting_end_time >= time_slot['start'] and meeting_end_time <= time_slot['end']:\n            return UNAVAILABLE_ERROR\n```\n\n----------------------------------------\n\nTITLE: Listing JSON Files for Mock Databases\nDESCRIPTION: This snippet lists the JSON files used for storing mock data, including users, products, and orders. Each file represents a database with specific attributes.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/benchmark/tau_bench/envs/retail/data/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"users.json\": \"a database of users with their emails, addresses, and orders\",\n\"products.json\": \"a database of products, where each product has variants (e.g., size, color).\",\n\"orders.json\": \"a database of orders that can be operated upon.\"\n```\n\n----------------------------------------\n\nTITLE: Sample Conversation Flow JSON\nDESCRIPTION: Example conversation demonstrating the interaction between user and bot for searching and booking shows, including slot filling and action verification.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/DatabaseWorker.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Bot\": \"Hello! How can I help you today?\",\n  \"You\": \"Do you have recommendation for shows?\",\n  \"Bot\": \"Could you let me know your preferences or any specific details you're looking for in an event, like the type of show, location, or date?\",\n  \"You\": \"I want to watch the magic flute.\",\n  \"Bot\": \"Based on your interest in \\\"The Magic Flute,\\\" here are some available shows for you to consider. They are all taking place at the Lyric Opera of Chicago in Chicago, IL. The performances are scheduled for November 15th, 20th, and 25th, 2024, each starting at 6:30 PM. This whimsical opera by Wolfgang Amadeus Mozart is priced at $130 per ticket. Please let me know if any of these options appeal to you.\",\n  \"You\": \"I want to watch it on Nov 25.\",\n  \"Bot\": \"Are you interested in exploring more options, or would you like help with booking the show on November 25th?\",\n  \"You\": \"Book the show.\",\n  \"Bot\": \"The show has been booked. Thank you for using our service today! We would love to hear your feedback on how we can improve. Do you have any comments or suggestions?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing MessageWorker with StateGraph in Python\nDESCRIPTION: The execute method that invokes the StateGraph on a MessageState object, running the generator node and returning the result.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/MessageWorker.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef execute(self, msg_state: MessageState):\n    graph = self.action_graph.compile()\n    result = graph.invoke(msg_state)\n    return result\n```\n\n----------------------------------------\n\nTITLE: Visualizing RAGWorker Flow with Mermaid\nDESCRIPTION: A Mermaid graph showing the flow of data through the RAGWorker, from the start node to the retriever and finally to the tool generator.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/RAGWorker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n    start[\"START\"]--\"retrieve()\"-->retriever[\"retriever\"]--\"context_generate()\"-->tool_generator[\"tool_generator\"];\n```\n\n----------------------------------------\n\nTITLE: Visualizing SearchWorker Flow with Mermaid\nDESCRIPTION: A mermaid diagram that shows the workflow of SearchWorker, illustrating the flow from start to search_engine and then to tool_generator.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/SearchWorker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n    start[\"START\"]--\"search()\"-->search_engine[\"search_engine\"]--\"context_generate()\"-->tool_generator[\"tool_generator\"];\n```\n\n----------------------------------------\n\nTITLE: Creating a React Page in Docusaurus (JSX)\nDESCRIPTION: This code demonstrates how to create a basic React page in Docusaurus that includes a layout component. The file should be saved at src/pages/my-react-page.js and will be automatically available at http://localhost:3000/my-react-page.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/create-a-page.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport Layout from '@theme/Layout';\n\nexport default function MyReactPage() {\n  return (\n    <Layout>\n      <h1>My React page</h1>\n      <p>This is a React page</p>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating React Components in Markdown using MDX in Docusaurus\nDESCRIPTION: Demonstrates how to use MDX to include React components within Markdown content. This example creates an interactive Highlight component that changes color and displays an alert on click.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/markdown-features.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '20px',\n      color: '#fff',\n      padding: '10px',\n      cursor: 'pointer',\n    }}\n    onClick={() => {\n      alert(`You clicked the color ${color} with label ${children}`)\n    }}>\n    {children}\n  </span>\n);\n\nThis is <Highlight color=\"#25c2a0\">Docusaurus green</Highlight> !\n\nThis is <Highlight color=\"#1877F2\">Facebook blue</Highlight> !\n```\n\n----------------------------------------\n\nTITLE: Database Schema SQL Tables Definition\nDESCRIPTION: SQL schema definitions for three core tables (show, user, booking) that form the show booking database structure. Includes column specifications, data types, and relationships.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/DatabaseWorker.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE show (\n  id VARCHAR(40) PRIMARY KEY,\n  show_name VARCHAR(100),\n  genre VARCHAR(40),\n  date DATE,\n  time TIME,\n  description TEXT,\n  location VARCHAR(100),\n  price DECIMAL,\n  available_seats INTEGER\n);\n\nCREATE TABLE user (\n  id VARCHAR(40) PRIMARY KEY,\n  first_name VARCHAR(40),\n  last_name VARCHAR(40),\n  email VARCHAR(60),\n  register_at TIMESTAMP,\n  last_login TIMESTAMP\n);\n\nCREATE TABLE booking (\n  id VARCHAR(40) PRIMARY KEY,\n  show_id VARCHAR(40) REFERENCES show(id),\n  user_id VARCHAR(40) REFERENCES user(id),\n  created_at TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Using Admonitions in Docusaurus Markdown\nDESCRIPTION: Shows how to create admonitions and callouts in Docusaurus using a special Markdown syntax. This is useful for highlighting important information or warnings in the documentation.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/markdown-features.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n:::tip My tip\n\nUse this awesome feature option\n\n:::\n\n:::danger Take care\n\nThis action is dangerous\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseWorker Class in Python\nDESCRIPTION: Abstract base class for all Workers that defines the fundamental structure with a description attribute and execute method. Workers process MessageState inputs and return StateGraph outputs using LangChain.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Workers/Workers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BaseWorker(ABC):\n    \n    description = None\n\n    def __str__(self):\n        return f\"{self.__class__.__name__}\"\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}\"\n    \n    @abstractmethod\n    def execute(self, msg_state: MessageState):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks with Syntax Highlighting in Docusaurus\nDESCRIPTION: Demonstrates how to create code blocks with syntax highlighting in Markdown. This example shows a JSX code block with a title, which is useful for displaying and explaining code snippets.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/markdown-features.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HelloDocusaurus() {\n  return <h1>Hello, Docusaurus!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter in Markdown for Docusaurus\nDESCRIPTION: Shows how to add metadata to a Markdown document using front matter. This includes setting the document ID, title, description, and custom URL slug.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-basics/markdown-features.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n---\nid: my-doc-id\ntitle: My document title\ndescription: My document description\nslug: /my-custom-url\n---\n\n## Markdown heading\n\nMarkdown text with [links](./hello.md)\n```\n\n----------------------------------------\n\nTITLE: Adding a Version Dropdown to Docusaurus Navigation\nDESCRIPTION: Configuration code to add a version dropdown menu to the Docusaurus navbar. This enables users to navigate between different versions of documentation.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-extras/manage-docs-versions.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'docsVersionDropdown',\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Dropdown to Navigation\nDESCRIPTION: Adds a language selection dropdown to the navigation bar by modifying the theme configuration in docusaurus.config.js.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-extras/translate-your-site.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'localeDropdown',\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Localized Development Server\nDESCRIPTION: Command to start the Docusaurus development server with French locale configuration.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-extras/translate-your-site.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start -- --locale fr\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Directory Structure\nDESCRIPTION: Shell commands to create the necessary directory structure for French translations and copy the source file for translation.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-extras/translate-your-site.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p i18n/fr/docusaurus-plugin-content-docs/current/\n\ncp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Settings in Docusaurus\nDESCRIPTION: Configures the Docusaurus i18n settings to support English and French locales by modifying the docusaurus.config.js file.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/tutorial-extras/translate-your-site.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  i18n: {\n    defaultLocale: 'en',\n    locales: ['en', 'fr'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Development Server\nDESCRIPTION: Commands to navigate to the project directory and start the local development server. The server runs at http://localhost:3000/ and supports hot reloading for changes.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Example/intro.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-website\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in React/JSX\nDESCRIPTION: Imports the DocCardList component from the theme system and renders it within a documentation page layout with a markdown header.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/docs/Integration/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n# Integration\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the local development server that serves the documentation site at http://localhost:3000/\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Dependencies\nDESCRIPTION: Commands to navigate to the docs directory and install required Docusaurus dependencies\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd docs # navigate to the docs folder from the root directory: AgentOrg/docs\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Button with React in MDX\nDESCRIPTION: This snippet demonstrates how to create an interactive button using React JSX within an MDX blog post. It uses an inline onClick event handler to display an alert when clicked.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/blog/2021-08-01-mdx-blog-post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Blog Post Truncation Comment\nDESCRIPTION: HTML comment used to specify where the blog post preview should be truncated in list views\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/blog/2019-05-29-long-blog-post.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- truncate -->\n```\n\n----------------------------------------\n\nTITLE: Adding Truncation Point in Docusaurus Blog Post\nDESCRIPTION: Inserts the truncate comment directive in a Docusaurus blog post. This HTML comment marks where the post should be cut off in list views, with the content before it serving as the post excerpt.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/blog/2019-05-28-first-blog-post.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- truncate -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Docusaurus Blog Post Frontmatter in Markdown\nDESCRIPTION: Defines the metadata for a Docusaurus blog post using YAML frontmatter. It specifies the slug, title, authors array, and tags array that Docusaurus uses to generate the blog post page and related navigation.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/blog/2019-05-28-first-blog-post.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nslug: first-blog-post\ntitle: First Blog Post\nauthors: [slorber, yangshun]\ntags: [hola, docusaurus]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Page Front Matter\nDESCRIPTION: Basic markdown front matter structure defining the page title using YAML syntax.\nSOURCE: https://github.com/arklexai/agent-first-organization/blob/main/docs/src/pages/markdown-page.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Markdown page example\n---\n```"
  }
]