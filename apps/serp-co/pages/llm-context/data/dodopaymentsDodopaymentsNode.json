[
  {
    "owner": "dodopayments",
    "repo": "dodopayments-node",
    "content": "TITLE: Payment API Methods\nDESCRIPTION: Core payment API methods including create, retrieve and list operations for handling payment transactions.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/api.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.payments.create({ ...params }) -> PaymentCreateResponse\nclient.payments.retrieve(paymentId) -> Payment\nclient.payments.list({ ...params }) -> PaymentListResponsesDefaultPageNumberPagination\n```\n\n----------------------------------------\n\nTITLE: Basic Payment Creation with DodoPayments (JavaScript)\nDESCRIPTION: Example of initializing the DodoPayments client and creating a payment in JavaScript. The code demonstrates setting the API key, configuring the environment, and making a payment request.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DodoPayments from 'dodopayments';\n\nconst client = new DodoPayments({\n  bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted\n  environment: 'test_mode', // defaults to 'live_mode'\n});\n\nasync function main() {\n  const payment = await client.payments.create({\n    billing: { city: 'city', country: 'AF', state: 'state', street: 'street', zipcode: 'zipcode' },\n    customer: { customer_id: 'customer_id' },\n    product_cart: [{ product_id: 'product_id', quantity: 0 }],\n  });\n\n  console.log(payment.payment_id);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Payment Creation with Type Definitions (TypeScript)\nDESCRIPTION: TypeScript example showing how to use the library's type definitions for request parameters and response fields when creating a payment.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport DodoPayments from 'dodopayments';\n\nconst client = new DodoPayments({\n  bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted\n  environment: 'test_mode', // defaults to 'live_mode'\n});\n\nasync function main() {\n  const params: DodoPayments.PaymentCreateParams = {\n    billing: { city: 'city', country: 'AF', state: 'state', street: 'street', zipcode: 'zipcode' },\n    customer: { customer_id: 'customer_id' },\n    product_cart: [{ product_id: 'product_id', quantity: 0 }],\n  };\n  const payment: DodoPayments.PaymentCreateResponse = await client.payments.create(params);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Subscription API Methods\nDESCRIPTION: Subscription management methods for creating, retrieving, updating, listing and charging subscriptions.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/api.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.subscriptions.create({ ...params }) -> SubscriptionCreateResponse\nclient.subscriptions.retrieve(subscriptionId) -> Subscription\nclient.subscriptions.update(subscriptionId, { ...params }) -> Subscription\nclient.subscriptions.list({ ...params }) -> SubscriptionsDefaultPageNumberPagination\nclient.subscriptions.charge(subscriptionId, { ...params }) -> SubscriptionChargeResponse\n```\n\n----------------------------------------\n\nTITLE: Customer Management Methods\nDESCRIPTION: Customer-related operations including CRUD operations and customer portal session management.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/api.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.customers.create({ ...params }) -> Customer\nclient.customers.retrieve(customerId) -> Customer\nclient.customers.update(customerId, { ...params }) -> Customer\nclient.customers.list({ ...params }) -> CustomersDefaultPageNumberPagination\nclient.customers.customerPortal.create(customerId, { ...params }) -> CustomerPortalSession\n```\n\n----------------------------------------\n\nTITLE: Installing DodoPayments Node Library\nDESCRIPTION: Command to install the DodoPayments library from npm.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install dodopayments\n```\n\n----------------------------------------\n\nTITLE: Error Handling with DodoPayments\nDESCRIPTION: Example demonstrating how to handle API errors when using the DodoPayments library, including accessing error status, name, and headers.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const payment = await client.payments\n    .create({\n      billing: { city: 'city', country: 'AF', state: 'state', street: 'street', zipcode: 'zipcode' },\n      customer: { customer_id: 'customer_id' },\n      product_cart: [{ product_id: 'product_id', quantity: 0 }],\n    })\n    .catch(async (err) => {\n      if (err instanceof DodoPayments.APIError) {\n        console.log(err.status); // 400\n        console.log(err.name); // BadRequestError\n        console.log(err.headers); // {server: 'nginx', ...}\n      } else {\n        throw err;\n      }\n    });\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: License Management Methods\nDESCRIPTION: Methods for handling software license operations including activation, deactivation and validation.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/api.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.licenses.activate({ ...params }) -> LicenseKeyInstance\nclient.licenses.deactivate({ ...params }) -> void\nclient.licenses.validate({ ...params }) -> LicenseValidateResponse\n```\n\n----------------------------------------\n\nTITLE: Product Management Methods\nDESCRIPTION: Methods for managing products including CRUD operations, archiving and image management.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/api.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.products.create({ ...params }) -> Product\nclient.products.retrieve(id) -> Product\nclient.products.update(id, { ...params }) -> void\nclient.products.list({ ...params }) -> ProductListResponsesDefaultPageNumberPagination\nclient.products.delete(id) -> void\nclient.products.unarchive(id) -> void\nclient.products.images.update(id, { ...params }) -> ImageUpdateResponse\n```\n\n----------------------------------------\n\nTITLE: Auto-Pagination in DodoPayments API\nDESCRIPTION: Example showing how to use automatic pagination to iterate through all payment items across multiple pages using for-await-of syntax.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function fetchAllPayments(params) {\n  const allPayments = [];\n  // Automatically fetches more pages as needed.\n  for await (const paymentListResponse of client.payments.list()) {\n    allPayments.push(paymentListResponse);\n  }\n  return allPayments;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Pagination in DodoPayments API\nDESCRIPTION: Example of manual pagination through payment list results, processing one page at a time and checking for more pages.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet page = await client.payments.list();\nfor (const paymentListResponse of page.items) {\n  console.log(paymentListResponse);\n}\n\n// Convenience methods are provided for manually paginating:\nwhile (page.hasNextPage()) {\n  page = await page.getNextPage();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Discount in TypeScript\nDESCRIPTION: Creates a new discount using the provided parameters. This method sends a POST request to the /discounts endpoint.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/api.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.discounts.create({ ...params }) -> Discount\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Discount in TypeScript\nDESCRIPTION: Retrieves a specific discount by its ID. This method sends a GET request to the /discounts/{discount_id} endpoint.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/api.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.discounts.retrieve(discountId) -> Discount\n```\n\n----------------------------------------\n\nTITLE: Listing Discounts in TypeScript\nDESCRIPTION: Retrieves a list of discounts based on the provided parameters. This method sends a GET request to the /discounts endpoint and returns a paginated result.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/api.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.discounts.list({ ...params }) -> DiscountsDefaultPageNumberPagination\n```\n\n----------------------------------------\n\nTITLE: Updating a Discount in TypeScript\nDESCRIPTION: Updates an existing discount with the provided parameters. This method sends a PATCH request to the /discounts/{discount_id} endpoint.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/api.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.discounts.update(discountId, { ...params }) -> Discount\n```\n\n----------------------------------------\n\nTITLE: Deleting a Discount in TypeScript\nDESCRIPTION: Deletes a specific discount by its ID. This method sends a DELETE request to the /discounts/{discount_id} endpoint and returns void.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/api.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.discounts.delete(discountId) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeouts in DodoPayments\nDESCRIPTION: Examples of how to configure timeout durations for API requests, either globally for all requests or for individual requests.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Configure the default for all requests:\nconst client = new DodoPayments({\n  timeout: 20 * 1000, // 20 seconds (default is 1 minute)\n});\n\n// Override per-request:\nawait client.payments.create({ billing: { city: 'city', country: 'AF', state: 'state', street: 'street', zipcode: 'zipcode' }, customer: { customer_id: 'customer_id' }, product_cart: [{ product_id: 'product_id', quantity: 0 }] }, {\n  timeout: 5 * 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries in DodoPayments\nDESCRIPTION: Examples of how to configure retry behavior for API requests, either globally for all requests or per individual request.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Configure the default for all requests:\nconst client = new DodoPayments({\n  maxRetries: 0, // default is 2\n});\n\n// Or, configure per-request:\nawait client.payments.create({ billing: { city: 'city', country: 'AF', state: 'state', street: 'street', zipcode: 'zipcode' }, customer: { customer_id: 'customer_id' }, product_cart: [{ product_id: 'product_id', quantity: 0 }] }, {\n  maxRetries: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Response Data in DodoPayments\nDESCRIPTION: Examples of how to access the raw fetch Response object to get headers and other metadata, using both asResponse() and withResponse() methods.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new DodoPayments();\n\nconst response = await client.payments\n  .create({\n    billing: { city: 'city', country: 'AF', state: 'state', street: 'street', zipcode: 'zipcode' },\n    customer: { customer_id: 'customer_id' },\n    product_cart: [{ product_id: 'product_id', quantity: 0 }],\n  })\n  .asResponse();\nconsole.log(response.headers.get('X-My-Header'));\nconsole.log(response.statusText); // access the underlying Response object\n\nconst { data: payment, response: raw } = await client.payments\n  .create({\n    billing: { city: 'city', country: 'AF', state: 'state', street: 'street', zipcode: 'zipcode' },\n    customer: { customer_id: 'customer_id' },\n    product_cart: [{ product_id: 'product_id', quantity: 0 }],\n  })\n  .withResponse();\nconsole.log(raw.headers.get('X-My-Header'));\nconsole.log(payment.payment_id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fetch Function for DodoPayments Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to provide a custom fetch function when instantiating the DodoPayments client. The custom function allows for logging or altering requests and responses.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetch } from 'undici'; // as one example\nimport DodoPayments from 'dodopayments';\n\nconst client = new DodoPayments({\n  fetch: async (url: RequestInfo, init?: RequestInit): Promise<Response> => {\n    console.log('About to make a request', url, init);\n    const response = await fetch(url, init);\n    console.log('Got response', response);\n    return response;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Client in DodoPayments\nDESCRIPTION: Examples showing how to configure the library to use different fetch implementations, such as the global web fetch or Node.js fetch.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Tell TypeScript and the package to use the global web fetch instead of node-fetch.\n// Note, despite the name, this does not add any polyfills, but expects them to be provided if needed.\nimport 'dodopayments/shims/web';\nimport DodoPayments from 'dodopayments';\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing MCP Server Components in JavaScript\nDESCRIPTION: Examples of importing the server, endpoints, and individual tools, as well as initializing the server with custom configurations. Shows how to set up standard or custom MCP server implementations.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/packages/mcp-server/README.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Import the server, generated endpoints, or the init function\nimport { server, endpoints, init } from \"dodopayments-mcp/server\";\n\n// import a specific tool\nimport createPayments from \"dodopayments-mcp/tools/payments/create-payments\";\n\n// initialize the server and all endpoints\ninit({ server, endpoints });\n\n// manually start server\nconst transport = new StdioServerTransport();\nawait server.connect(transport);\n\n// or initialize your own server with specific tools\nconst myServer = new McpServer(...);\n\n// define your own endpoint\nconst myCustomEndpoint = {\n  tool: {\n    name: 'my_custom_tool',\n    description: 'My custom tool',\n    inputSchema: zodToJsonSchema(z.object({ a_property: z.string() })),\n  },\n  handler: async (client: client, args: any) => {\n    return { myResponse: 'Hello world!' };\n  })\n};\n\n// initialize the server with your custom endpoints\ninit({ server: myServer, endpoints: [createPayments, myCustomEndpoint] });\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP(S) Agent for DodoPayments Client in TypeScript\nDESCRIPTION: This snippet shows how to configure an HTTP(S) agent for the DodoPayments client, which can be used for proxies or customizing TCP connection behavior. It includes examples for both global and per-request configurations.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport http from 'http';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\n\n// Configure the default for all requests:\nconst client = new DodoPayments({\n  httpAgent: new HttpsProxyAgent(process.env.PROXY_URL),\n});\n\n// Override per-request:\nawait client.payments.create(\n  {\n    billing: { city: 'city', country: 'AF', state: 'state', street: 'street', zipcode: 'zipcode' },\n    customer: { customer_id: 'customer_id' },\n    product_cart: [{ product_id: 'product_id', quantity: 0 }],\n  },\n  {\n    httpAgent: new http.Agent({ keepAlive: false }),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Making Custom Requests to Undocumented Endpoints\nDESCRIPTION: Example of how to make requests to undocumented API endpoints using HTTP verbs like client.post with custom paths and parameters.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.post('/some/path', {\n  body: { some_prop: 'foo' },\n  query: { some_query_arg: 'bar' },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dodo Payments MCP Server via npx\nDESCRIPTION: Direct installation and execution of the Dodo Payments MCP Server using npx. Requires setting the API key as an environment variable before running the command.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/packages/mcp-server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport DODO_PAYMENTS_API_KEY=\"My Bearer Token\"\nnpx -y dodopayments-mcp\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server in Client JSON Configuration\nDESCRIPTION: Example JSON configuration for integrating the Dodo Payments MCP Server with an existing MCP client. Specifies the command, arguments, and environment variables needed for execution.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/packages/mcp-server/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"dodopayments_api\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"dodopayments-mcp\"],\n      \"env\": {\n        \"DODO_PAYMENTS_API_KEY\": \"My Bearer Token\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Undocumented Request Parameters\nDESCRIPTION: Example of how to send undocumented parameters in API requests by using TypeScript's @ts-expect-error annotation.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclient.foo.create({\n  foo: 'my_param',\n  bar: 12,\n  // @ts-expect-error baz is not yet public\n  baz: 'undocumented option',\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Shim Import Example\nDESCRIPTION: Shows the two possible manual import statements for explicitly selecting Node.js or web environment shims. This is used when automatic environment detection needs to be overridden.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/src/_shims/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'dodopayments/shims/node'\nimport 'dodopayments/shims/web'\n```\n\n----------------------------------------\n\nTITLE: Setting up DodoPayments Node.js SDK Environment\nDESCRIPTION: Commands to install dependencies and build the SDK. This process installs all required dependencies and generates output files in the 'dist/' directory.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing DodoPayments SDK from Git Source\nDESCRIPTION: Command to install the SDK directly from the GitHub repository using npm. This allows users to use the latest version of the SDK from the source.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install git+ssh://git@github.com:dodopayments/dodopayments-node.git\n```\n\n----------------------------------------\n\nTITLE: Linking Local DodoPayments SDK Repository\nDESCRIPTION: Series of commands to clone the SDK repository and link it locally using yarn or pnpm. This is useful for developers who want to use a local copy of the SDK in their projects.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Clone\n$ git clone https://www.github.com/dodopayments/dodopayments-node\n$ cd dodopayments-node\n\n# With yarn\n$ yarn link\n$ cd ../my-package\n$ yarn link dodopayments\n\n# With pnpm\n$ pnpm link --global\n$ cd ../my-package\n$ pnpm link -—global dodopayments\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mock Server for DodoPayments SDK Tests\nDESCRIPTION: Command to set up a mock server using Prism for running tests against the OpenAPI specification. This is a prerequisite for running most of the SDK tests.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ npx prism mock path/to/your/openapi.yml\n```\n\n----------------------------------------\n\nTITLE: Running an Example Script for DodoPayments SDK\nDESCRIPTION: Commands to make an example script executable and run it using yarn. This allows developers to test and demonstrate SDK functionality.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ chmod +x examples/<your-example>.ts\n# run the example against your api\n$ yarn tsn -T examples/<your-example>.ts\n```\n\n----------------------------------------\n\nTITLE: Running Tests for DodoPayments SDK\nDESCRIPTION: Command to execute the test suite for the SDK using yarn. This should be run after setting up the mock server.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn run test\n```\n\n----------------------------------------\n\nTITLE: Adding an Example TypeScript File for DodoPayments SDK\nDESCRIPTION: Template for creating a new example file in the 'examples/' directory. This demonstrates how to structure an example file for the SDK.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n#!/usr/bin/env -S npm run tsn -T\n…\n```\n\n----------------------------------------\n\nTITLE: Version Release Notes\nDESCRIPTION: Markdown formatted changelog entries tracking version updates, features, bug fixes and other changes to the DodoPayments Node.js SDK\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Chores\n\n* **internal:** fix devcontainers setup ([#61](https://github.com/dodopayments/dodopayments-node/issues/61)) ([f43773f](https://github.com/dodopayments/dodopayments-node/commit/f43773f625c1b6d108c28932583aba723f12cd6f))\n\n## 0.24.0 (2025-02-15)\n\nFull Changelog: [v0.22.1...v0.24.0](https://github.com/dodopayments/dodopayments-node/compare/v0.22.1...v0.24.0)\n\n### Features\n\n* **api:** added discount apis ([#59](https://github.com/dodopayments/dodopayments-node/issues/59)) ([ca80ada](https://github.com/dodopayments/dodopayments-node/commit/ca80adaca0ff61a27dcc3024b7e2e985794e3ee0))\n* **api:** openapi spec changes ([#58](https://github.com/dodopayments/dodopayments-node/issues/58)) ([fcbf145](https://github.com/dodopayments/dodopayments-node/commit/fcbf145b5039593e6e2dd357947ea970fa77829a))\n```\n\n----------------------------------------\n\nTITLE: Linting DodoPayments SDK Code\nDESCRIPTION: Command to run the linter on the SDK codebase using yarn. This helps maintain code quality and consistency.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn lint\n```\n\n----------------------------------------\n\nTITLE: Formatting and Fixing Lint Issues in DodoPayments SDK\nDESCRIPTION: Command to automatically format the code and fix lint issues in the SDK using yarn. This ensures code consistency and resolves common coding style problems.\nSOURCE: https://github.com/dodopayments/dodopayments-node/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn fix\n```"
  }
]