[
  {
    "owner": "browser-use",
    "repo": "web-ui",
    "content": "TITLE: Defining Response Format for Browser Automation in JSON\nDESCRIPTION: This snippet specifies the required JSON response format for the AI agent. It includes current state evaluation, important contents, thought process, next goal, and action sequence. The format is crucial for maintaining consistency in the agent's responses.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/src/agent/custom_system_prompt.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{{\n \"current_state\": {{\n   \"evaluation_previous_goal\": \"Success|Failed|Unknown - Analyze the current elements and the image to check if the previous goals/actions are successful like intended by the task. Mention if something unexpected happened. Shortly state why/why not.\",\n   \"important_contents\": \"Output important contents closely related to user's instruction on the current page. If there is, please output the contents. If not, please output empty string ''.\",\n   \"thought\": \"Think about the requirements that have been completed in previous operations and the requirements that need to be completed in the next one operation. If your output of evaluation_previous_goal is 'Failed', please reflect and output your reflection here.\",\n   \"next_goal\": \"Please generate a brief natural language description for the goal of your next actions based on your thought.\"\n }},\n \"action\": [\n   {{\"one_action_name\": {{// action-specific parameter}}}}, // ... more actions in sequence\n ]\n}}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Format for Browser Automation in Markdown\nDESCRIPTION: This snippet outlines the input format for the AI agent, including task description, previous steps, current URL, open tabs, and interactive elements. It specifies how interactive elements are represented with numeric indexes and HTML element types.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/src/agent/custom_system_prompt.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Input Format\nTask\nPrevious steps\nCurrent URL\nOpen Tabs\nInteractive Elements\n[index]<type>text</type>\n- index: Numeric identifier for interaction\n- type: HTML element type (button, input, etc.)\n- text: Element description\nExample:\n[33]<button>Submit Form</button>\n\n- Only elements with numeric indexes in [] are interactive\n- elements without [] provide only context\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository in Bash\nDESCRIPTION: Commands to clone the browser-use web-ui repository and navigate to the project directory using Git.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/browser-use/web-ui.git\ncd web-ui\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration Example\nDESCRIPTION: Example configuration of environment variables for LLM API keys, browser settings, and VNC settings in the .env file.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: env\nCODE:\n```\n# LLM API Keys\nOPENAI_API_KEY=your_key_here\nANTHROPIC_API_KEY=your_key_here\nGOOGLE_API_KEY=your_key_here\n\n# Browser Settings\nCHROME_PERSISTENT_SESSION=true   # Set to true to keep browser open between AI tasks\nRESOLUTION=1920x1080x24         # Custom resolution format: WIDTHxHEIGHTxDEPTH\nRESOLUTION_WIDTH=1920           # Custom width in pixels\nRESOLUTION_HEIGHT=1080          # Custom height in pixels\n\n# VNC Settings\nVNC_PASSWORD=your_vnc_password  # Optional, defaults to \"vncpassword\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Web UI Application\nDESCRIPTION: Command to run the WebUI application with specified IP address and port settings.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython webui.py --ip 127.0.0.1 --port 7788\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment with UV\nDESCRIPTION: Commands to create a Python virtual environment using UV, specifying Python 3.11 as the interpreter version.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv venv --python 3.11\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with UV\nDESCRIPTION: Command to install required Python packages from the requirements.txt file using UV package manager.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Chromium Browser in Playwright\nDESCRIPTION: Command to install the Chromium browser with its dependencies in Playwright for browser automation.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nplaywright install --with-deps chromium\n```\n\n----------------------------------------\n\nTITLE: Installing All Browsers in Playwright\nDESCRIPTION: Command to install all supported browsers in Playwright for comprehensive browser automation support.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nplaywright install\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File in macOS/Linux/PowerShell\nDESCRIPTION: Command to create a copy of the example environment file in macOS, Linux, or Windows PowerShell for configuration.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File in Windows\nDESCRIPTION: Command to create a copy of the example environment file in Windows Command Prompt for configuration.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncopy .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Docker Container Management Commands\nDESCRIPTION: Commands for managing Docker containers including starting with persistent browser, starting in default mode, viewing logs, and stopping the container.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Start with persistent browser\nCHROME_PERSISTENT_SESSION=true docker compose up -d\n\n# Start with default mode (browser closes after tasks)\ndocker compose up -d\n\n# View logs\ndocker compose logs -f\n\n# Stop the container\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Docker Container with Default Settings\nDESCRIPTION: Command to build and start the Docker container with default settings where the browser closes after AI tasks.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Persistent Browser Session\nDESCRIPTION: Command to run the Docker container with the persistent browser option enabled, keeping the browser open between AI tasks.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nCHROME_PERSISTENT_SESSION=true docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Windows Chrome Path Configuration\nDESCRIPTION: Environment variable settings for using a custom Chrome browser on Windows, specifying the executable path and user data directory.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: env\nCODE:\n```\nCHROME_PATH=\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\"\nCHROME_USER_DATA=\"C:\\Users\\YourUsername\\AppData\\Local\\Google\\Chrome\\User Data\"\n```\n\n----------------------------------------\n\nTITLE: macOS Chrome Path Configuration\nDESCRIPTION: Environment variable settings for using a custom Chrome browser on macOS, specifying the executable path and user data directory.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: env\nCODE:\n```\nCHROME_PATH=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"\nCHROME_USER_DATA=\"/Users/YourUsername/Library/Application Support/Google/Chrome\"\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment in Windows Command Prompt\nDESCRIPTION: Command to activate the Python virtual environment in Windows Command Prompt.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n.venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment in Windows PowerShell\nDESCRIPTION: Command to activate the Python virtual environment in Windows PowerShell.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n.\\.venv\\Scripts\\Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment in macOS/Linux\nDESCRIPTION: Command to activate the Python virtual environment in macOS or Linux environments.\nSOURCE: https://github.com/browser-use/web-ui/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```"
  }
]