[
  {
    "owner": "measuredco",
    "repo": "puck",
    "content": "TITLE: Installing Puck via NPM/Yarn\nDESCRIPTION: Command to install the Puck package using npm or yarn package managers. This adds the @measured/puck library to your project dependencies.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @measured/puck --save\n```\n\n----------------------------------------\n\nTITLE: Generating a Puck Application with create-puck-app\nDESCRIPTION: Command to bootstrap a new Puck application using the create-puck-app utility. This creates a new application with a predefined structure based on available recipes.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-puck-app my-app\n```\n\n----------------------------------------\n\nTITLE: Defining Overrides Object in TSX for Puck Interface Customization\nDESCRIPTION: This snippet demonstrates how to create an overrides object to customize the Puck interface. In this example, a custom header is defined using a render function.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  header: () => <header>My header</header>,\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Puck Component Configuration\nDESCRIPTION: Example of a basic Puck configuration object defining a HeadingBlock component with text field and render function.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/config.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        children: {\n          type: \"text\",\n        },\n      },\n      render: ({ children }) => {\n        return <h1>{children}</h1>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Component Render Configuration in Puck\nDESCRIPTION: Demonstrates how to define a basic component with a render function in Puck's configuration. The component renders a simple heading element.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/component-configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      render: () => {\n        return <h1>Hello, world</h1>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Rendering the Puck Editor Component\nDESCRIPTION: React component implementation for the Puck editor. It includes component configuration with a HeadingBlock component that has a text field, defines initial data, and implements a save handler for persisting content.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\nimport \"@measured/puck/puck.css\";\n\n// Create Puck component config\nconst config = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        children: {\n          type: \"text\",\n        },\n      },\n      render: ({ children }) => {\n        return <h1>{children}</h1>;\n      },\n    },\n  },\n};\n\n// Describe the initial data\nconst initialData = {};\n\n// Save the data to your database\nconst save = (data) => {};\n\n// Render Puck editor\nexport function Editor() {\n  return <Puck config={config} data={initialData} onPublish={save} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Puck Editor Component with Basic Configuration\nDESCRIPTION: Example of how to set up and render the Puck editor in a React component. It includes defining a component config with a HeadingBlock, setting initial data, and providing a save function.\nSOURCE: https://github.com/measuredco/puck/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Editor.jsx\nimport { Puck } from \"@measured/puck\";\nimport \"@measured/puck/puck.css\";\n\n// Create Puck component config\nconst config = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        children: {\n          type: \"text\",\n        },\n      },\n      render: ({ children }) => {\n        return <h1>{children}</h1>;\n      },\n    },\n  },\n};\n\n// Describe the initial data\nconst initialData = {};\n\n// Save the data to your database\nconst save = (data) => {};\n\n// Render Puck editor\nexport function Editor() {\n  return <Puck config={config} data={initialData} onPublish={save} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Dynamic Fields in Puck Components\nDESCRIPTION: This example shows how to make asynchronous API calls in resolveFields to populate dropdown options based on a selected category. The function only makes the API call when the category field has changed, avoiding unnecessary network requests.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/dynamic-fields.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    MyComponent: {\n      resolveFields: async (data, { changed, lastFields }) => {\n        // Don't call the API unless `category` has changed\n        if (!changed.category) return lastFields;\n\n        // Make an asynchronous API call to get the options\n        const options = await getOptions(data.category);\n\n        return {\n          category: {\n            type: \"radio\",\n            options: [\n              { label: \"Fruit\", value: \"fruit\" },\n              { label: \"Vegetables\", value: \"vegetables\" },\n            ],\n          },\n          item: {\n            type: \"select\",\n            options,\n          },\n        };\n      },\n      render: ({ item }) => <h1>{item}</h1>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing the Puck Page Renderer\nDESCRIPTION: React component that renders the final page output using the Puck Render component. It uses the same config and data objects as the editor to display the published content.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/getting-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Render } from \"@measured/puck\";\n\nexport function Page() {\n  return <Render config={config} data={data} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Syncing with resolveData in Puck\nDESCRIPTION: This snippet shows how to keep external data in sync by combining the 'external' field with the resolveData function. It re-fetches content when necessary, updating the data from the external source when the page loads.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/external-data-sources.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async () => {\n            // Query an API for a list of items\n            const items = await fetch(`/api/items`).then((res) => res.json());\n            // [\n            //   { title: \"Hello, world\", id: 0 },\n            //   { title: \"Goodbye, world\", id: 1 },\n            // ];\n\n            return items;\n          },\n        },\n      },\n      resolveData: async ({ props }, { changed }) => {\n        if (!props.data) return { props };\n\n        // Don't query unless `data` has changed since resolveData was last run\n        if (!changed.data) return { props };\n\n        // Re-query the API for a particular item\n        const latestData = await fetch(`/api/items/${props.data.id}`).then(\n          (res) => res.json()\n        );\n        // { title: \"Hello, world\", description: \"Lorem ipsum 1\", id: 0 }\n\n        return {\n          props: {\n            // Update the value for `data`\n            data: latestData,\n          },\n        };\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Component Configuration in Puck\nDESCRIPTION: Example of a basic ComponentConfig with fields and render function. This shows how to define a heading component with a configurable title field.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        title: {\n          type: \"text\",\n        },\n      },\n      render: ({ title }) => <h1>{title}</h1>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Puck Editor Implementation in React/TSX\nDESCRIPTION: Basic example showing how to initialize and render the Puck editor component with minimal required configuration.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nconst config = {\n  components: {},\n};\n\nconst initialData = {\n  content: [],\n  root: {},\n};\n\nexport function Editor() {\n  return <Puck config={config} data={initialData} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Puck Data Structure Example in JSON\nDESCRIPTION: This snippet shows the basic structure of a Puck data object with content, root, and zones properties. The content array contains component objects with type and props, the root object contains page-level properties, and zones is an empty object for nested content regions.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/data.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": [\n    {\n      \"type\": \"HeadingBlock\",\n      \"props\": {\n        \"id\": \"HeadingBlock-1234\",\n        \"title\": \"Hello, world\"\n      }\n    }\n  ],\n  \"root\": { \"props\": { \"title\": \"Puck Example\" } },\n  \"zones\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Custom Puck Editor Interface with TSX\nDESCRIPTION: Demonstrates how to create a custom editor interface by providing children to the Puck component. This example shows a grid layout with a preview and component list.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/extending-puck/custom-interfaces.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck>\n      <div\n        style={{ display: \"grid\", gridTemplateColumns: \"1fr 2fr\", gridGap: 16 }}\n      >\n        <div>\n          {/* Render the drag-and-drop preview */}\n          <Puck.Preview />\n        </div>\n        <div>\n          {/* Render the component list */}\n          <Puck.Components />\n        </div>\n      </div>\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Field Configuration with resolveFields in Puck\nDESCRIPTION: Example of using resolveFields to dynamically configure component fields based on prop values, showing conditional field rendering.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    MyComponent: {\n      resolveFields: (data) => {\n        const fields = {\n          drink: {\n            type: \"radio\",\n            options: [\n              { label: \"Water\", value: \"water\" },\n              { label: \"Orange juice\", value: \"orange-juice\" },\n            ],\n          },\n        };\n\n        if (data.props.drink === \"water\") {\n          return {\n            ...fields,\n            waterType: {\n              // ... Define field\n            },\n          };\n        }\n\n        return fields;\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Core React Components for Puck Editor\nDESCRIPTION: Core components including DropZone for nested regions, Puck for the main editor, and Render for displaying content based on Data and Config objects.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DropZone>\n<Puck>\n<Render>\n```\n\n----------------------------------------\n\nTITLE: Custom Component Hook - usePuck()\nDESCRIPTION: React hook for building custom components that can interact with the Puck framework. Enables component-level integration with Puck's features.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nusePuck()\n```\n\n----------------------------------------\n\nTITLE: Configuring Puck Editor Components in React/TSX\nDESCRIPTION: Example demonstrating how to configure components with fields and render functions in the Puck editor.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      config={{\n        components: {\n          HeadingBlock: {\n            fields: {\n              children: {\n                type: \"text\",\n              },\n            },\n            render: ({ children }) => {\n              return <h1>{children}</h1>;\n            },\n          },\n        },\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Change Callback in Puck Editor\nDESCRIPTION: Example demonstrating how to implement an onChange callback to handle data changes in the Puck editor.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      onChange={(data) => {\n        console.log(\"Puck data was updated\", data);\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering resolveData Using resolveAllData Utility\nDESCRIPTION: This snippet demonstrates how to manually trigger resolveData for all components in a Puck configuration using the resolveAllData utility function. This is useful for updating all dynamic props at once.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/dynamic-props.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { resolveAllData } from \"@measured/puck\";\n\nconst updatedData = await resolveAllData(data, config);\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Dynamic Fields with resolveFields in Puck\nDESCRIPTION: This example demonstrates how to conditionally show fields based on the value of another field. When a user selects 'water' as the drink, an additional 'waterType' field appears with radio button options for 'Still' or 'Sparkling'.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/dynamic-fields.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    MyComponent: {\n      resolveFields: (data) => {\n        const fields = {\n          drink: {\n            type: \"radio\",\n            options: [\n              { label: \"Water\", value: \"water\" },\n              { label: \"Orange juice\", value: \"orange-juice\" },\n            ],\n          },\n        };\n\n        if (data.props.drink === \"water\") {\n          return {\n            ...fields,\n            waterType: {\n              // ... Define field\n            },\n          };\n        }\n\n        return fields;\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Plugin in Puck (TSX)\nDESCRIPTION: This snippet demonstrates how to create and use a custom plugin in Puck. The plugin overrides the componentItem rendering with a custom implementation, and is then passed to the Puck component via the plugins prop.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/extending-puck/plugins.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nconst MyPlugin = {\n  overrides: {\n    componentItem: ({ name }) => (\n      <div style={{ backgroundColor: \"hotpink\" }}>{name}</div>\n    ),\n  },\n};\n\nexport function Editor() {\n  return (\n    <Puck\n      // ...\n      plugins={[MyPlugin]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Render Component in React\nDESCRIPTION: Demonstrates how to import the Render component from @measured/puck and use it in a React component. The Render component takes config and data props to render content based on the provided configuration.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/render.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Render } from \"@measured/puck\";\n\nexport function Example() {\n  return <Render config={config} data={data} />;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Component Configuration in Puck\nDESCRIPTION: Shows how to properly type a Puck configuration using TypeScript, defining component types and implementing the config interface.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/component-configuration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Config } from \"@measured/puck\";\n\ntype Components = {\n  HeadingBlock: {};\n};\n\nconst config: Config<Components> = {\n  components: {\n    HeadingBlock: {\n      render: () => {\n        return <h1>Hello, world</h1>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Using usePuck Hook in React\nDESCRIPTION: Demonstrates how to create and use the usePuck hook using the createUsePuck factory function to select state from Puck context.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions/use-puck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createUsePuck } from \"@measured/puck\";\n\nconst usePuck = createUsePuck();\n\nconst Example = () => {\n  const type = usePuck((s) => s.selectedItem?.type || \"Nothing\");\n\n  return <h2>{type} selected</h2>;\n};\n```\n\n----------------------------------------\n\nTITLE: Puck Components Configuration Example\nDESCRIPTION: Detailed example showing the components configuration object structure with fields and render function.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/config.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        children: {\n          type: \"text\",\n        },\n      },\n      render: ({ children }) => {\n        return <h1>{children}</h1>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Puck.Fields Component in a Puck Editor\nDESCRIPTION: This example demonstrates how to integrate the Puck.Fields component within a Puck editor. It imports the Puck component and uses the Fields sub-component to display editable fields for the currently selected item.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck-fields.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck>\n      <Puck.Fields />\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the migrate Helper Function for Legacy Data in Puck\nDESCRIPTION: This snippet demonstrates how to use the migrate helper function from Puck to transform legacy data payloads to the latest data model.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/data-migration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { migrate } from \"@measured/puck\";\n\nmigrate(legacyData);\n```\n\n----------------------------------------\n\nTITLE: Configuring Render Component with Custom Component Definition\nDESCRIPTION: Shows how to set up the config prop for the Render component. This example defines a HeadingBlock component with a text field and a render function that creates an h1 element.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/render.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Example() {\n  return (\n    <Render\n      config={{\n        components: {\n          HeadingBlock: {\n            fields: {\n              children: {\n                type: \"text\",\n              },\n            },\n            render: ({ children }) => {\n              return <h1>{children}</h1>;\n            },\n          },\n        },\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Render Function in Puck\nDESCRIPTION: Example of configuring the root component with a custom render function that wraps all other components. The render function receives children as a parameter which contains all nested components.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/root-configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      render: () => {\n        return <h1>Hello, world</h1>;\n      },\n    },\n  },\n  root: {\n    render: ({ children }) => {\n      return <div>{children}</div>;\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Puck Editor Component with JSON Rendering\nDESCRIPTION: Shows how to create a custom editor component that renders the Puck AppState as JSON. This example uses the usePuck hook to access the AppState.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/extending-puck/custom-interfaces.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck, createUsePuck } from \"@measured/puck\";\n\nconst usePuck = createUsePuck();\n\nconst JSONRenderer = () => {\n  const appState = usePuck((s) => s.appState);\n\n  return <div>{JSON.stringify(appState.data)}</div>;\n};\n\nexport function Editor() {\n  return (\n    <Puck>\n      <JSONRenderer />\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Permission Resolution in Puck\nDESCRIPTION: This snippet demonstrates how to resolve permissions asynchronously by querying an external API. This enables advanced patterns like fetching permissions from a server based on component data.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/feature-toggling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      resolvePermissions: async (data) => {\n        const serverPermissions = await myPermissionsApi(data.props.id); // Query permissions from a server\n\n        return serverPermissions;\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring External Data Selection in Puck Components\nDESCRIPTION: This snippet demonstrates how to use the 'external' field type to allow users to select data from a third-party source. It shows the configuration for fetching a list of items and rendering the selected data in a component.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/external-data-sources.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async () => {\n            // Query an API for a list of items\n            const items = await fetch(`/api/items`).then((res) => res.json());\n            // [\n            //   { title: \"Hello, world\", description: \"Lorem ipsum 1\" },\n            //   { title: \"Goodbye, world\", description: \"Lorem ipsum 2\" },\n            // ];\n\n            return items;\n          },\n        },\n      },\n      render: ({ data }) => {\n        if (!data) {\n          return \"No data selected\";\n        }\n\n        return (\n          <>\n            <b>{data.title}</b>\n            <p>{data.description}</p>\n          </>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Data in Puck Editor\nDESCRIPTION: Example showing how to provide initial data to the Puck editor with content and root configuration.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      data={{\n        content: [\n          {\n            props: { children: \"Hello, world\", id: \"id\" },\n            type: \"HeadingBlock\",\n          },\n        ],\n        root: {},\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hybrid Authoring Components with Puck\nDESCRIPTION: This snippet demonstrates how to implement hybrid authoring, allowing users to either edit fields inline or populate them with data from an external source. It uses resolveData to map external data to editable fields and toggle read-only status.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/external-data-sources.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          // ...\n        },\n        title: {\n          type: \"text\",\n        },\n      },\n      resolveData: async ({ props }, { changed }) => {\n        // Remove read-only from the title field if `data` is empty\n        if (!props.data) return { props, readOnly: { title: false } };\n\n        // Don't query unless `data` has changed since resolveData was last run\n        if (!changed.data) return { props };\n\n        return {\n          props: {\n            title: props.data.title,\n            readOnly: { title: true },\n          },\n        };\n      },\n      render: ({ title }) => <b>{title}</b>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom Field in Puck\nDESCRIPTION: Demonstrates how to create a custom field using the 'custom' field type. The example shows a simple text input field that updates the 'title' value in the Puck data payload.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/extending-puck/custom-fields.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        title: {\n          type: \"custom\",\n          render: ({ name, onChange, value }) => (\n            <input\n              defaultValue={value}\n              name={name}\n              onChange={(e) => onChange(e.currentTarget.value)}\n              style={{ border: \"1px solid black\", padding: 4 }}\n            />\n          ),\n        },\n      },\n      render: ({ title }) => {\n        return <p>{title}</p>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Props with resolveData in Puck\nDESCRIPTION: Demonstrates how to update specific props using resolveData, showing a partial props update that spreads into existing props.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst resolveData = async ({ props }) => {\n  return {\n    props: { resolvedTitle: props.title },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Components with DropZone in Puck\nDESCRIPTION: Demonstrates how to create nested components using the DropZone component from Puck. This allows for creating zones where other components can be dropped into.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/multi-column-layouts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DropZone } from \"@measured/puck\";\n\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div>\n            <DropZone zone=\"my-content\" />\n          </div>\n        );\n      },\n    },\n    Card: {\n      render: () => <div>Hello, world</div>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate API Calls in resolveData with changed Parameter\nDESCRIPTION: This snippet demonstrates how to optimize resolveData by using the changed parameter to check which props have changed before performing expensive operations like API calls. The example only executes when the text prop has changed.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/dynamic-props.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      // ...\n      resolveData: async ({ props }, { changed }) => {\n        if (!changed.text) return { props };\n\n        return {\n          props: {\n            resolvedTitle: await expensiveOperation(props.title),\n          },\n        };\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onPublish Callback in Puck Editor\nDESCRIPTION: Example showing how to implement the onPublish callback to save Puck data to a database via API call. The callback receives a Data object and handles the publishing action.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      onPublish={async (data) => {\n        await fetch(\"/my-api\", {\n          method: \"post\",\n          body: JSON.stringify({ data }),\n        });\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ActionBar.Action Component in React TSX\nDESCRIPTION: Example showing how to render an action button inside an ActionBar component. The example creates a star button that logs to console when clicked.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/action-bar-action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionBar>\n  <ActionBar.Action onClick={() => console.log(\"Clicked!\")}>★</ActionBar.Action>\n</ActionBar>\n```\n\n----------------------------------------\n\nTITLE: Transforming Component Props with transformProps Function\nDESCRIPTION: Demonstrates how to use transformProps to rename component properties in a Data payload. The example shows renaming a 'title' prop to 'heading' in a HeadingBlock component. The function accepts a data object and a transforms object that contains transformation functions for each component type.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions/transform-props.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { transformProps } from \"@measured/puck\";\n\nconst data = {\n  content: [{ type: \"HeadingBlock\", props: { title: \"Hello, world\" } }],\n};\n\nconst updatedData = transformProps(data, {\n  // Rename `title` to `heading`\n  HeadingBlock: ({ title, ...props }) => ({ heading: title, ...props }),\n});\n\nconsole.log(updatedData);\n// { content: [{ type: \"HeadingBlock\", props: { heading: \"Hello, world\" } }] };\n```\n\n----------------------------------------\n\nTITLE: Using renderDropZone in Puck Components\nDESCRIPTION: Example of using the renderDropZone function to create a nested component area. This is the preferred method when implementing React server components.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      render: ({ puck: { renderDropZone } }) => {\n        return <div>{renderDropZone({ zone: \"my-content\" })}</div>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Fields with defaultProps in Puck\nDESCRIPTION: Complete example of configuring fields with defaultProps in a ComponentConfig. This sets up a text field with a default value that will be applied to new instances of the component.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        title: {\n          type: \"text\",\n        },\n      },\n      defaultProps: { title: \"Hello, world\" },\n      render: ({ title }) => <h1>{title}</h1>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Permissions with resolvePermissions\nDESCRIPTION: This example shows how to dynamically calculate permissions based on component data using the resolvePermissions function. The code disables deletion for HeadingBlock components when their locked property is set to true.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/feature-toggling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      resolvePermissions: (data, { permissions }) => {\n        if (data.props.locked) {\n          return {\n            delete: false, // Disable delete function when HeadingBlock `locked` prop is set\n          };\n        }\n\n        return permissions; // Return inherited permissions (component or global)\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Implementing a Custom Plugin in Puck with Component Overrides\nDESCRIPTION: Example showing how to create a custom plugin for Puck that overrides the componentItem render function. The plugin changes the appearance of component items by applying a hotpink background color. The plugin is then passed to the Puck component via the plugins prop.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/plugin.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nconst MyPlugin = {\n  overrides: {\n    componentItem: ({ name }) => (\n      <div style={{ backgroundColor: \"hotpink\" }}>{name}</div>\n    ),\n  },\n};\n\nexport function Editor() {\n  return (\n    <Puck\n      // ...\n      plugins={[MyPlugin]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Field Types in TSX\nDESCRIPTION: Demonstrates how to override default field types by providing custom render methods for number and text inputs. The example shows implementation of custom input handlers with onChange events.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/field-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  fieldTypes: {\n    number: ({ onChange }) => (\n      <input type=\"number\" onChange={(e) => onChange(e.currentTarget.value)} />\n    ),\n    text: ({ onChange }) => (\n      <input type=\"text\" onChange={(e) => onChange(e.currentTarget.value)} />\n    ),\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions with usePuck\nDESCRIPTION: Demonstrates how to dispatch actions to mutate the Puck application state.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions/use-puck.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ndispatch({\n  type: \"setUi\",\n  ui: {\n    leftSideBarVisible: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic resolveData Function in Puck Component\nDESCRIPTION: This snippet demonstrates how to implement the resolveData function in a Puck component configuration to set one prop value based on another. The example shows a HeadingBlock component where resolvedTitle is dynamically set based on the title prop.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/dynamic-props.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        title: {\n          type: \"text\",\n        },\n        resolvedTitle: {\n          type: \"text\",\n        },\n      },\n      resolveData: async ({ props }) => {\n        return {\n          props: {\n            resolvedTitle: props.title,\n          },\n        };\n      },\n      render: ({ resolvedTitle }) => {\n        return <h1>{resolvedTitle}</h1>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AutoField Component in Custom Fields with Puck\nDESCRIPTION: Example demonstrating how to import the AutoField component and use it within a custom field implementation. The snippet includes creating a custom field that uses a text field internally and configuring it in a Puck component setup.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/auto-field.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Autofield } from \"@measured/puck\";\n\nconst CustomField = ({ onChange, value }) => (\n  <AutoField field={{ type: \"text\" }} onChange={onChange} value={value} />\n);\n\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        title: {\n          type: \"custom\",\n          render: MyCustomField,\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Optimizing resolvePermissions with Changed Props Detection\nDESCRIPTION: Shows how to optimize resolvePermissions by only updating when specific props have changed, using the changed and lastPermissions parameters.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nconst resolvePermissions = async ({ props }, { changed, lastPermissions }) => {\n  if (!changed.example) {\n    return lastPermissions; // Return the last permissions unless the `example` prop has changed\n  }\n\n  return await expensiveAsyncOperation();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Viewports in Puck Editor\nDESCRIPTION: Example showing how to define custom viewports using the viewports API. Allows specifying width, height, label and custom icons for each viewport configuration.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/viewports.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      viewports={[\n        {\n          width: 1440,\n          height: \"auto\", // Optional height. Can be numeric or \"auto\". Defaults to \"auto\".\n          label: \"My Viewport\", // Optional. Shown in tooltip.\n          icon: <svg />, // Optional. Use lucide-icons to align with Puck UI.\n        },\n      ]}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: RSC Page Component Implementation\nDESCRIPTION: Example of rendering Puck components in a Next.js app router page with server-side data resolution.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/server-components.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { config } from \"../puck.config.tsx\";\n\nexport default async function Page() {\n  const data = await getData(); // Some server function\n\n  const resolvedData = await resolveAllData(data, config); // Optional call to resolveAllData, if this needs to run server-side\n\n  return <Render data={resolvedData} config={config} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Data with resolveAllData in TypeScript\nDESCRIPTION: Demonstrates how to use the resolveAllData utility function to process data before rendering. The function takes a data object and configuration object as arguments and returns the updated data object after executing all resolveData methods.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions/resolve-all-data.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { resolveAllData } from \"@measured/puck\";\n\nconst updatedData = await resolveAllData(data, config);\n```\n\n----------------------------------------\n\nTITLE: Rendering Draggable Component List with Puck.Components in React\nDESCRIPTION: This code snippet demonstrates how to use the Puck.Components component within a Puck editor UI. It renders a draggable list of components based on user-defined components configuration.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck>\n      <Puck.Components />\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins to Puck Editor\nDESCRIPTION: Shows how to integrate plugins into Puck to enhance its functionality, using the heading analyzer plugin as an example.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport headingAnalyzer from \"@measured/puck-plugin-heading-analyzer\";\n\nexport function Editor() {\n  return (\n    <Puck\n      plugins={[headingAnalyzer]}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing AppState with usePuck\nDESCRIPTION: Shows how to access the Puck application state using usePuck.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions/use-puck.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconsole.log(appState.data);\n// { content: [], root: {}, zones: {} }\n```\n\n----------------------------------------\n\nTITLE: Custom Field Type Override for Puck Editor\nDESCRIPTION: Demonstrates how to override all fields of a certain type in the Puck editor. This example replaces all text fields with a custom input component.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/extending-puck/custom-interfaces.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck\n      // ...\n      overrides={{\n        fieldTypes: {\n          // Override all text fields with a custom input\n          text: ({ name, onChange, value }) => (\n            <input\n              defaultValue={value}\n              name={name}\n              onChange={(e) => onChange(e.currentTarget.value)}\n              style={{ border: \"1px solid black\", padding: 4 }}\n            />\n          ),\n        },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using setData Action in Puck\nDESCRIPTION: Example of using the setData action to modify the data payload currently managed by Puck. This action requires type and data parameters.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ndispatch({\n  type: \"setData\",\n  data: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Label to Custom Fields in Puck\nDESCRIPTION: Shows how to add labels to custom fields using the <FieldLabel> component provided by Puck. This approach ensures the custom field integrates seamlessly with Puck's field UI.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/extending-puck/custom-fields.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldLabel } from \"@measured/puck\";\n\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        title: {\n          type: \"custom\",\n          label: \"Label Example\",\n          render: ({ field }) => (\n            <FieldLabel label={field.label}>\n              <input {/*...*/} />\n            </FieldLabel>\n          ),\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Fields as Read-Only with resolveData in Puck\nDESCRIPTION: This snippet shows how to mark fields as read-only using the resolveData function's readOnly parameter. The example demonstrates making the resolvedTitle field read-only after setting its value based on the title prop.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/dynamic-props.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      // ...\n      resolveData: async ({ props }) => {\n        return {\n          props: {\n            resolvedTitle: props.title,\n          },\n          readOnly: { resolvedTitle: true },\n        };\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Root Fields in Puck\nDESCRIPTION: Example of customizing the root fields by providing a fields configuration object. This example adds a description textarea field while retaining the default title field.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/root-configuration.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  // ...\n  root: {\n    fields: {\n      title: { type: \"text\" }, // We need to redefine the `title` field if we want to retain it\n      description: { type: \"textarea\" },\n    },\n    render: ({ children, title, description }) => {\n      return (\n        <div>\n          <h1>{title}</h1>\n          <p>{description}</p>\n          {children}\n        </div>\n      );\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Toggling Features Globally in Puck using TSX\nDESCRIPTION: This snippet demonstrates how to disable features globally across the entire Puck instance using the permissions prop on the Puck component. In this example, the delete functionality is disabled for all components.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/feature-toggling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      permissions={{\n        delete: false, // Disable delete function on all components\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Component Field Configuration in Puck\nDESCRIPTION: Illustrates how to add input fields to a component configuration, specifically adding a text field that gets passed to the render function as a prop.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/component-configuration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        title: {\n          type: \"text\",\n        },\n      },\n      render: ({ title }) => {\n        return <h1>{title}</h1>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring an External Field Type in Puck\nDESCRIPTION: Basic configuration for using the External field type to fetch and display data from an external source. The example demonstrates setting up the required type and fetchList parameters.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async () => {\n            // ... fetch data from a third party API, or other async source\n\n            return [\n              { title: \"Hello, world\", description: \"Lorem ipsum 1\" },\n              { title: \"Goodbye, world\", description: \"Lorem ipsum 2\" },\n            ];\n          },\n        },\n      },\n      render: ({ data }) => {\n        return <p>{data?.title || \"No data selected\"}</p>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Field in Puck Component\nDESCRIPTION: This snippet demonstrates how to configure an array field within a Puck component. It shows the basic structure including the required 'type' and 'arrayFields' parameters, as well as the render function to display the array items.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/array.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        items: {\n          type: \"array\",\n          arrayFields: {\n            title: { type: \"text\" },\n          },\n        },\n      },\n      render: ({ items }) => {\n        return (\n          <ul>\n            {items.map((item, i) => (\n              <li key={i}>{item.title}</li>\n            ))}\n          </ul>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Puck Zones Example with Nested Content in JSON\nDESCRIPTION: This example demonstrates how to define nested content regions using the zones object in the Puck data structure. The zones object contains arrays of components, where the key is a compound of the component id and DropZone zone name.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/data.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": [],\n  \"root\": {},\n  \"zones\": {\n    \"HeadingBlock-1234:my-content\": [\n      {\n        \"type\": \"HeadingBlock\",\n        \"props\": {\n          \"id\": \"HeadingBlock-1234\",\n          \"title\": \"Hello, world\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Props for Root in Puck\nDESCRIPTION: Example of configuring default props for root fields using the defaultProps parameter. These default values will be stored in the data payload and populate the Puck fields UI.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/root-configuration.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  // ...\n  root: {\n    fields: {\n      title: { type: \"text\" },\n      description: { type: \"textarea\" },\n    },\n    defaultProps: {\n      title: \"Hello, world\",\n      description: \"Lorem ipsum\",\n    },\n    render: ({ children, title, description }) => {\n      return (\n        <div>\n          <h1>{title}</h1>\n          <p>{description}</p>\n          {children}\n        </div>\n      );\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering ActionBar Component with Groups and Actions in React TSX\nDESCRIPTION: Example of how to implement the ActionBar component with a Group containing an Action. This demonstrates the basic structure for creating a custom action bar in Puck with a clickable action item.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/action-bar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionBar label=\"Actions\">\n  <ActionBar.Group>\n    <ActionBar.Action onClick={() => console.log(\"Clicked!\")}>\n      ★\n    </ActionBar.Action>\n  </ActionBar.Group>\n</ActionBar>\n```\n\n----------------------------------------\n\nTITLE: Setting Component Permissions in Puck\nDESCRIPTION: Example of setting permissions for a component in Puck. This disables the ability to delete instances of the HeadingBlock component.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      permissions: {\n        delete: false, // Disable deletion of all HeadingBlock instances\n      },\n      render: () => <h1>Hello, World</h1>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing RSC-friendly DropZone with renderDropZone in Puck\nDESCRIPTION: Example of using the renderDropZone prop as an RSC-compatible alternative to the DropZone component.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/server-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Columns: {\n      render: ({ puck: { renderDropZone } }) => (\n        <div>{renderDropZone({ zone: \"my-content\" })}</div>\n      ),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluid Layouts with CSS Grid\nDESCRIPTION: Demonstrates how to create fluid layouts using CSS Grid properties on DropZone components. Shows usage of style and className props for layout customization.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/multi-column-layouts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DropZone } from \"@measured/puck\";\n\nconst config = {\n  components: {\n    Example: {\n      render: () => (\n        <DropZone\n          zone=\"my-content\"\n          // Use CSS grid in this DropZone\n          style={{ display: \"grid\", gridTemplateColumns: \"2fr 1fr\", gap: 16 }}\n        />\n      ),\n    },\n    Card: {\n      render: ({ text }) => <div>{text}</div>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Action Groups in ActionBar using ActionBar.Group in TSX\nDESCRIPTION: This example shows how to render multiple action groups within an ActionBar component. Each ActionBar.Group creates a separate section for organizing related actions, displayed in a flex row layout.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/action-bar-group.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionBar label=\"Actions\">\n  <ActionBar.Group>Group 1</ActionBar.Group>\n  <ActionBar.Group>Group 2</ActionBar.Group>\n</ActionBar>\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Props in resolveData in Puck\nDESCRIPTION: Example showing how to access the current props in a resolveData function. This creates a derived property based on the current title value.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst resolveData = async ({ props }) => {\n  return {\n    props: { resolvedTitle: props.title },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Field Type in Puck\nDESCRIPTION: Example configuration for setting up an Object field type in Puck. The object field contains a nested text field for the title property, which is then used in the render function.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/object.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        params: {\n          type: \"object\",\n          objectFields: {\n            title: { type: \"text\" },\n          },\n        },\n      },\n      render: ({ params }) => {\n        return <p>{params.title}</p>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Component-Specific Permissions in Puck Config\nDESCRIPTION: This snippet shows how to toggle features for specific component types by setting permissions in the component configuration. The example disables the delete functionality for all HeadingBlock instances.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/feature-toggling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      permissions: {\n        delete: false, // Disable delete function on all HeadingBlock instances\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Puck.Outline Component in Custom Puck UI\nDESCRIPTION: This code snippet demonstrates how to use the Puck.Outline component within a custom Puck UI. It shows the basic structure of rendering the Outline component inside the main Puck component.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck-outline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck>\n      <Puck.Outline />\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Layouts with Multiple DropZones\nDESCRIPTION: Shows how to create fixed layouts using multiple DropZones with CSS Grid. Components inside DropZones are arranged vertically by default.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/multi-column-layouts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DropZone } from \"@measured/puck\";\n\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div\n            style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: 16 }}\n          >\n            <DropZone zone=\"left-column\" />\n            <DropZone zone=\"right-column\" />\n          </div>\n        );\n      },\n    },\n    Card: {\n      render: ({ text }) => <div>{text}</div>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: DropZone with Zone Identifier\nDESCRIPTION: Example demonstrating the required 'zone' prop implementation for unique identification within components.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drop-zone.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div>\n            <DropZone zone=\"my-content\" />\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Emotion Cache Plugin with Puck in React\nDESCRIPTION: Example of how to import and use the createEmotionCache plugin with Puck. It demonstrates creating an emotion cache plugin configured for Chakra UI and rendering Puck with the plugin.\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/plugin-emotion-cache/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\nimport createEmotionCache from \"@measured/puck-plugin-emotion-cache\";\n\n// Create your emotion cache plugin. This example configures it for Chakra.\nconst chakraEmotionCache = createEmotionCache(\"cha\");\n\n// Render Puck\nexport function Page() {\n  return <Puck config={config} data={data} plugins={[chakraEmotionCache]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Field Render Function in Puck (TSX)\nDESCRIPTION: This snippet demonstrates how to implement the render function for a custom field in Puck. It shows the structure and parameters of the render function, including how to handle value changes.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/custom.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldLabel } from \"@measured/puck\";\n\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        title: {\n          type: \"custom\",\n          render: ({ name, onChange, value }) => (\n            <input\n              defaultValue={value}\n              name={name}\n              onChange={(e) => onChange(e.currentTarget.value)}\n            />\n          ),\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using transformProps to Migrate Component Props in Puck\nDESCRIPTION: Demonstrates how to use the transformProps utility to update data payloads when component props have been renamed, showing the complete transformation process.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/data-migration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { transformProps } from \"@measured/puck\";\n\nconst config = {\n  // Renamed `title` prop to `heading`\n  HeadingBlock: ({ heading }) => <h1>{heading}</h1>,\n};\n\nconst data = {\n  content: [\n    // HeadingBlock references the legacy `title` prop\n    { type: \"HeadingBlock\", props: { title: \"Hello, world\" } },\n  ],\n};\n\nconst updatedData = transformProps(data, {\n  // Map `heading` to the legacy `title` prop\n  HeadingBlock: ({ title, ...props }) => ({ heading: title, ...props }),\n});\n\nconsole.log(updatedData);\n// { content: [{ type: \"HeadingBlock\", props: { heading: \"Hello, world\" } }] };\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Overrides in Puck Editor\nDESCRIPTION: Demonstrates how to override default UI components in Puck using the overrides prop. Shows customization of the header component.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      overrides={{\n        header: () => <div />,\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Item Properties in Array Field\nDESCRIPTION: This example shows how to set default properties for new items added to an array field using the 'defaultItemProps' parameter. It sets a default title for new items.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/array.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        items: {\n          type: \"array\",\n          arrayFields: {\n            title: { type: \"text\" },\n          },\n          defaultItemProps: {\n            title: \"Hello, world\",\n          },\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchList for External Data\nDESCRIPTION: The fetchList function returns a promise with a list of objects to be displayed in the external input modal. It can fetch data from APIs or other async sources and supports filtering and querying.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async () => {\n            // ... fetch data from a third party API, or other async source\n\n            return [\n              { title: \"Hello, world\", description: \"Lorem ipsum 1\" },\n              { title: \"Goodbye, world\", description: \"Lorem ipsum 2\" },\n            ];\n          },\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing resolveData for Dynamic Properties in Puck\nDESCRIPTION: Example of using resolveData to transform props and set read-only fields. The resolveData function maps the title prop to resolvedTitle and marks the latter as read-only.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        title: {\n          type: \"text\",\n        },\n      },\n      resolveData: async ({ props }) => {\n        return {\n          props: { resolvedTitle: props.title },\n          readOnly: { resolvedTitle: true },\n        };\n      },\n      render: ({ resolvedTitle }) => <h1>{resolvedTitle}</h1>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Puck Content Props Example in JSON\nDESCRIPTION: This example highlights the props section of a content item in the Puck data structure. It shows how component properties are stored, which will be passed to the render method for the component of the same key.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/data.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": [\n    {\n      \"type\": \"HeadingBlock\",\n      \"props\": {\n        \"id\": \"HeadingBlock-1234\",\n        \"title\": \"Hello, world\"\n      }\n    }\n  ],\n  \"root\": {},\n  \"zones\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: DropZone with Component Blocklist\nDESCRIPTION: Example showing how to prevent specific components from being dragged into a DropZone using the 'disallow' prop.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drop-zone.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div>\n            <DropZone zone=\"my-content\" disallow={[\"HeadingBlock\"]} />\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring UI State in Puck Editor\nDESCRIPTION: Demonstrates setting initial UI state for the Puck editor, specifically showing how to hide the left sidebar by default.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      // Hide the left side bar by default\n      ui={{ leftSideBarVisible: false }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root with Title Field in Puck\nDESCRIPTION: Example of configuring the root component with a default title field. The render function can access the title value and use it in the rendered output.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/root-configuration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  // ...\n  root: {\n    render: ({ children, title }) => {\n      return (\n        <div>\n          <h1>{title}</h1>\n          {children}\n        </div>\n      );\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Metadata in Puck Component Render Function\nDESCRIPTION: Example of using global metadata passed to a Puck component. The metadata can be accessed through the puck.metadata property in the render function.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      inline: true,\n      render: ({ text, puck: { metadata } }) => {\n        return <div>Hello, {metadata.text || text}</div>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Example Metadata Structure in Puck\nDESCRIPTION: Shows the basic structure of a metadata object in Puck that can be used with resolveData and render APIs. The metadata object is a global data object that can contain any key-value pairs.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"My cool page title\",\n  \"content\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit...\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Publish Button for Puck Editor Header\nDESCRIPTION: Shows how to override the Puck editor header actions to replace the default publish button with a custom save button. This example uses the usePuck hook to access the AppState.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/extending-puck/custom-interfaces.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck, createUsePuck } from \"@measured/puck\";\n\nconst usePuck = createUsePuck();\n\nconst save = () => {};\n\nexport function Editor() {\n  return (\n    <Puck\n      // ...\n      overrides={{\n        headerActions: ({ children }) => {\n          const appState = usePuck((s) => s.appState);\n\n          return (\n            <>\n              <button\n                onClick={() => {\n                  save(appState.data);\n                }}\n              >\n                Save\n              </button>\n\n              {/* Render default header actions, such as the default Button */}\n              {/*{children}*/}\n            </>\n          );\n        },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Permission Resolution with Changed Props Detection\nDESCRIPTION: This snippet shows how to optimize permission resolution by checking which props have changed. It prevents expensive API calls by only recalculating permissions when specific properties (like 'locked') have changed.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/feature-toggling.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      // ...\n      resolvePermissions: async (data, { changed, lastPermissions }) => {\n        if (!changed.locked) return lastPermissions; // Return last permissions if `locked` hasn't changed\n\n        return await myExpensivePermissionsApi(data),\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Prop Transformations in Puck Components\nDESCRIPTION: Shows a practical example of applying prop transformations in both editor and render components, ensuring consistent handling of legacy data.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/data-migration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck, Render, transformProps } from \"@measured/puck\";\n\nconst transforms = {\n  HeadingBlock: ({ title, ...props }) => ({ heading: title, ...props }),\n};\n\nexport const MyEditor = ({ data, config }) => (\n  <Puck data={transformProps(data, transforms)} config={config} />\n);\n\nexport const MyPage = ({ data, config }) => (\n  <Render data={transformProps(data, transforms)} config={config} />\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Metadata with resolveData in Puck Components\nDESCRIPTION: Example showing how to use resolveData to handle metadata and update component props. The function receives props and metadata parameters and returns updated props.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst resolveData = async ({ props }, { metadata }) => {\n  return {\n    props: { title: metadata.title || props.title },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Select Field in Puck Component\nDESCRIPTION: An example of configuring a component with a select field that controls text alignment. The select field provides 'Left' and 'Right' options which are then applied to the paragraph styling.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        textAlign: {\n          type: \"select\",\n          options: [\n            { label: \"Left\", value: \"left\" },\n            { label: \"Right\", value: \"right\" },\n          ],\n        },\n      },\n      render: ({ textAlign }) => {\n        return <p style={{ textAlign }}>Hello, world</p>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Restricting Components in DropZone with Allow Prop (TSX)\nDESCRIPTION: This snippet demonstrates how to use the 'allow' prop in a DropZone to restrict which components can be dragged into it. In this case, only the 'Card' component is allowed.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/multi-column-layouts.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DropZone } from \"@measured/puck\";\n\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div>\n            <DropZone zone=\"my-content\" allow={[\"Card\"]} />\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Optimizing resolveData with Change Detection in Puck\nDESCRIPTION: Example of optimizing resolveData by only updating when specific props change. This implementation only updates resolvedTitle when the title prop has changed.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst resolveData = async ({ props }, { changed }) => {\n  if (!changed.title) {\n    return { props };\n  }\n\n  return {\n    props: { resolvedTitle: props.title },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Input in Puck Component\nDESCRIPTION: This snippet demonstrates how to configure a text input field within a Puck component. It shows the basic structure of the component configuration, including the fields object with a text input and the render function.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        title: {\n          type: \"text\",\n        },\n      },\n      render: ({ title }) => {\n        return <p>{title}</p>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Puck Content ReadOnly Properties Example in JSON\nDESCRIPTION: This snippet demonstrates how to specify read-only fields for a component in the Puck data structure. The readOnly object describes which fields cannot be edited by users in the Puck editor.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/data.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": [\n    {\n      \"type\": \"HeadingBlock\",\n      \"props\": {\n        \"id\": \"HeadingBlock-1234\",\n        \"title\": \"Hello, world\"\n      },\n      \"readOnly\": {\n        \"title\": true\n      }\n    }\n  ],\n  \"root\": {},\n  \"zones\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting DropZone Components Using Categories (TSX)\nDESCRIPTION: This example shows how to combine DropZone restrictions with categories to control component behavior based on predefined groups. It uses the 'typography' category to allow only components in that category.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/multi-column-layouts.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DropZone } from \"@measured/puck\";\n\nconst config = {\n  categories: {\n    typography: {\n      components: [\"Card\"],\n    },\n  },\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div>\n            <DropZone\n              zone=\"my-content\"\n              allow={categories.typography.components}\n            />\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Root DropZone with Default Zone (TSX)\nDESCRIPTION: This snippet illustrates how to set up a root DropZone using the 'children' prop, which renders a DropZone for a zone called 'default-zone'. This is the default behavior when providing a render function to the root configuration.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/multi-column-layouts.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  root: {\n    render: ({ children }) => {\n      // children renders <DropZone zone=\"default-zone\" />\n      return <div>{children}</div>;\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Puck Header Component in TSX\nDESCRIPTION: This code snippet demonstrates how to override the default header component in Puck. It creates a custom header with a text span and renders the actions in a separate div.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  header: ({ actions }) => (\n    <header>\n      <span>My header</span>\n      <div>{actions}</div>\n    </header>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Puck Root Configuration\nDESCRIPTION: Example showing how to configure the root component that wraps all other components in the Puck system.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/config.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  root: {\n    render: ({ children }) => {\n      return <div>{children}</div>;\n    },\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Puck Root Props Example in JSON\nDESCRIPTION: This example shows how to define root-level properties in the Puck data structure. These props are based on the root component configuration and will be passed to the render method for the root config.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/data.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": [],\n  \"root\": { \"props\": { \"title\": \"Puck Example\" } },\n  \"zones\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Interface Implementation in Puck Editor\nDESCRIPTION: Example of rendering custom nodes for creating custom interfaces in the Puck editor.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck /*...*/>\n      <Puck.Preview />\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using set Action in Puck\nDESCRIPTION: Example of using the set action to change the entire AppState in a single operation. This action requires both type and state parameters.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/actions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ndispatch({\n  type: \"set\",\n  state: { data: {}, ui: {} },\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Header Actions in Puck with React\nDESCRIPTION: This snippet demonstrates how to override the header actions in Puck while preserving the default children elements. It shows how to add a custom button alongside the default publish button.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/header-actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  headerActions: ({ children }) => (\n    <>\n      {children}\n      <button>Click me</button>\n    </>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Puck Categories Configuration\nDESCRIPTION: Example demonstrating how to organize components into categories with the categories configuration object.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/config.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  categories: {\n    typography: {\n      components: [\"HeadingBlock\"],\n    },\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Minimal Data Payload in Puck\nDESCRIPTION: Example of a minimal data payload containing one HeadingBlock component in Puck. The payload includes the content array with component configurations and an empty root object.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/root-configuration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": [\n    {\n      \"type\": \"HeadingBlock\",\n      \"props\": {\n        \"id\": \"HeadingBlock-1234\"\n      }\n    }\n  ],\n  \"root\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ReadOnly Fields with resolveData in Puck\nDESCRIPTION: Shows how to use resolveData to both update props and set fields as readonly using the readOnly property.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst resolveData = async ({ props }) => {\n  return {\n    props: { resolvedTitle: props.title },\n    readOnly: { resolvedTitle: true },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using setUi Action in Puck\nDESCRIPTION: Example of using the setUi action to change values in Puck's UI state. The action takes a type parameter and a ui object containing the state values to update.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/actions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ndispatch({\n  type: \"setUi\",\n  ui: {\n    leftSideBarVisible: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Textarea Field in Puck Component\nDESCRIPTION: This snippet demonstrates how to configure a textarea field in a Puck component. It shows the basic structure of the configuration object, including the field definition and render function.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/textarea.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        description: {\n          type: \"textarea\",\n        },\n      },\n      render: ({ description }) => {\n        return <p>{description}</p>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Component Props Definition\nDESCRIPTION: Demonstrates how to define component props types in TypeScript for strict type checking of fields.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/component-configuration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Config } from \"@measured/puck\";\n\ntype Components = {\n  HeadingBlock: {\n    title: string;\n  };\n};\n\nconst config: Config<Components> = {\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Root Data Payload with Custom Fields in Puck\nDESCRIPTION: Example of a data payload showing how user-modified inputs for root fields (title and description) are stored in the root.props object.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/root-configuration.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": [\n    // ...\n  ],\n  \"root\": {\n    \"props\": {\n      \"title\": \"Hello, world\",\n      \"description\": \"Lorem ipsum\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata in Puck Editor\nDESCRIPTION: Example showing how to provide additional metadata to Puck editor components.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      metadata={{ title: \"metadata title\" }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Fields with the 'readOnly' Prop\nDESCRIPTION: Shows how to indicate a read-only state for a field by using the 'readOnly' prop, which displays a padlock icon next to the label.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/field-label.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldLabel } from \"@measured/puck\";\n\nconst CustomField = () => (\n  <FieldLabel label=\"Title\" readOnly>\n    <input readOnly />\n  </FieldLabel>\n);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Basic Category Configuration in TSX\nDESCRIPTION: Demonstrates the basic setup of component categories using the categories API to group typography-related components.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/categories.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  categories: {\n    typography: {\n      components: [\"HeadingBlock\", \"ParagraphBlock\"],\n    },\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Radio Input Component in Puck (TSX)\nDESCRIPTION: Example of configuring a component with a radio input field that controls text alignment. Demonstrates setting up options with labels and values, default props, and rendering based on the selected value.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/radio.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        textAlign: {\n          type: \"radio\",\n          options: [\n            { label: \"Left\", value: \"left\" },\n            { label: \"Right\", value: \"right\" },\n          ],\n        },\n      },\n      defaultProps: {\n        textAlign: \"left\",\n      },\n      render: ({ textAlign }) => {\n        return <p style={{ textAlign }}>Hello, world</p>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Fields for External Data\nDESCRIPTION: Setting up filter fields to allow filtering the external data. This example adds a number filter for 'rating' that filters items based on a minimum rating value.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async ({ filters }) => {\n            return [\n              { title: \"Apple\", description: \"Lorem ipsum 1\", rating: 5 },\n              { title: \"Orange\", description: \"Lorem ipsum 2\", rating: 3 },\n            ].filter((item) => item.rating >= (filters.rating || 0));\n          },\n          filterFields: {\n            rating: {\n              type: \"number\",\n            },\n          },\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Render Component\nDESCRIPTION: Demonstrates how to use the metadata prop in the Render component. This example provides a title and content that can be accessed by components through the puck.metadata render prop.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/render.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Example() {\n  return (\n    <Render\n      metadata={{\n        title: \"Page title\",\n        content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit...\",\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Puck.Preview Component in TSX\nDESCRIPTION: Basic implementation of the Puck.Preview component within a Puck editor. This example shows how to include the preview component in a React-based editor interface.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck-preview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck>\n      <Puck.Preview />\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Required 'type' Parameter for Text Input\nDESCRIPTION: This code snippet illustrates how to set the required 'type' parameter for a text input field. The type must be set to 'text' for Text fields in the component configuration.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        items: {\n          type: \"text\",\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Action Bar in Puck with TypeScript React\nDESCRIPTION: This code snippet demonstrates how to override the default action bar in Puck using the ActionBar component. It imports the ActionBar from @measured/puck and defines an overrides object with a custom actionBar function.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/action-bar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ActionBar } from \"@measured/puck\";\n\nconst overrides = {\n  actionBar: ({ children, label }) => (\n    <ActionBar label={label}>\n      <ActionBar.Group>{children}</ActionBar.Group>\n    </ActionBar>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Search Query in External Data Component\nDESCRIPTION: Demonstrates setting an initial search query for an external data field with search functionality. Uses the initialQuery property to pre-populate the search input.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async ({ query }) => {\n            return [\n              { title: \"Apple\", description: \"Lorem ipsum 1\" },\n              { title: \"Orange\", description: \"Lorem ipsum 2\" },\n            ].filter((item) => {\n              // ...\n            });\n          },\n          showSearch: true,\n          initialQuery: \"Apple\",\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Component Item Rendering in TSX\nDESCRIPTION: Demonstrates how to create a custom renderer for individual component items in the component list. The override function receives the component name as a prop and returns a custom React element.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/component-item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  componentItem: ({ name }) => <div>{name}</div>,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer Component in Puck Editor\nDESCRIPTION: Example showing how to integrate the Drawer component within a Puck editor interface. The Drawer contains draggable items that can be used in the Puck.Preview component.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drawer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck, Drawer } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck>\n      <Drawer>\n        <Drawer.Item name=\"Orange\" />\n      </Drawer>\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Field in Puck (TSX)\nDESCRIPTION: This snippet demonstrates how to configure a custom field in Puck. It shows the structure of the config object, including the custom field definition with its type and render function.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/custom.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldLabel } from \"@measured/puck\";\n\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        title: {\n          type: \"custom\",\n          render: ({ name, onChange, value }) => (\n            <input\n              defaultValue={value}\n              name={name}\n              onChange={(e) => onChange(e.currentTarget.value)}\n            />\n          ),\n        },\n      },\n      render: ({ title }) => {\n        return <p>{title}</p>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Search Functionality with showSearch\nDESCRIPTION: Shows how to enable search functionality for external data fields using the showSearch property. The search query is passed to fetchList for filtering results.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async ({ query }) => {\n            return [\n              { title: \"Apple\", description: \"Lorem ipsum 1\" },\n              { title: \"Orange\", description: \"Lorem ipsum 2\" },\n            ].filter((item) => {\n              // ...\n            });\n          },\n          showSearch: true,\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Transforming Table Row Display with mapRow\nDESCRIPTION: Illustrates how to modify the display of items in the table without affecting the selected data using mapRow. Converts item titles to uppercase in the table view.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async () => {\n            return [\n              { title: \"Hello, world\", description: \"Lorem ipsum 1\" },\n              { title: \"Goodbye, world\", description: \"Lorem ipsum 2\" },\n            ];\n          },\n          mapRow: (item) => ({ ...item, title: item.title.toUpperCase() }),\n        },\n      },\n      render: ({ data }) => {\n        return <p>{data || \"No data selected\"}</p>;\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Render Function in Drawer.Item\nDESCRIPTION: Shows how to use the children prop as a render function to customize the content of a Drawer.Item component.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drawer-item.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck, Drawer } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck>\n      <Drawer>\n        <Drawer.Item name=\"Orange\">{() => <div>Orange 🍊</div>}</Drawer.Item>\n      </Drawer>\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating UI State with Custom Fields in Puck\nDESCRIPTION: Shows how to use the onChange function to modify the Puck UI state while updating a field value. The example demonstrates closing the left sidebar when the field value changes.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/extending-puck/custom-fields.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        title: {\n          type: \"custom\",\n          render: ({ name, onChange, value }) => (\n            <input\n              defaultValue={value}\n              name={name}\n              onChange={(e) =>\n                onChange(\n                  e.currentTarget.value,\n                  // Close the left side bar when this field is changed\n                  { leftSideBarVisible: false }\n                )\n              }\n              style={{ border: \"1px solid black\", padding: 4 }}\n            />\n          ),\n        },\n      },\n      render: ({ title }) => {\n        return <p>{title}</p>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using AutoField Component in Custom Fields\nDESCRIPTION: Demonstrates how to render Puck fields within a custom field using the <AutoField> component. This allows leveraging Puck's built-in field types inside custom implementations.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/extending-puck/custom-fields.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AutoField } from \"@measured/puck\";\n\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        title: {\n          type: \"custom\",\n          label: \"Label Example\",\n          render: ({ field, value, onChange }) => (\n            <FieldLabel label={field.label}>\n              <AutoField\n                field={{ type: \"text\" }}\n                onChange={(value) => onChange(value)}\n                value={value}\n              />\n            </FieldLabel>\n          ),\n        },\n        // ...\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Puck Content on a Page\nDESCRIPTION: Example showing how to use the Render component to display content created with Puck editor in a React page component.\nSOURCE: https://github.com/measuredco/puck/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Page.jsx\nimport { Render } from \"@measured/puck\";\nimport \"@measured/puck/puck.css\";\n\nexport function Page() {\n  return <Render config={config} data={data} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Footer with renderFooter\nDESCRIPTION: Demonstrates how to customize the modal footer using the renderFooter function. Shows a custom footer displaying the number of results.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async () => {\n            return [\n              { title: \"Hello, world\", description: \"Lorem ipsum 1\" },\n              { title: \"Goodbye, world\", description: \"Lorem ipsum 2\" },\n            ];\n          },\n          renderFooter: ({ items }) => (\n            <b>Custom footer with {items.length} results</b>\n          ),\n        },\n      },\n      render: ({ data }) => {\n        return <p>{data || \"No data selected\"}</p>;\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Grid Layout with Inline Components\nDESCRIPTION: Shows advanced grid layout implementation using inline components and custom drag references. Demonstrates how to remove wrapper elements and implement direct CSS Grid controls.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/multi-column-layouts.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DropZone } from \"@measured/puck\";\n\nconst config = {\n  components: {\n    Example: {\n      render: () => (\n        <DropZone\n          zone=\"my-content\"\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: \"1fr 1fr 1fr 1fr\",\n            gridTemplateRows: \"1fr 1fr 1fr 1fr\",\n            gap: 16,\n          }}\n        />\n      ),\n    },\n    Card: {\n      inline: true, // Enable inline mode, removing the Puck wrapper\n      render: ({ text, spanCol, spanRow, puck }) => (\n        <div\n          ref={puck.dragRef} // Let Puck know this element is draggable\n          style={{\n            gridColumn: `span ${spanCol}`,\n            gridRow: `span ${spanRow}`,\n          }}\n        >\n          {text}\n        </div>\n      ),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Callback in Puck Editor\nDESCRIPTION: Example showing how to implement an onAction callback to handle Puck editor actions.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      onAction={(action, appState, prevAppState) => {\n        if (action.type === \"insert\") {\n          console.log(\"New component was inserted\", appState);\n        }\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Default Viewport Configuration\nDESCRIPTION: The default viewport configuration in Puck, defining small, medium, and large viewport presets with their respective dimensions and icons.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"width\": 360,\n    \"height\": \"auto\",\n    \"icon\": \"Smartphone\",\n    \"label\": \"Small\"\n  },\n  {\n    \"width\": 768,\n    \"height\": \"auto\",\n    \"icon\": \"Tablet\",\n    \"label\": \"Medium\"\n  },\n  {\n    \"width\": 1280,\n    \"height\": \"auto\",\n    \"icon\": \"Monitor\",\n    \"label\": \"Large\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FieldLabel Component in Puck\nDESCRIPTION: Shows how to import and use the FieldLabel component to create a custom field with a styled label. The example demonstrates a complete configuration with a custom field implementation.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/field-label.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldLabel } from \"@measured/puck\";\n\nconst CustomField = () => (\n  <FieldLabel label=\"Title\">\n    <input />\n  </FieldLabel>\n);\n\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        title: {\n          type: \"custom\",\n          render: MyCustomField,\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Items in Array Field\nDESCRIPTION: This snippet demonstrates how to set a minimum requirement for the number of items in an array field using the 'min' parameter. It requires the array to have at least 1 item.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/array.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        items: {\n          type: \"array\",\n          arrayFields: {\n            title: { type: \"text\" },\n          },\n          min: 1,\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mapping Selected Data Properties with mapProp\nDESCRIPTION: Shows how to transform selected data before writing to page data using the mapProp function. In this example, it extracts the description field from the selected item.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async () => {\n            return [\n              { title: \"Hello, world\", description: \"Lorem ipsum 1\" },\n              { title: \"Goodbye, world\", description: \"Lorem ipsum 2\" },\n            ];\n          },\n          mapProp: (item) => item.description,\n        },\n      },\n      render: ({ data }) => {\n        return <p>{data || \"No data selected\"}</p>;\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Providing Data to Render Component\nDESCRIPTION: Illustrates how to structure the data prop for the Render component. This example includes a single HeadingBlock component with a 'Hello, world' text content.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/render.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Example() {\n  return (\n    <Render\n      data={{\n        content: [\n          {\n            props: { children: \"Hello, world\", id: \"id\" },\n            type: \"HeadingBlock\",\n          },\n        ],\n        root: {},\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Item Summary in Array Field\nDESCRIPTION: This snippet demonstrates how to use the 'getItemSummary' function to customize the label of each item in the array. It uses the item's title or a default value if the title is not set.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/array.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        items: {\n          type: \"array\",\n          arrayFields: {\n            title: { type: \"text\" },\n          },\n          getItemSummary: (item) => item.title || \"Item\",\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Item Summary for External Data\nDESCRIPTION: Using getItemSummary to customize the display label for a selected item. This function determines what text is shown in the field after an item has been selected.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async () => {\n            return [\n              { title: \"Hello, world\", description: \"Lorem ipsum 1\" },\n              { title: \"Goodbye, world\", description: \"Lorem ipsum 2\" },\n            ];\n          },\n          getItemSummary: (item) => item.title,\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Number Field Implementation in TSX\nDESCRIPTION: Basic configuration for implementing a number input field in a Puck component. Shows the minimal required setup with type specification.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/number.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        myNumber: {\n          type: \"number\",\n        },\n      },\n      render: ({ myNumber }) => {\n        return <div>{myNumber}</div>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Viewports in Puck Editor\nDESCRIPTION: Example of configuring custom viewports for responsive preview, showing how to define a specific viewport width.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      viewports={[\n        {\n          width: 1440,\n        },\n      ]}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding fieldLabel Component in Puck (TSX)\nDESCRIPTION: This code snippet demonstrates how to override the fieldLabel component for all internal fields in Puck. It creates a custom label structure with the label text above the input field.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/field-label.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  fieldLabel: ({ children, label }) => (\n    <label>\n      <div>{label}</div>\n      {children}\n    </label>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Number Field with Maximum Value\nDESCRIPTION: Configuration for a number field with a maximum value constraint set to 10. This prevents users from entering values above the specified maximum.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/number.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        myNumber: {\n          type: \"number\",\n          max: 10,\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring objectFields Parameter in Puck\nDESCRIPTION: Example demonstrating how to configure the objectFields parameter for Object fields. This parameter defines the structure of fields within the object and shares the same API as the fields configuration.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/object.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        items: {\n          type: \"object\",\n          objectFields: {\n            title: { type: \"text\" },\n          },\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Optional 'placeholder' Parameter to Text Input\nDESCRIPTION: This example shows how to add the optional 'placeholder' parameter to a text input field. The placeholder text is displayed when the field is empty, providing guidance to the user.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/text.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        title: {\n          type: \"text\",\n          placeholder: \"Lorem ipsum...\",\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Initial History in Puck Editor\nDESCRIPTION: Example demonstrating how to set initial history state for undo/redo functionality in the Puck editor.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst historyState = {\n  data: {\n    root: {\n      props: { title: \"My History\" },\n    },\n  },\n};\n\nexport function Editor() {\n  return (\n    <Puck\n      initialHistory={{\n        histories: [{ state: historyState }],\n        index: 0,\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puck Components with use client Directive\nDESCRIPTION: Configuration setup for components that require client-side functionality, showing type definitions and component registration.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/server-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Config } from \"@measured/puck\";\nimport type { HeadingBlockProps } from \"./components/HeadingBlock\";\nimport HeadingBlock from \"./components/HeadingBlock\";\n\ntype Props = {\n  HeadingBlock: HeadingBlockProps;\n};\n\nexport const config: Config<Props> = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        title: { type: \"text\" },\n      },\n      defaultProps: {\n        title: \"Heading\",\n      },\n      render: ({ title }) => <HeadingBlock title={title} />,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using the id Prop with Puck.Preview Component\nDESCRIPTION: Example showing how to customize the Puck.Preview component with a custom ID. This allows you to specify a unique identifier for the preview frame instead of using the default 'puck-preview' value.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck-preview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck>\n      <Puck.Preview id=\"my-frame\" />\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Preview Override in TSX\nDESCRIPTION: Demonstrates how to override the default drag-and-drop preview by defining a custom component that wraps the children nodes. The preview component accepts a children prop of type ReactNode.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/preview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  preview: ({ children }) => <div>{children}</div>,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting the 'type' Parameter for Select Fields\nDESCRIPTION: Shows how to set the required 'type' parameter for a select field. The type must be set to 'select' to create a dropdown selection input.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/select.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        textAlign: {\n          type: \"select\",\n          options: [\n            { label: \"Left\", value: \"left\" },\n            { label: \"Right\", value: \"right\" },\n          ],\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring 'options' Parameter for Radio Input (TSX)\nDESCRIPTION: Shows how to configure the required 'options' parameter for a radio input field. Each option consists of a label for display and a value that can be a String, Number, or Boolean.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/radio.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        textAlign: {\n          type: \"radio\",\n          options: [\n            { label: \"Left\", value: \"left\" },\n            { label: \"Right\", value: \"right\" },\n          ],\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Drawer.Item Implementation in TSX\nDESCRIPTION: Demonstrates the basic usage of Drawer.Item component within a Puck editor setup with minimal required props.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drawer-item.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck, Drawer } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck>\n      <Drawer>\n        <Drawer.Item name=\"Orange\" />\n      </Drawer>\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Component Props - transformProps()\nDESCRIPTION: Function for transforming component props stored in the data payload. Primarily used for migrations like prop renames.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntransformProps()\n```\n\n----------------------------------------\n\nTITLE: Selector Pattern Examples with usePuck\nDESCRIPTION: Shows good and bad practices for using selectors with usePuck to optimize performance and avoid re-renders.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions/use-puck.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Good: only re-render when the `selectedItem` changes\nconst selectedItem = usePuck((s) => s.selectedItem);\n\n// Bad: re-render when anything changes\nconst { selectedItem } = usePuck();\nconst { selectedItem } = usePuck((s) => s);\n\n// Bad: selector creates a new object reference, causing an infinite comparison loop\nconst { selectedItem } = usePuck((s) => ({ ...s.selectedItem }));\n```\n\n----------------------------------------\n\nTITLE: Managing Permissions with useEffect\nDESCRIPTION: Shows how to handle permission changes using useEffect with the getPermissions function.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions/use-puck.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst [myPermissions, setMyPermissions] = useState(getPermissions());\n\nuseEffect(() => {\n  setMyPermissions(getPermissions());\n}, [getPermissions]);\n```\n\n----------------------------------------\n\nTITLE: Puck Root ReadOnly Example in JSON\nDESCRIPTION: This snippet shows how to define read-only fields at the root level in the Puck data structure. The readOnly object specifies which root-level properties cannot be edited by users in the Puck editor.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/data.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": [],\n  \"root\": {\n    \"readOnly\": {\n      \"title\": true\n    }\n  },\n  \"zones\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Label Components in ActionBar with TSX\nDESCRIPTION: Example showing how to use ActionBar.Label components within an ActionBar and ActionBar.Group to display text labels alongside other action elements.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/action-bar-label.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionBar>\n  <ActionBar.Label label=\"Label 1\" />\n  <ActionBar.Group>\n    <ActionBar.Label label=\"Label 2\" />\n    <ActionBar.Action>★</ActionBar.Action>\n  </ActionBar.Group>\n</ActionBar>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Items in Array Field\nDESCRIPTION: This example shows how to set a maximum limit on the number of items allowed in an array field using the 'max' parameter. It limits the array to a maximum of 3 items.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/array.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        items: {\n          type: \"array\",\n          arrayFields: {\n            title: { type: \"text\" },\n          },\n          max: 3,\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic DropZone Implementation in TSX\nDESCRIPTION: Basic example showing how to import and implement a DropZone component within a config object.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drop-zone.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DropZone } from \"@measured/puck\";\n\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div>\n            <DropZone zone=\"my-content\" />\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Heading Analyzer Plugin with Puck in React\nDESCRIPTION: React component setup showing how to import and configure the heading analyzer plugin with Puck. Includes necessary imports for both the plugin and its CSS styles.\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/plugin-heading-analyzer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\nimport headingAnalyzer from \"@measured/puck-plugin-heading-analyzer\";\nimport \"@measured/puck-plugin-heading-analyzer/dist/index.css\";\n\n...\n\n// Render Puck\nexport function Page() {\n  return <Puck\n    config={config}\n    data={data}\n    plugins={[\n        headingAnalyzer\n    ]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using dragRef for Inline Components in Puck\nDESCRIPTION: Example showing how to implement the dragRef for inline components. The dragRef tells Puck which element is draggable when using the inline parameter.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      inline: true,\n      render: ({ puck: { dragRef } }) => {\n        return <div ref={dragRef}>Hello, world</div>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring IFrame Settings in Puck Editor\nDESCRIPTION: Example showing how to configure iframe behavior in the Puck editor.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      iframe={{ enabled: false }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Header Path in Puck Editor\nDESCRIPTION: Example showing how to set a custom header path in the Puck editor interface.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      headerPath=\"/my-page\"\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: DropZone with Custom Empty Height\nDESCRIPTION: Implementation showing how to set a custom minimum height for empty DropZones using the 'minEmptyHeight' prop.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drop-zone.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div>\n            <DropZone zone=\"my-content\" minEmptyHeight={256} />\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Server-side Puck Configuration\nDESCRIPTION: Server-specific configuration excluding client-side fields and functionality.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/server-components.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { UserConfig } from \"./puck-types.ts\";\n\nexport const config: UserConfig = {\n  components: {\n    HeadingBlock: {\n      render: ({ title }) => {\n        return (\n          <div style={{ padding: 64 }}>\n            <h1>{title}</h1>\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Component Default Props Configuration\nDESCRIPTION: Shows how to configure default props for a component, setting initial values for fields when a new component is added.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/component-configuration.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        title: {\n          type: \"text\",\n        },\n      },\n      defaultProps: {\n        title: \"Hello, world\",\n      },\n      render: ({ title }) => {\n        return <h1>{title}</h1>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using the 'children' Prop with FieldLabel\nDESCRIPTION: Shows how to provide children to the FieldLabel component, which will be rendered inside the internal label element.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/field-label.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldLabel } from \"@measured/puck\";\n\nconst CustomField = () => (\n  <FieldLabel label=\"Title\">\n    <input />\n  </FieldLabel>\n);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Overriding Fields Wrapper in Puck using TSX\nDESCRIPTION: This code snippet demonstrates how to override the fields wrapper in Puck. It defines an 'overrides' object with a 'fields' property that takes a function component as its value. The function receives 'children' as a prop and wraps them in a div element.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/fields.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  fields: ({ children }) => <div>{children}</div>,\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Typing for Root Configuration in Puck\nDESCRIPTION: Example of using TypeScript to strictly type root configuration by passing generic types to the Config type. This ensures type safety for the root props.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/root-configuration.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Config } from \"@measured/puck\";\n\ntype RootProps = {\n  description: string;\n};\n\nconst config: Config<{}, RootProps> = {\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Puck Children in React TSX\nDESCRIPTION: This code snippet demonstrates how to override the Puck component's children by defining a custom wrapper function. The overrides object includes a 'puck' property that takes a function receiving children as a prop and wraps them in a div element.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/puck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  puck: ({ children }) => <div>{children}</div>,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions in Puck Editor\nDESCRIPTION: Example of setting global permissions to control Puck functionality, specifically showing how to disable component deletion.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      permissions={{\n        delete: false, // Prevent deletion of all components\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puck.Fields with wrapFields Option\nDESCRIPTION: This example shows how to use the 'wrapFields' prop to customize the appearance of the fields. When set to false, it removes the padding and border separation between top-level fields, which is enabled by default.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck-fields.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck>\n      <Puck.Fields wrapFields={false} />\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Required 'type' Parameter for Radio Input (TSX)\nDESCRIPTION: Demonstrates how to set the required 'type' parameter for a radio input field. The type must be set to \"radio\" to properly configure the field.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/radio.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        textAlign: {\n          type: \"radio\",\n          options: [\n            { label: \"Left\", value: \"left\" },\n            { label: \"Right\", value: \"right\" },\n          ],\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Category Configuration\nDESCRIPTION: Demonstrates how to use TypeScript types with category configuration to ensure type safety when defining categories.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/categories.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Config } from \"@measured/puck\";\n\nconst config: Config<{}, {}, \"typography\" | \"interactive\"> = {\n  categories: {\n    typography: {},\n    interactive: {},\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding iframe Root in Puck (TSX)\nDESCRIPTION: This code snippet demonstrates how to override the root of the iframe component in Puck. It uses the useEffect hook to set a custom background color on the iframe's body when the document is available.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/iframe.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  iframe: ({ children, document }) => {\n    useEffect(() => {\n      if (document) {\n        document.body.setAttribute(\"style\", \"background: hotpink;\");\n      }\n    }, [document]);\n\n    return <>{children}</>;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Text for Empty Selection\nDESCRIPTION: Shows how to configure a custom placeholder text when no item is selected using the placeholder property.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async () => {\n            return [\n              { title: \"Apple\", description: \"Lorem ipsum 1\" },\n              { title: \"Orange\", description: \"Lorem ipsum 2\" },\n            ];\n          },\n          placeholder: \"Pick your favorite fruit\",\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Helper React Components for Enhanced Functionality\nDESCRIPTION: Utility components including ActionBar for UI controls, Drawer for draggable item lists, and FieldLabel for custom form fields.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ActionBar>\n<ActionBar.Action>\n<ActionBar.Group>\n<ActionBar.Label>\n<Drawer>\n<Drawer.Item>\n<FieldLabel>\n```\n\n----------------------------------------\n\nTITLE: Overriding Puck Outline Component in TSX\nDESCRIPTION: This code snippet demonstrates how to override the outline component in Puck. It defines an 'overrides' object with a custom 'outline' function that wraps the children in a div element.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/outline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  outline: ({ children }) => <div>{children}</div>,\n};\n```\n\n----------------------------------------\n\nTITLE: DropZone with Collision Axis Configuration\nDESCRIPTION: Implementation demonstrating how to configure collision detection axis for drag and drop functionality.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drop-zone.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div>\n            <DropZone zone=\"my-content\" collisionAxis=\"dynamic\" />\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Category Component Assignment\nDESCRIPTION: Shows how to assign components to multiple categories, allowing components like HeadingBlock to appear in both typography and foundational categories.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/categories.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  categories: {\n    typography: {\n      components: [\"HeadingBlock\", \"ParagraphBlock\"],\n    },\n    foundational: {\n      components: [\"HeadingBlock\"],\n    },\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Optional 'placeholder' Parameter to Textarea Field\nDESCRIPTION: This example shows how to add an optional 'placeholder' parameter to a textarea field. The placeholder text is displayed when the field is empty, providing guidance to the user.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/textarea.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        description: {\n          type: \"textarea\",\n          placeholder: \"Lorem ipsum...\",\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a Field Label in Puck\nDESCRIPTION: This snippet shows how to add an icon that displays next to a field's label in the Puck interface using the labelIcon parameter, which accepts a ReactNode element.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/base.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        items: {\n          labelIcon: <Icon />,\n          // ...\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Filters for External Data\nDESCRIPTION: Setting initialFilters to provide default values for filter fields. This example sets a default minimum rating of 1 for the rating filter.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async ({ filters }) => {\n            return [\n              { title: \"Apple\", description: \"Lorem ipsum 1\", rating: 5 },\n              { title: \"Orange\", description: \"Lorem ipsum 2\", rating: 3 },\n            ].filter((item) => item.rating >= (filters.rating || 0));\n          },\n          filterFields: {\n            rating: {\n              type: \"number\",\n            },\n          },\n          initialFilters: {\n            rating: 1,\n          },\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Required 'label' Prop with FieldLabel\nDESCRIPTION: Demonstrates the usage of the required 'label' prop which specifies the text to display as the field label.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/field-label.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldLabel } from \"@measured/puck\";\n\nconst CustomField = () => (\n  <FieldLabel label=\"Title\">\n    <input />\n  </FieldLabel>\n);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Other Category Configuration\nDESCRIPTION: Shows how to customize the default 'other' category that contains uncategorized components.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/categories.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  categories: {\n    typography: {\n      components: [\"HeadingBlock\", \"ParagraphBlock\"],\n    },\n    other: {\n      title: \"Other components\",\n    },\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Number Field with Placeholder\nDESCRIPTION: Configuration showing how to add placeholder text to a number input field. The placeholder appears when the field is empty.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/number.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        myNumber: {\n          type: \"number\",\n          placeholder: \"Lorem ipsum...\",\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Client Component Implementation with use client Directive\nDESCRIPTION: Example of a client-side component using React hooks, marked with the use client directive.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/server-components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useState } from \"react\";\n\nexport type HeadingBlockProps = {\n  title: string;\n};\n\nexport default ({ title }: { title: string }) => {\n  useState(); // useState fails on the server\n\n  return (\n    <div style={{ padding: 64 }}>\n      <h1>{title}</h1>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Category Configuration Options\nDESCRIPTION: Illustrates advanced category configuration options including custom titles, collapse behavior, and visibility settings.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/categories.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  categories: {\n    typography: {\n      components: [\"HeadingBlock\", \"ParagraphBlock\"],\n      title: \"Text\",\n      defaultExpanded: false, // Collapse this category by default\n    },\n    foundational: {\n      components: [\"HeadingBlock\"],\n      visible: false, // Mark this category as hidden\n    },\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Number Field with Minimum Value\nDESCRIPTION: Configuration for a number field with a minimum value constraint set to 0. This prevents users from entering values below the specified minimum.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/number.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        myNumber: {\n          type: \"number\",\n          min: 0,\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Components with dragRef in Puck\nDESCRIPTION: Example of creating an inline component that doesn't use a wrapping element. The dragRef is applied directly to the h1 element to make it draggable in the editor.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      inline: true,\n      render: ({ puck }) => <h1 ref={puck.dragRef}>Hello, World</h1>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Client-side Puck Configuration\nDESCRIPTION: Configuration for client-side components using shared types and including client-specific functionality.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/server-components.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { UserConfig } from \"./puck-types.ts\";\n\nexport const config: UserConfig = {\n  components: {\n    HeadingBlock: {\n      fields: {\n        title: { type: \"text\" },\n      },\n      defaultProps: {\n        title: \"Heading\",\n      },\n      render: ({ title }) => {\n        useState(); // useState fails on the server\n\n        return (\n          <div style={{ padding: 64 }}>\n            <h1>{title}</h1>\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Options for Select Fields\nDESCRIPTION: Demonstrates how to define the 'options' parameter for a select field. Each option requires a label for display and a value that can be a String, Number or Boolean.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/select.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        textAlign: {\n          type: \"select\",\n          options: [\n            { label: \"Left\", value: \"left\" },\n            { label: \"Right\", value: \"right\" },\n          ],\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: DropZone with Custom Class Name\nDESCRIPTION: Example showing how to add a custom CSS class to a DropZone while maintaining default styles.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drop-zone.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div>\n            <DropZone zone=\"my-content\" className=\"MyComponent\" />\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Field Label in Puck\nDESCRIPTION: This snippet demonstrates how to set a custom label for a field in the Puck configuration. When the label parameter is not provided, Puck will automatically use the field key as the label.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/base.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        items: {\n          label: \"My Field\",\n          // ...\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Optimizing resolveFields with Changed Props Detection\nDESCRIPTION: Shows how to optimize resolveFields by only updating when specific props have changed, using the changed and lastFields parameters.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst resolveFields = async ({ props }, { changed, lastFields }) => {\n  if (!changed.fieldType) {\n    return lastFields;\n  }\n\n  return {\n    title: {\n      type: fieldType,\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Interface Viewport Control\nDESCRIPTION: Shows how to control viewport size in custom interfaces using CSS transforms and container dimensions with Puck.Preview component.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/viewports.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck>\n      <div style={{ transform: \"scale(0.5)\", width: 1280 }}>\n        <Puck.Preview />\n      </div>\n    </Puck>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Number Field with Type Declaration\nDESCRIPTION: Example showing the required type parameter for number fields. This is the minimum configuration needed for a number input.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/number.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        myNumber: {\n          type: \"number\",\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to FieldLabel with the 'icon' Prop\nDESCRIPTION: Demonstrates how to add an icon before the label text using the 'icon' prop, with an example using lucide-react icons.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/field-label.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldLabel } from \"@measured/puck\";\nimport { Globe } from \"lucide-react\";\n\nconst CustomField = () => (\n  <FieldLabel icon={<Globe size=\"16\" />} label=\"Title\">\n    <input />\n  </FieldLabel>\n);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting Required 'type' Parameter for Textarea Field\nDESCRIPTION: This code snippet focuses on the required 'type' parameter for textarea fields. It must be set to \"textarea\" to define a textarea input in Puck.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/textarea.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        description: {\n          type: \"textarea\",\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Component Permissions Configuration with resolvePermissions\nDESCRIPTION: Demonstrates how to use resolvePermissions to dynamically set permissions for specific component instances.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    MyComponent: {\n      resolvePermissions: (data, { permissions }) => {\n        if (data.props.id === \"MyComponent-1234\") {\n          return {\n            delete: false, // Disable deletion on component with id MyComponent-1234\n          };\n        }\n\n        return { permissions }; // Fallback to inherited permissions\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Data Payload - migrate()\nDESCRIPTION: Function to migrate legacy data payloads to the latest shape in Puck. Used for maintaining compatibility with updated data structures.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmigrate()\n```\n\n----------------------------------------\n\nTITLE: Number Field with Step Value\nDESCRIPTION: Configuration for a number field with a custom step value of 0.1. This controls the increment/decrement size when using arrow controls.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/number.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        myNumber: {\n          type: \"number\",\n          step: 0.1,\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Component Labels in Puck\nDESCRIPTION: Example of setting a custom label for a component in the Puck editor. The label will be displayed in the component selector instead of the component key.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      label: \"Heading Block\",\n      render: () => <h1>Hello, World</h1>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Resolving Component Data - resolveAllData()\nDESCRIPTION: Utility function that executes all resolveData methods on a data payload. Handles data resolution for components in the Puck system.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nresolveAllData()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration\nDESCRIPTION: Example showing how to use TypeScript types with Contentful entries in Puck configuration\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/field-contentful/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport createFieldContentful, { Entry } from \"@/field-contentful\";\n\ntype MyProps = {\n  Example: {\n    movie: Entry<{ title: string; description: string; rating: number }>;\n  }\n};\n\nconst config: Config<MyProps> = {\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Setting the External Field Type\nDESCRIPTION: Defining the field type as 'external', which is required for External fields. This parameter tells Puck how to render and handle the field in the editor interface.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/external.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        data: {\n          type: \"external\",\n          fetchList: async () => {\n            return [\n              { title: \"Hello, world\", description: \"Lorem ipsum 1\" },\n              { title: \"Goodbye, world\", description: \"Lorem ipsum 2\" },\n            ];\n          },\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Fields\nDESCRIPTION: Example demonstrating how to set up filter fields for Contentful queries with rating filter\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/field-contentful/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ncreateFieldContentful(\"movies\", {\n  // ...\n  filterFields: {\n    // Filter the \"rating\" field by value greater than the user input\n    \"fields.rating[gte]\": {\n      type: \"number\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Structure in Puck\nDESCRIPTION: Example of the HTML structure generated by Puck when rendering a root component with a HeadingBlock. Shows the nested structure created by the root render function wrapping the component render output.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/root-configuration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- root render -->\n<div>\n  <!-- HeadingBlock render -->\n  <h1>Hello, world</h1>\n\n  <!-- Remining nodes -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Overriding Component List in Puck (TSX)\nDESCRIPTION: This code snippet demonstrates how to override the component list in Puck. It defines an 'overrides' object with a 'components' property that renders a div containing the children passed to it.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/overrides/components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst overrides = {\n  components: ({ children }) => <div>{children}</div>,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Field Type in Puck (TSX)\nDESCRIPTION: This snippet focuses on the 'type' parameter of a custom field in Puck. It shows how to set the type to 'custom' for custom fields.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/custom.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        title: {\n          type: \"custom\",\n          render: ({ name, onChange, value }) => (\n            <input\n              defaultValue={value}\n              name={name}\n              onChange={(e) => onChange(e.currentTarget.value)}\n            />\n          ),\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting type Parameter for Object Fields\nDESCRIPTION: Example showing how to specify the type parameter for Object fields in Puck. The type must be set to \"object\" for Object fields to work properly.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/fields/object.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        items: {\n          type: \"object\",\n          objectFields: {\n            title: { type: \"text\" },\n          },\n        },\n      },\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Filters\nDESCRIPTION: Example showing how to configure initial filter values for Contentful queries\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/field-contentful/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ncreateFieldContentful(\"movies\", {\n  // ...\n  initialFilters: {\n    \"fields.rating[gte]\": 1,\n    select: \"name,rating\", // Can include search parameters not included in filterFields\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Changing the Rendered Element Type with the 'el' Prop\nDESCRIPTION: Shows how to change the rendered HTML element from the default 'label' to a 'div' using the 'el' prop.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/field-label.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldLabel } from \"@measured/puck\";\n\nconst CustomField = () => (\n  <FieldLabel el=\"div\" label=\"Title\">\n    <input />\n  </FieldLabel>\n);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: DropZone with React Ref\nDESCRIPTION: Example demonstrating how to attach a React ref to a DropZone component for DOM manipulation.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drop-zone.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        const ref = useRef();\n\n        return (\n          <div>\n            <DropZone zone=\"my-content\" ref={ref} />\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing resolveData on Puck Root Component\nDESCRIPTION: This snippet shows how to use the resolveData method on the root component of a Puck configuration. It demonstrates setting a resolvedTitle prop based on the title prop and rendering it as a heading above the children components.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/dynamic-props.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {},\n  root: {\n    fields: {\n      title: {\n        type: \"text\",\n      },\n      resolvedTitle: {\n        type: \"text\",\n      },\n    },\n    resolveData: async ({ props }) => {\n      return {\n        props: {\n          resolvedTitle: props.title,\n        },\n      };\n    },\n    render: ({ children, resolvedTitle }) => {\n      return (\n        <>\n          <h1>{resolvedTitle}</h1>\n          {children}\n        </>\n      );\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Title Field\nDESCRIPTION: Example showing how to specify a custom title field for Contentful entries\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/field-contentful/README.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ncreateFieldContentful(\"movies\", {\n  // ...\n  titleField: \"name\",\n});\n```\n\n----------------------------------------\n\nTITLE: Shared Puck Configuration Types\nDESCRIPTION: Type definitions for shared configuration between client and server components.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/server-components.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Config } from \"@measured/puck\";\n\ntype Props = {\n  HeadingBlock: {\n    title: string;\n  };\n};\n\nexport type UserConfig = Config<Props>;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Classes to FieldLabel\nDESCRIPTION: Demonstrates how to apply custom CSS classes to the FieldLabel component using the 'className' prop.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/field-label.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FieldLabel } from \"@measured/puck\";\n\nconst CustomField = () => (\n  <FieldLabel className=\"MyClass\" label=\"Title\">\n    <input />\n  </FieldLabel>\n);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Puck Configuration Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of Puck's configuration documentation. It lists two main sections: the main Config object and the ComponentConfig for individual components.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Configuration\n\n- [Config](configuration/config) - The main configuration object describing what Puck can render.\n- [ComponentConfig](configuration/component-config) - The configuration of each component defined in the main config.\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Column Layout with Root DropZones (TSX)\nDESCRIPTION: This example demonstrates how to create a multi-column layout at the root level using multiple DropZones instead of rendering children. It sets up a two-column grid layout with separate zones for the left and right columns.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/multi-column-layouts.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  root: {\n    render: () => (\n      <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: 16 }}>\n        <DropZone zone=\"left-column\" />\n        <DropZone zone=\"right-column\" />\n      </div>\n    ),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Contentful Field Configuration\nDESCRIPTION: Example showing how to configure a Contentful field in a Puck component with space and access token settings\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/field-contentful/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport createFieldContentful from \"@measured/puck-field-contentful\";\n\nconst config = {\n  components: {\n    Example: {\n      fields: {\n        movie: createFieldContentful(\"movies\", {\n          space: \"my_space\",\n          accessToken: \"abcdefg123456\",\n        }),\n      },\n      render: ({ data }) => {\n        return <p>{data?.fields.title || \"No data selected\"}</p>;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Server-side Page Rendering\nDESCRIPTION: Example of server-side rendering implementation in a Next.js app router page.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/server-components.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { config } from \"../puck.config.server.tsx\";\n\nexport default async function Page() {\n  const data = await getData(); // Some server function\n\n  return <Render data={data} config={config} />;\n}\n```\n\n----------------------------------------\n\nTITLE: DropZone with Custom Styles\nDESCRIPTION: Implementation showing how to apply custom inline styles to a DropZone while preserving default styling.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drop-zone.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div>\n            <DropZone zone=\"my-content\" style={{ display: \"flex\" }} />\n          </div>\n        );\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Puck with Create-Puck-App\nDESCRIPTION: Command to generate a new Puck application using the Next.js recipe template through the create-puck-app CLI tool\nSOURCE: https://github.com/measuredco/puck/blob/main/recipes/next/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-puck-app my-app\n```\n\n----------------------------------------\n\nTITLE: Compositional React Components for Custom Puck UI\nDESCRIPTION: Components for building custom UIs including draggable component lists, field editors, interactive outlines, and drag-and-drop previews.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Puck.Components>\n<Puck.Fields>\n<Puck.Outline>\n<Puck.Preview>\n```\n\n----------------------------------------\n\nTITLE: Implementing Backwards-Compatible Props in Puck Components\nDESCRIPTION: Shows how to maintain backwards compatibility when renaming props by accepting both the old and new prop names in component configurations.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/data-migration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  HeadingBlock: ({ title, heading }) => <h1>{heading || title}</h1>,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Puck in a React Application\nDESCRIPTION: Command to install the Puck package using npm or alternatively using create-puck-app to scaffold a new application.\nSOURCE: https://github.com/measuredco/puck/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @measured/puck --save # or npx create-puck-app my-app\n```\n\n----------------------------------------\n\nTITLE: Migrating Legacy Data with Puck in TSX\nDESCRIPTION: Example showing how to use the migrate function to transform deprecated data to the latest shape. The function takes a legacy data object as input and returns an updated Data object.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/functions/migrate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { migrate } from \"@measured/puck\";\n\nmigrate(legacyData);\n```\n\n----------------------------------------\n\nTITLE: Installing Puck with create-puck-app\nDESCRIPTION: Command to generate a new Puck application using the Remix recipe template.\nSOURCE: https://github.com/measuredco/puck/blob/main/recipes/remix/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-puck-app my-app\n```\n\n----------------------------------------\n\nTITLE: Disabling Iframe Rendering in Puck\nDESCRIPTION: Demonstrates how to opt-out of iframe rendering using the iframe API configuration, which disables all viewport functionality.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/integrating-puck/viewports.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      iframe={{\n        enabled: false,\n      }}\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the render Function in Puck ComponentConfig\nDESCRIPTION: Example of implementing the required render function in a component configuration. The render function returns a simple heading element.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/configuration/component-config.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    HeadingBlock: {\n      render: () => <h1>Hello, world</h1>,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing create-puck-app with npx\nDESCRIPTION: Command to create a new Puck application using npx package runner. Creates a new project in the specified 'my-app' directory.\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/create-puck-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-puck-app my-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Puck App with Starter Template\nDESCRIPTION: Command to create a new application using create-puck-app, which sets up a pre-configured app based on provided recipes.\nSOURCE: https://github.com/measuredco/puck/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-puck-app my-app\n```\n\n----------------------------------------\n\nTITLE: Installing Puck Heading Analyzer Plugin via NPM\nDESCRIPTION: Command to install the heading analyzer plugin package using npm package manager.\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/plugin-heading-analyzer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @measured/puck-plugin-heading-analyzer\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Commit References in Markdown\nDESCRIPTION: This snippet demonstrates how Git commit references are formatted in a Markdown changelog. It includes the commit hash linked to the full commit on GitHub.\nSOURCE: https://github.com/measuredco/puck/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* add favicon to next recipe to prevent Puck 404 ([2c52d27](https://github.com/measuredco/puck/commit/2c52d271c6c20e9368a59eb1f2a5df184cef72bc))\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Home Component in JSX\nDESCRIPTION: This code snippet imports the Home component from a relative path and renders it within the file. It uses JSX syntax, indicating it's part of a React application.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Home } from \"../components/Home\";\n\n<Home />\n```\n\n----------------------------------------\n\nTITLE: Installing Puck with create-puck-app for Next.js\nDESCRIPTION: This command initializes a new Puck application using the 'next' recipe. It prompts the user to enter 'next' when asked for the recipe type.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/demo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-puck-app my-app\n```\n\n----------------------------------------\n\nTITLE: Installing plugin-emotion-cache via npm\nDESCRIPTION: Command to install the @measured/puck-plugin-emotion-cache package using npm.\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/plugin-emotion-cache/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @measured/puck-plugin-emotion-cache\n```\n\n----------------------------------------\n\nTITLE: Setting Header Title in Puck Editor\nDESCRIPTION: Example demonstrating how to set a custom header title in the Puck editor interface.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/puck.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Editor() {\n  return (\n    <Puck\n      headerTitle=\"My page\"\n      // ...\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Puck demo application with Next.js\nDESCRIPTION: Commands to navigate to the demo application directory and start the development server. This is recommended as the easiest way to work on Puck features.\nSOURCE: https://github.com/measuredco/puck/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd apps/demo\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Contentful Field Package\nDESCRIPTION: Command to install the Contentful field package via npm\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/field-contentful/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @measured/puck-field-contentful\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Version Headers in Markdown\nDESCRIPTION: This snippet shows how version headers are formatted in the changelog, including the version number, comparison link to the previous version, and release date.\nSOURCE: https://github.com/measuredco/puck/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.15.0](https://github.com/measuredco/puck/compare/v0.14.2...v0.15.0) (2024-05-30)\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Override for Puck Component List Items\nDESCRIPTION: Demonstrates how to use the overrides prop to customize the rendering of component list items in the Puck editor.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/extending-puck/custom-interfaces.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Puck } from \"@measured/puck\";\n\nexport function Editor() {\n  return (\n    <Puck\n      // ...\n      overrides={{\n        // Render a custom element for each item in the component list\n        componentItem: ({ name }) => (\n          <div style={{ backgroundColor: \"hotpink\" }}>{name}</div>\n        ),\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the Next.js development server for the Puck application\nSOURCE: https://github.com/measuredco/puck/blob/main/recipes/next/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Setting up the Puck development environment with Yarn\nDESCRIPTION: Command to install all dependencies for the Puck project using Yarn package manager. This is the first step required before starting development on the project.\nSOURCE: https://github.com/measuredco/puck/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Exclusion Rules\nDESCRIPTION: Sets up basic crawling rules that allow all user agents but restrict access to version-specific paths (/v/*) for all robots.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-Agent: *\nDisallow: /v/*\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: This command starts the development server for the Next.js application with Puck integration.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/demo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the local development server for the Puck Remix application.\nSOURCE: https://github.com/measuredco/puck/blob/main/recipes/remix/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing create-puck-app with yarn\nDESCRIPTION: Command to create a new Puck application using yarn package manager. Creates a new project in the specified 'my-app' directory.\nSOURCE: https://github.com/measuredco/puck/blob/main/packages/create-puck-app/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn create puck-app my-app\n```\n\n----------------------------------------\n\nTITLE: DropZone with Component Allowlist\nDESCRIPTION: Implementation showing how to restrict which components can be dragged into a DropZone using the 'allow' prop.\nSOURCE: https://github.com/measuredco/puck/blob/main/apps/docs/pages/docs/api-reference/components/drop-zone.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = {\n  components: {\n    Example: {\n      render: () => {\n        return (\n          <div>\n            <DropZone zone=\"my-content\" allow={[\"HeadingBlock\"]} />\n          </div>\n        );\n      },\n    },\n  },\n};\n```"
  }
]