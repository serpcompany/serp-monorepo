[
  {
    "owner": "pomerium",
    "repo": "documentation",
    "content": "TITLE: Configuring Pomerium Core in YAML\nDESCRIPTION: This YAML configuration sets up Pomerium Core with authentication service URL and a route to a verify service. It includes a policy allowing access to a specific email address.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/get-started.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium CRD for Global Settings in Kubernetes\nDESCRIPTION: This YAML snippet demonstrates the minimum configuration required to set up Pomerium in Kubernetes using a Custom Resource Definition. It includes settings for authentication URL, certificates, identity provider, and bootstrap secrets.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/configure.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ingress.pomerium.io/v1\nkind: Pomerium\nmetadata:\n  name: global\nspec:\n  authenticate:\n    url: https://authenticate.localhost.pomerium.io\n  certificates:\n    - pomerium/authenticate-localhost-pomerium-io-prod\n  identityProvider:\n    provider: google\n    secret: pomerium/idp-google\n  secrets: pomerium/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium in YAML\nDESCRIPTION: This YAML snippet shows the Pomerium configuration file. It includes authentication service URL, JWT claim headers, and route configuration for Guacamole with policy and identity header passing.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/guacamole.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\njwt_claim_headers: email\n\nroutes:\n  - from: https://guacamole.localhost.pomerium.io\n    to: http://guacamole:8080\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n    pass_identity_headers: true\n```\n\n----------------------------------------\n\nTITLE: Configuring `pass_identity_headers` in Pomerium Core YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable the passing of Pomerium identity headers (like `X-Pomerium-Jwt-Assertion` and `X-Pomerium-Claim-*`) to the upstream service for a specific route (`https://verify.localhost.pomerium.io`). This is achieved by setting `pass_identity_headers: true` within the route's definition in the Pomerium core configuration file. This setting overrides the global default.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/pass-identity-headers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    pass_identity_headers: true\n```\n\n----------------------------------------\n\nTITLE: Running Pomerium Install Script with Recovery Token - Bash\nDESCRIPTION: This Bash snippet shows how to reinstall Pomerium using a cluster token so as to recover configuration after a Linux script upgrade, specifically relevant for beta users whose install required a token reinjection. It uses curl to fetch the install script, then invokes bash with a required environment variable POMERIUM_ZERO_TOKEN. Replace <cluster_token> with the actual value retrieved from /usr/lib/systemd/system/pomerium.service. The snippet assumes you have curl and bash available.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://console.pomerium.app/install.bash | \\\n  env POMERIUM_ZERO_TOKEN=<cluster_token> bash -s install\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium with Google Identity Provider in YAML\nDESCRIPTION: This configuration sets up Pomerium with Google as the identity provider. It includes essential security settings like cookies and shared secrets, service URLs, and a policy that allows access to a specific service for users with pomerium.com or gmail.com email domains.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/nginx/config.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Main configuration flags : https://www.pomerium.com/docs/reference/\naddress: :80\ncookie_secret: YVFTMIfW8yBJw+a6sYwdW8rHbU+IAAV/SUkCTg9Jtpo=\nshared_secret: 80ldlrU2d7w+wVpKNfevk6fmb8otEx6CqOfshj2LwhQ=\n\nidp_provider: \"google\"\nidp_client_id: REPLACE_ME\nidp_client_secret: REPLACE_ME\n\ninsecure_server: true\nforward_auth_url: http://fwdauth.localhost.pomerium.io\nauthenticate_service_url: https://authenticate.localhost.pomerium.io\n\npolicy:\n  - from: https://verify.localhost.pomerium.io\n    to: https://httpbin\n    allowed_domains:\n      - pomerium.com\n      - gmail.com\n    pass_identity_headers: true\n```\n\n----------------------------------------\n\nTITLE: Authorizing Pomerium Routes based on Okta Group Claim (YAML)\nDESCRIPTION: This YAML snippet shows a Pomerium policy configuration that uses a custom `groups` claim retrieved from Okta for authorization. It defines a route where access is allowed only if the user's token contains a `groups` claim with the value 'admin'. This requires Okta to be configured to include group information in the OIDC token.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/okta.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: 'https://verify.localhost.pomerium.io'\n    to: 'https://verify.pomerium.com'\n    policy:\n      - allow:\n          and:\n            - claim/groups: admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Route with Hosted Authenticate Service\nDESCRIPTION: This YAML snippet demonstrates the minimal configuration required to connect to an upstream service using Pomerium's hosted authenticate service. It defines a route with a policy allowing access to a specific email address.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/authentication.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n    pass_identity_headers: true\n```\n\n----------------------------------------\n\nTITLE: Defining Ingress Policy via Kubernetes Annotation (YAML)\nDESCRIPTION: Example showing how to set an authorization policy for a Kubernetes Ingress resource managed by Pomerium using the `ingress.pomerium.io/policy` annotation. The value of the annotation is a multi-line YAML string representing the PPL policy. This policy allows access only if the request comes from the 'pomerium.com' domain AND the user identifier is 'user'.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/policy.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ningress.pomerium.io/policy: |\n  allow:\n    and:\n      - domain:\n          is: pomerium.com\n      - user:\n          is: user\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Pomerium Zero\nDESCRIPTION: Docker Compose configuration file that sets up Pomerium Zero with necessary services, networks, and volumes. Includes environment variables for cluster token and cache configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    ports:\n      - 443:443\n    restart: always\n    environment:\n      POMERIUM_ZERO_TOKEN: <CLUSTER_TOKEN>\n      XDG_CACHE_HOME: /var/cache\n    volumes:\n      - pomerium-cache:/var/cache\n    networks:\n      main:\n        aliases:\n          - verify.<CLUSTER_STARTER_SUBDOMAIN>.pomerium.app\n  verify:\n    image: pomerium/verify:latest\n    networks:\n      main:\n        aliases:\n          - verify\n\nnetworks:\n  main: {}\n\nvolumes:\n  pomerium-cache:\n```\n\n----------------------------------------\n\nTITLE: Basic PPL Authorization Policy Example in YAML\nDESCRIPTION: Demonstrates a minimal PPL policy configuration with allow and deny rules based on domain and email criteria. Shows how to allow users from a specific domain while denying specific email addresses.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/authorization.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n  and:\n    - domain:\n        is: example.com\ndeny:\n  or:\n    - email:\n        is: spammer@example.com\n    - email:\n        is: malicious@example.com\n```\n\n----------------------------------------\n\nTITLE: Pomerium Enterprise Features Table Markdown\nDESCRIPTION: Markdown table comparing features between Pomerium Core and Enterprise editions, showing which features are available in each version\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/enterprise.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Features | Pomerium Core | Pomerium Enterprise |\n| :-- | :-- | :-- |\n| Identity-based Access | ![Pomerium checkmark](./img/pomerium-checkmark.svg) | ![Pomerium checkmark](./img/pomerium-checkmark.svg) |\n| SSO Support | ![Pomerium checkmark](./img/pomerium-checkmark.svg) | ![Pomerium checkmark](./img/pomerium-checkmark.svg) |\n| Declarative Authorization Policy | ![Pomerium checkmark](./img/pomerium-checkmark.svg) | ![Pomerium checkmark](./img/pomerium-checkmark.svg) |\n```\n\n----------------------------------------\n\nTITLE: URL Path Handling Route Configuration\nDESCRIPTION: Example configurations demonstrating URL path handling with and without trailing slashes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://verify.corp.example.com\n  to: https://verify.pomerium.com/anything\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://verify.corp.example.com\n  to: https://verify.pomerium.com/anything/\n```\n\n----------------------------------------\n\nTITLE: Creating a Domain-Based Authorization Policy in PPL (YAML)\nDESCRIPTION: An authorization policy that grants access to users whose email address contains a specific domain. This policy is more scalable than an individual email policy for organizational use.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-policies.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npolicy:\n  allow:\n    and:\n      - domain:\n          is: example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Redirects in Pomerium\nDESCRIPTION: Configuration to redirect users from one URL to another. This is useful for creating shortcuts or implementing redirects without modifying upstream applications.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://httpbin.localhost.pomerium.io\n  redirect: {'host_redirect': 'verify.localhost.pomerium.io'}\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium Zero with Docker Compose\nDESCRIPTION: This Docker Compose configuration sets up Pomerium Zero. It defines services for Pomerium and verification, sets environment variables, and configures networking and volumes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/cloud/install.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    ports:\n      - 443:443\n    restart: always\n    environment:\n      POMERIUM_ZERO_TOKEN: <CLUSTER_TOKEN>\n      XDG_CACHE_HOME: /var/cache\n    volumes:\n      - pomerium-cache:/var/cache\n    networks:\n      main:\n        aliases:\n          - verify.<CLUSTER_STARTER_SUBDOMAIN>.pomerium.app\n  verify:\n    image: pomerium/verify:latest\n    networks:\n      main:\n        aliases:\n          - verify\n\nnetworks:\n  main: {}\n\nvolumes:\n  pomerium-cache:\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium with Identity Provider Settings and Route Policies in YAML\nDESCRIPTION: A complete Pomerium configuration file that defines identity provider settings, security keys, and routing rules. The configuration includes placeholder values for sensitive information and sets up routes for verification and console services with email-based access policies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/tooljet/config-console.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: REPLACE_ME\nidp_provider_url: REPLACE_ME\nidp_client_id: REPLACE_ME\nidp_client_secret: REPLACE_ME\n\nsigning_key: REPLACE_ME\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    pass_identity_headers: true\n    policy:\n      - allows:\n           or:\n            - email:\n                 is: user@example.com\n  - from: https://console.localhost.pomerium.io\n    to: http://pomerium_console:8701\n    pass_identity_headers: true\n    policy:\n      - allows:\n           or:\n            - email:\n                 is: user@example.com\n```\n\n----------------------------------------\n\nTITLE: Defining a Regex Path Route - Pomerium Core - YAML\nDESCRIPTION: This concise YAML example configures a Pomerium route to match any path conforming to a supplied Go-compatible regular expression. The 'regex' field must be a valid regular expression string, using syntax compatible with Golang's re2 engine. Prerequisite: Pomerium Core service with YAML configuration. Input: HTTP request path. Output: request matches if the path conforms to the regex. No external dependencies beyond Pomerium and the Go regex syntax.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/path-matching.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nregex: '^/(admin|superuser)/.*$'\n\n```\n\n----------------------------------------\n\nTITLE: Importing Pomerium Route YAML Example using MDX Component\nDESCRIPTION: This MDX component tag is used within the documentation to import and display a YAML code example illustrating a Pomerium route configuration. The actual YAML snippet, defined in '/content/examples/config/route.example.yaml.md', demonstrates the structure including `from`, `to`, and `policy` definitions.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/readme.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<RouteExample />\n```\n\n----------------------------------------\n\nTITLE: Route Matching Order with Wildcard and Non-Wildcard From Routes - YAML\nDESCRIPTION: This YAML snippet shows the order-dependent processing of routes in Pomerium when using wildcard and non-wildcard 'from' definitions. It highlights that non-wildcard routes take precedence when matched, impacting which internal target is selected for similar requests. Intended for use in Pomerium route configuration; the first non-wildcard match is used.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/from.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://*.example.com\n    to: http://1.example.com\n  - from: https://bar.example.com\n    to: http://2.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Pomerium-Grafana Integration\nDESCRIPTION: Docker Compose configuration file that sets up Pomerium and Grafana services with JWT authentication. Includes environment variables for Grafana JWT configuration and network settings for service communication.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/grafana.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npomerium:\n  image: pomerium/pomerium:v0.25.1\n  ports:\n    - 443:443\n  restart: always\n  environment:\n    POMERIUM_ZERO_TOKEN: <CLUSTER_TOKEN>\n    XDG_CACHE_HOME: /var/cache\n  volumes:\n    - pomerium-cache:/var/cache\n  networks:\n    main:\n      aliases:\n        - authenticate.<CLUSTER_STARTER_SUBDOMAIN>.pomerium.app\ngrafana:\n  image: grafana/grafana:latest\n  ports:\n    - 3000:3000\n  networks:\n    main: {}\n  environment:\n    - GF_AUTH_SIGNOUT_REDIRECT_URL=https://grafana.<CLUSTER_STARTER_SUBDOMAIN>.pomerium.app/.pomerium/sign_out\n    - GF_AUTH_JWT_ENABLED=true\n    - GF_AUTH_JWT_HEADER_NAME=X-Pomerium-Jwt-Assertion\n    - GF_AUTH_JWT_EMAIL_CLAIM=sub\n    - GF_AUTH_JWT_USERNAME_CLAIM=sub\n    - GF_AUTH_JWT_JWK_SET_URL=https://authenticate.<CLUSTER_STARTER_SUBDOMAIN>.pomerium.app/.well-known/pomerium/jwks.json\n    - GF_AUTH_JWT_CACHE_TTL=60m\n    - GF_AUTH_JWT_AUTO_SIGN_UP=true\n  volumes:\n    - ./grafana-storage:/var/lib/grafana\n```\n\n----------------------------------------\n\nTITLE: Host Header Regex Rewrite Pattern and Substitution - YAML\nDESCRIPTION: This configuration uses regular expressions to extract and rewrite the Host header based on the request URL path. The 'host_path_regex_rewrite_pattern' defines a regex for matching the path, while 'host_path_regex_rewrite_substitution' specifies the new value using capture groups. Pomerium is required for this functionality. The inputs are the pattern, substitution, and the request path; the output is a rewritten Host header. Regular expression syntax must be compatible with Pomerium's expectations.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhost_path_regex_rewrite_pattern: '^/(.+)/.+$'\nhost_path_regex_rewrite_substitution: \\1\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress with Pomerium and Cert-Manager (YAML)\nDESCRIPTION: Defines a Kubernetes `Ingress` resource named 'example'. It utilizes the 'pomerium' Ingress class, applies a Pomerium access policy restricting access to 'user@exampledomain.com' via annotations, and specifies TLS settings managed by cert-manager using the `cert-manager.io/issuer` annotation and the `spec.tls` section to store the certificate in 'example-tls' secret for the host 'example.localhost.pomerium.io'.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    cert-manager.io/issuer: example-issuer\n    ingress.pomerium.io/policy: '[{\"allow\":{\"and\":[{\"email\":{\"is\":\"user@exampledomain.com\"}}]}}]'\n  name: example\nspec:\n  ingressClassName: pomerium\n  rules:\n    - host: example.localhost.pomerium.io\n      http:\n        paths:\n          - backend:\n              service:\n                name: example\n                port:\n                  name: http\n            path: /\n            pathType: Prefix\n  tls:\n    - hosts:\n        - example.localhost.pomerium.io\n      secretName: example-tls\n```\n\n----------------------------------------\n\nTITLE: Pomerium Configuration for JWT Authentication\nDESCRIPTION: YAML configuration for Pomerium service setup including authentication URL, signing key, and route definitions with identity header passing enabled.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/jwt-verification.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\nsigning_key_file: '/pomerium/ec_private.pem'\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    pass_identity_headers: true\n    policy:\n      - allow:\n          and:\n            - domain:\n                is: example.com\n  - from: https://grafana.localhost.pomerium.io\n    to: http://grafana:3000\n    pass_identity_headers: true\n    policy:\n      - allow:\n          and:\n            - domain:\n                is: example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Identity Provider in Pomerium using YAML Configuration File - YAML\nDESCRIPTION: This snippet demonstrates configuring Pomerium to use Google as the identity provider via the primary config file (config.yaml). It specifies the provider, client ID, and client secret obtained from Google Cloud. Required dependency is a valid Google OAuth 2.0 application, with corresponding credentials filled in. Key parameters include 'idp_provider', 'idp_client_id', and 'idp_client_secret', which must match the Google app setup. Inputs are static strings; outputs are dependent on correct Pomerium operation with these settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/google.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: 'google'\\nidp_client_id: 'yyyy.apps.googleusercontent.com'\\nidp_client_secret: 'xxxxxx'\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Condition Policy with Logical Operators in PPL (YAML)\nDESCRIPTION: An authorization policy using the 'or' logical operator to allow access if either the domain matches 'example.com' or the username is 'user2'. This demonstrates combining multiple criteria with logical operators.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-policies.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npolicy:\n  allow:\n    or:\n      - domain:\n          is: example.com\n      - user:\n          is: user2\n```\n\n----------------------------------------\n\nTITLE: Authorization Policy Using Groups Claim in Pomerium (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define an authorization policy in Pomerium that uses a group ID from the 'groups' claim. The 'allow' block specifies that access is permitted only if the authenticated user's 'groups' claim contains the listed group ID. This policy depends on PingOne being configured to map user groups into the token as a 'groups' claim. Inputs are the group UUIDs; outputs are authorization decisions for requests. Group IDs rather than names are required. This snippet should be used within the Pomerium policy configuration context.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/ping.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n  and:\n    - claim/groups: 49dfb9e6-f81f-4a1c-b4a3-d0122ebe4aab\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Authentication Service with GitHub and Route Policies in YAML\nDESCRIPTION: This YAML configuration sets up a Pomerium authentication service using GitHub as the identity provider. It defines the authentication endpoint, IDP credentials, signing key, and routes to protected services with specific access policies based on email addresses.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/tooljet/config-tooljet.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.localhost.pomerium.io\n\n\nidp_provider: github\nidp_client_id: REPLACE_ME\nidp_client_secret: REPLACE_ME\n\n# Update the signing key: https://www.pomerium.com/docs/reference/signing-key\nsigning_key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSURRemVZWDZyT2tuemFnTjRJVTYxaEtRc3pzY1EvRllmbzZPcXhWd2YvdGZvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFc1V0V2psYXZ3eHprSU9DVUNDeFVnTDJza2NjL3QxSTFmQXlxUDgrMWw5YU1CWDlzdm1pYgpRajJxcWFUbUJZZWhuQzhmak5LODZmVXhpc3d1SXN5bnp3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n    pass_identity_headers: true\n  - from: https://tooljet.localhost.pomerium.io\n    to: http://tooljet:80\n    host_rewrite_header: true\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Identity-Aware Proxy in YAML\nDESCRIPTION: Comprehensive YAML configuration for Pomerium that sets up authentication with an identity provider, defines routing rules with policy-based access control, and configures TLS and ingress for Kubernetes deployment. The configuration includes placeholder values for IDP credentials that need to be replaced with actual values.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/traefik-ingress/values/pomerium.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate:\n  idp:\n    provider: REPLACE_ME\n    url: REPLACE_ME\n    clientID: REPLACE_ME\n    clientSecret: REPLACE_ME\n\nconfig:\n  rootDomain: localhost.pomerium.io\n  sharedSecret: R0+XRoGVpcoi4PfB8tMlvnrS5XUasO+D1frAEdYcYjs=\n  cookieSecret: FLPCOQKigK5EQnyXlBhchl5fgzNKqi3ubtvOGt477Dg=\n  generateTLS: true\n  routes:\n    - from: https://hello.localhost.pomerium.io\n      to: http://hello-nginx\n      policy:\n        - allow:\n            or:\n              - domain:\n                  is: gmail.com\ningress:\n  annotations:\n    traefik.ingress.kubernetes.io/router.tls: \"true\"\n  secretName: wildcard-tls\nforwardAuth:\n  enabled: true\n  internal: true\n```\n\n----------------------------------------\n\nTITLE: Domain-Based Policy for Securing Routes in Pomerium (YAML)\nDESCRIPTION: An authorization policy to add to routes that restricts access to users with email addresses from a specific domain. This policy replaces the 'allow_any_authenticated_user' setting for more secure access control.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-policies.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npolicy:\n  allow:\n    and:\n      - domain:\n        is: example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing Policy in Pomerium - YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up a routing configuration in Pomerium that leverages the LEAST_REQUEST load balancing policy. It includes a 'routes' array where each route specifies a set of upstream servers and a policy for distributing inbound requests. The 'least_request_lb_config' block is used to fine-tune the LEAST_REQUEST algorithm via 'choice_count' (number of random backend candidates for each request). Prerequisites include a functional Pomerium deployment and knowledge of defined upstream hosts. Inputs are URLs for both incoming and backend targets, and outputs direct traffic according to the specified load balancing logic. Ensure 'lb_policy' is set to a recognized value and that the correct configuration keys are used for each environment.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/load-balancing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\\nroutes:\\n  - from: https://myapp.localhost.pomerium.io\\n    to:\\n      - http://myapp-srv-1:8080\\n      - http://myapp-srv-2:8080\\n      - http://myapp-srv-3:8080\\n      - http://myapp-srv-4:8080\\n      - http://myapp-srv-5:8080\\n    lb_policy: LEAST_REQUEST\\n    least_request_lb_config:\\n      choice_count: 2 # current envoy default\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Pomerium Routes and Access Policies (YAML)\nDESCRIPTION: This YAML snippet configures multiple routes for Pomerium. It defines mappings from public-facing URLs (e.g., `https://verify.localhost.pomerium.io`) to internal services (e.g., `http://localhost:8000`). Access to these routes is controlled by policies, allowing access based on user domain (`pomerium.io`, `gmail.com`), specific email addresses (`user@example.com`), or group claims (`admins@pomerium.io`). The first route also enables CORS preflight requests and sets a 30-second timeout. This configuration relies on other Pomerium settings being provided separately.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/config/route.example.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# This file contains only route and policy configuration details. Other\n# configuration settings required by pomerium are excluded for clarity.\n# See: https://www.pomerium.io/docs/reference/\n\n#\n# For a complete self contained configuration see : config.example.yaml.\n# Or, mix and match a policy file (this) with env vars : config.example.env\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://localhost:8000\n    policy:\n      - allow:\n          or:\n            - domain:\n                is: pomerium.io\n    cors_allow_preflight: true\n    timeout: 30s\n  - from: https://external-verify.localhost.pomerium.io\n    to: https://verify.pomerium.com\n    policy:\n      - allow:\n          or:\n            - domain:\n                is: gmail.com\n  - from: https://weirdlyssl.localhost.pomerium.io\n    to: http://neverssl.com\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n  - from: https://hello.localhost.pomerium.io\n    to: http://localhost:8080\n    policy:\n      - allow:\n          or:\n            - claim/groups: \"admins@pomerium.io\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw UDP Proxy Routes in Pomerium (YAML)\nDESCRIPTION: Demonstrates configuring a Pomerium route (v0.29+) to proxy raw UDP connections. The `from` URL uses the `udp+https://` scheme, and the `to` URL specifies the upstream UDP service using the `udp://` scheme.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/to.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- from: udp+https://udp.example.com:3001\n  to: udp://localhost:3001\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with Pomerium and Grafana\nDESCRIPTION: This Docker Compose configuration defines services for Pomerium, a verification service, and Grafana. It maps ports and volumes to connect the services together in a development environment.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-routes.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n  verify:\n    image: pomerium/verify:latest\n    expose:\n      - 8000\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium TCP Routing with Authentication and Storage in YAML\nDESCRIPTION: This configuration sets up Pomerium with an authenticate service URL, databroker storage using PostgreSQL, and three TCP routes for Redis, SSH, and PostgreSQL services. Each route is protected by a policy that allows access only to users from the example.com domain.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/tcp/config.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\n# Uncomment to use certificates (optional)\n# certificates:\n#   - cert: /pomerium/cert.pem\n#     key: /pomerium/key.pem\n\ndatabroker_storage_type: postgres\ndatabroker_storage_connection_string: postgresql://postgres:postgres@pgsql:5432\n\nroutes:\n  - from: tcp+https://redis.localhost.pomerium.io:6379\n    to: tcp://redis:6379\n    policy:\n      - allow:\n          or:\n            - domain:\n                is: example.com\n\n  - from: tcp+https://ssh.localhost.pomerium.io:22\n    to: tcp://ssh:2222\n    policy:\n      - allow:\n          or:\n            - domain:\n                is: example.com\n\n  - from: tcp+https://pgsql.localhost.pomerium.io:5432\n    to: tcp://pgsql:5432\n    policy:\n      - allow:\n          or:\n            - domain:\n                is: example.com\n```\n\n----------------------------------------\n\nTITLE: Complete Pomerium Configuration in YAML\nDESCRIPTION: Full configuration file showing multiple routes with different policies and authentication settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-policies.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\nsigning_key_file: '/pomerium/ec_private.pem'\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    pass_identity_headers: true\n    policy:\n      allow:\n        or:\n          - domain:\n              is: example.com\n          - claim/Name: <\"Your Name\">\n      deny:\n        and:\n          - email:\n              starts_with: admin\n  - from: https://grafana.localhost.pomerium.io\n    to: http://grafana:3000\n    pass_identity_headers: true\n    policy:\n      allow:\n        and:\n          - domain:\n              is: example.com\n```\n\n----------------------------------------\n\nTITLE: Matching Requests to a Fixed Port with From URL - YAML\nDESCRIPTION: This YAML snippet shows how to define a Pomerium route that matches only requests on a specific port by including the port in the 'from' URL. When the port is provided, only incoming requests with the matching port in the URL will be processed. Requires secure schemes and is specified in the route's configuration. The limitation is strict matching to the declared port.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/from.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfrom: https://www.example.com:8443\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Response in Pomerium Route (YAML)\nDESCRIPTION: Demonstrates how to specify a static HTTP response directly within a route block using YAML configuration in Pomerium Core. The response object replaces the typical 'to' destination key, allowing the route to return an immediate response with a specified status and body. No external dependencies are required; main parameters are 'status' (HTTP status code) and 'body' (response content). Input is a YAML configuration for Pomerium; output is a static HTTP response as configured.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/direct-response.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://example.com\n    response:\n      status: 200\n      body: 'plain text'\n```\n\n----------------------------------------\n\nTITLE: Deploying Pomerium Split Services with Docker Compose - YAML\nDESCRIPTION: This Docker Compose YAML snippet defines all necessary Pomerium service containers (proxy, authorize, authenticate, databroker) and their dependencies for a split-service, high-availability test deployment. Services are properly segregated, each mounting secrets and configuration files, and some exposing ports for local access. Networks, secrets, environment variables, and service aliases are configured for interoperability. Ensure certificate and config files exist locally prior to deployment; this is intended for local development, not production, as it uses default images and expose-test parameters.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/configuration.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  main: {}\nservices:\n  pomerium-proxy:\n    hostname: pomerium-proxy\n    image: pomerium/pomerium:latest\n    networks:\n      main: {}\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml\n    ports:\n      - 443:443\n    secrets:\n      - wildcard.pem\n      - wildcard-key.pem\n      - ca.pem\n    environment:\n      - SERVICES=proxy\n      - CERTIFICATE_FILE=/run/secrets/wildcard.pem\n      - CERTIFICATE_KEY_FILE=/run/secrets/wildcard-key.pem\n      - CERTIFICATE_AUTHORITY_FILE=/run/secrets/ca.pem\n  pomerium-authorize:\n    hostname: pomerium-authorize\n    image: pomerium/pomerium:latest\n    networks:\n      main: {}\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml\n    secrets:\n      - ca.pem\n    environment:\n      - SERVICES=authorize\n      - CERTIFICATE_AUTHORITY_FILE=/run/secrets/ca.pem\n  pomerium-authenticate:\n    hostname: pomerium-authenticate\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml\n    secrets:\n      - wildcard.pem\n      - wildcard-key.pem\n    environment:\n      - SERVICES=authenticate\n      - ADDRESS=:8443\n      - CERTIFICATE_FILE=/run/secrets/wildcard.pem\n      - CERTIFICATE_KEY_FILE=/run/secrets/wildcard-key.pem\n    ports:\n      - 8443:8443\n    networks:\n      main:\n        aliases:\n          - authenticate.localhost.pomerium.io\n  pomerium-databroker:\n    hostname: pomerium-databroker\n    image: pomerium/pomerium:latest\n    networks:\n      main: {}\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml\n    environment:\n      - SERVICES=databroker\nsecrets:\n  wildcard.pem:\n    file: ./_wildcard.localhost.pomerium.io.pem\n  wildcard-key.pem:\n    file: ./_wildcard.localhost.pomerium.io-key.pem\n  ca.pem:\n    file: ./rootCA.pem\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Certificates in Pomerium using YAML\nDESCRIPTION: This YAML snippet shows how to specify multiple X.509 certificate and private key pairs for use in Pomerium by listing them in an array under the 'certificates' key. Each object in the array must define relative file locations for the 'cert' and 'key' fields. This configuration is required unless Pomerium is running in insecure mode. All certificate files must be in PEM format and use supported curves (RSA or ECDSA P-256).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/certificates.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Array of relative file locations for multiple certs\\ncertificates:\\n  - cert: '$HOME/.acme.sh/authenticate.example.com_ecc/fullchain.cer'\\n    key: '$HOME/.acme.sh/authenticate.example.com_ecc/authenticate.example.com.key'\\n  - cert: '$HOME/.acme.sh/verify.example.com_ecc/fullchain.cer'\\n    key: '$HOME/.acme.sh/verify.example.com_ecc/verify.example.com.key'\\n  - cert: '$HOME/.acme.sh/prometheus.example.com_ecc/fullchain.cer'\\n    key: '$HOME/.acme.sh/prometheus.example.com_ecc/prometheus.example.com.key'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium with Cognito using YAML File Keys\nDESCRIPTION: This YAML snippet shows the necessary identity provider (IdP) settings within a Pomerium configuration file to integrate with AWS Cognito using OIDC. It specifies the provider type ('oidc'), the Cognito provider URL (requiring replacement of `${AWS-REGION}` and `${USER-POOL-ID}` placeholders), the Client ID, Client Secret, and the requested OAuth scopes ('openid', 'profile', 'email'). These keys are used directly within Pomerium's main configuration file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/cognito.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: 'oidc'\nidp_provider_url: 'https://cognito-idp.${AWS-REGION}.amazonaws.com/${USER-POOL-ID}'\nidp_client_id: '304a12ktcc5djt9d7enj6dsjkg'\nidp_client_secret: '1re5ukkv3dab6up5aefv7rru65lu60oblf04t6cv8u9s0itjbci7'\nidp_scopes: 'openid,profile,email'\n```\n\n----------------------------------------\n\nTITLE: Applying Istio Security Policies for Grafana JWT Authentication (yaml)\nDESCRIPTION: This YAML manifest defines Istio security policies to enforce JWT authentication for Grafana users via Pomerium. It includes a RequestAuthentication resource to accept JWTs issued by Pomerium and an AuthorizationPolicy to allow access only to JWTs with the correct audience claim. Prerequisites include a working Istio installation, the JWT issuer accessible at the specified jwksUri, and correct label selectors matching the Grafana workload. The configuration enables strict identity verification at the network layer.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/istio.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.istio.io/v1beta1\nkind: RequestAuthentication\nmetadata:\n  name: grafana-require-pomerium-jwt\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: grafana # This matches the label applied to our test service\n  jwtRules:\n    - issuer: 'grafana.localhost.pomerium.io'\n      audiences:\n        - grafana.localhost.pomerium.io # This should match the value of spec.host in the services Ingress\n      fromHeaders:\n        - name: 'X-Pomerium-Jwt-Assertion'\n      forwardOriginalToken: true\n      jwksUri: https://grafana.localhost.pomerium.io/.well-known/pomerium/jwks.json # Adjust to match your external route URL.\n      # The jwksUri key above is the preferred method of retrieving the signing key, and should be used in production.\n      # See https://istio.io/latest/docs/reference/config/security/jwt/#JWTRule\n      #\n      #If the Authenticate service is using a localhost or other domain that's not a FQDN. You can instead provide the content from that path using the jwks key:\n      #jwks: |\n      #  {\"keys\":[{\"use\":\"sig\",\"kty\":\"EC\",\"kid\":\"e1c5d20b9cf771de0bd6038ee5b5fe831f771d3715b72c2db921611ffca7242f\",\"crv\":\"P-256\",\"alg\":\"ES256\",\"x\":\"j8I1I7eb0Imr2pvxRk13cK9ZjAA3VPrdUIHkAslX2e0\",\"y\":\"jfWNKJkq3b5hrTz2JsrXCcvgJCPP7QSFgX1ZT9wapIQ\"}]}\n---\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: grafana-require-pomerium-jwt\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: grafana # This matches the label applied to our test service\n  action: ALLOW\n  rules:\n    - when:\n        - key: request.auth.claims[aud]\n          values: ['grafana.localhost.pomerium.io'] # This should match the value of spec.host in the service's Ingress\n\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration\nDESCRIPTION: Complete Docker Compose configuration showing Pomerium, Verify, and Grafana services with all necessary networking and JWT authentication settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-single-sign-on.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    ports:\n      - 443:443\n    restart: always\n    environment:\n      POMERIUM_ZERO_TOKEN: <CLUSTER_TOKEN>\n      XDG_CACHE_HOME: /var/cache\n    volumes:\n      - pomerium-cache:/var/cache\n    networks:\n      main:\n        aliases:\n          - verify.<CLUSTER_SUBDOMAIN>.pomerium.app\n          - authenticate.<CLUSTER_SUBDOMAIN>.pomerium.app\n  verify:\n    image: pomerium/verify:latest\n    networks:\n      main:\n        aliases:\n          - verify\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - 3000:3000\n    networks:\n      main: {}\n    environment:\n      - GF_AUTH_SIGNOUT_REDIRECT_URL=https://grafana.<CLUSTER_SUBDOMAIN>.pomerium.app/.pomerium/sign_out\n      - GF_AUTH_JWT_ENABLED=true\n      - GF_AUTH_JWT_HEADER_NAME=X-Pomerium-Jwt-Assertion\n      - GF_AUTH_JWT_EMAIL_CLAIM=email\n      - GF_AUTH_JWT_USERNAME_CLAIM=sub\n      - GF_AUTH_JWT_JWK_SET_URL=https://authenticate.<CLUSTER_SUBDOMAIN>.pomerium.app/.well-known/pomerium/jwks.json\n      - GF_AUTH_JWT_CACHE_TTL=60m\n      - GF_AUTH_JWT_AUTO_SIGN_UP=true\n    volumes:\n      - ./grafana-storage:/var/lib/grafana\n\nnetworks:\n  main: {}\n\nvolumes:\n  pomerium-cache:\n```\n\n----------------------------------------\n\nTITLE: Complete Pomerium Configuration with Domain-Based Policies (YAML)\nDESCRIPTION: A complete Pomerium configuration file showing routes to Verify service and Grafana, each protected by a domain-based policy. This represents the expected state after completing the tutorial.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-policies.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      allow:\n        and:\n          - domain:\n              is: example.com\n  - from: https://grafana.localhost.pomerium.io\n    to: http://grafana:3000\n    policy:\n      allow:\n        and:\n          - domain:\n              is: example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Route Policy in Pomerium Core Configuration (YAML)\nDESCRIPTION: Example demonstrating how to define an authorization policy using Pomerium Policy Language (PPL) within the `policy` key of a route definition in Pomerium's core YAML configuration file. This specific policy allows access only if the request is associated with the 'pomerium.com' domain AND the user identifier is 'user'.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/policy.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      - allow:\n          and:\n            - domain:\n                is: pomerium.com\n            - user:\n                is: user\n```\n```\n\n----------------------------------------\n\nTITLE: Set Request Headers with Static and Variable Values - YAML\nDESCRIPTION: This YAML configuration sets custom request headers when routing traffic through Pomerium. The 'set_request_headers' field supports both static strings and values containing YAML-escaped special characters (such as '$'). The snippet may also reference user policies. Inputs are the request and any dynamic substitution tokens; outputs are modified HTTP requests with new headers. Take care to use double '$$' to include a literal dollar sign.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://verify.corp.example.com\n  to: https://verify.pomerium.com\n  policy:\n    - allow:\n        or:\n          - email:\n              is: user@example.com\n  set_request_headers:\n    # Set a fixed Basic Auth username and password (root:hunter42)\n    Authorization: Basic cm9vdDpodW50ZXI0Mg==\n    # Set a custom header\n    X-Your-favorite-authenticating-Proxy: 'Pomerium'\n    # To include a '$' character in a header value:\n    X-Hello: $$world # header value is set to \"$world\"\n```\n\n----------------------------------------\n\nTITLE: Complete Pomerium Configuration File\nDESCRIPTION: The final state of the Pomerium configuration file after adding the Grafana route. This includes authentication settings and two routes, one for the verification service and one for Grafana.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-routes.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n    pass_identity_headers: true\n  - from: https://grafana.localhost.pomerium.io\n    to: http://grafana:3000\n    allow_any_authenticated_user: true\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Route Health Checks in Pomerium with YAML\nDESCRIPTION: This YAML snippet defines TCP route configuration in Pomerium with advanced health checks for backend services. It specifies TCP endpoints to load balance across, as well as health check parameters such as timeout, interval, threshold values, and byte sequences to send/receive (PING/PONG) for validating backend health. Prerequisites include a Pomerium instance with TCP routing capabilities and endpoints available at the specified hostnames. Key parameters include \\'routes\\' for traffic mapping, \\'health_checks\\' for monitoring, and hex-encoded text used for active checking. The input expects valid YAML and appropriate connectivity to listed services; output is Pomerium routing and active endpoint health validation. Limitations: Only suitable for TCP services; the send/receive check is specific to applications responding with the defined byte sequences.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/load-balancing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: tcp+https://tcp-service.localhost.pomerium.io\n    to:\n      - tcp://tcp-1.local\n      - tcp://tcp-2.local\n    health_checks:\n      - timeout: 1s\n        interval: 5s\n        unhealthy_threshold: 3\n        healthy_threshold: 1\n        tcp_health_check:\n          send:\n            text: '50494E47' #PING\n          receive:\n            text: '504F4E47' #PONG\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Deployment with Google Authentication and Postgres Storage\nDESCRIPTION: This YAML configuration sets up a Pomerium deployment with Google as the identity provider and PostgreSQL as the storage backend. It configures TLS using existing secrets, enables the ingress controller, and sets the root domain. The commented section at the bottom shows an example of route configuration that would be used if not using the Pomerium Ingress Controller.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/kubernetes/pomerium-values.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate:\n  ingress:\n    tls:\n      secretName: pomerium-tls\n  existingTLSSecret: pomerium-tls\n  idp:\n    provider: \"google\"\n    clientID: YOUR_CLIENT_ID\n    clientSecret: YOUR_SECRET\n  proxied: false\n\nproxy:\n  existingTLSSecret: pomerium-tls\n\ndatabroker:\n  existingTLSSecret: pomerium-tls\n  storage:\n    connectionString: postgres://://postgres.pomerium.svc.cluster.local #Replace with the path to your DB solution.\n    type: postgres\n    clientTLS:\n      existingSecretName: pomerium-tls\n      existingCASecretKey: ca.crt\n\nauthorize:\n  existingTLSSecret: pomerium-tls\n\ningressController:\n  enabled: true\n\ningress:\n  enabled: false\n\nconfig:\n  rootDomain: localhost.pomerium.io\n  existingCASecret: pomerium-tls\n  generateTLS: false # On by default, disabled when cert-manager or another solution is in place.\n# The policy block isn't required when using the Pomerium Ingress Controller, as routes are defined\n# by the addition of Ingress Resources.\n#  routes:\n#      # This will be our testing app, to confirm that Pomerium is authenticating and routing traffic.\n#    - from: https://authenticate.localhost.pomerium.io\n#      to: https://pomerium-authenticate.pomerium.svc.cluster.local\n#      preserve_host_header: true\n#      allow_public_unauthenticated_access: true\n#      policy:\n```\n\n----------------------------------------\n\nTITLE: Final Docker Compose Configuration State\nDESCRIPTION: This is the complete Docker Compose configuration file after following the tutorial steps. It defines the Pomerium and verify services with their respective settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/get-started.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n  verify:\n    image: pomerium/verify:latest\n    expose:\n      - 8000\n```\n\n----------------------------------------\n\nTITLE: Declaring Pomerium Route to Node Server - YAML\nDESCRIPTION: This config.yaml snippet defines a route in Pomerium's configuration. Requests to 'https://nodeserver.localhost.pomerium.io' are proxied to 'http://nodeserver:5001'. The policy allows access only if the authenticated domain matches 'example.com'. Dependencies: Pomerium configuration and running 'nodeserver' service. Expected input: HTTP requests matching the route.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\\n  - from: https://nodeserver.localhost.pomerium.io\\n    to: http://nodeserver:5001\\n    policy:\\n      allow:\\n        and:\\n          - domain:\\n              is: example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Core Settings in YAML\nDESCRIPTION: This YAML configuration snippet defines essential settings for a Pomerium instance. It specifies the `authenticate_service_url` for IdP callbacks, enables automatic TLS certificate generation via Let's Encrypt (`autocert`) with staging environment usage, and includes commented-out options for using local certificates (e.g., with mkcert). It configures Google as the identity provider (`idp_provider`) requiring `idp_client_id` and `idp_client_secret` to be replaced. A `cookie_secret` for securing session cookies is provided, and a sample route is defined under `routes` mapping `verify.localhost.pomerium.io` to `verify.pomerium.com` with an access policy allowing a specific email address.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/config/config.minimal.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# See detailed configuration settings : https://www.pomerium.com/docs/reference/\n\n# this is the domain the identity provider will callback after a user authenticates\nauthenticate_service_url: https://authenticate.localhost.pomerium.io\n\n# certificate settings:  https://www.pomerium.com/docs/reference/certificates.html\nautocert: true\n# REMOVE FOR PRODUCTION\nautocert_use_staging: true\n\n# If you're using mkcert to test Pomerium locally, comment the autocert keys and uncomment\n# the keys below, adjusting for your mkcert path:\n# certificate_file: /home/user/.local/share/mkcert/rootCA.pem\n# certificate_key_file: /user/alex/.local/share/mkcert/rootCA-key.pem\n\n# identity provider settings : https://www.pomerium.com/docs/integrations/user-identity/identity-providers.html\nidp_provider: google\nidp_client_id: REPLACE_ME\nidp_client_secret: REPLACE_ME\n\n# Generate 256 bit random keys  e.g. `head -c32 /dev/urandom | base64`\ncookie_secret: WwMtDXWaRDMBQCylle8OJ+w4kLIDIGd8W3cB4/zFFtg=\n\n# https://pomerium.io/reference/#routes\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: https://verify.pomerium.com\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n    pass_identity_headers: true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium with Okta via YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Pomerium to use Okta as the identity provider by specifying the provider type, Okta domain URL, client ID, and client secret in the `config.yaml` file. These values are obtained after creating an OIDC application within Okta.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/okta.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: 'okta'\nidp_provider_url: 'https://awesomecompany.okta.com'\nidp_client_id: 'REPLACE ME'\nidp_client_secret: 'REPLACE ME'\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Routes in Pomerium\nDESCRIPTION: Example configuration for setting up a TCP route in Pomerium to protect Redis access. Demonstrates the use of from/to fields and policy configuration for access control.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/tcp.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: tcp+https://redis.corp.example.com:6379\n    to: tcp://redis.internal.example.com:6379\n    policy:\n      - allow:\n          or:\n            - email:\n                is: contractor@not-example.com\n            - claim/groups: 'datascience@example.com'\n```\n\n----------------------------------------\n\nTITLE: Creating a Route via cURL\nDESCRIPTION: This cURL command sends a POST request to create a new route within a specific organization and namespace. It requires the organization ID in the path, the ID token for authorization, and a JSON body specifying the `namespaceId`, route `name`, source URL (`from`), destination URL(s) (`to`), and an array of `policyIds` to attach.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-zero.md#2025-04-23_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://console.pomerium.app/api/v0/organizations/{organizationId}/routes' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {ID-TOKEN}' \\\n--data '{\n    \"namespaceId\": \"bwjkRZwxbNXBQHHcJHphGSNBbxt\",\n    \"name\": \"HTTP Bin\",\n    \"from\": \"https://httpbin.{CLUSTER_STARTER_SUBDOMAIN}.pomerium.app\",\n    \"to\": [\"http://httpbin:80\"],\n    \"policyIds\": [\"bgrXNgrJFJmMZvPsVsbZHGWxVWP\"]\n}'\n```\n\n----------------------------------------\n\nTITLE: Advanced Policy with Deny Rule in YAML\nDESCRIPTION: Complex policy configuration combining allow and deny rules with multiple criteria and operators.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-policies.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npolicy:\n  allow:\n    or:\n      - domain:\n          is: example.com\n      - claim/Name: <\"Your Name\">\n  deny:\n    and:\n      - email:\n          starts_with: admin\n```\n\n----------------------------------------\n\nTITLE: Istio RequestAuthentication and AuthorizationPolicy Configuration\nDESCRIPTION: YAML configuration for Istio CRDs defining RequestAuthentication and AuthorizationPolicy for a test service. It specifies JWT validation rules and authorization policies for incoming traffic.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/istio.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.istio.io/v1beta1\nkind: RequestAuthentication\nmetadata:\n  name: nginx-require-pomerium-jwt\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: nginx\n  jwtRules:\n    - issuer: 'hello.localhost.pomerium.io'\n      audiences:\n        - hello.localhost.pomerium.io\n      fromHeaders:\n        - name: 'X-Pomerium-Jwt-Assertion'\n      jwksUri: https://istio.localhost.pomerium.io/.well-known/pomerium/jwks.json\n---\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: nginx-require-pomerium-jwt\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: nginx\n  action: ALLOW\n  rules:\n    - when:\n        - key: request.auth.claims[aud]\n          values: ['hello.localhost.pomerium.io']\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium with Okta via Environment Variables\nDESCRIPTION: This Bash snippet shows the environment variable equivalents for configuring Pomerium with Okta. Set `IDP_PROVIDER` to 'okta', `IDP_PROVIDER_URL` to your Okta domain, and provide the `IDP_CLIENT_ID` and `IDP_CLIENT_SECRET` obtained from the Okta OIDC application settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/okta.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIDP_PROVIDER=\"okta\"\nIDP_PROVIDER_URL=\"https://dev-108295.okta.com\"\nIDP_CLIENT_ID=\"REPLACE_ME\"\nIDP_CLIENT_SECRET=\"REPLACE_ME\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Regex Path Route - Kubernetes Ingress - YAML\nDESCRIPTION: This YAML snippet demonstrates advanced path matching using regular expressions in a Kubernetes Ingress resource. It uses a custom annotation ('ingress.pomerium.io/path_regex') to enable regex for path matching, paired with an Ingress rule specifying 'pathType: ImplementationSpecific' and a Go-compatible regex pattern in 'path'. Inputs are HTTP requests evaluated against the regex. Prerequisites: Kubernetes cluster with Pomerium ingress controller; outputs: requests matching the regex are routed to the designated backend. Limitations: correct annotation is mandatory for effect.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/path-matching.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    ingress.pomerium.io/path_regex: 'true'\n  name: example\nspec:\n  ingressClassName: pomerium\n  rules:\n    - host: example.localhost.pomerium.io\n      http:\n        paths:\n          - backend:\n              service:\n                name: example\n                port:\n                  name: http\n            path: ^/(admin|superuser)/.*$\n            pathType: ImplementationSpecific\n\n```\n\n----------------------------------------\n\nTITLE: Defining Pomerium Routes and Policies in YAML\nDESCRIPTION: This YAML configuration defines several proxy routes for Pomerium. Each item in the list represents a route, mapping an external URL (`from`) to an internal service (`to`) and specifying access control rules, such as restricting access to users from specific domains (`allowed_domains`) or individual email addresses (`allowed_users`). Optional parameters like `cors_allow_preflight` and `timeout` can also be configured per route. Note that the top-level `policy:` key might need to be uncommented depending on how the configuration is loaded.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/config/policy.example.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# This file contains only policy and route configuration details. Other\n# configuration settings required by pomerium are excluded for clarity.\n# See: https://www.pomerium.com/docs/reference/\n\n#\n# For a complete self contained configuration see : config.example.yaml.\n# Or, mix and match a policy file (this) with env vars : config.example.env\n\n# Proxied routes and per-route policies are defined in a policy block\n# NOTA BENE: You must uncomment the below 'policy' key if you are loading policy as a file.\n# policy:\n- from: https://verify.localhost.pomerium.io\n  to: http://localhost:8000\n  allowed_domains:\n    - pomerium.io\n  cors_allow_preflight: true\n  timeout: 30s\n- from: https://external-verify.localhost.pomerium.io\n  to: https://verify.pomerium.com\n  allowed_domains:\n    - gmail.com\n- from: https://weirdlyssl.localhost.pomerium.io\n  to: http://neverssl.com\n  allowed_users:\n    - user@example.com\n- from: https://hello.localhost.pomerium.io\n  to: http://localhost:8080\n  allowed_users:\n    - user@example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Services in Docker Compose (YAML)\nDESCRIPTION: This YAML snippet defines two services, `pomerium` and `verify`, within a Docker Compose file. The `pomerium` service uses the latest Pomerium image, mounts a local `config.yaml` file for configuration, and maps host port 443 to the container's port 443. The `verify` service uses the `pomerium/verify` image and exposes port 8000 internally, intended to be accessed via Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/docker/basic.docker-compose.yml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      ## Mount your config file: https://www.pomerium.com/docs/reference/\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n  ## https://verify.localhost.pomerium.io --> Pomerium --> http://verify\n  verify:\n    image: pomerium/verify:latest\n    expose:\n      - 8000\n```\n\n----------------------------------------\n\nTITLE: Defining Pomerium Core Configuration in YAML\nDESCRIPTION: This YAML snippet configures fundamental Pomerium settings. It specifies the `authenticate_service_url` for handling user authentication, sets the `shared_secret` and `cookie_secret` for security, and configures Google as the `idp_provider` along with its corresponding `idp_client_id` and `idp_client_secret`. These settings are crucial for Pomerium's core operation and identity management integration. Replace 'XXXXXX' placeholders with actual values.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/cloudrun/config.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=\"config.yaml\"\nauthenticate_service_url: https://authn.cloudrun.pomerium.io\nshared_secret: XXXXXX\ncookie_secret: XXXXXX\nidp_provider: \"google\"\nidp_client_id: XXXXXX\nidp_client_secret: \"XXXXXX\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Pomerium Configuration\nDESCRIPTION: This YAML snippet shows how to define routes in a Pomerium configuration file, including a basic route for a verification service and a new route for Grafana. The routes define the external URL (from) and internal destination (to) along with authentication policies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-routes.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n    pass_identity_headers: true\n# Add Grafana route here:\n\t- from: https://grafana.localhost.pomerium.io\n\t  to: http://grafana:3000\n\t  allow_any_authenticated_user: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing and Access Policies with Pomerium in YAML\nDESCRIPTION: This YAML configuration snippet sets up two routes in Pomerium, each mapping an external URL (the 'from' field) to an internal service (the 'to' field). The first route enforces a policy with an OR clause allowing access only to a specific email address, while the second route explicitly lists allowed users and enables identity headers for downstream requests by setting 'pass_identity_headers' to true. Dependencies include a running Pomerium instance configured to consume this YAML as its policy source. The snippet expects properly formatted user emails and accessible backend URLs. These configurations will restrict access to specified users and control identity forwarding, with limitations derived from the correct setup of user identities and service IPs or domain names.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/enterprise/hosted-auth-config.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n  - from: https://console.localhost.pomerium.io\n    to: http://pomerium_console:8701\n    allowed_users:\n      - user@example.com\n    pass_identity_headers: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefix Rewriting in Pomerium (YAML) - YAML\nDESCRIPTION: This YAML snippet demonstrates configuring the prefix and prefix_rewrite settings for a Pomerium route. It is intended to forward incoming paths matching the specified prefix to an upstream service, rewriting the matched prefix to a target path. Required keys include 'from' (route origin), 'to' (upstream target), 'prefix' (the path to match), and 'prefix_rewrite' (the value to rewrite to). Inputs are route URLs and path values. The output is the rewritten route in line with prefix rules. Prerequisites: Pomerium with YAML or JSON configuration support.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/path-rewriting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfrom: https://from.example.com\\nto: https://to.example.com\\nprefix: /admin\\nprefix_rewrite: /\n```\n\n----------------------------------------\n\nTITLE: Final Example Docker Compose Setup - YAML\nDESCRIPTION: This docker-compose.yaml snippet represents the post-cleanup state, showing only relevant services: pomerium, verify, and grafana. Volume mounts, environment variables, and port configuration are shown, with Pomerium acting as the gateway. It requires the respective images and configuration files in place.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\\n  pomerium:\\n    image: pomerium/pomerium:latest\\n    volumes:\\n      - ./config.yaml:/pomerium/config.yaml:ro\\n      - ./ec_private.pem:/pomerium/ec_private.pem:ro\\n    ports:\\n      - 443:443\\n  verify:\\n    image: pomerium/verify:latest\\n    expose:\\n      - 8000\\n    environment:\\n      - JWKS_ENDPOINT=https://pomerium/.well-known/pomerium/jwks.json\\n  grafana:\\n    image: grafana/grafana:latest\\n    ports:\\n      - 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Multiple Certificates Configuration\nDESCRIPTION: Configuration for specifying multiple certificates for different domains.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncertificates:\n  - cert: '$HOME/.acme.sh/authenticate.example.com_ecc/fullchain.cer'\n    key: '$HOME/.acme.sh/authenticate.example.com_ecc/authenticate.example.com.key'\n  - cert: '$HOME/.acme.sh/verify.example.com_ecc/fullchain.cer'\n    key: '$HOME/.acme.sh/verify.example.com_ecc/verify.example.com.key'\n  - cert: '$HOME/.acme.sh/prometheus.example.com_ecc/fullchain.cer'\n    key: '$HOME/.acme.sh/prometheus.example.com_ecc/prometheus.example.com.key'\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Routes in Pomerium YAML Configuration\nDESCRIPTION: Example YAML configuration for setting up a UDP route in Pomerium. The route tunnels UDP traffic from an external endpoint to an internal endpoint with specific authorization policies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/udp.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: udp+https://time.corp.example.com:13\n    to: udp://time.internal.example.com:13\n    policy:\n      - allow:\n          or:\n            - email:\n                is: contractor@not-example.com\n            - claim/groups: 'datascience@example.com'\n```\n\n----------------------------------------\n\nTITLE: Authorizing and Routing with Minimal Pomerium Configuration - YAML\nDESCRIPTION: This YAML snippet provides a minimal Pomerium configuration file necessary for running split-service mode in a local or test environment. Key parameters include identity provider (IDP) settings, service URLs, shared secrets, and route definitions. The configuration assumes gRPC communication is insecure (for local testing), and service URLs reference Docker Compose service names. Prior to use, replace placeholder IDP credentials. The configuration is designed for demonstration and should not be used in production without appropriate secrets management and certificate handling.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/configuration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: ***FILL IN***\nidp_client_id: ***FILL IN***\nidp_client_secret: ***FILL IN***\n\ngrpc_insecure: true\ngrpc_address: ':80'\n\nauthenticate_service_url: https://authenticate.localhost.pomerium.io:8443\nauthorize_service_url: http://pomerium-authorize\ndatabroker_service_url: http://pomerium-databroker\n\ncookie_secret: WwMtDXWaRDMBQCylle8OJ+w4kLIDIGd8W3cB4/zFFtg=\nshared_secret: 9OkZR6hwfmVD3a7Sfmgq58lUbFJGGz4hl/R9xbHFCAg=\nsigning_key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUhQbkN5MXk0TEZZVkhQb3RzM05rUSttTXJLcDgvVmVWRkRwaUk2TVNxMlVvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFT1h0VXAxOWFwRnNvVWJoYkI2cExMR1o1WFBXRlE5YWtmeW5ISy9RZ3paNC9MRjZhWEY2egpvS3lHMnNtL2wyajFiQ1JxUGJNd3dEVW9iWFNIODVIeDdRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=\n\nroutes:\n  - from: https://httpbin.localhost.pomerium.io\n    to: https://httpbin.org/get\n    allow_any_authenticated_user: true\n    pass_identity_headers: true\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Prefix Path Route - Pomerium Core - YAML\nDESCRIPTION: This example YAML fragment shows how to configure a route that matches any incoming request path beginning with the specified prefix using the 'prefix' field. It is intended for use in Pomerium's Core YAML configuration file, and depends on the Pomerium service. Key parameters are 'from', 'to', and 'prefix', where 'prefix' should be a string. Input is any HTTP request matching the prefix. Output is the request being routed if the prefix matches. No additional dependencies are needed.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/path-matching.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfrom: https://from.example.com\nto: https://to.example.com\nprefix: /admin\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium for Self-Hosted GitLab via YAML\nDESCRIPTION: This YAML configuration snippet is for integrating Pomerium with a self-hosted GitLab instance using the generic OIDC provider type. It sets `idp_provider` to 'oidc', specifies the Client ID, Secret, required OIDC scopes (`openid,profile,email`), and the base URL (`idp_provider_url`) of the self-hosted GitLab instance. Replace 'REDACTED' values and the example URL with actual credentials and the correct GitLab domain.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/gitlab.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: oidc\nidp_client_id: 'REDACTED'\nidp_client_secret: 'REDACTED'\nidp_scopes: openid,profile,email\nidp_provider_url: https://gitlab.example.com # Base URL of GitLab instance\n```\n\n----------------------------------------\n\nTITLE: Enabling Any Authenticated User via Kubernetes Ingress Annotation - YAML\nDESCRIPTION: Enables access for any authenticated user at the Kubernetes ingress level by applying the allow_any_authenticated_user annotation to an ingress resource. Requires a Kubernetes environment with ingress resources and Pomerium's ingress controller deployed. The relevant annotation is ingress.pomerium.io/allow_any_authenticated_user and must be set to true; the default is false. This controls route-level access checks in a Kubernetes-native deployment and expects YAML-formatted Kubernetes manifest input.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/allow-any-authenticated-user.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/allow_any_authenticated_user: true\n```\n\n----------------------------------------\n\nTITLE: Rotating Pomerium Zero Cluster Token via API using cURL\nDESCRIPTION: This cURL command sends a POST request to the Pomerium Zero API endpoint `/api/v0/organizations/{organizationId}/clusters/{clusterId}/token` to rotate the cluster token. It requires a valid ID token for authorization (`Bearer {ID-TOKEN}`) and the specific organization and cluster IDs in the URL path. Successfully rotating the token invalidates the old one and returns a new refresh token.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/clusters.mdx#2025-04-23_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl 'https://console.pomerium.app/api/v0/organizations/{organizationId}/clusters/{clusterId}/token' \\\n--header 'Authorization: Bearer {ID-TOKEN}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Enterprise Console\nDESCRIPTION: YAML configuration for the Pomerium Enterprise Console. It specifies administrators and the license key.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nadministrators: admin@example.com\nlicense_key: REPLACE_ME\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-Limited Access Control in Pomerium PPL\nDESCRIPTION: A YAML configuration snippet that demonstrates how to create a time-limited access policy using Pomerium Policy Language (PPL). The policy grants access to a specific user email before a defined timestamp using date and email criteria.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/jit.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n  and:\n    - email:\n        is: user@example.com\n    - date:\n        before: 2150-01-02T16:20:00\n```\n\n----------------------------------------\n\nTITLE: Retrieving Well-Known Pomerium OAuth and JWKS Endpoints - JSON\nDESCRIPTION: Shows the structure of the JSON response returned from the Pomerium /.well-known/pomerium endpoint, which provides important OAuth, OIDC, and JWKS URLs including the authentication callback endpoint, JWKS URI, and frontchannel logout URI. This output is typically retrieved via a GET request to the endpoint, and is essential for clients needing to perform OAuth/OIDC flows or implement SSO logout. No parameters are accepted; the response is determined by the server configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/authentication.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"authentication_callback_endpoint\\\": \\\"https://authenticate.localhost.pomerium.io/oauth2/callback\\\",\\n  \\\"jwks_uri\\\": \\\"https://authenticate.localhost.pomerium.io/.well-known/pomerium/jwks.json\\\",\\n  \\\"frontchannel_logout_uri\\\": \\\"https://authenticate.localhost.pomerium.io/.pomerium/sign_out\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pomerium Route with Policy and Identity Headers (YAML)\nDESCRIPTION: This YAML snippet configures Pomerium. It sets the `authenticate_service_url`, specifies `email` as the JWT claim to include in headers, and defines a route for `guacamole.localhost.pomerium.io`. This route forwards traffic to `http://guacamole:8080`, enforces a policy allowing access only to `user@example.com`, and enables `pass_identity_headers` globally and for the specific route.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/guacamole/guacamole.pomerium-config.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\njwt_claim_headers: email\n\nroutes:\n    pass_identity_headers: true\n  - from: https://guacamole.localhost.pomerium.io\n    to: http://guacamole:8080\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n    pass_identity_headers: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Identity Provider via YAML Config - Pomerium - YAML\nDESCRIPTION: Demonstrates the required YAML keys to configure Pomerium for use with Auth0 as an identity provider. The configuration includes the provider identifier, provider URL, client ID, and client secret, all of which are obtained from Auth0 after application creation. This snippet is used in Pomerium's main configuration file, requires previously acquired credentials, and inputs must be correctly replaced for proper functionality.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/auth0.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: 'auth0'\nidp_provider_url: 'https://awesome-company.auth0.com'\nidp_client_id: 'REPLACE_ME' # from the web application\nidp_client_secret: 'REPLACE_ME' # from the web application\n```\n\n----------------------------------------\n\nTITLE: Final Example Pomerium Route Configuration - YAML\nDESCRIPTION: This YAML snippet serves as the cleaned-up state of config.yaml, showing two secured routes for 'verify' and 'grafana' services. It includes policies with domain and claim-based access rules, as well as a deny condition allowing finer access control. Prerequisites: Running instances of the referenced backend services and proper keys.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\\n\\nsigning_key_file: '/pomerium/ec_private.pem'\\n\\nroutes:\\n  - from: https://verify.localhost.pomerium.io\\n    to: http://verify:8000\\n    pass_identity_headers: true\\n    policy:\\n      allow:\\n        or:\\n          - domain:\\n              is: example.com\\n          - claim/Name: <\\\"Your Name\\\">\\n      deny:\\n        and:\\n          - email:\\n              starts_with: admin\\n  - from: https://grafana.localhost.pomerium.io\\n    to: http://grafana:3000\\n    pass_identity_headers: true\\n    policy:\\n    \\tallow:\\n    \\t  and:\\n    \\t    - domain:\\n    \\t        is: example.com\n```\n\n----------------------------------------\n\nTITLE: Using Host Rewrite Header in Pomerium\nDESCRIPTION: Configuration to change the host header's value in requests to upstream services. This provides flexibility in how the upstream service identifies the source of requests.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://httpbin.localhost.pomerium.io\n    to: https://httpbin:80\n    set_response_headers:\n      X-SET-RESPONSE-HEADERS: X-VALUE\n    set_request_headers:\n      X-SET-REQUEST-HEADERS: X-VALUE\n    remove_request_headers:\n      - X-Pomerium-Claim-User\n      - X-Pomerium-Claim-Name\n    # preserve_host_header: true\n\t\thost_rewrite_header: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Services and Dependencies with Docker Compose - YAML\nDESCRIPTION: Defines multiple Docker Compose services for orchestrating Pomerium, including authentication proxy, enterprise console, PostgreSQL database, and verification service. Requires Docker, Docker Compose utilities, and secrets inserted via environment variables. Configuration parameters initialize networking (ports), persistence (volumes), security keys and shared secrets, with health checks to guarantee service readiness. Inputs are configuration files, exposed ports, and environment variables; outputs are running containers connected internally and externally as specified. Mounts, image tags, and key fields should be replaced for production deployments to match security and infrastructure policies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/enterprise/hosted-auth-docker.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\\n  pomerium:\\n    image: pomerium/pomerium:latest\\n    volumes:\\n      - ./config.yaml:/pomerium/config.yaml:ro\\n    ports:\\n      - 443:443\\n    environment:\\n      - AUTHENTICATE_SERVICE_URL=https://authenticate.pomerium.app\\n      - COOKIE_SECRET=j9jZgysWVxCs3uqbmw9a2LxWwz1ZPLKQZ8v20eoDT8Y=\\n      - SHARED_SECRET=mxGl062SqkrbQKvqG9R2jqHqxq1Oi1BNj2AAeZHNq7c=\\n      - DATABROKER_STORAGE_TYPE=postgres\\n      - DATABROKER_STORAGE_CONNECTION_STRING=postgresql://postgres:postgres@database/postgres?sslmode=disable\\n      - SIGNING_KEY=LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUc0R0N4bjlxaDBHRVZnV3VCM0VoRm51RlptZ2VkZXJsMEtLd0ZoRWo4Tk9vQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFMXFOWXNUMFpSZEVTS0djSXRqZFUxcGJZREVDTktRd2lNcmNHVFl6RUhLM1V5MnVoT1N3bgpXVGdWUHppTk4vcWozYXFJeSs3Sk55ZEFLVlo3bURPNGtnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=\\n  pomerium_console:\\n    depends_on:\\n      database:\\n        condition: service_healthy\\n      pomerium:\\n        condition: service_started\\n    image: docker.cloudsmith.io/pomerium/enterprise/pomerium-console:v0.29.0\\n    command:\\n      - 'serve'\\n      - '--config'\\n      - '/pomerium/console-config.yaml'\\n    expose:\\n      - 8701\\n      - 9090\\n    environment:\\n      - AUDIENCE=console.localhost.pomerium.io\\n      - DATABASE_ENCRYPTION_KEY=tXBj4gGDj45m8cW7ehhcy5lRuxsEeNl0X/nnsN5YJPw=\\n      - DATABROKER_SERVICE_URL=http://pomerium:5443\\n      - SHARED_SECRET=mxGl062SqkrbQKvqG9R2jqHqxq1Oi1BNj2AAeZHNq7c=\\n      - DATABASE_URL=postgresql://postgres:postgres@database/postgres?sslmode=disable\\n      - PROMETHEUS_LISTEN_ADDR=:9090\\n      - PROMETHEUS_DATA_DIR=/data\\n      - SIGNING_KEY=LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUc0R0N4bjlxaDBHRVZnV3VCM0VoRm51RlptZ2VkZXJsMEtLd0ZoRWo4Tk9vQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFMXFOWXNUMFpSZEVTS0djSXRqZFUxcGJZREVDTktRd2lNcmNHVFl6RUhLM1V5MnVoT1N3bgpXVGdWUHppTk4vcWozYXFJeSs3Sk55ZEFLVlo3bURPNGtnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=\\n    volumes:\\n      - metrics:/data:rw\\n      - ./console-config.yaml:/pomerium/console-config.yaml:ro\\n  database:\\n    image: postgres:latest\\n    restart: always\\n    healthcheck:\\n      test: ['CMD-SHELL', 'pg_isready -d postgres -U postgres']\\n      interval: 5s\\n      timeout: 5s\\n      retries: 5\\n      start_period: 30s\\n    environment:\\n      - POSTGRES_USER=postgres\\n      - POSTGRES_PASSWORD=postgres\\n      - POSTGRES_DB=postgres\\n    expose:\\n      - 5432\\n    volumes:\\n      - pgdata:/var/lib/postgresql/data\\n  verify:\\n    image: pomerium/verify:latest\\n    expose:\\n      - 8000\\n    restart: always\\nvolumes:\\n  pgdata:\\n  metrics:\\n\n```\n\n----------------------------------------\n\nTITLE: HTTP Health Check Configuration\nDESCRIPTION: Active health check configuration for HTTP endpoints with customizable parameters.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://myapp.localhost.pomerium.io\n    to:\n      - http://myapp-srv-1:8080\n      - http://myapp-srv-2:8080\n    health_checks:\n      - timeout: 10s\n        interval: 60s\n        healthy_threshold: 1\n        unhealthy_threshold: 2\n        http_health_check:\n          path: '/'\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium Ingress Controller via kubectl\nDESCRIPTION: Command to deploy the Pomerium Ingress Controller using kubectl apply with kustomize\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/install.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nkubectl apply -k github.com/pomerium/ingress-controller/config/default\\?ref=v0.29.0\n```\n\n----------------------------------------\n\nTITLE: Configuring `pass_identity_headers` via Kubernetes Ingress Annotation\nDESCRIPTION: This YAML snippet shows the Kubernetes Ingress annotation required to enable passing Pomerium identity headers to the upstream service for the routes defined by that Ingress resource. Setting `ingress.pomerium.io/pass_identity_headers: 'true'` instructs the Pomerium Ingress Controller to forward identity headers for the associated service(s). This configuration is applied within the `metadata.annotations` section of a Kubernetes Ingress resource and overrides the global default setting.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/pass-identity-headers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/pass_identity_headers: 'true'\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Pomerium Route for Httpbin Service\nDESCRIPTION: YAML configuration for setting up a basic Pomerium route that enables access to httpbin service through a specific subdomain. The route includes email-based access control policy.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/synology.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# route.yaml\n- from: https://httpbin.int.nas.example\n  to: http://httpbin\n  policy:\n    - allow:\n        or:\n          - email:\n              is: your.email.address@gmail.com\n```\n\n----------------------------------------\n\nTITLE: Rewriting Response Headers in Pomerium Kubernetes (YAML)\nDESCRIPTION: This snippet shows how to rewrite response headers in Pomerium when using Kubernetes. It uses an ingress annotation to modify the Location header, replacing a specific prefix with a new value.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/rewrite_response_headers: |\n  - header: Location\n    prefix: http://localhost:8000/two/\n    value: http://frontend/one/\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium for Cloud Run (YAML)\nDESCRIPTION: YAML configuration file for Pomerium, including IdP settings and other necessary parameters for Cloud Run deployment.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/cloud-run.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.cloudrun.pomerium.io\nshared_secret: ${SHARED_SECRET}\ncookie_secret: ${COOKIE_SECRET}\nidp_provider: google\nidp_client_id: ${IDP_CLIENT_ID}\nidp_client_secret: ${IDP_CLIENT_SECRET}\nsigning_key: |\n  ${SIGNING_KEY}\nenable_google_cloud_serverless_authentication: true\ngrpc_insecure: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Route for Kubernetes API Server\nDESCRIPTION: This YAML defines a Pomerium route configuration that proxies requests to a Kubernetes API server. It includes the necessary settings to connect to the cluster and configures JWT issuer formatting and authorization header injection.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/kubernetes-access.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://mycluster.localhost.pomerium.io\n    to:\n      - '' # API server address (e.g. https://x.x.x.x:6443)\n    tls_custom_ca: '' # base64-encoded API server CA cert\n    jwt_issuer_format: uri\n    set_request_headers:\n      Authorization: 'Bearer ${pomerium.jwt}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Routes for User Context Preservation\nDESCRIPTION: YAML configuration example showing how to set up Pomerium routes for an App and API service with identity header passing enabled. Demonstrates configuration for user authentication and service account access.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/original-request-context.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - name: App\n    from: https://app.localhost.pomerium.io\n    to: https://appserver.local\n    pass_identity_headers: true\n    policy:\n      - allow:\n          or:\n            - domain:\n                is: companydomain.com\n  - name: API\n    from: https://api.localhost.pomerium.io\n    to: https://apiserver.local\n    pass_identity_headers: true\n    policy:\n      - allow:\n          or:\n            - user:\n                is: api-access\n```\n\n----------------------------------------\n\nTITLE: Configuring IdP Provider URL in Pomerium via Environment Variable (bash)\nDESCRIPTION: Sets the identity provider URL for Pomerium using the 'IDP_PROVIDER_URL' environment variable. Requires Pomerium to be configured to read necessary URLs from the environment. The assigned value must be a URL (not including the discovery document path) suitable for use in OIDC discovery. Input is a Bash variable assignment and output is automatic discovery of IdP endpoints by Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nIDP_PROVIDER_URL='https://awesome-company.auth0.com'\n```\n\n----------------------------------------\n\nTITLE: Exchanging API User Token for ID Token via cURL\nDESCRIPTION: This cURL command sends a POST request to the Pomerium Zero API's `/token` endpoint to exchange a long-lived API User Token for a temporary ID token required for subsequent authenticated API calls. The API User Token must be included in the JSON request body.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-zero.md#2025-04-23_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://console.pomerium.app/api/v0/token' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"refreshToken\": \"<API-USER-TOKEN>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Allow Rule Based on Email in PPL (YAML)\nDESCRIPTION: A simple authorization policy that only grants access to a user with a specific email address. This uses the 'allow' action with the 'and' logical operator and the 'email' criterion.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-policies.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npolicy: # Policy object starts here\n  allow: # At least one action\n    and: # Logical operator\n      - email: # Criterion\n        is: example@domain.com # Value\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Identity Headers in YAML\nDESCRIPTION: YAML configuration for Pomerium routes with pass_identity_headers enabled to allow JWT verification for both Verify and Grafana services.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/jwt-verification.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    pass_identity_headers: true\n    policy:\n      - allow:\n          and:\n            - domain:\n                is: example.com\n  - from: https://grafana.localhost.pomerium.io\n    to: http://grafana:3000\n    pass_identity_headers: true\n    policy:\n      - allow:\n          and:\n            - domain:\n                is: example.com\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Route Timeout in Pomerium Core (YAML)\nDESCRIPTION: Sets the `timeout` value for a specific route in the Pomerium configuration file (YAML). This defines the maximum duration for a request/response cycle for that route, specified using Go Duration string format (e.g., '30s' for 30 seconds). This route-specific timeout cannot exceed the globally configured timeout values.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/timeouts.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntimeout: 30s\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Nginx, Pomerium, and Verify Services\nDESCRIPTION: This Docker Compose configuration sets up three services: an Nginx reverse proxy (with optional OpenResty configuration), a Pomerium authentication service, and a Verify service for testing. It mounts various configuration files and TLS certificates into the containers and exposes the necessary ports.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/nginx/docker-compose.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  nginx:\n    # to emulate nginx-ingress behavior, use openresty which comes with 'escaped_request_uri'\n    # pre-compiled. Also uncomment lines marked `uncomment to emulate nginx-ingress behavior`\n    # in the nginx `.conf` configuration files.\n    # image: openresty/openresty\n    image: nginx\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./verify.conf:/etc/nginx/conf.d/verify.conf\n      - ./pomerium.conf:/etc/nginx/conf.d/pomerium.conf\n      - ./_wildcard.localhost.pomerium.io.pem:/etc/nginx/nginx.pem\n      - ./_wildcard.localhost.pomerium.io-key.pem:/etc/nginx/nginx-key.pem\n      - ./proxy.conf:/etc/nginx/proxy.conf\n\n  verify:\n    image: pomerium/verify:latest\n    expose:\n      - 80\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n    expose:\n      - 80\n```\n\n----------------------------------------\n\nTITLE: Route Matching Order Configuration\nDESCRIPTION: Example showing route matching order with prefix-based routing.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://a.example.com:8080\n  to: http://example:8080\n  prefix: /api\n  allow_any_authenticated_user: true\n\n- from: https://a.example.com:8080\n  to: http://example:8080\n  allow_any_authenticated_user: true\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium Zero with Helm in Kubernetes\nDESCRIPTION: This command installs Pomerium Zero using Helm in a Kubernetes environment. It sets the Pomerium Zero token, specifies the namespace, and creates the namespace if it doesn't exist.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/cloud/install.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install pomerium-zero oci://docker.io/pomerium/pomerium-zero \\\n  --set pomeriumZeroToken=<CLUSTER_TOKEN> \\\n  --namespace pomerium-zero \\\n  --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Enabling Public Access in Pomerium Core via YAML (YAML)\nDESCRIPTION: This YAML snippet shows how to enable public, unauthenticated access using the allow_public_unauthenticated_access setting in Pomerium Core configuration. Dependencies include Pomerium Core and support for YAML configuration files. Set the key to true to allow all requests without authentication. Only include this setting if you intend to allow public access; it should not be combined with other restrictive policies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/public-access.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow_public_unauthenticated_access: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium for TiddlyWiki Authentication (YAML)\nDESCRIPTION: This YAML configuration sets up Pomerium to forward user email as an identity header and defines a route with an authorization policy for TiddlyWiki access.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/tiddlywiki.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\njwt_claims_headers:\n  X-Pomerium-Claim-Email: email\n\nroutes:\n  - from: https://wiki.localhost.pomerium.io\n    to: http://tiddlywiki:8080\n    pass_identity_headers: true\n    policy:\n      - allow:\n          and:\n            - email:\n                # Replace with your email address\n                is: user@example.com\n```\n\n----------------------------------------\n\nTITLE: Requesting Sign-In URL and Using JWT with Pomerium Authorization - Bash\nDESCRIPTION: This code demonstrates how to construct a login URL with curl for Pomerium, follow the OAuth2 login flow in a browser, extract the pomerium_jwt from the redirected callback, and use it for authorized API requests. It requires curl and a proxy-configured Pomerium service. Environment variables specify the Pomerium-proxied service and the local development service. The final JWT is sent in an Authorization header for HTTP requests, enabling programmatic access. Inputs: names of proxied and local services; Output: JWT suitable for API access.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/programmatic-access.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# we'll call the hidden pomerium path below against a proxied-by-pomerium\n# service, like our verify app below\nANY_POMERIUM_PROXIED_SERVICE=verify.example.com\n\n# the service we're developing locally, this needs to be localhost to work with\n# `pomerium_redirect_uri`, see **NOTE** below, to override this default\nMY_LOCAL_DEV_SERVICE=http://localhost:8000\n\n# create a request to the pomerium-proxied service\n# `/.pomerium/...` is available for any proxied service\ncurl \"https://$ANY_POMERIUM_PROXIED_SERVICE/.pomerium/api/v1/login?pomerium_redirect_uri=$MY_LOCAL_DEV_SERVICE\"\n\n# will output a URL like:\n# https://authenticate.example.com/.pomerium/sign_in?pomerium_redirect_uri=http%3A%2F%2Flocalhost%3Fpomerium_callback_uri%3Dhttps%253A%252F%verify.example.com%252F.pomerium%252Fapi%252Fv1%252Flogin%253Fpomerium_redirect_uri%253Dhttp%253A%252F%252Flocalhost&sig=hsLuzJctmgsN4kbMeQL16fe_FahjDBEcX0_kPYfg8bs%3D&ts=1573262981\n\n# open url above in a browser and you'll get redirected in the browser to\n# > http://$MY_LOCAL_DEV_SERVICE/?pomerium_jwt=a.real.jwt or expanded as\n# http://localhost:8000/?pomerium_jwt=programmatic.pomerium.jwt\n\n# you can now use the value from `pomerium_jwt` to authorize to our proxied endpoint (which you could use to proxy `localhost`)\n\ncurl -H 'Authorization: Pomerium a.real.jwt' https://verify.example.com\n```\n\n----------------------------------------\n\nTITLE: Set Request Headers Using Dynamic Tokens - YAML\nDESCRIPTION: This snippet demonstrates how to dynamically set request headers using tokens that reference identity provider values (ID token, access token, client certificate fingerprint). The tokens use the ${pomerium.<token>} syntax for substitution at request time. Requires Pomerium with integration to an identity provider. Inputs include incoming requests and user context; outputs are requests with identity-based headers. Not all tokens are always present (e.g., client cert is only set if mTLS is enabled).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://verify.corp.example.com\n  to: https://verify.pomerium.com\n  policy:\n    - allow:\n        or:\n          - email:\n              is: user@example.com\n  set_request_headers:\n    x-pomerium-idp-id-token: ${pomerium.id_token}\n    x-pomerium-idp-access-token: ${pomerium.access_token}\n    x-pomerium-client-cert-fingerprint: ${pomerium.client_cert_fingerprint}\n```\n\n----------------------------------------\n\nTITLE: Combined Claims and Domain Authorization Policy Example\nDESCRIPTION: Annotation example that combines multiple conditions using logical operators. This policy only allows access to users who both belong to the 'example.com' domain and have the 'admin' group claim.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/policy: |\n  allow:\n    and:\n    - domain:\n        is: example.com\n    - claim/groups: admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Values for Istio Integration\nDESCRIPTION: YAML configuration for Pomerium Helm chart values, adjusted for integration with Istio. It includes settings for authentication, proxy deployment, and service configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/istio.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate:\n  idp:\n    provider: 'google'\n    clientID: YOUR_CLIENT_ID\n    clientSecret: YOUR_SECRET\n\nproxy:\n  deployment:\n    podAnnotations:\n      traffic.sidecar.istio.io/excludeInboundPorts: '80,443'\n\nconfig:\n  rootDomain: localhost.pomerium.io\n  generateTLS: false\n  insecure: true\n\ningress:\n  enabled: false\n\ningressController:\n  enabled: true\n\nservice:\n  authorize:\n    headless: false\n  databroker:\n    headless: false\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Claim Headers in Pomerium Core (YAML)\nDESCRIPTION: Example YAML configuration for the `jwt_claims_headers` setting in Pomerium Core. This maps the 'email' claim to the 'X-Email' header and the 'user' claim (likely user ID or username) to the 'X-Username' header. This setting is optional and corresponds to the `JWT_CLAIMS_HEADERS` environment variable.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/jwt-claim-headers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njwt_claims_headers:\n  X-Email: email\n  X-Username: user\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium with Hosted URL and Custom IdP Settings\nDESCRIPTION: This YAML configuration demonstrates that when both the hosted authenticate URL and custom IdP settings are provided, Pomerium will override the custom IdP configuration and use the hosted IdP instead.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/authentication.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\nidp_provider: google\nidp_client_id: my_client_id\nidp_client_secret: my_client_secret\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n    pass_identity_headers: true\n```\n\n----------------------------------------\n\nTITLE: Basic Pomerium Configuration\nDESCRIPTION: Minimal YAML configuration example for Pomerium with a single route and identity provider settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/core.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nshared_secret: REPLACE_ME\n\ncookie_secret: REPLACE_ME\n\naddress: :443\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: https://verify.pomerium.com\n    policy:\n      - allow:\n          or:\n            - domain:\n                is: myorg.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Route to GitLab with HTTPS (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to set up a Pomerium route in config.yaml to proxy HTTPS requests to a GitLab instance. The entry defines the source (from), destination (to), and a preserve_host_header option, along with a simple allow policy filtering by user domain. Requires a running Pomerium instance and GitLab configured with HTTPS. Input is the list of route objects; output is correct routing and access control for GitLab through Pomerium. Policies and domain values should be adjusted per organizational requirements.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://gitlab.localhost.pomerium.io\n  to: https://gitlab-ee\n  preserve_host_header: true\n  policy:\n    - allow:\n        or:\n          - domain:\n              is: example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Account Token in YAML - Kubernetes/Pomerium - YAML\nDESCRIPTION: This example YAML snippet demonstrates how to configure the Kubernetes Service Account Token in Pomerium. The snippet shows both direct assignment of a token string as well as specifying a file path to a bearer token file. Dependencies include access to the Pomerium configuration system and a valid Kubernetes service account token, either as a string or at the path '/var/run/secrets/kubernetes.io/serviceaccount/token'. The expected input is either a base64-encoded token string or a valid file path. Output is the proper authentication to the Kubernetes API server via Pomerium. Both keys are optional, and at least one must be set if service account token auth is needed. These configuration options should be included under the relevant section of the main Pomerium YAML config file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/kubernetes-service-account-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes_service_account_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJ...\n\nkubernetes_service_account_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n```\n\n----------------------------------------\n\nTITLE: Denying Access from VPN Nodes using Pomerium Policy (YAML)\nDESCRIPTION: Demonstrates a Pomerium policy written in YAML that denies access if the incoming request's IP address matches any IP range listed in the configured 'pomerium.io/VPNNode' external data source. The policy checks if the 'id' field (representing the IP range) within the 'pomerium.io/VPNNode' record type contains a match for the request's IP (linked via the 'foreign_key' set during configuration).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/vpn-providers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml showLineNumbers\ndeny:\n  or:\n    - record:\n        contains: .\n        field: id\n        type: pomerium.io/VPNNode\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes API Server Authentication for Pomerium JWT\nDESCRIPTION: This YAML configures the Kubernetes API server to use Pomerium JWT for authentication. It sets up the issuer URL, discovery URL, audiences, and maps the email claim to the username field for Kubernetes RBAC.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/kubernetes-access.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiserver.config.k8s.io/v1beta1\nkind: AuthenticationConfiguration\njwt:\n  - issuer:\n      url: https://mycluster.localhost.pomerium.io/ # note: the trailing slash is required\n      discoveryURL: https://mycluster.localhost.pomerium.io/.well-known/pomerium\n      audiences:\n        - mycluster.localhost.pomerium.io\n    claimMappings:\n      username:\n        claim: email\n        prefix: ''\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Authenticate Service URL and Route Policy in YAML\nDESCRIPTION: This YAML configuration snippet sets the `authenticate_service_url` for Pomerium, pointing to the hosted service (`https://authenticate.pomerium.app`) while commenting out the localhost alternative for self-hosted setups. It also defines a route that proxies requests from `https://verify.localhost.pomerium.io` to the internal service `http://verify:8000`. Access to this route is restricted by a policy allowing only users with the email `user@example.com`, and identity headers are passed to the upstream service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/config/config.docker.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# See detailed configuration settings: https://www.pomerium.com/docs/reference/\n\n#####################################################################\n# If self-hosting, use the localhost authenticate service URL below #\n# and remove the hosted URL.                                        #\n#####################################################################\n# authenticate_service_url: https://authenticate.localhost.pomerium.io\n\nauthenticate_service_url: https://authenticate.pomerium.app\n\n####################################################################################\n# If self-hosting, you must configure an identity provider.                        #\n# See identity provider settings: https://www.pomerium.com/docs/integrations/#\n####################################################################################\n\n# https://pomerium.com/reference/#routes\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n    pass_identity_headers: true\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Pomerium and HedgeDoc\nDESCRIPTION: This Docker Compose YAML file sets up services for Pomerium, PostgreSQL database, and HedgeDoc. It includes volume mounts for certificates and configurations, environment variables for HedgeDoc setup, and network settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/hedgedoc.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      # Mount your certificates\n      - ./_wildcard.localhost.pomerium.io.pem:/pomerium/cert.pem:ro\n      - ./_wildcard.localhost.pomerium.io-key.pem:/pomerium/privkey.pem:ro\n      # Mount your config file: https://www.pomerium.com/docs/reference/\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n  database:\n    image: postgres:13.4-alpine\n    environment:\n      - POSTGRES_USER=hedgedoc\n      - POSTGRES_PASSWORD=password\n      - POSTGRES_DB=hedgedoc\n    volumes:\n      - database:/var/lib/postgresql/data\n    restart: always\n  hedgedoc:\n    # Make sure to use the latest release from https://hedgedoc.org/latest-release\n    image: quay.io/hedgedoc/hedgedoc:1.9.9\n    environment:\n      - CMD_DB_URL=postgres://hedgedoc:password@database:5432/hedgedoc\n      - CMD_DOMAIN=hedgedoc.localhost.pomerium.io\n      - CMD_URL_ADDPORT=false\n      - CMD_EMAIL=true\n      - CMD_ALLOW_EMAIL_REGISTER=true\n      # Replace cookie session secret\n      - CMD_SESSION_SECRET=<replace_session_secret>\n      - CMD_PROTOCOL_USESSL=true\n    volumes:\n      - uploads:/hedgedoc/public/uploads\n    ports:\n      - '3000:3000'\n    restart: always\n    depends_on:\n      - database\nvolumes:\n  database:\n  uploads:\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Ingress Host Rewrite Annotation - YAML\nDESCRIPTION: This Kubernetes ingress annotation instructs Pomerium to rewrite the Host header to a specified value. 'ingress.pomerium.io/host_rewrite' sets the Host header when using the Kubernetes Ingress controller integration. Requires the Pomerium ingress controller, and should be applied as an annotation to relevant ingress resources. The output is that proxied requests have their Host header set accordingly.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/host_rewrite: 'example.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Route for GitLab\nDESCRIPTION: YAML configuration for setting up a Pomerium route to GitLab.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://gitlab.localhost.pomerium.io\n  to: http://gitlab\n  preserve_host_header: true\n  policy:\n    - allow:\n        or:\n          - domain:\n              is: example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Ingress Resource in Kubernetes\nDESCRIPTION: Defines a Kubernetes Ingress resource with Pomerium integration. Configures routing for a nginx service, includes TLS settings via cert-manager, and specifies access policies for example.com domain users. The configuration routes traffic to hello.localhost.pomerium.io through a nginx service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/kubernetes/example-ingress.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: hello\n  annotations:\n    cert-manager.io/issuer: pomerium-issuer\n    ingress.pomerium.io/policy: '[{\"allow\":{\"and\":[{\"domain\":{\"is\":\"example.com\"}}]}}]'\nspec:\n  ingressClassName: pomerium\n  rules:\n  - host: hello.localhost.pomerium.io\n    http:\n      paths:\n      - backend:\n          service:\n            name: nginx\n            port:\n              name: http\n        path: /\n        pathType: Prefix\n  tls:\n  - hosts:\n    - hello.localhost.pomerium.io\n    secretName: hello.localhost.pomerium.io-tls\n```\n\n----------------------------------------\n\nTITLE: Expected SSH Server Login Output - Shell\nDESCRIPTION: This snippet shows the expected terminal output when logging in to the proxied SSH server, including the user password prompt and welcome message. This confirms a successful TCP proxy connection through Pomerium and correct SSH server configuration with Docker Compose credentials.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-tcp-routes.mdx#2025-04-23_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ user@myssh.<CLUSTER_SUBDOMAIN>.pomerium.app's password:\nWelcome to OpenSSH Server\n\nf157ed9f7a38:~$\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium for GitLab.com via Environment Variables\nDESCRIPTION: This Bash snippet shows how to configure Pomerium using environment variables to connect to GitLab.com as the identity provider. It sets `IDP_PROVIDER` to \"gitlab\" and uses `IDP_CLIENT_ID` and `IDP_CLIENT_SECRET` for the GitLab Application ID and Secret respectively. These variables should be set in the environment where Pomerium runs, replacing 'REDACTED' with actual credentials.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/gitlab.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIDP_PROVIDER=\"gitlab\"\nIDP_CLIENT_ID=\"REDACTED\" # gitlab application ID\nIDP_CLIENT_SECRET=\"REDACTED\" # gitlab application secret\n```\n\n----------------------------------------\n\nTITLE: Initiating Programmatic Login via cURL\nDESCRIPTION: This bash command uses `curl` to send a `GET` request to the `/.pomerium/api/v1/login` endpoint. It includes the `pomerium_redirect_uri` query parameter, specifying where the user should be redirected after successful authentication with the JWT token. This demonstrates the first step in the programmatic login flow for non-browser clients.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/special-routes.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://<your-app>/.pomerium/api/v1/login?pomerium_redirect_uri=http://localhost:5000/callback\"\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Secret to YAML Configuration - YAML\nDESCRIPTION: This YAML snippet shows how to insert the generated shared secret into Pomerium's configuration file using the 'shared_secret' key. It assumes a valid base64-encoded secret string as the value. The configuration file must be properly secured and readable by the Pomerium process. The key is required for authentication between services; the limitation is that the secret should be replaced with an actual value generated as shown previously.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/shared-secret.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshared_secret: wC4RFsEdM1gHFzvRt3XW+iWw6Ddt/1kKkdh66OKxiqs=\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Route with Policy Filter\nDESCRIPTION: Creates an HTTPRoute resource that connects the Gateway, backend service, and PolicyFilter for authentication.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/gateway-api.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: httpbin-route\nspec:\n  parentRefs:\n    - name: localhost-pomerium-io\n  hostnames:\n    - 'httpbin.localhost.pomerium.io'\n  rules:\n    - backendRefs:\n        - name: httpbin\n          port: 80\n      filters:\n        - type: ExtensionRef\n          extensionRef:\n            group: gateway.pomerium.io\n            kind: PolicyFilter\n            name: allow-by-email\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Bootstrap Service Account in Pomerium Terraform Provider\nDESCRIPTION: This snippet shows how to configure the Pomerium Terraform provider using a bootstrap service account. This method requires enabling bootstrap service accounts in the Enterprise Console.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure-terraform.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"pomerium\" {\n  api_url          = \"https://console-api.your-domain.com\"\n  shared_secret_b64 = var.shared_secret_b64\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Identity Provider Name (Core)\nDESCRIPTION: Provides examples for setting the short-hand name of the built-in OpenID Connect (OIDC) identity provider in Pomerium Core. Use `idp_provider` in the YAML config or `IDP_PROVIDER` as an environment variable. Supported values include 'auth0', 'azure', 'github', 'google', etc. This is required when self-hosting the authenticate service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: auth0\n```\n\nLANGUAGE: bash\nCODE:\n```\nIDP_PROVIDER=github\n```\n\n----------------------------------------\n\nTITLE: Claims-Based Authorization Policy Example\nDESCRIPTION: Annotation example for applying authorization based on claims provided by the Identity Provider. This policy allows users who have an 'admin' group claim in their authentication token.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/policy: |\n  allow:\n    and:\n      - claim/groups: admin\n```\n\n----------------------------------------\n\nTITLE: Domain-Based Authorization Policy Example\nDESCRIPTION: Annotation example for Pomerium Ingress Controller that restricts access to users with email domains matching 'pomerium.com'. This demonstrates how to apply a simple authorization policy based on user domain.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/policy: |\n  allow:\n    and:\n      - domain:\n          is: pomerium.com\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Client Certificate in Pomerium (YAML)\nDESCRIPTION: This snippet demonstrates how to configure client certificate and key for mutual TLS authentication between Pomerium and upstream services. It specifies both inline base64-encoded strings and file path alternatives for certificate and key values in YAML. Required fields are `tls_client_cert` and `tls_client_key` or their `_file` counterparts, which must be present if mTLS is needed. Inputs are string values (certificate/key contents or paths), and the output is enabling Pomerium to present a client cert to upstreams as needed.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/tls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntls_client_cert: base64-encoded-certificate\\ntls_client_key: base64-encoded-keywords\\n\\n# or\\ntls_client_cert_file: /relative/file/location\\ntls_client_key_file: /relative/file/location\\n\n```\n\n----------------------------------------\n\nTITLE: Defining PPL Route Policy for Group-Based Authorization - Pomerium Policy - YAML\nDESCRIPTION: Shows how to define a Pomerium policy that authorizes access to a route based on the presence of a specific group ('admin') in the custom 'pomerium.io/groups' claim. This policy is typically used in conjunction with a custom Auth0 login action injecting user roles as groups, enabling fine-grained, claim-based access control. This YAML is placed in the Pomerium policy configuration, and the exact route and group name should match organizational requirements.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/auth0.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: 'https://verify.localhost.pomerium.io'\n    to: 'https://verify.pomerium.com'\n    policy:\n      - allow:\n          and:\n            - claim/pomerium.io/groups: admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocert in Pomerium YAML Configuration\nDESCRIPTION: This configuration snippet shows how to enable Autocert in Pomerium's config.yaml file. By setting autocert to true, Pomerium will automatically manage certificates for upstream connections using Let's Encrypt. The commented sections show alternative certificate configuration options.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/production-certificates.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# certificate settings: https://www.pomerium.com/docs/reference/certificates.html*\nautocert: true\n# REMOVE FOR PRODUCTION*\n# If you're using mkcert to test Pomerium locally, comment the autocert keys and uncomment*\n# the keys below, adjusting for your mkcert path:*\n# certificate_file: /home/user/.local/share/mkcert/rootCA.pem*\n# certificate_key_file: /user/me/.local/share/mkcert/rootCA-key.pem*\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Provider with Environment Variables - Bash\nDESCRIPTION: This bash snippet shows how to configure Pomerium via environment variables to authenticate with Microsoft Entra ID. Each variable corresponds to identity provider parameters needed for OIDC-based login, including provider, provider URL, client ID, and client secret. Values (indicated as placeholders) must be replaced with actual credentials and URLs from the Microsoft tenant configuration. Properly exporting these ensures Pomerium picks up the settings on start. It is essential to secure these environment variables in production.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/azure.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIDP_PROVIDER=\"azure\"\nIDP_PROVIDER_URL=\"https://login.microsoftonline.com/{REPLACE-WITH-OIDC-METADATA-STRING}/v2.0\"\nIDP_CLIENT_ID=\"REPLACE-WITH-CLIENT-ID\"\nIDP_CLIENT_SECRET=\"REPLACE-WITH-CLIENT-SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Pomerium Authentication and API Client in Python\nDESCRIPTION: A complete Python script that handles authentication with Pomerium, stores JWT credentials, and makes authenticated API requests. The script supports command-line arguments, implements an HTTP callback server for the OAuth flow, manages authentication state, and provides functionality to store and retrieve credentials from a JSON file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/sh/programmatic_access.py.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import absolute_import, division, print_function\n\nimport argparse\nimport http.server\nimport json\nimport sys\nimport urllib.parse\nimport webbrowser\nfrom urllib.parse import urlparse\nimport requests\n\ndone = False\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--login\", action=\"store_true\")\nparser.add_argument(\n    \"--dst\", default=\"https://verify.example.com/json\",\n)\nparser.add_argument(\"--server\", default=\"localhost\", type=str)\nparser.add_argument(\"--port\", default=8000, type=int)\nparser.add_argument(\n    \"--cred\", default=\"pomerium-cred.json\",\n)\nargs = parser.parse_args()\n\n\nclass PomeriumSession:\n    def __init__(self, jwt):\n        self.jwt = jwt\n\n    def to_json(self):\n        return json.dumps(self.__dict__, indent=2)\n\n    @classmethod\n    def from_json_file(cls, fn):\n        with open(fn) as f:\n            data = json.load(f)\n            return cls(**data)\n\n\nclass Callback(http.server.BaseHTTPRequestHandler):\n    def log_message(self, format, *args):\n        # silence http server logs for now\n        return\n\n    def do_GET(self):\n        global args\n        global done\n        self.send_response(200)\n        self.end_headers()\n        response = b\"OK\"\n        if \"pomerium\" in self.path:\n            path = urllib.parse.urlparse(self.path).query\n            path_qp = urllib.parse.parse_qs(path)\n            session = PomeriumSession(\n                path_qp.get(\"pomerium_jwt\")[0],\n            )\n            done = True\n            response = session.to_json().encode()\n            with open(args.cred, \"w\", encoding=\"utf-8\") as f:\n                f.write(session.to_json())\n                print(\"=> pomerium json credential saved to:\\n{}\".format(f.name))\n\n        self.wfile.write(response)\n\n\ndef main():\n    global args\n\n    dst = urllib.parse.urlparse(args.dst)\n    try:\n        cred = PomeriumSession.from_json_file(args.cred)\n    except:\n        print(\"=> no credential found, let's login\")\n        args.login = True\n\n    # initial login to make sure we have our credential\n    if args.login:\n        dst = urllib.parse.urlparse(args.dst)\n        query_params = {\n            \"pomerium_redirect_uri\": \"http://{}:{}\".format(args.server, args.port)\n        }\n        enc_query_params = urllib.parse.urlencode(query_params)\n        dst_login = \"{}://{}{}?{}\".format(\n            dst.scheme, dst.hostname, \"/.pomerium/api/v1/login\", enc_query_params,\n        )\n        response = requests.get(dst_login)\n        print(\"=> Your browser has been opened to visit:\\n{}\".format(response.text))\n        webbrowser.open(response.text)\n\n        with http.server.HTTPServer((args.server, args.port), Callback) as httpd:\n            while not done:\n                httpd.handle_request()\n\n    cred = PomeriumSession.from_json_file(args.cred)\n    response = requests.get(\n        args.dst,\n        headers={\n            \"Authorization\": \"Pomerium {}\".format(cred.jwt),\n            \"Content-type\": \"application/json\",\n            \"Accept\": \"application/json\",\n        },\n    )\n    print(\n        \"==> request\\n{}\\n==> response.status_code\\n{}\\n==>response.text\\n{}\\n\".format(\n            args.dst, response.status_code, response.text\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Route in Pomerium\nDESCRIPTION: YAML configuration for TCP routing to Redis service with policy restrictions.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/tcp-routes.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- from: tcp+https://redis.localhost.pomerium.io:6379\n  to: tcp://redis:6379\n  policy:\n    - allow:\n        or:\n          - domain:\n              is: example.com\n```\n\n----------------------------------------\n\nTITLE: Using User ID Instead of Username in Authorization Policy (YAML)\nDESCRIPTION: A policy that uses a unique user ID instead of a username for more accurate identification. This approach is recommended as identity providers typically reference users by their unique IDs rather than usernames.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-policies.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npolicy:\n  allow:\n    or:\n      - domain:\n          is: example.com\n      - user:\n          is: '1234567890#$%^'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium with Cognito using Kubernetes ConfigMap\nDESCRIPTION: This YAML snippet defines a Kubernetes ConfigMap named 'pomerium-config' containing Pomerium configuration, specifically setting up AWS Cognito as the OIDC identity provider (IdP). It includes the authenticate and authorize service URLs, IdP provider type ('oidc'), provider URL (with placeholders for `${AWS-REGION}` and `${USER_POOL_ID}`), Client ID, Client Secret, and requested scopes within the `config.yaml` data key. This is a standard way to manage configuration in Kubernetes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/cognito.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  config.yaml: |\n    # Main configuration flags : https://www.pomerium.io/reference/\n    authenticate_service_url: https://k8s-auth-prod.example.com # The URL you have set up for the Pomerium Authentication service\n    authorize_service_url: https://pomerium-authorize-service.default.svc.cluster.local\n\n    idp_provider: oidc\n    idp_provider_url: https://cognito-idp.${AWS-REGION}.amazonaws.com/${USER_POOL_ID}\n    idp_client_id: 304a12ktcc5djt9d7enj6dsjkg\n    idp_client_secret: \"1re5ukkv3dab6up5aefv7rru65lu60oblf04t6cv8u9s0itjbci7\"\n    idp_scopes: [\"openid\", \"email\", \"profile\"]\nkind: ConfigMap\nmetadata:\n  name: pomerium-config\n```\n\n----------------------------------------\n\nTITLE: Targeting Multiple Upstream Resources in Pomerium Routes (YAML)\nDESCRIPTION: Demonstrates how to configure a Pomerium route to target multiple upstream resources by providing a list of URLs under the `to` key in the YAML configuration. This enables load balancing or failover across the specified destinations.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/to.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://example.com\n  to:\n    - https://a.example.com\n    - https://b.example.com\n```\n\n----------------------------------------\n\nTITLE: FleetDM Plugin Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for running the FleetDM plugin as an external data source for Pomerium Enterprise. Specifies container settings and required parameters.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/device-context/fleetdm.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  fleetdm:\n    image: docker.cloudsmith.io/pomerium/datasource/datasource:main\n    command:\n      - fleetdm\n      - --api-url=https://pomerium.cloud.fleetdm.com/\n      - --api-token=<YOUR_FLEETDM_API_TOKEN>\n      - --cert-query-id=<YOUR_FLEETDM_CERT_QUERY_ID>\n      - --address=:8080\n    container_name: fleetdm\n    restart: always\n    expose:\n      - 8080\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Tunnel with pomerium-cli for PostgreSQL\nDESCRIPTION: This command creates a TCP tunnel using pomerium-cli to connect to a PostgreSQL instance. It maps the remote PostgreSQL port 5432 to the local port 5432.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/postgres.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pomerium-cli tcp pgsql.localhost.pomerium.io:5432 --listen localhost:5432\n```\n\n----------------------------------------\n\nTITLE: Final Pomerium Configuration State\nDESCRIPTION: This is the complete Pomerium configuration file after following the tutorial steps. It includes the authentication service URL, route configuration, and access policy.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/get-started.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      - allow:\n          or:\n            - email:\n                is: <your-email>@example.com\n```\n\n----------------------------------------\n\nTITLE: Creating Pomerium Resources with Terraform\nDESCRIPTION: This example demonstrates creating a namespace, policy, and route in Pomerium using Terraform. It shows how to define and link these resources together.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure-terraform.md#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"pomerium_namespace\" \"engineering\" {\n  name = \"engineering\"\n}\n\nresource \"pomerium_policy\" \"engineering_policy\" {\n  name = \"engineering-policy\"\n  namespace = pomerium_namespace.engineering.id\n  ppl = yamlencode({\n      allow = {\n      and = [\n          {\n              groups = {\n                  has = \"engineering\"\n              }\n          }\n      ]\n      }\n  })\n}\n\nresource \"pomerium_route\" \"internal_tools\" {\n  name = \"internal-tools\"\n  namespace = pomerium_namespace.engineering.id\n  from = \"https://tools.example.com\"\n  to = [\"https://internal-tools.local\"]\n  policies = [\n    pomerium_policy.engineering_policy.id\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak and Pomerium Services with Docker Compose - YAML\nDESCRIPTION: This Docker Compose YAML snippet defines three core services: Keycloak for identity management, Pomerium as the identity-aware proxy, and a Verify service for testing. Each service is configured with the appropriate environment variables, images, port mappings, and network aliases needed for local development. Dependencies: Docker, Docker Compose. The input is the YAML configuration and the output is a containerized stack of integrated services accessible via specified localhost ports.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/keycloak.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  mykeycloak:\n    image: quay.io/keycloak/keycloak:22.0.1\n    command:\n      - start-dev\n    environment:\n      - KEYCLOAK_ADMIN=admin\n      - KEYCLOAK_ADMIN_PASSWORD=admin\n    ports:\n      - 8080:8080\n    networks:\n      default:\n        aliases:\n          - keycloak.localhost.pomerium.io\n\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n\n  verify:\n    image: pomerium/verify:latest\n    environment:\n      JWKS_ENDPOINT: https://pomerium/.well-known/pomerium/jwks.json\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Issuer Format to URI in Pomerium Core (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to set the `jwt_issuer_format` option in Pomerium Core. Setting this value to `uri` changes the JWT `iss` (issuer) claim from the default hostname-only format to a full URL, which might be necessary for compatibility with certain JWT consumers. This setting is applied in the main Pomerium configuration file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/jwt-issuer-format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njwt_issuer_format: uri\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP/2 Cleartext (h2c) Upstreams in Pomerium (YAML)\nDESCRIPTION: Shows how to configure a Pomerium route to connect to an upstream service using HTTP/2 without TLS (cleartext). This is achieved by specifying the `to` destination URL with the `h2c://` scheme in the YAML configuration. This is useful for services like insecure gRPC servers that require HTTP/2.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/to.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://example.com\n  to: h2c://localhost:9090\n```\n\n----------------------------------------\n\nTITLE: Basic Email Address Policy in YAML\nDESCRIPTION: A simple PPL policy example that allows access based on a specific email address match. The policy uses the 'allow' action with an 'and' operator and 'email' criterion.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-build-policies.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npolicy:\n  allow:\n    and:\n      - email:\n        is: example@domain.com\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Response Headers - YAML - yaml\nDESCRIPTION: This YAML snippet demonstrates how to disable global HTTP response headers in Pomerium configuration. Setting 'set_response_headers' to a mapping containing 'disable: true' instructs Pomerium to prevent the automatic addition of headers. This is intended for users who wish to opt out of the default or any custom headers for legacy application compatibility. Requires YAML-based configuration file. Input is a YAML configuration; output is the absence of custom response headers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/set-response-headers.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nset_response_headers:\\n  disable: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium YAML\nDESCRIPTION: YAML configuration for Pomerium, including address, HTTP redirect, authenticate service URL, and other essential settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/self-hosted-pomerium.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naddress: :443\nhttp_redirect_addr: :80\nauthenticate_service_url: `https://authenticate.domain.com`\nidp_provider: 'github'\nidp_client_id: <your_id>\nidp_client_secret: <your_secret>\n- from: https://verify.domain.com\n  to: https://verify.pomerium.com\npolicy:\n  allow:\n    or:\n      - email:\n        is: user@example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium for Keycloak OIDC Authentication - YAML\nDESCRIPTION: This YAML file provides the main Pomerium configuration for integrating with Keycloak via OpenID Connect. It specifies the authentication service URL, OIDC provider details (ID, secret, provider URL), signing key, and routes for the Verify service, including required headers and user authentication policies. Dependencies: Pomerium service, Keycloak instance, valid client credentials. Input consists of user requests routed through Pomerium, and output is authenticated and authorized access to the Verify service. The signing_key here is for demonstration and must be replaced in production.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/keycloak.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.localhost.pomerium.io\n\nidp_provider: oidc\nidp_client_id: 'mynewclient'\nidp_client_secret: 'your_client_secret' # Replace with the actual secret\nidp_provider_url: 'http://keycloak.localhost.pomerium.io:8080/realms/Pomerium'\n\nsigning_key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSVA2TUN5UFI5OUNmSEVkU0s4cVdzbk51Q0RyMVZ3ay93RER1RVhyQitELzZvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFQ0JTK3gyQnJRNVJqNHJFcU5PSEVsUFVESXJiRlNhRitoWEhEL1RYby9rQWVKU1lJSjJHVwpZMnE0a0NPNTU4RmdoYmxDTUplYVdjV1luT3JuZkpxeXRnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    allow_any_authenticated_user: true\n    pass_identity_headers: true\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Policy via cURL\nDESCRIPTION: This cURL command sends a POST request to create a new policy within a specific organization and namespace. It includes the policy definition (`ppl`), name, description, and enforcement status in the JSON request body. An `Authorization` header with the ID token is required.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-zero.md#2025-04-23_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://console.pomerium.app/api/v0/organizations/{organizationId}/policies' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: <ID-TOKEN>' \\\n--data-raw '{\n  \"namespaceId\": \"bwjkRZwxbNXBQHHcJHphGSNBbxt\",\n  \"name\": \"Allow only matching email\",\n  \"enforced\": false,\n  \"ppl\": {\n    \"allow\": {\n      \"and\": [\n        {\"email\":\n            {\n            \"is\": \"user@example.com\"\n            }\n        }\n      ]\n    }\n  },\n  \"description\": \"Only allow users access with a matching email address.\",\n  \"explanation\": \"You don'\\''t have the correct email address to access this service.\",\n  \"remediation\": \"Use account credentials that match policy requirements.\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium for HedgeDoc in YAML\nDESCRIPTION: This YAML configuration sets up Pomerium to proxy requests to HedgeDoc, including authentication settings and an authorization policy. It specifies the routes, certificate files, and access policies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/hedgedoc.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\ncertificate_file: /pomerium/cert.pem\ncertificate_key_file: /pomerium/privkey.pem\n\nroutes:\n  - from: https://hedgedoc.localhost.pomerium.io\n    to: http://hedgedoc:3000\n    allow_websockets: true\n    policy:\n      - allow:\n          or:\n            - email:\n                # Replace with your email address\n                is: user@example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Pomerium with ToolJet and PostgreSQL\nDESCRIPTION: Complete Docker Compose configuration that sets up a network with four services: Pomerium for authentication, a verification service, ToolJet application, and PostgreSQL database. The configuration includes volume mounts, port mappings, environment variables, and network aliases to enable proper service communication.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/tooljet/docker-compose.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  main: {}\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      ## Mount your config file: https://www.pomerium.com/docs/reference/\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n    ## A network alias is only required when using `localhost.pomerium.io`\n    networks:\n      main:\n        aliases:\n        - authenticate.localhost.pomerium.io\n  ## https://verify.localhost.pomerium.io --> Pomerium --> http://verify\n  verify:\n    networks:\n      main: {}\n    image: pomerium/verify:latest\n    expose:\n      - 8000\n  tooljet:\n    networks:\n      main: {}\n    tty: true\n    stdin_open: true\n    image: tooljet/tooljet-ce:latest\n    restart: always\n    env_file: .env\n    ports:\n      - 80:80\n    depends_on:\n      - postgres\n    environment:\n      SERVE_CLIENT: \"true\"\n      PORT: \"80\"\n    command: npm run start:prod\n\n  postgres:\n    networks:\n      main: {}\n    image: postgres:13\n    restart: always\n    ports:\n      - 5432:5432\n    volumes:\n      - postgres:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=postgres\nvolumes:\n  postgres:\n    driver: local\n    driver_opts:\n      o: bind\n      type: none\n      device: ${PWD}/postgres_data\n  certs:\n  logs:\n  fallbackcerts:\n```\n\n----------------------------------------\n\nTITLE: External DNS Configuration\nDESCRIPTION: YAML configurations for setting up external DNS integration with kustomize\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/install.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - https://raw.githubusercontent.com/pomerium/ingress-controller/v0.22.1/deployment.yaml\npatches:\n  - path: patch-proxy-external-dns.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: pomerium-proxy\n  namespace: pomerium\n  annotations:\n    external-dns.alpha.kubernetes.io/hostname: 'authenticate.localhost.pomerium.io'\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Codec Type via Bash Environment Variable\nDESCRIPTION: This Bash snippet shows how to configure the downstream codec type using the `CODEC_TYPE` environment variable for Pomerium Core. Setting it to `http2` forces Pomerium to use only HTTP/2 for downstream connections. This method overrides the corresponding configuration file setting.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/codec-type.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nCODEC_TYPE=http2\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Load Balancing Weights in Pomerium Routes (YAML)\nDESCRIPTION: Illustrates how to assign load balancing weights to upstream resources in a Pomerium route configuration using YAML. Weights are appended to the URLs in the `to` list using the format `,[weight]`. The actual load balancing behavior depends on the configured `lb_policy`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/to.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://example.com\n  to: ['http://a', 'http://b']\n\n- from: https://example.com\n  to: ['http://a,10', 'http://b,20']\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Cluster Token in Docker Compose\nDESCRIPTION: This YAML snippet shows a `docker-compose.yaml` file defining a Pomerium service. It sets the `POMERIUM_ZERO_TOKEN` environment variable within the `environment` section to the new cluster token (replace `<CLUSTER_TOKEN>`). This allows the Docker container running Pomerium to connect to the Pomerium Zero control plane using the specified token. Other configurations include image, ports, restart policy, cache volume, and network settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/clusters.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    ports:\n      - 443:443\n    restart: always\n    environment:\n      POMERIUM_ZERO_TOKEN: <CLUSTER_TOKEN>\n      XDG_CACHE_HOME: /var/cache\n    volumes:\n      - pomerium-cache:/var/cache\n    networks:\n      main: {}\n\nnetworks:\n  main: {}\n\nvolumes:\n  pomerium-cache:\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC API Connection with Python Client\nDESCRIPTION: Demonstrates connecting to the Pomerium Enterprise API using the Python client, with example code for authenticating using service account credentials, listing namespaces and policies, and creating a new route in a namespace. Expects environment variables CA_CERT and SERVICE_ACCOUNT for credentials, and requires the enterprise-client-python library. Prints the response from the SetRoute operation and may need modifications for unique API setup.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-enterprise.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\\n\\nimport os\\nfrom pomerium.client import Client\\nfrom pomerium.pb.policy_pb2 import ListPoliciesRequest\\nfrom pomerium.pb.namespaces_pb2 import ListNamespacesRequest\\nfrom pomerium.pb.routes_pb2 import SetRouteRequest, Route\\n\\n# get custom CA and service account credentials from environment\\nca_cert = os.getenv('CA_CERT', '').encode('utf-8')\\nsa = os.getenv('SERVICE_ACCOUNT', '')\\nconsole_api = 'console-api.localhost.pomerium.io'\\n\\nclient = Client(console_api, sa, root_certificates=ca_cert)\\n\\n# get id for namespace 'Production'\\nresp = client.NamespaceService.ListNamespaces(ListNamespacesRequest())\\nns = [n for n in resp.namespaces if n.name == 'Production'][0]\\n\\n# find policy named 'my policy' in namespace 'Production'\\nresp = client.PolicyService.ListPolicies(\\n    ListPoliciesRequest(query='my policy', namespace=ns.id)\\n)\\npolicy = resp.policies[0]\\n\\n# set route in namespace 'Production', associated to 'my policy'\\nroute = Route(**{\\n    'namespace_id': ns.id,\\n    'name': 'my route',\\n    'from': 'https://test.localhost.pomerium.io',\\n    'to': ['https://verify.pomerium.com'],\\n    'policy_ids': [policy.id],\\n    'pass_identity_headers': True,\\n})\\n\\nresp = client.RouteService.SetRoute(SetRouteRequest(route=route))\\nprint(resp)\\n\n```\n\n----------------------------------------\n\nTITLE: Generating Upstream and Client Certificates via mkcert - Bash\nDESCRIPTION: Creates two distinct certificates: one for the OpenSSL upstream server and one client certificate for Pomerium to use when connecting upstream. Required steps for demo labs or mTLS test setups, using mkcert-generated CA. Output files include PEM certificates and keys.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/certificates-and-tls.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkcert openssl.localhost\nmkcert -client \"pomerium@localhost\"\n\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium CLI via Homebrew\nDESCRIPTION: Commands to install Pomerium CLI using Homebrew package manager on macOS.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap pomerium/tap\nbrew install pomerium-cli\n```\n\n----------------------------------------\n\nTITLE: Creating Email-Based Authorization Policy\nDESCRIPTION: Defines a PolicyFilter that allows access based on a specific email address.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/gateway-api.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.pomerium.io/v1alpha1\nkind: PolicyFilter\nmetadata:\n  name: allow-by-email\nspec:\n  ppl: |\n    allow:\n      and:\n        - email:\n            is: your-email-here@example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Certificate for Ingress Controller\nDESCRIPTION: YAML configuration block for setting a default wildcard certificate in the ingress controller annotations.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/helm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningressController:\ningressClassResource:\n  defaultCertSecret: 'namespace/certSecretName'\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Route with Bastion Host\nDESCRIPTION: Example configuration showing how to set up a TCP route using a bastion host configuration in Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/tcp.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfrom: tcp+https://proxy.corp.example.com:8443/redis.internal.example.com:6379\n```\n\n----------------------------------------\n\nTITLE: Basic Domain Policy Configuration in YAML\nDESCRIPTION: Simple policy configuration that grants access based on email domain verification.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-policies.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npolicy:\n  allow:\n    and:\n      - domain:\n          is: example.com\n```\n\n----------------------------------------\n\nTITLE: Time and Day-Based Restriction Policy in PPL\nDESCRIPTION: A policy that denies access based on day of week and time of day. It denies access on weekends and after 5PM on weekdays across multiple timezones, using AND and OR operators.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-advanced-policies.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndeny:\n  and:\n    - day_of_week: sat-sun\n  or:\n    - time_of_day:\n        timezone: America/New_York\n        after: 17:00\n    - time_of_day:\n        timezone: Asia/Dubai\n        after: 17:00\n    - time_of_day:\n        timezone: Brazil/East\n        after: 17:00\n    - time_of_day:\n        timezone: Europe/Dublin\n        after: 17:00\n```\n\n----------------------------------------\n\nTITLE: Configuring API Route in Pomerium Core - YAML\nDESCRIPTION: Defines a secure route within Pomerium Core for accessing the Enterprise Console API. The configuration specifies the source and destination URLs, ensures identity headers are passed, enforces authentication, and sets the custom CA path for TLS. Requires a running Pomerium Core and Enterprise Console deployment, and access to the relevant PEM-formatted root CA certificate.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-enterprise.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://console-api.localhost.pomerium.io\\n  to: https://pomerium-console-domain-name:8702\\n  pass_identity_headers: true\\n  allow_any_authenticated_user: true\\n  tls_custom_ca_file: /path/to/rootCA.pem\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Pomerium Middleware for JWT Identity Verification in Go\nDESCRIPTION: This Go code initializes a Pomerium SDK verifier configured to validate JWT tokens against a specified issuer and audience. It defines an HTTP middleware that attaches verified user identity data to each request context and provides a handler to demonstrate extraction and display of the verified email. Required dependencies are 'github.com/go-jose/go-jose/v3/jwt' and 'github.com/pomerium/sdk-go'. The HTTP server listens on port 8080 and expects properly configured Pomerium settings; requests without valid authentication will result in an error message.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/go-sdk/go-app.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/go-jose/go-jose/v3/jwt\"\n\t\"github.com/pomerium/sdk-go\"\n)\n\nfunc main() {\n\tverifier, err := sdk.New(&sdk.Options{\n\t\tExpected: &jwt.Expected{\n\t\t\t// Replace the following with the domain for your service:\n\t\t\tIssuer: \"sdk-example.localhost.pomerium.io\",\n\t\t\tAudience: jwt.Audience([]string{\n\t\t\t\t\"sdk-example.localhost.pomerium.io\"}),\n\t\t},\n\t})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\thttp.Handle(\"/\", sdk.AddIdentityToRequest(verifier)(handler{}))\n\tlog.Fatalln(http.ListenAndServe(\":8080\", nil))\n}\n\ntype handler struct{}\n\nfunc (handler) ServeHTTP(res http.ResponseWriter, req *http.Request) {\n\t// Check the JWT verification result.\n\tid, err := sdk.FromContext(req.Context())\n\tif err != nil {\n\t\tfmt.Fprintln(res, \"verification error:\", err)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(res, \"verified user identity (email %s)\\n\", id.Email)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Identity Provider Request Parameters (Core)\nDESCRIPTION: Demonstrates how to configure optional OAuth 2.0 request parameters to be included in the sign-in request for Pomerium Core. Use the `idp_request_params` key with a map of key-value pairs in YAML, or the `IDP_REQUEST_PARAMS` environment variable with a JSON string. Setting this overrides default parameters for some providers (except Apple, where it merges).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nidp_request_params:\n  client_id: client_id\n  response_type: response_type\n  redirect_uri: redirect_uri\n```\n\nLANGUAGE: bash\nCODE:\n```\nIDP_REQUEST_PARAMS='{\"client_id\":\"client_id\", \"response_type\":\"response_type\", \"redirect_uri\":\"redirect_uri\"}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Namespace ID via cURL\nDESCRIPTION: This cURL command sends a GET request to the `/clusters` endpoint, scoped to a specific organization using its ID in the path. It requires the Bearer ID token for authorization and retrieves details about clusters within that organization, including the `namespaceId` associated with each cluster.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-zero.md#2025-04-23_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://console.pomerium.app/api/v0/organizations/{organizationId}/clusters' \\\n--header 'Authorization: Bearer <ID-TOKEN>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Storage Backend in Databroker - YAML\nDESCRIPTION: Demonstrates how to configure the Pomerium databroker to use Postgres for persistent storage via YAML configuration parameters. Requires a running Postgres instance accessible to the service, and proper credentials specified in the connection string. The key parameters are 'databroker_storage_type', set to 'postgres', and 'databroker_storage_connection_string', a URI with user, password, database host, and options. Inputs are static configuration values; on correct setup, session data is stored persistently in Postgres, enabling service HA and data durability.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/data-storage.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatabroker_storage_type: postgres\\ndatabroker_storage_connection_string: postgres://user:pass@dbhost.internal.mydomain.com/pomerium?sslmode=disable\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium TCP Route for GitLab\nDESCRIPTION: YAML configuration for setting up a Pomerium TCP route to GitLab for secure Git access.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- from: tcp+https://gitlab.localhost.pomerium.io\n  to: tcp://gitlab:22\n  policy:\n    - allow:\n        or:\n          - claim/groups: devs@example.com\n```\n\n----------------------------------------\n\nTITLE: Generating EC Keys for JWT Signing\nDESCRIPTION: Commands to generate EC private and public keys for JWT signing in Pomerium configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/getting-users-identity.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl ecparam -genkey -name prime256v1 -noout -out ec_private.pem\nopenssl ec -in ec_private.pem -pubout -out ec_public.pem\ncat ec_private.pem | base64  # copy to SIGNING_KEY in Pomerium config\n```\n\n----------------------------------------\n\nTITLE: Starting Pomerium Zero Docker Container\nDESCRIPTION: Command to deploy and run Pomerium in Docker using docker-compose in detached mode.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring All HTTP Headers Logging in Pomerium Authorize Logs (YAML)\nDESCRIPTION: This YAML snippet configures Pomerium to include all HTTP request headers in its authorize service logs. Setting `authorize_log_fields` to include `headers` results in a log entry containing a nested JSON object with all key-value pairs from the request headers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nauthorize_log_fields:\n  - headers\n```\n\n----------------------------------------\n\nTITLE: TCP Health Check Configuration\nDESCRIPTION: Active health check configuration for TCP services with ping/pong mechanism.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: tcp+https://tcp-service.localhost.pomerium.io\n    to:\n      - tcp://tcp-1.local\n      - tcp://tcp-2.local\n    health_checks:\n      - timeout: 1s\n        interval: 5s\n        unhealthy_threshold: 3\n        healthy_threshold: 1\n        tcp_health_check:\n          send:\n            text: '50494E47'\n          receive:\n            text: '504F4E47'\n```\n\n----------------------------------------\n\nTITLE: Email Allowlist Policy in PPL\nDESCRIPTION: A policy that creates an allowlist of specific email addresses. It uses the OR operator to grant access if any of the specified email addresses match the user's email.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-advanced-policies.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n  or:\n    - email:\n        is: name1@example.com\n    - email:\n        is: name2@example.com\n    - email:\n        is: name3@example.com\n```\n\n----------------------------------------\n\nTITLE: Enabling Identity Headers in Pomerium Route\nDESCRIPTION: Configuration to pass identity headers to the upstream application. This allows the upstream service to receive information about the authenticated user.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npass_identity_headers: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Signing Key via Environment Variable (File Path)\nDESCRIPTION: Example showing how to configure the signing key using the `SIGNING_KEY_FILE` environment variable. This variable specifies the path to a file containing the PEM-encoded private key, offering an alternative to embedding the key directly in configuration or environment variables.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/signing-key.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSIGNING_KEY_FILE='/run/secrets/POMERIUM_SIGNING_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium CLI from Binaries\nDESCRIPTION: Command to download and extract Pomerium CLI binaries based on architecture, OS and version.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nARCH=[your-arch]\nOS=[your-os]\nVERSION=[desired-version]\ncurl -L https://github.com/pomerium/cli/releases/download/${VERSION}/pomerium-cli-${OS}-${ARCH}.tar.gz \\\n    | tar -z -x\n```\n\n----------------------------------------\n\nTITLE: Forwarding Bastion Port with SSH Tunnel for Pomerium Proxied Services - Shell\nDESCRIPTION: This shell command establishes an SSH tunnel from the bastion host's local port to the developer's local machine, forwarding remote port 5001 to localhost:8000. This technique, commonly used in secure development and remote debugging, enables safe HTTPS traffic passage through a Pomerium-proxied endpoint to a local developer environment. Prerequisites: SSH access, running bastion host HTTP proxy. Inputs: remote user, bastion host address, port numbers; Output: secure connection tunneled via SSH.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/programmatic-access.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nssh -N -R 5001:localhost:8000 my-user@my-bastion-host.example.com\n```\n\n----------------------------------------\n\nTITLE: Setting Databroker PostgreSQL Connection String in YAML\nDESCRIPTION: Defines the connection string for the external PostgreSQL database using the `databroker_storage_connection_string` key in a YAML configuration file. This setting is required when `databroker_storage_type` is set to `postgres`. The example shows a typical PostgreSQL connection URI.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/databroker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndatabroker_storage_connection_string: postgresql://postgres:postgres@database/postgres?sslmode=disable\n```\n```\n\n----------------------------------------\n\nTITLE: Proxying SSH Server via Pomerium CLI - Shell\nDESCRIPTION: This command proxies local TCP port 2222 to a remote SSH server through Pomerium using the CLI. The '--listen :2222' flag opens the local port for SSH client access, and the remote address requires the cluster subdomain substitution. Essential for securely accessing a remote SSH service via Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-tcp-routes.mdx#2025-04-23_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pomerium-cli tcp myssh.<CLUSTER_SUBDOMAIN>.pomerium.app:22 --listen :2222\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium on Kubernetes\nDESCRIPTION: Command to install Pomerium components using kubectl apply with kustomize\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -k github.com/pomerium/ingress-controller/config/default\\?ref=v0.29.0\n```\n\n----------------------------------------\n\nTITLE: Allowing Access Based on Cognito Group Claim in Pomerium Policy (Open Source)\nDESCRIPTION: This YAML snippet defines a Pomerium policy rule for routing traffic from `http://from.example.com` to `http://to.example.com`. Access is restricted to users whose identity provider claims include membership in the 'admins' Cognito group. This is achieved using the `allowed_idp_claims` key, specifically checking the `cognito:groups` claim provided by AWS Cognito in the ID token. The group name 'admins' should be replaced with the actual Cognito group name.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/cognito.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- from: http://from.example.com\n  to: http://to.example.com\n  allowed_idp_claims:\n    cognito:groups:\n      - admins\n```\n\n----------------------------------------\n\nTITLE: Configuring External Services in Kubernetes with Pomerium\nDESCRIPTION: This YAML snippet demonstrates how to configure external services using Kubernetes Service and Ingress resources with Pomerium. It includes the Service definition with externalName and the corresponding Ingress configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: external\nspec:\n  type: ExternalName\n  externalName: 'my-existing-service.corp.com'\n  ports:\n    - protocol: TCP\n      name: https\n      port: 443\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: external\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod-http\n    ingress.pomerium.io/secure_upstream: 'true'\n    ingress.pomerium.io/policy: |\n      - allow:\n          and:\n            - domain:\n                is: pomerium.com\nspec:\n  ingressClassName: pomerium\n  tls:\n    - hosts:\n        - 'external.localhost.pomerium.io'\n      secretName: external-localhost-pomerium.io\n  rules:\n    - host: 'external.localhost.pomerium.io'\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: external\n                port:\n                  name: https\n```\n\n----------------------------------------\n\nTITLE: Limiting Certificate Chain Depth in Pomerium YAML - YAML\nDESCRIPTION: Demonstrates how to configure the `max_verify_depth` property to allow certificate chains up to two certificates (excluding the trust anchor) using YAML. This sets the allowed depth for client-supplied intermediate certificates before a trusted root CA is encountered. Place this under `downstream_mtls` in the configuration file. Ensures only chains of bounded length are accepted; avoid setting values inconsistent with your trust model.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndownstream_mtls:\\n  max_verify_depth: 2\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Route Creation\nDESCRIPTION: This JSON snippet shows the expected successful response after creating a route. It includes the route's generated `id`, `name`, `namespaceId`, source (`from`) and destination (`to`) URLs, and confirms the attached policies in the `policies` array and `policyIds`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-zero.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowSpdy\": false,\n  \"allowWebsockets\": false,\n  \"createdAt\": \"2024-05-30T20:21:05.087872Z\",\n  \"enableGoogleCloudServerlessAuthentication\": false,\n  \"enforcedPolicies\": [],\n  \"enforcedPolicyIds\": [],\n  \"from\": \"https://httpbin.trusted-dog-1049.pomerium.app\",\n  \"id\": \"bFjRpQrVGFcBMWzKjvnRpmwwRXh\",\n  \"name\": \"HTTP Bin\",\n  \"namespaceId\": \"bwjkRZwxbNXBQHHcJHphGSNBbxt\",\n  \"policies\": [\n    {\n      \"id\": \"bgrXNgrJFJmMZvPsVsbZHGWxVWP\",\n      \"name\": \"Allow matching email\"\n    }\n  ],\n  \"policyIds\": [\"bgrXNgrJFJmMZvPsVsbZHGWxVWP\"],\n  \"preserveHostHeader\": false,\n  \"showErrorDetails\": false,\n  \"tlsSkipVerify\": false,\n  \"tlsUpstreamAllowRenegotiation\": false,\n  \"to\": [\"http://httpbin:80\"],\n  \"updatedAt\": \"2024-05-30T20:21:05.087872Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IdP Scopes in Pomerium via YAML (yaml)\nDESCRIPTION: Defines a list of OAuth 2.0 scopes for Pomerium's built-in identity providers using the YAML config representation. No external dependencies are required besides a properly installed Pomerium. The 'idp_scopes' key accepts a comma-separated list of standard scopes; input is a YAML list of string values and the output is correctly scoped tokens. Not all providers support every scope (e.g., some don't support 'offline_access') and custom scopes might not be necessary with built-in providers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nidp_scopes: openid, profile, offline_access, email\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Identity Provider Client Secret File (Core)\nDESCRIPTION: Illustrates specifying the path to a file containing the Identity Provider Client Secret in Pomerium Core. This is an alternative to providing the secret directly. Use the `idp_client_secret_file` key in YAML or the `IDP_CLIENT_SECRET_FILE` environment variable. This approach is beneficial for environments with secret management systems like Docker Swarm.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nidp_client_secret_file: '/run/secrets/POMERIUM_CLIENT_SECRET'\n```\n\nLANGUAGE: bash\nCODE:\n```\nIDP_CLIENT_SECRET_FILE='/run/secrets/POMERIUM_CLIENT_SECRET'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Identity Provider Client ID (Core)\nDESCRIPTION: Demonstrates how to set the Identity Provider Client ID in Pomerium Core. This OAuth 2.0 Client Identifier is retrieved from your identity provider. It can be configured using the `idp_client_id` key in the YAML configuration file or the `IDP_CLIENT_ID` environment variable. This setting is required if self-hosting the Pomerium authenticate service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidp_client_id: idp_client_id\n```\n\nLANGUAGE: bash\nCODE:\n```\nIDP_CLIENT_ID=idp_client_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Signing Key via YAML (Base64)\nDESCRIPTION: Example demonstrating how to set the `signing_key` parameter directly within a Pomerium YAML configuration file. The value provided is a base64 encoded PEM private key, which Pomerium will use to sign JWTs sent to upstream services.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/signing-key.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsigning_key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUNUWHlVQ0phYmlHTW1wd3VqYlBmWHhNS2MzWjNFM0tEcmlEbmQwZktiTmtvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFM1FYQmZ1eEV1UEhJT0ZDb3RaaXBOMUFqM3UrOUtFRWd4RFVURW9CcjYxYXpaYWFvYlRGbwo0cGY3WFRSbzVhM2U2aDdKUW9wckp4QSszd0dwTUpSYWl3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Redirect in Pomerium Core (YAML)\nDESCRIPTION: This YAML snippet demonstrates configuring a basic host redirect within a Pomerium route. It uses the 'redirect' object with the 'host_redirect' key to specify the target host ('example.com') for redirection. This setting is optional and mutually exclusive with the 'to' setting. Refer to the surrounding documentation for other redirect options like `https_redirect`, `path_redirect`, `response_code`, etc.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/redirect.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nredirect: {'host_redirect': 'example.com'}\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Key for Cookie Secret File\nDESCRIPTION: This shell command generates a 32-byte random key, encodes it in base64, suitable for storing in a file referenced by the `cookie_secret_file` configuration option in Pomerium Core. This is useful for secret management systems.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nhead -c32 /dev/urandom | base64\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Address in Pomerium YAML\nDESCRIPTION: Sets the `metrics_address` key in the Pomerium YAML configuration file to expose the Prometheus metrics endpoint on port 9090 for all interfaces. This setting is optional and disabled by default. Use with caution as it can expose sensitive server names or addresses.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/metrics.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_address: :9090\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Ingress Resource in Kubernetes\nDESCRIPTION: Example Ingress resource definition for Pomerium Ingress Controller that specifies host routing, TLS configuration, and access control policies. The example includes annotations for allowing authenticated users and passing identity headers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    cert-manager.io/cluster-issuer: google-dns\n    external-dns.alpha.kubernetes.io/hostname: httpbin.localhost.pomerium.io\n    ingress.pomerium.io/allow_any_authenticated_user: 'true'\n    ingress.pomerium.io/pass_identity_headers: 'true'\n  name: httpbin\n  namespace: httpbin\nspec:\n  ingressClassName: pomerium\n  rules:\n    - host: httpbin.localhost.pomerium.io\n      http:\n        paths:\n          - backend:\n              service:\n                name: httpbin\n                port:\n                  name: http\n            path: /\n            pathType: Prefix\n  tls:\n    - hosts:\n        - httpbin.ingress.localhost.pomerium.io\n      secretName: httpbin-localhost-pomerium-io\n```\n\n----------------------------------------\n\nTITLE: Setting Auth0 Provider via Environment Variables - Pomerium - Bash\nDESCRIPTION: This snippet shows how to configure Pomerium's Auth0 identity provider parameters using environment variables, offering an alternative to YAML file configuration. Each variable corresponds to a key required by Pomerium to establish connection with Auth0. Values for client ID and secret should match those provisioned in the Auth0 application, and these commands must be run in the environment where Pomerium is deployed.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/auth0.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIDP_PROVIDER=\"auth0\"\nIDP_PROVIDER_URL=\"https://awesome-company.auth0.com\"\nIDP_CLIENT_ID=\"REPLACE_ME\" # from the web application\nIDP_CLIENT_SECRET=\"REPLACE_ME\" # from the web application\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificates in Kubernetes with YAML\nDESCRIPTION: This YAML configuration snippet is for Kubernetes deployments of Pomerium. The 'certificates' field references a Kubernetes secret or config resource by name ('pomerium/wildcard-localhost'). The referenced secret must provide the necessary PEM-formatted certificate and key. For further integration details, consult the Kubernetes TLS Certificates documentation.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/certificates.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncertificates: pomerium/wildcard-localhost\n```\n\n----------------------------------------\n\nTITLE: Enabling Autocert Feature in Pomerium Configuration (YAML)\nDESCRIPTION: Enables Pomerium's automatic TLS certificate management feature using the `autocert` key in a YAML configuration file. When set to `true`, Pomerium will attempt to retrieve and renew certificates via ACME (defaulting to Let's Encrypt if `autocert_ca` is not set). Requires corresponding challenge setup (HTTP-01 or TLS-ALPN-01).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nautocert: true\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticate Internal Service URL via Configuration File - YAML\nDESCRIPTION: This configuration file snippet sets the internal, cluster-facing Authenticate Service URL under split-service deployments. The 'authenticate_internal_service_url' key points to an internally reachable endpoint, ensuring service-to-service communication when public URLs are not accessible. Used in advanced and split-mode Pomerium deployments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_internal_service_url: https://authenticate.internal\n```\n\n----------------------------------------\n\nTITLE: Configuring Signing Key in Pomerium YAML\nDESCRIPTION: YAML configuration showing how to specify the signing key file location in Pomerium's global settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/jwt-verification.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\nsigning_key_file: '/pomerium/ec_private.pem'\n```\n\n----------------------------------------\n\nTITLE: Prefix Rewrite Route Configuration\nDESCRIPTION: Example showing how to configure prefix rewriting in a route.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfrom: https://from.example.com\nto: https://to.example.com\nprefix: /admin\nprefix_rewrite: /\n```\n\n----------------------------------------\n\nTITLE: Configuring OneLogin Provider in Pomerium via Environment Variables - Bash\nDESCRIPTION: This Bash snippet demonstrates how to set Pomerium's OneLogin OIDC provider settings using environment variables. Set `IDP_PROVIDER`, `IDP_PROVIDER_URL`, `IDP_CLIENT_ID`, and `IDP_CLIENT_SECRET` with values from your OneLogin OIDC app. These variables are consumed by the running Pomerium process, allowing for dynamic or containerized deployments. Inputs are shell environment variable assignments, and outputs will manifest in the authentication capability of Pomerium after reload. Be careful to protect secrets and avoid leaking them in logs or command history.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/one-login.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIDP_PROVIDER=\"onelogin\"\nIDP_PROVIDER_URL=\"https://awesomecompany.onelogin.com/oidc/2\"\nIDP_CLIENT_ID=\"REDACTED\" # Your OneLogin application ID\nIDP_CLIENT_SECRET=\"REDACTED\" # Your OneLogin application secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Identity Provider in Pomerium using Environment Variables - Bash\nDESCRIPTION: This snippet illustrates the option to configure Pomerium with Google Identity Provider settings via environment variables. It should be included in the environment or startup script where Pomerium is launched. Dependencies are similar to the YAML approach: valid Google OAuth 2.0 credentials. Environment variables 'IDP_PROVIDER', 'IDP_CLIENT_ID', and 'IDP_CLIENT_SECRET' are used as parameters. On startup, Pomerium reads these variables to configure authentication. Inputs must be valid credential strings; outputs again are realized through successful Pomerium authentication flows.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/google.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIDP_PROVIDER=\"google\"\\nIDP_CLIENT_ID=\"yyyy.apps.googleusercontent.com\"\\nIDP_CLIENT_SECRET=\"xxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Service Account Token in Pomerium Terraform Provider\nDESCRIPTION: This snippet demonstrates how to authenticate the Pomerium Terraform provider using a service account token. It provides fine-grained access control at the namespace level.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure-terraform.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"pomerium\" {\n  api_url               = \"https://console-api.your-domain.com\"\n  service_account_token = var.pomerium_service_account_token\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Request Headers in Pomerium Configuration\nDESCRIPTION: Shows how to remove specific request headers to prevent privacy information from being passed to downstream applications.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://verify.corp.example.com\n  to: https://verify.pomerium.com\n  policy:\n    - allow:\n        or:\n          - email:\n              is: user@example.com\n  remove_request_headers:\n    - X-Email\n    - X-Username\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Authorize Service URLs via Configuration File - YAML\nDESCRIPTION: This snippet demonstrates specifying an array of internal Authorize Service endpoints using 'authorize_service_urls' in YAML. Used to route gRPC traffic internally and support load balancing or failover setups. Required in split-service deployments; not needed in all-in-one mode, which uses localhost by default.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nauthorize_service_urls:\n  - https://localhost:5443\n  - https://authorize.corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring SAN Match Constraints with Pomerium YAML - YAML\nDESCRIPTION: Demonstrates how to specify required client certificate SAN entries using regular expressions in a Pomerium Core YAML configuration. The `match_subject_alt_names` array maps SAN types (e.g., dns, email) to RE2 regular expressions. At least one specified SAN must match for client authentication to succeed. Intended for placement in the `downstream_mtls` configuration block. Accepts valid RE2 regex strings; improper configuration may block intended clients.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndownstream_mtls:\\n  match_subject_alt_names:\\n    - dns: '.*\\\\.corp\\\\.example\\\\.com'\n```\n\n----------------------------------------\n\nTITLE: Adding Path Prefix Match to Pomerium Route - YAML\nDESCRIPTION: This config.yaml snippet adds the 'prefix' option to a route, restricting access so only URLs with '/admin' in their path will be proxied to the backend. This requires Pomerium's configuration and is useful to scope routes to specific subpaths. Input is HTTP requests to the matching URL path.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://nodeserver.localhost.pomerium.io\\n    to: http://nodeserver:5001\\n    prefix: /admin\n```\n\n----------------------------------------\n\nTITLE: Deploying Example Service Configuration\nDESCRIPTION: Creates a Service and Deployment for an example httpbin application including necessary labels and selectors.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/gateway-api.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: httpbin\nspec:\n  selector:\n    app: httpbin\n  ports:\n    - port: 80\n      targetPort: 80\n      name: http\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: httpbin-deployment\n  labels:\n    app: httpbin\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: httpbin\n  template:\n    metadata:\n      labels:\n        app: httpbin\n    spec:\n      containers:\n        - name: httpbin\n          image: docker.io/kennethreitz/httpbin\n          ports:\n            - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium for Apple IdP (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure Pomerium to use Apple as the identity provider. It specifies the provider type as 'apple', sets the client ID obtained from Apple's Developer portal (App ID or Service ID), and provides the required signed JWT as the client secret. These settings enable Pomerium to redirect users to Apple for authentication.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/apple.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=\"pomerium-config\"\nidp_provider: apple\nidp_client_id: app_or_service_id\nidp_client_secret: signed_apple_jwt\n```\n```\n\n----------------------------------------\n\nTITLE: Rewriting Response Headers Configuration\nDESCRIPTION: Configuration for modifying response headers before returning to the client, specifically for rewriting Location headers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nrewrite_response_headers:\n  - header: Location\n    prefix: http://localhost:8000/two/\n    value: http://frontend/one/\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium with Docker Compose\nDESCRIPTION: This Docker Compose configuration sets up a Pomerium service with optional certificate mounting and required ports. It also includes supporting services: Redis for caching, an OpenSSH server for SSH access, and a PostgreSQL database.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/tcp/docker-compose.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      # Uncomment to mount certificates (optional)\n      # - ./_wildcard.localhost.pomerium.io.pem:/pomerium/cert.pem:ro\n      # - ./_wildcard.localhost.pomerium.io-key.pem:/pomerium/key.pem:ro\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n\n  redis:\n    image: redis:latest\n    expose:\n      - 6379\n\n  ssh:\n    image: linuxserver/openssh-server:latest\n    expose:\n      - 2222\n    environment:\n      PASSWORD_ACCESS: \"true\"\n      USER_PASSWORD: supersecret\n      USER_NAME: user\n\n  pgsql:\n    image: postgres\n    restart: always\n    environment:\n      - POSTGRES_PASSWORD=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_DB=postgres\n    expose:\n      - 5432\n```\n\n----------------------------------------\n\nTITLE: Defining a Tor Exit Node Exclusion Policy - Pomerium Console (YAML)\nDESCRIPTION: This YAML policy snippet configures Pomerium to deny access when a record with the current user's IP matches an entry in the TorExitNode datasource. The policy uses an 'or' block and a 'record' condition referencing the TorExitNode type and checking the 'id' field. Requires Pomerium Enterprise Console with the TorExitNode datasource enabled. Key parameters include 'field' for referencing the identifier and 'type' for data source selection. Output is a rule that restricts Tor exit node access.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/tor-exit-nodes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndeny:\\n  or:\\n    - record:\\n        contains: .\\n        field: id\\n        type: pomerium.io/TorExitNode\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Response Headers - JSON - json\nDESCRIPTION: This snippet provides an example of configuring Pomerium to add an HTTP response header using a JSON configuration file. The 'set_response_headers' key maps header names to their values for global application across routes. Intended for use in core configuration files with a JSON format. The input is a JSON object and the output is persistent configuration for response headers. Dependencies include using Pomerium with JSON-based configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/set-response-headers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"set_response_headers\\\": {\\n    \\\"X-Test\\\": \\\"X-Value\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Route for Upstream TLS - YAML\nDESCRIPTION: Defines a Pomerium route that directs traffic to the test OpenSSL server over TLS with an explicit server name, but no client certificate yet. The policy restricts access to a specific email. Adjust fields as needed for your environment. Prerequisite: YAML config should be merged correctly into your full Pomerium configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/certificates-and-tls.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://openssl.localhost.pomerium.io\n  to: https://localhost:44330\n  tls_upstream_server_name: openssl.localhost\n  policy:\n    - allow:\n        or:\n          - email:\n              is: user@example.com\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Pomerium JWT using HTTP Headers\nDESCRIPTION: Demonstrates three different header schemes for authenticating with a Pomerium JWT when using a Service Account for impersonation. These headers can be used to access routes where the Service Account has been added to the policy.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/impersonation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `Authorization: Bearer Pomerium-${pomerium_jwt}`\n- `X-Pomerium-Authorization: ${pomerium_jwt}`\n- `Authorization: Pomerium ${pomerium_jwt}`\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream mTLS CRL Inline via Environment Variable (Bash)\nDESCRIPTION: This snippet illustrates setting the downstream mTLS Certificate Revocation List (CRL) bundle inline using the `DOWNSTREAM_MTLS_CRL` environment variable. The variable should contain the base64-encoded PEM CRL bundle. This corresponds to the `downstream_mtls.crl` YAML key. CRL support is a beta feature.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDOWNSTREAM_MTLS_CRL=LS0tLS1CRUdJTiBYNTA5IENSTC0tLS0tCk...\n```\n\n----------------------------------------\n\nTITLE: Load Balancing Route Configuration in YAML\nDESCRIPTION: Example configuration for setting up load balancing between multiple upstream servers in Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://example.com\n  to:\n    - https://a.example.com\n    - https://b.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Route and Idle Timeouts in Pomerium Core (YAML)\nDESCRIPTION: Demonstrates setting both `timeout` (overall connection duration limit) and `idle_timeout` (maximum inactivity period) for a specific route within the `routes` section of the Pomerium configuration file (YAML). This is particularly useful for long-lived connections like websockets or gRPC. Both values use Go Duration string format (e.g., '1m', '5m'). Setting `idle_timeout` without explicitly setting `timeout` makes the route timeout unlimited.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/timeouts.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    timeout: 1m\n    idle_timeout: 5m\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS Preflight in Pomerium Core using YAML\nDESCRIPTION: This YAML code snippet demonstrates how to enable CORS Preflight handling in Pomerium Core by setting the \"cors_preflight\" property to true. This option allows unauthenticated HTTP OPTIONS requests according to the CORS specification. No additional dependencies are required beyond the Pomerium configuration file, and the key parameter is the boolean \"cors_preflight\" value. The setting is optional and defaults to false if omitted.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/cors-preflight.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncors_preflight: true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Provider with Config File Keys - YAML\nDESCRIPTION: This YAML snippet configures Pomerium's identity provider integration using config file keys for Microsoft Entra ID. It requires that the admin has obtained client ID, client secret, and the correct OIDC metadata string for the Azure tenant. Key parameters include \\'idp_provider\\' (set to \\'azure\\'), \\'idp_provider_url\\', \\'idp_client_id\\', and \\'idp_client_secret\\', whose values should be replaced with organization-specific info. Inputs are the provider credentials and OIDC info, resulting in Pomerium connecting to Entra ID for authentication. Sensitive details must be stored securely.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/azure.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: 'azure'\nidp_provider_url: 'https://login.microsoftonline.com/{REPLACE-WITH-OIDC-METADATA-STRING}/v2.0'\nidp_client_id: 'REPLACE-WITH-CLIENT-ID'\nidp_client_secret: 'REPLACE-WITH-CLIENT-SECRET'\n```\n\n----------------------------------------\n\nTITLE: Defining Pomerium Policy for Cloud Run (YAML)\nDESCRIPTION: YAML template for Pomerium policy, specifying routes and access controls for Cloud Run applications.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/cloud-run.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://hello.cloudrun.pomerium.io\n  to: https://hello-direct.cloudrun.pomerium.io\n  allow_any_authenticated_user: true\n- from: https://verify.cloudrun.pomerium.io\n  to: https://httpbin.org\n  allow_any_authenticated_user: true\n  set_request_headers:\n    X-Pomerium-Claim-Email: ${email}\n    X-Pomerium-Claim-Groups: ${groups}\n```\n\n----------------------------------------\n\nTITLE: Setting and Removing Request Headers\nDESCRIPTION: Configuration to add custom headers to requests and remove specific JWT claim headers for privacy or security reasons. This demonstrates fine-grained control over HTTP request headers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://httpbin.localhost.pomerium.io\n    to: http://httpbin:80\n    set_request_headers:\n      X-SET-REQUEST-HEADERS: X-VALUE\n    remove_request_headers:\n      - X-Pomerium-Claim-User\n      - X-Pomerium-Claim-Name\n```\n\n----------------------------------------\n\nTITLE: Email Domain Matching Policy in PPL\nDESCRIPTION: A simple policy that grants access only if the user's email address matches a specified domain. This is shown in YAML format for the PPL Editor.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-advanced-policies.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n  and:\n    - domain:\n        is: example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream mTLS Enforcement Mode in Pomerium (YAML)\nDESCRIPTION: This snippet demonstrates setting the downstream mTLS enforcement mode using the `enforcement` key under `downstream_mtls` in the Pomerium YAML configuration. The example sets the mode to `reject_connection`, which requires a trusted client certificate during the initial TLS handshake for all connections, including internal Pomerium routes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndownstream_mtls:\n  enforcement: reject_connection\n```\n\n----------------------------------------\n\nTITLE: Using prefix_rewrite for URL Path Rewriting in Pomerium - YAML\nDESCRIPTION: This config.yaml snippet configures a Pomerium route to match on '/admin' prefix and rewrite it to '/', sending backend traffic as if the prefix was not present. Prerequisites: Pomerium configuration with route matching and rewrite support. Requests with '/admin' prefix are internally rewritten before forwarding.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://nodeserver.localhost.pomerium.io\\n    to: http://nodeserver:5001\\n    prefix: /admin\\n    prefix_rewrite: /\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubeconfig to Use Pomerium-CLI for Authentication\nDESCRIPTION: This YAML shows how to configure a kubeconfig file to use pomerium-cli as a credential plugin for authenticating to a Kubernetes cluster via Pomerium. It sets up the necessary cluster, context, and user configuration with exec credentials.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/kubernetes-access.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Config\nclusters:\n  - cluster:\n      server: https://mycluster.localhost.pomerium.io # Pomerium route URL\n    name: mycluster\ncontexts:\n  - context:\n      cluster: mycluster\n      user: via-pomerium\n    name: mycluster\ncurrent-context: mycluster\nusers:\n  - name: via-pomerium\n    user:\n      exec:\n        apiVersion: client.authentication.k8s.io/v1beta1\n        command: pomerium-cli\n        args:\n          - k8s\n          - exec-credential\n          - https://mycluster.localhost.pomerium.io # Pomerium route URL\n```\n\n----------------------------------------\n\nTITLE: Setting Databroker PostgreSQL Connection String via Environment Variable\nDESCRIPTION: Defines the connection string for the external PostgreSQL database using the `DATABROKER_STORAGE_CONNECTION_STRING` environment variable. This is required when the storage type is 'postgres' and provides an alternative to file-based configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/databroker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nDATABROKER_STORAGE_CONNECTION_STRING=postgresql://postgres:postgres@database/postgres?sslmode=disable\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium with Helm\nDESCRIPTION: Commands to install Pomerium using Helm chart with generated secrets and custom values\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/argo.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add pomerium https://helm.pomerium.io\nhelm repo update\nhelm install \\\n    --set config.sharedSecret=\"$(head -c32 /dev/urandom | base64)\" \\\n    --set config.cookieSecret=\"$(head -c32 /dev/urandom | base64)\" \\\n    --values values.yaml \\\n    pomerium pomerium/pomerium\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium IdP with GitHub via Config File (Bash)\nDESCRIPTION: Sets the identity provider to 'github' and specifies placeholders for the GitHub OAuth application's Client ID and Client Secret within a Pomerium configuration file. These values must be obtained after registering the application in GitHub. This snippet shows the configuration keys used in Pomerium's primary config file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/github.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nidp_provider: \"github\"\nidp_client_id: \"REDACTED\"       // github application ID\nidp_client_secret: \"REDACTED\"   // github application secret\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Secret in Pomerium Core YAML Configuration\nDESCRIPTION: This YAML snippet shows how to set the `cookie_secret` parameter in a Pomerium Core configuration file. This secret is used to encrypt and sign session cookies. It's recommended to use a strong, randomly generated key.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncookie_secret: tdkuWzUelRukP/6VYzopfh6kis7y5u5Ldl3MrIq9ZR0=\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticate Service URL via Environment Variable - Bash\nDESCRIPTION: This bash environment variable sets 'AUTHENTICATE_SERVICE_URL' for Pomerium, defining the external Authenticate Service endpoint. Required in split-service deployments or when integrating with a custom identity provider. The value should match the OAuth callback configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTHENTICATE_SERVICE_URL=https://authenticate.corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Policy Using Well Known IP Range (YAML)\nDESCRIPTION: Example Pomerium policy configuration in YAML format (Editor view) that denies access based on data from the Well Known IP Ranges source. This rule denies requests if the `as_number` field associated with the request's IP address matches '36459', using the configured external data source of type `pomerium.io/WellKnownIPRange`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/ip-ranges.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndeny:\n  or:\n    - record:\n        is: '36459'\n        field: as_number\n        type: pomerium.io/WellKnownIPRange\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS Skip Verification via Kubernetes Annotation (YAML)\nDESCRIPTION: This snippet shows how to set `tls_skip_verify` using a Kubernetes annotation for Pomerium Ingress resources, bypassing upstream certificate verification. The example uses stringified boolean 'true', as required by Kubernetes annotation conventions. This is for Kubernetes deployments using Pomerium ingress controller.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/tls.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/tls_skip_verify: 'true'\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Audience for API Route - YAML\nDESCRIPTION: Updates the Enterprise Console configuration file's audience key to include the new API route. This ensures issued tokens are valid for both the web and API entrypoints. Requires administrator access to the configuration file and a configuration reload or process restart after updating.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-enterprise.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naudience: 'console.localhost.pomerium.io,console-api.localhost.pomerium.io'\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticate Service URL via Configuration File - YAML\nDESCRIPTION: This snippet sets the external Authenticate Service URL in a configuration file for Pomerium. The key 'authenticate_service_url' is optional and should point to the accessible web location where clients are redirected for OAuth authentication. It is required for split-service mode and custom identity providers. No additional dependencies are required beyond the Pomerium core.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Domain API Request with Custom Authorization Header in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to make a cross-domain API request using fetch, passing the Pomerium authentication token via a custom header. It extracts the token from the document cookie.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  const result = await fetch('https://api.localhost.pomerium.io', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'X-Pomerium-Authorization': document.cookie.substring(\n        document.cookie.indexOf('=') + 1,\n      ),\n    },\n  });\n  const json = await result.json();\n  console.log('RESULT', json);\n})();\n```\n\n----------------------------------------\n\nTITLE: Pomerium Configuration Values\nDESCRIPTION: YAML configuration for Pomerium including routes, authentication settings, and ingress annotations\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/argo.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  routes:\n    - from: https://argo.localhost.pomerium.io\n      to: http://argo-server.kube-system.svc.cluster.local:2746\n      policy:\n        - allow:\n            or:\n              - email:\n                  is: user@example.com\n\nauthenticate:\n  idp:\n    provider: google\n    clientID: REPLACE_ME\n    clientSecret: REPLACE_ME\n\ningress:\n  annotations:\n    nginx.ingress.kubernetes.io/backend-protocol: https\n```\n\n----------------------------------------\n\nTITLE: Configuring Read Timeout in Pomerium (Bash Environment Variable)\nDESCRIPTION: This Bash snippet sets the HTTP read timeout via the TIMEOUT_READ environment variable. The value should be a Go Duration string (e.g., '30s'). This approach is used when deploying Pomerium in environments that leverage environment-based configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/global-timeouts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTIMEOUT_READ=30s\n\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticate Internal Service URL via Environment Variable - Bash\nDESCRIPTION: Set 'AUTHENTICATE_INTERNAL_SERVICE_URL' via environment variable to define where other Pomerium services contact the internal Authenticate service endpoint. Necessary in split-service deployments and advanced network configurations. No dependencies aside from Pomerium environment.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nAUTHENTICATE_INTERNAL_SERVICE_URL=https://authenticate.internal\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Log Fields in Pomerium (YAML)\nDESCRIPTION: Defines which fields will be logged for each HTTP request made through the Pomerium proxy by updating the configuration YAML file. The snippet highlights adding core access log fields as an array of strings under the required key, which can include default fields or custom header fields using the 'headers.' prefix. YAML format is supported in Pomerium's config for both direct and Kubernetes deployments; fields must exist or be supported by the system. No external dependencies are necessary beyond standard YAML support.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/access-log-fields.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naccess_log_fields:\n  - authority\n  - duration\n  - path\n```\n\nLANGUAGE: yaml\nCODE:\n```\naccess_log_fields:\n  - headers.user-agent\n  - headers.content-type\n```\n\nLANGUAGE: yaml\nCODE:\n```\naccessLogFields:\n  - authority\n  - duration\n  - path\n```\n\nLANGUAGE: yaml\nCODE:\n```\naccessLogFields:\n  - headers.user-agent\n  - headers.content-type\n```\n\nLANGUAGE: yaml\nCODE:\n```\naccess_log_fields:\n  - authority\n  - path\n```\n\nLANGUAGE: yaml\nCODE:\n```\naccess_log_fields:\n  - headers.user-agent\n  - headers.content-type\n```\n\n----------------------------------------\n\nTITLE: Adding Groups Claim via Auth0 Login Action - Auth0/Pomerium Integration - JavaScript\nDESCRIPTION: This JavaScript snippet is used as an Auth0 login action to inject a custom claim (\"pomerium.io/groups\") into the identity token after successful login. It checks for the presence of role-based authorization data and sets the custom claim to contain the user's Auth0 roles, thereby enabling group-based authorization within Pomerium. This action must be set up in the Auth0 Actions dashboard and added to the login flow; it requires access to Auth0's Actions APIs and the standard Auth0 event object.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/auth0.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onExecutePostLogin = async (event, api) => {\n  if (event.authorization) {\n    api.idToken.setCustomClaim(\n      'pomerium.io/groups',\n      event.authorization.roles,\n    );\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Wildcard From Route Patterns to Simplify Routing - YAML\nDESCRIPTION: This set of YAML examples demonstrates how to use wildcard asterisks in 'from' routes to efficiently match multiple subdomains with a single definition. It contrasts defining many explicit routes with a wildcard route replacement for both HTTP and TCP proxying, reducing configuration duplication. These examples are designed for Pomerium route configuration, disabling autocert for wildcard hosts, and require valid secure schemes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/from.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Before:\nroutes:\n  - from: https://a.example.com\n    to: https://example.com\n  - from: https://b.example.com\n    to: https://example.com\n  - from: https://c.example.com\n    to: https://example.com\n  - from: https://d.example.com\n    to: https://example.com\n  - from: https://e.example.com\n    to: https://example.com\n\n# After\nroutes:\n  - from: https://*.example.com\n    to: https://example.com\n\n# Or\n\nroutes:\n  - from: tcp+https://*.example.com:22\n    to: tcp://example.com:22\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Pomerium `to` Destinations in YAML\nDESCRIPTION: Provides examples of defining Pomerium routes using YAML, specifying the `from` URL (the public-facing endpoint) and the `to` URL (the internal or external destination service). It showcases different destination formats including internal hostnames, IP addresses with ports, and external domains using both HTTP and HTTPS schemes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/to.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://example.com\n  to: http://verify\n\n- from: https://example.com\n  to: https://192.1.20.12:8080\n\n- from: https://example.com\n  to: http://neverssl.com\n\n- from: https://example.com\n  to: https://verify.pomerium.com/anything/\n```\n\n----------------------------------------\n\nTITLE: Configuring OTel Tracing in Pomerium CRD (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure OpenTelemetry tracing options within the `Pomerium` Custom Resource Definition (CRD) for the Kubernetes Ingress Controller. It specifies settings like the OTLP endpoint, protocol, custom headers, timeout, sampling rate, resource attributes, batch span processor schedule delay, max export batch size, and internal log level.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/tracing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ingress.pomerium.io/v1\nkind: Pomerium\nmetadata:\n  name: example\nspec:\n  ...\n  otel:\n    endpoint: http://jaeger-collector:4317\n    protocol: grpc\n    headers:\n      key: value\n    timeout: 10s\n    sampling: 1.0\n    resourceAttributes:\n      key: value\n    bspScheduleDelay: 5s\n    bspMaxExportBatchSize: 512\n    logLevel: info\n```\n\n----------------------------------------\n\nTITLE: Configuring BambooHR Data Source in Docker Compose - YAML\nDESCRIPTION: This YAML snippet outlines how to add the BambooHR external datasource service to a Docker Compose configuration for use with Pomerium. It configures the BambooHR integration container, passing essential parameters such as API key, subdomain, and time zone. Required dependencies include Docker and Docker Compose. Replace the environment variables with your own values. The service exposes port 8080 for connections.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-standing/bamboohr.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\\n  bamboohr:\\n    image: docker.cloudsmith.io/pomerium/datasource/datasource:main\\n    command:\\n      - bamboohr\\n      - --bamboohr-api-key=$YOUR_API_KEY\\n      - --bamboohr-subdomain=$YOUR_BAMBOOHR_SUBDOMAIN\\n      - --bamboohr-time-zone=America/New_York\\n      - --address=:8080\\n    container_name: bamboohr\\n    restart: always\\n    expose:\\n      - 8080\n```\n\n----------------------------------------\n\nTITLE: Defining Verify Service Deployment\nDESCRIPTION: Kubernetes manifest for deploying the Pomerium Verify test service and its corresponding service definition\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/quickstart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: verify\n  labels:\n    app: verify\n    service: verify\nspec:\n  ports:\n    - port: 8000\n      targetPort: 8000\n      name: http\n  selector:\n    app: pomerium-verify\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: verify\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: pomerium-verify\n  template:\n    metadata:\n      labels:\n        app: pomerium-verify\n    spec:\n      containers:\n        - image: docker.io/pomerium/verify\n          imagePullPolicy: IfNotPresent\n          name: httpbin\n          ports:\n            - containerPort: 8000\n              protocol: TCP\n              name: http\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes RBAC for Pomerium Impersonation\nDESCRIPTION: This YAML defines a ClusterRole that allows Pomerium to impersonate users and specific groups when accessing the Kubernetes API. It sets up the necessary permissions for the impersonation authentication method.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/kubernetes-access.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: pomerium-impersonation\nrules:\n  - apiGroups:\n      - ''\n    resources:\n      - users\n    verbs:\n      - impersonate\n  - apiGroups:\n      - ''\n    resources:\n      - groups\n    verbs:\n      - impersonate\n    resourceNames:\n      - group1\n      - group2\n      - group3\n```\n\n----------------------------------------\n\nTITLE: Defining Redis and OpenSSH Services in Docker Compose - YAML\nDESCRIPTION: This YAML snippet configures Redis and OpenSSH services for Docker Compose. The 'redis' service uses the official image and exposes port 6379. The 'myssh' service uses the 'linuxserver/openssh-server' image, exposes port 2222, and is configured with password-based access and environment variables for user credentials. These definitions are prerequisites for testing Pomerium Zero TCP proxying and must exist in the deployment's docker-compose file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-tcp-routes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nredis:\n  image: redis:latest\n  networks:\n    main: {}\n  expose:\n    - 6379\n\nmyssh:\n  image: linuxserver/openssh-server:latest\n  networks:\n    main: {}\n  expose:\n    - 2222\n  environment:\n    PASSWORD_ACCESS: 'true'\n    USER_PASSWORD: supersecret\n    USER_NAME: user\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Proxy Chaining\nDESCRIPTION: Example configuration for setting up TCP proxy chaining to forward CONNECT requests to another proxy.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/tcp.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: tcp+https://example.corp.com:10002\n    to: http://second-proxy.example.corp.com:10003\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Terraform Provider\nDESCRIPTION: This snippet shows how to configure the Pomerium Terraform provider in your Terraform configuration. It specifies the required provider and its version.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure-terraform.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    pomerium = {\n      source  = \"pomerium/pomerium\"\n      version = \"~> 0.29.0\"\n    }\n  }\n}\n\nprovider \"pomerium\" {\n  api_url = \"https://console-api.your-domain.com\"\n  # Choose one of the authentication methods below\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie SameSite Attribute in Pomerium Kubernetes Config\nDESCRIPTION: This YAML snippet configures the SameSite attribute for Pomerium cookies to `None` in a Kubernetes deployment using the `cookie.sameSite` parameter. Note that `SameSite=None` requires the cookie to also be marked as Secure (HTTPS only).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncookie:\\n  sameSite: None\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto TLS via YAML for Pomerium Core\nDESCRIPTION: This YAML snippet shows how to enable Auto TLS in Pomerium Core by setting the `tls_derive` configuration key to a fully qualified domain name (FQDN). This optional setting instructs Pomerium to derive the necessary CA and server certificates from the `shared_secret` for the specified domain.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/tls-derive.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ntls_derive: www.example.domain.com\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Routes via HTTP CONNECT Proxy in Pomerium (YAML)\nDESCRIPTION: Shows how to configure a Pomerium TCP route (`from: tcp+https://`) to proxy traffic through another HTTP proxy. Instead of using `tcp://`, the `to` URL uses `http://` or `https://`, causing Pomerium to send an HTTP CONNECT request to the specified upstream proxy.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/to.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- from: tcp+https://tcp.example.com:3001\n  to: http://second-proxy.tcp.example.com:3002\n```\n\n----------------------------------------\n\nTITLE: Command Line Installation Steps\nDESCRIPTION: Series of bash commands for installing and configuring Pomerium with Helm, including repository setup and deployment commands.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/helm.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace cert-manager\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace \\\n--version v1.4.0 --set installCRDs=true\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret tls pomerium-tls-ca --namespace=pomerium \\\n--cert=\"$(mkcert -CAROOT)/rootCA.pem\" --key=\"$(mkcert -CAROOT)/rootCA-key.pem\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Programmatic Redirect Whitelist using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the `programmatic_redirect_domain_whitelist` setting in Pomerium's configuration file. It specifies an array of strings, where each string is an allowed domain for redirects during programmatic login. In this example, redirects to `localhost` and `redirect-uri.com` are permitted. Note that domains must match exactly.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/programmatic-redirect-domain-whitelist.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nprogrammatic_redirect_domain_whitelist:\n  - localhost\n  - redirect-uri.com\n```\n```\n\n----------------------------------------\n\nTITLE: Defining IP Range Lookup Index in Pomerium Data Source JSON\nDESCRIPTION: Provides an example JSON object demonstrating how to enable IP range matching for the 'request.ip' foreign key. Adding a '$index' key with a 'cidr' sub-key allows the record to match any IP address within the specified CIDR block (e.g., '10.1.2.3/24').\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"$index\": {\"cidr\": \"10.1.2.3/24\"}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Name via Environment Variable for Pomerium Core\nDESCRIPTION: This Bash snippet shows how to configure the Pomerium session cookie name using the `COOKIE_NAME` environment variable. This is an alternative to setting `cookie_name` in the YAML configuration file for Pomerium Core.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCOOKIE_NAME=cookie_name\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Pomerium Zero and Code-Server\nDESCRIPTION: Docker Compose configuration to run Pomerium Zero and Code-Server containers. It sets up networking, ports, and volumes for both services.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/code-server.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npomerium:\n  image: pomerium/pomerium:latest\n  ports:\n    - 443:443\n  restart: always\n  environment:\n    POMERIUM_ZERO_TOKEN: <CLUSTER_TOKEN>\n    XDG_CACHE_HOME: /var/cache\n  volumes:\n    - pomerium-cache:/var/cache\n  networks:\n    main:\n      aliases:\n        - authenticate.<CLUSTER_SUBDOMAIN>.pomerium.app\ncodeserver:\n  image: codercom/code-server:latest\n  networks:\n    main: {}\n  ports:\n    - 8080:8080\n  command: --auth none --disable-telemetry /home/coder/project\n  volumes:\n    - ./code-server:/home/coder/project\n    - ./code-server-config/.config:/home/coder/.config\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium for AdGuard Home Access\nDESCRIPTION: This YAML configuration sets up Pomerium to proxy requests to AdGuard Home. It includes policy settings for access control and adds a basic authentication header to requests.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/ad-guard.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\n- from: https://adguard.domain.example\n  to: http://adguard\n  policy:\n    - allow:\n        or:\n          - email:\n              is: user@example.com\n  set_request_headers:\n    # https://www.blitter.se/utils/basic-authentication-header-generator/\n    Authorization: Basic dXNlcjpwYXNzd29yZA===\n  allow_websockets: true\n```\n\n----------------------------------------\n\nTITLE: Limiting Certificate Chain Depth via Environment Variable - Bash\nDESCRIPTION: Shows how to set the certificate chain maximum verification depth using an environment variable for Pomerium Core. Sets `DOWNSTREAM_MTLS_MAX_VERIFY_DEPTH=2`, permitting two certificates in the verified chain before a trusted anchor. Should be exported in the environment prior to launching the service. Values must be non-negative integers; improper values may cause startup failure.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nDOWNSTREAM_MTLS_MAX_VERIFY_DEPTH=2\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Domain in Pomerium Core YAML Configuration\nDESCRIPTION: This YAML snippet shows how to configure the `cookie_domain` parameter in a Pomerium Core configuration file. This setting defines the domain scope for the session cookie; specifying a domain includes its subdomains. If unset, it defaults to the host that set the cookie.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncookie_domain: localhost.pomerium.io\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPBin Service in Docker Compose\nDESCRIPTION: YAML configuration to add an HTTPBin service to a Docker Compose file. This service is used to test HTTP requests and responses through Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttpbin:\n  image: kennethreitz/httpbin\n  ports:\n    - 80:80\n```\n\n----------------------------------------\n\nTITLE: Configuring Override Certificate Name in Pomerium YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify a fixed hostname (`authorize.corp.example.com`) for the `override_certificate_name` setting within a Pomerium configuration file. This setting is used to ensure TLS verification uses the specified name for Server Name Indication (SNI) when communicating with upstream services, overriding the default behavior which uses the internally routed service hostname.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/override-certificate-name.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverride_certificate_name: authorize.corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw TCP Proxy Routes in Pomerium (YAML)\nDESCRIPTION: Demonstrates configuring a Pomerium route to proxy raw TCP connections. The `from` URL uses the `tcp+https://` scheme, and the `to` URL specifies the upstream TCP service using the `tcp://` scheme.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/to.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- from: tcp+https://tcp.example.com:3001\n  to: tcp://localhost:3001\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Authentication and Certificates\nDESCRIPTION: YAML configuration that sets up Pomerium ingress with authentication and TLS certificate settings. Defines the authentication URL endpoint and references secret resources for bootstrap configuration and wildcard TLS certificates.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/kubernetes/pomerium-global-settings.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ingress.pomerium.io/v1\nkind: Pomerium\nmetadata:\n  name: global\nspec:\n  secrets: pomerium/bootstrap\n  authenticate:\n      url: https://authenticate.pomerium.app\n  certificates:\n      - pomerium/pomerium-wildcard-tls\n```\n\n----------------------------------------\n\nTITLE: Enabling OCSP Must-Staple in Pomerium Configuration (YAML)\nDESCRIPTION: Configures Autocert to request certificates with the OCSP Must-Staple extension (RFC7633) by setting `autocert_must_staple` to `true` in a Pomerium YAML configuration file. This forces TLS clients to require valid OCSP stapling information during the handshake, failing immediately if it's missing or invalid. Only applies when `autocert` is enabled and takes effect on certificate issuance or renewal.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nautocert_must_staple: true\n```\n\n----------------------------------------\n\nTITLE: Default IngressClass Configuration\nDESCRIPTION: YAML configurations for setting Pomerium as the default IngressClass\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/install.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - https://raw.githubusercontent.com/pomerium/ingress-controller/v0.22.0/deployment.yaml\npatches:\n  - path: patch-proxy-external-dns.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  name: pomerium\n  annotations:\n    ingressclass.kubernetes.io/is-default-class: 'true'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium with Cognito using Environment Variables\nDESCRIPTION: This Bash snippet demonstrates setting Pomerium's identity provider (IdP) configuration using environment variables for AWS Cognito OIDC integration. It defines variables for the provider type (IDP_PROVIDER), provider URL (IDP_PROVIDER_URL, including placeholders for `${AWS-REGION}` and `${USER-POOL-ID}`), Client ID (IDP_CLIENT_ID), Client Secret (IDP_CLIENT_SECRET), and OAuth scopes (IDP_SCOPES). This method is common in containerized or CI/CD environments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/cognito.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIDP_PROVIDER=\"oidc\"\nIDP_PROVIDER_URL=\"https://cognito-idp.${AWS-REGION}.amazonaws.com/${USER-POOL-ID}\"\nIDP_CLIENT_ID=\"304a12ktcc5djt9d7enj6dsjkg\"\nIDP_CLIENT_SECRET=\"1re5ukkv3dab6up5aefv7rru65lu60oblf04t6cv8u9s0itjbci7\"\nIDP_SCOPES=\"openid,profile,email\"\n```\n\n----------------------------------------\n\nTITLE: Rewriting Response Headers in Pomerium Core (YAML)\nDESCRIPTION: This snippet demonstrates how to rewrite response headers in Pomerium Core using YAML configuration. It shows how to modify the Location header, replacing a specific prefix with a new value.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nrewrite_response_headers:\n  - header: Location\n    prefix: http://localhost:8000/two/\n    value: http://frontend/one/\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream mTLS CA via File Path in Pomerium (YAML)\nDESCRIPTION: This snippet demonstrates configuring the downstream mTLS Certificate Authority (CA) bundle by providing a path to a PEM-encoded certificate file using the `ca_file` key under `downstream_mtls` in the Pomerium YAML configuration. This is an alternative to providing the CA inline and is required if `ca` is not specified.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndownstream_mtls:\n  ca_file: /path/to/trusted/CAs.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Basic Authentication in Pomerium YAML\nDESCRIPTION: Sets the `metrics_basic_authentication` key in the Pomerium YAML configuration file to enable Basic HTTP Authentication for the metrics endpoint. The value must be a base64 encoded string representing 'username:password' (e.g., 'x:y' encodes to 'eDp5'). This requires Prometheus to be configured with corresponding basic_auth credentials.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/metrics.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# for username: x and password: y\nmetrics_basic_authentication: eDp5\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium IdP with GitHub via Environment Variables (Bash)\nDESCRIPTION: Configures Pomerium to use GitHub as the identity provider by setting environment variables. `IDP_PROVIDER` is set to 'github', while `IDP_CLIENT_ID` and `IDP_CLIENT_SECRET` must be set to the credentials obtained from the GitHub OAuth application setup. This is an alternative configuration method to using a config file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/github.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIDP_PROVIDER=\"github\"\nIDP_CLIENT_ID=\"REDACTED\"       // github application ID\nIDP_CLIENT_SECRET=\"REDACTED\"   // github application secret\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPBin Service in Docker Compose\nDESCRIPTION: YAML configuration for adding an HTTPBin service to a Docker Compose file. This sets up an HTTP request/response testing server.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-advanced-routes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttpbin:\n  image: kennethreitz/httpbin\n  networks:\n    main: {}\n  ports:\n    - 80:80\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pomerium Architecture Flow with Mermaid\nDESCRIPTION: A flowchart diagram showing how Pomerium handles user requests through authentication and authorization stages. The diagram illustrates the interaction between users, identity providers, Pomerium's proxy and policy components, and protected services.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph Internet\n        U((User))\n    end\n\n    subgraph Identity\n        IdP((Identity Provider))\n    end\n\n    subgraph Pomerium\n        Proxy(Pomerium Proxy)\n        Policy(Policy Engine)\n        Proxy --> Policy\n    end\n\n    subgraph Internal\n        S(Protected Service)\n    end\n\n    U -->|Request Access| Proxy\n    Proxy -->|Authenticate| IdP\n    IdP -->|Return Claims| Proxy\n    Policy -->|Allow or Deny| Proxy\n    Proxy -->|Forward Request| S\n```\n\n----------------------------------------\n\nTITLE: Postgres Connection String Format - Text\nDESCRIPTION: Provides the syntax and structure for constructing a Postgres connection string compatible with libpq and the Pomerium databroker backend. Lists parameter placeholders (userspec, hostspec, dbname, paramspec) and their breakdowns, highlighting how to specify user credentials, host(s), port, and additional parameters. This reference helps ensure correct connection string formatting when configuring persistent storage, and notes details such as multi-host setup requirements.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/data-storage.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npostgresql://[userspec@][hostspec][/dbname][?paramspec]\\n\\nwhere userspec is:\\n\\nuser[:password]\\n\\nand hostspec is:\\n\\n[host][:port][,...]\\n\\nand paramspec is:\\n\\nname=value[&...]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization ID via cURL\nDESCRIPTION: This cURL command sends a GET request to the `/organizations` endpoint of the Pomerium Zero API. It requires an `Authorization` header with the Bearer ID token obtained previously to fetch the user's organization details, including the organization ID.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-zero.md#2025-04-23_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://console.pomerium.app/api/v0/organizations' \\\n--header 'Authorization: Bearer <ID-TOKEN>'\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Name in Pomerium Kubernetes Configuration\nDESCRIPTION: This YAML snippet illustrates how to configure the session cookie name for Pomerium deployed in Kubernetes. The `cookie.name` parameter is set within the main configuration structure. The default value is `_pomerium`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncookie:\\n  name: cookie_name\n```\n\n----------------------------------------\n\nTITLE: Deploying Pomerium with Traefik and Nginx in Kubernetes\nDESCRIPTION: This script performs a complete Kubernetes deployment of Pomerium identity-aware proxy with Traefik as the ingress controller. It creates necessary TLS secrets, installs required Helm charts with custom values, applies middleware configuration, and deploys a demo Nginx application for testing.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/traefik-ingress/install.sh.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace pomerium\n\n# Create shared TLS secret\nkubectl create secret tls wildcard-tls \\\n    --namespace pomerium \\\n    --cert=_wildcard.localhost.pomerium.io.pem \\\n    --key=_wildcard.localhost.pomerium.io-key.pem\n\n# Install Traefik helm chart\nhelm upgrade --install --wait \\\n    --namespace pomerium \\\n    traefik traefik/traefik \\\n    --values values/traefik.yaml\n\n# Install Pomerium helm chart\nhelm upgrade --install --wait \\\n    --namespace pomerium \\\n    pomerium pomerium/pomerium \\\n    --values values/pomerium.yaml\n\n# Create middleware\nkubectl --namespace pomerium apply -f crds/middleware.yaml\n\n# Install hello app\nhelm upgrade --install --wait \\\n    --namespace pomerium \\\n    --version 6.2.1 \\\n    hello bitnami/nginx \\\n    --values values/hello.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream Client Certificate Authority in Pomerium (YAML)\nDESCRIPTION: This snippet configures a client CA for downstream client certificate validation in Pomerium, requiring connecting clients (such as browsers) to present valid certificates. The settings `tls_downstream_client_ca` and `tls_downstream_client_ca_file` can be specified to require validation against the provided CA. This is optional and overrides any global downstream mTLS CA for the route. Deprecated and should be replaced by policy-based controls in future releases.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/tls.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntls_downstream_client_ca: base64-encoded-client-ca\\ntls_downstream_client_ca_file: /relative/file/location\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple SAN Match Conditions with Pomerium YAML - YAML\nDESCRIPTION: Shows a Pomerium Core YAML configuration where client certificates must have either a DNS SAN containing 'beyondcorp' or an email SAN ending with '@example.com'. Each regular expression is mapped to its SAN type within the `match_subject_alt_names` field. Useful for organizations requiring flexible conditional client authentication. Place under `downstream_mtls` section; at least one of the specified conditions must be satisfied.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndownstream_mtls:\\n  match_subject_alt_names:\\n    - dns: '.*beyondcorp.*'\\n    - email: '.*@example\\\\.com'\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration with Pomerium and Grafana\nDESCRIPTION: Full Docker Compose configuration showing the complete setup including Pomerium, verification service, and Grafana. Includes network configuration, volume definitions, and environment variables.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-build-routes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    ports:\n      - 443:443\n    restart: always\n    environment:\n      POMERIUM_ZERO_TOKEN: <YOUR_CLUSTER_TOKEN>\n      XDG_CACHE_HOME: /var/cache\n    volumes:\n      - pomerium-cache:/var/cache\n    networks:\n      main:\n        aliases:\n          - verify.<YOUR_CLUSTER_SUBDOMAIN>.pomerium.app\n  verify:\n    image: pomerium/verify:latest\n    networks:\n      main:\n        aliases:\n          - verify\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - 3000:3000\n    networks:\n      main: {}\n    volumes:\n      - ./grafana-storage:/var/lib/grafana\n\nnetworks:\n  main: {}\n\nvolumes:\n  pomerium-cache:\n```\n\n----------------------------------------\n\nTITLE: Running Pomerium with Docker\nDESCRIPTION: Docker command to run Pomerium container with a mounted configuration file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/core.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull pomerium/pomerium:latest\ndocker run --rm -it \\\n  -p 8443:443 \\\n  -v $(pwd)/config.yaml:/pomerium/config.yaml \\\n  pomerium/pomerium:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Idle Timeout in Pomerium Kubernetes Deployment (YAML)\nDESCRIPTION: This YAML manifest example is for configuring the idle timeout in Pomerium on Kubernetes. The 'timeouts.idle' field accepts a Go Duration string (e.g., '5m'), shutting down inactive connections after the set period.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/global-timeouts.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntimeouts:\n  idle: 5m\n\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Route with Redis Example\nDESCRIPTION: YAML configuration example for setting up a TCP route to Redis with policy-based access control.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: tcp+https://redis.corp.example.com:6379\n    to: tcp://redis.internal.example.com:6379\n    policy:\n      - allow:\n          or:\n            - email:\n                is: contractor@notexample.com\n            - claim/groups: 'datascience@example.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium for Self-Hosted GitLab via Environment Variables\nDESCRIPTION: This Bash snippet configures Pomerium for a self-hosted GitLab instance using environment variables and the generic OIDC provider type. It sets `IDP_PROVIDER` to \"oidc\", and defines `IDP_CLIENT_ID`, `IDP_CLIENT_SECRET`, `IDP_SCOPES`, and `IDP_PROVIDER_URL` for the GitLab credentials, scopes, and instance URL. Ensure these variables are set with the correct values in the Pomerium environment, replacing placeholders.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/gitlab.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nIDP_PROVIDER=\"oidc\"\nIDP_CLIENT_ID=\"REDACTED\"\nIDP_CLIENT_SECRET=\"REDACTED\"\nIDP_SCOPES=\"openid,profile,email\"\nIDP_PROVIDER_URL=\"https://gitlab.example.com\" # Base URL of GitLab instance\n```\n\n----------------------------------------\n\nTITLE: Logging Specific HTTP Headers in Pomerium Core Authorize Logs (Env Var)\nDESCRIPTION: This Bash command demonstrates setting the `AUTHORIZE_LOG_FIELDS` environment variable for Pomerium Core to log specific HTTP headers. It uses a comma-separated list with the `headers.{HeaderName}` format to include only the `Cookie` and `Content-Type` headers in the authorize service logs.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nAUTHORIZE_LOG_FIELDS=headers.cookie,headers.content-type\n```\n\n----------------------------------------\n\nTITLE: Global Pomerium Configuration for Gateway API\nDESCRIPTION: Minimal global Pomerium configuration required for Gateway API implementation.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/gateway-api.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ingress.pomerium.io/v1\nkind: Pomerium\nmetadata:\n  name: global\nspec:\n  secrets: pomerium/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Configuring OneLogin Provider in Pomerium via YAML - YAML\nDESCRIPTION: This YAML snippet shows how to configure Pomerium to use OneLogin as an identity provider by specifying the provider type, issuer URL, client ID, and client secret in a configuration file. Dependencies include an active OneLogin OIDC application and Pomerium instance. The `idp_client_id` and `idp_client_secret` values must be replaced with actual credentials from OneLogin. Inputs are YAML key-value pairs, and upon applying the configuration and reloading Pomerium, users can authenticate against OneLogin. Sensitive credentials should be kept secure and not committed to source control.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/one-login.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: 'onelogin'\nidp_provider_url: 'https://awesomecompany.onelogin.com/oidc/2'\nidp_client_id: 'REDACTED' # Your OneLogin application ID\nidp_client_secret: 'REDACTED' # Your OneLogin application secret\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Cookie Secret using Shell\nDESCRIPTION: This shell command generates a cryptographically secure, 32-byte random key and encodes it in base64. This key can be used as the value for the `cookie_secret` configuration option in Pomerium Core.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhead -c32 /dev/urandom | base64\n```\n\n----------------------------------------\n\nTITLE: Proxying Redis via Pomerium CLI - Shell\nDESCRIPTION: This command proxies local TCP connections to a Redis instance securely through Pomerium using the CLI. The '--listen localhost:6379' option binds the local end, while the remote Redis address should be substituted with the correct cluster subdomain. This is necessary for interacting with the Redis service over Pomerium without direct network exposure.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-tcp-routes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pomerium-cli tcp redis.<CLUSTER_SUBDOMAIN>.pomerium.app:6379 --listen localhost:6379\n```\n\n----------------------------------------\n\nTITLE: Rewrite Host Header to Fixed Value - YAML\nDESCRIPTION: This example sets the Host header on all matching requests to a fixed string using the 'host_rewrite' field. The configuration is used within Pomerium or as an ingress annotation in Kubernetes. It requires only Pomerium to be effective. The input is the original request; the output is a request with the Host header set to 'example.com'. Useful for directing traffic to a specific virtual host.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhost_rewrite: 'example.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring Read Timeout in Pomerium (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to set the read timeout for HTTP requests in Pomerium's Core configuration. The key 'timeout_read' is set to a Go Duration string, like '30s', to specify the maximum request duration. Input is a duration value, and setting it to '0' disables the timeout (not recommended for production).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/global-timeouts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntimeout_read: 30s\n\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Server with Pomerium JWT Verification\nDESCRIPTION: Creates an Express.js server with multiple endpoints for demonstrating Pomerium JWT verification scenarios. The server imports the PomeriumVerifier from the Pomerium JS SDK and sets up routes for trust-on-first-use verification, audience validation, issuer validation, and expiration checking.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/js-sdk/express-server.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst { PomeriumVerifier } = require('@pomerium/js-sdk');\nconst app = express();\n\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'; //just for dev\n\napp.get(\"/tofu\", (request, response) => {\n  const jwtVerifier = new PomeriumVerifier({});\n  jwtVerifier.verifyJwt(request.get('X-Pomerium-Jwt-Assertion')).then(r => response.send(r))\n});\n\napp.get(\"/wrong-audience\", (request, response) => {\n  const jwtVerifier = new PomeriumVerifier({\n    audience: [\n      'correct-audience.com'\n    ],\n    expirationBuffer: 1000\n  });\n  jwtVerifier.verifyJwt(request.get('X-Pomerium-Jwt-Assertion'))\n    .then(r => response.send(r))\n    .catch(e => response.send(e.message));\n});\n\napp.get(\"/wrong-issuer\", (request, response) => {\n  const jwtVerifier = new PomeriumVerifier({\n    issuer: 'correct-issuer.com',\n    expirationBuffer: 1000\n  });\n  jwtVerifier.verifyJwt(request.get('X-Pomerium-Jwt-Assertion'))\n    .then(r => response.send(r))\n    .catch(e => response.send(e.message));\n});\n\napp.get(\"/expired\", (request, response) => {\n  const jwtVerifier = new PomeriumVerifier({\n    expirationBuffer: -10000\n  });\n  jwtVerifier.verifyJwt(request.get('X-Pomerium-Jwt-Assertion'))\n    .then(r => response.send(r))\n    .catch(e => response.send(e.message));\n});\n\napp.listen(3010, () => {\n  console.log(\"Listen on the port 3010...\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Databroker Service URLs via Configuration File - YAML\nDESCRIPTION: Configure a list of databroker endpoints using 'databroker_service_urls' in the Pomerium YAML configuration. This array enables specifying multiple backend databrokers for redundancy or load balancing. Used in split-service and advanced deployments; all-in-one mode defaults to localhost.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndatabroker_service_urls:\n  - http://databroker.corp.example1.com\n  - https://databroker.corp.example2.com\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Policy Creation\nDESCRIPTION: This JSON snippet displays the response received after successfully creating a policy via the API. It confirms the policy details, including its generated `id`, `name`, `namespaceId`, `ppl` rules, and other metadata. The empty `routes` array (highlighted) indicates it's not yet assigned to any route.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-zero.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"createdAt\": \"2024-05-30T17:04:33.460441Z\",\n  \"description\": \"Only allow users with a matching email address.\",\n  \"enforced\": false,\n  \"enforcedRoutes\": [],\n  \"explanation\": \"You don't have the correct email address to access this service.\",\n  \"id\": \"bgrXNgrJFJmMZvPsVsbZHGWxVWP\",\n  \"name\": \"Allow matching email\",\n  \"namespaceId\": \"bwjkRZwxbNXBQHHcJHphGSNBbxt\",\n  \"ppl\": {\n    \"allow\": {\n      \"and\": [\n        {\n          \"email\": {\n            \"is\": \"user@example.com\"\n          }\n        }\n      ]\n    }\n  },\n  \"remediation\": \"Use account credentials that match policy requirements.\",\n  \"routes\": [],\n  \"updatedAt\": \"2024-05-30T17:04:33.460441Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Domain via Environment Variable for Pomerium Core\nDESCRIPTION: This Bash snippet demonstrates how to set the session cookie's domain scope using the `COOKIE_DOMAIN` environment variable for Pomerium Core. This is an alternative to the `cookie_domain` YAML configuration key.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCOOKIE_DOMAIN=localhost.pomerium.io\n```\n\n----------------------------------------\n\nTITLE: Rewriting Host Header Using Another Request Header - YAML\nDESCRIPTION: This YAML snippet configures Pomerium to rewrite the Host header using the value of another incoming HTTP request header. The 'host_rewrite_header' field accepts the name of the header whose value should be used. No additional dependencies are required beyond Pomerium. The input is the original request with a custom header; the output is a rewritten Host header matching the custom header's value. The new value will only be applied if the referenced header exists, otherwise, the default behavior applies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhost_rewrite_header: X-My-Host\n```\n\n----------------------------------------\n\nTITLE: Configuring Idle Timeout in Pomerium (Bash Environment Variable)\nDESCRIPTION: This Bash snippet defines the idle connection timeout using the TIMEOUT_IDLE environment variable in Pomerium. The value must be a Go Duration string, such as '5m', indicating the maximum idle duration before termination.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/global-timeouts.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nTIMEOUT_IDLE=5m\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Wildcard Certificate in Pomerium using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Pomerium with a single certificate and private key file that covers multiple domains or wildcard subdomains. Set 'certificate_file' and 'certificate_key_file' to relative file locations of the PEM-formatted certificate and key, respectively. This approach is suitable for environments where a single wildcard certificate is required.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/certificates.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Relative file location for a single cert\\ncertificate_file: '$HOME/.acme.sh/*.example.com/fullchain.crt'\\ncertificate_key_file: '$HOME/.acme.sh/*.example.com/*.example.com.key'\n```\n\n----------------------------------------\n\nTITLE: Configuring ID Token and Claims Logging in Pomerium Authorize Logs (YAML)\nDESCRIPTION: This YAML snippet configures Pomerium's `authorize_log_fields` to include the user's `id-token` and `id-token-claims`. Enabling these options will output the raw ID token string and its decoded claims directly into the authorize service logs, which may contain sensitive information. Use with caution.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nauthorize_log_fields:\n  - id-token\n  - id-token-claims\n```\n\n----------------------------------------\n\nTITLE: Logging All HTTP Headers in Pomerium Core Authorize Logs (YAML)\nDESCRIPTION: This YAML snippet configures the `authorize_log_fields` setting in Pomerium Core to include the `headers` field. This instructs the authorize service to log the complete set of HTTP request headers for each incoming request.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# List all HTTP headers\nauthorize_log_fields:\n  - headers\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Service Ingress\nDESCRIPTION: Kubernetes Ingress manifest for the Verify service with Pomerium-specific annotations for identity headers and domain restrictions\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/quickstart.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: verify\n  annotations:\n    ingress.pomerium.io/allowed_domains: |\n      - example.com\n    ingress.pomerium.io/pass_identity_headers: 'true'\nspec:\n  ingressClassName: pomerium\n  rules:\n    - host: 'verify.localhost.pomerium.io'\n      http:\n        paths:\n          - pathType: Prefix\n            path: /\n            backend:\n              service:\n                name: verify\n                port:\n                  number: 8000\n```\n\n----------------------------------------\n\nTITLE: Generating Shared Secret Key Using Shell - Shell\nDESCRIPTION: This snippet demonstrates how to generate a 256-bit (32-byte) random value and encode it in base64 format for use as a shared secret. It requires Unix utilities (head, urandom, base64) and should be run from a command-line shell. The output provides a secure random string that can be copied into Pomerium's configuration; no input is required, and the output is a base64-encoded string.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/shared-secret.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhead -c32 /dev/urandom | base64\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium UDP Route\nDESCRIPTION: YAML configuration for setting up a UDP route on port 8888 with authentication requirements.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ethr.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- routes:\n    from: udp+https://ethr.corp.example.com:8888\n    to: udp://127.0.0.1:8888\n    allow_any_authenticated_user: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Core TCP Route for SSH\nDESCRIPTION: YAML configuration example for setting up a basic TCP route for SSH access in Pomerium Core.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- from: tcp+https://ssh.localhost.pomerium.io:22\n  to: tcp://127.0.0.1:22\n  policy:\n    - allow:\n        or:\n          - email:\n              is: user@yourcompany.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Upstream Timeout in Pomerium (YAML)\nDESCRIPTION: This YAML example configures the default upstream timeout for proxied routes in Pomerium's Core setup. The 'default_upstream_timeout' sets the timeout for upstream connections unless overridden by policy. The value is a Go Duration (e.g., '30s').\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/global-timeouts.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_upstream_timeout: 30s\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Public Access on a Kubernetes Ingress via Annotation (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to enable public, unauthenticated access for a Kubernetes ingress using the Pomerium-specific ingress.pomerium.io/allow_public_unauthenticated_access annotation. It accepts boolean or string (\\\"true\\\") values. The key should be set on the relevant Kubernetes resource, and requires both Pomerium Kubernetes integration and write access to resource annotations. Inputs are standard Kubernetes YAML deployment objects.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/public-access.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/allow_public_unauthenticated_access: 'true'\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Claim Headers in Pomerium Kubernetes (YAML)\nDESCRIPTION: Example YAML configuration for the `jwtClaimHeaders` parameter within a Kubernetes deployment of Pomerium. This maps the 'email' claim to the 'X-Email' header and the 'user' claim to the 'X-Username' header. This parameter is optional and expects a map of strings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/jwt-claim-headers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njwtClaimHeaders:\n  X-Email: email\n  X-Username: user\n```\n\n----------------------------------------\n\nTITLE: Defining Pomerium Policy Rules in YAML Template\nDESCRIPTION: This YAML snippet defines a list of Pomerium policy rules within a template file (`policy.template.yaml`). The first rule routes requests from `hello.cloudrun.pomerium.io` to a destination specified by the `${HELLO_URL}` environment variable, restricts access to users with `gmail.com` domains, and enables Google Cloud Serverless Authentication. The second rule routes requests from `verify.cloudrun.pomerium.io` to `verify.pomerium.com`, passes identity headers, and also restricts access to `gmail.com` domains.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/cloudrun/policy.template.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=\"policy.template.yaml\"\n- from: https://hello.cloudrun.pomerium.io\n  to: ${HELLO_URL}\n  allowed_domains:\n    - gmail.com\n  enable_google_cloud_serverless_authentication: true\n- from: https://verify.cloudrun.pomerium.io\n  to: https://verify.pomerium.com\n  pass_identity_headers: true\n  allowed_domains:\n    - gmail.com\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream mTLS CA Inline in Pomerium (YAML)\nDESCRIPTION: This snippet shows how to configure the downstream mTLS Certificate Authority (CA) bundle inline within the Pomerium YAML configuration file using the `ca` key under `downstream_mtls`. The value should be a base64-encoded string containing the PEM-encoded X.509 certificate bundle. This CA bundle is required for downstream mTLS and is used to verify client certificates.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndownstream_mtls:\n  ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk...\n```\n\n----------------------------------------\n\nTITLE: Setting Request Headers in Pomerium YAML Configuration\nDESCRIPTION: Demonstrates how to set static values for request headers in Pomerium configuration, including authentication headers and custom headers for downstream applications.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://verify.corp.example.com\n  to: https://verify.pomerium.com\n  policy:\n    - allow:\n        or:\n          - email:\n              is: user@example.com\n  set_request_headers:\n    Authorization: Basic cm9vdDpodW50ZXI0Mg==\n    X-Your-favorite-authenticating-Proxy: 'Pomerium'\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Expiration in Pomerium Core YAML Configuration\nDESCRIPTION: This YAML snippet configures the `cookie_expire` parameter in Pomerium Core using Go's Duration string format. This determines the lifetime of the session cookie, after which reauthentication is required. The default is `14h`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncookie_expire: 13h15m0.5s\n```\n\n----------------------------------------\n\nTITLE: Enabling Google Cloud Serverless Authentication via YAML Configuration - YAML\nDESCRIPTION: This snippet demonstrates how to enable Google Cloud Serverless Authentication directly within a Pomerium YAML configuration file. Setting 'enable_google_cloud_serverless_authentication' to 'true' activates this feature. This configuration is dependent on your server running in an environment with the relevant GCP service account available. This key expects a boolean input; default is false. Requires Pomerium to be restarted for changes to apply.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/enable-google-cloud-serverless-authentication.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_google_cloud_serverless_authentication: true\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticate Callback Path via Environment Variable (Bash)\nDESCRIPTION: This Bash snippet shows how to configure the authenticate callback path for Pomerium Core using the `AUTHENTICATE_CALLBACK_PATH` environment variable. This provides an alternative to file-based configuration, setting the endpoint where the identity provider redirects after authentication. The default path used if this variable is not set is `/oauth2/callback`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authenticate-callback-path.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTHENTICATE_CALLBACK_PATH=/custom/callback\n```\n\n----------------------------------------\n\nTITLE: Setting Pomerium Zero Token Environment Variable for Kubernetes using Bash\nDESCRIPTION: This Bash command exports the `POMERIUM_ZERO_TOKEN` environment variable, assigning it the value of the new cluster token (replace `<cluster_token>`). This step is typically performed before running subsequent Kubernetes commands, like `kubectl patch`, which will use this variable to update the cluster configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/clusters.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ export POMERIUM_ZERO_TOKEN=<cluster_token>\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Domain in Pomerium Kubernetes Configuration\nDESCRIPTION: This YAML snippet illustrates configuring the cookie domain scope for Pomerium in a Kubernetes environment using the `cookie.domain` parameter. Setting this explicitly scopes the cookie to the specified domain and its subdomains.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncookie:\\n  domain: localhost.pomerium.io\n```\n\n----------------------------------------\n\nTITLE: Preserve Host Header from Incoming Request - YAML\nDESCRIPTION: This snippet configures Pomerium to pass the incoming request's Host header upstream instead of using the default 'to' route value. The 'preserve_host_header' key is set to true. There are no additional dependencies beyond Pomerium. The input is any HTTP request; the output is a forwarded request with its original Host header intact. Use cases include maintaining original host context for upstream applications.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npreserve_host_header: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Databroker Storage Type in YAML\nDESCRIPTION: Sets the databroker storage backend type to 'postgres' using the `databroker_storage_type` key within a YAML configuration file. This setting determines where Pomerium persists its state. Using 'postgres' is required for multi-replica deployments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/databroker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndatabroker_storage_type: postgres\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Basic Authentication via Environment Variable\nDESCRIPTION: Sets the `METRICS_BASIC_AUTHENTICATION` environment variable to enable Basic HTTP Authentication for the Pomerium metrics endpoint. The value is a base64 encoded 'username:password' string (example shows 'x:y' encoded as 'eDp5'). This is an alternative configuration method for Pomerium Core.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/metrics.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# for username: x and password: y\nMETRICS_BASIC_AUTHENTICATION=eDp5\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Audiences for IdP Access Tokens in Pomerium Core (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the `idp_access_token_allowed_audiences` setting in the Pomerium Core configuration file. It defines a list of acceptable audience URIs. When this setting is configured, Pomerium validates that the `aud` claim in the incoming IdP access token JWT matches one of the specified URIs. The corresponding environment variable is `IDP_ACCESS_TOKEN_ALLOWED_AUDIENCES`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/idp-access-token-allowed-audiences.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidp_access_token_allowed_audiences:\n  - https://sts.windows.net/f42bce3b-671c-4162-b24c-00ecc7641897/\n  - https://login.microsoftonline.com/f42bce3b-671c-4162-b24c-00ecc7641897/\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Flags via YAML - Pomerium - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure runtime flags in a Pomerium Core config file. It sets the 'match_any_incoming_port' flag to false, overriding its default behavior. Requires the Pomerium application and access to its configuration file. The snippet expects a map under the 'runtime_flags' key, with string keys and boolean values. Inputs are YAML-formatted; no outputs are generated directly by this configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/runtime-flags.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nruntime_flags:\\n  match_any_incoming_port: false\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Docker Service\nDESCRIPTION: Docker Compose configuration for setting up a GitLab service container.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n---\ngitlab:\n  container_name: gitlab\n  image: gitlab/gitlab-ee:latest\n  environment:\n    GITLAB_OMNIBUS_CONFIG: |\n      external_url 'https://gitlab.pomerium.localhost.io'\n      letsencrypt['enable'] = false\n      nginx['listen_port'] = 80\n      nginx['listen_https'] = false\n  volumes:\n    - '/srv/gitlab/config:/etc/gitlab'\n    - '/srv/gitlab/logs:/var/log/gitlab'\n    - '/srv/gitlab/data:/var/opt/gitlab'\n  expose:\n    - 80\n    - 443\n    - 22\n  restart: always\n  shm_size: '256m'\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Pomerium and GitLab (YAML)\nDESCRIPTION: This YAML snippet configures Docker Compose services for both Pomerium and GitLab, specifying volume mounts for configuration and certificate files. It defines the internal CA mount and GitLab SSL file paths, along with essential container environment variables for GitLab's Nginx HTTPS setup. Prerequisites include valid certificates in expected paths and docker-compose installed. Inputs are the provided volumes, environment settings, and service images; output is a functioning Docker Compose environment with mutual TLS between GitLab and Pomerium. Adjustments may be needed for different local volume paths or certificate authorities.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\n...\n\n  pomerium:\n    image: pomerium/pomerium:latest\n    container_name: pomerium\n    volumes:\n      - ./srv/pomerium/config.yaml:/pomerium/config.yaml:ro\n      - ~/.local/share/mkcert:/pomerium/ssl:ro # Adjust to the location of your internal certificate authority.\n    ports:\n      - 443:443\n      - 80:80\n...\n\ngitlab:\n  container_name: gitlab\n  image: gitlab/gitlab-ee:latest\n  environment:\n    GITLAB_OMNIBUS_CONFIG: |\n    external_url 'https://gitlab.pomerium.localhost.io'\n    letsencrypt['enable'] = false\n    nginx['listen_port'] = 443\n    nginx['listen_https'] = true\n    nginx['ssl_certificate'] = \"/etc/gitlab/ssl/gitlab.localhost.pomerium.io.pem\"\n    nginx['ssl_certificate_key'] = \"/etc/gitlab/ssl/gitlab.localhost.pomerium.io-key.pem\"\n  volumes:\n    - '/srv/gitlab/config:/etc/gitlab'\n    - '/srv/gitlab/logs:/var/log/gitlab'\n    - '/srv/gitlab/data:/var/opt/gitlab'\n  expose:\n    - 80\n    - 443\n    - 22\n  restart: always\n  shm_size: '256m'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Health Checks in Pomerium - YAML\nDESCRIPTION: This YAML configuration snippet sets up HTTP-based health checks for defined application routes in Pomerium. The 'health_checks' array accepts objects specifying thresholds, intervals, and required parameters for HTTP health evaluation, such as 'timeout', 'interval', 'healthy_threshold', 'unhealthy_threshold', and the path to be checked. This ensures only healthy upstreams are selected for traffic. The example assumes a running Pomerium environment with multiple backends and is intended to minimize downtime by proactive removal of failing servers. Each parameter controls the aggressiveness and intervals of health probes. Must be used as part of a complete Pomerium route definition.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/load-balancing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\\nroutes:\\n  - from: https://myapp.localhost.pomerium.io\\n    to:\\n      - http://myapp-srv-1:8080\\n      - http://myapp-srv-2:8080\\n    health_checks:\\n      - timeout: 10s\\n        interval: 60s\\n        healthy_threshold: 1\\n        unhealthy_threshold: 2\\n        http_health_check:\\n          path: '/'\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Authorize Log Fields in Pomerium Kubernetes (YAML)\nDESCRIPTION: This YAML snippet illustrates how to configure the authorize log fields within a Pomerium Kubernetes deployment. It uses the `authorizeLogFields` parameter (note the camelCase) to specify that the `request-id`, `path`, and `ip` fields should be included in the authorize service logs.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nauthorizeLogFields:\n  - request-id\n  - path\n  - ip\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Upstream Timeout in Pomerium (Bash Environment Variable)\nDESCRIPTION: This Bash snippet sets the default upstream timeout via the DEFAULT_UPSTREAM_TIMEOUT environment variable in Pomerium. The value must be a Go Duration string (e.g., '1h45m'), which applies globally unless overridden by route policies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/global-timeouts.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nDEFAULT_UPSTREAM_TIMEOUT=1h45m\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus URL in Pomerium Enterprise\nDESCRIPTION: YAML configuration to specify the Prometheus URL for Pomerium Enterprise.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure-metrics.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus_url: http://192.168.122.50:9090\n```\n\n----------------------------------------\n\nTITLE: Envoy JWT Authentication Configuration\nDESCRIPTION: YAML configuration for setting up JWT authentication in Envoy proxy as a sidecar validator.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/getting-users-identity.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n  - name: envoy.filters.http.jwt_authn\n    typed_config:\n      '@type': type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication\n      providers:\n        pomerium:\n          issuer: myapp.localhost.pomerium.io\n          audiences:\n            - myapp.localhost.pomerium.io\n          from_headers:\n            - name: X-Pomerium-Jwt-Assertion\n          remote_jwks:\n            http_uri:\n              uri: https://myapp.localhost.pomerium.io/.well-known/pomerium/jwks.json\n              cluster: egress-authenticate\n              timeout: 1s\n      rules:\n        - match:\n            prefix: /\n          requires:\n            provider_name: pomerium\n```\n\n----------------------------------------\n\nTITLE: Updating Pomerium Zero with Helm in Kubernetes\nDESCRIPTION: This command updates Pomerium Zero using Helm in a Kubernetes environment. It specifies the namespace and version to upgrade to.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/cloud/install.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade pomerium-zero oci://docker.io/pomerium/pomerium-zero \\\n  --namespace pomerium-zero \\\n  --version 0.29.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Certificate (Base64) in Pomerium YAML\nDESCRIPTION: Sets the `metrics_certificate` and `metrics_certificate_key` keys in the Pomerium YAML configuration using base64 encoded PEM formatted certificate and private key strings, respectively. This secures the metrics endpoint with TLS. These are optional bootstrap configuration settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/metrics.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_certificate: base64-encoded-string\nmetrics_certificate_key: base64-encoded-string\n```\n\n----------------------------------------\n\nTITLE: Setting Pomerium Log Level via YAML Config File\nDESCRIPTION: Demonstrates how to set the global logging level to 'error' in the Pomerium configuration file using the `log_level` key. This setting dictates that only logs with severity 'error' or higher will be recorded. Other valid options include 'none', 'debug', 'info', and 'warn'.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/log-level.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nlog_level: error\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Downstream mTLS Verification in Pomerium - YAML\nDESCRIPTION: Configures Pomerium to require client certificates by specifying the CA file generated by mkcert. Add this block to your config.yaml to enable downstream mutual TLS. Input: absolute path to the mkcert CA root file. All client requests must now present a valid, trusted certificate.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/certificates-and-tls.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndownstream_mtls:\n  ca_file: '/YOUR/MKCERT/CAROOT/rootCA.pem'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Pomerium and Go Services\nDESCRIPTION: This Docker Compose configuration sets up Pomerium, a Go application, and a Go API service. It defines volumes for certificates, configuration files, and application code.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:main\n    ports:\n      - 443:443\n    volumes:\n      - ./_wildcard.localhost.pomerium.io.pem:/pomerium/cert.pem:ro\n      - ./_wildcard.localhost.pomerium.io-key.pem:/pomerium/private-key.pem:ro\n      - ./config.yaml:/pomerium/config.yaml:ro\n\n  app:\n    image: golang:latest\n    command: ['go', 'run', '.']\n    environment:\n      GO111MODULE: 'off'\n    volumes:\n      - ./app.go:/go/app.go:ro\n      - ./index.html:/go/index.html:ro\n      - ./index.mjs:/go/index.mjs:ro\n\n  api:\n    image: golang:latest\n    command: ['go', 'run', '.']\n    environment:\n      GO111MODULE: 'off'\n    volumes:\n      - ./api.go:/go/api.go:ro\n```\n\n----------------------------------------\n\nTITLE: Default Pomerium Request Parameters for Azure IdP\nDESCRIPTION: Shows the default request parameter `prompt: select_account` automatically included by Pomerium when using Azure as the identity provider. Setting `idp_request_params` will replace this default parameter.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprompt: select_account\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Service Mode Using YAML\nDESCRIPTION: This snippet demonstrates how to configure which Pomerium service(s) to run by setting the 'services' key in a YAML configuration file. This method is suitable for cases where configuration is managed via file-based settings. The key accepts values such as 'all', 'authenticate', 'authorize', 'proxy', or 'databroker', with 'all' as the default. This approach is used when deploying Pomerium manually or in environments where the configuration file is preferred.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-mode.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices: authorize\n\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Expiration in Pomerium Kubernetes Configuration\nDESCRIPTION: This YAML snippet shows how to configure the session cookie expiration time for Pomerium in Kubernetes using the `cookie.expire` parameter. The value uses Go's Duration string format. The default lifetime is `14h`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ncookie:\\n  expire: 13h15m0.5s\n```\n\n----------------------------------------\n\nTITLE: Specifying Matching From Routes with Pomerium - YAML\nDESCRIPTION: These YAML snippets illustrate how to configure Pomerium's 'from' URLs to match requests on any port (by omitting the port in the URL). The purpose is to demonstrate port matching flexibility, showing that if no port is specified in the 'from' URL, requests to the hostname will match regardless of port. No explicit dependencies aside from Pomerium itself, and used in route definitions. Inputs are external request URLs, outputs are routing matches; 'from' supports only secure schemes. The method is limited to matching any port when the port isn't set.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/from.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfrom: https://www.example.com\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://www.example.com\n\nhttps://www.example.com:443\n\nhttps://www.example.com:8443\n\nhttps://www.example.com:3000\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Policy Based on Group Claim - YAML\nDESCRIPTION: This YAML snippet defines a Pomerium route with a policy that allows access only to users who are members of a group identified by a specific Group ID, supplied in the user \\'groups\\' claim. It assumes Entra ID is configured to emit the \\'groups\\' claim in identity tokens and that the administrator knows the relevant Group ID value. The route \\'from\\' and \\'to\\' define proxy mapping, and the \\'policy\\' block enforces the group-based filter. Inputs: user JWT with \\'groups\\' claim. Output: Access permitted only to authorized group members. Requires proper claims mapping in Entra ID.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/azure.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: 'https://verify.localhost.pomerium.io'\n    to: 'https://verify.pomerium.com'\n    policy:\n      - allow:\n          and:\n            - claim/groups: 'e14f56fd-b956-4009-b06c-dc8a5e9207c8'\n```\n\n----------------------------------------\n\nTITLE: Generating and Renewing SSL Certificates with ACME.sh in Bash\nDESCRIPTION: This script uses ACME.sh to generate and renew an SSL certificate for a wildcard domain. It first issues a certificate signing request, then prompts the user to update DNS TXT records before renewing the certificate. The script uses DNS validation and generates an ECC certificate with a 256-bit key.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/sh/generate_wildcard_cert.sh.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# acme.sh : https://github.com/Neilpang/acme.sh\n#\t\t\tcurl https://get.acme.sh | sh\n# NOTA BENE:\n# if you use a DNS service that supports API access, you may be able to automate\n# this process. See https://github.com/Neilpang/acme.sh/wiki/dnsapi\n\necho \"=> first generate a certificate signing request!\"\n$HOME/.acme.sh/acme.sh \\\n\t--issue \\\n\t-k ec-256 \\\n\t-d '*.corp.example.com' \\\n\t--dns \\\n\t--yes-I-know-dns-manual-mode-enough-go-ahead-please\n\nread -p \"press any key once you've updated your TXT entries\"\n\n$HOME/.acme.sh/acme.sh \\\n\t--renew \\\n\t--ecc \\\n\t-k ec-256 \\\n\t-d '*.corp.example.com' \\\n\t--dns \\\n\t--yes-I-know-dns-manual-mode-enough-go-ahead-please\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Expiration via Environment Variable for Pomerium Core\nDESCRIPTION: This Bash snippet demonstrates setting the Pomerium session cookie lifetime using the `COOKIE_EXPIRE` environment variable. The value must be in Go's Duration string format (e.g., '2h45m'). The default is `14h`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nCOOKIE_EXPIRE=13h15m0.5s\n```\n\n----------------------------------------\n\nTITLE: Disabling gRPC Transport Security via YAML - Pomerium - YAML\nDESCRIPTION: This code snippet sets 'grpc_insecure' to false in the YAML configuration, thereby enabling TLS for internal gRPC connections if supported. Setting it to 'true' disables encryption, which may be useful for trusted internal environments. Input is a YAML config with a boolean value for 'grpc_insecure', output is the Pomerium process establishing gRPC connections accordingly. For security best practices, leave this false unless absolutely required.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/grpc.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngrpc_insecure: false\n\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Route Examples for HTTP, TCP, and UDP - YAML\nDESCRIPTION: This YAML block provides configuration examples for Pomerium supporting HTTP, TCP, and UDP proxying. It demonstrates how to define separate routes for standard HTTPS, as well as TCP and UDP schemes, using the 'from' and 'to' fields. These examples require Pomerium version 0.29+ for UDP proxying, and each route defines an externally accessible address mapped to an internal resource. Key parameters include schemes, hostnames, and ports. Constraints: Only secure (https, tcp+https, udp+https) schemes are accepted.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/from.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://verify.corp.example.com\n    to: https://example.com\n  # TCP\n  - from: tcp+https://ssh.corp.example.com:22\n    to: tcp://ssh.local:22\n  # UDP\n  - from: udp+https://time.corp.example.com:13\n    to: udp://time.local:13\n```\n\n----------------------------------------\n\nTITLE: Configuring Databroker Storage Type via Environment Variable\nDESCRIPTION: Sets the databroker storage backend type to 'postgres' using the `DATABROKER_STORAGE_TYPE` environment variable. This is an alternative method to YAML configuration, often used in containerized environments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/databroker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nDATABROKER_STORAGE_TYPE=postgres\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes RBAC Role and RoleBinding for User Access\nDESCRIPTION: This YAML defines a Role that grants permissions to list, get, and watch pods, along with a RoleBinding that associates this role with a specific user authenticated via Pomerium. This enables fine-grained access control for Pomerium-authenticated users.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/kubernetes-access.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: example-role\nrules:\n  - apiGroups:\n      - ''\n    resources:\n      - pods\n    verbs:\n      - get\n      - list\n      - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: example-role-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: example-role\nsubjects:\n  - kind: User\n    name: foo@example.com\n```\n\n----------------------------------------\n\nTITLE: Preserving Host Header in Pomerium\nDESCRIPTION: Configuration to maintain the original host header in requests to upstream services. This is useful when the upstream service needs to know the original hostname used by the client.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://httpbin.localhost.pomerium.io\n    to: https://httpbin:80\n    set_response_headers:\n      X-SET-RESPONSE-HEADERS: X-VALUE\n    set_request_headers:\n      X-SET-REQUEST-HEADERS: X-VALUE\n    remove_request_headers:\n      - X-Pomerium-Claim-User\n      - X-Pomerium-Claim-Name\n    preserve_host_header: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Write Timeout in Pomerium (Bash Environment Variable)\nDESCRIPTION: This Bash code demonstrates the use of the TIMEOUT_WRITE environment variable to set the write timeout in seconds for Pomerium. Assigning '0' disables the timeout, which is generally discouraged in production environments. The value must be a Go Duration string.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/global-timeouts.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nTIMEOUT_WRITE=0\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium with Explicit Hosted Authenticate URL\nDESCRIPTION: This YAML configuration explicitly includes the hosted authenticate service URL along with a route definition. This setup is optional as the hosted URL is used by default when not specified.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/authentication.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.pomerium.app\n\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    policy:\n      - allow:\n          or:\n            - email:\n                is: user@example.com\n    pass_identity_headers: true\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Signing Keys with OpenSSL\nDESCRIPTION: Command line instructions to generate the public/private key pair needed for JWT signing in Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/jwt-verification.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl ecparam -genkey -name prime256v1 -noout -out ec_private.pem\nopenssl ec -in ec_private.pem -pubout -out ec_public.pem\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Remove Request Headers Annotation - YAML\nDESCRIPTION: This Kubernetes annotation configures Pomerium's ingress controller to remove listed request headers from proxied traffic. The YAML block lists the headers to be removed. Used as metadata on ingress resources; only the named headers are stripped. Proper formatting is required for YAML list values.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/remove_request_headers: |\n  - X-Email\n  - X-User\n```\n\n----------------------------------------\n\nTITLE: Enabling SPDY Proxying via Kubernetes Ingress Annotation (YAML)\nDESCRIPTION: Configures the `ingress.pomerium.io/allow_spdy` annotation on a Kubernetes Ingress resource to enable SPDY protocol upgrade proxying for the associated route. The value is specified as the string representation of the boolean `true`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/timeouts.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/allow_spdy: 'true'\n```\n\n----------------------------------------\n\nTITLE: Host Header Regex Rewrite Configuration\nDESCRIPTION: Example configuration for rewriting host headers using regex patterns.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhost_path_regex_rewrite_pattern: '^/(.+)/.+$'\nhost_path_regex_rewrite_substitution: \\1\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Audiences for IdP Access Tokens in Pomerium Kubernetes (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the allowed audiences for IdP access tokens within a Kubernetes deployment of Pomerium. It uses the `idpAccessTokenAllowedAudiences` key (camelCase) within the Pomerium configuration (likely a ConfigMap or Custom Resource). Similar to the Core configuration, this defines a list of acceptable audience URIs used to validate the `aud` claim of incoming IdP access tokens.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/idp-access-token-allowed-audiences.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nidpAccessTokenAllowedAudiences:\n  - https://sts.windows.net/f42bce3b-671c-4162-b24c-00ecc7641897/\n  - https://login.microsoftonline.com/f42bce3b-671c-4162-b24c-00ecc7641897/\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Log Level via YAML Configuration in Pomerium\nDESCRIPTION: This YAML snippet demonstrates how to configure the Pomerium Proxy log level using the `proxy_log_level` key in the configuration file. Setting it to `error` will only log access events at the error level or higher. This configuration applies to Pomerium Core deployments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/proxy-log-level.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproxy_log_level: error\n\n```\n\n----------------------------------------\n\nTITLE: Enabling SPDY Proxying in Pomerium Core (YAML)\nDESCRIPTION: Sets the `allow_spdy` flag to `true` in the Pomerium configuration file (YAML). This configuration enables Pomerium to proxy SPDY protocol upgrades for the configured routes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/timeouts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow_spdy: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Sign-Out with Pomerium via JavaScript SDK - JavaScript\nDESCRIPTION: Defines a signOut function using JavaScript that constructs a sign-out URL by appending '/.pomerium/sign_out' to the current window.origin and optionally includes a 'pomerium_redirect_uri' query parameter if a redirectUrl is supplied. This function is intended to be called from client-side code to trigger session logout via the Pomerium proxy, which then handles session clearing and redirects as required for SSO. The input parameter is optional and determines post-logout navigation; output is a browser redirect to the constructed URL. No external dependencies are required except for access to window.location.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/authentication.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport const signOut = (redirectUrl) => {\\n  let location = window.location.origin + '/.pomerium/sign_out';\\n  if (redirectUrl) {\\n    location += '?pomerium_redirect_uri=' + encodeURIComponent(redirectUrl);\\n  }\\n  window.location.href = location;\\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie SameSite Attribute in Pomerium Core YAML\nDESCRIPTION: This YAML snippet sets the `cookie_same_site` attribute to `Lax` in the Pomerium Core configuration file. This attribute controls whether the cookie is sent with cross-site requests. Valid options are `Lax`, `Strict`, or `None`. The default if unset is `Lax`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncookie_same_site: Lax\n```\n\n----------------------------------------\n\nTITLE: Illustrating Trailing Slash Behavior (No Slash in `to`) in Pomerium (YAML)\nDESCRIPTION: Provides a YAML configuration example demonstrating the behavior of Pomerium routing when the `to` URL does *not* end with a trailing slash. In this case, requests to the `from` URL base path are forwarded to the `to` URL, and requests to subpaths under `from` have the subpath appended directly to the `to` URL.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/to.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://verify.corp.example.com\n  to: https://verify.pomerium.com/anything\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Serverless Authentication Service Account via Environment Variable (Bash)\nDESCRIPTION: Sets the required base64-encoded service account credentials for Google Cloud Serverless Authentication via a Bash environment variable. The variable name must be 'GOOGLE_CLOUD_SERVERLESS_AUTHENTICATION_SERVICE_ACCOUNT', and its value should be a base64-encoded string. This method is used as an alternative to YAML configuration, with similar constraints and applicability; the environment variable must be set before launching the relevant process.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/google-cloud-serverless-authentication-service-account.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLOUD_SERVERLESS_AUTHENTICATION_SERVICE_ACCOUNT=base64-encoded-service-account-credentials\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Client Certificate with mkcert - Bash\nDESCRIPTION: Creates a PKCS#12 client certificate file suitable for browser import or mTLS authentication, using mkcert. Replace yourUsername with the desired identifier. The output is a single .p12 file containing both certificate and key. Prerequisite: mkcert root CA must be available.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/certificates-and-tls.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkcert -client -pkcs12 \"yourUsername@localhost.pomerium.io\"\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookie HTTP Only Flag in Pomerium Kubernetes Config\nDESCRIPTION: This YAML snippet shows how to disable the HttpOnly flag for Pomerium cookies in a Kubernetes deployment by setting `cookie.httpOnly` to `false`. The default value is `true`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncookie:\\n  httpOnly: false\n```\n\n----------------------------------------\n\nTITLE: Enabling OCSP Must-Staple via Environment Variable (Bash)\nDESCRIPTION: Configures Autocert to request certificates with the OCSP Must-Staple extension (RFC7633) using the `AUTOCERT_MUST_STAPLE` environment variable set to `true`. This ensures connecting clients verify the presence and validity of OCSP stapling information. This setting is only active if `AUTOCERT` is also true and applies during certificate request/renewal.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nAUTOCERT_MUST_STAPLE=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway with TLS Certificate\nDESCRIPTION: Gateway configuration that defines HTTPS listener with TLS termination using a wildcard certificate.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/gateway-api.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: localhost-pomerium-io\nspec:\n  gatewayClassName: pomerium-gateway\n  listeners:\n    - name: https\n      hostname: '*.localhost.pomerium.io'\n      protocol: HTTPS\n      port: 443\n      tls:\n        mode: Terminate\n        certificateRefs:\n          - name: pomerium-wildcard-tls\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Route IdP Client ID in Pomerium Core YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to specify a unique `idp_client_id` for a specific route within the `routes` array in Pomerium Core. This allows overriding the globally configured Identity Provider Client ID for traffic matching this particular route definition.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/identity-provider-client-id-per-route.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    idp_client_id: idp_client_id\n```\n\n----------------------------------------\n\nTITLE: Updating Ingress Resource for Identity Header Passing\nDESCRIPTION: YAML configuration for updating the Kubernetes Ingress resource to include the 'pass_identity_headers' annotation, allowing identity headers to be passed to the backend service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/istio.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: hello\n  annotations:\n    kubernetes.io/ingress.class: pomerium\n    cert-manager.io/issuer: pomerium-issuer\n    ingress.pomerium.io/pass_identity_headers: 'true'\n    ingress.pomerium.io/policy: '[{\"allow\":{\"and\":[{\"domain\":{\"is\":\"example.com\"}}]}}]'\n```\n\n----------------------------------------\n\nTITLE: Loading Databroker Connection String from File via Environment Variable\nDESCRIPTION: Specifies a file path from which Pomerium should read the PostgreSQL connection string using the `DATABROKER_STORAGE_CONNECTION_STRING_FILE` environment variable. This allows loading connection strings from files (e.g., Docker secrets or Kubernetes secrets) when configuring via environment variables.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/databroker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nDATABROKER_STORAGE_CONNECTION_STRING_FILE=/run/secrets/db_connection_string\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Log Level via Environment Variable in Pomerium\nDESCRIPTION: This Bash snippet shows how to set the Pomerium Proxy log level using the `PROXY_LOG_LEVEL` environment variable. Setting it to `debug` enables the most verbose logging for access events. This configuration applies to Pomerium Core deployments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/proxy-log-level.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPROXY_LOG_LEVEL=debug\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Any Authenticated User in Pomerium Core (YAML) - YAML\nDESCRIPTION: Configures the Pomerium Core service to permit any authenticated user by setting the allow_any_authenticated_user field to true in YAML configuration. No external dependencies other than a deployed and properly configured Pomerium instance are required. The key parameter allow_any_authenticated_user is optional with a default of false; setting it to true disables centralized authorization enforcement and shifts responsibility to the upstream service. Input is a Pomerium configuration YAML file, and the resulting effect is policy relaxation for the specified route.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/allow-any-authenticated-user.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nallow_any_authenticated_user: 'true'\n```\n\n----------------------------------------\n\nTITLE: JWT Claims-Based Email Policy in PPL\nDESCRIPTION: A policy that grants access based on email addresses extracted from JWT claims. It uses the OR operator to allow access if the email claim matches any of the specified addresses.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-advanced-policies.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n  or:\n    - claim/email: name1@workspace.com\n    - claim/email: name2@workspace.com\n    - claim/email: name3@workspace.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Certificate Authority in Pomerium (YAML)\nDESCRIPTION: This snippet shows how to specify a custom certificate authority (CA) for upstream server verification in the Pomerium proxy. You can set either `tls_custom_ca` for inline CA data or `tls_custom_ca_file` for a file path. These settings override the system CA list for the specific route. The input is a PEM-encoded certificate or a path, and this is required when upstreams use non-standard or private CAs.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/tls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntls_custom_ca: base64-encoded-custom-ca\\ntls_custom_ca_file: /relative/file/location\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Secret File Path via Environment Variable\nDESCRIPTION: This Bash snippet demonstrates configuring the path to the cookie secret file using the `COOKIE_SECRET_FILE` environment variable for Pomerium Core. Pomerium will read the secret key from the file specified by this path.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nCOOKIE_SECRET_FILE='/run/secrets/POMERIUM_COOKIE_SECRET'\n```\n\n----------------------------------------\n\nTITLE: Enabling Let's Encrypt Staging Environment in YAML\nDESCRIPTION: Enables Let's Encrypt's staging environment for testing in YAML configuration. This helps avoid rate limits during development and testing of Pomerium's Autocert feature.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nautocert_use_staging: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Forward Authentication Middleware with Pomerium in Kubernetes\nDESCRIPTION: This YAML manifest defines a Traefik Middleware custom resource that configures forward authentication to a Pomerium proxy service. It specifies the Pomerium proxy address, enables TLS with certificate validation skipped, and enables trust for forwarded headers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/traefik-ingress/crds/middleware.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: auth\nspec:\n  forwardAuth:\n    address: https://pomerium-proxy.pomerium\n    tls:\n      insecureSkipVerify: true\n    trustForwardHeader: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium for GitLab.com via YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Pomerium to use GitLab.com as the identity provider. It sets the `idp_provider` to 'gitlab' and specifies placeholders for the GitLab Application ID (`idp_client_id`) and Secret (`idp_client_secret`) obtained during GitLab application setup. These values must be replaced with the actual credentials.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/gitlab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: 'gitlab'\nidp_client_id: 'REDACTED' # gitlab application ID\nidp_client_secret: 'REDACTED' # gitlab application secret\n```\n\n----------------------------------------\n\nTITLE: Deploying Pomerium and Sample App to Cloud Run (Shell Script)\nDESCRIPTION: Shell script for deploying Pomerium and a sample application to Google Cloud Run, including setting up necessary GCP resources and configurations.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/cloud-run.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\nset -euo pipefail\n\n# Create service account for Pomerium\ngcloud iam service-accounts create pomerium-invoker --display-name \"Pomerium Invoker\"\n\n# Get the full service account email\nSA_EMAIL=$(gcloud iam service-accounts list --filter=\"displayName:Pomerium Invoker\" --format='value(email)')\n\n# Deploy hello app\ngcloud run deploy hello \\\n  --image gcr.io/cloudrun/hello \\\n  --platform managed \\\n  --region us-central1 \\\n  --no-allow-unauthenticated\n\n# Get URL of hello app\nHELLO_URL=$(gcloud run services describe hello --platform managed --region us-central1 --format 'value(status.url)')\n\n# Grant invoke rights to Pomerium\ngcloud run services add-iam-policy-binding hello \\\n  --member=\"serviceAccount:${SA_EMAIL}\" \\\n  --role='roles/run.invoker' \\\n  --platform managed \\\n  --region us-central1\n\n# Create secrets\ngcloud secrets create pomerium-config --data-file=config.yaml\ngcloud secrets add-iam-policy-binding pomerium-config \\\n  --member=\"serviceAccount:${SA_EMAIL}\" \\\n  --role='roles/secretmanager.secretAccessor'\n\n# Deploy Pomerium\ngcloud run deploy pomerium \\\n  --image gcr.io/pomerium-io/pomerium:v0.15.0-cloudrun \\\n  --platform managed \\\n  --region us-central1 \\\n  --allow-unauthenticated \\\n  --set-env-vars=\"POLICY=$(cat policy.template.yaml | sed \"s|TO_BE_REPLACED|${HELLO_URL}|g\" | base64 -w 0)\" \\\n  --set-env-vars=VALS_FILES=ref+gcpsecrets://pomerium-config:/pomerium/config.yaml \\\n  --service-account \"${SA_EMAIL}\"\n\n# Map domains\ngcloud beta run domain-mappings create --service pomerium --domain authenticate.cloudrun.pomerium.io --region us-central1 --platform managed\ngcloud beta run domain-mappings create --service pomerium --domain hello.cloudrun.pomerium.io --region us-central1 --platform managed\ngcloud beta run domain-mappings create --service pomerium --domain verify.cloudrun.pomerium.io --region us-central1 --platform managed\ngcloud beta run domain-mappings create --service hello --domain hello-direct.cloudrun.pomerium.io --region us-central1 --platform managed\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium TLS Certificate with cert-manager in Kubernetes\nDESCRIPTION: Defines a Certificate resource that generates TLS certificates for Pomerium service endpoints. Configures server and client authentication for internal services and authentication endpoints using cert-manager.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/kubernetes/pomerium-certificates.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: pomerium-cert\n  namespace: pomerium\nspec:\n  secretName: pomerium-tls\n  issuerRef:\n    name: pomerium-issuer\n    kind: Issuer\n  usages:\n    - server auth\n    - client auth\n  dnsNames:\n    - pomerium-proxy.pomerium.svc.cluster.local\n    - pomerium-authorize.pomerium.svc.cluster.local\n    - pomerium-databroker.pomerium.svc.cluster.local\n    - pomerium-authenticate.pomerium.svc.cluster.local\n    - authenticate.localhost.pomerium.io\n    # TODO - If you're not using the Pomerium Ingress controller, you may want a wildcard entry as well.\n    #- \"*.localhost.pomerium.io\" # Quotes are required to escape the wildcard\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Client CA (File Path) for mTLS via Environment Variable\nDESCRIPTION: Sets the `METRICS_CLIENT_CA_FILE` environment variable to specify the file path for the PEM formatted client certificate authority (CA) certificate. This enables mutual TLS (mTLS) authentication for the Pomerium metrics endpoint, requiring connecting clients to provide a certificate signed by this CA. This is an alternative to using the `METRICS_CLIENT_CA` environment variable with base64 encoded data.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/metrics.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nMETRICS_CLIENT_CA_FILE=/relative/file/location\n```\n\n----------------------------------------\n\nTITLE: Running GeoIP Datasource as a Local Binary in Shell\nDESCRIPTION: This shell script demonstrates how to run the GeoIP datasource directly as a binary after downloading and extracting it. It changes into the extracted directory and executes the `pomerium-datasource` binary with the `ip2location` command and the path to the GeoIP database file (`../IP2LOCATION-LITE-DB1.CSV.ZIP`) as an argument. The service will listen on the default port 8080.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/geoip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd pomerium-datasource-*\\n./pomerium-datasource ip2location ../IP2LOCATION-LITE-DB1.CSV.ZIP\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie SameSite Attribute via Environment Variable\nDESCRIPTION: This Bash snippet demonstrates setting the SameSite attribute for Pomerium session cookies to `Strict` using the `COOKIE_SAME_SITE` environment variable. Other valid values are `Lax` and `None`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nCOOKIE_SAME_SITE=Strict\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Routes via HTTP CONNECT-UDP Proxy in Pomerium (YAML)\nDESCRIPTION: Shows how to configure a Pomerium UDP route (`from: udp+https://`, v0.29+) to proxy traffic through another proxy supporting HTTP CONNECT-UDP. The `to` URL uses `http://` or `https://`, causing Pomerium to send an HTTP CONNECT-UDP request to the specified upstream proxy.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/to.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- from: udp+https://udp.example.com:3001\n  to: https://second-proxy.udp.example.com:3002\n```\n\n----------------------------------------\n\nTITLE: Using Pomerium CLI for UDP Connections\nDESCRIPTION: Commands showing how to use Pomerium CLI to establish UDP connections for DNS queries.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli udp dns.example.com:53\n# listening on 127.0.0.1:52544\ndig @127.0.0.1 -p 52544 google.com\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Bucket for Autocert Storage in Pomerium (YAML)\nDESCRIPTION: Specifies a Google Cloud Storage (GCS) bucket URL for storing Autocert certificate data using the `autocert_dir` key in a Pomerium YAML configuration file. Pomerium uses Google Application Default Credentials for authentication. This setup is necessary for sharing certificate data across distributed Pomerium instances.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nautocert_dir: gs://your-bucket/some/prefix\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Certificate Authority File Path in YAML\nDESCRIPTION: Specifies a file path to a trusted certificate authority file in YAML configuration. Allows Pomerium to read the trusted CA from a file instead of a direct string.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nautocert_trusted_ca_file: /relative/file/location\n```\n\n----------------------------------------\n\nTITLE: Configuring Cert-Manager Issuer for Pomerium HTTP01 Challenges (YAML)\nDESCRIPTION: Defines a cert-manager `Issuer` resource named 'example-issuer'. It configures ACME settings for Let's Encrypt staging environment and specifies the secret for the account key. It includes an HTTP01 solver configured to use the 'pomerium' ingress class, enabling the Pomerium Ingress Controller to automatically handle ACME HTTP01 challenge requests for certificate issuance.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: example-issuer\nspec:\n  acme:\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: example-issuer-account-key\n    solvers:\n      - http01:\n          ingress:\n            class: pomerium\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Names for JWT Claims (YAML)\nDESCRIPTION: Demonstrates how to customize the names of the HTTP headers used to pass JWT claims using the `jwt_claims_headers` setting. This YAML configuration maps the 'email' claim to a custom header named 'X-Email' and the 'user' claim to 'X-Username'. This allows for specific header naming conventions required by upstream applications.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/jwt-claim-headers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njwt_claims_headers:\n\tX-Email: email\n\tX-Username: user\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Grafana JWT Settings\nDESCRIPTION: Docker Compose configuration showing JWT authentication settings for Grafana service including header forwarding and JWKS endpoint configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-single-sign-on.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngrafana:\n  image: grafana/grafana:latest\n  ports:\n    - 3000:3000\n  networks:\n    main: {}\n  environment:\n    - GF_AUTH_SIGNOUT_REDIRECT_URL=https://grafana.<CLUSTER_SUBDOMAIN>.pomerium.app/.pomerium/sign_out\n    - GF_AUTH_JWT_ENABLED=true\n    - GF_AUTH_JWT_HEADER_NAME=X-Pomerium-Jwt-Assertion\n    - GF_AUTH_JWT_EMAIL_CLAIM=email\n    - GF_AUTH_JWT_USERNAME_CLAIM=sub\n    - GF_AUTH_JWT_JWK_SET_URL=https://authenticate.<CLUSTER_SUBDOMAIN>.pomerium.app/.well-known/pomerium/jwks.json\n    - GF_AUTH_JWT_CACHE_TTL=60m\n    - GF_AUTH_JWT_AUTO_SIGN_UP=true\n  volumes:\n    - ./grafana-storage:/var/lib/grafana\n```\n\n----------------------------------------\n\nTITLE: Configuring Ping Identity OIDC in Pomerium Core (YAML)\nDESCRIPTION: This YAML configuration snippet sets Ping Identity as the OpenID Connect identity provider for Pomerium. It requires the issuer URL, client ID, and client secret, all of which must be obtained from the PingOne console during application setup. The fields 'idp_provider', 'idp_provider_url', 'idp_client_id', and 'idp_client_secret' are essential for enabling the identity integration. Replace 'CLIENT_ID' and 'CLIENT_SECRET' with values from your PingOne configuration; Pomerium will use these to authenticate users via OIDC. Inputs are string values for each property. All parameters are required, and their security should be ensured.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/ping.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider: 'ping'\nidp_provider_url: 'https://auth.pingone.com/720dbe8a-83ed-48e1-9988-9928301ae668/as'\nidp_client_id: 'CLIENT_ID'\nidp_client_secret: 'CLIENT_SECRET'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Bucket for Autocert Storage in Pomerium (YAML)\nDESCRIPTION: Specifies an S3 bucket URL for storing Autocert certificate data using the `autocert_dir` key in a Pomerium YAML configuration file. Pomerium will use AWS credentials sourced from the environment (via aws-sdk-go-v2/config#EnvConfig) to access the specified bucket and prefix. This is essential for sharing certificate data across multiple Pomerium service instances.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nautocert_dir: s3://your-bucket.s3.us-east-1.amazonaws.com/some/prefix\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Certificate Authority in YAML\nDESCRIPTION: Sets a base64-encoded trusted certificate authority string in YAML configuration. This is used when configuring Pomerium to trust a specific certificate authority for Autocert.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nautocert_trusted_ca: base64-encoded-string\n```\n\n----------------------------------------\n\nTITLE: Example Pomerium Configuration with xff_num_trusted_hops: 0\nDESCRIPTION: A sample Pomerium configuration snippet (`config.yaml`) setting `xff_num_trusted_hops` to `0`. This configuration instructs Pomerium not to trust the incoming XFF header for determining the client IP, using the direct downstream connection's IP instead. It also specifies fields to include in the access log.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/x-forwarded-for-settings.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nxff_num_trusted_hops: 0\naccess_log_fields: [forwarded-for, ip, method, path]\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Authorize Log Fields in Pomerium (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to limit the fields included in Pomerium's authorize logs. By specifying only `request-id`, `method`, and `path` under `authorize_log_fields`, the resulting logs will contain only these fields plus essential evaluation data, reducing log verbosity.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nauthorize_log_fields:\n  - request-id\n  - method\n  - path\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Priority Order in Pomerium Core - YAML Example (YAML)\nDESCRIPTION: This snippet shows how to configure a Pomerium route with a regular expression and an associated regex_priority_order value using YAML. The regex field specifies the path pattern using Go's re2 syntax, and regex_priority_order (an optional unsigned integer) determines this route's matching precedence relative to others. This configuration requires Pomerium Core and may need specific prerequisites set in your environment. Input is expected as YAML, and outputs depend on runtime route evaluation by Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/regex-priority-order.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nregex: '^/(admin|superuser)/.*$'\\nregex_priority_order: 1\n```\n\n----------------------------------------\n\nTITLE: Running Well Known IP Data Source with Docker Compose (YAML)\nDESCRIPTION: Docker Compose configuration snippet for running the Pomerium datasource image as a service named `wellknownipranges`. It specifies the `pomerium/datasource:latest` image, the `well-known-ips` command to run the specific data provider, and maps port 8080 of the container to port 8080 on the host.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/ip-ranges.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  wellknownipranges:\n    image: pomerium/datasource:latest\n    command:\n      - well-known-ips\n    ports:\n      - 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Helm Chart Values with Pomerium Annotations (yaml)\nDESCRIPTION: This YAML file provides Helm chart configuration values for deploying Grafana with Kubernetes ingress settings that are compatible with Pomerium. It enables the ingress, adds Pomerium-specific annotations for identity and authorization, sets up TLS, and configures persistence for user data. The annotations control which certificates and ingress classes are used, and how Pomerium passes identity headers and policies. Persistence settings specify volume claims and access modes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/istio.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: true\n  annotations:\n    # Specify the certificate issuer for your namespace or cluster. For example:\n    # cert-manager.io/issuer: pomerium-issuer\n    kubernetes.io/ingress.class: pomerium\n    ingress.pomerium.io/pass_identity_headers: 'true'\n    ingress.pomerium.io/policy: |\n      - allow:\n          or:\n            - domain:\n                is: example.com\n  hosts:\n    - 'grafana.localhost.pomerium.io'\n  tls:\n    - hosts:\n        - grafana.localhost.pomerium.io\n      secretName: grafana.localhost.pomerium.io-tls\npersistence:\n  type: pvc\n  enabled: false\n  # storageClassName: default\n  accessModes:\n    - ReadWriteOnce\n  size: 10Gi\n  # annotations: {}\n  finalizers:\n    - kubernetes.io/pvc-protection\n\n```\n\n----------------------------------------\n\nTITLE: Defining Pomerium Policy with Bastion Host and Pass Identity Headers - YAML\nDESCRIPTION: This YAML snippet defines a Pomerium access policy to route a custom endpoint to a bastion host, enabling identity headers for downstream services. The `pass_identity_headers: true` ensures that identity information is forwarded, which can be crucial for downstream authentication. The endpoints from/to are customizable to fit development environments. Prerequisite: a deployed Pomerium proxy and accessible bastion host. Input: endpoint URLs and host addresses; Output: traffic properly routed and identity headers injected.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/programmatic-access.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# a policy like\n- from: https://my-dev-endpoint.example.com\n  to: https://my-bastion-host.example.com:5000\n  pass_identity_headers: true\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Address via Environment Variable - Pomerium - Bash\nDESCRIPTION: This snippet sets the gRPC address for Pomerium using a shell environment variable, suitable for deployments where environment-based configuration is preferred. 'GRPC_ADDRESS' defines the address and port for internal gRPC traffic. The dependency is Pomerium's ability to read config values from environment variables. On startup, Pomerium reads this variable and binds the gRPC server accordingly. Only effective for internal communication within the application.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/grpc.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGRPC_ADDRESS=:8443\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Routes for Transmission Access\nDESCRIPTION: YAML configuration for Pomerium to proxy requests to Transmission daemon. Defines the route, target service, and access policies for authorized users.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/transmission.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://<transmission.mydomain.com>\n    to: http://<private.ip.address>:9091\n    policy:\n      - allow:\n          or:\n            - email:\n                is: myUser@mydomain.com\n```\n\n----------------------------------------\n\nTITLE: Setting ACME Account Email via Environment Variable (Bash)\nDESCRIPTION: Configures the email address associated with the ACME account using the `AUTOCERT_EMAIL` environment variable. This email address is provided to the ACME CA during registration and might be used for important notifications regarding the account or certificates.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nAUTOCERT_EMAIL=example@domain.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Header Logging in Pomerium Authorize Logs (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to log specific, custom HTTP headers in Pomerium's authorize logs. Using the `headers.{HeaderName}` syntax within `authorize_log_fields`, this example targets only the `Cookie` and `Content-Type` headers for inclusion in the log output.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nauthorize_log_fields:\n  - headers.Cookie\n  - headers.content-type\n```\n\n----------------------------------------\n\nTITLE: Example Pomerium Policy Using GeoIP Data in YAML\nDESCRIPTION: This YAML snippet showcases a Pomerium access policy rule that utilizes the configured GeoIP external data source. It defines an `allow` rule that checks the `record` of type `pomerium.io/GeoIP` associated with the request's IP address. Access is granted only if the `country` field within that record `is` `US`. This effectively restricts access to users whose IP addresses are identified as originating from the United States.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/geoip.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\\n  and:\\n    - record:\\n        field: country\\n        is: US\\n        type: pomerium.io/GeoIP\n```\n\n----------------------------------------\n\nTITLE: Loading Databroker Connection String from File in YAML\nDESCRIPTION: Specifies a file path from which Pomerium should read the PostgreSQL connection string using the `databroker_storage_connection_string_file` key in a YAML configuration file. This method is preferred for managing sensitive connection details securely.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/databroker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndatabroker_storage_connection_string_file: /run/secrets/db_connection_string\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Address via YAML - Pomerium - YAML\nDESCRIPTION: This snippet configures the internal gRPC service address for Pomerium using a YAML config file. It sets the service to listen on port 8443. The core dependency is Pomerium's configuration loader. The 'grpc_address' parameter controls which interface and port the proxy binds for internal communication. Input is the YAML file, output is the Pomerium service binding to :8443. Changing this value allows running the gRPC service on custom interfaces/ports as needed.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/grpc.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngrpc_address: :8443\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Core in Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to configure Pomerium Core in the Docker Compose file. It includes volume mounting for the configuration file and environment variable for JWT claims headers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/guacamole.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npomerium:\n  image: pomerium/pomerium:latest\n  volumes:\n    - ./config.yaml:/pomerium/config.yaml:ro\n  ports:\n    - 443:443\n  networks:\n    - guacnetwork_compose\n  environment:\n    JWT_CLAIMS_HEADERS: email\n```\n\n----------------------------------------\n\nTITLE: Rewrite Request Headers from Existing Header Values - YAML\nDESCRIPTION: This example shows setting a request header value ('Authorization') dynamically using the value of another request header ('X-Jwt') by referencing ${pomerium.request.headers[\"HEADER-NAME\"]}. Used in 'set_request_headers', this enables header value passing or transformation during request proxying. Requires Pomerium; inputs are incoming HTTP headers. Resulting requests will have the new header as specified.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nset_request_headers:\n  Authorization: Bearer ${pomerium.request.headers[\"X-Jwt\"]}\n```\n\n----------------------------------------\n\nTITLE: Example JWKS JSON Output\nDESCRIPTION: Illustrative JSON response obtained from querying Pomerium's JWKS endpoint (`/.well-known/pomerium/jwks.json`). It shows the structure containing an array of public keys (`keys`). Each key object includes metadata like usage (`use`), key type (`kty`), key ID (`kid`), curve (`crv`), algorithm (`alg`), and the public key coordinates (`x`, `y`) for an EC key.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/signing-key.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\n    {\n      \"use\": \"sig\",\n      \"kty\": \"EC\",\n      \"kid\": \"ccc5bc9d835ff3c8f7075ed4a7510159cf440fd7bf7b517b5caeb1fa419ee6a1\",\n      \"crv\": \"P-256\",\n      \"alg\": \"ES256\",\n      \"x\": \"QCN7adG2AmIK3UdHJvVJkldsUc6XeBRz83Z4rXX8Va4\",\n      \"y\": \"PI95b-ary66nrvA55TpaiWADq8b3O1CYIbvjqIHpXCY\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt Disallow All (Plaintext)\nDESCRIPTION: This snippet demonstrates the default robots.txt content Pomerium serves to prevent search engine crawling when Public Access is enabled. It disallows all user agents from indexing any route, thereby protecting confidential data from search engines. No dependencies are needed; this is a static file response. Inputs and outputs are standard HTTP responses for /robots.txt.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/public-access.mdx#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: DEB Package Repository Setup\nDESCRIPTION: Commands to configure and install Pomerium Enterprise on Debian-based systems\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/install.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf \\\n'https://dl.cloudsmith.io/[access-key]/pomerium/enterprise/setup.deb.sh' \\\n| sudo -E bash\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf 'https://dl.cloudsmith.io/[access-key]/pomerium/enterprise/gpg.B1D0324399CB9BC3.key' | apt-key add -\n\necho \"deb https://dl.cloudsmith.io/[access-key]/pomerium/enterprise/deb/debian buster main\" | sudo tee /apt/sources.list.d/pomerium-console.list\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update; sudo apt install pomerium-console\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now pomerium-console\n```\n\n----------------------------------------\n\nTITLE: Setting Databroker Service URL via Environment Variable - Bash\nDESCRIPTION: Set the 'DATABROKER_SERVICE_URL' environment variable to define the Databroker Service endpoint for Pomerium. This value directs Pomerium to the URL where context, user, and session data are stored and retrieved. Use in split-service mode or when running the databroker externally.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nDATABROKER_SERVICE_URL=https://databroker.corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Rewrite Pattern in Pomerium (YAML) - YAML\nDESCRIPTION: This YAML snippet shows how to set regex_rewrite_pattern and regex_rewrite_substitution for advanced path rewriting in Pomerium. It rewrites routes using a regular expression, capturing path segments and substituting them according to specified patterns. Required keys are regex_rewrite_pattern (a regex for matching input paths) and regex_rewrite_substitution (the replacement string, with backreferences). Inputs are URL paths: outputs are rewritten request paths. Dependencies: Pomerium configured via YAML or JSON files.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/path-rewriting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nregex_rewrite_pattern: '^/service/([^/]+)(/.*)$'\\nregex_rewrite_substitution: \"\\\\2/instance/\\\\1\"\n```\n\n----------------------------------------\n\nTITLE: Filtering and Interpreting Access Logs Output (JSON)\nDESCRIPTION: Demonstrates the structure of the output logs emitted by the Pomerium proxy service, shown as JSON objects. These snippets display possible logged fields, including standard HTTP fields and custom headers, depending on configuration. Inputs are HTTP requests served via the proxy; outputs are log entries in JSON format. Output content depends on what is set in access_log_fields. The 'message' field is always 'http-request', allowing easy filtering.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/access-log-fields.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"service\": \"envoy\",\n  \"upstream-cluster\": \"route-6f431f0be965b608\",\n  \"method\": \"GET\",\n  \"authority\": \"verify.pomerium.com\",\n  \"path\": \"/img/json.svg\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36\",\n  \"referer\": \"https://verify.localhost.pomerium.io/index.css\",\n  \"forwarded-for\": \"XXX.XXX.X.XXX\",\n  \"request-id\": \"6f3ad640-cb15-48b4-b79f-9adb94dd654c\",\n  \"duration\": 224.860959,\n  \"size\": 5127,\n  \"response-code\": 200,\n  \"response-code-details\": \"via_upstream\",\n  \"time\": \"2023-08-03T16:55:14-04:00\",\n  \"message\": \"http-request\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"service\": \"envoy\",\n  \"authority\": \"verify.pomerium.com\",\n  \"path\": \"/img/json.svg\",\n  \"time\": \"2023-08-04T12:12:35-04:00\",\n  \"message\": \"http-request\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"service\": \"envoy\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36\"\n  },\n  \"time\": \"2023-08-04T11:37:01-04:00\",\n  \"message\": \"http-request\"\n}\n```\n\n----------------------------------------\n\nTITLE: User-Specific Authorization Policy Example\nDESCRIPTION: Annotation example that grants access to specific users by their email addresses. This policy uses the 'or' operator to allow either of two specific email addresses access to the protected resource.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/policy: |\n  allow:\n    or:\n      - user:\n          is: user1@example.com\n      - user:\n          is: user2@example.com\n```\n\n----------------------------------------\n\nTITLE: Load Balancing Policy Configuration\nDESCRIPTION: Example of configuring load balancing policy with least request configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://myapp.localhost.pomerium.io\n    to:\n      - http://myapp-srv-1:8080\n      - http://myapp-srv-2:8080\n      - http://myapp-srv-3:8080\n      - http://myapp-srv-4:8080\n      - http://myapp-srv-5:8080\n    lb_policy: LEAST_REQUEST\n    least_request_lb_config:\n      choice_count: 2\n```\n\n----------------------------------------\n\nTITLE: Viewing Ingress Events with kubectl - Bash\nDESCRIPTION: This Bash example uses the kubectl CLI to display detailed information about a Kubernetes Ingress object, including its event history. It can be used to diagnose problems with ingress configuration by revealing event log messages added by controllers such as the Pomerium Ingress Controller. Requires kubeconfig configured and permissions to describe the relevant ingress resource.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe ingress/my-ingress\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker Compose for Pomerium and Verify Service\nDESCRIPTION: This Docker Compose configuration sets up two services: Pomerium and a verify service. It mounts the Pomerium configuration file and exposes necessary ports.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/get-started.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n  verify:\n    image: pomerium/verify:latest\n    expose:\n      - 8000\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Domain API Request with Credentials in JavaScript\nDESCRIPTION: This JavaScript code shows how to make a cross-domain API request using fetch with credentials included. This approach works when cookies are shared across subdomains.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  const result = await fetch('https://api.localhost.pomerium.io', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n    },\n    credentials: 'include',\n  });\n  const json = await result.json();\n  console.log('RESULT', json);\n})();\n```\n\n----------------------------------------\n\nTITLE: Verifying Redis Proxy via CLI - Bash\nDESCRIPTION: This snippet uses 'redis-cli info' to verify connection to the proxied Redis instance via the local endpoint. When run while the Pomerium TCP proxy is active, it will authenticate the user and return detailed Redis server information. This confirms the functionality and correctness of the TCP proxy setup.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-tcp-routes.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$  redis-cli info\n# Server\nredis_version:7.0.5\nredis_git_sha1:00000000\nredis_git_dirty:0\nredis_build_id:d9291579292e26e3\nredis_mode:standalone\nos:Linux 6.3.13-linuxkit aarch64\narch_bits:64\nmonotonic_clock:POSIX clock_gettime\nmultiplexing_api:epoll\natomicvar_api:c11-builtin\ngcc_version:10.2.1\nprocess_id:1\nprocess_supervised:no\nrun_id:bc1b8bcd39f1e51d615f5739158e6ae964f7e724\ntcp_port:6379\nserver_time_usec:1713989553900448\nuptime_in_seconds:64\nuptime_in_days:0\nhz:10\nconfigured_hz:10\nlru_clock:2713521\nexecutable:/data/redis-server\nconfig_file:\nio_threads_active:0\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Client Timeout via Environment Variable - Pomerium - Bash\nDESCRIPTION: This snippet configures the maximum gRPC client timeout by setting the GRPC_CLIENT_TIMEOUT environment variable. Accepts values in Go duration format (e.g., '15s') and controls the retry window for failed upstream requests. On startup, Pomerium reads this value to control gRPC client retry timing. This mechanism relies on correct environment setup and is only relevant for internal gRPC calls managed by Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/grpc.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGRPC_CLIENT_TIMEOUT=15s\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Log Fields via Environment Variable (Bash)\nDESCRIPTION: Specifies access log fields for the Pomerium proxy by setting the ACCESS_LOG_FIELDS environment variable. Fields are provided as a comma-separated string, supporting both default fields and custom header definitions with 'headers.' prefixes. This approach is best for environments where configuration is injected via environment variables (e.g., containerized or cloud runtimes). No external dependencies required except for setting environment variables in the process context.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/access-log-fields.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nACCESS_LOG_FIELDS=authority,duration,path\n```\n\nLANGUAGE: bash\nCODE:\n```\nACCESS_LOG_FIELDS=headers.user-agent,headers.content-type\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Authorize Log Fields in Pomerium Core (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the `authorize_log_fields` setting in Pomerium Core's configuration file. It specifies that only the `request-id`, `path`, and `ip` fields should be included in the authorize service logs for each request.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthorize_log_fields:\n  - request-id\n  - path\n  - ip\n```\n\n----------------------------------------\n\nTITLE: Providing Tor Exit Node Data Records - JSON\nDESCRIPTION: This snippet demonstrates the data structure for representing Tor exit node IP addresses for use with external data providers in Pomerium. Each record is a JSON object with an 'id' key holding the node's IP address. Integration expects each IP entry to be formatted as an individual object; ensure valid JSON structure if provided as an array.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/tor-exit-nodes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"id\\\": \\\"101.3.121.242\\\"\\n},\\n  {\\\"id\\\": \\\"102.130.113.9\\\"},\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Autocert EAB MAC Key in Pomerium Configuration (YAML)\nDESCRIPTION: Sets the External Account Binding (EAB) MAC Key using the `autocert_eab_mac_key` key in a Pomerium YAML configuration file (note: the provided example incorrectly uses `autocert_eab_key_id`). This key is the base64-URL-encoded secret corresponding to the `autocert_eab_key_id` and is required when EAB is used.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nautocert_eab_key_id: base64-URL-encoded_secret_key\n```\n\n----------------------------------------\n\nTITLE: Initiating PostgreSQL Connection through Pomerium Tunnel\nDESCRIPTION: This command initiates a PostgreSQL connection through the Pomerium tunnel. It connects to localhost (where the tunnel is listening) and executes a simple command to list schemas.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/postgres.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$  psql -h localhost -W -U postgres -c '\\dn'\n```\n\n----------------------------------------\n\nTITLE: Docker Login and Pull for Enterprise Console\nDESCRIPTION: Commands to authenticate and pull the Pomerium Enterprise Docker image from Cloudsmith registry\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/install.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker login docker.cloudsmith.io\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull docker.cloudsmith.io/pomerium/enterprise/pomerium-console:${vX.X.X}\n```\n\n----------------------------------------\n\nTITLE: Enabling Google Cloud Serverless Authentication via Environment Variable - Bash\nDESCRIPTION: This snippet shows how to enable Google Cloud Serverless Authentication by setting the 'ENABLE_GOOGLE_CLOUD_SERVERLESS_AUTHENTICATION' environment variable to 'true' before starting the Pomerium service. No additional dependencies beyond access to the correct GCP service account in the runtime environment. Input is expected in string form; the default state is disabled ('false'). Service must be restarted to apply this change.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/enable-google-cloud-serverless-authentication.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_GOOGLE_CLOUD_SERVERLESS_AUTHENTICATION=true\n```\n\n----------------------------------------\n\nTITLE: Setting Load Balancing via Kubernetes Annotations in Pomerium - YAML\nDESCRIPTION: This YAML snippet illustrates the configuration of load balancing parameters for Pomerium using Kubernetes ingress annotations. The 'ingress.pomerium.io/lb_policy' sets the load balancing method, while 'ingress.pomerium.io/least_request_lb_config' provides further tuning in JSON for the LEAST_REQUEST policy's 'choice_count'. Usage assumes deployment in a Kubernetes environment where Pomerium ingress controller is active. Inputs are annotation key-value pairs applied either directly in pod templates or via Kubernetes manifests, and outputs are load balancing behavior across services. Ensure annotations are set on the correct ingress resources to take effect.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/load-balancing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\\ningress.pomerium.io/lb_policy: LEAST_REQUEST\\ningress.pomerium.io/least_request_lb_config: '{\"choice_count\": 2}'\\n```\n```\n\n----------------------------------------\n\nTITLE: Example User Data JSON Output from /.pomerium/user\nDESCRIPTION: This JSON snippet illustrates the typical response from the `/.pomerium/user` endpoint. It provides plaintext user information (claims) such as email, name, and group memberships for the currently authenticated user. This endpoint is useful for frontend applications fetching identity data but should not be used for backend security decisions.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/special-routes.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"groups\": [\"engineering\", \"admins\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookie HTTP Only Flag via Environment Variable\nDESCRIPTION: This Bash snippet shows how to disable the HttpOnly flag for Pomerium session cookies by setting the `COOKIE_HTTP_ONLY` environment variable to `false`. This allows JavaScript access to the cookie.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nCOOKIE_HTTP_ONLY=false\n```\n\n----------------------------------------\n\nTITLE: Configuring UDP Route Example\nDESCRIPTION: YAML configuration for setting up a UDP route with policy-based access control.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: udp+https://time.corp.example.com:13\n    to: udp://time.internal.example.com:13\n    policy:\n      - allow:\n          or:\n            - email:\n                is: contractor@notexample.com\n            - claim/groups: 'datascience@example.com'\n```\n\n----------------------------------------\n\nTITLE: Example Pomerium Configuration with xff_num_trusted_hops: 1\nDESCRIPTION: A sample Pomerium configuration snippet (`config.yaml`) setting `xff_num_trusted_hops` to `1`. This configuration instructs Pomerium to trust one hop in the incoming XFF header to determine the client IP. It also specifies fields for the access log.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/x-forwarded-for-settings.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nxff_num_trusted_hops: 1\naccess_log_fields: [forwarded-for, ip, method, path]\n```\n\n----------------------------------------\n\nTITLE: Configuring Read Timeout in Pomerium Kubernetes Deployment (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the read timeout for Pomerium using the 'timeouts.read' key within a Kubernetes manifest. The value is a Go Duration string, indicating the maximum allowed request time from clients.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/global-timeouts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntimeouts:\n  read: 30s\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Pomerium Authentication with React\nDESCRIPTION: A React component that retrieves user information using Pomerium's getBrowserUser() and provides a sign out button. The component displays the user information in a pre-formatted JSON block and offers a sign out button that redirects to the Pomerium homepage.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/js-sdk/react-app.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { getBrowserUser, signOut } from '@pomerium/js-sdk';\n\nfunction App() {\n\n   const [userInfo, setUserInfo] = useState('');\n\n  useEffect(() => {\n    getBrowserUser()\n      .then(u => setUserInfo(u))\n      .catch(e => console.log(e));\n  }, [])\n\n  return (\n    <div style={{margin: '20px'}}>\n      <pre>{JSON.stringify(userInfo, null, 2)}</pre>\n      <div style={{marginTop: '20px'}}>\n        <button onClick={() => signOut('https://www.pomerium.io')} type=\"button\">Sign Out Test</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration\nDESCRIPTION: Full Docker Compose configuration including Pomerium, Grafana, HTTPBin, and Node.js server services with network and volume configurations.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-advanced-routes.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    ports:\n      - 443:443\n    restart: always\n    environment:\n      POMERIUM_ZERO_TOKEN: <CLUSTER_TOKEN>\n      XDG_CACHE_HOME: /var/cache\n    volumes:\n      - pomerium-cache:/var/cache\n    networks:\n      main:\n        aliases:\n          - verify.<CLUSTER_SUBDOMAIN>.pomerium.app\n          - authenticate.<CLUSTER_SUBDOMAIN>.pomerium.app\n  verify:\n    image: pomerium/verify:latest\n    networks:\n      main:\n        aliases:\n          - verify\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - 3000:3000\n    networks:\n      main: {}\n    environment:\n      - GF_AUTH_SIGNOUT_REDIRECT_URL=https://grafana.<CLUSTER_SUBDOMAIN>.pomerium.app/.pomerium/sign_out\n      - GF_AUTH_JWT_ENABLED=true\n      - GF_AUTH_JWT_HEADER_NAME=X-Pomerium-Jwt-Assertion\n      - GF_AUTH_JWT_EMAIL_CLAIM=email\n      - GF_AUTH_JWT_USERNAME_CLAIM=sub\n      - GF_AUTH_JWT_JWK_SET_URL=https://authenticate.<CLUSTER_SUBDOMAIN>.pomerium.app/.well-known/pomerium/jwks.json\n      - GF_AUTH_JWT_CACHE_TTL=60m\n      - GF_AUTH_JWT_AUTO_SIGN_UP=true\n    volumes:\n      - ./grafana-storage:/var/lib/grafana\n\n  httpbin:\n    networks:\n      main: {}\n    image: kennethreitz/httpbin\n    ports:\n      - 80:80\n\n  nodeserver:\n    networks:\n      main: {}\n    build:\n      context: ./app\n    ports:\n      - 5001:5001\n\nnetworks:\n  main: {}\n\nvolumes:\n  pomerium-cache:\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Pomerium Services\nDESCRIPTION: Docker Compose configuration defining Pomerium, Verify, and Grafana services with necessary port mappings and environment variables.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/jwt-verification.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n  verify:\n    image: pomerium/verify:latest\n    expose:\n      - 8000\n    environment:\n      - JWKS_ENDPOINT=https://pomerium/.well-known/pomerium/jwks.json\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Creating SSL Directory and Moving Certificates (Shell Script)\nDESCRIPTION: This shell command sequence creates a directory for storing GitLab SSL certificates and moves the newly generated certificate and key files into it. Requires shell access, the generated .pem and .pem-key files, and appropriate permissions. No direct input other than existing files and the target path; output is the files located in /srv/gitlab/config/ssl/.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /srv/gitlab/config/ssl\nmv gitlab.pomerium.localhost.io.pem gitlab.pomerium.localhost.io-key.pem /srv/gitlab/config/ssl\n```\n\n----------------------------------------\n\nTITLE: Fetching Public Key from JWKS Endpoint\nDESCRIPTION: Command to retrieve Pomerium's public key from the JWKS endpoint for JWT verification.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/getting-users-identity.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://<YOUR-SERVICE-DOMAIN>/.well-known/pomerium/jwks.json \\\n  -H 'Accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Setting Authorize Internal Service URL via Environment Variable - Bash\nDESCRIPTION: This bash snippet sets the 'AUTHORIZE_INTERNAL_SERVICE_URL' environment variable to specify the internal endpoint for the Authorize Service in Pomerium. Ensures correct routing in split-service mode for gRPC connections. Use with split-service deployments or custom network setups.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nAUTHORIZE_INTERNAL_SERVICE_URL=https://localhost:5443\n```\n\n----------------------------------------\n\nTITLE: Illustrating Trailing Slash Behavior (With Slash in `to`) in Pomerium (YAML)\nDESCRIPTION: Provides a YAML configuration example demonstrating the behavior of Pomerium routing when the `to` URL *does* end with a trailing slash. In this scenario, requests to any path under the `from` URL are forwarded to the corresponding path under the `to` URL base, preserving the relative path structure.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/to.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://verify.corp.example.com\n  to: https://verify.pomerium.com/anything/\n```\n\n----------------------------------------\n\nTITLE: Logging All HTTP Headers in Pomerium Core Authorize Logs (Env Var)\nDESCRIPTION: This Bash command sets the `AUTHORIZE_LOG_FIELDS` environment variable for Pomerium Core to `headers`. This configures the authorize service to include all HTTP request headers in its log entries.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAUTHORIZE_LOG_FIELDS=headers\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Authorize Log Fields in Pomerium Core (Env Var)\nDESCRIPTION: This Bash command demonstrates setting the `AUTHORIZE_LOG_FIELDS` environment variable for Pomerium Core. It configures the authorize service to log only the `request-id`, `path`, and `ip` fields, separated by commas.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTHORIZE_LOG_FIELDS=request-id,path,ip\n```\n\n----------------------------------------\n\nTITLE: Generating Wildcard TLS Certificate with mkcert\nDESCRIPTION: These bash commands use mkcert to generate a local development wildcard TLS certificate for *.localhost.pomerium.io. This is required for secure connections to HedgeDoc.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/hedgedoc.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkcert -install\nmkcert '*.localhost.pomerium.io'\n```\n\n----------------------------------------\n\nTITLE: Setting Trusted Certificate Authority File Path via Environment Variable\nDESCRIPTION: Specifies a file path to a trusted certificate authority file using an environment variable. Allows reading the trusted CA from a file when using environment-based configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nAUTOCERT_TRUSTED_CA_FILE=/relative/file/location\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Service Guacamole Stack with Docker Compose - YAML\nDESCRIPTION: This YAML snippet provides a complete Docker Compose configuration for deploying Guacamole, PostgreSQL, and Pomerium with proper networking and persistent storage. Dependencies between services are managed via 'depends_on', and environment variables are set to configure Guacamole's integration with its database and Pomerium. Volumes ensure that logs, recordings, database data, and configuration files are persisted on the host, while a custom bridge network ('guacnetwork_compose') isolates traffic between containers. Exposed ports (notably 8080 for Guacamole and 443 for Pomerium) enable necessary access. The configuration assumes proper local directories and secrets are present and may require secure password management in production environments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/guacamole/guacamole.docker-compose.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# networks\n# create a network 'guacnetwork_compose' in mode 'bridged'\nnetworks:\n  guacnetwork_compose:\n    driver: bridge\nservices:\n  # guacd\n  guacd:\n    container_name: guacd_compose\n    image: guacamole/guacd\n    networks:\n      - guacnetwork_compose\n    restart: always\n    volumes:\n    - ./drive:/drive:rw\n    - ./record:/record:rw\n\n  # postgres\n  postgres:\n    container_name: postgres_guacamole_compose\n    environment:\n      PGDATA: /var/lib/postgresql/data/guacamole\n      POSTGRES_DB: guacamole_db\n      POSTGRES_PASSWORD: 'ChooseYourOwnPasswordHere1234'\n      POSTGRES_USER: guacamole_user\n    image: postgres:15.2-alpine\n    networks:\n      - guacnetwork_compose\n    restart: always\n    volumes:\n    - ./init:/docker-entrypoint-initdb.d:z\n    - ./data:/var/lib/postgresql/data:Z\n\n  # guacamole\n  guacamole:\n    container_name: guacamole_compose\n    depends_on:\n    - guacd\n    - postgres\n    environment:\n      GUACD_HOSTNAME: guacd\n      POSTGRES_DATABASE: guacamole_db\n      POSTGRES_HOSTNAME: postgres\n      POSTGRES_PASSWORD: 'ChooseYourOwnPasswordHere1234'\n      POSTGRES_USER: guacamole_user\n      HEADER_ENABLED: true\n      HTTP_AUTH_HEADER: X-Pomerium-Claim-Email\n    image: guacamole/guacamole\n    networks:\n      - guacnetwork_compose\n    volumes:\n      - ./record:/record:rw\n    ports:\n    - 8080/tcp\n    restart: always\n\n  # pomerium\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n    networks:\n      - guacnetwork_compose\n    environment:\n      JWT_CLAIMS_HEADERS: email\n```\n\n----------------------------------------\n\nTITLE: Connecting to UDP Routes with pomerium-cli\nDESCRIPTION: Command to connect to a UDP route using pomerium-cli. The command establishes a listener on a random local port that forwards UDP traffic through the Pomerium proxy.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/udp.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pomerium-cli udp udp.localhost.pomerium.io:1234\n2023/10/02 11:19:59 listening on 127.0.0.1:52046\n```\n\n----------------------------------------\n\nTITLE: Configuring Regular Expression Path Matching in Kubernetes Ingress with Pomerium\nDESCRIPTION: This YAML snippet demonstrates how to configure an Ingress resource with regular expression path matching using Pomerium. It includes annotations for policy and path regex, and specifies the host, path, and backend service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    cert-manager.io/issuer: example-issuer\n    ingress.pomerium.io/policy: |\n      allow:\n        and:\n        - domain:\n            is: exampledomain.com\n    ingress.pomerium.io/path_regex: 'true'\n  name: example\nspec:\n  ingressClassName: pomerium\n  rules:\n    - host: example.localhost.pomerium.io\n      http:\n        paths:\n          - backend:\n              service:\n                name: example\n                port:\n                  name: http\n            path: ^/(admin|superuser)/.*$\n            pathType: ImplementationSpecific\n  tls:\n    - hosts:\n        - example.localhost.pomerium.io\n      secretName: example-tls\n```\n\n----------------------------------------\n\nTITLE: Pomerium UDP Route Configuration - YAML\nDESCRIPTION: YAML configuration for setting up a UDP route in Pomerium for Factorio server on port 34197.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/factorio.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- routes:\n    from: udp+https://factorio.corp.example.com:34197\n    to: udp://127.0.0.1:34197\n    allow_any_authenticated_user: true\n```\n\n----------------------------------------\n\nTITLE: Defining Pomerium Policy using Zenefits Data (YAML)\nDESCRIPTION: This YAML snippet shows an example Pomerium access policy that utilizes data fetched from the configured Zenefits datasource. The policy allows access only if the Zenefits record associated with the user (matched via email, using the `pomerium.io/Zenefits` record type) has its `status` field set to `active`. This restricts access for users who are terminated or still onboarding according to Zenefits data.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-standing/zenefits.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n  and:\n    - record:\n        field: status\n        is: active\n        type: pomerium.io/Zenefits\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Log Access\nDESCRIPTION: Command to display Pomerium authorization logs from a Kubernetes deployment.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/audit-logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f deploy/pomerium-authorize\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream mTLS Enforcement Mode via Environment Variable (Bash)\nDESCRIPTION: This snippet illustrates setting the downstream mTLS enforcement mode using the `DOWNSTREAM_MTLS_ENFORCEMENT` environment variable. The example value `reject_connection` configures Pomerium to reject connections without a trusted client certificate during the TLS handshake. This corresponds to the `downstream_mtls.enforcement` YAML key.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nDOWNSTREAM_MTLS_ENFORCEMENT=reject_connection\n```\n\n----------------------------------------\n\nTITLE: Logging Specific HTTP Headers in Pomerium Core Authorize Logs (YAML)\nDESCRIPTION: This YAML configuration snippet for Pomerium Core specifies custom HTTP headers to be included in the authorize logs using the `authorize_log_fields` key. It targets the `Cookie` and `Content-Type` headers specifically using the `headers.{HeaderName}` format.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# List custom HTTP headers\nauthorize_log_fields:\n  - headers.cookie\n  - headers.content-type\n```\n\n----------------------------------------\n\nTITLE: Disabling Certificate Chain Depth Limit via Environment Variable - Bash\nDESCRIPTION: Shows how to unset the maximum verification depth restriction using environment variables by setting `DOWNSTREAM_MTLS_MAX_VERIFY_DEPTH=0` for Pomerium. Allows unlimited certificate chain lengths unless otherwise limited by CA. Should be set in the environment before running the Pomerium service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nDOWNSTREAM_MTLS_MAX_VERIFY_DEPTH=0\n```\n\n----------------------------------------\n\nTITLE: Using Pomerium CLI for TCP Connections\nDESCRIPTION: Commands demonstrating how to use Pomerium CLI to establish TCP connections.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli tcp ssh.example.com:22\n# listening on 127.0.0.1:52672\nssh 127.0.0.1 -p 52672\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Service Docker Compose Deployment - YAML\nDESCRIPTION: This YAML snippet outlines a Docker Compose configuration specifying three primary services: pomerium (an identity-aware proxy), verify (a verification service for pomerium), and jenkins (a CI/CD automation server). Dependencies include Docker, Docker Compose and images for pomerium/pomerium:latest, pomerium/verify:latest, and jenkins/jenkins:lts-jdk11. Key configurable parameters include volume mounts for configuration persistence, port mappings for service exposure, network aliases to facilitate internal DNS resolution, and privileged mode for Jenkins to interact with the Docker host. Inputs are Docker configuration files and persistent volume paths; outputs are running, networked containers suitable for a development environment. Requires Docker host with file access privileges.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/jenkins/jenkins-docker-compose.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n main: {}\nservices:\n pomerium:\n   image: pomerium/pomerium:latest\n   volumes:\n     - ./config.yaml:/pomerium/config.yaml:ro\n   ports:\n     - 443:443\n   networks:\n     main:\n       aliases:\n       - authenticate.localhost.pomerium.io\n verify:\n   networks:\n     main: {}\n   image: pomerium/verify:latest\n   expose:\n     - 8000\n jenkins:\n   networks:\n     main: {}\n   image: jenkins/jenkins:lts-jdk11\n   privileged: true\n   user: root\n   ports:\n     - 8080:8080\n     - 50000:50000\n   volumes:\n     # File path to Jenkins_home -- stores configs, build logs, and artifacts\n     - ./home/jenkins_compose/jenkins_configuration:/var/jenkins_home\n     # \"sock\" is the Unix socket the Docker daemon listens on by default\n     - ./var/run/docker.sock:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Configuring Skip XFF Append (YAML/Bash)\nDESCRIPTION: Sets the `skip_xff_append` option to `true` using either the YAML configuration file or an environment variable. When `true`, Pomerium passes the incoming XFF header to the upstream service without appending the downstream client's IP address.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/x-forwarded-for-settings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nskip_xff_append: true\n```\n\nLANGUAGE: bash\nCODE:\n```\nSKIP_XFF_APPEND=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Route for Cockpit\nDESCRIPTION: YAML configuration for setting up a Pomerium route to Cockpit with websocket support and email-based access policies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/cockpit.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://cockpit.localhost.pomerium.io\n  to: http://localhost:9090\n  allow_websockets: true\n  policy:\n    - allow:\n        or:\n          - email:\n              is: alice@example.com\n          - email:\n              is: bob@example.com\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Token Exchange\nDESCRIPTION: This JSON snippet shows the expected successful response after exchanging an API User Token. It contains the temporary `idToken` needed for authentication and its validity period in `expiresInSeconds`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-zero.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expiresInSeconds\": \"3600\",\n  \"idToken\": \"<ID-TOKEN>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Pomerium Authorize Log Entry (Including ID Token and Claims)\nDESCRIPTION: This JSON object exemplifies a log entry from the Pomerium authorize service when configured to log the `id-token` and `id-token-claims`. It includes placeholders for the actual token and shows the decoded claims structure, alongside standard log fields and policy evaluation results. Note that logging these fields exposes potentially sensitive user information.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"service\": \"authorize\",\n  \"id-token\": \"<ID-TOKEN>\",\n  \"id-token-claims\": {\n    \"aud\": \"XmDTct9PHNsMRxKxCIObqWnmnEJLguPQ\",\n    \"email\": \"example@pomerium.com\",\n    \"email_verified\": true,\n    \"exp\": 1691452058,\n    \"family_name\": \"Painter\",\n    \"given_name\": \"Zachary\",\n    \"iat\": 1691416058,\n    \"iss\": \"https://dev-XXXXXXXXXXXXXXXX.us.auth0.com/\",\n    \"locale\": \"en\",\n    \"name\": \"Zachary Painter\",\n    \"nickname\": \"XXXXXXXX\",\n    \"picture\": \"https://lh3.googleusercontent.com/a/XXX=s96-c\",\n    \"pomerium.io/groups\": [\"admin\"],\n    \"sid\": \"L_tMPjzHdHKd6q1NjGdHERgSdWUUZF1b\",\n    \"sub\": \"google-oauth2|XXXXXXXXXXXXXXXXXXXXX\",\n    \"updated_at\": \"2023-08-03T17:44:00.171Z\"\n  },\n  \"allow\": true,\n  \"allow-why-true\": [\"domain-ok\"],\n  \"deny\": false,\n  \"deny-why-false\": [],\n  \"time\": \"2023-08-07T10:43:36-04:00\",\n  \"message\": \"authorize check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for TiddlyWiki (Enterprise) (YAML)\nDESCRIPTION: This Docker Compose configuration sets up TiddlyWiki services for use with Pomerium Enterprise, including initialization and configuration of the authenticated user header.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/tiddlywiki.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  tiddlywiki_init:\n    image: elasticdog/tiddlywiki:latest\n    volumes:\n      - ./wiki:/tiddlywiki\n    command: ['mywiki', '--init', 'server']\n\n  tiddlywiki:\n    image: elasticdog/tiddlywiki:latest\n    ports:\n      - 8080:8080\n    volumes:\n      - ./wiki:/tiddlywiki\n    command:\n      - mywiki\n      - --listen\n      - host=0.0.0.0\n      - authenticated-user-header=X-Pomerium-Claim-Email\n    depends_on:\n      - tiddlywiki_init\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Serverless Authentication Service Account in YAML\nDESCRIPTION: Defines how to specify the base64-encoded credentials for the Google Cloud Serverless Authentication Service Account in a core YAML configuration file. The primary dependency is the Pomerium application configured to read this file; credentials must be base64 encoded. The key parameter is 'google_cloud_serverless_authentication_service_account', and its absence results in ambient credentials being used. This configuration is optional and relevant only for Core installations.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/google-cloud-serverless-authentication-service-account.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngoogle_cloud_serverless_authentication_service_account: base64-encoded-service-account-credentials\n\n```\n\n----------------------------------------\n\nTITLE: Routes Portal JSON API Response Format\nDESCRIPTION: Example JSON response from the Routes Portal API showing the structure of route information. The response includes route IDs, names, types, URLs, and connection commands for TCP routes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routes-portal.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routes\": [\n    {\n      \"id\": \"c7cc6f3995e8c6e4\",\n      \"name\": \"postgres\",\n      \"type\": \"tcp\",\n      \"from\": \"tcp+https://postgres.curious-cat-9999.pomerium.app:5432\",\n      \"description\": \"\",\n      \"connect_command\": \"pomerium-cli tcp postgres.curious-cat-9999.pomerium.app:5432\"\n    },\n    {\n      \"id\": \"2116ef165e888f1a\",\n      \"name\": \"verify\",\n      \"type\": \"http\",\n      \"from\": \"https://verify.curious-cat-9999.pomerium.app\",\n      \"description\": \"\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Global Pomerium CRD for Troubleshooting (Bash)\nDESCRIPTION: Uses the `kubectl describe` command to retrieve detailed information, status, and event history for the global Pomerium Custom Resource Definition (CRD) instance named 'global'. This is useful for checking the overall Pomerium configuration status, observed generation, and any associated events within the Kubernetes cluster.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pomerium/global\n```\n\n----------------------------------------\n\nTITLE: Setting ACME Account Email in Pomerium Configuration (YAML)\nDESCRIPTION: Configures the email address associated with the ACME account using the `autocert_email` key in a Pomerium YAML configuration file. This email is used during ACME account registration and may be used by the Certificate Authority (CA) for notifications, such as certificate expiration warnings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nautocert_email: example@domain.com\n```\n\n----------------------------------------\n\nTITLE: Defining a Prefix Match Route - Kubernetes Ingress - YAML\nDESCRIPTION: This YAML code snippet illustrates how to set up a Kubernetes Ingress resource using the 'Prefix' path matching strategy for HTTP routes. The configuration uses 'pathType: Prefix' to match any URL path below the specified prefix ('/'). Prerequisites include a working Kubernetes cluster and appropriate IngressClass ('pomerium'). 'spec.rules' must include host, HTTP specifications, and at least one path object. The backend service should be configured beforehand. Output: traffic to paths with the defined prefix is sent to the backend service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/path-matching.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  ingressClassName: pomerium\n  rules:\n    - host: example.localhost.pomerium.io\n      http:\n        paths:\n          - backend:\n              service:\n                name: example\n                port:\n                  name: http\n            path: /\n            pathType: Prefix\n\n```\n\n----------------------------------------\n\nTITLE: Certificate Chain Verification Flowchart - Mermaid\nDESCRIPTION: A Mermaid diagram describing the structure and relationships within a CA bundle for client certificate chain validation. Shows a root CA, intermediate CAs, and end certificates with connections indicating which CA signs which entity. Intended to visually explain the concept of maximum verification depth in certificate chains. No external dependencies beyond Mermaid.js. Not executable code, but aids in documentation clarity.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\\n    subgraph CA bundle\\n    R1[Root CA]\\n    end\\n    R1 --> I1[Intermediate CA 1]\\n    R1 --> LA(Certificate A):::leaf\\n    I1 --> I2[Intermediate CA 2]\\n    I1 --> LB(Certificate B):::leaf\\n    I2 --> LC(Certificate C):::leaf\\n    classDef leaf fill:mintcream,stroke:lightgreen\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream mTLS CRL via File Path Environment Variable (Bash)\nDESCRIPTION: This snippet shows how to specify the path to the downstream mTLS Certificate Revocation List (CRL) bundle file using the `DOWNSTREAM_MTLS_CRL_FILE` environment variable. This method is equivalent to using the `downstream_mtls.crl_file` key in the YAML configuration. CRL support is noted as beta.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nDOWNSTREAM_MTLS_CRL_FILE=/path/to/CRLs.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring IdP Provider URL in Pomerium via YAML (yaml)\nDESCRIPTION: Specifies the base URL for an OAuth 2.0/OpenID Connect identity provider in the Pomerium configuration YAML. No further dependencies are required beyond Pomerium; the 'idp_provider_url' is required depending on IdP choice. The value must exclude '/.well-known/openid-configuration' and is used to dynamically discover IdP endpoints. Input is a YAML key with a URL string, which enables Pomerium to discover IdP metadata for authentication.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nidp_provider_url: 'https://awesome-company.auth0.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream mTLS CRL via File Path in Pomerium (YAML)\nDESCRIPTION: This snippet shows how to configure the downstream mTLS Certificate Revocation List (CRL) bundle by specifying a path to a PEM-encoded CRL file using the `crl_file` key under `downstream_mtls` in the Pomerium YAML configuration. This is an alternative to providing the CRL inline. CRL support is noted as beta.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndownstream_mtls:\n  crl_file: /path/to/CRLs.pem\n```\n\n----------------------------------------\n\nTITLE: Example Policy Error Message Configuration\nDESCRIPTION: Example of explanation and remediation messages that can be configured in a Pomerium policy to guide users when access is denied.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/self-remediation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nExplanation: \"Your browser is missing patch version 105.3.\"\\nRemediation: \"Download the latest update from our software portal.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx with Pomerium External Authentication\nDESCRIPTION: This Nginx configuration sets up a protected application with Pomerium authentication. It defines the server block, external authorization location block, authentication redirect handler, and the main location that requires authentication. The configuration includes SSL setup, proxy settings, and authentication request handling.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/nginx/verify.conf.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\n# Protected application\nserver {\n  listen 80;\n  listen 443 ssl http2;\n\n  server_name verify.localhost.pomerium.io;\n  ssl_certificate /etc/nginx/nginx.pem;\n  ssl_certificate_key /etc/nginx/nginx-key.pem;\n\n\n  location = /ext_authz {\n    internal;\n\n    proxy_pass_request_body off;\n    proxy_set_header Content-Length \"\";\n    proxy_set_header X-Forwarded-Proto \"\";\n\n    proxy_set_header Host fwdauth.localhost.pomerium.io;\n    proxy_set_header X-Original-URL $scheme://$http_host$request_uri;\n    proxy_set_header X-Original-Method $request_method;\n    proxy_set_header X-Real-IP $remote_addr;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n\n    proxy_set_header X-Auth-Request-Redirect $request_uri;\n\n    proxy_buffering off;\n\n    proxy_buffer_size 4k;\n    proxy_buffers 4 4k;\n    proxy_request_buffering on;\n    proxy_http_version 1.1;\n\n    proxy_ssl_server_name on;\n    proxy_pass_request_headers on;\n\n    client_max_body_size 1m;\n\n    # Pass the extracted client certificate to the auth provider\n\n    set $target http://pomerium/verify?uri=$scheme://$http_host$request_uri;\n\n    # uncomment to emulate nginx-ingress behavior\n    # set $target http://pomerium/verify?uri=$scheme://$http_host$request_uri&rd=$pass_access_scheme://$http_host$escaped_request_uri;\n    proxy_pass $target;\n  }\n\n  location @authredirect {\n    internal;\n    add_header Set-Cookie $auth_cookie;\n\n    # uncomment to emulate nginx-ingress behavior\n    # return 302 https://fwdauth.localhost.pomerium.io/?uri=$scheme://$host$request_uri&rd=$pass_access_scheme://$http_host$escaped_request_uri;\n\n    return 302\n      https://fwdauth.localhost.pomerium.io/?uri=$scheme://$host$request_uri;\n  }\n\n  location / {\n    proxy_pass http://verify;\n\n    include /etc/nginx/proxy.conf;\n    # If we get a 401, respond with a named location\n    error_page 401 = @authredirect;\n    # this location requires authentication\n    auth_request /ext_authz;\n    auth_request_set $auth_cookie $upstream_http_set_cookie;\n    add_header Set-Cookie $auth_cookie;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS for Cloud Run (DNS Zone File)\nDESCRIPTION: DNS zone file entries for setting up subdomains for Pomerium and protected applications on Cloud Run.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/cloud-run.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncloudrun.pomerium.io. 300 IN A 199.36.158.100\nauthenticate.cloudrun.pomerium.io 300 IN CNAME ghs.googlehosted.com.\nhello.cloudrun.pomerium.io 300 IN CNAME ghs.googlehosted.com.\nhello-direct.cloudrun.pomerium.io 300 IN CNAME ghs.googlehosted.com.\nverify.cloudrun.pomerium.io 300 IN CNAME ghs.googlehosted.com.\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Authority File for Pomerium with Bash\nDESCRIPTION: This bash snippet illustrates setting the 'CERTIFICATE_AUTHORITY_FILE' environment variable to point to the location of a CA file to be used by Pomerium. It is suitable for use in Docker, Kubernetes, or similar environments, allowing secret injection during runtime. This approach augments the system trust store rather than replacing it.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/certificates.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nCERTIFICATE_AUTHORITY_FILE=/relative/file/location\n```\n\n----------------------------------------\n\nTITLE: Installing mkcert Root CA - Bash\nDESCRIPTION: Initializes the trusted root certificate authority on the local machine using mkcert. Must be run before generating any certificates for development purposes. No input parameters required; the output is a root CA valid for local testing. Only suitable for non-production environments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/certificates-and-tls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkcert -install\n\n```\n\n----------------------------------------\n\nTITLE: Using Microsoft Entra Access Token with Curl (Bash)\nDESCRIPTION: Shows a command that retrieves an access token from Microsoft Entra using the `az` CLI and immediately uses it in the `Authorization` header of a `curl` request to access a Pomerium-protected URL. This requires Pomerium to be configured to accept IdP access tokens and assumes `az` CLI is installed and configured.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/bearer-token-format.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: $(az account get-access-token --query accessToken --output tsv)\" https://example.localhost.pomerium.io\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Arguments for TLS Bypass and Forwarded Headers\nDESCRIPTION: This YAML configuration sets additional command-line arguments for Traefik. It disables TLS verification for backend services and configures the websecure entry point to accept forwarded headers in insecure mode, which is useful when Traefik operates behind Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/traefik-ingress/values/traefik.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalArguments:\n  - \"--serverstransport.insecureskipverify=true\"\n  - \"--entryPoints.websecure.forwardedHeaders.insecure\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Exact Path Route - Pomerium Core - YAML\nDESCRIPTION: This YAML snippet demonstrates configuring an exact path match for a route in Pomerium's Core YAML configuration. The 'path' field specifies the exact URI segment that must match incoming requests for the route to apply. Dependencies include a running Pomerium instance and a valid configuration file. Required parameters are 'from', 'to', and 'path'; the value of 'path' must be a string representing the full, case-sensitive URL path segment. Outputs: matching requests are routed to the target. This requires no external libraries or custom code.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/path-matching.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    path: /admin/some/exact/path\n\n```\n\n----------------------------------------\n\nTITLE: Using PEM Files for Client Certificate Authentication in Pomerium CLI\nDESCRIPTION: Demonstrates how to specify client certificate and private key using PEM files with the pomerium-cli command. Requires cert.pem and key.pem files to be available.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/_cli-client-certificates.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli ${props.protocol} --client-cert cert.pem --client-key key.pem  route.corp.example.com:1234\n```\n\n----------------------------------------\n\nTITLE: Authenticating Service Account with Bearer Token in bash\nDESCRIPTION: Example curl command demonstrating how to send an authenticated request using a Pomerium service account JWT bearer token to access a protected endpoint.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/service-accounts.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -H \"Accept: application/json\" -H \"Authorization: Bearer Pomerium-${pomerium_jwt}\" https://verify.localhost.pomerium.io\n```\n\n----------------------------------------\n\nTITLE: Authorize Users Based on Group Claims in Pomerium - YAML\nDESCRIPTION: This YAML snippet shows a Pomerium route policy using the `groups` claim for access control. It permits users with an `admin` group to access the specified route. The configuration assumes group claims are populated in user tokens, which depends on the upstream identity provider and Pomerium settings. The key parameter is `claim/groups: admin` under the policy condition. Limitations include group claim support—OneLogin may not provide group claims without Directory Sync or additional setup.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/one-login.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: 'https://verify.localhost.pomerium.io'\n    to: 'https://verify.pomerium.com'\n    policy:\n      - allow:\n          and:\n            - claim/groups: admin\n```\n\n----------------------------------------\n\nTITLE: Configuring and Starting Pomerium Service\nDESCRIPTION: Commands to configure systemd capabilities and start the Pomerium service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/core.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\necho -e \"[Service]\\nAmbientCapabilities=CAP_NET_BIND_SERVICE\" | sudo SYSTEMD_EDITOR=tee systemctl edit pomerium\nsudo systemctl enable --now pomerium.service\n```\n\n----------------------------------------\n\nTITLE: Configuring Outlier Detection in Core with YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable outlier detection in a Pomerium Core configuration file by specifying the 'consecutive_5xx' parameter. The 'outlier_detection' key must be added as an object in the config, with 'consecutive_5xx' determining the threshold at which a host will be considered an outlier based on consecutive 5xx HTTP error responses. Requires Pomerium Core and a valid configuration file. Input is a YAML config file, and output is the activation of outlier detection logic in the running system. Applicable only to Core and not configurable in the Enterprise Console.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/outlier-detection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noutlier_detection: {'consecutive_5xx': 12}\n```\n\n----------------------------------------\n\nTITLE: Generating Local TLS Certificate with mkcert\nDESCRIPTION: Command to generate a wildcard certificate for local development using mkcert tool\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkcert \"*.localhost.pomerium.io\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium with CORS Support (YAML)\nDESCRIPTION: YAML configuration for Pomerium to enable Cross-Origin Resource Sharing (CORS) between different domains. This includes setting up routes, CORS headers, and authentication settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_service_url: https://authenticate.localhost.pomerium.io\n\ncertificate_file: /pomerium/cert.pem\ncertificate_key_file: /pomerium/private-key.pem\n\nidp_provider: REPLACE\nidp_client_id: REPLACE\nidp_client_secret: REPLACE\n\ncookie_secret: V2JBZk0zWGtsL29UcFUvWjVDWWQ2UHExNXJ0b2VhcDI=\n\nroutes:\n  - from: https://api.localhost.pomerium.io\n    to: http://api:8000\n    allow_any_authenticated_user: true\n    cors_allow_preflight: true\n    set_response_headers:\n      'Access-Control-Allow-Credentials': 'true'\n      'Access-Control-Allow-Origin': 'https://app.localhost.pomerium.io'\n      'Access-Control-Allow-Headers': 'X-Pomerium-Authorization'\n  - from: https://app.localhost.pomerium.io\n    to: http://app:8000\n    allow_any_authenticated_user: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream mTLS CA Inline via Environment Variable (Bash)\nDESCRIPTION: This snippet illustrates setting the downstream mTLS Certificate Authority (CA) bundle inline using the `DOWNSTREAM_MTLS_CA` environment variable. The variable should contain the base64-encoded PEM certificate bundle. This method is equivalent to using the `downstream_mtls.ca` key in the YAML configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDOWNSTREAM_MTLS_CA=LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk...\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Server Certificate - YAML\nDESCRIPTION: Updates Pomerium configuration to use the generated wildcard certificate and its private key for server-side TLS. Set the paths according to the files produced by mkcert. Input: path to .pem and .pem-key files. Required for establishing downstream TLS.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/certificates-and-tls.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncertificate_file: '_wildcard.localhost.pomerium.io.pem'\ncertificate_key_file: '_wildcard.localhost.pomerium.io-key.pem'\n\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Authority from a String in Pomerium using YAML\nDESCRIPTION: This YAML snippet configures the 'certificate_authority' value for Pomerium using a base64-encoded certificate authority string. The setting augments the system's trusted CAs for outbound mTLS or TLS connections. Only one string may be set per config file, and the value is optional.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/certificates.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncertificate_authority: 'base64-encoded-string'\n```\n\n----------------------------------------\n\nTITLE: Creating GitLab Docker Volumes\nDESCRIPTION: Commands to create persistent data volumes for GitLab Docker container.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /srv/gitlab #Adjust the path based on your common Docker volume location.\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /srv/gitlab/{config,data,logs}\n```\n\n----------------------------------------\n\nTITLE: Generating an ES256 Signing Key using OpenSSL\nDESCRIPTION: Bash commands demonstrating the generation of an P-256 Elliptic Curve (EC) private key suitable for the ES256 signing algorithm using `openssl`. The first command generates the key and saves it to `ec_private.pem`. The second command displays the base64 encoded content of the generated private key file, which can be used for Pomerium configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/signing-key.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Generates an P-256 (ES256) signing key\nopenssl ecparam  -genkey  -name prime256v1  -noout  -out ec_private.pem\n# careful! this will output your private key in terminal\ncat ec_private.pem | base64\n```\n\n----------------------------------------\n\nTITLE: Receiving New Cluster Refresh Token from API Response\nDESCRIPTION: This JSON object represents the successful response payload received after calling the cluster token rotation API endpoint. It contains a single key, `refreshToken`, whose value is the newly generated cluster token required for the cluster to authenticate and connect to the Pomerium Zero control plane.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/clusters.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"refreshToken\": \"token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Flags via Environment Variable - Pomerium - Bash\nDESCRIPTION: This Bash snippet shows how to set the same runtime flag using the RUNTIME_FLAGS environment variable for Pomerium Core. It uses a JSON-formatted string to assign 'match_any_incoming_port' to false. Requires a shell environment and Pomerium configured to read environment variables. The key parameter is a single environment variable with a JSON object; used in container or process environments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/runtime-flags.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRUNTIME_FLAGS='{\"match_any_incoming_port\": false}'\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring XFF Number of Trusted Hops (YAML/Bash)\nDESCRIPTION: Sets the `xff_num_trusted_hops` option using either the YAML configuration file or an environment variable. This setting dictates how many hops (proxies) Pomerium should trust when determining the original client IP from the incoming XFF header. Setting it to a non-zero value also makes Pomerium trust the incoming `X-Forwarded-Proto` header.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/x-forwarded-for-settings.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nxff_num_trusted_hops: 2\n```\n\nLANGUAGE: bash\nCODE:\n```\nXFF_NUM_TRUSTED_HOPS=2\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Response Headers - YAML - yaml\nDESCRIPTION: This YAML snippet configures Pomerium to add a custom 'X-Test' HTTP header to all responses. The 'set_response_headers' mapping specifies header key-value pairs. Suitable for YAML-based configuration files and supports multiline values. Requires Pomerium reading YAML configurations. Input is a YAML document and output is the global HTTP response header setting. No advanced dependencies or constraints.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/set-response-headers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nset_response_headers:\\n  X-Test: X-Value\n```\n\n----------------------------------------\n\nTITLE: Single Wildcard Certificate Configuration\nDESCRIPTION: Configuration for setting a single certificate covering multiple domains or wildcard subdomains.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncertificate_file: '$HOME/.acme.sh/*.example.com/fullchain.crt'\ncertificate_key: '$HOME/.acme.sh/*.example.com/*.example.com.key'\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Service in Docker Compose\nDESCRIPTION: Docker Compose configuration for setting up a Grafana service that will be secured by Pomerium. Includes network configuration, port mapping, and volume mounting for data persistence.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-build-routes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngrafana:\n  image: grafana/grafana:latest\n  ports:\n    - 3000:3000\n  networks:\n    main: {}\n  volumes:\n    - ./grafana-storage:/var/lib/grafana\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus ServiceMonitor\nDESCRIPTION: YAML configuration for setting up Prometheus metrics monitoring for Pomerium\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/install.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: pomerium\n  namespace: pomerium\nspec:\n  endpoints:\n    - port: metrics\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: pomerium\n```\n\n----------------------------------------\n\nTITLE: Updating Pomerium Zero on Red Hat-based Linux Systems\nDESCRIPTION: These commands check for updates and install the latest version of Pomerium on Red Hat-based Linux systems.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/cloud/install.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo yum list updates\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo yum update pomerium\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium API Route Authorization for Service Account\nDESCRIPTION: This YAML snippet shows how to configure the Pomerium API route to authorize access for a specific service account. It uses a user-based allow rule.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure-terraform.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- allow:\n    or:\n      - user:\n          is: 'bootstrap-014e587b-3f4b-4fcf-90a9-f6ecdf8154af.pomerium'\n```\n\n----------------------------------------\n\nTITLE: Downloading Pomerium Binary with curl\nDESCRIPTION: Downloads and extracts the Pomerium binary for a specific operating system and architecture using curl.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/core.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nARCH=[amd64 or arm64]\nOS=[linux or darwin]\nVERSION=[desired version]\ncurl -L https://github.com/pomerium/pomerium/releases/download/${VERSION}/pomerium-${OS}-${ARCH}.tar.gz \\\n    | tar -z -x\n```\n\n----------------------------------------\n\nTITLE: Downloading JWKS for JWT Authentication - Bash (curl)\nDESCRIPTION: This Bash snippet demonstrates using curl to download the jwks.json signing key from a Pomerium Authenticate service, saving it locally for use with an upstream service (such as Grafana). The purpose is to work around certificate trust issues by using a local key file rather than fetching remote JWKS URLs at runtime. Requires curl to be installed. Specify the authenticate service URL as needed.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://grafana.localhost.pomerium.io/.well-known/pomerium/jwks.json > /etc/grafana/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream mTLS CRL Inline in Pomerium (YAML)\nDESCRIPTION: This snippet demonstrates configuring the downstream mTLS Certificate Revocation List (CRL) bundle inline within the Pomerium YAML configuration file using the `crl` key under `downstream_mtls`. The value must be a base64-encoded string containing the PEM-encoded CRL bundle. Note that CRL support is a beta feature.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndownstream_mtls:\n  crl: LS0tLS1CRUdJTiBYNTA5IENSTC0tLS0tCk...\n```\n\n----------------------------------------\n\nTITLE: Providing Pomerium's Client Certificate for Upstream mTLS - YAML\nDESCRIPTION: Adds parameters to the Pomerium route allowing it to present a client certificate and private key when connecting to the upstream server. Input fields must point to the correct PEM files. Required for upstream servers that enforce client validation via mTLS.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/certificates-and-tls.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntls_client_cert_file: /etc/pomerium/pomerium@localhost-client.pem\ntls_client_key_file: /etc/pomerium/pomerium@localhost-client-key.pem\n\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS Skip Verification in Pomerium (YAML)\nDESCRIPTION: This example demonstrates disabling certificate verification for upstream TLS connections by setting `tls_skip_verify: true` in the Pomerium YAML configuration. When enabled, Pomerium does not validate the certificate chain or hostname of the upstream, which is useful for testing but insecure for production. The input is a boolean value, defaulting to false.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/tls.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntls_skip_verify: true\\n\n```\n\n----------------------------------------\n\nTITLE: Importing Client Certificate to macOS Keychain\nDESCRIPTION: Command to import a client certificate into the macOS login keychain with the password 'changeit'.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/device-context/fleetdm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsecurity import <client-cert-location>  -A -P changeit -k ~/Library/Keychains/login.keychain-db\n```\n\n----------------------------------------\n\nTITLE: Example Access Log Entry with xff_num_trusted_hops: 1\nDESCRIPTION: An example access log entry in JSON format corresponding to the configuration where `xff_num_trusted_hops` is `1`. The `ip` field now shows the IP address derived by trusting one hop from the XFF header (`192.0.5.1`).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/x-forwarded-for-settings.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"service\": \"envoy\",\n  \"forwarded-for\": \"192.0.5.1,10.1.2.3\",\n  // highlight-next-line\n  \"ip\": \"192.0.5.1\",\n  \"method\": \"GET\",\n  \"path\": \"/\",\n  \"time\": \"2024-07-08T16:42:48-07:00\",\n  \"message\": \"http-request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Origin Request Test Script (JavaScript)\nDESCRIPTION: A JavaScript module that performs a cross-origin POST request to test CORS configuration. This script can be used with the HTML template to verify CORS settings in Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  const result = await fetch('https://api.localhost.pomerium.io', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n    },\n  });\n  const json = await result.json();\n  console.log('RESULT', json);\n})();\n```\n\n----------------------------------------\n\nTITLE: Setting Authorize Service URL via Environment Variable - Bash\nDESCRIPTION: Set the 'AUTHORIZE_SERVICE_URL' environment variable to specify the internal Authorize Service endpoint for gRPC communication. This value should resolve to an internal, routable network endpoint. Especially necessary when a load balancer or network policies prevent direct internal routing by domain name.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nAUTHORIZE_SERVICE_URL=https://pomerium-authorize-service.default.svc.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Tunnel with pomerium-cli\nDESCRIPTION: Command to establish a TCP tunnel to a MySQL service using pomerium-cli, listening on port 3306.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/mysql.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli tcp aService.corp.example.com:3306 --listen :3306\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard for Override Certificate Name in Pomerium YAML\nDESCRIPTION: This YAML configuration example shows how to use a wildcard (`*.corp.example.com`) for the `override_certificate_name` setting in Pomerium. This allows Pomerium to accept TLS certificates matching any subdomain under `corp.example.com` during SNI verification when communicating with upstream services, providing flexibility when multiple services share a wildcard certificate.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/override-certificate-name.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# wildcard support\noverride_certificate_name: *.corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Multiple Upstream Servers Configuration\nDESCRIPTION: Configuration for load balancing between multiple upstream servers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://myapp.localhost.pomerium.io\n    to:\n      - http://myapp-srv-1:8080\n      - http://myapp-srv-2:8080\n```\n\n----------------------------------------\n\nTITLE: Managing Pomerium TCP Tunnels with Bash Script\nDESCRIPTION: A shell script that creates and terminates Pomerium CLI TCP tunnels. The script accepts start/stop commands followed by a Pomerium route and local port parameters, and manages the lifecycle of the tunnel process.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/tcp/pomerium-tunnel.sh.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nscript_name=\"$(basename $0)\"\n\nif [ $# -lt 3 ]\n then\n    echo \"Usage: $script_name start | stop  POMERIUM_ROUTE LOCAL_PORT\"\n    exit\nfi\n\ncase \"$1\" in\n\nstart)\n  echo \"Starting Pomerium Tunnel to $2\"\n  pomerium-cli tcp $2 --listen $3 &\n  ;;\nstop)\n  echo \"Stopping Pomerium tunnel to $3\"\n  kill $(pgrep -f \"pomerium-cli tcp $2 --listen $3\")\n ;;\n*)\n  echo \"Did not understand your argument, please use start|stop\"\n  ;;\n\nesac\n```\n\n----------------------------------------\n\nTITLE: Remove Specific Request Headers in Core Configuration - YAML\nDESCRIPTION: This YAML array configures Pomerium to strip specific headers from proxied requests, enhancing user privacy or reducing data exposure to upstream apps. The block can be part of a route or global configuration. Only the named headers will be removed; all others remain. No extra dependencies beyond Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://verify.corp.example.com\n  to: https://verify.pomerium.com\n  policy:\n    - allow:\n        or:\n          - email:\n              is: user@example.com\n  remove_request_headers:\n    - X-Email\n    - X-Username\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in Grafana - INI\nDESCRIPTION: This ini-style snippet configures Grafana to enable JWT authentication using a downloaded Pomerium signing key. It defines settings like the authentication header, email claim, path to the local jwks.json file, and token cache duration. These parameters should be added to the [auth.jwt] section of Grafana's configuration file to ensure the service uses the static key for verifying JWT tokens instead of fetching remote keys, which can mitigate certificate trust issues.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[auth.jwt]\nenabled = true\nheader_name = X-Pomerium-Jwt-Assertion\nemail_claim = email\njwk_set_file = /etc/grafana/jwks.json\ncache_ttl = 60m\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticate Callback Path in Kubernetes Config (YAML)\nDESCRIPTION: This YAML snippet illustrates how to configure the authenticate callback path within a Pomerium Kubernetes deployment, likely through a Helm chart's values or a similar configuration mechanism. It sets the `authenticate.callbackPath` parameter to specify the custom redirect URI for the identity provider. The default value is `/oauth2/callback`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authenticate-callback-path.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate:\n  callbackPath: /custom/callback\n```\n\n----------------------------------------\n\nTITLE: Configuring Idle Timeout in Pomerium (YAML)\nDESCRIPTION: This YAML snippet sets the idle timeout for server connections in Pomerium's Core configuration using the 'timeout_idle' key. It determines the period after which inactive connections are closed, based on the provided duration string.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/global-timeouts.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntimeout_idle: 5m\n\n```\n\n----------------------------------------\n\nTITLE: Using OpenID Connect Endpoint URL for Pomerium Provider URL - Bash\nDESCRIPTION: This snippet demonstrates how to extract the appropriate provider URL for Pomerium based on the OpenID Connect metadata document URL provided by Microsoft Entra ID. The example highlights the difference between the metadata document URL (ending in \"/.well-known/openid-configuration\") and the provider URL (ending at the tenant path). No dependencies beyond familiarity with provider configuration are necessary. The input is the OIDC metadata URL, and the output is the properly formatted provider URL for Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-identity/azure.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://login.microsoftonline.com/0303f438-3c5c-4190-9854-08d3eb31bd9f/v2.0/.well-known/openid-configuration`\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://login.microsoftonline.com/0303f438-3c5c-4190-9854-08d3eb31bd9f/v2.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom ACME CA Directory in Pomerium Config (YAML)\nDESCRIPTION: Sets the ACME Certificate Authority directory URL using the `autocert_ca` key in a Pomerium YAML configuration file. This example configures Pomerium to use ZeroSSL's ACME endpoint instead of the default Let's Encrypt. Setting this overrides the `autocert_use_staging` setting if it was configured.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nautocert_ca: https://acme.zerossl.com/v2/DV90\n```\n\n----------------------------------------\n\nTITLE: Enabling Autocert Feature via Environment Variable (Bash)\nDESCRIPTION: Enables Pomerium's automatic TLS certificate management feature using the `AUTOCERT` environment variable. Setting it to `TRUE` activates the feature. This method is often used in containerized or scripted deployments. Requires corresponding challenge setup (HTTP-01 or TLS-ALPN-01).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTOCERT=TRUE\n```\n\n----------------------------------------\n\nTITLE: Installing Python Enterprise Client Library - Bash\nDESCRIPTION: Installs the official Pomerium Enterprise Python client directly from the GitHub repository using pip3. Supports direct integration of the library for interacting with the gRPC API in Python scripts. Requires Python 3.x and pip, and network access to GitHub.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-enterprise.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install git+https://git@github.com/pomerium/enterprise-client-python\\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Istio Sidecar Injection\nDESCRIPTION: Shell command to check if Istio sidecar has been injected into a pod, showing two containers running in the pod.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/istio.mdx#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get pods\nNAME                                           READY   STATUS    RESTARTS   AGE\n...\nnginx-6955473668-cxprp                         2/2     Running   0          19s\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Pomerium and Open WebUI\nDESCRIPTION: This Docker Compose configuration sets up Pomerium and Open WebUI services. It includes environment variables for Pomerium Zero authentication and Open WebUI settings, as well as network and volume configurations for data persistence and service communication.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/llm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.9'\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    ports:\n      - 443:443\n    restart: always\n    environment:\n      POMERIUM_ZERO_TOKEN: '<YOUR_CLUSTER_TOKEN>'\n      XDG_CACHE_HOME: /var/cache\n    volumes:\n      - pomerium-cache:/var/cache\n    networks:\n      main:\n        aliases:\n          - authenticate.<YOUR_CLUSTER_SUBDOMAIN>.pomerium.app\n\n  openwebui:\n    image: ghcr.io/open-webui/open-webui:main\n    environment:\n      HOST: '0.0.0.0'\n      OLLAMA_HOST: '0.0.0.0'\n      WEBUI_URL: 'https://llm.your-domain.pomerium.app'\n      WEBUI_AUTH_TRUSTED_EMAIL_HEADER: 'X-Pomerium-Claim-Email'\n      WEBUI_AUTH: 'False'\n    ports:\n      - 3000:8080\n    volumes:\n      - open-webui-data:/app/backend/data\n    restart: always\n    networks:\n      main: {}\n\nnetworks:\n  main:\n\nvolumes:\n  pomerium-cache:\n  open-webui-data:\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Format via Pomerium YAML\nDESCRIPTION: Provides an example of setting `bearer_token_format` to `idp_access_token` within Pomerium's YAML configuration file. This instructs Pomerium to interpret the bearer token as an IdP-issued access token.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/bearer-token-format.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbearer_token_format: idp_access_token\n```\n\n----------------------------------------\n\nTITLE: Example XFF Header with skip_xff_append: false (Default)\nDESCRIPTION: Illustrates the value of the `X-Forwarded-For` header sent to the upstream service when `skip_xff_append` is `false` (default). Pomerium appends the IP of the direct downstream client (e.g., a load balancer `10.1.2.3`) to the list received (`192.0.5.1`).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/x-forwarded-for-settings.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nX-Forwarded-For: 192.0.5.1,10.1.2.3\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL via Local Tunnel\nDESCRIPTION: Command to connect to MySQL through the established tunnel using the mysql client.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/mysql.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql -h 127.0.0.1 -u USER -p\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Pomerium Kubernetes (YAML)\nDESCRIPTION: This snippet shows how to set custom response headers in Pomerium when using Kubernetes. It uses an ingress annotation to add an X-Test header with a value of X-Value.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/set_response_headers: |\n  X-Test: X-Value\n```\n\n----------------------------------------\n\nTITLE: Passive Health Check Configuration\nDESCRIPTION: Configuration for passive health checking using outlier detection.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://myapp.localhost.pomerium.io\n    to:\n      - http://myapp-srv-1:8080\n      - http://myapp-srv-2:8080\n    outlier_detection: {}\n```\n\n----------------------------------------\n\nTITLE: Listing Routes using Pomerium CLI\nDESCRIPTION: Command to list available routes using the Pomerium CLI tool. The command requires the Pomerium domain URL as an argument.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routes-portal.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli routes list https://<your-pomerium-domain>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Response Headers using Kubernetes Annotation - yaml\nDESCRIPTION: This snippet demonstrates how to configure HTTP response headers via Kubernetes ingress annotations for Pomerium. Using the 'ingress.pomerium.io/set_response_headers' annotation, you can declare header mappings directly in the resource manifest. This is intended for Kubernetes deployments using annotation-based configuration. Input is a YAML resource manifest; output is global response header enforcement in the managed ingress. Dependencies include Kubernetes, Pomerium, and the ingress controller.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/set-response-headers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/set_response_headers: |\\n  X-Test: X-Value\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Structure Example\nDESCRIPTION: Example of a JWT payload showing standard claims and user information that Pomerium forwards to authenticated services.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-single-sign-on.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aud\": \"verify.trusted-dog-1049.pomerium.app\",\n  \"email\": \"user@example.com\",\n  \"exp\": 1713474536,\n  \"groups\": [],\n  \"iat\": 1713474228,\n  \"iss\": \"verify.trusted-dog-1049.pomerium.app\",\n  \"jti\": \"9d1da135-223a-4f6c-8524-cfb1e4fe0452\",\n  \"name\": \"John Doe\",\n  \"sid\": \"9d1da135-223a-4f6c-8524-cfb1e4fe0452\",\n  \"sub\": \"9c2de20b-7b02-4e48-9f12-2e4a3d57bd8c\",\n  \"user\": \"9c2de20b-7b02-4e48-9f12-2e4a3d57bd8c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating cert-manager Issuer Configuration\nDESCRIPTION: YAML configuration for creating a cert-manager CA issuer in the Pomerium namespace using a local CA root certificate.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/helm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: pomerium-issuer\n  namespace: pomerium\nspec:\n  ca:\n    secretName: pomerium-tls-ca\n```\n\n----------------------------------------\n\nTITLE: Generating Wildcard Certificates\nDESCRIPTION: Command to generate wildcard certificates for localhost domains using mkcert.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/tcp-routes.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkcert \"*.localhost.pomerium.io\"\n```\n\n----------------------------------------\n\nTITLE: Example Well Known IP Range Data Structure (JSON)\nDESCRIPTION: Illustrates the JSON format provided by the Well Known IP Ranges data source. Each object represents an IP CIDR block and includes its ID, Autonomous System (AS) number, country code, and AS name. The `$index` field indicates the key used for indexing, which is the CIDR block.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/ip-ranges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"$index\": {\"cidr\": \"1.0.0.0/24\"},\n    \"id\": \"1.0.0.0/24\",\n    \"as_number\": \"13335\",\n    \"country_code\": \"US\",\n    \"as_name\": \"CLOUDFLARENET\"\n  },\n  {\n    \"$index\": {\"cidr\": \"1.0.4.0/23\"},\n    \"id\": \"1.0.4.0/23\",\n    \"as_number\": \"38803\",\n    \"country_code\": \"AU\",\n    \"as_name\": \"WPL-AS-AP\"\n  },\n  {\n    \"$index\": {\"cidr\": \"1.0.6.0/23\"},\n    \"id\": \"1.0.6.0/23\",\n    \"as_number\": \"38803\",\n    \"country_code\": \"AU\",\n    \"as_name\": \"WPL-AS-AP\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Autocert EAB Key ID via Environment Variable (Bash)\nDESCRIPTION: Configures the External Account Binding (EAB) Key Identifier using the `AUTOCERT_EAB_KEY_ID` environment variable. This parameter is necessary for ACME CAs employing EAB. It must be accompanied by the `AUTOCERT_EAB_MAC_KEY` environment variable.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nAUTOCERT_EAB_KEY_ID=EAB_KID\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto TLS via Environment Variable for Pomerium Core\nDESCRIPTION: This Bash snippet demonstrates setting the `TLS_DERIVE` environment variable to configure Auto TLS in Pomerium Core. This optional setting achieves the same result as the YAML configuration, enabling automatic certificate derivation using the specified FQDN.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/tls-derive.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nTLS_DERIVE=www.example.domain.com\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Protocol via Kubernetes Configuration in Pomerium\nDESCRIPTION: Sets the `useProxyProtocol` parameter to `true` within the Pomerium Kubernetes configuration (likely within a Custom Resource Definition). This instructs Pomerium deployed in Kubernetes to require the HAProxy proxy protocol on incoming connections. This is an optional boolean parameter, defaulting to `false`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/use-proxy-protocol.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nuseProxyProtocol: true\n```\n```\n\n----------------------------------------\n\nTITLE: Example Pomerium Authorize Log Entry (Including Custom Headers)\nDESCRIPTION: This JSON log entry shows the result of configuring `authorize_log_fields` to log specific custom headers (`Cookie`, `Content-Type`). The `headers` field in the log contains only the specified headers and their values, providing targeted header information without logging all headers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"service\": \"authorize\",\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Cookie\": \"_pomerium=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhYnJva2VyX3JlY29yZF92ZXJzaW9uIjozMTQwLCJkYXRhYnJva2VyX3NlcnZlcl92ZXJzaW9uIjo3OTM4MDg0ODcsImlhdCI6MTY5MTQxODM5MiwianRpIjoiMTcyZTQ1NTEtZTllYi00ZmUwLWE2Y2UtMjQ0NWM3NjA0MGJkIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMTU0MjA2NjQ3MjYxODMzMjM3NTgifQ.ktq6oFtiBiGwNsU-5DQzLNTszexFhyNl1Iz4kc_Uq2M\"\n  },\n  \"allow\": true,\n  \"allow-why-true\": [\"domain-ok\"],\n  \"deny\": false,\n  \"deny-why-false\": [],\n  \"time\": \"2023-08-07T10:40:38-04:00\",\n  \"message\": \"authorize check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pomerium CLI TCP Command Syntax\nDESCRIPTION: Basic syntax for the Pomerium CLI tcp command with destination and flags.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npomerium-cli tcp [destination] [flags]\n```\n\n----------------------------------------\n\nTITLE: Public Key Format for JWT Verification\nDESCRIPTION: Example of an EC public key format used for JWT signature verification.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/jwt-verification.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE+QmjfJCj/w9+9HkD5em9HdXQ3ubP\nHHucN19M9rqGNOxJSFdwTx/hauY/qQRYdtaZgTJDQfRaT6CZObwRa9vMsg==\n-----END PUBLIC KEY-----\n```\n\n----------------------------------------\n\nTITLE: Running Pomerium Programmatic Access Python Example - Bash\nDESCRIPTION: This bash code provides an example command-line invocation of a Python script that demonstrates how to handle holistic OAuth2 programmatic login and callback for Pomerium. The script implements a local HTTP callback server that listens for the JWT in the query parameters submitted by Pomerium. Prerequisites: Python 3, the example script, and necessary packages. Input: destination URL for authenticated header-based requests; Output: handled JWT suitable for automated authorization.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/programmatic-access.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 scripts/programmatic_access.py \\\n\t--dst https://verify.example.com/headers\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis via Tunneled Connection\nDESCRIPTION: Command to connect to the Redis server through the Pomerium tunnel using redis-cli. It points to localhost and the specified port.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/redis.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli -h localhost -p 6379\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Codec Type via YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the `codecType` parameter within a Kubernetes deployment of Pomerium, likely within a Helm chart's `values.yaml` or a Custom Resource definition. Setting it to `http2` configures Pomerium to use only HTTP/2 for downstream connections within the Kubernetes environment. This parameter is optional and defaults to `auto`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/codec-type.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ncodecType: http2\n```\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User for Specific Host\nDESCRIPTION: SQL commands to create a MySQL user restricted to connections from a specific Pomerium host.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/mysql.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER 'user'@'pomerium.local' IDENTIFIED BY 'some_pass';\nGRANT ALL PRIVILEGES ON *.* TO 'user'@'pomerium.local'\n```\n\n----------------------------------------\n\nTITLE: Connecting to the Proxied SSH Server - Bash\nDESCRIPTION: This command connects to the SSH service on localhost port 2222, which is proxied via Pomerium. The 'user' and port number should match the Docker Compose and Pomerium route configuration. This tests and completes the secure connection workflow to the SSH server.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-tcp-routes.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nssh user@localhost -p 2222\n```\n\n----------------------------------------\n\nTITLE: Using SSH ProxyCommand with Pomerium CLI (Bash)\nDESCRIPTION: Consolidates establishing the Pomerium TCP tunnel and the SSH connection into a single command. The `ssh` client's `ProxyCommand` option is used to execute `pomerium-cli tcp` dynamically for the connection. The `--listen -` flag tells `pomerium-cli` to use standard input/output for the proxy connection instead of listening on a local port. `%h` and `%p` are placeholders dynamically replaced by SSH with the target hostname and port (`ssh.localhost.pomerium.io` and `22`). Requires `pomerium-cli` and `ssh` client.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nssh -o ProxyCommand='pomerium-cli tcp --listen - %h:%p' ssh.localhost.pomerium.io\n```\n\n----------------------------------------\n\nTITLE: Envoy Admin Interface Configuration\nDESCRIPTION: YAML configurations for exposing the Envoy admin interface\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/install.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - github.com/pomerium/ingress-controller/config/default?ref=v0.29.0\n  - admin-service.yaml\n  - admin-ingress.yaml\npatches:\n  - patch: |-\n      - op: add\n        path: /spec/template/spec/containers/0/args/-\n        value: \"--debug-admin-addr=localhost:9901\"\n    target:\n      kind: Deployment\n      name: pomerium\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: envoy\nspec:\n  type: ExternalName\n  externalName: 'localhost'\n  ports:\n    - protocol: TCP\n      name: admin\n      port: 9901\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: envoy\nspec:\n  ingressClassName: pomerium\n  rules:\n    - host: 'envoy.localhost.pomerium.io'\n      http:\n        paths:\n          - pathType: Prefix\n            path: /\n            backend:\n              service:\n                name: envoy\n                port:\n                  name: admin\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH for Persistent Pomerium Tunneling\nDESCRIPTION: SSH configuration block to be added to the local SSH config file. It sets up a host alias that uses pomerium-cli to create a tunnel for all Git connections to a specific server.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/git.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHost git-tunnel\n  HostName git.corp.example.com\n  User git\n  ProxyCommand pomerium-cli tcp --listen - %h:%p\n```\n\n----------------------------------------\n\nTITLE: Extracting and Viewing Server Certificates - Bash (OpenSSL)\nDESCRIPTION: This Bash example uses openssl to connect to a remote service over TLS, extract, and print out the PEM-encoded certificate chain. sed is used to print only certificate blocks. Useful for debugging certificate authenticity and detecting potential man-in-the-middle attacks. Requires openssl and sed installed. Replace pomerium.io with your target host.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_client -servername pomerium.io -connect pomerium.io:443 </dev/null \\\n| sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'\n```\n\n----------------------------------------\n\nTITLE: Deploying Pomerium and Protected Application on Google Cloud Run - Bash\nDESCRIPTION: This Bash script automates the deployment of a protected app and Pomerium service on Google Cloud Run. Dependencies include the Google Cloud SDK (with the beta component), configured gcloud CLI with an active project, and envsubst for variable substitution. The script installs needed Cloud SDK components, retrieves the current project number, sets up DNS for the custom domain using a pre-existing zone file, deploys the 'hello' application, configures IAM bindings for secure invocation, maps domains, substitutes variables into a policy template, creates and manages a GCP secret, grants access to the compute service account, and finally deploys the Pomerium service with references to configuration and policy. Limitations: Assumes pre-created DNS zone and zonefile, requires correct permissions and Cloud Run quota. Input: None (runs as a script with pre-set configuration files: config.yaml and policy.template.yaml). Output: Deployed services accessible at mapped domains.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/cloudrun/deploy.sh.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Install gcloud beta\ngcloud components install beta\n\n# Capture current project number\nPROJECT=$(gcloud projects describe $(gcloud config get-value project) --format='get(projectNumber)')\n\n# Point a wildcard domain of *.cloudrun.pomerium.io to the cloudrun front end\ngcloud dns record-sets import --zone pomerium-io zonefile --zone-file-format\n\n# Deploy our protected application and associate a DNS name\ngcloud run deploy hello --image=gcr.io/cloudrun/hello --region us-central1 --platform managed --no-allow-unauthenticated\ngcloud run services add-iam-policy-binding hello --platform managed --region us-central1 \\\n    --member=serviceAccount:${PROJECT}-compute@developer.gserviceaccount.com \\\n    --role=roles/run.invoker\ngcloud beta run domain-mappings --platform managed --region us-central1 create --service=hello --domain hello-direct.cloudrun.pomerium.io\n\n# Rewrite policy file with unique 'hello' service URL\nHELLO_URL=$(gcloud run services describe hello --platform managed --region us-central1 --format 'value(status.address.url)') envsubst <policy.template.yaml >policy.yaml\n\n# Install our base configuration in a GCP secret\ngcloud secrets create --data-file config.yaml pomerium-config --replication-policy automatic\n\n# Grant the default compute account access to the secret\ngcloud secrets add-iam-policy-binding pomerium-config \\\n    --member=serviceAccount:${PROJECT}-compute@developer.gserviceaccount.com \\\n    --role=roles/secretmanager.secretAccessor\n\n# Deploy pomerium with policy and configuration references\ngcloud run deploy pomerium --region us-central1 --platform managed --allow-unauthenticated --max-instances 1 \\\n    --image=gcr.io/pomerium-io/pomerium:latest-cloudrun \\\n    --set-env-vars VALS_FILES=\"/pomerium/config.yaml:ref+gcpsecrets://${PROJECT}/pomerium-config\",POLICY=$(base64 policy.yaml)\n\n# Set domain mappings for the protected routes and authenticate\ngcloud beta run domain-mappings --platform managed --region us-central1 create --service=pomerium --domain hello.cloudrun.pomerium.io\ngcloud beta run domain-mappings --platform managed --region us-central1 create --service=pomerium --domain authn.cloudrun.pomerium.io\ngcloud beta run domain-mappings --platform managed --region us-central1 create --service=pomerium --domain httpbin.cloudrun.pomerium.io\n\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Listen Address - YAML - Pomerium\nDESCRIPTION: This YAML snippet shows how to set the 'address' parameter within a Pomerium configuration file, defining the address and port on which HTTP requests will be served. Ensure Pomerium loads this YAML file at startup. The \\\"address\\\" key expects a string representing the host and port (e.g., ':8443'). If omitted, ':443' is used by default.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/address.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naddress: ':8443'\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Protocol via Core YAML Configuration in Pomerium\nDESCRIPTION: Sets the `use_proxy_protocol` configuration key to `true` in Pomerium's YAML configuration file. This instructs Pomerium Core to require the HAProxy proxy protocol on incoming connections. This is an optional boolean setting, defaulting to `false`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/use-proxy-protocol.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nuse_proxy_protocol: true\n```\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Pomerium and TiddlyWiki (YAML)\nDESCRIPTION: This Docker Compose configuration sets up Pomerium and TiddlyWiki services, including the initialization of TiddlyWiki and configuration of the authenticated user header.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/tiddlywiki.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n\n  tiddlywiki_init:\n    image: elasticdog/tiddlywiki:latest\n    volumes:\n      - ./wiki:/tiddlywiki\n    command: ['mywiki', '--init', 'server']\n\n  tiddlywiki:\n    image: elasticdog/tiddlywiki:latest\n    ports:\n      - 8080:8080\n    volumes:\n      - ./wiki:/tiddlywiki\n    command:\n      - mywiki\n      - --listen\n      - host=0.0.0.0\n      - authenticated-user-header=X-Pomerium-Claim-Email\n    depends_on:\n      - tiddlywiki_init\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository Using SSH Host Alias\nDESCRIPTION: Git clone command that uses the SSH host alias defined in the SSH config. This allows for automatic tunneling through Pomerium for all Git operations.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/git.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@git-tunnel:userName/projectName\n```\n\n----------------------------------------\n\nTITLE: Shared Secret Mismatch Error Log - JSON (Pomerium Core)\nDESCRIPTION: This JSON-formatted log snippet shows how Pomerium Core logs a shared secret authentication error between its services. It includes keys like level, syncer_id, error type, and timestamp. Useful for identifying mismatches in configuration when coordinating multiple Pomerium components. The example is from runtime log output.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"error\",\n  \"syncer_id\": \"authorize\",\n  \"syncer_type\": \"\",\n  \"error\": \"rpc error: code = Unauthenticated desc = invalid JWT: go-jose/go-jose: error in cryptographic primitive\",\n  \"time\": \"2022-03-22T07:26:14-04:00\",\n  \"message\": \"sync\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SSH Connection Through Tunnel\nDESCRIPTION: Connects to SSH service through the established tunnel on localhost\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ssh.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nssh user@localhost -p 2202\n```\n\n----------------------------------------\n\nTITLE: Enabling Websocket Proxying in Pomerium Core (YAML)\nDESCRIPTION: Sets the `allow_websockets` flag to `true` in the Pomerium configuration file (YAML). This allows Pomerium to proxy long-lived websocket connections. It's important to use this setting with caution as it disables global timeouts for these connections, potentially increasing vulnerability to DoS attacks.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/timeouts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nallow_websockets: true\n```\n\n----------------------------------------\n\nTITLE: Pomerium QUIC Configuration - YAML\nDESCRIPTION: YAML configuration to enable QUIC protocol in Pomerium by setting the codec_type to http3 for improved UDP tunneling performance.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/factorio.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncodec_type: http3\n```\n\n----------------------------------------\n\nTITLE: Testing Pomerium CLI Installation - Shell\nDESCRIPTION: This snippet demonstrates invoking the Pomerium CLI to confirm successful installation. No parameters are required; running 'pomerium-cli' displays version and available subcommands, which is critical before proceeding. This confirms that the CLI is properly installed on the user's system and available in the system PATH.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-tcp-routes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pomerium-cli\nUsage:\n  pomerium-cli [command]\n\nAvailable Commands:\n  cache       commands for working with the cache\n  completion  Generate the autocompletion script for the specified shell\n  help        Help about any command\n  k8s         commands for the kubernetes credential plugin\n  tcp         creates a TCP tunnel through Pomerium\n  version     version\n\nFlags:\n  -h, --help      help for pomerium-cli\n  -v, --version   version for pomerium-cli\n\nUse \"pomerium-cli [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Configuring IdP Scopes in Pomerium via Environment Variable (bash)\nDESCRIPTION: Sets OAuth 2.0 scopes for Pomerium's built-in identity providers using an environment variable. Requires Pomerium to be deployed with environment variable support in the runtime environment. 'IDP_SCOPES' accepts a comma-separated list of scope strings, reflecting what the application will request in tokens. Inputs are Bash variable assignments and outputs are reflected in Pomerium's effective requested scopes for the IdP.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nIDP_SCOPES=openid, profile, offline_access, email\n```\n\n----------------------------------------\n\nTITLE: Fetching Pomerium JWKS Endpoint using cURL and jq\nDESCRIPTION: Bash command using `curl` to retrieve the JSON Web Key Set (JWKS) from Pomerium's well-known endpoint (`/.well-known/pomerium/jwks.json`). The output is piped to `jq` for pretty-printing the JSON response, which contains the public key(s) corresponding to the configured signing key(s).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/signing-key.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://route.int.example.com/.well-known/pomerium/jwks.json | jq\n```\n\n----------------------------------------\n\nTITLE: Configuring External Prometheus Targets\nDESCRIPTION: YAML configuration for Prometheus to scrape metrics from Pomerium Core and Enterprise instances.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure-metrics.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: 'Pomerium'\n  scrape_interval: 30s\n  scrape_timeout: 5s\n  static_configs:\n     - targets: ['127.0.0.1:9091']\n- job_name: 'Pomerium Enterprise'\n  scrape_interval: 30s\n  scrape_timeout: 5s\n  static_configs:\n     - targets: ['127.0.0.1:9092']\n```\n\n----------------------------------------\n\nTITLE: Example CSV Format for Pomerium External Data Source\nDESCRIPTION: Demonstrates the CSV format accepted for external data sources. The first row must contain the field names (headers), and one column must be named 'id'. Subsequent rows represent individual records.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations.mdx#2025-04-23_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n```json title=\"example CSV\"\nid,user.id\nid1@example.com,user1\nid2@example.com,user2\nid3@example.com,user3\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Server Block for Pomerium Authentication\nDESCRIPTION: Sets up an Nginx server block to handle Pomerium authentication endpoints on port 443 with SSL certificates. Includes proxy configuration for forwarding requests to a Pomerium backend server and defines an upstream block to handle variable resolution in proxy_pass directives.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/nginx/pomerium.conf.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\n# Pomerium endpoint\nserver {\n    listen 443 ssl;\n    server_name  authenticate.localhost.pomerium.io fwdauth.localhost.pomerium.io;\n    ssl_certificate /etc/nginx/nginx.pem;\n    ssl_certificate_key /etc/nginx/nginx-key.pem;\n\n    location / {\n      proxy_pass http://pomerium;\n      include /etc/nginx/proxy.conf;\n    }\n}\n\n# Define an upstream so that we don't need resolvers when we use variables in proxy_pass directives\n# https://stackoverflow.com/questions/17685674/nginx-proxy-pass-with-remote-addr\nupstream pomerium {\n    server pomerium;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Redirect Address in YAML - Pomerium - YAML\nDESCRIPTION: This snippet demonstrates how to specify the http_redirect_addr property in a YAML configuration file for Pomerium, allowing HTTP to HTTPS redirection to occur on the given address. The value \":80\" sets the redirect server to listen on port 80 for incoming HTTP traffic. No additional dependencies are required other than Pomerium itself, and the key is optional; if omitted, no redirect server is started. Input is a YAML config file, and there is no explicit output except for the effect on server behavior.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/http-redirect-address.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_redirect_addr: :80\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticate Callback Path in Pomerium Core Config (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to set a custom authenticate callback path using the `authenticate_callback_path` key within the Pomerium core configuration file. This path specifies the endpoint where the identity provider will redirect the user after authentication. The default value is `/oauth2/callback`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authenticate-callback-path.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate_callback_path: '/custom/callback'\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS Upstream Allow Renegotiation in Pomerium (YAML)\nDESCRIPTION: This example sets `tls_upstream_allow_renegotiation: true` in the YAML config, allowing server-initiated renegotiation in upstream TLS connections for a route. This capability is generally discouraged due to security concerns but may be needed for certain legacy integrations. The parameter is a boolean, default is false.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/tls.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntls_upstream_allow_renegotiation: true\\n\n```\n\n----------------------------------------\n\nTITLE: Running Test Upstream OpenSSL Server with TLS - Bash\nDESCRIPTION: Launches an OpenSSL s_server process that listens for incoming TLS connections using a generated certificate and key. The server runs locally on port 44330 and returns test HTML pages for connections. No client certificate is required yet.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/certificates-and-tls.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_server \\\n  -key ./openssl.localhost-key.pem \\\n  -cert ./openssl.localhost.pem \\\n  -accept 44330 \\\n  -www\n\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Secret File Path in Pomerium Core YAML\nDESCRIPTION: This YAML snippet configures Pomerium Core to read the cookie secret from a specified file path using the `cookie_secret_file` parameter. This avoids embedding the secret directly in the configuration and integrates with secret management tools like Docker Swarm secrets.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ncookie_secret_file: '/run/secrets/POMERIUM_COOKIE_SECRET'\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Copy Certificate Bundle - Docker\nDESCRIPTION: This Dockerfile instruction exemplifies how to overwrite the container's certificate authority bundle with a custom cert bundle. This is one way to ensure a service, such as Pomerium Proxy, trusts an internal or private CA when running in a Docker environment. Place before starting your application in your Dockerfile. Requires multi-stage builds with builder stages.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_11\n\nLANGUAGE: docker\nCODE:\n```\nCOPY --from=builder /etc/ssl/certs/your-cert-bundle.crt /etc/ssl/certs/ca-certificates.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Databroker Internal Service URLs in YAML\nDESCRIPTION: YAML configuration example for specifying multiple Databroker internal service URLs. Shows how to define a list of service URLs that Pomerium can connect to.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndatabroker_internal_service_urls:\n  - http://localhost:5443\n  - http://service_url.com\n```\n\n----------------------------------------\n\nTITLE: Setting Route and Idle Timeouts via Kubernetes Ingress Annotations (YAML)\nDESCRIPTION: Configures both the `ingress.pomerium.io/timeout` and `ingress.pomerium.io/idle_timeout` annotations on a Kubernetes Ingress resource. This sets the overall connection timeout ('1m') and the maximum inactivity period ('5m') for the route, respectively, using Go Duration string format. This is useful for managing long-lived connections proxied via Ingress.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/timeouts.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/timeout: '1m'\ningress.pomerium.io/idle_timeout: '5m'\n```\n\n----------------------------------------\n\nTITLE: Downloading Factorio Server - Bash Commands\nDESCRIPTION: Commands to download and extract the Factorio headless server for Linux.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/factorio.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -o factorio.tar.xz https://factorio.com/get-download/stable/headless/linux64\ntar -xJf factorio.tar.xz\ncd factorio\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Cluster/Namespace Retrieval\nDESCRIPTION: This JSON snippet shows an example response from the `/clusters` endpoint. It's an array of cluster objects, each containing various details. The highlighted `namespaceId` is crucial for targeting configuration changes, like creating policies or routes, to a specific cluster.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-zero.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"autoDetectIpAddress\": \"47.35.228.147\",\n    \"createdAt\": \"2024-01-17T20:07:49.173932Z\",\n    \"domain\": \"trusted-dog-1049\",\n    \"fqdn\": \"trusted-dog-1049.pomerium.app\",\n    \"hasFailingHealthChecks\": true,\n    \"id\": \"bjQWGxKgPJRSZWSBWpgRWMpJbsv\",\n    \"manualOverrideIpAddress\": \"127.0.0.1\",\n    \"name\": \"trusted-dog-1049\",\n    \"namespaceId\": \"bjQWGxKgPJRSZWSBWpgRWMpJbsv\",\n    \"updatedAt\": \"2024-06-13T14:22:39.336616Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Server Mode in Pomerium Core using Bash Environment Variable\nDESCRIPTION: This bash snippet configures Pomerium Core to run in Insecure Server mode by setting the 'INSECURE_SERVER' environment variable to true. This is necessary if TLS certificates are not provided in other configuration settings. The environment variable approach is suitable for deployment environments where configuration is provided via shell or orchestration platforms. Input is an environment variable export; output is Insecure Server mode activated at process startup. Be aware that this disables all in-transit encryption and should only be used in strictly controlled, internal networks.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/insecure-server.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nINSECURE_SERVER=true\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Pomerium\nDESCRIPTION: Configuration to add custom headers to HTTP responses from upstream applications. This allows for adding security headers or custom information in responses.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://httpbin.localhost.pomerium.io\n    to: http://httpbin:80\n    set_response_headers:\n      X-SET-RESPONSE-HEADERS: X-VALUE\n    set_request_headers:\n      X-SET-REQUEST-HEADERS: X-VALUE\n    remove_request_headers:\n      - X-Pomerium-Claim-User\n      - X-Pomerium-Claim-Name\n```\n\n----------------------------------------\n\nTITLE: Setting Trusted Certificate Authority via Environment Variable\nDESCRIPTION: Sets a base64-encoded trusted certificate authority string using an environment variable. Provides an alternative to YAML configuration for specifying trusted CAs.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nAUTOCERT_TRUSTED_CA=base64-encoded-string\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Lookup Family in Pomerium Core (YAML)\nDESCRIPTION: This YAML snippet demonstrates setting the `dns_lookup_family` parameter within the Pomerium configuration file. In this example, it's set to `AUTO`, meaning the DNS resolver will first attempt an IPv6 lookup and fall back to IPv4 if necessary. This configuration applies to Pomerium Core deployments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/dns-lookup-family.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_lookup_family: AUTO\n```\n\n----------------------------------------\n\nTITLE: Configuring Cockpit WebService Settings\nDESCRIPTION: Configuration for Cockpit to accept proxied connections through Pomerium, setting allowed origins and protocol headers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/cockpit.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[WebService]\nOrigins = https://cockpit.localhost.pomerium.io wss://cockpit.localhost.pomerium.io\nProtocolHeader = X-Forwarded-Proto\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Redirect Address using Environment Variable - Pomerium - Bash\nDESCRIPTION: This snippet sets the HTTP_REDIRECT_ADDR environment variable in Bash for use by Pomerium, configuring the redirect server to listen on port 8080 for HTTP to HTTPS redirection. This approach requires Pomerium to read the environment variable on startup. The variable is optional; absence disables the redirect server. The expected input is an environment variable definition within a shell or Docker environment and there is no direct output other than the resulting behavior at runtime.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/http-redirect-address.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHTTP_REDIRECT_ADDR=:8080\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Client Timeout via YAML - Pomerium - YAML\nDESCRIPTION: This snippet sets the maximum allowed client timeout for Pomerium's gRPC upstream requests in the YAML config file. The parameter 'grpc_client_timeout' uses Go duration strings (e.g., '15s'), requiring familiarity with that format. This controls how long the gRPC client will wait and retry in case of upstream failure; setting this too low may cause premature timeouts, too high may delay error responses. Input is YAML config, output is underlying gRPC timeout enforcement.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/grpc.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngrpc_client_timeout: 15s\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana OTel Tracing Section (INI)\nDESCRIPTION: This INI snippet shows the section header within Grafana's configuration file (`grafana.ini`) where OpenTelemetry OTLP tracing settings are defined. Specific parameters like the OTLP endpoint address would typically follow under this section, allowing Grafana to send its traces to the same collector as Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/tracing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[tracing.opentelemetry.otlp]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Logs from Pomerium Deployment (Console)\nDESCRIPTION: Uses the `kubectl logs` command to fetch the standard output and standard error streams (logs) from the containers within the Kubernetes Deployment named 'pomerium'. This is a primary method for observing Pomerium's operational behavior, access logs, authorization decisions, and potential errors for troubleshooting.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nkubectl logs deployment/pomerium\n```\n\n----------------------------------------\n\nTITLE: Setting Bearer Token Format via Environment Variable (Bash)\nDESCRIPTION: Demonstrates setting the `BEARER_TOKEN_FORMAT` environment variable to `idp_access_token`. This achieves the same configuration as the YAML file method but through environment variables.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/bearer-token-format.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nBEARER_TOKEN_FORMAT=idp_access_token\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Routes for Single Domain Access\nDESCRIPTION: This YAML configuration sets up Pomerium routes to handle both the app and API on a single domain, avoiding cross-domain issues. It uses path-based routing to differentiate between the app and API.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://app.localhost.pomerium.io\n    prefix: /api\n    to: http://api:8000\n    allow_any_authenticated_user: true\n  - from: https://app.localhost.pomerium.io\n    to: http://app:8000\n    allow_any_authenticated_user: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Programmatic Redirect Whitelist using Environment Variable\nDESCRIPTION: This Bash snippet shows how to set the programmatic redirect domain whitelist using the `PROGRAMMATIC_REDIRECT_DOMAIN_WHITELIST` environment variable. Allowed domains are provided as a comma-separated string. This example configures `localhost` and `redirect-uri.com` as the permitted redirect domains, mirroring the YAML configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/programmatic-redirect-domain-whitelist.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nPROGRAMMATIC_REDIRECT_DOMAIN_WHITELIST=localhost,redirect-uri.com\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Server Mode in Pomerium Core using YAML Configuration\nDESCRIPTION: This snippet shows how to enable Insecure Server mode by setting the 'insecure_server' key to true in a YAML configuration file for Pomerium Core. The file must include this line if you have not specified TLS certificates via the 'certificates' option. Requires Pomerium to be configured via file-based configuration. Input is a YAML file; output is the activation of Insecure Server mode. This setting disables protocol encryption in transit and should only be used behind a TLS-terminating proxy. Always be cautious, as this exposes data to interception unless mitigated by external security layers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/insecure-server.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninsecure_server: true\n```\n\n----------------------------------------\n\nTITLE: Initiating Pomerium CLI TCP Tunnel with Specific Listener (Shell)\nDESCRIPTION: Starts the Pomerium CLI to create a TCP tunnel for the specified route (`ssh.localhost.pomerium.io:22`), explicitly instructing it to listen on a specific local port (`:2222`) using the `--listen` flag. The output confirms the listening address (`[::]:2222`). Requires `pomerium-cli` installed and a Pomerium route.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pomerium-cli tcp ssh.localhost.pomerium.io:22 --listen :2222\n2023/10/02 11:30:03 listening on [::]:2222\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Pomerium Zero\nDESCRIPTION: This command starts the Docker Compose configuration for Pomerium Zero in detached mode.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/cloud/install.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Certificate (File Path) via Environment Variable\nDESCRIPTION: Sets the `METRICS_CERTIFICATE_FILE` and `METRICS_CERTIFICATE_FILE_KEY` environment variables to specify the file paths for the PEM formatted TLS certificate and private key. This secures the Pomerium metrics endpoint using TLS and provides an alternative to embedding the certificate/key data directly in the configuration or as base64 environment variables.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/metrics.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nMETRICS_CERTIFICATE_FILE=/relative/file/location\nMETRICS_CERTIFICATE_FILE_KEY=/relative/file/location\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Tunnel with pomerium-cli\nDESCRIPTION: Creates a TCP tunnel to an SSH service using pomerium-cli, listening on port 2202 locally\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ssh.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli tcp aService.corp.example.com:22 --listen :2202\n```\n\n----------------------------------------\n\nTITLE: Configuring Authenticate Service URL in Kubernetes - YAML\nDESCRIPTION: This YAML snippet configures the Authenticate Service URL for Pomerium's Kubernetes deployment. The parameter 'authenticate.url' is set to point to the service's public endpoint, supporting integrations with external identity providers. No additional dependencies are required beyond a running Kubernetes cluster and Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticate:\n  url: https://authenticate.corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium Zero on Linux\nDESCRIPTION: This command downloads and runs an installation script for Pomerium Zero on Linux, setting the Pomerium Zero token as an environment variable.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/cloud/install.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://console.pomerium.app/install.bash | env POMERIUM_ZERO_TOKEN=<CLUSTER_TOKEN> bash -s install\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Docker Container\nDESCRIPTION: Dockerfile configuration for setting up a Node.js application container. Sets up the working directory, installs dependencies, and exposes port 5001.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-advanced-routes.mdx#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nWORKDIR /usr/src/app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE 5001\n\nCMD [\"node\", \"index.js\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Signout Redirect URL via YAML Configuration in Pomerium Core\nDESCRIPTION: This YAML snippet demonstrates how to set the `signout_redirect_url` configuration key in the Pomerium Core config file. This URL specifies where the user will be redirected after signing out. This setting is required for Pomerium Core.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/signout-redirect-url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsignout_redirect_url: https://signout-redirect-url.corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium QUIC Codec\nDESCRIPTION: Configuration to enable QUIC protocol by setting the codec_type to http3 for improved UDP tunneling performance.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ethr.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncodec_type: http3\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Secret via Environment Variable for Pomerium Core\nDESCRIPTION: This Bash snippet demonstrates configuring the Pomerium cookie secret using the `COOKIE_SECRET` environment variable. This provides an alternative to embedding the secret directly in the Pomerium Core YAML configuration file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCOOKIE_SECRET=tdkuWzUelRukP/6VYzopfh6kis7y5u5Ldl3MrIq9ZR0=\n```\n\n----------------------------------------\n\nTITLE: Generating a Wildcard Certificate for Local Domains using mkcert - Shell\nDESCRIPTION: This shell snippet generates a wildcard TLS certificate for domains ending in .localhost.pomerium.io using mkcert. mkcert must be installed in your environment. The output consists of a wildcard certificate and key PEM files required for Pomerium's internal communication. Input is the domain pattern; output is two PEM-encoded files, which are prerequisites for the rest of the Pomerium configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/configuration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkcert \"*.localhost.pomerium.io\"\n\n```\n\n----------------------------------------\n\nTITLE: Installing Go Enterprise Client Library - Bash\nDESCRIPTION: Installs the Pomerium Enterprise Go client using 'go install' with module-aware version control, fetching the latest library release suited for gRPC API interactions in Go projects. Requires Go 1.16+ and access to the GitHub repository.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-enterprise.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/pomerium/enterprise-client-go@latest\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium for Non-HTTP-Only Cookies\nDESCRIPTION: This YAML configuration disables HTTP-only cookies in Pomerium, allowing JavaScript access to the cookie for authentication purposes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ncookie_http_only: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Identity Provider Client Secret (Core)\nDESCRIPTION: Shows how to configure the Identity Provider Client Secret in Pomerium Core. This OAuth 2.0 Secret Identifier corresponds to the Client ID and is obtained from your identity provider. Use the `idp_client_secret` key in the YAML file or the `IDP_CLIENT_SECRET` environment variable. It's required unless `idp_client_secret_file` is specified.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nidp_client_secret: idp_client_secret\n```\n\nLANGUAGE: bash\nCODE:\n```\nIDP_CLIENT_SECRET=idp_client_secret\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration\nDESCRIPTION: The final state of the Docker Compose file that defines the Pomerium proxy, the verification service, and the Grafana service with their respective ports and volumes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-routes.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n  verify:\n    image: pomerium/verify:latest\n    expose:\n      - 8000\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger with Docker (Bash)\nDESCRIPTION: This Bash command runs the Jaeger all-in-one Docker container in detached mode. It maps ports required for Jaeger's UI (16686), OTLP/gRPC (4317), and OTLP/HTTP (4318), allowing Pomerium and other applications to send trace data to Jaeger for visualization.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/tracing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name jaeger \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  jaegertracing/jaeger:latest\n```\n\n----------------------------------------\n\nTITLE: Downloading JWKS for JWT Authentication - Bash (wget)\nDESCRIPTION: This alternative Bash snippet uses wget to accomplish the same as the curl version: downloading the Pomerium Authenticate service's jwks.json file for use in upstream services (e.g., Grafana). It is suitable for systems where wget is preferred or curl is unavailable. Update the destination file path and the authenticate server URL as necessary.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget -O /etc/grafana/jwks.json https://grafana.localhost.pomerium.io/.well-known/pomerium/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Client CA (Base64) for mTLS in Pomerium YAML\nDESCRIPTION: Sets the `metrics_client_ca` key in the Pomerium YAML configuration file using a base64 encoded PEM formatted CA certificate string. This enables mutual TLS (mTLS) authentication for the metrics endpoint, requiring clients (like Prometheus) to present a valid certificate signed by this CA. If not set, client certificates are not required.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/metrics.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_client_ca: base64-encoded-string\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Local Binary Execution in Shell\nDESCRIPTION: This snippet shows the expected console output when successfully starting the GeoIP datasource as a local binary using the command from the previous example. It indicates that the `ip2location` HTTP server has started, listening on the default address `:8080` and using the specified GeoIP database file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/geoip.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n<nil> INF starting ip2location http server address=:8080 file=../IP2LOCATION-LITE-DB1.CSV.ZIP\n```\n\n----------------------------------------\n\nTITLE: Adding HTTPBin Route to Pomerium\nDESCRIPTION: Basic Pomerium route configuration that maps a domain to the HTTPBin service. This establishes the initial connection between the client and HTTPBin through Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- from: https://httpbin.localhost.pomerium.io\n  to: http://httpbin:80\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQL Server via Local Tunnel\nDESCRIPTION: Command to connect to a Microsoft SQL server through the established local tunnel using sqlcmd. Uses SA (System Administrator) credentials with a password for authentication.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ms-sql.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P \"YOURSTRONGPASSWORD\"\n```\n\n----------------------------------------\n\nTITLE: Describing a Specific Kubernetes Ingress for Events (Bash)\nDESCRIPTION: Uses the `kubectl describe ingress` command to retrieve detailed information and event history for a specific Kubernetes Ingress resource, identified here as 'my-ingress'. This command helps diagnose issues related to a particular Ingress by showing events posted by the Pomerium Ingress controller during its processing.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe ingress/my-ingress\n```\n\n----------------------------------------\n\nTITLE: Setting Override Certificate Name via Environment Variable in Pomerium\nDESCRIPTION: This Bash command sets the `OVERRIDE_CERTIFICATE_NAME` environment variable to `authenticate.corp.example.com`. This provides an alternative method to configure the hostname Pomerium should use for TLS/SNI verification when connecting to upstream services, overriding the internally routed service hostname. It's equivalent to the `override_certificate_name` setting in the configuration file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/override-certificate-name.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOVERRIDE_CERTIFICATE_NAME=authenticate.corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Initiating a Basic Pomerium CLI TCP Tunnel (Shell)\nDESCRIPTION: Starts the Pomerium CLI to create a TCP tunnel for the specified route (`ssh.localhost.pomerium.io:22`). The CLI listens on a randomly assigned port on the local loopback address (127.0.0.1) and outputs the listening address and port. Requires `pomerium-cli` to be installed and a corresponding route configured in Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pomerium-cli tcp ssh.localhost.pomerium.io:22\n2023/10/02 11:29:22 listening on 127.0.0.1:53656\n```\n\n----------------------------------------\n\nTITLE: Specifying Shared Secret File via Environment Variable - Bash\nDESCRIPTION: This Bash snippet sets the SHARED_SECRET_FILE environment variable to specify the filesystem path to a file containing the Pomerium shared secret. The referenced file should exist, be secured with appropriate permissions, and contain a valid base64-encoded secret as required by Pomerium. This variable enables dynamic or externalized secret management, such as reading secrets from Docker or Kubernetes mounts.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/shared-secret.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSHARED_SECRET_FILE='/run/secrets/POMERIUM_SHARED_SECRET'\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for AdGuard Home\nDESCRIPTION: This Docker Compose configuration sets up an AdGuard Home container. It specifies volume mounts for persistent data, port mappings, and network settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/ad-guard.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# docker-compose.yaml\nadguard:\n  image: adguard/adguardhome:latest\n  volumes:\n    - adguard/workdir:/opt/adguardhome/work:rw\n    - adguard/confdir:/opt/adguardhome/conf:rw\n  ports:\n    - 53:53/udp\n  expose:\n    - 67\n    - 68\n    - 80\n    - 443\n    - 853\n    - 3000\n  restart: always\n```\n\n----------------------------------------\n\nTITLE: Running Pomerium with OTel Configuration (Bash)\nDESCRIPTION: This Bash command starts Pomerium with OpenTelemetry tracing enabled via environment variables. `OTEL_TRACES_EXPORTER=otlp` selects the OTLP exporter, and `OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317` directs traces to a Jaeger instance running locally and listening on the default gRPC port.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/tracing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ OTEL_TRACES_EXPORTER=otlp OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317 pomerium --config path/to/your/config.yaml`\n```\n\n----------------------------------------\n\nTITLE: Installing mkcert Certificate Authority\nDESCRIPTION: Command to install mkcert and generate a root CA certificate in the system's trust store.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/tcp-routes.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkcert -install\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Codec Type via YAML\nDESCRIPTION: This YAML snippet demonstrates how to set the `codec_type` directly in the Pomerium Core configuration file. Setting it to `http1` forces Pomerium to use only HTTP/1.1 for downstream connections.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/codec-type.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ncodec_type: http1\n```\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Pomerium Setup (YAML)\nDESCRIPTION: Docker Compose configuration that sets up Pomerium alongside the Verify service and Grafana. It mounts the Pomerium configuration file and exposes the necessary ports for each service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-policies.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n  verify:\n    image: pomerium/verify:latest\n    expose:\n      - 8000\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - 3000:3000\n    volumes:\n      - grafana-storage:/var/lib/grafana\nvolumes:\n  grafana-storage:\n```\n\n----------------------------------------\n\nTITLE: Simple Node.js Express Server with Multiple Routes\nDESCRIPTION: JavaScript code for a basic Node.js web server with two endpoints. This server is used to demonstrate Pomerium's routing capabilities for different paths.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  console.log(req);\n  res.send('Hello World!');\n});\n\napp.get('/admin', (req, res) => {\n  res.send('This is an admin only page');\n});\n\napp.listen(5001, () => console.log('Server is up and running'));\n```\n\n----------------------------------------\n\nTITLE: Node Server Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for the Node.js server, including network settings and port mapping.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-advanced-routes.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nnodeserver:\n  networks:\n    main: {}\n  build:\n    context: ./app\n  ports:\n    - 5001:5001\n```\n\n----------------------------------------\n\nTITLE: Disabling Certificate Chain Depth Limit in Pomerium YAML - YAML\nDESCRIPTION: Illustrates removing the certificate chain depth limit by setting `max_verify_depth` to 0 within the `downstream_mtls` section of a YAML config. This setting means Pomerium will not enforce a maximum depth, deferring to CA constraints. Use with caution; unlimited depth may be undesirable in certain security contexts.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndownstream_mtls:\\n  max_verify_depth: 0\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration in YAML\nDESCRIPTION: Docker Compose configuration for setting up Pomerium with Verify and Grafana services.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-policies.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n      - ./ec_private.pem:/pomerium/ec_private.pem:ro\n    ports:\n      - 443:443\n  verify:\n    image: pomerium/verify:latest\n    expose:\n      - 8000\n    environment:\n      - JWKS_ENDPOINT=https://pomerium/.well-known/pomerium/jwks.json\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Specifying OIDC Front-Channel Logout Support via IdP Metadata - JSON\nDESCRIPTION: Demonstrates a sample response from an Identity Provider's /.well-known/openid-configuration endpoint, indicating support for front-channel logout by including the 'frontchannel_logout_session_supported' property set to true. This metadata is important to determine whether your IdP can participate in OIDC front-channel logout flows as described in the OpenID Connect spec. No inputs are required; this is a static example of externally provided metadata.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/authentication.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"frontchannel_logout_session_supported\\\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium Repository on Debian/Ubuntu\nDESCRIPTION: Commands to add Pomerium repository and GPG key on Debian-based systems.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/core.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf 'https://dl.cloudsmith.io/public/pomerium/pomerium/gpg.6E388440B94E1407.key' | apt-key add -\necho \"deb https://dl.cloudsmith.io/public/pomerium/pomerium/deb/debian buster main\" > /etc/apt/sources.list.d/pomerium-pomerium.list\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret for Gateway API\nDESCRIPTION: kubectl command to create a TLS secret from certificate files for use with Gateway API.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/gateway-api.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret tls pomerium-wildcard-tls \\\n  --cert=_wildcard.localhost.pomerium.io.pem \\\n  --key=_wildcard.localhost.pomerium.io-key.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Address via Environment Variable\nDESCRIPTION: Sets the `METRICS_ADDRESS` environment variable to expose the Pomerium Prometheus endpoint on the loopback interface (`127.0.0.1`) at port 9090. This is an alternative to using the YAML configuration file for Pomerium Core.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/metrics.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMETRICS_ADDRESS: 127.0.0.1:9090\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Tunnel with pomerium-cli\nDESCRIPTION: Command to create a TCP tunnel to a Microsoft SQL server using pomerium-cli. The command establishes a tunnel to mssql.corp.example.com on port 1433 and listens locally on the same port.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ms-sql.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli tcp mssql.corp.example.com:1433 --listen :1433\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium Desktop on macOS\nDESCRIPTION: Command to install Pomerium Desktop client using Homebrew on macOS.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap pomerium/tap\nbrew install pomerium-desktop\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Ingress Error Event Log Output - Log\nDESCRIPTION: This log snippet illustrates error events recorded for an ingress object by the Pomerium Ingress Controller. It details both normal update and warning events, including annotation parsing failures and invalid conditional expressions in access policy configurations. The example demonstrates what users may see when a misconfiguration exists. No dependencies: this is actual log output from Kubernetes event monitoring.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_6\n\nLANGUAGE: log\nCODE:\n```\nEvents:\n  Type     Reason       Age                 From              Message\n  ----     ------       ----                ----              -------\n  Normal   Updated      5m53s               pomerium-ingress  updated pomerium configuration\n  Warning  UpdateError  3s                  pomerium-ingress  upsert routes: parsing ingress: annotations: applying policy annotations: parsing policy: invalid rules in policy: unsupported conditional \"maybe\", only and, or, not, nor and action are allowed\n```\n\n----------------------------------------\n\nTITLE: Using System Trust Store for Client Certificate in Pomerium CLI\nDESCRIPTION: Shows how to use a client certificate from the system trust store (Keychain on macOS or Windows certificate store) with the pomerium-cli command.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/_cli-client-certificates.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli ${props.protocol} --client-cert-from-store route.corp.example.com:1234\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis in Docker Compose\nDESCRIPTION: Docker Compose configuration for Redis service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/tcp-routes.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nredis:\n  image: redis:latest\n  expose:\n    - 6379\n```\n\n----------------------------------------\n\nTITLE: Pomerium Proxy Unknown Authority Error Log - Log\nDESCRIPTION: This log snippet shows a sample error message from Pomerium when rejecting a self-signed or untrusted TLS certificate from the Authorize service. It displays an http-error with 401 Unauthorized and a transport authentication handshake failure. Useful for diagnosing trust issues in service certificate chains.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_10\n\nLANGUAGE: log\nCODE:\n```\nERR http-error error=\"401 Unauthorized: ..... rpc error: code = DeadlineExceeded desc = latest connection error: connection error: desc = \\\"transport: authentication handshake failed: x509: certificate signed by unknown authority....\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Certificates\nDESCRIPTION: YAML configuration for specifying certificate paths in Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/tcp-routes.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncertificates:\n  - cert: /pomerium/cert.pem\n    key: /pomerium/key.pem\n```\n\n----------------------------------------\n\nTITLE: Transmission RPC Configuration\nDESCRIPTION: JSON configuration settings for Transmission daemon's RPC interface, including authentication, whitelist, and host settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/transmission.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"rpc-authentication-required\": false,\n\"rpc-enabled\": true,\n\"rpc-host-whitelist\": \"<transmission.example.com>\",\n\"rpc-host-whitelist-enabled\": true,\n\"rpc-whitelist\": \"<pomerium.host.address>\",\n\"rpc-whitelist-enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Example Event Log for Successful Ingress Update (Log)\nDESCRIPTION: Shows sample event output from `kubectl describe ingress`, specifically a 'Normal' event with reason 'Updated'. This indicates that the Pomerium Ingress controller successfully processed an update for the associated Ingress object ('my-ingress') and updated the Pomerium configuration accordingly.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_13\n\nLANGUAGE: log\nCODE:\n```\nEvents:\n  Type    Reason   Age   From              Message\n  ----    ------   ----  ----              -------\n  Normal  Updated  18s   pomerium-ingress  updated pomerium configuration\n```\n\n----------------------------------------\n\nTITLE: Defining Access Policies for BambooHR Data Source - YAML\nDESCRIPTION: This YAML snippet provides an example of an access policy in Pomerium's policy editor syntax. The policy allows access only to users in the Marketing department based on the BambooHRAvailable data source. It assumes the data source is already configured and available in Pomerium Enterprise Console. Key fields include department and type, which filter records for access control.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-standing/bamboohr.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\\n  and:\\n    - record:\\n        field: department\\n        is: Marketing\\n        type: pomerium.io/BambooHRAvailable\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Pass Identity Headers in Pomerium Kubernetes Config (YAML)\nDESCRIPTION: This YAML snippet shows how to enable the global `passIdentityHeaders` setting within a Pomerium Kubernetes configuration. Setting this boolean parameter to `true` ensures that identity headers are passed to all upstream services managed by Pomerium within the Kubernetes environment by default. This setting corresponds to the global configuration parameter.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/pass-identity-headers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npassIdentityHeaders: true\n```\n\n----------------------------------------\n\nTITLE: Generating Recovery Token with pomerium-console Command\nDESCRIPTION: Command to generate a recovery token for regaining access to the Pomerium console. This command connects to the database and creates a time-limited JWT that can be used for authentication when normal delegated access is unavailable.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/admonitions/_generate-recovery-token.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npomerium-console generate-recovery token\n```\n\n----------------------------------------\n\nTITLE: Disabling gRPC Transport Security via Environment Variable - Pomerium - Bash\nDESCRIPTION: This environment variable snippet sets 'GRPC_INSECURE' to false, instructing Pomerium to require secure (TLS) transport for internal gRPC communication when possible. Set this variable to 'true' only for cases where encryption is unnecessary or problematic. The environment value is read by the Pomerium process on startup and directly influences how connections are established. This setting is not used for regular proxied gRPC traffic.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/grpc.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nGRPC_INSECURE=false\n\n```\n\n----------------------------------------\n\nTITLE: One-line SSH Tunnel Connection\nDESCRIPTION: Combines tunnel creation and SSH connection into a single command using ProxyCommand\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ssh.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh -o ProxyCommand='pomerium-cli tcp --listen - %h:%p' ssh.localhost.pomerium.io\n```\n\n----------------------------------------\n\nTITLE: Setting Authorize Internal Service URL via Configuration File - YAML\nDESCRIPTION: Define 'authorize_internal_service_url' in the configuration file to override the standard Authorize Service URL for internal Pomerium communication. It should point to a routable internal address to facilitate service-to-service gRPC connection in split deployments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nauthorize_internal_service_url: https://pomerium-authorize-service.default.svc.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Remote Access\nDESCRIPTION: MySQL/MariaDB configuration to allow connections from remote hosts by setting the bind-address.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/mysql.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# Instead of skip-networking the default is now to listen only on\n# localhost which is more compatible and is not less secure.\nbind-address            = 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Zenefits Datasource with Docker Compose (YAML)\nDESCRIPTION: This YAML snippet defines a Docker Compose service named `zenefits` to run the Pomerium Zenefits datasource. It uses the `pomerium/datasource` image, specifies the `zenefits` command, passes the required Zenefits API key and time zone as command-line arguments, and exposes port 8080. It requires Docker and Docker Compose to be installed, and a valid Zenefits API key.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-standing/zenefits.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  zenefits:\n    image: docker.cloudsmith.io/pomerium/datasource/datasource:main\n    command:\n      - zenefits\n      - --zenefits-api-key=YOUR_API_KEY\n      - --time-zone=America/New_York\n      - --address=:8080\n    container_name: zenefits\n    restart: always\n    expose:\n      - 8080\n```\n\n----------------------------------------\n\nTITLE: Script Download and Permission Setup\nDESCRIPTION: Commands to download the pomerium tunnel script and make it executable for automated RDP connections.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/rdp.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/\nwget https://github.com/pomerium/pomerium/blob/main/examples/tcp/pomerium-tunnel.sh\nchmod +x pomerium-tunnel.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Format in Kubernetes (YAML)\nDESCRIPTION: Example of setting the `bearerTokenFormat` field to `idp_access_token` in a Kubernetes configuration, likely within a Pomerium Custom Resource or ConfigMap, depending on the deployment method.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/bearer-token-format.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbearerTokenFormat: idp_access_token\n```\n\n----------------------------------------\n\nTITLE: Using Pomerium CLI for TCP Connection\nDESCRIPTION: Command to establish TCP connection to Redis using Pomerium CLI.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/tcp-routes.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npomerium-cli tcp redis.localhost.pomerium.io:6379 --listen localhost:6379\n```\n\n----------------------------------------\n\nTITLE: Enabling Let's Encrypt Staging Environment via Environment Variable\nDESCRIPTION: Enables Let's Encrypt's staging environment using an environment variable. Provides an alternative to YAML configuration for activating the staging environment for testing.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nAUTOCERT_USE_STAGING=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Pomerium\nDESCRIPTION: Docker Compose configuration for Pomerium service with certificate volume mounts.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/tcp-routes.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      # Mount your wildcard certificates:\n      - ./_wildcard.localhost.pomerium.io-key.pem:/pomerium/key.pem:ro\n      - ./_wildcard.localhost.pomerium.io.pem:/pomerium/cert.pem:ro\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n```\n\n----------------------------------------\n\nTITLE: Stopping Transmission Service\nDESCRIPTION: Command to stop Transmission daemon before configuration changes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/transmission.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop transmission-daemon.service\n```\n\n----------------------------------------\n\nTITLE: Pulling Pomerium Enterprise Docker Image\nDESCRIPTION: Command to pull a specific tagged release of the Pomerium Enterprise image from the Cloudsmith registry.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull docker.cloudsmith.io/pomerium/enterprise/pomerium-console:${vX.X.X}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers with Direct Response in Pomerium (YAML)\nDESCRIPTION: Shows how to augment a Direct Response configuration in Pomerium by adding custom HTTP response headers through the 'set_response_headers' key. This example sets the 'Content-Type' header in addition to specifying the response status and body. Requires standard Pomerium YAML configuration; the key parameters are 'response' for the HTTP status/body, and 'set_response_headers' for custom headers. Input is a YAML route definition; output is a customized static HTTP response including specified headers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/direct-response.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n - from: https://example.com\n   response:\n    status: 200\n    body: \"plain text\"\n  set_response_headers:\n   Content-Type: \"text/plain; charset=us-ascii\"\n```\n\n----------------------------------------\n\nTITLE: Setting Pomerium Log Level via Environment Variable (Bash)\nDESCRIPTION: Shows how to configure the Pomerium global logging level to 'warn' using the `LOG_LEVEL` environment variable in a Bash environment. This method often overrides configuration file settings and ensures logs of 'warn' severity and above are captured. Other valid options include 'none', 'debug', 'info', and 'error'.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/log-level.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nLOG_LEVEL=warn\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Write Timeout in Pomerium Kubernetes Deployment (YAML)\nDESCRIPTION: This YAML example is used in Kubernetes deployments of Pomerium to set the 'timeouts.write' property. The property specifies the maximum request/response time as a Go Duration; a value of '0' disables the timeout.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/global-timeouts.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntimeouts:\n  write: 0\n\n```\n\n----------------------------------------\n\nTITLE: ToolJet Environment Configuration Example\nDESCRIPTION: Example environment variable configuration for ToolJet showing hostname setting.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/tooljet.mdx#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nTOOLJET_HOSTNAME=https://tooljet.localhost.pomerium.io\n```\n\n----------------------------------------\n\nTITLE: Single Host SSH Configuration\nDESCRIPTION: SSH config entry for tunneling connections to a specific host through Pomerium\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ssh.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nHost aService.corp.example.com\n    ProxyCommand /usr/bin/pomerium-cli tcp --listen - %h:%p\n```\n\n----------------------------------------\n\nTITLE: Configuring Write Timeout in Pomerium (YAML)\nDESCRIPTION: This YAML snippet configures the write timeout for HTTP request/response pairs in the Pomerium Core configuration using the 'timeout_write' key. The parameter accepts a Go Duration string, and setting it to '0' disables the timeout. It should typically be greater than the read timeout.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/global-timeouts.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntimeout_write: 0\n\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Pomerium Identity-Aware Proxy Environment\nDESCRIPTION: A complete Docker Compose configuration that sets up Pomerium identity-aware proxy, Pomerium Console, PostgreSQL databases, verification service, and ToolJet application. The configuration includes network definitions, volume mappings, environment variables, healthchecks, and service dependencies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/tooljet/console-compose.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  main: {}\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n    networks:\n      main:\n        aliases:\n          - authenticate.localhost.pomerium.io\n    environment:\n      - AUTHENTICATE_SERVICE_URL=https://authenticate.localhost.pomerium.io\n      - COOKIE_SECRET=j9jZgysWVxCs3uqbmw9a2LxWwz1ZPLKQZ8v20eoDT8Y=\n      - SHARED_SECRET=mxGl062SqkrbQKvqG9R2jqHqxq1Oi1BNj2AAeZHNq7c=\n      - DATABROKER_STORAGE_TYPE=postgres\n      - DATABROKER_STORAGE_CONNECTION_STRING=postgresql://postgres:postgres@database/postgres?sslmode=disable\n  pomerium_console:\n    networks:\n      main:\n    depends_on:\n      database:\n        condition: service_healthy\n      pomerium:\n        condition: service_started\n    image: docker.cloudsmith.io/pomerium/enterprise/pomerium-console:v0.21.0\n    command:\n      - 'serve'\n      - '--config'\n      - '/pomerium/console-config.yaml'\n    expose:\n      - 8701\n      - 9090\n    environment:\n      - AUDIENCE=console.localhost.pomerium.io\n      - DATABASE_ENCRYPTION_KEY=tXBj4gGDj45m8cW7ehhcy5lRuxsEeNl0X/nnsN5YJPw=\n      - DATABROKER_SERVICE_URL=http://pomerium:5443\n      - SHARED_SECRET=mxGl062SqkrbQKvqG9R2jqHqxq1Oi1BNj2AAeZHNq7c=\n      - DATABASE_URL=postgresql://postgres:postgres@database/postgres?sslmode=disable\n      - PROMETHEUS_LISTEN_ADDR=:9090\n      - PROMETHEUS_DATA_DIR=/data\n      - SIGNING_KEY=REPLACE_ME\n    volumes:\n      - metrics:/data:rw\n      - ./console-config.yaml:/pomerium/console-config.yaml:ro\n  database:\n    networks:\n      main: {}\n    image: postgres:latest\n    restart: always\n    healthcheck:\n      test: ['CMD-SHELL', 'pg_isready -d postgres -U postgres']\n      interval: 5s\n      timeout: 5s\n      retries: 5\n      start_period: 30s\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n      - POSTGRES_DB=postgres\n    expose:\n      - 5432\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n  verify:\n    networks:\n      main: {}\n    image: pomerium/verify:latest\n    expose:\n      - 8000\n    restart: always\n  tooljet:\n    networks:\n      main: {}\n    tty: true\n    stdin_open: true\n    image: tooljet/tooljet-ce:latest\n    restart: always\n    env_file: .env\n    ports:\n      - 80:80\n      - 8082:8082\n    depends_on:\n      - postgres\n    environment:\n      SERVE_CLIENT: \"true\"\n      PORT: \"80\"\n    command: npm run start:prod\n\n  postgres:\n    networks:\n      main: {}\n    image: postgres:13\n    restart: always\n    ports:\n      - 5433:5432\n    volumes:\n      - postgres:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=postgres\nvolumes:\n  pgdata:\n  metrics:\n  postgres:\n    driver: local\n    driver_opts:\n      o: bind\n      type: none\n      device: ${PWD}/postgres_data\n  certs:\n  logs:\n  fallbackcerts:\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium CLI RPM Repository\nDESCRIPTION: YUM repository configuration for installing Pomerium CLI packages.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_1\n\nLANGUAGE: abnf\nCODE:\n```\n[pomerium-pomerium]\nname=pomerium-pomerium\nbaseurl=https://dl.cloudsmith.io/public/pomerium/pomerium/rpm/el/$releasever/$basearch\nrepo_gpgcheck=1\nenabled=1\ngpgkey=https://dl.cloudsmith.io/public/pomerium/pomerium/gpg.6E388440B94E1407.key\ngpgcheck=1\nsslverify=1\npkg_gpgcheck=1\n```\n\n----------------------------------------\n\nTITLE: Generating Local TLS Certificate with mkcert (Shell Script)\nDESCRIPTION: This shell command uses mkcert to generate a testing certificate for the GitLab service domain. Requires mkcert to be installed and trusted; outputs PEM files for the specified domain. Input is the domain name, and output is a .pem certificate/key pair for use in Dockerized GitLab and Pomerium. No additional input or configuration is required beyond the mkcert install and appropriate system trust setup.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkcert \\\"gitlab.pomerium.localhost.io\\\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom ACME CA Directory via Environment Variable (Bash)\nDESCRIPTION: Sets the ACME Certificate Authority directory URL using the `AUTOCERT_CA` environment variable. This example configures Pomerium to use ZeroSSL's ACME endpoint. Setting this overrides the `autocert_use_staging` setting. Useful for environment-based configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAUTOCERT_CA=https://acme.zerossl.com/v2/DV90\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Policy to HTTPBin Route\nDESCRIPTION: A simple policy that allows access only to users with an email domain of 'example.com'. This demonstrates basic access control for the HTTPBin route.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npolicy:\n  allow:\n    and:\n      - domain:\n          is: example.com\n```\n\n----------------------------------------\n\nTITLE: Running Pomerium Binary\nDESCRIPTION: Executes the Pomerium binary with a configuration file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/core.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./pomerium -config config.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Claims Headers in Pomerium\nDESCRIPTION: Global configuration to extract specific claims from JWTs and pass them as headers to upstream applications. This enhances the information available to protected services.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsigning_key_file: '/pomerium/ec_private.pem'\n\njwt_claims_headers:\n  X-Pomerium-Claim-Email: email\n  X-Pomerium-Claim-User: user\n  X-Pomerium-Claim-Name: name\n```\n\n----------------------------------------\n\nTITLE: Example XFF Header with skip_xff_append: true\nDESCRIPTION: Illustrates the value of the `X-Forwarded-For` header sent to the upstream service when `skip_xff_append` is set to `true`. Pomerium forwards the incoming XFF header (`192.0.5.1`) unchanged.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/x-forwarded-for-settings.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nX-Forwarded-For: 192.0.5.1\n```\n\n----------------------------------------\n\nTITLE: Example Location Header Response\nDESCRIPTION: Sample response header from downstream server before rewriting.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nLocation: http://localhost:8000/two/some/path/\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Name in Pomerium Core YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to set the `cookie_name` parameter within a Pomerium Core configuration file. This parameter defines the name of the session cookie Pomerium sends to clients. The default value is `_pomerium`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncookie_name: cookie_name\n```\n\n----------------------------------------\n\nTITLE: RPM Package Repository Setup\nDESCRIPTION: Commands to configure and install Pomerium Enterprise on RHEL-based systems\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/install.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf \\\n'https://dl.cloudsmith.io/[access-key]/pomerium/enterprise/setup.rpm.sh' \\\n| sudo -E bash\n```\n\nLANGUAGE: bash\nCODE:\n```\nyum install yum-utils pygpgme\nrpm --import 'https://dl.cloudsmith.io/[access-key]/pomerium/enterprise/gpg.B1D0324399CB9BC3.key'\ncurl -1sLf 'https://dl.cloudsmith.io/[access-key]/pomerium/enterprise/config.rpm.txt?distro=el&codename=8' > /tmp/pomerium-enterprise.repo\nyum-config-manager --add-repo '/tmp/pomerium-enterprise.repo'\nyum -q makecache -y --disablerepo='*' --enablerepo='pomerium-enterprise'\n```\n\nLANGUAGE: bash\nCODE:\n```\nyum -y install pomerium-console\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now pomerium-console\n```\n\n----------------------------------------\n\nTITLE: Running GeoIP Datasource with Docker Compose in YAML\nDESCRIPTION: This YAML configuration defines a Docker Compose service to run the Pomerium GeoIP datasource. It uses the `pomerium/datasource` image, specifies the `ip2location` command with the path to the GeoIP database file (`/var/ip2location.csv.zip`) as an argument, maps port 8080, and mounts the downloaded IP2Location database file into the container. The `${PWD}` variable ensures the database file is mounted from the current working directory on the host.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/geoip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\\n  ip2location:\\n    image: docker.cloudsmith.io/pomerium/datasource/datasource:main\\n    container_name: ip2location\\n    command:\\n      - ip2location\\n      - /var/ip2location.csv.zip\\n    ports:\\n      - 8080:8080\\n    volumes:\\n      - ${PWD}/IP2LOCATION-LITE-DB1.CSV.ZIP:/var/ip2location.csv.zip\n```\n\n----------------------------------------\n\nTITLE: Adding Capabilities to Pomerium Service\nDESCRIPTION: Configuration to add network binding capability to the Pomerium service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/self-hosted-pomerium.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n[Service]\nAmbientCapabilities=CAP_NET_BIND_SERVICE\n```\n\n----------------------------------------\n\nTITLE: Wildcard Domain SSH Configuration\nDESCRIPTION: SSH config entry for tunneling all connections to a domain through Pomerium\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ssh.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nHost *.corp.example.com\n    ProxyCommand /usr/bin/pomerium-cli tcp --listen - %h:%p\n```\n\n----------------------------------------\n\nTITLE: Setting Pomerium Service Mode via Environment Variable (Bash)\nDESCRIPTION: This Bash snippet sets the 'SERVICES' environment variable to control which Pomerium service(s) will run at bootstrap. This is intended for environments where environment variable configuration is more convenient or required, such as containerized or cloud-native deployments. The value can be one of 'all', 'authenticate', 'authorize', 'proxy', or 'databroker', with 'all' as the default. No other dependencies are needed beyond access to the system environment.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-mode.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSERVICES=databroker\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Pomerium and TiddlyWiki Integration\nDESCRIPTION: Docker Compose configuration that sets up Pomerium as an identity-aware proxy in front of a TiddlyWiki instance. The setup includes volume mounts for configuration and data persistence, with TiddlyWiki configured to respect Pomerium authentication headers for reader/writer access control.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/tiddlywiki/docker-compose.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pomerium:\n    image: pomerium/pomerium:latest\n    volumes:\n      # Use a volume to store ACME certificates\n      - ./config.yaml:/pomerium/config.yaml:ro\n    ports:\n      - 443:443\n\n  tiddlywiki_init:\n    image: elasticdog/tiddlywiki:latest\n    volumes:\n      - ./wiki:/tiddlywiki\n    command: ['mywiki', '--init', 'server']\n\n  tiddlywiki:\n    image: elasticdog/tiddlywiki:latest\n    ports:\n      - 8080:8080\n    volumes:\n      - ./wiki:/tiddlywiki\n    command:\n      - mywiki\n      - --listen\n      - host=0.0.0.0\n      - authenticated-user-header=x-pomerium-claim-email\n      - readers=reader@example.com\n      - writers=writer@example.com\n      - username=<reader/writer@example.com>\n      - password=password\n    depends_on:\n      - tiddlywiki_init\n```\n\n----------------------------------------\n\nTITLE: Patching Kubernetes Secret with New Pomerium Zero Token using kubectl\nDESCRIPTION: This `kubectl` command patches an existing Kubernetes secret named `pomerium-zero-token` located in the `pomerium` namespace. It uses the `-p` flag with a JSON payload to update the `stringData` field, specifically setting the `pomerium_zero_token` key to the value stored in the `POMERIUM_ZERO_TOKEN` shell environment variable. This ensures the Pomerium deployment within Kubernetes uses the newly rotated cluster token.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/clusters.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n pomerium patch secret pomerium-zero-token -p \"{\\\"stringData\\\":{\\\"pomerium_zero_token\\\":\\\"${POMERIUM_ZERO_TOKEN}\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Labeling Namespace for Istio Injection\nDESCRIPTION: Bash command to label a Kubernetes namespace for Istio sidecar injection, enabling Istio's service mesh functionality for pods in that namespace.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/istio.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl label namespace pomerium istio-injection=enabled\n```\n\n----------------------------------------\n\nTITLE: Ignoring Dependencies in Docker Context - YAML\nDESCRIPTION: This .dockerignore YAML snippet instructs Docker to ignore the 'node_modules' directory and 'npm-debug.log' file during build, ensuring faster image creation and smaller builds. No dependencies are required. It works in conjunction with a Dockerfile to manage unneeded development files in builds.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nnode_modules npm-debug.log\n```\n\n----------------------------------------\n\nTITLE: Copying Files, Exposing Ports, and Bootstrapping Node App - Dockerfile\nDESCRIPTION: This Dockerfile snippet copies all necessary application files into the container, exposes port 5001, and sets the default command to start the Node.js app using 'node index.js'. No external dependencies except a functional Node.js environment and the presence of 'index.js' at build time are required. The container listens on port 5001 for incoming traffic.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_13\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# copy the generated modules and all other files to the container\\nCOPY . .\\n\\n# our app is running on port 5001 within the container, so need to expose it\\nEXPOSE 5001\\n\\n# the command that starts our app\\nCMD [\\\"node\\\", \\\"index.js\\\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Address in Pomerium Core\nDESCRIPTION: YAML configuration to specify the metrics address for Pomerium Core.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure-metrics.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_address: 127.0.0.1:9091\n```\n\n----------------------------------------\n\nTITLE: Updating Pomerium Zero Manually in Kubernetes\nDESCRIPTION: This command updates Pomerium Zero manually in a Kubernetes environment by applying the latest Kubernetes manifests for a specific version.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/cloud/install.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -k github.com/pomerium/pomerium/k8s/zero\\?ref=v0.29.0\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC API Connection with Go Client\nDESCRIPTION: Connects to the Pomerium Enterprise Console's gRPC API in Go, using the official Go client library. The script authenticates with a service account, retrieves the desired namespace and policy by name, then creates and submits a new route. It requires environment variables for the service account token, expects the client and protobuf dependency, and disables certificate verification for demonstration (should not be used in production). On success, prints the created route's ID.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-enterprise.mdx#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\"context\"\\n\\t\"crypto/tls\"\\n\\t\"fmt\"\\n\\t\"os\"\\n\\n\\tpb \"github.com/pomerium/enterprise-client-go/pb\"\\n\\n\\tclient \"github.com/pomerium/enterprise-client-go\"\\n)\\n\\nvar serviceAccountToken = os.Getenv(\"SERVICE_ACCOUNT\")\\nvar target = \"console-api.localhost.pomerium.io:443\"\\n\\nfunc main() {\\n\\terr := run()\\n\\tif err != nil {\\n\\t\\tfmt.Printf(\"%s\\n\", err)\\n\\t}\\n}\\n\\nfunc run() error {\\n\\n\\tctx := context.Background()\\n\\n\\ttlsConfig := &tls.Config{InsecureSkipVerify: true}\\n\\n\\tp, err := client.NewClient(ctx, target, serviceAccountToken, client.WithTlsConfig(tlsConfig))\\n\\tif err != nil {\\n\\t\\treturn fmt.Errorf(\"failed to connect: %w\", err)\\n\\t}\\n\\n\\tnsResp, err := p.NamespaceService.ListNamespaces(ctx, &pb.ListNamespacesRequest{})\\n\\tif err != nil {\\n\\t\\treturn fmt.Errorf(\"could not list namespaces: %w\", err)\\n\\t}\\n\\n\\tvar productionNamespaceId string\\n\\tfor _, n := range nsResp.GetNamespaces() {\\n\\t\\tif n.GetName() == \"Production\" {\\n\\t\\t\\tproductionNamespaceId = n.GetId()\\n\\t\\t}\\n\\t}\\n\\n\\tif productionNamespaceId == \"\" {\\n\\t\\treturn fmt.Errorf(\"could not find production namespace\")\\n\\t}\\n\\n\\tpolicyName := \"my policy\"\\n\\tvar policyId string\\n\\tpolResp, err := p.PolicyService.ListPolicies(ctx, &pb.ListPoliciesRequest{Namespace: productionNamespaceId, Query: &policyName})\\n\\tif err != nil {\\n\\t\\treturn fmt.Errorf(\"failed to find policy: %w\", err)\\n\\t}\\n\\tif len(polResp.GetPolicies()) == 0 {\\n\\t\\treturn fmt.Errorf(\"no policy named '%s' found\", policyName)\\n\\t}\\n\\n\\tpolicyId = polResp.GetPolicies()[0].GetId()\\n\\n\\tpassIdHeaders := true\\n\\tnewRoute := &pb.Route{\\n\\t\\tNamespaceId:         productionNamespaceId,\\n\\t\\tName:                \"my route\",\\n\\t\\tFrom:                \"https://test.localhost.pomerium.io\",\\n\\t\\tTo:                  []string{\"https://verify.pomerium.com\"},\\n\\t\\tPolicyIds:           []string{policyId},\\n\\t\\tPassIdentityHeaders: &passIdHeaders,\\n\\t}\\n\\n\\trouteResp, err := p.RouteService.SetRoute(ctx, &pb.SetRouteRequest{Route: newRoute})\\n\\tif err != nil {\\n\\t\\treturn fmt.Errorf(\"could not create route: %w\", err)\\n\\t}\\n\\n\\tfmt.Printf(\"created route id: %s\\n\", routeResp.Route.GetId())\\n\\treturn nil\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitLab Root Password\nDESCRIPTION: Command to retrieve the initial root password for GitLab from the Docker container.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker exec -it gitlab grep 'Password:' /etc/gitlab/initial_root_password\n```\n\n----------------------------------------\n\nTITLE: Setting Single Databroker Internal Service URL via Environment Variable\nDESCRIPTION: Environment variable configuration example for specifying a single Databroker internal service URL using bash syntax.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/service-urls.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nDATABROKER_INTERNAL_SERVICE_URL=http://localhost:5443\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry OTLP in Grafana.ini\nDESCRIPTION: Configuration snippet for enabling OpenTelemetry tracing in Grafana. This configures Grafana to send OTLP traces to the specified collector address using GRPC protocol, which is currently the only protocol supported by Grafana for OTLP traces.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/tracing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[tracing.opentelemetry.otlp]\naddress = x.x.x.x:4317\n```\n\n----------------------------------------\n\nTITLE: Generating Wildcard TLS Certificate with mkcert - Bash\nDESCRIPTION: Creates a wildcard TLS certificate for any subdomain of localhost.pomerium.io using mkcert. The resulting files are used for configuring the Pomerium server certificate and key. Prerequisite: mkcert root CA must be installed locally. Output files are PEM-encoded certificate and private key.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/certificates-and-tls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkcert '*.localhost.pomerium.io'\n\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Ingress Event Log Output - Log\nDESCRIPTION: This log-formatted snippet shows typical event messages for a Kubernetes ingress object updated by the Pomerium Ingress Controller, indicating successful configuration synchronization. Useful for recognizing normal controller operations. No explicit dependencies. These lines are output by kubectl or via Kubernetes monitoring tools.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_5\n\nLANGUAGE: log\nCODE:\n```\nEvents:\n  Type    Reason   Age   From              Message\n  ----    ------   ----  ----              -------\n  Normal  Updated  18s   pomerium-ingress  updated pomerium configuration\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Tunnel for RDP with pomerium-cli\nDESCRIPTION: Command to create a TCP tunnel for RDP connections using pomerium-cli. The command establishes a tunnel to port 3389 on the remote service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/rdp.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli tcp aService.corp.example.com:3389 --listen :3389\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Protocol via Environment Variable in Pomerium Core\nDESCRIPTION: Sets the `USE_PROXY_PROTOCOL` environment variable to `true`. This configuration method achieves the same result as the YAML key, instructing Pomerium Core to require the HAProxy proxy protocol on incoming connections. This is an optional boolean setting, defaulting to `false`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/use-proxy-protocol.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nUSE_PROXY_PROTOCOL=true\n```\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Compose Services - Bash\nDESCRIPTION: This bash command brings up Docker Compose services using the specified docker-compose.yaml file, rebuilding images as needed. It requires Docker and Docker Compose to be installed. It is used to launch containers defined in the compose file and apply configuration changes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Dockerizing Node.js Server - Dockerfile Configuration\nDESCRIPTION: Dockerfile instructions for containerizing the Node.js server. It specifies the base image and working directory.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-advanced-routes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# pull the Node.js Docker image\nFROM node:alpine\n```\n\n----------------------------------------\n\nTITLE: Starting All Docker Compose Services - Shell\nDESCRIPTION: This shell snippet starts up all Docker Compose services defined in the docker-compose.yaml file in the current directory. It assumes Docker Compose is installed and all prerequisites (configuration and secrets files) are ready. The command will bring up all containers and networks specified, exposing the test route for manual verification. Outputs are live-running services accessible via the configured ports.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/configuration.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n\n```\n\n----------------------------------------\n\nTITLE: Setting Autocert EAB Key ID in Pomerium Configuration (YAML)\nDESCRIPTION: Configures the External Account Binding (EAB) Key Identifier using the `autocert_eab_key_id` key in a Pomerium YAML configuration file. This is required when interacting with ACME CAs that mandate EAB for account registration or association. It must be used in conjunction with the corresponding `autocert_eab_mac_key`.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nautocert_eab_key_id: EAB_KID\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Services in Kubernetes Ingress with Pomerium\nDESCRIPTION: This YAML snippet shows how to configure an Ingress resource for TCP services using Pomerium. It includes the necessary annotation for TCP upstream and specifies the host and backend service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: tcp-example\n  annotations:\n    ingress.pomerium.io/tcp_upstream: 'true'\nspec:\n  ingressClassName: pomerium\n  rules:\n    - host: 'tcp.localhost.pomerium.io'\n      http:\n        paths:\n          - pathType: ImplementationSpecific\n            backend:\n              service:\n                name: tcp-service\n                port:\n                  name: app\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Prometheus Data Directory\nDESCRIPTION: YAML configuration to specify the data directory for embedded Prometheus instance.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure-metrics.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus_data_dir: /var/lib/pomerium-console/tsdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Pomerium Enterprise Metrics Address\nDESCRIPTION: YAML configuration to specify the metrics address for Pomerium Enterprise Console.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure-metrics.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_addr: 127.0.0.1:9092\n```\n\n----------------------------------------\n\nTITLE: Installing/Updating Pomerium on Linux with Cluster Token using Bash\nDESCRIPTION: This Bash command pipeline downloads the Pomerium installation script from `console.pomerium.app` using `curl` and executes it using `bash`. The `POMERIUM_ZERO_TOKEN` environment variable is set inline with the new cluster token (replace `<cluster_token>`) before the script runs the `install` command, ensuring the deployed Pomerium instance uses the updated token.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/clusters.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://console.pomerium.app/install.bash | env POMERIUM_ZERO_TOKEN=<cluster_token> bash -s install\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample HTML Project in Code-Server\nDESCRIPTION: HTML code for a simple webpage to test the Code-Server deployment. It includes links to Pomerium resources and demonstrates basic HTML structure.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/code-server.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Code-Server Sample</title>\n  </head>\n  <body>\n    <h1 style=\"color:blueviolet\">Check out more from Pomerium:</h1>\n    <ul style=\"font-size: 20px;\">\n      <li><a href=\"<https://www.pomerium.com/docs/guides>\">Guides</a></li>\n      <li><a href=\"<https://www.pomerium.com/blog/>\">Blog</a></li>\n      <li><a href=\"<https://www.pomerium.com/docs>\">Documentation</a></li>\n    </ul>\n    <h2 style=\"color:blueviolet\">Happy coding!</h2>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload with Custom JWT Claim Headers\nDESCRIPTION: Illustrates the resulting JSON representation of claims passed as headers based on the custom configuration example (`jwt_claims_headers`). It shows the 'X-Email' header containing the user's email address and the 'X-Username' header containing the username, both represented as arrays of strings within the JWT payload.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/jwt-claim-headers.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"X-Email\": [\n  \"user@example.com\"\n],\n\"X-Username\": [\n  \"user\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Encrypted TCP Tunnel with Pomerium CLI\nDESCRIPTION: Command to create an encrypted TCP tunnel using Pomerium CLI for secure Git access.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli tcp gitlab.pomerium.localhost.io:22 --listen :2202\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Server Address via Environment Variable - Bash - Pomerium\nDESCRIPTION: This Bash snippet demonstrates how to configure the Pomerium HTTP server listen address using the ADDRESS environment variable. Set this variable before starting the Pomerium service to override the default address and port. The expected format is a string like ':8443', and if not set, the default ':443' is used.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/address.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nADDRESS=:8443\n\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Route Timeout via Kubernetes Ingress Annotation (YAML)\nDESCRIPTION: Configures the `ingress.pomerium.io/timeout` annotation on a Kubernetes Ingress resource to set the request/response timeout for the associated route. The value must be a string representing a duration in Go Duration format (e.g., '30s').\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/timeouts.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/timeout: '30s'\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Tunnel for Redis with pomerium-cli\nDESCRIPTION: Command to create a TCP tunnel for Redis using pomerium-cli. The --listen flag is optional and allows specifying the local port.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/redis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli tcp redis.corp.example.com:6379 --listen :6379\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Lookup Family via Environment Variable (Bash)\nDESCRIPTION: This Bash snippet shows how to configure the DNS lookup family using the `DNS_LOOKUP_FAMILY` environment variable. This example sets the policy to `V6_ONLY`, instructing the DNS resolver to exclusively perform lookups for IPv6 addresses. This method is commonly used in containerized or scripted Pomerium Core deployments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/dns-lookup-family.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDEFAULT_LOOKUP_FAMILY=V6_ONLY\n```\n\n----------------------------------------\n\nTITLE: Defining Node Service and Port Mapping - Docker Compose YAML\nDESCRIPTION: This docker-compose.yaml snippet defines a 'nodeserver' service, builds from the './app' context, and maps container port 5001 to host port 5001. Dependencies are Docker, Docker Compose, and a Dockerfile in './app'. Key parameters include the build context and port mapping, allowing the app to be accessible on the host.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nnodeserver:\\n  build:\\n    context: ./app\\n  ports:\\n    - '5001:5001'\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading Grafana using Helm (bash)\nDESCRIPTION: This Helm command installs or upgrades the Grafana release in the Kubernetes cluster using the provided custom values file. The command ensures Grafana is updated to reflect the latest configuration and dependencies defined in the YAML values file. It requires Helm, the Grafana chart repository added, and access to the Kubernetes cluster context.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/istio.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install grafana grafana/grafana --values grafana-values.yaml\n\n```\n\n----------------------------------------\n\nTITLE: Updating Pomerium Zero Docker Image\nDESCRIPTION: This command pulls the latest Pomerium Docker image for updating Pomerium Zero in a Docker environment.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/cloud/install.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull pomerium/pomerium:latest\n```\n\n----------------------------------------\n\nTITLE: Example Output of Pomerium Global CRD Description (Log)\nDESCRIPTION: Shows sample output from the `kubectl describe pomerium/global` command. It includes metadata, specification details (Authenticate URL, Certificates, Identity Provider, Secrets, Storage), status information (Ingress reconciliation, Settings status), and associated Kubernetes events indicating recent updates or actions performed by the controller.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_11\n\nLANGUAGE: log\nCODE:\n```\nName:         global\nNamespace:\nLabels:       <none>\nAnnotations:  <none>\nAPI Version:  ingress.pomerium.io/v1\nKind:         Pomerium\nMetadata:\n  Creation Timestamp:  2022-07-14T21:43:08Z\n  Generation:          5\n  Resource Version:  1507973\n  UID:               9c7e56ab-e74c-492c-945d-5db1cd6582b0\nSpec:\n  Authenticate:\n    URL:  https://login.localhost.pomerium.io\n  Certificates:\n    pomerium/wildcard-localhost\n  Identity Provider:\n    Provider:  google\n    Secret:    pomerium/idp\n  Secrets:     pomerium/bootstrap\n  Storage:\n    Postgres:\n      Secret:  pomerium/postgres\nStatus:\n  Ingress:\n    pomerium/httpbin:\n      Observed At:          2022-07-29T13:01:37Z\n      Observed Generation:  1\n      Reconciled:           true\n  Settings Status:\n    Observed At:          2022-07-27T18:44:43Z\n    Observed Generation:  5\n    Reconciled:           true\nEvents:\n  Type    Reason   Age   From              Message\n  ----    ------   ----  ----              -------\n  Normal  Updated  43m   pomerium-ingress  pomerium/httpbin: config updated\n```\n\n----------------------------------------\n\nTITLE: Configuring Yum Repository for Pomerium\nDESCRIPTION: Configuration for adding the Pomerium repository to yum-based systems.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/core.mdx#2025-04-23_snippet_2\n\nLANGUAGE: abnf\nCODE:\n```\n[pomerium-pomerium]\nname=pomerium-pomerium\nbaseurl=https://dl.cloudsmith.io/public/pomerium/pomerium/rpm/el/$releasever/$basearch\nrepo_gpgcheck=1\nenabled=1\ngpgkey=https://dl.cloudsmith.io/public/pomerium/pomerium/gpg.6E388440B94E1407.key\ngpgcheck=1\nsslverify=1\npkg_gpgcheck=1\n```\n\n----------------------------------------\n\nTITLE: Policy with OR Operator in YAML\nDESCRIPTION: Policy configuration using the OR operator to grant access based on domain or JWT claim.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-policies.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npolicy:\n  allow:\n    or:\n      - domain:\n          is: example.com\n      - claim/Name: <\"Your Name\">\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Tunnel for Git with pomerium-cli\nDESCRIPTION: Command to create a TCP tunnel using pomerium-cli for Git connections over SSH. It specifies the Git server address and port, and sets up a local listening port.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/git.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli tcp git.corp.example.com:22 --listen :2202\n```\n\n----------------------------------------\n\nTITLE: Simple Rego Allow Policy\nDESCRIPTION: Basic Rego policy that unconditionally allows access by setting the allow variable to true.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/authorization.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\nallow := true\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Node.js HTTP Server\nDESCRIPTION: JavaScript code for a basic Node.js server using Express. It sets up two routes: a root path and an admin path.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-advanced-routes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.get('/admin', (req, res) => {\n  res.send('This is an admin only page');\n});\n\napp.listen(5001, () => console.log('Server is up and running'));\n```\n\n----------------------------------------\n\nTITLE: Default Pomerium Request Parameters for Apple IdP\nDESCRIPTION: Shows the default request parameter `response_mode: form_post` automatically included by Pomerium when using Apple as the identity provider. Custom parameters set via `idp_request_params` will be merged with this default.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nresponse_mode: form_post\n```\n\n----------------------------------------\n\nTITLE: Generating Local Certificates\nDESCRIPTION: Commands to install mkcert and generate local certificates for development.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/core.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngo install filippo.io/mkcert@latest\nmkcert -install\nmkcert '*.localhost.pomerium.io'\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for JWT Verification\nDESCRIPTION: Docker Compose configuration to mount the signing key and set up the JWKS endpoint for the Verify service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/jwt-verification.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npomerium:\n  image: pomerium/pomerium:latest\n  volumes:\n    - ./config.yaml:/pomerium/config.yaml:ro\n    - ./ec_private.pem:/pomerium/ec_private.pem:ro\n  ports:\n    - 443:443\nverify:\n  image: pomerium/verify:latest\n  expose:\n    - 8000\n  environment:\n    - JWKS_ENDPOINT=https://pomerium/.well-known/pomerium/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Example Archive Structure for Pomerium Data Source Types\nDESCRIPTION: Shows an example directory structure within a .tar or .zip archive used as an external data source. The file paths within the archive (e.g., 'example.com/geoip.csv', 'devices/jamf.json') are used by Pomerium Databroker to automatically determine the record types ('example.com/geoip', 'devices/jamf', 'devices/tanium').\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nexample.com/geoip.csv\ndevices/jamf.json\ndevices/tanium.json\n```\n```\n\n----------------------------------------\n\nTITLE: Using Pomerium CLI for TCP Connection\nDESCRIPTION: Command line examples showing how to establish TCP connections using pomerium-cli and interact with Redis through the proxy.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/tcp.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pomerium-cli tcp redis.localhost.pomerium.io:6739\n2023/10/02 11:19:59 listening on 127.0.0.1:52046\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ redis-cli -h localhost -p 52046\nlocalhost:52046> keys *\n(empty array)\nlocalhost:52046>\n```\n\n----------------------------------------\n\nTITLE: Building Pomerium from Source\nDESCRIPTION: Commands to clone, build, and run Pomerium from source code.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/core.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/pomerium/pomerium.git $HOME/pomerium\ncd $HOME/pomerium\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium via Package Managers\nDESCRIPTION: Commands for installing Pomerium using yum or apt package managers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/core.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# For yum-based systems:\nyum install pomerium\n\n# For apt-based systems:\napt-get update && apt-get install pomerium\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic JSON API Server in Go\nDESCRIPTION: This Go code creates a simple HTTP server that responds with a JSON message. It sets up a route handler for the root path and serves on port 8000.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tio.WriteString(w, `{ \"message\": \"HELLO WORLD\" }`)\n\t})\n\thttp.ListenAndServe(\":8000\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Argo with Helm\nDESCRIPTION: Commands to add Argo helm repository, install Argo in the kube-system namespace with Minio storage, and apply workflow CRD.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/argo.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add argo https://argoproj.github.io/argo-helm\nhelm repo update\nhelm install \\\n    --namespace kube-system \\\n    --set minio.install=true \\\n    --set installCRD=false \\\n    argo argo/argo\nkubectl apply \\\n    --namespace kube-system \\\n    --file https://raw.githubusercontent.com/argoproj/argo/master/manifests/base/crds/workflow-crd.yaml\n```\n\n----------------------------------------\n\nTITLE: System Daemon Log Access\nDESCRIPTION: Command to display Pomerium logs when installed as a system daemon service using journalctl.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/audit-logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl -u pomerium.service\n```\n\n----------------------------------------\n\nTITLE: Rego Deny Policy with Message\nDESCRIPTION: Rego policy demonstrating how to deny access with a custom error message using an array containing a boolean and string.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/authorization.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rego\nCODE:\n```\ndeny := [true, \"unauthorized\"]\n```\n\n----------------------------------------\n\nTITLE: Load Balancing Weight Configuration\nDESCRIPTION: Configuration showing how to assign weights to upstream servers for load balancing.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/routing.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n  - from: https://myapp.localhost.pomerium.io\n    to:\n      - http://myapp-srv-1:8080,10\n      - http://myapp-srv-2:8080,20\n      - http://myapp-srv-3:8080,30\n      - http://myapp-srv-4:8080,20\n      - http://myapp-srv-5:8080,10\n```\n\n----------------------------------------\n\nTITLE: Creating Pomerium UDP Tunnel\nDESCRIPTION: Command to establish a UDP tunnel using the Pomerium CLI.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ethr.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli udp ethr.corp.example.com:8888 --listen :8888\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Tabs in Markdown\nDESCRIPTION: This code snippet imports the Tabs and TabItem components from the '@theme/Tabs' and '@theme/TabItem' modules respectively. These components are likely used to create tabbed content in the documentation.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Docker Ignore Configuration\nDESCRIPTION: Dockerignore file configuration to exclude node_modules and debug logs from the container build.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/zero/zero-advanced-routes.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnode_modules npm-debug.log\n```\n\n----------------------------------------\n\nTITLE: Setting Autocert EAB MAC Key via Environment Variable (Bash)\nDESCRIPTION: Sets the External Account Binding (EAB) MAC Key using the `AUTOCERT_EAB_MAC_KEY` environment variable (note: the provided example incorrectly uses `AUTOCERT_EAB_KEY_ID`). This value should be the base64-URL-encoded secret key corresponding to the `AUTOCERT_EAB_KEY_ID`. It is mandatory when EAB is enabled.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/autocert.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nAUTOCERT_EAB_KEY_ID=base64-URL-encoded_secret_key\n```\n\n----------------------------------------\n\nTITLE: Filtering Client Certificates by Issuer in Pomerium CLI\nDESCRIPTION: Example of filtering client certificates from the system trust store based on the certificate issuer's Common Name.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/_cli-client-certificates.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli ${props.protocol} --client-cert-from-store --client-cert-issuer \"CN=My Trusted CA\" route.corp.example.com:1234\n```\n\n----------------------------------------\n\nTITLE: Connecting via SSH to the Local Pomerium Tunnel (Bash)\nDESCRIPTION: Connects to the service exposed locally by the running `pomerium-cli` instance using the standard `ssh` client. This command targets the local address (`127.0.0.1`) and port (`2222`) where `pomerium-cli` is listening, as established in the previous example. Requires an active `pomerium-cli tcp` session listening on the specified port.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nssh 127.0.0.1 -p 2222\n```\n\n----------------------------------------\n\nTITLE: Rendering ReferenceTable Component in MDX/JSX\nDESCRIPTION: This JSX snippet renders the previously imported `ReferenceTable` component within the MDX page content. When processed, this tag will invoke the `ReferenceTable` React component, causing it to render the configuration settings table onto the page. This relies on the successful import of the component and a React-based rendering engine.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ReferenceTable />\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User for Any Host\nDESCRIPTION: SQL commands to create a MySQL user that can connect from any host using the '%' wildcard.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/mysql.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER 'user'@'%' IDENTIFIED BY 'some_pass';\nGRANT ALL PRIVILEGES ON *.* TO 'user'@'%'\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium Zero Manually in Kubernetes\nDESCRIPTION: These commands manually install Pomerium Zero in a Kubernetes cluster. The first command applies the Kubernetes manifests, and the second creates a secret to store the authentication token.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/cloud/install.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k github.com/pomerium/pomerium/k8s/zero\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: pomerium\n  namespace: pomerium-zero\ntype: Opaque\nstringData:\n  pomerium_zero_token: <CLUSTER_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Installation Commands\nDESCRIPTION: Commands for installing and configuring Pomerium Enterprise in a Kubernetes environment\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/install.mdx#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nkubectl apply -k github.com/pomerium/documentation/k8s/core\\?ref=0-27-0\n```\n\nLANGUAGE: console\nCODE:\n```\nkubectl apply -k github.com/pomerium/documentation/k8s/console\\?ref=0-27-0\n```\n\nLANGUAGE: console\nCODE:\n```\nkubectl create secret docker-registry pomerium-enterprise-docker \\\n    --namespace pomerium-enterprise \\\n    --docker-server=docker.cloudsmith.io \\\n    --docker-username=pomerium/enterprise \\\n    --docker-password=\"your password provided by Pomerium Sales\"\n```\n\nLANGUAGE: console\nCODE:\n```\nkubectl apply -k ./config\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Ingress Controller\nDESCRIPTION: Commands to install NGINX ingress controller using Helm\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/argo.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\nhelm install --namespace kube-system ingress-nginx ingress-nginx/ingress-nginx\n```\n\n----------------------------------------\n\nTITLE: Running Pomerium CLI via Docker\nDESCRIPTION: Command to run Pomerium CLI using Docker container.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run pomerium/cli:latest --version\n```\n\n----------------------------------------\n\nTITLE: Editing Pomerium Service File\nDESCRIPTION: Commands to edit the Pomerium service file to allow using port 443 without root privileges.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/self-hosted-pomerium.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl edit pomerium.service\n```\n\n----------------------------------------\n\nTITLE: System Daemon Log Filtering\nDESCRIPTION: Command to filter Pomerium logs to show only authorize service entries when running as a system daemon.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/audit-logs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl -u pomerium.service | grep '\"service\":\"authorize\"'\n```\n\n----------------------------------------\n\nTITLE: Generating ES256 Signing Key with OpenSSL\nDESCRIPTION: Commands to generate a P-256 (ES256) signing key and encode it in base64 format for Pomerium configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/tooljet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Generates a P-256 (ES256) signing key\nopenssl ecparam  -genkey  -name prime256v1  -noout  -out ec_private.pem\n# Prints the base64 encoded value of the signing key\ncat ec_private.pem | base64\n```\n\n----------------------------------------\n\nTITLE: Running Ethr Client\nDESCRIPTION: Command to run Ethr client with specific UDP testing parameters: 1MB bandwidth, 1KB packet size, 5 second duration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ethr.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nethr -c localhost -p udp -b 1M -l 1k -d 5s\n```\n\n----------------------------------------\n\nTITLE: Example Output of Running Data Source Binary (Shell)\nDESCRIPTION: Shows the expected console output when the `datasource well-known-ips` command is executed successfully. It indicates the server is starting, the default address and port it's listening on (`:8080`), and the URL (`https://iptoasn.com/data/ip2asn-v4.tsv.gz`) it will use to fetch the IP-to-ASN mapping data.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/ip-ranges.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n<nil> INF starting well-known-ips http server address=:8080 ip2asn-url=https://iptoasn.com/data/ip2asn-v4.tsv.gz\n```\n\n----------------------------------------\n\nTITLE: Importing the DocVersions Component in React (JSX)\nDESCRIPTION: This JavaScript (JSX) code imports the `DocVersions` React component from a local path within the site structure, using the `@site` alias common in Docusaurus projects. This component is required to render the UI for accessing different documentation versions.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/versions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocVersions from '@site/src/components/DocVersions';\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Commands for Minio and Argo\nDESCRIPTION: kubectl commands for port forwarding Minio and Argo services for local access\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/argo.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kube-system port-forward svc/argo-minio 9000:9000\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace=kube-system get secret argo-minio -o yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kube-system port-forward svc/argo-server 2746:2746\n```\n\n----------------------------------------\n\nTITLE: Running Zenefits Datasource Binary (Shell)\nDESCRIPTION: This shell command demonstrates how to run the pre-compiled Pomerium Zenefits datasource binary directly. It navigates into the extracted directory and executes the `pomerium-datasource` binary with the `zenefits` subcommand, providing the Zenefits API key (via an environment variable `YOUR_API_KEY`) and the time zone as command-line arguments. Assumes the datasource binary has been downloaded and extracted.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-standing/zenefits.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd pomerium-datasource-*\n./pomerium-datasource zenefits --zenefits-api-key=$YOUR_API_KEY --time-zone=America/New_York\n```\n\n----------------------------------------\n\nTITLE: Restarting Pomerium Service\nDESCRIPTION: Command to reload the daemon and restart the Pomerium service after configuration changes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/self-hosted-pomerium.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl daemon-reload && sudo systemctl restart pomerium.service\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana with Pomerium JWT Authentication in YAML\nDESCRIPTION: This configuration disables Grafana's default login form and sets up JWT authentication using Pomerium. It specifies the JWT header name, email claim field, and the JWKS endpoint URL for verifying tokens from Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/kubernetes/istio/grafana.ini.yml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngrafana.ini:\n  auth:\n    disable_login_form: true\n  auth.jwt:\n    enabled: true\n    header_name: X-Pomerium-Jwt-Assertion\n    email_claim: email\n    jwk_set_url: https://grafana.localhost.pomerium.io/.well-known/pomerium/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Starting Transmission Service\nDESCRIPTION: Command to start Transmission daemon after configuration changes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/transmission.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start transmission-daemon.service\n```\n\n----------------------------------------\n\nTITLE: Installing Pomerium on Debian\nDESCRIPTION: Command to install Pomerium using the Debian package manager after setting up the repository.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/self-hosted-pomerium.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install pomerium\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Chart Repository with Helm (bash)\nDESCRIPTION: This snippet demonstrates how to add the official Grafana Helm chart repository to your local Helm configuration. It is a prerequisite for installing or upgrading Grafana releases using Helm. The command downloads repository information for future package management actions.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/istio.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\n\n```\n\n----------------------------------------\n\nTITLE: Installing Transmission Daemon\nDESCRIPTION: Bash command to install Transmission daemon package on Debian-based Linux distributions.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/transmission.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install transmission-daemon\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services\nDESCRIPTION: Command to start the Docker services defined in the compose file for Pomerium and Grafana.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/grafana.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Running BambooHR Data Source Using Binary - Shell Script\nDESCRIPTION: This shell script demonstrates how to run the BambooHR data provider binary after downloading and extracting the latest release from the Pomerium datasource project. It assumes the working directory contains the extracted binary and requires specifying the BambooHR API key, subdomain, and desired time zone. Use this command on Unix-like systems to start the integration for local development or production.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-standing/bamboohr.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd pomerium-datasource-*\\n./pomerium-datasource bamboohr --bamboohr-api-key=$YOUR_API_KEY --bamboohr-subdomain=$YOUR_BAMBOOHR_SUBDOMAIN --bamboohr-time-zone=America/New_York\n```\n\n----------------------------------------\n\nTITLE: Downloading ToolJet Environment Configuration\nDESCRIPTION: Commands to download and rename the example environment configuration file for ToolJet.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/tooljet.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/.env.example\nmv .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Running OpenSSL Server with mTLS Requirement - Bash\nDESCRIPTION: Restarts the OpenSSL test server with the -Verify 1 flag to enforce mutual TLS: the server now requires clients (such as Pomerium) to present a valid certificate. Useful for validating mTLS connection setup in demo or development environments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/certificates-and-tls.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_server \\\n  -Verify 1 \\\n  -key ./openssl.localhost-key.pem \\\n  -cert ./openssl.localhost.pem \\\n  -accept 44330 \\\n  -www\n\n```\n\n----------------------------------------\n\nTITLE: Multiple Replicas Configuration\nDESCRIPTION: YAML configurations for scaling Pomerium to multiple replicas\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/install.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - https://raw.githubusercontent.com/pomerium/ingress-controller/v0.22.1/deployment.yaml\npatches:\n  - path: deployment.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pomerium\n  namespace: pomerium\nspec:\n  replicas: 2\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Tunnel with pomerium-cli for Service Connection\nDESCRIPTION: This command creates a TCP tunnel using pomerium-cli to connect to a service. It specifies the service address and port, and optionally sets a local listening port.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/_service-template.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli tcp aService.corp.example.com:$COMMON-PORT --listen :$ANOTHER-PORT\n```\n\n----------------------------------------\n\nTITLE: Applying Istio CRDs with kubectl\nDESCRIPTION: Bash command to apply the Istio Custom Resource Definitions (CRDs) to the Kubernetes cluster using kubectl.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/istio.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f authorization-policy.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Signout Redirect URL via Environment Variable in Pomerium Core\nDESCRIPTION: This Bash snippet shows how to configure the signout redirect URL using the `SIGNOUT_REDIRECT_URL` environment variable for Pomerium Core. This variable defines the URL to which users are sent after logging out. This is an alternative to using the YAML configuration file and is required for Pomerium Core.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/signout-redirect-url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSIGNOUT_REDIRECT_URL=https://signout-redirect-url.corp.example.com\n```\n\n----------------------------------------\n\nTITLE: Reloading Prometheus Configuration\nDESCRIPTION: Command to reload Prometheus configuration after making changes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/configure-metrics.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -XPOST path.to.prometheus:port/-/reload\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard CNAME Record for Pomerium Zero Custom Domain\nDESCRIPTION: Example of a DNS configuration using a wildcard CNAME record that points a custom domain to your Pomerium Zero starter domain. This allows Pomerium to handle TLS certificate provisioning via Let's Encrypt.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/custom-domains.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n*.mycorp.example.com CNAME unique-jellyfish-3578.pomerium.app\n```\n\n----------------------------------------\n\nTITLE: Example GeoIP Data Format in JSON\nDESCRIPTION: This JSON snippet illustrates the expected data structure provided by the GeoIP external data source. Each object represents an IP address range (CIDR block) and includes associated geographic information like country code. The `$index` field specifies the key (`cidr`) used for lookups.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/geoip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \"$index\": {\"cidr\": \"1.0.0.0/24\"},\\n    \"id\": \"1.0.0.0/24\",\\n    \"country\": \"US\",\\n    \"state\": \"\",\\n    \"city\": \"\",\\n    \"zip\": \"\",\\n    \"timezone\": \"\"\\n  },\\n  {\\n    \"$index\": {\"cidr\": \"1.0.1.0/24\"},\\n    \"id\": \"1.0.1.0/24\",\\n    \"country\": \"CN\",\\n    \"state\": \"\",\\n    \"city\": \"\",\\n    \"zip\": \"\",\\n    \"timezone\": \"\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Example Pomerium Authorize Log Entry (Including All Headers)\nDESCRIPTION: This JSON log entry illustrates the output when `headers` is included in `authorize_log_fields`. It contains a nested `headers` object detailing all HTTP headers received by the authorize service for the request, alongside the policy evaluation result. Note the inclusion of sensitive information like cookies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"service\": \"authorize\",\n  \"headers\": {\n    \":authority\": \"verify.localhost.pomerium.io\",\n    \":method\": \"GET\",\n    \":path\": \"/api/verify-info\",\n    \":scheme\": \"https\",\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Content-Type\": \"application/json\",\n    \"Cookie\": \"_pomerium=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhYnJva2VyX3JlY29yZF92ZXJzaW9uIjozMTQwLCJkYXRhYnJva2VyX3NlcnZlcl92ZXJzaW9uIjo3OTM4MDg0ODcsImlhdCI6MTY5MTQxODM5MiwianRpIjoiMTcyZTQ1NTEtZTllYi00ZmUwLWE2Y2UtMjQ0NWM3NjA0MGJkIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMTU0MjA2NjQ3MjYxODMzMjM3NTgifQ.ktq6oFtiBiGwNsU-5DQzLNTszexFhyNl1Iz4kc_Uq2M\",\n    \"Referer\": \"https://verify.localhost.pomerium.io/\",\n    \"Sec-Ch-Ua\": \"\\\"Not/A)Brand\\\";v=\\\"99\\\", \\\"Google Chrome\\\";v=\\\"115\\\", \\\"Chromium\\\";v=\\\"115\\\"\",\n    \"Sec-Ch-Ua-Mobile\": \"?0\",\n    \"Sec-Ch-Ua-Platform\": \"\\\"macOS\\\"\",\n    \"Sec-Fetch-Dest\": \"empty\",\n    \"Sec-Fetch-Mode\": \"cors\",\n    \"Sec-Fetch-Site\": \"same-origin\",\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36\",\n    \"X-Envoy-Internal\": \"true\",\n    \"X-Forwarded-For\": \"XXX.XXX.X.XXX\",\n    \"X-Forwarded-Proto\": \"https\",\n    \"X-Request-Id\": \"d6c95dd6-9f3c-4653-94d1-62ea54b11328\"\n  },\n  \"allow\": true,\n  \"allow-why-true\": [\"domain-ok\"],\n  \"deny\": false,\n  \"deny-why-false\": [],\n  \"time\": \"2023-08-07T10:32:03-04:00\",\n  \"message\": \"authorize check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting GitLab Docker Container\nDESCRIPTION: Command to start the GitLab Docker container using Docker Compose.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Starting Factorio Server - Bash Command\nDESCRIPTION: Command to start the Factorio headless server with the created save file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/factorio.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/x64/factorio --start-server ./saves/pomerium-example.zip\n```\n\n----------------------------------------\n\nTITLE: Running Well Known IP Data Source Binary Locally (Shell)\nDESCRIPTION: Shell commands to run the Well Known IP Ranges data source using the downloaded binary. It first changes into the directory containing the extracted binary and then executes the `datasource` binary with the `well-known-ips` subcommand to start the server.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/ip-ranges.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd datasource-v*\n./datasource well-known-ips\n```\n\n----------------------------------------\n\nTITLE: Updating Pomerium Zero on Debian-based Linux Systems\nDESCRIPTION: This command updates the package list and installs the latest version of Pomerium on Debian-based Linux systems.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/cloud/install.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt update && sudo apt install pomerium\n```\n\n----------------------------------------\n\nTITLE: Enterprise Console Configuration\nDESCRIPTION: YAML configuration for Enterprise Console showing administrator and license settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/tooljet.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nadministrators: admin@example.com\nlicense_key: YOUR_LICENSE_KEY\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret in Kubernetes\nDESCRIPTION: Command to create a Kubernetes TLS secret using the generated certificate and key\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create secret tls pomerium-wildcard-tls --namespace=pomerium \\\n  --cert=./_wildcard.localhost.pomerium.io.pem --key=./_wildcard.localhost.pomerium.io-key.pem\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository via Tunneled Connection\nDESCRIPTION: Git clone command that uses the local tunneled connection as a remote. It specifies the local address and port where the tunnel is listening.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/git.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone ssh://git@127.0.0.1:2202/username/project-name\n```\n\n----------------------------------------\n\nTITLE: Running Pomerium with Docker Compose\nDESCRIPTION: This command starts the Pomerium and verify services using Docker Compose in the project's root directory.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/get-started.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookie HTTP Only Flag in Pomerium Core YAML\nDESCRIPTION: This YAML snippet demonstrates setting the `cookie_http_only` parameter to `false` in a Pomerium Core configuration file. By default, this is `true`, which prevents client-side JavaScript from accessing the cookie. Setting it to `false` allows JavaScript access.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/cookies.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncookie_http_only: false\n```\n\n----------------------------------------\n\nTITLE: Running Docker Containers for Pomerium Import\nDESCRIPTION: Command to start Docker containers before importing Pomerium Core configuration to Zero\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/cloud/import.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Removing Pomerium Startup Files (Shell)\nDESCRIPTION: Commands to remove files created by Pomerium when running as a different user, which can prevent startup. This resolves issues with shared memory regions and Unix sockets.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo rm /dev/shm/envoy_shared_memory_*\n$ sudo rm /tmp/pomerium-envoy-admin.sock\n```\n\n----------------------------------------\n\nTITLE: Example VPN Provider IP List Structure (JSON)\nDESCRIPTION: Illustrates the JSON format of the data provided by the VPN Providers external data source. Each object contains an 'id' field representing an IP address range in CIDR notation associated with a known VPN provider.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/request-context/vpn-providers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"Example\"\n[{\"id\": \"1.116.0.0/15\"}, {\"id\": \"1.12.32.0/23\"}, {\"id\": \"1.14.0.0/15\"}]\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Client Certificates in FleetDM\nDESCRIPTION: SQL query to retrieve non-CA certificates from enrolled hosts in FleetDM. Used to get certificate data including SHA-1 fingerprints.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/device-context/fleetdm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM certificates where ca != 1;\n```\n\n----------------------------------------\n\nTITLE: Restarting Jenkins Service\nDESCRIPTION: Command to restart the Jenkins service after installing plugins or making configuration changes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/jenkins.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart jenkins\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Organization Retrieval\nDESCRIPTION: This JSON snippet illustrates the expected response structure when querying the `/organizations` endpoint. It returns an array of organization objects, each containing details like `id`, `name`, `organizationType`, and the user's `role`. The highlighted line indicates the organization ID.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/management-api-zero.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"createdAt\": \"2024-01-17T20:07:47.794672Z\",\n    \"id\": \"bwjkRZwxbNXBQHHcJHphGSNBbxt\",\n    \"joinedAt\": \"2024-05-29T20:27:27.336939Z\",\n    \"name\": \"personal\",\n    \"organizationType\": \"personal\",\n    \"ownerUserId\": \"bMWxgvnRQfcRHjQvfMehbJhYFzB\",\n    \"role\": \"admin\",\n    \"updatedAt\": \"2024-01-17T20:07:47.794672Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Guacamole Container in Docker Compose\nDESCRIPTION: This YAML snippet shows the configuration for the Guacamole container in the Docker Compose file. It includes environment variables for database connection and HTTP header authentication settings.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/guacamole.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nguacamole:\n  container_name: guacamole_compose\n  depends_on:\n    - guacd\n    - postgres\n  environment:\n    GUACD_HOSTNAME: guacd\n    POSTGRES_DATABASE: guacamole_db\n    POSTGRES_HOSTNAME: postgres\n    POSTGRES_PASSWORD: 'ChooseYourOwnPasswordHere1234'\n    POSTGRES_USER: guacamole_user\n    HEADER_ENABLED: true\n    HTTP_AUTH_HEADER: X-Pomerium-Claim-Email\n  image: guacamole/guacamole\n  networks:\n    - guacnetwork_compose\n  volumes:\n    - ./record:/record:rw\n  ports:\n    - 8080/tcp\n  restart: always\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Repositories for Pomerium Deployment\nDESCRIPTION: Commands to add the necessary Helm repositories for deploying Pomerium. The commands add the Bitnami, Pomerium, and Traefik repositories to your Helm configuration, enabling chart installation from these sources.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/traefik-ingress/add_repos.sh.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo add pomerium https://helm.pomerium.io\nhelm repo add traefik https://containous.github.io/traefik-helm-chart\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Data Directory\nDESCRIPTION: Command to create a directory for ToolJet's PostgreSQL database storage.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/tooljet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir postgres_data\n```\n\n----------------------------------------\n\nTITLE: Example JSON Format for Pomerium External Data Source\nDESCRIPTION: Illustrates the expected JSON structure for an external data source file. The file must contain an array of objects, and each object must include an 'id' field used for mapping.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"example JSON\"\n[\n  {\"id\": \"id4@example.com\", \"user.id\": \"user4\"},\n  {\"id\": \"id5@example.com\", \"user.id\": \"user5\"},\n  {\"id\": \"id6@example.com\", \"user.id\": \"user6\"}\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Tunneled Git Remote\nDESCRIPTION: Git command to add a remote repository using the Pomerium-tunneled connection.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/gitlab.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add gitlab-tunneled ssh://git@127.0.0.1:2202/username/project-name\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for HedgeDoc and Pomerium\nDESCRIPTION: This bash command starts the Docker Compose services defined in the YAML file, launching both Pomerium and HedgeDoc containers.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/hedgedoc.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Zonefile with CNAME for Google Cloud Run - JavaScript\nDESCRIPTION: Defines a zonefile entry using a CNAME record to map all subdomains under cloudrun.pomerium.io to ghs.googlehosted.com. This configuration ensures that wildcard subdomains (e.g., app.cloudrun.pomerium.io) are properly routed through Google Hosted Services. No external dependencies are required, but users must have appropriate access to their DNS provider to set this record. The only parameter is the domain pattern (*.cloudrun.pomerium.io.), which should match the intended subdomain routing requirements. The output is an updated DNS zonefile, and the main limitation is that DNS propagation times may vary by provider.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/cloudrun/zonefile.txt.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/*.cloudrun.pomerium.io. 18000 IN CNAME ghs.googlehosted.com.*/\n```\n\n----------------------------------------\n\nTITLE: Connecting to SSH Demo Service\nDESCRIPTION: Commands to establish SSH connection through Pomerium CLI to the demo SSH service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli tcp ssh.<CLUSTER_STARTER_DOMAIN>.app:22\n```\n\nLANGUAGE: bash\nCODE:\n```\nssh ssh-demo.pomerium.com -p 22\n```\n\n----------------------------------------\n\nTITLE: Pomerium Proxy DeadlineExceeded RPC Error Log - JSON\nDESCRIPTION: This log snippet (JSON) captures a typical error when the Pomerium proxy cannot communicate with the authorization service, generating a DeadlineExceeded error. Fields include error messages, HTTP code, and log level. It is useful for troubleshooting service routing, gRPC connectivity, or configuration issues between Pomerium components.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"level\":\"error\",...\"error\":\"rpc error: code = DeadlineExceeded desc = context deadline exceeded\",\"http-message\":\"rpc error: code = DeadlineExceeded desc = context deadline exceeded\",\"http-code\":500,\"message\":\"http-error\"}\n```\n\n----------------------------------------\n\nTITLE: Expected Output Log from BambooHR Data Source - JSON\nDESCRIPTION: This JSON snippet represents a typical informational log output, indicating that the BambooHR datasource is ready. It signals successful startup and readiness to accept connections or requests. This data is output by the binary service and is useful for monitoring and troubleshooting. There are no required input parameters for this output; it is informational only.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-standing/bamboohr.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\\"level\\\": \\\"info\\\", \\\"message\\\": \\\"ready\\\"}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Log Filtering\nDESCRIPTION: Command to filter Pomerium logs to show only authorize service entries in Kubernetes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/audit-logs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f deploy/pomerium-authorize | grep '\"service\":\"authorize\"' | jq\n```\n\n----------------------------------------\n\nTITLE: Restarting Cockpit Service\nDESCRIPTION: Command to restart the Cockpit service to apply configuration changes.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/cockpit.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart cockpit.service\n```\n\n----------------------------------------\n\nTITLE: Rendering the DocVersions Component in React (JSX)\nDESCRIPTION: This JSX snippet renders the imported `DocVersions` component within the documentation page. It executes the component's logic to display the necessary elements (likely links or dropdowns) for navigating to archived versions of the documentation.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/versions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocVersions />\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Ingress with Pomerium Authentication in Kubernetes\nDESCRIPTION: This YAML configuration sets up a Kubernetes Ingress resource that uses Pomerium for authentication through Traefik's middleware functionality. It defines host routing for hello.localhost.pomerium.io, enables TLS, and specifies the Pomerium authentication middleware to be used with Traefik.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/traefik-ingress/values/hello.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: true\n  hosts:\n    - name: hello.localhost.pomerium.io\n      path: /\n\n  annotations:\n    traefik.ingress.kubernetes.io/router.middlewares: pomerium-auth@kubernetescrd\n    traefik.ingress.kubernetes.io/router.tls: \"true\"\n  tls:\n    - hosts:\n        - hello.localhost.pomerium.io\n      secretName: wildcard-tls\nservice:\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: HTTPBin Response Headers JSON\nDESCRIPTION: Sample JSON response from HTTPBin showing the headers passed through by Pomerium. This demonstrates how identity headers are passed to the upstream application.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Cookie\": \"\",\n    \"Host\": \"httpbin\",\n    \"Referer\": \"https://httpbin.localhost.pomerium.io/\",\n    \"Sec-Ch-Ua\": \"\\\"Google Chrome\\\";v=\\\"119\\\", \\\"Chromium\\\";v=\\\"119\\\", \\\"Not?A_Brand\\\";v=\\\"24\\\"\",\n    \"Sec-Ch-Ua-Mobile\": \"?0\",\n    \"Sec-Ch-Ua-Platform\": \"\\\"macOS\\\"\",\n    \"Sec-Fetch-Dest\": \"empty\",\n    \"Sec-Fetch-Mode\": \"cors\",\n    \"Sec-Fetch-Site\": \"same-origin\",\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36\",\n    \"X-Envoy-Expected-Rq-Timeout-Ms\": \"30000\",\n    \"X-Envoy-Internal\": \"true\",\n    \"X-Pomerium-Jwt-Assertion\": \"...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose with Pomerium and Services\nDESCRIPTION: This command starts the Pomerium, verification service, and Grafana containers as defined in the docker-compose.yaml file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/build-routes.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Gateway API CRDs with kubectl\nDESCRIPTION: Command to install Gateway API Custom Resource Definitions in Kubernetes cluster.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/gateway-api.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.0/standard-install.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Session Secret for HedgeDoc\nDESCRIPTION: This bash command generates a random 32-byte string encoded in base64, which is used as the session secret for HedgeDoc to sign session cookies.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/hedgedoc.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhead -c32 /dev/urandom | base64\n```\n\n----------------------------------------\n\nTITLE: Logging into Cloudsmith Docker Registry\nDESCRIPTION: Commands to log into the private Cloudsmith.io Docker registry for Pomerium Enterprise. This requires valid credentials for the registry.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/enterprise/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker login docker.cloudsmith.io\n```\n\nLANGUAGE: shell\nCODE:\n```\n% docker login docker.cloudsmith.io\nUsername: <username>\nPassword: <password>\n```\n\n----------------------------------------\n\nTITLE: Creating Factorio Save File - Bash Command\nDESCRIPTION: Command to create a new Factorio save file for the server.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/factorio.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/x64/factorio --create ./saves/pomerium-example.zip\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jenkins Initial Admin Password\nDESCRIPTION: Command to retrieve the initial admin password for Jenkins from the secrets file.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/jenkins.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n----------------------------------------\n\nTITLE: Docker Log Access\nDESCRIPTION: Command to display Pomerium logs when running in a Docker container.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/audit-logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs pomerium\n```\n\n----------------------------------------\n\nTITLE: Expected Output of Zenefits Datasource Binary (Shell)\nDESCRIPTION: This snippet shows the expected console output when the Pomerium Zenefits datasource binary starts successfully. It indicates that the service is ready and listening for connections on `localhost:8080`. This confirms the datasource is running correctly after executing the binary.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/user-standing/zenefits.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n{\"level\":\"info\",\"address\":\"localhost:8080\",\"message\":\"ready\"}\n```\n\n----------------------------------------\n\nTITLE: Example OIDC Discovery Document from /.well-known/pomerium\nDESCRIPTION: This JSON snippet represents the discovery document available at the `/.well-known/pomerium` endpoint, similar to an OpenID Connect Discovery document. It provides essential metadata about the Pomerium instance, including the issuer URL, the authentication callback endpoint, the front-channel logout URI, and the location of the JSON Web Key Set (JWKS) URI, facilitating dynamic client configuration.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/special-routes.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuer\": \"https://app.example.com/\",\n  \"authentication_callback_endpoint\": \"https://authenticate.example.com/oauth2/callback\",\n  \"frontchannel_logout_uri\": \"https://app.example.com/.pomerium/sign_out\",\n  \"jwks_uri\": \"https://app.example.com/.well-known/pomerium/jwks.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: NGINX Ingress Port Forwarding\nDESCRIPTION: Command to set up port forwarding for the NGINX ingress controller\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/argo.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace kube-system port-forward svc/ingress-nginx-controller 443:443\n```\n\n----------------------------------------\n\nTITLE: HTML Iframe Embedding for WebAuthn Demo Video\nDESCRIPTION: HTML iframe code to embed a YouTube video demonstrating WebAuthn device identity functionality.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/device-context/webauthn.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  width=\"100%\"\n  height=\"500\"\n  src=\"https://www.youtube.com/embed/aJzgnaXEpLo?rel=0\"\n  frameBorder=\"0\"\n  allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowFullScreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Default Security HTTP Headers - headers - headers\nDESCRIPTION: This code block lists the default secure HTTP headers that Pomerium sets for responses. It includes standard headers to protect against common web vulnerabilities, such as XSS and clickjacking. Meant for informational/reference purposes; not an actual configuration snippet. Input/output not applicable; headers are enabled by default unless overridden or disabled.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/set-response-headers.mdx#2025-04-23_snippet_3\n\nLANGUAGE: headers\nCODE:\n```\nX-Content-Type-Options : nosniff,\\nX-Frame-Options:SAMEORIGIN,\\nX-XSS-Protection:1; mode=block,\\nStrict-Transport-Security:max-age=31536000; includeSubDomains; preload,\n```\n\n----------------------------------------\n\nTITLE: Creating and Verifying a Local Certificate Authority with mkcert\nDESCRIPTION: This snippet demonstrates how to install a local Certificate Authority using mkcert and then verify the location and names of the created CA certificate files. The command creates trusted certificates that browsers will recognize in local development environments.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/admonitions/_install-mkcert.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ mkcert -install\nThe local CA is already installed in the system trust store! 👍\nThe local CA is already installed in the Firefox and/or Chrome/Chromium trust store! 👍\n\n$ ls \"$(mkcert -CAROOT)\"\nrootCA-key.pem  rootCA.pem\n```\n\n----------------------------------------\n\nTITLE: Starting FleetDM Plugin Container\nDESCRIPTION: Command to start the FleetDM plugin container using Docker Compose.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/device-context/fleetdm.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Building Pomerium CLI from Source\nDESCRIPTION: Commands to clone and build Pomerium CLI from source code.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/clients/clients.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/pomerium/cli.git\ncd cli\nmake build\n./bin/pomerium-cli --help\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Node.js Application\nDESCRIPTION: Dockerfile configuration to containerize the Node.js application. This sets up the environment and dependencies for the application in a container.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/get-started/fundamentals/core/advanced-routes.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# pull the Node.js Docker image\nFROM node:alpine\n\n# create the directory inside the container\nWORKDIR /usr/src/app\n\n# copy the package.json files from local machine to the workdir in container\nCOPY package*.json ./\n\n# run npm install in our local machine\nRUN npm install\n```\n\n----------------------------------------\n\nTITLE: Filtering Client Certificates by Subject in Pomerium CLI\nDESCRIPTION: Example of filtering client certificates from the system trust store based on the certificate subject's Organizational Unit Name.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/_cli-client-certificates.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli ${props.protocol} --client-cert-from-store --client-cert-subject \"OU=My Department\" route.corp.example.com:1234\n```\n\n----------------------------------------\n\nTITLE: Docker Log Filtering\nDESCRIPTION: Command to filter Pomerium logs to show only authorize service entries when running in Docker.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/audit-logs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs pomerium | grep '\"service\":\"authorize\"'\n```\n\n----------------------------------------\n\nTITLE: HTML Template for CORS Testing (HTML)\nDESCRIPTION: A simple HTML template that includes a JavaScript module for testing cross-origin requests. This can be used with the Go web server to test CORS configurations.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <title>Example Application</title>\n    <script type=\"module\" src=\"index.mjs\"></script>\n  </head>\n  <body></body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: External Data Provider Command\nDESCRIPTION: Command to invoke the external data provider integration from the datasource\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/_template.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$COMMAND\n```\n\n----------------------------------------\n\nTITLE: Navigating to the deployed application\nDESCRIPTION: URL to access the deployed hello application after setting up Pomerium and Traefik.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/traefik-ingress/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://hello.localhost.pomerium.io\n```\n\n----------------------------------------\n\nTITLE: Example Pomerium Authorize Log Entry (Default Fields)\nDESCRIPTION: This JSON object represents a typical log entry from the Pomerium authorize service with the message \"authorize check\". It includes several default fields like `request-id`, `method`, `path`, `host`, `ip`, user identifiers, and the policy evaluation result (`allow`, `deny`). This example demonstrates the structure and content of logs when default fields are used.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\":\"info\",\n  \"service\":\"authorize\",\n  \"request-id\":\"f55d5fd5-2d6c-42d1-a7f6-007ad7ec3a85\",\n  \"check-request-id\":\"f55d5fd5-2d6c-42d1-a7f6-007ad7ec3a85\",\n  \"method\":\"POST\",\"path\":\"/pomerium.dashboard.KeyChainService/ListKeyPairs\",\n  \"host\":\"console.localhost.pomerium.io\",\n  \"ip\":\"127.0.0.1\",\n  \"session-id\":\"45445311-b287-4476-b17e-d5a8965ff3f4\",\n  \"user\":\"google-oauth2|XXXXXXXXXXXXXXXXXXXXX\",\\\n  \"email\":\"example@pomerium.com\",\n  \"allow\":true,\n  \"allow-why-true\":[\"domain-ok\"],\n  \"deny\":false,\"deny-why-false\":[],\n  \"time\":\"2023-08-07T09:48:03-04:00\",\n  \"message\":\"authorize check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose\nDESCRIPTION: This bash command runs Docker Compose in detached mode to start the Guacamole and Pomerium services.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/guides/guacamole.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Set Request Headers Annotation - YAML\nDESCRIPTION: This snippet uses a Kubernetes ingress annotation to set one or more custom request headers on proxied traffic. The value is a YAML block listing header key-value pairs. Requires the Pomerium ingress controller. Inputs are the ingress resource annotations; outputs are HTTP requests with modified headers. Proper indentation and YAML block syntax are necessary for multi-line values.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/set_request_headers: |\n  X-Test: X-Value\n```\n\n----------------------------------------\n\nTITLE: Example Pomerium Authorize Log Entry (Specific Fields)\nDESCRIPTION: This JSON object shows an example log entry from the Pomerium authorize service when `authorize_log_fields` is configured to include only `request-id`, `method`, and `path`. Compared to the default log, it's more concise, containing only the specified fields and the policy evaluation outcome.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/authorize-log-fields.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"service\": \"authorize\",\n  \"request-id\": \"c9afae5a-ec5a-4242-864f-df4189f20e99\",\n  \"method\": \"GET\",\n  \"path\": \"/index.css\",\n  \"allow\": true,\n  \"allow-why-true\": [\"domain-ok\"],\n  \"deny\": false,\n  \"deny-why-false\": [],\n  \"time\": \"2023-08-07T10:26:33-04:00\",\n  \"message\": \"authorize check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Redirection with Docusaurus Router in JSX\nDESCRIPTION: This code snippet imports the Redirect component from Docusaurus router and implements a redirect from the current page to the /docs path. This is commonly used as an index page that automatically sends users to the main documentation.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Redirect} from '@docusaurus/router';\n\n<Redirect to=\"/docs\" />\n```\n\n----------------------------------------\n\nTITLE: Default Pomerium Request Parameters for Google IdP\nDESCRIPTION: Shows the default request parameters `prompt: select_account consent` and `access_type: offline` automatically included by Pomerium when using Google as the identity provider. Setting `idp_request_params` will replace these default parameters.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/identity-provider-settings.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nprompt: select_account consent\naccess_type: offline\n```\n\n----------------------------------------\n\nTITLE: Starting Ethr Server\nDESCRIPTION: Command to start the Ethr server for UDP testing.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/ethr.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nethr -s\n```\n\n----------------------------------------\n\nTITLE: Example Access Log Entry with xff_num_trusted_hops: 0\nDESCRIPTION: An example access log entry in JSON format corresponding to the configuration where `xff_num_trusted_hops` is `0`. The `ip` field shows the IP address of the direct downstream client (`10.1.2.3`), not the original client IP from the XFF header.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/x-forwarded-for-settings.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"service\": \"envoy\",\n  \"forwarded-for\": \"192.0.5.1,10.1.2.3\",\n  \"ip\": \"10.1.2.3\",\n  \"method\": \"GET\",\n  \"path\": \"/\",\n  \"time\": \"2024-07-08T16:42:48-07:00\",\n  \"message\": \"http-request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tabbed Configuration Sections using Docusaurus Tabs (Markdown)\nDESCRIPTION: This snippet illustrates the use of Docusaurus's custom React components, Tabs and TabItem, inside a Markdown document to create a tabbed interface. The tabs separate instructions for configuring route descriptions under Core deployments, Enterprise Console UI, and Kubernetes. Required dependencies include Docusaurus 2 with @theme/Tabs and @theme/TabItem, and a compatible Markdown/MDX parser. The input is Markdown/MDX with embedded JSX, and output is rendered HTML tabs in the documentation portal. Tabs must be properly closed and nested; configuration tables and content must be valid Markdown.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/description.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Tabs from '@theme/Tabs';\\nimport TabItem from '@theme/TabItem';\\n\\n<Tabs>\\n<TabItem value=\\\"Core\\\" label=\\\"Core\\\">\\n\\n| **Config file key** | **Type** | **Usage**    |\\n| :------------------ | :------- | :----------- |\\n| `description`       | `string` | **optional** |\\n\\n</TabItem>\\n<TabItem value=\\\"Enterprise\\\" label=\\\"Enterprise\\\">\\n\\nSet the route **description** under **General** route settings in the Console:\\n\\n![Set the route **description** under **General** route settings in the Console](../img/routes/route-description.png)\\n\\n</TabItem>\\n<TabItem value=\\\"Kubernetes\\\" label=\\\"Kubernetes\\\">\\n\\n| **[Annotation name](/docs/deploy/k8s/ingress#set-ingress-annotations)** | **Type** | **Usage** |\\n| :-- | :-- | :-- |\\n| `description` | `string` | **optional** |\\n\\n</TabItem>\\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Example Event Log for Ingress Update Error (Log)\nDESCRIPTION: Displays sample event output from `kubectl describe ingress` showing a 'Warning' event with reason 'UpdateError'. This signifies an error encountered by the Pomerium Ingress controller while processing the Ingress, with the message providing details about the failure (e.g., invalid policy rule).\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/ingress.md#2025-04-23_snippet_14\n\nLANGUAGE: log\nCODE:\n```\nEvents:\n  Type     Reason       Age                 From              Message\n  ----     ------       ----                ----              -------\n  Normal   Updated      5m53s               pomerium-ingress  updated pomerium configuration\n  Warning  UpdateError  3s                  pomerium-ingress  upsert routes: parsing ingress: annotations: applying policy annotations: parsing policy: invalid rules in policy: unsupported conditional \"maybe\", only and, or, not, nor and action are allowed\n```\n\n----------------------------------------\n\nTITLE: Shared Secret Mismatch Error Log - JSON (Pomerium Enterprise)\nDESCRIPTION: These log snippets in JSON format represent error and informational messages from Pomerium Enterprise, indicating a shared secret mismatch during device synchronization. They include extended stacktrace, caller, and message fields—useful for advanced debugging in enterprise deployments. Displayed output is from live log files.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"error\",\n  \"ts\": \"2022-03-22T07:21:02-04:00\",\n  \"caller\": \"dashboard/server.go:187\",\n  \"msg\": \"syncer\",\n  \"error\": \"failed to sync all devices: rpc error: code = Unauthenticated desc = invalid JWT: go-jose/go-jose: error in cryptographic primitive\",\n  \"stacktrace\": \"github.com/pomerium/pomerium-console/svc/dashboard.(*Server).Run.func2\\n\\t/PATH/TO/POMERIUM/CONSOLE/SERVICE/svc/dashboard/server.go:187\\ngolang.org/x/sync/errgroup.(*Group).Go.func1\\n\\t/Users/tgroth/workspace/go/pkg/mod/golang.org/x/sync@v0.0.0-20210220032951-036812b2e83c/errgroup/errgroup.go:57\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"ts\": \"2022-03-22T07:21:02-04:00\",\n  \"caller\": \"dashboard/server.go:202\",\n  \"msg\": \"stopping dashboard servers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Websocket Proxying via Kubernetes Ingress Annotation (YAML)\nDESCRIPTION: Configures the `ingress.pomerium.io/allow_websockets` annotation on a Kubernetes Ingress resource to enable websocket proxying for the associated route. The value should be the string representation of the boolean `true`. This method allows enabling websockets on a per-ingress basis.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/timeouts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningress.pomerium.io/allow_websockets: 'true'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Pomerium Documentation\nDESCRIPTION: Command to install the necessary dependencies for the Pomerium documentation project using Yarn package manager.\nSOURCE: https://github.com/pomerium/documentation/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Route IdP Client Secret in Pomerium Core YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a specific Identity Provider (IdP) client secret for a particular route within the Pomerium Core configuration file. The `idp_client_secret` key is placed under a specific route definition (e.g., for `https://verify.localhost.pomerium.io`) and its value overrides any globally configured `idp_client_secret`. This allows different routes to use different IdP client secrets if needed.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/identity-provider-client-secret-per-route.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nroutes:\n  - from: https://verify.localhost.pomerium.io\n    to: http://verify:8000\n    idp_client_secret: idp_client_secret\n```\n```\n\n----------------------------------------\n\nTITLE: Copying mkcert Certificate Authority File - Shell\nDESCRIPTION: This snippet copies mkcert's root certificate authority file to the current directory, which is necessary for Pomerium instances to establish trust between one another. mkcert must be installed; the command uses command substitution to find the CA root. The output is a local rootCA.pem file used in Docker secrets and certificate validation.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/configuration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncp \"$(mkcert --CAROOT)\"/rootCA.pem .\n\n```\n\n----------------------------------------\n\nTITLE: Importing ReferenceTable Component in MDX/JavaScript\nDESCRIPTION: This JavaScript import statement, used within an MDX file (often processed by frameworks like Docusaurus), imports the `ReferenceTable` React component from a relative path (`../../src/components/ReferenceTable`). This component is intended to render a table displaying configuration reference information. Its usage assumes a build environment capable of resolving JavaScript modules and handling React components.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReferenceTable from '../../src/components/ReferenceTable';\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Pass Identity Headers in Pomerium Core (YAML)\nDESCRIPTION: This YAML configuration example demonstrates how to enable the global `pass_identity_headers` setting in Pomerium's core configuration file by setting it to `true`. When enabled, Pomerium sends identity headers (`X-Pomerium-Jwt-Assertion`, `X-Pomerium-Claim-*`) to all upstream applications defined in the routes by default. A sample `routes` definition is included for context.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/pass-identity-headers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npass_identity_headers: true\n\nroutes:\n  - from: https://service.corp.example.io\n    to: http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Component in MDX\nDESCRIPTION: This MDX snippet imports a reusable Markdown component named '_install-mkcert.md' located in the specified path within the documentation site's content structure. This allows for the inclusion of common admonitions or content blocks across multiple documentation pages.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport InstallMkcert from '@site/content/docs/admonitions/_install-mkcert.md';\n```\n\n----------------------------------------\n\nTITLE: Example Service Account Authentication Response\nDESCRIPTION: Sample HTTP response showing a successful authentication using a service account JWT, including headers and response metadata.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/service-accounts.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHTTP/2 200\naccept-ranges: bytes\ncache-control: no-cache\ncontent-type: text/html; charset=utf-8\netag: \"75df42fffe5e9fdf2c13f64963d04e8115fb06f8e9c4a97db3c9d7394ab6be38\"\nx-cloud-trace-context: 97f79dda2b32e0618d7e53cee2c85bcb;o=1\ndate: Mon, 04 Mar 2024 21:56:24 GMT\nserver: envoy\ncontent-length: 1191\nx-envoy-upstream-service-time: 206\nx-frame-options: SAMEORIGIN\nx-xss-protection: 1; mode=block\nx-request-id: bcd0bb52-25fb-4858-8da0-a552fc9b2859\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream mTLS CA via File Path Environment Variable (Bash)\nDESCRIPTION: This snippet shows how to specify the path to the downstream mTLS Certificate Authority (CA) bundle file using the `DOWNSTREAM_MTLS_CA_FILE` environment variable. This corresponds to the `downstream_mtls.ca_file` key in the YAML configuration and serves as an alternative to setting the CA content inline.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/downstream-mtls-settings.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDOWNSTREAM_MTLS_CA_FILE=/path/to/trusted/CAs.pem\n```\n\n----------------------------------------\n\nTITLE: Defining Pomerium Policy Filter in Gateway API\nDESCRIPTION: Creates a PolicyFilter custom resource to define authorization rules using Pomerium Policy Language (PPL). This example allows access only from a specific company domain.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/deploy/k8s/gateway-api.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.pomerium.io/v1alpha1\nkind: PolicyFilter\nmetadata:\n  name: allow-internal\nspec:\n  ppl: |\n    allow:\n      and:\n        - domain:\n            is: your-company-domain.com\n```\n\n----------------------------------------\n\nTITLE: Simple Web Server for CORS Testing (Go)\nDESCRIPTION: A basic Go web server that serves static files from the current directory. This can be used to test CORS configurations with Pomerium.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/internals/troubleshooting.mdx#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.Handle(\"/\", http.FileServer(http.Dir(\".\")))\n\thttp.ListenAndServe(\":8000\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Traefik with kubectl port-forward\nDESCRIPTION: Command to create a port-forward from the Traefik service in Kubernetes to local ports 80 and 443, allowing local access to the deployed services.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/examples/traefik-ingress/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward service/traefik 80:80 443:443\n```\n\n----------------------------------------\n\nTITLE: Example Markdown Header Configuration\nDESCRIPTION: Example of markdown formatting that can be used in the custom header field of Pomerium's branding settings to display on denial pages.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/self-remediation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Help Resources\\n\\nIf you need assistance, please visit our [internal help desk](https://help.company.com) or contact support at support@company.com.\\n\\n![Company Logo](path/to/logo.png)\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Pomerium Core (YAML)\nDESCRIPTION: This snippet demonstrates how to set custom response headers in Pomerium Core using YAML configuration. It shows how to add an X-Test header with a value of X-Value.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/routes/headers.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nset_response_headers:\n  X-Test: X-Value\n```\n\n----------------------------------------\n\nTITLE: Illustrating HTTP Bearer Token Format\nDESCRIPTION: Shows a sample GET request with an `Authorization: Bearer Token` header, demonstrating the standard way bearer tokens are included in HTTP requests.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/reference/bearer-token-format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET / HTTP/1.1\nAuthorization: Bearer Token\n```\n\n----------------------------------------\n\nTITLE: Initiating Service Connection to Localhost\nDESCRIPTION: This command initiates a connection to the service through the established TCP tunnel. It points to localhost, using the port specified in the tunnel creation step.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/_service-template.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$COMMAND\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Pomerium Documentation\nDESCRIPTION: Command to start a local development server for the Pomerium documentation site. This opens a browser window and allows for live updates as changes are made.\nSOURCE: https://github.com/pomerium/documentation/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Building Pomerium Documentation for Production\nDESCRIPTION: Command to generate static content for the Pomerium documentation site. The output is placed in the 'build' directory and can be deployed to any static content hosting service.\nSOURCE: https://github.com/pomerium/documentation/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Starting Pomerium UDP Tunnel - Bash Command\nDESCRIPTION: Command to start a UDP tunnel using the Pomerium CLI for connecting to the Factorio server.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/capabilities/non-http/examples/factorio.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npomerium-cli udp factorio.corp.example.com:34197 --listen :34197\n```\n\n----------------------------------------\n\nTITLE: React Tab Component Import\nDESCRIPTION: Import statements for React tab components used in the documentation interface.\nSOURCE: https://github.com/pomerium/documentation/blob/main/content/docs/integrations/device-context/webauthn.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```"
  }
]