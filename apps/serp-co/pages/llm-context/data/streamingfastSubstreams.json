[
  {
    "owner": "streamingfast",
    "repo": "substreams",
    "content": "TITLE: Installing Substreams CLI via Homebrew\nDESCRIPTION: Command to install the Substreams CLI tool using Homebrew package manager.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/installing-the-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install streamingfast/tap/substreams\n```\n\n----------------------------------------\n\nTITLE: Initializing a Substreams Project with CLI\nDESCRIPTION: Initialize a new Substreams project targeting the USDT smart contract using the substreams init command which scaffolds the project structure and generates code from the contract ABI.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams init\n```\n\n----------------------------------------\n\nTITLE: Integrating Contract Call in Substreams Module Handler\nDESCRIPTION: Modify the map_events handler to execute the get_decimals function and log the result, demonstrating how to incorporate contract calls into a Substreams module.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn map_events(blk: eth::Block) -> Result<contract::Events, substreams::errors::Error> {\n    let evt_block_time =\n        (blk.timestamp().seconds as u64 * 1000) + (blk.timestamp().nanos as u64 / 1000000);\n\n    // Using the decimals function\n    let decimals = get_decimals();\n    substreams::log::info!(\"Number of decimals for the USDT token: {}\", decimals.to_string());\n\n...output omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Dynamic Library Type\nDESCRIPTION: Cargo configuration excerpt specifying the crate type as a dynamic system library for WASM compilation.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/setting-up-handlers.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n...\n\n[lib]\ncrate-type = [\"cdylib\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing EVM Substreams Project with CLI\nDESCRIPTION: Command to initialize a new EVM Substreams project. It offers two options: 'evm-minimal' for raw block data extraction and 'evm-events-calls' for extracting and decoding EVM events and calls.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/evm.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams init\n```\n\n----------------------------------------\n\nTITLE: Running Substreams Module\nDESCRIPTION: Connects to a Substreams endpoint and processes data with specified parameters\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/command-line-interface.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run -e mainnet.eth.streamingfast.io:443 \\\n   -t +1 \\\n   ./substreams.yaml \\\n   module_name\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Substreams Module in YAML\nDESCRIPTION: Demonstrates how to define a simple Substreams module that takes an Ethereum block as input and outputs a custom object. It shows the basic structure of a module definition, including name, kind, initial block, inputs, and output.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_block\n    kind: map\n    initialBlock: 12287507\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:eth.example.MyBlock\n```\n\n----------------------------------------\n\nTITLE: Running a Substreams Package using CLI\nDESCRIPTION: This command demonstrates how to run a Substreams package using the CLI. It specifies the package, module, endpoint, and start block.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/packages.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui \\\n erc20-balance-changes@latest \\\n map_balance_changes \\\n -e mainnet.eth.streamingfast.io:443 \\\n --start-block 1397553 \\\n```\n\n----------------------------------------\n\nTITLE: Basic Substreams Module Definition in YAML\nDESCRIPTION: Example of a simple Substreams manifest that maps Ethereum blocks to a custom output type. Shows basic module configuration with inputs and outputs.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/manifests.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_block\n    kind: map\n    initialBlock: 12287507\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:eth.example.MyBlock\n```\n\n----------------------------------------\n\nTITLE: Implementing Hourly Token Trade Counter with Cleanup\nDESCRIPTION: A Substreams store module that counts trades per token on an hourly basis while maintaining memory efficiency by cleaning up old data. The module uses Clock input for timing, creates hourly windows, and deletes previous hour's data to prevent memory overflow.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/aggregation-windows.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::store]\npub fn store_total_tx_counts(clock: Clock, events: Events, output: StoreAddBigInt) {\n    let timestamp_seconds = clock.timestamp.unwrap().seconds;\n    let hour_id = timestamp_seconds / 3600;\n    let prev_hour_id = hour_id - 1;\n\n    output.delete_prefix(0, &format!(\"TokenHourData:{prev_hour_id}:\"));\n\n    for event in events.pool_events {\n        output.add_many(\n            event.log_ordinal,\n            &vec![\n                format!(\"TokenHourData:{}:{}\", hour_id, event.token0),\n                format!(\"TokenHourData:{}:{}\", hour_id, event.token1),\n            ],\n            &BigInt::from(1 as i32),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Inputs in Substreams YAML\nDESCRIPTION: Demonstrates how to specify various input types for a Substreams module, including params, source, store, and map inputs.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n    - params: string\n    - source: sf.ethereum.type.v2.Block\n    - store: my_store\n      mode: deltas\n    - store: my_store # defaults to mode: get\n    - map: my_map\n```\n\n----------------------------------------\n\nTITLE: Implementing Contract Call Function in Rust\nDESCRIPTION: Create a function that performs an eth_call to the USDT contract's decimals() method, returning a BigInt representing the number of decimals used by the token.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn get_decimals() -> substreams::scalar::BigInt {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Modules in Substreams Manifest\nDESCRIPTION: Demonstrates how to define multiple modules in a Substreams manifest, including a map module and a store module. It shows the structure for specifying module name, kind, initial block, inputs, outputs, and documentation.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: events_extractor\n    kind: map\n    initialBlock: 5000000\n    binary: default  # Implicit\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n      - store: myimport:prices\n    output:\n      type: proto:my.types.v1.Events\n    doc:\n      This module extracts events\n      \n      Use in such and such situations\n\n  - name: totals\n    kind: store\n    updatePolicy: add\n    valueType: int64\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n      - map: events_extractor\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-compiled Substreams CLI Binary on MacOS\nDESCRIPTION: Script to automatically download and extract the latest Substreams CLI release for MacOS based on system architecture.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/installing-the-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nLINK=$(curl -s https://api.github.com/repos/streamingfast/substreams/releases/latest | awk \"/download.url.*$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m)/ {print \\$2}\" | sed 's/\"//g')\ncurl -L  $LINK  | tar zxf -\n```\n\n----------------------------------------\n\nTITLE: Rust Handler for Basic Parameter Processing\nDESCRIPTION: Implementation of a Rust handler function that processes the parameter string to filter blockchain events based on a contract address.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/parameterized-modules.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\npub fn map_pools_created(params: String, block: Block) -> Result<Pools, Error> {\n    let factory_address = Hex::decode(params).unwrap();\n    Ok(Pools {\n        pools: block\n            .events::<abi::factory::events::PoolCreated>(&[&factory_address])\n            .filter_map(|(event, log)| {\n                // skipped: extracting pool information from the transaction\n                Some(Pool {\n                    address,\n                    token0,\n                    token1,\n                    ..Default::default()\n                })\n            })\n            .collect(),\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Substreams Package in YAML\nDESCRIPTION: YAML configuration for a Substreams package, specifying dependencies, custom types, and module definitions for contract mapping and graph output.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/subgraph/graph-out.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: v0.1.0\npackage:\n  name: 'substreams_test'\n  version: v1.0.1\n\nimports:\n  entity: https://github.com/streamingfast/substreams-entity-change/releases/download/v0.2.1/substreams-entity-change-v0.2.1.spkg\n\nprotobuf:\n  files:\n    - example.proto\n  importPaths:\n    - ./proto\n\nbinaries:\n  default:\n    type: wasm/rust-v1\n    file: ./target/wasm32-unknown-unknown/release/substreams.wasm\n\nmodules:\n  - name: map_contract\n    kind: map\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:test.Contracts\n\n  - name: graph_out\n    kind: map\n    inputs:\n      - map: map_contract\n    output:\n      type: proto:substreams.entity.v1.EntityChanges\n```\n\n----------------------------------------\n\nTITLE: Protobuf Configuration\nDESCRIPTION: Example of configuring protobuf files and import paths in the manifest.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/manifests.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprotobuf:\n  files:\n    - google/protobuf/timestamp.proto\n    - pcs/v1/pcs.proto\n    - pcs/v1/database.proto\n  importPaths:\n    - ./proto\n    - ../../external-proto\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for Substreams Modules\nDESCRIPTION: A complete unit test for a Substreams module that filters events. The test loads a test block from a base64-encoded file, applies the filter function, and verifies the results with assertions.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/log-and-debug.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn test_filtered_events() {\n    // Given\n    let block: Block =\n        testing::read_block(\"./src/testdata/ethereum_mainnet_10500500.binpb.base64\");\n\n    // When\n    let result = _filtered_events(\n        \"evt_addr:0x5acc84a3e955bdd76467d3348077d003f00ffb97\".to_owned(),\n        _all_events(block).unwrap(),\n    )\n    .expect(\"Failed to execute function\");\n\n    // Expect\n    assert!(result.events.len() > 0);\n    result.events.iter().for_each(|e| {\n        let address: &Vec<u8> = &e.log.as_ref().unwrap().address;\n\n        assert_eq!(\n            Hex::encode(address),\n            \"5acc84a3e955bdd76467d3348077d003f00ffb97\"\n        );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Testable Substreams Modules\nDESCRIPTION: Demonstrates how to structure a Substreams module to facilitate unit testing by separating the handler macro from the implementation logic. This pattern allows testing the core functionality independently.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/log-and-debug.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn filtered_events(query: String, events: Events) -> Result<Events, Error> {\n    _filtered_events(query, events)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Block Processing Module in Rust\nDESCRIPTION: A Rust function that processes an Ethereum block and extracts basic block information like number, hash and parent hash into a custom MyBlock structure.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/modules.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn get_my_block(blk: Block) -> Result<MyBlock, substreams::errors::Error> {\n    let header = blk.header.as_ref().unwrap();\n\n    Ok(MyBlock {\n        number: blk.number,\n        hash: Hex::encode(&blk.hash),\n        parent_hash: Hex::encode(&header.parent_hash),\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting USDT Transactions from EVM Blockchains in Rust\nDESCRIPTION: This function extracts USDT transactions from EVM blockchains. It filters transactions based on a predefined USDT contract address and maps the filtered transactions to a custom MyTransaction struct. The function returns a vector of these transactions.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/temp.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn get_usdt_transaction(block: eth::Block) -> Result<Vec<Transaction>, substreams:error:Error> {\n    let my_transactions = block.transactions().\n        .filter(|transaction| transaction.to == USDT_CONTRACT_ADDRESS)\n        .map(|transaction| MyTransaction(transaction.hash, transaction.from, transaction.to))\n        .collect();\n    Ok(my_transactions)\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Store Deltas by Key Segments in Rust for Substreams\nDESCRIPTION: This Rust code snippet demonstrates how to filter store deltas by key segments in a downstream module. It uses helper functions from the 'key' module to extract specific segments from the keys, allowing for efficient processing of different types of data based on the key structure.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/keys-in-stores.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfor delta in deltas.into_iter() {\n    let kind = key::first_segment(delta.get_key());\n    let address = key::segment_at(delta.get_key(), 1);\n    // Do something for this kind and address\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Module Configuration\nDESCRIPTION: Advanced example showing configuration of multiple modules with different kinds, including map and store modules with various inputs and outputs.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/manifests.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: events_extractor\n    kind: map\n    initialBlock: 5000000\n    binary: default  # Implicit\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n      - store: myimport:prices\n    output:\n      type: proto:my.types.v1.Events\n    doc:\n      This module extracts events\n      \n      Use in such and such situations\n\n  - name: totals\n    kind: store\n    updatePolicy: add\n    valueType: int64\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n      - map: events_extractor\n```\n\n----------------------------------------\n\nTITLE: Defining Solana Token Tracker in Substreams Manifest\nDESCRIPTION: YAML configuration that defines the 'map_solana_token_events' module which processes Solana tokens. It specifies inputs (parameters string and Solana blocks), output type, and default parameters for tracking USDC token.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/token-tracker/token-tracker.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_solana_token_events \n    kind: map\n    initialBlock: 158558168\n    inputs:\n      - params: string\n      - source: sf.solana.type.v1.Block\n    output:\n      type: proto:solana_token_tracker.types.v1.Output\nparams:\n  map_solana_token_events: \"token_contract=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&token_decimals=6\"\n```\n\n----------------------------------------\n\nTITLE: Substreams Response Protobuf Structure\nDESCRIPTION: Definition of the Substreams Response Protobuf message that contains blockchain data and control signals. This message can contain various types of data including session initialization, progress updates, block data, undo signals, and error information.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/reliability-guarantees.md#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Response {\n  oneof message {\n    SessionInit session = 1;\n    ModulesProgress progress = 2;\n    BlockScopedData block_scoped_data = 3;\n    BlockUndoSignal block_undo_signal = 4;\n    Error fatal_error = 5;\n\n    InitialSnapshotData debug_snapshot_data = 10;\n    InitialSnapshotComplete debug_snapshot_complete = 11;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Substreams Package using CLI\nDESCRIPTION: This command publishes a Substreams package (.spkg file) to the Substreams Registry using the Substreams CLI. Replace <YOUR-PACKAGE> with the actual package filename.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/publish-package.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams publish <YOUR-PACKAGE>.spkg\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Contract Address from an Ethereum Block in Rust\nDESCRIPTION: This function extracts logs for a specific smart contract from an Ethereum block. It uses the logs() method to retrieve all logs from the block, then filters them by the provided contract address, returning a collection of formatted ContractLog structures.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/cheatsheet/evm/logs.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse substreams::Hex;\nuse substreams_ethereum::pb::eth::v2::Block;\n\nstruct ContractLog {\n    address: String,\n    topics: Vec<String>,\n    tx_hash: String\n}\n\nfn get_contract_logs(contract_address: String, blk: Block) -> Vec<ContractLog> {\n    let events: Vec<ContractLog> = blk\n        .logs()\n        .filter(|log| log.address().to_vec() == Hex::decode(&contract_address).unwrap())\n        .map(|log| ContractLog {\n            address: Hex::encode(log.address()),\n            topics: log.topics().into_iter().map(Hex::encode).collect(),\n            tx_hash: Hex::encode(&log.receipt.transaction.hash),\n        })\n        .collect();\n\n    return events;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping ERC721 Transfers from Ethereum Blocks in Rust\nDESCRIPTION: This handler function extracts ERC721 transfer events from Ethereum blocks for a specific tracked contract. It processes each transfer and creates a custom Transfer object.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/writing-module-handlers.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn map_transfers(blk: eth::Block) -> Result<erc721::Transfers, substreams::errors::Error> {\n    Ok(erc721::Transfers {\n        transfers: blk\n            .events::<abi::erc721::events::Transfer>(&[&TRACKED_CONTRACT])\n            .map(|(transfer, log)| {\n                substreams::log::info!(\"NFT Transfer seen\");\n\n                erc721::Transfer {\n                    trx_hash: log.receipt.transaction.hash.clone(),\n                    from: transfer.from,\n                    to: transfer.to,\n                    token_id: transfer.token_id.low_u64(),\n                    ordinal: log.block_index() as u64,\n                }\n            })\n            .collect(),\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Details in Substreams Manifest\nDESCRIPTION: Shows how to define package details in a Substreams manifest, including name, version, and documentation. The package name must follow specific naming conventions, and the version must adhere to Semantic Versioning 2.0.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  name: module_name_for_project\n  version: v0.5.0\n  doc: |\n    Documentation heading for the package.\n\n    More detailed documentation for the package.\n```\n\n----------------------------------------\n\nTITLE: Using Result in Substreams Module for Transaction Filtering\nDESCRIPTION: Shows how Result is implemented in a Substreams module that filters blockchain transactions, returning either the filtered transactions or a vector of errors if the operation fails.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/result.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n[...]\n\n#[substreams::handlers::map]\nfn map_filter_transactions(params: String, blk: Block) -> Result<Transactions, Vec<substreams::errors::Error>> {\n    let filters = parse_filters_from_params(params)?;\n\n    let transactions: Vec<Transaction> = blk\n        .transactions()\n        .filter(|trans| apply_filter(&trans, &filters))\n        .map(|trans| Transaction {\n            from: Hex::encode(&trans.from),\n            to: Hex::encode(&trans.to),\n            hash: Hex::encode(&trans.hash),\n        })\n        .collect();\n\n    Ok(Transactions { transactions })\n}\n\n[...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Function for Substreams\nDESCRIPTION: JavaScript implementation of the stream function for handling Substreams data, including response and progress message handling.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/javascript.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst stream = async (pkg, registry, transport) => {\n  const request = createRequest({\n      substreamPackage: pkg,\n      outputModule: MODULE,\n      productionMode: true,\n      startBlockNum: START_BLOCK,\n      stopBlockNum: STOP_BLOCK,\n      startCursor: getCursor() ?? undefined\n  });\n  \n  // Stream the blocks\n  for await (const statefulResponse of streamBlocks(transport, request)) {\n       /*\n            Decode the response and handle the message.\n            There different types of response messages that you can receive. You can read more about the response message in the docs [here](../../../references/reliability-guarantees.md).\n        */\n        await handleResponseMessage(statefulResponse.response, registry);\n\n        /*\n            Handle the progress message.\n            Regardless of the response message, the progress message is always sent, and gives you useful information about the execution of the Substreams.\n        */\n        handleProgressMessage(statefulResponse.progress, registry);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Files and Import Paths\nDESCRIPTION: Shows how to specify Google Protocol Buffer (protobuf) definitions used by Rust modules in the Substreams. It includes file paths and import paths for loading the protobuf files.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprotobuf:\n  files:\n    - google/protobuf/timestamp.proto\n    - pcs/v1/pcs.proto\n    - pcs/v1/database.proto\n  importPaths:\n    - ./proto\n    - ../../external-proto\n```\n\n----------------------------------------\n\nTITLE: Creating a Substreams Package from Manifest\nDESCRIPTION: This command shows how to create a Substreams package from a manifest file (substreams.yaml) using the substreams pack command.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/packages.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams pack ./substreams.yaml\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Successful Transactions Using transactions() Method\nDESCRIPTION: Shows how to iterate over only successful transactions using the transactions() method of the Block struct. This approach directly filters out failed transactions and maps the results to a TransactionMeta struct.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/cheatsheet/evm/transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse substreams::Hex;\nuse substreams_ethereum::pb::eth::v2::Block;\n\nstruct TransactionMeta {\n    hash: String,\n    from: String,\n    to: String\n}\n\nfn successful_transactions(blk: Block) -> Vec<TransactionMeta> {\n    return blk.transactions()\n        .map(|tx| TransactionMeta {\n            hash: Hex::encode(tx.hash),\n            from: Hex::encode(tx.from),\n            to: Hex::encode(tx.to)\n        })\n        .collect();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Cargo Dependencies for Substreams\nDESCRIPTION: Complete Cargo.toml configuration including all necessary dependencies for Substreams development with Ethereum support and WASM compilation settings.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/setting-up-handlers.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n[package]\nname = \"substreams-template\"\nversion = \"0.1.0\"\ndescription = \"Substreams template demo project\"\nedition = \"2021\"\nrepository = \"https://github.com/streamingfast/substreams-template\"\n\n[lib]\nname = \"substreams\"\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nethabi = \"17\"\nhex-literal = \"0.3.4\"\nprost = \"0.11\"\nsubstreams = \"0.5\"\nsubstreams-ethereum = \"0.9\"\n\n[target.wasm32-unknown-unknown.dependencies]\ngetrandom = { version = \"0.2\", features = [\"custom\"] }\n\n[build-dependencies]\nanyhow = \"1\"\nsubstreams-ethereum = \"0.8\"\n\n[profile.release]\nlto = true\nopt-level = 's'\nstrip = \"debuginfo\"\n```\n\n----------------------------------------\n\nTITLE: Implementing an Index Module in Rust for Substreams\nDESCRIPTION: This Rust function implements the 'index_events' module. It processes all events in a block, extracting event addresses and signatures to create a Keys object for efficient event filtering.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/indexes.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn index_events(events: Events) -> Result<Keys, Error> {\n    let mut keys = Keys::default();\n\n    events.events.into_iter().for_each(|e| {\n        if let Some(log) = e.log {\n            evt_keys(&log).into_iter().for_each(|k| {\n                keys.keys.push(k);\n            });\n        }\n    });\n\n    Ok(keys)\n}\n\npub fn evt_keys(log: &substreams_ethereum::pb::eth::v2::Log) -> Vec<String> {\n    let mut keys = Vec::new();\n\n    if log.topics.len() > 0 {\n        let k_log_sign = format!(\"evt_sig:0x{}\", Hex::encode(log.topics.get(0).unwrap()));\n        keys.push(k_log_sign);\n    }\n\n    let k_log_address = format!(\"evt_addr:0x{}\", Hex::encode(&log.address));\n    keys.push(k_log_address);\n\n    keys\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Source Input in Substreams Manifest (YAML)\nDESCRIPTION: Demonstrates how to specify a source input of type sf.ethereum.type.v2.Block in the Substreams manifest.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/inputs.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n- name: my_mod\n  inputs:\n  - source: sf.ethereum.type.v2.Block\n```\n\n----------------------------------------\n\nTITLE: Implementation Logic for Testable Filtered Events Module\nDESCRIPTION: The core implementation of a filtered events module that filters blockchain events based on a query string. This function is separated from the handler to enable unit testing.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/log-and-debug.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n/// _filtered_events is equal to [filtered_events] but exists only for unit testing purposes.\nfn _filtered_events(query: String, mut events: Events) -> Result<Events, Error> {\n    let matcher: substreams::ExprMatcher<'_> = substreams::expr_matcher(&query);\n\n    events.events.retain(|event| {\n        let keys = evt_keys(event.log.as_ref().unwrap());\n        let keys = keys.iter().map(|k| k.as_str()).collect::<Vec<&str>>();\n\n        matcher.matches_keys(&keys)\n    });\n\n    Ok(events)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying WASM Binaries for Substreams Execution\nDESCRIPTION: Demonstrates how to define WASM binary code for executing modules in Substreams. It shows the structure for specifying default and alternative binaries, including type and file path.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbinaries:\n  default:\n    type: wasm/rust-v1\n    file: ./target/wasm32-unknown-unknown/release/my_package.wasm\n  other:\n    type: wasm/rust-v1\n    file: ./snapshot_of_my_package.wasm\n```\n\n----------------------------------------\n\nTITLE: Configuring Substreams Sink Run Function\nDESCRIPTION: Implementation of sinkRunE function that handles sink initialization, error handling, and execution setup with cursor management.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/go.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc sinkRunE(cmd *cobra.Command, args []string) error {\n\tendpoint := args[0]\n\tmanifestPath := args[1]\n\n\t// Find the output module in the manifest sink.moduleName configuration. If you have no\n\t// such configuration, you can change the value below and set the module name explicitly.\n\toutputModuleName := sink.InferOutputModuleFromPackage\n\tif len(args) == 3 {\n\t\toutputModuleName = args[2]\n\t}\n\n\tsinker, err := sink.NewFromViper(\n\t\tcmd,\n\t\t// Should be the Protobuf full name of the map's module output, we use\n\t\t// `substreams-database-changes` imported type. Adjust to your needs.\n\t\t//\n\t\t// If your Protobuf is defined in your Substreams manifest, you can use `substream protogen`\n\t\t// while being in the same folder that contain `buf.gen.yaml` file in the example folder.\n\t\texpectedOutputModuleType,\n\t\tendpoint,\n\t\tmanifestPath,\n\t\toutputModuleName,\n\t\t// This is the block range, in our case defined as Substreams module's start block and up forever\n\t\t\":\",\n\t\tzlog,\n\t\ttracer,\n\t)\n\tcli.NoError(err, \"unable to create sinker: %s\", err)\n\n\tsinker.OnTerminating(func(err error) {\n\t\tcli.NoError(err, \"unexpected sinker error\")\n\n\t\tzlog.Info(\"sink is terminating\")\n\t})\n\n\t// You **must** save the cursor somewhere, saving it to memory while\n\t// make it last until the process is killed, in which on re-start, the\n\t// sinker will resume from start block again. You can simply read from\n\t// a file the string value of the cursor and use `sink.NewCursor(value)`\n\t// to load it.\n\n\t// Blocking call, will return on sinker termination\n\tsinker.Run(context.Background(), sink.NewBlankCursor(), sink.NewSinkerHandlers(handleBlockScopedData, handleBlockUndoSignal))\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Failed Transactions in Substreams\nDESCRIPTION: Shows how to iterate over transactions and filter for only failed ones. This example uses the TransactionTraceStatus::Failed enum value to identify transactions that did not complete successfully.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/cheatsheet/evm/transactions.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse substreams::Hex;\nuse substreams_ethereum::pb::eth::v2::{Block, TransactionTraceStatus};\n\nstruct TransactionMeta {\n    hash: String,\n    from: String,\n    to: String\n}\n\nfn failed_transactions(blk: Block) -> Vec<TransactionMeta> {\n    return blk.transaction_traces.iter()\n        .filter(|tx| tx.status() == TransactionTraceStatus::Failed)\n        .map(|tx| TransactionMeta {\n            hash: Hex::encode(tx.hash),\n            from: Hex::encode(tx.from),\n            to: Hex::encode(tx.to)\n        })\n        .collect();\n}\n```\n\n----------------------------------------\n\nTITLE: Single Module Definition Example\nDESCRIPTION: Complete example showing both YAML configuration and corresponding Rust implementation for a map_events module.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/modules.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_events\n    kind: map\n    initialBlock: 4634748\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:contract.v1.Events\n```\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn map_events(blk: eth::Block) -> Result<contract::Events, substreams::errors::Error> {\n\n...output omitted...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sink for Data Consumption in Substreams\nDESCRIPTION: Shows how to configure sinks for consuming data from Substreams, including examples for database and subgraph sinks. It demonstrates specifying the module, type, and configuration details specific to each sink type.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsink:\n  module: db_out\n  type: sf.substreams.sink.sql.v1.Service\n  config:\n    schema: \"./schema.sql\"\n    engine: clickhouse\n    postgraphile_frontend:\n      enabled: false\n    pgweb_frontend:\n      enabled: false\n    dbt_config:\n      enabled: true\n      files: \"./path/to/folder\"\n      run_interval_seconds: 300\n```\n\n----------------------------------------\n\nTITLE: Basic Substreams Module Manifest Configuration\nDESCRIPTION: YAML configuration for a simple Substreams module that processes Ethereum blocks starting from block 12287507 and outputs a custom MyBlock type.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/modules.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_block\n    kind: map\n    initialBlock: 12287507\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:eth.example.MyBlock\n```\n\n----------------------------------------\n\nTITLE: Implementing the main Solana token events mapping function in Rust\nDESCRIPTION: This function serves as the entry point for the module, accepting raw Solana block data and user-defined parameters. It processes each transaction in the block to extract token-related events that match specified token parameters.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/token-tracker/token-tracker.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub fn map_solana_token_events(params: String, block: Block) -> Result<Output, Error> {\n    let parameters = parse_parameters(params)?;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Module Chaining Configuration in YAML\nDESCRIPTION: Example of chaining two modules where the output of map_events becomes the input for db_out, demonstrating module composability.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/modules.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_events\n    kind: map\n    initialBlock: 4634748\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:contract.v1.Events\n\n  - name: db_out\n    kind: map\n    initialBlock: 4634748\n    inputs:\n      - map: map_events\n    output:\n      type: proto:sf.substreams.sink.database.v1.DatabaseChanges\n```\n\n----------------------------------------\n\nTITLE: Retrieving Logs from a Transaction in Rust with Substreams\nDESCRIPTION: This function extracts logs from a transaction trace by accessing the receipt property and mapping each log to a custom Log structure. It converts binary addresses and topics to hexadecimal strings for easier handling.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/cheatsheet/evm/logs.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse substreams::Hex;\nuse substreams_ethereum::pb::eth::v2::TransactionTrace;\n\nstruct Log {\n    address: String,\n    topics: Vec<String>,\n    tx_hash: String\n}\n\nfn transaction_logs(transaction: &TransactionTrace) -> Vec<Log> {\n    return transaction.receipt.unwrap().logs\n        .iter()\n        .map(|log| Log {\n            address: Hex::encode(log.address),\n            topics: log.topics.into_iter().map(Hex::encode).collect(),\n            tx_hash: Hex::encode(&transaction.hash),\n        })\n        .collect();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ERC721 Transfers Protobuf Schema in Substreams\nDESCRIPTION: This protobuf schema defines a message structure for ERC721 token transfers. It includes a Transfers message containing a repeated field of Transfer messages, each representing an individual token transfer with properties like from, to, token_id, trx_hash, and ordinal.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/creating-protobuf-schemas.md#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage eth.erc721.v1;\n\nmessage Transfers {\n  repeated Transfer transfers = 1;\n}\n\nmessage Transfer {\n  bytes from = 1;\n  bytes to = 2;\n  uint64 token_id = 3;\n  bytes trx_hash = 4;\n  uint64 ordinal = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Contract Function from Generated ABI\nDESCRIPTION: Import the Decimals struct from the auto-generated ABI code to prepare for making the contract call.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfn get_decimals() -> substreams::scalar::BigInt {\n    let decimals = abi::contract::functions::Decimals {};\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Matching with Option in Rust\nDESCRIPTION: An alternative approach to handling Option values using pattern matching, which provides a more concise and readable way to handle both Some and None cases in one statement.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/option.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfn get_username_by_id(id: u32) -> Option<String> {\n    match(id) {\n        1 => Some(String::from(\"Susan\")),\n        2 => Some(String::from(\"John\")),\n        _ => None\n    }\n}\n\nfn main() {\n    let user1 = get_username_by_id(1);\n    let user10 = get_username_by_id(10);\n    \n    match (&user1) {\n        Some(name) => println!(\"User with id = 1 holds username {}\", &user1.unwrap()),\n        None => println!(\"No user with id = 1 found\")\n    }\n    \n    match (&user10) {\n        Some(name) => println!(\"User with id = 10 holds username {}\", &user10.unwrap()),\n        None => println!(\"No user with id = 10 found\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Contract Call to USDT Smart Contract\nDESCRIPTION: Call the decimals function on the USDT contract and unwrap the result to get the number of decimals as a BigInt value.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nfn get_decimals() -> substreams::scalar::BigInt {\n    let decimals = abi::contract::functions::Decimals {};\n    let decimals_option = decimals.call(TRACKED_CONTRACT.to_vec());\n\n    decimals_option.unwrap()\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Block Header Data in Rust with Substreams\nDESCRIPTION: This function retrieves specific information from the header of an Ethereum block, including the parent hash, gas limit, gas used, and nonce. It utilizes the Substreams and Substreams Ethereum libraries to process the Block and BlockHeader structures.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/cheatsheet/evm/blocks.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse substreams::Hex;\nuse substreams_ethereum::pb::eth::v2::Block;\n\nstruct BlockHeaderData {\n    parent_hash: String,\n    gas_limit: u64,\n    gas_used: u64,\n    nonce: u64,\n}\n\nfn block_data(blk: Block) -> BlockHeaderData {\n    let header = blk.header.unwrap();\n\n    return BlockHeaderData {\n        parent_hash: Hex::encode(header.parent_hash),\n        gas_limit: header.gas_limit,\n        gas_used: header.gas_used,\n        nonce: header.nonce,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing Transaction Counters in Rust for Substreams Store Module\nDESCRIPTION: This Rust code defines a store handler that increments transaction counters for various metrics. It uses formatted keys to store counts for different entities like pools, tokens, and time-based aggregations. The function processes events and adds to multiple counters using a single store operation.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/keys-in-stores.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::store]\npub fn store_total_tx_counts(clock: Clock, events: Events, output: StoreAddBigInt) {\n    let timestamp_seconds = clock.timestamp.unwrap().seconds;\n    let day_id = timestamp_seconds / 86400;\n    let hour_id = timestamp_seconds / 3600;\n    let prev_day_id = day_id - 1;\n    let prev_hour_id = hour_id - 1;\n\n    for event in events.pool_events {\n        let pool_address = &event.pool_address;\n        let token0_addr = &event.token0;\n        let token1_addr = &event.token1;\n\n        output.add_many(\n            event.log_ordinal,\n            &vec![\n                format!(\"pool:{pool_address}\"),\n                format!(\"token:{token0_addr}\"),\n                format!(\"token:{token1_addr}\"),\n                format!(\"UniswapDayData:{day_id}\"),\n                format!(\"PoolDayData:{day_id}:{pool_address}\"),\n                format!(\"PoolHourData:{hour_id}:{pool_address}\"),\n                format!(\"TokenDayData:{day_id}:{token0_addr}\"),\n                format!(\"TokenDayData:{day_id}:{token1_addr}\"),\n                format!(\"TokenHourData:{hour_id}:{token0_addr}\"),\n                format!(\"TokenHourData:{hour_id}:{token1_addr}\"),\n            ],\n            &BigInt::from(1 as i32),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing ERC721 Transfer Balances in Rust\nDESCRIPTION: This store handler processes ERC721 transfers and updates the total balance of NFT tokens for each holder. It uses a StoreAddInt64 to increment or decrement balances based on transfer direction.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/writing-module-handlers.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::store]\nfn store_transfers(transfers: erc721::Transfers, s: StoreAddInt64) {\n    log::info!(\"NFT holders state builder\");\n    for transfer in transfers.transfers {\n        if transfer.from != NULL_ADDRESS {\n            log::info!(\"Found a transfer out {}\", Hex(&transfer.trx_hash));\n            s.add(transfer.ordinal, generate_key(&transfer.from), -1);\n        }\n\n        if transfer.to != NULL_ADDRESS {\n            log::info!(\"Found a transfer in {}\", Hex(&transfer.trx_hash));\n            s.add(transfer.ordinal, generate_key(&transfer.to), 1);\n        }\n    }\n}\n\nfn generate_key(holder: &Vec<u8>) -> String {\n    return format!(\"total:{}:{}\", Hex(holder), Hex(TRACKED_CONTRACT));\n}\n```\n\n----------------------------------------\n\nTITLE: Using the ? Operator Shortcut for Error Handling in Rust\nDESCRIPTION: Demonstrates the ? operator to simplify error handling by automatically unwrapping success values or returning errors, making the code more concise and readable.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/result.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn divide(num1: u32, num2: u32) -> Result<u32, String> {\n    if num2 == 0 {\n        return Err(String::from(\"You can't divide by 0\"));\n    }\n\n    return Ok(num1 / num2);\n}\n\nfn computations() -> Result<u32, String> {\n    let division_result = divide(6, 0)?;\n\n    return Ok(division_result + 5);\n}\n\nfn main() {\n    let result = computations();\n    if result.is_ok() {\n        println!(\"This is the happy path: {}\", result.unwrap())\n    } else {\n        println!(\"This is the error: {}\", result.err().unwrap())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Output in Substreams YAML\nDESCRIPTION: Shows how to specify the output type for a Substreams map module using a protobuf definition.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/manifests.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n    type: proto:eth.erc721.v1.Transfers\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Transformation Model\nDESCRIPTION: SQL query to create a materialized view showing hourly punk purchase statistics.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n{{ config(materialized='table') }}\nselect date_trunc('hour', evt_block_time) AS \"hour\", count(*) from punk_bought  GROUP BY hour order by hour\n```\n\n----------------------------------------\n\nTITLE: Processing Solana block transactions for token events in Rust\nDESCRIPTION: This expanded implementation of the map_solana_token_events function shows the complete transaction processing logic. It iterates through each transaction, resolves accounts, and processes all instructions to identify token-related events.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/token-tracker/token-tracker.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub fn map_solana_token_events(params: String, block: Block) -> Result<Output, Error> {\n    let parameters = parse_parameters(params)?;\n\n    let mut output = Output::default(); // 1.\n    let timestamp = block.block_time.as_ref().unwrap().timestamp;\n\n    for confirmed_trx in block.transactions_owned() { // 2.\n        let accounts = confirmed_trx.resolved_accounts_as_strings(); // 3.\n\n        if let Some(trx) = confirmed_trx.transaction { // 4.\n            let trx_hash = bs58::encode(&trx.signatures[0]).into_string();\n            let msg = trx.message.unwrap(); // 5.\n            let meta = confirmed_trx.meta.as_ref().unwrap(); // 6.\n\n            for (i, compiled_instruction) in msg.instructions.iter().enumerate() { // 7.\n                utils::process_compiled_instruction( // 8.\n                    &mut output,\n                    timestamp,\n                    &trx_hash,\n                    meta,\n                    i as u32,\n                    compiled_instruction,\n                    &accounts,\n                    &parameters\n                );\n            }\n        }\n    }\n\n    Ok(output) // 9.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Store Module Handler with Substreams Macro\nDESCRIPTION: Example of using the substreams::handlers::store macro to create a store module handler that processes transfers and interacts with various store types. Store modules should not return any value.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::store]\npub fn store_module(transfers: erc721::Transfers, s: store::StoreAddInt64, pairs: store::StoreGet, tokens: store::StoreGet) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pool Event Mapping with Stored Data in Rust\nDESCRIPTION: This Rust function implements the map_events module. It processes Ethereum blocks, retrieves pool information from the store for each relevant log, and uses this information to analyze swap transactions and emit events.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/dynamic-data-sources.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\npub fn map_events(block: Block, pools_store: StoreGetProto<Pool>) -> Result<Events, Error> {\n    let mut events = Events::default();\n\n    for trx in block.transactions() {\n        for (log, call_view) in trx.logs_with_calls() {\n            let pool_address = &Hex(&log.address).to_string();\n\n            let pool = match pools_store.get_last(format!(\"pool:{pool_address}\")) {\n                Some(pool) => pool,\n                None => { continue; }\n            };\n\n            // use the pool information from the store\n        }\n    }\n\n    Ok(events)\n}\n```\n\n----------------------------------------\n\nTITLE: Database Output Handler Implementation in Rust\nDESCRIPTION: Rust handler function that transforms blockchain data into DatabaseChanges objects that the SQL sink can process and store in the database.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/sql-sink.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn db_out(block_meta_start: store::Deltas<DeltaProto<BlockMeta>>) -> Result<DatabaseChanges, substreams::errors::Error> {\n    let mut database_changes: DatabaseChanges = Default::default();\n    transform_block_meta_to_database_changes(&mut database_changes, block_meta_start);\n    Ok(database_changes)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Third-Party Substreams Packages\nDESCRIPTION: Demonstrates how to import third-party Substreams packages using the 'imports' section. This allows referencing modules from other packages and leveraging server-side caches to lower costs.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  sol: https://spkg.io/streamingfast/solana-explorer-v0.2.0.spkg\n  ethereum: substreams-ethereum-v1.0.0.spkg\n  token: ../eth-token/substreams.yaml\n\n...\n\nmodules:\n...\n    inputs:\n      - map: sol:map_block_without_votes\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Filtering in Rust\nDESCRIPTION: This Rust code snippet shows the main implementation of the transaction filtering logic, including parameter parsing and transaction processing.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_filter_transactions_module.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Deserialize)]\nstruct TransactionFilterParams {\n    to: Option<String>,\n    from: Option<String>,\n}\n\n#[substreams::handlers::map]\nfn map_filter_transactions(params: String, blk: Block) -> Result<Transactions, Vec<substreams::errors::Error>> {\n    let filters = parse_filters_from_params(params)?;\n\n    let transactions: Vec<Transaction> = blk\n        .transactions()\n        .filter(|trans| apply_filter(&trans, &filters))\n        .map(|trans| Transaction {\n            from: Hex::encode(&trans.from),\n            to: Hex::encode(&trans.to),\n            hash: Hex::encode(&trans.hash),\n        })\n        .collect();\n\n    Ok(Transactions { transactions })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Statistics Extraction in Rust\nDESCRIPTION: Core Rust function that extracts statistics from Injective blockchain blocks. It takes a Block object as input and outputs a custom BlockStats object with relevant metrics.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/cosmos/injective/block-stats.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nmod pb;\nuse crate::pb::sf::cosmos::r#type::v2::Block; // 1.\nuse crate::pb::cosmos::v1::BlockStats; // 2.\nuse substreams::errors::Error;\n\n#[substreams::handlers::map]\npub fn block_to_stats(block: Block) -> Result<BlockStats, Error> { // 3.\n    let mut stats = BlockStats::default(); // 4.\n    let header =  block.header.as_ref().unwrap();\n    let last_block_id = header.last_block_id.as_ref().unwrap();\n\n    stats.block_height = block.height as u64; // 5,\n    stats.block_hash = hex::encode(block.hash);\n    stats.block_time = block.time;\n    stats.block_proposer = hex::encode(&header.proposer_address);\n    stats.parent_hash = hex::encode(&last_block_id.hash);\n    stats.parent_height = block.height - 1i64;\n\n    stats.num_txs = block.txs.len() as u64; // 6.\n\n    Ok(stats) // 7.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Substreams-Powered Subgraph\nDESCRIPTION: GraphQL schema definition for the Contract entity, compatible with the entity changes produced by the Substreams module.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/subgraph/graph-out.md#2025-04-23_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Contract @entity {\n  id: ID!\n\n  \"The timestamp when the contract was deployed\"\n  timestamp: String!\n\n  \"The block number of the contract deployment\"\n  blockNumber: BigInt!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Filtering in Rust\nDESCRIPTION: Rust function that filters transactions based on a signature, processes instructions, and constructs Transaction objects. It uses the Block structure from Solana and outputs a Transactions Protobuf object.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-transactions.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn map_filter_transactions(params: String, blk: Block) -> Result<Transactions, Vec<substreams::errors::Error>> {\n    let filters = parse_filters_from_params(params)?; // 1.\n\n    let mut transactions: Vec<Transaction> = Vec::new();\n\n    blk.transactions // 2.\n        .iter()\n        .filter(|tx| apply_filter(tx, &filters)) // 3.\n        .for_each(|tx| {\n            let msg = tx.transaction.as_ref().unwrap().message.as_ref().unwrap();\n            let acct_keys = tx.resolved_accounts(); // 4.\n\n            let insts: Vec<Instruction> = msg\n                .instructions // 5.\n                .iter()\n                .map(|inst| Instruction { // 6.\n                    program_id: bs58::encode(acct_keys[inst.program_id_index as usize].to_vec()).into_string(),\n                    accounts: inst\n                        .accounts\n                        .iter()\n                        .map(|acct| bs58::encode(acct_keys[*acct as usize].to_vec()).into_string())\n                        .collect(),\n                    data: bs58::encode(&inst.data).into_string(),\n                })\n                .collect();\n\n            let t = Transaction { // 7.\n                signatures: tx\n                    .transaction\n                    .as_ref()\n                    .unwrap()\n                    .signatures\n                    .iter()\n                    .map(|sig| bs58::encode(sig).into_string())\n                    .collect(),\n                instructions: insts,\n            };\n            transactions.push(t);\n        });\n\n    Ok(Transactions { transactions })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a MANTRA Substreams Project with the CLI\nDESCRIPTION: Command to initialize a new Substreams project, which prompts the user to select between MANTRA-minimal and MANTRA-events templates.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/mantra.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams init\n```\n\n----------------------------------------\n\nTITLE: Running Substreams with Custom Parallel Jobs\nDESCRIPTION: Executes Substreams with modified parallel job count using headers\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/command-line-interface.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run -e mainnet.eth.streamingfast.io:443 \\\n   -t +1 \\\n   -H \"X-Sf-Substreams-Parallel-Jobs: 20\" \\\n   ./substreams.yaml \\\n   module_name\n```\n\n----------------------------------------\n\nTITLE: Generating EntityChanges for The Graph in Substreams Rust Module\nDESCRIPTION: Rust implementation of a Substreams map handler that converts Contract data into EntityChanges compatible with The Graph protocol.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/subgraph/graph-out.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\npub fn graph_out(contracts: Contracts) -> Result<EntityChanges, substreams::errors::Error> {\n    // hash map of name to a table\n    let mut tables = Tables::new();\n\n    for contract in contracts.contracts.into_iter() {\n        tables\n            .create_row(\"Contract\", contract.address)\n            .set(\"timestamp\", contract.timestamp)\n            .set(\"blockNumber\", contract.block_number);\n    }\n\n    Ok(tables.to_entity_changes())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721 Transfer Tracking Store Handler in Rust for Substreams\nDESCRIPTION: This Rust code defines a store handler function for tracking ERC721 token transfers. It updates token counts for addresses involved in transfers, incrementing for recipients and decrementing for senders. The function uses a StoreAddInt64 to manage the state.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/writing-module-handlers.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::store]\nfn store_transfers(transfers: erc721::Transfers, s: StoreAddInt64) {\n    log::info!(\"NFT holders state builder\");\n    for transfer in transfers.transfers {\n        if transfer.from != NULL_ADDRESS {\n            log::info!(\"Found a transfer out {}\", Hex(&transfer.trx_hash));\n            s.add(transfer.ordinal, generate_key(&transfer.from), -1);\n        }\n\n        if transfer.to != NULL_ADDRESS {\n            log::info!(\"Found a transfer in {}\", Hex(&transfer.trx_hash));\n            s.add(transfer.ordinal, generate_key(&transfer.to), 1);\n        }\n    }\n}\n\nfn generate_key(holder: &Vec<u8>) -> String {\n    return format!(\"total:{}:{}\", Hex(holder), Hex(TRACKED_CONTRACT));\n}\n```\n\n----------------------------------------\n\nTITLE: Substreams Module Definition in YAML\nDESCRIPTION: The YAML configuration in substreams.yml that defines the map_block_meta module, specifying its type as 'map', input as Ethereum blocks, and output as the BlockMeta Protobuf.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_block_meta_module.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_block_meta\n    kind: map\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:eth.block_meta.v1.BlockMeta\n```\n\n----------------------------------------\n\nTITLE: Defining Module Inputs in Substreams YAML\nDESCRIPTION: Demonstrates how to specify different types of inputs for a Substreams module, including params, source, store (with modes), and map.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/manifests.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n    - params: string\n    - source: sf.ethereum.type.v2.Block\n    - store: my_store\n      mode: deltas\n    - store: my_store # defaults to mode: get\n    - map: my_map\n```\n\n----------------------------------------\n\nTITLE: Parsing Transaction Filter Parameters in Rust\nDESCRIPTION: This Rust function parses the query-encoded filter parameters string into a TransactionFilterParams struct, handling potential errors.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_filter_transactions_module.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nfn parse_filters_from_params(params: String) -> Result<TransactionFilterParams, Vec<substreams::errors::Error>> {\n    let parsed_result = serde_qs::from_str(&params);\n    if parsed_result.is_err() {\n        return Err(Vec::from([anyhow!(\"Unexpected error while parsing parameters\")]));\n    }\n\n    let filters = parsed_result.unwrap();\n    verify_filters(&filters)?;\n\n    Ok(filters)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Module Parameter Configuration in YAML\nDESCRIPTION: Example of configuring a basic string parameter for a module in the manifest file, using a Uniswap factory contract address as the parameter.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/parameterized-modules.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_pools_created\n    kind: map\n    inputs:\n      - params: string\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:uniswap.types.v1.Pools\nparams:\n  map_params: 1f98431c8ad98523631ae4a59f267346ea31f984\n```\n\n----------------------------------------\n\nTITLE: Handling Response Messages in Substreams\nDESCRIPTION: JavaScript function to handle different types of response messages in Substreams, including blockScopedData and blockUndoSignal.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/javascript.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const handleResponseMessage = async (response, registry) => {\n    switch(response.message.case) {\n        case \"blockScopedData\":\n            handleBlockScopedDataMessage(response.message.value, registry);\n            break;\n\n        case \"blockUndoSignal\":\n            handleBlockUndoSignalMessage(response.message.value);\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TradeData Objects from Parsed Instructions in Rust\nDESCRIPTION: This code snippet shows how TradeData objects are created from the parsed trade instructions. It extracts relevant information such as transaction ID, block details, and trade specifics to construct a structured representation of each trade.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/dex-trades.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nfn process_block(block: Block) -> Result<Output, substreams::errors::Error> {\n    // ...code omitted...\n        let trade_data = get_trade_instruction(\n            program,\n            inst.data,\n            &inst.accounts,\n            &accounts,\n            &pre_token_balances,\n            &post_token_balances,\n            &\"\".to_string(),\n            false,\n            &inner_instructions,\n        );\n        if trade_data.is_some() {\n            let td = trade_data.unwrap();\n\n            data.push(TradeData {\n                block_date: convert_to_date(timestamp),\n                tx_id: bs58::encode(&transaction.signatures[0]).into_string(),\n                block_slot: slot,\n                block_time: timestamp,\n                signer: accounts.get(0).unwrap().to_string(),\n                pool_address: td.amm,\n                base_mint: get_mint(&td.vault_a, &post_token_balances, &accounts),\n                quote_mint: get_mint(&td.vault_b, &pre_token_balances, &accounts),\n                base_amount: get_amt(\n                    &td.vault_a,\n                    &pre_token_balances,\n                    &post_token_balances,\n                    &accounts,\n                ),\n                quote_amount: get_amt(\n                    &td.vault_b,\n                    &pre_token_balances,\n                    &post_token_balances,\n                    &accounts,\n                ),\n                base_vault: td.vault_a,\n                quote_vault: td.vault_b,\n                is_inner_instruction: false,\n                instruction_index: idx as u32,\n                instruction_type: td.name,\n                inner_instruxtion_index: 0,\n                outer_program: td.dapp_address,\n                inner_program: \"\".to_string(),\n                txn_fee: meta.fee,\n                signer_sol_change: get_signer_balance_change(\n                    &pre_balances,\n                    &post_balances,\n                ),\n            });\n        }\n    // ...code omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Output Type in Substreams Manifest (YAML)\nDESCRIPTION: This snippet demonstrates how to define the output type for a map module in the Substreams manifest. It specifies a protobuf type as the output, which is required for all map module outputs, including simple data types.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/outputs.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  type: proto:eth.erc721.v1.Transfers\n```\n\n----------------------------------------\n\nTITLE: Processing DeFi Transaction Details in Rust\nDESCRIPTION: Code fragment showing the extraction of transaction details including token balances, vault information, instruction metadata, and balance changes. This appears to be part of a larger function handling DeFi transaction processing on Solana.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/dex-trades.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n                                    &pre_token_balances,\n                                    &accounts,\n                                ),\n                                quote_mint: get_mint(\n                                    &td.vault_b,\n                                    &pre_token_balances,\n                                    &accounts,\n                                ),\n                                base_amount: get_amt(\n                                    &td.vault_a,\n                                    &pre_token_balances,\n                                    &post_token_balances,\n                                    &accounts,\n                                ),\n                                quote_amount: get_amt(\n                                    &td.vault_b,\n                                    &pre_token_balances,\n                                    &post_token_balances,\n                                    &accounts,\n                                ),\n                                base_vault: td.vault_a,\n                                quote_vault: td.vault_b,\n                                is_inner_instruction: true,\n                                instruction_index: idx as u32,\n                                instruction_type: td.name,\n                                inner_instruxtion_index: inner_idx as u32,\n                                outer_program: program.to_string(),\n                                inner_program: td.dapp_address,\n                                txn_fee: meta.fee,\n                                signer_sol_change: get_signer_balance_change(\n                                    &pre_balances,\n                                    &post_balances,\n                                ),\n                            });\n                        }\n                    },\n                )\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Solana Blocks to Extract NFT Trades in Rust\nDESCRIPTION: Main module implementation that processes Solana blocks, iterates through transactions and instructions, and extracts NFT trade data. This function handles the high-level parsing of blockchain data.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/nft-trades.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn map_block(block: Block) -> Result<Output, substreams::errors::Error> {\n    let slot = block.slot;\n    let parent_slot = block.parent_slot;\n    let timestamp = block.block_time.as_ref().unwrap().timestamp;\n\n    let mut data: Vec<TradeData> = vec![]; // 1.\n\n    for trx in block.transactions_owned() { // 2. \n        let accounts = trx.resolved_accounts_as_strings(); // 3.\n        if let Some(transaction) = trx.transaction { // 4.\n            let meta = trx.meta.unwrap();\n            let pre_balances = meta.pre_balances;\n            let post_balances = meta.post_balances;\n            let pre_token_balances = meta.pre_token_balances;\n            let post_token_balances = meta.post_token_balances;\n\n            let msg = transaction.message.unwrap();\n\n            for (idx, inst) in msg.instructions.into_iter().enumerate() { // 5.\n                let program = &accounts[inst.program_id_index as usize]; // 6.\n\n                let trade_data = get_trade_data( // 7.\n                    program,\n                    inst.data,\n                    &inst.accounts,\n                    &accounts,\n                    &pre_balances,\n                    &post_balances,\n                    &meta.log_messages,\n                    &post_token_balances,\n                );\n            \n                // ...code omitted...\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Map Module for Pool Events in YAML\nDESCRIPTION: This YAML snippet defines a map module that processes Ethereum blocks and uses the stored pool information to emit Uniswap V3 events. It specifies inputs from both the Ethereum block source and the store_pools_created store.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/dynamic-data-sources.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: map_events\n    kind: map\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n      - store: store_pools_created\n    output:\n      type: proto:uniswap.types.v1.Events\n```\n\n----------------------------------------\n\nTITLE: Rust Implementation of Block Metadata Mapper\nDESCRIPTION: The Rust function that implements the mapping from a full Ethereum block to the simplified BlockMeta structure. It extracts the block number, hash, and parent hash from the input block.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_block_meta_module.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn map_block_meta(blk: Block) -> Result<BlockMeta, substreams::errors::Error> {\n    let header = blk.header.as_ref().unwrap();\n\n    Ok(BlockMeta {\n        number: blk.number,\n        hash: Hex::encode(&blk.hash),\n        parent_hash: Hex::encode(&header.parent_hash),\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Running Substreams Sink Handler\nDESCRIPTION: Example of running the sinker with handlers for block scoped data and block undo signals.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/go.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsinker.Run(context.Background(), sink.NewBlankCursor(), sink.NewSinkerHandlers(handleBlockScopedData, handleBlockUndoSignal))\n```\n\n----------------------------------------\n\nTITLE: Implementing Pool Creation Storage in Rust\nDESCRIPTION: This Rust function implements the store_pools_created module. It iterates through the pools from the input and stores each pool's information in the key-value store using the pool address as part of the key.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/dynamic-data-sources.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::store]\npub fn store_pools_created(pools: Pools, store: StoreSetProto<Pool>) {\n    for pool in pools.pools {\n        let pool_address = &pool.address;\n        store.set(pool.log_ordinal, format!(\"pool:{pool_address}\"), &pool);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Division Function with Result in Rust\nDESCRIPTION: A simple example showing how to use Result<T, E> to handle division operations safely, including division by zero error handling. The function returns either the division result or an error message.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/result.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn divide(num1: u32, num2: u32) -> Result<u32, String> {\n    if num2 == 0 {\n        return Err(String::from(\"You can't divide by 0\"));\n    }\n\n    return Ok(num1 / num2);\n}\n\nfn main() {\n    let result = divide(6, 0);\n    if result.is_ok() {\n        println!(\"This is the happy path: {}\", result.unwrap())\n    } else {\n        println!(\"This is the error: {}\", result.err().unwrap())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function for Substreams in Web Environment\nDESCRIPTION: JavaScript implementation of the main function for running Substreams in a Web environment, handling connections and disconnections.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/javascript.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst TOKEN = \"<SUBTREAMS-TOKEN>\" // Substreams token. Put here your Substreams API token.\nconst ENDPOINT = \"https://mainnet.eth.streamingfast.io\" // Substreams endpoint. In this case, Ethereum mainnet\nconst SPKG = \"https://spkg.io/streamingfast/ethereum-explorer-v0.1.2.spkg\" // Substreams package. In this case, taken from the substreams.dev registry\nconst MODULE = \"map_block_meta\"\nconst START_BLOCK = '100000'\nconst STOP_BLOCK = '+10000'\n\n\n/*\n  Entrypoint of the application.\n  Because of the long-running connection, Substreams will disconnect from time to time.\n  The application MUST handle disconnections and commit the provided cursor to avoid missing information.\n*/\nconst main = async () => {\n  const pkg = await fetchPackage(); // Download spkg\n  const registry = createRegistry(pkg);\n\n  const transport = createConnectTransport({\n      baseUrl: ENDPOINT,\n      interceptors: [createAuthInterceptor(TOKEN)],\n      useBinaryFormat: true,\n      jsonOptions: {\n          typeRegistry: registry,\n      },\n  });\n  \n  // The infinite loop handles disconnections. Every time an disconnection error is thrown, the loop will automatically reconnect\n  // and start consuming from the latest committed cursor.\n  while (true) {\n      try {\n          await stream(pkg, registry, transport);\n      } catch (e) {\n          if (!isErrorRetryable(e)) {\n            console.log(`A fatal error occurred: ${e}`)\n            throw e\n          }\n          console.log(`A retryable error occurred (${e}), retrying after backoff`)\n          console.log(e)\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Substreams Module for ERC721 Transfer Tracking in Rust\nDESCRIPTION: This code snippet sets up the necessary imports, defines the tracked contract address, and initializes the Substreams Ethereum module.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/writing-module-handlers.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nmod abi;\nmod pb;\nuse hex_literal::hex;\nuse pb::erc721;\nuse substreams::prelude::*;\nuse substreams::{log, store::StoreAddInt64, Hex};\nuse substreams_ethereum::{pb::eth::v2 as eth, NULL_ADDRESS};\n\n// Bored Ape Club Contract\nconst TRACKED_CONTRACT: [u8; 20] = hex!(\"bc4ca0eda7647a8ab7c2061c2e118a18a936f13d\");\n\nsubstreams_ethereum::init!();\n```\n\n----------------------------------------\n\nTITLE: Running a Local Substreams Project with CLI\nDESCRIPTION: Command to run a local Substreams project by specifying the manifest file, target module, and block range. This example runs the map_transfers module from block 12292922 for one block.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/old-references/running-substreams.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run -e mainnet.eth.streamingfast.io:443 \\\n   substreams.yaml \\\n   map_transfers \\\n   --start-block 12292922 \\\n   --stop-block +1\n```\n\n----------------------------------------\n\nTITLE: Implementing Pool Creation Event Mapping in Rust\nDESCRIPTION: This Rust function implements the map_pools_created module. It processes Ethereum blocks, filters for PoolCreated events from the Uniswap V3 factory contract, and creates Pool objects with extracted information.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/dynamic-data-sources.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\npub fn map_pools_created(block: Block) -> Result<Pools, Error> {\n    Ok(Pools {\n        pools: block\n            .events::<abi::factory::events::PoolCreated>(&[&UNISWAP_V3_FACTORY])\n            .filter_map(|(event, log)| {\n                // skipped: extracting pool information from the transaction\n                Some(Pool {\n                    address,\n                    token0,\n                    token1,\n                    ..Default::default()\n                })\n            })\n            .collect(),\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Substreams Package to StreamingFast Remote Service\nDESCRIPTION: Command to deploy the USDT Ethereum package to the StreamingFast remote service. This command uses the 'substreams alpha service deploy' with the package URL and the remote service endpoint.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/remote-service.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams alpha service deploy https://spkg.io/enoldev/substreams-ethereum-usdt-v0.1.0.spkg -e https://deploy.streamingfast.io\n```\n\n----------------------------------------\n\nTITLE: Store Delta Example in Rust\nDESCRIPTION: Example demonstrating store delta operations with USD price values, showing how different ordinals affect the state of a store within a single block.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/types.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet store = StoreUSDPrice {\n   Block: #1000,\n   Deltas: [\n      Ord: 1, Key: \"usd\", Type: UPDATE, OldValue: 1.45, NewValue: 1.54,\n      Ord: 2, Key: \"usd\", Type: DELETE, OldValue: 1.54, NewValue: <nil>,\n      Ord: 3, Key: \"usd\", Type: INSERT, OldValue: <nil>, NewValue: 1.47,\n      Ord: 4, Key: \"usd\", Type: UPDATE, OldValue: 1.47, NewValue: 1.65,\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Decimals Response\nDESCRIPTION: Decodes the Decimals response from the batch request using the contract ABI.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nfn get_calls() {\n    let batch = substreams_ethereum::rpc::RpcBatch::new();\n\n    let responses = batch\n        .add(\n            abi::contract::functions::Decimals {},\n            TRACKED_CONTRACT.to_vec(),\n        )\n        .add(\n            abi::contract::functions::Name {},\n            TRACKED_CONTRACT.to_vec(),\n        )\n        .add(\n            abi::contract::functions::Symbol {},\n            TRACKED_CONTRACT.to_vec(),\n        )\n        .execute()\n        .unwrap()\n        .responses;\n\n        let decimals: u64;\n        match substreams_ethereum::rpc::RpcBatch::decode::<_, abi::contract::functions::Decimals>(&responses[0]) {\n            Some(decoded_decimals) => {\n                decimals = decoded_decimals.to_u64();\n                substreams::log::debug!(\"decoded_decimals ok: {}\", decimals);\n            }\n            None => {\n                substreams::log::debug!(\"failed to get decimals\");\n            }\n        };\n}\n```\n\n----------------------------------------\n\nTITLE: Package Configuration in Manifest\nDESCRIPTION: Demonstrates package configuration including name, version and documentation fields in the manifest.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/manifests.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  name: module_name_for_project\n  version: v0.5.0\n  doc: |\n    Documentation heading for the package.\n\n    More detailed documentation for the package.\n```\n\n----------------------------------------\n\nTITLE: Iterating Over All Transactions in Rust with Substreams\nDESCRIPTION: Demonstrates how to iterate over all transactions in a block regardless of their status. The function maps each transaction to a TransactionMeta struct containing the hash, from address, and to address in hexadecimal format.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/cheatsheet/evm/transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse substreams::Hex;\nuse substreams_ethereum::pb::eth::v2::Block;\n\nstruct TransactionMeta {\n    hash: String,\n    from: String,\n    to: String\n}\n\nfn all_transactions(blk: Block) -> Vec<TransactionMeta> {\n    return blk.transaction_traces\n            .iter()\n            .map(|tx| TransactionMeta {\n                hash: Hex::encode(tx.hash),\n                from: Hex::encode(tx.from),\n                to: Hex::encode(tx.to)\n            })\n            .collect();\n}\n```\n\n----------------------------------------\n\nTITLE: Deployment Output from StreamingFast Remote Service\nDESCRIPTION: Example output after deploying a Substreams package. It shows the deployment status, database information, access credentials, and available service endpoints including PostgreSQL and GraphQL interfaces.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/remote-service.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDeploying... (creating services, please wait)\nDeployed substreams sink \"60589e45\":\n  Status: RUNNING\nDeployment *60589e45* is *RUNNING*\n  - Database type is *postgres*\n  - Owner is *0qeru2bd28b954a35c12e*\n\nIndexed blocks: [4634748 - 4785000]\n  - Sink status is available at 'https://srv.streamingfast.io/60589e45/sinkinfo'\n\nEnvironment is *Development*, which means:\n  - Read-only direct access to the database is available at 'postgresql://db.srv.streamingfast.io:17441/substreams?sslmode=disable&user=dev-node-ro&password=JWgg68gP33lZ'\n  - Read/write direct access to the database is available at 'postgresql://db.srv.streamingfast.io:17441/substreams?sslmode=disable&user=dev-node&password=iESYNNa5EihR'\n  - Read/write access to the database via PGWeb at 'https://srv.streamingfast.io/60589e45/pgweb'\n\nPostgraphile is available at these URL:\n  - GraphiQL (browser): 'https://srv.streamingfast.io/60589e45/graphiql'\n  - GraphQL (apps): 'https://srv.streamingfast.io/60589e45/graphql'\n\nDocumentation: https://substreams.streamingfast.io\nServices:\n  - pgweb: pod running\n  - postgraphile: pod running\n  - postgres: pod running\n  - sink: pod running\n  - sinkinfo: pod running\n```\n\n----------------------------------------\n\nTITLE: Defining Module Parameterization in YAML Manifest\nDESCRIPTION: Example showing how to define module parameterization in a Substreams manifest. The configuration allows passing parameters to modules through the manifest and overriding imported module values.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmodule:\n  name: my_module\n  inputs:\n    params: string\n  ...\n\nparams:\n  my_module: \"0x123123\"\n  \"imported:module\": override value from imported module\n```\n\n----------------------------------------\n\nTITLE: Visualizing Substreams Data with GUI\nDESCRIPTION: Command to launch the Substreams GUI for visualizing and iterating on extracted data.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/evm.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui\n```\n\n----------------------------------------\n\nTITLE: Graph CLI Commands for Local Graph Node Interaction\nDESCRIPTION: Essential Graph CLI commands for working with a local Graph Node, including building, creating, removing, and deploying subgraphs. These commands target the local IPFS node and Graph Node instance.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/graph-node/local-development.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngraph build --ipfs=http://localhost:5001\ngraph create <NAME> --node=http://localhost:8020\ngraph remove <NAME> --node=http://localhost:8020\ngraph deploy --node http://localhost:8020/ --ipfs http://localhost:5001 <NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring Network-Specific Settings in Substreams YAML\nDESCRIPTION: Illustrates how to specify network-specific parameters and initial block values for Substreams modules.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  mainnet:\n    initialBlock:\n      mod1: 200\n      lib:mod1: 400\n    params:\n      mod2: \"addr=0x1234\"\n  sepolia:\n    [...]\n```\n\n----------------------------------------\n\nTITLE: Defining an Index Module in YAML for Substreams\nDESCRIPTION: This YAML snippet defines an index module named 'index_events' that takes 'all_events' as input and outputs a Keys object. It's a special kind of module used for block indexing.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/indexes.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: index_events\n    kind: blockIndex\n    inputs:\n      - map: all_events\n    output:\n      type: proto:sf.substreams.index.v1.Keys\n```\n\n----------------------------------------\n\nTITLE: Building Substreams Package\nDESCRIPTION: Generates Protobufs, compiles Rust code, and creates a Substreams package file\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/command-line-interface.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams build\n```\n\n----------------------------------------\n\nTITLE: Overriding Substreams YAML Configuration\nDESCRIPTION: Example YAML configuration for overriding certain substreams.yaml values when using the pack command with the -c flag. It allows customizing package name, network, initial blocks, and module parameters.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  name: my_custom_package_name\n\nnetwork: arbitrum-one\ninitialBlocks:\n  module_name_1: 123123123\nparams:\n  mod1: \"custom_parameter\"\n```\n\n----------------------------------------\n\nTITLE: Initializing RPC Batch Structure in Rust\nDESCRIPTION: Creates a new RpcBatch instance for batching multiple RPC calls.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nfn get_calls() {\n    let batch = substreams_ethereum::rpc::RpcBatch::new();\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Generating Protobuf Code with Substreams CLI\nDESCRIPTION: This bash command uses the Substreams CLI to generate Rust code from the protobuf definitions specified in the substreams.yaml file. It excludes certain paths to avoid generating code for external dependencies.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/creating-protobuf-schemas.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams protogen ./substreams.yaml --exclude-paths=\"sf/ethereum,sf/substreams,google\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Substreams Configuration for Different Networks (YAML)\nDESCRIPTION: Example of an override manifest file that allows porting a Substreams to a different network. This demonstrates how to override specific parameters and initial blocks.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nderiveFrom: path/to/mainnet-substreams.spkg\n\npackage:\n  name: \"polygon-substreams\"\n  version: \"100.0.0\"\n\nnetwork: polygon\n\ninitialBlocks:\n  module1: 17500000\nparams:\n  module1: \"address=2a75ca72679cf1299936d6104d825c9654489058\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Sink in Substreams Manifest\nDESCRIPTION: Example configuration for a SQL sink in the Substreams manifest file. Includes settings for schema, engine type, frontend options, and dbt configuration. This configuration enables data streaming to a Clickhouse database with optional dbt processing.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/deployable-services/deployable-services.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsink:\n  module: db_out\n  type: sf.substreams.sink.sql.v1.Service\n  config:\n    schema: \"./schema.sql\"\n    engine: clickhouse\n    postgraphile_frontend:\n      enabled: false\n    pgweb_frontend:\n      enabled: false\n    dbt_config:\n      enabled: true\n      files: \"./path/to/folder\"\n      run_interval_seconds: 300\n```\n\n----------------------------------------\n\nTITLE: Verifying Substreams Authentication with ERC20 Balance Changes\nDESCRIPTION: Command to test Substreams authentication by running an ERC20 balance changes package on Ethereum Mainnet. This command verifies the authentication setup and includes parameters for block range and network specification.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui \\\n  erc20-balance-changes@latest \\\n  map_valid_balance_changes \\\n  -e mainnet.eth.streamingfast.io:443 \\\n  --start-block 10397553 \\\n  --stop-block +10 \\\n  --network eth\n```\n\n----------------------------------------\n\nTITLE: Examining the Divide Function Return Types in Rust\nDESCRIPTION: A closer look at the divide function implementation, explaining how Result<u32, String> works to return either a successful value (u32) or an error message (String).\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/result.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn divide(num1: u32, num2: u32) -> Result<u32, String> { // 1.\n    if num2 == 0 {\n        return Err(String::from(\"You can't divide by 0\")); // 2.\n    }\n\n    return Ok(num1 / num2); // 3.\n}\n```\n\n----------------------------------------\n\nTITLE: Package Imports Configuration\nDESCRIPTION: Shows how to import third-party Substreams packages and reference their modules.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/manifests.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  sol: https://spkg.io/streamingfast/solana-explorer-v0.2.0.spkg\n  ethereum: substreams-ethereum-v1.0.0.spkg\n  token: ../eth-token/substreams.yaml\n\n...\n\nmodules:\n...\n    inputs:\n      - map: sol:map_block_without_votes\n```\n\n----------------------------------------\n\nTITLE: Defining a Store Module in Substreams YAML Configuration\nDESCRIPTION: YAML configuration for the store_block_meta_end module that defines how block metadata is stored and what type of data is used.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# substreams.yaml\n...\n  - name: store_block_meta_end\n    kind: store\n    updatePolicy: set\n    valueType: proto:eth.block_meta.v1.BlockMeta\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Filters in Substreams Manifest\nDESCRIPTION: These YAML snippets show how to configure transaction filters in the Substreams manifest file (substreams.yml) for different filtering scenarios.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_filter_transactions_module.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmap_filter_transactions: \"to=0xdAC17F958D2ee523a2206206994597C13D831ec7\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmap_filter_transactions: \"from=0x89e51fa8ca5d66cd220baed62ed01e8951aa7c40&to=0xdAC17F958D2ee523a2206206994597C13D831ec7\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmap_filter_transactions: \"from=0x89e51fa8ca5d66cd220baed62ed01e8951aa7c40\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmap_filter_transactions: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Binary Types for WASM Bindgen Shims\nDESCRIPTION: YAML configuration showing how to enable WASM bindgen shims support in Substreams manifest for compatibility with solana_program and alloy/ether-rs libraries.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbinaries:\n  default:\n    type: wasm/rust-v1\n    file: <some_file>\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbinaries:\n  default:\n    type: wasm/rust-v1+wasm-bindgen-shims\n    file: <some_file>\n```\n\n----------------------------------------\n\nTITLE: Using is_some() and is_none() Methods with Option in Rust\nDESCRIPTION: A complete example demonstrating how to use the is_some() and is_none() helper methods to check if an Option contains a value or not, and how to unwrap the value when it exists.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/option.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn get_username_by_id(id: u32) -> Option<String> {\n    match(id) {\n        1 => Some(String::from(\"Susan\")),\n        2 => Some(String::from(\"John\")),\n        _ => None\n    }\n}\n\nfn main() {\n    let user1 = get_username_by_id(1); // 1.\n    let user10 = get_username_by_id(10); // 2.\n\n    if (user1.is_some()) { // 3.\n        println!(\"User with id = 1 holds username {}\", user1.unwrap())\n    }\n\n    if (user10.is_none()) { // 4.\n        println!(\"User with id = 10 does not exist\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Substreams Project for Testing\nDESCRIPTION: Command to run the Substreams project to verify setup, connecting to Ethereum mainnet and processing a single block starting at block 1,000,000.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/files.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run -e mainnet.eth.streamingfast.io:443 substreams.yaml jsonl_out --start-block 1000000 --stop-block +1\n```\n\n----------------------------------------\n\nTITLE: Defining Substreams-Powered Subgraph in YAML\nDESCRIPTION: YAML configuration for a Substreams-powered subgraph, specifying the data source as a Substreams package and the corresponding mapping.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/subgraph/graph-out.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: 0.0.4\ndescription: Ethereum Contract Tracking Subgraph (powered by Substreams)\nrepository: https://github.com/graphprotocol/graph-tooling\nschema:\n  file: schema.graphql\ndataSources:\n  - kind: substreams\n    name: substream_test\n    network: mainnet\n    source:\n      package:\n        moduleName: graph_out\n        file: substreams-test-v1.0.1.spkg\n    mapping:\n      kind: substreams/graph-entities\n      apiVersion: 0.0.5\n```\n\n----------------------------------------\n\nTITLE: Declaring the Substreams Module in the Manifest\nDESCRIPTION: This YAML snippet shows the declaration of the 'map_filter_transactions' module in the Substreams manifest, specifying its inputs and output.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_filter_transactions_module.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: map_filter_transactions\n    kind: map\n    inputs:\n      - params: string\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:eth.transaction.v1.Transactions\n```\n\n----------------------------------------\n\nTITLE: Logging Debug Messages in Substreams\nDESCRIPTION: Example of using the debug macro to log messages during Substreams execution. This provides debug-level logging that can be toggled in the GUI interface with the 'L' key.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/log-and-debug.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn map_program_data(blk: Block) -> Data {\n    substreams::log::debug!(\"My log\")\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Batch Processing Implementation\nDESCRIPTION: Full implementation of batch processing including decoding all three responses (Decimals, Name, Symbol).\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nfn get_calls() {\n    let token_address = &TRACKED_CONTRACT.to_vec();\n    let batch = substreams_ethereum::rpc::RpcBatch::new();\n    let responses = batch\n        .add(\n            abi::contract::functions::Decimals {},\n            TRACKED_CONTRACT.to_vec(),\n        )\n        .add(\n            abi::contract::functions::Name {},\n            TRACKED_CONTRACT.to_vec(),\n        )\n        .add(\n            abi::contract::functions::Symbol {},\n            TRACKED_CONTRACT.to_vec(),\n        )\n        .execute()\n        .unwrap()\n        .responses;\n\n    let decimals: u64;\n    match substreams_ethereum::rpc::RpcBatch::decode::<_, abi::contract::functions::Decimals>(&responses[0]) {\n        Some(decoded_decimals) => {\n            decimals = decoded_decimals.to_u64();\n            substreams::log::debug!(\"decoded_decimals ok: {}\", decimals);\n        }\n        None => {\n            substreams::log::debug!(\"failed to get decimals\");\n        }\n    };\n\n    let name: String;\n    match substreams_ethereum::rpc::RpcBatch::decode::<_, abi::contract::functions::Name>(&responses[1]) {\n        Some(decoded_name) => {\n            name = decoded_name;\n            substreams::log::debug!(\"decoded_name ok: {}\", name);\n        }\n        None => {\n            substreams::log::debug!(\"failed to get name\");\n        }\n    };\n\n    let symbol: String;\n    match substreams_ethereum::rpc::RpcBatch::decode::<_, abi::contract::functions::Symbol>(&responses[2]) {\n        Some(decoded_symbol) => {\n            symbol = decoded_symbol;\n            substreams::log::debug!(\"decoded_symbol ok: {}\", symbol);\n        }\n        None => {\n            substreams::log::debug!(\"failed to get symbol\");\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Module Handler with Substreams Macro\nDESCRIPTION: Example of using the substreams::handlers::map macro to create a map module handler that processes Ethereum blocks and returns ERC721 transfers. The handler must return a Result type with Error as the error type.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\npub fn map_module_func(blk: eth::Block) -> Result<erc721::Transfers, Error> {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Substreams Sink Configuration YAML\nDESCRIPTION: YAML configuration file that defines the Substreams sink setup, including module reference, SQL schema location, and other configuration parameters.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/sql-sink.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: v0.1.0\npackage:\n  name: \"<name>\"\n  version: <version>\n\nimports:\n  sql: https://github.com/streamingfast/substreams-sink-sql/releases/download/protodefs-v1.0.1/substreams-sink-sql-protodefs-v1.0.1.spkg\n  main: ../substreams.yaml\n\nnetwork: 'mainnet'\n\nsink:\n  module: main:db_out\n  type: sf.substreams.sink.sql.v1.Service\n  config:\n    schema: \"../schema.sql\"\n    wire_protocol_access: true\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Implementation\nDESCRIPTION: Rust implementation showing how to use Counter and Gauge metrics with labels in Substreams Prometheus sink.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/prometheus.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse std::collections::HashMap;\nuse substreams::prelude::*;\nuse substreams::errors::Error;\nuse substreams_sink_prometheus::{PrometheusOperations, Counter, Gauge};\n\n#[substreams::handlers::map]\nfn prom_out(\n    ... some stores ...\n) -> Result<PrometheusOperations, Error> {\n\n    // Initialize Prometheus Operations container\n    let mut prom_ops: PrometheusOperations = Default::default();\n\n    // Counter Metric\n    // ==============\n    // Initialize Gauge with a name & labels\n    let mut counter = Counter::from(\"counter_name\");\n\n    // Increments the Counter by 1.\n    prom_ops.push(counter.inc());\n\n    // Adds an arbitrary value to a Counter. (Returns an error if the value is < 0.)\n    prom_ops.push(counter.add(123.456));\n\n    // Labels\n    // ======\n    // Create a HashMap of labels\n    // Labels represents a collection of label name -> value mappings. \n    let labels1 = HashMap::from([(\"label1\".to_string(), \"value1\".to_string())]);\n    let mut labels2 = HashMap::new();\n    labels2.insert(\"label2\".to_string(), \"value2\".to_string());\n\n    // Gauge Metric\n    // ============\n    // Initialize Gauge\n    let mut gauge = Gauge::from(\"gauge_name\").with(labels1);\n\n    // Sets the Gauge to an arbitrary value.\n    prom_ops.push(gauge.set(88.8));\n\n    // Increments the Gauge by 1.\n    prom_ops.push(gauge.inc());\n\n    // Decrements the Gauge by 1.\n    prom_ops.push(gauge.dec());\n\n    // Adds an arbitrary value to a Gauge. (The value can be negative, resulting in a   rease of the Gauge.)\n    prom_ops.push(gauge.add(50.0));\n    prom_ops.push(gauge.add(-10.0));\n\n    // Subtracts arbitrary value from the Gauge. (The value can be negative, resulting in an    rease of the Gauge.)\n    prom_ops.push(gauge.sub(25.0));\n    prom_ops.push(gauge.sub(-5.0));\n\n    // Set Gauge to the current Unix time in seconds.\n    prom_ops.push(gauge.set_to_current_time());\n\n    // Remove metrics for the given label values\n    prom_ops.push(gauge.remove(labels2));\n\n    // Reset gauge values\n    prom_ops.push(gauge.reset());\n\n    Ok(prom_ops)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Option<String> Return Type in Rust\nDESCRIPTION: An improved function signature using Option<String> as the return type to explicitly handle cases where a username might not exist for a given ID.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/option.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn get_username_by_id(id: u32) -> Option<String> {\n    // function body\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Substreams Project\nDESCRIPTION: Creates a new Substreams project using an interactive command prompt\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/command-line-interface.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams init\n```\n\n----------------------------------------\n\nTITLE: Debug Initial Snapshot Example\nDESCRIPTION: Example demonstrating how to run Substreams with initial snapshot debugging for store modules, showing store contents at a specific block before continuing with normal execution.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run substreams.yaml map_transfers -s 1000 -t +5 --debug-modules-initial-snapshot=store_pools\n```\n\n----------------------------------------\n\nTITLE: Running Solana Substreams GUI for Transaction Filtering\nDESCRIPTION: Command to run the Substreams GUI, filtering transactions with a specific signature hash. It specifies the start and stop blocks for the search.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui ./substreams.yaml \\\n    map_filter_transactions -e mainnet.sol.streamingfast.io:443 \\\n    --start-block 153000028 --stop-block +1\n```\n\n----------------------------------------\n\nTITLE: Substreams BlockUndoSignal Protobuf Structure\nDESCRIPTION: Definition of the BlockUndoSignal Protobuf message used for handling blockchain forks. It contains information about the last valid block and cursor, allowing consumers to revert to the correct chain path after a fork is resolved.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/reliability-guarantees.md#2025-04-23_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage BlockUndoSignal {\n  sf.substreams.v1.BlockRef last_valid_block = 1;\n  string last_valid_cursor = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Store Input in Substreams Manifest (YAML)\nDESCRIPTION: Illustrates how to specify a store input type in the Substreams manifest, with examples of both default 'get' mode and 'deltas' mode.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/inputs.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  inputs:\n    - store: my_store # defaults to mode: get\n```\n\nLANGUAGE: yaml\nCODE:\n```\n  inputs:\n    - store: my_delta_store\n      mode: deltas\n```\n\n----------------------------------------\n\nTITLE: Extracting Filtered Solana Instructions in Rust\nDESCRIPTION: This function extracts Solana instructions from a specific program ID. It parses filters from input parameters, iterates through block transactions, applies filters, and constructs Instruction objects. The function handles base58 encoding for program IDs, accounts, and instruction data.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/temp.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn map_filter_instructions(params: String, blk: Block) -> Result<Instructions, Vec<substreams::errors::Error>> {\n    let filters = parse_filters_from_params(params)?;\n\n    let mut instructions : Vec<Instruction> = Vec::new();\n\n    blk.transactions.iter().for_each(|tx| {\n        let msg = tx.transaction.clone().unwrap().message.unwrap();\n        let acct_keys = msg.account_keys.as_slice();\n        let insts : Vec<Instruction> = msg.instructions.iter()\n            .filter(|inst| apply_filter(inst, &filters, acct_keys.to_vec()))\n            .map(|inst| {\n            Instruction {\n                program_id: bs58::encode(acct_keys[inst.program_id_index as usize].to_vec()).into_string(),\n                accounts: inst.accounts.iter().map(|acct| bs58::encode(acct_keys[*acct as usize].to_vec()).into_string()).collect(),\n                data: bs58::encode(inst.data.clone()).into_string(),\n            }\n        }).collect();\n        instructions.extend(insts);\n    });\n\n    Ok(Instructions { instructions })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sink with DBT in Substreams Manifest (YAML)\nDESCRIPTION: Example of configuring a sink with DBT (Data Build Tool) support in a Substreams manifest. This allows deploying custom DBT models with postgres and clickhouse sinks.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsink:\n  module: db_out\n  type: sf.substreams.sink.sql.v1.Service\n  config:\n    schema: \"./schema.sql\"\n    wire_protocol_access: true\n    postgraphile_frontend:\n      enabled: true\n    pgweb_frontend:\n      enabled: true\n    dbt:\n      files: \"./dbt\"\n      run_interval_seconds: 60\n```\n\n----------------------------------------\n\nTITLE: Running Substreams with JSON Output\nDESCRIPTION: Executes a Substreams package with JSON formatted output\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/command-line-interface.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run -e mainnet.eth.streamingfast.io:443 \\\n    https://github.com/Jannis/gravity-substream/releases/download/v0.0.1/gravity-v0.1.0.spkg \\\n    gravatar_updates -o json\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"updates\": [\n    {\n      \"id\": \"39\",\n      \"owner\": \"0xaadcc13071fdf9c73cfbb8d97639ea68aa6fd1d2\",\n      \"displayName\": \"alex | OpenSea\",\n      \"imageUrl\": \"https://ucarecdn.com/13a67247-cb89-417a-92d2-50a7d7aa481c/-/crop/382x382/0,0/-/preview/\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KV Output Module in Substreams YAML\nDESCRIPTION: YAML configuration for the kv_out module that transforms store deltas into key-value operations for the sink.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# substreams.yaml\n...\n  - name: kv_out\n    kind: map\n    inputs:\n      - store: store_block_meta_end\n        mode: deltas\n    output:\n      type: proto:sf.substreams.sink.kv.v1.KVOperations\n```\n\n----------------------------------------\n\nTITLE: Building Substreams Module with Make\nDESCRIPTION: Command to build the Substreams module using the included Makefile.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/files.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Streaming Against Local Substreams Instance\nDESCRIPTION: Command to test the local Substreams instance by running a specific package and mapping function for a given block range.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/indexer-reference/test-locally.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run -e localhost:10016 --plaintext \\\n  https://spkg.io/streamingfast/ethereum-explorer-v0.1.2.spkg \\\n  map_block_meta -s 1000 -t +10\n```\n\n----------------------------------------\n\nTITLE: Configuring DEX Trades Substreams Module in YAML\nDESCRIPTION: YAML configuration for the map_block module that processes Solana blocks and outputs trade data. The module takes a raw Solana block as input and produces a custom Output protobuf message.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/dex-trades.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_block\n    kind: map\n    inputs:\n      - source: sf.solana.type.v1.Block\n    output:\n      type: proto:sf.solana.dex.trades.v1.Output\n```\n\n----------------------------------------\n\nTITLE: Logging Messages in Substreams Using println\nDESCRIPTION: A simple example of using the println function to log messages during Substreams execution. This log will be visible when running the Substreams with 'substreams gui' or 'substreams run' commands.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/log-and-debug.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn map_program_data(blk: Block) -> Data {\n    substreams::log::println(\"My log\")\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Substreams Help\nDESCRIPTION: Shows available commands and their descriptions\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/command-line-interface.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams -h\n```\n\n----------------------------------------\n\nTITLE: Filtering Successful Transactions by Status\nDESCRIPTION: Demonstrates how to filter transactions by their status to get only successful ones. This approach iterates over all transactions and filters based on the TransactionTraceStatus::Succeeded enum value.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/cheatsheet/evm/transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse substreams::Hex;\nuse substreams_ethereum::pb::eth::v2::{Block, TransactionTraceStatus};\n\nstruct TransactionMeta {\n    hash: String,\n    from: String,\n    to: String\n}\n\nfn successful_transactions(blk: Block) -> Vec<TransactionMeta> {\n    return blk.transaction_traces.iter()\n        .filter(|tx| tx.status() == TransactionTraceStatus::Succeeded)\n        .map(|tx| TransactionMeta {\n            hash: Hex::encode(tx.hash),\n            from: Hex::encode(tx.from),\n            to: Hex::encode(tx.to)\n        })\n        .collect();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Logging in Substreams Rust Handler\nDESCRIPTION: Example showing how to implement logging in a Substreams map handler using substreams::log::println. This handler processes block transactions and logs the transaction count. Note that standard Rust println cannot be used in Substreams.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/old-content/develop/rust-crates.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn all_transactions_without_votes(blk: Block) -> Result<Transactions, substreams::errors::Error> {\n    let transactions: Vec<ConfirmedTransaction> = blk.transactions.into_iter().collect();\n\n    substreams::log::println(format!(\"Number of transactions:{}\", transactions.len()));\n\n    Ok(Transactions { transactions })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Substreams Package with CLI\nDESCRIPTION: The Substreams CLI command to create an .spkg file from a Substreams manifest. This package contains everything needed to run a Substreams independently.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/old-content/glossary.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams pack\n```\n\n----------------------------------------\n\nTITLE: Defining Map Input in Substreams Manifest (YAML)\nDESCRIPTION: Shows how to define a map input type in the Substreams manifest, representing the output of another map module.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/inputs.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  inputs:\n    - map: my_map\n```\n\n----------------------------------------\n\nTITLE: Output of Successful Division in Rust\nDESCRIPTION: Shows the console output when a division operation is successful, displaying the result of dividing 6 by 2.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/result.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nThis is the happy path: 3\n```\n\n----------------------------------------\n\nTITLE: Preparing Substreams Package with Yarn Scripts\nDESCRIPTION: Yarn commands to generate types, build, and package the Substreams for use in a subgraph.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/subgraph/graph-out.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn substreams:protogen\nyarn substreams:build\nyarn substreams:package\n\n# alternatively, yarn substreams:prepare calls all of the above commands\n```\n\n----------------------------------------\n\nTITLE: Defining Substreams Module for NFT Trades in YAML\nDESCRIPTION: YAML configuration for the 'map_block' module that processes Solana blocks and outputs structured NFT trade data. The module takes Block objects as input and produces custom Output objects.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/nft-trades.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_block\n    kind: map\n    inputs:\n      - source: sf.solana.type.v1.Block\n    output:\n      type: proto:sf.solana.nft.trades.v1.Output\n```\n\n----------------------------------------\n\nTITLE: Inspecting Substreams Package Info\nDESCRIPTION: Displays package contents and configuration information\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/command-line-interface.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams info ./substreams.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nPackage name: solana_spl_transfers\nVersion: v0.5.2\nDoc: Solana SPL Token Transfers stream\n\n  Stream SPL token transfers to the nearest human being.\n\nModules:\n----\nName: spl_transfers\nInitial block: 130000000\nKind: map\nOutput Type: proto:solana.spl.v1.TokenTransfers\nHash: 2b59e4e840f814f4154a688c2935da9c3b61dc61\n\nName: transfer_store\nInitial block: 130000000\nKind: store\nValue Type: proto:solana.spl.v1.TokenTransfers\nUpdate Policy: UPDATE_POLICY_SET\nHash: 11fd70768029bebce3741b051c15191d099d2436\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Messages for Ethereum Contracts in Substreams\nDESCRIPTION: Protocol Buffer definitions for Contract and Contracts messages used in the Substreams package to represent Ethereum contract deployments.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/subgraph/graph-out.md#2025-04-23_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\npackage example;\n\nmessage Contracts {\n  repeated Contract contracts = 1;\n}\n\nmessage Contract {\n    string address = 1;\n    uint64 blockNumber = 2;\n    string timestamp = 3;\n    uint64 ordinal = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Substreams Engine Locally\nDESCRIPTION: Command to start the Substreams engine locally with specific configuration options for testing purposes.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/indexer-reference/test-locally.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfireeth start substreams-tier1,substreams-tier2 --config-file= \\\n  --common-live-blocks-addr= --common-first-streamable-block=1000 \\\n  --substreams-state-bundle-size=10\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-compiled Substreams CLI Binary on Linux\nDESCRIPTION: Script to automatically download and extract the latest Substreams CLI release for Linux based on system architecture.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/installing-the-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Use correct binary for your platform\nLINK=$(curl -s https://api.github.com/repos/streamingfast/substreams/releases/latest | awk \"/download.url.*linux_$(uname -m)/ {print \\$2}\" | sed 's/\"//g')\ncurl -L  $LINK  | tar zxf -\n```\n\n----------------------------------------\n\nTITLE: Defining Map Module for Pool Creation Events in YAML\nDESCRIPTION: This YAML snippet defines a map module that processes Ethereum blocks to emit Uniswap V3 pool creation events. It specifies the input as Ethereum blocks and the output as a custom Pools protocol buffer type.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/dynamic-data-sources.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: map_pools_created\n    kind: map\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:uniswap.types.v1.Pools\n```\n\n----------------------------------------\n\nTITLE: Running a Packaged Substreams (.spkg) with GUI\nDESCRIPTION: Command to run a pre-packaged Substreams (.spkg) file using the GUI interface. This example runs the map_balance_changes module from the ERC20 balance changes package starting from block 1397553.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/old-references/running-substreams.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui \\\n https://spkg.io/streamingfast/erc20-balance-changes-v1.1.0.spkg \\\n map_balance_changes \\\n -e mainnet.eth.streamingfast.io:443 \\\n --start-block 1397553\n```\n\n----------------------------------------\n\nTITLE: Defining Instruction Protobuf Messages\nDESCRIPTION: Protobuf definitions for the Instructions and Instruction messages used in the Substreams module output.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-instructions.md#2025-04-23_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Instructions {\n  repeated Instruction instructions = 1;\n}\n\nmessage Instruction {\n  string program_id = 1;\n  repeated string accounts = 2;\n  string data = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Substreams Application in Web Environment\nDESCRIPTION: Bash command to start a development server for running the Substreams application in a Web environment using ViteJS.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/javascript.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Starknet Project\nDESCRIPTION: Command to initialize a new Starknet Substreams project, offering choices between minimal and events-based templates.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/starknet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams init\n```\n\n----------------------------------------\n\nTITLE: Processing Store Deltas for KV Operations in Rust\nDESCRIPTION: Implementation of the process_deltas function that transforms store deltas into key-value operations by handling create, update, and delete operations.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// src/kv_out.rs\n\nuse substreams::proto;\nuse substreams::store::{self, DeltaProto};\nuse substreams_sink_kv::pb::kv::KvOperations;\n\nuse crate::pb::block_meta::BlockMeta;\n\npub fn process_deltas(ops: &mut KvOperations, deltas: store::Deltas<DeltaProto<BlockMeta>>) {\n    use substreams::pb::substreams::store_delta::Operation;\n\n    for delta in deltas.deltas {\n        match delta.operation {\n            // KV Operations do not distinguish between Create and Update.\n            Operation::Create | Operation::Update => {\n                let val = proto::encode(&delta.new_value).unwrap();\n                ops.push_new(delta.key, val, delta.ordinal);\n            }\n            Operation::Delete => ops.push_delete(&delta.key, delta.ordinal),\n            x => panic!(\"unsupported operation {:?}\", x),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up SQL Sink with Database Connection\nDESCRIPTION: Command to run the substreams-sink-sql setup with a PostgreSQL database connection string and the sink configuration file.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/sql-sink.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams-sink-sql setup \"psql://dev-node:insecure-change-me-in-prod@127.0.0.1:5432/substreams_example?sslmode=disable\" ./sink/substreams.dev.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Firehose Ethereum Binary with Homebrew\nDESCRIPTION: Command to install the firehose-ethereum single binary using Homebrew package manager.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/indexer-reference/test-locally.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install streamingfast/tap/firehose-ethereum\n```\n\n----------------------------------------\n\nTITLE: Initializing Solana Substreams Project with CLI\nDESCRIPTION: This command initializes a Solana Substreams project, offering options for minimal block data extraction, transaction filtering, or Anchor IDL-based instruction and event decoding.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/solana/solana.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams init\n```\n\n----------------------------------------\n\nTITLE: Installing Substreams CLI from Source Code\nDESCRIPTION: Commands to clone the Substreams repository and compile the CLI tool from source using Go.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/installing-the-cli.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/streamingfast/substreams\ncd substreams\ngo install -v ./cmd/substreams\n```\n\n----------------------------------------\n\nTITLE: Building Substreams Project\nDESCRIPTION: Command to build the Substreams SQL sink.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/starknet.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams build\n```\n\n----------------------------------------\n\nTITLE: Routing NFT Trade Data Decoding by Exchange in Rust\nDESCRIPTION: Function that determines which exchange-specific parser to use based on the program address. It routes the decoding process to the appropriate exchange-specific handler based on the program account.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/nft-trades.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfn get_trade_data(\n    dapp_address: &String,\n    instruction_data: Vec<u8>,\n    account_indices: &Vec<u8>,\n    accounts: &Vec<String>,\n    pre_balances: &Vec<u64>,\n    post_balances: &Vec<u64>,\n    log_messages: &Vec<String>,\n    post_token_balances: &Vec<TokenBalance>,\n) -> Option<TradeData> {\n    let input_accounts = prepare_input_accounts(account_indices, accounts); // 1.\n\n    let mut result = None;\n    match dapp_address.as_str() { // 2.\n        \"TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN\" => { // 3. Tensor\n            result =\n                dapps::dapp_TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN::parse_trade_instruction( // 4.\n                    instruction_data,\n                    input_accounts,\n                    log_messages,\n                );\n        }\n        \"M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K\" => { // 4. MagicEden\n            result =\n                dapps::dapp_M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K::parse_trade_instruction(\n                    instruction_data,\n                    input_accounts,\n                    accounts,\n                    log_messages,\n                    post_token_balances,\n                );\n        }\n        \"hadeK9DLv9eA7ya5KCTqSvSvRZeJC3JgD5a9Y3CNbvu\" => { // 5. HadeSwap\n            result =\n                dapps::dapp_hadeK9DLv9eA7ya5KCTqSvSvRZeJC3JgD5a9Y3CNbvu::parse_trade_instruction(\n                    instruction_data,\n                    input_accounts,\n                    accounts,\n                    pre_balances,\n                    post_balances,\n                )\n        }\n        \"mmm3XBJg5gk8XJxEKBvdgptZz6SgK4tXvn36sodowMc\" => { // 6. MMM\n            result =\n                dapps::dapp_mmm3XBJg5gk8XJxEKBvdgptZz6SgK4tXvn36sodowMc::parse_trade_instruction(\n                    instruction_data,\n                    input_accounts,\n                    accounts,\n                    pre_balances,\n                    post_balances,\n                    log_messages,\n                );\n        }\n        \"CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz\" => {  // 7. Solanart\n            result =\n                dapps::dapp_CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz::parse_trade_instruction(\n                    instruction_data,\n                    input_accounts,\n                    accounts,\n                    pre_balances,\n                    post_balances,\n                    log_messages,\n                );\n        }\n        \"SNPRohhBurQwrpwAptw1QYtpFdfEKitr4WSJ125cN1g\" => { // 8. Sniper Market\n            result =\n                dapps::dapp_SNPRohhBurQwrpwAptw1QYtpFdfEKitr4WSJ125cN1g::parse_trade_instruction(\n                    instruction_data,\n                    input_accounts,\n                    accounts,\n                    pre_balances,\n                    post_balances,\n                    log_messages,\n                );\n        }\n        _ => {} // 9.\n    }\n\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with String Return Type in Rust\nDESCRIPTION: A simple function signature showing how to define a function that returns a String given a user ID. This approach doesn't explicitly handle the case when no username is found.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/option.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn get_username_by_id(id: u32) -> String {\n    // function body\n}\n```\n\n----------------------------------------\n\nTITLE: Running SQL Sink\nDESCRIPTION: Command to start the SQL sink process for data ingestion.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/starknet.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams-sink-sql\n```\n\n----------------------------------------\n\nTITLE: Generating Subgraph Code for Substreams\nDESCRIPTION: Command to generate the necessary files and function definitions for creating a Substreams-powered subgraph.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/evm.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams codegen subgraph\n```\n\n----------------------------------------\n\nTITLE: Starting Local Graph Node with Substreams Endpoint\nDESCRIPTION: Command to start a local Graph Node environment with specified network and Substreams endpoint parameters. This script spins up a Graph Node instance, local IPFS node, and Postgres database.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/graph-node/local-development.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./start.sh <NETWORK> <SUBSTREAMS_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Stellar Operations Mapping in Rust\nDESCRIPTION: List of supported Stellar operations that can be decoded and indexed by the Stellar Foundational Module. This code shows the mapping between operation types and their string representations.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/stellar.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n&Op::CreateAccount(_) => \"create_account\",\n&Op::AccountMerge(_) => \"account_merge\",\n&Op::Payment(_) => \"payment\",\n&Op::CreateClaimableBalance(_) => \"create_claimable_balance\",\n&Op::ClaimClaimableBalance(_) => \"claim_claimable_balance\",\n&Op::Clawback(_) => \"clawback\",\n&Op::ClawbackClaimableBalance(_) => \"clawback_claimable_balance\",\n&Op::AllowTrust(_) => \"allow_trust\",\n&Op::SetTrustLineFlags(_) => \"set_trust_line_flags\",\n&Op::LiquidityPoolDeposit(_) => \"liquidity_pool_deposit\",\n&Op::LiquidityPoolWithdraw(_) => \"liquidity_pool_withdraw\",\n&Op::ManageBuyOffer(_) => \"manage_buy_offer\",\n&Op::ManageSellOffer(_) => \"manage_sell_offer\",\n&Op::CreatePassiveSellOffer(_) => \"create_passive_sell_offer\",\n&Op::PathPaymentStrictSend(_) => \"path_payment_strict_send\",\n&Op::PathPaymentStrictReceive(_) => \"path_payment_strict_receive\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Merged Blocks from Firehose Endpoint\nDESCRIPTION: Command to download merged blocks from a Firehose endpoint for a specific block range and save them locally.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/indexer-reference/test-locally.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfireeth tools download-from-firehose mainnet.eth.streamingfast.io:443 1000 2000 \\\n   ./firehose-data/storage/merged-blocks\n```\n\n----------------------------------------\n\nTITLE: Configuring Substreams Manifest in YAML\nDESCRIPTION: Configuration file (substreams.yaml) that defines the network, imports, protobuf definitions, and module structure for the Block Statistics Substreams.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/cosmos/injective/block-stats.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnetwork: cosmos # 1.\n\nimports:\n  cosmos: https://github.com/streamingfast/substreams-cosmos/releases/download/v0.1.1/cosmos-v0.1.0.spkg # 2.\n\nprotobuf:\n  files:\n    - cosmos/v1/stats/stats.proto # 3.\n  importPaths:\n    - ./proto\n\nbinaries:\n  default:\n    type: wasm/rust-v1\n    file: target/wasm32-unknown-unknown/release/cosmos_block_stats.wasm\n\nmodules:\n  - name: block_to_stats # 4.\n    kind: map\n    initialBlock: 64987400\n    inputs:\n      - source: sf.cosmos.type.v2.Block # 5.\n    output:\n      type: proto:cosmos.v1.BlockStats # 6.\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Alias for Substreams CLI\nDESCRIPTION: Bash command to create an alias for running Substreams CLI via Docker, with API token environment variable mounted from the host system.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/installing-the-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nalias substreams='docker run --rm -it -e=\"SF_API_TOKEN=$SF_API_TOKEN\" ghcr.io/streamingfast/substreams'\n```\n\n----------------------------------------\n\nTITLE: Authenticating Substreams CLI\nDESCRIPTION: Command to authenticate the Substreams CLI by creating an account and generating an authentication token (JWT).\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/evm.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams auth\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function for Substreams in NodeJS\nDESCRIPTION: JavaScript implementation of the main function for running Substreams in NodeJS, handling connections and disconnections.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/javascript.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst TOKEN = process.env.SUBSTREAMS_API_TOKEN // Substreams token. By default it takes the SUBSTREAMS_API_TOKEN environment variable of your system\nconst ENDPOINT = \"https://mainnet.eth.streamingfast.io\" // Substreams endpoint. In this case, Ethereum mainnet\nconst SPKG = \"https://spkg.io/streamingfast/ethereum-explorer-v0.1.2.spkg\" // Substreams package. In this case, taken from the substreams.dev registry\nconst MODULE = \"map_block_meta\"\nconst START_BLOCK = '100000'\nconst STOP_BLOCK = '+10000'\n\n/*\n    Entrypoint of the application.\n    Because of the long-running connection, Substreams will disconnect from time to time.\n    The application MUST handle disconnections and commit the provided cursor to avoid missing information.\n*/\nconst main = async () => {\n    const pkg = await fetchPackage() // Download spkg\n    const registry = createRegistry(pkg);\n\n    // Create gRPC connection\n    const transport = createConnectTransport({\n        baseUrl: ENDPOINT,\n        interceptors: [createAuthInterceptor(TOKEN)],\n        useBinaryFormat: true,\n        jsonOptions: {\n            typeRegistry: registry,\n        },\n    });\n    \n    // The infinite loop handles disconnections. Every time an disconnection error is thrown, the loop will automatically reconnect\n    // and start consuming from the latest committed cursor.\n    while (true) {\n        try {\n            await stream(pkg, registry, transport);\n        } catch (e) {\n            if (!isErrorRetryable(e)) {\n              console.log(`A fatal error occurred: ${e}`)\n              throw e\n            }\n            console.log(`A retryable error occurred (${e}), retrying after backoff`)\n            console.log(e)\n            // Add backoff from a an easy to use library\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Substreams\nDESCRIPTION: Bash command to install the necessary dependencies for running Substreams in JavaScript environments.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/javascript.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Deploying Subgraph to Subgraph Studio\nDESCRIPTION: Command to deploy the Substreams-powered subgraph to Subgraph Studio for querying.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/evm.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeploy-studio\n```\n\n----------------------------------------\n\nTITLE: Configuring Injective Foundational Modules in YAML\nDESCRIPTION: YAML configuration showing the declaration of core Injective modules including all_transactions, all_events, index_events, and filtered_events modules with their respective configurations and dependencies.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/cosmos/injective/foundational.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: all_transactions\n    kind: map\n    initialBlock: 0\n    inputs:\n      - source: sf.cosmos.type.v2.Block\n    output:\n      type: proto:sf.substreams.cosmos.v1.TransactionList\n\n  - name: all_events\n    kind: map\n    initialBlock: 0\n    inputs:\n      - source: sf.cosmos.type.v2.Block\n    output:\n      type: proto:sf.substreams.cosmos.v1.EventList\n\n  - name: index_events\n    kind: blockIndex\n    inputs:\n      - map: all_events\n    output:\n      type: proto:sf.substreams.index.v1.Keys\n    doc: |\n      `index_events` sets the keys corresponding to every event 'type' \n      ex: `coin_received`, `message` or `injective.peggy.v1.EventDepositClaim`\n\n  - name: filtered_events\n    kind: map\n    blockFilter:\n      module: index_events\n      query:\n        params: true\n    inputs:\n      - params: string\n      - map: all_events\n    output:\n      type: proto:sf.substreams.cosmos.v1.EventList\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Substreams Module\nDESCRIPTION: Commands to build the Substreams module and verify the setup by streaming the database output.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/sql-sink.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build\nmake stream_db_out\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Code for Substreams\nDESCRIPTION: Command to generate the necessary files for creating a SQL sink (ClickHouse or Postgres) for Substreams data.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/evm.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams codegen sql\n```\n\n----------------------------------------\n\nTITLE: Substreams BlockScopedData Protobuf Structure\nDESCRIPTION: Definition of the BlockScopedData Protobuf message that contains the actual blockchain data, including the output from map modules, clock information, cursor for continuation, and final block height. This is one of the main components of the Substreams response.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/reliability-guarantees.md#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage BlockScopedData {\n  MapModuleOutput output = 1;\n  sf.substreams.v1.Clock clock = 2;\n  string cursor = 3;\n\n  uint64 final_block_height = 4;\n\n  repeated MapModuleOutput debug_map_outputs = 10;\n  repeated StoreModuleOutput debug_store_outputs = 11;\n}\n```\n\n----------------------------------------\n\nTITLE: Substreams Module Handler for JSON Lines Output\nDESCRIPTION: Rust code for the 'jsonl_out' module handler that extracts block data and formats it as JSON. This handler extracts block number, hash, parent hash, and timestamp from Ethereum blocks.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/files.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn jsonl_out(block: eth::Block) -> Result<Lines, substreams::errors::Error> {\n\n    let header = block.header.as_ref().unwrap();\n\n    Ok(pb::sinkfiles::Lines {\n        lines: vec![json!({\n            \"number\": block.number,\n            \"hash\": Hex(&block.hash).to_string(),\n            \"parent_hash\": Hex(&header.parent_hash).to_string(),\n            \"timestamp\": header.timestamp.as_ref().unwrap().to_string()\n        })\n        .to_string()],\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Substreams Project\nDESCRIPTION: Command to initialize a new Substreams project for the Cryptopunks smart contract using the substreams init command.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams init\n```\n\n----------------------------------------\n\nTITLE: Network-Specific Parameters in YAML\nDESCRIPTION: Configuration example for specifying parameters per network in the manifest.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/parameterized-modules.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n    mainnet:\n        params: \n            my-module: \"value\"\n```\n\n----------------------------------------\n\nTITLE: Output of Failed Division in Rust\nDESCRIPTION: Shows the console output when a division operation fails due to division by zero, displaying the custom error message.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/result.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nThis is the error: You can't divide by 0\n```\n\n----------------------------------------\n\nTITLE: Starting Substreams Service\nDESCRIPTION: Command to start the Substreams alpha service with an API token.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSUBSTREAMS_API_TOKEN=(...) substreams alpha service serve\n```\n\n----------------------------------------\n\nTITLE: Processing compiled instructions in Solana token tracking in Rust\nDESCRIPTION: This utility function determines if an instruction is from the Token Program and processes it accordingly. It handles both direct token instructions and checks for token operations within inner instructions.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/token-tracker/token-tracker.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub fn process_compiled_instruction(\n    output: &mut Output,\n    timestamp: i64,\n    trx_hash: &String,\n    meta: &TransactionStatusMeta,\n    inst_index: u32,\n    inst: &CompiledInstruction,\n    accounts: &Vec<String>,\n    parameters: &TokenParams\n) {\n    let instruction_program_account = &accounts[inst.program_id_index as usize]; // 1.\n\n    if instruction_program_account == constants::TOKEN_PROGRAM { // 2.\n        match process_token_instruction(trx_hash, timestamp, &inst.data, &inst.accounts, meta, accounts, output, parameters) {\n            Err(err) => {\n                panic!(\n                    \"trx_hash {} top level transaction without inner instructions: {}\",\n                    trx_hash, err\n                );\n            }\n            Ok(()) => {}\n        }\n\n    }\n\n    process_inner_instructions(output, inst_index, meta, accounts, trx_hash, timestamp, parameters); // 3.\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Substreams Sink Files Tool\nDESCRIPTION: Command to start and run the 'substreams-sink-files' tool for persisting blockchain data to files. It uses the 'lines' encoder and maintains state in a YAML file.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/files.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams-sink-files run --encoder=lines --state-store=./output/state.yaml mainnet.eth.streamingfast.io:443 substreams.yaml jsonl_out ./output/files\n```\n\n----------------------------------------\n\nTITLE: Parameter Documentation in YAML\nDESCRIPTION: Example of documenting parameters using the doc field in the module manifest.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/parameterized-modules.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_pools_created\n    kind: map\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n      - params: string\n    output:\n      type: proto:uniswap.types.v1.Pools\n    doc: |\n      Params contains Uniswap factory smart contract address without `0x` prefix, i.e. 1f98431c8ad98523631ae4a59f267346ea31f984 for Ethereum Mainnet\n```\n\n----------------------------------------\n\nTITLE: Configure Rust Toolchain for WASM\nDESCRIPTION: Rust toolchain configuration specifying the compiler version, components, and WASM target architecture.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/setting-up-handlers.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[toolchain]\nchannel = \"1.65\"\ncomponents = [ \"rustfmt\" ]\ntargets = [ \"wasm32-unknown-unknown\" ]\n```\n\n----------------------------------------\n\nTITLE: Vector Parameters Handler in Rust\nDESCRIPTION: Implementation showing how to handle vector parameters for tracking multiple addresses.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/parameterized-modules.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Deserialize)]\nstruct QueryParams {\n    address: Vec<String>,\n    amount: u64,\n}\n\n#[substreams::handlers::map]\npub fn map_whale_transfers(params: String, block: Block) -> Result<Transfers, Error> {\n    let query: QueryParams = serde_qs::from_str(params.as_str()).unwrap();\n    log::info!(\"Tracking transfers for addresses: {:?} of more than {} ETH\", query.address, query.amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Propagating Errors with Explicit Checks in Rust Functions\nDESCRIPTION: An example showing how to propagate errors between functions by explicitly checking error conditions and returning early, including additional computation on successful results.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/result.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nfn divide(num1: u32, num2: u32) -> Result<u32, String> {\n    if num2 == 0 {\n        return Err(String::from(\"You can't divide by 0\"));\n    }\n\n    return Ok(num1 / num2);\n}\n\nfn computations() -> Result<u32, String> {\n    let result = divide(6, 0); // Performing the division\n\n    if result.is_err() { // If the division returns an error, then you return an error.\n        return Err(result.err().unwrap());\n    }\n\n    let division_result = result.unwrap();\n    return Ok(division_result + 5);\n}\n\nfn main() {\n    let result = computations();\n    if result.is_ok() {\n        println!(\"This is the happy path: {}\", result.unwrap())\n    } else {\n        println!(\"This is the error: {}\", result.err().unwrap())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Substreams Service\nDESCRIPTION: Command to stop the current Substreams deployment in the local Docker environment.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams alpha service stop\n```\n\n----------------------------------------\n\nTITLE: DBT Profile Configuration\nDESCRIPTION: YAML configuration for DBT database connections including development and remote environments.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncryptopunks:\n  outputs:\n    dev:\n      type: postgres\n      host: localhost\n      user: dev-node\n      password: insecure-change-me-in-prod\n      port: 5432\n      dbname: substreams\n      schema: public\n```\n\n----------------------------------------\n\nTITLE: Generating Protocol Buffer Bindings\nDESCRIPTION: Command to generate Rust bindings from Protocol Buffer definitions\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run buf:generate\n```\n\n----------------------------------------\n\nTITLE: Querying Data from block_data Table\nDESCRIPTION: SQL command to select all data from the 'block_data' table in the 'substreams_example' database.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/sql-sink.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nsubstreams_example=# SELECT * FROM \"block_data\";\n```\n\n----------------------------------------\n\nTITLE: EntityChanges Protobuf Reference\nDESCRIPTION: Reference to the EntityChanges Protobuf definition used in the Substreams Graph-Out approach for emitting entity changes that can be consumed by graph-node.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/subgraph/subgraph.md#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsf/substreams/sink/entity/v1/entity.proto#L11\n```\n\n----------------------------------------\n\nTITLE: Running Substreams Application in NodeJS\nDESCRIPTION: Bash command to execute the Substreams application in a NodeJS environment.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/javascript.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Building Substreams Project for WASM Target\nDESCRIPTION: This bash command builds the Substreams project for the WebAssembly target, which is required for running the Substreams module. It uses the release profile for optimized compilation.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/writing-module-handlers.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --target wasm32-unknown-unknown --release\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple RPC Calls to Batch\nDESCRIPTION: Adds three RPC calls (Decimals, Name, Symbol) to the batch and executes them in a single request.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nfn get_calls() {\n    let batch = substreams_ethereum::rpc::RpcBatch::new();\n\n    let responses = batch\n        .add(\n            abi::contract::functions::Decimals {},\n            TRACKED_CONTRACT.to_vec(),\n        )\n        .add(\n            abi::contract::functions::Name {},\n            TRACKED_CONTRACT.to_vec(),\n        )\n        .add(\n            abi::contract::functions::Symbol {},\n            TRACKED_CONTRACT.to_vec(),\n        )\n        .execute()\n        .unwrap()\n        .responses;\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Ethereum ABI Rust Types\nDESCRIPTION: Build script that generates Rust types from Ethereum contract ABI definitions using substreams-ethereum Abigen.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/setting-up-handlers.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse anyhow::{Ok, Result};\nuse substreams_ethereum::Abigen;\n\nfn main() -> Result<(), anyhow::Error> {\n    Abigen::new(\"ERC721\", \"abi/erc721.json\")?\n        .generate()?\n        .write_to_file(\"src/abi/erc721.rs\")?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Program ID Filter in Substreams Manifest\nDESCRIPTION: YAML configuration for specifying the Program ID to filter in the Substreams manifest file.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-instructions.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  map_filter_instructions: \"program_id=Stake11111111111111111111111111111111111111\"\n```\n\n----------------------------------------\n\nTITLE: BlockMeta Protobuf Definition\nDESCRIPTION: The Protobuf definition for the BlockMeta message which contains the essential block information: number, hash, and parent hash.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_block_meta_module.md#2025-04-23_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage eth.block_meta.v1;\n\nmessage BlockMeta {\n  uint64 number = 1;\n  string hash = 2;\n  string parent_hash = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Solana Substreams Explorer\nDESCRIPTION: Command to build the Rust code for the Solana Substreams Explorer project.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-instructions.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Building Solana Substreams Explorer\nDESCRIPTION: Command to build the Rust code for the Solana Substreams Explorer project.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Implementing a Function with Option<String> Return Type in Rust\nDESCRIPTION: A complete implementation of the get_username_by_id function using pattern matching to return Some with a username string for known IDs and None for unknown IDs.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/option.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn get_username_by_id(id: u32) -> Option<String> { // 1.\n    match(id) {\n        1 => Some(String::from(\"Susan\")), // 2.\n        2 => Some(String::from(\"John\")), // 3.\n        _ => None // 4.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Substreams to Verify Contract Events\nDESCRIPTION: Execute the Substreams to verify it correctly outputs events from the USDT smart contract, targeting a specific block range.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run -e mainnet.eth.streamingfast.io:443 \\\n   substreams.yaml \\\n   map_events \\ \n   --start-block 12292922 \\\n   --stop-block +1\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Node for Substreams-Powered Subgraphs in TOML\nDESCRIPTION: TOML configuration for Graph Node to enable serving Substreams-powered subgraphs, including Substreams and Firehose providers.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/subgraph/graph-out.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[chains.mainnet]\nshard = \"main\"\nprotocol = \"ethereum\"\nprovider = [\n  { label = \"substreams-provider-mainnet\",\n    details = { type = \"substreams\",\n    url = \"https://mainnet-substreams-url.grpc.substreams.io/\",\n    token = \"exampletokenhere\" }},\n  { label = \"firehose-provider-mainnet\",\n    details = { type = \"firehose\",\n    url = \"https://mainnet-firehose-url.grpc.firehose.io/\",\n    token = \"exampletokenhere\" }},\n]\n```\n\n----------------------------------------\n\nTITLE: Building the WASM Module for Substreams\nDESCRIPTION: Command to compile the Rust application into a WASM container, which will be stored at /target/wasm32-unknown-unknown/release/substreams.wasm as specified in the Substreams manifest.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_block_meta_module.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Starting Substreams Alpha Service\nDESCRIPTION: Command to start the Substreams alpha service with an API token for local development.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nSUBSTREAMS_API_TOKEN=(...) substreams alpha service serve\n```\n\n----------------------------------------\n\nTITLE: Generating Protobuf Modules and Building Rust Code\nDESCRIPTION: These commands generate the Protobuf modules and build the Rust code for the Substreams project.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_filter_transactions_module.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake protogen\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Cloning the Substreams Explorers Repository\nDESCRIPTION: Command for cloning the GitHub repository containing all available Substreams Explorers, which includes the Solana explorer with various modules for data aggregation.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/explore-solana.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/streamingfast/substreams-explorers\n```\n\n----------------------------------------\n\nTITLE: Testing Substreams Output with CLI\nDESCRIPTION: Command to run the Substreams directly using the substreams CLI to verify the output of the kv_out module.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run -e mainnet.eth.streamingfast.io:443 substreams.yaml kv_out --start-block 1000000 --stop-block +1\n```\n\n----------------------------------------\n\nTITLE: Launching Substreams GUI for Data Visualization\nDESCRIPTION: Command to start the Substreams GUI interface, which allows users to visualize and iterate on their filtered data models.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/mantra.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui\n```\n\n----------------------------------------\n\nTITLE: Implementing KV Output Handler in Rust\nDESCRIPTION: Rust implementation of the kv_out function that processes store deltas and converts them to KvOperations for the sink.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// src/lib.rs\n\n#[path = \"kv_out.rs\"]\nmod kv;\nuse substreams_sink_kv::pb::kv::KvOperations;\n\n#[substreams::handlers::map]\npub fn kv_out(\n    deltas: store::Deltas<DeltaProto<BlockMeta>>,\n) -> Result<KvOperations, Error> {\n\n    // Create an empty 'KvOperations' structure\n    let mut kv_ops: KvOperations = Default::default();\n\n    // Call a function that will push key-value operations from the deltas\n    kv::process_deltas(&mut kv_ops, deltas);\n\n    // Here, we could add more operations to the kv_ops\n    // ...\n\n    Ok(kv_ops)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Solana Token Tracker with Default Parameters\nDESCRIPTION: Bash command to run the Substreams GUI with the default USDC token tracking configuration. It connects to the Solana mainnet endpoint and processes one block starting from block 158558168.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/token-tracker/token-tracker.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui ./substreams.yaml map_solana_token_events -e mainnet.sol.streamingfast.io:443  --start-block 158558168 --stop-block +1\n```\n\n----------------------------------------\n\nTITLE: Testing Local Production Deployment\nDESCRIPTION: Command to deploy and test Substreams in production mode locally using either SQL or Clickhouse configuration.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams alpha service deploy substreams.sql.yaml --prod\n```\n\n----------------------------------------\n\nTITLE: CLI Parameter Usage Example\nDESCRIPTION: Example of how to pass parameters using the Substreams CLI with the -p flag.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/parameterized-modules.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui -e $SUBSTREAMS_ENDPOINT map_pools_created -t +1000 -p map_pools_created=\"1f98431c8ad98523631ae4a59f267346ea31f984\"\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Fields in Rust with Pattern Matching\nDESCRIPTION: This Rust code demonstrates how to handle an optional field (location) using pattern matching. It shows two approaches: using a full match statement to handle both Some and None cases, and using if let for concise handling of the Some case.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/creating-protobuf-schemas.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nmatch person.Location {\n    Some(location) => { /* Value is present, do something */ }\n    None => { /* Value is absent, do something */ }\n}\n\nif let Some(location) = person.location {\n    // Value is present, do something\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding BlockMeta Data in React Component\nDESCRIPTION: Example code showing how to decode BlockMeta data from binary format in a React component\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n    import { BlockMeta } from \"../gen/block_meta_pb\";\n\n    ...\n\n    const blkmeta = BlockMeta.fromBinary(response.value);\n    output = JSON.stringify(blkmeta, (key, value) => {\n        if (key === \"hash\") {\n            return \"0x\" + bufferToHex(blkmeta.hash);\n        }\n        if (key === \"parentHash\") {\n            return \"0x\" + bufferToHex(blkmeta.parentHash);\n        }\n        return value;\n    }, 2);\n```\n\n----------------------------------------\n\nTITLE: Running Substreams with Initial Store Snapshot\nDESCRIPTION: Command showing how to execute Substreams with an initial snapshot of a store module. This runs map_transfers from block 1000 to 1004 and displays the store_pools snapshot at block 999.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/old-references/running-substreams.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run substreams.yaml map_transfers -s 1000 -t +5 --debug-modules-initial-snapshot=store_pools\n```\n\n----------------------------------------\n\nTITLE: Decoding Custom Data Type in React Component\nDESCRIPTION: Example code showing how to decode a custom data type from binary format in a React component\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n    import { MyData } from \"../gen/my_data_pb\";\n\n    ...\n\n    const decoded = MyData.fromBinary(response.value);\n    output = JSON.stringify(decoded, null, 2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Substreams Map Handler for Contract Deployments in Rust\nDESCRIPTION: Rust implementation of a Substreams map handler that processes Ethereum blocks to detect and collect contract deployments.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/subgraph/graph-out.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn map_contract(block: eth::v2::Block) -> Result<Contracts, substreams::errors::Error> {\n    let contracts = block\n        .transactions()\n        .flat_map(|tx| {\n            tx.calls\n                .iter()\n                .filter(|call| !call.state_reverted)\n                .filter(|call| call.call_type == eth::v2::CallType::Create as i32)\n                .map(|call| Contract {\n                    address: format!(\"0x{}\", Hex(&call.address)),\n                    block_number: block.number,\n                    timestamp: block.timestamp_seconds().to_string(),\n                    ordinal: tx.begin_ordinal,\n                })\n        })\n        .collect();\n    Ok(Contracts { contracts })\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of a Successful Substreams Run\nDESCRIPTION: Example of the output generated when running a Substreams, showing the connection process and the data returned by the map_transfers module including ERC721 transfers.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/old-references/running-substreams.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n2022-05-30T10:52:27.256-0400 INFO (substreams) connecting...\n2022-05-30T10:52:27.389-0400 INFO (substreams) connected\n\n----------- IRREVERSIBLE BLOCK #12,292,922 (12292922) ---------------\nmap_transfers: log: NFT Contract bc4ca0eda7647a8ab7c2061c2e118a18a936f13d invoked\n[...]\nmap_transfers: message \"eth.erc721.v1.Transfers\": {\n  \"transfers\": [\n    {\n      \"from\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n      \"to\": \"q6cWGn+2nIjhbtn0Vc5it5HuTQM=\",\n      \"trxHash\": \"z7GX9i7Fx/DnGhHsDEoOOUo6pB21OG6FUm+GyEs/J5Y=\",\n      \"ordinal\": \"85\"\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Solana Substreams from Registry\nDESCRIPTION: Command to run the Solana Explorer package from the Substreams Registry, achieving the same result as running from source.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-instructions.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui https://spkg.io/streamingfast/solana-explorer-v0.2.0.spkg \\\n    map_filter_instructions -e mainnet.sol.streamingfast.io:443 \\\n    --start-block 243830383 --stop-block +1\n```\n\n----------------------------------------\n\nTITLE: Configuring dbt Settings in Substreams YAML\nDESCRIPTION: YAML configuration block that enables dbt integration, specifies the dbt files location, and sets the run interval for the Substreams project.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n    dbt_config:\n      enabled: true\n      files: \"./dbt\"\n      run_interval_seconds: 180\n```\n\n----------------------------------------\n\nTITLE: Generating Code from Substreams\nDESCRIPTION: Creates code for specific sinks using Substreams modules as input\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/command-line-interface.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams codegen subgraph\n```\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams codegen sql\n```\n\n----------------------------------------\n\nTITLE: Validating Substreams CLI Installation\nDESCRIPTION: Command to verify that the Substreams CLI is correctly installed by checking its version.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/installing-the-cli.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams --version\n```\n\n----------------------------------------\n\nTITLE: Building TinyGo WASM Module\nDESCRIPTION: Command to compile TinyGo code into WebAssembly (WASM) format with WASI target and disabled scheduler.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/wasm/bench/tinygo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntinygo build -o wasm.wasm -target wasi -scheduler none .\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram: Transfer Map Module Flow\nDESCRIPTION: Diagram showing how the transfer_map module extracts transfers from a Block and tracks total transfer count.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/README(old).md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\npako:eNp1kM0KwjAQhF8l7NkWvEbwIPUJ9NYUWZKtLTZJ2WwEEd_dCAr-4GFhd_h2GOYKNjoCDUfGeVD7ZmWCUqmvSQZiyr6Wy0z1eVlvpmhPbYqZLen_RKeqaq2EMaSe-OBxfhi-320Z_aF8_diYgxC3SSKT_tE7WIAn9ji6kvv6sDdQsngyoMvqqMc8iQETbgXNs0OhrRuLG-gep0QLwCxxdwkWtHCmF9SMWGrwT-p2B02rZZY\n```\n\n----------------------------------------\n\nTITLE: Checking Substreams CLI Version\nDESCRIPTION: Command to verify that the Substreams CLI is correctly installed by checking its version. The CLI version should be 1.7.2 or above.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/codegen/templates/sql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams --version\n```\n\n----------------------------------------\n\nTITLE: Running Substreams GUI for Filtered Solana Accounts\nDESCRIPTION: Command to stream filtered Honey Token account data using the Solana Accounts Foundational Module through Substreams GUI interface. Filters for specific owner and account addresses.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/solana/account-changes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui  solana-accounts-foundational filtered_accounts -t +10 -p filtered_accounts=\"owner:TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA || account:4vMsoUT2BWatFweudnQM1xedRLfJgJ7hswhcpz4xgBTy\"\n```\n\n----------------------------------------\n\nTITLE: Example of Starting Graph Node for Injective Mainnet\nDESCRIPTION: Example command that demonstrates starting a Graph Node for the Injective mainnet network using a specific Substreams endpoint. This requires the SUBSTREAMS_API_TOKEN environment variable to be set.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/graph-node/local-development.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./start.sh injective-mainnet https://mainnet.injective.streamingfast.io:443\n```\n\n----------------------------------------\n\nTITLE: Installing PubSub CLI for Substreams\nDESCRIPTION: Command to install the PubSub CLI tool, which is used for deploying Substreams to the PubSub Service. This tool is essential for the integration process.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/pubsub.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install ./cmd/substreams-sink-pubsub\n```\n\n----------------------------------------\n\nTITLE: Generating Subgraph Code\nDESCRIPTION: Command to generate necessary files for Subgraph integration.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/starknet.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams codegen subgraph\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Structure for Block Metadata\nDESCRIPTION: Protocol Buffer definition for the BlockMeta message that contains block number, hash, parent hash, and timestamp information.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage BlockMeta {\n  uint64 number = 1;\n  bytes hash = 2;\n  bytes parent_hash = 3;\n  google.protobuf.Timestamp timestamp = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Subgraph Integration Configuration in YAML\nDESCRIPTION: YAML configuration showing how to integrate a Substreams module into a subgraph manifest.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/cosmos/injective/foundational.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: 1.0.0\nindexerHints:\n  prune: auto\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: substreams\n    name: Events\n    network: injective-mainnet\n    source:\n      package:\n        file: injective-foundational-v0.1.0.spkg\n        moduleName: all_events\n    mapping:\n      apiVersion: 0.0.7\n      kind: substreams/graph-entities\n      file: ./src/mapping.ts\n      handler: handleEvents\n```\n\n----------------------------------------\n\nTITLE: Authenticating with The Graph Market to Access Substreams\nDESCRIPTION: Command to authenticate using a JWT token obtained from The Graph Market, which is required for accessing Substreams services.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/mantra.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams auth\n```\n\n----------------------------------------\n\nTITLE: Substreams YAML Configuration for Sink Files\nDESCRIPTION: YAML configuration for the Substreams manifest that defines the imports, binaries, and modules needed for the sink files functionality. It specifies the 'jsonl_out' module that outputs data in the required format.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/files.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  sink_files: https://github.com/streamingfast/substreams-sink-files/releases/download/v2.1.0/substreams-sink-files-v2.1.0.spkg\n\nbinaries:\n  default:\n    type: wasm/rust-v1\n    file: target/wasm32-unknown-unknown/release/substreams.wasm\n\nmodules:\n  - name: jsonl_out\n    kind: map\n    inputs:\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:sf.substreams.sink.files.v1.Lines\n```\n\n----------------------------------------\n\nTITLE: Scanning KV Store Data with GRPC\nDESCRIPTION: Command using grpcurl to scan and retrieve all data stored in the key-value store.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl --plaintext -d '{\"begin\": \"\", \"limit\":100}' localhost:8000 sf.substreams.sink.kv.v1.Kv/Scan\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Connect Web Example\nDESCRIPTION: Commands to clone the substreams-sink-kv repository, install dependencies, and start the development server\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:streamingfast/substreams-sink-kv\ncd substreams-sink-kv/connect-web-example\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploying Substreams to PubSub Service\nDESCRIPTION: Command to deploy a Substreams to the PubSub Service using the PubSub CLI. It requires specifying the endpoint, project ID, Substreams manifest, module name, and topic name. This command sets up the integration between Substreams and Google PubSub.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/pubsub.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams-sink-pubsub sink -e <endpoint> --project <project_id> <substreams_manifest> <substreams_module_name> <topic_name>\n```\n\n----------------------------------------\n\nTITLE: Exporting Generated Protobuf Rust Code in mod.rs\nDESCRIPTION: This Rust code snippet is typically found in the src/pb/mod.rs file. It exports the generated Rust code for the ERC721 protobuf, making it available for use in other parts of the Substreams module.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/creating-protobuf-schemas.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[path = \"eth.erc721.v1.rs\"]\n#[allow(dead_code)]\npub mod erc721;\n```\n\n----------------------------------------\n\nTITLE: Export Generated ABI Module\nDESCRIPTION: Module definition file to export the generated Ethereum ABI Rust code.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/setting-up-handlers.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npub mod erc721;\n```\n\n----------------------------------------\n\nTITLE: Processing Solana Block for Trade Data in Rust\nDESCRIPTION: This function processes a Solana block, iterating through transactions and instructions to extract trade data from supported DEXs. It handles both top-level and inner instructions, creating TradeData objects for each identified trade.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/dex-trades.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn process_block(block: Block) -> Result<Output, substreams::errors::Error> {\n    let slot = block.slot;\n    let parent_slot = block.parent_slot;\n    let timestamp = block.block_time.as_ref();\n    let mut data: Vec<TradeData> = vec![];\n    if timestamp.is_some() {\n        let timestamp = timestamp.unwrap().timestamp;\n        for trx in block.transactions_owned() {\n            let accounts = trx.resolved_accounts_as_strings();\n            if let Some(transaction) = trx.transaction {\n                let meta = trx.meta.unwrap();\n                let pre_balances = meta.pre_balances;\n                let post_balances = meta.post_balances;\n                let pre_token_balances = meta.pre_token_balances;\n                let post_token_balances = meta.post_token_balances;\n\n                let msg = transaction.message.unwrap();\n\n                for (idx, inst) in msg.instructions.into_iter().enumerate() {\n                    let inner_instructions: Vec<InnerInstructions> =\n                        filter_inner_instructions(&meta.inner_instructions, idx as u32);\n\n                    let program = &accounts[inst.program_id_index as usize];\n                    let trade_data = get_trade_instruction(\n                        program,\n                        inst.data,\n                        &inst.accounts,\n                        &accounts,\n                        &pre_token_balances,\n                        &post_token_balances,\n                        &\"\".to_string(),\n                        false,\n                        &inner_instructions,\n                    );\n\n                    // ...code omitted...\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Store Module for Pool Creation Events in YAML\nDESCRIPTION: This YAML snippet defines a store module that takes the output from the map_pools_created module and stores the pool information in a key-value store. It uses a 'set' update policy and specifies the value type as a custom Pool protocol buffer.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/dynamic-data-sources.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: store_pools_created\n    kind: store\n    updatePolicy: set\n    valueType: proto:uniswap.types.v1.Pool\n    inputs:\n      - map: map_pools_created\n```\n\n----------------------------------------\n\nTITLE: Running substreams-sink-kv with Badger Storage\nDESCRIPTION: Command to run the substreams-sink-kv tool with a local Badger database to store the output from the Substreams.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams-sink-kv \\\n  run \\\n  \"badger3://$(pwd)/badger_data.db\" \\\n  mainnet.eth.streamingfast.io:443 \\\n  manifest.yaml \\\n  kv_out\n```\n\n----------------------------------------\n\nTITLE: Adding WebAssembly Target for Rust\nDESCRIPTION: Command to add the WebAssembly target to Rust, which is required for compiling Substreams modules to WASM format.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/installing-the-cli.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add wasm32-unknown-unknown\n```\n\n----------------------------------------\n\nTITLE: Installing and Deploying Substreams-powered Subgraph Locally in Bash\nDESCRIPTION: This bash script sequence outlines the process for installing dependencies, generating necessary files, and deploying a Substreams-powered Subgraph to a local graph-node. It also includes a command for removing the local deployment when needed.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/codegen/templates/subgraph/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run generate\nnpm run deploy-local\n\n# rince and repeat\nnpm run remove-local\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Substreams in NodeJS\nDESCRIPTION: JSON configuration for package.json file in a NodeJS environment, listing necessary dependencies for running Substreams.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/javascript.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"substreams-js-node-example\",\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n    \"main\": \"index.js\",\n    \"dependencies\": {\n      \"@substreams/core\": \"^0.1.19\",\n      \"@substreams/manifest\": \"^0.0.9\",\n      \"@connectrpc/connect-node\": \"1.3.0\",\n      \"@connectrpc/connect\": \"1.3.0\"\n    },\n    \"type\": \"module\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Authentication Command for Substreams\nDESCRIPTION: Command to authenticate and generate a JWT token for Substreams access.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/cosmos-compatible/mantra.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsubstreams auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Signature Hash in Substreams Manifest\nDESCRIPTION: YAML configuration in the Substreams Manifest (substreams.yaml) to set the signature hash for transaction filtering.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  map_filter_transactions: \"signature=21ED2HBGuLUwgbaBb77cGwFR8MkVQfjR9KszzCb7jZkeSysJkHAVew6RaaBh3r1zTefpdq9Kf5geFp19P3nUXB3t\"\n```\n\n----------------------------------------\n\nTITLE: Running Ethereum Substreams from CLI\nDESCRIPTION: Command to execute the Substreams against Ethereum mainnet, applying the map_block_meta module transformations. It specifies the start block and processes just one block.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_block_meta_module.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ substreams run -e mainnet.eth.streamingfast.io:443 substreams.yaml map_block_meta --start-block 17712040 --stop-block +1\n```\n\n----------------------------------------\n\nTITLE: Compiling Substreams to WebAssembly\nDESCRIPTION: Command to build the Rust code and compile it to WebAssembly for use in Substreams.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --target=wasm32-unknown-unknown\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database\nDESCRIPTION: Command to connect to the 'substreams_example' database in PostgreSQL after launching the psql command.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/sql-sink.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n<default_database_name>=# \\c substreams_example\n```\n\n----------------------------------------\n\nTITLE: Running Substreams in Development Mode with Module Outputs\nDESCRIPTION: Command demonstrating how to run Substreams in development mode with debug options to view outputs from multiple modules. This runs map_transfers and displays outputs from specified modules.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/old-references/running-substreams.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run substreams.yaml map_transfers --debug-modules-output=map_pools,map_transfers,store_pools\n```\n\n----------------------------------------\n\nTITLE: Executing Substreams via CLI\nDESCRIPTION: Command line instructions for running the DEX trades Substreams against the Solana StreamingFast endpoint. Specifies the execution parameters including the starting block and endpoint.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/dex-trades.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui -e mainnet.sol.streamingfast.io:443 \\\n    substreams.yaml map_block -s 138616676 -t +1\n```\n\n----------------------------------------\n\nTITLE: Defining Trade Data Structure in Protobuf\nDESCRIPTION: Protobuf schema definition for trade data output including block information, transaction details, and trading parameters. Defines the structure for capturing DEX trade information from Solana transactions.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/dex-trades.md#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Output {\n  repeated TradeData data = 1;\n}\n\nmessage TradeData {\n  required string block_date = 1;\n  required int64 block_time = 2;\n  required uint64 block_slot = 3;\n  required string tx_id = 4;\n  required string signer = 5;\n  required string pool_address = 6;\n  required string base_mint = 7;\n  required string quote_mint = 8;\n  required string base_vault = 9;\n  required string quote_vault = 10;\n  required double base_amount = 11;\n  required double quote_amount = 12;\n  required bool is_inner_instruction = 13;\n  required uint32 instruction_index = 14;\n  required string instruction_type = 15;\n  required uint32 inner_instruction_index = 16;\n  required string outer_program = 17;\n  required string inner_program = 18;\n  required uint64 txn_fee = 19;\n  required int64 signer_sol_change = 20;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying KV Store Data by Prefix with GRPC\nDESCRIPTION: Command using grpcurl to query data in the key-value store by a specific key prefix.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl --plaintext   -d '{\"prefix\": \"day:first:201511\", \"limit\":31}' localhost:8000 sf.substreams.sink.kv.v1.Kv/GetByPrefix\n```\n\n----------------------------------------\n\nTITLE: Adding substreams-sink-kv Dependency in Cargo.toml\nDESCRIPTION: Cargo configuration to add the substreams-sink-kv crate as a dependency for the Rust project.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n\n[dependencies]\nsubstreams-sink-kv = \"0.1.1\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Solana Blocks Using JavaScript\nDESCRIPTION: Node.js command to retrieve Solana blocks without voting transactions using the solana_common package. This example demonstrates how to consume Substreams data programmatically in JavaScript.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/yelllowstone-migration/migrate.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js https://mainnet.sol.streamingfast.io:443 https://spkg.io/streamingfast/solana_common-v0.3.3.spkg blocks_without_votes 320876956\n```\n\n----------------------------------------\n\nTITLE: Subgraph Code Generation Command\nDESCRIPTION: Command to generate necessary files and function definitions for Subgraph implementation.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/cosmos-compatible/mantra.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsubstreams codegen subgraph\n```\n\n----------------------------------------\n\nTITLE: Initialize Rust Project for WASM\nDESCRIPTION: Creates an empty Rust project configured for WASM compilation using cargo.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/setting-up-handlers.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo init --lib\n```\n\n----------------------------------------\n\nTITLE: Defining StoreDeltas Protobuf Model\nDESCRIPTION: Defines the protobuf model for StoreDeltas and StoreDelta, used in delta mode for store inputs.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/inputs.md#2025-04-23_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage StoreDeltas {\n  repeated StoreDelta deltas = 1;\n}\n\nmessage StoreDelta {\n  enum Operation {\n    UNSET = 0;\n    CREATE = 1;\n    UPDATE = 2;\n    DELETE = 3;\n  }\n  Operation operation = 1;\n  uint64 ordinal = 2;\n  string key = 3;\n  bytes old_value = 4;\n  bytes new_value = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Transactions by Program ID using CLI\nDESCRIPTION: CLI command to filter Solana transactions by a specific program ID (Pump.Fun in this example) using the solana_common package. This demonstrates how to use parameter passing to filter blockchain data.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/yelllowstone-migration/migrate.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui https://spkg.io/streamingfast/solana_common-v0.3.3.spkg transactions_by_programid_without_votes -p \"transactions_by_programid_without_votes=program:6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P\" --start-block=320100000\n```\n\n----------------------------------------\n\nTITLE: Running Substreams for Transaction Filtering\nDESCRIPTION: This command runs the Substreams to filter transactions from blocks 17712038 to 17712040, where the 'to' address matches the USDT smart contract.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_filter_transactions_module.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run -e mainnet.eth.streamingfast.io:443 substreams.yaml map_filter_transactions --start-block 17712038 --stop-block +3\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Substreams Module\nDESCRIPTION: Commands to build the Rust code and run the Substreams module against the Injective blockchain, with options for traditional and GUI-based output.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/cosmos/injective/block-stats.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run substreams.yaml block_to_stats \\\n -e mainnet.injective.streamingfast.io:443 \\\n --start-block=64987400 --stop-block=+1000\n```\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui substreams.yaml block_to_stats \\\n -e mainnet.injective.streamingfast.io:443 \\\n --start-block=64987400 --stop-block=+1000\n```\n\n----------------------------------------\n\nTITLE: Rust Handler for Multiple Parameters\nDESCRIPTION: Implementation of parameter parsing using serde_qs for multiple parameters.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/parameterized-modules.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Deserialize)]\nstruct Params {\n    address: String,\n    amount: u64,\n}\n\n#[substreams::handlers::map]\npub fn map_whale_transfers(params: String, block: Block) -> Result<Transfers, Error> {\n    let query: Params = serde_qs::from_str(params.as_str()).unwrap();\n    log::info!(\"Tracking transfers for address: {} of more than {} ETH\", query.address, query.amount);\n\n    // filter transfers by address and amount\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Info Messages in Substreams\nDESCRIPTION: Using the info macro to log informational messages during Substreams execution. This provides info-level logging visible during Substreams runs.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/log-and-debug.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn map_program_data(blk: Block) -> Data {\n    substreams::log::info!(\"My log\")\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Substreams\nDESCRIPTION: Command to authenticate and generate a JWT token for Substreams access.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/starknet.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams auth\n```\n\n----------------------------------------\n\nTITLE: Building the Substreams Project\nDESCRIPTION: Build the Substreams project using the make build command which compiles the Rust code and packages the Substreams.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Output in Substreams YAML\nDESCRIPTION: Shows how to define the output type for a Substreams map module using a protobuf definition.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n    type: proto:eth.erc721.v1.Transfers\n```\n\n----------------------------------------\n\nTITLE: Defining Substreams Handler Interfaces in Go\nDESCRIPTION: Interface definitions for handling block-scoped data and undo signals in Go, used for implementing cursor management and reconnection policies.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/solana/account-changes.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tpbsubstreamsrpc \"github.com/streamingfast/substreams/pb/sf/substreams/rpc/v2\"\n)\n\ntype BlockScopedDataHandler = func(ctx context.Context, cursor *Cursor, data *pbsubstreamsrpc.BlockScopedData) error\ntype BlockUndoSignalHandler = func(ctx context.Context, cursor *Cursor, undoSignal *pbsubstreamsrpc.BlockUndoSignal) error\n```\n\n----------------------------------------\n\nTITLE: Calculating Hour Window IDs\nDESCRIPTION: Code snippet that calculates current and previous hour IDs based on timestamp for aggregation window management.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/aggregation-windows.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet hour_id = timestamp_seconds / 3600;\nlet prev_hour_id = hour_id - 1;\n```\n\n----------------------------------------\n\nTITLE: Initializing Substreams Sink Main Function\nDESCRIPTION: Main function setup for the sink program using cobra library for CLI implementation. Includes logger initialization and command registration.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/go.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar expectedOutputModuleType = string(new(pbchanges.DatabaseChanges).ProtoReflect().Descriptor().FullName()) // 1.\n\n// ...code omitted...\n\nfunc main() {\n\tlogging.InstantiateLoggers()\n\n\tRun(\n\t\t\"sinker\",\n\t\t\"Simple Go sinker sinking data to your terminal\",\n\n\t\tCommand(sinkRunE,\n\t\t\t\"sink <endpoint> <manifest> [<output_module>]\",\n\t\t\t\"Run the sinker code\",\n\t\t\tRangeArgs(2, 3),\n\t\t\tFlags(func(flags *pflag.FlagSet) {\n\t\t\t\tsink.AddFlagsToSet(flags)\n\t\t\t}),\n\t\t),\n\n\t\tOnCommandErrorLogAndExit(zlog),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Substreams GUI\nDESCRIPTION: Command to launch the Substreams GUI for data visualization.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/starknet.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui\n```\n\n----------------------------------------\n\nTITLE: Matching DEX Programs and Parsing Trade Instructions in Rust\nDESCRIPTION: This function matches the program address to specific DEXs and calls the appropriate parsing function for each supported exchange. It handles various DEXs including Crema Finance, Dooar Exchange, and Meteora.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/dex-trades.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfn get_trade_instruction(\n    dapp_address: &String,\n    instruction_data: Vec<u8>,\n    account_indices: &Vec<u8>,\n    accounts: &Vec<String>,\n    pre_token_balances: &Vec<TokenBalance>,\n    post_token_balances: &Vec<TokenBalance>,\n    outer_program: &String,\n    is_inner: bool,\n    inner_instructions: &Vec<InnerInstructions>,\n) -> Option<trade_instruction::TradeInstruction> {\n    let input_accounts = prepare_input_accounts(account_indices, accounts);\n\n    let mut result = None;\n    match dapp_address.as_str() {\n        \"CLMM9tUoggJu2wagPkkqs9eFG4BWhVBZWkP1qv3Sp7tR\" => {\n            result =\n                dapps::dapp_CLMM9tUoggJu2wagPkkqs9eFG4BWhVBZWkP1qv3Sp7tR::parse_trade_instruction(\n                    instruction_data,\n                    input_accounts,\n                );\n        }\n        \"Dooar9JkhdZ7J3LHN3A7YCuoGRUggXhQaG4kijfLGU2j\" => {\n            result =\n                dapps::dapp_Dooar9JkhdZ7J3LHN3A7YCuoGRUggXhQaG4kijfLGU2j::parse_trade_instruction(\n                    instruction_data,\n                    input_accounts,\n                );\n        }\n        \"Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB\" => {\n            result =\n                dapps::dapp_Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB::parse_trade_instruction(\n                    instruction_data,\n                    input_accounts,\n                );\n        }\n        \"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\" => {\n            result =\n                dapps::dapp_PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY::parse_trade_instruction(\n                    instruction_data,\n                    input_accounts,\n                );\n        }\n        \"SSwapUtytfBdBn1b9NUGG6foMVPtcWgpRU32HToDUZr\" => {\n            result =\n                dapps::dapp_SSwapUtytfBdBn1b9NUGG6foMVPtcWgpRU32HToDUZr::parse_trade_instruction(\n                    instruction_data,\n                    input_accounts,\n                );\n        }\n\n        // ...code omitted...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Changes History using CLI\nDESCRIPTION: CLI command to retrieve the history of changes for a specific Solana account using the solana_accounts_foundational package. This demonstrates how to track historical changes to account state.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/yelllowstone-migration/migrate.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui https://spkg.io/streamingfast/solana_accounts_foundational-v0.1.1.spkg filtered_accounts -p \"filtered_accounts=account:5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1\" --start-block=327404502\n```\n\n----------------------------------------\n\nTITLE: Initializing MANTRA Substreams Project Command\nDESCRIPTION: Command to initialize a new MANTRA Substreams project with options for minimal or events-based implementation.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/cosmos-compatible/mantra.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsubstreams init\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Solana Account Changes Stream\nDESCRIPTION: Command to run and benchmark the account change stream with clock output format.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/solana/account-changes.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run solana-accounts-foundational filtered_accounts -s -1 -o clock\n```\n\n----------------------------------------\n\nTITLE: Running Substreams SQL Sink\nDESCRIPTION: Command to sink the Substreams data into the selected SQL database (ClickHouse or Postgres).\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/evm.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams-sink-sql\n```\n\n----------------------------------------\n\nTITLE: Output Log of substreams-sink-sql Tool\nDESCRIPTION: Example log output when successfully running the substreams-sink-sql tool, showing the initialization and data processing steps.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/sql-sink.md#2025-04-23_snippet_7\n\nLANGUAGE: log\nCODE:\n```\n2023-01-18T12:32:19.107-0800 INFO (sink-sql) starting prometheus metrics server {\"listen_addr\": \"localhost:9102\"}\n2023-01-18T12:32:19.107-0800 INFO (sink-sql) sink from psql {\"dsn\": \"psql://dev-node:insecure-change-me-in-prod@127.0.0.1:5432/substreams_example?sslmode=disable\", \"endpoint\": \"mainnet.eth.streamingfast.io:443\", \"manifest_path\": \"substreams.yaml\", \"output_module_name\": \"db_out\", \"block_range\": \"\"}\n2023-01-18T12:32:19.107-0800 INFO (sink-sql) starting pprof server {\"listen_addr\": \"localhost:6060\"}\n2023-01-18T12:32:19.127-0800 INFO (sink-sql) reading substreams manifest {\"manifest_path\": \"sink/substreams.dev.yaml\"}\n2023-01-18T12:32:20.283-0800 INFO (pipeline) computed start block {\"module_name\": \"store_block_meta_start\", \"start_block\": 0}\n2023-01-18T12:32:20.283-0800 INFO (pipeline) computed start block {\"module_name\": \"db_out\", \"start_block\": 0}\n2023-01-18T12:32:20.283-0800 INFO (sink-sql) validating output store {\"output_store\": \"db_out\"}\n2023-01-18T12:32:20.285-0800 INFO (sink-sql) resolved block range {\"start_block\": 0, \"stop_block\": 0}\n2023-01-18T12:32:20.287-0800 INFO (sink-sql) ready, waiting for signal to quit\n2023-01-18T12:32:20.287-0800 INFO (sink-sql) starting stats service {\"runs_each\": \"2s\"}\n2023-01-18T12:32:20.288-0800 INFO (sink-sql) no block data buffer provided. since undo steps are possible, using default buffer size {\"size\": 12}\n2023-01-18T12:32:20.288-0800 INFO (sink-sql) starting stats service {\"runs_each\": \"2s\"}\n2023-01-18T12:32:20.730-0800 INFO (sink-sql) session init {\"trace_id\": \"4605d4adbab0831c7505265a0366744c\"}\n2023-01-18T12:32:21.041-0800 INFO (sink-sql) flushing table rows {\"table_name\": \"block_data\", \"row_count\": 2}\n2023-01-18T12:32:21.206-0800 INFO (sink-sql) flushing table rows {\"table_name\": \"block_data\", \"row_count\": 2}\n2023-01-18T12:32:21.319-0800 INFO (sink-sql) flushing table rows {\"table_name\": \"block_data\", \"row_count\": 0}\n2023-01-18T12:32:21.418-0800 INFO (sink-sql) flushing table rows {\"table_name\": \"block_data\", \"row_count\": 0}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Substreams CLI\nDESCRIPTION: This command authenticates the user and generates a JWT token for Substreams CLI usage.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/solana/solana.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams auth\n```\n\n----------------------------------------\n\nTITLE: Running substreams-sink-sql Tool\nDESCRIPTION: Command to run the substreams-sink-sql tool, connecting to a PostgreSQL database and using a Substreams config file.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/sql-sink.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams-sink-sql run \"psql://dev-node:insecure-change-me-in-prod@127.0.0.1:5432/substreams_example?sslmode=disable\" ./sink/substreams.dev.yaml\n```\n\n----------------------------------------\n\nTITLE: Output Files Directory Structure\nDESCRIPTION: Example directory listing showing the output files generated by the substreams-sink-files tool, with files named according to block ranges in 10K block increments.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/files.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n...\n0000000000-0000010000.jsonl\t0000090000-0000100000.jsonl\t0000180000-0000190000.jsonl\n0000010000-0000020000.jsonl\t0000100000-0000110000.jsonl\t0000190000-0000200000.jsonl\n0000020000-0000030000.jsonl\t0000110000-0000120000.jsonl\t0000200000-0000210000.jsonl\n0000030000-0000040000.jsonl\t0000120000-0000130000.jsonl\t0000210000-0000220000.jsonl\n0000040000-0000050000.jsonl\t0000130000-0000140000.jsonl\t0000220000-0000230000.jsonl\n0000050000-0000060000.jsonl\t0000140000-0000150000.jsonl\t0000230000-0000240000.jsonl\n0000060000-0000070000.jsonl\t0000150000-0000160000.jsonl\t0000240000-0000250000.jsonl\n0000070000-0000080000.jsonl\t0000160000-0000170000.jsonl\t0000250000-0000260000.jsonl\n0000080000-0000090000.jsonl\t0000170000-0000180000.jsonl\n...\n```\n\n----------------------------------------\n\nTITLE: Processing inner instructions in Solana transactions in Rust\nDESCRIPTION: This function examines inner instructions within Solana transactions to identify token program calls. It filters for inner instructions belonging to a specific top-level instruction and processes only those from the Token Program.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/token-tracker/token-tracker.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npub fn process_inner_instructions(\n    output: &mut Output,\n    instruction_index: u32,\n    meta: &TransactionStatusMeta,\n    accounts: &Vec<String>,\n    trx_hash: &String,\n    timestamp: i64,\n    parameters: &TokenParams,\n) {\n    meta.inner_instructions // 1.\n        .iter()\n        .filter(|inst| inst.index == instruction_index) // 2.\n        .for_each(|inst| { // 3.\n            inst.instructions\n                .iter() // 4.\n                .filter(|&inner_instruction| { // 5.\n                    let instruction_program_account = &accounts[inner_instruction.program_id_index as usize];\n                    instruction_program_account == constants::TOKEN_PROGRAM\n                })\n                .for_each(|inner_instruction| {\n                    match process_token_instruction( // 6.\n                        trx_hash,\n                        timestamp,\n                        &inner_instruction.data,\n                        &inner_instruction.accounts,\n                        meta,\n                        accounts,\n                        output,\n                        parameters\n                    ) {\n                        Err(err) => {\n                            panic!(\"trx_hash {} filtering inner instructions: {}\", trx_hash, err)\n                        }\n                        Ok(()) => {}\n                    }\n                })\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph Data Sources in YAML\nDESCRIPTION: YAML configuration file (subgraph.yaml) that defines the data sources, network, and mapping specifications for the subgraph.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/cosmos/injective/usdt-exchanges.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: 1.0.0\nindexerHints:\n  prune: auto\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: substreams\n    name: Events\n    network: injective-mainnet\n    source:\n      package:\n        moduleName: wasm_events\n        file: wasm-events-v0.1.0.spkg\n    mapping:\n      apiVersion: 0.0.7\n      kind: substreams/graph-entities\n      file: ./src/mapping.ts\n      handler: handleEvents\n```\n\n----------------------------------------\n\nTITLE: Sink Tool Terminal Output Example\nDESCRIPTION: Example terminal output showing the initialization and running of the substreams-sink-files tool, including prometheus metrics, file paths, and block processing statistics.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/files.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n2023-01-09T07:45:02.563-0800 INFO (substreams-sink-files) starting prometheus metrics server {\"listen_addr\": \"localhost:9102\"}\n2023-01-09T07:45:02.563-0800 INFO (substreams-sink-files) sink to files {\"file_output_path\": \"./localdata/out\", \"file_working_dir\": \"./localdata/working\", \"endpoint\": \"mainnet.eth.streamingfast.io:443\", \"encoder\": \"lines\", \"manifest_path\": \"substreams.yaml\", \"output_module_name\": \"jsonl_out\", \"block_range\": \"\", \"state_store\": \"./localdata/working/state.yaml\", \"blocks_per_file\": 10000, \"buffer_max_size\": 67108864}\n2023-01-09T07:45:02.563-0800 INFO (substreams-sink-files) reading substreams manifest {\"manifest_path\": \"substreams.yaml\"}\n2023-01-09T07:45:02.563-0800 INFO (substreams-sink-files) starting pprof server {\"listen_addr\": \"localhost:6060\"}\n2023-01-09T07:45:04.041-0800 INFO (pipeline) computed start block {\"module_name\": \"jsonl_out\", \"start_block\": 0}\n2023-01-09T07:45:04.042-0800 INFO (substreams-sink-files) ready, waiting for signal to quit\n2023-01-09T07:45:04.045-0800 INFO (substreams-sink-files) setting up sink {\"block_range\": {\"start_block\": 0, \"end_block\": \"None\"}, \"cursor\": {\"Cursor\":\"\",\"Block\":{}}}\n2023-01-09T07:45:04.048-0800 INFO (substreams-sink-files) starting new file boundary {\"boundary\": \"[0, 10000)\"}\n2023-01-09T07:45:04.049-0800 INFO (substreams-sink-files) boundary started {\"boundary\": \"[0, 10000)\"}\n2023-01-09T07:45:04.049-0800 INFO (substreams-sink-files) starting stats service {\"runs_each\": \"2s\"}\n2023-01-09T07:45:06.052-0800 INFO (substreams-sink-files) substreams sink stats {\"progress_msg_rate\": \"0.000 msg/s (0 total)\", \"block_rate\": \"650.000 blocks/s (1300 total)\", \"last_block\": \"#1299 (a0f0f283e0d297dd4bcf4bbff916b1df139d08336ad970e77f26b45f9a521802)\"}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Substreams Explorers Repository\nDESCRIPTION: Command to clone the GitHub repository containing all available Substreams Explorers examples.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/exploring-ethereum.md#2025-04-23_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone https://github.com/streamingfast/substreams-explorers\n```\n\n----------------------------------------\n\nTITLE: Build Command for SQL Sink\nDESCRIPTION: Command to build the Substreams:SQL sink implementation.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/cosmos-compatible/mantra.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsubstreams build\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Token Environment Variable in Unix Systems\nDESCRIPTION: Command to set the SUBSTREAMS_API_TOKEN environment variable with the JWT token obtained from The Graph Market. This token is required for authenticating Substreams executions.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SUBSTREAMS_API_TOKEN=\"<YOUR-JWT-TOKEN>\"\n```\n\n----------------------------------------\n\nTITLE: Building Substreams Project\nDESCRIPTION: This command builds the Substreams project, including any SQL sinks.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/solana/solana.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams build\n```\n\n----------------------------------------\n\nTITLE: Packing Substreams Package (Deprecated)\nDESCRIPTION: Creates a shippable package from a substreams.yaml manifest file\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/command-line-interface.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams pack ./substreams.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\n...\nSuccessfully wrote \"your-package-v0.1.0.spkg\".\n```\n\n----------------------------------------\n\nTITLE: Building and Running Substreams\nDESCRIPTION: Commands for building and running the Substreams implementation.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/eth-calls/eth-calls.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run -e mainnet.eth.streamingfast.io:443 substreams.yaml map_events --start-block 12292922 --stop-block +1\n```\n\n----------------------------------------\n\nTITLE: Running Substreams Map Module Example\nDESCRIPTION: Example showing how to run a Substreams map module with dependencies [block] --> [map_pools] --> [store_pools] --> [map_transfers]. Demonstrates basic execution and debug output options.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run substreams.yaml map_transfers\n```\n\n----------------------------------------\n\nTITLE: Installing sfreleaser CLI Tool - Go\nDESCRIPTION: Command to install the sfreleaser CLI tool using Go install command. This tool is required for managing the release process.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/streamingfast/sfreleaser/cmd/sfreleaser@latest\n```\n\n----------------------------------------\n\nTITLE: SQL Sink Execution Command\nDESCRIPTION: Command to execute and sink data into the selected SQL database.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/cosmos-compatible/mantra.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsubstreams-sink-sql\n```\n\n----------------------------------------\n\nTITLE: Installing Firehose Core Binary with Homebrew\nDESCRIPTION: Command to install the firehose-core single binary for most chains using Homebrew package manager.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/indexer-reference/test-locally.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install streamingfast/tap/firehose-core\n```\n\n----------------------------------------\n\nTITLE: Optional Parameters Handler in Rust\nDESCRIPTION: Example of handling optional parameters using Option<T> in the parameter struct.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/parameterized-modules.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Deserialize)]\nstruct QueryParams {\n    address: Option<String>,\n    amount: u64,\n}\n\n#[substreams::handlers::map]\npub fn map_whale_transfers(params: String, block: Block) -> Result<Transfers, Error> {\n    let query: QueryParams = serde_qs::from_str(params.as_str()).unwrap();\n\n    if query.address.is_none() {\n      log::info!(\"Tracking all of more than {} ETH\", query.amount);\n    }\n    else {\n      log::info!(\"Tracking transfers for address: {} of more than {} ETH\", query.address, query.amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Substreams-Powered Subgraph Project with Graph CLI\nDESCRIPTION: Command to initialize a new Substreams-powered subgraph project using a template example.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/subgraph/graph-out.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngraph init --from-example substreams-powered-subgraph\n```\n\n----------------------------------------\n\nTITLE: Retrieving Solana Blocks Without Votes using CLI\nDESCRIPTION: CLI command to retrieve Solana blocks without voting transactions using the solana_common package. This example demonstrates how to use the Substreams GUI to view and navigate through block data.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/yelllowstone-migration/migrate.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui https://spkg.io/streamingfast/solana_common-v0.3.3.spkg blocks_without_votes --start-block=320100000\n```\n\n----------------------------------------\n\nTITLE: Running Tests - Go\nDESCRIPTION: Command to run all Go tests in the project to ensure everything passes before release.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/RELEASE.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Running Solana Explorer Package from Substreams Registry\nDESCRIPTION: Command to run the Solana Explorer Substreams package directly from the Substreams Registry, specifying start and stop blocks.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-transactions.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui https://spkg.io/streamingfast/solana-explorer-v0.2.0.spkg \\\n    map_filter_transactions -e mainnet.sol.streamingfast.io:443 \\\n    --start-block 153000028 --stop-block +1\n```\n\n----------------------------------------\n\nTITLE: Running Protobuf Generation for Substreams SQL Sink\nDESCRIPTION: Command to generate the required Protobuf files for the Substreams SQL sink tutorial project.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/sql-sink.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake protogen\n```\n\n----------------------------------------\n\nTITLE: Advanced Parameter Configuration in YAML\nDESCRIPTION: Example of configuring multiple parameters using URL-encoded query string format in the manifest.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/parameterized-modules.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  - name: map_whale_transfers\n    kind: map\n    inputs:\n      - params: string\n      - source: sf.ethereum.type.v2.Block\n    output:\n      type: proto:Transfers\nparams:\n  map_params: address=aaa..aaa&amount=100\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Token Trade Counts\nDESCRIPTION: Demonstrates how to increment trade counters for multiple tokens using the add_many method with formatted keys for hourly data tracking.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/aggregation-windows.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\noutput.add_many(\n    event.log_ordinal,\n    &vec![\n        format!(\"TokenHourData:{}:{}\", hour_id, event.token0),\n        format!(\"TokenHourData:{}:{}\", hour_id, event.token1),\n    ],\n    &BigInt::from(1 as i32),\n);\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Sink Code for Substreams\nDESCRIPTION: This command initializes the SQL sink for Substreams, allowing choice between ClickHouse and Postgres.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/solana/solana.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams codegen sql\n```\n\n----------------------------------------\n\nTITLE: Linking to Change Log in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create a hyperlink to the change log file. It provides a text description 'here' that links to the relative path of the change log document.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[here](./docs/release-notes/change-log.md)\n```\n\n----------------------------------------\n\nTITLE: Running Substreams Prometheus Sink\nDESCRIPTION: Command to run the Substreams Prometheus sink with options and package specification.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/prometheus.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ substreams-sink-prometheus run [options] <spkg>\n```\n\n----------------------------------------\n\nTITLE: Example BlockMeta JSON Output\nDESCRIPTION: The JSON output from the map_block_meta module showing the extracted block metadata including block number, hash, and parent hash.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_block_meta_module.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"@data\": {\n    \"number\": \"17712040\",\n    \"hash\": \"31ad07fed936990d3c75314589b15cbdec91e4cc53a984a43de622b314c38d0b\",\n    \"parentHash\": \"1385f853d28b16ad7ebc5d51b6f2ef6d43df4b57bd4c6fe4ef8ccb6f266d8b91\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping a Deployed Substreams Service\nDESCRIPTION: Command to stop a running Substreams service on the StreamingFast remote service. This prevents continuous indexing which could consume plan resources. The command requires the service ID obtained during deployment.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/remote-service.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams alpha service stop <SERVICE-ID> -e https://deploy.streamingfast.io\n```\n\n----------------------------------------\n\nTITLE: Launching Substreams GUI for Ethereum Block Meta\nDESCRIPTION: This command launches the Substreams GUI for the Ethereum Block Meta package, executing the 'kv_out' module. It specifies the endpoint, package URL, module name, start block, and number of blocks to process.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/old-references/gui.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui -e mainnet.eth.streamingfast.io:443 https://github.com/streamingfast/substreams-eth-block-meta/releases/download/v0.5.1/substreams-eth-block-meta-v0.5.1.spkg kv_out --start-block 17712038 --stop-block +100\n```\n\n----------------------------------------\n\nTITLE: Visualizing Substreams Data with GUI\nDESCRIPTION: This command launches the Substreams GUI for data visualization and iteration.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/solana/solana.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui\n```\n\n----------------------------------------\n\nTITLE: Configuring Clickhouse Sink with REST Interface in Substreams Manifest (YAML)\nDESCRIPTION: Example of configuring a Clickhouse sink with REST interface support in a Substreams manifest. This enables REST API access to the Clickhouse database.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsink:\n  module: db_out\n  type: sf.substreams.sink.sql.v1.Service\n  config:\n    schema: \"./schema.clickhouse.sql\"\n    wire_protocol_access: true\n    engine: clickhouse\n    postgraphile_frontend:\n      enabled: false\n    pgweb_frontend:\n      enabled: false\n    rest_frontend:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Creation Command\nDESCRIPTION: SQL command to create a new PostgreSQL database for storing the blockchain data from the Substreams module.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/sql-sink.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCREATE DATABASE \"substreams_example\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Block Data in Rust with Substreams\nDESCRIPTION: This function extracts basic information from an Ethereum block, including its hash, number, and size. It uses the Substreams and Substreams Ethereum libraries to process the Block structure.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/cheatsheet/evm/blocks.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse substreams::Hex;\nuse substreams_ethereum::pb::eth::v2::Block;\n\nstruct BlockData {\n    hash: String,\n    number: u64,\n    size: u64\n}\n\nfn block_data(blk: Block) -> BlockData {\n    return BlockData { \n        hash: Hex::encode(blk.hash),\n        number: blk.number,\n        size: blk.size \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Substreams in Web Environment\nDESCRIPTION: JSON configuration for package.json file in a Web environment, listing necessary dependencies and scripts for running Substreams.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/javascript.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"substreams-js-web-example\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"dependencies\": {\n    \"@substreams/core\": \"^0.1.19\",\n    \"@substreams/manifest\": \"^0.0.9\",\n    \"@connectrpc/connect-web\": \"1.4.0\",\n    \"@connectrpc/connect\": \"1.4.0\"\n  },\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^5.1.6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running SQL Sink for Substreams\nDESCRIPTION: This command runs the SQL sink to store Substreams data in the selected SQL database.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/solana/solana.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams-sink-sql\n```\n\n----------------------------------------\n\nTITLE: Processing token instructions in Solana transactions in Rust\nDESCRIPTION: This function decodes and processes specific token program instructions, such as Transfer operations. It verifies that the token matches the specified contract address and creates Transfer objects with the appropriate data.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/token-tracker/token-tracker.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nfn process_token_instruction(\n    trx_hash: &String,\n    timestamp: i64,\n    data: &Vec<u8>,\n    inst_accounts: &Vec<u8>,\n    meta: &TransactionStatusMeta,\n    accounts: &Vec<String>,\n    output: &mut Output,\n    parameters: &TokenParams,\n) -> Result<(),Error> {\n    match TokenInstruction::unpack(&data) { // 1.\n        Err(err) => { // 2.\n            substreams::log::info!(\"unpacking token instruction {:?}\", err);\n            return Err(anyhow::anyhow!(\"unpacking token instruction: {}\", err));\n        }\n        Ok(instruction) => match instruction { // 3.\n            TokenInstruction::Transfer { amount: amt }  => { // 4.\n                let authority = &accounts[inst_accounts[2] as usize];\n                if is_token_transfer(&meta.pre_token_balances, &authority, &parameters.token_contract) { // 5.\n                    let source = &accounts[inst_accounts[0] as usize];\n                    let destination = &accounts[inst_accounts[1] as usize];\n                    output.transfers.push(Transfer { // 6.\n                        trx_hash: trx_hash.to_owned(),\n                        timestamp,\n                        from: source.to_owned(),\n                        to: destination.to_owned(),\n                        amount: amount_to_decimals(amt as f64, parameters.token_decimals as f64),\n                    });\n                    return Ok(());\n                }\n            }\n\n            // ...code omitted...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Substreams CLI Installation\nDESCRIPTION: Command to verify that the Substreams CLI has been correctly installed by checking its version.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/yelllowstone-migration/migrate.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams --version\n```\n\n----------------------------------------\n\nTITLE: Overriding Module Parameters in Python\nDESCRIPTION: Shows how to override default parameter values for a Substreams module in Python code.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmy_mod = [mod for mod in pkg.modules.modules if mod.name == \"store_pools\"][0]\nmy_mod.inputs[0].params.value = \"myvalue\"\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data for Substreams Unit Tests\nDESCRIPTION: A bash command that uses the firecore tool to extract a specific Ethereum block and save it as a base64-encoded file for use in Substreams unit tests.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/log-and-debug.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfirecore tools firehose-single-block-client mainnet.eth.streamingfast.io:443 5300300 --output=bytes --bytes-encoding=base64  > /tmp/ethereum-mainnet-block-1.binpb.base64\n```\n\n----------------------------------------\n\nTITLE: Adding Buf Build URLs in Substreams Manifest (YAML)\nDESCRIPTION: Demonstrates how to include Buf Build URLs in the Substreams manifest file for protobuf definitions.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprotobuf:\n  buf_build:\n    - buf.build/streamingfast/firehose-cosmos\n```\n\n----------------------------------------\n\nTITLE: Processing Inner Instructions for Trade Data in Rust\nDESCRIPTION: This code handles the processing of inner instructions within Solana transactions. It iterates through inner instructions, calls the trade instruction parsing function, and creates TradeData objects for any identified trades within these inner instructions.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/dex-trades.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn process_block(block: Block) -> Result<Output, substreams::errors::Error> {\n    // ...code omitted...\n        meta.inner_instructions\n            .iter()\n            .filter(|inner_instruction| inner_instruction.index == idx as u32)\n            .for_each(|inner_instruction| {\n                inner_instruction.instructions.iter().enumerate().for_each(\n                    |(inner_idx, inner_inst)| {\n                        let inner_program =\n                            &accounts[inner_inst.program_id_index as usize];\n                        let trade_data = get_trade_instruction(\n                            inner_program,\n                            inner_inst.data.clone(),\n                            &inner_inst.accounts,\n                            &accounts,\n                            &pre_token_balances,\n                            &post_token_balances,\n                            &program.to_string(),\n                            true,\n                            &inner_instructions,\n                        );\n\n                        if trade_data.is_some() {\n                            let td = trade_data.unwrap();\n\n                            data.push(TradeData {\n                                block_date: convert_to_date(timestamp),\n                                tx_id: bs58::encode(&transaction.signatures[0])\n                                    .into_string(),\n                                block_slot: slot,\n                                block_time: timestamp,\n                                signer: accounts.get(0).unwrap().to_string(),\n                                pool_address: td.amm,\n                                base_mint: get_mint(\n                                    &td.vault_a,\n                                    &post_token_balances,\n                                    &accounts,\n                                ),\n                                // ... other fields ...\n                            });\n                        }\n                    },\n                );\n            });\n    // ...code omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rust for Substreams Development\nDESCRIPTION: Commands to install Rust programming language environment, which is required for developing custom Substreams modules.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/cli/installing-the-cli.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource $HOME/.cargo/env # to configure your current shell\n```\n\n----------------------------------------\n\nTITLE: Handling Result Values in Rust with Conditional Logic\nDESCRIPTION: Demonstrates how to interact with Result values using is_ok() and unwrap() methods to safely access the contained values or errors in a main function.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/using-rust-proto/rust/result.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    let result = divide(6, 0); // 1.\n    if result.is_ok() { // 2.\n        println!(\"This is the happy path: {}\", result.unwrap())\n    } else { // 3.\n        println!(\"This is the error: {}\", result.err().unwrap())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram: Multiple Module Inputs\nDESCRIPTION: Diagram illustrating how multiple modules can feed into a store to track multiple counters.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/README(old).md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\npako:eNqdkE1qAzEMha9itE4GsnWgi5KcINmNh6LamozJeGxsuSGE3L1KW1PIptCdnnjv088NbHQEGk4Z06SOu61ZlHqfoz33JdZsSasydsQTZaqh42ui7mPTvT4cg1qvX1TA9HbxPLmMF5zLv_KOUiyev8JPvF60fm5-J22sC1MufeGYZVDTQ8M07C-jdf4AwAoC5YDeyWtuD5wBOSGQAS2loxHrzAbMchdrTQ6Z9s4LBfQo-9EKsHI8XBcLmnOlZtp5lE-HH9f9EylZic0\n```\n\n----------------------------------------\n\nTITLE: SQL Code Generation Command\nDESCRIPTION: Command to generate necessary files for SQL implementation with ClickHouse or Postgres options.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/cosmos-compatible/mantra.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsubstreams codegen sql\n```\n\n----------------------------------------\n\nTITLE: Creating DBT Source Configuration\nDESCRIPTION: YAML configuration defining the Cryptopunks data sources for DBT transformations.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nsources:\n  - name: cryptopunks\n    loaded_at_field: evt_block_time\n    tables:\n      - name: punk_bought\n      - name: punk_bid_entered\n      - name: punk_offered\n      - name: punk_no_longer_for_sale\n      - name: punk_transfer\n      - name: punk_bid_withdrawn\n      - name: transfer\n      - name: assign\n```\n\n----------------------------------------\n\nTITLE: Installing Substreams Prometheus via NPM\nDESCRIPTION: Global installation of the substreams-sink-prometheus package using NPM.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/prometheus.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g substreams-sink-prometheus\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for USDT Exchange Volume\nDESCRIPTION: GraphQL schema definition that specifies the USDTExchangeVolume entity structure with ID and amount fields.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/cosmos/injective/usdt-exchanges.md#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype USDTExchangeVolume @entity {\n  id: ID!\n  amount: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Go Code from Protobuf Definitions\nDESCRIPTION: This command uses the Protocol Buffers compiler (protoc) to generate Go code from a Protobuf definition file (input.proto). It utilizes the standard Go plugin and the VT (vtprotobuf) plugin for optimized marshaling, unmarshaling, and size calculations. The command specifies custom paths for the plugins and sets the output directory.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/wasm/bench/substreams_wasi_go/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nprotoc -I./proto \\\n--go_out=. --plugin protoc-gen-go=\"/Users/cbillett/go/bin/protoc-gen-go\" \\\n--go-vtproto_out=. --plugin protoc-gen-go-vtproto=\"/Users/cbillett/go/bin/protoc-gen-go-vtproto\" \\\n--go-vtproto_opt=features=marshal+unmarshal+size \\\ninput.proto;\n```\n\n----------------------------------------\n\nTITLE: Running Solana Substreams from Source\nDESCRIPTION: Command to run the Substreams GUI, extracting Stake Program instructions at a specific block.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-instructions.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui ./substreams.yaml \\\n    map_filter_instructions -e mainnet.sol.streamingfast.io:443 \\\n    --start-block 243830383 --stop-block +1\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler in TypeScript\nDESCRIPTION: TypeScript implementation of handleEvents function that processes WASM events and updates USDT exchange volume records.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/cosmos/injective/usdt-exchanges.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function handleEvents(bytes: Uint8Array): void {\n    const eventList: EventList = Protobuf.decode<EventList>(bytes, EventList.decode);\n    const events = eventList.events;\n\n    log.info(\"Protobuf decoded, length: {}\", [events.length.toString()]);\n\n    let entity = USDTExchangeVolume.load(ID);\n    if (entity == null) {\n        log.info(\"Entity not found, creating one...\", []);\n        entity = new USDTExchangeVolume(ID);\n        entity.amount = '0';\n    }\n\n    for (let i = 0; i < events.length; i++) {\n        const event = events[i].event;\n        if (event == null || event.type != \"wasm\") {\n            continue;\n        }\n\n        let contract_addr = \"\";\n        let action = \"\";\n        let ask_asset = \"\";\n        let ask_amount = \"\";\n        let offer_asset = \"\";\n        let offer_amount = \"\";\n\n        for (let i = 0; i < event.attributes.length; ++i) {\n            const attr = event.attributes[i];\n            if (attr.key == '_contract_addr') {\n                    contract_addr = attr.value;\n            } else if (attr.key == '_action') {\n                    action = attr.value;\n            } else if (attr.key == 'ask_asset') {\n                    ask_asset = attr.value;\n            } else if (attr.key == 'ask_amount' || attr.key == 'return_amount') {\n                    ask_amount = attr.value;\n            } else if (attr.key == 'offer_asset') {\n                    offer_asset = attr.value;\n            } else if (attr.key == 'offer_amount') {\n                    offer_amount = attr.value;\n            }\n        }\n        if (contract_addr != DOJO_addr) {\n            continue;\n        }\n\n        let exchangeAmountStr = \"\";\n\n        if (ask_asset == USDT_addr && ask_amount != \"\") {\n            exchangeAmountStr = ask_amount;\n        } \n        if (offer_asset == USDT_addr && offer_amount != \"\") {\n            exchangeAmountStr = ask_amount;\n        }\n        if (exchangeAmountStr == \"\") {\n            continue;\n        }\n\n        const exchangeAmount = BigInt.fromString(exchangeAmountStr);\n        const entityAmount = BigInt.fromString(entity.amount);\n        const sumResult = entityAmount.plus(exchangeAmount);\n        entity.amount = sumResult.toString();\n        entity.save();\n        log.debug(\"Entity saved: {}\", [entity.amount]);\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing via Cargo\nDESCRIPTION: Adding substreams-sink-prometheus as a dependency using Cargo package manager.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/prometheus.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo add substreams-sink-prometheus\n```\n\n----------------------------------------\n\nTITLE: Generating Substreams Code with Shell Script\nDESCRIPTION: This shell script automates the code generation process for the Substreams project. It sets up the environment, defines paths, and likely runs various code generation tools to produce updated project files.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/storage/store/marshaller/pb/last_generate.txt#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngenerate.sh - Sun 30 Oct 2022 09:24:10 EDT - julien\nstreamingfast/proto revision: 94eaadedd395f68c3ceebb2bcdec737f9d6df595\n```\n\n----------------------------------------\n\nTITLE: Overriding Module Parameters in Python\nDESCRIPTION: Demonstrates how to override default module parameters in Python code before starting a Substreams stream.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/manifests.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmy_mod = [mod for mod in pkg.modules.modules if mod.name == \"store_pools\"][0]\nmy_mod.inputs[0].params.value = \"myvalue\"\n```\n\n----------------------------------------\n\nTITLE: Handling Substreams Data in Rust\nDESCRIPTION: Rust handler function declaration showing how to receive and process the output from the all_transactions module.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/cosmos/injective/foundational.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn my_test_module(transactions: TransactionList) -> Result<MyOutputObject, Error> {\n    // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Field Options for Sink Configs (Protobuf)\nDESCRIPTION: Example of using protobuf annotations to specify how fields should be interpreted in the Substreams manifest. This includes loading file contents and zipping folders.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nimport \"sf/substreams/v1/options.proto\";\n\nmessage HostedPostgresDatabase {\n  bytes schema = 1 [ (sf.substreams.v1.options).load_from_file = true ];\n  bytes extra_config_files = 2 [ (sf.substreams.v1.options).zip_from_folder = true ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Schema for NFT Trade Data\nDESCRIPTION: Protocol Buffer schema that defines the structure of NFT trade data, including fields for block information, transaction details, trade amounts, fees, and platform-specific data.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/nft-trades.md#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Output {\n  repeated TradeData data = 1;\n}\n\nmessage TradeData {\n  required string block_date = 1;\n  required int64 block_time = 2;\n  required uint64 block_slot = 3;\n  required string tx_id = 4;\n  required uint64 txn_fee = 5;\n  required string mint = 6;\n  required double amount = 7;\n  required string category = 8;\n  required string buyer = 9;\n  required string seller = 10;\n  required double taker_fee = 11;\n  required double maker_fee = 12;\n  required double amm_fee = 13;\n  required double royalty = 14;\n  required string instruction_type = 15;\n  required uint32 instruction_index = 16;\n  required string outer_program = 17;\n  required string inner_program = 18;\n  required uint32 inner_instruxtion_index = 19;\n  required bool is_inner_instruction = 20;\n  required string platform = 21;\n  required string currency_mint = 22;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Rust Code for Substreams\nDESCRIPTION: Command to build the Rust code for the Substreams project targeting WebAssembly.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Parameters in Substreams Manifest (YAML)\nDESCRIPTION: Example of configuring network-specific parameters and initial blocks in a Substreams manifest file. This allows overriding settings for different networks.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  mainnet:\n    params:\n      module1: \"address=0x1234...\"\n    initialBlock: 15000000\n  goerli:\n    params:\n      module1: \"address=0x5678...\"\n    initialBlock: 7000000\n```\n\n----------------------------------------\n\nTITLE: Running Substreams Sink CLI Command\nDESCRIPTION: Basic command structure for executing the Substreams sink program with endpoint, package, and module parameters.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/stream/go.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run . sink <ENDPOINT> <SPKG> <MODULE_NAME>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo run . sink mainnet.eth.streamingfast.io:443 https://github.com/streamingfast/substreams-eth-block-meta/releases/download/v0.5.1/substreams-eth-block-meta-v0.5.1.spkg db_out\n```\n\n----------------------------------------\n\nTITLE: Compiling Go to WebAssembly for WASI\nDESCRIPTION: This command compiles a Go program to WebAssembly (WASM) for the WASI (WebAssembly System Interface) platform. It specifies the target operating system as 'wasip1' and architecture as 'wasm', outputting the result as 'main.wasm'.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/wasm/bench/substreams_wasi_go/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOS=wasip1 GOARCH=wasm go build -o main.wasm main.go\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Changes History using JavaScript\nDESCRIPTION: Node.js command to retrieve the history of changes for a specific Solana account using the solana_accounts_foundational package. This demonstrates how to track account changes programmatically in JavaScript.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/yelllowstone-migration/migrate.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js https://accounts.mainnet.sol.streamingfast.io:443 https://spkg.io/streamingfast/solana_accounts_foundational-v0.1.1.spkg filtered_accounts 327404502 filtered_accounts=account:5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Sink Code\nDESCRIPTION: Command to generate SQL sink files for either ClickHouse or Postgres integration.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/starknet.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams codegen sql\n```\n\n----------------------------------------\n\nTITLE: Cargo Dependencies Configuration\nDESCRIPTION: Cargo.toml configuration specifying required dependencies for Substreams and Prometheus sink.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/prometheus.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nsubstreams = \"0.5\"\nsubstreams-sink-prometheus = \"0.1\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Substreams-Powered Subgraph with Yarn Scripts\nDESCRIPTION: Yarn commands to install dependencies, build, and deploy the Substreams-powered subgraph.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/subgraph/graph-out.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn install # install graph-cli\nyarn subgraph:build # build the subgraph\nyarn subgraph:deploy # deploy the subgraph\n```\n\n----------------------------------------\n\nTITLE: Configure Cargo Default Build Target\nDESCRIPTION: Cargo configuration to set wasm32-unknown-unknown as the default build target.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/setting-up-handlers.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[build]\ntarget = \"wasm32-unknown-unknown\"\n```\n\n----------------------------------------\n\nTITLE: Initializing UniswapV3 Factory Contract Tracking with Substreams CLI\nDESCRIPTION: Terminal output showing the initialization of a Substreams project to track UniswapV3 factory contract pools. The process includes setting up contract tracking, configuring dynamic datasources, and generating event models and project files.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/old-content/develop/init-project.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n✔ Project name (lowercase, numbers, undescores): uniswapv3_factory\nProtocol: Ethereum\nEthereum chain: Mainnet\nContract address to track (leave empty to use \"Bored Ape Yacht Club\"): 0x1f98431c8ad98523631ae4a59f267346ea31f984\nWould you like to track another contract? (Leave empty if not): \nTracking 1 contract(s), let's define a short name for each contract\nChoose a short name for 1f98431c8ad98523631ae4a59f267346ea31f984 (lowercase and numbers only): factory\n✔ Events only\nRetrieving Ethereum Mainnet contract information (ABI & creation block)\nFetched contract ABI for 1f98431c8ad98523631ae4a59f267346ea31f984\nFetched initial block 12369621 for 1f98431c8ad98523631ae4a59f267346ea31f984 (lowest 12369621)\nGenerating ABI Event models for factory\n  Generating ABI Events for FeeAmountEnabled (fee,tickSpacing)\n  Generating ABI Events for OwnerChanged (oldOwner,newOwner)\n  Generating ABI Events for PoolCreated (token0,token1,fee,tickSpacing,pool)\nTrack a dynamic datasource: y\nSelect the event on the factory that triggers the creation of a dynamic datasource:\nEvent: PoolCreated\nSelect the field on the factory event that provides the address of the dynamic datasource:\nField: pool\nChoose a short name for the created datasource, (lowercase and numbers only): pool\n✔ Events only\nEnter a reference contract address to fetch the ABI: 0xc2e9f25be6257c210d7adf0d4cd6e3e881ba25f8\nadding dynamic datasource pool PoolCreated pool\n  Generating ABI Events for Burn (owner,tickLower,tickUpper,amount,amount0,amount1)\n  Generating ABI Events for Collect (owner,recipient,tickLower,tickUpper,amount0,amount1)\n  Generating ABI Events for CollectProtocol (sender,recipient,amount0,amount1)\n  Generating ABI Events for Flash (sender,recipient,amount0,amount1,paid0,paid1)\n  Generating ABI Events for IncreaseObservationCardinalityNext (observationCardinalityNextOld,observationCardinalityNextNew)\n  Generating ABI Events for Initialize (sqrtPriceX96,tick)\n  Generating ABI Events for Mint (sender,owner,tickLower,tickUpper,amount,amount0,amount1)\n  Generating ABI Events for SetFeeProtocol (feeProtocol0Old,feeProtocol1Old,feeProtocol0New,feeProtocol1New)\n  Generating ABI Events for Swap (sender,recipient,amount0,amount1,sqrtPriceX96,liquidity,tick)\nWriting project files\nGenerating Protobuf Rust code\nProject \"uniswapv3_factory\" initialized at \"/Users/enolalvarezdeprado/Documents/projects/substreams/dsds/test\"\n\nRun 'make build' to build the wasm code.\n\nThe following substreams.yaml files have been created with different sink targets:\n * substreams.yaml: no sink target\n * substreams.sql.yaml: PostgreSQL sink\n * substreams.clickhouse.yaml: Clickhouse sink\n * substreams.subgraph.yaml: Sink into Substreams-based subgraph\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Substreams API\nDESCRIPTION: Commands to obtain a development API token and load it into the environment. The token can either be sourced from .substreams.dev file or manually inserted into the config.toml file.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/codegen/templates/sql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams auth\n. ./.substreams.dev  # or insert the SUBSTREAMS_API_TOKEN into the `config.toml` file.\n```\n\n----------------------------------------\n\nTITLE: Integrating Substreams Module in YAML\nDESCRIPTION: Example of how to declare a custom module that uses the all_transactions foundational module as input.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/cosmos/injective/foundational.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: my_test_module\n  kind: map\n  inputs:\n    - map: all_transactions\n  output:\n    type: proto:sf.test.MyOutputObject\n```\n\n----------------------------------------\n\nTITLE: Running Substreams with CLI\nDESCRIPTION: Bash command to execute the NFT Trades Substreams using the Substreams CLI, targeting the Solana mainnet and specifying a starting block and block range.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/top-ledger/nft-trades.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui -e mainnet.sol.streamingfast.io:443 \\\n    substreams.yaml map_block -s 200321235 -t +1\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger Docker Container for Tracing in Shell\nDESCRIPTION: This command runs a Jaeger Docker container for tracing. It enables OTLP collection and exposes ports 16686, 4317, and 4318 for various Jaeger services.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/test/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name jaeger \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  jaegertracing/all-in-one:1.35\n```\n\n----------------------------------------\n\nTITLE: Defining Block Version Field in Ethereum Protobuf\nDESCRIPTION: The code shows the 'ver' field definition in the Block Protobuf which represents the data model version. This field is used internally by Firehose on Ethereum for validation purposes when reading block data.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/ethereum-data-model.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Ver represents that data model version of the block, it is used internally by Firehose on Ethereum\n// as a validation that we are reading the correct version.\nint32 ver = 1;\n```\n\n----------------------------------------\n\nTITLE: Running Substreams with GUI and CLI\nDESCRIPTION: Commands to execute Substreams using either GUI or command-line interface, connecting to a local endpoint and running the map_test module with a 10-block window.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/wasm/bench/tinygo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui ./substreams.yaml --plaintext -e 127.0.0.1:10016 -t +10 map_test\n# or \nsubstreams run ./substreams.yaml --plaintext -e 127.0.0.1:10016 -t +10 map_test\n```\n\n----------------------------------------\n\nTITLE: Running Solana Token Tracker with Custom Token Parameters\nDESCRIPTION: Bash command demonstrating how to override the default parameters to track USDT token instead of USDC. It uses the -p flag to specify the new token contract address while maintaining the same decimal precision.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/token-tracker/token-tracker.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui ./substreams.yaml map_solana_token_events -e mainnet.sol.streamingfast.io:443  --start-block 158558168 --stop-block +1 -p map_solana_token_events=\"token_contract=Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB&token_decimals=6\"\n```\n\n----------------------------------------\n\nTITLE: Packaging Substreams Project\nDESCRIPTION: Command to generate a versioned .spkg package file from the Substreams configuration.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams pack substreams.sql.yaml\n```\n\n----------------------------------------\n\nTITLE: Compiling JavaScript to WebAssembly using Javy\nDESCRIPTION: This command demonstrates how to use Javy to compile a JavaScript file into a WebAssembly (.wasm) file. The input file is 'test.js' and the output file is 'test.wasm'.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/wasm/bench/javy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njavy compile /tmp/test.js -o /tmp/test.wasm\n```\n\n----------------------------------------\n\nTITLE: Debug Module Output with Multiple Modules\nDESCRIPTION: Example showing how to run Substreams with debug output for multiple specified modules, including both map and store modules in the processing chain.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/release-notes/change-log.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run substreams.yaml map_transfers --debug-modules-output=map_pools,map_transfers,store_pools\n```\n\n----------------------------------------\n\nTITLE: Running Substreams with CLI\nDESCRIPTION: Two CLI commands for running Substreams: 'run' for linear output and 'gui' for an interactive block explorer interface.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/old-content/glossary.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams run\n```\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams gui\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Previous Hour Data\nDESCRIPTION: Shows how to delete all key-value pairs from the previous hour using the delete_prefix method to free up memory.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/modules/aggregation-windows.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\noutput.delete_prefix(0, &format!(\"TokenHourData:{prev_hour_id}:\"));\n```\n\n----------------------------------------\n\nTITLE: Deploying to Production Environment\nDESCRIPTION: Command to deploy the packaged Substreams .spkg file to the hosted production environment.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/sql/deployable-services/local-service.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams alpha service deploy cryptopunks-v0.1.0.spkg -e https://deploy.streamingfast.io --prod\n```\n\n----------------------------------------\n\nTITLE: Defining Substreams Manifest in YAML\nDESCRIPTION: The Substreams manifest (substreams.yaml) is a YAML file that defines all the configurations needed for a Substreams project, including modules, inputs, outputs, and Protobuf definitions.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/old-content/glossary.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsubstreams.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Protobuf Generation for Substreams Project\nDESCRIPTION: Command to generate the required Protobuf files for the Substreams project using the provided Makefile.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/files.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake protogen\n```\n\n----------------------------------------\n\nTITLE: Generating Protobuf Objects for Substreams\nDESCRIPTION: Command to generate Rust data structures from Protobuf definitions. This step is necessary when making updates to any file in the proto folder.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/evm/exploring-ethereum/map_block_meta_module.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake protogen\n```\n\n----------------------------------------\n\nTITLE: Manifest Version Specification\nDESCRIPTION: Shows how to specify the Substreams manifest version using specVersion field.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/substreams-components/manifests.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Opening Browser Window for Subgraph Publishing in The Graph CLI\nDESCRIPTION: This code snippet shows the URL format used by The Graph CLI when opening a browser window for subgraph publishing. The URL includes a unique subgraph ID parameter.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/graph-node/publish-decentralized-network.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhttps://cli.thegraph.com/publish?id=<SUBGRAPH_ID>\n```\n\n----------------------------------------\n\nTITLE: Running Release Command - Bash\nDESCRIPTION: Command to initiate the release process using sfreleaser, which creates a draft release that can be reviewed before publishing.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/RELEASE.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsfreleaser release\n```\n\n----------------------------------------\n\nTITLE: Listing imported functions in compiled WebAssembly\nDESCRIPTION: This command uses wasm-decompile to list all imported functions in the compiled WebAssembly file. It demonstrates the WASI functions that are included in the compiled output.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/wasm/bench/javy.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wasm-decompile /tmp/test.wasm | grep \"import function\"\nimport function wasi_snapshot_preview1_clock_time_get(a:int, b:long, c:int):int;\nimport function wasi_snapshot_preview1_random_get(a:int, b:int):int;\nimport function wasi_snapshot_preview1_fd_write(a:int, b:int, c:int, d:int):int;\nimport function wasi_snapshot_preview1_fd_read(a:int, b:int, c:int, d:int):int;\nimport function wasi_snapshot_preview1_environ_get(a:int, b:int):int;\nimport function wasi_snapshot_preview1_environ_sizes_get(a:int, b:int):int;\nimport function wasi_snapshot_preview1_fd_close(a:int):int;\nimport function wasi_snapshot_preview1_fd_fdstat_get(a:int, b:int):int;\nimport function wasi_snapshot_preview1_fd_seek(a:int, b:long, c:int, d:int):int;\nimport function wasi_snapshot_preview1_proc_exit(a:int);\n```\n\n----------------------------------------\n\nTITLE: Running Zipkin Docker Container for Tracing in Shell\nDESCRIPTION: This command runs a Zipkin Docker container for tracing purposes. It exposes port 9411 for accessing the Zipkin UI.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 9411:9411 openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Building Substreams SQL Sink\nDESCRIPTION: Command to build the Substreams:SQL sink after generating the necessary files.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/evm.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams build\n```\n\n----------------------------------------\n\nTITLE: Problematic imported functions in compiled WebAssembly\nDESCRIPTION: This code snippet lists the imported WASI functions that are considered problematic and should be disabled or removed from the exported VM if possible. These functions relate to time, randomness, and environment variables.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/wasm/bench/javy.md#2025-04-23_snippet_2\n\nLANGUAGE: wasm\nCODE:\n```\nimport function wasi_snapshot_preview1_clock_time_get(a:int, b:long, c:int):int;\nimport function wasi_snapshot_preview1_random_get(a:int, b:int):int;\nimport function wasi_snapshot_preview1_environ_get(a:int, b:int):int;\nimport function wasi_snapshot_preview1_environ_sizes_get(a:int, b:int):int;\n```\n\n----------------------------------------\n\nTITLE: Buffer Generation Output Example\nDESCRIPTION: Example output from the Protocol Buffer generation command\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/sinks/community/other-sinks/kv.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n> connect-web-example@0.0.0 buf:generate\n> buf generate ../proto/substreams/sink/kv/v1 && buf generate ./proto\n```\n\n----------------------------------------\n\nTITLE: Implementing Instruction Filtering in Rust\nDESCRIPTION: Rust function implementing the 'map_filter_instructions' Substreams module, which filters and extracts instructions based on the specified Program ID.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-instructions.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[substreams::handlers::map]\nfn map_filter_instructions(params: String, blk: Block) -> Result<Instructions, substreams::errors::Error> {\n    let filters = parse_filters_from_params(params)?; // 1.\n\n    let instructions : Vec<Instruction> = blk.transactions().flat_map(|tx| { // 2.\n        let msg = tx.transaction.as_ref().unwrap().message.as_ref().unwrap(); // 3.\n        let acct_keys = tx.resolved_accounts(); // 4.\n\n        msg.instructions.iter() // 5.\n            .filter(|inst| apply_filter(inst, &filters, &acct_keys)) // 6.\n            .map(|inst| { // 7.\n            Instruction {\n                program_id: bs58::encode(acct_keys[inst.program_id_index as usize].to_vec()).into_string(),\n                accounts: inst.accounts.iter().map(|acct| bs58::encode(acct_keys[*acct as usize].to_vec()).into_string()).collect(),\n                data: bs58::encode(&inst.data).into_string(),\n            }\n        }).collect::<Vec<_>>()\n    }).collect();\n\n    Ok(Instructions { instructions })\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Reverted Transactions in Substreams\nDESCRIPTION: Demonstrates how to filter for transactions that were reverted. The function uses TransactionTraceStatus::Reverted enum to identify transactions that were executed but their effects were rolled back.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/cheatsheet/evm/transactions.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse substreams::Hex;\nuse substreams_ethereum::pb::eth::v2::{Block, TransactionTraceStatus};\n\nstruct TransactionMeta {\n    hash: String,\n    from: String,\n    to: String\n}\n\nfn failed_transactions(blk: Block) -> Vec<TransactionMeta> {\n    return blk.transaction_traces.iter()\n        .filter(|tx| tx.status() == TransactionTraceStatus::Reverted)\n        .map(|tx| TransactionMeta {\n            hash: Hex::encode(tx.hash),\n            from: Hex::encode(tx.from),\n            to: Hex::encode(tx.to)\n        })\n        .collect();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Structures for Solana Transactions\nDESCRIPTION: Protobuf definitions for Instructions, Instruction, Transactions, and Transaction structures used in the Solana Explorer Substreams.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/solana/explore-solana/filter-transactions.md#2025-04-23_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Instructions {\n  repeated Instruction instructions = 1;\n}\n\nmessage Instruction {\n  string program_id = 1;\n  repeated string accounts = 2;\n  string data = 3;\n}\n\nmessage Transactions {\n  repeated Transaction transactions = 1;\n}\n\nmessage Transaction {\n  repeated string signatures = 1;\n\n  repeated Instruction instructions = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Events in TypeScript\nDESCRIPTION: TypeScript handler function showing how to decode and process events from a Substreams module in a subgraph.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/how-to-guides/develop-your-own-substreams/cosmos/injective/foundational.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function handleEvents(bytes: Uint8Array): void {\n    const eventList: EventList = Protobuf.decode<EventList>(bytes, EventList.decode);\n    const events = eventList.events;\n\n    // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Subgraph Code for Substreams\nDESCRIPTION: This command generates the necessary files and function definitions for creating a Substreams-powered subgraph.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/tutorials/solana/solana.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams codegen subgraph\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Modules in Substreams YAML\nDESCRIPTION: Demonstrates how to import a package and use a module from it in a Substreams manifest.\nSOURCE: https://github.com/streamingfast/substreams/blob/develop/docs/new/references/manifests.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  evm_package: ../my_package.spkg\n\nmodules:\n  - name: local_module\n    use: evm_package:module1\n```"
  }
]