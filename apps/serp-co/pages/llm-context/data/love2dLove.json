[
  {
    "owner": "love2d",
    "repo": "love",
    "content": "TITLE: Updating Love2D Color Values in Lua\nDESCRIPTION: Changed all color values to be in the range 0-1, rather than 0-255. This affects how colors are specified in Love2D graphics functions.\nSOURCE: https://github.com/love2d/love/blob/main/changes.txt#2025-04-19_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Old way (0-255)\nlove.graphics.setColor(255, 0, 0)\n\n-- New way (0-1)\nlove.graphics.setColor(1, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Object in LÖVE\nDESCRIPTION: Demonstrates how to create a Text object in LÖVE, which can be used for efficient text rendering.\nSOURCE: https://github.com/love2d/love/blob/main/changes.txt#2025-04-19_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\ntextObject = love.graphics.newText(font, textString)\n```\n\n----------------------------------------\n\nTITLE: Updating Love2D Window VSync Setting in Lua\nDESCRIPTION: Changed the 'vsync' field of love.window.setMode and t.window in love.conf. It's now an integer with 0 disabling vsync.\nSOURCE: https://github.com/love2d/love/blob/main/changes.txt#2025-04-19_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nfunction love.conf(t)\n  t.window.vsync = 1 -- Enable vsync\n  -- t.window.vsync = 0 -- Disable vsync\nend\n\n-- Or during runtime:\nlove.window.setMode(800, 600, {vsync = 1})\n```\n\n----------------------------------------\n\nTITLE: Setting Font Fallbacks in LÖVE\nDESCRIPTION: Shows how to set fallback fonts for a Font object in LÖVE, useful for supporting multiple character sets.\nSOURCE: https://github.com/love2d/love/blob/main/changes.txt#2025-04-19_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nfont:setFallbacks(fallbackFont1, fallbackFont2, ...)\n```\n\n----------------------------------------\n\nTITLE: Setting Require Path in LÖVE\nDESCRIPTION: Shows how to set and get the require path in LÖVE, which affects how Lua modules are loaded.\nSOURCE: https://github.com/love2d/love/blob/main/changes.txt#2025-04-19_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlove.filesystem.setRequirePath(path)\npath = love.filesystem.getRequirePath()\n```\n\n----------------------------------------\n\nTITLE: Compressing and Decompressing Data in LÖVE\nDESCRIPTION: Illustrates how to use LÖVE's math module to compress and decompress data.\nSOURCE: https://github.com/love2d/love/blob/main/changes.txt#2025-04-19_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\ncompressedData = love.math.compress(data, format, level)\ndecompressedData = love.math.decompress(compressedData, format)\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Megasource Build for LÖVE\nDESCRIPTION: Sets up the build configuration when not using Megasource, including finding and linking dependencies.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC OR ANDROID)\n\tmessage(FATAL_ERROR \"\nIt is currently only possible to build with megasource on Windows and Android.\nPlease see https://github.com/love2d/megasource\n\")\nendif()\n\nadd_definitions(-D HAS_SOCKLEN_T)\n\nfind_package(SDL3 3.1.3 REQUIRED CONFIG)\ntarget_include_directories(lovedep::SDL INTERFACE ${SDL3_INCLUDE_DIRS})\ntarget_link_libraries(lovedep::SDL INTERFACE ${SDL3_LIBRARIES})\n\nfind_package(Freetype REQUIRED)\ntarget_include_directories(lovedep::Freetype INTERFACE ${FREETYPE_INCLUDE_DIRS})\ntarget_link_libraries(lovedep::Freetype INTERFACE ${FREETYPE_LIBRARY})\n\nfind_package(Harfbuzz REQUIRED)\ntarget_include_directories(lovedep::Harfbuzz INTERFACE ${HARFBUZZ_INCLUDE_DIR})\ntarget_link_libraries(lovedep::Harfbuzz INTERFACE ${HARFBUZZ_LIBRARY})\n\nfind_package(OpenAL REQUIRED)\ntarget_include_directories(lovedep::OpenAL INTERFACE ${OPENAL_INCLUDE_DIR})\ntarget_link_libraries(lovedep::OpenAL INTERFACE ${OPENAL_LIBRARY})\n\nfind_package(ModPlug REQUIRED)\ntarget_include_directories(lovedep::Modplug INTERFACE ${MODPLUG_INCLUDE_DIR})\ntarget_link_libraries(lovedep::Modplug INTERFACE ${MODPLUG_LIBRARY})\n\nfind_package(Theora REQUIRED)\ntarget_include_directories(lovedep::Theora INTERFACE ${THEORA_INCLUDE_DIR})\ntarget_link_libraries(lovedep::Theora INTERFACE ${THEORA_LIBRARY} ${THEORADEC_LIBRARY})\n\nfind_package(Vorbis REQUIRED)\ntarget_include_directories(lovedep::Vorbis INTERFACE ${VORBIS_INCLUDE_DIR})\ntarget_link_libraries(lovedep::Vorbis INTERFACE ${VORBISFILE_LIBRARY})\n\nfind_package(Ogg REQUIRED)\ntarget_include_directories(lovedep::Ogg INTERFACE ${OGG_INCLUDE_DIR})\ntarget_link_libraries(lovedep::Ogg INTERFACE ${OGG_LIBRARY})\n\nfind_package(ZLIB REQUIRED)\ntarget_include_directories(lovedep::Zlib INTERFACE ${ZLIB_INCLUDE_DIRS})\ntarget_link_libraries(lovedep::Zlib INTERFACE ${ZLIB_LIBRARY})\n\nif(LOVE_JIT)\n\tfind_package(LuaJIT REQUIRED)\n\ttarget_include_directories(lovedep::Lua INTERFACE ${LUAJIT_INCLUDE_DIR})\n\ttarget_link_libraries(lovedep::Lua INTERFACE ${LUAJIT_LIBRARY})\nelse()\n\tfind_package(Lua51 REQUIRED)\n\ttarget_include_directories(lovedep::Lua INTERFACE ${LUA_INCLUDE_DIR})\n\ttarget_link_libraries(lovedep::Lua INTERFACE ${LUA_LIBRARY})\nendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Performing Atomic Operations on Channels in LÖVE\nDESCRIPTION: Demonstrates how to perform atomic operations on Channel objects in LÖVE for thread-safe communication.\nSOURCE: https://github.com/love2d/love/blob/main/changes.txt#2025-04-19_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nresult = channel:performAtomic(function)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Implementation for LÖVE Graphics\nDESCRIPTION: Defines the OpenGL-specific implementation of the graphics module as a static library. Includes rendering components for OpenGL and links against SDL.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_graphics_opengl STATIC\n\tsrc/modules/graphics/opengl/Buffer.cpp\n\tsrc/modules/graphics/opengl/Buffer.h\n\tsrc/modules/graphics/opengl/FenceSync.cpp\n\tsrc/modules/graphics/opengl/FenceSync.h\n\tsrc/modules/graphics/opengl/Graphics.cpp\n\tsrc/modules/graphics/opengl/Graphics.h\n\tsrc/modules/graphics/opengl/GraphicsReadback.cpp\n\tsrc/modules/graphics/opengl/GraphicsReadback.h\n\tsrc/modules/graphics/opengl/OpenGL.cpp\n\tsrc/modules/graphics/opengl/OpenGL.h\n\tsrc/modules/graphics/opengl/Shader.cpp\n\tsrc/modules/graphics/opengl/Shader.h\n\tsrc/modules/graphics/opengl/ShaderStage.cpp\n\tsrc/modules/graphics/opengl/ShaderStage.h\n\tsrc/modules/graphics/opengl/StreamBuffer.cpp\n\tsrc/modules/graphics/opengl/StreamBuffer.h\n\tsrc/modules/graphics/opengl/Texture.cpp\n\tsrc/modules/graphics/opengl/Texture.h\n)\ntarget_link_libraries(love_graphics_opengl PUBLIC\n\tlovedep::SDL\n)\n```\n\n----------------------------------------\n\nTITLE: Using New Love2D Error Handler in Lua\nDESCRIPTION: Changed love.run and love.errhand to return a function for their main loop, which gets called until love quits. This allows for custom error handling logic.\nSOURCE: https://github.com/love2d/love/blob/main/changes.txt#2025-04-19_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nfunction love.errorhandler(msg)\n  return function()\n    -- Custom error handling logic\n    print(\"Error occurred: \" .. msg)\n    return false -- Quit the game\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Graphics Implementation in LÖVE\nDESCRIPTION: Conditional build configuration that adds either Metal implementation for Apple platforms or Vulkan implementation for non-Apple platforms to the main graphics library.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n\tadd_library(love_graphics_metal STATIC\n\t\tsrc/modules/graphics/metal/Buffer.h\n\t\tsrc/modules/graphics/metal/Buffer.mm\n\t\tsrc/modules/graphics/metal/Graphics.h\n\t\tsrc/modules/graphics/metal/Graphics.mm\n\t\tsrc/modules/graphics/metal/GraphicsReadback.h\n\t\tsrc/modules/graphics/metal/GraphicsReadback.mm\n\t\tsrc/modules/graphics/metal/Metal.h\n\t\tsrc/modules/graphics/metal/Metal.mm\n\t\tsrc/modules/graphics/metal/Shader.h\n\t\tsrc/modules/graphics/metal/Shader.mm\n\t\tsrc/modules/graphics/metal/ShaderStage.h\n\t\tsrc/modules/graphics/metal/ShaderStage.mm\n\t\tsrc/modules/graphics/metal/StreamBuffer.h\n\t\tsrc/modules/graphics/metal/StreamBuffer.mm\n\t\tsrc/modules/graphics/metal/Texture.h\n\t\tsrc/modules/graphics/metal/Texture.mm\n\t)\n\ttarget_link_libraries(love_graphics_metal PUBLIC\n\t\tobjc\n\t\t\"-framework Metal\"\n\t\t\"-framework QuartzCore\"\n\t)\n\ttarget_link_libraries(love_graphics INTERFACE\n\t\tlove_graphics_metal\n\t)\nelse()\n\tadd_library(love_graphics_vulkan STATIC\n\t\tsrc/modules/graphics/vulkan/Graphics.h\n\t\tsrc/modules/graphics/vulkan/Graphics.cpp\n\t\tsrc/modules/graphics/vulkan/GraphicsReadback.h\n\t\tsrc/modules/graphics/vulkan/GraphicsReadback.cpp\n\t\tsrc/modules/graphics/vulkan/Shader.h\n\t\tsrc/modules/graphics/vulkan/Shader.cpp\n\t\tsrc/modules/graphics/vulkan/ShaderStage.h\n\t\tsrc/modules/graphics/vulkan/ShaderStage.cpp\n\t\tsrc/modules/graphics/vulkan/StreamBuffer.h\n\t\tsrc/modules/graphics/vulkan/StreamBuffer.cpp\n\t\tsrc/modules/graphics/vulkan/Buffer.h\n\t\tsrc/modules/graphics/vulkan/Buffer.cpp\n\t\tsrc/modules/graphics/vulkan/Texture.h\n\t\tsrc/modules/graphics/vulkan/Texture.cpp\n\t\tsrc/modules/graphics/vulkan/Vulkan.h\n\t\tsrc/modules/graphics/vulkan/Vulkan.cpp\n\t\tsrc/modules/graphics/vulkan/VulkanWrapper.h\n\t)\n\ttarget_link_libraries(love_graphics_vulkan PUBLIC\n\t\tlovedep::SDL\n\t)\n\ttarget_link_libraries(love_graphics INTERFACE\n\t\tlove_graphics_vulkan\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing a File Read Test in Lua for Löve Framework\nDESCRIPTION: This code snippet demonstrates how to write a test method for the love.filesystem.read function in the Löve framework. It checks various aspects of file reading, including content matching and size verification.\nSOURCE: https://github.com/love2d/love/blob/main/testing/readme.md#2025-04-19_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlove.test.filesystem.read = function(test)\n  local content, size = love.filesystem.read('resources/test.txt')\n  test:assertNotNil(content)\n  test:assertEquals('helloworld', content, 'check content match')\n  test:assertEquals(10, size, 'check size match')\n  content, size = love.filesystem.read('resources/test.txt', 5)\n  test:assertNotNil(content)\n  test:assertEquals('hello', content, 'check content match')\n  test:assertEquals(5, size, 'check size match')\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Magpie Image Format Handler Library for LÖVE\nDESCRIPTION: Defines a library for various image format handlers (ASTC, DDS, EXR, KTX, etc.) used by the LÖVE image module. Links against Zlib for compression support.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_image_magpie STATIC\n\tsrc/modules/image/magpie/ASTCHandler.cpp\n\tsrc/modules/image/magpie/ASTCHandler.h\n\tsrc/modules/image/magpie/ddsHandler.cpp\n\tsrc/modules/image/magpie/ddsHandler.h\n\tsrc/modules/image/magpie/EXRHandler.cpp\n\tsrc/modules/image/magpie/EXRHandler.h\n\tsrc/modules/image/magpie/KTXHandler.cpp\n\tsrc/modules/image/magpie/KTXHandler.h\n\tsrc/modules/image/magpie/PKMHandler.cpp\n\tsrc/modules/image/magpie/PKMHandler.h\n\tsrc/modules/image/magpie/PNGHandler.cpp\n\tsrc/modules/image/magpie/PNGHandler.h\n\tsrc/modules/image/magpie/PVRHandler.cpp\n\tsrc/modules/image/magpie/PVRHandler.h\n\tsrc/modules/image/magpie/STBHandler.cpp\n\tsrc/modules/image/magpie/STBHandler.h\n)\ntarget_link_libraries(love_image_magpie PUBLIC\n\tlovedep::Zlib\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling LÖVE on *nix Systems using CMake\nDESCRIPTION: Commands for generating Makefiles and building LÖVE on Unix-like systems using CMake. It creates a separate build directory and installs the files in a prefix directory.\nSOURCE: https://github.com/love2d/love/blob/main/readme.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ cmake -B build -S. --install-prefix $PWD/prefix # this will create the directory `build/`.\n$ cmake --build build --target install -j$(nproc) # this will build with all cores and put the files in `prefix/`.\n```\n\n----------------------------------------\n\nTITLE: Creating Main Keyboard Interface Library for LÖVE\nDESCRIPTION: Creates an interface library for the LÖVE keyboard module that combines the core keyboard functionality with the SDL implementation.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_keyboard INTERFACE)\ntarget_link_libraries(love_keyboard INTERFACE\n\tlove_keyboard_root\n\tlove_keyboard_sdl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Math Module for LÖVE Engine\nDESCRIPTION: Defines the math module as a static library with various mathematical utilities including Bezier curves, random number generation, and transformations. Links against Lua.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_math STATIC\n\tsrc/modules/math/BezierCurve.cpp\n\tsrc/modules/math/BezierCurve.h\n\tsrc/modules/math/MathModule.cpp\n\tsrc/modules/math/MathModule.h\n\tsrc/modules/math/RandomGenerator.cpp\n\tsrc/modules/math/RandomGenerator.h\n\tsrc/modules/math/Transform.cpp\n\tsrc/modules/math/Transform.h\n\tsrc/modules/math/wrap_BezierCurve.cpp\n\tsrc/modules/math/wrap_BezierCurve.h\n\tsrc/modules/math/wrap_Math.cpp\n\tsrc/modules/math/wrap_Math.h\n\tsrc/modules/math/wrap_Math.lua\n\tsrc/modules/math/wrap_RandomGenerator.cpp\n\tsrc/modules/math/wrap_RandomGenerator.h\n\tsrc/modules/math/wrap_RandomGenerator.lua\n\tsrc/modules/math/wrap_Transform.cpp\n\tsrc/modules/math/wrap_Transform.h\n)\ntarget_link_libraries(love_math PUBLIC\n\tlovedep::Lua\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE System Module in CMake\nDESCRIPTION: Defines the build setup for the LÖVE system module, creating libraries for root components, SDL-specific implementations, and an interface library.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_system_root STATIC\n\tsrc/modules/system/System.cpp\n\tsrc/modules/system/System.h\n\tsrc/modules/system/wrap_System.cpp\n\tsrc/modules/system/wrap_System.h\n)\ntarget_link_libraries(love_system_root PUBLIC\n\tlovedep::Lua\n\tlovedep::SDL\n)\n\nadd_library(love_system_sdl STATIC\n\tsrc/modules/system/sdl/System.cpp\n\tsrc/modules/system/sdl/System.h\n)\ntarget_link_libraries(love_system_sdl PUBLIC\n\tlovedep::SDL\n)\n\nadd_library(love_system INTERFACE)\ntarget_link_libraries(love_system INTERFACE\n\tlove_system_root\n\tlove_system_sdl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Thread Module in CMake\nDESCRIPTION: Sets up the build configuration for the LÖVE thread module, including root components and SDL-specific implementations. It defines libraries for threading functionality.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_thread_root STATIC\n\tsrc/modules/thread/Channel.cpp\n\tsrc/modules/thread/Channel.h\n\t# ... (more thread-related files)\n)\ntarget_link_libraries(love_thread_root PUBLIC\n\tlovedep::Lua\n)\n\nadd_library(love_thread_sdl STATIC\n\tsrc/modules/thread/sdl/Thread.cpp\n\tsrc/modules/thread/sdl/Thread.h\n\tsrc/modules/thread/sdl/threads.cpp\n\tsrc/modules/thread/sdl/threads.h\n)\ntarget_link_libraries(love_thread_sdl PUBLIC\n\tlovedep::SDL\n)\n\nadd_library(love_thread INTERFACE)\ntarget_link_libraries(love_thread INTERFACE\n\tlove_thread_root\n\tlove_thread_sdl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring glslang Library in CMake for LÖVE Engine\nDESCRIPTION: Defines the love_3p_glslang target with all source files from the glslang library, which is used for GLSL shader compilation and SPIR-V generation. Includes platform-specific source selection for Windows/MinGW vs Unix systems.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_41\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_3p_glslang\n\tsrc/libraries/glslang/glslang/build_info.h\n\tsrc/libraries/glslang/glslang/GenericCodeGen/CodeGen.cpp\n\tsrc/libraries/glslang/glslang/GenericCodeGen/Link.cpp\n\tsrc/libraries/glslang/glslang/Include/arrays.h\n\tsrc/libraries/glslang/glslang/Include/BaseTypes.h\n\tsrc/libraries/glslang/glslang/Include/Common.h\n\tsrc/libraries/glslang/glslang/Include/ConstantUnion.h\n\tsrc/libraries/glslang/glslang/Include/InfoSink.h\n\tsrc/libraries/glslang/glslang/Include/InitializeGlobals.h\n\tsrc/libraries/glslang/glslang/Include/intermediate.h\n\tsrc/libraries/glslang/glslang/Include/PoolAlloc.h\n\tsrc/libraries/glslang/glslang/Include/ResourceLimits.h\n\tsrc/libraries/glslang/glslang/Include/ShHandle.h\n\tsrc/libraries/glslang/glslang/Include/SpirvIntrinsics.h\n\tsrc/libraries/glslang/glslang/Include/Types.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/preprocessor/Pp.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/preprocessor/PpAtom.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/preprocessor/PpContext.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/preprocessor/PpContext.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/preprocessor/PpScanner.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/preprocessor/PpTokens.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/preprocessor/PpTokens.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/attribute.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/attribute.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/Constant.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/gl_types.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/glslang_tab.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/glslang_tab.cpp.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/InfoSink.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/Initialize.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/Initialize.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/Intermediate.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/intermOut.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/IntermTraverse.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/iomapper.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/iomapper.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/limits.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/linkValidate.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/LiveTraverser.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/localintermediate.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/parseConst.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/ParseContextBase.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/ParseHelper.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/ParseHelper.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/parseVersions.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/pch.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/PoolAlloc.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/propagateNoContraction.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/propagateNoContraction.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/reflection.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/reflection.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/RemoveTree.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/RemoveTree.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/Scan.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/Scan.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/ScanContext.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/ShaderLang.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/span.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/SpirvIntrinsics.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/SymbolTable.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/SymbolTable.h\n\tsrc/libraries/glslang/glslang/MachineIndependent/Versions.cpp\n\tsrc/libraries/glslang/glslang/MachineIndependent/Versions.h\n\tsrc/libraries/glslang/glslang/OSDependent/osinclude.h\n\tsrc/libraries/glslang/glslang/Public/ResourceLimits.h\n\tsrc/libraries/glslang/glslang/Public/ShaderLang.h\n\tsrc/libraries/glslang/glslang/ResourceLimits/ResourceLimits.cpp\n\tsrc/libraries/glslang/SPIRV/bitutils.h\n\tsrc/libraries/glslang/SPIRV/disassemble.cpp\n\tsrc/libraries/glslang/SPIRV/disassemble.h\n\tsrc/libraries/glslang/SPIRV/doc.cpp\n\tsrc/libraries/glslang/SPIRV/doc.h\n\tsrc/libraries/glslang/SPIRV/GLSL.ext.AMD.h\n\tsrc/libraries/glslang/SPIRV/GLSL.ext.ARM.h\n\tsrc/libraries/glslang/SPIRV/GLSL.ext.EXT.h\n\tsrc/libraries/glslang/SPIRV/GLSL.ext.KHR.h\n\tsrc/libraries/glslang/SPIRV/GLSL.ext.NV.h\n\tsrc/libraries/glslang/SPIRV/GLSL.ext.QCOM.h\n\tsrc/libraries/glslang/SPIRV/GLSL.std.450.h\n\tsrc/libraries/glslang/SPIRV/GlslangToSpv.cpp\n\tsrc/libraries/glslang/SPIRV/GlslangToSpv.h\n\tsrc/libraries/glslang/SPIRV/hex_float.h\n\tsrc/libraries/glslang/SPIRV/InReadableOrder.cpp\n\tsrc/libraries/glslang/SPIRV/Logger.cpp\n\tsrc/libraries/glslang/SPIRV/Logger.h\n\tsrc/libraries/glslang/SPIRV/NonSemanticDebugPrintf.h\n\tsrc/libraries/glslang/SPIRV/NonSemanticShaderDebugInfo100.h\n\tsrc/libraries/glslang/SPIRV/spirv.hpp\n\tsrc/libraries/glslang/SPIRV/SpvBuilder.cpp\n\tsrc/libraries/glslang/SPIRV/SpvBuilder.h\n\tsrc/libraries/glslang/SPIRV/spvIR.h\n\tsrc/libraries/glslang/SPIRV/SpvPostProcess.cpp\n\tsrc/libraries/glslang/SPIRV/SPVRemapper.cpp\n\tsrc/libraries/glslang/SPIRV/SPVRemapper.h\n\tsrc/libraries/glslang/SPIRV/SpvTools.cpp\n\tsrc/libraries/glslang/SPIRV/SpvTools.h\n)\n\nif(MSVC OR MINGW)\n\ttarget_sources(love_3p_glslang PRIVATE\n\t\tsrc/libraries/glslang/glslang/OSDependent/Windows/ossource.cpp\n\t)\nelse()\n\ttarget_sources(love_3p_glslang PRIVATE\n\t\tsrc/libraries/glslang/glslang/OSDependent/Unix/ossource.cpp\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Library Groups\nDESCRIPTION: Sets up project groups for the LÖVE engine libraries and dependencies using custom CMake functions.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\nlove_group_projects(NAME \"liblove\" NESTED TARGETS ${LIBLOVE_DEPENDENCIES})\nlove_group_projects(NAME \"liblove/libraries\" NESTED TARGETS ${LIBLOVE_LIBRARIES})\nlove_group_projects(NAME \"liblove\" TARGETS liblove ${LOVE_EXTRA_DEPENDECIES})\n\nlove_group_projects(NAME \"lovedep\" TARGETS lovedep::SDL lovedep::Freetype lovedep::Harfbuzz lovedep::OpenAL lovedep::Modplug lovedep::Theora lovedep::Vorbis lovedep::Ogg lovedep::Zlib lovedep::Lua)\nlove_group_projects(NAME \"lovedep\" TARGETS lua51 alcommon al-excommon harfbuzz-subset zlib)\n```\n\n----------------------------------------\n\nTITLE: DLL Movement Helper Function\nDESCRIPTION: Defines a helper function to move DLLs to the correct location post-build, essential for Windows builds.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(post_step_move_dll ARG_POST_TARGET ARG_TARGET_OR_FILE)\n\tif(TARGET ${ARG_TARGET_OR_FILE})\n\t\tadd_custom_command(TARGET ${ARG_POST_TARGET} POST_BUILD\n\t\t\tCOMMAND ${CMAKE_COMMAND} -E copy\n\t\t\t$<TARGET_FILE:${ARG_TARGET_OR_FILE}>\n\t\t\t${CMAKE_CURRENT_BINARY_DIR}/$<CONFIGURATION>/$<TARGET_FILE_NAME:${ARG_TARGET_OR_FILE}>)\n\telse()\n\t\tget_filename_component(TEMP_FILENAME ${ARG_TARGET_OR_FILE} NAME)\n\t\tadd_custom_command(TARGET ${ARG_POST_TARGET} POST_BUILD\n\t\t\tCOMMAND ${CMAKE_COMMAND} -E copy\n\t\t\t${ARG_TARGET_OR_FILE}\n\t\t\t${CMAKE_CURRENT_BINARY_DIR}/$<CONFIGURATION>/${TEMP_FILENAME})\n\tendif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Main Library Build\nDESCRIPTION: Sets up the main LÖVE library build configuration including dependencies, visibility settings, and linking with all the component libraries. Configures build flags for MinGW compilation with UTF-16 support.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_47\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(liblove SHARED\n\tsrc/modules/love/love.cpp\n\tsrc/modules/love/love.h\n\t# ... more files ...\n)\nset_target_properties(liblove PROPERTIES\n\tC_VISIBILITY_PRESET hidden\n\tCXX_VISIBILITY_PRESET hidden\n\tVISIBILITY_INLINES_HIDDEN ON\n\tLIBRARY_OUTPUT_NAME \"${LOVE_LIB_NAME}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Khronos Validation Layer Settings\nDESCRIPTION: Comprehensive configuration settings for the Vulkan Khronos validation layer, including core validation, shader checks, synchronization, and GPU-based validation features. Each setting controls different aspects of validation behavior and debugging capabilities.\nSOURCE: https://github.com/love2d/love/blob/main/testing/resources/vk_layer_settings.txt#2025-04-19_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nkhronos_validation.fine_grained_locking = true\nkhronos_validation.validate_core = true\nkhronos_validation.check_image_layout = true\nkhronos_validation.check_command_buffer = true\nkhronos_validation.check_object_in_use = true\nkhronos_validation.check_query = true\nkhronos_validation.check_shaders = true\nkhronos_validation.check_shaders_caching = true\nkhronos_validation.unique_handles = true\nkhronos_validation.object_lifetime = true\nkhronos_validation.stateless_param = true\nkhronos_validation.thread_safety = true\nkhronos_validation.validate_sync = true\nkhronos_validation.sync_queue_submit = true\nkhronos_validation.validate_gpu_based = GPU_BASED_NONE\nkhronos_validation.gpuav_descriptor_checks = true\nkhronos_validation.gpuav_warn_on_robust_oob = true\nkhronos_validation.gpuav_buffer_address_oob = true\nkhronos_validation.gpuav_max_buffer_device_addresses = 10000\nkhronos_validation.gpuav_validate_ray_query = true\nkhronos_validation.gpuav_cache_instrumented_shaders = true\nkhronos_validation.gpuav_select_instrumented_shaders = false\nkhronos_validation.gpuav_indirect_draws_buffers = true\nkhronos_validation.indirect_dispatches = true\nkhronos_validation.indirect_trace_rays = true\nkhronos_validation.gpuav_buffer_copies = true\nkhronos_validation.validate_best_practices = true\nkhronos_validation.validate_best_practices_arm = false\n```\n\n----------------------------------------\n\nTITLE: Setting Up LÖVE Executable Targets\nDESCRIPTION: Configures the main LÖVE executable target with platform-specific settings for Android and desktop platforms.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\nif(ANDROID)\n\tadd_library(love SHARED)\n\ttarget_link_libraries(liblove android)\nelse()\n\tadd_executable(love WIN32)\nendif()\n\ntarget_sources(love PRIVATE src/love.cpp)\ntarget_link_libraries(love liblove)\nset_target_properties(love PROPERTIES\n\tC_VISIBILITY_PRESET hidden\n\tCXX_VISIBILITY_PRESET hidden\n\tVISIBILITY_INLINES_HIDDEN ON\n\tOUTPUT_NAME ${LOVE_EXE_NAME})\n```\n\n----------------------------------------\n\nTITLE: Configuring Khronos Vulkan Validation Layer Settings\nDESCRIPTION: This configuration sets various options for the Khronos Vulkan validation layer, including GPU-specific best practices, debug actions, logging, and message filtering. It controls validation behavior for different GPU vendors and defines how validation messages are handled and reported.\nSOURCE: https://github.com/love2d/love/blob/main/testing/resources/vk_layer_settings.txt#2025-04-19_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# Outputs warnings for spec-conforming but non-ideal code on AMD GPUs.\nkhronos_validation.validate_best_practices_amd = false\n\n# IMG-specific best practices\n# =====================\n# <LayerIdentifier>.validate_best_practices_img\n# Outputs warnings for spec-conforming but non-ideal code on Imagination GPUs.\nkhronos_validation.validate_best_practices_img = false\n\n# NVIDIA-specific best practices\n# =====================\n# <LayerIdentifier>.validate_best_practices_nvidia\n# Outputs warnings for spec-conforming but non-ideal code on NVIDIA GPUs.\nkhronos_validation.validate_best_practices_nvidia = false\n\n# Debug Action\n# =====================\n# <LayerIdentifier>.debug_action\n# Specifies what action is to be taken when a layer reports information\nkhronos_validation.debug_action = VK_DBG_LAYER_ACTION_LOG_MSG\n\n# Log Filename\n# =====================\n# <LayerIdentifier>.log_filename\n# Specifies the output filename\nkhronos_validation.log_filename = stdout\n\n# Message Severity\n# =====================\n# <LayerIdentifier>.report_flags\n# Comma-delineated list of options specifying the types of messages to be\n# reported\nkhronos_validation.report_flags = error\n\n# Limit Duplicated Messages\n# =====================\n# <LayerIdentifier>.enable_message_limit\n# Enable limiting of duplicate messages.\nkhronos_validation.enable_message_limit = false\n\n# Max Duplicated Messages\n# =====================\n# <LayerIdentifier>.duplicate_message_limit\n# Maximum number of times any single validation message should be reported.\n#khronos_validation.duplicate_message_limit = 10\n\n# Mute Message VUIDs\n# =====================\n# <LayerIdentifier>.message_id_filter\n# List of VUIDs and VUID identifers which are to be IGNORED by the validation\n# layer\nkhronos_validation.message_id_filter = \n\n# Display Application Name\n# =====================\n# <LayerIdentifier>.message_format_display_application_name\n# Useful when running multiple instances to know which instance the message is\n# from.\nkhronos_validation.message_format_display_application_name = false\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Build Options\nDESCRIPTION: Sets up build options for LÖVE, including executable names, target platform, and LuaJIT support.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LOVE_EXE_NAME love CACHE STRING \"The name of the executable, usually 'love'\")\n\nset(LOVE_DEFAULT_LIB_NAME liblove)\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n\tset(LOVE_DEFAULT_LIB_NAME \"${LOVE_EXE_NAME}-${LOVE_VERSION_STR}\")\nendif()\n\nset(LOVE_LIB_NAME ${LOVE_DEFAULT_LIB_NAME} CACHE STRING \"The name of the lua library, usually 'liblove' or 'love'\")\nset(LOVE_CONSOLE_EXE_NAME \"${LOVE_EXE_NAME}c\" CACHE STRING \"The name of the console version of the executable, usually 'lovec'\")\n\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\tset(LOVE_X64 TRUE)\n\tset(LOVE_TARGET_PLATFORM x64)\nelse()\n\tset(LOVE_X86 TRUE)\n\tset(LOVE_TARGET_PLATFORM x86)\nendif()\n\nif(APPLE)\n\tset(LOVE_DEFAULT_JIT FALSE)\nelse()\n\tset(LOVE_DEFAULT_JIT TRUE)\nendif()\n\noption(LOVE_JIT \"Use LuaJIT\" ${LOVE_DEFAULT_JIT})\n```\n\n----------------------------------------\n\nTITLE: Setting Up LÖVE Dependencies\nDESCRIPTION: Defines and configures the required dependencies for LÖVE, including SDL, Freetype, OpenAL, and others.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(lovedep::SDL INTERFACE IMPORTED)\nadd_library(lovedep::Freetype INTERFACE IMPORTED)\nadd_library(lovedep::Harfbuzz INTERFACE IMPORTED)\nadd_library(lovedep::OpenAL INTERFACE IMPORTED)\nadd_library(lovedep::Modplug INTERFACE IMPORTED)\nadd_library(lovedep::Theora INTERFACE IMPORTED)\nadd_library(lovedep::Vorbis INTERFACE IMPORTED)\nadd_library(lovedep::Ogg INTERFACE IMPORTED)\nadd_library(lovedep::Zlib INTERFACE IMPORTED)\nadd_library(lovedep::Lua INTERFACE IMPORTED)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for LÖVE\nDESCRIPTION: Sets up the CMake project for LÖVE, including minimum version, project name, and basic configuration options.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n\nproject(love)\n\nset(CMAKE_MODULE_PATH \"${love_SOURCE_DIR}/extra/cmake\" ${CMAKE_MODULE_PATH})\nset(CMAKE_POSITION_INDEPENDENT_CODE TRUE) # Needed for shared libs on Linux. (-fPIC).\nset(CMAKE_CXX_STANDARD 17)\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\t# Allow grouping projects in Visual Studio\n```\n\n----------------------------------------\n\nTITLE: Creating Main Graphics Interface Library in LÖVE\nDESCRIPTION: Creates an interface library that combines the core graphics library with the OpenGL implementation, serving as the main entry point for the graphics module.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_graphics INTERFACE)\ntarget_link_libraries(love_graphics INTERFACE\n\tlove_graphics_root\n\tlove_graphics_opengl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Module in LÖVE Engine\nDESCRIPTION: Defines the core image module library with essential components for handling image data and various image formats. Links against Lua dependency.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_image_root STATIC\n\tsrc/modules/image/CompressedImageData.cpp\n\tsrc/modules/image/CompressedImageData.h\n\tsrc/modules/image/CompressedSlice.cpp\n\tsrc/modules/image/CompressedSlice.h\n\tsrc/modules/image/FormatHandler.cpp\n\tsrc/modules/image/FormatHandler.h\n\tsrc/modules/image/Image.cpp\n\tsrc/modules/image/Image.h\n\tsrc/modules/image/ImageData.cpp\n\tsrc/modules/image/ImageData.h\n\tsrc/modules/image/ImageDataBase.cpp\n\tsrc/modules/image/ImageDataBase.h\n\tsrc/modules/image/wrap_CompressedImageData.cpp\n\tsrc/modules/image/wrap_CompressedImageData.h\n\tsrc/modules/image/wrap_Image.cpp\n\tsrc/modules/image/wrap_Image.h\n\tsrc/modules/image/wrap_ImageData.cpp\n\tsrc/modules/image/wrap_ImageData.h\n\tsrc/modules/image/wrap_ImageData.lua\n)\ntarget_link_libraries(love_image_root PUBLIC\n\tlovedep::Lua\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Font Module in CMake\nDESCRIPTION: Sets up the font module for LÖVE which handles text rendering, font loading, and glyph management. Includes both core functionality and FreeType/Harfbuzz implementation.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_font_root STATIC\n\tsrc/modules/font/BMFontRasterizer.cpp\n\tsrc/modules/font/BMFontRasterizer.h\n\tsrc/modules/font/Font.cpp\n\tsrc/modules/font/Font.h\n\tsrc/modules/font/GenericShaper.cpp\n\tsrc/modules/font/GenericShaper.h\n\tsrc/modules/font/GlyphData.cpp\n\tsrc/modules/font/GlyphData.h\n\tsrc/modules/font/ImageRasterizer.cpp\n\tsrc/modules/font/ImageRasterizer.h\n\tsrc/modules/font/Rasterizer.cpp\n\tsrc/modules/font/Rasterizer.h\n\tsrc/modules/font/TextShaper.cpp\n\tsrc/modules/font/TextShaper.h\n\tsrc/modules/font/TrueTypeRasterizer.cpp\n\tsrc/modules/font/TrueTypeRasterizer.h\n\tsrc/modules/font/wrap_Font.cpp\n\tsrc/modules/font/wrap_Font.h\n\tsrc/modules/font/wrap_GlyphData.cpp\n\tsrc/modules/font/wrap_GlyphData.h\n\tsrc/modules/font/wrap_Rasterizer.cpp\n\tsrc/modules/font/wrap_Rasterizer.h\n)\ntarget_link_libraries(love_font_root PUBLIC\n\tlovedep::Lua\n\tlovedep::Freetype\n)\n\nadd_library(love_font_freetype STATIC\n\tsrc/modules/font/freetype/Font.cpp\n\tsrc/modules/font/freetype/Font.h\n\tsrc/modules/font/freetype/HarfbuzzShaper.cpp\n\tsrc/modules/font/freetype/HarfbuzzShaper.h\n\tsrc/modules/font/freetype/TrueTypeRasterizer.cpp\n\tsrc/modules/font/freetype/TrueTypeRasterizer.h\n)\ntarget_link_libraries(love_font_freetype PUBLIC\n\tlovedep::Freetype\n\tlovedep::Harfbuzz\n)\n\nadd_library(love_font INTERFACE)\ntarget_link_libraries(love_font INTERFACE\n\tlove_font_root\n\tlove_font_freetype\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Audio Module in CMake\nDESCRIPTION: Sets up the audio libraries for LÖVE including the core audio functionality, NULL implementation, and OpenAL implementation along with their respective dependencies.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_audio_root STATIC\n\tsrc/modules/audio/Audio.cpp\n\tsrc/modules/audio/Audio.h\n\tsrc/modules/audio/Source.cpp\n\tsrc/modules/audio/Source.h\n\tsrc/modules/audio/RecordingDevice.cpp\n\tsrc/modules/audio/RecordingDevice.h\n\tsrc/modules/audio/Filter.cpp\n\tsrc/modules/audio/Filter.h\n\tsrc/modules/audio/Effect.cpp\n\tsrc/modules/audio/Effect.h\n\tsrc/modules/audio/wrap_Audio.cpp\n\tsrc/modules/audio/wrap_Audio.h\n\tsrc/modules/audio/wrap_Source.cpp\n\tsrc/modules/audio/wrap_Source.h\n\tsrc/modules/audio/wrap_RecordingDevice.cpp\n\tsrc/modules/audio/wrap_RecordingDevice.h\n)\ntarget_link_libraries(love_audio_root PUBLIC\n\tlovedep::Lua\n\tlovedep::OpenAL\n)\n\nadd_library(love_audio_null STATIC\n\tsrc/modules/audio/null/Audio.cpp\n\tsrc/modules/audio/null/Audio.h\n\tsrc/modules/audio/null/Source.cpp\n\tsrc/modules/audio/null/Source.h\n\tsrc/modules/audio/null/RecordingDevice.cpp\n\tsrc/modules/audio/null/RecordingDevice.h\n)\n\nadd_library(love_audio_openal STATIC\n\tsrc/modules/audio/openal/Audio.cpp\n\tsrc/modules/audio/openal/Audio.h\n\tsrc/modules/audio/openal/Pool.cpp\n\tsrc/modules/audio/openal/Pool.h\n\tsrc/modules/audio/openal/Source.cpp\n\tsrc/modules/audio/openal/Source.h\n\tsrc/modules/audio/openal/RecordingDevice.cpp\n\tsrc/modules/audio/openal/RecordingDevice.h\n\tsrc/modules/audio/openal/Filter.cpp\n\tsrc/modules/audio/openal/Filter.h\n\tsrc/modules/audio/openal/Effect.cpp\n\tsrc/modules/audio/openal/Effect.h\n)\ntarget_link_libraries(love_audio_openal PUBLIC\n\tlovedep::OpenAL\n)\n\nadd_library(love_audio INTERFACE)\ntarget_link_libraries(love_audio INTERFACE\n\tlove_audio_root\n\tlove_audio_null\n\tlove_audio_openal\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Physics Module in CMake\nDESCRIPTION: Sets up the build configuration for the LÖVE physics module, including Box2D integration. It defines libraries for root physics components and Box2D-specific implementations.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_physics_root STATIC\n\tsrc/modules/physics/Body.cpp\n\tsrc/modules/physics/Body.h\n\tsrc/modules/physics/Joint.cpp\n\tsrc/modules/physics/Joint.h\n\tsrc/modules/physics/Shape.cpp\n\tsrc/modules/physics/Shape.h\n)\n\nadd_library(love_physics_box2d STATIC\n\tsrc/modules/physics/box2d/Body.cpp\n\tsrc/modules/physics/box2d/Body.h\n\t# ... (many more Box2D-related files)\n)\ntarget_link_libraries(love_physics_box2d PUBLIC\n\tlovedep::Lua\n)\n\nadd_library(love_physics INTERFACE)\ntarget_link_libraries(love_physics INTERFACE\n\tlove_physics_root\n\tlove_physics_box2d\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Window Module Libraries with CMake\nDESCRIPTION: Sets up the build configuration for LÖVE's window module, including core window implementation and SDL-specific components. It defines source files and required dependencies for creating window interfaces.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_window_root STATIC\n\tsrc/modules/window/Window.cpp\n\tsrc/modules/window/Window.h\n\tsrc/modules/window/wrap_Window.cpp\n\tsrc/modules/window/wrap_Window.h\n)\ntarget_link_libraries(love_window_root PUBLIC\n\tlovedep::Lua\n\tlovedep::SDL\n)\n\nadd_library(love_window_sdl STATIC\n\tsrc/modules/window/sdl/Window.cpp\n\tsrc/modules/window/sdl/Window.h\n)\ntarget_link_libraries(love_window_sdl PUBLIC\n\tlovedep::SDL\n)\n\nadd_library(love_window INTERFACE)\ntarget_link_libraries(love_window INTERFACE\n\tlove_window_root\n\tlove_window_sdl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Video Module Libraries with CMake\nDESCRIPTION: Defines the build configuration for LÖVE's video module, consisting of the core video implementation and Theora-specific components. It specifies source files and dependencies for each component library.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_video_root STATIC\n\tsrc/modules/video/Video.h\n\tsrc/modules/video/VideoStream.cpp\n\tsrc/modules/video/VideoStream.h\n\tsrc/modules/video/wrap_Video.cpp\n\tsrc/modules/video/wrap_Video.h\n\tsrc/modules/video/wrap_VideoStream.cpp\n\tsrc/modules/video/wrap_VideoStream.h\n)\ntarget_link_libraries(love_video_root PUBLIC\n\tlovedep::Lua\n\tlovedep::Theora\n\tlovedep::Ogg\n)\n\nadd_library(love_video_theora STATIC\n\tsrc/modules/video/theora/Video.cpp\n\tsrc/modules/video/theora/Video.h\n\tsrc/modules/video/theora/OggDemuxer.cpp\n\tsrc/modules/video/theora/OggDemuxer.h\n\tsrc/modules/video/theora/TheoraVideoStream.cpp\n\tsrc/modules/video/theora/TheoraVideoStream.h\n)\ntarget_link_libraries(love_video_theora PUBLIC\n\tlovedep::Theora\n\tlovedep::Ogg\n)\n\nadd_library(love_video INTERFACE)\ntarget_link_libraries(love_video INTERFACE\n\tlove_video_root\n\tlove_video_theora\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Sound Module in CMake\nDESCRIPTION: Sets up the build configuration for the LÖVE sound module, including root components and Lullaby-specific implementations. It defines dependencies on various audio libraries.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_sound_root STATIC\n\tsrc/modules/sound/Decoder.cpp\n\tsrc/modules/sound/Decoder.h\n\t# ... (more sound-related files)\n)\ntarget_link_libraries(love_sound_root PUBLIC\n\tlovedep::Lua\n)\n\nadd_library(love_sound_lullaby STATIC\n\tsrc/modules/sound/lullaby/FLACDecoder.cpp\n\tsrc/modules/sound/lullaby/FLACDecoder.h\n\t# ... (more Lullaby-specific files)\n)\ntarget_link_libraries(love_sound_lullaby PUBLIC\n\tlovedep::Modplug\n\tlovedep::Vorbis\n\tlovedep::Ogg\n)\n\nadd_library(love_sound INTERFACE)\ntarget_link_libraries(love_sound INTERFACE\n\tlove_sound_root\n\tlove_sound_lullaby\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Mouse Module in CMake\nDESCRIPTION: Defines the build configuration for the LÖVE mouse module, including source files and dependencies. It creates separate libraries for root, SDL-specific, and interface components.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_mouse_root STATIC\n\tsrc/modules/mouse/Cursor.cpp\n\tsrc/modules/mouse/Cursor.h\n\tsrc/modules/mouse/Mouse.h\n\tsrc/modules/mouse/wrap_Cursor.cpp\n\tsrc/modules/mouse/wrap_Cursor.h\n\tsrc/modules/mouse/wrap_Mouse.cpp\n\tsrc/modules/mouse/wrap_Mouse.h\n)\ntarget_link_libraries(love_mouse_root PUBLIC\n\tlovedep::Lua\n\tlovedep::SDL\n)\n\nadd_library(love_mouse_sdl STATIC\n\tsrc/modules/mouse/sdl/Cursor.cpp\n\tsrc/modules/mouse/sdl/Cursor.h\n\tsrc/modules/mouse/sdl/Mouse.cpp\n\tsrc/modules/mouse/sdl/Mouse.h\n)\ntarget_link_libraries(love_mouse_sdl PUBLIC\n\tlovedep::SDL\n)\n\nadd_library(love_mouse INTERFACE)\ntarget_link_libraries(love_mouse INTERFACE\n\tlove_mouse_root\n\tlove_mouse_sdl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Module Core Library for LÖVE\nDESCRIPTION: Defines the core keyboard module static library with base classes for keyboard functionality and Lua bindings. Links against both Lua and SDL.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_keyboard_root STATIC\n\tsrc/modules/keyboard/Keyboard.cpp\n\tsrc/modules/keyboard/Keyboard.h\n\tsrc/modules/keyboard/wrap_Keyboard.cpp\n\tsrc/modules/keyboard/wrap_Keyboard.h\n)\ntarget_link_libraries(love_keyboard_root PUBLIC\n\tlovedep::Lua\n\tlovedep::SDL\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Joystick Module Core Library for LÖVE\nDESCRIPTION: Defines the core joystick module static library with base classes for joystick functionality and Lua bindings.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_joystick_root STATIC\n\tsrc/modules/joystick/Joystick.cpp\n\tsrc/modules/joystick/Joystick.h\n\tsrc/modules/joystick/JoystickModule.h\n\tsrc/modules/joystick/wrap_Joystick.cpp\n\tsrc/modules/joystick/wrap_Joystick.h\n\tsrc/modules/joystick/wrap_JoystickModule.cpp\n\tsrc/modules/joystick/wrap_JoystickModule.h\n)\ntarget_link_libraries(love_joystick_root PUBLIC\n\tlovedep::Lua\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Event Module in CMake\nDESCRIPTION: Sets up the event module for LÖVE with both the core functionality and SDL-specific implementation. Handles system events and input events for the game engine.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_event_root STATIC\n\tsrc/modules/event/Event.cpp\n\tsrc/modules/event/Event.h\n\tsrc/modules/event/wrap_Event.cpp\n\tsrc/modules/event/wrap_Event.h\n\tsrc/modules/event/wrap_Event.lua\n)\ntarget_link_libraries(love_event_root PUBLIC\n\tlovedep::Lua\n\tlovedep::SDL\n)\n\nadd_library(love_event_sdl STATIC\n\tsrc/modules/event/sdl/Event.cpp\n\tsrc/modules/event/sdl/Event.h\n)\ntarget_link_libraries(love_event_sdl PUBLIC\n\tlovedep::SDL\n)\n\nadd_library(love_event INTERFACE)\ntarget_link_libraries(love_event INTERFACE\n\tlove_event_root\n\tlove_event_sdl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Filesystem Module in CMake\nDESCRIPTION: Defines the filesystem module for LÖVE which handles file operations, with both a core implementation and a PhysicsFS-specific implementation. Includes Android-specific handling.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_filesystem_root STATIC\n\tsrc/modules/filesystem/File.cpp\n\tsrc/modules/filesystem/File.h\n\tsrc/modules/filesystem/FileData.cpp\n\tsrc/modules/filesystem/FileData.h\n\tsrc/modules/filesystem/Filesystem.cpp\n\tsrc/modules/filesystem/Filesystem.h\n\tsrc/modules/filesystem/NativeFile.cpp\n\tsrc/modules/filesystem/NativeFile.h\n\tsrc/modules/filesystem/wrap_File.cpp\n\tsrc/modules/filesystem/wrap_File.h\n\tsrc/modules/filesystem/wrap_FileData.cpp\n\tsrc/modules/filesystem/wrap_FileData.h\n\tsrc/modules/filesystem/wrap_Filesystem.cpp\n\tsrc/modules/filesystem/wrap_Filesystem.h\n\tsrc/modules/filesystem/wrap_NativeFile.cpp\n\tsrc/modules/filesystem/wrap_NativeFile.h\n)\ntarget_link_libraries(love_filesystem_root PUBLIC\n\tlovedep::Lua\n\tlovedep::SDL\n)\n\nadd_library(love_filesystem_physfs STATIC\n\tsrc/modules/filesystem/physfs/File.cpp\n\tsrc/modules/filesystem/physfs/File.h\n\tsrc/modules/filesystem/physfs/Filesystem.cpp\n\tsrc/modules/filesystem/physfs/Filesystem.h\n\tsrc/modules/filesystem/physfs/PhysfsIo.h\n\tsrc/modules/filesystem/physfs/PhysfsIo.cpp\n)\nif(ANDROID)\n\ttarget_link_libraries(love_filesystem_physfs PUBLIC\n\t\tlovedep::SDL\n\t)\nendif()\n\nadd_library(love_filesystem INTERFACE)\ntarget_link_libraries(love_filesystem INTERFACE\n\tlove_filesystem_root\n\tlove_filesystem_physfs\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Data Module in CMake\nDESCRIPTION: Defines the data module for LÖVE which handles binary data manipulation, compression, hashing, and other data-related functionality. Links against Lua and Zlib dependencies.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_data STATIC\n\tsrc/modules/data/ByteData.cpp\n\tsrc/modules/data/ByteData.h\n\tsrc/modules/data/CompressedData.cpp\n\tsrc/modules/data/CompressedData.h\n\tsrc/modules/data/Compressor.cpp\n\tsrc/modules/data/Compressor.h\n\tsrc/modules/data/DataModule.cpp\n\tsrc/modules/data/DataModule.h\n\tsrc/modules/data/DataStream.cpp\n\tsrc/modules/data/DataStream.h\n\tsrc/modules/data/DataView.cpp\n\tsrc/modules/data/DataView.h\n\tsrc/modules/data/HashFunction.cpp\n\tsrc/modules/data/HashFunction.h\n\tsrc/modules/data/wrap_ByteData.cpp\n\tsrc/modules/data/wrap_ByteData.h\n\tsrc/modules/data/wrap_CompressedData.cpp\n\tsrc/modules/data/wrap_CompressedData.h\n\tsrc/modules/data/wrap_Data.cpp\n\tsrc/modules/data/wrap_Data.h\n\tsrc/modules/data/wrap_Data.lua\n\tsrc/modules/data/wrap_DataModule.cpp\n\tsrc/modules/data/wrap_DataModule.h\n\tsrc/modules/data/wrap_DataView.cpp\n\tsrc/modules/data/wrap_DataView.h\n)\ntarget_link_libraries(love_data PUBLIC\n\tlovedep::Lua\n\tlovedep::Zlib\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ENet Networking Library with CMake for LÖVE\nDESCRIPTION: Defines the build configuration for the ENet networking library used by LÖVE for UDP-based communication. It includes platform-specific implementations and links against Lua for scripting integration.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_39\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_3p_enet\n\tsrc/libraries/enet/enet.cpp\n\tsrc/libraries/enet/lua-enet.h\n\tsrc/libraries/enet/libenet/callbacks.c\n\tsrc/libraries/enet/libenet/compress.c\n\tsrc/libraries/enet/libenet/host.c\n\tsrc/libraries/enet/libenet/list.c\n\tsrc/libraries/enet/libenet/packet.c\n\tsrc/libraries/enet/libenet/peer.c\n\tsrc/libraries/enet/libenet/protocol.c\n\tsrc/libraries/enet/libenet/unix.c\n\tsrc/libraries/enet/libenet/win32.c\n\tsrc/libraries/enet/libenet/include/enet/enet.h\n\tsrc/libraries/enet/libenet/include/enet/list.h\n\tsrc/libraries/enet/libenet/include/enet/protocol.h\n\tsrc/libraries/enet/libenet/include/enet/time.h\n\tsrc/libraries/enet/libenet/include/enet/types.h\n\tsrc/libraries/enet/libenet/include/enet/unix.h\n\tsrc/libraries/enet/libenet/include/enet/utility.h\n\tsrc/libraries/enet/libenet/include/enet/win32.h\n)\nlove_disable_warnings(love_3p_enet)\ntarget_link_libraries(love_3p_enet lovedep::Lua)\ntarget_include_directories(love_3p_enet PUBLIC src/libraries/enet/libenet/include)\nif(MINGW)\n\ttarget_link_libraries(love_3p_enet winmm.a)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring LuaHTTPS Library Build\nDESCRIPTION: Defines and configures the build for the LuaHTTPS library including platform-specific source files and dependencies. Includes special handling for Apple platforms with Objective-C code and Windows-specific library linkage.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_46\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_3p_luahttps\n\tsrc/libraries/luahttps/src/android/AndroidClient.cpp\n\t# ... more files ...\n)\ntarget_link_libraries(love_3p_luahttps lovedep::Lua)\n\nif (APPLE)\n\ttarget_sources(love_3p_luahttps PRIVATE\n\t\tsrc/libraries/luahttps/src/apple/NSURLClient.mm\n\t\tsrc/libraries/luahttps/src/apple/NSURLClient.h\n\t)\n\ttarget_compile_options(love_3p_luahttps PRIVATE -fobjc-arc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring luasocket Library in CMake for LÖVE Engine\nDESCRIPTION: Defines the love_3p_luasocket target with all required source files. Includes platform-specific configurations for Windows/MinGW vs Unix systems and links against the Lua dependency.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_44\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_3p_luasocket\n\tsrc/libraries/luasocket/luasocket.cpp\n\tsrc/libraries/luasocket/luasocket.h\n\tsrc/libraries/luasocket/libluasocket/auxiliar.c\n\tsrc/libraries/luasocket/libluasocket/auxiliar.h\n\tsrc/libraries/luasocket/libluasocket/buffer.c\n\tsrc/libraries/luasocket/libluasocket/buffer.h\n\tsrc/libraries/luasocket/libluasocket/compat.c\n\tsrc/libraries/luasocket/libluasocket/compat.h\n\tsrc/libraries/luasocket/libluasocket/except.c\n\tsrc/libraries/luasocket/libluasocket/except.h\n\tsrc/libraries/luasocket/libluasocket/ftp.lua.h\n\tsrc/libraries/luasocket/libluasocket/headers.lua.h\n\tsrc/libraries/luasocket/libluasocket/http.lua.h\n\tsrc/libraries/luasocket/libluasocket/inet.c\n\tsrc/libraries/luasocket/libluasocket/inet.h\n\tsrc/libraries/luasocket/libluasocket/io.c\n\tsrc/libraries/luasocket/libluasocket/io.h\n\tsrc/libraries/luasocket/libluasocket/ltn12.lua.h\n\tsrc/libraries/luasocket/libluasocket/luasocket.c\n\tsrc/libraries/luasocket/libluasocket/luasocket.h\n\tsrc/libraries/luasocket/libluasocket/mbox.lua.h\n\tsrc/libraries/luasocket/libluasocket/mime.c\n\tsrc/libraries/luasocket/libluasocket/mime.h\n\tsrc/libraries/luasocket/libluasocket/mime.lua.h\n\tsrc/libraries/luasocket/libluasocket/options.c\n\tsrc/libraries/luasocket/libluasocket/options.h\n\tsrc/libraries/luasocket/libluasocket/pierror.h\n\tsrc/libraries/luasocket/libluasocket/select.c\n\tsrc/libraries/luasocket/libluasocket/select.h\n\tsrc/libraries/luasocket/libluasocket/smtp.lua.h\n\tsrc/libraries/luasocket/libluasocket/socket.h\n\tsrc/libraries/luasocket/libluasocket/socket.lua.h\n\tsrc/libraries/luasocket/libluasocket/tcp.c\n\tsrc/libraries/luasocket/libluasocket/tcp.h\n\tsrc/libraries/luasocket/libluasocket/timeout.c\n\tsrc/libraries/luasocket/libluasocket/timeout.h\n\tsrc/libraries/luasocket/libluasocket/tp.lua.h\n\tsrc/libraries/luasocket/libluasocket/udp.c\n\tsrc/libraries/luasocket/libluasocket/udp.h\n\tsrc/libraries/luasocket/libluasocket/url.lua.h\n\tsrc/libraries/luasocket/libluasocket/unix.c\n\tsrc/libraries/luasocket/libluasocket/unix.h\n\tsrc/libraries/luasocket/libluasocket/unixdgram.c\n\tsrc/libraries/luasocket/libluasocket/unixdgram.h\n\tsrc/libraries/luasocket/libluasocket/unixstream.c\n\tsrc/libraries/luasocket/libluasocket/unixstream.h\n)\ntarget_link_libraries(love_3p_luasocket lovedep::Lua)\nlove_disable_warnings(love_3p_luasocket)\n\nif(MSVC OR MINGW)\n\ttarget_sources(love_3p_luasocket PRIVATE\n\t\tsrc/libraries/luasocket/libluasocket/wsocket.c\n\t\tsrc/libraries/luasocket/libluasocket/wsocket.h\n\t)\n\n\ttarget_link_libraries(love_3p_luasocket\n\t\tws2_32${WIN32_LIB_EXT}\n\t)\nelse()\n\ttarget_sources(love_3p_luasocket PRIVATE\n\t\tsrc/libraries/luasocket/libluasocket/serial.c\n\t\tsrc/libraries/luasocket/libluasocket/usocket.c\n\t\tsrc/libraries/luasocket/libluasocket/usocket.h\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Box2D Physics Library with CMake for LÖVE\nDESCRIPTION: Defines the build configuration for the Box2D physics engine integrated into LÖVE. It includes all Box2D source files for collision detection, dynamics simulation, and math utilities.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_3p_box2d\n\tsrc/libraries/box2d/Box2D.h\n\tsrc/libraries/box2d/collision/b2_broad_phase.cpp\n\tsrc/libraries/box2d/collision/b2_chain_shape.cpp\n\tsrc/libraries/box2d/collision/b2_circle_shape.cpp\n\tsrc/libraries/box2d/collision/b2_collide_circle.cpp\n\tsrc/libraries/box2d/collision/b2_collide_edge.cpp\n\tsrc/libraries/box2d/collision/b2_collide_polygon.cpp\n\tsrc/libraries/box2d/collision/b2_collision.cpp\n\tsrc/libraries/box2d/collision/b2_distance.cpp\n\tsrc/libraries/box2d/collision/b2_dynamic_tree.cpp\n\tsrc/libraries/box2d/collision/b2_edge_shape.cpp\n\tsrc/libraries/box2d/collision/b2_polygon_shape.cpp\n\tsrc/libraries/box2d/collision/b2_time_of_impact.cpp\n\tsrc/libraries/box2d/common/b2_block_allocator.cpp\n\tsrc/libraries/box2d/common/b2_draw.cpp\n\tsrc/libraries/box2d/common/b2_math.cpp\n\tsrc/libraries/box2d/common/b2_settings.cpp\n\tsrc/libraries/box2d/common/b2_stack_allocator.cpp\n\tsrc/libraries/box2d/common/b2_timer.cpp\n\tsrc/libraries/box2d/dynamics/b2_body.cpp\n\tsrc/libraries/box2d/dynamics/b2_chain_circle_contact.cpp\n\tsrc/libraries/box2d/dynamics/b2_chain_circle_contact.h\n\tsrc/libraries/box2d/dynamics/b2_chain_polygon_contact.cpp\n\tsrc/libraries/box2d/dynamics/b2_chain_polygon_contact.h\n\tsrc/libraries/box2d/dynamics/b2_circle_contact.cpp\n\tsrc/libraries/box2d/dynamics/b2_circle_contact.h\n\tsrc/libraries/box2d/dynamics/b2_contact.cpp\n\tsrc/libraries/box2d/dynamics/b2_contact_manager.cpp\n\tsrc/libraries/box2d/dynamics/b2_contact_solver.cpp\n\tsrc/libraries/box2d/dynamics/b2_contact_solver.h\n\tsrc/libraries/box2d/dynamics/b2_distance_joint.cpp\n\tsrc/libraries/box2d/dynamics/b2_edge_circle_contact.cpp\n\tsrc/libraries/box2d/dynamics/b2_edge_circle_contact.h\n\tsrc/libraries/box2d/dynamics/b2_edge_polygon_contact.cpp\n\tsrc/libraries/box2d/dynamics/b2_edge_polygon_contact.h\n\tsrc/libraries/box2d/dynamics/b2_fixture.cpp\n\tsrc/libraries/box2d/dynamics/b2_friction_joint.cpp\n\tsrc/libraries/box2d/dynamics/b2_gear_joint.cpp\n\tsrc/libraries/box2d/dynamics/b2_island.cpp\n\tsrc/libraries/box2d/dynamics/b2_island.h\n\tsrc/libraries/box2d/dynamics/b2_joint.cpp\n\tsrc/libraries/box2d/dynamics/b2_motor_joint.cpp\n\tsrc/libraries/box2d/dynamics/b2_mouse_joint.cpp\n\tsrc/libraries/box2d/dynamics/b2_polygon_circle_contact.cpp\n\tsrc/libraries/box2d/dynamics/b2_polygon_circle_contact.h\n\tsrc/libraries/box2d/dynamics/b2_polygon_contact.cpp\n\tsrc/libraries/box2d/dynamics/b2_polygon_contact.h\n\tsrc/libraries/box2d/dynamics/b2_prismatic_joint.cpp\n\tsrc/libraries/box2d/dynamics/b2_pulley_joint.cpp\n\tsrc/libraries/box2d/dynamics/b2_revolute_joint.cpp\n\tsrc/libraries/box2d/dynamics/b2_weld_joint.cpp\n\tsrc/libraries/box2d/dynamics/b2_wheel_joint.cpp\n\tsrc/libraries/box2d/dynamics/b2_world.cpp\n\tsrc/libraries/box2d/dynamics/b2_world_callbacks.cpp\n\tsrc/libraries/box2d/rope/b2_rope.cpp\n)\nlove_disable_warnings(love_3p_box2d)\n```\n\n----------------------------------------\n\nTITLE: Configuring GLAD OpenGL Loading Library with CMake for LÖVE\nDESCRIPTION: Sets up the build configuration for the GLAD OpenGL loading library used by LÖVE. This library provides modern OpenGL function loading capabilities.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_40\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_3p_glad\n\tsrc/libraries/glad/glad.cpp\n\tsrc/libraries/glad/glad.hpp\n\tsrc/libraries/glad/gladfuncs.hpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LodePNG Library in CMake for LÖVE Engine\nDESCRIPTION: Defines the love_3p_lodepng target with LodePNG library sources. LodePNG is a PNG image encoding and decoding library used by LÖVE for PNG handling.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_42\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_3p_lodepng\n\tsrc/libraries/lodepng/lodepng.cpp\n\tsrc/libraries/lodepng/lodepng.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring DDS Parsing Library with CMake for LÖVE\nDESCRIPTION: Sets up the build configuration for the DDS texture format parsing library used by LÖVE. This library enables support for DirectDraw Surface texture files.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_3p_ddsparse\n\tsrc/libraries/ddsparse/ddsinfo.h\n\tsrc/libraries/ddsparse/ddsparse.cpp\n\tsrc/libraries/ddsparse/ddsparse.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Common Library in CMake\nDESCRIPTION: Configures the common library for LÖVE with source files and dependencies. Includes platform-specific sources and frameworks for Apple platforms (macOS and iOS).\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_common STATIC\n\tsrc/common/android.cpp\n\tsrc/common/android.h\n\tsrc/common/b64.cpp\n\tsrc/common/b64.h\n\tsrc/common/Color.h\n\tsrc/common/config.h\n\tsrc/common/Data.cpp\n\tsrc/common/Data.h\n\tsrc/common/delay.cpp\n\tsrc/common/delay.h\n\tsrc/common/deprecation.cpp\n\tsrc/common/deprecation.h\n\tsrc/common/EnumMap.h\n\tsrc/common/Exception.cpp\n\tsrc/common/Exception.h\n\tsrc/common/floattypes.cpp\n\tsrc/common/floattypes.h\n\tsrc/common/int.h\n\tsrc/common/math.h\n\tsrc/common/Matrix.cpp\n\tsrc/common/Matrix.h\n\tsrc/common/memory.cpp\n\tsrc/common/memory.h\n\tsrc/common/Module.cpp\n\tsrc/common/Module.h\n\tsrc/common/Object.cpp\n\tsrc/common/Object.h\n\tsrc/common/Optional.h\n\tsrc/common/pixelformat.cpp\n\tsrc/common/pixelformat.h\n\tsrc/common/Range.h\n\tsrc/common/Reference.cpp\n\tsrc/common/Reference.h\n\tsrc/common/runtime.cpp\n\tsrc/common/runtime.h\n\tsrc/common/Stream.cpp\n\tsrc/common/Stream.h\n\tsrc/common/StringMap.cpp\n\tsrc/common/StringMap.h\n\tsrc/common/types.cpp\n\tsrc/common/types.h\n\tsrc/common/utf8.cpp\n\tsrc/common/utf8.h\n\tsrc/common/Variant.cpp\n\tsrc/common/Variant.h\n\t#src/common/Vector.cpp # Vector.cpp is empty.\n\tsrc/common/Vector.h\n\tsrc/common/version.h\n)\ntarget_link_libraries(love_common PUBLIC\n\tlovedep::Lua\n\tlovedep::SDL\n)\n\nif (APPLE)\n\ttarget_sources(love_common PRIVATE\n\t\tsrc/common/apple.mm\n\t)\n\ttarget_link_libraries(love_common PUBLIC\n\t\tobjc\n\t\t\"-framework CoreFoundation\"\n\t)\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n\t\ttarget_sources(love_common PRIVATE\n\t\t\tsrc/common/macos.mm\n\t\t)\n\t\ttarget_link_libraries(love_common PUBLIC\n\t\t\t\"-framework AppKit\"\n\t\t)\n\telse()\n\t\ttarget_sources(love_common PRIVATE\n\t\t\tsrc/common/ios.mm\n\t\t)\n\t\ttarget_link_libraries(love_common PUBLIC\n\t\t\t\"-framework UIKit\"\n\t\t)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Graphics Module Library in CMake for LÖVE Engine\nDESCRIPTION: Defines the love_graphics_root static library with a comprehensive list of source files for the core graphics module. Links against the Lua dependency.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_graphics_root STATIC\n\tsrc/modules/graphics/Buffer.cpp\n\tsrc/modules/graphics/Buffer.h\n\tsrc/modules/graphics/Deprecations.cpp\n\tsrc/modules/graphics/Deprecations.h\n\tsrc/modules/graphics/Drawable.cpp\n\tsrc/modules/graphics/Drawable.h\n\tsrc/modules/graphics/Font.cpp\n\tsrc/modules/graphics/Font.h\n\tsrc/modules/graphics/Graphics.cpp\n\tsrc/modules/graphics/Graphics.h\n\tsrc/modules/graphics/GraphicsReadback.cpp\n\tsrc/modules/graphics/GraphicsReadback.h\n\tsrc/modules/graphics/Mesh.cpp\n\tsrc/modules/graphics/Mesh.h\n\tsrc/modules/graphics/ParticleSystem.cpp\n\tsrc/modules/graphics/ParticleSystem.h\n\tsrc/modules/graphics/Polyline.cpp\n\tsrc/modules/graphics/Polyline.h\n\tsrc/modules/graphics/Quad.cpp\n\tsrc/modules/graphics/Quad.h\n\tsrc/modules/graphics/renderstate.cpp\n\tsrc/modules/graphics/renderstate.h\n\tsrc/modules/graphics/Resource.h\n\tsrc/modules/graphics/Shader.cpp\n\tsrc/modules/graphics/Shader.h\n\tsrc/modules/graphics/ShaderStage.cpp\n\tsrc/modules/graphics/ShaderStage.h\n\tsrc/modules/graphics/SpriteBatch.cpp\n\tsrc/modules/graphics/SpriteBatch.h\n\tsrc/modules/graphics/StreamBuffer.cpp\n\tsrc/modules/graphics/StreamBuffer.h\n\tsrc/modules/graphics/TextBatch.cpp\n\tsrc/modules/graphics/TextBatch.h\n\tsrc/modules/graphics/Texture.cpp\n\tsrc/modules/graphics/Texture.h\n\tsrc/modules/graphics/vertex.cpp\n\tsrc/modules/graphics/vertex.h\n\tsrc/modules/graphics/Video.cpp\n\tsrc/modules/graphics/Video.h\n\tsrc/modules/graphics/Volatile.cpp\n\tsrc/modules/graphics/Volatile.h\n\tsrc/modules/graphics/wrap_Buffer.cpp\n\tsrc/modules/graphics/wrap_Buffer.h\n\tsrc/modules/graphics/wrap_Font.cpp\n\tsrc/modules/graphics/wrap_Font.h\n\tsrc/modules/graphics/wrap_Graphics.cpp\n\tsrc/modules/graphics/wrap_Graphics.h\n\tsrc/modules/graphics/wrap_Graphics.lua\n\tsrc/modules/graphics/wrap_GraphicsReadback.cpp\n\tsrc/modules/graphics/wrap_GraphicsReadback.h\n\tsrc/modules/graphics/wrap_Mesh.cpp\n\tsrc/modules/graphics/wrap_Mesh.h\n\tsrc/modules/graphics/wrap_ParticleSystem.cpp\n\tsrc/modules/graphics/wrap_ParticleSystem.h\n\tsrc/modules/graphics/wrap_Quad.cpp\n\tsrc/modules/graphics/wrap_Quad.h\n\tsrc/modules/graphics/wrap_Shader.cpp\n\tsrc/modules/graphics/wrap_Shader.h\n\tsrc/modules/graphics/wrap_SpriteBatch.cpp\n\tsrc/modules/graphics/wrap_SpriteBatch.h\n\tsrc/modules/graphics/wrap_Texture.cpp\n\tsrc/modules/graphics/wrap_Texture.h\n\tsrc/modules/graphics/wrap_TextBatch.cpp\n\tsrc/modules/graphics/wrap_TextBatch.h\n\tsrc/modules/graphics/wrap_Video.cpp\n\tsrc/modules/graphics/wrap_Video.h\n\tsrc/modules/graphics/wrap_Video.lua\n)\ntarget_link_libraries(love_graphics_root PUBLIC\n\tlovedep::Lua\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Main Image Interface Library for LÖVE\nDESCRIPTION: Creates an interface library for the LÖVE image module that combines the core image functionality with the Magpie format handlers.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_image INTERFACE)\ntarget_link_libraries(love_image INTERFACE\n\tlove_image_root\n\tlove_image_magpie\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL-Based Joystick Implementation for LÖVE\nDESCRIPTION: Defines the SDL-specific implementation of the joystick module as a static library. Links against SDL dependency.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_joystick_sdl STATIC\n\tsrc/modules/joystick/sdl/Joystick.cpp\n\tsrc/modules/joystick/sdl/Joystick.h\n\tsrc/modules/joystick/sdl/JoystickModule.cpp\n\tsrc/modules/joystick/sdl/JoystickModule.h\n)\ntarget_link_libraries(love_joystick_sdl PUBLIC\n\tlovedep::SDL\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Main Joystick Interface Library for LÖVE\nDESCRIPTION: Creates an interface library for the LÖVE joystick module that combines the core joystick functionality with the SDL implementation.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_joystick INTERFACE)\ntarget_link_libraries(love_joystick INTERFACE\n\tlove_joystick_root\n\tlove_joystick_sdl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL-Based Keyboard Implementation for LÖVE\nDESCRIPTION: Defines the SDL-specific implementation of the keyboard module as a static library. Links against SDL dependency.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_keyboard_sdl STATIC\n\tsrc/modules/keyboard/sdl/Keyboard.cpp\n\tsrc/modules/keyboard/sdl/Keyboard.h\n)\ntarget_link_libraries(love_keyboard_sdl PUBLIC\n\tlovedep::SDL\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Sensor Module in CMake\nDESCRIPTION: Defines the build setup for the LÖVE sensor module, creating libraries for root components, SDL-specific implementations, and an interface library.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_sensor_root STATIC\n\tsrc/modules/sensor/Sensor.cpp\n\tsrc/modules/sensor/Sensor.h\n\tsrc/modules/sensor/wrap_Sensor.cpp\n\tsrc/modules/sensor/wrap_Sensor.h\n)\ntarget_link_libraries(love_sensor_root PUBLIC\n\tlovedep::Lua\n\tlovedep::SDL\n)\n\nadd_library(love_sensor_sdl STATIC\n\tsrc/modules/sensor/sdl/Sensor.cpp\n\tsrc/modules/sensor/sdl/Sensor.h\n)\ntarget_link_libraries(love_sensor_sdl PUBLIC\n\tlovedep::SDL\n)\n\nadd_library(love_sensor INTERFACE)\ntarget_link_libraries(love_sensor INTERFACE\n\tlove_sensor_root\n\tlove_sensor_sdl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Timer Module in CMake\nDESCRIPTION: Defines the build setup for the LÖVE timer module, creating a static library with timer-related functionality and Lua dependencies.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_timer STATIC\n\tsrc/modules/timer/Timer.cpp\n\tsrc/modules/timer/Timer.h\n\tsrc/modules/timer/wrap_Timer.cpp\n\tsrc/modules/timer/wrap_Timer.h\n)\ntarget_link_libraries(love_timer PUBLIC\n\tlovedep::Lua\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LÖVE Touch Module in CMake\nDESCRIPTION: Sets up the build configuration for the LÖVE touch module, including root components, SDL-specific implementations, and an interface library for touch functionality.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_touch_root STATIC\n\tsrc/modules/touch/Touch.cpp\n\tsrc/modules/touch/Touch.h\n\tsrc/modules/touch/wrap_Touch.cpp\n\tsrc/modules/touch/wrap_Touch.h\n)\ntarget_link_libraries(love_touch_root PUBLIC\n\tlovedep::Lua\n\tlovedep::SDL\n)\n\nadd_library(love_touch_sdl STATIC\n\tsrc/modules/touch/sdl/Touch.cpp\n\tsrc/modules/touch/sdl/Touch.h\n)\ntarget_link_libraries(love_touch_sdl PUBLIC\n\tlovedep::SDL\n)\n\nadd_library(love_touch INTERFACE)\ntarget_link_libraries(love_touch INTERFACE\n\tlove_touch_root\n\tlove_touch_sdl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lua 5.3 APIs Library in CMake for LÖVE Engine\nDESCRIPTION: Defines the love_3p_lua53 target which provides APIs from Lua 5.3 that may be needed for compatibility when using different Lua versions. Links against the main Lua dependency.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_45\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(love_3p_lua53\n\tsrc/libraries/lua53/lprefix.h\n\tsrc/libraries/lua53/lstrlib.c\n\tsrc/libraries/lua53/lstrlib.h\n\tsrc/libraries/lua53/lutf8lib.c\n\tsrc/libraries/lua53/lutf8lib.h\n)\ntarget_link_libraries(love_3p_lua53 lovedep::Lua)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Build Settings\nDESCRIPTION: Sets up Windows-specific build properties and links required Windows libraries for MSVC and MinGW builds.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n\tset_target_properties(liblove PROPERTIES RELEASE_OUTPUT_NAME \"love\" PDB_NAME \"liblove\" IMPORT_PREFIX \"lib\")\n\tset_target_properties(liblove PROPERTIES DEBUG_OUTPUT_NAME \"love\" PDB_NAME \"liblove\" IMPORT_PREFIX \"lib\")\nendif()\n\nif(MSVC OR MINGW)\n\ttarget_link_libraries(liblove\n\t\tws2_32${WIN32_LIB_EXT}\n\t\twinmm${WIN32_LIB_EXT}\n\t\tdwmapi${WIN32_LIB_EXT}\n\t)\n\n\ttarget_sources(liblove PUBLIC\n\t\textra/windows/love.rc\n\t\textra/windows/love.ico\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows Installation and Packaging Configuration\nDESCRIPTION: Sets up Windows-specific installation and CPack configuration for creating installers and packages.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_52\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Windows\")\n\tinstall(TARGETS love lovec liblove RUNTIME DESTINATION .)\n\tinstall(PROGRAMS $<TARGET_FILE:${MEGA_SDL3}> DESTINATION .)\n\n\tif(MEGA_ARM64)\n\t\tset(CPACK_GENERATOR ZIP)\n\t\tset(CPACK_SYSTEM_NAME woa64)\n\telse()\n\t\tset(CPACK_GENERATOR ZIP NSIS)\n\tendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Megasource Build for LÖVE\nDESCRIPTION: Sets up the build configuration when using Megasource, including DLL management and dependency linking.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(MEGA)\n\tset(LOVE_MSVC_DLLS ${MEGA_MSVC_DLLS})\n\tset(LOVE_MOVE_DLLS\n\t\t${MEGA_SDL3}\n\t\t${MEGA_OPENAL}\n\t)\n\ttarget_link_libraries(lovedep::SDL INTERFACE ${MEGA_SDL3})\n\ttarget_link_libraries(lovedep::Freetype INTERFACE ${MEGA_FREETYPE})\n\ttarget_link_libraries(lovedep::Harfbuzz INTERFACE ${MEGA_HARFBUZZ})\n\ttarget_link_libraries(lovedep::OpenAL INTERFACE ${MEGA_OPENAL})\n\ttarget_link_libraries(lovedep::Modplug INTERFACE ${MEGA_MODPLUG})\n\ttarget_link_libraries(lovedep::Theora INTERFACE ${MEGA_LIBTHEORA})\n\ttarget_link_libraries(lovedep::Vorbis INTERFACE ${MEGA_LIBVORBIS} ${MEGA_LIBVORBISFILE})\n\ttarget_link_libraries(lovedep::Ogg INTERFACE ${MEGA_LIBOGG})\n\ttarget_link_libraries(lovedep::Zlib INTERFACE ${MEGA_ZLIB})\n\n\tif(LOVE_JIT)\n\t\ttarget_include_directories(lovedep::Lua INTERFACE ${MEGA_LUAJIT_INCLUDE})\n\t\ttarget_link_libraries(lovedep::Lua INTERFACE ${MEGA_LUAJIT_LIB})\n\t\tset(LOVE_EXTRA_DLLS ${LOVE_EXTRA_DLLS} ${MEGA_LUAJIT_DLL})\n\t\tset(LOVE_EXTRA_DEPENDECIES luajit)\n\t\tset(LOVE_MOVE_DLLS\n\t\t\t${LOVE_MOVE_DLLS}\n\t\t\t${MEGA_LUAJIT_DLL}\n\t\t)\n\telse()\n\t\ttarget_link_libraries(lovedep::Lua INTERFACE ${MEGA_LUA51})\n\t\tset(LOVE_MOVE_DLLS\n\t\t\t${LOVE_MOVE_DLLS}\n\t\t\t${MEGA_LUA51}\n\t\t)\n\tendif()\nelse()\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-specific Library Extension for Windows/MinGW\nDESCRIPTION: Sets the WIN32_LIB_EXT variable to the appropriate library extension (.a for MinGW, .lib for MSVC) for use with platform-specific library linking.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_43\n\nLANGUAGE: CMake\nCODE:\n```\nif(MINGW)\n\tset(WIN32_LIB_EXT .a)\nelse()\n\tset(WIN32_LIB_EXT .lib)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Warning Disable Function for LÖVE\nDESCRIPTION: Creates a function to disable warnings for specific targets in the LÖVE build process.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n\tset(DISABLE_WARNING_FLAG -W0)\nelse()\n\tset(DISABLE_WARNING_FLAG -w)\nendif()\n\nfunction(love_disable_warnings ARG_TARGET)\n\ttarget_compile_options(${ARG_TARGET} PRIVATE ${DISABLE_WARNING_FLAG})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Extracting LÖVE Version from Header File\nDESCRIPTION: Reads the version information from the version.h file and extracts major, minor, and revision numbers.\nSOURCE: https://github.com/love2d/love/blob/main/CMakeLists.txt#2025-04-19_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(READ ${CMAKE_CURRENT_SOURCE_DIR}/src/common/version.h LOVE_VERSION_FILE_CONTENTS)\n\nfunction(match_version ARG_STRING OUT_VAR)\n\tstring(REGEX MATCH \"VERSION_${ARG_STRING} = ([0-9]+);\" TMP_VER \"${LOVE_VERSION_FILE_CONTENTS}\")\n\tstring(REGEX MATCH \"[0-9]+\" TMP_VER \"${TMP_VER}\")\n\tset(${OUT_VAR} ${TMP_VER} PARENT_SCOPE)\nendfunction()\n\nmatch_version(\"MAJOR\" LOVE_VERSION_MAJOR)\nmatch_version(\"MINOR\" LOVE_VERSION_MINOR)\nmatch_version(\"REV\" LOVE_VERSION_REV)\n\nset(LOVE_VERSION_STR \"${LOVE_VERSION_MAJOR}.${LOVE_VERSION_MINOR}\")\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 License Notice Template\nDESCRIPTION: A template for the boilerplate notice that should be included in software files to apply the Apache License 2.0. It includes placeholders for copyright year and owner information, along with the standard license text and link to the full license.\nSOURCE: https://github.com/love2d/love/blob/main/license.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
  }
]