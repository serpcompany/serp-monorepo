[
  {
    "owner": "polkadot-js",
    "repo": "docs",
    "content": "TITLE: Manually Creating Polkadot JS API Instance in JavaScript\nDESCRIPTION: Shows the explicit approach to creating an API instance by using the constructor and manually waiting for the connection to be ready. This method provides more control over the initialization process.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/create.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the instance\nconst api = new ApiPromise({ provider: wsProvider });\n\n// Wait until we are ready and connected\nawait api.isReady;\n\n// Do something\nconsole.log(api.genesisHash.toHex());\n```\n\n----------------------------------------\n\nTITLE: Creating Polkadot Account with Keyring in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a Polkadot account using the Keyring class. It imports required modules, creates a seed for 'Alice', initializes a Keyring instance, adds a new account pair to the keyring, and logs the created account's address. The script is designed to run as a standalone Node.js application.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/examples/create-account.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import Keyring class and utility functions\nconst { Keyring } = require('@polkadot/keyring');\nconst { stringToU8a } = require('@polkadot/util');\n\nasync function main () {\n  // Create account seed for Alice\n  const ALICE_SEED = 'Alice'.padEnd(32, ' ');\n\n  // Create an instance of the Keyring\n  const keyring = new Keyring();\n\n  // Create pair and add Alice to keyring pair dictionary (with account seed)\n  const pairAlice = keyring.addFromSeed(stringToU8a(ALICE_SEED));\n\n  console.log(`Created keyring pair for Alice with address: ${keyring.getPair(pairAlice.address).address}`);\n}\n\nmain().catch(console.error).finally(() => process.exit());\n```\n\n----------------------------------------\n\nTITLE: Validating Polkadot Address in JavaScript\nDESCRIPTION: This function checks if a given address is a valid Polkadot address. It works with both Ed25519 and Sr25519 key types. The function attempts to encode the address, returning true if successful and false if an error occurs.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/util-crypto/examples/validate-address.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { decodeAddress, encodeAddress } = require('@polkadot/keyring');\nconst { hexToU8a, isHex } = require('@polkadot/util');\n\nconst address = '5GrpknVvGGrGH3EFuURXeMrWHvbpj3VfER1oX5jFtuGbfzCE';\n\nconst isValidAddressPolkadotAddress = () => {\n  try {\n    encodeAddress(\n      isHex(address)\n        ? hexToU8a(address)\n        : decodeAddress(address)\n    );\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst isValid = isValidAddressPolkadotAddress();\n\nconsole.log(isValid);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Accounts from Polkadot JS Extension in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable the Polkadot JS extension and retrieve all available accounts. It first checks if the extension is installed and authorized before accessing the accounts.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/extension/cookbook.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { web3Accounts, web3Enable, web3FromSource } from '@polkadot/extension-dapp';\n\n// this call fires up the authorization popup\nconst extensions = await web3Enable('my cool dapp');\n\nif (extensions.length === 0) {\n    // no extension installed, or the user did not accept the authorization\n    // in this case we should inform the use and give a link to the extension\n    return;\n}\n\n// we are now informed that the user has at least one extension and that we\n// will be able to show and use accounts\nconst allAccounts = await web3Accounts();\n```\n\n----------------------------------------\n\nTITLE: Initializing Polkadot JS API with WebSocket Connection in JavaScript\nDESCRIPTION: Creates an API instance using ApiPromise.create() with a WebSocket provider to connect to the Polkadot network. This is the recommended approach for connecting to a Polkadot/Substrate node.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/create.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import\nimport { ApiPromise, WsProvider } from '@polkadot/api';\n\n...\n// Construct\nconst wsProvider = new WsProvider('wss://rpc.polkadot.io');\nconst api = await ApiPromise.create({ provider: wsProvider });\n\n// Do something\nconsole.log(api.genesisHash.toHex());\n```\n\n----------------------------------------\n\nTITLE: Subscribing and Unsubscribing to Block Updates with Polkadot.js API\nDESCRIPTION: Example showing how to subscribe to new block headers using Polkadot.js API and automatically unsubscribe after a timeout. The code demonstrates the creation of an API instance, subscription to new block headers, and cleanup using the unsubscribe function after 20 seconds.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/unsubscribe.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API\nconst { ApiPromise } = require('@polkadot/api');\n\nasync function main () {\n  // Create a new instance of the api\n  const api = await ApiPromise.create();\n\n  // Subscribe to chain updates and log the current block number on update.\n  const unsubscribe = await api.rpc.chain.subscribeNewHeads((header) => {\n    console.log(`Chain is at block: #${header.number}`);\n  });\n\n  // In this example we're calling the unsubscribe() function that is being\n  // returned by the api call function after 20s.\n  setTimeout(() => {\n    unsubscribe();\n    console.log('Unsubscribed');\n  }, 20000);\n}\n\nmain().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Creating a Keyring Instance in Polkadot-js\nDESCRIPTION: Initializes a keyring instance with sr25519 as the default cryptographic type. The keyring allows for storing and managing cryptographic key pairs for use with Polkadot-based blockchains.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/keyring.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the keyring as required\nimport { Keyring } from '@polkadot/api';\n\n// Initialize the API as we would normally do\n...\n\n// Create a keyring instance\nconst keyring = new Keyring({ type: 'sr25519' });\n```\n\n----------------------------------------\n\nTITLE: Querying and Processing System Events with Polkadot.js API in JavaScript\nDESCRIPTION: This code connects to a local Polkadot node, subscribes to system events, and processes each event to extract and display relevant information such as event section, method, phase, documentation, and typed data. It demonstrates how to traverse through event records and display their structured data.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/system-events.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API\nconst { ApiPromise } = require('@polkadot/api');\n\nasync function main () {\n  // Create our API with a default connection to the local node\n  const api = await ApiPromise.create();\n\n  // Subscribe to system events via storage\n  api.query.system.events((events) => {\n    console.log(`\\nReceived ${events.length} events:`);\n\n    // Loop through the Vec<EventRecord>\n    events.forEach((record) => {\n      // Extract the phase, event and the event types\n      const { event, phase } = record;\n      const types = event.typeDef;\n\n      // Show what we are busy with\n      console.log(`\\t${event.section}:${event.method}:: (phase=${phase.toString()})`);\n      console.log(`\\t\\t${event.meta.documentation.toString()}`);\n\n      // Loop through each of the parameters, displaying the type and data\n      event.data.forEach((data, index) => {\n        console.log(`\\t\\t\\t${types[index].type}: ${data.toString()}`);\n      });\n    });\n  });\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exit(-1);\n});\n```\n\n----------------------------------------\n\nTITLE: Interacting with Polkadot Extension in JavaScript\nDESCRIPTION: This snippet demonstrates the complete workflow of using the Polkadot extension in a dApp, including enabling the extension, retrieving accounts, finding an injector for a specific address, and signing/sending a transaction. The code shows how to connect to the extension, get user accounts, and use the extension to sign transactions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/extension/usage.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { web3Accounts, web3Enable, web3FromAddress } from '@polkadot/extension-dapp';\n\n// returns an array of all the injected sources\n// (this needs to be called first, before other requests)\nconst allInjected = await web3Enable('my cool dapp');\n\n// returns an array of { address, meta: { name, source } }\n// meta.source contains the name of the extension that provides this account\nconst allAccounts = await web3Accounts();\n\n// the address we use to use for signing, as injected\nconst SENDER = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFabHE';\n\n// finds an injector for an address\nconst injector = await web3FromAddress(SENDER);\n\n// sign and send our transaction - notice here that the address of the account\n// (as retrieved injected) is passed through as the param to the `signAndSend`,\n// the API then calls the extension to present to the user and get it signed.\n// Once complete, the api sends the tx + signature via the normal process\napi.tx.balances\n  .transfer('5C5555yEXUcmEJ5kkcCMvdZjUo7NGJiQJMS7vZXEeoMhj3VQ', 123456)\n  .signAndSend(SENDER, { signer: injector.signer }, (status) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Mapping Extrinsics to Events in Polkadot.js\nDESCRIPTION: This example shows how to map extrinsics in a block to their corresponding events. It retrieves the latest block and its events, then filters events by the extrinsic index to create a mapping between transactions and their triggered events.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/blocks.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// no blockHash is specified, so we retrieve the latest\nconst signedBlock = await api.rpc.chain.getBlock();\nconst apiAt = await api.at(signedBlock.block.header.hash);\nconst allRecords = await apiAt.query.system.events();\n\n// map between the extrinsics and events\nsignedBlock.block.extrinsics.forEach(({ method: { method, section } }, index) => {\n  // filter the specific events based on the phase and then the\n  // index of our extrinsic in the block\n  const events = allRecords\n    .filter(({ phase }) =>\n      phase.isApplyExtrinsic &&\n      phase.asApplyExtrinsic.eq(index)\n    )\n    .map(({ event }) => `${event.section}.${event.method}`);\n\n  console.log(`${section}.${method}:: ${events.join(', ') || 'no events'}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Polkadot Keyring\nDESCRIPTION: Creates a new keyring instance with sr25519 cryptography type and ss58Format of 2 (Kusama network). The keyring is used for managing cryptographic keypairs.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/create.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Keyring } from '@polkadot/keyring';\n\n// create a keyring with some non-default values specified\nconst keyring = new Keyring({ type: 'sr25519', ss58Format: 2 });\n```\n\n----------------------------------------\n\nTITLE: Querying Timestamp and Account Information with Polkadot.js API in JavaScript\nDESCRIPTION: This snippet demonstrates how to query the current timestamp and account information (balance and nonce) using the Polkadot.js API. It retrieves the timestamp from the timestamp module and account details from the system module using an account address.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the API as in previous sections\n...\n\n// The actual address that we will use\nconst ADDR = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFabHE';\n\n// Retrieve the last timestamp\nconst now = await api.query.timestamp.now();\n\n// Retrieve the account balance & nonce via the system module\nconst { nonce, data: balance } = await api.query.system.account(ADDR);\n\nconsole.log(`${now}: balance of ${balance.free} and a nonce of ${nonce}`);\n```\n\n----------------------------------------\n\nTITLE: Monitoring Transaction Inclusion with Polkadot.js API\nDESCRIPTION: This snippet demonstrates how to send a transaction and monitor its inclusion status using the Polkadot.js API. It shows how to check if the transaction is in a block or finalized, and logs the corresponding block hash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.tx.subs.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst alice = keyring.addFromUri('//Alice');\n\nconst unsub = await api.tx.balances\n  .transfer(BOB, 12345)\n  .signAndSend(alice, (result) => {\n    console.log(`Current status is ${result.status}`);\n\n    if (result.status.isInBlock) {\n      console.log(`Transaction included at blockHash ${result.status.asInBlock}`);\n    } else if (result.status.isFinalized) {\n      console.log(`Transaction finalized at blockHash ${result.status.asFinalized}`);\n      unsub();\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Handling Nonce for Multiple Transactions in Polkadot/Substrate\nDESCRIPTION: This snippet demonstrates how to handle nonces when sending multiple transactions in quick succession. It queries the next available nonce via RPC, taking transactions in the pool into account, to prevent nonce conflicts.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/tx.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < 10; i++) {\n  // retrieve sender's next index/nonce, taking txs in the pool into account\n  const nonce = await api.rpc.system.accountNextIndex(sender);\n\n  // send, just retrieving the hash, not waiting on status\n  const txhash = await api.tx.balances\n    .transfer(recipient, 123)\n    .signAndSend(sender, { nonce });\n}\n```\n\n----------------------------------------\n\nTITLE: Signing and Verifying Messages with Key Pairs in Polkadot-js\nDESCRIPTION: Shows how to use a key pair to sign a message and then verify the signature. This process is similar to what the API does internally when constructing transactions and is essential for cryptographic operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/keyring.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Some helper functions used here\nimport { stringToU8a, u8aToHex } from '@polkadot/util';\n\n...\n\n// Convert message, sign and then verify\nconst message = stringToU8a('this is our message');\nconst signature = alice.sign(message);\nconst isValid = alice.verify(message, signature, alice.publicKey);\n\n// Log info\nconsole.log(`The signature ${u8aToHex(signature)}, is ${isValid ? '' : 'in'}valid`);\n```\n\n----------------------------------------\n\nTITLE: Executing Transfer and Logging Events with Polkadot.js in JavaScript\nDESCRIPTION: This code initializes the Polkadot API, creates a random recipient, and performs a transfer while logging events and transaction status. It uses the @polkadot/api and @polkadot/keyring libraries, and demonstrates handling of transaction lifecycle events.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/transfer-events.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API & Provider and some utility functions\nconst { ApiPromise } = require('@polkadot/api');\n\n// Import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)\nconst testKeyring = require('@polkadot/keyring/testing');\n\n// Utility function for random values\nconst { randomAsU8a } = require('@polkadot/util-crypto');\n\n// Some constants we are using in this sample\nconst ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\nconst AMOUNT = 10000;\n\nasync function main () {\n  // Create the API and wait until ready\n  const api = await ApiPromise.create();\n\n  // Create an instance of our testing keyring\n  // If you're using ES6 module imports instead of require, just change this line to:\n  // const keyring = testKeyring();\n  const keyring = testKeyring.default();\n\n  // Get the nonce for the admin key\n  const { nonce } = await api.query.system.account(ALICE);\n\n  // Find the actual keypair in the keyring\n  const alicePair = keyring.getPair(ALICE);\n\n  // Create a new random recipient\n  const recipient = keyring.addFromSeed(randomAsU8a(32)).address;\n\n  console.log('Sending', AMOUNT, 'from', alicePair.address, 'to', recipient, 'with nonce', nonce.toString());\n\n  // Do the transfer and track the actual status\n  api.tx.balances\n    .transfer(recipient, AMOUNT)\n    .signAndSend(alicePair, { nonce }, ({ events = [], status }) => {\n      console.log('Transaction status:', status.type);\n\n      if (status.isInBlock) {\n        console.log('Included at block hash', status.asInBlock.toHex());\n        console.log('Events:');\n\n        events.forEach(({ event: { data, method, section }, phase }) => {\n          console.log('\\t', phase.toString(), `: ${section}.${method}`, data.toString());\n        });\n      } else if (status.isFinalized) {\n        console.log('Finalized block hash', status.asFinalized.toHex());\n\n        process.exit(0);\n      }\n    });\n}\n\nmain().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Account Nonce API Call\nDESCRIPTION: Gets the current account nonce (transaction count) for a given account ID\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\naccountNonce(account: SpCoreCryptoAccountId32): u32\n```\n\n----------------------------------------\n\nTITLE: Subscribing to New Blocks using Polkadot.js API in JavaScript\nDESCRIPTION: This code demonstrates how to create a subscription to monitor new blocks in a Polkadot network. It connects to a local node, subscribes to new block headers, and logs the block number for each new block. The subscription automatically terminates after processing 256 blocks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/listen-to-blocks.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API\nconst { ApiPromise } = require('@polkadot/api');\n\nasync function main () {\n  // Here we don't pass the (optional) provider, connecting directly to the default\n  // node/port, i.e. `ws://127.0.0.1:9944`. Await for the isReady promise to ensure\n  // the API has connected to the node and completed the initialisation process\n  const api = await ApiPromise.create();\n\n  // We only display a couple, then unsubscribe\n  let count = 0;\n\n  // Subscribe to the new headers on-chain. The callback is fired when new headers\n  // are found, the call itself returns a promise with a subscription that can be\n  // used to unsubscribe from the newHead subscription\n  const unsubscribe = await api.rpc.chain.subscribeNewHeads((header) => {\n    console.log(`Chain is at block: #${header.number}`);\n\n    if (++count === 256) {\n      unsubscribe();\n      process.exit(0);\n    }\n  });\n}\n\nmain().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Estimating Transaction Fees in Polkadot/Substrate using JavaScript\nDESCRIPTION: This snippet demonstrates how to estimate transaction fees before submitting a transaction. It uses the paymentInfo method to apply a dummy signature and retrieve fee information via RPC, showing the transaction class, weight, and partial fee.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/tx.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// estimate the fees as RuntimeDispatchInfo, using the signer (either\n// address or locked/unlocked keypair) (When overrides are applied, e.g\n//  nonce, the format would be `paymentInfo(sender, { nonce })`)\nconst info = await api.tx.balances\n  .transfer(recipient, 123)\n  .paymentInfo(sender);\n\n// log relevant info, partialFee is Balance, estimated for current\nconsole.log(`\n  class=${info.class.toString()},\n  weight=${info.weight.toString()},\n  partialFee=${info.partialFee.toHuman()}\n`);\n```\n\n----------------------------------------\n\nTITLE: Batching Transactions in Polkadot/Substrate\nDESCRIPTION: This example demonstrates how to use utility.batch to send multiple transactions in a single extrinsic. Batched transactions execute from a single sender in sequence, which is useful for operations like multiple transfers or validator payouts.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/tx.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// construct a list of transactions we want to batch\nconst txs = [\n  api.tx.balances.transfer(addrBob, 12345),\n  api.tx.balances.transfer(addrEve, 12345),\n  api.tx.staking.unbond(12345)\n];\n\n// construct the batch and send the transactions\napi.tx.utility\n  .batch(txs)\n  .signAndSend(sender, ({ status }) => {\n    if (status.isInBlock) {\n      console.log(`included in ${status.asInBlock}`);\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Executing Balance Transfer Transaction in Polkadot.js\nDESCRIPTION: Demonstrates how to create, sign and send a balance transfer transaction from Alice to Bob using the Polkadot.js API. The example shows the basic usage of api.tx.balances.transfer() method along with signAndSend() to execute the transaction.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.tx.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign and send a transfer from Alice to Bob\nconst txHash = await api.tx.balances\n  .transfer(BOB, 12345)\n  .signAndSend(alice);\n\n// Show the hash\nconsole.log(`Submitted with hash ${txHash}`);\n```\n\n----------------------------------------\n\nTITLE: Executing Token Transfer with Polkadot.js API in JavaScript\nDESCRIPTION: Demonstrates how to create and send a token transfer transaction using Polkadot.js API. The code initializes the API connection, sets up a keyring for account management, adds Alice's account, and executes a transfer of 12345 units to Bob's address. Uses sr25519 cryptography for the keyring.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/make-transfer.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API, Keyring and some utility functions\nconst { ApiPromise } = require('@polkadot/api');\nconst { Keyring } = require('@polkadot/keyring');\n\nconst BOB = '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty';\n\nasync function main () {\n  // Instantiate the API\n  const api = await ApiPromise.create();\n\n  // Construct the keyring after the API (crypto has an async init)\n  const keyring = new Keyring({ type: 'sr25519' });\n\n  // Add Alice to our keyring with a hard-derivation path (empty phrase, so uses dev)\n  const alice = keyring.addFromUri('//Alice');\n\n  // Create a extrinsic, transferring 12345 units to Bob\n  const transfer = api.tx.balances.transferAllowDeath(BOB, 12345);\n\n  // Sign and send the transaction using our account\n  const hash = await transfer.signAndSend(alice);\n\n  console.log('Transfer sent with hash', hash.toHex());\n}\n\nmain().catch(console.error).finally(() => process.exit());\n```\n\n----------------------------------------\n\nTITLE: Performing Chain Upgrade Using Sudo Module in Polkadot.js\nDESCRIPTION: This script performs a chain upgrade by loading a WASM runtime file and submitting it through the sudo module. It connects to a local Substrate node, retrieves the admin key, and signs the transaction with the appropriate keypair. The script includes error handling and logs the transaction status and events.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/upgrade-chain.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API & Provider and some utility functions\nconst { ApiPromise, WsProvider } = require('@polkadot/api');\n\n// import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)\nconst testKeyring = require('@polkadot/keyring/testing');\n\nconst fs = require('fs');\n\nasync function main () {\n  // Initialise the provider to connect to the local node\n  const provider = new WsProvider('ws://127.0.0.1:9944');\n\n  // Create the API and wait until ready (optional provider passed through)\n  const api = await ApiPromise.create({ provider });\n\n  // Retrieve the upgrade key from the chain state\n  const adminId = await api.query.sudo.key();\n\n  // Find the actual keypair in the keyring (if this is a changed value, the key\n  // needs to be added to the keyring before - this assumes we have defaults, i.e.\n  // Alice as the key - and this already exists on the test keyring)\n  const keyring = testKeyring.default();\n  const adminPair = keyring.getPair(adminId.toString());\n\n  // Retrieve the runtime to upgrade\n  const code = fs.readFileSync('./test.wasm').toString('hex');\n  const proposal = api.tx.system && api.tx.system.setCode\n    ? api.tx.system.setCode(`0x${code}`) // For newer versions of Substrate\n    : api.tx.consensus.setCode(`0x${code}`); // For previous versions\n\n  console.log(`Upgrading from ${adminId}, ${code.length / 2} bytes`);\n\n  // Perform the actual chain upgrade via the sudo module\n  api.tx.sudo\n    .sudo(proposal)\n    .signAndSend(adminPair, ({ events = [], status }) => {\n      console.log('Proposal status:', status.type);\n\n      if (status.isInBlock) {\n        console.error('You have just upgraded your chain');\n\n        console.log('Included at block hash', status.asInBlock.toHex());\n        console.log('Events:');\n\n        console.log(JSON.stringify(events.toHuman(), null, 2));\n      } else if (status.isFinalized) {\n        console.log('Finalized block hash', status.asFinalized.toHex());\n\n        process.exit(0);\n      }\n    });\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exit(-1);\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Validator Balances Using Multi Query\nDESCRIPTION: Shows how to retrieve validator keys and subscribe to their balances in bulk using the .multi interface. This example gets a snapshot of validators and tracks their balance changes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.multi.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst validatorKeys = await api.query.staking.validators.keys();\n\nconst unsub = await api.query.balances.account.multi(validatorKeys, (balances) => {\n  console.log(`The nonce and free balances are: ${balances.map(([nonce, { free }]) => [nonce, free])}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Timestamp Query in Polkadot.js\nDESCRIPTION: This snippet demonstrates how to create a subscription to the timestamp.now query in Polkadot.js. It retrieves the current timestamp and logs it to the console whenever it changes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.subs.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsub = await api.query.timestamp.now((moment) => {\n  console.log(`The last block has a timestamp of ${moment}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Messages with Public Address in JavaScript\nDESCRIPTION: This code snippet shows how to sign a message with a known keypair and then verify the signature using only the public address. It utilizes the signatureVerify function from the Polkadot.js util-crypto library.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/sign-verify.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { stringToU8a, u8aToHex } from '@polkadot/util';\nimport { signatureVerify } from '@polkadot/util-crypto';\n\n// create Alice based on the development seed\nconst alice = keyring.addFromUri('//Alice');\n\n// create the message and sign it\nconst message = stringToU8a('this is our message');\nconst signature = alice.sign(message);\n\n// verify the message using Alice's address\nconst { isValid } = signatureVerify(message, signature, alice.address);\n\n// output the result\nconsole.log(`${u8aToHex(signature)} is ${isValid ? 'valid' : 'invalid'}`);\n```\n\n----------------------------------------\n\nTITLE: Executing Contract Transaction with Polkadot.js\nDESCRIPTION: Demonstrates how to execute a contract transaction using the .tx method with the ink! incrementer example. Shows parameter configuration including value, gas limit, and storage deposit limit, along with transaction signing and status monitoring.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api-contract/start/contract.tx.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = 10000; // only for payable messages, call will fail otherwise\nconst gasLimit = 3000n * 1000000n;\nconst storageDepositLimit = null;\nconst incValue = 1;\n\n// Send the transaction, like elsewhere this is a normal extrinsic\n// with the same rules as applied in the API (As with the read example,\n// additional params, if required can follow - here only one is needed)\nawait contract.tx\n  .inc({ storageDepositLimit, gasLimit }, incValue)\n  .signAndSend(alicePair, result => {\n    if (result.status.isInBlock) {\n      console.log('in a block');\n    } else if (result.status.isFinalized) {\n      console.log('finalized');\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Next Index in Polkadot.js API\nDESCRIPTION: Retrieves the next accountIndex as available on the node. This method is part of the system module and is accessed via api.rpc.system.accountNextIndex.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\naccountNextIndex(accountId: AccountId): Index\n```\n\n----------------------------------------\n\nTITLE: Importing Polkadot.js API in Node.js\nDESCRIPTION: Demonstrates how to import the Polkadot.js API in a Node.js environment using CommonJS require syntax. This is necessary because Node.js versions >=12 support import syntax, but the API only exports CommonJS modules.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/intro.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import\nconst { ApiPromise, WsProvider } = require('@polkadot/api');\n...\n```\n\n----------------------------------------\n\nTITLE: Determining Extrinsic Success or Failure in Polkadot.js\nDESCRIPTION: This example demonstrates how to determine if an extrinsic succeeded or failed by checking for specific system events (ExtrinsicSuccess and ExtrinsicFailed). It also shows how to extract error information from failed extrinsics, including decoding module errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/blocks.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// no blockHash is specified, so we retrieve the latest\nconst signedBlock = await api.rpc.chain.getBlock();\n\n// get the api and events at a specific block\nconst apiAt = await api.at(signedBlock.block.header.hash);\nconst allRecords = await apiAt.query.system.events();\n\n// map between the extrinsics and events\nsignedBlock.block.extrinsics.forEach(({ method: { method, section } }, index) => {\n  allRecords\n    // filter the specific events based on the phase and then the\n    // index of our extrinsic in the block\n    .filter(({ phase }) =>\n      phase.isApplyExtrinsic &&\n      phase.asApplyExtrinsic.eq(index)\n    )\n    // test the events against the specific types we are looking for\n    .forEach(({ event }) => {\n      if (api.events.system.ExtrinsicSuccess.is(event)) {\n        // extract the data for this event\n        // (In TS, because of the guard above, these will be typed)\n        const [dispatchInfo] = event.data;\n\n        console.log(`${section}.${method}:: ExtrinsicSuccess:: ${JSON.stringify(dispatchInfo.toHuman())}`);\n      } else if (api.events.system.ExtrinsicFailed.is(event)) {\n        // extract the data for this event\n        const [dispatchError, dispatchInfo] = event.data;\n        let errorInfo;\n\n        // decode the error\n        if (dispatchError.isModule) {\n          // for module errors, we have the section indexed, lookup\n          // (For specific known errors, we can also do a check against the\n          // api.errors.<module>.<ErrorName>.is(dispatchError.asModule) guard)\n          const decoded = api.registry.findMetaError(dispatchError.asModule);\n\n          errorInfo = `${decoded.section}.${decoded.name}`;\n        } else {\n          // Other, CannotLookup, BadOrigin, no extra info\n          errorInfo = dispatchError.toString();\n        }\n\n        console.log(`${section}.${method}:: ExtrinsicFailed:: ${errorInfo}`);\n      }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Polkadot.js Storage API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Polkadot.js API to query various storage items from a Substrate-based blockchain. It includes examples of subscribing to balance changes, retrieving the chain name, and querying the timestamp of the last block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/rxjs/05_read_storage/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API, Keyring and some utility functions\nconst { ApiPromise, WsProvider } = require('@polkadot/api');\n\nconst main = async () => {\n  // Initialise the provider to connect to the local node\n  const provider = new WsProvider('ws://127.0.0.1:9944');\n\n  // Create the API and wait until ready\n  const api = await ApiPromise.create({ provider });\n\n  // Retrieve the chain & node information information via rpc calls\n  const [chain, nodeName, nodeVersion] = await Promise.all([\n    api.rpc.system.chain(),\n    api.rpc.system.name(),\n    api.rpc.system.version()\n  ]);\n\n  console.log(`You are connected to chain ${chain} using ${nodeName} v${nodeVersion}`);\n\n  // Subscribe to balance changes for our account\n  const ADDR = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n  let count = 0;\n\n  const unsub = await api.query.system.account(ADDR, ({ nonce, data: balance }) => {\n    console.log(`free balance is ${balance.free} with ${balance.reserved} reserved and a nonce of ${nonce}`);\n\n    if (++count === 3) {\n      console.log('Unsubscribing...');\n      unsub();\n    }\n  });\n\n  // Retrieve the last timestamp via subscription\n  const unsubTime = await api.query.timestamp.now((moment) => {\n    console.log(`The last block has a timestamp of ${moment}`);\n  });\n};\n\nmain().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending a Transaction with Polkadot JS Extension in JavaScript\nDESCRIPTION: This snippet demonstrates how to sign and send a blockchain transaction using the Polkadot JS extension. It creates a balance transfer extrinsic and uses the extension to prompt the user for approval and signing.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/extension/cookbook.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// `account` is of type InjectedAccountWithMeta \n// We arbitrarily select the first account returned from the above snippet\nconst account = allAccounts[0];\n\n// here we use the api to create a balance transfer to some account of a value of 12344\nconst transferExtrinsic = api.tx.balances.transfer('5C5555yEXUcmEJ5kkcCMvdZjUo7NGJiQJMS7vZXEeoMhj3VQ', 123456)\n\n// to be able to retrieve the signer interface from this account\n// we can use web3FromSource which will return an InjectedExtension type\nconst injector = await web3FromSource(account.meta.source);\n\n// passing the injected account address as the first argument of signAndSend\n// will allow the api to retrieve the signer and the user will see the extension\n// popup asking to sign the balance transfer transaction\ntransferExtrinsic.signAndSend(account.address, { signer: injector.signer }, ({ status }) => {\n    if (status.isInBlock) {\n        console.log(`Completed at block hash #${status.asInBlock.toString()}`);\n    } else {\n        console.log(`Current status: ${status.type}`);\n    }\n}).catch((error: any) => {\n    console.log(':( transaction failed', error);\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Polkadot Node using ApiPromise in JavaScript\nDESCRIPTION: Establishes a WebSocket connection to a local Polkadot node and retrieves basic chain information including chain name, node name, and version. Uses the @polkadot/api library to create an API instance and make RPC calls.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/simple-connect.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Required imports\nconst { ApiPromise, WsProvider } = require('@polkadot/api');\n\nasync function main () {\n  // Initialise the provider to connect to the local node\n  const provider = new WsProvider('ws://127.0.0.1:9944');\n\n  // Create the API and wait until ready\n  const api = await ApiPromise.create({ provider });\n\n  // Retrieve the chain & node information via rpc calls\n  const [chain, nodeName, nodeVersion] = await Promise.all([\n    api.rpc.system.chain(),\n    api.rpc.system.name(),\n    api.rpc.system.version()\n  ]);\n\n  console.log(`You are connected to chain ${chain} using ${nodeName} v${nodeVersion}`);\n}\n\nmain().catch(console.error).finally(() => process.exit());\n```\n\n----------------------------------------\n\nTITLE: Monitoring Transfer Events with Polkadot.js in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a random recipient, initiate a transfer, and listen for transfer events using Polkadot.js. It connects to a node, generates a random address, performs a transfer, and logs the relevant events.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/rxjs/09_transfer_events/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Import required libraries\nconst { ApiPromise, WsProvider } = require('@polkadot/api');\nconst { Keyring } = require('@polkadot/keyring');\n\n// Construct\nconst wsProvider = new WsProvider('wss://rpc.polkadot.io');\nconst api = await ApiPromise.create({ provider: wsProvider });\n\n// Construct the keyring after the API (crypto has an async init)\nconst keyring = new Keyring({ type: 'sr25519' });\n\n// Add Alice to our keyring with a hard-derivation path (empty phrase, so uses dev)\nconst alice = keyring.addFromUri('//Alice');\n\nconst BOB = '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty';\n\nconsole.log('Sending a transaction from Alice to Bob');\n\n// Create a extrinsic, transferring 12345 units to Bob\nconst transfer = api.tx.balances.transfer(BOB, 12345);\n\n// Sign and Send the transaction\nconst hash = await transfer.signAndSend(alice);\n\nconsole.log('Transfer sent with hash', hash.toHex());\n\n// Subscribe to the new block header (with these 2 methods)\nconst unsubscribe = await api.rpc.chain.subscribeNewHeads((header) => {\n  console.log(`Chain is at block: #${header.number}`);\n\n  api.query.system.events((events) => {\n    console.log(`Received ${events.length} events:`);\n\n    // Loop through the Vec<EventRecord>\n    events.forEach((record) => {\n      // Extract the phase, event and the event types\n      const { event, phase } = record;\n      const types = event.typeDef;\n\n      // Show what we are busy with\n      console.log(`\\t${event.section}:${event.method}:: (phase=${phase.toString()})`);\n      console.log(`\\t\\t${event.meta.documentation.toString()}`);\n\n      // Loop through each of the parameters, displaying the type and data\n      event.data.forEach((data, index) => {\n        console.log(`\\t\\t\\t${types[index].type}: ${data.toString()}`);\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot JS API via Yarn\nDESCRIPTION: Command to install the latest stable release of @polkadot/api package using Yarn. This allows connection to test networks and local nodes tracking versioned releases for Polkadot and Substrate.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/install.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @polkadot/api\n```\n\n----------------------------------------\n\nTITLE: Creating and Submitting a Transfer Transaction with Polkadot.js API in JavaScript\nDESCRIPTION: This code demonstrates how to make a simple transfer between accounts using the Polkadot.js API. It includes connecting to a node, creating a transaction with a specified amount, signing it with the sender's account, and monitoring the transaction status through events. The example shows proper error handling and subscription management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/rxjs/06_make_transfer/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Import the API & Provider and some utility functions\nconst { ApiRx } = require('@polkadot/api');\nconst { WsProvider } = require('@polkadot/rpc-provider');\n\n// import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)\nconst { Keyring } = require('@polkadot/keyring');\n\n// import the utility functionality\nconst { first, tap } = require('rxjs/operators');\n\n// Some constants we are using in this sample\nconst ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\nconst AMOUNT = 10000;\n\nasync function main () {\n  // Create our API with a connection to the node\n  const api = await ApiRx\n    .create({\n      provider: new WsProvider('wss://rpc.polkadot.io')\n    })\n    .pipe(first())\n    .toPromise();\n\n  // create an instance of our testing keyring\n  // If you're using ES6 module imports instead of require, just change this line to:\n  // const keyring = new Keyring({ type: 'sr25519' });\n  const keyring = new Keyring({ type: 'sr25519' });\n  const alice = keyring.addFromUri('//Alice');\n\n  // Create a extrinsic, transferring 10000 units to Bob\n  const transfer = api.tx.balances.transfer(\n    ALICE,\n    AMOUNT\n  );\n\n  // Sign and send the transaction using our account\n  const hash = await transfer.signAndSend(alice)\n    .pipe(\n      tap(({ events = [], status }) => {\n        console.log(`Current status is ${status.type}`);\n\n        if (status.isFinalized) {\n          console.log(`Transaction included at blockHash ${status.asFinalized}`);\n          console.log('Events:');\n\n          events.forEach(({ phase, event: { data, method, section } }) => {\n            console.log(`\\t${phase}: ${section}.${method}:: ${data}`);\n          });\n\n          process.exit(0);\n        }\n      }),\n      first(({ status }) => status.isFinalized)\n    )\n    .toPromise();\n\n  console.log(`Submitted with hash ${hash}`);\n}\n\nmain().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Viewing Extrinsic Information in a Block in Polkadot.js\nDESCRIPTION: This code retrieves the latest block and iterates through its extrinsics to display detailed information about each transaction. It shows how to access method names, arguments, documentation, and signer details for each extrinsic.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/blocks.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// no blockHash is specified, so we retrieve the latest\nconst signedBlock = await api.rpc.chain.getBlock();\n\n// the information for each of the contained extrinsics\nsignedBlock.block.extrinsics.forEach((ex, index) => {\n  // the extrinsics are decoded by the API, human-like view\n  console.log(index, ex.toHuman());\n\n  const { isSigned, meta, method: { args, method, section } } = ex;\n\n  // explicit display of name, args & documentation\n  console.log(`${section}.${method}(${args.map((a) => a.toString()).join(', ')}`);\n  console.log(meta.documentation.map((d) => d.toString()).join('\\n'));\n\n  // signer/nonce info\n  if (isSigned) {\n    console.log(`signer=${ex.signer.toString()}, nonce=${ex.nonce.toString()}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Polkadot Storage at Specific Blockhash using JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Polkadot.js API to query storage at a specific blockhash. It retrieves the last block header, queries balance at the preceding block, and performs a multi-query for multiple account balances. The example uses predefined addresses for Alice and Bob on the dev chain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/read-storage-at.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API\nconst { ApiPromise } = require('@polkadot/api');\n\n// Our address for Alice on the dev chain\nconst ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\nconst BOB = '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty';\n\nasync function main () {\n  // Create our API with a default connection to the local node\n  const api = await ApiPromise.create();\n\n  // Retrieve the last block header, extracting the hash and parentHash\n  const { hash, parentHash } = await api.rpc.chain.getHeader();\n\n  console.log(`last header hash ${hash.toHex()}`);\n\n  // Retrieve the balance at the preceding block for Alice using an at api\n  const apiAt = await api.at(parentHash);\n  const balance = await apiAt.query.system.account(ALICE);\n\n  console.log(`Alice's balance at ${parentHash.toHex()} was ${balance.data.free}`);\n\n  // Now perform a multi query, returning multiple balances at once\n  const balances = await api.query.system.account.multi([ALICE, BOB]);\n\n  console.log(`Current balances for Alice and Bob are ${balances[0].data.free} and ${balances[1].data.free}`);\n}\n\nmain().catch(console.error).finally(() => process.exit());\n```\n\n----------------------------------------\n\nTITLE: Adding Keypair to Polkadot Keyring\nDESCRIPTION: Generates a mnemonic phrase and adds a new ed25519 keypair to the keyring with metadata. Demonstrates creating a keypair with a specific crypto type and adding custom metadata.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/create.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mnemonicGenerate } from '@polkadot/util-crypto';\n\n// generate a mnemonic with default params (we can pass the number\n// of words required 12, 15, 18, 21 or 24, less than 12 words, while\n// valid, is not supported since it is more-easily crackable)\nconst mnemonic = mnemonicGenerate();\n\n// create & add the pair to the keyring with the type and some additional\n// metadata specified\nconst pair = keyring.addFromUri(mnemonic, { name: 'first pair' }, 'ed25519');\n\n// the pair has been added to our keyring\nconsole.log(keyring.pairs.length, 'pairs available');\n\n// log the name & address (the latter encoded with the ss58Format)\nconsole.log(pair.meta.name, 'has address', pair.address);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Hash and Extrinsic Hashes in Polkadot.js\nDESCRIPTION: This example demonstrates how to retrieve a block hash using the block number, get the signed block, and access both the block header hash and individual extrinsic hashes within the block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/blocks.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// returns Hash\nconst blockHash = await api.rpc.chain.getBlockHash(blockNumber);\n// returns SignedBlock\nconst signedBlock = await api.rpc.chain.getBlock(blockHash);\n\n// the hash for the block, always via header (Hash -> toHex()) - will be\n// the same as blockHash above (also available on any header retrieved,\n// subscription or once-off)\nconsole.log(signedBlock.block.header.hash.toHex());\n\n// the hash for each extrinsic in the block\nsignedBlock.block.extrinsics.forEach((ex, index) => {\n  console.log(index, ex.hash.toHex());\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using RPC Chain Interfaces in Polkadot-JS\nDESCRIPTION: This snippet demonstrates how to import Header type from Polkadot types interfaces and use it with RPC chain methods. It shows both a direct call to getHeader and a subscription to new block headers, with proper typing.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/typescript.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Header } from '@polkadot/types/interfaces';\n\n...\nconst firstHead = api.rpc.chain.getHeader();\n\napi.rpc.chain.subscribeNewHeads((lastHead: Header): void => {\n  console.log('current header:', JSON.stringify(lastHead));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Simple and Struct Types in Polkadot.js API\nDESCRIPTION: Demonstrates how to create simple types like Balance and custom struct types using api.createType in Polkadot.js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.create.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = api.createType('Balance', 123);\nconsole.log(`x is equal to ${x.toNumber()}`);\n\n...\nconst api = await ApiPromise.create({\n  types: {\n    MyStruct: {\n      a: \"u32\",\n      b: \"Vec<u32>\",\n      c: \"Option<u32>\"\n    }\n  }\n});\n\nconst s = api.createType(\"MyStruct\", {a: 1, b: [2, 3], c: 4});\nconsole.log(`s.a == ${s.a.toNumber()}`);\nconsole.log(`s.b == ${s.b.toJSON()}`);\nconsole.log(`s.c == ${s.c.unwrap().toNumber()}`);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to New Blocks using Polkadot.js API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to subscribe to new blocks using the Polkadot.js API. It initializes a connection to a Polkadot node, subscribes to new block headers, and logs the block number for each new block. The subscription runs indefinitely until manually terminated.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/rxjs/02_listen_to_blocks/README.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Import the API\nconst { ApiPromise, WsProvider } = require('@polkadot/api');\n\nasync function main () {\n  // Initialise the provider to connect to the local node\n  const provider = new WsProvider('ws://127.0.0.1:9944');\n\n  // Create the API and wait until ready\n  const api = await ApiPromise.create({ provider });\n\n  // Subscribe to chain updates and log the current block number on update.\n  const unsubscribe = await api.rpc.chain.subscribeNewHeads((header) => {\n    console.log(`Chain is at block: #${header.number}`);\n  });\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exit(-1);\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Polkadot API and Retrieving Chain Information in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a connection to the Polkadot network using a WebSocket provider, initialize the API, and retrieve chain properties. It uses the @polkadot/api package and logs the chain information, which includes the ss58 format, token decimals, and token symbol.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/chain-info.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API\nimport { ApiPromise, WsProvider } from '@polkadot/api';\n\nasync function main () {\n  // Create connection to websocket\n  const wsProvider = new WsProvider('wss://rpc.polkadot.io');\n  // Create a new instance of the api\n  const api = await ApiPromise.create({ provider: wsProvider });\n  // get the chain information\n  const chainInfo = await api.registry.getChainProperties()\n\n  console.log(chainInfo);\n  // for Polkadot this would print\n  // {ss58Format: 0, tokenDecimals: [10], tokenSymbol: [DOT]}\n}\n\nmain().catch(console.error).finally(() => process.exit());\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Module Storage in Polkadot.js API\nDESCRIPTION: Examples of how to access staking module storage using the Polkadot.js API. These queries allow retrieving information about validators, nominators, eras, and other staking-related data.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n// Query era stakers overview\nconst stakersOverview = await api.query.staking.erasStakersOverview(eraIndex, validatorStash);\n\n// Query paginated exposure of a validator\nconst exposurePage = await api.query.staking.erasStakersPaged(eraIndex, validatorStash, pageIndex);\n\n// Get era start session index\nconst sessionIndex = await api.query.staking.erasStartSessionIndex(eraIndex);\n\n// Get total stake for an era\nconst totalStake = await api.query.staking.erasTotalStake(eraIndex);\n\n// Get validator preferences for an era\nconst validatorPrefs = await api.query.staking.erasValidatorPrefs(eraIndex, validatorStash);\n\n// Get validator reward for an era\nconst validatorReward = await api.query.staking.erasValidatorReward(eraIndex);\n\n// Check force era setting\nconst forceEra = await api.query.staking.forceEra();\n\n// Get list of invulnerable validators\nconst invulnerables = await api.query.staking.invulnerables();\n\n// Get staking ledger for a controller account\nconst ledger = await api.query.staking.ledger(controllerAccount);\n\n// Query nominators information\nconst nominator = await api.query.staking.nominators(nominatorStash);\n\n// Get payee (reward destination) for a stash account\nconst payee = await api.query.staking.payee(stashAccount);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Account Balance Changes with Polkadot.js API in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Polkadot API instance, retrieve initial account information, and subscribe to ongoing balance changes. It retrieves the initial balance and nonce for a known account (ALICE), then sets up a subscription that logs any balance changes that occur. The example calculates the delta between the current and previous balance to show only positive changes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/listen-to-balance-change.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API\nconst { ApiPromise } = require('@polkadot/api');\n\n// Known account we want to use (available on dev chain, with funds)\nconst ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n\nasync function main () {\n  // Create an await for the API\n  const api = await ApiPromise.create();\n\n  // Retrieve the initial balance. Since the call has no callback, it is simply a promise\n  // that resolves to the current on-chain value\n  let { data: { free: previousFree }, nonce: previousNonce } = await api.query.system.account(ALICE);\n\n  console.log(`${ALICE} has a balance of ${previousFree}, nonce ${previousNonce}`);\n  console.log(`You may leave this example running and start example 06 or transfer any value to ${ALICE}`);\n\n  // Here we subscribe to any balance changes and update the on-screen value\n  api.query.system.account(ALICE, ({ data: { free: currentFree }, nonce: currentNonce }) => {\n    // Calculate the delta\n    const change = currentFree.sub(previousFree);\n\n    // Only display positive value changes (Since we are pulling `previous` above already,\n    // the initial balance change will also be zero)\n    if (!change.isZero()) {\n      console.log(`New balance change of ${change}, nonce ${currentNonce}`);\n\n      previousFree = currentFree;\n      previousNonce = currentNonce;\n    }\n  });\n}\n\nmain().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Processing Transaction Events with Polkadot.js API\nDESCRIPTION: This snippet shows how to handle transaction events using the Polkadot.js API. It demonstrates sending a transaction, waiting for finalization, and then looping through the emitted events to display their details.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.tx.subs.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsub = await api.tx.balances\n  .transfer(BOB, 12345)\n  .signAndSend(alice, ({ events = [], status, txHash }) => {\n    console.log(`Current status is ${status.type}`);\n\n    if (status.isFinalized) {\n      console.log(`Transaction included at blockHash ${status.asFinalized}`);\n      console.log(`Transaction hash ${txHash.toHex()}`);\n\n      // Loop through Vec<EventRecord> to display all events\n      events.forEach(({ phase, event: { data, method, section } }) => {\n        console.log(`\\t' ${phase}: ${section}.${method}:: ${data}`);\n      });\n\n      unsub();\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Loading Polkadot Keyring Accounts in JavaScript\nDESCRIPTION: Creates a keyring instance, adds accounts for Alice and Bob using seed phrases, retrieves all account pairs, and converts them to JSON format. Uses @polkadot/keyring for account management and @polkadot/util for string to byte array conversion.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/examples/load-accounts.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import Keyring class and utility function\nconst { Keyring } = require('@polkadot/keyring');\nconst { stringToU8a } = require('@polkadot/util');\n\nasync function main () {\n  // Create account seed for Alice and Bob\n  const ALICE_SEED = 'Alice'.padEnd(32, ' ');\n  const BOB_SEED = 'Bob'.padEnd(32, ' ');\n\n  // Create an instance of the Keyring\n  const keyring = new Keyring();\n\n  // Create their pairs with account seeds. Add to keyring pair dictionary\n  keyring.addFromSeed(stringToU8a(ALICE_SEED));\n  keyring.addFromSeed(stringToU8a(BOB_SEED));\n\n  // Note that we did not use `addFromAddress` since it does not add the\n  // secret key to memory so we cannot later retrieve it with `getPairs`\n\n  // Retrieve all keyring pairs from the keyring pair dictionary\n  keyring\n    .getPairs()\n    .forEach((pair, index) => {\n      const { address } = pair;\n\n      console.log(`\\nAccount with index #${index} has json: `, JSON.stringify(keyring.toJson(address), null, 2));\n    });\n}\n\nmain().catch(console.error).finally(() => process.exit());\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Balance Changes with Polkadot.js API\nDESCRIPTION: Example shows how to create a subscription to monitor account balance changes using the Polkadot.js API. Connects to a node and sets up a listener for balance updates. Demonstrates the reactive pattern for blockchain state monitoring.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/rxjs/03_listen_to_balance_change/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@/docs/examples/rx/03_listen_to_balance_change/index.js\n```\n\n----------------------------------------\n\nTITLE: Initializing Keyring with WASM Loading in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Polkadot-js keyring after ensuring the WASM libraries are loaded. It uses cryptoWaitReady() to wait for WASM initialization before loading all available addresses and accounts with specific settings.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/init.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport keyring from '@polkadot/ui-keyring';\nimport { cryptoWaitReady } from '@polkadot/util-crypto';\n\ncryptoWaitReady().then(() => {\n  // load all available addresses and accounts\n  keyring.loadAll({ ss58Format: 42, type: 'sr25519' });\n\n  // additional initialization here, including rendering\n});\n```\n\n----------------------------------------\n\nTITLE: Setting New Runtime Code in System Module\nDESCRIPTION: Sets new runtime code for the blockchain. This function updates the execution logic of the blockchain and is a fundamental upgrade mechanism.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_176\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.system.setCode(code)\n```\n\n----------------------------------------\n\nTITLE: Creating API Instance with Custom RPC Definitions in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Polkadot.js API instance with custom RPC method definitions. It shows the structure for defining modules, methods with descriptions, parameter types, and return types. The example defines a 'testMethod' on 'firstModule' which accepts an index parameter and optional hash parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/rpc.custom.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = await ApiPromise.create({\n  rpc: {\n    firstModule: {\n      testMethod: {\n        description: 'Just a test method',\n        params: [\n          {\n            name: 'index',\n            type: 'u64'\n          },\n          {\n            name: 'at',\n            type: 'Hash',\n            isOptional: true\n          }\n        ],\n        type: 'Balance'\n      },\n      anotherMethod: { ... },\n      ...\n    },\n    anotherModule: { ... },\n    ...\n  },\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Unsigned Extrinsics in Polkadot/Substrate\nDESCRIPTION: This snippet shows how to send unsigned transactions for runtime modules that accept them. It constructs the transaction normally but sends it without signing, which is useful for operations like token claims that don't require signatures.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/tx.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// construct the transaction, exactly as per normal\nconst utx = api.tx.claims.claim(beneficiary, ethSignature);\n\n// send it without calling sign, pass callback with status/events\ntx.send(({ status }) => {\n  if (status.isInBlock) {\n    console.log(`included in ${status.asInBlock}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ContractPromise in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new ContractPromise instance, which is used to interact with a deployed contract. It requires the API, metadata, and contract address.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api-contract/start/contract.read.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ContractPromise } from '@polkadot/api-contract';\n\n// The address is the actual on-chain address as ss58 or AccountId object.\nconst contract = new ContractPromise(api, metadata, address);\n```\n\n----------------------------------------\n\nTITLE: Signing a Message with Polkadot JS Extension in JavaScript\nDESCRIPTION: This snippet shows how to sign a raw message with an account injected by the Polkadot JS extension. It retrieves the signing interface for a specific account and uses it to sign a hex-encoded message.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/extension/cookbook.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { stringToHex } from \"@polkadot/util\";\n\n// `account` is of type InjectedAccountWithMeta \n// We arbitrarily select the first account returned from the above snippet\nconst account = allAccounts[0];\n\n// to be able to retrieve the signer interface from this account\n// we can use web3FromSource which will return an InjectedExtension type\nconst injector = await web3FromSource(account.meta.source);\n\n\n// this injector object has a signer and a signRaw method\n// to be able to sign raw bytes\nconst signRaw = injector?.signer?.signRaw;\n\nif (!!signRaw) {\n    // after making sure that signRaw is defined\n    // we can use it to sign our message\n    const { signature } = await signRaw({\n        address: account.address,\n        data: stringToHex('message to sign'),\n        type: 'bytes'\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Transaction in Polkadot.js\nDESCRIPTION: Validates a transaction against the current state. This method is called by the transaction pool to verify transaction correctness.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.taggedTransactionQueue.validateTransaction(source: SpRuntimeTransactionValidityTransactionSource, tx: SpRuntimeUncheckedExtrinsic, block_hash: PrimitiveTypesH256): Result<SpRuntimeTransactionValidityValidTransaction, SpRuntimeTransactionValidityTransactionValidityError>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transaction Structs in JavaScript\nDESCRIPTION: Shows how to register complex user-defined structures including nested types. This example defines TransactionInput, TransactionOutput, and Transaction types that reference each other.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.extend.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = await ApiPromise.create({\n  ...,\n  types: {\n    TransactionInput: {\n      parentOutput: 'Hash',\n      signature: 'Signature'\n    },\n    TransactionOutput: {\n      value: 'u128',\n      pubkey: 'Hash',\n      sale: 'u32'\n    },\n    Transaction: {\n      inputs: 'Vec<TransactionInput>',\n      outputs: 'Vec<TransactionOutput>'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Performing State Calls in Polkadot-js API\nDESCRIPTION: This method allows performing a call to a builtin on the chain. It takes a method name, data, and an optional block hash as parameters. It is accessed through the api.rpc.state.call interface and corresponds to the state_call JSON-RPC endpoint.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/rpc.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncall(method: Text, data: Bytes, at?: BlockHash): Bytes\n```\n\n----------------------------------------\n\nTITLE: Signing and Verifying Messages with Known Keypair in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an Alice keypair, sign a message, and verify the signature using the same pair. It uses the Polkadot.js util library for string and byte array conversions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/sign-verify.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { stringToU8a, u8aToHex } from '@polkadot/util';\n\n// create Alice based on the development seed\nconst alice = keyring.addFromUri('//Alice');\n\n// create the message, actual signature and verify\nconst message = stringToU8a('this is our message');\nconst signature = alice.sign(message);\nconst isValid = alice.verify(message, signature, alice.publicKey);\n\n// output the result\nconsole.log(`${u8aToHex(signature)} is ${isValid ? 'valid' : 'invalid'}`);\n```\n\n----------------------------------------\n\nTITLE: Checking Storage Existence in Polkadot.js\nDESCRIPTION: This snippet demonstrates how to check for the existence of storage items in Polkadot.js. It shows querying for both existent and non-existent storage items, and how to interpret the results.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/storage.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// retrieve Option<StakingLedger>\nconst ledger = await api.query.staking.ledger('EoukLS2Rzh6dZvMQSkqFy4zGvqeo14ron28Ue3yopVc8e3Q');\n// retrieve ValidatorPrefs (will yield the default value)\nconst prefs = await api.query.staking.validators('EoukLS2Rzh6dZvMQSkqFy4zGvqeo14ron28Ue3yopVc8e3Q');\n\nconsole.log(ledger.isNone, ledger.isSome); // true, false\nconsole.log(JSON.stringify(prefs.toHuman())); // {\"commission\":\"0\"}\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Values in JavaScript\nDESCRIPTION: This code demonstrates how to query a contract's value using the ContractPromise interface. It sets gas limits, storage deposit limits, and handles the query result, including error checking.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api-contract/start/contract.read.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// maximum gas to be consumed for the call. if limit is too small the call will fail.\nconst gasLimit = 3000n * 1000000n;\n// a limit to how much Balance to be used to pay for the storage created by the contract call\n// if null is passed, unlimited balance can be used\nconst storageDepositLimit = null\n// balance to transfer to the contract account. use only with payable messages, will fail otherwise. \n// formerly know as \"endowment\"\nconst value: api.registry.createType('Balance', 1000)\n\n// (We perform the send from an account, here using Alice's address)\nconst { gasRequired, storageDeposit, result, output } = await contract.query.get(\n  alicePair.address,\n  {\n    gasLimit,\n    storageDepositLimit,\n  }\n);\n\n// The actual result from RPC as `ContractExecResult`\nconsole.log(result.toHuman());\n\n// the gas consumed for contract execution\nconsole.log(gasRequired.toHuman());\n\n// check if the call was successful\nif (result.isOk) {\n  // output the return value\n  console.log('Success', output.toHuman());\n} else {\n  console.error('Error', result.asErr);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying blockchain storage with Polkadot.js API in JavaScript\nDESCRIPTION: This code connects to a local Polkadot node and queries multiple storage items including account details, current timestamp, and validator information. It demonstrates parallel queries using Promise.all() and formats the validator data into a readable structure with addresses, balances, and nonces.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/read-storage.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API\nconst { ApiPromise } = require('@polkadot/api');\n\n// Our address for Alice on the dev chain\nconst ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n\nasync function main () {\n  // Create our API with a default connection to the local node\n  const api = await ApiPromise.create();\n\n  // Make our basic chain state/storage queries, all in one go\n  const [{ nonce: accountNonce }, now, validators] = await Promise.all([\n    api.query.system.account(ALICE),\n    api.query.timestamp.now(),\n    api.query.session.validators()\n  ]);\n\n  console.log(`accountNonce(${ALICE}) ${accountNonce}`);\n  console.log(`last block timestamp ${now.toNumber()}`);\n\n  if (validators && validators.length > 0) {\n    // Retrieve the balances for all validators\n    const validatorBalances = await Promise.all(\n      validators.map((authorityId) =>\n        api.query.system.account(authorityId)\n      )\n    );\n\n    // Print out the authorityIds and balances of all validators\n    console.log('validators', validators.map((authorityId, index) => ({\n      address: authorityId.toString(),\n      balance: validatorBalances[index].data.free.toHuman(),\n      nonce: validatorBalances[index].nonce.toHuman()\n    })));\n  }\n}\n\nmain().catch(console.error).finally(() => process.exit());\n```\n\n----------------------------------------\n\nTITLE: Adding Raw Seed Account to Keyring in JavaScript\nDESCRIPTION: This snippet shows how to generate a random hex raw seed, add it to the keyring with a password, and specify it as an ed25519 key type. It returns a pair instance and encrypted JSON.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/accounts.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { randomAsHex } from '@polkadot/util-crypto';\n\n...\n// generate a random hex raw seed, this needs to be 32 bytes in length\nconst seed = randomAsHex(32);\n\n// add the account, encrypting it, override to ed25519\nconst { pair, json } = keyring.addUri(seed, 'weakpass', { name: 'hex seed acc' }, 'ed25519');\n```\n\n----------------------------------------\n\nTITLE: Applying Authorized Runtime Upgrade in System Module\nDESCRIPTION: Provides the preimage (runtime binary) code for an upgrade that has been authorized. This function may directly apply the new code or schedule the upgrade depending on OnSetCode configuration. All origins are allowed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_169\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.system.applyAuthorizedUpgrade(code)\n```\n\n----------------------------------------\n\nTITLE: Configuring Address Types for Polkadot-JS API in JavaScript\nDESCRIPTION: Examples of how to configure different Address types when creating an API instance to match the chain's configuration. This is crucial for ensuring correct transaction encoding and avoiding decoding errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/FAQ.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// For MultiAddress (current default in Substrate master)\nApi.create({ types: { \"Address\": \"MultiAddress\", \"LookupSource\": \"MultiAddress\" } })\n\n// For IndicesLookupSource\nApi.create({ types: { \"Address\": \"IndicesLookupSource\", \"LookupSource\": \"IndicesLookupSource\" } })\n\n// For AccountId\nApi.create({ types: { \"Address\": \"AccountId\", \"LookupSource\": \"AccountId\" } })\n```\n\n----------------------------------------\n\nTITLE: Initializing WASM with asm.js fallback for @polkadot/util-crypto\nDESCRIPTION: This code snippet shows how to initialize WASM with an asm.js fallback for @polkadot/util-crypto. It should be executed before any operations from the library.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/util-crypto/FAQ.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@polkadot/wasm-crypto/initWasmAsm';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Map Entries for Staking Exposures in Polkadot.js API\nDESCRIPTION: This code demonstrates how to retrieve all entries in a storage map using the `.entries()` method. It first gets the active era from the staking module, then retrieves all staker exposures for that era, displaying both the key arguments and exposure data for each entry.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.other.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Retrieve the active era\nconst activeEra = await api.query.staking.activeEra();\n\n// retrieve all exposures for the active era\nconst exposures = await api.query.staking.erasStakers.entries(activeEra.unwrap().index);\n\nexposures.forEach(([key, exposure]) => {\n  console.log('key arguments:', key.args.map((k) => k.toHuman()));\n  console.log('     exposure:', exposure.toHuman());\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Account Balances with Polkadot JS API in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Polkadot API instance, connect to a node, and subscribe to balance changes for specified accounts. It uses the multi-query functionality to efficiently track multiple accounts simultaneously.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/listen-to-multiple-balances-change.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API\nconst { ApiPromise } = require('@polkadot/api');\n\n// Known account we want to use (available on dev chain, with funds)\nconst ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\nconst BOB = '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty';\n\nasync function main () {\n  // Create an await for the API\n  const api = await ApiPromise.create();\n\n  console.log('Tracking balances for:', [ALICE, BOB]);\n\n  // Subscribe and listen to several balance changes\n  api.query.system.account.multi([ALICE, BOB], (balances) => {\n    console.log('Change detected, new balances: ', balances.map(({ data: { free } }) => free));\n  });\n}\n\nmain().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Adding Accounts via Mnemonic and Derivation Paths in Polkadot-js\nDESCRIPTION: Demonstrates how to add accounts to a keyring using a mnemonic phrase with different derivation methods. This includes direct mnemonic addition, advanced derivation paths, and development accounts.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/keyring.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\n// Some mnemonic phrase\nconst PHRASE = 'entire material egg meadow latin bargain dutch coral blood melt acoustic thought';\n\n// Add an account, straight mnemonic\nconst newPair = keyring.addFromUri(PHRASE);\n\n// (Advanced) add an account with a derivation path (hard & soft)\nconst newDeri = keyring.addFromUri(`${PHRASE}//hard-derived/soft-derived`);\n\n// (Advanced, development-only) add with an implied dev seed and hard derivation\nconst alice = keyring.addFromUri('//Alice', { name: 'Alice default' });\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Account Balances Using Multi Query\nDESCRIPTION: Demonstrates how to subscribe to balance changes for multiple accounts simultaneously using the .multi interface. This approach is more efficient than making individual calls for each account.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.multi.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsub = await api.query.system.account.multi([ADDR1, ADDR2], (balances) => {\n  const [{ data: balance1 }, { data: balance2 }] = balances;\n\n  console.log(`The balances are ${balance1.free} and ${balance2.free}`);\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Augmentation Imports\nDESCRIPTION: Import statements for different type augmentation configurations in Polkadot.js API v7.x and later. These imports must be added before any API imports to ensure proper type resolution.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/FAQ.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@polkadot/api-augment'\nimport '@polkadot/api-augment/substrate'\nimport '@polkadot/api-augment/kusama'\nimport '@polkadot/api-augment/polkadot'\nimport '@polkadot/rpc-augment'\nimport '@polkadot/types-augment'\nimport '@polkadot/types-augment/lookup'\nimport '@polkadot/types-augment/registry'\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information in JavaScript\nDESCRIPTION: Examples of how to query account information (nonce and balance) using different API methods depending on the chain's version and available storage entries.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/FAQ.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// For newer chains\napi.query.system.account(accountId)\n\n// For older chains\napi.query.system.accountNonce(accountId)\napi.query.balances.freeBalance(accountId)\n```\n\n----------------------------------------\n\nTITLE: Decoding ExtrinsicFailed Events in Polkadot/Substrate\nDESCRIPTION: This snippet shows how to retrieve and decode error information when a transaction fails with a system.ExtrinsicFailed event. It filters events for failures and extracts the error details from the event data, including module-specific errors with their section and method.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/tx.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napi.tx.balances\n  .transfer(recipient, 123)\n  .signAndSend(sender, ({ status, events }) => {\n    if (status.isInBlock || status.isFinalized) {\n      events\n        // find/filter for failed events\n        .filter(({ event }) =>\n          api.events.system.ExtrinsicFailed.is(event)\n        )\n        // we know that data for system.ExtrinsicFailed is\n        // (DispatchError, DispatchInfo)\n        .forEach(({ event: { data: [error, info] } }) => {\n          if (error.isModule) {\n            // for module errors, we have the section indexed, lookup\n            const decoded = api.registry.findMetaError(error.asModule);\n            const { docs, method, section } = decoded;\n\n            console.log(`${section}.${method}: ${docs.join(' ')}`);\n          } else {\n            // Other, CannotLookup, BadOrigin, no extra info\n            console.log(error.toString());\n          }\n        });\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Accessing Balances Module Constants in Polkadot.js API\nDESCRIPTION: Examples of retrieving constants related to account balances using the Polkadot.js API. Includes existential deposit and limits on locks, freezes, and reserves.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Minimum amount to keep an account open\nconst existentialDeposit = api.consts.balances.existentialDeposit;\n\n// Maximum number of individual freeze locks per account\nconst maxFreezes = api.consts.balances.maxFreezes;\n\n// Maximum number of locks per account\nconst maxLocks = api.consts.balances.maxLocks;\n\n// Maximum number of named reserves per account\nconst maxReserves = api.consts.balances.maxReserves;\n```\n\n----------------------------------------\n\nTITLE: Signing and Verifying Messages with NaCl in JavaScript\nDESCRIPTION: This code snippet demonstrates the process of signing and verifying a message using NaCl cryptography. It includes steps for generating keypairs, encrypting messages, creating signatures, and verifying them. The example uses the @polkadot/util and @polkadot/util-crypto libraries.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/examples/sign-verify.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  stringToU8a,\n  u8aToHex\n} = require('@polkadot/util');\nconst {\n  naclEncrypt,\n  ed25519PairFromSeed,\n  ed25519Sign,\n  ed25519Verify,\n  randomAsU8a\n} = require('@polkadot/util-crypto');\n\nasync function main () {\n  // Create account seed for an \"Alice\" account (generally rather use mnemonics)\n  const seedAlice = 'Alice'.padEnd(32, ' ');\n\n  // Generate new public/secret keypair for Alice from the supplied seed\n  const { publicKey, secretKey } = ed25519PairFromSeed(stringToU8a(seedAlice));\n\n  // Encrypt message. Create Uint8Array's filled with random bytes of specified length\n  const secret = randomAsU8a(32);\n  const messagePreEncryption = stringToU8a('please send me DOTs');\n  const noncePreEncryption = randomAsU8a(24);\n\n  const { encrypted } = naclEncrypt(messagePreEncryption, secret, noncePreEncryption);\n\n  // Sign the message with a valid signature\n  const messageSignature = ed25519Sign(encrypted, secretKey);\n\n  console.log(`Message signature: ${u8aToHex(messageSignature)}`);\n\n  // Validate that the message was correctly signed\n  const isValidSignature = ed25519Verify(encrypted, messageSignature, publicKey);\n\n  console.log(`Was the message correctly signed? ${isValidSignature}`);\n}\n\nmain().catch(console.error).finally(() => process.exit());\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Distinct Types Using queryMulti\nDESCRIPTION: Demonstrates how to query multiple different state types simultaneously using queryMulti. This example tracks timestamp, account nonce, and balance in a single subscription.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.multi.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsub = await api.queryMulti([\n  api.query.timestamp.now,\n  [api.query.system.account, ADDR]\n], ([now, { nonce, data: balance }]) => {\n  console.log(`${now}: balance of ${balance.free} and a nonce of ${nonce}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Using BEEFY Methods in Polkadot.js API\nDESCRIPTION: This snippet demonstrates the BEEFY-related methods available in the Polkadot.js API for retrieving finalized block information and subscribing to justifications.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.beefy.getFinalizedHead(): H256\napi.rpc.beefy.subscribeJustifications(): BeefyVersionedFinalityProof\n```\n\n----------------------------------------\n\nTITLE: Creating and Formatting Addresses with Different SS58 Formats in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a keyring, generate a keypair from a mnemonic, and format the resulting address using different SS58 formats for Substrate, Kusama, and Polkadot networks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/ss58.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// known mnemonic, well, now it is - don't use it for funds\nconst MNEMONIC = 'sample split bamboo west visual approve brain fox arch impact relief smile';\n\n// type: ed25519, ssFormat: 42 (all defaults)\nconst keyring = new Keyring();\nconst pair = keyring.createFromUri(MNEMONIC);\n\n// use the default as setup on init\n// 5CSbZ7wG456oty4WoiX6a1J88VUbrCXLhrKVJ9q95BsYH4TZ\nconsole.log('Substrate generic', pair.address);\n\n// adjust the default ss58Format for Kusama\n// CxDDSH8gS7jecsxaRL9Txf8H5kqesLXAEAEgp76Yz632J9M\nkeyring.setSS58Format(2);\nconsole.log('Kusama', pair.address);\n\n// adjust the default ss58Format for Polkadot\n// 1NthTCKurNHLW52mMa6iA8Gz7UFYW5UnM3yTSpVdGu4Th7h\nkeyring.setSS58Format(0);\nconsole.log('Polkadot', pair.address);\n```\n\n----------------------------------------\n\nTITLE: Contract Cost Estimation with Polkadot.js\nDESCRIPTION: Shows how to estimate gas and storage deposit costs for a contract call using the .query interface. Demonstrates dry-running the contract call with maximum limits to determine actual resource consumption.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api-contract/start/contract.tx.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst incValue = 1;\nconst options = { storageDepositLimit: null, gasLimit: -1 }\n\nconst { gasRequired, storageDeposit, result } = await contract.query.inc(\n  alicePair,\n  options,\n  incValue\n);\n\nconsole.log(`outcome: ${result.isOk ? 'Ok' : 'Error'}`);\nconsole.log(`gasRequired ${gasRequired.toString()}`);\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Entry Hash and Size in Polkadot.js API\nDESCRIPTION: This code shows how to retrieve metadata about state entries using the `.hash()` and `.size()` methods. It queries both the hash and size of an account's state entry in bytes, then outputs this information. These are one-shot queries that provide information about the on-chain storage.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.other.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Retrieve the hash & size of the entry as stored on-chain\nconst [entryHash, entrySize] = await Promise.all([\n  api.query.system.account.hash(ADDR),\n  api.query.system.account.size(ADDR)\n]);\n\n// Output the info\nconsole.log(`The current size is ${entrySize} bytes with a hash of ${entryHash}`);\n```\n\n----------------------------------------\n\nTITLE: Verifying Message Signatures using Polkadot Crypto Utils in JavaScript\nDESCRIPTION: Demonstrates signature verification using the @polkadot/util-crypto library. The function takes a signed message, signature, and address as inputs and verifies if the signature is valid. It requires the cryptoWaitReady initialization for WASM-based operations like sr25519.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/util-crypto/examples/verify-signature.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { cryptoWaitReady, decodeAddress, signatureVerify } = require('@polkadot/util-crypto');\nconst { u8aToHex } = require('@polkadot/util');\n\nconst isValidSignature = (signedMessage, signature, address) => {\n  const publicKey = decodeAddress(address);\n  const hexPublicKey = u8aToHex(publicKey);\n\n  return signatureVerify(signedMessage, signature, hexPublicKey).isValid;\n};\n\nconst main = async () => {\n  //Some interfaces, such as using sr25519 however are only available via WASM\n  await cryptoWaitReady();\n  const isValid = isValidSignature(\n    'This is a text message',\n    '0x2aeaa98e26062cf65161c68c5cb7aa31ca050cb5bdd07abc80a475d2a2eebc7b7a9c9546fbdff971b29419ddd9982bf4148c81a49df550154e1674a6b58bac84',\n    '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty'\n  );\n  console.log(isValid)\n  // true\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting Messages with NaCl in JavaScript\nDESCRIPTION: Example showing how to encrypt a message using naclEncrypt and decrypt it using naclDecrypt from the Polkadot util-crypto library. The code demonstrates generating a random secret, converting strings to Uint8Array format, performing encryption/decryption operations, and verifying the decrypted message matches the original.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/util-crypto/examples/encrypt-decrypt.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  naclDecrypt,\n  naclEncrypt,\n  randomAsU8a\n} = require('@polkadot/util-crypto');\nconst {\n  stringToU8a,\n  u8aToString\n} = require('@polkadot/util');\n\nasync function main () {\n  const secret = randomAsU8a();\n  const messagePreEncryption = stringToU8a('super secret message');\n\n  // Encrypt the message\n  const { encrypted, nonce } = naclEncrypt(messagePreEncryption, secret);\n\n  // Show contents of the encrypted message\n  console.log(`Encrypted message: ${JSON.stringify(encrypted, null, 2)}`);\n\n  // Decrypt the message\n  const messageDecrypted = naclDecrypt(encrypted, nonce, secret);\n\n  // Convert each Uint8Array to a string for comparison\n  const isMatch = u8aToString(messagePreEncryption) === u8aToString(messageDecrypted);\n\n  // Verify that the decrypted message matches the original message\n  console.log(`Does the decrypted message match the original message? ${isMatch}`);\n}\n\nmain().catch(console.error).finally(() => process.exit());\n```\n\n----------------------------------------\n\nTITLE: Accessing Balances Module Storage in Polkadot JS API\nDESCRIPTION: Methods to query account balances, locks, holds, freezes, reserves, and issuance information from the balances module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\napi.query.balances.account(accountId)\n```\n\n----------------------------------------\n\nTITLE: Monitoring System Events with Polkadot.js in JavaScript\nDESCRIPTION: Connects to a Polkadot node and subscribes to system events, displaying event details like block number, event section, method, and data. The script runs continuously until terminated with Ctrl-C. Code showcases real-time event monitoring patterns.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/rxjs/08_system_events/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@/docs/examples/rx/08_system_events/index.js\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Crypto Type Keypairs\nDESCRIPTION: Demonstrates creating both ed25519 and sr25519 keypairs from the same mnemonic without adding them to the keyring. Includes WASM initialization required for sr25519.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/create.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cryptoWaitReady, mnemonicGenerate } from '@polkadot/util-crypto';\n\n// we only need to do this once per app, somewhere in our init code\n// (when using the API and waiting on `isReady` this is done automatically)\nawait cryptoWaitReady();\n\n// create an ed25519 pair from the mnemonic\nconst ep = keyring.createFromUri(mnemonic, { name: 'ed25519' }, 'ed25519');\n\n// create an sr25519 pair from the mnemonic (keyring defaults)\nconst sp = keyring.createFromUri(mnemonic, { name: 'sr25519' });\n\n// log the addresses, different cryptos, different results\nconsole.log(ep.meta.name, ep.address);\nconsole.log(sp.meta.name, sp.address);\n```\n\n----------------------------------------\n\nTITLE: Querying State at a Specific Block Hash in Polkadot.js API\nDESCRIPTION: This snippet demonstrates how to query blockchain state at a specific block using the Polkadot.js API. It retrieves the current block header, creates a decorated API instance for that specific block hash, and then queries the free balance of an account at that point in the chain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.other.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Retrieve the current block header\nconst lastHdr = await api.rpc.chain.getHeader();\n\n// Get a decorated api instance at a specific block\nconst apiAt = await api.at(lastHdr.hash);\n\n// query the balance at this point of the chain\nconst { data: { free } } = await apiAt.query.system.account(ADDR);\n\n// Display the free balance\nconsole.log(`The current free is ${free.toString()}`);\n```\n\n----------------------------------------\n\nTITLE: Basic RPC Chain Queries in Polkadot.js\nDESCRIPTION: Demonstrates basic RPC calls to retrieve chain information and latest block header using the Polkadot.js API. Shows how to get chain name and latest header information asynchronously.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.rpc.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Retrieve the chain name\nconst chain = await api.rpc.system.chain();\n\n// Retrieve the latest header\nconst lastHeader = await api.rpc.chain.getHeader();\n\n// Log the information\nconsole.log(`${chain}: last block #${lastHeader.number} has hash ${lastHeader.hash}`);\n```\n\n----------------------------------------\n\nTITLE: Interacting with Chain Methods in Polkadot.js API\nDESCRIPTION: This snippet shows the chain-related methods available in the Polkadot.js API for retrieving block information, headers, and subscribing to various chain events.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.chain.getBlock(hash?: BlockHash): SignedBlock\napi.rpc.chain.getBlockHash(blockNumber?: BlockNumber): BlockHash\napi.rpc.chain.getFinalizedHead(): BlockHash\napi.rpc.chain.getHeader(hash?: BlockHash): Header\napi.rpc.chain.subscribeAllHeads(): Header\napi.rpc.chain.subscribeFinalizedHeads(): Header\napi.rpc.chain.subscribeNewHeads(): Header\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Withdraw Unbonded\nDESCRIPTION: Removes unlocked chunks from the unlocking queue, freeing up balance for the stash account. Must be signed by the controller.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_168\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.withdrawUnbonded(num_slashing_spans)\n```\n\n----------------------------------------\n\nTITLE: Checking Node Health in Polkadot JS API (TypeScript)\nDESCRIPTION: This method returns the health status of the node. It returns a Health object.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nhealth(): `Health`\n```\n\n----------------------------------------\n\nTITLE: Simplified Nonce Management with Auto-lookup in Polkadot/Substrate\nDESCRIPTION: A simplified approach to nonce management using the API's built-in nonce lookup capability. By specifying nonce: -1, the API automatically looks up the next available nonce, improving throughput by dispatching RPC calls in parallel.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/tx.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < 10; i++) {\n  const txhash = await api.tx.balances\n    .transfer(recipient, 123)\n    .signAndSend(sender, { nonce: -1 });\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Account Changes with Polkadot JS Extension in JavaScript\nDESCRIPTION: This snippet shows how to subscribe to account changes in the Polkadot JS extension. It uses web3AccountsSubscribe to receive notifications whenever the available accounts change, and properly handles unsubscription.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/extension/cookbook.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { web3AccountsSubscribe, web3Enable } from '@polkadot/extension-dapp';\n\n// this call fires up the authorization popup\nconst extensions = await web3Enable('my cool dapp');\n\nif (extensions.length === 0) {\n    // no extension installed, or the user did not accept the authorization\n    // in this case we should inform the user and give a link to the extension\n    return;\n}\n\n// we are now informed that the user has at least one extension and that we\n// will be able to show and use accounts\nlet unsubscribe; // this is the function of type `() => void` that should be called to unsubscribe\n\n// we subscribe to any account change and log the new list.\n// note that `web3AccountsSubscribe` returns the function to unsubscribe\nunsubscribe = await web3AccountsSubscribe(( injectedAccounts ) => { \n    injectedAccounts.map(( account ) => {\n        console.log(account.address);\n    })\n });\n\n// don't forget to unsubscribe when needed, e.g when unmounting a component\nunsubscribe && unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Chain API Endpoints\nDESCRIPTION: RPC methods for interacting with blockchain data including blocks, headers and subscriptions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/rpc.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.chain.getBlock(hash?: BlockHash): SignedBlock\napi.rpc.chain.getBlockHash(blockNumber?: BlockNumber): BlockHash\napi.rpc.chain.getFinalizedHead(): BlockHash\napi.rpc.chain.getHeader(hash?: BlockHash): Header\napi.rpc.chain.subscribeAllHeads(): Header\napi.rpc.chain.subscribeFinalizedHeads(): Header\napi.rpc.chain.subscribeNewHeads(): Header\n```\n\n----------------------------------------\n\nTITLE: Instantiating Contract using BlueprintPromise in JavaScript\nDESCRIPTION: Example showing how to instantiate a contract using BlueprintPromise from @polkadot/api-contract. The code demonstrates creating a blueprint instance, initiating a transaction with specified parameters, and handling the transaction callback to obtain the contract address.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api-contract/start/blueprint.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BlueprintPromise } from '@polkadot/api-contract';\n\nconst blueprint = new BlueprintPromise(api, metadata, codeHash);\n\nconst tx = blueprint.tx.default({ gasLimit, storageDepositLimit, salt });\n\nlet address;\n\nconst unsub = await tx.signAndSend(alicePair, ({ contract, status }) => {\n  if (status.isInBlock || status.isFinalized) {\n    address = contract.address.toString();\n    unsub();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key Pair Information in Polkadot-js\nDESCRIPTION: Demonstrates how to access information from a key pair stored in the keyring, including the account's name, address, and public key. This information is useful for identifying accounts in an application.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/keyring.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\n// Add our Alice dev account\nconst alice = keyring.addFromUri('//Alice', { name: 'Alice default' });\n\n// Log some info\nconsole.log(`${alice.meta.name}: has address ${alice.address} with publicKey [${alice.publicKey}]`);\n```\n\n----------------------------------------\n\nTITLE: Creating API with Custom Balance Type in JavaScript\nDESCRIPTION: Demonstrates how to create an API instance with a custom type definition that overrides the default Balance type. This example changes Balance from the default u128 to u64.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.extend.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = await ApiPromise.create({\n  provider: wsProvider,\n  types: {\n    Balance: 'u64'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Account Balance Query with Parameters in Polkadot.js\nDESCRIPTION: This snippet shows how to create a subscription to the system.account query with a specific address parameter in Polkadot.js. It retrieves and logs the account's balance information whenever it changes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.subs.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsub = await api.query.system.account(ADDR, ({ nonce, data: balance }) => {\n  console.log(`free balance is ${balance.free} with ${balance.reserved} reserved and a nonce of ${nonce}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating and Validating BIP39 Mnemonics with Polkadot JS\nDESCRIPTION: Creates and validates a BIP39 mnemonic phrase, converts it to a seed, and generates an ed25519 keypair. Uses @polkadot/util-crypto library for cryptographic operations. Demonstrates the complete workflow from mnemonic generation to keypair creation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/util-crypto/examples/create-mnemonic.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  mnemonicGenerate,\n  mnemonicToMiniSecret,\n  mnemonicValidate,\n  ed25519PairFromSeed\n} = require('@polkadot/util-crypto');\n\nasync function main () {\n  // Create mnemonic string for Alice using BIP39\n  const mnemonicAlice = mnemonicGenerate();\n\n  console.log(`Generated mnemonic: ${mnemonicAlice}`);\n\n  // Validate the mnemonic string that was generated\n  const isValidMnemonic = mnemonicValidate(mnemonicAlice);\n\n  console.log(`isValidMnemonic: ${isValidMnemonic}`);\n\n  // Create valid Substrate-compatible seed from mnemonic\n  const seedAlice = mnemonicToMiniSecret(mnemonicAlice);\n\n  // Generate new public/secret keypair for Alice from the supplied seed\n  const { publicKey, secretKey } = ed25519PairFromSeed(seedAlice);\n}\n\nmain().catch(console.error).finally(() => process.exit());\n```\n\n----------------------------------------\n\nTITLE: Generating Session Keys in Rust\nDESCRIPTION: This function generates a set of session keys, optionally using a provided seed. The keys are stored in the keystore exposed via runtime externalities. The seed must be a valid UTF-8 string. It returns the concatenated SCALE encoded public keys.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\ngenerateSessionKeys(seed: `Option<Bytes>`): `Bytes`\n```\n\n----------------------------------------\n\nTITLE: Decoding SS58 Addresses to Public Keys in JavaScript\nDESCRIPTION: This code snippet shows how to decode SS58-formatted addresses back to their underlying public keys using the Polkadot.js keyring. It demonstrates that different SS58 formats for the same keypair result in the same public key.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/ss58.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 16,178,46,190,137,179,33,55,11,238,141,57,213,197,212,17,218,241,232,252,145,201,209,83,64,68,89,15,31,150,110,188\nconsole.log(pair.publicKey);\n\n// 16,178,46,190,137,179,33,55,11,238,141,57,213,197,212,17,218,241,232,252,145,201,209,83,64,68,89,15,31,150,110,188\nconsole.log(keyring.decodeAddress('5CSbZ7wG456oty4WoiX6a1J88VUbrCXLhrKVJ9q95BsYH4TZ'));\n\n// 16,178,46,190,137,179,33,55,11,238,141,57,213,197,212,17,218,241,232,252,145,201,209,83,64,68,89,15,31,150,110,188\nconsole.log(keyring.decodeAddress('CxDDSH8gS7jecsxaRL9Txf8H5kqesLXAEAEgp76Yz632J9M'));\n\n// 16,178,46,190,137,179,33,55,11,238,141,57,213,197,212,17,218,241,232,252,145,201,209,83,64,68,89,15,31,150,110,188\nconsole.log(keyring.decodeAddress('1NthTCKurNHLW52mMa6iA8Gz7UFYW5UnM3yTSpVdGu4Th7h'));\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Contract and Retrieving its Address in JavaScript\nDESCRIPTION: This code snippet shows how to instantiate a contract using CodePromise, including setting gas limits, storage deposit limits, and other parameters. It also demonstrates how to retrieve the contract address after successful instantiation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api-contract/start/code.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// maximum gas to be consumed for the instantiation. if limit is too small the instantiation will fail.\nconst gasLimit = 100000n * 1000000n\n// a limit to how much Balance to be used to pay for the storage created by the instantiation\n// if null is passed, unlimited balance can be used\nconst storageDepositLimit = null\n// used to derive contract address, \n// use null to prevent duplicate contracts\nconst salt = new Uint8Array()\n// balance to transfer to the contract account, formerly known as \"endowment\". \n// use only with payable constructors, will fail otherwise. \nconst value = api.registry.createType('Balance', 1000)\nconst initValue = 1;\n\nconst tx = code.tx.new({ gasLimit, storageDepositLimit }, initValue)\n\nlet address;\n\nconst unsub = await tx.signAndSend(alicePair, ({ contract, status }) => {\n  if (status.isInBlock || status.isFinalized) {\n    address = contract.address.toString();\n    unsub();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying ERC20 Contract Balance in JavaScript\nDESCRIPTION: This snippet shows how to query the balance of a specific account on an ERC20 contract using the ContractPromise interface. It specifies the target address, the address for fee deduction, and uses a gas limit of -1 for maximum available gas.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api-contract/start/contract.read.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// the address we are going to query\nconst target = '5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY';\n// the address to subtract the fees from\nconst from = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n\n// only 1 param needed, the actual address we are querying for (more\n// params can follow at the end, separated by , if needed by the message)\nconst callValue = await contract.query.balanceOf(from, { gasLimit: -1 }, target);\n```\n\n----------------------------------------\n\nTITLE: Dry Running an XCM Program\nDESCRIPTION: Simulates the execution of an XCM (Cross-Consensus Message) program without committing changes. Returns the expected effects or an error.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.dryRunApi.dryRunXcm(origin_location: XcmVersionedLocation, xcm: XcmVersionedXcm): Result<XcmRuntimeApisDryRunXcmDryRunEffects, XcmRuntimeApisDryRunError>\n```\n\n----------------------------------------\n\nTITLE: Rendering Polkadot Identity Icon in React\nDESCRIPTION: This snippet demonstrates how to use the Identicon component from @polkadot/react-identicon within a React component. It shows how to set the address, size, and theme properties to customize the icon's appearance.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-identicon/react.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Identicon from '@polkadot/react-identicon';\n\n...\nrender () {\n  // address is an ss58-encoded address or publicKey (hex string or Uint8Array)\n  const { address } = this.props;\n  // size (optional) is a number, indicating the size (in pixels, 64 as default)\n  const size = 32;\n  // theme (optional), depicts the type of icon, one of\n  // 'polkadot', 'substrate' (default), 'beachball' or 'jdenticon'\n  const theme = 'polkadot';\n\n  // standard className & style props are also available\n  return (\n    <Identicon\n      value={address}\n      size={size}\n      theme={theme}\n    />\n  );\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Runtime Constants with Polkadot.js API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to query various runtime constants using the Polkadot.js API. It shows examples of accessing constants from different modules such as Babe, Balances, and TransactionPayment.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.consts.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the API as per previous sections\n...\n\n// The length of an epoch (session) in Babe\nconsole.log(api.consts.babe.epochDuration.toNumber());\n\n// The amount required to create a new account\nconsole.log(api.consts.balances.existentialDeposit.toNumber());\n\n// The amount required per byte on an extrinsic\nconsole.log(api.consts.transactionPayment.transactionByteFee.toNumber());\n```\n\n----------------------------------------\n\nTITLE: Core Runtime API Methods\nDESCRIPTION: Core runtime functionality including block execution, initialization, and version information.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexecuteBlock(block: SpRuntimeBlock): Null\ninitializeBlock(header: SpRuntimeHeader): SpRuntimeExtrinsicInclusionMode\nversion(): SpVersionRuntimeVersion\n```\n\n----------------------------------------\n\nTITLE: Using .entries() on Double Maps in Polkadot.js\nDESCRIPTION: This snippet demonstrates how to use the .entries() method on double maps in Polkadot.js. It retrieves all entries for slashes in all eras and shows how to decode the key arguments.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/storage.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Retrieves the entries for all slashes, in all eras (no arg)\nconst allEntries = await api.query.staking.nominatorSlashInEra.entries();\n\n// nominatorSlashInEra(EraIndex, AccountId) for the types of the key args\nallEntries.forEach(([{ args: [era, nominatorId] }, value]) => {\n  console.log(`${era}: ${nominatorId} slashed ${value.toHuman()}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing CodePromise for Contract Deployment in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new CodePromise instance using the API, metadata, and WASM code. It's the first step in preparing to upload and instantiate a contract on the blockchain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api-contract/start/code.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CodePromise } from '@polkadot/api-contract';\n\nconst code = new CodePromise(api, metadata, wasm);\n```\n\n----------------------------------------\n\nTITLE: Asset Conversion API Calls in Polkadot Runtime\nDESCRIPTION: Provides functionality for querying asset pair liquidity pools and getting price quotes for token swaps. Includes methods for exact input and exact output quotes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetReserves(asset1: FrameSupportTokensFungibleUnionOfNativeOrWithId, asset2: FrameSupportTokensFungibleUnionOfNativeOrWithId): Option<(u128,u128)>;\n\nquotePriceExactTokensForTokens(asset1: FrameSupportTokensFungibleUnionOfNativeOrWithId, asset2: FrameSupportTokensFungibleUnionOfNativeOrWithId, amount: u128, include_fee: bool): Option<u128>;\n\nquotePriceTokensForExactTokens(asset1: FrameSupportTokensFungibleUnionOfNativeOrWithId, asset2: FrameSupportTokensFungibleUnionOfNativeOrWithId, amount: u128, include_fee: bool): Option<u128>\n```\n\n----------------------------------------\n\nTITLE: Using Promise.all for Parallel State Queries in Polkadot.js API\nDESCRIPTION: This snippet shows how to use Promise.all to execute multiple queries in parallel for better performance. It retrieves both the current timestamp and account information simultaneously, then destructures the results.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\n// Retrieve last block timestamp, account nonce & balances\nconst [now, { nonce, data: balance }] = await Promise.all([\n  api.query.timestamp.now(),\n  api.query.system.account(ADDR)\n]);\n```\n\n----------------------------------------\n\nTITLE: Nominating Validators in Polkadot.js\nDESCRIPTION: This function declares the desire to nominate specified targets for the origin controller. Effects are felt at the beginning of the next era and the function's complexity is proportional to the number of targets.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_152\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.nominate(targets: Vec<MultiAddress>)\n```\n\n----------------------------------------\n\nTITLE: Derived Chain Subscription in Polkadot.js\nDESCRIPTION: Shows how to use derived subscriptions which provide additional information by combining multiple data sources. This example includes block author information with the header.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.rpc.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsub = await api.derive.chain.subscribeNewHeads((lastHeader) => {\n  console.log(`#${lastHeader.number} was authored by ${lastHeader.author}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Batching Multiple Dispatch Calls in Utility Module\nDESCRIPTION: Sends a batch of dispatch calls from the same origin. May be called from any origin except None. If origin is root, calls are dispatched without checking origin filter. Returns Ok in all circumstances, with success determined by deposited events.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_188\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.utility.batch(calls)\n```\n\n----------------------------------------\n\nTITLE: Adding Address to Polkadot.js Keyring\nDESCRIPTION: Demonstrates how to add an external address to the keyring with associated metadata. The saveAddress method takes an address string and metadata object containing properties like name.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/addresses.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// add the address\nconst FAUCET_ADDR = 'FvnazYM5KAetYpXoVDfqt9WFcJogKbekXVJ3Fz5oW2Dv82P';\nconst json = keyring.saveAddress(FAUCET_ADDR, { name: 'Alex faucet' });\n\n// the faucet will now be in the list of available addresses\nkeyring.getAddresses().forEach(...)\n```\n\n----------------------------------------\n\nTITLE: Spending Treasury Funds\nDESCRIPTION: Proposes and approves a spend of treasury funds for a specific asset kind and amount to a designated beneficiary. The spend must be claimed using payout within PayoutPeriod. Must be called with SpendOrigin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_184\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.treasury.spend(asset_kind, amount, beneficiary, valid_from)\n```\n\n----------------------------------------\n\nTITLE: Initializing Polkadot JS API Using Promise Chain in JavaScript\nDESCRIPTION: Alternative approach to creating an API instance using promise syntax instead of async/await. This performs the same connection but uses .then() pattern for handling the promise resolution.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/create.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nApiPromise\n  .create({ provider: wsProvider })\n  .then((api) =>\n    console.log(api.genesisHash.toHex())\n  );\n```\n\n----------------------------------------\n\nTITLE: Initializing Keyring with React Rendering in JavaScript\nDESCRIPTION: This code snippet shows how to initialize the Polkadot-js keyring and then mount a React application. It ensures that the keyring is fully loaded before rendering the UI.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/init.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\ncryptoWaitReady().then(() => {\n  keyring.loadAll({ ... });\n\n  // mount React and render\n  ReactDOM.render(<App />, document.getElementById('app'));\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring Multiple RPC Modules in JavaScript\nDESCRIPTION: This code snippet shows the top-level structure for defining multiple RPC modules when creating a Polkadot.js API instance. It illustrates how to organize different modules like 'firstModule' and 'testModule' within the RPC configuration object.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/rpc.custom.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = await ApiPromise.create({\n  rpc: {\n    firstModule: { ... },\n    testModule: { ... }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying MMR Proof in Polkadot JS API\nDESCRIPTION: Verifies an MMR proof against a given root hash for a batch of leaves. This function does not require on-chain storage and verifies the proof against the provided MMR root hash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.mmrApi.verifyProofStateless(root: PrimitiveTypesH256, leaves: Vec<Bytes>, proof: SpMmrPrimitivesLeafProof): Result<Null, SpMmrPrimitivesError>\n```\n\n----------------------------------------\n\nTITLE: Reserving a Para Id on Relay Chain in Polkadot-JS API\nDESCRIPTION: This function reserves a new Para Id to be owned/managed by the origin account. It requires a signed origin and reserves a deposit of ParaDeposit for the registration. Emits a Reserved event with the reserved ID.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.registrar.reserve()\n```\n\n----------------------------------------\n\nTITLE: Child Bounty Management API Calls\nDESCRIPTION: Functions for managing child bounties including awarding, claiming, closing, proposing curators and unassigning curators. These APIs allow interaction with the child bounty system on Polkadot.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.childBounties.awardChildBounty(parent_bounty_id: Compact<u32>, child_bounty_id: Compact<u32>, beneficiary: MultiAddress)\n\napi.tx.childBounties.claimChildBounty(parent_bounty_id: Compact<u32>, child_bounty_id: Compact<u32>)\n\napi.tx.childBounties.closeChildBounty(parent_bounty_id: Compact<u32>, child_bounty_id: Compact<u32>)\n\napi.tx.childBounties.proposeCurator(parent_bounty_id: Compact<u32>, child_bounty_id: Compact<u32>, curator: MultiAddress, fee: Compact<u128>)\n\napi.tx.childBounties.unassignCurator(parent_bounty_id: Compact<u32>, child_bounty_id: Compact<u32>)\n```\n\n----------------------------------------\n\nTITLE: Extracting Block Author with Subscription in Polkadot.js\nDESCRIPTION: This example shows how to subscribe to new block headers and extract the block author from the consensus logs. The API derive function automatically handles the decoding of the logs and mapping of the validator index.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/blocks.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// subscribe to all new headers (with extended info)\napi.derive.chain.subscribeNewHeads((header) => {\n  console.log(`#${header.number}: ${header.author}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Sudo Transaction with Nested Call in Polkadot-js\nDESCRIPTION: This snippet demonstrates how to execute a sudo transaction that wraps another call. It first retrieves the current sudo key, looks up the corresponding key pair, and then sends a transaction that executes a balances.setBalance call with sudo privileges. The nested call is passed as a parameter to sudo.sudo().\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.tx.wrap.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the current sudo key in the system\nconst sudoKey = await api.query.sudo.key();\n\n// Lookup from keyring (assuming we have added all, on --dev this would be `//Alice`)\nconst sudoPair = keyring.getPair(sudoKey);\n\n// Send the actual sudo transaction\nconst unsub = await api.tx.sudo\n  .sudo(\n    api.tx.balances.setBalance(ADDR, 12345, 678)\n  )\n  .signAndSend(sudoPair, (result) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Balances Extrinsic Methods\nDESCRIPTION: Methods for managing account balances including transfers, burning, force operations and account upgrades. Includes both death-allowing and keep-alive variants of transfers.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.balances.burn(value, keep_alive)\napi.tx.balances.forceAdjustTotalIssuance(direction, delta)\napi.tx.balances.forceSetBalance(who, new_free)\napi.tx.balances.forceTransfer(source, dest, value)\napi.tx.balances.forceUnreserve(who, amount)\napi.tx.balances.transferAll(dest, keep_alive)\napi.tx.balances.transferAllowDeath(dest, value)\napi.tx.balances.transferKeepAlive(dest, value)\napi.tx.balances.upgradeAccounts(who)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parachain Availability Cores\nDESCRIPTION: Fetches information on all availability cores relevant to the child block. Cores can be either free or occupied, with free cores available for para assignment.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.parachainHost.availabilityCores(): Vec<PolkadotPrimitivesV8CoreState>\n```\n\n----------------------------------------\n\nTITLE: Limited Teleport Assets in XCM Pallet\nDESCRIPTION: Teleports assets from local chain to destination chain with weight limits. Fee payment is made from a specified asset with a weight limit. If more weight is needed than specified, the operation may fail and assets could be at risk.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_214\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.limitedTeleportAssets(dest: `XcmVersionedLocation`, beneficiary: `XcmVersionedLocation`, assets: `XcmVersionedAssets`, fee_asset_item: `u32`, weight_limit: `XcmV3WeightLimit`)\n```\n\n----------------------------------------\n\nTITLE: Simplified Error Handling for Transactions in Polkadot/Substrate\nDESCRIPTION: An improved approach to handle transaction errors using the dispatchError field provided in API v2.3.1+. This simplifies the error detection and processing by directly accessing the error information without filtering through events.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/tx.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napi.tx.balances\n  .transfer(recipient, 123)\n  .signAndSend(sender, ({ status, events, dispatchError }) => {\n    // status would still be set, but in the case of error we can shortcut\n    // to just check it (so an error would indicate InBlock or Finalized)\n    if (dispatchError) {\n      if (dispatchError.isModule) {\n        // for module errors, we have the section indexed, lookup\n        const decoded = api.registry.findMetaError(dispatchError.asModule);\n        const { docs, name, section } = decoded;\n\n        console.log(`${section}.${name}: ${docs.join(' ')}`);\n      } else {\n        // Other, CannotLookup, BadOrigin, no extra info\n        console.log(dispatchError.toString());\n      }\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Transfer Assets in XCM Pallet\nDESCRIPTION: Comprehensive asset transfer method supporting local/destination/remote reserves and teleports. Fee payment is made from a specified asset with a weight limit for execution. Assets must have the same reserve location or be teleportable.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_218\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.transferAssets(dest: `XcmVersionedLocation`, beneficiary: `XcmVersionedLocation`, assets: `XcmVersionedAssets`, fee_asset_item: `u32`, weight_limit: `XcmV3WeightLimit`)\n```\n\n----------------------------------------\n\nTITLE: Nomination Pools API in Polkadot-js\nDESCRIPTION: Methods for interacting with nomination pools functionality. Provides utilities for calculating rewards, managing pool funds, checking member status, and handling pool migrations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// Convert balance to points in a pool\nconst points = await api.call.nominationPoolsApi.balanceToPoints(poolId, newFunds);\n\n// Check if member needs delegate migration\nconst needsMigration = await api.call.nominationPoolsApi.memberNeedsDelegateMigration(member);\n\n// Get pending slash for a pool member\nconst pendingSlash = await api.call.nominationPoolsApi.memberPendingSlash(member);\n\n// Get total balance of a pool member\nconst totalBalance = await api.call.nominationPoolsApi.memberTotalBalance(who);\n\n// Get pending rewards for a member\nconst rewards = await api.call.nominationPoolsApi.pendingRewards(who);\n\n// Convert points to balance in a pool\nconst balance = await api.call.nominationPoolsApi.pointsToBalance(poolId, points);\n\n// Get pool accounts\nconst accounts = await api.call.nominationPoolsApi.poolAccounts(poolId);\n\n// Get total pool balance\nconst poolBalance = await api.call.nominationPoolsApi.poolBalance(poolId);\n\n// Check if pool needs delegate migration\nconst poolNeedsMigration = await api.call.nominationPoolsApi.poolNeedsDelegateMigration(poolId);\n\n// Get pending slash for a pool\nconst poolSlash = await api.call.nominationPoolsApi.poolPendingSlash(poolId);\n```\n\n----------------------------------------\n\nTITLE: Using .keys() on Double Maps in Polkadot.js\nDESCRIPTION: This snippet shows how to use the .keys() method on double maps in Polkadot.js. It retrieves the keys for slashed validators in a specific era and demonstrates how to decode the key arguments.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/storage.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Retrieves the keys for the slashed validators in era 652\nconst slashedKeys = await api.query.staking.nominatorSlashInEra.keys(652);\n\n// key args still contains [EraIndex, AccountId] decoded\nconsole.log(`slashed: ${slashedKeys.map(({ args: [era, nominatorId] }) => nominatorId)}`);\n```\n\n----------------------------------------\n\nTITLE: Adding Accounts with Raw Seeds in Polkadot-js\nDESCRIPTION: Shows how to add accounts to a keyring using raw hex seeds and string seeds instead of mnemonic phrases. The keyring automatically detects the input format and creates an appropriate key pair.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/keyring.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\n// add a hex seed, 32-characters in length\nconst hexPair = keyring.addFromUri('0x1234567890123456789012345678901234567890123456789012345678901234');\n\n// add a string seed, internally this is padded with ' ' to 32-bytes in length\nconst strPair = keyring.addFromUri('Janice');\n```\n\n----------------------------------------\n\nTITLE: Getting Block Author from a Single Header in Polkadot.js\nDESCRIPTION: This example demonstrates how to retrieve a single block header with the author information populated. The derive function handles extracting the author from the consensus logs in the block header.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/blocks.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// retrieve the last header (hash optional)\nconst header = await api.derive.chain.getHeader();\n\nconsole.log(`#${header.number}: ${header.author}`);\n```\n\n----------------------------------------\n\nTITLE: Querying Account Nonce in Rust\nDESCRIPTION: This method retrieves the current account nonce for a given AccountId. It's part of the accountNonceApi module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\naccountNonce(account: `SpCoreCryptoAccountId32`): `u32`\n```\n\n----------------------------------------\n\nTITLE: RPC Header Subscription in Polkadot.js\nDESCRIPTION: Shows how to create a subscription to new block headers using the Polkadot.js API. The subscription callback is triggered whenever a new header is imported.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.rpc.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Subscribe to the new headers\nawait api.rpc.chain.subscribeNewHeads((lastHeader) => {\n  console.log(`${chain}: last block #${lastHeader.number} has hash ${lastHeader.hash}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Address Metadata in Polkadot.js Keyring\nDESCRIPTION: Shows how to update the metadata of an existing address in the keyring. Using the same saveAddress method with new metadata will update the existing entry.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/addresses.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst json = keyring.saveAddress(FAUCET_ADDR, { name: 'Alexander Faucet' });\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Calls in Polkadot.js API\nDESCRIPTION: This code snippet shows the interface for executing a batch of dispatch calls atomically using the Polkadot.js API. It takes a vector of calls and executes them, rolling back if any call fails.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_189\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.utility.batchAll(calls: Vec<Call>)\n```\n\n----------------------------------------\n\nTITLE: Generating Multisig Account Address using Polkadot.js in JavaScript\nDESCRIPTION: Creates a multisig account address from multiple input addresses and a threshold value using Polkadot.js utility functions. The code generates a SS58-encoded address for the multisig account and sorts the remaining signatories by public key. Requires @polkadot/util-crypto package.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/util-crypto/examples/create-multisig.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createKeyMulti,\n  encodeAddress,\n  sortAddresses\n} from '@polkadot/util-crypto';\n\nconst SS58Prefix = 0;\n\n// Input the addresses that will make up the multisig account.\nconst addresses = [\n  '1nUC7afqmo7zwRFWxDjrUQu9skk6fk99pafb4SiyGSRc8z3',\n  '1ZX2XntfLEHrBPy73DpfQp9rG7pbLyvrFjEpi7mNKQgyga5',\n  '14b1kB7CrqzRUeMsKc26FJ73f8FCpxAX6sNieu9gfYSfJuoL'\n];\n\n// The number of accounts that must approve. Must be greater than 0 and less than\n// or equal to the total number of addresses.\nconst threshold = 2;\n\n// The address (as index in `addresses`) that will submit a transaction.\nconst index = 0;\n\nfunction main () {\n  // Address as a byte array.\n  const multiAddress = createKeyMulti(addresses, threshold);\n\n  // Convert byte array to SS58 encoding.\n  const Ss58Address = encodeAddress(multiAddress, SS58Prefix);\n\n  console.log(`\\nMultisig Address: ${Ss58Address}`);\n\n  // Take addresses and remove the sender.\n  const otherSignatories = addresses.filter((who) => who !== addresses[index]);\n\n  // Sort them by public key.\n  const otherSignatoriesSorted = sortAddresses(otherSignatories, SS58Prefix);\n\n  console.log(`\\nOther Signatories: ${otherSignatoriesSorted}\\n`);\n\n  process.exit();\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Era Stakers Overview in Polkadot.js API\nDESCRIPTION: Retrieves summary of validator exposure at a given era. Takes a tuple of u32 and AccountId32 as input and returns an optional SpStakingPagedExposureMetadata.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.erasStakersOverview\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information in System Pallet\nDESCRIPTION: API interface for querying full account information for a particular account ID in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.account\n```\n\n----------------------------------------\n\nTITLE: Bonding Tokens for Staking in Polkadot.js\nDESCRIPTION: This function bonds tokens for staking, locking up a specified value from the stash account. It requires the value to be more than the minimum balance. The function takes parameters for the value to bond and the reward destination.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_139\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.bond(value: Compact<u128>, payee: PalletStakingRewardDestination)\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Information in Polkadot.js API\nDESCRIPTION: This snippet demonstrates the payment-related methods available in the Polkadot.js API for querying fee details and transaction payment information. Note that these methods are deprecated and alternatives are suggested.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.payment.queryFeeDetails(extrinsic: Bytes, at?: BlockHash): FeeDetails\napi.rpc.payment.queryInfo(extrinsic: Bytes, at?: BlockHash): RuntimeDispatchInfoV1\n```\n\n----------------------------------------\n\nTITLE: Managed RPC Subscription with Cleanup in Polkadot.js\nDESCRIPTION: Demonstrates how to create and manage a subscription with cleanup functionality. Shows how to unsubscribe after receiving 10 headers.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.rpc.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet count = 0;\n\n// Subscribe to the new headers\nconst unsubHeads = await api.rpc.chain.subscribeNewHeads((lastHeader) => {\n  console.log(`${chain}: last block #${lastHeader.number} has hash ${lastHeader.hash}`);\n\n  if (++count === 10) {\n    unsubHeads();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Chain Upgrade with Sudo Module in Polkadot-JS\nDESCRIPTION: This code demonstrates how to perform a chain upgrade using the sudo module in Polkadot-JS. It connects to a local node, reads a WASM blob from a file, and submits a sudo extrinsic to trigger the upgrade. The process includes monitoring events for success or failure and properly disconnecting from the node after completion.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/rxjs/10_upgrade_chain/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the API & provider and utility function\nimport { ApiRx, WsProvider } from '@polkadot/api';\nimport { Keyring } from '@polkadot/keyring';\nimport fs from 'fs';\n\n// We're going to submit a sudo transaction to upgrade the runtime\n// The signature for this call is `api.tx.sudo.sudo(api.tx.system.setCode(<code>))` where <code> is a hex dump of a valid WASM blob\nApiRx\n  .create({\n    provider: new WsProvider('ws://127.0.0.1:9944'),\n  })\n  .switchMap((api) =>\n    // Check we have the sudo key\n    // In a Substrate node, the dev seed for the sudo key is subkey with `//Alice` as the derivation path\n    api.query.sudo.key().pipe(\n      // Wait for the api to be connected to the node\n      switchMap((sudoKey) => {\n        console.log(`sudo key is ${sudoKey}`)\n\n        // Get the WASM blob. This can be retrieved from the chain by querying the `api.rpc.state.getRuntimeVersion()` interface,\n        // which returns the current on-chain WASM code.\n        // For this example, we'll read in a local blob, which may be out of date with the current node version.\n        // After upgrade, you should run `substrate purge-chain --dev` to clear the old database\n        const code = fs.readFileSync('test/fixtures/test.wasm').toString('hex');\n        const proposal = api.tx.system.setCode(`0x${code}`);\n\n        // We need to construct a keyring with our Alice key\n        const keyring = new Keyring({ type: 'sr25519' });\n        const sudoPair = keyring.addFromUri('//Alice');\n\n        console.log(`${sudoPair.address} will send the sudo.sudo(${proposal.method.section}.${proposal.method.method})`)\n\n        // Create a extrinsic, inheriting the sudo origin to the system::set_code call\n        return api.tx.sudo\n          .sudo(proposal)\n          .signAndSend(sudoPair)\n          .pipe(\n            // The system::set_code will emit a CodeUpdated event with no arguments\n            switchMap(({ events = [], status }) => {\n              console.log(`Status: ${status.type}`);\n\n              if (status.isInBlock) {\n                console.log(`Completed at block hash ${status.asInBlock.toHex()}`);\n\n                // Loop through Vec<EventRecord> to display all events\n                events.forEach(({ phase, event: { data, method, section } }) => {\n                  console.log(`\\t'${phase}: ${section}.${method}:: ${data}`);\n                });\n              }\n\n              return status.isFinalized\n                ? api\n                : false;\n            })\n          );\n      })\n    )\n  )\n  .subscribe({\n    next: (api) => {\n      // If we get back an API, then we're done\n      if (api) {\n        console.log('Successfully completed chain upgrade');\n        api.disconnect();\n      }\n    },\n    error: (err) => {\n      console.error(err);\n    },\n    complete: () => {\n      process.exit(0);\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Named Task in Polkadot-JS API\nDESCRIPTION: This function schedules a named task. It takes the task ID, execution block number, optional periodicity, priority, and the call to be executed as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.scheduler.scheduleNamed(id: [u8;32], when: u32, maybe_periodic: Option<(u32,u32)>, priority: u8, call: Call)\n```\n\n----------------------------------------\n\nTITLE: Querying Pool Assets Storage\nDESCRIPTION: Storage interfaces for managing pool assets including account balances, approvals, and asset metadata.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.poolAssets.account(u32, AccountId32): Option<PalletAssetsAssetAccount>\napi.query.poolAssets.approvals(u32, AccountId32, AccountId32): Option<PalletAssetsApproval>\napi.query.poolAssets.asset(u32): Option<PalletAssetsAssetDetails>\napi.query.poolAssets.metadata(u32): PalletAssetsAssetMetadata\n```\n\n----------------------------------------\n\nTITLE: Adding Mnemonic Account to Keyring in JavaScript\nDESCRIPTION: This snippet demonstrates how to generate a random mnemonic, add it to the keyring with a password, and attach metadata. It returns a pair instance and encrypted JSON.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/accounts.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mnemonicGenerate } from '@polkadot/util-crypto';\n\n...\n// generate a random mnemonic, 12 words in length\nconst mnemonic = mnemonicGenerate(12);\n\n// add the account, encrypt the stored JSON with an account-specific password\nconst { pair, json } = keyring.addUri(mnemonic, 'myStr0ngP@ssworD', { name: 'mnemonic acc' });\n```\n\n----------------------------------------\n\nTITLE: Deriving Multiple Accounts Using Substrate URI Paths\nDESCRIPTION: Shows how to derive multiple accounts from a single mnemonic using different derivation paths. Demonstrates both ed25519 and sr25519 cryptography with hard derivations, soft derivations, and password protection.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/suri.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// known mnemonic, well, now it is - don't use it for funds\nconst MNEMONIC = 'sample split bamboo west visual approve brain fox arch impact relief smile';\n\n// type: ed25519\nconst keyring = new Keyring();\n\n// our ed25519 pairs\nconsole.log(keyring.createFromUri(MNEMONIC).address);\nconsole.log(keyring.createFromUri(`${MNEMONIC}//hardA//hardB`).address);\nconsole.log(keyring.createFromUri(`${MNEMONIC}//hard///password`).address);\n\n// some sr25519 pairs\nconsole.log(keyring.createFromUri(MNEMONIC, {}, { type: 'sr25519' }).address);\nconsole.log(keyring.createFromUri(`${MNEMONIC}//hard/soft`, {}, { type: 'sr25519' }).address);\n```\n\n----------------------------------------\n\nTITLE: Executing XCM Message in Polkadot.js API\nDESCRIPTION: This code snippet shows how to execute an XCM message from a local, signed origin using the Polkadot.js API. It takes the message and maximum weight as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_207\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.execute(message: XcmVersionedXcm, max_weight: SpWeightsWeightV2Weight)\n```\n\n----------------------------------------\n\nTITLE: Using MMR Methods in Polkadot.js API\nDESCRIPTION: This snippet demonstrates the Merkle Mountain Range (MMR) related methods available in the Polkadot.js API for generating and verifying proofs, and retrieving root hashes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.mmr.generateProof(blockNumbers: Vec<u64>, bestKnownBlockNumber?: u64, at?: BlockHash): MmrLeafBatchProof\napi.rpc.mmr.root(at?: BlockHash): MmrHash\napi.rpc.mmr.verifyProof(proof: MmrLeafBatchProof): bool\napi.rpc.mmr.verifyProofStateless(root: MmrHash, proof: MmrLeafBatchProof): bool\n```\n\n----------------------------------------\n\nTITLE: NFTs API Methods in Polkadot-js\nDESCRIPTION: Interface for querying NFT-related information. Provides access to NFT attributes, collection data, ownership details, and custom attributes for NFT items and collections.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// Get attribute of an NFT item\nconst attr = await api.call.nftsApi.attribute(collection, item, key);\n\n// Get attribute of a collection\nconst collAttr = await api.call.nftsApi.collectionAttribute(collection, key);\n\n// Get owner of a collection\nconst collOwner = await api.call.nftsApi.collectionOwner(collection);\n\n// Get custom attribute for an NFT\nconst customAttr = await api.call.nftsApi.customAttribute(account, collection, item, key);\n\n// Get owner of an NFT item\nconst owner = await api.call.nftsApi.owner(collection, item);\n\n// Get system attribute\nconst sysAttr = await api.call.nftsApi.systemAttribute(collection, item, key);\n```\n\n----------------------------------------\n\nTITLE: Checking Storage Size in Polkadot.js\nDESCRIPTION: This snippet shows how to check the existence of a storage item by querying its size. It demonstrates checking both existent and non-existent items, and how to interpret the size results.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/storage.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// exists\nconst sizeY = await api.query.staking.validators.size('DB2mp5nNhbFN86J9hxoAog8JALMhDXgwvWMxrRMLNUFMEY4');\n// non existent\nconst sizeN = await api.query.staking.validators.size('EoukLS2Rzh6dZvMQSkqFy4zGvqeo14ron28Ue3yopVc8e3Q');\n\nconsole.log(sizeY.isZero(), sizeY.toNumber()); // false 4\nconsole.log(sizeN.isZero(), sizeY.toNumber()); // true 0\n```\n\n----------------------------------------\n\nTITLE: Querying Session Validators in Polkadot.js API\nDESCRIPTION: Retrieves the current set of validators. Returns a vector of AccountId32 values.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.session.validators\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Method Metadata in Polkadot.js API\nDESCRIPTION: This snippet demonstrates how to extract metadata from a query method in the Polkadot.js API. It retrieves the section, method name, and documentation for a specific query endpoint, as well as the storage key that would be used to look up the entry in the chain state.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.other.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Extract the info\nconst { meta, method, section } = api.query.system.account;\n\n// Display some info on a specific entry\nconsole.log(`${section}.${method}: ${meta.documentation.join(' ')}`);\nconsole.log(`query key: ${api.query.system.account.key(ADDR)}`);\n```\n\n----------------------------------------\n\nTITLE: Comparing Types in Polkadot.js\nDESCRIPTION: Demonstrates the correct way to compare types using the .eq() method instead of JavaScript equality operator. Shows how to find a module by name in metadata.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.basics.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { metadata } = await api.rpc.state.getMetadata();\nconst modules = metadata.asLatest.modules;\n\n// This will not work, because `name` is an instance of `Text`, not a string\n// const system = modules.find(m => m.name === 'system');\n\n// This will work, because `Text.eq()` can compare against a string\nconst system = modules.find(m => m.name.eq('system'));\n```\n\n----------------------------------------\n\nTITLE: Paying Out Stakers for a Validator in Polkadot.js\nDESCRIPTION: This function pays out the next page of stakers behind a validator for a given era. It can be called by any account and handles paged payouts for validators with many nominators.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_153\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.payoutStakers(validator_stash: AccountId32, era: u32)\n```\n\n----------------------------------------\n\nTITLE: Calculating XCM Message Execution Weight\nDESCRIPTION: This method calculates the weight required to execute a given XCM message. It takes a versioned XCM message as input and returns the calculated weight or an error if the calculation fails.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nqueryXcmWeight(message: `XcmVersionedXcm`): `Result<SpWeightsWeightV2Weight, XcmRuntimeApisFeesError>`\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Era Reward Points in Polkadot.js API\nDESCRIPTION: Retrieves rewards for the last HistoryDepth eras. Takes a u32 as input and returns a PalletStakingEraRewardPoints.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.erasRewardPoints\n```\n\n----------------------------------------\n\nTITLE: Querying System Module Information in Polkadot-js API\nDESCRIPTION: Interface patterns for accessing system module information such as block hashes, event data, extrinsic information, and runtime metadata through the Polkadot-js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.authorizedUpgrade()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.blockHash(blockNumber)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.blockWeight()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.digest()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.eventCount()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.events()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.eventTopics(hash)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.executionPhase()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.extrinsicCount()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.extrinsicData(index)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.inherentsApplied()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.lastRuntimeUpgrade()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.number()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.parentHash()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.upgradedToTripleRefCount()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.upgradedToU32RefCount()\n```\n\n----------------------------------------\n\nTITLE: Defining ApprovalCancelled Event in Rust for Pool Assets\nDESCRIPTION: This event is emitted when an approval for a delegate account is cancelled by the owner. It includes the asset ID, owner, and delegate account IDs.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nApprovalCancelled(`u32`, `AccountId32`, `AccountId32`)\n```\n\n----------------------------------------\n\nTITLE: Retrieving BABE Consensus Constants in Polkadot.js API\nDESCRIPTION: Examples of accessing BABE consensus related constants using the Polkadot.js API. Includes epoch duration, expected block time, and authority limits.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Duration of each epoch in slots\nconst epochDuration = api.consts.babe.epochDuration;\n\n// Expected average block time\nconst expectedBlockTime = api.consts.babe.expectedBlockTime;\n\n// Maximum number of authorities\nconst maxAuthorities = api.consts.babe.maxAuthorities;\n\n// Maximum number of nominators per validator\nconst maxNominators = api.consts.babe.maxNominators;\n```\n\n----------------------------------------\n\nTITLE: Querying BABE Consensus Storage in Polkadot/Kusama\nDESCRIPTION: Storage methods for accessing BABE consensus-related data including authorities, epoch configuration, randomness and other consensus parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.babe.authorities(): Vec<(SpConsensusBabeAppPublic,u64)>\napi.query.babe.authorVrfRandomness(): Option<[u8;32]>\napi.query.babe.currentSlot(): u64\napi.query.babe.epochConfig(): Option<SpConsensusBabeBabeEpochConfiguration>\napi.query.babe.epochIndex(): u64\napi.query.babe.epochStart(): (u32,u32)\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Unbond\nDESCRIPTION: Schedules a portion of the stash to be unlocked for transfer after the bond period ends. Must be signed by the controller.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_165\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.unbond(value)\n```\n\n----------------------------------------\n\nTITLE: Avoiding Direct Codec Type Creation in Polkadot.js API Transactions\nDESCRIPTION: Demonstrates the recommended approach for supplying values to API transactions, avoiding direct Codec type creation to ensure better maintainability and runtime compatibility.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.create.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// The following is not advised\nconst something = api.createType('SomeType', { foo: 'bar' });\n...\nawait api.tx.somewhere.something(something);\n...\n\n// This following is advised\nawait api.tx.somewhere.something({ foo: 'bar' });\n```\n\n----------------------------------------\n\nTITLE: Querying Uniques Module Storage in Polkadot.js\nDESCRIPTION: Examples of querying uniques (NFT) related storage items using Polkadot.js API. Includes interfaces for account holdings, asset details, collection information, and metadata.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.uniques.account(accountId, classId, instanceId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.uniques.asset(classId, instanceId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.uniques.attribute(classId, maybeInstanceId, key)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.uniques.class(classId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.uniques.classAccount(accountId, classId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.uniques.classMetadataOf(classId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.uniques.collectionMaxSupply(classId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.uniques.instanceMetadataOf(classId, instanceId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.uniques.itemPriceOf(classId, instanceId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.uniques.ownershipAcceptance(accountId)\n```\n\n----------------------------------------\n\nTITLE: Setting Session Keys with setKeys\nDESCRIPTION: Sets the session key(s) of the function caller. Allows an account to set its session key prior to becoming a validator. This doesn't take effect until the next session. Origin must be signed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.session.setKeys(keys, proof)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account List from Polkadot.js Keyring\nDESCRIPTION: Demonstrates how to retrieve and iterate over all accounts stored in the keyring, displaying their address, metadata, and public key.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/loading.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { u8aToHex } from '@polkadot/util';\n\n...\nconst accounts = keyring.getAccounts();\n\naccounts.forEach(({ address, meta, publicKey }) =>\n  console.log(address, JSON.stringify(meta), u8aToHex(publicKey))\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Blake2 Hash with Polkadot-JS in JavaScript\nDESCRIPTION: Demonstrates how to generate a Blake2 hash from input data using the @polkadot/util-crypto package. The function returns the hash value in hexadecimal format.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/util-crypto/examples/hash-data.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { blake2AsHex } = require('@polkadot/util-crypto');\nconst hash = blake2AsHex(\"data goes here\")\nconsole.log(hash)\n//result: { hash: '0xce73267ed8316b4350672f32ba49af86a7ae7af1267beb868a27f3fda03c044a' }\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Active Era in Polkadot.js API\nDESCRIPTION: Retrieves the active era information, including index and start. Returns an optional PalletStakingActiveEraInfo.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.activeEra\n```\n\n----------------------------------------\n\nTITLE: Querying Substrate Core Storage in Polkadot.js API\nDESCRIPTION: Examples of how to access core Substrate storage keys using the Polkadot.js API. These are well-known keys available to any Substrate-based network runtime implementation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n// Get runtime Wasm code\nconst runtimeCode = await api.query.substrate.code();\n\n// Get current extrinsic index\nconst extrinsicIndex = await api.query.substrate.extrinsicIndex();\n\n// Get number of Wasm heap pages required for runtime execution\nconst heapPages = await api.query.substrate.heapPages();\n\n// Get current intra-block entropy\nconst entropy = await api.query.substrate.intrablockEntropy();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Payment Information with Polkadot.js API\nDESCRIPTION: This snippet demonstrates how to retrieve payment information for a transaction before sending it. It uses the paymentInfo method to get the partial fee and weight of the transaction, then logs this information before sending the transaction.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.tx.subs.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst transfer = api.tx.balances.transfer(BOB, 12345);\n\nconst { partialFee, weight } = await transfer.paymentInfo(alice);\n\nconsole.log(`transaction will have a weight of ${weight}, with ${partialFee.toHuman()} weight fees`);\n\ntransfer.signAndSend(alice, ({ events = [], status }) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Querying Current Block Number in System Pallet\nDESCRIPTION: API interface for querying the current block number being processed in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.number\n```\n\n----------------------------------------\n\nTITLE: Joining a Nomination Pool\nDESCRIPTION: Stakes funds with a pool by transferring the amount from the member to the pool account. An account can only be a member of one pool, cannot join the same pool multiple times, and must have at least existential deposit + amount in their account.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.join(amount, pool_id)\n```\n\n----------------------------------------\n\nTITLE: XCM Pallet Error Interfaces\nDESCRIPTION: Defines comprehensive error interfaces for the XCM pallet module covering various cross-chain messaging scenarios including account sovereignty, subscriptions, asset transfers, and execution failures.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.xcmPallet.AccountNotSovereign.is\napi.errors.xcmPallet.AlreadySubscribed.is\napi.errors.xcmPallet.BadLocation.is\napi.errors.xcmPallet.BadVersion.is\napi.errors.xcmPallet.CannotCheckOutTeleport.is\napi.errors.xcmPallet.CannotReanchor.is\napi.errors.xcmPallet.DestinationNotInvertible.is\napi.errors.xcmPallet.Empty.is\napi.errors.xcmPallet.FeesNotMet.is\napi.errors.xcmPallet.Filtered.is\napi.errors.xcmPallet.InUse.is\napi.errors.xcmPallet.InvalidAssetUnknownReserve.is\napi.errors.xcmPallet.InvalidAssetUnsupportedReserve.is\napi.errors.xcmPallet.InvalidOrigin.is\napi.errors.xcmPallet.LocalExecutionIncomplete.is\napi.errors.xcmPallet.LockNotFound.is\napi.errors.xcmPallet.LowBalance.is\napi.errors.xcmPallet.NoSubscription.is\napi.errors.xcmPallet.SendFailure.is\napi.errors.xcmPallet.TooManyAssets.is\napi.errors.xcmPallet.TooManyLocks.is\napi.errors.xcmPallet.TooManyReserves.is\napi.errors.xcmPallet.Unreachable.is\napi.errors.xcmPallet.UnweighableMessage.is\n```\n\n----------------------------------------\n\nTITLE: Initializing Polkadot.js API with Custom Types\nDESCRIPTION: Example showing how to import augmented definitions, create an API instance with custom types, and perform various API operations including queries and type creation. Demonstrates type definitions, API initialization, query handling, and type creation methods.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/typegen.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// We need to import the augmented definitions \"somewhere\" in our project, however since we have\n// it in tsconfig as an override and the api/types has imports, it is not strictly required here.\n// Because of the tsconfig override, we could import from '@polkadot/{api, types}/augment'\nimport './interfaces/augment-api';\nimport './interfaces/augment-types';\n\n// all type stuff, the only one we are using here\nimport type { VoteRecord } from './interfaces';\n\n// external imports\nimport { ApiPromise } from '@polkadot/api';\nimport { createType } from '@polkadot/types';\n\n// our local stuff\nimport * as definitions from './interfaces/definitions';\n\nasync function main (): Promise<void> {\n  // extract all types from definitions - fast and dirty approach, flatted on 'types'\n  const types = Object.values(definitions).reduce((res, { types }): object => ({ ...res, ...types }), {});\n\n  const api = await ApiPromise.create({\n    types: {\n      ...types,\n      // aliases that don't do well as part of interfaces\n      'voting::VoteType': 'VoteType',\n      'voting::TallyType': 'TallyType',\n      // chain-specific overrides\n      Keys: 'SessionKeys4'\n    }\n  });\n\n  // get a query\n  const recordOpt = await api.query.voting.voteRecords(123);\n\n  // the types match with what we expect here\n  let firstRecord: VoteRecord | null = recordOpt.unwrapOr(null);\n  console.log(firstRecord?.toHuman());\n\n  // it even does work for arrays & subscriptions\n  api.query.signaling.activeProposals((results): void => {\n    results.forEach(([hash, blockNumber]): void => {\n      console.log(hash.toHex(), ':', blockNumber.toNumber());\n    });\n  });\n\n  // even createType works, allowing for our types to be used\n  console.log(`Balance2 bitLength:`, [\n    api.createType('Balance2').bitLength(),\n    api.registry.createType('Balance2').bitLength(),\n    createType(api.registry, 'Balance2').bitLength()\n  ]);\n}\n\nawait main();\n```\n\n----------------------------------------\n\nTITLE: Checking MessageQueue Processed Event in Polkadot.js API\nDESCRIPTION: Demonstrates how to verify if an event is a messageQueue Processed event using the Polkadot.js API. This event indicates that a message has been processed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.messageQueue.Processed.is\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Payout Stakers By Page\nDESCRIPTION: Interface for paying out stakers behind a validator for a given era and page. Allows any account to trigger payouts, with pagination support for validators with many nominators.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_154\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.payoutStakersByPage(validator_stash, era, page)\n```\n\n----------------------------------------\n\nTITLE: Accessing Foreign Assets Module Storage in Polkadot JS API\nDESCRIPTION: Methods to query foreign assets information, including accounts, approvals, asset details, and metadata.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\napi.query.foreignAssets.account(assetLocation, accountId)\n```\n\n----------------------------------------\n\nTITLE: Initializing Keyring with Polkadot-js API in JavaScript\nDESCRIPTION: This code shows how to initialize the Polkadot-js keyring in conjunction with the Polkadot-js API. It creates an API instance first, then loads the keyring, which is useful for applications that need both API and keyring functionality.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/init.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApiPromise } from '@polkadot/api';\nimport keyring from '@polkadot/ui-keyring';\n\n...\nApiPromise.create({ ... }).then(() => {\n  keyring.loadAll({ ... });\n\n  // additional initialization here, including rendering\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Enums in JavaScript\nDESCRIPTION: Demonstrates how to define custom enum types for the Polkadot JS API. Includes both simple C-like enums and more complex typed enums with different value types for each variant.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.extend.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = await ApiPromise.create({\n  ...,\n  types: {\n    CLikeEnum: {\n      _enum: ['One', 'Two', 'Three']\n    },\n    TypedEnum: {\n      _enum: {\n        One: 'Compact<u32>',\n        Two: 'u64',\n        Three: 'Option<Balance>',\n        Four: null\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Complex Object Types as Transaction Parameters in Polkadot-js\nDESCRIPTION: This example shows how to make a call to the staking.validate function using an object as input. It demonstrates that the API will automatically format the input object into the required ValidatorPrefs type, with any undefined fields set to their default values.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.tx.wrap.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst txHash = await api.tx.staking.validate({\n  validatorPayment: 12345\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Extrinsic in Block Building\nDESCRIPTION: Applies a given extrinsic during block building and returns an inclusion outcome that specifies whether the extrinsic is included in the block or not.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.blockBuilder.applyExtrinsic(extrinsic: SpRuntimeUncheckedExtrinsic): Result<Result<Null, SpRuntimeDispatchError>, SpRuntimeTransactionValidityTransactionValidityError>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Custom Polkadot.js API Types\nDESCRIPTION: This snippet shows the necessary changes to tsconfig.json to make TypeScript aware of the custom generated types for the Polkadot.js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/typegen.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"sample-polkadotjs-typegen/*\": [\"src/*\"],\n      \"@polkadot/api/augment\": [\"src/interfaces/augment-api.ts\"],\n      \"@polkadot/types/augment\": [\"src/interfaces/augment-types.ts\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chilling Validator or Nominator in Polkadot.js\nDESCRIPTION: This function declares no desire to either validate or nominate. It must be called by the controller account. The effects will be felt at the beginning of the next era.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_142\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.chill()\n```\n\n----------------------------------------\n\nTITLE: Contracts Pallet Error Interfaces\nDESCRIPTION: Error interfaces for the contracts pallet, handling smart contract operations, code management, and execution issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.contracts.CannotAddSelfAsDelegateDependency.is\napi.errors.contracts.CodeInfoNotFound.is\napi.errors.contracts.CodeInUse.is\napi.errors.contracts.CodeNotFound.is\napi.errors.contracts.CodeRejected.is\napi.errors.contracts.CodeTooLarge.is\napi.errors.contracts.ContractNotFound.is\napi.errors.contracts.ContractReverted.is\napi.errors.contracts.ContractTrapped.is\napi.errors.contracts.DecodingFailed.is\napi.errors.contracts.DelegateDependencyAlreadyExists.is\napi.errors.contracts.DelegateDependencyNotFound.is\n```\n\n----------------------------------------\n\nTITLE: Nominating Validators on Behalf of a Pool in Polkadot-js API\nDESCRIPTION: Nominates validators on behalf of a pool. The call must be signed by either the pool nominator or the pool root role, and forwards the nomination to the staking pallet. The pool's depositor needs to have at least the minimum bond to start nominating.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.nominate(pool_id, validators)\n```\n\n----------------------------------------\n\nTITLE: Unlocking Vested Funds for Other Account in Polkadot.js API\nDESCRIPTION: This code snippet shows how to unlock vested funds for a target account using the Polkadot.js API. It requires a signed origin and takes the target account as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_197\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.vesting.vestOther(target: MultiAddress)\n```\n\n----------------------------------------\n\nTITLE: Querying Delegated Staking Counters in Polkadot.js\nDESCRIPTION: These functions query counters for agents and delegators in the delegated staking system. They return unsigned 32-bit integers representing the count of agents and delegators respectively.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.delegatedStaking.counterForAgents(): u32\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.delegatedStaking.counterForDelegators(): u32\n```\n\n----------------------------------------\n\nTITLE: HRMP Channel Management Functions\nDESCRIPTION: Functions for managing Horizontal Relay-routed Message Passing (HRMP) channels between parachains. Includes channel establishment, closure, and maintenance operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.hrmp.establishChannelWithSystem(target_system_chain: u32)\napi.tx.hrmp.establishSystemChannel(sender: u32, recipient: u32)\napi.tx.hrmp.forceCleanHrmp(para: u32, num_inbound: u32, num_outbound: u32)\napi.tx.hrmp.forceOpenHrmpChannel(sender: u32, recipient: u32, max_capacity: u32, max_message_size: u32)\n```\n\n----------------------------------------\n\nTITLE: NFTs Event Interfaces\nDESCRIPTION: Comprehensive event interfaces for NFT operations including creation, transfer, attribute management, and trading functionalities.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.nfts.AllApprovalsCancelled.is\napi.events.nfts.ApprovalCancelled.is\napi.events.nfts.AttributeCleared.is\n// ... and other NFT related interfaces\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Storage Keys in Polkadot.js API\nDESCRIPTION: Retrieves the keys with prefix of a specific child storage. It takes various parameters related to child storage and an optional block hash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.state.getChildKeys(childStorageKey: StorageKey, childDefinition: StorageKey, childType: u32, key: StorageKey, at?: BlockHash): Vec<StorageKey>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Keyring Account Changes\nDESCRIPTION: Implements real-time subscription to account changes in the keyring, allowing monitoring of account additions and removals.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/loading.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\n// create a subscription to all available accounts, updated real-time\nconst sub = keyring.accounts.subject.subscribe((accounts) => {\n  accounts.forEach(({ json, option }) =>\n    // json is the stored data, including address\n    // option is a { name: meta.name, value: address }\n  );\n});\n\n...\n// at some point  when we are not interested anymore, we can unsubscribe\nsub.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Transferring Assets with Custom XCM Instructions in Polkadot.js\nDESCRIPTION: This function transfers assets from the local chain to a destination chain using specified transfer types for assets and fees. It allows for custom XCM instructions to be executed on the destination chain. The function handles various transfer types including local reserve, destination reserve, remote reserve, and teleportation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_219\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.transferAssetsUsingTypeAndThen(dest: XcmVersionedLocation, assets: XcmVersionedAssets, assets_transfer_type: StagingXcmExecutorAssetTransferTransferType, remote_fees_id: XcmVersionedAssetId, fees_transfer_type: StagingXcmExecutorAssetTransferTransferType, custom_xcm_on_dest: XcmVersionedXcm, weight_limit: XcmV3WeightLimit)\n```\n\n----------------------------------------\n\nTITLE: Transaction Payment Events Interface\nDESCRIPTION: Handles transaction fee payment events tracking payments made by accounts.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.transactionPayment.TransactionFeePaid.is\n```\n\n----------------------------------------\n\nTITLE: Multisig Transaction Operations\nDESCRIPTION: API endpoints for handling multi-signature operations including approvals, executions and cancellations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.multisig.approveAsMulti(threshold, other_signatories, maybe_timepoint, call_hash, max_weight)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.multisig.asMulti(threshold, other_signatories, maybe_timepoint, call, max_weight)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.multisig.asMultiThreshold1(other_signatories, call)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.multisig.cancelAsMulti(threshold, other_signatories, timepoint, call_hash)\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Rebond Funds\nDESCRIPTION: Rebonds a portion of the stash scheduled to be unlocked. Must be called by the controller with time complexity O(L), where L is unlocking chunks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_156\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.rebond(value)\n```\n\n----------------------------------------\n\nTITLE: Removing Nominations from Validator in Polkadot.js\nDESCRIPTION: This function removes specified nominations from the calling validator. It must be called by the controller account and takes effect at the beginning of the next era.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_151\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.kick(who: Vec<MultiAddress>)\n```\n\n----------------------------------------\n\nTITLE: Installing Beta Version of Polkadot JS API\nDESCRIPTION: Command to install the beta version of @polkadot/api package using Yarn. Beta versions contain the latest fixes and features that may not yet be available in stable releases, useful for testing or accessing features in Substrate master.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/install.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @polkadot/api@beta\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Storage Changes in Polkadot JS API (TypeScript)\nDESCRIPTION: This method subscribes to storage changes for the provided keys. It accepts an optional vector of StorageKey and returns a StorageChangeSet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribeStorage(keys?: `Vec<StorageKey>`): `StorageChangeSet`\n```\n\n----------------------------------------\n\nTITLE: Claiming Pool Member Rewards\nDESCRIPTION: Allows a bonded member to claim their rewards payout based on pool's accumulated rewards since their last claim. Rewards are transferred to the member's account proportionally based on their stake.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.claimPayout()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Health in Polkadot.js API\nDESCRIPTION: Returns the health status of the node. This method doesn't take any parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.system.health(): Health\n```\n\n----------------------------------------\n\nTITLE: Accessing Asset Module Storage in Polkadot JS API\nDESCRIPTION: Methods to query the assets module, including account holdings, approvals, asset details, metadata, and the next asset ID for creation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\napi.query.assets.account(assetId, accountId)\n```\n\n----------------------------------------\n\nTITLE: Conviction Voting Transaction Methods\nDESCRIPTION: API methods for conviction voting including removeVote, undelegate, unlock and vote operations. These methods allow users to manage their votes and delegations in the voting system.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.convictionVoting.removeVote(class, index)\napi.tx.convictionVoting.undelegate(class)\napi.tx.convictionVoting.unlock(class, target)\napi.tx.convictionVoting.vote(poll_index, vote)\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Validate\nDESCRIPTION: Declares the desire to validate for the origin controller. Effects will be felt at the beginning of the next era.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_167\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.validate(prefs)\n```\n\n----------------------------------------\n\nTITLE: System Operations in Polkadot-js API (TypeScript)\nDESCRIPTION: This snippet demonstrates various system-related operations available in the Polkadot-js API. It includes methods for retrieving account information, managing peers, and querying node status.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/rpc.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.system.accountNextIndex(accountId: AccountId): Index\napi.rpc.system.addLogFilter(directives: Text): Null\napi.rpc.system.addReservedPeer(peer: Text): Text\napi.rpc.system.chain(): Text\napi.rpc.system.chainType(): ChainType\napi.rpc.system.dryRun(extrinsic: Bytes, at?: BlockHash): ApplyExtrinsicResult\napi.rpc.system.health(): Health\napi.rpc.system.localListenAddresses(): Vec<Text>\napi.rpc.system.localPeerId(): Text\napi.rpc.system.name(): Text\napi.rpc.system.nodeRoles(): Vec<NodeRole>\napi.rpc.system.peers(): Vec<PeerInfo>\napi.rpc.system.properties(): ChainProperties\napi.rpc.system.removeReservedPeer(peerId: Text): Text\napi.rpc.system.reservedPeers(): Vec<Text>\napi.rpc.system.resetLogFilter(): Null\napi.rpc.system.syncState(): SyncState\napi.rpc.system.version(): Text\n```\n\n----------------------------------------\n\nTITLE: Initializing Keyring with Custom Store in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Polkadot-js keyring with a custom store, such as an extension store. It demonstrates the flexibility in choosing different storage mechanisms for the keyring data.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/init.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// For file storage where available, e.g. in Electron environments.\n// This takes an path in the constructor, new FileStore('~./keyring-data')\n// import { FileStore } from '@polkadot/ui-keyring/stores';\n\n// When the store is not specified, it defaults to new BrowserStore()\n// import { BrowserStore } from '@polkadot/ui-keyring/stores';\n\n...\n// ExensionStore is available in https://github.com/polkadot-js/extension\nkeyring.loadAll({ store: new ExtensionStore(), ... });\n```\n\n----------------------------------------\n\nTITLE: Limited Reserve Transfer Assets in XCM Pallet\nDESCRIPTION: Transfers assets between chains through reserve locations with weight limits. Supports local, destination, or remote reserve scenarios. Fee payment uses a specified asset with a weight limit for execution.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_213\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.limitedReserveTransferAssets(dest: `XcmVersionedLocation`, beneficiary: `XcmVersionedLocation`, assets: `XcmVersionedAssets`, fee_asset_item: `u32`, weight_limit: `XcmV3WeightLimit`)\n```\n\n----------------------------------------\n\nTITLE: Querying Persisted Validation Data in Polkadot Parachain (TypeScript)\nDESCRIPTION: This function retrieves the persisted validation data for a given ParaId, along with an assumption about core occupancy. It returns None if the para is not registered or if the assumption is Freed and the para already occupies a core.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.parachainHost.persistedValidationData(para_id: PolkadotParachainPrimitivesPrimitivesId, assumption: PolkadotPrimitivesV8OccupiedCoreAssumption): Option<PolkadotPrimitivesV8PersistedValidationData>\n```\n\n----------------------------------------\n\nTITLE: Querying Supported XCM Version in XCM Pallet\nDESCRIPTION: API interface for querying the latest versions that are known to be supported by various locations in the XCM pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.supportedVersion\n```\n\n----------------------------------------\n\nTITLE: Bounty Management Functions\nDESCRIPTION: Core bounty management functions including proposal, approval, curator assignment, and claim processing. Handles the full lifecycle of bounties from creation to payout.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.bounties.proposeBounty(value: Compact<u128>, description: Bytes)\napi.tx.bounties.approveBounty(bounty_id: Compact<u32>)\napi.tx.bounties.proposeCurator(bounty_id: Compact<u32>, curator: MultiAddress, fee: Compact<u128>)\napi.tx.bounties.acceptCurator(bounty_id: Compact<u32>)\n```\n\n----------------------------------------\n\nTITLE: Handling Sudo Result Events in Polkadot/Substrate\nDESCRIPTION: This code demonstrates how to properly parse and handle results from Sudo transactions, which wrap their results in a Sudid event. It specifically looks for the Sudid event and processes the sudoResult to determine success or failure of the underlying call.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/cookbook/tx.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = await api.tx.sudo\n  .sudo(\n    api.tx.balances.forceTransfer(user1, user2, amount)\n  )\n  .signAndSend(sudoPair, ({ status, events }) => {\n    if (status.isInBlock || status.isFinalized) {\n      events\n        .forEach(({ event }) => {\n          // We know this tx should result in `Sudid` event, ignore all others.\n          if(!api.events.sudo.Sudid.is(event)) continue;\n\n          // `event` is now typed as Sudid, which has a payload called `sudoResult`\n          const result = event.data.sudoResult\n                // ^? `Result<Null, SpRuntimeDispatchError>`\n\n          if (result.isError) {\n            let error = result.asError;\n            if (error.isModule) {\n              // for module errors, we have the section indexed, lookup\n              const decoded = api.registry.findMetaError(error.asModule);\n              const { docs, name, section } = decoded;\n\n              console.log(`${section}.${name}: ${docs.join(' ')}`);\n            } else {\n              // Other, CannotLookup, BadOrigin, no extra info\n              console.log(error.toString());\n            }\n          }\n        });\n      unsub();\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Applying Extrinsic in Block Builder in Rust\nDESCRIPTION: This method applies a given extrinsic and returns an inclusion outcome specifying if the extrinsic is included in the block. It's part of the blockBuilder module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\napplyExtrinsic(extrinsic: `SpRuntimeUncheckedExtrinsic`): `Result<Result<Null, SpRuntimeDispatchError>, SpRuntimeTransactionValidityTransactionValidityError>`\n```\n\n----------------------------------------\n\nTITLE: Type Override Order Example in JavaScript\nDESCRIPTION: Illustrates the order of precedence for type definitions when multiple configurations are provided. Chain-specific types override node-specific types, which override general types.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.extend.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = await ApiPromise.create({\n  ...,\n  types: {\n    Balance: 'u32',\n  }\n  typesChain: {\n    Balance: 'u128'\n  },\n  typesSpec: {\n    Balance: 'u64',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Proxy Accounts\nDESCRIPTION: Methods for creating and managing proxy accounts, which can make calls on behalf of another account. Includes features for pure proxies, announcements, and proxy relationships.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.proxy.addProxy(delegate, proxy_type, delay)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.proxy.announce(real, call_hash)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.proxy.createPure(proxy_type, delay, index)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.proxy.killPure(spawner, proxy_type, index, height, ext_index)\n```\n\n----------------------------------------\n\nTITLE: Checking Treasury Spend Status\nDESCRIPTION: Checks the status of a treasury spend and removes it from storage if processed. If a spend has succeeded or expired, it is removed and transaction fees are refunded. Must be signed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_181\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.treasury.checkStatus(index)\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Current Planned Session in Polkadot.js API\nDESCRIPTION: Retrieves the last planned session scheduled by the session pallet. Returns a u32 value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.currentPlannedSession\n```\n\n----------------------------------------\n\nTITLE: Event Interface Definition - Balances Events\nDESCRIPTION: Interface definitions for balance-related events including transfers, burns, freezes, and account management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.balances.BalanceSet.is\napi.events.balances.Burned.is\napi.events.balances.Deposit.is\napi.events.balances.Transfer.is\napi.events.balances.Endowed.is\napi.events.balances.Reserved.is\napi.events.balances.Unreserved.is\n```\n\n----------------------------------------\n\nTITLE: Handling Type Definition Clashes in JavaScript\nDESCRIPTION: Demonstrates how to handle naming conflicts between custom type field names and built-in Codec properties. This example shows renaming a 'hash' field to 'docHash' to avoid clashes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.extend.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nDocument: {\n  name: 'Text',\n  uri: 'Text',\n  hash: 'Text'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nDocument: {\n  name: 'Text',\n  uri: 'Text',\n  docHash: 'Text'\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GRANDPA Authorities in Polkadot.js\nDESCRIPTION: This function retrieves the current list of GRANDPA authorities. It returns a vector of tuples containing SpConsensusGrandpaAppPublic and u64 values.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.grandpa.authorities(): Vec<(SpConsensusGrandpaAppPublic,u64)>\n```\n\n----------------------------------------\n\nTITLE: Querying Delegator Information in Polkadot.js\nDESCRIPTION: This function queries information about a specific delegator given their AccountId32. It returns an optional PalletDelegatedStakingDelegation object containing delegation details.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.delegatedStaking.delegators(AccountId32): Option<PalletDelegatedStakingDelegation>\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Polkadot.js API Type Generation\nDESCRIPTION: This snippet shows the necessary scripts and dependencies in package.json for generating custom type definitions using @polkadot/typegen.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/typegen.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"yarn generate:defs && yarn generate:meta\",\n    \"generate:defs\": \"ts-node --skip-project node_modules/.bin/polkadot-types-from-defs --package sample-polkadotjs-typegen/interfaces --input ./src/interfaces --endpoint ./edgeware.json\",\n    \"generate:meta\": \"ts-node --skip-project node_modules/.bin/polkadot-types-from-chain --package sample-polkadotjs-typegen/interfaces --endpoint ./edgeware.json --output ./src/interfaces\",\n    \"lint\": \"tsc --noEmit --pretty\"\n  },\n  \"dependencies\": {\n    \"@polkadot/api\": \"^2.3.1\"\n  },\n  \"devDependencies\": {\n    \"@polkadot/typegen\": \"^2.3.1\",\n    \"ts-node\": \"^8.6.2\",\n    \"typescript\": \"^4.0.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Treasury Module in Polkadot-js API\nDESCRIPTION: Interface patterns for accessing treasury information such as proposals, approvals, and spend tracking through the Polkadot-js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.approvals()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.deactivated()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.proposalCount()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.proposals(index)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.spendCount()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.spends(index)\n```\n\n----------------------------------------\n\nTITLE: Election Provider Transaction Methods\nDESCRIPTION: API methods for the election provider including governance fallback, emergency election handling and solution submission. These methods manage the election process.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.electionProviderMultiPhase.governanceFallback(maybe_max_voters, maybe_max_targets)\napi.tx.electionProviderMultiPhase.setEmergencyElectionResult(supports)\napi.tx.electionProviderMultiPhase.setMinimumUntrustedScore(maybe_next_score)\napi.tx.electionProviderMultiPhase.submit(raw_solution)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Health in Polkadot-js API\nDESCRIPTION: This method returns the health status of the node. It is accessed through the api.rpc.system.health interface and corresponds to the system_health JSON-RPC endpoint.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/rpc.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nhealth(): Health\n```\n\n----------------------------------------\n\nTITLE: Querying Current Timestamp\nDESCRIPTION: API interface for querying the current time for the current block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.timestamp.now\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Next Index in Polkadot.js API\nDESCRIPTION: Retrieves the next accountIndex as available on the node. It takes an AccountId as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.system.accountNextIndex(accountId: AccountId): Index\n```\n\n----------------------------------------\n\nTITLE: Querying Recorded XCM in XCM Pallet\nDESCRIPTION: API interface for querying the last XCM program executed locally if ShouldRecordXcm is set to true. Relevant when this pallet is used as the RecordXcm implementation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.recordedXcm\n```\n\n----------------------------------------\n\nTITLE: Querying Metadata API in Polkadot-js\nDESCRIPTION: Methods for retrieving blockchain metadata at specific versions. The API allows fetching metadata at a particular version number and listing all supported metadata versions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// Retrieve metadata at a specific version\nconst metadata = await api.call.metadata.metadataAtVersion(version);\n\n// Get a list of all supported metadata versions\nconst versions = await api.call.metadata.metadataVersions();\n```\n\n----------------------------------------\n\nTITLE: Checking Block Inherents\nDESCRIPTION: Validates that the inherents in a block are valid. The inherent data varies between different chains and represents data that is inherently true for a block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.blockBuilder.checkInherents(block: SpRuntimeBlock, data: SpInherentsInherentData): SpInherentsCheckInherentsResult\n```\n\n----------------------------------------\n\nTITLE: Configuring API Type Mappings in JavaScript\nDESCRIPTION: Configuration of Polkadot.js API type mappings to match custom node implementation for Address and LookupSource types.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.extend.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = await ApiPromise.create({\n  ...,\n  types: {\n    // mapping the actual specified address format\n    Address: 'AccountId',\n    // mapping the lookup\n    LookupSource: 'AccountId'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Proxy Methods in Polkadot-js API\nDESCRIPTION: The proxy pallet methods allow accounts to set up and manage proxy relationships. These methods enable proxied account operations, announcement management, and proxy configuration.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.proxy.proxy(real, force_proxy_type, call)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.proxy.proxyAnnounced(delegate, real, force_proxy_type, call)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.proxy.rejectAnnouncement(delegate, call_hash)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.proxy.removeAnnouncement(real, call_hash)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.proxy.removeProxies()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.proxy.removeProxy(delegate, proxy_type, delay)\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Definitions Command\nDESCRIPTION: Command to generate TypeScript definitions from custom interfaces using polkadot-types-from-defs tool\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/typescript.user.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn polkadot-types-from-defs --input ./stuff/interfaces --package @MeInc/stuff/interfaces\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Claimed Rewards in Polkadot.js API\nDESCRIPTION: Retrieves the history of claimed paged rewards by era and validator. Takes a tuple of u32 and AccountId32 as input and returns a vector of u32 values.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.claimedRewards\n```\n\n----------------------------------------\n\nTITLE: Verifying Multisig Approval Event in Polkadot.js API\nDESCRIPTION: This code demonstrates how to check if an event is a MultisigApproval event from the multisig module using the Polkadot.js API. It provides the interface for accessing events related to multisignature operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.multisig.MultisigApproval.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage in Polkadot JS API (TypeScript)\nDESCRIPTION: This method retrieves the storage for a given key. It accepts a StorageKey and an optional BlockHash, returning StorageData.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetStorage(key: `StorageKey`, at?: `BlockHash`): `StorageData`\n```\n\n----------------------------------------\n\nTITLE: Revive API for EVM Interaction in Polkadot-js\nDESCRIPTION: Methods for interacting with EVM contracts through the Revive API. Provides functionality to check balances of Ethereum-style addresses and make calls to EVM contracts.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// Get balance of an Ethereum address\nconst balance = await api.call.reviveApi.balance(address);\n\n// Call a contract\nconst result = await api.call.reviveApi.call(\n  origin,\n  dest,\n  value,\n  gasLimit,\n  storageDepositLimit,\n  inputData\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Enum Types in Polkadot.js API\nDESCRIPTION: Shows how to create and use both C-style and typed enums in Polkadot.js API using api.createType.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.create.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = await ApiPromise.create({\n  ...\n  types: {\n    CLikeEnum: {\n      _enum: ['One', 'Two', 'Three']\n    },\n    TypedEnum: {\n      _enum: {\n        One: 'Compact<u32>',\n        Two: 'u64',\n        Three: 'Option<Balance>',\n        Four: null\n      }\n    }\n  }\n});\n\nconst one = api.createType('CLikeEnum', 'One');\nconsole.log(one.isOne);  // true\n\nconst two = api.createType('TypedEnum', {'Two': 123});\nconsole.log(two.asTwo.toNumber());  // 123\n\nconst three = api.createType('TypedEnum', 'Three');  // Default initialization\nconsole.log(three.asThree.isNone);  // true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chain Information in Polkadot.js API\nDESCRIPTION: Retrieves the chain information. This method doesn't take any parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.system.chain(): Text\n```\n\n----------------------------------------\n\nTITLE: Checking for BatchCompleted Event in Polkadot.js API\nDESCRIPTION: This snippet shows how to verify if an event is a BatchCompleted event from the utility module, indicating that a batch of dispatches completed fully with no error.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.utility.BatchCompleted.is\n```\n\n----------------------------------------\n\nTITLE: Polkadot System Events\nDESCRIPTION: Core system event interfaces handling extrinsic success/failure, account creation/deletion, and code updates.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.system.CodeUpdated.is\napi.events.system.ExtrinsicFailed.is\napi.events.system.ExtrinsicSuccess.is\napi.events.system.KilledAccount.is\napi.events.system.NewAccount.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parachain Head Data\nDESCRIPTION: Gets the head-data of a registered para. Takes a parachain ID and returns the optional head data.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.heads(paraId)\n```\n\n----------------------------------------\n\nTITLE: Migrating Pool to Delegate Stake Strategy in Polkadot-js API\nDESCRIPTION: Migrates a pool from Transfer stake strategy to Delegate stake strategy. This is a permission-less call that refunds fees if successful. The call fails if the pool has already migrated to delegation-based staking.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.migratePoolToDelegateStake(pool_id)\n```\n\n----------------------------------------\n\nTITLE: Setting Default XCM Version in Polkadot.js API\nDESCRIPTION: This code snippet demonstrates how to set a safe XCM version using the Polkadot.js API. It requires an admin origin and takes the XCM version as an optional parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_208\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.forceDefaultXcmVersion(maybe_xcm_version: Option<u32>)\n```\n\n----------------------------------------\n\nTITLE: Extracting Map Keys for Nominators in Polkadot.js API\nDESCRIPTION: This snippet illustrates how to retrieve all keys from a storage map using the `.keys()` method. It fetches all nominator keys from the staking module and then extracts the nominator account IDs from the key arguments, joining them in a comma-separated list for display.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/api.query.other.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// retrieve all the nominator keys\nconst keys = await api.query.staking.nominators.keys();\n\n// extract the first key argument [AccountId] as string\nconst nominatorIds = keys.map(({ args: [nominatorId] }) => nominatorId);\n\nconsole.log('all nominators:', nominatorIds.join(', '));\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Account Information in TypeScript\nDESCRIPTION: Fetches the full account information for a particular account ID. Requires an AccountId32 parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.account(accountId: AccountId32)\n```\n\n----------------------------------------\n\nTITLE: Querying DMP Message Queues in Polkadot.js\nDESCRIPTION: This function retrieves the downward messages addressed to a specific parachain. It takes a u32 parameter (likely the para ID) and returns a vector of PolkadotCorePrimitivesInboundDownwardMessage objects.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.dmp.downwardMessageQueues(u32): Vec<PolkadotCorePrimitivesInboundDownwardMessage>\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Set Payee\nDESCRIPTION: Sets the payment target for a controller. Must be signed by the controller, not the stash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_162\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.setPayee(payee)\n```\n\n----------------------------------------\n\nTITLE: Migrating Delegation from Pool to Member Account in Polkadot-js API\nDESCRIPTION: Migrates delegated funds from a pool account to a member account. This operation is permission-less and can only succeed when using the Delegate stake strategy. The transaction refunds any fees if the claim is successful.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.migrateDelegation(member_account)\n```\n\n----------------------------------------\n\nTITLE: Encoding Public Keys to SS58 Addresses in JavaScript\nDESCRIPTION: This snippet demonstrates how to encode a public key into SS58-formatted addresses for different networks (Substrate generic, Kusama, and Polkadot) using the Polkadot.js keyring's encodeAddress function.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/ss58.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 5CSbZ7wG456oty4WoiX6a1J88VUbrCXLhrKVJ9q95BsYH4TZ\nconsole.log(keyring.encodeAddress(pair.publicKey, 42));\n\n// CxDDSH8gS7jecsxaRL9Txf8H5kqesLXAEAEgp76Yz632J9M\nconsole.log(keyring.encodeAddress(pair.publicKey, 2));\n\n// 1NthTCKurNHLW52mMa6iA8Gz7UFYW5UnM3yTSpVdGu4Th7h\nconsole.log(keyring.encodeAddress(pair.publicKey, 0));\n```\n\n----------------------------------------\n\nTITLE: Detecting Multisig MultisigApproval Event in Polkadot.js API\nDESCRIPTION: Illustrates how to identify if an event is a multisig MultisigApproval event using the Polkadot.js API. This event signifies that a multisig operation has been approved by someone.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.multisig.MultisigApproval.is\n```\n\n----------------------------------------\n\nTITLE: Removing Address from Polkadot.js Keyring\nDESCRIPTION: Demonstrates how to remove an address from the keyring using the forgetAddress method. This permanently removes the address and its associated metadata from the keyring.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/addresses.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// remove the specific address\nkeyring.forgetAddress(FAUCET_ADDR);\n\n/// the faucet will not be in the list of addresses anymore\nkeyring.getAddresses().forEach(...)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Bonded Tokens for Staking in Polkadot.js\nDESCRIPTION: This function adds extra tokens to the amount bonded for staking. It allows stakers to increase their stake without limitations. The function takes the maximum additional amount as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_140\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.bondExtra(max_additional: Compact<u128>)\n```\n\n----------------------------------------\n\nTITLE: Generating Chain Types Command\nDESCRIPTION: Command to generate TypeScript definitions for chain constants and queries using polkadot-types-from-chain tool\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/typescript.user.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn polkadot-types-from-chain --endpoint wss://<url> --output ./stuff\n```\n\n----------------------------------------\n\nTITLE: Retrieving RPC Methods in Polkadot.js API\nDESCRIPTION: Retrieves the list of RPC methods that are exposed by the node.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.rpc.methods(): RpcMethods\n```\n\n----------------------------------------\n\nTITLE: Verifying Polkadot XCM Attempted Event in Polkadot.js API\nDESCRIPTION: Demonstrates how to check if an event is an Attempted event in the Polkadot XCM module using the Polkadot.js API. This event signifies that the execution of an XCM message was attempted.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.polkadotXcm.Attempted.is\n```\n\n----------------------------------------\n\nTITLE: Identifying ForeignAssets Created Event in Polkadot.js API\nDESCRIPTION: Shows how to determine if an event is a foreignAssets Created event using the Polkadot.js API. This event signifies that a new asset class has been created.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.foreignAssets.Created.is\n```\n\n----------------------------------------\n\nTITLE: Initializing Keyring with Vue Rendering in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Polkadot-js keyring and then mount a Vue application. It ensures that the keyring is fully loaded before rendering the UI.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/init.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\ncryptoWaitReady().then(() => {\n  keyring.loadAll({ ... });\n\n  // mount Vue and render\n  new Vue({ render: (h) => h(App) }).$mount('#app');\n});\n```\n\n----------------------------------------\n\nTITLE: Claiming XCM Assets in Polkadot.js API\nDESCRIPTION: This code snippet demonstrates how to claim XCM assets trapped in the pallet using the Polkadot.js API. It takes the assets and beneficiary as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_206\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.claimAssets(assets: XcmVersionedAssets, beneficiary: XcmVersionedLocation)\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Named Task After Delay in Polkadot-JS API\nDESCRIPTION: This function schedules a named task after a delay. It takes the task ID, delay, optional periodicity, priority, and the call to be executed as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.scheduler.scheduleNamedAfter(id: [u8;32], after: u32, maybe_periodic: Option<(u32,u32)>, priority: u8, call: Call)\n```\n\n----------------------------------------\n\nTITLE: Checking Collator Selection Candidate Added Event in Polkadot.js API\nDESCRIPTION: This code demonstrates how to verify if an event is a CandidateAdded event from the collatorSelection module using the Polkadot.js API. It shows the interface for accessing this specific event.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.collatorSelection.CandidateAdded.is\n```\n\n----------------------------------------\n\nTITLE: Placing Decision Deposit for Referendum\nDESCRIPTION: Posts the Decision Deposit for a referendum. Must be signed by an account with sufficient funds for the referendum track's Decision Deposit. Emits DecisionDepositPlaced event.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_32\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipReferenda.placeDecisionDeposit(index)\n```\n\n----------------------------------------\n\nTITLE: Dry Running Extrinsic in Polkadot.js API\nDESCRIPTION: Dry runs an extrinsic at a given block. It takes an extrinsic and an optional block hash as parameters. This method is only active with appropriate flags and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.system.dryRun(extrinsic: Bytes, at?: BlockHash): ApplyExtrinsicResult\n```\n\n----------------------------------------\n\nTITLE: Setting Commission for a Pool in Polkadot-js API\nDESCRIPTION: Sets the commission for a pool. Requires both a commission percentage and a payee account. Providing None for new_commission removes any existing commission configuration.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.setCommission(pool_id, new_commission)\n```\n\n----------------------------------------\n\nTITLE: Anonymously Scheduling a Task After Delay in Polkadot-JS API\nDESCRIPTION: This function anonymously schedules a task after a delay. It takes the delay, optional periodicity, priority, and the call to be executed as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.scheduler.scheduleAfter(after: u32, maybe_periodic: Option<(u32,u32)>, priority: u8, call: Call)\n```\n\n----------------------------------------\n\nTITLE: Querying Fast Unstake Head in Polkadot.js\nDESCRIPTION: This function retrieves the current \"head of the queue\" being unstaked in the fast unstake process. It returns an optional PalletFastUnstakeUnstakeRequest object.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.fastUnstake.head(): Option<PalletFastUnstakeUnstakeRequest>\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Execution Suspension State using Polkadot.js API\nDESCRIPTION: This snippet demonstrates how to use the xcmExecutionSuspended query to check if XCM execution is globally suspended. It returns a boolean value indicating the suspension state of the XCM executor.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.xcmExecutionSuspended()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Runtime Metadata\nDESCRIPTION: Returns the metadata of the runtime. This metadata contains comprehensive information about the runtime's types, calls, events, and other structures.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.metadata.metadata(): SpCoreOpaqueMetadata\n```\n\n----------------------------------------\n\nTITLE: Accessing Multisig Error Interfaces in Polkadot.js API\nDESCRIPTION: This snippet demonstrates how to access error interfaces for the multisig module in Polkadot.js API. It includes errors related to signatories, timepoints, and other multisig operation issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.multisig.SenderInSignatories.is\napi.errors.multisig.SignatoriesOutOfOrder.is\napi.errors.multisig.TooFewSignatories.is\napi.errors.multisig.TooManySignatories.is\napi.errors.multisig.UnexpectedTimepoint.is\napi.errors.multisig.WrongTimepoint.is\n```\n\n----------------------------------------\n\nTITLE: Setting Chain-Specific Types for Kusama in JavaScript\nDESCRIPTION: Demonstrates using typesChain to configure chain-specific type overrides. This example shows how to set BlockNumber and Index types specifically for the Kusama chain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.extend.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = await ApiPromise.create({\n  ...,\n  typesChain: {\n    Kusama: {\n      BlockNumber: 'u32',\n      Index: 'u32'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Storage Generics with Type Overrides in Polkadot-JS\nDESCRIPTION: This example shows how to use generics with API storage queries to override the returned type. It imports the Balance type from Polkadot interfaces, creates a type alias, and then uses it as a generic parameter when querying the totalIssuance.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/typescript.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Balance } from '@polkadot/types/interfaces';\n\ntype Balance2 = Balance;\n\n...\nconst total = await api.query.balances.totalIssuance<Balance2>();\n```\n\n----------------------------------------\n\nTITLE: Querying Event Count in System Pallet\nDESCRIPTION: API interface for querying the number of events in the Events list in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.eventCount\n```\n\n----------------------------------------\n\nTITLE: Parachain System Query Methods\nDESCRIPTION: Storage queries for parachain system data including validation, messaging and relay chain state\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.parachainSystem.lastRelayChainBlockNumber(): u32\napi.query.parachainSystem.pendingUpwardMessages(): Vec<Bytes>\napi.query.parachainSystem.hostConfiguration(): Option<PolkadotPrimitivesV8AbridgedHostConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Identifying XcmpMessageSent Event in XcmpQueue Module\nDESCRIPTION: This snippet shows how to check if an event is an XcmpMessageSent event in the xcmpQueue module. It represents an HRMP message being sent to a sibling parachain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.xcmpQueue.XcmpMessageSent.is\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Set Validator Count\nDESCRIPTION: Sets the ideal number of validators. Requires Root origin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_164\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.setValidatorCount(new)\n```\n\n----------------------------------------\n\nTITLE: Dry Running Extrinsic in Polkadot JS API (TypeScript)\nDESCRIPTION: This method dry runs an extrinsic at a given block. It requires appropriate flags to be active and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndryRun(extrinsic: `Bytes`, at?: `BlockHash`): `ApplyExtrinsicResult`\n```\n\n----------------------------------------\n\nTITLE: Accessing Multisig Module Errors in Polkadot-js API\nDESCRIPTION: Interface references for error conditions in the multisig module, handling multisignature transaction approval, threshold, and ownership issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.multisig.AlreadyApproved.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.multisig.AlreadyStored.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.multisig.MaxWeightTooLow.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.multisig.MinimumThreshold.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.multisig.NoApprovalsNeeded.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.multisig.NotFound.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.multisig.NoTimepoint.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.multisig.NotOwner.is\n```\n\n----------------------------------------\n\nTITLE: AssetRate Extrinsic Methods\nDESCRIPTION: Methods for managing asset conversion rates to native balance, including create, update and remove operations. All operations have O(1) complexity.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.assetRate.create(asset_kind, rate)\napi.tx.assetRate.remove(asset_kind)\napi.tx.assetRate.update(asset_kind, rate)\n```\n\n----------------------------------------\n\nTITLE: Executing Forced Batch Calls in Polkadot.js API\nDESCRIPTION: This code snippet shows how to send a batch of dispatch calls that allows errors and won't interrupt execution using the Polkadot.js API. It takes a vector of calls as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_191\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.utility.forceBatch(calls: Vec<Call>)\n```\n\n----------------------------------------\n\nTITLE: Managing Conviction Voting\nDESCRIPTION: API calls for managing conviction voting, including delegating voting power and removing votes from polls.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.convictionVoting.delegate(class: u16, to: MultiAddress, conviction: PalletConvictionVotingConviction, balance: u128)\napi.tx.convictionVoting.removeOtherVote(target: MultiAddress, class: u16, index: u32)\n```\n\n----------------------------------------\n\nTITLE: Referenda Module Error Interfaces\nDESCRIPTION: Error interfaces for the referenda module handling referendum validation, tracking, deposits, and permissions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.referenda.BadReferendum.is\napi.errors.referenda.BadStatus.is\napi.errors.referenda.BadTrack.is\napi.errors.referenda.Full.is\napi.errors.referenda.HasDeposit.is\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum-compatible RPC Methods in Polkadot.js\nDESCRIPTION: This snippet demonstrates the structure of Ethereum-compatible RPC methods in the Polkadot.js API. It includes methods for querying block data, transaction information, account balances, and more.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.eth.coinbase(): H160\napi.rpc.eth.estimateGas(request: EthCallRequest, number?: BlockNumber): U256\napi.rpc.eth.feeHistory(blockCount: U256, newestBlock: BlockNumber, rewardPercentiles: Option<Vec<f64>>): EthFeeHistory\napi.rpc.eth.gasPrice(): U256\napi.rpc.eth.getBalance(address: H160, number?: BlockNumber): U256\n// ... more methods\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Pallet Module in Polkadot-js API\nDESCRIPTION: Interface patterns for accessing cross-chain message (XCM) related data including queries, assets, and version information through the Polkadot-js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.assetTraps(hash)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.currentMigration()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.lockedFungibles(accountId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.queries(queryId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.queryCounter()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.recordedXcm()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.remoteLockedFungibles(paraId, accountId, assetId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.safeXcmVersion()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.shouldRecordXcm()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.supportedVersion(paraId, location)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.versionDiscoveryQueue()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.versionNotifiers(paraId, location)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.versionNotifyTargets(paraId, location)\n```\n\n----------------------------------------\n\nTITLE: Accessing AssetConversion Constants in Polkadot.js\nDESCRIPTION: Shows how to access constants from the assetConversion module via the Polkadot.js API. This includes constants for fees, pool setup, liquidity management, and path length limitations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.assetConversion.liquidityWithdrawalFee\napi.consts.assetConversion.lpFee\napi.consts.assetConversion.maxSwapPathLength\napi.consts.assetConversion.mintMinLiquidity\napi.consts.assetConversion.palletId\napi.consts.assetConversion.poolSetupFee\napi.consts.assetConversion.poolSetupFeeAsset\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Current Era in Polkadot.js API\nDESCRIPTION: Retrieves the current era index. Returns an optional u32 value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.currentEra\n```\n\n----------------------------------------\n\nTITLE: Querying Asset Conversion Storage in Polkadot JS API\nDESCRIPTION: Methods to query the assetConversion module storage, including the next pool asset ID and pool information for liquidity pairs.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\napi.query.assetConversion.nextPoolAssetId()\n```\n\n----------------------------------------\n\nTITLE: Submitting a Privileged Referendum\nDESCRIPTION: Proposes a referendum on a privileged action. Must be called by SubmitOrigin with sufficient SubmissionDeposit funds. Emits Submitted event.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipReferenda.submit(proposal_origin, proposal, enactment_moment)\n```\n\n----------------------------------------\n\nTITLE: Removing Session Keys with purgeKeys\nDESCRIPTION: Removes any session key(s) of the function caller. This doesn't take effect until the next session. The origin must be Signed and the account must be convertible to a validator ID.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.session.purgeKeys()\n```\n\n----------------------------------------\n\nTITLE: Claiming Treasury Spend\nDESCRIPTION: Claims a previously approved treasury spend. Spends must be claimed within one PayoutPeriod from the valid_from block. In case of payout failure, the status must be updated before retrying. Must be signed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_182\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.treasury.payout(index)\n```\n\n----------------------------------------\n\nTITLE: Accessing Balances Constants in Polkadot.js\nDESCRIPTION: Demonstrates how to access constants from the balances module via the Polkadot.js API. These constants define minimum deposits, maximum locks, freezes, and reserves that can exist on an account.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.balances.existentialDeposit\napi.consts.balances.maxFreezes\napi.consts.balances.maxLocks\napi.consts.balances.maxReserves\n```\n\n----------------------------------------\n\nTITLE: Implementing Workaround for Contract Query Subscriptions in JavaScript\nDESCRIPTION: This code demonstrates a temporary workaround for subscribing to contract state changes by monitoring the contractInfoOf storage. The approach listens for any changes to the contract's storage and then performs a query, though it may execute more frequently than needed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api-contract/FAQ.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsub = await api.query.contracts.contractInfoOf(contractAddress, async () => {\n    // Perform a read of the contract's `get` message\n    const callValue = await contract.query.get(alicePair.address, value, gasLimit);\n\n    // Do something with callValue\n  });\n```\n\n----------------------------------------\n\nTITLE: Querying Events in System Pallet\nDESCRIPTION: API interface for querying events deposited for the current block in the System pallet. Not meant to be read on-chain as it could inflate PoV size.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.events\n```\n\n----------------------------------------\n\nTITLE: Querying Storage at Specific Block in Polkadot JS API (TypeScript)\nDESCRIPTION: This method queries storage entries by key, starting at a specified block hash. It returns a vector of StorageChangeSet objects.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nqueryStorageAt(keys: `Vec<StorageKey>`, at?: `BlockHash`): `Vec<StorageChangeSet>`\n```\n\n----------------------------------------\n\nTITLE: Balance Management Error Interfaces\nDESCRIPTION: Error interfaces for the balances module handling account operations, transfers, deposits and vesting schedules.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.balances.DeadAccount.is\napi.errors.balances.DeltaZero.is\napi.errors.balances.ExistentialDeposit.is\napi.errors.balances.ExistingVestingSchedule.is\napi.errors.balances.Expendability.is\napi.errors.balances.InsufficientBalance.is\n```\n\n----------------------------------------\n\nTITLE: Core Runtime Operations in Rust\nDESCRIPTION: Core functions for executing blocks, initializing blocks, and retrieving runtime versions. These are part of the core API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nexecuteBlock(block: SpRuntimeBlock): Null\n```\n\nLANGUAGE: rust\nCODE:\n```\ninitializeBlock(header: SpRuntimeHeader): SpRuntimeExtrinsicInclusionMode\n```\n\nLANGUAGE: rust\nCODE:\n```\nversion(): SpVersionRuntimeVersion\n```\n\n----------------------------------------\n\nTITLE: Placing On-Demand Core Order in Polkadot-js API\nDESCRIPTION: Creates a single on-demand core order using the current block's spot price. Will withdraw funds from the sender's account and can reap the account if needed. Handles maximum amount limits and para ID specification.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.onDemandAssignmentProvider.placeOrderAllowDeath(max_amount, para_id)\n```\n\n----------------------------------------\n\nTITLE: Uploading Contract Code in Contracts API in Rust\nDESCRIPTION: Uploads new code without instantiating a contract from it. Returns the result of the code upload.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\napi.call.contractsApi.uploadCode(origin: SpCoreCryptoAccountId32, code: Bytes, storage_deposit_limit: Option<u128>, determinism: PalletContractsWasmDeterminism): Result<PalletContractsPrimitivesCodeUploadReturnValue, SpRuntimeDispatchError>\n```\n\n----------------------------------------\n\nTITLE: Managing Peer Connections\nDESCRIPTION: RPC methods for managing peer connections including listing peers, handling reserved peers, and retrieving peer information\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.system.peers(): Vec<PeerInfo>\napi.rpc.system.removeReservedPeer(peerId: Text): Text\napi.rpc.system.reservedPeers(): Vec<Text>\n```\n\n----------------------------------------\n\nTITLE: Accessing Staking Pallet Constants in Polkadot.js API\nDESCRIPTION: Constants for the Staking pallet, including bonding duration, history depth, and sessions per era.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst bondingDuration = api.consts.staking.bondingDuration;\nconst historyDepth = api.consts.staking.historyDepth;\nconst sessionsPerEra = api.consts.staking.sessionsPerEra;\n```\n\n----------------------------------------\n\nTITLE: Accessing Scheduled Tasks in Scheduler Module\nDESCRIPTION: This method retrieves scheduled tasks for a given block number. It returns a vector of Options containing scheduled task details.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.scheduler.agenda(u32): Vec<Option<PalletSchedulerScheduled>>\n```\n\n----------------------------------------\n\nTITLE: Querying Block Digest in System Pallet\nDESCRIPTION: API interface for querying the digest of the current block in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.digest\n```\n\n----------------------------------------\n\nTITLE: Querying Paras Storage in Polkadot.js API\nDESCRIPTION: Functions to query parachains storage, including actions queue, code management, parachain lifecycle, and upgrade scheduling. These manage the state and operations of registered parachains.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.actionsQueue(u32): Vec<u32>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.codeByHash(H256): Option<Bytes>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.codeByHashRefs(H256): u32\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.currentCodeHash(u32): Option<H256>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.futureCodeHash(u32): Option<H256>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.futureCodeUpgrades(u32): Option<u32>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.futureCodeUpgradesAt(): Vec<(u32,u32)>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.heads(u32): Option<Bytes>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.mostRecentContext(u32): Option<u32>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.parachains(): Vec<u32>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.paraLifecycles(u32): Option<PolkadotRuntimeParachainsParasParaLifecycle>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.pastCodeHash((u32,u32)): Option<H256>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.pastCodeMeta(u32): PolkadotRuntimeParachainsParasParaPastCodeMeta\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.pastCodePruning(): Vec<(u32,u32)>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.pvfActiveVoteList(): Vec<H256>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.pvfActiveVoteMap(H256): Option<PolkadotRuntimeParachainsParasPvfCheckActiveVoteState>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.upcomingParasGenesis(u32): Option<PolkadotRuntimeParachainsParasParaGenesisArgs>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.upcomingUpgrades(): Vec<(u32,u32)>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.upgradeCooldowns(): Vec<(u32,u32)>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.upgradeGoAheadSignal(u32): Option<PolkadotPrimitivesV8UpgradeGoAhead>\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Fees for XCM in Polkadot.js\nDESCRIPTION: Calculates delivery fees for sending a specific XCM message to a destination. Fees are returned in a chain-specific asset.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.xcmPaymentApi.queryDeliveryFees(destination: XcmVersionedLocation, message: XcmVersionedXcm): Result<XcmVersionedAssets, XcmRuntimeApisFeesError>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dispute Information in ParasDisputes Module\nDESCRIPTION: This method fetches the state of ongoing or concluded disputes for recent sessions. It returns an Option containing the dispute state for a given parachain and hash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.parasDisputes.disputes(u32, H256): Option<PolkadotPrimitivesV8DisputeState>\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Version Notify Targets\nDESCRIPTION: Retrieves target locations that are subscribed to our version changes, along with the most recent version we informed them of. Takes parameters for version and location.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.versionNotifyTargets(u32, XcmVersionedLocation)\n```\n\n----------------------------------------\n\nTITLE: Accessing NominationPools Events\nDESCRIPTION: Event interfaces for nomination pool operations including bonding, creation, destruction, and member management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.nominationPools.Bonded.is\napi.events.nominationPools.Created.is\napi.events.nominationPools.Destroyed.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Liquidity Pool Reserves in Rust\nDESCRIPTION: Gets the size of the liquidity pool for a given asset pair. This function is part of the assetConversionApi.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ngetReserves(asset1: StagingXcmV4Location, asset2: StagingXcmV4Location): Option<(u128,u128)>\n```\n\n----------------------------------------\n\nTITLE: Send XCM Message in XCM Pallet\nDESCRIPTION: Sends an XCM message to a specified destination. Takes a versioned location and a versioned XCM message as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_216\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.send(dest: `XcmVersionedLocation`, message: `XcmVersionedXcm`)\n```\n\n----------------------------------------\n\nTITLE: Managing Preimages\nDESCRIPTION: Methods for handling preimages on-chain, including noting, requesting, updating, and removing preimages. Essential for governance proposals and other on-chain data references.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.preimage.ensureUpdated(hashes)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.preimage.notePreimage(bytes)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.preimage.requestPreimage(hash)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.preimage.unnotePreimage(hash)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.preimage.unrequestPreimage(hash)\n```\n\n----------------------------------------\n\nTITLE: Querying Active Validator Indices in ParasShared Module\nDESCRIPTION: This method returns a vector of validator indices actively participating in parachain consensus. These indices refer to the broader validator set.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.parasShared.activeValidatorIndices(): Vec<u32>\n```\n\n----------------------------------------\n\nTITLE: Triggering Parachain Onboarding with triggerOnboard\nDESCRIPTION: Attempts to onboard a parachain that has a lease for the current lease period. Useful if a para should have onboarded but was unable to due to state issues. Origin must be signed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.slots.triggerOnboard(para)\n```\n\n----------------------------------------\n\nTITLE: Retrieving RPC Methods in Polkadot-js API\nDESCRIPTION: This method retrieves the list of RPC methods exposed by the node. It is accessed through the api.rpc.rpc.methods interface and corresponds to the rpc_methods JSON-RPC endpoint.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/rpc.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmethods(): RpcMethods\n```\n\n----------------------------------------\n\nTITLE: Converting XCM Location to Account ID\nDESCRIPTION: Converts an XCM Location to an AccountId32. This is useful for bridging between XCM location identifiers and native chain account identifiers.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.locationToAccountApi.convertLocation(location: XcmVersionedLocation): Result<AccountId32, XcmRuntimeApisConversionsError>\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Storage in Polkadot JS API (TypeScript)\nDESCRIPTION: This method queries historical storage entries by key, starting from a specified block. It requires appropriate flags to be active and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nqueryStorage(keys: `Vec<StorageKey>`, fromBlock: `Hash`, toBlock?: `BlockHash`): `Vec<StorageChangeSet>`\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Storage in Polkadot/Kusama\nDESCRIPTION: Storage methods for accessing auction-related data including counter, info, reserved amounts and winning bids.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.auctions.auctionCounter(): u32\napi.query.auctions.auctionInfo(): Option<(u32,u32)>\napi.query.auctions.reservedAmounts(AccountId32,u32): Option<u128>\napi.query.auctions.winning(u32): Option<[Option<(AccountId32,u32,u128)>;36]>\n```\n\n----------------------------------------\n\nTITLE: Checking Parachain Lifecycle Status\nDESCRIPTION: Gets the current lifecycle of a known Para ID. Returns the lifecycle enum indicating the current state of the parachain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.paraLifecycles(paraId)\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Account Pairs from Keyring\nDESCRIPTION: Shows how to retrieve specific account pairs using their addresses and check their locked status.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/loading.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naccounts.forEach(({ address }) => {\n  // retrieve via address or publicKey\n  const pair = getPair(address);\n\n  // display the locked account status\n  console.log(address, pair.isLocked);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying State in Polkadot-js API (TypeScript)\nDESCRIPTION: This snippet showcases various methods for querying the state in the Polkadot-js API. It includes functions for retrieving runtime versions, storage data, and subscribing to storage changes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/rpc.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.state.getRuntimeVersion(at?: BlockHash): RuntimeVersion\napi.rpc.state.getStorage(key: StorageKey, at?: BlockHash): StorageData\napi.rpc.state.getStorageHash(key: StorageKey, at?: BlockHash): Hash\napi.rpc.state.getStorageSize(key: StorageKey, at?: BlockHash): u64\napi.rpc.state.queryStorage(keys: Vec<StorageKey>, fromBlock: Hash, toBlock?: BlockHash): Vec<StorageChangeSet>\napi.rpc.state.queryStorageAt(keys: Vec<StorageKey>, at?: BlockHash): Vec<StorageChangeSet>\napi.rpc.state.subscribeRuntimeVersion(): RuntimeVersion\napi.rpc.state.subscribeStorage(keys?: Vec<StorageKey>): StorageChangeSet\napi.rpc.state.traceBlock(block: Hash, targets: Option<Text>, storageKeys: Option<Text>, methods: Option<Text>): TraceBlockResponse\napi.rpc.state.trieMigrationStatus(at?: BlockHash): MigrationStatusResult\n```\n\n----------------------------------------\n\nTITLE: XCM Pallet Events Interface\nDESCRIPTION: Cross-chain messaging events handling asset claims, traps, and query responses.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.xcmPallet.AssetsClaimed.is\napi.events.xcmPallet.AssetsTrapped.is\napi.events.xcmPallet.Attempted.is\n```\n\n----------------------------------------\n\nTITLE: Querying Extrinsic Data in System Pallet\nDESCRIPTION: API interface for querying extrinsics data for the current block in the System pallet, mapping an extrinsic's index to its data.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.extrinsicData\n```\n\n----------------------------------------\n\nTITLE: Accessing System Pallet Error Interfaces in Polkadot-js\nDESCRIPTION: Interface definitions for accessing error conditions from the System pallet, focusing on runtime versioning, origin filters, and system-level account management issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.system.CallFiltered.is\napi.errors.system.FailedToExtractRuntimeVersion.is\napi.errors.system.InvalidSpecName.is\napi.errors.system.MultiBlockMigrationsOngoing.is\napi.errors.system.NonDefaultComposite.is\napi.errors.system.NonZeroRefCount.is\napi.errors.system.NothingAuthorized.is\napi.errors.system.SpecVersionNeedsToIncrease.is\napi.errors.system.Unauthorized.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Asset Conversion Constants\nDESCRIPTION: Shows how to access constants from the assetConversion module using the Polkadot.js API. These constants define fees, limits and configuration for asset conversion operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/constants.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.assetConversion.liquidityWithdrawalFee\napi.consts.assetConversion.lpFee\napi.consts.assetConversion.maxSwapPathLength\napi.consts.assetConversion.mintMinLiquidity\napi.consts.assetConversion.palletId\napi.consts.assetConversion.poolSetupFee\napi.consts.assetConversion.poolSetupFeeAsset\n```\n\n----------------------------------------\n\nTITLE: Offchain Worker API in Polkadot-js\nDESCRIPTION: API for triggering offchain worker tasks. Provides a method to start the off-chain task for a given block header.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// Start off-chain task for given block header\nawait api.call.offchainWorkerApi.offchainWorker(header);\n```\n\n----------------------------------------\n\nTITLE: Querying Parent Hash in System Pallet\nDESCRIPTION: API interface for querying the hash of the previous block in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.parentHash\n```\n\n----------------------------------------\n\nTITLE: Querying Aura Consensus Storage in Polkadot JS API\nDESCRIPTION: Methods to access the aura consensus module storage, including the current authority set and block slot information.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\napi.query.aura.authorities()\n```\n\n----------------------------------------\n\nTITLE: Accessing Bounties Module Constants in Polkadot API\nDESCRIPTION: Examples of how to access constants from the bounties module using the Polkadot API. Includes deposit amounts, delays, and curator deposit calculations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bountyDepositBase = api.consts.bounties.bountyDepositBase;\nconst bountyDepositPayoutDelay = api.consts.bounties.bountyDepositPayoutDelay;\nconst bountyUpdatePeriod = api.consts.bounties.bountyUpdatePeriod;\nconst bountyValueMinimum = api.consts.bounties.bountyValueMinimum;\nconst curatorDepositMax = api.consts.bounties.curatorDepositMax;\nconst curatorDepositMin = api.consts.bounties.curatorDepositMin;\nconst curatorDepositMultiplier = api.consts.bounties.curatorDepositMultiplier;\nconst dataDepositPerByte = api.consts.bounties.dataDepositPerByte;\nconst maximumReasonLength = api.consts.bounties.maximumReasonLength;\n```\n\n----------------------------------------\n\nTITLE: Setting Claim Permission for Pool Member in Polkadot-js API\nDESCRIPTION: Allows a pool member to set claim permissions that control permissionless bonding and withdrawing. The origin must be a member of a pool and specifies the permission to apply.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.setClaimPermission(permission)\n```\n\n----------------------------------------\n\nTITLE: Querying Core Substrate Storage\nDESCRIPTION: Well-known storage keys that are always available to Substrate-based networks including runtime code and system configuration.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.substrate.changesTrieConfig(): u32\napi.query.substrate.code(): Bytes\napi.query.substrate.extrinsicIndex(): u32\napi.query.substrate.childStorageKeyPrefix(): u32\n```\n\n----------------------------------------\n\nTITLE: Crowdloan Transaction Methods\nDESCRIPTION: API methods for crowdloan operations including contribution, fund creation, dissolution and refunds. These methods enable parachain crowdfunding functionality.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.crowdloan.addMemo(index, memo)\napi.tx.crowdloan.contribute(index, value, signature)\napi.tx.crowdloan.contributeAll(index, signature)\napi.tx.crowdloan.create(index, cap, first_period, last_period, end, verifier)\napi.tx.crowdloan.dissolve(index)\napi.tx.crowdloan.edit(index, cap, first_period, last_period, end, verifier)\napi.tx.crowdloan.poke(index)\napi.tx.crowdloan.refund(index)\napi.tx.crowdloan.withdraw(who, index)\n```\n\n----------------------------------------\n\nTITLE: Accessing Balances Transfer Event in Polkadot.js API\nDESCRIPTION: This snippet shows how to check if an event is a balances transfer event using the Polkadot.js API. It demonstrates the interface for accessing the Transfer event from the balances module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.balances.Transfer.is\n```\n\n----------------------------------------\n\nTITLE: Registering Parachain Head Data and Validation Code in Polkadot-JS API\nDESCRIPTION: This function registers head data and validation code for a reserved Para Id. It requires a signed origin and takes the para ID, genesis head data, and initial validation code as parameters. A deposit is required to cover storage costs.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.registrar.register(id: u32, genesis_head: Bytes, validation_code: Bytes)\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Bonded in Polkadot.js API\nDESCRIPTION: Maps locked \"stash\" accounts to controller accounts. Takes an AccountId32 as input and returns an optional AccountId32.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.bonded\n```\n\n----------------------------------------\n\nTITLE: Querying Outbound XCMP Status in Polkadot.js API\nDESCRIPTION: Query method to fetch the non-empty XCMP channels with their message indices. Returns information about channels that have pending outbound messages, including first and last message indices and signal message presence.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmpQueue.outboundXcmpStatus()\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for a Pool in Polkadot-js API\nDESCRIPTION: Sets new metadata for a pool. The call must be signed by the bouncer or the root role of the pool.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.setMetadata(pool_id, metadata)\n```\n\n----------------------------------------\n\nTITLE: Event Interface Definition - Bounties Events\nDESCRIPTION: Interface definitions for bounty-related events including proposal, approval, claims and curator management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.bounties.BountyApproved.is\napi.events.bounties.BountyAwarded.is\napi.events.bounties.BountyClaimed.is\napi.events.bounties.BountyProposed.is\napi.events.bounties.CuratorAccepted.is\n```\n\n----------------------------------------\n\nTITLE: Forcing Parachain Registration in Polkadot-JS API\nDESCRIPTION: This function forces the registration of a Para Id on the relay chain. It must be called by a Root origin. Takes the registrar, deposit, para ID, genesis head, and validation code as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.registrar.forceRegister(who: AccountId32, deposit: u128, id: u32, genesis_head: Bytes, validation_code: Bytes)\n```\n\n----------------------------------------\n\nTITLE: Generating Key Ownership Proof in GRANDPA API in Rust\nDESCRIPTION: Generates a proof of key ownership for the given authority in the given set. Used for submitting equivocation reports.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\napi.call.grandpaApi.generateKeyOwnershipProof(set_id: u64, authority_id: SpConsensusGrandpaAppPublic): Option<Bytes>\n```\n\n----------------------------------------\n\nTITLE: Setting or Clearing Metadata for a Referendum in Polkadot-JS API\nDESCRIPTION: This function sets or clears metadata of a referendum. It requires a signed origin from a referendum creator or anyone for clearing metadata of a finished referendum. It takes the referendum index and an optional hash of an on-chain stored preimage as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.referenda.setMetadata(index: u32, maybe_hash: Option<H256>)\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Acceptable Payment Assets in Polkadot (TypeScript)\nDESCRIPTION: This function returns a list of acceptable payment assets for XCM transactions. It takes the XCM version as an argument.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.xcmPaymentApi.queryAcceptablePaymentAssets(xcm_version: u32): Result<Vec<XcmVersionedAssetId>, XcmRuntimeApisFeesError>\n```\n\n----------------------------------------\n\nTITLE: Accessing GRANDPA Error Interfaces in Polkadot.js API\nDESCRIPTION: This snippet shows how to access error interfaces for the GRANDPA module in the Polkadot.js API. It includes errors related to GRANDPA finality gadget operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.ChangePending.is\napi.errors.grandpa.DuplicateOffenceReport.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Staking Pallet Error Interfaces in Polkadot-js\nDESCRIPTION: Interface definitions for accessing error conditions from the Staking pallet, covering bonding issues, validator/nominator management, and various staking operation constraints.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.staking.AlreadyBonded.is\napi.errors.staking.AlreadyClaimed.is\napi.errors.staking.AlreadyPaired.is\napi.errors.staking.BadState.is\napi.errors.staking.BadTarget.is\napi.errors.staking.BoundNotMet.is\napi.errors.staking.CannotChillOther.is\napi.errors.staking.CannotRestoreLedger.is\napi.errors.staking.CommissionTooLow.is\napi.errors.staking.ControllerDeprecated.is\napi.errors.staking.DuplicateIndex.is\napi.errors.staking.EmptyTargets.is\napi.errors.staking.FundedTarget.is\napi.errors.staking.IncorrectHistoryDepth.is\napi.errors.staking.IncorrectSlashingSpans.is\napi.errors.staking.InsufficientBond.is\napi.errors.staking.InvalidEraToReward.is\napi.errors.staking.InvalidNumberOfNominations.is\napi.errors.staking.InvalidPage.is\napi.errors.staking.InvalidSlashIndex.is\napi.errors.staking.NoMoreChunks.is\napi.errors.staking.NotController.is\napi.errors.staking.NotEnoughFunds.is\napi.errors.staking.NotSortedAndUnique.is\napi.errors.staking.NotStash.is\napi.errors.staking.NoUnlockChunk.is\napi.errors.staking.RewardDestinationRestricted.is\napi.errors.staking.TooManyNominators.is\napi.errors.staking.TooManyTargets.is\napi.errors.staking.TooManyValidators.is\napi.errors.staking.VirtualStakerNotAllowed.is\n```\n\n----------------------------------------\n\nTITLE: Querying Session Key Owner in Polkadot.js API\nDESCRIPTION: Retrieves the owner of a session key. Takes a tuple of SpCoreCryptoKeyTypeId and Bytes as input, returns an optional AccountId32.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.session.keyOwner\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Name in Polkadot JS API (TypeScript)\nDESCRIPTION: This method retrieves the node name. It returns a Text value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nname(): `Text`\n```\n\n----------------------------------------\n\nTITLE: Message Queue Transaction Operations\nDESCRIPTION: API endpoints for executing overweight messages and managing message queue pages in Polkadot's message queue system.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.messageQueue.executeOverweight(message_origin, page, index, weight_limit)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.messageQueue.reapPage(message_origin, page_index)\n```\n\n----------------------------------------\n\nTITLE: Quoting Token Swap Prices in Rust\nDESCRIPTION: Provides price quotes for token swaps. These functions are part of the assetConversionApi and handle different swap scenarios.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nquotePriceExactTokensForTokens(asset1: StagingXcmV4Location, asset2: StagingXcmV4Location, amount: u128, include_fee: bool): Option<u128>\n```\n\nLANGUAGE: rust\nCODE:\n```\nquotePriceTokensForExactTokens(asset1: StagingXcmV4Location, asset2: StagingXcmV4Location, amount: u128, include_fee: bool): Option<u128>\n```\n\n----------------------------------------\n\nTITLE: Checking for ItemBought Event in Uniques Module\nDESCRIPTION: This code verifies if an event is an ItemBought event in the uniques module. It indicates that an NFT item has been purchased.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.uniques.ItemBought.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Balances Transfer Event in Polkadot.js API\nDESCRIPTION: Shows how to check if an event is a balances Transfer event using the Polkadot.js API. This event indicates that a transfer of funds has succeeded between two accounts.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.balances.Transfer.is\n```\n\n----------------------------------------\n\nTITLE: Querying Asset Rate Storage in Polkadot/Kusama\nDESCRIPTION: Storage method for retrieving the fixed point representation conversion rate between an asset and the native balance. Used to calculate native amounts from asset amounts.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.assetRate.conversionRateToNative(asset): Option<u128>\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Bonded Eras in Polkadot.js API\nDESCRIPTION: Retrieves a mapping of still-bonded eras to the first session index of that era. Returns a vector of tuples containing two u32 values.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.bondedEras\n```\n\n----------------------------------------\n\nTITLE: Querying XCMP Queue Suspension Status\nDESCRIPTION: Method to check if the XCMP queue is suspended from executing incoming XCMs. Returns a boolean value indicating suspension status.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmpQueue.queueSuspended()\n```\n\n----------------------------------------\n\nTITLE: Dry Run API Calls\nDESCRIPTION: API calls for dry running operations without actual execution, including call and XCM dry runs.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.dryRunApi.dryRunCall(origin: PolkadotRuntimeOriginCaller, call: PolkadotRuntimeRuntimeCall): Result<XcmRuntimeApisDryRunCallDryRunEffects, XcmRuntimeApisDryRunError>\napi.call.dryRunApi.dryRunXcm(origin_location: XcmVersionedLocation, xcm: XcmVersionedXcm): Result<XcmRuntimeApisDryRunXcmDryRunEffects, XcmRuntimeApisDryRunError>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Configs for Nomination Pools in Polkadot-js API\nDESCRIPTION: Updates global configurations for nomination pools. Must be called with the AdminOrigin. Controls minimum join and create bonds, maximum pools, members, members per pool, and global maximum commission.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.setConfigs(min_join_bond, min_create_bond, max_pools, max_members, max_members_per_pool, global_max_commission)\n```\n\n----------------------------------------\n\nTITLE: Querying Acceptable Payment Assets for XCM in Rust\nDESCRIPTION: This function returns a list of acceptable payment assets for cross-chain messaging (XCM). It takes an XCM version as input and returns a result containing either a vector of versioned asset IDs or an error.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nqueryAcceptablePaymentAssets(xcm_version: `u32`): `Result<Vec<XcmVersionedAssetId>, XcmRuntimeApisFeesError>`\n```\n\n----------------------------------------\n\nTITLE: Accessing Fast Unstake Error Interfaces in Polkadot.js API\nDESCRIPTION: This snippet shows how to access error interfaces for the fastUnstake module in the Polkadot.js API. It includes errors related to unstaking processes and account management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fastUnstake.AlreadyHead.is\napi.errors.fastUnstake.AlreadyQueued.is\napi.errors.fastUnstake.CallNotAllowed.is\n// ... other error interfaces\n```\n\n----------------------------------------\n\nTITLE: Accessing Referenda Constants in Polkadot-JS API\nDESCRIPTION: Retrieves constants for the referenda pallet, including alarm interval, maximum queued referenda, submission deposit, tracks, and undeciding timeout.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst alarmInterval = api.consts.referenda.alarmInterval;\nconst maxQueued = api.consts.referenda.maxQueued;\nconst submissionDeposit = api.consts.referenda.submissionDeposit;\nconst tracks = api.consts.referenda.tracks;\nconst undecidingTimeout = api.consts.referenda.undecidingTimeout;\n```\n\n----------------------------------------\n\nTITLE: Accessing Balances Module Constants in Polkadot API\nDESCRIPTION: Examples of how to access constants from the balances module using the Polkadot API. Includes existential deposit and limits for freezes, locks, and reserves.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst existentialDeposit = api.consts.balances.existentialDeposit;\nconst maxFreezes = api.consts.balances.maxFreezes;\nconst maxLocks = api.consts.balances.maxLocks;\nconst maxReserves = api.consts.balances.maxReserves;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bonded Pools in Nomination Pools for Polkadot.js\nDESCRIPTION: This method queries the storage for bonded pools in the nomination pools module. It takes a pool ID as a parameter and returns an option containing the bonded pool's inner details.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\napi.query.nominationPools.bondedPools(poolId)\n```\n\n----------------------------------------\n\nTITLE: Polkadot XCM Event Interface Definitions\nDESCRIPTION: Event interface definitions for the polkadotXcm module, including event types for query responses, notifications, and version changes\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.polkadotXcm.InvalidQuerierVersion.is\napi.events.polkadotXcm.InvalidResponder.is\napi.events.polkadotXcm.InvalidResponderVersion.is\napi.events.polkadotXcm.Notified.is\napi.events.polkadotXcm.NotifyDecodeFailed.is\napi.events.polkadotXcm.NotifyDispatchError.is\napi.events.polkadotXcm.NotifyOverweight.is\napi.events.polkadotXcm.NotifyTargetMigrationFail.is\napi.events.polkadotXcm.NotifyTargetSendFail.is\napi.events.polkadotXcm.ResponseReady.is\napi.events.polkadotXcm.ResponseTaken.is\napi.events.polkadotXcm.Sent.is\napi.events.polkadotXcm.SupportedVersionChanged.is\napi.events.polkadotXcm.UnexpectedResponse.is\napi.events.polkadotXcm.VersionChangeNotified.is\napi.events.polkadotXcm.VersionMigrationFinished.is\napi.events.polkadotXcm.VersionNotifyRequested.is\napi.events.polkadotXcm.VersionNotifyStarted.is\napi.events.polkadotXcm.VersionNotifyUnrequested.is\n```\n\n----------------------------------------\n\nTITLE: Nomination Pools API Interface Definitions\nDESCRIPTION: API definitions for managing nomination pools including balance conversion, member status checking, rewards calculation and pool management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nbalanceToPoints(pool_id: u32, new_funds: u128): u128\nmemberNeedsDelegateMigration(member: SpCoreCryptoAccountId32): bool\nmemberPendingSlash(member: SpCoreCryptoAccountId32): u128\nmemberTotalBalance(who: SpCoreCryptoAccountId32): u128\npendingRewards(who: SpCoreCryptoAccountId32): u128\npointsToBalance(pool_id: u32, points: u128): u128\npoolBalance(pool_id: u32): u128\npoolNeedsDelegateMigration(pool_id: u32): bool\npoolPendingSlash(pool_id: u32): u128\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Version Discovery Queue\nDESCRIPTION: Retrieves destinations whose latest XCM version we would like to know. This query returns a vector of tuples containing versioned locations and counters that track send attempts, which are used for prioritization.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.versionDiscoveryQueue()\n```\n\n----------------------------------------\n\nTITLE: Account Nonce API Call in Polkadot Runtime\nDESCRIPTION: Gets the current account nonce (transaction count) for a given account ID. Returns a 32-bit unsigned integer representing the nonce.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\naccountNonce(account: SpCoreCryptoAccountId32): u32\n```\n\n----------------------------------------\n\nTITLE: Polkadot Referenda Events\nDESCRIPTION: Event interfaces for the referenda module including confirmation, deposit, decision, and metadata events.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.referenda.ConfirmAborted.is\napi.events.referenda.Confirmed.is\napi.events.referenda.ConfirmStarted.is\napi.events.referenda.DecisionDepositPlaced.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vesting Information in TypeScript\nDESCRIPTION: Fetches information regarding the vesting of a given account. Requires an AccountId32 parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.vesting.vesting(accountId: AccountId32)\n```\n\n----------------------------------------\n\nTITLE: Using Recovery Methods in Polkadot-js API\nDESCRIPTION: The recovery pallet methods provide functionality for account recovery through social recovery mechanisms. These methods allow setting up recovery configurations, vouching for recovery attempts, and managing recovery processes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.recovery.asRecovered(account, call)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.recovery.cancelRecovered(account)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.recovery.claimRecovery(account)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.recovery.closeRecovery(rescuer)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.recovery.createRecovery(friends, threshold, delay_period)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.recovery.initiateRecovery(account)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.recovery.removeRecovery()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.recovery.setRecovered(lost, rescuer)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.recovery.vouchRecovery(lost, rescuer)\n```\n\n----------------------------------------\n\nTITLE: Getting GRANDPA Authorities in GRANDPA API in Rust\nDESCRIPTION: Returns the current GRANDPA authorities and weights. This should not change except when changes are scheduled and the corresponding delay has passed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\napi.call.grandpaApi.grandpaAuthorities(): Vec<(SpConsensusGrandpaAppPublic,u64)>\n```\n\n----------------------------------------\n\nTITLE: Chilling a Nomination Pool\nDESCRIPTION: Stops the pool from nominating. Can be called by pool nominator, pool root, or permissionlessly under certain conditions such as when the pool depositor has less than MinNominatorBond staked.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.chill(pool_id)\n```\n\n----------------------------------------\n\nTITLE: Submitting a Referendum on Privileged Action in Polkadot-JS API\nDESCRIPTION: This function proposes a referendum on a privileged action. It requires a SubmitOrigin with available SubmissionDeposit funds. It takes the proposal origin, proposal, and enactment moment as parameters. Emits a Submitted event.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.referenda.submit(proposal_origin: StagingKusamaRuntimeOriginCaller, proposal: FrameSupportPreimagesBounded, enactment_moment: FrameSupportScheduleDispatchTime)\n```\n\n----------------------------------------\n\nTITLE: Querying Grandpa API Endpoints\nDESCRIPTION: API query interfaces for the Grandpa module including setIdSession, stalled, and state endpoints.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.grandpa.setIdSession(u64): Option<u32>\napi.query.grandpa.stalled(): Option<(u32,u32)>\napi.query.grandpa.state(): PalletGrandpaStoredState\n```\n\n----------------------------------------\n\nTITLE: Accessing BABE Module Constants in Polkadot API\nDESCRIPTION: Examples of how to access constants from the BABE (Blind Assignment for Blockchain Extension) module using the Polkadot API. Includes epoch duration, block time, and authority limits.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst epochDuration = api.consts.babe.epochDuration;\nconst expectedBlockTime = api.consts.babe.expectedBlockTime;\nconst maxAuthorities = api.consts.babe.maxAuthorities;\nconst maxNominators = api.consts.babe.maxNominators;\n```\n\n----------------------------------------\n\nTITLE: Accessing Aura Constants in Polkadot.js\nDESCRIPTION: Shows how to access the slot duration constant from the Aura consensus module via the Polkadot.js API. This constant defines the duration Aura should run with, expressed in milliseconds.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.aura.slotDuration\n```\n\n----------------------------------------\n\nTITLE: Querying Voter List Module in Polkadot-js API\nDESCRIPTION: Interface patterns for accessing voter list information organized in bags-list data structure through the Polkadot-js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.voterList.counterForListNodes()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.voterList.listBags(bagUpperThreshold)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.voterList.listNodes(accountId)\n```\n\n----------------------------------------\n\nTITLE: Scheduler Module Error Interfaces\nDESCRIPTION: Error interfaces for the scheduler module handling scheduled calls and timing validation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.scheduler.FailedToSchedule.is\napi.errors.scheduler.Named.is\napi.errors.scheduler.NotFound.is\napi.errors.scheduler.RescheduleNoChange.is\n```\n\n----------------------------------------\n\nTITLE: Performing State Calls in Polkadot.js API\nDESCRIPTION: Performs a call to a builtin on the chain. This method is part of the state module and is accessed via api.rpc.state.call.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncall(method: Text, data: Bytes, at?: BlockHash): Bytes\n```\n\n----------------------------------------\n\nTITLE: Querying Account Nonce in Polkadot-js Runtime\nDESCRIPTION: Method to get the current account nonce of a given AccountId. This is typically used to determine the next valid transaction nonce.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.accountNonceApi.accountNonce(account: SpCoreCryptoAccountId32): u32\n```\n\n----------------------------------------\n\nTITLE: Querying Node Network Information\nDESCRIPTION: RPC methods for retrieving network-related information including listen addresses, peer IDs, and network state\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.system.localListenAddresses(): Vec<Text>\napi.rpc.system.localPeerId(): Text\napi.rpc.system.networkState(): NetworkState\n```\n\n----------------------------------------\n\nTITLE: Retrieving MMR Root Hash in Polkadot.js API\nDESCRIPTION: Gets the MMR root hash for the current best block. It optionally takes a block hash as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.mmr.root(at?: BlockHash): MmrHash\n```\n\n----------------------------------------\n\nTITLE: Querying Event Topics in System Pallet\nDESCRIPTION: API interface for querying the mapping between a topic and indexes of events in the System pallet. Allows light-clients to leverage changes trie storage tracking.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.eventTopics\n```\n\n----------------------------------------\n\nTITLE: Querying Fellowship Referenda Information in Polkadot.js\nDESCRIPTION: This function retrieves information about a specific referendum given its index. It returns an optional PalletReferendaReferendumInfoRankedCollectiveTally object containing referendum details.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.fellowshipReferenda.referendumInfoFor(u32): Option<PalletReferendaReferendumInfoRankedCollectiveTally>\n```\n\n----------------------------------------\n\nTITLE: Querying Timestamp Update Status\nDESCRIPTION: API interface for querying whether the timestamp has been updated in the current block. Updated to true upon successful submission of a timestamp by a node.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.timestamp.didUpdate\n```\n\n----------------------------------------\n\nTITLE: Accessing Preimage Module Error: NotNoted\nDESCRIPTION: Defines the interface for checking if an error is of type 'NotNoted' in the preimage module. This error occurs when a preimage cannot be removed since it has not yet been noted.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.preimage.NotNoted.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parachain Dispute Information\nDESCRIPTION: Gets information about all ongoing or concluded disputes for the last several sessions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.parasDisputes.disputes([paraId, disputeHash])\n```\n\n----------------------------------------\n\nTITLE: Removing Approved Treasury Proposal\nDESCRIPTION: Forces a previously approved treasury proposal to be removed from the approval queue. The original deposit will not be returned. Must be called with RejectOrigin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_183\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.treasury.removeApproval(proposal_id)\n```\n\n----------------------------------------\n\nTITLE: Querying AssetConversion Next Pool Asset ID in Rust\nDESCRIPTION: Retrieves the PoolAssetId that will be used for the next LP token. This value is incremented whenever a new LP pool is created.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\napi.query.assetConversion.nextPoolAssetId()\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Restore Ledger\nDESCRIPTION: Restores the state of a ledger that is in an inconsistent state. Allows overwriting ledger data and metadata if the stash meets specific criteria.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_157\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.restoreLedger(stash, maybe_controller, maybe_total, maybe_unlocking)\n```\n\n----------------------------------------\n\nTITLE: Transferring Funds with Account Preservation in NIS Counterpart Balances\nDESCRIPTION: Same as transfer_allow_death, but checks that the transfer will not kill the origin account. Ensures the sender's account remains alive after the transfer.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nisCounterpartBalances.transferKeepAlive(dest, value)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Future Code Hash for Parachain\nDESCRIPTION: Gets the actual future code hash of a para. The corresponding code can be retrieved with CodeByHash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.futureCodeHash(paraId)\n```\n\n----------------------------------------\n\nTITLE: Interacting with Mixnet API in Polkadot-js\nDESCRIPTION: Interface for managing mixnodes in the network. Provides methods to query current and previous mixnode sets, register new mixnodes, and check session status information.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// Get current mixnode set\nconst currentMixnodes = await api.call.mixnetApi.currentMixnodes();\n\n// Try to register a mixnode for the next session\nconst registered = await api.call.mixnetApi.maybeRegister(sessionIndex, mixnode);\n\n// Get previous mixnode set\nconst prevMixnodes = await api.call.mixnetApi.prevMixnodes();\n\n// Get session status information\nconst status = await api.call.mixnetApi.sessionStatus();\n```\n\n----------------------------------------\n\nTITLE: Anonymously Scheduling a Task in Polkadot-JS API\nDESCRIPTION: This function anonymously schedules a task. It takes the execution block number, optional periodicity, priority, and the call to be executed as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.scheduler.schedule(when: u32, maybe_periodic: Option<(u32,u32)>, priority: u8, call: Call)\n```\n\n----------------------------------------\n\nTITLE: Querying Inherents Applied Status in System Pallet\nDESCRIPTION: API interface for querying whether all inherents have been applied in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.inherentsApplied\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chain Type in Polkadot JS API (TypeScript)\nDESCRIPTION: This method retrieves the chain type. It returns a ChainType object.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nchainType(): `ChainType`\n```\n\n----------------------------------------\n\nTITLE: Querying Last Runtime Upgrade in System Pallet\nDESCRIPTION: API interface for querying information about the last runtime upgrade, storing spec_version and spec_name in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.lastRuntimeUpgrade\n```\n\n----------------------------------------\n\nTITLE: Querying Multisig Operations in Polkadot.js\nDESCRIPTION: This method retrieves the set of open multisig operations. It takes an account ID and a 32-byte array as parameters and returns an option containing multisig details.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\napi.query.multisig.multisigs(accountId, bytes32)\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balances for Fungible Assets in Rust\nDESCRIPTION: Function to query all fungible asset balances for a given account. This is part of the fungiblesApi.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nqueryAccountBalances(account: SpCoreCryptoAccountId32): Result<XcmVersionedAssets, AssetsCommonRuntimeApiFungiblesAccessError>\n```\n\n----------------------------------------\n\nTITLE: Accessing NIS Error Interfaces in Polkadot.js API\nDESCRIPTION: This snippet shows how to access error interfaces for the nis (Named Item Scheduling) module in Polkadot.js API. It covers errors related to receipts, bids, durations, and other NIS-specific operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.nis.AlreadyCommunal.is\napi.errors.nis.AlreadyFunded.is\napi.errors.nis.AlreadyPrivate.is\n// ... (and more error interfaces)\n```\n\n----------------------------------------\n\nTITLE: BABE Consensus API Calls in Polkadot Runtime\nDESCRIPTION: Provides access to BABE consensus-related functionality including epoch information, configuration, and equivocation reporting.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconfiguration(): SpConsensusBabeBabeConfiguration;\n\ncurrentEpoch(): SpConsensusBabeEpoch;\n\ncurrentEpochStart(): SpConsensusSlotsSlot;\n\ngenerateKeyOwnershipProof(slot: SpConsensusSlotsSlot, authority_id: SpConsensusBabeAppPublic): Option<Bytes>;\n\nnextEpoch(): SpConsensusBabeEpoch;\n\nsubmitReportEquivocationUnsignedExtrinsic(equivocation_proof: SpConsensusSlotsEquivocationProof, key_owner_proof: SpConsensusBabeOpaqueKeyOwnershipProof): Option<Null>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nomination Pool\nDESCRIPTION: Creates a new delegation pool with specified initial amount and role assignments. The creator transfers both the amount and existential deposit, so they need at least amount + existential_deposit transferable.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.create(amount, root, nominator, bouncer)\n```\n\n----------------------------------------\n\nTITLE: Querying Fellowship Collective Members in Polkadot.js\nDESCRIPTION: This function retrieves information about a member of the fellowship collective given their AccountId32. It returns an optional PalletRankedCollectiveMemberRecord object.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.fellowshipCollective.members(AccountId32): Option<PalletRankedCollectiveMemberRecord>\n```\n\n----------------------------------------\n\nTITLE: Querying Treasury Approvals\nDESCRIPTION: API interface for querying proposal indices that have been approved but not yet awarded in the Treasury pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.approvals\n```\n\n----------------------------------------\n\nTITLE: Accessing RankedCollective Module Error: AlreadyMember\nDESCRIPTION: Defines the interface for checking if an error is of type 'AlreadyMember' in the rankedCollective module. This error occurs when an account is already a member.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.rankedCollective.AlreadyMember.is\n```\n\n----------------------------------------\n\nTITLE: Force XCM Version Setting in XCM Pallet\nDESCRIPTION: Sets the XCM version that a particular destination supports. Must be called by an origin specified by AdminOrigin. Takes a location parameter and the XCM version it supports.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_212\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.forceXcmVersion(location: `StagingXcmV4Location`, version: `u32`)\n```\n\n----------------------------------------\n\nTITLE: Chain RPC Method Definitions\nDESCRIPTION: Defines methods for retrieving block and chain information from a node.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"getBlock\": {\n    \"interface\": \"api.rpc.chain.getBlock\",\n    \"jsonrpc\": \"chain_getBlock\",\n    \"params\": [\"hash?: BlockHash\"],\n    \"returns\": \"SignedBlock\"\n  },\n  \"getBlockHash\": {\n    \"interface\": \"api.rpc.chain.getBlockHash\",\n    \"jsonrpc\": \"chain_getBlockHash\",\n    \"params\": [\"blockNumber?: BlockNumber\"],\n    \"returns\": \"BlockHash\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Price Quotation for Exact Output Swap\nDESCRIPTION: Provides a price quote for swapping tokens to receive an exact amount of other tokens. Returns the input amount needed, which may change by execution time, requiring slippage control.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.assetConversionApi.quotePriceTokensForExactTokens(asset1: StagingXcmV4Location, asset2: StagingXcmV4Location, amount: u128, include_fee: bool): Option<u128>\n```\n\n----------------------------------------\n\nTITLE: Creating Vested Transfer in Polkadot.js API\nDESCRIPTION: This code snippet demonstrates how to create a vested transfer using the Polkadot.js API. It requires a signed origin and takes the target account and vesting schedule as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_198\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.vesting.vestedTransfer(target: MultiAddress, schedule: PalletVestingVestingInfo)\n```\n\n----------------------------------------\n\nTITLE: Querying Uniques Asset Details in TypeScript\nDESCRIPTION: Retrieves the details of an item in existence and its ownership details. Requires collection and item IDs as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.uniques.asset(collectionId: u32, itemId: u32)\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Unbonded Funds for a Member in Polkadot-js API\nDESCRIPTION: Withdraws unbonded funds from a member account. Can be called permissionlessly under certain conditions. If the target is the depositor, the pool will be destroyed. Any pending slashes are applied before withdrawal.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.withdrawUnbonded(member_account, num_slashing_spans)\n```\n\n----------------------------------------\n\nTITLE: Generating MMR Proof in Polkadot.js API\nDESCRIPTION: Generates an MMR proof for given block numbers. It takes block numbers, an optional best known block number, and an optional block hash as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.mmr.generateProof(blockNumbers: Vec<u64>, bestKnownBlockNumber?: u64, at?: BlockHash): MmrLeafBatchProof\n```\n\n----------------------------------------\n\nTITLE: Accessing Assets Constants in Polkadot.js\nDESCRIPTION: Demonstrates how to access constants from the assets module via the Polkadot.js API. These constants relate to deposits required for asset operations, metadata management, and limits on various asset actions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.assets.approvalDeposit\napi.consts.assets.assetAccountDeposit\napi.consts.assets.assetDeposit\napi.consts.assets.metadataDepositBase\napi.consts.assets.metadataDepositPerByte\napi.consts.assets.removeItemsLimit\napi.consts.assets.stringLimit\n```\n\n----------------------------------------\n\nTITLE: HRMP Channel Management Queries\nDESCRIPTION: Extensive API endpoints for managing HRMP (Horizontal Relay-routed Message Passing) channels and messages.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.hrmp.hrmpChannels\napi.query.hrmp.hrmpChannelContents\napi.query.hrmp.hrmpChannelDigests\napi.query.hrmp.hrmpOpenChannelRequests\napi.query.hrmp.hrmpCloseChannelRequests\n```\n\n----------------------------------------\n\nTITLE: Querying DMP (Downward Message Passing) Storage\nDESCRIPTION: Storage interfaces for downward message passing including delivery fees, queue heads and message queues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.dmp.deliveryFeeFactor(u32): u128\napi.query.dmp.downwardMessageQueueHeads(u32): H256\napi.query.dmp.downwardMessageQueues(u32): Vec<PolkadotCorePrimitivesInboundDownwardMessage>\n```\n\n----------------------------------------\n\nTITLE: Setting Commission Change Rate for a Pool in Polkadot-js API\nDESCRIPTION: Sets the commission change rate for a pool. The initial change rate has no bounds, but subsequent updates can only be more restrictive than the current rate.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.setCommissionChangeRate(pool_id, change_rate)\n```\n\n----------------------------------------\n\nTITLE: Querying Block Hash by Number in System Pallet\nDESCRIPTION: API interface for querying the block hash for a given block number in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.blockHash\n```\n\n----------------------------------------\n\nTITLE: Accessing Auction Module Constants in Polkadot.js API\nDESCRIPTION: Examples of accessing constants from the auctions module using the Polkadot.js API. Includes constants for auction duration, lease periods, and sampling.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Ending period for auctions\nconst endingPeriod = api.consts.auctions.endingPeriod;\n\n// Number of lease periods per slot\nconst leasePeriodsPerSlot = api.consts.auctions.leasePeriodsPerSlot;\n\n// Length of each sample during ending period\nconst sampleLength = api.consts.auctions.sampleLength;\n\n// Number of slot ranges\nconst slotRangeCount = api.consts.auctions.slotRangeCount;\n```\n\n----------------------------------------\n\nTITLE: Dispatching Function Call with Specified Weight in Polkadot.js API\nDESCRIPTION: This code snippet demonstrates how to dispatch a function call with a specified weight using the Polkadot.js API. It requires root origin and takes the call and weight as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_192\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.utility.withWeight(call: Call, weight: SpWeightsWeightV2Weight)\n```\n\n----------------------------------------\n\nTITLE: Converting Weight to Asset Fee for XCM in Rust\nDESCRIPTION: Converts a weight into a fee for a specified AssetId in the context of XCM operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\nqueryWeightToAssetFee(weight: `SpWeightsWeightV2Weight`, asset: `XcmVersionedAssetId`): `Result<u128, XcmRuntimeApisFeesError>`\n```\n\n----------------------------------------\n\nTITLE: Accessing RankedPolls Module Error: BadReferendum\nDESCRIPTION: Defines the interface for checking if an error is of type 'BadReferendum' in the rankedPolls module. This error occurs when the referendum index provided is invalid in the given context.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.rankedPolls.BadReferendum.is\n```\n\n----------------------------------------\n\nTITLE: Setting Parachain's Current Head in Polkadot-JS API\nDESCRIPTION: This function sets the parachain's current head. It can be called by Root, the parachain, or the parachain manager if the parachain is unlocked. Takes the para ID and new head data as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.registrar.setCurrentHead(para: u32, new_head: Bytes)\n```\n\n----------------------------------------\n\nTITLE: Accessing BEEFY Module Constants in Polkadot API\nDESCRIPTION: Examples of how to access constants from the BEEFY (Bridge Efficiency Enabling Finality Yielder) module using the Polkadot API. Includes limits for authorities and nominators.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst maxAuthorities = api.consts.beefy.maxAuthorities;\nconst maxNominators = api.consts.beefy.maxNominators;\nconst maxSetIdSessionEntries = api.consts.beefy.maxSetIdSessionEntries;\n```\n\n----------------------------------------\n\nTITLE: Judging Suspended Society Member with judgeSuspendedMember\nDESCRIPTION: Allows the suspension judgement origin to make judgement on a suspended member. If forgiven, they are added back as a member. If rejected, all associated storage items including payouts are removed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_128\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.judgeSuspendedMember(who, forgive)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage Keys in Polkadot-js API\nDESCRIPTION: This method retrieves keys with a certain prefix. It is deprecated and users are advised to use api.rpc.state.getKeysPaged instead. It is accessed through the api.rpc.state.getKeys interface and corresponds to the state_getKeys JSON-RPC endpoint.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/rpc.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetKeys(key: StorageKey, at?: BlockHash): Vec<StorageKey>\n```\n\n----------------------------------------\n\nTITLE: Querying Nomination Pools Storage in Polkadot.js API\nDESCRIPTION: Functions to query nomination pools storage including sub-pools and total value locked. These provide information about unbonding pools and the total funds across all pools.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.nominationPools.subPoolsStorage(u32): Option<PalletNominationPoolsSubPools>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.nominationPools.totalValueLocked(): u128\n```\n\n----------------------------------------\n\nTITLE: Reordering Voter List in Polkadot.js API\nDESCRIPTION: This code snippet shows how to move the caller's ID in front of another account in the voter list using the Polkadot.js API. It requires a signed origin and takes the account to be moved in front of as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_199\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.voterList.putInFrontOf(lighter: MultiAddress)\n```\n\n----------------------------------------\n\nTITLE: Checking for NewSession Event in Session Module\nDESCRIPTION: This code checks if an event is a NewSession event in the session module. It indicates that a new session has started, with the argument being the session index.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.session.NewSession.is\n```\n\n----------------------------------------\n\nTITLE: Configuring WebAssembly Heap Pages in System Module\nDESCRIPTION: Sets the number of pages in the WebAssembly environment's heap. This configuration affects the memory available to the runtime execution environment.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_178\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.system.setHeapPages(pages)\n```\n\n----------------------------------------\n\nTITLE: Interacting with Offchain Storage in Polkadot.js API\nDESCRIPTION: This snippet shows the offchain storage-related methods available in the Polkadot.js API for managing local storage in the offchain worker context.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.offchain.localStorageClear(kind: StorageKind, key: Bytes): Null\napi.rpc.offchain.localStorageGet(kind: StorageKind, key: Bytes): Option<Bytes>\napi.rpc.offchain.localStorageSet(kind: StorageKind, key: Bytes, value: Bytes): Null\n```\n\n----------------------------------------\n\nTITLE: Querying Para Inclusion Storage in Polkadot.js API\nDESCRIPTION: Function to query parachain inclusion storage, specifically for candidates pending availability. This manages the chain of pending parachain blocks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paraInclusion.v1(u32): Option<Vec<PolkadotRuntimeParachainsInclusionCandidatePendingAvailability>>\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases for Multiple Balance Definitions in JavaScript\nDESCRIPTION: Shows how to handle scenarios where the same type name (Balance) is defined differently in multiple pallets. Uses typesAlias to specify pallet-specific type definitions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.extend.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    typesAlias: {\n        \"assets\": {\n          \"Balance\": \"u64\"\n         }\n        },\n    types: {\n        \"AssetDetails\": {\n            \"supply\": \"Balance\"\n        }\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Staking Storage Interfaces\nDESCRIPTION: Storage interfaces for staking module to handle validator sets, eras, exposures and reward points.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.activeEra\napi.query.staking.bonded\napi.query.staking.bondedEras\napi.query.staking.canceledSlashPayout\napi.query.staking.chillThreshold\n```\n\n----------------------------------------\n\nTITLE: Querying U32 RefCount Upgrade Status in System Pallet\nDESCRIPTION: API interface for querying whether the system has upgraded to use u32 for RefCount.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.upgradedToU32RefCount\n```\n\n----------------------------------------\n\nTITLE: Voting on Society Candidate with vote\nDESCRIPTION: Allows a member to vote on a candidate. The origin must be Signed and a member. Parameters include the candidate address and a boolean indicating approval or rejection.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_136\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.vote(candidate, approve)\n```\n\n----------------------------------------\n\nTITLE: Checking Balances Module Errors in Rust\nDESCRIPTION: Example of how to check for the 'InsufficientBalance' error in the balances module using the Polkadot.js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\napi.errors.balances.InsufficientBalance.is\n```\n\n----------------------------------------\n\nTITLE: Crowdloan Events Interface Definitions\nDESCRIPTION: Event interfaces for crowdloan operations including contributions, withdrawals, and fund management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.crowdloan.AddedToNewRaise.is\napi.events.crowdloan.AllRefunded.is\napi.events.crowdloan.Contributed.is\napi.events.crowdloan.Created.is\napi.events.crowdloan.Dissolved.is\napi.events.crowdloan.Edited.is\napi.events.crowdloan.HandleBidResult.is\napi.events.crowdloan.MemoUpdated.is\napi.events.crowdloan.PartiallyRefunded.is\napi.events.crowdloan.Withdrew.is\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Commission for a Pool in Polkadot-js API\nDESCRIPTION: Sets the maximum commission of a pool. The initial max can be any Perbill value, but subsequent changes can only lower it. If current commission exceeds the new max, it will be automatically lowered.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.setCommissionMax(pool_id, max_commission)\n```\n\n----------------------------------------\n\nTITLE: Getting Genesis Preset Names in Genesis Builder API in Rust\nDESCRIPTION: Returns a list of identifiers for available built-in RuntimeGenesisConfig presets.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\napi.call.genesisBuilder.presetNames(): Vec<Text>\n```\n\n----------------------------------------\n\nTITLE: Listing All Upcoming Code Upgrades\nDESCRIPTION: Gets a list of upcoming future code upgrades that will be applied regardless of parachain progress. Returns pairs of parachain IDs and expected block numbers, ordered ascending by block number.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.futureCodeUpgradesAt()\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Funds to Pool Bond\nDESCRIPTION: Bonds additional funds from the origin into the pool they already belong to. Funds can come from free balance or accumulated rewards and triggers automatic payout of pending rewards.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.bondExtra(extra)\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Constants in Polkadot-JS API\nDESCRIPTION: Constants for the system pallet, including block-related limits and weights.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst blockHashCount = api.consts.system.blockHashCount;\nconst blockLength = api.consts.system.blockLength;\nconst blockWeights = api.consts.system.blockWeights;\nconst dbWeight = api.consts.system.dbWeight;\nconst ss58Prefix = api.consts.system.ss58Prefix;\nconst version = api.consts.system.version;\n```\n\n----------------------------------------\n\nTITLE: Voting on Society Defender with defenderVote\nDESCRIPTION: Allows a member to vote on the defender. The dispatch origin must be Signed and a member. The 'approve' parameter indicates whether to approve or reject the defender.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_124\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.defenderVote(approve)\n```\n\n----------------------------------------\n\nTITLE: Generating Sync Spec in Polkadot-js API\nDESCRIPTION: This method returns the JSON-serialized chainspec running the node, with a sync state. It takes a boolean parameter to determine if the output should be raw. It is accessed through the api.rpc.syncstate.genSyncSpec interface and corresponds to the sync_state_genSyncSpec JSON-RPC endpoint.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/rpc.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngenSyncSpec(raw: bool): Json\n```\n\n----------------------------------------\n\nTITLE: Querying XcmpQueue Module Storage in Polkadot.js\nDESCRIPTION: Examples of querying XCMP queue related storage items using Polkadot.js API. Includes interfaces for delivery fee factor, suspended inbound channels, and outbound messages.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmpQueue.deliveryFeeFactor(id)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmpQueue.inboundXcmpSuspended()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmpQueue.outboundXcmpMessages(para, index)\n```\n\n----------------------------------------\n\nTITLE: Decoding Session Keys in Polkadot (TypeScript)\nDESCRIPTION: This function decodes the given public session keys and returns a list of public raw public keys and their corresponding key types.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.sessionKeys.decodeSessionKeys(encoded: Bytes): Option<Vec<(Bytes,SpCoreCryptoKeyTypeId)>>\n```\n\n----------------------------------------\n\nTITLE: Using Referenda Methods in Polkadot-js API\nDESCRIPTION: The referenda pallet provides methods for on-chain governance through referendums. These methods allow canceling referendums, advancing their state, and managing deposits required for the referendum process.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.referenda.cancel(index)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.referenda.kill(index)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.referenda.nudgeReferendum(index)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.referenda.oneFewerDeciding(track)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.referenda.placeDecisionDeposit(index)\n```\n\n----------------------------------------\n\nTITLE: Querying Treasury Spend Count\nDESCRIPTION: API interface for querying the count of spends that have been made in the Treasury pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.spendCount\n```\n\n----------------------------------------\n\nTITLE: Stateless Verification of MMR Proof in Polkadot.js API\nDESCRIPTION: Verifies an MMR proof statelessly given an MMR root. It takes an MmrHash and an MmrLeafBatchProof as parameters and returns a boolean indicating the verification result.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.mmr.verifyProofStateless(root: MmrHash, proof: MmrLeafBatchProof): bool\n```\n\n----------------------------------------\n\nTITLE: Accessing Election Provider Multi-Phase Error Interfaces in Polkadot.js API\nDESCRIPTION: This snippet shows how to access error interfaces for the electionProviderMultiPhase module in the Polkadot.js API. It includes errors related to election submissions, snapshots, and OCW calls.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.BoundNotMet.is\napi.errors.electionProviderMultiPhase.CallNotAllowed.is\napi.errors.electionProviderMultiPhase.FallbackFailed.is\n// ... other error interfaces\n```\n\n----------------------------------------\n\nTITLE: Child Bounty Operations\nDESCRIPTION: Functions for managing child bounties that are nested under parent bounties. Includes creation and curator acceptance functionality.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.childBounties.addChildBounty(parent_bounty_id: Compact<u32>, value: Compact<u128>, description: Bytes)\napi.tx.childBounties.acceptCurator(parent_bounty_id: Compact<u32>, child_bounty_id: Compact<u32>)\n```\n\n----------------------------------------\n\nTITLE: Querying Current Migration in XCM Pallet\nDESCRIPTION: API interface for querying the current migration's stage in the XCM pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.currentMigration\n```\n\n----------------------------------------\n\nTITLE: Accessing Web3-related Functions in Polkadot.js\nDESCRIPTION: This snippet demonstrates Web3-related RPC methods available in the Polkadot.js API, including getting the client version and computing SHA3 hashes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.web3.clientVersion(): Text\napi.rpc.web3.sha3(data: Bytes): H256\n```\n\n----------------------------------------\n\nTITLE: Querying Collator Selection Module Storage in Polkadot JS API\nDESCRIPTION: Methods to access collator selection information, including candidate list, bond amounts, invulnerables, and last authored blocks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\napi.query.collatorSelection.candidateList()\n```\n\n----------------------------------------\n\nTITLE: Accessing Transaction Payment Pallet Constants in Polkadot.js API\nDESCRIPTION: Constants for the Transaction Payment pallet, including the operational fee multiplier.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst operationalFeeMultiplier = api.consts.transactionPayment.operationalFeeMultiplier;\n```\n\n----------------------------------------\n\nTITLE: Unbonding Funds from a Pool in Polkadot-js API\nDESCRIPTION: Unbonds specified points from a member's account in the pool. This implicitly collects rewards one last time. Can be called permissionlessly under certain conditions such as when a pool is blocked or destroying.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.unbond(member_account, unbonding_points)\n```\n\n----------------------------------------\n\nTITLE: Querying Runtime Version\nDESCRIPTION: Returns the version information of the current runtime. This includes spec name, spec version, and other version-related metadata.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.core.version(): SpVersionRuntimeVersion\n```\n\n----------------------------------------\n\nTITLE: Checking Message Queue Processed Event in Polkadot.js API\nDESCRIPTION: This snippet illustrates how to check if an event is a Processed event from the messageQueue module using the Polkadot.js API. It shows the interface for accessing events related to message processing.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.messageQueue.Processed.is\n```\n\n----------------------------------------\n\nTITLE: Adjusting Pool Deposit in Nomination Pools\nDESCRIPTION: Tops up the deficit or withdraws excess existential deposit from a pool. Helps maintain the correct deposit amount in the pool's reward account when existential deposit requirements change.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.adjustPoolDeposit(pool_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot UI Keyring Standalone\nDESCRIPTION: Installation command for using UI keyring independently without the API. Requires installing the base keyring package as an additional dependency.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/install.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @polkadot/keyring @polkadot/ui-keyring\n```\n\n----------------------------------------\n\nTITLE: Fetching Availability Cores in ParaScheduler Module\nDESCRIPTION: This query returns a vector of occupied cores for parachain scheduling. It provides information about core assignments and is bounded by the number of parachains or validator count.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paraScheduler.availabilityCores(): Vec<PolkadotRuntimeParachainsSchedulerPalletCoreOccupied>\n```\n\n----------------------------------------\n\nTITLE: Querying Election Provider Multi-Phase Storage\nDESCRIPTION: Storage interfaces for election provider functionality including phases, targets, scores, submissions and snapshots.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.electionProviderMultiPhase.currentPhase(): PalletElectionProviderMultiPhasePhase\napi.query.electionProviderMultiPhase.desiredTargets(): Option<u32>\napi.query.electionProviderMultiPhase.minimumUntrustedScore(): Option<SpNposElectionsElectionScore>\n```\n\n----------------------------------------\n\nTITLE: Accessing Balances Module Constants\nDESCRIPTION: Shows how to access constants related to balance operations like minimum deposits and maximum locks/freezes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/constants.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.balances.existentialDeposit\napi.consts.balances.maxFreezes\napi.consts.balances.maxLocks\napi.consts.balances.maxReserves\n```\n\n----------------------------------------\n\nTITLE: Demoting Fellowship Member\nDESCRIPTION: Decrements the rank of an existing member by one. If the member is already at rank zero, they are removed entirely. Must be called by the DemoteOrigin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipCollective.demoteMember(who)\n```\n\n----------------------------------------\n\nTITLE: Performing Builtin Call in Polkadot.js API\nDESCRIPTION: Performs a call to a builtin on the chain. It takes a method name, data, and an optional block hash as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.state.call(method: Text, data: Bytes, at?: BlockHash): Bytes\n```\n\n----------------------------------------\n\nTITLE: Checking XCM Execution Suspension Status\nDESCRIPTION: Queries the global suspension state of the XCM executor. Returns a boolean indicating whether XCM execution is currently suspended.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.xcmExecutionSuspended()\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Info in Polkadot.js\nDESCRIPTION: Retrieves dispatch information for a given transaction.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.transactionPaymentApi.queryInfo(uxt: SpRuntimeUncheckedExtrinsic, len: u32): PalletTransactionPaymentRuntimeDispatchInfo\n```\n\n----------------------------------------\n\nTITLE: Retrieving XCMP Signal Messages\nDESCRIPTION: Method to retrieve signal messages waiting to be sent. Takes a u32 parameter and returns message data as Bytes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmpQueue.signalMessages(u32)\n```\n\n----------------------------------------\n\nTITLE: Accessing Foreign Assets Created Event in Polkadot.js API\nDESCRIPTION: This code shows how to verify if an event is a Created event from the foreignAssets module using the Polkadot.js API. It demonstrates the interface for accessing events related to foreign asset creation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.foreignAssets.Created.is\n```\n\n----------------------------------------\n\nTITLE: Claiming Society Membership with claimMembership\nDESCRIPTION: Transforms an approved candidate into a member. Callable only by the candidate and only after the voting period has ended.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_121\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.claimMembership()\n```\n\n----------------------------------------\n\nTITLE: Accessing MessageQueue Constants in Polkadot.js\nDESCRIPTION: Demonstrates how to access constants from the messageQueue module via the Polkadot.js API. These constants define message processing parameters like heap size, service weights, and stale page handling.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.messageQueue.heapSize\napi.consts.messageQueue.idleMaxServiceWeight\napi.consts.messageQueue.maxStale\napi.consts.messageQueue.serviceWeight\n```\n\n----------------------------------------\n\nTITLE: Accessing Multisig Executed Event in Polkadot.js API\nDESCRIPTION: Demonstrates how to check if an event is a MultisigExecuted event using the Polkadot.js API. This event indicates that a multisig operation has been executed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.multisig.MultisigExecuted.is\n```\n\n----------------------------------------\n\nTITLE: Querying Next Fee Multiplier in Transaction Payment\nDESCRIPTION: API interface for querying the next fee multiplier in the Transaction Payment pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.transactionPayment.nextFeeMultiplier\n```\n\n----------------------------------------\n\nTITLE: Querying Ongoing Queries in XCM Pallet\nDESCRIPTION: API interface for querying the ongoing queries in the XCM pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.queries\n```\n\n----------------------------------------\n\nTITLE: Starting Off-chain Worker for Block Header in Polkadot.js\nDESCRIPTION: Initiates the off-chain task for a given block header.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.offchainWorkerApi.offchainWorker(header: SpRuntimeHeader): Null\n```\n\n----------------------------------------\n\nTITLE: Setting XCM Executor Suspension in Polkadot.js API\nDESCRIPTION: This code snippet demonstrates how to set or unset the global suspension state of the XCM executor using the Polkadot.js API. It requires an admin origin and takes a boolean parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_210\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.forceSuspension(suspended: bool)\n```\n\n----------------------------------------\n\nTITLE: Merging Vesting Schedules in Polkadot.js API\nDESCRIPTION: This code snippet shows how to merge two vesting schedules using the Polkadot.js API. It takes the indices of the two schedules to be merged as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_195\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.vesting.mergeSchedules(schedule1_index: u32, schedule2_index: u32)\n```\n\n----------------------------------------\n\nTITLE: Querying Weight to Fee Conversion in Rust\nDESCRIPTION: Converts a given weight to a fee amount.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nqueryWeightToFee(weight: `SpWeightsWeightV2Weight`): `u128`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Availability Cores Data\nDESCRIPTION: Gets information about availability cores with one entry for each core. The i'th parachain belongs to the i'th core, with remaining cores being on-demand parachain multiplexers.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paraScheduler.availabilityCores()\n```\n\n----------------------------------------\n\nTITLE: Querying Asset Account Information in Rust\nDESCRIPTION: Retrieves the holdings of a specific account for a specific asset. It takes the asset ID and account ID as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\napi.query.assets.account(assetId, accountId)\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Message Delivery Fees\nDESCRIPTION: This method calculates the delivery fees required for sending a specific XCM message to a destination. The fees are returned in a specific asset defined by the chain. It requires the message content (for size-based fee calculation) and the destination address.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nqueryDeliveryFees(destination: `XcmVersionedLocation`, message: `XcmVersionedXcm`): `Result<XcmVersionedAssets, XcmRuntimeApisFeesError>`\n```\n\n----------------------------------------\n\nTITLE: Accessing Assets Module Constants\nDESCRIPTION: Demonstrates accessing constants from the assets module that define deposit requirements and limits for asset operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/constants.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.assets.approvalDeposit\napi.consts.assets.assetAccountDeposit\napi.consts.assets.assetDeposit\napi.consts.assets.metadataDepositBase\napi.consts.assets.metadataDepositPerByte\napi.consts.assets.removeItemsLimit\napi.consts.assets.stringLimit\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Account Index in Polkadot JS API (TypeScript)\nDESCRIPTION: This method retrieves the next available accountIndex on the node for a given AccountId.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\naccountNextIndex(accountId: `AccountId`): `Index`\n```\n\n----------------------------------------\n\nTITLE: Salary Module Error Interfaces\nDESCRIPTION: Interface definitions for salary-related errors in the Polkadot.js API, including payment status, membership, and timing errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.salary.Inconclusive.is\napi.errors.salary.NoClaim.is\napi.errors.salary.NotCurrent.is\napi.errors.salary.NotInducted.is\napi.errors.salary.NotMember.is\napi.errors.salary.NotStarted.is\napi.errors.salary.NotYet.is\napi.errors.salary.PayError.is\napi.errors.salary.TooEarly.is\napi.errors.salary.TooLate.is\n```\n\n----------------------------------------\n\nTITLE: Querying Offences Storage in Polkadot.js API\nDESCRIPTION: Functions to query offences storage, including concurrent reports index and detailed offence reports. These provide information about validator misbehavior reports.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.offences.concurrentReportsIndex([u8;16], Bytes): Vec<H256>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.offences.reports(H256): Option<SpStakingOffenceOffenceDetails>\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Payment Module in Polkadot-js API\nDESCRIPTION: Interface patterns for accessing transaction payment information such as fee multipliers and storage version through the Polkadot-js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.transactionPayment.nextFeeMultiplier()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.transactionPayment.storageVersion()\n```\n\n----------------------------------------\n\nTITLE: Accessing Democracy Error Interfaces in Polkadot.js API\nDESCRIPTION: This snippet demonstrates how to access error interfaces for the democracy module in the Polkadot.js API. It includes various error types related to voting, proposals, and delegation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.democracy.AlreadyCanceled.is\napi.errors.democracy.AlreadyDelegating.is\napi.errors.democracy.AlreadyVetoed.is\n// ... other error interfaces\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Account Holdings in Polkadot.js API\nDESCRIPTION: Retrieves the NFT items held by a given account. Takes AccountId32 and two u32 parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.nfts.account(account: AccountId32, collectionId: u32, itemId: u32): Option<Null>\n```\n\n----------------------------------------\n\nTITLE: Making On-Chain Remark with Event Emission\nDESCRIPTION: Creates an on-chain remark and emits an event. This extends the basic remark functionality by including an event notification when the remark is processed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_175\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.system.remarkWithEvent(remark)\n```\n\n----------------------------------------\n\nTITLE: Executing Forced Vested Transfer in Polkadot.js API\nDESCRIPTION: This code snippet demonstrates how to force a vested transfer using the Polkadot.js API. It requires root origin and takes the source account, target account, and vesting schedule as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_194\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.vesting.forceVestedTransfer(source: MultiAddress, target: MultiAddress, schedule: PalletVestingVestingInfo)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Block in Runtime Core\nDESCRIPTION: Initializes a block with the given header and returns the runtime executive mode. This is called at the beginning of block execution or building.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.core.initializeBlock(header: SpRuntimeHeader): SpRuntimeExtrinsicInclusionMode\n```\n\n----------------------------------------\n\nTITLE: Querying Locked Fungibles in XCM Pallet\nDESCRIPTION: API interface for querying fungible assets that are known to be locked on this chain in the XCM pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.lockedFungibles\n```\n\n----------------------------------------\n\nTITLE: Retrieving MMR Root Hash in Polkadot.js\nDESCRIPTION: This method fetches the latest MMR (Merkle Mountain Range) Root hash. It returns a 32-byte hash value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\napi.query.mmr.rootHash()\n```\n\n----------------------------------------\n\nTITLE: Adding Manager Lock for Parachain in Polkadot-JS API\nDESCRIPTION: This function adds a manager lock for a parachain, preventing deregistration or swapping. It can be called by Root, the parachain, or the parachain manager if the parachain is unlocked. Takes the para ID as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.registrar.addLock(para: u32)\n```\n\n----------------------------------------\n\nTITLE: Accessing System CallFiltered Error in TypeScript\nDESCRIPTION: Interface for checking if an error is a CallFiltered error in the System module. This error indicates that the origin filter prevented the call from being dispatched.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.system.CallFiltered.is\n```\n\n----------------------------------------\n\nTITLE: Forcing Parachain Lease with forceLease\nDESCRIPTION: A way for Root to force a lease to happen independently of any other on-chain mechanism. The dispatch origin must match T::ForceOrigin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.slots.forceLease(para, leaser, amount, period_begin, period_count)\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Era Total Stake in Polkadot.js API\nDESCRIPTION: Retrieves the total amount staked for the last HistoryDepth eras. Takes a u32 as input and returns a u128.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.erasTotalStake\n```\n\n----------------------------------------\n\nTITLE: Forcing New Era Indefinitely in Polkadot.js\nDESCRIPTION: This function forces new eras indefinitely at the end of each session. It requires root origin and should be used with caution due to potential conflicts with ongoing election processes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_147\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.forceNewEraAlways()\n```\n\n----------------------------------------\n\nTITLE: Querying Weight to Fee Conversion in Polkadot.js\nDESCRIPTION: Converts transaction weight to fee amount.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.transactionPaymentApi.queryWeightToFee(weight: SpWeightsWeightV2Weight): u128\n```\n\n----------------------------------------\n\nTITLE: Querying Call Fee Details in Polkadot.js\nDESCRIPTION: Retrieves fee details for a given encoded Call.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.transactionPaymentCallApi.queryCallFeeDetails(call: AssetHubPolkadotRuntimeRuntimeCall, len: u32): PalletTransactionPaymentFeeDetails\n```\n\n----------------------------------------\n\nTITLE: Block Builder API Methods\nDESCRIPTION: Methods for building and checking blocks including inherent validation, block finalization, and extrinsic generation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncheckInherents(block: SpRuntimeBlock, data: SpInherentsInherentData): SpInherentsCheckInherentsResult\nfinalizeBlock(): SpRuntimeHeader\ninherentExtrinsics(inherent: SpInherentsInherentData): Vec<Bytes>\n```\n\n----------------------------------------\n\nTITLE: Conviction Voting Error Interfaces\nDESCRIPTION: Error interfaces for the conviction voting system, handling delegation, voting permissions, and poll participation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.convictionVoting.AlreadyDelegating.is\napi.errors.convictionVoting.AlreadyVoting.is\napi.errors.convictionVoting.BadClass.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Polkadot.js API Constants\nDESCRIPTION: This snippet demonstrates how to access various constants using the Polkadot.js API. It covers different modules and their respective constants, showing the interface pattern used to retrieve the values.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/constants.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// NFTs module constants\nconst features = api.consts.nfts.features;\nconst itemAttributesApprovalsLimit = api.consts.nfts.itemAttributesApprovalsLimit;\nconst itemDeposit = api.consts.nfts.itemDeposit;\n\n// ParachainSystem module constant\nconst selfParaId = api.consts.parachainSystem.selfParaId;\n\n// PoolAssets module constants\nconst approvalDeposit = api.consts.poolAssets.approvalDeposit;\nconst assetAccountDeposit = api.consts.poolAssets.assetAccountDeposit;\n\n// System module constants\nconst blockHashCount = api.consts.system.blockHashCount;\nconst ss58Prefix = api.consts.system.ss58Prefix;\n\n// Timestamp module constant\nconst minimumPeriod = api.consts.timestamp.minimumPeriod;\n\n// TransactionPayment module constant\nconst operationalFeeMultiplier = api.consts.transactionPayment.operationalFeeMultiplier;\n\n// XcmpQueue module constant\nconst maxActiveOutboundChannels = api.consts.xcmpQueue.maxActiveOutboundChannels;\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Era Page Count in Polkadot (TypeScript)\nDESCRIPTION: This function returns the page count of exposures for a validator account in a given era.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.stakingApi.erasStakersPageCount(era: u32, account: SpCoreCryptoAccountId32): u32\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator Groups\nDESCRIPTION: Gets all validator groups, one for each core. Indices are into ActiveValidators - the subset of Polkadot validators used for parachains during the current session.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paraScheduler.validatorGroups()\n```\n\n----------------------------------------\n\nTITLE: Querying Call Fee Details in Rust\nDESCRIPTION: This function queries fee details of a given encoded Call. It provides information about the transaction fees associated with a specific runtime call.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nqueryCallFeeDetails(call: `PolkadotRuntimeRuntimeCall`, len: `u32`): `PalletTransactionPaymentFeeDetails`\n```\n\n----------------------------------------\n\nTITLE: Fetching Referendum Information in Referenda Module\nDESCRIPTION: This method retrieves information about a specific referendum by its index. It returns an Option containing detailed referendum information.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.referenda.referendumInfoFor(u32): Option<PalletReferendaReferendumInfo>\n```\n\n----------------------------------------\n\nTITLE: Checking for NFT Attribute Set Event in Polkadot.js API\nDESCRIPTION: Shows how to verify if an event is an AttributeSet event for NFTs using the Polkadot.js API. This event is triggered when new attribute metadata has been set for a collection or item.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.nfts.AttributeSet.is\n```\n\n----------------------------------------\n\nTITLE: Querying Fast Unstake Storage\nDESCRIPTION: Storage interfaces for fast unstaking functionality including queue counters, era checks, and unstake requests.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.fastUnstake.counterForQueue(): u32\napi.query.fastUnstake.erasToCheckPerBlock(): u32\napi.query.fastUnstake.head(): Option<PalletFastUnstakeUnstakeRequest>\napi.query.fastUnstake.queue(AccountId32): Option<u128>\n```\n\n----------------------------------------\n\nTITLE: Finalizing Block in Block Building\nDESCRIPTION: Completes the current block building process and returns the finalized block header. This is called at the end of the block building process.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.blockBuilder.finalizeBlock(): SpRuntimeHeader\n```\n\n----------------------------------------\n\nTITLE: Collecting Collation Information\nDESCRIPTION: Collects information about a collation for a parachain block. Takes the header of the built block as input and returns collation information needed by the relay chain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.collectCollationInfo.collectCollationInfo(header: SpRuntimeHeader): CumulusPrimitivesCoreCollationInfo\n```\n\n----------------------------------------\n\nTITLE: Retrieving Past Code Hash\nDESCRIPTION: Gets the actual past code hash, indicated by the para id as well as the block number at which it became outdated. The corresponding code can be retrieved with CodeByHash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.pastCodeHash([paraId, blockNumber])\n```\n\n----------------------------------------\n\nTITLE: BABE Extrinsic Methods\nDESCRIPTION: Methods for managing BABE consensus including epoch configuration changes and equivocation reporting. Supports both signed and unsigned equivocation reports.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.babe.planConfigChange(config)\napi.tx.babe.reportEquivocation(equivocation_proof, key_owner_proof)\napi.tx.babe.reportEquivocationUnsigned(equivocation_proof, key_owner_proof)\n```\n\n----------------------------------------\n\nTITLE: Bestowing Society Membership with bestowMembership\nDESCRIPTION: Transforms an approved candidate into a member. Callable only by the Signed origin of the Founder, only after the voting period and only when the candidate is not clearly rejected.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.bestowMembership(candidate)\n```\n\n----------------------------------------\n\nTITLE: Querying Voter List Counter for List Nodes\nDESCRIPTION: API interface for querying the counter for the related counted storage map in the Voter List pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.voterList.counterForListNodes\n```\n\n----------------------------------------\n\nTITLE: Fetching Unapplied Slashes in ParasSlashing Module\nDESCRIPTION: This query retrieves pending dispute slashes for validators. It returns an Option containing the pending slashes for a given parachain and hash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.parasSlashing.unappliedSlashes(u32, H256): Option<PolkadotPrimitivesV8SlashingPendingSlashes>\n```\n\n----------------------------------------\n\nTITLE: Querying DMP Queue Heads in Polkadot.js\nDESCRIPTION: This function retrieves the downward message queue MQC head for a specific parachain. It takes a u32 parameter (likely the para ID) and returns an H256 hash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.dmp.downwardMessageQueueHeads(u32): H256\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Referendum\nDESCRIPTION: Sets or clears metadata for a referendum. Must be signed by a creator of the referendum, or can be called by anyone to clear metadata of a finished referendum.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipReferenda.setMetadata(index, maybe_hash)\n```\n\n----------------------------------------\n\nTITLE: Accessing Whitelist Pallet Error Interfaces in Polkadot-js\nDESCRIPTION: Interface definitions for accessing error conditions from the Whitelist pallet, handling cases where calls are already whitelisted or not whitelisted as required.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.whitelist.CallAlreadyWhitelisted.is\napi.errors.whitelist.CallIsNotWhitelisted.is\n```\n\n----------------------------------------\n\nTITLE: Session Module Error Interfaces\nDESCRIPTION: Error interfaces for the session module handling key management and validator associations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.session.DuplicatedKey.is\napi.errors.session.InvalidProof.is\napi.errors.session.NoAccount.is\napi.errors.session.NoAssociatedValidatorId.is\n```\n\n----------------------------------------\n\nTITLE: Calling Contract in Contracts API in Rust\nDESCRIPTION: Performs a call from a specified account to a given contract. Returns gas consumption, storage deposit, debug message, result, and events.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\napi.call.contractsApi.call(origin: SpCoreCryptoAccountId32, dest: SpCoreCryptoAccountId32, value: u128, gas_limit: Option<SpWeightsWeightV2Weight>, storage_deposit_limit: Option<u128>, input_data: Bytes): {\"gasConsumed\":\"SpWeightsWeightV2Weight\",\"gasRequired\":\"SpWeightsWeightV2Weight\",\"storageDeposit\":\"PalletContractsPrimitivesStorageDeposit\",\"debugMessage\":\"Bytes\",\"result\":\"Result<PalletContractsPrimitivesExecReturnValue, SpRuntimeDispatchError>\",\"events\":\"Option<Vec<FrameSystemEventRecord>>\"}\n```\n\n----------------------------------------\n\nTITLE: Querying Authority Discovery Storage in Polkadot/Kusama\nDESCRIPTION: Storage methods for accessing the current and next authority set keys used in authority discovery.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.authorityDiscovery.keys(): Vec<SpAuthorityDiscoveryAppPublic>\napi.query.authorityDiscovery.nextKeys(): Vec<SpAuthorityDiscoveryAppPublic>\n```\n\n----------------------------------------\n\nTITLE: Accessing TransferredApproved Event in Polkadot.js API\nDESCRIPTION: This snippet shows how to check if an event is a TransferredApproved event from the poolAssets module. It includes parameters for asset ID, owner, delegate, destination, and amount.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.poolAssets.TransferredApproved.is\n```\n\n----------------------------------------\n\nTITLE: Querying Query Counter in XCM Pallet\nDESCRIPTION: API interface for querying the latest available query index in the XCM pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.queryCounter\n```\n\n----------------------------------------\n\nTITLE: Accessing Staking Constants in Polkadot-JS API\nDESCRIPTION: Constants for the staking pallet, including bonding duration, history depth, and various limits.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst bondingDuration = api.consts.staking.bondingDuration;\nconst historyDepth = api.consts.staking.historyDepth;\nconst maxExposurePageSize = api.consts.staking.maxExposurePageSize;\nconst maxUnlockingChunks = api.consts.staking.maxUnlockingChunks;\nconst sessionsPerEra = api.consts.staking.sessionsPerEra;\nconst slashDeferDuration = api.consts.staking.slashDeferDuration;\n```\n\n----------------------------------------\n\nTITLE: Accessing Preimage Request Status in Preimage Module\nDESCRIPTION: This method fetches the request status for a given preimage hash. It returns an Option containing the current status of the preimage request.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.preimage.requestStatusFor(H256): Option<PalletPreimageRequestStatus>\n```\n\n----------------------------------------\n\nTITLE: Query Society Storage Interfaces\nDESCRIPTION: Collection of storage interfaces for managing society module including bids, candidates, votes and member records.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.society.bids\napi.query.society.candidates\napi.query.society.challengeRoundCount\napi.query.society.defenderVotes\napi.query.society.defending\napi.query.society.founder\napi.query.society.head\n```\n\n----------------------------------------\n\nTITLE: Dispatching Whitelisted Call in Polkadot.js API\nDESCRIPTION: This code snippet demonstrates how to dispatch a whitelisted call using the Polkadot.js API. It takes the call hash, encoded length, and weight witness as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_202\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.whitelist.dispatchWhitelistedCall(call_hash: H256, call_encoded_len: u32, call_weight_witness: SpWeightsWeightV2Weight)\n```\n\n----------------------------------------\n\nTITLE: Parachain System Event Interfaces\nDESCRIPTION: Event interfaces for parachain system operations including message processing and validation function management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.parachainSystem.DownwardMessagesProcessed.is\napi.events.parachainSystem.UpwardMessageSent.is\n// ... and other parachain system interfaces\n```\n\n----------------------------------------\n\nTITLE: Checking Planned Code Upgrade Block for Parachain\nDESCRIPTION: Retrieves the block number at which a planned code change is expected for a parachain. The change will be applied after the first parablock for this ID is included in a relay chain block with a number >= expected_at.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.futureCodeUpgrades(paraId)\n```\n\n----------------------------------------\n\nTITLE: Increasing Validator Count in Polkadot.js\nDESCRIPTION: This function increments the ideal number of validators up to the maximum allowed. It requires root origin and takes the additional number of validators as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_150\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.increaseValidatorCount(additional: Compact<u32>)\n```\n\n----------------------------------------\n\nTITLE: Querying Account Asset Balances\nDESCRIPTION: Retrieves all assets that an account holds with their respective balances. Returns a list of assets in a versioned format.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.fungiblesApi.queryAccountBalances(account: SpCoreCryptoAccountId32): Result<XcmVersionedAssets, AssetsCommonRuntimeApiFungiblesAccessError>\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Unbonded Funds for a Pool in Polkadot-js API\nDESCRIPTION: Calls withdraw_unbonded for a pool's account to clear unlocking chunks. This can be called by any account and is useful when there are too many unlocking chunks preventing further unbonding operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.poolWithdrawUnbonded(pool_id, num_slashing_spans)\n```\n\n----------------------------------------\n\nTITLE: Querying Session Current Index in Polkadot.js API\nDESCRIPTION: Retrieves the current index of the session. Returns a u32 value representing the session index.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.session.currentIndex\n```\n\n----------------------------------------\n\nTITLE: Checking for CollatorSelection CandidateAdded Event in Polkadot.js API\nDESCRIPTION: Demonstrates how to verify if an event is a collatorSelection CandidateAdded event using the Polkadot.js API. This event signifies that a new candidate has joined the collator selection process.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.collatorSelection.CandidateAdded.is\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Society Challenge Votes with cleanupChallenge\nDESCRIPTION: Removes up to 'max' stale votes for the defender in the given challenge round. May be called by any Signed origin, but only after the challenge round is ended.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_123\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.cleanupChallenge(challenge_round, max)\n```\n\n----------------------------------------\n\nTITLE: Accessing Recovery Module Error: AlreadyProxy\nDESCRIPTION: Defines the interface for checking if an error is of type 'AlreadyProxy' in the recovery module. This error occurs when an account is already set up for recovery.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.recovery.AlreadyProxy.is\n```\n\n----------------------------------------\n\nTITLE: Querying Election Provider Multi-Phase Current Phase in Polkadot.js\nDESCRIPTION: This function retrieves the current phase of the election provider multi-phase process. It returns a PalletElectionProviderMultiPhasePhase enum value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.electionProviderMultiPhase.currentPhase(): PalletElectionProviderMultiPhasePhase\n```\n\n----------------------------------------\n\nTITLE: Querying Call Info in Polkadot.js\nDESCRIPTION: Retrieves dispatch class, weight, and fee information for a given encoded Call.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.transactionPaymentCallApi.queryCallInfo(call: AssetHubPolkadotRuntimeRuntimeCall, len: u32): PalletTransactionPaymentRuntimeDispatchInfo\n```\n\n----------------------------------------\n\nTITLE: Executing Call as Derivative in Utility Module\nDESCRIPTION: Sends a call through an indexed pseudonym of the sender. Origin filters are passed along, and the call will be dispatched with an origin using the same filter as this call's origin. Dispatch origin must be Signed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_187\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.utility.asDerivative(index, call)\n```\n\n----------------------------------------\n\nTITLE: Resetting Log Filter in Polkadot JS API (TypeScript)\nDESCRIPTION: This method resets the log filter to Substrate defaults. It requires appropriate flags to be active and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nresetLogFilter(): `Null`\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance in Rust\nDESCRIPTION: Retrieves the balance of an account. This is an example of storing the balance in the Balances pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\napi.query.balances.account(accountId)\n```\n\n----------------------------------------\n\nTITLE: Recovery Module Error Interfaces\nDESCRIPTION: Error interfaces for the recovery module handling active recovery attempts, thresholds, and validation checks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.recovery.StillActive.is\napi.errors.recovery.Threshold.is\napi.errors.recovery.ZeroThreshold.is\n```\n\n----------------------------------------\n\nTITLE: Working with Raw Mini-Secrets in Substrate\nDESCRIPTION: Demonstrates how to work with raw mini-secrets instead of mnemonics, including generating new mnemonics, converting mnemonics to mini-secrets, and applying derivation paths to random seeds.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/suri.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// imports we are using here\nimport { u8aToHex } from '@polkadot/util';\nimport { mnemonicGenerate, mnemonicToMiniSecret, randomAsHex } from '@polkadot/util-crypto';\n\n// generate a mnemonic & some mini-secrets\nconst mnemonic = mnemonicGenerate();\nconst mnemonicMini = mnemonicToMiniSecret(mnemonic);\nconst randomMini = randomAsHex(32);\n\n// these will be equivalent\nconsole.log(keyring.createFromUri(mnemonic).address);\nconsole.log(keyring.createFromUri(u8aToHex(mnemonicMini)).address);\n\n// a random seed with derivation applied\nconsole.log(keyring.createFromUri(`${randomMini}//hard`).address);\n```\n\n----------------------------------------\n\nTITLE: Accessing Treasury Constants in Polkadot-JS API\nDESCRIPTION: Constants for the treasury pallet, including burn rate, approval limits, and spending periods.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst burn = api.consts.treasury.burn;\nconst maxApprovals = api.consts.treasury.maxApprovals;\nconst palletId = api.consts.treasury.palletId;\nconst payoutPeriod = api.consts.treasury.payoutPeriod;\nconst spendPeriod = api.consts.treasury.spendPeriod;\n```\n\n----------------------------------------\n\nTITLE: Calculating XCM Execution Weight\nDESCRIPTION: Function to determine the computational weight needed to execute a given XCM message. Takes a versioned XCM message parameter and returns the required weight for execution.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nqueryXcmWeight(message: `XcmVersionedXcm`): `Result<SpWeightsWeightV2Weight, XcmRuntimeApisFeesError>`\n```\n\n----------------------------------------\n\nTITLE: Generating Inherent Extrinsics in Block Builder API in Rust\nDESCRIPTION: Generates inherent extrinsics. The inherent data will vary from chain to chain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\napi.call.blockBuilder.inherentExtrinsics(inherent: SpInherentsInherentData): Vec<Bytes>\n```\n\n----------------------------------------\n\nTITLE: Querying Session Queued Keys in Polkadot.js API\nDESCRIPTION: Retrieves the queued keys for the next session. Returns a vector of tuples containing AccountId32 and PolkadotRuntimeSessionKeys.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.session.queuedKeys\n```\n\n----------------------------------------\n\nTITLE: Handling Parachain Disputes\nDESCRIPTION: Forces unfreezing of a parachain that was frozen due to disputes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.parasDisputes.forceUnfreeze()\n```\n\n----------------------------------------\n\nTITLE: Unlocking Vested Funds in Polkadot.js API\nDESCRIPTION: This code snippet demonstrates how to unlock vested funds for the sender account using the Polkadot.js API. It requires a signed origin and does not take any parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_196\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.vesting.vest()\n```\n\n----------------------------------------\n\nTITLE: Accessing MessageQueue Module Errors in Polkadot.js API\nDESCRIPTION: Interface references for accessing error conditions related to the message queue in Polkadot.js API. These errors handle validation and state checks for message processing, queue management, and reaping operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.messageQueue.AlreadyProcessed.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.messageQueue.InsufficientWeight.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.messageQueue.NoMessage.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.messageQueue.NoPage.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.messageQueue.NotReapable.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.messageQueue.Queued.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.messageQueue.QueuePaused.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.messageQueue.RecursiveDisallowed.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.messageQueue.TemporarilyUnprocessable.is\n```\n\n----------------------------------------\n\nTITLE: Unvouching Society Bid with unvouch\nDESCRIPTION: As a vouching member, unvouch a bid. This only works while the vouched user is only a bidder (not a candidate). The origin must be Signed and a vouching member.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_135\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.unvouch()\n```\n\n----------------------------------------\n\nTITLE: Generating Session Keys in Polkadot.js\nDESCRIPTION: Generates a set of session keys, optionally using the given seed. The keys are stored in the runtime's keystore. Returns concatenated SCALE encoded public keys.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.sessionKeys.generateSessionKeys(seed: Option<Bytes>): Bytes\n```\n\n----------------------------------------\n\nTITLE: Asset Conversion API Reserve Querying\nDESCRIPTION: Method to get the size of the liquidity pool for a given asset pair in the Asset Conversion API. Returns a tuple of reserve amounts if the pool exists.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.assetConversionApi.getReserves(asset1: StagingXcmV4Location, asset2: StagingXcmV4Location): Option<(u128,u128)>\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Fee Details in Polkadot.js\nDESCRIPTION: Retrieves fee details for a given transaction.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.transactionPaymentApi.queryFeeDetails(uxt: SpRuntimeUncheckedExtrinsic, len: u32): PalletTransactionPaymentFeeDetails\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Storage Items in System Module\nDESCRIPTION: Updates multiple storage items at once by providing an array of key-value pairs. This allows efficient batch modification of storage state.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_179\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.system.setStorage(items)\n```\n\n----------------------------------------\n\nTITLE: Querying Remote Locked Fungibles in XCM Pallet\nDESCRIPTION: API interface for querying fungible assets that are known to be locked on a remote chain in the XCM pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.remoteLockedFungibles\n```\n\n----------------------------------------\n\nTITLE: Accessing NIS Module Errors in Polkadot.js API\nDESCRIPTION: Interface references for accessing error conditions related to the NIS (Non-Interactive Staking) module in Polkadot.js API. These errors handle validation for bidding, receipt management, and thawing operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.AlreadyCommunal.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.AlreadyFunded.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.AlreadyPrivate.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.AmountTooSmall.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.BidTooLow.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.DurationTooBig.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.DurationTooSmall.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.MakesDust.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.NotExpired.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.NotOwner.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.PortionTooBig.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.Throttled.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.Unfunded.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.UnknownBid.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nis.UnknownReceipt.is\n```\n\n----------------------------------------\n\nTITLE: Importing Keyring in Node.js Environment\nDESCRIPTION: Demonstrates how to import the Keyring module using Node.js CommonJS require syntax instead of ES2015 import syntax, since the package only exports CommonJS modules.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/intro.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import\nconst { Keyring } = require('@polkadot/keyring');\n...\n```\n\n----------------------------------------\n\nTITLE: Querying System Module Storage in Polkadot.js\nDESCRIPTION: Examples of querying various storage items in the System module using Polkadot.js API. Includes interfaces for account information, block data, events, extrinsics, and runtime upgrades.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.account(accountId)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.allExtrinsicsLen()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.authorizedUpgrade()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.blockHash(blockNumber)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.blockWeight()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.digest()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.eventCount()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.events()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.eventTopics(hash)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.executionPhase()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.extrinsicCount()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.extrinsicData(index)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.inherentsApplied()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.lastRuntimeUpgrade()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.number()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.parentHash()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.upgradedToTripleRefCount()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.upgradedToU32RefCount()\n```\n\n----------------------------------------\n\nTITLE: Accessing Pool Assets AlreadyExists Error in TypeScript\nDESCRIPTION: Interface for checking if an error is an AlreadyExists error in the Pool Assets module. This error indicates that the asset-account already exists.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.poolAssets.AlreadyExists.is\n```\n\n----------------------------------------\n\nTITLE: Forcefully Unstaking a Staker in Polkadot.js\nDESCRIPTION: This function forces a current staker to become completely unstaked immediately. It requires root origin and takes parameters for the stash account and the number of slashing spans.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_149\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.forceUnstake(stash: AccountId32, num_slashing_spans: u32)\n```\n\n----------------------------------------\n\nTITLE: Accessing Governance Constants in Polkadot.js\nDESCRIPTION: Constants related to various governance mechanisms including proxy settings, multisig configurations, and referendum parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.proxy.maxPending\napi.consts.proxy.maxProxies\napi.consts.proxy.proxyDepositBase\napi.consts.multisig.depositBase\napi.consts.multisig.maxSignatories\napi.consts.referenda.alarmInterval\n```\n\n----------------------------------------\n\nTITLE: Querying Multisig Operations in Polkadot.js API\nDESCRIPTION: Retrieves the set of open multisig operations. Takes AccountId32 and a 32-byte array as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.multisig.multisigs(account: AccountId32, hash: [u8;32]): Option<PalletMultisigMultisig>\n```\n\n----------------------------------------\n\nTITLE: Verifying Cumulus XCM Executed Downward Event in Polkadot.js API\nDESCRIPTION: This snippet illustrates how to check if an event is an ExecutedDownward event from the cumulusXcm module using the Polkadot.js API. It provides the interface for accessing this cross-chain messaging event.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.cumulusXcm.ExecutedDownward.is\n```\n\n----------------------------------------\n\nTITLE: Detecting CumulusXcm ExecutedDownward Event in Polkadot.js API\nDESCRIPTION: Illustrates how to identify if an event is a cumulusXcm ExecutedDownward event using the Polkadot.js API. This event indicates that a downward message has been executed with a specific outcome.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.cumulusXcm.ExecutedDownward.is\n```\n\n----------------------------------------\n\nTITLE: Assets API Call in Polkadot Runtime\nDESCRIPTION: Retrieves the list of asset IDs and corresponding balances for a given account.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naccountBalances(account: SpCoreCryptoAccountId32): Vec<(u32,u128)>\n```\n\n----------------------------------------\n\nTITLE: Accessing GRANDPA Methods in Polkadot.js API\nDESCRIPTION: This snippet shows the GRANDPA-related methods available in the Polkadot.js API for proving finality, retrieving round states, and subscribing to justifications.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.grandpa.proveFinality(blockNumber: BlockNumber): Option<EncodedFinalityProofs>\napi.rpc.grandpa.roundState(): ReportedRoundStates\napi.rpc.grandpa.subscribeJustifications(): JustificationNotification\n```\n\n----------------------------------------\n\nTITLE: Reporting Parachain Slashing Disputes\nDESCRIPTION: Reports a dispute that was lost without requiring a signature. Used for slashing validators who acted maliciously.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.parasSlashing.reportDisputeLostUnsigned(dispute_proof, key_owner_proof)\n```\n\n----------------------------------------\n\nTITLE: Checking VersionNotifyRequested Event in XCM Pallet\nDESCRIPTION: Interface for checking if an event is a VersionNotifyRequested event from the XCM Pallet. This event indicates that we have requested a remote chain to send us XCM version change notifications.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.xcmPallet.VersionNotifyRequested.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Runtime Metadata in Rust\nDESCRIPTION: Function to retrieve the metadata of the runtime. This is part of the metadata API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nmetadata(): SpCoreOpaqueMetadata\n```\n\n----------------------------------------\n\nTITLE: Getting Runtime Metadata in Metadata API in Rust\nDESCRIPTION: Returns the metadata of a runtime.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\napi.call.metadata.metadata(): SpCoreOpaqueMetadata\n```\n\n----------------------------------------\n\nTITLE: Refunding Submission Deposit for Closed Referendum in Polkadot-JS API\nDESCRIPTION: This function refunds the Submission Deposit for a closed referendum back to the depositor. It requires a signed or root origin and takes the index of a closed referendum as a parameter. Emits a SubmissionDepositRefunded event.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.referenda.refundSubmissionDeposit(index: u32)\n```\n\n----------------------------------------\n\nTITLE: Polkadot Scheduler Events\nDESCRIPTION: Event interfaces for the scheduler module managing task scheduling, dispatch, and retry operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.scheduler.CallUnavailable.is\napi.events.scheduler.Canceled.is\napi.events.scheduler.Dispatched.is\n```\n\n----------------------------------------\n\nTITLE: Querying Parachain Information in Registrar Module\nDESCRIPTION: This query fetches information about a registered parachain by its ID. It returns an Option containing parachain details and deposit information.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.registrar.paras(u32): Option<PolkadotRuntimeCommonParasRegistrarParaInfo>\n```\n\n----------------------------------------\n\nTITLE: Converting Weight to Asset Fee in XCM\nDESCRIPTION: This method converts a weight value into a fee denominated in a specific asset. It takes a weight parameter and a versioned asset ID as input, returning the fee amount as a u128 value or an error.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nqueryWeightToAssetFee(weight: `SpWeightsWeightV2Weight`, asset: `XcmVersionedAssetId`): `Result<u128, XcmRuntimeApisFeesError>`\n```\n\n----------------------------------------\n\nTITLE: Accessing Recovery Constants in Polkadot-JS API\nDESCRIPTION: Retrieves constants related to the recovery pallet, including deposit amounts, maximum friends, and recovery deposit.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst configDepositBase = api.consts.recovery.configDepositBase;\nconst friendDepositFactor = api.consts.recovery.friendDepositFactor;\nconst maxFriends = api.consts.recovery.maxFriends;\nconst recoveryDeposit = api.consts.recovery.recoveryDeposit;\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Storage Items in System Module\nDESCRIPTION: Removes specified items from storage by providing an array of keys to be deleted. This allows for targeted storage cleanup.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_173\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.system.killStorage(keys)\n```\n\n----------------------------------------\n\nTITLE: Refunding Decision Deposit for Closed Referendum in Polkadot-JS API\nDESCRIPTION: This function refunds the Decision Deposit for a closed referendum back to the depositor. It requires a signed or root origin and takes the index of a closed referendum as a parameter. Emits a DecisionDepositRefunded event.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.referenda.refundDecisionDeposit(index: u32)\n```\n\n----------------------------------------\n\nTITLE: Implementing Balances Pallet Configuration in Rust\nDESCRIPTION: This snippet shows how to implement the pallet_balances::Config trait for a Runtime, demonstrating two different ways to store account balances: using a StorageMapShim or the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nimpl pallet_balances::Config for Runtime {\n  type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nimpl pallet_balances::Config for Runtime {\n  type AccountStore = System\n}\n```\n\n----------------------------------------\n\nTITLE: Querying On-Demand Parachain Storage in Polkadot.js API\nDESCRIPTION: Functions to query on-demand parachain storage, including affinity entries, free entries, para ID affinity, queue status, and revenue. These manage the scheduling of on-demand parachains.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.onDemand.affinityEntries(u32): BinaryHeapEnqueuedOrder\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.onDemand.freeEntries(): BinaryHeapEnqueuedOrder\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.onDemand.paraIdAffinity(u32): Option<PolkadotRuntimeParachainsOnDemandTypesCoreAffinityCount>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.onDemand.queueStatus(): PolkadotRuntimeParachainsOnDemandTypesQueueStatusType\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.onDemand.revenue(): Vec<u128>\n```\n\n----------------------------------------\n\nTITLE: Querying Authorship Module Storage in Polkadot JS API\nDESCRIPTION: Methods to retrieve information about the author of the current block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\napi.query.authorship.author()\n```\n\n----------------------------------------\n\nTITLE: Price Quotation for Exact Tokens Swap\nDESCRIPTION: Provides a price quote for swapping an exact amount of tokens for another token. The result may change by the time a transaction executes, requiring slippage parameters in actual swap calls.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.assetConversionApi.quotePriceExactTokensForTokens(asset1: StagingXcmV4Location, asset2: StagingXcmV4Location, amount: u128, include_fee: bool): Option<u128>\n```\n\n----------------------------------------\n\nTITLE: Querying GRANDPA Storage\nDESCRIPTION: Storage interfaces for GRANDPA consensus including authorities, set IDs, pending changes and state.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.grandpa.authorities(): Vec<(SpConsensusGrandpaAppPublic,u64)>\napi.query.grandpa.currentSetId(): u64\napi.query.grandpa.state(): PalletGrandpaStoredState\n```\n\n----------------------------------------\n\nTITLE: Cancelling Deferred Slash in Staking Module for Polkadot.js\nDESCRIPTION: This function cancels the enactment of a deferred slash. It can only be called by the admin origin. The function takes parameters for the era and indices of the slashes to cancel.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_141\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.cancelDeferredSlash(era: u32, slash_indices: Vec<u32>)\n```\n\n----------------------------------------\n\nTITLE: Querying Call Info in Rust\nDESCRIPTION: Retrieves dispatch class, weight, and fee information for a given encoded Call.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\nqueryCallInfo(call: `AssetHubKusamaRuntimeRuntimeCall`, len: `u32`): `PalletTransactionPaymentRuntimeDispatchInfo`\n```\n\n----------------------------------------\n\nTITLE: Voiding Approved Treasury Spend\nDESCRIPTION: Voids a previously approved treasury spend. This is only possible if the payout has not been attempted yet. Must be called with RejectOrigin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_186\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.treasury.voidSpend(index)\n```\n\n----------------------------------------\n\nTITLE: Checking VersionNotifyUnrequested Event in XCM Pallet\nDESCRIPTION: Interface for checking if an event is a VersionNotifyUnrequested event from the XCM Pallet. This event indicates that we have requested a remote chain to stop sending us XCM version change notifications.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.xcmPallet.VersionNotifyUnrequested.is\n```\n\n----------------------------------------\n\nTITLE: NominationPools Error Interfaces\nDESCRIPTION: Error interfaces for the nominationPools module, handling pool operations, permissions, and delegation errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.nominationPools.AccountBelongsToOtherPool.is\napi.errors.nominationPools.AlreadyMigrated.is\n// ... additional nomination pool errors\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Set Controller\nDESCRIPTION: Sets the controller of a stash to the stash itself. Must be signed by the stash, not the controller.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_159\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.setController()\n```\n\n----------------------------------------\n\nTITLE: Updating Roles for a Pool in Polkadot-js API\nDESCRIPTION: Updates the roles of a pool. Only the root role can change any role, including itself. The depositor role can never be changed. Emits an event to notify UIs of role changes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.updateRoles(pool_id, new_root, new_nominator, new_bouncer)\n```\n\n----------------------------------------\n\nTITLE: Querying Persisted Validation Data in Rust\nDESCRIPTION: This function yields the persisted validation data for a given ParaId along with an assumption about core occupancy. It returns None if the para is not registered or the assumption is Freed and the para already occupies a core.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\npersistedValidationData(para_id: `PolkadotParachainPrimitivesPrimitivesId`, assumption: `PolkadotPrimitivesV8OccupiedCoreAssumption`): `Option<PolkadotPrimitivesV8PersistedValidationData>`\n```\n\n----------------------------------------\n\nTITLE: Accessing Elections Error Interfaces in Polkadot.js API\nDESCRIPTION: This snippet demonstrates how to access error interfaces for the elections module in the Polkadot.js API. It includes errors related to candidate submissions, voting, and member management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.elections.DuplicatedCandidate.is\napi.errors.elections.InsufficientCandidateFunds.is\napi.errors.elections.InvalidRenouncing.is\n// ... other error interfaces\n```\n\n----------------------------------------\n\nTITLE: Querying Treasury Proposals\nDESCRIPTION: API interface for querying proposals that have been made in the Treasury pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.proposals\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Listen Addresses in Polkadot JS API (TypeScript)\nDESCRIPTION: This method returns the local listen addresses, including the local PeerId. These addresses are suitable for use with addReservedPeer or as bootnode addresses.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nlocalListenAddresses(): `Vec<Text>`\n```\n\n----------------------------------------\n\nTITLE: Querying ParachainSystem Storage\nDESCRIPTION: Query interfaces for accessing parachain system storage items like validation data, upward messages, and upgrade signals\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.parachainSystem.unincludedSegment(): Vec<CumulusPalletParachainSystemUnincludedSegmentAncestor>\napi.query.parachainSystem.upgradeGoAhead(): Option<PolkadotPrimitivesV8UpgradeGoAhead>\napi.query.parachainSystem.upgradeRestrictionSignal(): Option<PolkadotPrimitivesV8UpgradeRestriction>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registrar Constants in Polkadot-JS API\nDESCRIPTION: Constants for the registrar pallet, including data deposit per byte and parachain deposit.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataDepositPerByte = api.consts.registrar.dataDepositPerByte;\nconst paraDeposit = api.consts.registrar.paraDeposit;\n```\n\n----------------------------------------\n\nTITLE: Querying Execution Phase in System Pallet\nDESCRIPTION: API interface for querying the execution phase of the block in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.executionPhase\n```\n\n----------------------------------------\n\nTITLE: Subscribing to XCM Version Notifications in Polkadot.js API\nDESCRIPTION: This code snippet shows how to subscribe to XCM version notifications from a location using the Polkadot.js API. It requires an admin origin and takes the location as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_209\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.forceSubscribeVersionNotify(location: XcmVersionedLocation)\n```\n\n----------------------------------------\n\nTITLE: Checking UnexpectedResponse Event in XCM Pallet\nDESCRIPTION: Interface for checking if an event is an UnexpectedResponse event from the XCM Pallet. This event occurs when a query response is received that doesn't match any registered query, possibly due to never being registered, being a duplicate, or timing out.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.xcmPallet.UnexpectedResponse.is\n```\n\n----------------------------------------\n\nTITLE: Accessing ForeignAssets Error Interface in Polkadot.js API\nDESCRIPTION: Example of how to access the 'AlreadyExists' error interface from the foreignAssets module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.foreignAssets.AlreadyExists.is\n```\n\n----------------------------------------\n\nTITLE: Deregistering from Fast Unstake\nDESCRIPTION: Allows a user to deregister themselves from the fast-unstake process if they are waiting and change their mind. Note that the stash remains unbonded and chilled from the original registration.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fastUnstake.deregister()\n```\n\n----------------------------------------\n\nTITLE: Querying Delegated Staking Storage\nDESCRIPTION: Storage interfaces for delegated staking functionality including counters for agents and delegators, and delegation mappings.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.delegatedStaking.counterForAgents(): u32\napi.query.delegatedStaking.counterForDelegators(): u32\napi.query.delegatedStaking.delegators(AccountId32): Option<PalletDelegatedStakingDelegation>\n```\n\n----------------------------------------\n\nTITLE: Querying HRMP Channels in Polkadot.js\nDESCRIPTION: This method queries HRMP channel data associated with each para. It ensures that each participant in the channel satisfies `Paras::is_valid_para(P)` within a session.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napi.query.hrmp.hrmpChannels(channelId)\n```\n\n----------------------------------------\n\nTITLE: Updating Voter Bag in Polkadot.js API\nDESCRIPTION: This code snippet shows how to update the bag of a dislocated account in the voter list using the Polkadot.js API. It can be called by anyone and takes the dislocated account as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_201\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.voterList.rebag(dislocated: MultiAddress)\n```\n\n----------------------------------------\n\nTITLE: Block Builder API Calls\nDESCRIPTION: Runtime API calls for block building operations including checking inherents, finalizing blocks, and generating inherent extrinsics.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.blockBuilder.checkInherents(block: SpRuntimeBlock, data: SpInherentsInherentData): SpInherentsCheckInherentsResult\napi.call.blockBuilder.finalizeBlock(): SpRuntimeHeader\napi.call.blockBuilder.inherentExtrinsics(inherent: SpInherentsInherentData): Vec<Bytes>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aura Consensus Information in Rust\nDESCRIPTION: Functions to get current authorities and slot duration for the Aura consensus mechanism. These are part of the auraApi.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nauthorities(): Vec<SpConsensusAuraSr25519AppSr25519Public>\n```\n\nLANGUAGE: rust\nCODE:\n```\nslotDuration(): SpConsensusSlotsSlotDuration\n```\n\n----------------------------------------\n\nTITLE: Executing a Block in Runtime Core\nDESCRIPTION: Executes a given block, processing all extrinsics and state transitions. This is a fundamental operation for block import and validation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.core.executeBlock(block: SpRuntimeBlock): Null\n```\n\n----------------------------------------\n\nTITLE: Querying XCMP Queue Configuration in TypeScript\nDESCRIPTION: Retrieves the configuration which controls the dynamics of the outbound queue in XCMP.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmpQueue.queueConfig()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Information\nDESCRIPTION: RPC methods for accessing basic node information including name, version, properties, and node roles\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.system.name(): Text\napi.rpc.system.version(): Text\napi.rpc.system.properties(): ChainProperties\napi.rpc.system.nodeRoles(): Vec<NodeRole>\n```\n\n----------------------------------------\n\nTITLE: Accessing Proxy Constants in Polkadot-JS API\nDESCRIPTION: Retrieves various constants related to the proxy pallet, including deposit amounts, maximum pending announcements, and maximum proxies.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst announcementDepositBase = api.consts.proxy.announcementDepositBase;\nconst announcementDepositFactor = api.consts.proxy.announcementDepositFactor;\nconst maxPending = api.consts.proxy.maxPending;\nconst maxProxies = api.consts.proxy.maxProxies;\nconst proxyDepositBase = api.consts.proxy.proxyDepositBase;\nconst proxyDepositFactor = api.consts.proxy.proxyDepositFactor;\n```\n\n----------------------------------------\n\nTITLE: Interacting with Ethereum-compatible Network Information in Polkadot.js\nDESCRIPTION: This snippet shows RPC methods for querying Ethereum-compatible network information, such as listening status, peer count, and network version.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.net.listening(): bool\napi.rpc.net.peerCount(): Text\napi.rpc.net.version(): Text\n```\n\n----------------------------------------\n\nTITLE: Claiming Pool Commission\nDESCRIPTION: Claims pending commission for a pool. Must be called by the pool's root role. Pending commission is paid out and added to total claimed commission, then pending commission is reset to zero.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.claimCommission(pool_id)\n```\n\n----------------------------------------\n\nTITLE: Controlling Fast Unstake Operations\nDESCRIPTION: Administrative control function for the fast unstake pallet. Can set parameters like the number of eras to check per block. Must be called with the configured ControlOrigin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fastUnstake.control(eras_to_check)\n```\n\n----------------------------------------\n\nTITLE: Querying Runtime Parameters\nDESCRIPTION: Retrieves stored runtime parameters using a specified key. Returns an Option containing the corresponding parameter value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.parameters.parameters(parameterKey)\n```\n\n----------------------------------------\n\nTITLE: Author API Endpoints\nDESCRIPTION: RPC methods for managing keys, extrinsics, and session operations in the author module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/rpc.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.author.hasKey(publicKey: Bytes, keyType: Text): bool\napi.rpc.author.hasSessionKeys(sessionKeys: Bytes): bool\napi.rpc.author.insertKey(keyType: Text, suri: Text, publicKey: Bytes): Bytes\napi.rpc.author.pendingExtrinsics(): Vec<Extrinsic>\napi.rpc.author.removeExtrinsic(bytesOrHash: Vec<ExtrinsicOrHash>): Vec<Hash>\napi.rpc.author.rotateKeys(): Bytes\napi.rpc.author.submitAndWatchExtrinsic(extrinsic: Extrinsic): ExtrinsicStatus\napi.rpc.author.submitExtrinsic(extrinsic: Extrinsic): Hash\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Information by Index in Polkadot.js\nDESCRIPTION: This method looks up account information from an index. It returns an option containing a tuple with the account ID, balance, and a boolean flag.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napi.query.indices.accounts(index)\n```\n\n----------------------------------------\n\nTITLE: Querying Call Fee Details in Rust\nDESCRIPTION: Retrieves fee details for a given encoded Call.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nqueryCallFeeDetails(call: `AssetHubKusamaRuntimeRuntimeCall`, len: `u32`): `PalletTransactionPaymentFeeDetails`\n```\n\n----------------------------------------\n\nTITLE: Entering Parachain Inherent Data\nDESCRIPTION: Processes bitfields and backed candidates by entering the paras inherent data. This is a core function for parachain operation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.paraInherent.enter(data)\n```\n\n----------------------------------------\n\nTITLE: Setting State for a Pool in Polkadot-js API\nDESCRIPTION: Sets a new state for a pool. Pools in the Destroying state cannot change state again. The call must be signed by the bouncer or root role, or can be executed permissionlessly if pool conditions to be open are not met.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.setState(pool_id, state)\n```\n\n----------------------------------------\n\nTITLE: Event Interface Definition - AssetRate Events\nDESCRIPTION: Interface definitions for AssetRate module events including asset rate creation, removal and updates.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.assetRate.AssetRateCreated.is\napi.events.assetRate.AssetRateRemoved.is\napi.events.assetRate.AssetRateUpdated.is\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Counter for Validators in Polkadot.js API\nDESCRIPTION: Retrieves the counter for the related counted storage map. Returns a u32 value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.counterForValidators\n```\n\n----------------------------------------\n\nTITLE: Checking If Chain Can Be Extended\nDESCRIPTION: Verifies if it's legal to extend the chain given a specific included hash and slot. Ensures consistency with runtime block validation logic to avoid issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.auraUnincludedSegmentApi.canBuildUpon(included_hash: PrimitiveTypesH256, slot: SpConsensusSlotsSlot): bool\n```\n\n----------------------------------------\n\nTITLE: Querying Acceptable Payment Assets for XCM in Polkadot.js\nDESCRIPTION: Retrieves a list of acceptable payment assets for a given XCM version.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.xcmPaymentApi.queryAcceptablePaymentAssets(xcm_version: u32): Result<Vec<XcmVersionedAssetId>, XcmRuntimeApisFeesError>\n```\n\n----------------------------------------\n\nTITLE: Block Builder Apply Extrinsic\nDESCRIPTION: Applies a given extrinsic to the block being built. Returns an inclusion outcome indicating whether the extrinsic was included in the block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\napplyExtrinsic(extrinsic: SpRuntimeUncheckedExtrinsic): Result<Result<Null, SpRuntimeDispatchError>, SpRuntimeTransactionValidityTransactionValidityError>\n```\n\n----------------------------------------\n\nTITLE: Checking XCMP Queue Suspension Status in Polkadot.js API\nDESCRIPTION: Query method to check whether the XCMP queue is suspended from executing incoming XCMs. Returns a boolean value indicating the suspension status.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmpQueue.queueSuspended()\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Related Storage\nDESCRIPTION: Storage interfaces for cross-chain messaging (XCM) related data including asset traps, queries, and version management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.polkadotXcm.assetTraps(H256): u32\napi.query.polkadotXcm.currentMigration(): Option<PalletXcmVersionMigrationStage>\napi.query.polkadotXcm.queries(u64): Option<PalletXcmQueryStatus>\napi.query.polkadotXcm.supportedVersion(u32, XcmVersionedLocation): Option<u32>\n```\n\n----------------------------------------\n\nTITLE: Querying Should Record XCM in XCM Pallet\nDESCRIPTION: API interface for querying whether incoming XCMs should be recorded. Only relevant if this pallet is being used as the RecordXcm implementation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.shouldRecordXcm\n```\n\n----------------------------------------\n\nTITLE: MMR Verification API Interface Definition\nDESCRIPTION: Definition for verifying MMR proof against root hash for batch of leaves stateless verification that does not require on-chain storage.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nverifyProofStateless(root: PrimitiveTypesH256, leaves: Vec<Bytes>, proof: SpMmrPrimitivesLeafProof): Result<Null, SpMmrPrimitivesError>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Version in Polkadot JS API (TypeScript)\nDESCRIPTION: This method retrieves the version of the node. It returns a Text value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nversion(): `Text`\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Fee Details in Polkadot (TypeScript)\nDESCRIPTION: This function queries the fee details for a given transaction.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.transactionPaymentApi.queryFeeDetails(uxt: SpRuntimeUncheckedExtrinsic, len: u32): PalletTransactionPaymentFeeDetails\n```\n\n----------------------------------------\n\nTITLE: Generating Sync Spec in Polkadot.js API\nDESCRIPTION: Returns the JSON-serialized chainspec running the node, with a sync state. It takes a boolean parameter to determine if the output should be raw.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.syncstate.genSyncSpec(raw: bool): Json\n```\n\n----------------------------------------\n\nTITLE: Converting Weight to Asset Fee for XCM in Polkadot.js\nDESCRIPTION: Converts a given weight into a fee amount for a specified AssetId in the context of XCM.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.xcmPaymentApi.queryWeightToAssetFee(weight: SpWeightsWeightV2Weight, asset: XcmVersionedAssetId): Result<u128, XcmRuntimeApisFeesError>\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Delivery Fees in Rust\nDESCRIPTION: Calculates delivery fees for sending a specific XCM message to a destination.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nqueryDeliveryFees(destination: `XcmVersionedLocation`, message: `XcmVersionedXcm`): `Result<XcmVersionedAssets, XcmRuntimeApisFeesError>`\n```\n\n----------------------------------------\n\nTITLE: Querying Pool Assets Storage\nDESCRIPTION: Query interfaces for managing pool assets including account balances, approvals and asset metadata\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.poolAssets.account(u32, AccountId32): Option<PalletAssetsAssetAccount>\napi.query.poolAssets.asset(u32): Option<PalletAssetsAssetDetails>\napi.query.poolAssets.metadata(u32): PalletAssetsAssetMetadata\n```\n\n----------------------------------------\n\nTITLE: Generating Inherent Extrinsics\nDESCRIPTION: Generates inherent extrinsics based on inherent data. Inherent extrinsics represent operations that are inherently true for a block, like timestamps.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.blockBuilder.inherentExtrinsics(inherent: SpInherentsInherentData): Vec<Bytes>\n```\n\n----------------------------------------\n\nTITLE: NIS (Non-Interactive Staking) Operations\nDESCRIPTION: API endpoints for managing NIS functionality including bid placement, receipt management and deficit funding.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nis.communify(index)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nis.fundDeficit()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nis.placeBid(amount, duration)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nis.privatize(index)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nis.retractBid(amount, duration)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nis.thawCommunal(index)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nis.thawPrivate(index, maybe_proportion)\n```\n\n----------------------------------------\n\nTITLE: Querying Message Queue Service Head in Polkadot.js\nDESCRIPTION: This method retrieves the origin at which message queue servicing should begin. It returns an option containing the aggregate message origin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napi.query.messageQueue.serviceHead()\n```\n\n----------------------------------------\n\nTITLE: Forcing New Era in Staking Module for Polkadot.js\nDESCRIPTION: This function forces a new era at the end of the next session. It requires root origin and should be used cautiously near the end of an era due to the election process timing.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_146\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.forceNewEra()\n```\n\n----------------------------------------\n\nTITLE: Author RPC Method Definitions\nDESCRIPTION: Defines key management and extrinsic submission methods available in the author namespace.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hasKey\": {\n    \"interface\": \"api.rpc.author.hasKey\",\n    \"jsonrpc\": \"author_hasKey\",\n    \"params\": [\"publicKey: Bytes\", \"keyType: Text\"],\n    \"returns\": \"bool\"\n  },\n  \"hasSessionKeys\": {\n    \"interface\": \"api.rpc.author.hasSessionKeys\", \n    \"jsonrpc\": \"author_hasSessionKeys\",\n    \"params\": [\"sessionKeys: Bytes\"],\n    \"returns\": \"bool\"\n  },\n  \"insertKey\": {\n    \"interface\": \"api.rpc.author.insertKey\",\n    \"jsonrpc\": \"author_insertKey\",\n    \"params\": [\"keyType: Text\", \"suri: Text\", \"publicKey: Bytes\"],\n    \"returns\": \"Bytes\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Asset Conversion Module Errors in Polkadot JS API\nDESCRIPTION: Examples of how to check for specific errors in the Asset Conversion module using the Polkadot JS API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.assetConversion.AmountOneLessThanMinimal.is\napi.errors.assetConversion.AmountOutTooHigh.is\napi.errors.assetConversion.AmountTwoLessThanMinimal.is\n```\n\n----------------------------------------\n\nTITLE: Removing Manager Lock for Parachain in Polkadot-JS API\nDESCRIPTION: This function removes a manager lock from a parachain, allowing deregistration or swapping without governance. It can only be called by the Root origin or the parachain itself. Takes the para ID as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.registrar.removeLock(para: u32)\n```\n\n----------------------------------------\n\nTITLE: Treasury Events Interface\nDESCRIPTION: Manages treasury-related events including deposits, payments, and fund allocations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.treasury.AssetSpendApproved.is\napi.events.treasury.Awarded.is\napi.events.treasury.Burnt.is\napi.events.treasury.Deposit.is\n```\n\n----------------------------------------\n\nTITLE: Registering for Fast Unstake\nDESCRIPTION: Registers a stash for fast-unstake process. The stash must have no ongoing unlocking chunks. This will fully unbond and chill the stash, then enqueue it for eligibility checking in subsequent blocks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fastUnstake.registerFastUnstake()\n```\n\n----------------------------------------\n\nTITLE: Configuration API Calls\nDESCRIPTION: Functions for configuring various system parameters including approval voting, async backing, dispute periods, and HRMP channels. These APIs allow modification of core system settings.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.configuration.setApprovalVotingParams(new: PolkadotPrimitivesV8ApprovalVotingParams)\n\napi.tx.configuration.setAsyncBackingParams(new: PolkadotPrimitivesV8AsyncBackingAsyncBackingParams)\n\napi.tx.configuration.setBypassConsistencyCheck(new: bool)\n\napi.tx.configuration.setCodeRetentionPeriod(new: u32)\n\napi.tx.configuration.setCoretimeCores(new: u32)\n\napi.tx.configuration.setDisputePeriod(new: u32)\n\napi.tx.configuration.setDisputePostConclusionAcceptancePeriod(new: u32)\n\napi.tx.configuration.setExecutorParams(new: PolkadotPrimitivesV8ExecutorParams)\n\napi.tx.configuration.setGroupRotationFrequency(new: u32)\n\napi.tx.configuration.setHrmpChannelMaxCapacity(new: u32)\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Disabled Validators in Polkadot.js API\nDESCRIPTION: Retrieves indices of validators that have offended in the active era. Returns a vector of u32 values, kept sorted for efficient binary search.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.disabledValidators\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Era Start Session Index in Polkadot.js API\nDESCRIPTION: Retrieves the session index at which the era starts for the last HistoryDepth eras. Takes a u32 as input and returns an optional u32.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.erasStartSessionIndex\n```\n\n----------------------------------------\n\nTITLE: Whitelist Error Interfaces\nDESCRIPTION: Defines error interfaces for the whitelist module including invalid call weight witness, unavailable pre-image, and undecodable call errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.whitelist.InvalidCallWeightWitness.is\napi.errors.whitelist.UnavailablePreImage.is\napi.errors.whitelist.UndecodableCall.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Alliance Module Errors in Polkadot JS API\nDESCRIPTION: Examples of how to check for specific errors in the Alliance module using the Polkadot JS API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.alliance.AccountNonGrata.is\napi.errors.alliance.AllianceAlreadyInitialized.is\napi.errors.alliance.AllianceNotYetInitialized.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Most Recent Context for Parachain\nDESCRIPTION: Gets the context (relay-chain block number) of the most recent parachain head for a specific parachain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.mostRecentContext(paraId)\n```\n\n----------------------------------------\n\nTITLE: Querying Aura Authorities in Rust\nDESCRIPTION: Retrieves the current authority set for the Aura consensus mechanism.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\napi.query.aura.authorities()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Proxy Announcements in Proxy Module\nDESCRIPTION: This query returns the announcements made by a proxy account. It provides a tuple containing a vector of announcements and a balance.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.proxy.announcements(AccountId32): (Vec<PalletProxyAnnouncement>,u128)\n```\n\n----------------------------------------\n\nTITLE: Managing Parachain Validation Code\nDESCRIPTION: Collection of methods to manage parachain validation code, including adding trusted code, forcing upgrades, and poking unused validation code.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.paras.addTrustedValidationCode(validation_code)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.paras.forceNoteNewHead(para, new_head)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.paras.forceQueueAction(para)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.paras.forceScheduleCodeUpgrade(para, new_code, relay_parent_number)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.paras.forceSetCurrentCode(para, new_code)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.paras.forceSetCurrentHead(para, new_head)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.paras.forceSetMostRecentContext(para, context)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.paras.includePvfCheckStatement(stmt, signature)\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.paras.pokeUnusedValidationCode(validation_code_hash)\n```\n\n----------------------------------------\n\nTITLE: Converting Weight to Asset Fee\nDESCRIPTION: Function to convert a computational weight into a fee amount for a specified asset. Takes weight and versioned asset ID parameters and returns the fee amount as a u128 value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nqueryWeightToAssetFee(weight: `SpWeightsWeightV2Weight`, asset: `XcmVersionedAssetId`): `Result<u128, XcmRuntimeApisFeesError>`\n```\n\n----------------------------------------\n\nTITLE: Querying HRMP Storage\nDESCRIPTION: Storage interfaces for HRMP (Horizontal Relay-routed Message Passing) including channel requests, contents and digests.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.hrmp.hrmpAcceptedChannelRequestCount(u32): u32\napi.query.hrmp.hrmpChannelContents(PolkadotParachainPrimitivesPrimitivesHrmpChannelId): Vec<PolkadotCorePrimitivesInboundHrmpMessage>\napi.query.hrmp.hrmpChannelDigests(u32): Vec<(u32,Vec<u32>)>\n```\n\n----------------------------------------\n\nTITLE: Accessing BABE Methods in Polkadot.js API\nDESCRIPTION: This snippet shows the BABE-related method available in the Polkadot.js API for retrieving epoch authorship information.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.babe.epochAuthorship(): HashMap<AuthorityId, EpochAuthorship>\n```\n\n----------------------------------------\n\nTITLE: Defining AssetTxPayment AssetTxFeePaid Event in Rust\nDESCRIPTION: Defines the AssetTxFeePaid event for the assetTxPayment module. This event is emitted when a transaction fee is paid using an asset.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nAssetTxFeePaid(`AccountId32`, `u128`, `u128`, `StagingXcmV4Location`)\n```\n\n----------------------------------------\n\nTITLE: System Error Interface Examples\nDESCRIPTION: Core system error interfaces for runtime upgrades, authorization, and account management\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.system.CallFiltered.is\napi.errors.system.FailedToExtractRuntimeVersion.is\napi.errors.system.InvalidSpecName.is\n```\n\n----------------------------------------\n\nTITLE: Adding Log Filter in Polkadot.js API\nDESCRIPTION: Adds the supplied directives to the current log filter. This method is only active with appropriate flags and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.system.addLogFilter(directives: Text): Null\n```\n\n----------------------------------------\n\nTITLE: Adding Log Filter in Polkadot JS API (TypeScript)\nDESCRIPTION: This method adds supplied directives to the current log filter. It requires appropriate flags to be active and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\naddLogFilter(directives: `Text`): `Null`\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Weight in Polkadot.js\nDESCRIPTION: Calculates the weight needed to execute a given XCM message.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.xcmPaymentApi.queryXcmWeight(message: XcmVersionedXcm): Result<SpWeightsWeightV2Weight, XcmRuntimeApisFeesError>\n```\n\n----------------------------------------\n\nTITLE: Querying Metadata at Version in Rust\nDESCRIPTION: Retrieves metadata at a specific version. Returns None if the version is not supported. Use metadata_versions to find supported versions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nmetadataAtVersion(version: `u32`): `Option<OpaqueMetadata>`\n```\n\n----------------------------------------\n\nTITLE: Dry Run API Methods\nDESCRIPTION: Methods for dry running calls and XCM programs without actual execution.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndryRunCall(origin: StagingKusamaRuntimeOriginCaller, call: StagingKusamaRuntimeRuntimeCall): Result<XcmRuntimeApisDryRunCallDryRunEffects, XcmRuntimeApisDryRunError>\ndryRunXcm(origin_location: XcmVersionedLocation, xcm: XcmVersionedXcm): Result<XcmRuntimeApisDryRunXcmDryRunEffects, XcmRuntimeApisDryRunError>\n```\n\n----------------------------------------\n\nTITLE: Listing Parachains with Code to be Pruned\nDESCRIPTION: Gets which paras have past code that needs pruning and the relay-chain block at which the code was replaced. Returns pairs of para IDs and block numbers, ordered ascending by block number.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.pastCodePruning()\n```\n\n----------------------------------------\n\nTITLE: Accessing TransferredApproved Event in PoolAssets Module\nDESCRIPTION: This snippet shows how to check if an event is a TransferredApproved event in the poolAssets module. It represents a transfer of assets from an owner to a destination by an approved delegate.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.poolAssets.TransferredApproved.is\n```\n\n----------------------------------------\n\nTITLE: Checking VersionNotifyStarted Event in XCM Pallet\nDESCRIPTION: Interface for checking if an event is a VersionNotifyStarted event from the XCM Pallet. This event occurs when a remote has requested XCM version change notifications from us, we have honored it, and sent version information with included cost.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.xcmPallet.VersionNotifyStarted.is\n```\n\n----------------------------------------\n\nTITLE: Accessing electionProviderMultiPhase Error Interfaces in Polkadot.js API\nDESCRIPTION: Defines error interfaces for the electionProviderMultiPhase module in Polkadot.js API. These errors relate to issues with election submissions, snapshots, and signed operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.InvalidSubmissionIndex.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.MissingSnapshotMetadata.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.OcwCallWrongEra.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.PreDispatchDifferentRound.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.PreDispatchEarlySubmission.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.PreDispatchWeakSubmission.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.PreDispatchWrongWinnerCount.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.SignedCannotPayDeposit.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.SignedInvalidWitness.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.SignedQueueFull.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.SignedTooMuchWeight.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.electionProviderMultiPhase.TooManyWinners.is\n```\n\n----------------------------------------\n\nTITLE: Querying Scheduler Retries in Polkadot.js API\nDESCRIPTION: Retrieves retry configurations for scheduled items, indexed by task address. The interface takes a tuple of two u32 values and returns an optional PalletSchedulerRetryConfig.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.scheduler.retries\n```\n\n----------------------------------------\n\nTITLE: Child Bounties Pallet Error Interfaces\nDESCRIPTION: Error interfaces for the child bounties pallet, handling sub-bounty operations and their relationship with parent bounties.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.childBounties.InsufficientBountyBalance.is\napi.errors.childBounties.ParentBountyNotActive.is\napi.errors.childBounties.TooManyChildBounties.is\n```\n\n----------------------------------------\n\nTITLE: Removing Fellowship Member\nDESCRIPTION: Completely removes a member from the fellowship collective. Must be called by the RemoveOrigin and specify the minimum rank of the member to be removed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipCollective.removeMember(who, min_rank)\n```\n\n----------------------------------------\n\nTITLE: BEEFY Double Voting Report Methods\nDESCRIPTION: Methods for reporting double voting violations in BEEFY consensus. Includes both signed and unsigned reporting variants that validate equivocation proofs and key ownership.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.beefy.reportDoubleVoting(equivocation_proof: SpConsensusBeefyDoubleVotingProof, key_owner_proof: SpSessionMembershipProof)\napi.tx.beefy.reportDoubleVotingUnsigned(equivocation_proof: SpConsensusBeefyDoubleVotingProof, key_owner_proof: SpSessionMembershipProof)\n```\n\n----------------------------------------\n\nTITLE: Accessing Society Constants in Polkadot-JS API\nDESCRIPTION: Retrieves constants for the society pallet, including challenge period, claim period, grace strikes, maximum bids, lock duration, and payouts.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst challengePeriod = api.consts.society.challengePeriod;\nconst claimPeriod = api.consts.society.claimPeriod;\nconst graceStrikes = api.consts.society.graceStrikes;\nconst maxBids = api.consts.society.maxBids;\nconst maxLockDuration = api.consts.society.maxLockDuration;\nconst maxPayouts = api.consts.society.maxPayouts;\n```\n\n----------------------------------------\n\nTITLE: Checking Core Assignment Queue\nDESCRIPTION: Gets assignments to be scheduled on each availability core. The value is only valid within the current block, and runtime APIs should be used to determine scheduled cores for upcoming blocks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paraScheduler.claimQueue()\n```\n\n----------------------------------------\n\nTITLE: Accessing Nomination Pools Constants in Polkadot-JS API\nDESCRIPTION: Retrieves constants related to nomination pools, including maximum points-to-balance ratio, maximum unbonding chunks, and pallet ID.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst maxPointsToBalance = api.consts.nominationPools.maxPointsToBalance;\nconst maxUnbonding = api.consts.nominationPools.maxUnbonding;\nconst palletId = api.consts.nominationPools.palletId;\n```\n\n----------------------------------------\n\nTITLE: Forcing Transfer in NIS Counterpart Balances\nDESCRIPTION: Similar to transfer_allow_death, but requires root origin and allows specifying the source account explicitly.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nisCounterpartBalances.forceTransfer(source, dest, value)\n```\n\n----------------------------------------\n\nTITLE: Forcing Unreserve in NIS Counterpart Balances\nDESCRIPTION: Unreserves some balance from a user by force. Can only be called by an account with root privileges.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nisCounterpartBalances.forceUnreserve(who, amount)\n```\n\n----------------------------------------\n\nTITLE: Balances Error Interface\nDESCRIPTION: Interface definitions for errors in the balances module. These errors handle balance-related operations like transfers, deposits, and account management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.balances.DeadAccount.is\napi.errors.balances.DeltaZero.is\napi.errors.balances.ExistentialDeposit.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Proxy Module Error: Duplicate\nDESCRIPTION: Defines the interface for checking if an error is of type 'Duplicate' in the proxy module. This error occurs when an account is already a proxy.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.proxy.Duplicate.is\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Funds to Another Member's Pool Bond\nDESCRIPTION: Bonds additional funds for another pool member. Origin can bond extra funds from free balance or pending rewards for themselves, or only pending rewards for others with appropriate permissions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.bondExtraOther(member, extra)\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Weight in Rust\nDESCRIPTION: Calculates the weight needed to execute a given XCM message.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\nqueryXcmWeight(message: `XcmVersionedXcm`): `Result<SpWeightsWeightV2Weight, XcmRuntimeApisFeesError>`\n```\n\n----------------------------------------\n\nTITLE: Core Fellowship Error Interfaces\nDESCRIPTION: Error interfaces for the core fellowship module, handling member ranking, permissions, and timing constraints.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.coreFellowship.AlreadyInducted.is\napi.errors.coreFellowship.InvalidRank.is\napi.errors.coreFellowship.NoPermission.is\n// ... other fellowship errors\n```\n\n----------------------------------------\n\nTITLE: GRANDPA API Methods\nDESCRIPTION: Methods for handling GRANDPA consensus functionality including authorities, proofs, and equivocation reporting.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncurrentSetId(): u64\ngenerateKeyOwnershipProof(set_id: u64, authority_id: SpConsensusGrandpaAppPublic): Option<Bytes>\ngrandpaAuthorities(): Vec<(SpConsensusGrandpaAppPublic,u64)>\nsubmitReportEquivocationUnsignedExtrinsic(equivocation_proof: SpConsensusGrandpaEquivocationProof, key_owner_proof: SpRuntimeOpaqueValue): Option<Null>\n```\n\n----------------------------------------\n\nTITLE: Accessing NIS Counterpart Balances Constants in Polkadot-JS API\nDESCRIPTION: Retrieves various constants related to account balances, including existential deposit, maximum freezes, locks, and reserves.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst existentialDeposit = api.consts.nisCounterpartBalances.existentialDeposit;\nconst maxFreezes = api.consts.nisCounterpartBalances.maxFreezes;\nconst maxLocks = api.consts.nisCounterpartBalances.maxLocks;\nconst maxReserves = api.consts.nisCounterpartBalances.maxReserves;\n```\n\n----------------------------------------\n\nTITLE: Accessing NFTs Error Interfaces in Polkadot.js API\nDESCRIPTION: This snippet demonstrates how to access error interfaces for the nfts module in Polkadot.js API. It includes a wide range of errors related to NFT operations, collections, attributes, metadata, and permissions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.nfts.AlreadyClaimed.is\napi.errors.nfts.AlreadyExists.is\napi.errors.nfts.ApprovalExpired.is\n// ... (and many more error interfaces)\n```\n\n----------------------------------------\n\nTITLE: Accessing Grandpa Module Errors in Polkadot-js API\nDESCRIPTION: Interface references for error conditions in the grandpa module, including equivocation proofs, key ownership proofs, and pause/resume operation failures.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.InvalidEquivocationProof.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.InvalidKeyOwnershipProof.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.PauseFailed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.ResumeFailed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.TooSoon.is\n```\n\n----------------------------------------\n\nTITLE: Listing Active PVF Votes\nDESCRIPTION: Gets the list of all currently active PVF (Parachain Validation Function) votes. This is auxiliary to PvfActiveVoteMap.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.pvfActiveVoteList()\n```\n\n----------------------------------------\n\nTITLE: Chilling Another Staker in Polkadot.js\nDESCRIPTION: This function allows chilling another staker's controller. It can be called by anyone if certain conditions are met, such as the target being non-decodable or not meeting bond requirements.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_143\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.chillOther(stash: AccountId32)\n```\n\n----------------------------------------\n\nTITLE: Parachain Host API Interface Definitions\nDESCRIPTION: Extensive API definitions for parachain management including validation, availability cores, disputes, messaging and backing state.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napprovalVotingParams(): PolkadotPrimitivesV8ApprovalVotingParams\nassumedValidationData(para_id: PolkadotParachainPrimitivesPrimitivesId, expected_persisted_validation_data_hash: PrimitiveTypesH256): Option<(PolkadotPrimitivesV8PersistedValidationData,H256)>\navailabilityCores(): Vec<PolkadotPrimitivesV8CoreState>\ncandidateEvents(): Vec<PolkadotPrimitivesV8CandidateEvent>\ndisabledValidators(): Vec<u32>\ndmqContents(recipient: PolkadotParachainPrimitivesPrimitivesId): Vec<PolkadotCorePrimitivesInboundDownwardMessage>\nkeyOwnershipProof(validator_id: PolkadotPrimitivesV8ValidatorAppPublic): Option<Bytes>\nparaBackingState(_: PolkadotParachainPrimitivesPrimitivesId): Option<PolkadotPrimitivesV8AsyncBackingBackingState>\n```\n\n----------------------------------------\n\nTITLE: Converting XCM Location to Account ID in Rust\nDESCRIPTION: Function to convert an XCM location to an AccountId. This is part of the locationToAccountApi.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nconvertLocation(location: XcmVersionedLocation): Result<AccountId32, XcmRuntimeApisConversionsError>\n```\n\n----------------------------------------\n\nTITLE: Verifying TransactionFeePaid Event in Polkadot.js API\nDESCRIPTION: This code demonstrates how to check if an event is a TransactionFeePaid event from the transactionPayment module. It includes parameters for the payer's account, actual fee, and tip.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.transactionPayment.TransactionFeePaid.is\n```\n\n----------------------------------------\n\nTITLE: Broker Pallet Error Interfaces\nDESCRIPTION: Error interfaces for the broker pallet, handling lease management, renewals, and core allocation operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.broker.AlreadyExpired.is\napi.errors.broker.AutoRenewalNotEnabled.is\napi.errors.broker.CompletePivot.is\napi.errors.broker.CorruptWorkplan.is\napi.errors.broker.ExteriorPivot.is\napi.errors.broker.IncompleteAssignment.is\n```\n\n----------------------------------------\n\nTITLE: Querying Weight to Fee Conversion for Calls in Polkadot.js\nDESCRIPTION: Converts call weight to fee amount using the current WeightToFee implementation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.transactionPaymentCallApi.queryWeightToFee(weight: SpWeightsWeightV2Weight): u128\n```\n\n----------------------------------------\n\nTITLE: Deregistering a Parachain in Polkadot-JS API\nDESCRIPTION: This function deregisters a Para Id, freeing all data and returning any deposit. The caller must be Root, the para owner, or the para itself. The para must be an on-demand parachain. Takes the para ID as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.registrar.deregister(id: u32)\n```\n\n----------------------------------------\n\nTITLE: Accessing Glutton Error Interfaces in Polkadot.js API\nDESCRIPTION: This snippet demonstrates how to access error interfaces for the glutton module in the Polkadot.js API. It includes errors related to initialization and resource limits.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.glutton.AlreadyInitialized.is\napi.errors.glutton.InsaneLimit.is\n```\n\n----------------------------------------\n\nTITLE: Accessing hrmp Error Interfaces in Polkadot.js API\nDESCRIPTION: Defines error interfaces for the hrmp (HRMP - Horizontal Relay-routed Message Passing) module in Polkadot.js API. These errors relate to HRMP channel operations and validations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.hrmp.AcceptHrmpChannelAlreadyConfirmed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.hrmp.AcceptHrmpChannelDoesntExist.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.hrmp.AcceptHrmpChannelLimitExceeded.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.hrmp.CancelHrmpOpenChannelUnauthorized.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.hrmp.ChannelCreationNotAuthorized.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.hrmp.CloseHrmpChannelAlreadyUnderway.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.hrmp.CloseHrmpChannelDoesntExist.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.hrmp.CloseHrmpChannelUnauthorized.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.hrmp.OpenHrmpChannelAlreadyConfirmed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.hrmp.OpenHrmpChannelAlreadyExists.is\n```\n\n----------------------------------------\n\nTITLE: Setting Offchain Local Storage in Polkadot.js API\nDESCRIPTION: Sets offchain local storage under a given key and prefix. This method is only active with appropriate flags and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.offchain.localStorageSet(kind: StorageKind, key: Bytes, value: Bytes): Null\n```\n\n----------------------------------------\n\nTITLE: Accessing ForeignAssets Constants in Polkadot.js\nDESCRIPTION: Shows how to access constants from the foreignAssets module via the Polkadot.js API. These constants relate to deposits required for foreign asset operations, metadata management, and limits.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.foreignAssets.approvalDeposit\napi.consts.foreignAssets.assetAccountDeposit\napi.consts.foreignAssets.assetDeposit\napi.consts.foreignAssets.metadataDepositBase\napi.consts.foreignAssets.metadataDepositPerByte\napi.consts.foreignAssets.removeItemsLimit\napi.consts.foreignAssets.stringLimit\n```\n\n----------------------------------------\n\nTITLE: GRANDPA Finality Control Functions\nDESCRIPTION: Functions for managing GRANDPA finality including noting stalled states and reporting equivocations. These functions handle authority set changes and validator misbehavior reporting.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.grandpa.noteStalled(delay: u32, best_finalized_block_number: u32)\napi.tx.grandpa.reportEquivocation(equivocation_proof: SpConsensusGrandpaEquivocationProof, key_owner_proof: SpSessionMembershipProof)\napi.tx.grandpa.reportEquivocationUnsigned(equivocation_proof: SpConsensusGrandpaEquivocationProof, key_owner_proof: SpSessionMembershipProof)\n```\n\n----------------------------------------\n\nTITLE: Submitting Unsigned Extrinsic for BEEFY Equivocation Report in Rust\nDESCRIPTION: This method submits an unsigned extrinsic to report a double voting equivocation in the BEEFY consensus mechanism. It requires proof of double voting and key ownership.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nsubmitReportDoubleVotingUnsignedExtrinsic(equivocation_proof: `SpConsensusBeefyDoubleVotingProof`, key_owner_proof: `SpRuntimeOpaqueValue`): `Option<Null>`\n```\n\n----------------------------------------\n\nTITLE: Accessing Polkadot XCM LocalExecutionIncomplete Error in TypeScript\nDESCRIPTION: Interface for checking if an error is a LocalExecutionIncomplete error in the Polkadot XCM module. This error indicates that local XCM execution is incomplete.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.polkadotXcm.LocalExecutionIncomplete.is\n```\n\n----------------------------------------\n\nTITLE: Asset Conversion Error Interfaces\nDESCRIPTION: Error interfaces for the asset conversion module handling invalid paths, pool operations, amount validations and liquidity checks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.assetConversion.InvalidPath.is\napi.errors.assetConversion.NonUniquePath.is\napi.errors.assetConversion.OptimalAmountLessThanDesired.is\napi.errors.assetConversion.Overflow.is\napi.errors.assetConversion.PoolExists.is\napi.errors.assetConversion.PoolNotFound.is\n```\n\n----------------------------------------\n\nTITLE: Listing Parachains with Upgrade Cooldowns\nDESCRIPTION: Gets the list of parachains that are awaiting for their upgrade restriction to cooldown, ordered ascending by block number.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.upgradeCooldowns()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Past Code Metadata\nDESCRIPTION: Gets past code metadata of parachains. This is kept available for approval checkers even if the parachains themselves are no longer registered.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.pastCodeMeta(paraId)\n```\n\n----------------------------------------\n\nTITLE: Parachain Inclusion Events\nDESCRIPTION: Event interfaces for parachain candidate inclusion, backing, and upward message handling.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.paraInclusion.CandidateBacked.is\napi.events.paraInclusion.CandidateIncluded.is\n```\n\n----------------------------------------\n\nTITLE: Forcing Minimum Commission for Validator in Polkadot.js\nDESCRIPTION: This function forces a validator to have at least the minimum commission. It does not affect validators who already have a commission greater than or equal to the minimum.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_145\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.forceApplyMinCommission(validator_stash: AccountId32)\n```\n\n----------------------------------------\n\nTITLE: Querying Parachain Actions Queue\nDESCRIPTION: Retrieves the actions to perform during the start of a specific session index. Takes a session index as an argument and returns a vector of parachain IDs.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.actionsQueue(sessionIndex)\n```\n\n----------------------------------------\n\nTITLE: Accessing MessageQueue Error Interface in Polkadot.js API\nDESCRIPTION: Example of how to access the 'AlreadyProcessed' error interface from the messageQueue module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.messageQueue.AlreadyProcessed.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Treasury Pallet Constants in Polkadot.js API\nDESCRIPTION: Constants for the Treasury pallet, including burn rate, max approvals, and spend period.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst burn = api.consts.treasury.burn;\nconst maxApprovals = api.consts.treasury.maxApprovals;\nconst spendPeriod = api.consts.treasury.spendPeriod;\n```\n\n----------------------------------------\n\nTITLE: ParaInclusion Error Interfaces\nDESCRIPTION: Error interfaces for the paraInclusion module, handling parachain inclusion and validation errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.paraInclusion.DisallowedRelayParent.is\napi.errors.paraInclusion.HeadDataTooLarge.is\n// ... additional para inclusion errors\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Configuration for Task in Polkadot-JS API\nDESCRIPTION: This function sets a retry configuration for a task. It takes the task identifier, number of retries, and retry period as parameters. The task will be retried in case of failure.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.scheduler.setRetry(task: (u32,u32), retries: u8, period: u32)\n```\n\n----------------------------------------\n\nTITLE: Verifying VestingCompleted Event in Vesting Module\nDESCRIPTION: This code checks if an event is a VestingCompleted event in the vesting module. It indicates that an account has become fully vested.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.vesting.VestingCompleted.is\n```\n\n----------------------------------------\n\nTITLE: Instantiating Contract in Contracts API in Rust\nDESCRIPTION: Instantiates a new contract. Returns the result of the instantiation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\napi.call.contractsApi.instantiate(origin: SpCoreCryptoAccountId32, value: u128, gas_limit: Option<SpWeightsWeightV2Weight>, storage_deposit_limit: Option<u128>, code: PalletContractsPrimitivesCode, data: Bytes, salt: Bytes): PalletContractsPrimitivesContractResult\n```\n\n----------------------------------------\n\nTITLE: Configuring RefCount Type for Legacy Substrate\nDESCRIPTION: Configuration to set RefCount type to u8 for pre-Substrate 2.0 chains to ensure correct balance tracking.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/FAQ.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nRefCount: 'u8'\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Payment Next Fee Multiplier in TypeScript\nDESCRIPTION: Retrieves the next fee multiplier for transaction payments.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.transactionPayment.nextFeeMultiplier()\n```\n\n----------------------------------------\n\nTITLE: Conviction Voting Events Interface Definitions\nDESCRIPTION: Event interfaces for conviction voting operations including undelegation, voting, and vote removal.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.convictionVoting.Undelegated.is\napi.events.convictionVoting.Voted.is\napi.events.convictionVoting.VoteRemoved.is\n```\n\n----------------------------------------\n\nTITLE: Getting Genesis Preset in Genesis Builder API in Rust\nDESCRIPTION: Returns a JSON blob representation of the built-in RuntimeGenesisConfig identified by id. If id is None, it returns the default RuntimeGenesisConfig.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\napi.call.genesisBuilder.getPreset(id: Option<Text>): Option<Bytes>\n```\n\n----------------------------------------\n\nTITLE: Removing Retry Configuration for Task in Polkadot-JS API\nDESCRIPTION: This function removes the retry configuration of a task. It takes the task identifier (block number and index) as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.scheduler.cancelRetry(task: (u32,u32))\n```\n\n----------------------------------------\n\nTITLE: Querying Slots Leases in Polkadot.js API\nDESCRIPTION: Retrieves amounts held on deposit for each leased parachain. Takes a u32 as input and returns a vector of optional tuples containing AccountId32 and u128.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.slots.leases\n```\n\n----------------------------------------\n\nTITLE: Genesis State Building and Presets in Rust\nDESCRIPTION: Functions for building genesis state, retrieving presets, and managing genesis configurations. These are part of the genesisBuilder API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nbuildState(json: Bytes): Result<Null, Text>\n```\n\nLANGUAGE: rust\nCODE:\n```\ngetPreset(id: Option<Text>): Option<Bytes>\n```\n\nLANGUAGE: rust\nCODE:\n```\npresetNames(): Vec<Text>\n```\n\n----------------------------------------\n\nTITLE: Accessing Society Pallet Error Interfaces in Polkadot-js\nDESCRIPTION: Interface definitions for accessing error conditions from the Society pallet, including suspended users, timing constraints, and voting status errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.society.Suspended.is\napi.errors.society.TooEarly.is\napi.errors.society.Voted.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chain Information in Polkadot JS API (TypeScript)\nDESCRIPTION: This method retrieves the chain information. It returns a Text value representing the chain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nchain(): `Text`\n```\n\n----------------------------------------\n\nTITLE: Retrieving PVF Active Vote State\nDESCRIPTION: Gets information about currently active PVF pre-checking votes. Returns vote state for a specific PVF (identified by hash).\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.pvfActiveVoteMap(pvfHash)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sync State in Polkadot JS API (TypeScript)\nDESCRIPTION: This method returns the state of the syncing of the node. It returns a SyncState object.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nsyncState(): `SyncState`\n```\n\n----------------------------------------\n\nTITLE: Dry Running a Runtime Call\nDESCRIPTION: Simulates the execution of a runtime call without actually committing changes to state. Useful for estimating effects or gas/fee requirements.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.dryRunApi.dryRunCall(origin: AssetHubPolkadotRuntimeOriginCaller, call: AssetHubPolkadotRuntimeRuntimeCall): Result<XcmRuntimeApisDryRunCallDryRunEffects, XcmRuntimeApisDryRunError>\n```\n\n----------------------------------------\n\nTITLE: Querying Utility Batch Limit Constant\nDESCRIPTION: Constant that defines the maximum number of calls that can be included in a batch operation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.utility.batchedCallsLimit\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Set Minimum Commission\nDESCRIPTION: Sets the minimum amount of commission that each validator must maintain. Can be called by T::AdminOrigin or Root.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_161\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.setMinCommission(new)\n```\n\n----------------------------------------\n\nTITLE: Querying Parachain System Storage\nDESCRIPTION: Storage query interfaces for parachain system-level data including upgrade signals, validation data, and upward messages.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.parachainSystem.upgradeGoAhead(): Option<PolkadotPrimitivesV8UpgradeGoAhead>\napi.query.parachainSystem.upgradeRestrictionSignal(): Option<PolkadotPrimitivesV8UpgradeRestriction>\napi.query.parachainSystem.upwardDeliveryFeeFactor(): u128\napi.query.parachainSystem.upwardMessages(): Vec<Bytes>\napi.query.parachainSystem.validationData(): Option<PolkadotPrimitivesV8PersistedValidationData>\n```\n\n----------------------------------------\n\nTITLE: Querying Foreign Asset Details in Rust\nDESCRIPTION: Retrieves the details of a foreign asset using its location as the key.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\napi.query.foreignAssets.asset(assetLocation)\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Scale Validator Count\nDESCRIPTION: Scales up the ideal number of validators by a factor up to maximum of ElectionProviderBase::MaxWinners. Requires Root origin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_158\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.scaleValidatorCount(factor)\n```\n\n----------------------------------------\n\nTITLE: Querying Session Disabled Validators in Polkadot.js API\nDESCRIPTION: Retrieves indices of disabled validators. Returns a vector of u32 values, kept sorted for efficient binary search.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.session.disabledValidators\n```\n\n----------------------------------------\n\nTITLE: Multisig Event Interfaces\nDESCRIPTION: Event interfaces for multisig operations including execution and creation of new multisig transactions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.multisig.MultisigExecuted.is\napi.events.multisig.NewMultisig.is\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Configuration for Named Task in Polkadot-JS API\nDESCRIPTION: This function sets a retry configuration for a named task. It takes the task ID, number of retries, and retry period as parameters. The task will be retried in case of failure.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.scheduler.setRetryNamed(id: [u8;32], retries: u8, period: u32)\n```\n\n----------------------------------------\n\nTITLE: Detecting ExtrinsicFailed Event in Polkadot.js API\nDESCRIPTION: This snippet shows how to check if an event is an ExtrinsicFailed event from the system module. It includes parameters for the dispatch error and dispatch info.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.system.ExtrinsicFailed.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage Size in Polkadot JS API (TypeScript)\nDESCRIPTION: This method retrieves the storage size for a given key. It accepts a StorageKey and an optional BlockHash, returning a u64 value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetStorageSize(key: `StorageKey`, at?: `BlockHash`): `u64`\n```\n\n----------------------------------------\n\nTITLE: Query Slots Lease Storage\nDESCRIPTION: Interface for querying lease information stored for each parachain, including deposit amounts and lease periods.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.slots.leases\n```\n\n----------------------------------------\n\nTITLE: Generating Session Keys in Polkadot (TypeScript)\nDESCRIPTION: This function generates a set of session keys, optionally using the given seed. The keys are stored within the keystore exposed via runtime externalities. It returns the concatenated SCALE encoded public keys.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.sessionKeys.generateSessionKeys(seed: Option<Bytes>): Bytes\n```\n\n----------------------------------------\n\nTITLE: Event Interface Definition - Auctions Events\nDESCRIPTION: Interface definitions for auction-related events including auction start/close, bid acceptance, and fund management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.auctions.AuctionClosed.is\napi.events.auctions.AuctionStarted.is\napi.events.auctions.BidAccepted.is\napi.events.auctions.ReserveConfiscated.is\napi.events.auctions.Reserved.is\napi.events.auctions.Unreserved.is\napi.events.auctions.WinningOffset.is\n```\n\n----------------------------------------\n\nTITLE: Querying Para Inherent Storage in Polkadot.js API\nDESCRIPTION: Functions to query parachain inherent storage, including inclusion status and on-chain votes. These manage parachain-related data inherent to each block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paraInherent.included(): Option<Null>\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paraInherent.onChainVotes(): Option<PolkadotPrimitivesV8ScrapedOnChainVotes>\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidResponder Event in Rust for Polkadot XCM\nDESCRIPTION: This event is emitted when a query response is received but the origin location doesn't match the expected one. It includes the location, query ID, and optional expected location.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nInvalidResponder(`StagingXcmV4Location`, `u64`, `Option<StagingXcmV4Location>`)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supported Metadata Versions in Rust\nDESCRIPTION: Returns a vector of supported metadata versions. This can be used to call metadata_at_version.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nmetadataVersions(): `Vec<u32>`\n```\n\n----------------------------------------\n\nTITLE: Accessing fastUnstake Error Interfaces in Polkadot.js API\nDESCRIPTION: Defines error interfaces for the fastUnstake module in Polkadot.js API. These errors relate to issues with unstaking operations and account validations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fastUnstake.AlreadyHead.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fastUnstake.AlreadyQueued.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fastUnstake.CallNotAllowed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fastUnstake.NotController.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fastUnstake.NotFullyBonded.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fastUnstake.NotQueued.is\n```\n\n----------------------------------------\n\nTITLE: Registrar Module Error Interfaces\nDESCRIPTION: Error interfaces for the registrar module handling parachain registration, upgrades, and validation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.registrar.AlreadyRegistered.is\napi.errors.registrar.CannotDeregister.is\napi.errors.registrar.CannotDowngrade.is\napi.errors.registrar.CannotSwap.is\n```\n\n----------------------------------------\n\nTITLE: Handling Offences Events\nDESCRIPTION: Event interface for reporting offences that occur at specific session indexes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.offences.Offence.is\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Set Invulnerables\nDESCRIPTION: Sets the validators who cannot be slashed. Requires Root origin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_160\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.setInvulnerables(invulnerables)\n```\n\n----------------------------------------\n\nTITLE: Querying Vesting Module Storage in Polkadot.js\nDESCRIPTION: Examples of querying vesting-related storage items using Polkadot.js API. Includes interfaces for storage version and vesting information.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.vesting.storageVersion()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.vesting.vesting(accountId)\n```\n\n----------------------------------------\n\nTITLE: Vouching for Society Membership in Polkadot.js\nDESCRIPTION: This function allows a member to vouch for someone to join the society by placing a bid on their behalf. It requires no deposit but limits members to one vouching at a time. The function takes parameters for the candidate, total reward, and the voucher's tip.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_137\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.vouch(who: MultiAddress, value: u128, tip: u128)\n```\n\n----------------------------------------\n\nTITLE: Querying Substrate Storage Version Key Postfix\nDESCRIPTION: API interface for querying the storage key postfix used to store the StorageVersion per pallet in Substrate.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.substrate.storageVersionStorageKeyPostfix\n```\n\n----------------------------------------\n\nTITLE: Nudging Fellowship Referendum\nDESCRIPTION: Advances a referendum to its next logical state. Internal use only. Must be called with Root origin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipReferenda.nudgeReferendum(index)\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Set Staking Configs\nDESCRIPTION: Updates various staking configurations including bonds, validator/nominator counts, thresholds, and commission. Requires Root origin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_163\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.setStakingConfigs(min_nominator_bond, min_validator_bond, max_nominator_count, max_validator_count, chill_threshold, min_commission, max_staked_rewards)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Parameters\nDESCRIPTION: Sets the value of a runtime parameter. Requires AdminOrigin for the given key. Parameters can be deleted by setting them to None.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.parameters.setParameter(key_value)\n```\n\n----------------------------------------\n\nTITLE: Querying Metadata at Specific Version in Polkadot.js\nDESCRIPTION: Retrieves metadata for a given version. Returns None if the version is not supported. Use metadata_versions to find supported versions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.metadata.metadataAtVersion(version: u32): Option<OpaqueMetadata>\n```\n\n----------------------------------------\n\nTITLE: Transferring All Funds in NIS Counterpart Balances\nDESCRIPTION: Transfers the entire transferable balance from the caller account. Locked, reserved, or existential deposits are not transferred when keep_alive is true.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nisCounterpartBalances.transferAll(dest, keep_alive)\n```\n\n----------------------------------------\n\nTITLE: Accessing Multisig Module Errors in Polkadot.js API\nDESCRIPTION: Interface references for accessing error conditions related to multisignature operations in Polkadot.js API. These errors handle validation for multisig creation, approval, and execution processes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.AlreadyApproved.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.AlreadyStored.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.MaxWeightTooLow.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.MinimumThreshold.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.NoApprovalsNeeded.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.NotFound.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.NoTimepoint.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.NotOwner.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.SenderInSignatories.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.SignatoriesOutOfOrder.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.TooFewSignatories.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.TooManySignatories.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.UnexpectedTimepoint.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.multisig.WrongTimepoint.is\n```\n\n----------------------------------------\n\nTITLE: Scheduling Parachain Code Upgrade in Polkadot-JS API\nDESCRIPTION: This function schedules a parachain upgrade, initiating a validation check of the new code. It can be called by Root, the parachain, or the parachain manager if unlocked. Takes the para ID and new code as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.registrar.scheduleCodeUpgrade(para: u32, new_code: Bytes)\n```\n\n----------------------------------------\n\nTITLE: Payment API Endpoints\nDESCRIPTION: RPC methods for querying transaction fee information.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/rpc.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.payment.queryFeeDetails(extrinsic: Bytes, at?: BlockHash): FeeDetails\napi.rpc.payment.queryInfo(extrinsic: Bytes, at?: BlockHash): RuntimeDispatchInfoV1\n```\n\n----------------------------------------\n\nTITLE: Accessing Auctions Module Constants in Polkadot API\nDESCRIPTION: Examples of how to access constants from the auctions module using the Polkadot API. Includes constants for auction duration, lease periods, and sampling.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst endingPeriod = api.consts.auctions.endingPeriod;\nconst leasePeriodsPerSlot = api.consts.auctions.leasePeriodsPerSlot;\nconst sampleLength = api.consts.auctions.sampleLength;\nconst slotRangeCount = api.consts.auctions.slotRangeCount;\n```\n\n----------------------------------------\n\nTITLE: Reordering Voter List by Other in Polkadot.js API\nDESCRIPTION: This code snippet demonstrates how to move one account in front of another in the voter list using the Polkadot.js API. It can be called by anyone and takes the accounts to be reordered as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_200\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.voterList.putInFrontOfOther(heavier: MultiAddress, lighter: MultiAddress)\n```\n\n----------------------------------------\n\nTITLE: Contracts Module Error Interfaces\nDESCRIPTION: Error interfaces for the contracts module, handling various contract execution and management failures like duplicate contracts, gas limits, storage issues, and execution constraints.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.contracts.DuplicateContract.is\napi.errors.contracts.Indeterministic.is\napi.errors.contracts.InputForwarded.is\n// ... other contract errors\n```\n\n----------------------------------------\n\nTITLE: Validating Transactions in Polkadot (TypeScript)\nDESCRIPTION: This function validates a transaction. It is invoked by the transaction pool to learn details about a given transaction. The implementation should verify the correctness of the transaction against the current state.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.taggedTransactionQueue.validateTransaction(source: SpRuntimeTransactionValidityTransactionSource, tx: SpRuntimeUncheckedExtrinsic, block_hash: PrimitiveTypesH256): Result<SpRuntimeTransactionValidityValidTransaction, SpRuntimeTransactionValidityTransactionValidityError>\n```\n\n----------------------------------------\n\nTITLE: Kicking Society Candidate with kickCandidate\nDESCRIPTION: Removes a candidate's application from the society. Callable only by the Signed origin of the Founder, only after the voting period, and only when they don't have clear approval.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_129\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.kickCandidate(candidate)\n```\n\n----------------------------------------\n\nTITLE: Accessing Indices Module Errors in Polkadot.js API\nDESCRIPTION: Interface references for accessing error conditions related to account indices in Polkadot.js API. These errors handle validation and state checks for account index operations like assignment and transfers.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.indices.InUse.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.indices.NotAssigned.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.indices.NotOwner.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.indices.NotTransfer.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.indices.Permanent.is\n```\n\n----------------------------------------\n\nTITLE: Consensus Mechanism Error Interfaces\nDESCRIPTION: Error interfaces for BABE and BEEFY consensus mechanisms handling equivocation reports and configuration issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.babe.DuplicateOffenceReport.is\napi.errors.babe.InvalidConfiguration.is\napi.errors.babe.InvalidEquivocationProof.is\napi.errors.babe.InvalidKeyOwnershipProof.is\napi.errors.beefy.DuplicateOffenceReport.is\napi.errors.beefy.InvalidConfiguration.is\n```\n\n----------------------------------------\n\nTITLE: Using Childstate Methods in Polkadot.js API\nDESCRIPTION: This snippet demonstrates the childstate-related methods available in the Polkadot.js API for interacting with child storage, including getting keys, storage entries, and storage sizes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.childstate.getKeys(childKey: PrefixedStorageKey, prefix: StorageKey, at?: Hash): Vec<StorageKey>\napi.rpc.childstate.getKeysPaged(childKey: PrefixedStorageKey, prefix: StorageKey, count: u32, startKey?: StorageKey, at?: Hash): Vec<StorageKey>\napi.rpc.childstate.getStorage(childKey: PrefixedStorageKey, key: StorageKey, at?: Hash): Option<StorageData>\napi.rpc.childstate.getStorageEntries(childKey: PrefixedStorageKey, keys: Vec<StorageKey>, at?: Hash): Vec<Option<StorageData>>\napi.rpc.childstate.getStorageHash(childKey: PrefixedStorageKey, key: StorageKey, at?: Hash): Option<Hash>\napi.rpc.childstate.getStorageSize(childKey: PrefixedStorageKey, key: StorageKey, at?: Hash): Option<u64>\n```\n\n----------------------------------------\n\nTITLE: Authorizing a Runtime Upgrade in System Module\nDESCRIPTION: Authorizes an upgrade to a given code_hash for the runtime, with the runtime to be supplied later. This call requires Root origin and includes version checks to ensure spec name remains unchanged and spec version has increased.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_170\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.system.authorizeUpgrade(code_hash)\n```\n\n----------------------------------------\n\nTITLE: Querying Account Vesting Information\nDESCRIPTION: API interface for querying information regarding the vesting of a given account in the Vesting pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.vesting.vesting\n```\n\n----------------------------------------\n\nTITLE: Cancelling Retry Configuration for Named Task in Polkadot-JS API\nDESCRIPTION: This function cancels the retry configuration of a named task. It takes the task ID as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.scheduler.cancelRetryNamed(id: [u8;32])\n```\n\n----------------------------------------\n\nTITLE: Dry Run Operations for Calls and XCM in Rust\nDESCRIPTION: Functions to perform dry runs of calls and XCM programs without actually executing them. These are part of the dryRunApi.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\ndryRunCall(origin: AssetHubKusamaRuntimeOriginCaller, call: AssetHubKusamaRuntimeRuntimeCall): Result<XcmRuntimeApisDryRunCallDryRunEffects, XcmRuntimeApisDryRunError>\n```\n\nLANGUAGE: rust\nCODE:\n```\ndryRunXcm(origin_location: XcmVersionedLocation, xcm: XcmVersionedXcm): Result<XcmRuntimeApisDryRunXcmDryRunEffects, XcmRuntimeApisDryRunError>\n```\n\n----------------------------------------\n\nTITLE: Accessing Referenda Module Error: BadReferendum\nDESCRIPTION: Defines the interface for checking if an error is of type 'BadReferendum' in the referenda module. This error occurs when the referendum index provided is invalid in the given context.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.referenda.BadReferendum.is\n```\n\n----------------------------------------\n\nTITLE: Accessing NFT Fractionalization Constants in Polkadot.js\nDESCRIPTION: Demonstrates how to access constants from the nftFractionalization module via the Polkadot.js API. These constants define the deposit required for locking an NFT and the name and symbol for newly created assets.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.nftFractionalization.deposit\napi.consts.nftFractionalization.newAssetName\napi.consts.nftFractionalization.newAssetSymbol\n```\n\n----------------------------------------\n\nTITLE: Implementing pallet_balances::Config in Rust\nDESCRIPTION: Example of implementing the Config trait for the Balances pallet, showing two different ways to store account balances - using StorageMapShim or the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nimpl pallet_balances::Config for Runtime {\n  type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nimpl pallet_balances::Config for Runtime {\n  type AccountStore = System\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Upcoming Parachain Upgrades\nDESCRIPTION: Gets the list of upcoming code upgrades. Each item is a pair of which para performs a code upgrade and at which relay-chain block it is expected, ordered ascending by block number.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.upcomingUpgrades()\n```\n\n----------------------------------------\n\nTITLE: Initializing Block in Core API in Rust\nDESCRIPTION: Initializes a block with the given header and returns the runtime executive mode.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\napi.call.core.initializeBlock(header: SpRuntimeHeader): SpRuntimeExtrinsicInclusionMode\n```\n\n----------------------------------------\n\nTITLE: Querying Timestamp Module in Polkadot-js API\nDESCRIPTION: Interface patterns for accessing timestamp information about blocks in the Polkadot network using the Polkadot-js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.timestamp.didUpdate()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.timestamp.now()\n```\n\n----------------------------------------\n\nTITLE: Accessing grandpa Error Interfaces in Polkadot.js API\nDESCRIPTION: Defines error interfaces for the grandpa module in Polkadot.js API. These errors relate to GRANDPA consensus mechanism operations and validations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.ChangePending.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.DuplicateOffenceReport.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.InvalidEquivocationProof.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.InvalidKeyOwnershipProof.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.PauseFailed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.ResumeFailed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.grandpa.TooSoon.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Election Provider Multi-Phase Constants in Polkadot.js\nDESCRIPTION: Constants related to election provider multi-phase functionality including miner parameters, signed solution configurations, and offchain worker settings.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.electionProviderMultiPhase.minerMaxLength\napi.consts.electionProviderMultiPhase.minerMaxVotesPerVoter\napi.consts.electionProviderMultiPhase.minerMaxWeight\napi.consts.electionProviderMultiPhase.minerMaxWinners\napi.consts.electionProviderMultiPhase.minerTxPriority\n```\n\n----------------------------------------\n\nTITLE: Delegated Staking Error Interfaces\nDESCRIPTION: Error interfaces for delegated staking operations, handling staking conditions and reward management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.delegatedStaking.AlreadyStaking.is\napi.errors.delegatedStaking.BadState.is\napi.errors.delegatedStaking.InvalidDelegation.is\n```\n\n----------------------------------------\n\nTITLE: Defining Balances Endowed Event in Rust\nDESCRIPTION: Defines the Endowed event for the balances module. This event is emitted when an account is created with some free balance.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nEndowed(`AccountId32`, `u128`)\n```\n\n----------------------------------------\n\nTITLE: Querying Authorized Upgrade in System Pallet\nDESCRIPTION: API interface for querying whether a code upgrade has been authorized in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.authorizedUpgrade\n```\n\n----------------------------------------\n\nTITLE: Offchain Worker API Interface Definition\nDESCRIPTION: API definition for starting off-chain tasks for block headers.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\noffchainWorker(header: SpRuntimeHeader): Null\n```\n\n----------------------------------------\n\nTITLE: Detecting BatchCompleted Event in Utility Module\nDESCRIPTION: This snippet demonstrates how to check if an event is a BatchCompleted event in the utility module. It signifies that a batch of dispatches has completed fully without errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.utility.BatchCompleted.is\n```\n\n----------------------------------------\n\nTITLE: Querying Message Queue Service Head in Polkadot.js API\nDESCRIPTION: Retrieves the origin at which message queue servicing should begin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.messageQueue.serviceHead(): Option<CumulusPrimitivesCoreAggregateMessageOrigin>\n```\n\n----------------------------------------\n\nTITLE: Coretime Error Interfaces\nDESCRIPTION: Error interfaces for coretime operations including asset transfers and broker validation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.coretime.AssetTransferFailed.is\napi.errors.coretime.NotBroker.is\napi.errors.coretime.RequestedFutureRevenue.is\n```\n\n----------------------------------------\n\nTITLE: Converting Balance to Points in Nomination Pools\nDESCRIPTION: Converts a given balance of new funds to equivalent points for a specific nomination pool.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.nominationPoolsApi.balanceToPoints(pool_id: u32, new_funds: u128): u128\n```\n\n----------------------------------------\n\nTITLE: Setting Commission Claim Permission for a Pool in Polkadot-js API\nDESCRIPTION: Sets or removes a pool's commission claim permission. This determines who can claim the pool's pending commission. Only the Root role of the pool can configure these permissions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.setCommissionClaimPermission(pool_id, permission)\n```\n\n----------------------------------------\n\nTITLE: Coretime Events Interface Definitions\nDESCRIPTION: Event interfaces for core assignment and revenue information requests in the coretime module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.coretime.CoreAssigned.is\napi.events.coretime.RevenueInfoRequested.is\n```\n\n----------------------------------------\n\nTITLE: Exchanging Fellowship Member\nDESCRIPTION: Replaces an existing member with a new account while maintaining the same rank. Must be called by the ExchangeOrigin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipCollective.exchangeMember(who, new_who)\n```\n\n----------------------------------------\n\nTITLE: Swapping Parachains in Polkadot-JS API\nDESCRIPTION: This function swaps a lease holding parachain with another parachain. The origin must be Root, the para owner, or the para itself. Takes two para IDs as parameters. The swap occurs if there's an opposite pending swap.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.registrar.swap(id: u32, other: u32)\n```\n\n----------------------------------------\n\nTITLE: Querying Aura Slot Duration\nDESCRIPTION: Returns the configured slot duration for the Aura consensus mechanism. This value is typically set at genesis and determines the timing of block production slots.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.auraApi.slotDuration(): SpConsensusSlotsSlotDuration\n```\n\n----------------------------------------\n\nTITLE: Querying Authorship Storage in Polkadot/Kusama\nDESCRIPTION: Storage method for retrieving the author of the current block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.authorship.author(): Option<AccountId32>\n```\n\n----------------------------------------\n\nTITLE: Querying ToPolkadotXcmRouter Module Storage in Polkadot.js\nDESCRIPTION: Example of querying the bridge state in the ToPolkadotXcmRouter module using Polkadot.js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.toPolkadotXcmRouter.bridge()\n```\n\n----------------------------------------\n\nTITLE: Identifying TransactionFeePaid Event in TransactionPayment Module\nDESCRIPTION: This snippet shows how to check if an event is a TransactionFeePaid event in the transactionPayment module. It represents a transaction fee being paid by an account.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.transactionPayment.TransactionFeePaid.is\n```\n\n----------------------------------------\n\nTITLE: Starting Off-chain Worker in Rust\nDESCRIPTION: Initiates the off-chain task for a given block header.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\noffchainWorker(header: `SpRuntimeHeader`): `Null`\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Fellowship Poll\nDESCRIPTION: Removes votes from a completed poll. Anyone can call this for polls that have ended. Transaction fees are waived if successful. Limits the number of votes removed per call.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipCollective.cleanupPoll(poll_index, max)\n```\n\n----------------------------------------\n\nTITLE: Accessing Vesting Pallet Error Interfaces in Polkadot-js\nDESCRIPTION: Interface definitions for accessing error conditions from the Vesting pallet, covering issues with vesting schedules, parameters, and account status validation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.vesting.AmountLow.is\napi.errors.vesting.AtMaxVestingSchedules.is\napi.errors.vesting.InvalidScheduleParams.is\napi.errors.vesting.NotVesting.is\napi.errors.vesting.ScheduleIndexOutOfBounds.is\n```\n\n----------------------------------------\n\nTITLE: Generating Session Keys in Rust\nDESCRIPTION: Generates a set of session keys, optionally using a provided seed. Returns concatenated SCALE encoded public keys.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\ngenerateSessionKeys(seed: `Option<Bytes>`): `Bytes`\n```\n\n----------------------------------------\n\nTITLE: Querying Upgrade Restriction Signal in Paras Module\nDESCRIPTION: This method retrieves the upgrade restriction signal for a parachain. It returns an Option containing the upgrade restriction, which may indicate cooldown periods or maintenance restrictions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.upgradeRestrictionSignal(u32): Option<PolkadotPrimitivesV8UpgradeRestriction>\n```\n\n----------------------------------------\n\nTITLE: Querying Scheduler Lookup in Polkadot.js API\nDESCRIPTION: Lookup from a name to the block number and index of a scheduled task. The interface uses a 32-byte array as input and returns an optional tuple of two u32 values.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.scheduler.lookup\n```\n\n----------------------------------------\n\nTITLE: Council Error Interfaces\nDESCRIPTION: Error interfaces for the council module, handling proposal management, voting, and member-related issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.council.AlreadyInitialized.is\napi.errors.council.DuplicateProposal.is\napi.errors.council.DuplicateVote.is\n// ... other council errors\n```\n\n----------------------------------------\n\nTITLE: Killing Fellowship Referendum\nDESCRIPTION: Cancels an ongoing referendum and slashes the deposits. Must be called by the KillOrigin. Emits Killed and DepositSlashed events.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_29\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipReferenda.kill(index)\n```\n\n----------------------------------------\n\nTITLE: Society Module Error Interfaces\nDESCRIPTION: Error interfaces for the society module handling membership, voting, and organizational operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.society.AlreadyBid.is\napi.errors.society.AlreadyCandidate.is\napi.errors.society.AlreadyElevated.is\napi.errors.society.AlreadyFounded.is\n```\n\n----------------------------------------\n\nTITLE: Querying On-Chain Votes from ParaInherent Module\nDESCRIPTION: Query interface for accessing scraped on-chain data for extracting resolved disputes and backing votes. Returns an Option containing PolkadotPrimitivesV8ScrapedOnChainVotes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paraInherent.onChainVotes()\n```\n\n----------------------------------------\n\nTITLE: Validating Transactions in Rust\nDESCRIPTION: This function validates a transaction. It is invoked by the transaction pool to learn details about a given transaction. The implementation should verify the correctness of the transaction against the current state.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nvalidateTransaction(source: `SpRuntimeTransactionValidityTransactionSource`, tx: `SpRuntimeUncheckedExtrinsic`, block_hash: `PrimitiveTypesH256`): `Result<SpRuntimeTransactionValidityValidTransaction, SpRuntimeTransactionValidityTransactionValidityError>`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supported Metadata Versions in Polkadot.js\nDESCRIPTION: Returns a vector of supported metadata versions. This can be used to call metadata_at_version.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.metadata.metadataVersions(): Vec<u32>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connected Peers in Polkadot JS API (TypeScript)\nDESCRIPTION: This method returns the currently connected peers. It requires appropriate flags to be active and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\npeers(): `Vec<PeerInfo>`\n```\n\n----------------------------------------\n\nTITLE: Interacting with GRANDPA Consensus in Polkadot.js\nDESCRIPTION: This snippet shows RPC methods related to the GRANDPA consensus mechanism, including proving finality, querying round states, and subscribing to justifications.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.grandpa.proveFinality(blockNumber: BlockNumber): Option<EncodedFinalityProofs>\napi.rpc.grandpa.roundState(): ReportedRoundStates\napi.rpc.grandpa.subscribeJustifications(): JustificationNotification\n```\n\n----------------------------------------\n\nTITLE: Verifying ExtrinsicFailed Event in System Module\nDESCRIPTION: This snippet demonstrates how to check if an event is an ExtrinsicFailed event in the system module. It indicates that an extrinsic has failed to execute.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.system.ExtrinsicFailed.is\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Reap Stash\nDESCRIPTION: Removes all data structures for a staker/stash account that is considered 'dust' in the staking system. Can be called by anyone if the stash meets the requirements.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_155\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.reapStash(stash, num_slashing_spans)\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Version Notifiers\nDESCRIPTION: Retrieves information about locations that we have requested version notifications from. Takes parameters for version and location, returning an Option containing notification data.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.versionNotifiers(u32, XcmVersionedLocation)\n```\n\n----------------------------------------\n\nTITLE: Message Queue Query Methods\nDESCRIPTION: Storage queries for accessing message queue data including pages and service head tracking\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.messageQueue.pages(origin: CumulusPrimitivesCoreAggregateMessageOrigin, pageIndex: u32): Option<PalletMessageQueuePage>\napi.query.messageQueue.serviceHead(): Option<CumulusPrimitivesCoreAggregateMessageOrigin>\n```\n\n----------------------------------------\n\nTITLE: Deprecating Controller Accounts in Batch for Polkadot.js\nDESCRIPTION: This function updates a batch of controller accounts to their corresponding stash accounts if they are not the same. It ignores non-existent controllers and requires admin origin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_144\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.deprecateControllerBatch(controllers: Vec<AccountId32>)\n```\n\n----------------------------------------\n\nTITLE: GRANDPA Authority Configuration\nDESCRIPTION: Constants defining limits and settings for GRANDPA authorities including maximum authorities and nominators.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.grandpa.maxAuthorities\napi.consts.grandpa.maxNominators\napi.consts.grandpa.maxSetIdSessionEntries\n```\n\n----------------------------------------\n\nTITLE: Setting Current Time in Timestamp Module\nDESCRIPTION: Sets the current blockchain time. This call must be invoked exactly once per block and the timestamp must be greater than the previous one by the amount specified by MinimumPeriod. Origin must be None and dispatch class is Mandatory.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_180\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.timestamp.set(now)\n```\n\n----------------------------------------\n\nTITLE: Staking Module Error Interfaces\nDESCRIPTION: Interface definitions for staking-related errors in the Polkadot.js API, handling bonding, nomination, and validation issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.staking.AlreadyBonded.is\napi.errors.staking.AlreadyClaimed.is\napi.errors.staking.AlreadyPaired.is\napi.errors.staking.BadState.is\napi.errors.staking.BadTarget.is\napi.errors.staking.BoundNotMet.is\napi.errors.staking.CannotChillOther.is\napi.errors.staking.CannotRestoreLedger.is\napi.errors.staking.CommissionTooLow.is\n```\n\n----------------------------------------\n\nTITLE: Checking VersionChangeNotified Event in XCM Pallet\nDESCRIPTION: Interface for checking if an event is a VersionChangeNotified event from the XCM Pallet. This event indicates that an XCM version change notification message has been attempted to be sent, including the cost borne by the chain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.xcmPallet.VersionChangeNotified.is\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Code Without Verification\nDESCRIPTION: Sets new runtime code without performing any validation checks on the provided code. Note that runtime upgrades will not run if called with a non-increasing spec version.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_177\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.system.setCodeWithoutChecks(code)\n```\n\n----------------------------------------\n\nTITLE: Assets Error Interface\nDESCRIPTION: Interface definitions for errors in the assets module. These errors handle asset management scenarios like existence checks, permissions, and balance operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.assets.AlreadyExists.is\napi.errors.assets.AssetNotLive.is\napi.errors.assets.BadAssetId.is\n```\n\n----------------------------------------\n\nTITLE: Querying Parachain ID in Polkadot.js API\nDESCRIPTION: Retrieves the parachain ID.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.parachainInfo.parachainId(): u32\n```\n\n----------------------------------------\n\nTITLE: Polkadot XCM Event Interfaces\nDESCRIPTION: Event interfaces for cross-chain messaging operations including asset management and message execution.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.polkadotXcm.AssetsClaimed.is\napi.events.polkadotXcm.AssetsTrapped.is\napi.events.polkadotXcm.Attempted.is\n// ... and other XCM interfaces\n```\n\n----------------------------------------\n\nTITLE: Configuring System Parameters\nDESCRIPTION: API calls for setting various system-wide parameters including code sizes, message limits, and validation configurations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.configuration.setMaxCodeSize(new: u32)\napi.tx.configuration.setMaxDownwardMessageSize(new: u32)\napi.tx.configuration.setMaxHeadDataSize(new: u32)\napi.tx.configuration.setMaxPovSize(new: u32)\napi.tx.configuration.setMaxValidators(new: Option<u32>)\napi.tx.configuration.setMaxValidatorsPerCore(new: Option<u32>)\n```\n\n----------------------------------------\n\nTITLE: Fast Unstake Configuration\nDESCRIPTION: Constants for the fast unstake functionality, defining deposit requirements for unstaking operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.fastUnstake.deposit\n```\n\n----------------------------------------\n\nTITLE: Checking Parachains Module Initialization in Polkadot.js\nDESCRIPTION: This method checks whether the parachains modules have been initialized within the current block. It returns an option that semantically represents a boolean value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napi.query.initializer.hasInitialized()\n```\n\n----------------------------------------\n\nTITLE: OnDemand Order Events\nDESCRIPTION: Event interfaces for handling on-demand order placement and spot price updates.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.onDemand.OnDemandOrderPlaced.is\napi.events.onDemand.SpotPriceSet.is\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Version in Transaction Payment\nDESCRIPTION: API interface for querying the storage version of the Transaction Payment pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.transactionPayment.storageVersion\n```\n\n----------------------------------------\n\nTITLE: Querying Length to Fee Conversion in Rust\nDESCRIPTION: Converts a given length to a fee amount.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nqueryLengthToFee(length: `u32`): `u128`\n```\n\n----------------------------------------\n\nTITLE: Accessing Timestamp Pallet Constants in Polkadot.js API\nDESCRIPTION: Constants for the Timestamp pallet, including the minimum period between blocks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst minimumPeriod = api.consts.timestamp.minimumPeriod;\n```\n\n----------------------------------------\n\nTITLE: Polkadot XCM Error Interfaces\nDESCRIPTION: Error interfaces for the Polkadot XCM module managing cross-chain messaging and asset transfers\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.polkadotXcm.AccountNotSovereign.is\napi.errors.polkadotXcm.AlreadySubscribed.is\napi.errors.polkadotXcm.BadLocation.is\n```\n\n----------------------------------------\n\nTITLE: Accessing NFTs Error Interface in Polkadot.js API\nDESCRIPTION: Example of how to access the 'AlreadyClaimed' error interface from the nfts module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.nfts.AlreadyClaimed.is\n```\n\n----------------------------------------\n\nTITLE: Querying DMP Delivery Fee Factor in Polkadot.js\nDESCRIPTION: This function retrieves the factor used to multiply the base delivery fee for downward message passing (DMP). It takes a u32 parameter and returns a u128 value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.dmp.deliveryFeeFactor(u32): u128\n```\n\n----------------------------------------\n\nTITLE: NFT Fractionalization Event Interfaces\nDESCRIPTION: Event interfaces for NFT fractionalization operations including fractionalization and unification of NFTs.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.nftFractionalization.NftFractionalized.is\napi.events.nftFractionalization.NftUnified.is\n```\n\n----------------------------------------\n\nTITLE: Working with MMR API in Polkadot-js\nDESCRIPTION: Methods for Merkle Mountain Range (MMR) operations. Includes generating and verifying MMR proofs, retrieving the MMR root hash, and getting the count of MMR blocks in the chain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// Generate MMR proof for a series of block numbers\nconst proof = await api.call.mmrApi.generateProof(blockNumbers, bestKnownBlockNumber);\n\n// Get MMR leaf count\nconst leafCount = await api.call.mmrApi.mmrLeafCount();\n\n// Get on-chain MMR root hash\nconst root = await api.call.mmrApi.mmrRoot();\n\n// Verify MMR proof against on-chain MMR\nconst verified = await api.call.mmrApi.verifyProof(leaves, proof);\n\n// Verify MMR proof against given root hash\nconst verifiedStateless = await api.call.mmrApi.verifyProofStateless(root, leaves, proof);\n```\n\n----------------------------------------\n\nTITLE: Bidding for Society Entry with bid\nDESCRIPTION: Allows a user outside of the society to make a bid for entry. The group's Candidate Deposit will be reserved and returned when the bid becomes a member or calls unbid. Origin must be Signed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.bid(value)\n```\n\n----------------------------------------\n\nTITLE: Rendering Identicon Component in React Native\nDESCRIPTION: This snippet shows how to import and use the Identicon component from @polkadot/reactnative-identicon within a React component. It demonstrates passing an address and optional size prop to render an identity icon.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-identicon/react-native.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Identicon from '@polkadot/reactnative-identicon';\n\n...\nrender () {\n  // address is an ss58-encoded address or publicKey (hex string or Uint8Array)\n  const { address } = this.props;\n  // size (optional) is a number, indicating the size (in pixels, 64 as default)\n  const size = 32;\n\n  // standard className & style props are also available\n  return (\n    <Identicon\n      value={address}\n      size={size}\n    />\n  );\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing Uniques AlreadyExists Error in TypeScript\nDESCRIPTION: Interface for checking if an error is an AlreadyExists error in the Uniques module. This error indicates that the item ID has already been used for an item.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.uniques.AlreadyExists.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving RPC Methods in Polkadot.js API\nDESCRIPTION: Retrieves the list of RPC methods exposed by the node. This method is part of the rpc module and is accessed via api.rpc.rpc.methods.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nmethods(): RpcMethods\n```\n\n----------------------------------------\n\nTITLE: Founding Society with foundSociety\nDESCRIPTION: Creates a new society. Can only be done once. The origin must be from the FounderSetOrigin. Parameters include founder, max members, max intake, max strikes, candidate deposit, and rules.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_127\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.foundSociety(founder, max_members, max_intake, max_strikes, candidate_deposit, rules)\n```\n\n----------------------------------------\n\nTITLE: Starting Offchain Worker Task\nDESCRIPTION: Initiates the off-chain task for a given block header in the Polkadot runtime.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.offchainWorkerApi.offchainWorker(header: SpRuntimeHeader): Null\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bag Thresholds for Voter List in Polkadot.js API\nDESCRIPTION: This constant returns a vector of thresholds used to separate voters into different bags based on their scores. It is crucial for the semi-sorted iteration of voters in the system.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.voterList.bagThresholds\n```\n\n----------------------------------------\n\nTITLE: Accessing NIS Thaw Throttle Constant in Polkadot-JS API\nDESCRIPTION: Retrieves the maximum proportion which may be thawed and the period over which it is reset in the NIS pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst thawThrottle = api.consts.nis.thawThrottle;\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Fee Details in Rust\nDESCRIPTION: Retrieves detailed fee information for a given transaction.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nqueryFeeDetails(uxt: `SpRuntimeUncheckedExtrinsic`, len: `u32`): `PalletTransactionPaymentFeeDetails`\n```\n\n----------------------------------------\n\nTITLE: Adding Member to Fellowship Collective\nDESCRIPTION: Introduces a new member to the fellowship collective. Must be called by the AddOrigin. Takes the account address of the non-member who will become a member.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipCollective.addMember(who)\n```\n\n----------------------------------------\n\nTITLE: Setting HRMP Channel Parameters\nDESCRIPTION: API calls for configuring various HRMP (Horizontal Relay-routed Message Passing) channel parameters including message sizes, channel limits, and deposits.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.configuration.setHrmpChannelMaxMessageSize(new: u32)\napi.tx.configuration.setHrmpChannelMaxTotalSize(new: u32)\napi.tx.configuration.setHrmpMaxMessageNumPerCandidate(new: u32)\napi.tx.configuration.setHrmpMaxParachainInboundChannels(new: u32)\napi.tx.configuration.setHrmpMaxParachainOutboundChannels(new: u32)\napi.tx.configuration.setHrmpOpenRequestTtl(new: u32)\napi.tx.configuration.setHrmpRecipientDeposit(new: u128)\napi.tx.configuration.setHrmpSenderDeposit(new: u128)\n```\n\n----------------------------------------\n\nTITLE: BEEFY API Calls\nDESCRIPTION: Collection of BEEFY (Bridge Efficiency Enabling Finality Yielder) consensus related API calls including validator set management and equivocation reporting\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nbeefyGenesis(): Option<u32>\\nvalidatorSet(): Option<SpConsensusBeefyValidatorSet>\n```\n\n----------------------------------------\n\nTITLE: Accessing Alliance Motion Module Errors in Polkadot JS API\nDESCRIPTION: Examples of how to check for specific errors in the Alliance Motion module using the Polkadot JS API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.allianceMotion.AlreadyInitialized.is\napi.errors.allianceMotion.DuplicateProposal.is\napi.errors.allianceMotion.DuplicateVote.is\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Info in Rust\nDESCRIPTION: Retrieves dispatch information for a given transaction.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nqueryInfo(uxt: `SpRuntimeUncheckedExtrinsic`, len: `u32`): `PalletTransactionPaymentRuntimeDispatchInfo`\n```\n\n----------------------------------------\n\nTITLE: Accessing AssetRate Module Errors in Rust\nDESCRIPTION: Example of how to check for the 'AlreadyExists' error in the assetRate module using the Polkadot.js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\napi.errors.assetRate.AlreadyExists.is\n```\n\n----------------------------------------\n\nTITLE: Accessing NFT Fractionalization Error Interfaces in Polkadot.js API\nDESCRIPTION: This snippet shows how to access error interfaces for the nftFractionalization module in Polkadot.js API. It covers errors related to asset IDs, NFT existence, fractionalization status, and permissions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.nftFractionalization.IncorrectAssetId.is\napi.errors.nftFractionalization.NftNotFound.is\napi.errors.nftFractionalization.NftNotFractionalized.is\napi.errors.nftFractionalization.NoPermission.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Voter List Pallet Constants in Polkadot.js API\nDESCRIPTION: Constants for the Voter List pallet, including bag thresholds for voter sorting.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst bagThresholds = api.consts.voterList.bagThresholds;\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidQuerierVersion Event in Rust for Polkadot XCM\nDESCRIPTION: This event is emitted when an expected query response is received but the querier location cannot be decoded. It includes the location and query ID.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nInvalidQuerierVersion(`StagingXcmV4Location`, `u64`)\n```\n\n----------------------------------------\n\nTITLE: Applying Slash to Pool Member\nDESCRIPTION: Applies a pending slash on a pool member. Only works when StakeAdapter is of delegate strategy type. The pending slash amount must be at least the existential deposit.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.applySlash(member_account)\n```\n\n----------------------------------------\n\nTITLE: Accessing Call Type from Transaction in Polkadot.js API\nDESCRIPTION: Demonstrates how to access the Call type information from a transaction object without using createType in Polkadot.js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.create.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = await api.tx.balances.transfer(BOB, 12345);\nconsole.log('Hex = ', tx.method.toHex())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fee Information in Polkadot.js API (Deprecated)\nDESCRIPTION: Retrieves the fee information for an encoded extrinsic. This method is deprecated and it's recommended to use api.call.transactionPaymentApi.queryInfo instead.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.payment.queryInfo(extrinsic: Bytes, at?: BlockHash): RuntimeDispatchInfoV1\n```\n\n----------------------------------------\n\nTITLE: Conviction Voting Error Interfaces\nDESCRIPTION: Error interfaces for the conviction voting module, handling voting-related issues like delegation conflicts, vote limits, and permission checks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.convictionVoting.AlreadyDelegating.is\napi.errors.convictionVoting.AlreadyVoting.is\napi.errors.convictionVoting.BadClass.is\n// ... other voting errors\n```\n\n----------------------------------------\n\nTITLE: Checking Trie Migration Status in Polkadot JS API (TypeScript)\nDESCRIPTION: This method checks the current migration state. It requires appropriate flags to be active and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntrieMigrationStatus(at?: `BlockHash`): `MigrationStatusResult`\n```\n\n----------------------------------------\n\nTITLE: Accessing Scheduler Constants in Polkadot-JS API\nDESCRIPTION: Constants for the scheduler pallet, defining maximum weight and scheduled calls per block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst maximumWeight = api.consts.scheduler.maximumWeight;\nconst maxScheduledPerBlock = api.consts.scheduler.maxScheduledPerBlock;\n```\n\n----------------------------------------\n\nTITLE: Querying Substrate Module Storage in Polkadot.js\nDESCRIPTION: Examples of querying various storage items in the Substrate module using Polkadot.js API. Includes interfaces for default child storage key prefix, extrinsic index, heap pages, intrablock entropy, storage version key postfix, and transaction level key.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.substrate.defaultChildStorageKeyPrefix()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.substrate.extrinsicIndex()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.substrate.heapPages()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.substrate.intrablockEntropy()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.substrate.storageVersionStorageKeyPostfix()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.substrate.transactionLevelKey()\n```\n\n----------------------------------------\n\nTITLE: Dissolving Society with dissolve\nDESCRIPTION: Dissolves the society and removes all members. The origin must be Signed, and the signing account must be both the Founder and the Head, implying it can only be done when there is one member.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_125\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.dissolve()\n```\n\n----------------------------------------\n\nTITLE: Defining AccountsDestroyed Event in Rust for Pool Assets\nDESCRIPTION: This event is emitted when accounts are destroyed for a given asset. It includes the asset ID and the number of accounts destroyed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nAccountsDestroyed(`u32`, `u32`, `u32`)\n```\n\n----------------------------------------\n\nTITLE: Adding Reserved Peer in Polkadot JS API (TypeScript)\nDESCRIPTION: This method adds a reserved peer. It requires appropriate flags to be active and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\naddReservedPeer(peer: `Text`): `Text`\n```\n\n----------------------------------------\n\nTITLE: Building Genesis State\nDESCRIPTION: Builds a RuntimeGenesisConfig from a JSON blob and stores it in storage. Requires complete configuration with no defaults used.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.genesisBuilder.buildState(json: Bytes): Result<Null, Text>\n```\n\n----------------------------------------\n\nTITLE: Technical Committee Error Interface Examples\nDESCRIPTION: Error interfaces for committee operations including proposal and voting management\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.technicalCommittee.AlreadyInitialized.is\napi.errors.technicalCommittee.DuplicateProposal.is\napi.errors.technicalCommittee.NotMember.is\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Hash in Polkadot JS API (TypeScript)\nDESCRIPTION: This method retrieves the storage hash for a given key. It accepts a StorageKey and an optional BlockHash, returning a Hash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStorageHash(key: `StorageKey`, at?: `BlockHash`): `Hash`\n```\n\n----------------------------------------\n\nTITLE: Bounties Pallet Error Interfaces\nDESCRIPTION: Error interfaces for the bounties pallet, handling bounty-related operations like insufficient balance, invalid fees, and status checks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.bounties.HasActiveChildBounty.is\napi.errors.bounties.InsufficientProposersBalance.is\napi.errors.bounties.InvalidFee.is\napi.errors.bounties.InvalidIndex.is\napi.errors.bounties.InvalidValue.is\napi.errors.bounties.PendingPayout.is\napi.errors.bounties.Premature.is\napi.errors.bounties.ReasonTooBig.is\napi.errors.bounties.RequireCurator.is\napi.errors.bounties.TooManyQueued.is\napi.errors.bounties.UnexpectedStatus.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Backing Votes for Disputes\nDESCRIPTION: Gets backing votes stored for each dispute, used for slashing validators who violated consensus rules.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.parasDisputes.backersOnDisputes([paraId, disputeHash])\n```\n\n----------------------------------------\n\nTITLE: Getting Runtime Version in Core API in Rust\nDESCRIPTION: Returns the version of the runtime.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\napi.call.core.version(): SpVersionRuntimeVersion\n```\n\n----------------------------------------\n\nTITLE: System Maintenance Operations\nDESCRIPTION: RPC methods for system maintenance tasks including log filter management and sync state monitoring\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.system.resetLogFilter(): Null\napi.rpc.system.syncState(): SyncState\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Counter for Nominators in Polkadot.js API\nDESCRIPTION: Retrieves the counter for the related counted storage map. Returns a u32 value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.counterForNominators\n```\n\n----------------------------------------\n\nTITLE: Listing All Lease Holding Parachains\nDESCRIPTION: Gets all lease holding parachains, ordered ascending by ParaId. On-demand parachains are not included. Consider using the ParachainsCache type for modifications.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.parachains()\n```\n\n----------------------------------------\n\nTITLE: Querying Collator Selection Candidate List in Rust\nDESCRIPTION: Retrieves the list of community, limited collation candidates. This list is sorted in ascending order by deposit.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\napi.query.collatorSelection.candidateList()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Offchain Local Storage in Polkadot.js API\nDESCRIPTION: Gets offchain local storage under a given key and prefix. This method is only active with appropriate flags and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.offchain.localStorageGet(kind: StorageKind, key: Bytes): Option<Bytes>\n```\n\n----------------------------------------\n\nTITLE: Checking Upgrade Restriction Signal\nDESCRIPTION: Gets any restrictions for performing an upgrade for a parachain, which may be due to cooldown period or maintenance needs. This field is used by parachains via merkle storage proofs.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.upgradeRestrictionSignal(paraId)\n```\n\n----------------------------------------\n\nTITLE: Querying Runtime Version in Polkadot JS API (TypeScript)\nDESCRIPTION: This method retrieves the runtime version. It accepts an optional BlockHash parameter and returns a RuntimeVersion object.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetRuntimeVersion(at?: `BlockHash`): `RuntimeVersion`\n```\n\n----------------------------------------\n\nTITLE: Accessing Referenda Constants in Polkadot-JS API\nDESCRIPTION: Constants for the referenda pallet, including maximum queue size, submission deposit, tracks, and undeciding timeout.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst maxQueued = api.consts.referenda.maxQueued;\nconst submissionDeposit = api.consts.referenda.submissionDeposit;\nconst tracks = api.consts.referenda.tracks;\nconst undecidingTimeout = api.consts.referenda.undecidingTimeout;\n```\n\n----------------------------------------\n\nTITLE: Teleport Assets in XCM Pallet (Deprecated)\nDESCRIPTION: Deprecated method for teleporting assets between chains. Similar to limitedTeleportAssets but without weight limits, taking unlimited fees as needed from the specified asset.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_217\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.teleportAssets(dest: `XcmVersionedLocation`, beneficiary: `XcmVersionedLocation`, assets: `XcmVersionedAssets`, fee_asset_item: `u32`)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chain Properties in Polkadot JS API (TypeScript)\nDESCRIPTION: This method retrieves a custom set of properties as a JSON object, defined in the chain spec. It returns a ChainProperties object.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nproperties(): `ChainProperties`\n```\n\n----------------------------------------\n\nTITLE: Cancelling Named Scheduled Task in Polkadot-JS API\nDESCRIPTION: This function cancels a named scheduled task. It takes the task ID as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.scheduler.cancelNamed(id: [u8;32])\n```\n\n----------------------------------------\n\nTITLE: Accessing HRMP Module Errors in Polkadot.js API\nDESCRIPTION: Interface references for accessing error conditions related to HRMP (Horizontal Relay-routed Message Passing) channels in Polkadot.js API. These errors handle validation and state checks for HRMP channel operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.hrmp.OpenHrmpChannelAlreadyRequested.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.hrmp.OpenHrmpChannelCapacityExceedsLimit.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.hrmp.OpenHrmpChannelDoesntExist.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.hrmp.OpenHrmpChannelInvalidRecipient.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.hrmp.OpenHrmpChannelLimitExceeded.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.hrmp.OpenHrmpChannelMessageSizeExceedsLimit.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.hrmp.OpenHrmpChannelToSelf.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.hrmp.OpenHrmpChannelZeroCapacity.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.hrmp.OpenHrmpChannelZeroMessageSize.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.hrmp.WrongWitness.is\n```\n\n----------------------------------------\n\nTITLE: BEEFY Consensus API Calls in Polkadot Runtime\nDESCRIPTION: Provides functionality for BEEFY consensus including genesis block retrieval, ancestry proof generation, and equivocation reporting.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbeefyGenesis(): Option<u32>;\n\ngenerateAncestryProof(prev_block_number: u32, best_known_block_number: Option<u32>): Option<Bytes>;\n\ngenerateKeyOwnershipProof(set_id: u64, authority_id: SpConsensusBeefyEcdsaCryptoPublic): Option<Bytes>;\n\nsubmitReportDoubleVotingUnsignedExtrinsic(equivocation_proof: SpConsensusBeefyDoubleVotingProof, key_owner_proof: SpRuntimeOpaqueValue): Option<Null>;\n\nsubmitReportForkVotingUnsignedExtrinsic(equivocation_proof: SpConsensusBeefyForkVotingProofOpaqueValue, key_owner_proof: SpRuntimeOpaqueValue): Option<Null>\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Storage\nDESCRIPTION: Storage interfaces for historical data including session indices and stored ranges.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.historical.historicalSessions(u32): Option<(H256,u32)>\napi.query.historical.storedRange(): Option<(u32,u32)>\n```\n\n----------------------------------------\n\nTITLE: Claiming Rewards for Another Pool Member\nDESCRIPTION: Claims reward payouts on behalf of another pool member. The target member must have PermissionlessWithdraw or PermissionlessAll claim permission for this to succeed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.claimPayoutOther(other)\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot UI Keyring with API\nDESCRIPTION: Installation command for projects that already use @polkadot/api. Includes both the UI keyring and settings packages as peer dependencies.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-keyring/start/install.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @polkadot/ui-keyring @polkadot/ui-settings\n```\n\n----------------------------------------\n\nTITLE: Checking Upgrade Go-Ahead Signal\nDESCRIPTION: Gets the status of upgrade go-ahead signal used by the relay-chain to communicate to a parachain during the upgrade procedure. This value is reset once the parachain's block is included.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.upgradeGoAheadSignal(paraId)\n```\n\n----------------------------------------\n\nTITLE: Utility Module Error Interface\nDESCRIPTION: Error interface for the utility module handling batch call limitations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.utility.TooManyCalls.is\n```\n\n----------------------------------------\n\nTITLE: Accessing AuraExt Module Storage in Polkadot JS API\nDESCRIPTION: Methods to query the auraExt module, which caches authority information and tracks slot data for block production.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\napi.query.auraExt.authorities()\n```\n\n----------------------------------------\n\nTITLE: Accessing Vesting Pallet Constants in Polkadot.js API\nDESCRIPTION: Constants for the Vesting pallet, including max vesting schedules and minimum vested transfer.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst maxVestingSchedules = api.consts.vesting.maxVestingSchedules;\nconst minVestedTransfer = api.consts.vesting.minVestedTransfer;\n```\n\n----------------------------------------\n\nTITLE: Accessing Treasury Pallet Error Interfaces in Polkadot-js\nDESCRIPTION: Interface definitions for accessing error conditions from the Treasury pallet, handling issues related to proposal approval, spending limits, and payment processing.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.treasury.AlreadyAttempted.is\napi.errors.treasury.EarlyPayout.is\napi.errors.treasury.FailedToConvertBalance.is\napi.errors.treasury.Inconclusive.is\napi.errors.treasury.InsufficientPermission.is\napi.errors.treasury.InvalidIndex.is\napi.errors.treasury.NotAttempted.is\napi.errors.treasury.PayoutError.is\napi.errors.treasury.ProposalNotApproved.is\napi.errors.treasury.SpendExpired.is\napi.errors.treasury.TooManyApprovals.is\n```\n\n----------------------------------------\n\nTITLE: Initializer Control Function\nDESCRIPTION: Function for forcing approval of parachain blocks up to a specified relay chain block number in the consensus engine.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.initializer.forceApprove(up_to: u32)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authority Identifiers in Rust\nDESCRIPTION: This method fetches authority identifiers for the current and next authority set. It's part of the authorityDiscoveryApi module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nauthorities(): `Vec<SpAuthorityDiscoveryAppPublic>`\n```\n\n----------------------------------------\n\nTITLE: Clearing Parachain Leases with clearAllLeases\nDESCRIPTION: Clears all leases for a Para Id, refunding any deposits back to the original owners. The dispatch origin must match T::ForceOrigin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.slots.clearAllLeases(para)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Function Call with Custom Origin in Polkadot.js API\nDESCRIPTION: This code snippet demonstrates how to dispatch a function call with a provided origin using the Polkadot.js API. It requires root origin and takes the origin and call as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_190\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.utility.dispatchAs(as_origin: StagingKusamaRuntimeOriginCaller, call: Call)\n```\n\n----------------------------------------\n\nTITLE: Transferring Funds with Possible Account Death in NIS Counterpart Balances\nDESCRIPTION: Transfers some liquid free balance to another account. If the sender's account falls below the existential deposit, the account will be reaped.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nisCounterpartBalances.transferAllowDeath(dest, value)\n```\n\n----------------------------------------\n\nTITLE: Accessing fellowshipReferenda Error Interfaces in Polkadot.js API\nDESCRIPTION: Defines error interfaces for the fellowshipReferenda module in Polkadot.js API. These errors relate to referendum operations and validations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.BadReferendum.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.BadStatus.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.BadTrack.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.Full.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.HasDeposit.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.NoDeposit.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.NoPermission.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.NothingToDo.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.NotOngoing.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.NoTrack.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.PreimageNotExist.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.PreimageStoredWithDifferentLength.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.QueueEmpty.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipReferenda.Unfinished.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Slots Constants in Polkadot-JS API\nDESCRIPTION: Retrieves constants for the slots pallet, including lease offset and lease period.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst leaseOffset = api.consts.slots.leaseOffset;\nconst leasePeriod = api.consts.slots.leasePeriod;\n```\n\n----------------------------------------\n\nTITLE: Accessing On-Demand Assignment Provider Constants in Polkadot-JS API\nDESCRIPTION: Retrieves constants for the on-demand assignment provider, including maximum historical revenue, pallet ID, and default traffic value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst maxHistoricalRevenue = api.consts.onDemandAssignmentProvider.maxHistoricalRevenue;\nconst palletId = api.consts.onDemandAssignmentProvider.palletId;\nconst trafficDefaultValue = api.consts.onDemandAssignmentProvider.trafficDefaultValue;\n```\n\n----------------------------------------\n\nTITLE: Submitting Unsigned Solution for Election Provider Multi Phase\nDESCRIPTION: Transaction to submit an unsigned solution for the election provider's multi-phase process. This can only be called with no origin (similar to an inherent) and is validated on submission. Invalid solutions will cause a panic, risking the validator's authoring reward.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.electionProviderMultiPhase.submitUnsigned(raw_solution, witness)\n```\n\n----------------------------------------\n\nTITLE: Checking for NewSession Event in Polkadot.js API\nDESCRIPTION: This code demonstrates how to verify if an event is a NewSession event from the session module. The event includes a session index parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.session.NewSession.is\n```\n\n----------------------------------------\n\nTITLE: Asset Conversion Error Interface\nDESCRIPTION: Interface definitions for errors in the assetConversion module. These errors handle various scenarios like insufficient amounts, invalid pairs, and pool operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.assetConversion.AmountOneLessThanMinimal.is\napi.errors.assetConversion.AmountOutTooHigh.is\napi.errors.assetConversion.AmountTwoLessThanMinimal.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Multisig Constants in Polkadot.js\nDESCRIPTION: Shows how to access constants from the multisig module via the Polkadot.js API. These constants define the deposits required for multisig operations and the maximum number of allowed signatories.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.multisig.depositBase\napi.consts.multisig.depositFactor\napi.consts.multisig.maxSignatories\n```\n\n----------------------------------------\n\nTITLE: Submitting BEEFY Future Block Voting Report in Rust\nDESCRIPTION: Submits an unsigned extrinsic to report a future block voting equivocation. This method is only useful in an offchain context and returns None if creation of the extrinsic fails.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\napi.call.beefyApi.submitReportFutureBlockVotingUnsignedExtrinsic(equivocation_proof: SpConsensusBeefyFutureBlockVotingProof, key_owner_proof: SpRuntimeOpaqueValue): Option<Null>\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Data\nDESCRIPTION: API endpoints for querying historical session data and stored ranges.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.historical.historicalSessions(u32): Option<(H256,u32)>\napi.query.historical.storedRange(): Option<(u32,u32)>\n```\n\n----------------------------------------\n\nTITLE: Checking Member Delegation Migration Need\nDESCRIPTION: Determines if a pool member's delegated funds need migration to a new staking strategy.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.nominationPoolsApi.memberNeedsDelegateMigration(member: SpCoreCryptoAccountId32): bool\n```\n\n----------------------------------------\n\nTITLE: Accessing MultiBlockMigrations Module Errors in Polkadot-js API\nDESCRIPTION: Interface reference for error conditions in the multiBlockMigrations module, addressing ongoing migration issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.multiBlockMigrations.Ongoing.is\n```\n\n----------------------------------------\n\nTITLE: Generating Key Ownership Proof for BABE in Rust\nDESCRIPTION: This method generates a proof of key ownership for a given authority in the current epoch. It's used for submitting equivocation reports in the BABE consensus mechanism.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ngenerateKeyOwnershipProof(slot: `SpConsensusSlotsSlot`, authority_id: `SpConsensusBabeAppPublic`): `Option<Bytes>`\n```\n\n----------------------------------------\n\nTITLE: Removing Reserved Peer in Polkadot JS API (TypeScript)\nDESCRIPTION: This method removes a reserved peer. It requires appropriate flags to be active and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nremoveReservedPeer(peerId: `Text`): `Text`\n```\n\n----------------------------------------\n\nTITLE: Accessing VoterList Pallet Error Interface in Polkadot-js\nDESCRIPTION: Interface definition for accessing the error condition from the VoterList pallet, which identifies errors in the list interface implementation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.voterList.List.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local PeerId in Polkadot JS API (TypeScript)\nDESCRIPTION: This method returns the base58-encoded PeerId of the node.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nlocalPeerId(): `Text`\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from XCM Version Notifications in Polkadot.js API\nDESCRIPTION: This code snippet shows how to unsubscribe from XCM version notifications for a location using the Polkadot.js API. It requires an admin origin and takes the location as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_211\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.forceUnsubscribeVersionNotify(location: XcmVersionedLocation)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Whitelisted Call with Preimage in Polkadot.js API\nDESCRIPTION: This code snippet shows how to dispatch a whitelisted call with preimage using the Polkadot.js API. It takes the call as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_203\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.whitelist.dispatchWhitelistedCallWithPreimage(call: Call)\n```\n\n----------------------------------------\n\nTITLE: Defining Notified Event in Rust for Polkadot XCM\nDESCRIPTION: This event is emitted when a query response is received, the query is removed, and the registered notification is successfully dispatched and executed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nNotified(`u64`, `u8`, `u8`)\n```\n\n----------------------------------------\n\nTITLE: Decoding Session Keys in Rust\nDESCRIPTION: Decodes given public session keys and returns a list of public raw public keys and key types.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\ndecodeSessionKeys(encoded: `Bytes`): `Option<Vec<(Bytes,SpCoreCryptoKeyTypeId)>>`\n```\n\n----------------------------------------\n\nTITLE: Querying Session Queued Changed in Polkadot.js API\nDESCRIPTION: Checks if the underlying economic identities or weighting behind validators has changed in the queued validator set. Returns a boolean value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.session.queuedChanged\n```\n\n----------------------------------------\n\nTITLE: Election Provider Multi-Phase Constants\nDESCRIPTION: Constants related to the election provider multi-phase implementation including winner limits, miner configurations, and signed submission parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.electionProviderMultiPhase.maxWinners\napi.consts.electionProviderMultiPhase.minerMaxLength\napi.consts.electionProviderMultiPhase.minerMaxVotesPerVoter\napi.consts.electionProviderMultiPhase.minerMaxWeight\n```\n\n----------------------------------------\n\nTITLE: Querying Parachain System Aggregated Unincluded Segment in Polkadot.js API\nDESCRIPTION: Retrieves the aggregated unincluded segment tracker for the parachain system.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.parachainSystem.aggregatedUnincludedSegment(): Option<CumulusPalletParachainSystemUnincludedSegmentSegmentTracker>\n```\n\n----------------------------------------\n\nTITLE: Genesis Builder API Calls\nDESCRIPTION: API calls for building and managing genesis state configuration.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.genesisBuilder.buildState(json: Bytes): Result<Null, Text>\napi.call.genesisBuilder.getPreset(id: Option<Text>): Option<Bytes>\napi.call.genesisBuilder.presetNames(): Vec<Text>\n```\n\n----------------------------------------\n\nTITLE: Querying Vesting Module in Polkadot-js API\nDESCRIPTION: Interface patterns for accessing vesting schedule information for accounts through the Polkadot-js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.vesting.storageVersion()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.vesting.vesting(accountId)\n```\n\n----------------------------------------\n\nTITLE: Accessing Multisig Error Interface in Polkadot.js API\nDESCRIPTION: Example of how to access the 'AlreadyApproved' error interface from the multisig module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.multisig.AlreadyApproved.is\n```\n\n----------------------------------------\n\nTITLE: Checking SupportedVersionChanged Event in XCM Pallet\nDESCRIPTION: Interface for checking if an event is a SupportedVersionChanged event from the XCM Pallet. This event indicates that the supported version of a location has been changed, either through automatic notification or manual intervention.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.xcmPallet.SupportedVersionChanged.is\n```\n\n----------------------------------------\n\nTITLE: Building Genesis State in Genesis Builder API in Rust\nDESCRIPTION: Builds RuntimeGenesisConfig from a JSON blob without using any defaults and stores it in the storage. Returns an error if the JSON blob is incorrect or incomplete.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\napi.call.genesisBuilder.buildState(json: Bytes): Result<Null, Text>\n```\n\n----------------------------------------\n\nTITLE: Session Module Error Interfaces\nDESCRIPTION: Interface definitions for session-related errors in the Polkadot.js API, handling key management and validator association issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.session.DuplicatedKey.is\napi.errors.session.InvalidProof.is\napi.errors.session.NoAccount.is\napi.errors.session.NoAssociatedValidatorId.is\napi.errors.session.NoKeys.is\n```\n\n----------------------------------------\n\nTITLE: Utility Events Interface\nDESCRIPTION: Handles batch operation events and their completion status including errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.utility.BatchCompleted.is\napi.events.utility.BatchCompletedWithErrors.is\napi.events.utility.BatchInterrupted.is\n```\n\n----------------------------------------\n\nTITLE: Claiming Society Matured Payout with payout\nDESCRIPTION: Transfers the first matured payout for the sender and removes it from the records. Must be called multiple times to claim multiple matured payouts. Origin must be Signed and a member with payouts.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_130\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.payout()\n```\n\n----------------------------------------\n\nTITLE: Removing Whitelisted Call in Polkadot.js API\nDESCRIPTION: This code snippet demonstrates how to remove a whitelisted call using the Polkadot.js API. It takes the call hash as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_204\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.whitelist.removeWhitelistedCall(call_hash: H256)\n```\n\n----------------------------------------\n\nTITLE: Accessing System Pallet Constants in Polkadot.js API\nDESCRIPTION: Constants for the System pallet, including block hash count, block length, and SS58 prefix.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst blockHashCount = api.consts.system.blockHashCount;\nconst blockLength = api.consts.system.blockLength;\nconst ss58Prefix = api.consts.system.ss58Prefix;\n```\n\n----------------------------------------\n\nTITLE: Configuring Node-Specific Types for Edgeware in JavaScript\nDESCRIPTION: Shows how to use typesSpec to create node-specific type definitions. This example imports and applies Edgeware-specific types from an external package.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.extend.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IdentityTypes } from 'edgeware-node-types/dist/identity';\nimport { SignalingTypes } from 'edgeware-node-types/dist/signaling';\nimport { VotingTypes } from 'edgeware-node-types/dist/voting';\n\n...\nconst api = await ApiPromise.create({\n  ...,\n  typesSpec: {\n    edgeware: {\n      ...IdentityTypes,\n      ...SignalingTypes,\n      ...VotingTypes\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Cancelling Fellowship Referendum\nDESCRIPTION: Cancels an ongoing referendum. Must be called by the CancelOrigin. Emits a Cancelled event.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_28\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipReferenda.cancel(index)\n```\n\n----------------------------------------\n\nTITLE: Accessing NIS Counterpart Balances Module Errors in Polkadot.js API\nDESCRIPTION: Interface references for accessing error conditions related to the NIS Counterpart Balances module in Polkadot.js API. These errors handle validation for balance operations, transfers, and account management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nisCounterpartBalances.DeadAccount.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nisCounterpartBalances.DeltaZero.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nisCounterpartBalances.ExistentialDeposit.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nisCounterpartBalances.ExistingVestingSchedule.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nisCounterpartBalances.Expendability.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nisCounterpartBalances.InsufficientBalance.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nisCounterpartBalances.IssuanceDeactivated.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nisCounterpartBalances.LiquidityRestrictions.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nisCounterpartBalances.TooManyFreezes.is\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.nisCounterpartBalances.TooManyHolds.is\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Era Stakers Paged in Polkadot.js API\nDESCRIPTION: Retrieves paginated exposure of a validator at given era. Takes a tuple of u32, AccountId32, and u32 as input and returns an optional SpStakingExposurePage.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.erasStakersPaged\n```\n\n----------------------------------------\n\nTITLE: Claims Management API Calls\nDESCRIPTION: Functions for managing DOT claims including attestation, claiming tokens, and minting new claims. These APIs handle the claims process for DOT tokens.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.claims.attest(statement: Bytes)\n\napi.tx.claims.claim(dest: AccountId32, ethereum_signature: PolkadotRuntimeCommonClaimsEcdsaSignature)\n\napi.tx.claims.claimAttest(dest: AccountId32, ethereum_signature: PolkadotRuntimeCommonClaimsEcdsaSignature, statement: Bytes)\n\napi.tx.claims.mintClaim(who: EthereumAddress, value: u128, vesting_schedule: Option<(u128,u128,u32)>, statement: Option<PolkadotRuntimeCommonClaimsStatementKind>)\n\napi.tx.claims.moveClaim(old: EthereumAddress, new: EthereumAddress, maybe_preclaim: Option<AccountId32>)\n```\n\n----------------------------------------\n\nTITLE: Querying Triple RefCount Upgrade Status in System Pallet\nDESCRIPTION: API interface for querying whether the system has upgraded to use three types of RefCount in AccountInfo.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.upgradedToTripleRefCount\n```\n\n----------------------------------------\n\nTITLE: Child State RPC Methods\nDESCRIPTION: Methods for interacting with child storage states\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/rpc.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.childstate.getKeys(childKey: PrefixedStorageKey, prefix: StorageKey, at?: Hash): Vec<StorageKey>\napi.rpc.childstate.getKeysPaged(childKey: PrefixedStorageKey, prefix: StorageKey, count: u32, startKey?: StorageKey, at?: Hash): Vec<StorageKey>\napi.rpc.childstate.getStorage(childKey: PrefixedStorageKey, key: StorageKey, at?: Hash): Option<StorageData>\napi.rpc.childstate.getStorageEntries(childKey: PrefixedStorageKey, keys: Vec<StorageKey>, at?: Hash): Vec<Option<StorageData>>\napi.rpc.childstate.getStorageHash(childKey: PrefixedStorageKey, key: StorageKey, at?: Hash): Option<Hash>\napi.rpc.childstate.getStorageSize(childKey: PrefixedStorageKey, key: StorageKey, at?: Hash): Option<u64>\n```\n\n----------------------------------------\n\nTITLE: Core Runtime API Calls\nDESCRIPTION: Core runtime functionality including block execution, initialization, and version querying.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.core.executeBlock(block: SpRuntimeBlock): Null\napi.call.core.initializeBlock(header: SpRuntimeHeader): SpRuntimeExtrinsicInclusionMode\napi.call.core.version(): SpVersionRuntimeVersion\n```\n\n----------------------------------------\n\nTITLE: Genesis Builder API Methods\nDESCRIPTION: Methods for building and managing genesis state configuration.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nbuildState(json: Bytes): Result<Null, Text>\ngetPreset(id: Option<Text>): Option<Bytes>\npresetNames(): Vec<Text>\n```\n\n----------------------------------------\n\nTITLE: Removing Vesting Schedule in Polkadot.js API\nDESCRIPTION: This code snippet shows how to force remove a vesting schedule using the Polkadot.js API. It requires root origin and takes the target account and schedule index as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_193\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.vesting.forceRemoveVestingSchedule(target: MultiAddress, schedule_index: u32)\n```\n\n----------------------------------------\n\nTITLE: Retrieving BEEFY Validator Set in Rust\nDESCRIPTION: Returns the current active BEEFY validator set.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\napi.call.beefyApi.validatorSet(): Option<SpConsensusBeefyValidatorSet>\n```\n\n----------------------------------------\n\nTITLE: Accessing Session DuplicatedKey Error in TypeScript\nDESCRIPTION: Interface for checking if an error is a DuplicatedKey error in the Session module. This error indicates that a duplicate key has been registered.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.session.DuplicatedKey.is\n```\n\n----------------------------------------\n\nTITLE: Verifying XcmpMessageSent Event in Polkadot.js API\nDESCRIPTION: This snippet shows how to check if an event is an XcmpMessageSent event from the xcmpQueue module, indicating that an HRMP message was sent to a sibling parachain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.xcmpQueue.XcmpMessageSent.is\n```\n\n----------------------------------------\n\nTITLE: Authority Discovery API Call\nDESCRIPTION: Retrieves authority identifiers for current and next authority sets\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nauthorities(): Vec<SpAuthorityDiscoveryAppPublic>\n```\n\n----------------------------------------\n\nTITLE: Removing Society Bid with unbid\nDESCRIPTION: Allows a bidder to remove their bid for entry into society. This returns their candidate deposit or unvouches their voucher. Origin must be Signed and a bidder.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_134\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.unbid()\n```\n\n----------------------------------------\n\nTITLE: Dropping Failed Society Candidate with dropCandidate\nDESCRIPTION: Removes a candidate's failed application from the society. Callable by any signed origin but only at the end of the subsequent round and only for a candidate with more rejections than approvals.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_126\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.dropCandidate(candidate)\n```\n\n----------------------------------------\n\nTITLE: Checking Inherents in Block Builder API in Rust\nDESCRIPTION: Checks that the inherents are valid. The inherent data will vary from chain to chain.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\napi.call.blockBuilder.checkInherents(block: SpRuntimeBlock, data: SpInherentsInherentData): SpInherentsCheckInherentsResult\n```\n\n----------------------------------------\n\nTITLE: Querying Current Timestamp in TypeScript\nDESCRIPTION: Retrieves the current time for the current block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.timestamp.now()\n```\n\n----------------------------------------\n\nTITLE: Reserve Transfer Assets in XCM Pallet (Deprecated)\nDESCRIPTION: Deprecated method for transferring assets between chains through reserves. Similar to limitedReserveTransferAssets but without weight limits, taking unlimited fees as needed from the specified asset.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_215\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.xcmPallet.reserveTransferAssets(dest: `XcmVersionedLocation`, beneficiary: `XcmVersionedLocation`, assets: `XcmVersionedAssets`, fee_asset_item: `u32`)\n```\n\n----------------------------------------\n\nTITLE: Coretime Management Transaction Methods\nDESCRIPTION: API methods for managing coretime including core assignment, core count requests, and revenue management. These methods handle core scheduling and configuration.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.coretime.assignCore(core, begin, assignment, end_hint)\napi.tx.coretime.requestCoreCount(count)\napi.tx.coretime.requestRevenueAt(when)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Executor Parameters in Polkadot Parachain (TypeScript)\nDESCRIPTION: This function returns execution parameters for the specified session.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.parachainHost.sessionExecutorParams(session_index: u32): Option<PolkadotPrimitivesV8ExecutorParams>\n```\n\n----------------------------------------\n\nTITLE: Querying Fee Details in Polkadot.js API (Deprecated)\nDESCRIPTION: Queries the detailed fee of a given encoded extrinsic. This method is deprecated and it's recommended to use api.call.transactionPaymentApi.queryFeeDetails instead.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.payment.queryFeeDetails(extrinsic: Bytes, at?: BlockHash): FeeDetails\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Chill Threshold in Polkadot.js API\nDESCRIPTION: Retrieves the threshold for when users can start calling 'chill_other' for other validators/nominators. Returns an optional Percent value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.chillThreshold\n```\n\n----------------------------------------\n\nTITLE: Accessing Paras Unsigned Priority Constant in Polkadot-JS API\nDESCRIPTION: Retrieves the unsigned priority constant for the paras pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsignedPriority = api.consts.paras.unsignedPriority;\n```\n\n----------------------------------------\n\nTITLE: Accessing maxInboundSuspended Constant in Polkadot.js API\nDESCRIPTION: This constant defines the maximum number of inbound XCMP channels that can be suspended simultaneously. It's accessed through the Polkadot.js API and is of type u32.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/constants.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napi.consts.xcmpQueue.maxInboundSuspended\n```\n\n----------------------------------------\n\nTITLE: Checking Reference Count for Validation Code\nDESCRIPTION: Gets the number of references on the validation code in CodeByHash storage. Takes a code hash and returns a reference count.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.codeByHashRefs(codeHash)\n```\n\n----------------------------------------\n\nTITLE: System Events Interface\nDESCRIPTION: Defines system-level events including remarks and upgrade authorization tracking.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.system.Remarked.is\napi.events.system.UpgradeAuthorized.is\n```\n\n----------------------------------------\n\nTITLE: Auctions Extrinsic Methods\nDESCRIPTION: Methods for managing parachain auctions including bidding, creating new auctions and canceling existing ones. Includes functionality for parachain slot bidding and auction management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.auctions.bid(para, auction_index, first_slot, last_slot, amount)\napi.tx.auctions.cancelAuction()\napi.tx.auctions.newAuction(duration, lease_period_index)\n```\n\n----------------------------------------\n\nTITLE: XCMP Queue Error Interfaces\nDESCRIPTION: Error interfaces for the XCMP queue module handling cross-chain message passing.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.xcmpQueue.AlreadyResumed.is\napi.errors.xcmpQueue.AlreadySuspended.is\napi.errors.xcmpQueue.BadQueueConfig.is\napi.errors.xcmpQueue.TooBig.is\napi.errors.xcmpQueue.TooManyActiveOutboundChannels.is\n```\n\n----------------------------------------\n\nTITLE: Querying TransactionPayment Module Storage in Polkadot.js\nDESCRIPTION: Examples of querying transaction payment related storage items using Polkadot.js API. Includes interfaces for next fee multiplier and storage version.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.transactionPayment.nextFeeMultiplier()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.transactionPayment.storageVersion()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Examples in Shell\nDESCRIPTION: This snippet shows the shell commands to install dependencies and execute the examples within each folder of the project. It uses Yarn as the package manager.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/util-crypto/examples/intro.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn;\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Querying Treasury Spends\nDESCRIPTION: API interface for querying spends that have been approved and are being processed in the Treasury pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.spends\n```\n\n----------------------------------------\n\nTITLE: Querying Length to Fee Conversion in Polkadot.js\nDESCRIPTION: Converts transaction length to fee amount.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.transactionPaymentApi.queryLengthToFee(length: u32): u128\n```\n\n----------------------------------------\n\nTITLE: Resigning Society Candidacy with resignCandidacy\nDESCRIPTION: Removes the candidate's application from the society. Callable only by the candidate. Any bid deposit is lost and voucher is banned.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_132\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.resignCandidacy()\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Template Lookup Types in Rust\nDESCRIPTION: Customized implementation of account lookup mechanism and address format in Substrate node-template using IdentityLookup.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.extend.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n/// The lookup mechanism to get account ID from whatever is passed in dispatchers.\ntype Lookup = IdentityLookup<AccountId>;\n...\n/// The address format for describing accounts.\npub type Address = AccountId;\n```\n\n----------------------------------------\n\nTITLE: Refunding Submission Deposit for Referendum\nDESCRIPTION: Refunds the Submission Deposit for a closed referendum back to the depositor. Must be Signed or Root. Emits SubmissionDepositRefunded event.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipReferenda.refundSubmissionDeposit(index)\n```\n\n----------------------------------------\n\nTITLE: Querying Session and Substrate Storage\nDESCRIPTION: Core query interfaces for accessing session validator data and substrate runtime storage\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.session.currentIndex(): u32\napi.query.session.validators(): Vec<AccountId32>\napi.query.substrate.code(): Bytes\n```\n\n----------------------------------------\n\nTITLE: Starting Local Substrate Node\nDESCRIPTION: Command to start a local Substrate node in development mode for testing purposes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/intro.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstrate --dev\n```\n\n----------------------------------------\n\nTITLE: Querying Voter List Bags\nDESCRIPTION: API interface for querying a bag stored in storage in the Voter List pallet, containing head and tail pointers to itself.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.voterList.listBags\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter defining the page title and URL slug for documentation\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/intro.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Overview\nslug: /substrate\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Assets Created Event in Rust\nDESCRIPTION: Defines the Created event for the assets module. This event is emitted when a new asset class is created.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nCreated(`u32`, `AccountId32`, `AccountId32`)\n```\n\n----------------------------------------\n\nTITLE: Implementing Balances Config in Substrate Runtime\nDESCRIPTION: Example implementation of pallet_balances::Config trait showing two approaches for storing account balances - using StorageMapShim or System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nimpl pallet_balances::Config for Runtime {  type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>  }\n```\n\nLANGUAGE: rust\nCODE:\n```\nimpl pallet_balances::Config for Runtime {  type AccountStore = System  }\n```\n\n----------------------------------------\n\nTITLE: Claims Module Error Interfaces\nDESCRIPTION: Error interfaces for the claims module, including handling of signer claims and vested balance checks.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.claims.SignerHasNoClaim.is\napi.errors.claims.VestedBalanceExists.is\n```\n\n----------------------------------------\n\nTITLE: Collator Selection Error Interface\nDESCRIPTION: Interface definitions for errors in the collatorSelection module. These errors handle collator candidate management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.collatorSelection.AlreadyCandidate.is\n```\n\n----------------------------------------\n\nTITLE: Accessing ImOnline Module Errors in Polkadot-js API\nDESCRIPTION: Interface references for error conditions in the imOnline module, related to validator heartbeats and key validation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.imOnline.DuplicatedHeartbeat.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.imOnline.InvalidKey.is\n```\n\n----------------------------------------\n\nTITLE: Author RPC Methods\nDESCRIPTION: Methods for managing keys, extrinsics and session operations through the author interface\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/rpc.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.author.hasKey(publicKey: Bytes, keyType: Text): bool\napi.rpc.author.hasSessionKeys(sessionKeys: Bytes): bool\napi.rpc.author.insertKey(keyType: Text, suri: Text, publicKey: Bytes): Bytes\napi.rpc.author.pendingExtrinsics(): Vec<Extrinsic>\napi.rpc.author.removeExtrinsic(bytesOrHash: Vec<ExtrinsicOrHash>): Vec<Hash>\napi.rpc.author.rotateKeys(): Bytes\napi.rpc.author.submitAndWatchExtrinsic(extrinsic: Extrinsic): ExtrinsicStatus\napi.rpc.author.submitExtrinsic(extrinsic: Extrinsic): Hash\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Roles in Polkadot JS API (TypeScript)\nDESCRIPTION: This method returns the roles the node is running as. It returns a vector of NodeRole objects.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nnodeRoles(): `Vec<NodeRole>`\n```\n\n----------------------------------------\n\nTITLE: NIS Counterpart Balance Operations\nDESCRIPTION: API endpoint for burning liquid free balance from accounts with special handling for existential deposits.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nisCounterpartBalances.burn(value, keep_alive)\n```\n\n----------------------------------------\n\nTITLE: Parachain System Error Interfaces\nDESCRIPTION: Error interfaces for the Parachain System module handling validation function upgrades and configuration\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.parachainSystem.HostConfigurationNotAvailable.is\napi.errors.parachainSystem.NothingAuthorized.is\napi.errors.parachainSystem.NotScheduled.is\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Substrate Node in Development Mode\nDESCRIPTION: This command starts a local Substrate node in development mode, which is convenient for testing the ApiRx examples.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/rxjs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubstrate --dev\n```\n\n----------------------------------------\n\nTITLE: Querying Safe XCM Version in XCM Pallet\nDESCRIPTION: API interface for querying the default version to encode XCM when latest version of destination is unknown in the XCM pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.safeXcmVersion\n```\n\n----------------------------------------\n\nTITLE: Querying Message Queue Book State in Rust\nDESCRIPTION: Retrieves the index of the first and last (non-empty) pages for a given message origin in the message queue.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\napi.query.messageQueue.bookStateFor(origin)\n```\n\n----------------------------------------\n\nTITLE: Defining AssetConversion LiquidityAdded Event in Rust\nDESCRIPTION: Defines the LiquidityAdded event for the assetConversion module. This event is emitted when liquidity is successfully added to a pool.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nLiquidityAdded(`AccountId32`, `AccountId32`, `(StagingXcmV4Location,StagingXcmV4Location)`, `u128`, `u128`, `u32`, `u128`)\n```\n\n----------------------------------------\n\nTITLE: Querying Message Queue Module Storage in Polkadot JS API\nDESCRIPTION: Method to access the message queue state information for aggregate message origins.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\napi.query.messageQueue.bookStateFor(origin)\n```\n\n----------------------------------------\n\nTITLE: Generating Sync Spec in Polkadot.js API\nDESCRIPTION: Returns the JSON-serialized chainspec running the node, with a sync state. This method is part of the syncstate module and is accessed via api.rpc.syncstate.genSyncSpec.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ngenSyncSpec(raw: bool): Json\n```\n\n----------------------------------------\n\nTITLE: Voting in Fellowship Poll\nDESCRIPTION: Adds an aye or nay vote from a member to an ongoing poll. Transaction fees are waived for first-time votes on a proposal. Subsequent vote changes will incur fees.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipCollective.vote(poll, aye)\n```\n\n----------------------------------------\n\nTITLE: Comparing Type Creation Methods in Polkadot.js API\nDESCRIPTION: Illustrates different methods of creating types in Polkadot.js API, including using api.createType, registry.createType, and the low-level createType function.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.create.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createType } from '@polkadot/types';\n\n// via API (recommended)\napi.createType('Balance', 123);\n\n// via registry (`.registry` is on all API and Codec objects)\napi.registry.createType('Balance', 123n);\n\n// via the low-level approach (not recommended)\ncreateType(api.registry, 'Balance', '123');\n```\n\n----------------------------------------\n\nTITLE: Removing Storage with Prefix in System Module\nDESCRIPTION: Removes all storage items with keys starting with the given prefix. Requires Root origin to provide the number of subkeys under the prefix for accurate weight calculation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_172\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.system.killPrefix(prefix, subkeys)\n```\n\n----------------------------------------\n\nTITLE: Setting Account Balance in NIS Counterpart Balances\nDESCRIPTION: Sets the regular balance of a given account. This function can only be called by an account with root privileges.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nisCounterpartBalances.forceSetBalance(who, new_free)\n```\n\n----------------------------------------\n\nTITLE: Fellowship Referenda Settings\nDESCRIPTION: Configuration constants for the fellowship referenda system including alarm intervals, queue limits, and submission requirements.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.fellowshipReferenda.alarmInterval\napi.consts.fellowshipReferenda.maxQueued\napi.consts.fellowshipReferenda.submissionDeposit\n```\n\n----------------------------------------\n\nTITLE: Refunding Decision Deposit for Referendum\nDESCRIPTION: Refunds the Decision Deposit for a closed referendum back to the depositor. Must be Signed or Root. Emits DecisionDepositRefunded event.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipReferenda.refundDecisionDeposit(index)\n```\n\n----------------------------------------\n\nTITLE: Querying Asset Traps in XCM Pallet\nDESCRIPTION: API interface for querying existing asset traps in the XCM pallet. The key is the blake2 256 hash of (origin, versioned Assets) pair.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmPallet.assetTraps\n```\n\n----------------------------------------\n\nTITLE: Getting Current GRANDPA Set ID in GRANDPA API in Rust\nDESCRIPTION: Returns the current GRANDPA authority set id.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\napi.call.grandpaApi.currentSetId(): u64\n```\n\n----------------------------------------\n\nTITLE: Querying Block Weight in System Pallet\nDESCRIPTION: API interface for querying the current weight for the block in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.blockWeight\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Counter for Virtual Stakers in Polkadot.js API\nDESCRIPTION: Retrieves the counter for the related counted storage map. Returns a u32 value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.counterForVirtualStakers\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Option Types in Polkadot.js API\nDESCRIPTION: Shows how to unwrap an Option type and create a default Balance value using api.createType when the Option is None.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.create.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// type import for TypeScript\nimport type { Balance } from '@polkadot/types/interfaces';\n\n...\n// unwrap out option into a zero Balance when not found\n// (This can be done via `.unwrapOrDefault()`, which does the same underlying)\nconst balance: Balance = balanceOpt.unwrapOr(api.createType('Balance'));\n```\n\n----------------------------------------\n\nTITLE: Querying Treasury Proposal Count\nDESCRIPTION: API interface for querying the number of proposals that have been made in the Treasury pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.proposalCount\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Validation Code Hash for Parachain\nDESCRIPTION: Gets the validation code hash of a live para. The corresponding code can be retrieved with CodeByHash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.currentCodeHash(paraId)\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack 4 for import.meta.url Support\nDESCRIPTION: Configuration snippet for adding import.meta.url support in Webpack 4 using @open-wc/webpack-import-meta-loader. This resolves package location determination issues in ESM environments.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/usage/FAQ.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule: {\n  rules: [\n    {\n      test: /\\.js$/,\n      loader: require.resolve('@open-wc/webpack-import-meta-loader'),\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Tuples in Polkadot.js\nDESCRIPTION: Shows how to destructure and work with tuple values in Polkadot.js API. Demonstrates accessing individual elements of a tuple containing a count and account ID.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.basics.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Assuming a tuple defined as `(32, AccountId)`\nconst [count, accountId] = tuple;\n\nconsole.log(`${accountId} has ${count.toNumber()} values`);\n```\n\n----------------------------------------\n\nTITLE: Querying Extrinsic Count in System Pallet\nDESCRIPTION: API interface for querying the total extrinsics count for the current block in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.extrinsicCount\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Level Key in Substrate\nDESCRIPTION: API interface for querying the key that holds the current number of active layers in Substrate transactions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.substrate.transactionLevelKey\n```\n\n----------------------------------------\n\nTITLE: Checking VersionMigrationFinished Event in XCM Pallet\nDESCRIPTION: Interface for checking if an event is a VersionMigrationFinished event from the XCM Pallet. This event signals that an XCM version migration has completed.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.xcmPallet.VersionMigrationFinished.is\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Examples for Polkadot.js Keyring (Shell)\nDESCRIPTION: This shell command installs the necessary dependencies and executes the example script for each keyring usage example in Polkadot.js. It should be run from within each example folder.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/examples/intro.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn;\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Finalizing Block in Block Builder API in Rust\nDESCRIPTION: Finishes the current block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\napi.call.blockBuilder.finalizeBlock(): SpRuntimeHeader\n```\n\n----------------------------------------\n\nTITLE: Querying Voter List Nodes\nDESCRIPTION: API interface for querying a single node within a bag in the Voter List pallet, storing links forward and back within their respective bags.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.voterList.listNodes\n```\n\n----------------------------------------\n\nTITLE: Waiving Repayment in Society Module for Polkadot.js\nDESCRIPTION: This function allows waiving the repayment previously given to a member, removes pending payments, and elevates them from rank 0 to rank 1. It takes the amount to be waived as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_138\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.waiveRepay(amount: u128)\n```\n\n----------------------------------------\n\nTITLE: Accessing Society Pallet Constants in Polkadot.js API\nDESCRIPTION: Constants for the Society pallet, including pallet ID, period spend, and voting period.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst palletId = api.consts.society.palletId;\nconst periodSpend = api.consts.society.periodSpend;\nconst votingPeriod = api.consts.society.votingPeriod;\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Information in ParaSessionInfo Module\nDESCRIPTION: This query retrieves session information for a given session index. It returns an Option containing detailed session info within a rolling window of sessions.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paraSessionInfo.sessions(u32): Option<PolkadotPrimitivesV8SessionInfo>\n```\n\n----------------------------------------\n\nTITLE: Verifying MMR Proof in Polkadot.js API\nDESCRIPTION: Verifies an MMR proof. It takes an MmrLeafBatchProof as a parameter and returns a boolean indicating the verification result.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.mmr.verifyProof(proof: MmrLeafBatchProof): bool\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upcoming Parachain Genesis Arguments\nDESCRIPTION: Gets upcoming paras instantiation arguments. After PVF pre-checking is enabled, the para genesis arg will have its code set to empty, with the code saved into the storage via CodeByHash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.upcomingParasGenesis(paraId)\n```\n\n----------------------------------------\n\nTITLE: Verifying Claims Module Errors in Rust\nDESCRIPTION: Example of how to check for the 'InvalidEthereumSignature' error in the claims module using the Polkadot.js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\napi.errors.claims.InvalidEthereumSignature.is\n```\n\n----------------------------------------\n\nTITLE: Querying Total Extrinsics Length in System Pallet\nDESCRIPTION: API interface for querying the total length in bytes for all extrinsics in the current block in the System pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.system.allExtrinsicsLen\n```\n\n----------------------------------------\n\nTITLE: Punishing Society Skeptic with punishSkeptic\nDESCRIPTION: Punishes a skeptic with a strike if they did not vote on a candidate. Callable by the candidate.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_131\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.punishSkeptic()\n```\n\n----------------------------------------\n\nTITLE: Accessing Utility Pallet Error Interface in Polkadot-js\nDESCRIPTION: Interface definition for accessing the error condition from the Utility pallet, which handles cases where too many calls are batched together.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\napi.errors.utility.TooManyCalls.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Registrar Constants in Polkadot-JS API\nDESCRIPTION: Retrieves constants for the registrar pallet, including data deposit per byte and para deposit.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataDepositPerByte = api.consts.registrar.dataDepositPerByte;\nconst paraDeposit = api.consts.registrar.paraDeposit;\n```\n\n----------------------------------------\n\nTITLE: Processing One Fewer Deciding Referendum\nDESCRIPTION: Updates the system when there's one fewer referendum in the deciding phase. Either begins deciding another referendum or decrements the DecidingCount. Internal use only.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipReferenda.oneFewerDeciding(track)\n```\n\n----------------------------------------\n\nTITLE: Accessing MessageQueue Module Errors in Polkadot-js API\nDESCRIPTION: Interface references for error conditions in the messageQueue module, handling message processing, queueing, and execution errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.messageQueue.AlreadyProcessed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.messageQueue.InsufficientWeight.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.messageQueue.NoMessage.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.messageQueue.NoPage.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.messageQueue.NotReapable.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.messageQueue.Queued.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.messageQueue.QueuePaused.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.messageQueue.RecursiveDisallowed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.messageQueue.TemporarilyUnprocessable.is\n```\n\n----------------------------------------\n\nTITLE: Querying Vesting Storage Version\nDESCRIPTION: API interface for querying the storage version of the Vesting pallet. New networks start with the latest version.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.vesting.storageVersion\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slots Constants in Polkadot-JS API\nDESCRIPTION: Constants for the slots pallet, including lease offset and period.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst leaseOffset = api.consts.slots.leaseOffset;\nconst leasePeriod = api.consts.slots.leasePeriod;\n```\n\n----------------------------------------\n\nTITLE: Transaction Storage Error Interface Examples\nDESCRIPTION: Error interfaces for transaction storage operations and proof verification\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.transactionStorage.BadContext.is\napi.errors.transactionStorage.InvalidProof.is\napi.errors.transactionStorage.MissingProof.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Utility Pallet Constants in Polkadot.js API\nDESCRIPTION: Constants for the Utility pallet, including the limit on the number of batched calls.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst batchedCallsLimit = api.consts.utility.batchedCallsLimit;\n```\n\n----------------------------------------\n\nTITLE: Accessing Lottery Module Errors in Polkadot-js API\nDESCRIPTION: Interface references for error conditions in the lottery module, covering lottery participation, configuration, and call validation issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.lottery.AlreadyEnded.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.lottery.AlreadyParticipating.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.lottery.EncodingFailed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.lottery.InProgress.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.lottery.InvalidCall.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.lottery.NotConfigured.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.lottery.TooManyCalls.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Minimum Vested Transfer Constant in Polkadot.js API\nDESCRIPTION: This constant represents the minimum amount that can be transferred using the vested_transfer function. It is accessed through the Polkadot.js API interface.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.vesting.minVestedTransfer\n```\n\n----------------------------------------\n\nTITLE: Querying Whitelist Module in Polkadot-js API\nDESCRIPTION: Interface pattern for accessing whitelist information for calls through the Polkadot-js API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.whitelist.whitelistedCall(hash)\n```\n\n----------------------------------------\n\nTITLE: Validating Transaction in Rust\nDESCRIPTION: Validates a transaction against the current state. Used by the transaction pool to verify transaction correctness.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nvalidateTransaction(source: `SpRuntimeTransactionValidityTransactionSource`, tx: `SpRuntimeUncheckedExtrinsic`, block_hash: `PrimitiveTypesH256`): `Result<SpRuntimeTransactionValidityValidTransaction, SpRuntimeTransactionValidityTransactionValidityError>`\n```\n\n----------------------------------------\n\nTITLE: Clearing Offchain Local Storage in Polkadot.js API\nDESCRIPTION: Clears offchain local storage under a given key and prefix. This method is only active with appropriate flags and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.offchain.localStorageClear(kind: StorageKind, key: Bytes): Null\n```\n\n----------------------------------------\n\nTITLE: Accessing maxPageSize Constant in Polkadot.js API\nDESCRIPTION: This constant specifies the maximal page size for HRMP message pages. It's a hard limit used for PoV worst-case benchmarking and is accessed through the Polkadot.js API as a u32 value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/constants.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napi.consts.xcmpQueue.maxPageSize\n```\n\n----------------------------------------\n\nTITLE: Querying Whitelisted Calls\nDESCRIPTION: API interface for querying whitelisted calls in the Whitelist pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.whitelist.whitelistedCall\n```\n\n----------------------------------------\n\nTITLE: Cancelling Anonymously Scheduled Task in Polkadot-JS API\nDESCRIPTION: This function cancels an anonymously scheduled task. It takes the block number and task index as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.scheduler.cancel(when: u32, index: u32)\n```\n\n----------------------------------------\n\nTITLE: Account Indices Management Functions\nDESCRIPTION: Functions for managing account indices including claiming, transferring, and freezing indices. These operations handle deposit management and index assignments.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.indices.claim(index: u32)\napi.tx.indices.forceTransfer(new: MultiAddress, index: u32, freeze: bool)\napi.tx.indices.free(index: u32)\napi.tx.indices.freeze(index: u32)\napi.tx.indices.transfer(new: MultiAddress, index: u32)\n```\n\n----------------------------------------\n\nTITLE: Rendering Polkadot Identicon in Vue Component\nDESCRIPTION: This snippet demonstrates how to use the @polkadot/vue-identicon component within a Vue template. It shows the component usage with various props including size, theme, and value (address). The script section imports the component and registers it for use.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/ui-identicon/vue.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <Identicon\n    :size=\"128\"\n    :theme=\"'polkadot'\"\n    :value=\"'5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY'\"\n  />\n</template>\n\n<script>\n  import Identicon from '@polkadot/vue-identicon';\n\n  export default {\n    ...\n    components: { Identicon }\n    ...\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving XCMP Signal Messages in Polkadot.js API\nDESCRIPTION: Query method to fetch any signal messages waiting to be sent for a specific parachain. Takes a u32 parameter representing the parachain ID and returns the pending signal messages as Bytes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmpQueue.signalMessages(parachainId)\n```\n\n----------------------------------------\n\nTITLE: Tracing Block Execution in Polkadot JS API (TypeScript)\nDESCRIPTION: This method provides a way to trace the re-execution of a single block. It requires appropriate flags to be active and is considered unsafe.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntraceBlock(block: `Hash`, targets: `Option<Text>`, storageKeys: `Option<Text>`, methods: `Option<Text>`): `TraceBlockResponse`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Start Block\nDESCRIPTION: Gets the block number where the session start occurred, used to track how many group rotations have occurred. Session changes are enacted at the block following the session change.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paraScheduler.sessionStartBlock()\n```\n\n----------------------------------------\n\nTITLE: Ethereum Compatibility RPC Methods\nDESCRIPTION: Defines Ethereum-compatible JSON-RPC methods for interacting with EVM functionality.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/rpc.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accounts\": {\n    \"interface\": \"api.rpc.eth.accounts\",\n    \"jsonrpc\": \"eth_accounts\",\n    \"params\": [],\n    \"returns\": \"Vec<H160>\"\n  },\n  \"call\": {\n    \"interface\": \"api.rpc.eth.call\",\n    \"jsonrpc\": \"eth_call\",\n    \"params\": [\"request: EthCallRequest\", \"number?: BlockNumber\"],\n    \"returns\": \"Bytes\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Development Accounts with Substrate Keyring\nDESCRIPTION: Demonstrates how to create pre-funded development accounts using sr25519 cryptography with hard derivation paths. These accounts are derived from a known mnemonic used in development chains.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/suri.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sr25519 keyring\nconst keyring = new Keyring({ type: 'sr25519' });\n\n// our default dev addresses with hard derivation\n// (no mnemonic, defaulted to known)\nconsole.log(keyring.createFromUri('//Alice').address);\nconsole.log(keyring.createFromUri('//Bob').address);\nconsole.log(keyring.createFromUri('//Charlie').address);\nconsole.log(keyring.createFromUri('//Dave').address);\nconsole.log(keyring.createFromUri('//Eve').address);\nconsole.log(keyring.createFromUri('//Ferdie').address);\n```\n\n----------------------------------------\n\nTITLE: Querying Timestamp Module Storage in Polkadot.js\nDESCRIPTION: Examples of querying timestamp-related storage items using Polkadot.js API. Includes interfaces for checking if timestamp has been updated and getting the current block time.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.timestamp.didUpdate()\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.timestamp.now()\n```\n\n----------------------------------------\n\nTITLE: Fetching PVFs Requiring Pre-check in Polkadot Parachain (TypeScript)\nDESCRIPTION: This function returns code hashes of PVFs that require pre-checking by validators in the active set. It is only available since parachain host version 2.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/runtime.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.parachainHost.pvfsRequirePrecheck(): Vec<H256>\n```\n\n----------------------------------------\n\nTITLE: NFTs Module Error Interfaces\nDESCRIPTION: Error interfaces for the NFTs module covering various NFT-related operations like minting, transferring, and attribute management\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.nfts.AlreadyExists.is\napi.errors.nfts.ApprovalExpired.is\napi.errors.nfts.AttributeNotFound.is\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Era Stakers in Polkadot.js API\nDESCRIPTION: Retrieves exposure of validator at era. Takes a tuple of u32 and AccountId32 as input and returns a SpStakingExposure. Deprecated since v14, use EraInfo instead.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.erasStakers\n```\n\n----------------------------------------\n\nTITLE: Making On-Chain Remark in System Module\nDESCRIPTION: Creates an on-chain remark which can be executed by any origin. This is a simple way to place data on-chain without any other functionality.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_174\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.system.remark(remark)\n```\n\n----------------------------------------\n\nTITLE: Querying Acceptable Payment Assets for XCM in Rust\nDESCRIPTION: Returns a list of acceptable payment assets for a given XCM version.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\nqueryAcceptablePaymentAssets(xcm_version: `u32`): `Result<Vec<XcmVersionedAssetId>, XcmRuntimeApisFeesError>`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parachain Validation Code by Hash\nDESCRIPTION: Retrieves validation code stored by its hash. This storage is consistent with FutureCodeHash, CurrentCodeHash, and PastCodeHash.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.paras.codeByHash(codeHash)\n```\n\n----------------------------------------\n\nTITLE: Preventing New Eras Indefinitely in Polkadot.js\nDESCRIPTION: This function prevents new eras from starting indefinitely. It requires root origin and may allow an ongoing election to complete before taking effect.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_148\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.forceNoEras()\n```\n\n----------------------------------------\n\nTITLE: Authorizing Runtime Upgrade Without Safety Checks\nDESCRIPTION: Authorizes a runtime upgrade to a given code_hash without safety checks like spec name verification or version number increases. This is not recommended for normal use and requires Root origin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_171\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.system.authorizeUpgradeWithoutChecks(code_hash)\n```\n\n----------------------------------------\n\nTITLE: Querying Treasury Deactivated Funds\nDESCRIPTION: API interface for querying the amount which has been reported as inactive to Currency in the Treasury pallet.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/storage.md#2025-04-20_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.treasury.deactivated\n```\n\n----------------------------------------\n\nTITLE: Accessing Staking and Pool Constants in Polkadot.js\nDESCRIPTION: Constants related to nomination pools, fast unstaking, and general staking parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/constants.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.nominationPools.maxPointsToBalance\napi.consts.nominationPools.maxUnbonding\napi.consts.nominationPools.palletId\napi.consts.fastUnstake.deposit\n```\n\n----------------------------------------\n\nTITLE: Executing Block in Core API in Rust\nDESCRIPTION: Executes the given block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\napi.call.core.executeBlock(block: SpRuntimeBlock): Null\n```\n\n----------------------------------------\n\nTITLE: Society Module Error Interfaces\nDESCRIPTION: Interface definitions for society-related errors in the Polkadot.js API, handling membership, voting, and organizational issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.society.AlreadyBid.is\napi.errors.society.AlreadyCandidate.is\napi.errors.society.AlreadyElevated.is\napi.errors.society.AlreadyFounded.is\napi.errors.society.AlreadyMember.is\napi.errors.society.AlreadyPunished.is\napi.errors.society.AlreadyVouching.is\napi.errors.society.Approved.is\napi.errors.society.Expired.is\n```\n\n----------------------------------------\n\nTITLE: Querying XCM Delivery Fees\nDESCRIPTION: Function to calculate delivery fees for sending a specific XCM message to a destination. The function takes versioned XCM location and message parameters and returns assets required for the delivery fee.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/runtime.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nqueryDeliveryFees(destination: `XcmVersionedLocation`, message: `XcmVersionedXcm`): `Result<XcmVersionedAssets, XcmRuntimeApisFeesError>`\n```\n\n----------------------------------------\n\nTITLE: Configuring Weight Type for Event Parsing in JavaScript\nDESCRIPTION: Example of how to configure the Weight type when creating an API instance to ensure successful parsing of events on chains that haven't upgraded to use u64 for Weight.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/FAQ.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nApi.create({ types: { \"Weight\": \"u32\" } })\n```\n\n----------------------------------------\n\nTITLE: Accessing fellowshipCollective Error Interfaces in Polkadot.js API\nDESCRIPTION: Defines error interfaces for the fellowshipCollective module in Polkadot.js API. These errors relate to membership operations and voting processes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipCollective.AlreadyMember.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipCollective.Corruption.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipCollective.InvalidWitness.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipCollective.NoneRemaining.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipCollective.NoPermission.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipCollective.NotMember.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipCollective.NotPolling.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipCollective.Ongoing.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipCollective.RankTooLow.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipCollective.SameMember.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.fellowshipCollective.TooManyMembers.is\n```\n\n----------------------------------------\n\nTITLE: Creating a Nomination Pool with Specified ID\nDESCRIPTION: Creates a new delegation pool with a previously used pool ID. Takes the same arguments as the regular create function plus a specific pool_id parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nominationPools.createWithPoolId(amount, root, nominator, bouncer, pool_id)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Accounts in NIS Counterpart Balances\nDESCRIPTION: Upgrades specified accounts. Transaction fee is waived if at least 90% of the accounts needed to be upgraded. Requires signed origin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nisCounterpartBalances.upgradeAccounts(who)\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot API and Contract Extensions via Yarn\nDESCRIPTION: Command to install both the core Polkadot API package and the contracts extension package using Yarn. These packages should be kept at matching versions for compatibility.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api-contract/start/install.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @polkadot/api @polkadot/api-contract\n```\n\n----------------------------------------\n\nTITLE: Retrieving Genesis Presets\nDESCRIPTION: Returns a JSON representation of a built-in RuntimeGenesisConfig preset. Returns the default when no ID is provided or the named preset when specified.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.genesisBuilder.getPreset(id: Option<Text>): Option<Bytes>\n```\n\n----------------------------------------\n\nTITLE: Querying Message Queue Pages in Polkadot.js API\nDESCRIPTION: Retrieves the map of page indices to pages for the message queue. Takes CumulusPrimitivesCoreAggregateMessageOrigin and u32 as parameters.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.messageQueue.pages(origin: CumulusPrimitivesCoreAggregateMessageOrigin, index: u32): Option<PalletMessageQueuePage>\n```\n\n----------------------------------------\n\nTITLE: Accessing Scheduler Constants in Polkadot-JS API\nDESCRIPTION: Retrieves constants for the scheduler pallet, including maximum weight and maximum scheduled calls per block.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/constants.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst maximumWeight = api.consts.scheduler.maximumWeight;\nconst maxScheduledPerBlock = api.consts.scheduler.maxScheduledPerBlock;\n```\n\n----------------------------------------\n\nTITLE: Querying Length to Fee Conversion for Calls in Polkadot.js\nDESCRIPTION: Converts call length to fee amount using the current LengthToFee implementation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.transactionPaymentCallApi.queryLengthToFee(length: u32): u128\n```\n\n----------------------------------------\n\nTITLE: Block Building Operations in Rust\nDESCRIPTION: Functions for building and finalizing blocks, including applying extrinsics and checking inherents. These are part of the blockBuilder API.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\napplyExtrinsic(extrinsic: SpRuntimeUncheckedExtrinsic): Result<Result<Null, SpRuntimeDispatchError>, SpRuntimeTransactionValidityTransactionValidityError>\n```\n\nLANGUAGE: rust\nCODE:\n```\ncheckInherents(block: SpRuntimeBlock, data: SpInherentsInherentData): SpInherentsCheckInherentsResult\n```\n\nLANGUAGE: rust\nCODE:\n```\nfinalizeBlock(): SpRuntimeHeader\n```\n\nLANGUAGE: rust\nCODE:\n```\ninherentExtrinsics(inherent: SpInherentsInherentData): Vec<Bytes>\n```\n\n----------------------------------------\n\nTITLE: Chain RPC Methods\nDESCRIPTION: Methods for querying chain data including blocks, headers and finalized state\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/rpc.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.chain.getBlock(hash?: BlockHash): SignedBlock\napi.rpc.chain.getBlockHash(blockNumber?: BlockNumber): BlockHash\napi.rpc.chain.getFinalizedHead(): BlockHash\napi.rpc.chain.getHeader(hash?: BlockHash): Header\napi.rpc.chain.subscribeAllHeads(): Header\napi.rpc.chain.subscribeFinalizedHeads(): Header\napi.rpc.chain.subscribeNewHeads(): Header\n```\n\n----------------------------------------\n\nTITLE: Listing Genesis Preset Names\nDESCRIPTION: Returns a list of identifiers for available built-in RuntimeGenesisConfig presets. These presets can be queried with the getPreset method.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.genesisBuilder.presetNames(): Vec<Text>\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Era Stakers Clipped in Polkadot.js API\nDESCRIPTION: Retrieves clipped exposure of validator at era. Takes a tuple of u32 and AccountId32 as input and returns a SpStakingExposure. Deprecated since v14, use EraInfo instead.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.erasStakersClipped\n```\n\n----------------------------------------\n\nTITLE: Querying Staking Canceled Slash Payout in Polkadot.js API\nDESCRIPTION: Retrieves the amount of currency given to reporters of a canceled slash event. Returns a u128 value.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.staking.canceledSlashPayout\n```\n\n----------------------------------------\n\nTITLE: Accessing CollatorSelection Error Interface in Polkadot.js API\nDESCRIPTION: Example of how to access the 'AlreadyInvulnerable' error interface from the collatorSelection module.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.collatorSelection.AlreadyInvulnerable.is\n```\n\n----------------------------------------\n\nTITLE: Staking Error Interface Examples\nDESCRIPTION: Error interfaces for the staking pallet, including checks for controllers, stash accounts, and system limits\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.staking.NoMoreChunks.is\napi.errors.staking.NotController.is\napi.errors.staking.NotEnoughFunds.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aura Consensus Authorities\nDESCRIPTION: Returns the current set of authorities for the Aura consensus mechanism. These authorities are responsible for block production.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.auraApi.authorities(): Vec<SpConsensusAuraEd25519AppEd25519Public>\n```\n\n----------------------------------------\n\nTITLE: Accessing Identity Module Errors in Polkadot-js API\nDESCRIPTION: Interface references for error conditions in the identity module, including account naming, username management, judgments, and permissions issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.AlreadyClaimed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.AlreadyUnbinding.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.EmptyIndex.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.FeeChanged.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.InsufficientPrivileges.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.InvalidIndex.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.InvalidJudgement.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.InvalidSignature.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.InvalidSuffix.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.InvalidTarget.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.InvalidUsername.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.JudgementForDifferentIdentity.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.JudgementGiven.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.JudgementPaymentFailed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.NoAllocation.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.NoIdentity.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.NotExpired.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.NotFound.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.NotNamed.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.NotOwned.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.NotSub.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.NotUnbinding.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.NotUsernameAuthority.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.NoUsername.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.RequiresSignature.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.StickyJudgement.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.TooEarly.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.TooManyRegistrars.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.TooManySubAccounts.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.identity.UsernameTaken.is\n```\n\n----------------------------------------\n\nTITLE: Referencing Polkadot Family in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @polkadot family of tools and libraries using inline code formatting in Markdown.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@polkadot`\n```\n\n----------------------------------------\n\nTITLE: Scheduler Module Error Interfaces\nDESCRIPTION: Interface definitions for scheduler-related errors in the Polkadot.js API, handling scheduling failures and timing issues.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.scheduler.FailedToSchedule.is\napi.errors.scheduler.Named.is\napi.errors.scheduler.NotFound.is\napi.errors.scheduler.RescheduleNoChange.is\napi.errors.scheduler.TargetBlockNumberInPast.is\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Runtime Version in Polkadot JS API (TypeScript)\nDESCRIPTION: This method retrieves the runtime version via subscription. It returns a RuntimeVersion object.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribeRuntimeVersion(): `RuntimeVersion`\n```\n\n----------------------------------------\n\nTITLE: Querying Substrate HeapPages in TypeScript\nDESCRIPTION: Returns the number of wasm linear memory pages required for execution of the runtime.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/storage.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.substrate.heapPages()\n```\n\n----------------------------------------\n\nTITLE: Whitelisting Call in Polkadot.js API\nDESCRIPTION: This code snippet shows how to whitelist a call using the Polkadot.js API. It takes the call hash as a parameter.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_205\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.whitelist.whitelistCall(call_hash: H256)\n```\n\n----------------------------------------\n\nTITLE: Submitting GRANDPA Equivocation Report in Rust\nDESCRIPTION: Submits an unsigned extrinsic to report an equivocation. Only useful in an offchain context.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\napi.call.grandpaApi.submitReportEquivocationUnsignedExtrinsic(equivocation_proof: SpConsensusGrandpaEquivocationProof, key_owner_proof: SpRuntimeOpaqueValue): Option<Null>\n```\n\n----------------------------------------\n\nTITLE: Querying Vesting Schedule Constants\nDESCRIPTION: Constants for vesting functionality including maximum number of vesting schedules and minimum amount for vested transfers.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.vesting.maxVestingSchedules\napi.consts.vesting.minVestedTransfer\n```\n\n----------------------------------------\n\nTITLE: Accessing Proxy Duplicate Error in TypeScript\nDESCRIPTION: Interface for checking if an error is a Duplicate error in the Proxy module. This error indicates that the account is already a proxy.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.proxy.Duplicate.is\n```\n\n----------------------------------------\n\nTITLE: Accessing Indices Module Errors in Polkadot-js API\nDESCRIPTION: Interface references for error conditions in the indices module, addressing issues with account indices assignment and management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/errors.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.indices.InUse.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.indices.NotAssigned.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.indices.NotOwner.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.indices.NotTransfer.is\n```\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.indices.Permanent.is\n```\n\n----------------------------------------\n\nTITLE: Polkadot Registrar Events\nDESCRIPTION: Event interfaces for the registrar module handling registration, deregistration, and swapping operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/events.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.registrar.Deregistered.is\napi.events.registrar.Registered.is\napi.events.registrar.Reserved.is\napi.events.registrar.Swapped.is\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reserved Peers in Polkadot JS API (TypeScript)\nDESCRIPTION: This method returns the list of reserved peers. It returns a vector of Text values.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/rpc.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nreservedPeers(): `Vec<Text>`\n```\n\n----------------------------------------\n\nTITLE: Applying Extrinsic in Block Builder API in Rust\nDESCRIPTION: Applies the given extrinsic and returns an inclusion outcome specifying if the extrinsic is included in the block or not.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\napi.call.blockBuilder.applyExtrinsic(extrinsic: SpRuntimeUncheckedExtrinsic): Result<Result<Null, SpRuntimeDispatchError>, SpRuntimeTransactionValidityTransactionValidityError>\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction: Update Payee\nDESCRIPTION: Migrates an account's RewardDestination::Controller to RewardDestination::Account(controller). Transaction fee is waived if migration succeeds.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_166\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.staking.updatePayee(controller)\n```\n\n----------------------------------------\n\nTITLE: Vesting Module Error Interfaces\nDESCRIPTION: Error interfaces for the vesting module managing vesting schedules and transfers.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.vesting.AmountLow.is\napi.errors.vesting.AtMaxVestingSchedules.is\napi.errors.vesting.InvalidScheduleParams.is\napi.errors.vesting.NotVesting.is\napi.errors.vesting.ScheduleIndexOutOfBounds.is\n```\n\n----------------------------------------\n\nTITLE: Adjusting Total Issuance in NIS Counterpart Balances\nDESCRIPTION: Allows root to adjust the total issuance in a saturating way. This function requires a positive delta value and can only be called by an account with root privileges.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.nisCounterpartBalances.forceAdjustTotalIssuance(direction, delta)\n```\n\n----------------------------------------\n\nTITLE: Promoting Fellowship Member\nDESCRIPTION: Increments the rank of an existing member by one. Must be called by the PromoteOrigin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\napi.tx.fellowshipCollective.promoteMember(who)\n```\n\n----------------------------------------\n\nTITLE: Querying XCMP Queue Configuration in Polkadot.js API\nDESCRIPTION: Query method to retrieve the configuration that controls the dynamics of the outbound XCMP queue. This provides access to parameters that determine how the queue behaves.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.xcmpQueue.queueConfig()\n```\n\n----------------------------------------\n\nTITLE: Uniques Module Error Interfaces\nDESCRIPTION: Error interfaces for the uniques module handling collection ownership, approvals, and item management.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/errors.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.uniques.Unaccepted.is\napi.errors.uniques.Unapproved.is\napi.errors.uniques.UnknownCollection.is\napi.errors.uniques.UnknownItem.is\napi.errors.uniques.WrongDelegate.is\napi.errors.uniques.WrongOwner.is\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot Keyring via Yarn\nDESCRIPTION: Command to install the @polkadot/keyring package using Yarn package manager. This will install the latest stable release along with all required dependencies like @polkadot/util.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/keyring/start/install.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @polkadot/keyring\n```\n\n----------------------------------------\n\nTITLE: Spending Local Treasury Funds\nDESCRIPTION: Proposes and approves a spend of local treasury funds. This is a simplified version of the spend function that works with the local currency. Must be called with SpendOrigin.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_185\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.treasury.spendLocal(amount, beneficiary)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Society Candidacy Votes with cleanupCandidacy\nDESCRIPTION: Removes up to 'max' stale votes for the given candidate. May be called by any Signed origin, but only after the candidate's candidacy is ended.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_122\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.cleanupCandidacy(candidate, max)\n```\n\n----------------------------------------\n\nTITLE: OnDemandAssignmentProvider Error Interfaces\nDESCRIPTION: Error interfaces for the onDemandAssignmentProvider module, handling queue and pricing errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.onDemandAssignmentProvider.QueueFull.is\napi.errors.onDemandAssignmentProvider.SpotPriceHigherThanMaxAmount.is\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Substrate Node Lookup Types in Rust\nDESCRIPTION: Default implementation of account lookup mechanism and address format in Substrate master node using Indices for lookup.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/start/types.extend.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n/// The lookup mechanism to get account ID from whatever is passed in dispatchers.\ntype Lookup = Indices;\n...\n/// The address format for describing accounts.\npub type Address = <Indices as StaticLookup>::Source;\n```\n\n----------------------------------------\n\nTITLE: Getting Contract Storage in Contracts API in Rust\nDESCRIPTION: Queries a given storage key in a given contract. Returns Ok(Some(Vec<u8>)) if the storage value exists, Ok(None) if it doesn't, and Err if the account doesn't exist or doesn't have a contract.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/substrate/runtime.md#2025-04-20_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\napi.call.contractsApi.getStorage(address: SpCoreCryptoAccountId32, key: Bytes): Result<Option<Bytes>, PalletContractsPrimitivesContractAccessError>\n```\n\n----------------------------------------\n\nTITLE: Detecting VestingCompleted Event in Polkadot.js API\nDESCRIPTION: This code demonstrates how to check if an event is a VestingCompleted event from the vesting module, indicating that an account has become fully vested.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/events.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.vesting.VestingCompleted.is\n```\n\n----------------------------------------\n\nTITLE: NisCounterpartBalances Error Interfaces\nDESCRIPTION: Error interfaces for the nisCounterpartBalances module, handling reserve and vesting balance errors.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.nisCounterpartBalances.TooManyReserves.is\napi.errors.nisCounterpartBalances.VestingBalance.is\n```\n\n----------------------------------------\n\nTITLE: Decoding Session Keys in Polkadot.js\nDESCRIPTION: Decodes given public session keys. Returns a list of public raw public keys and their corresponding key types.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/runtime.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\napi.call.sessionKeys.decodeSessionKeys(encoded: Bytes): Option<Vec<(Bytes,SpCoreCryptoKeyTypeId)>>\n```\n\n----------------------------------------\n\nTITLE: Pool Assets Event Interface Definitions\nDESCRIPTION: Event interface definitions for the poolAssets module, handling asset management operations like creation, destruction, transfers, and metadata management\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.poolAssets.AccountsDestroyed.is\napi.events.poolAssets.ApprovalCancelled.is\napi.events.poolAssets.ApprovalsDestroyed.is\napi.events.poolAssets.ApprovedTransfer.is\napi.events.poolAssets.AssetFrozen.is\napi.events.poolAssets.AssetMinBalanceChanged.is\napi.events.poolAssets.AssetStatusChanged.is\napi.events.poolAssets.AssetThawed.is\napi.events.poolAssets.Blocked.is\napi.events.poolAssets.Burned.is\napi.events.poolAssets.Created.is\napi.events.poolAssets.Deposited.is\napi.events.poolAssets.Destroyed.is\napi.events.poolAssets.DestructionStarted.is\napi.events.poolAssets.ForceCreated.is\napi.events.poolAssets.Frozen.is\napi.events.poolAssets.Issued.is\napi.events.poolAssets.MetadataCleared.is\napi.events.poolAssets.MetadataSet.is\napi.events.poolAssets.OwnerChanged.is\napi.events.poolAssets.TeamChanged.is\napi.events.poolAssets.Thawed.is\napi.events.poolAssets.Touched.is\napi.events.poolAssets.Transferred.is\n```\n\n----------------------------------------\n\nTITLE: Querying Author Methods in Polkadot.js API\nDESCRIPTION: This snippet demonstrates the available author methods in the Polkadot.js API, including operations for managing keys, extrinsics, and session keys.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/rpc.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.author.hasKey(publicKey: Bytes, keyType: Text): bool\napi.rpc.author.hasSessionKeys(sessionKeys: Bytes): bool\napi.rpc.author.insertKey(keyType: Text, suri: Text, publicKey: Bytes): Bytes\napi.rpc.author.pendingExtrinsics(): Vec<Extrinsic>\napi.rpc.author.removeExtrinsic(bytesOrHash: Vec<ExtrinsicOrHash>): Vec<Hash>\napi.rpc.author.rotateKeys(): Bytes\napi.rpc.author.submitAndWatchExtrinsic(extrinsic: Extrinsic): ExtrinsicStatus\napi.rpc.author.submitExtrinsic(extrinsic: Extrinsic): Hash\n```\n\n----------------------------------------\n\nTITLE: Configuration Module Error Interface\nDESCRIPTION: Error interface for configuration parameter validation.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/errors.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.errors.configuration.InvalidNewValue.is\n```\n\n----------------------------------------\n\nTITLE: Setting Society Parameters with setParameters\nDESCRIPTION: Changes the maximum number of members in society and other parameters. The origin must be Signed by the Founder. Parameters include max_members, max_intake, max_strikes, and candidate_deposit.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_133\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.society.setParameters(max_members, max_intake, max_strikes, candidate_deposit)\n```\n\n----------------------------------------\n\nTITLE: Using onDemandAssignmentProvider.placeOrderKeepAlive Method\nDESCRIPTION: Places an order for blockspace without risking account reaping. Takes a maximum amount to withdraw and the parachain ID to provide blockspace for. Errors if balance is insufficient, queue is full, or spot price exceeds max amount.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/kusama/extrinsics.md#2025-04-20_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\napi.tx.onDemandAssignmentProvider.placeOrderKeepAlive(max_amount, para_id)\n```\n\n----------------------------------------\n\nTITLE: Querying Session Next Keys in Polkadot.js API\nDESCRIPTION: Retrieves the next session keys for a validator. Takes an AccountId32 as input and returns an optional PolkadotRuntimeSessionKeys.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/polkadot/storage.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.session.nextKeys\n```\n\n----------------------------------------\n\nTITLE: Detecting DeliveryFeeFactorIncreased Event in ToKusamaXcmRouter Module\nDESCRIPTION: This code checks if an event is a DeliveryFeeFactorIncreased event in the toKusamaXcmRouter module. It signifies that the delivery fee factor has been increased.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.toKusamaXcmRouter.DeliveryFeeFactorIncreased.is\n```\n\n----------------------------------------\n\nTITLE: Initializing asm.js fallback for @polkadot/util-crypto\nDESCRIPTION: This code snippet demonstrates how to initialize the asm.js fallback for environments without WASM support. It should be executed before any @polkadot/util-crypto operations.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/util-crypto/FAQ.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@polkadot/wasm-crypto/initOnlyAsm';\n```\n\n----------------------------------------\n\nTITLE: Querying PolkadotXCM Storage\nDESCRIPTION: Query interfaces for cross-chain messaging (XCM) related storage including asset traps, queries, and version management\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.polkadotXcm.assetTraps(H256): u32\napi.query.polkadotXcm.currentMigration(): Option<PalletXcmVersionMigrationStage>\napi.query.polkadotXcm.queries(u64): Option<PalletXcmQueryStatus>\n```\n\n----------------------------------------\n\nTITLE: Detecting Parachain System Validation Function Applied Event\nDESCRIPTION: Illustrates how to check for a ValidationFunctionApplied event in the parachain system using the Polkadot.js API. This event indicates that the validation function was applied at a specific relay chain block number.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-polkadot/events.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.events.parachainSystem.ValidationFunctionApplied.is\n```\n\n----------------------------------------\n\nTITLE: NFT Storage Query Methods\nDESCRIPTION: Storage queries for NFT-related data including collections, items, attributes and metadata\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/storage.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.query.nfts.collection(id: u32): Option<PalletNftsCollectionDetails>\napi.query.nfts.item(collectionId: u32, itemId: u32): Option<PalletNftsItemDetails>\napi.query.nfts.attribute(collectionId: u32, itemId: Option<u32>, namespace: PalletNftsAttributeNamespace, key: Bytes): Option<(Bytes,PalletNftsAttributeDeposit)>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types for Polkadot.js API\nDESCRIPTION: This snippet demonstrates how to define custom types for a specific module in the Polkadot.js API. It shows the structure of a definitions.ts file.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/api/examples/promise/typegen.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  types: {\n    ProposalRecord: {\n      index: 'u32',\n      author: 'AccountId',\n      stage: 'VoteStage',\n      transition_time: 'u32',\n      title: 'Text',\n      contents: 'Text',\n      vote_id: 'u64'\n    },\n    ProposalContents: 'Vec<u8>',\n    ProposalTitle: 'Vec<u8>'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying XCMP Queue Configuration Constants\nDESCRIPTION: Constants defining XCMP (Cross-Chain Message Passing) queue parameters including channel limits and page sizes.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.consts.xcmpQueue.maxActiveOutboundChannels\napi.consts.xcmpQueue.maxInboundSuspended\napi.consts.xcmpQueue.maxPageSize\n```\n\n----------------------------------------\n\nTITLE: Querying Account Nonce in Rust\nDESCRIPTION: Retrieves the current account nonce for a given AccountId. This function is part of the accountNonceApi.\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/runtime.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\naccountNonce(account: SpCoreCryptoAccountId32): u32\n```\n\n----------------------------------------\n\nTITLE: Transaction Fee Calculation Example (Rust)\nDESCRIPTION: Example showing how priority is calculated for Normal vs Operational transactions with fee multipliers\nSOURCE: https://github.com/polkadot-js/docs/blob/master/docs/asset-hub-kusama/constants.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// For `Normal`\nlet priority = priority_calc(tip);\n\n// For `Operational`\nlet virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;\nlet priority = priority_calc(tip + virtual_tip);\n```"
  }
]