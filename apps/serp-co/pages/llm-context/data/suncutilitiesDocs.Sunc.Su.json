[
  {
    "owner": "sunc-utilities",
    "repo": "docs.sunc.su",
    "content": "TITLE: Loading and executing source code with loadstring in Luau\nDESCRIPTION: This snippet defines the loadstring function, which compiles a string of source code into a runnable function or returns an error. It demonstrates how to use loadstring to compile code, execute it, and handle potential compilation errors, illustrating both successful and unsuccessful scenarios with example code.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/loadstring.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction loadstring<A...>(source: string, chunkname: string?): (((A...) -> any) | nil, string?)\n\n---\n\n-- Parameters\n\n| Parameter         | Description |\n|-------------------|-----------------------------------------------------------------------------|\n| `#!luau source`        | The source code string to compile.                                           |\n| `#!luau chunkname?`    | Custom chunk name. |\n\n---\n\n-- Examples\n\n-- Example 1: Compiling and running source code successfully\nloadstring([[\\n    placeholder = {\"Example\"}\\n]])()  \nprint(placeholder[1]) -- Output: Example\n\n-- Example 2: Using a custom chunk name while also getting an error\nlocal func, err = loadstring(\"Example = \", \"CustomChunk\")\n\nprint(func) -- Output: nil\nprint(err)  -- Output: [string \"CustomChunk\"]:1: Expected identifier when parsing expression, got <eof>\n```\n\n----------------------------------------\n\nTITLE: Connecting to a WebSocket Server - Luau\nDESCRIPTION: This code snippet demonstrates how to connect to a WebSocket server using the `WebSocket.connect` function. It takes the WebSocket server URL as a string parameter. It creates a new connection to the specified URL. The function returns a WebSocket object that represents the connection. It's the first step to start using the WebSocket.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/WebSocket/README.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction WebSocket.connect(url: string): WebSocket\n```\n\n----------------------------------------\n\nTITLE: Cloning Functions with clonefunction in Luau\nDESCRIPTION: This example shows how to clone a function using `clonefunction` in Luau. It defines a simple function `dummy_function`, clones it using `clonefunction`, and then verifies the cloning process by checking its properties using `debug.info` and comparing the original and cloned functions. The output indicates the cloned function has the same behavior but is a different object and shares the same environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/clonefunction.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal function dummy_function()\n    print(\"Hello\")\nend\n\nlocal cloned_function = clonefunction(dummy_function)\n\nprint(debug.info(cloned_function, \"l\")) -- Output: 1\nprint(debug.info(cloned_function, \"n\")) -- Output: dummy_function\nprint(cloned_function == dummy_function) -- Output: false\nprint(getfenv(cloned_function) == getfenv(dummy_function)) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Request Function and Types in Luau\nDESCRIPTION: This snippet defines the Luau types `RequestOptions` and `Response`, outlining the structure for configuring HTTP requests and interpreting responses, respectively. It also provides the function signature for the `request` utility.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Miscellaneous/request.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\ntype RequestOptions = {\n    Url: string,\n    Method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\",\n    Body: string?,\n    Headers: { [string]: string }?,\n    Cookies: { [string]: string }?\n}\n\ntype Response = {\n    Body: string,\n    StatusCode: number,\n    StatusMessage: string,\n    Success: boolean,\n    Headers: { [string]: string }\n}\n\nfunction request(options: RequestOptions): Response\n```\n\n----------------------------------------\n\nTITLE: Defining readfile Function in Luau\nDESCRIPTION: This Luau code defines the `readfile` function. The function takes a file path as a string parameter and returns the file content as a string. It is used for reading file contents. If the specified file does not exist or cannot be accessed, it will raise an error.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/readfile.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction readfile(path: string): string\n```\n\n----------------------------------------\n\nTITLE: Using getcustomasset to load and play a sound Luau\nDESCRIPTION: This example demonstrates how to use `getcustomasset` to load and play a sound in Roblox. It downloads a base64 encoded audio file, decodes it, saves it locally, then uses `getcustomasset` to obtain a content ID for it. Finally, it creates a Sound instance, sets its SoundId to the content ID, and plays the sound.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/getcustomasset.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal encoded = game:HttpGet(\"https://gitlab.com/sens3/nebunu/-/raw/main/encodedBytecode.txt\")\nwritefile(\"ExampleSound.mp3\", crypt.base64decode(encoded))\n\nlocal asset_id = getcustomasset(\"ExampleSound.mp3\")\n\nlocal sound = Instance.new(\"Sound\")\nsound.Parent = workspace\nsound.SoundId = asset_id\nsound.Volume = 0.35\nsound:Play()\n```\n\n----------------------------------------\n\nTITLE: Inspecting and invoking a Luau connection using `getconnections`\nDESCRIPTION: This example demonstrates creating a signal connection in Luau (`folder.ChildAdded:Connect(...)`), retrieving it using `getconnections`, and then invoking the connected function via `connection.Function()` or `connection:Fire()`. It also shows how to access the underlying thread of the connection.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Signals/getconnections.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal folder = Instance.new(\"Folder\")\nfolder.ChildAdded:Connect(function()\n    return \"Triggered\"\nend)\n\nlocal connection = getconnections(folder.ChildAdded)[1] -- First connection in the list\nprint(connection.Function())     -- Output: Triggered\nconnection:Fire() -- Same as above, Output: Triggered\nprint(typeof(connection.Thread)) -- Output: thread\n```\n\n----------------------------------------\n\nTITLE: Changing Thread Identity for Privileged Access in Luau\nDESCRIPTION: This example demonstrates the use of `setthreadidentity` to gain privileged access within a Luau environment. It first sets the thread identity to level 2, attempting to access `game.CoreGui`, which fails due to restricted access. Then, it sets the identity to level 8, enabling access to `game.CoreGui`. This illustrates how thread identity affects the permissions to certain parts of the game. Requires the `setthreadidentity` function. The key parameters are the identity levels 2 and 8. The output demonstrates successful access with level 8 and failed access with level 2.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/setthreadidentity.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nsetthreadidentity(2)\nprint(pcall(function() return game.CoreGui end)) -- Output: false (restricted access)\n\nsetthreadidentity(8)\nprint(pcall(function() return game.CoreGui end)) -- Output: true Instance\n```\n\n----------------------------------------\n\nTITLE: Using cloneref to Clone Reference to LocalPlayer in Luau\nDESCRIPTION: Demonstrates the practical application of cloneref to create a protected reference clone of the Players.LocalPlayer object in Roblox. The example retrieves the Players service, obtains the LocalPlayer instance, and then clones it using cloneref. The code outputs false for strict equality comparison and displays the player's name, showing that the clone behaves like the original but is not strictly equal; this is helpful for security and obfuscation scenarios in Roblox scripting.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/cloneref.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal players = game:GetService(\"Players\")\n\nlocal original = players.LocalPlayer\nlocal clone = cloneref(original)\n\nprint(original == clone) -- Output: false\nprint(clone.Name)        -- Output: Player's name (same as original)\n```\n\n----------------------------------------\n\nTITLE: Base64 Decoding Example - Luau\nDESCRIPTION: This example demonstrates how to use the `crypt.base64decode` function to decode a Base64-encoded string obtained from a remote source using `game:HttpGet`. The decoded data is then written to a file named \"sound.mp3\".\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Cryptography/base64decode.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal bytecode = game:HttpGet(\"https://api.rubis.app/v2/scrap/zuxQZuM9Tnl5MRbo/raw\")\nwritefile(\"sound.mp3\", crypt.base64decode(bytecode)) -- This file should be a valid and working mp3 file.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getscriptbytecode to Read Script Bytecode in Luau\nDESCRIPTION: Demonstrates obtaining and printing bytecode from a running script instance in Roblox using getscriptbytecode. Shows how it can return the bytecode string for a valid script or nil for a newly created LocalScript with no bytecode. Includes interaction with the LocalPlayer's character to find a child script named \"Animate\".\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getscriptbytecode.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal animate = game.Players.LocalPlayer.Character:FindFirstChild(\"Animate\")\n\nprint(getscriptbytecode(animate)) -- Returns bytecode as a string\n\nprint(getscriptbytecode(Instance.new(\"LocalScript\"))) -- Output: nil\n```\n\n----------------------------------------\n\nTITLE: Define `writefile` Function Signature in Luau\nDESCRIPTION: Defines the function signature for `writefile`. This function accepts a file path (string) and data (string) as input. It writes the provided data to the specified file, overwriting any existing content if the file already exists. The function does not return any value.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/writefile.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction writefile(path: string, data: string): ()\n```\n\n----------------------------------------\n\nTITLE: Reading Drawing Properties - Luau\nDESCRIPTION: This Luau code provides an example of using `getrenderproperty`. It first creates a new Circle Drawing object, sets its radius and visibility.  Then, it retrieves the radius and visibility of the circle using `getrenderproperty`.  The output demonstrates how to read the values of properties using the function. The code uses Drawing objects. The example demonstrates how to get the values of existing properties.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/getrenderproperty.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal circle = Drawing.new(\"Circle\")\ncircle.Radius = 50\ncircle.Visible = true\n\nprint(getrenderproperty(circle, \"Radius\"))    -- Output: 50\nprint(getrenderproperty(circle, \"Visible\"))   -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Defining the firesignal Function in Roblox (Luau)\nDESCRIPTION: Defines the firesignal function, which accepts an RBXScriptSignal as the first parameter and variadic additional arguments. When called, firesignal immediately invokes all Lua connections attached to the given signal, optionally passing any supplied arguments to the connected handlers. This function ignores the Workspace.SignalBehaviour property and should be used where manual control over event invocation is necessary. Requires access to Roblox's scripting environment where RBXScriptSignals and connections are available.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Signals/firesignal.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction firesignal(signal: RBXScriptSignal, ...: any?)\n```\n\n----------------------------------------\n\nTITLE: Example usage: Connecting multiple ClickDetector events in Roblox Luau\nDESCRIPTION: This example demonstrates how to create a ClickDetector instance and connect various mouse events (MouseClick, RightMouseClick, MouseHoverEnter, MouseHoverLeave) to print messages when triggered. It also illustrates using 'fireclickdetector' to simulate these events with specific parameters, facilitating testing or custom event invocation in Roblox games.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/fireclickdetector.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal click_detector = Instance.new(\"ClickDetector\")\n\nclick_detector.MouseClick:Connect(function(player)\n    print(`{player.Name} Fired M1`)\nend)\n\nclick_detector.RightMouseClick:Connect(function(player)\n    print(`{player.Name} Fired M2`)\nend)\n\nclick_detector.MouseHoverEnter:Connect(function(player)\n    print(`{player.Name} Fired HoverEnter`)\nend)\n\nclick_detector.MouseHoverLeave:Connect(function(player)\n    print(`{player} Fired HoverLeave`)\nend)\n\nfireclickdetector(click_detector, 0, \"MouseClick\") -- Output: Player Fired M1\nfireclickdetector(click_detector, 0, \"RightMouseClick\") -- Output: Player Fired M2\nfireclickdetector(click_detector, 0, \"MouseHoverEnter\") -- Output: Player Fired HoverEnter\nfireclickdetector(click_detector, 0, \"MouseHoverLeave\") -- Output: Player Fired HoverLeave\n```\n\n----------------------------------------\n\nTITLE: Loading and executing a valid Lua source file with loadfile in Luau\nDESCRIPTION: Demonstrates writing Lua code to a file then loading and executing it via loadfile. The example writes a Lua script returning the value 10 plus a variable number of arguments. It loads the file, invokes the returned chunk with an argument, and prints the result. This shows successful dynamic execution of Lua code loaded from a file.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/loadfile.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nwritefile(\"file6.lua\", \"return 10 + ...\")\nlocal chunk = loadfile(\"file6.lua\")\nprint(chunk(1)) -- Output: 11\n```\n\n----------------------------------------\n\nTITLE: Example usage of setrenderproperty in Luau\nDESCRIPTION: This example demonstrates how to use the `setrenderproperty` function. It creates a new 'Circle' `Drawing` object and then uses the function to set its 'Radius' and 'Visible' properties dynamically. It subsequently prints these properties to confirm the values were successfully assigned.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/setrenderproperty.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal circle = Drawing.new(\"Circle\")\n\nsetrenderproperty(circle, \"Radius\", 50)\nsetrenderproperty(circle, \"Visible\", true)\n\nprint(circle.Radius)   -- Output: 50\nprint(circle.Visible)  -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Simulating Touched Event Using firetouchinterest in Luau\nDESCRIPTION: Creates a stationary dummy part and connects a Touched event listener to it, printing the name of any colliding part. The example uses firetouchinterest to programmatically simulate a player character's head touching and then un-touching the dummy part, with a delay between events. Requires access to the game.Players.LocalPlayer.Character object and assumes a Roblox client environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/firetouchinterest.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal dummy_part = Instance.new(\"Part\")\ndummy_part.CFrame = CFrame.new(0, -200, 0)\ndummy_part.Anchored = true\ndummy_part.Parent = workspace\n\ndummy_part.Touched:Connect(function(part)\n    print(part.Name .. \" touched the dummy part!\")\nend)\n\nlocal player_head = game.Players.LocalPlayer.Character.Head\n\nfiretouchinterest(player_head, dummy_part, false) -- Simulate touch\ntask.wait(0.5)\nfiretouchinterest(player_head, dummy_part, true) -- Simulate un-touch\n```\n\n----------------------------------------\n\nTITLE: Using `writefile` to Create and Read a File in Luau\nDESCRIPTION: This example demonstrates the basic usage of the `writefile` function. It writes the string \"Hello world\" to a file named `file.txt`. Subsequently, it uses the `readfile` function (presumably available in the same environment) to read the contents of `file.txt` and prints them to the output, verifying that the write operation was successful.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/writefile.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nwritefile(\"file.txt\", \"Hello world\")\nprint(readfile(\"file.txt\")) -- Output: Hello world\n```\n\n----------------------------------------\n\nTITLE: Responding to incoming messages - Luau\nDESCRIPTION: This example shows how to use the `OnMessage` event and the `Send` method of the WebSocket class. It connects to a WebSocket server, sets up a handler function that prints the received message, and sends a \"Hello\" message to the server. The `OnMessage` event is triggered when a message is received, and `Send` is used to send messages. The output will be the received message from the server, and in this case, the same \"Hello\" string that was sent.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/WebSocket/README.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal ws = WebSocket.connect(\"ws://echo.websocket.events\")\nws.OnMessage:Connect(function(message)\n    print(message)\nend)\nws:Send(\"Hello\") -- Output: Hello\n```\n\n----------------------------------------\n\nTITLE: Hashing a Script Example in Luau\nDESCRIPTION: This Luau code demonstrates how to use the `getscripthash` function to hash a live script and a newly created LocalScript. It retrieves the \"Animate\" script from the player's character and prints its SHA-384 hash. It also shows how the function returns `nil` when a script has no bytecode (e.g., a newly created script).\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getscripthash.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal Animate = game.Players.LocalPlayer.Character:FindFirstChild(\"Animate\")\n\nprint(getscripthash(Animate)) -- Output: 384-bit hash string\n\nprint(getscripthash(Instance.new(\"LocalScript\"))) -- Output: nil\n```\n\n----------------------------------------\n\nTITLE: Reading a File in Luau\nDESCRIPTION: This Luau code demonstrates how to read a file using the `readfile` function. First, it writes the string \"Hello\" to a file named \"file0.txt\" using an assumed `writefile` function. Then, it reads the contents of \"file0.txt\" using `readfile` and prints the result to the console. The expected output is \"Hello\".\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/readfile.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nwritefile(\"file0.txt\", \"Hello\")\nprint(readfile(\"file0.txt\")) -- Output: Hello\n```\n\n----------------------------------------\n\nTITLE: Checking Thread Identity with defer and setthreadidentity in Luau\nDESCRIPTION: This code snippet provides an example of how `getthreadidentity` can be used with `setthreadidentity` and `task.defer`. It demonstrates how to change the thread identity within a deferred task and how the main thread's identity is also set. The example utilizes `task.defer` to schedule a function to run later, then sets the identity inside the deferred function. The `setthreadidentity` function sets the thread identity and `getthreadidentity` retrieves the identity.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/getthreadidentity.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\ntask.defer(function()\n    setthreadidentity(2)\n    print(getthreadidentity()) -- Output: 2\nend)\n\nsetthreadidentity(3)\nprint(getthreadidentity())     -- Output: 3\n```\n\n----------------------------------------\n\nTITLE: Matching Tables by Key using filtergc - Luau\nDESCRIPTION: This snippet demonstrates how to use the filtergc utility in Luau to retrieve tables that contain a specific key (in this case, 'dummy_key'). The function call passes a filter object with the 'Keys' field set to a list containing the desired key. The example then tests if the returned table matches the expected table. Dependencies include availability of the filtergc function within the execution context. Input expects the key(s) of interest, and output is a table reference or nil. Limitations: False negatives may occur if called rapidly in succession or due to how table identity is tracked.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/filtergc/TableFilterOptions.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nlocal dummy_table = { [\"dummy_key\"] = \"\" }\n\nlocal retrieved = filtergc(\"table\", {\n    Keys = { \"dummy_key\" },\n}, true)\n\nprint(retrieved == dummy_table) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Defining the replicatesignal function for RBXScriptSignal replication in Luau\nDESCRIPTION: This snippet declares the replicatesignal function which takes a Roblox RBXScriptSignal and a variable number of arguments to replicate that signal to the server. It requires that the arguments match the signal's expected parameters to avoid runtime errors. The function enables client-to-server event communication by invoking the signal with specific arguments. Dependencies include Roblox's RBXScriptSignal type and correct usage within a Roblox environment supporting Luau. Inputs are the signal object and its corresponding parameters; no outputs are defined as it fires the event. Incorrect argument structures cause exceptions.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Signals/replicatesignal.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction replicatesignal(signal: RBXScriptSignal, ...: any?)\n```\n\n----------------------------------------\n\nTITLE: Example Usage: Overwriting a Constant String in a Function in Luau\nDESCRIPTION: This snippet demonstrates how to override a hardcoded string constant within a function using `debug.setconstant` in Luau. It defines a dummy function that prints a property, then replaces the constant at index 4 with the string \"Players\". When invoked, the function outputs the new string, showcasing how constants can be dynamically modified without changing source code. It requires prior knowledge of the constant's index and dependencies on the Luau environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/setconstant.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function dummy_function()\n    print(game.Name)\nend\n\ndebug.setconstant(dummy_function, 4, \"Players\")\n\ndummy_function() -- Output: Players\n```\n\n----------------------------------------\n\nTITLE: Replicating ClickDetector MouseActionReplicated signal using replicatesignal in Luau\nDESCRIPTION: Demonstrates usage of the replicatesignal function to replicate a ClickDetector's MouseActionReplicated event to the server. The example identifies the ClickDetector in the workspace, then calls replicatesignal passing the event, the LocalPlayer, and an integer parameter. It waits briefly and prints an attribute on the player indicating successful replication. This illustrates correct argument passing corresponding to the signal's expected signature to avoid errors.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Signals/replicatesignal.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal detector = workspace.replicatesigmal.ClickDetector\nreplicatesignal(detector.MouseActionReplicated, game.Players.LocalPlayer, 0)\ntask.wait(0.1)\n\nprint(game.Players.LocalPlayer:GetAttribute(\"MouseClickReplicated\")) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Identifying Executor Closures with isexecutorclosure - Luau\nDESCRIPTION: Demonstrates the use of isexecutorclosure to identify various types of closures, including standard Lua functions, executor-created closures using newcclosure, and global C functions. The snippet declares several dummy functions and prints whether each is recognized as an executor closure, highlighting the function's practical application for validation in exploit or scripting environments. No external dependencies are needed, but built-in Luau functions like newcclosure and getgc must be present.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/isexecutorclosure.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal function dummy_lua_function()\n    print(\"This is an executor Lua closure\")\nend\n\nlocal dummy_cfunction = newcclosure(function()\n    print(\"This is an executor C closure\")\nend)\n\nlocal dummy_standard_cfunction = print\nlocal dummy_global_cfunction = getgc\n\nprint(isexecutorclosure(dummy_lua_function)) -- Output: true\nprint(isexecutorclosure(dummy_cfunction)) -- Output: true\nprint(isexecutorclosure(dummy_global_cfunction)) -- Output: true\nprint(isexecutorclosure(dummy_standard_cfunction)) -- Output: false\n```\n\n----------------------------------------\n\nTITLE: Usage Example of crypt.base64encode in Luau\nDESCRIPTION: Shows how to use the crypt.base64encode function by encoding the string \"DummyString\\0\\2\" and printing the Base64 result. Demonstrates typical usage and expected output in a Luau environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Cryptography/base64encode.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nprint(crypt.base64encode(\"DummyString\\0\\2\")) -- Output: RHVtbXlTdHJpbmcAAg==\n```\n\n----------------------------------------\n\nTITLE: Listing and Checking Files in Root Directory using Luau\nDESCRIPTION: Example demonstrating how to create files, list all files in the root directory, and check for specific filenames. The example creates two files, then uses listfiles to find and print their names.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/listfiles.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nwritefile(\"file1.txt\", \"\")\nwritefile(\"file2.lua\", \"\")\ntask.wait()\n\nfor _, file in listfiles(\"\") do\n    if file == \"file1.txt\" then\n        print(`Found: {file}`) -- Output: Found: file1.txt\n    end\n    if file == \"file2.lua\" then\n        print(`Found: {file}`) -- Output: Found: file2.lua\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Rendering Objects with isrenderobj in Luau\nDESCRIPTION: Implements the isrenderobj function, which checks if the provided object is a valid Drawing instance in Luau. This utility is essential for modules handling custom rendering, ensuring that only proper Drawing objects are processed. The function expects a single parameter (object: any) and returns a boolean indicating validity; dependencies include the render system and Drawing object definitions.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/isrenderobj.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction isrenderobj(object: any): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining the sethiddenproperty Function in Luau\nDESCRIPTION: This snippet declares the sethiddenproperty function, which assigns a value to a hidden or non-scriptable property of a Roblox Instance, even if the property is normally read-only or inaccessible. It indicates the expected return type as boolean, representing success or failure of the operation.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/sethiddenproperty.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction sethiddenproperty(instance: Instance, property_name: string, property_value: any): boolean\n\n```\n\n----------------------------------------\n\nTITLE: Single match by function name using returnOne in Luau\nDESCRIPTION: This example shows how to retrieve a single function matching the specified name by passing true as the third argument to filtergc, activating the returnOne flag. The function matching criteria includes Name and IgnoreExecutor set to false. The expected output type is a single function instead of a table. This approach is useful when only the first matching function is required.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/filtergc/FunctionFilterOptions.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal function dummy_function() \nend\n\nlocal retrieved = filtergc(\"function\", {\n    Name = \"dummy_function\", \n    IgnoreExecutor = false\n}, true)\n\nprint(typeof(retrieved)) -- Output: function\nprint(retrieved == dummy_function) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Example: Overriding Roblox Environment Functions using `getrenv` in Luau\nDESCRIPTION: Demonstrates how to use `getrenv()` to modify the Roblox global environment in Luau. The example shows overriding the built-in `warn` function by assigning a string to `getrenv().warn` and removing the global `game` variable by setting `getrenv().game` to `nil`. The `print` statements verify these changes by outputting the new type of `warn` and the `nil` value of `game`.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/getrenv.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\ngetrenv().warn = \"Hello!\"\nprint(type(warn)) -- Output: string\n\ngetrenv().game = nil\nprint(game) -- Output: nil\n```\n\n----------------------------------------\n\nTITLE: Rendering a Centered Image with the Drawing Class in Luau\nDESCRIPTION: Shows how to load and render an image using Drawing.new for the Image type, set its position, size, and visibility, and then destroy it after a pause. Requires Drawing, access to readfile for image data, and a valid image file path. Key parameters include Data (image byte string), Size, Position, and Visible. Input: none explicit, but needs access to your_image.png; Output: renders and then destroys an image primitive.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/README.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal Camera = game.Workspace.CurrentCamera\nlocal Viewport = Camera.ViewportSize\nlocal Position = Vector2.new(Viewport.X / 2, Viewport.Y / 2)\nlocal image = Drawing.new(\"Image\")\nimage.Data = readfile(\"your_image.png\")\nimage.Size = Vector2.new(455, 155)\nimage.Visible = true\nimage.Position = Position\n\ntask.wait(2)\nimage:Destroy()\n```\n\n----------------------------------------\n\nTITLE: Handling syntax errors when loading Lua source files with loadfile in Luau\nDESCRIPTION: Illustrates the behavior of loadfile when the loaded file contains syntax errors. The example writes an invalid Lua statement (misspelled 'return') to a file. Calling loadfile on this file throws a syntax error that appears in the console, demonstrating error handling during file loading.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/loadfile.md#_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\nwritefile(\"file6.lua\", \"retrn 10 + ...\")\nloadfile(\"file6.lua\") -- This will throw an error in the console\n```\n\n----------------------------------------\n\nTITLE: Retrieving Garbage Collectable Values - Luau\nDESCRIPTION: This snippet demonstrates the use of `getgc` to retrieve garbage-collectable values, specifically functions and tables. It initializes a dummy table and function. The code iterates through the results of `getgc()` and checks if the returned values match the initialized ones.  The output depends on whether tables are included in the scan. The `task.wait(0.05)` call introduces a slight delay to allow for garbage collection.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/getgc.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nlocal dummy_table = {}\nlocal function dummy_function() end\ntask.wait(0.05) -- Step a bit\n\nfor _, value in pairs(getgc()) do\n    if value == dummy_function then\n        print(`Found function: {dummy_function}`)\n    elseif value == dummy_table then\n        print(`Found table?: {dummy_table}`) -- This shouldn't print\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Getting nested function prototypes Luau\nDESCRIPTION: This example demonstrates how to use `debug.getprotos` to retrieve nested function prototypes within a Luau function and prints their names. It defines a function `DummyFunction0` containing two nested functions `DummyFunction1` and `DummyFunction2`. It then iterates through the prototypes returned by `debug.getprotos` and prints the name of each prototype using `debug.info`.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getprotos.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal function DummyFunction0()\n    local function DummyFunction1() end\n    local function DummyFunction2() end\nend\n\nfor index, proto in pairs(debug.getprotos(DummyFunction0)) do\n    print(index, debug.info(proto, \"n\"))\nend\n\n-- Output:\n-- 1 DummyFunction1\n-- 2 DummyFunction2\n```\n\n----------------------------------------\n\nTITLE: Defining cloneref Function for Safe Instance References in Luau\nDESCRIPTION: Defines the cloneref function, which accepts an Instance object and returns a reference clone that behaves identically to the original. This is used to create a safe reference for objects such as game services in Roblox, and is especially valuable in environments where weak table detection or equality checks are a concern. The cloneref function expects a Roblox Instance as input and returns a clone with the same properties but a distinct identity; it requires Luau and access to the target Instance.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/cloneref.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction cloneref<T>(object: T & Instance): T\n```\n\n----------------------------------------\n\nTITLE: Function signature for gethiddenproperty in Luau\nDESCRIPTION: The function signature shows that gethiddenproperty takes an Instance and a property name string as parameters and returns the property value along with a boolean indicating if the property was hidden.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/gethiddenproperty.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction gethiddenproperty(instance: Instance, property_name: string): (any, boolean)\n```\n\n----------------------------------------\n\nTITLE: Using debug.setstack to replace a local variable - Luau\nDESCRIPTION: This Luau code snippet replaces a numeric local variable in the parent scope of a function using `debug.setstack`. It modifies the value of `outer_value` from the scope of `inner_function`.  It targets the stack level 2 to replace the first variable. The modified value, `100`, is assigned to `outer_value`. The example outputs 100 after the call to `inner_function` because the outer scope's variable was modified in-place. Requires the debug library.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/setstack.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal outer_value = 10\n\nlocal function inner_function()\n    outer_value += 9\n    debug.setstack(2, 1, 100)\nend\n\ninner_function()\nprint(outer_value) -- Output: 100\n```\n\n----------------------------------------\n\nTITLE: Using `appendfile` to Extend File Content in Luau\nDESCRIPTION: Demonstrates the usage of the `appendfile` function in Luau. This example first writes initial content to 'file4.txt' using `writefile`, then appends more text using `appendfile`. Finally, it reads the complete content of the modified file using `readfile` and prints it. This snippet implicitly depends on the `writefile` and `readfile` functions being available.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/appendfile.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nwritefile(\"file4.txt\", \"print(\")\nappendfile(\"file4.txt\", \"'Hello')\")\nprint(readfile(\"file4.txt\")) -- Output: print('Hello')\n```\n\n----------------------------------------\n\nTITLE: Defining the fireclickdetector function in Luau for triggering ClickDetector events\nDESCRIPTION: This function allows simulation of click events on a Roblox ClickDetector object, enabling automated testing or event triggering within the Roblox game environment. It takes in a ClickDetector instance, an optional distance, and an optional event type to trigger corresponding mouse events such as click, right-click, or hover events.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/fireclickdetector.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction fireclickdetector(detector: ClickDetector, distance: number?, event: string?): ()\n\n```\n\n----------------------------------------\n\nTITLE: Example: Checking if a Module Has Been Loaded in Luau\nDESCRIPTION: This example demonstrates how to use getloadedmodules to verify if a specific ModuleScript has been loaded. It creates two ModuleScript instances, requires only one of them, and then uses getloadedmodules to check which one was loaded.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getloadedmodules.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal loaded = Instance.new(\"ModuleScript\")\nlocal not_loaded = Instance.new(\"ModuleScript\")\n\npcall(require, loaded)\n\nfor _, module in pairs(getloadedmodules()) do\n    if module == loaded then\n        -- The first modulescript was found because it was required in line 4\n        print(\"Found loaded module!\")\n    elseif module == notLoaded then\n        -- The second modulescript should NOT be found because it was never required\n        print(\"This should never appear.\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Define `appendfile` Function Signature in Luau\nDESCRIPTION: Defines the function signature for `appendfile` in Luau. It accepts a file path (string) and content (string) as arguments and returns nothing (`()`). The function appends the given content to the end of the specified file, creating the file if it doesn't already exist.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/appendfile.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction appendfile(path: string, contents: string): ()\n```\n\n----------------------------------------\n\nTITLE: Deleting a File at Runtime with Luau\nDESCRIPTION: Demonstrates how to use writefile, isfile, and delfile in Luau to create a file, confirm its existence, delete it, and verify its absence. Requires Luau functions writefile for creating a file, isfile for checking existence, and delfile for deletion. Inputs include the file path 'file5.txt'; outputs are console prints ('true' before deletion and 'false' after deletion) showing the file's existence status. Intended for temporary file handling and cleanup scenarios.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/delfile.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nwritefile(\"file5.txt\", \"Hello\")\nprint(isfile(\"file5.txt\")) -- Output: true\ndelfile(\"file5.txt\")\nprint(isfile(\"file5.txt\")) -- Output: false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Values from the Stack in Luau\nDESCRIPTION: Shows a recursive function using debug.getstack to print stack variables at different recursion depths. Demonstrates mutation of multiple local variables and how their values appear when accessed from the stack. Requires Luau; inputs are managed internally, and observed outputs depend on the recursion count and the stack layout. Output is printed to the console, and actual output may vary each run.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getstack.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal count = 0\n\nlocal function recursive_function()\n    count += 1\n    if count > 6 then return end\n\n    local a = 29\n    local b = true\n    local c = \"Example\"\n    a += 1\n    b = false\n    c ..= \"s\"\n\n    print(debug.getstack(1, count))\n    recursive_function()\nend\n\nrecursive_function()\n-- Output (varies depending on Count):\n-- 30\n-- false\n-- Examples\n-- function: 0x... (print)\n-- function: 0x... (getstack)\n-- etc.\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Identity Function in Luau\nDESCRIPTION: This snippet defines the `setthreadidentity` function in Luau. This function takes a number as input (the identity level) and sets the current thread's identity to that level. This function is critical for controlling access to protected resources and privileged actions within a Roblox environment. It requires no external dependencies. It takes a single parameter: `id`, a number representing the desired identity level of the thread. The expected output is the alteration of thread access levels.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/setthreadidentity.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction setthreadidentity(id: number): ()\n```\n\n----------------------------------------\n\nTITLE: Get Function Prototypes using debug.getprotos Luau\nDESCRIPTION: Retrieves all function prototypes within the specified Luau function.  This is useful for inspecting internal function definitions (e.g., nested functions) that exist as part of the compiled bytecode. C closures are not supported and will cause an error.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getprotos.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction debug.getprotos(func: (...any) -> (...any) | number): { (...any) -> (...any) }\n```\n\n----------------------------------------\n\nTITLE: Performing Basic GET Request and Extracting Header in Luau\nDESCRIPTION: This Luau example demonstrates how to perform a basic HTTP GET request using the `request` function. It shows how to check the response status code and success flag, and how to parse the JSON response body to find a specific header, such as an automatically added fingerprint identifier.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Miscellaneous/request.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal response = request({\n    Url = \"http://httpbin.org/get\",\n    Method = \"GET\",\n})\n\nlocal decoded = game:GetService(\"HttpService\"):JSONDecode(response.Body)\nlocal retrieved_fingerprint\n\nfor key in pairs(decoded.headers) do\n    if key:match(\"Fingerprint\") then\n        retrieved_fingerprint = key\n        break\n    end\nend\n\nprint(response.StatusCode)         -- Output: 200\nprint(response.Success)            -- Output: true\nprint(retrieved_fingerprint)        -- Output: PREFIX-Fingerprint\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from the Caller's Stack in Luau\nDESCRIPTION: Demonstrates accessing the caller's stack variables and functions in Luau using debug.getstack(2). Includes an immediately-invoked function expression that prints stack values and their evaluation results. Luau runtime is required, and this snippet illustrates how functions and modified locals from an outer scope can be retrieved and invoked from the stack.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getstack.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function dummy_function()\n    return \"Hello\"\nend\n\nlocal var = 5\nvar += 1\n\n(function()\n    print(debug.getstack(2)[1]()) -- Output: Hello\n    print(debug.getstack(2)[2])   -- Output: 6\nend)()\n```\n\n----------------------------------------\n\nTITLE: Manually Firing a Signal with and without Arguments in Roblox (Luau)\nDESCRIPTION: Demonstrates usage of the firesignal function to trigger signal connections manually. A new Part object is created and a function is connected to its ChildAdded event to print the type of argument received. The firesignal function is used twice: once without extra arguments (resulting in the connected function receiving nil), and once with an explicit workspace argument (resulting in the connected function receiving an Instance). Highlights how firesignal can pass optional arguments and how those are received by the connected handlers.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Signals/firesignal.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal part = Instance.new(\"Part\")\n\npart.ChildAdded:Connect(function(arg1)\n    print(typeof(arg1))\nend)\n\nfiresignal(part.ChildAdded)            -- Output: nil\nfiresignal(part.ChildAdded, workspace) -- Output: Instance\n```\n\n----------------------------------------\n\nTITLE: Retrieving active functions from a prototype in Luau\nDESCRIPTION: This snippet illustrates how to retrieve an active function from a prototype using `debug.getproto` with the `activated` parameter set to true. It shows how to compare the retrieved prototype to the original function and execute it, enabling introspection of active nested functions for debugging purposes.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getproto.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function dummy_function()\n    local function dummy_proto()\n        return \"hi\"\n    end\n    return dummy_proto\nend\n\nlocal real_proto = dummy_function()\nlocal retrieved_proto = debug.getproto(dummy_function, 1, true)[1]\n\nprint(real_proto == retrieved_proto) -- Output: true\nprint(retrieved_proto()) -- Output: hi\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getcallbackvalue to Retrieve Callback Functions in Luau\nDESCRIPTION: Demonstrates retrieving a callback function assigned to a BindableFunction's OnInvoke property, including cases where the property is unset or the callback does not exist on the Instance. It shows creating Instance objects, assigning a callback, retrieving it with getcallbackvalue, and safely handling nil results when callbacks are missing.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/getcallbackvalue.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal dummy_bindable = Instance.new(\"BindableFunction\")\nlocal dummy_remote_function = Instance.new(\"RemoteFunction\")\n\ndummy_bindable.OnInvoke = function()\n    print(\"Hello from callback!\")\nend\n\nlocal retrieved = getcallbackvalue(dummy_bindable, \"OnInvoke\")\nretrieved() -- Output: Hello from callback!\n\nprint(getcallbackvalue(dummy_remote_function, \"OnClientInvoke\")) -- Output: nil\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thread Identity in Luau\nDESCRIPTION: The `getthreadidentity` function is a core function in Luau that retrieves the current thread's identity. It takes no parameters and returns a number representing the thread identity. This function is useful for tracking and managing threads, especially in scenarios where multiple threads are running concurrently. No specific dependencies are required, as it is a built-in function. The function returns a numeric value representing the identity of the current thread.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/getthreadidentity.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getthreadidentity(): number\n```\n\n----------------------------------------\n\nTITLE: Yieldable C functions made with newcclosure\nDESCRIPTION: This example shows how to create a yieldable function wrapped with `#!luau newcclosure` using `task.wait` to introduce a delay. It emphasizes that wrapped functions must be yieldable and cannot use coroutine-based implementations that are incompatible with sUNC checks. The snippet demonstrates proper yield behavior, ensuring the function can suspend execution.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/newcclosure.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal dummy_yielding_function = newcclosure(function()\n    print(\"Before\")\n    task.wait(1.5)\n    print(\"After\")\nend)\n\ndummy_yielding_function()\n-- Output:\n-- Before\n-- yield for 1.5 seconds\n-- After\n```\n\n----------------------------------------\n\nTITLE: Hooking Functions Example in Luau\nDESCRIPTION: This example demonstrates how to use `hookfunction`. It defines two functions, `dummy_func` (the original function) and `dummy_hook` (the hook function). Initially, `dummy_func` prints \"I am not hooked!\".  Then, `hookfunction` is used to replace `dummy_func`'s behavior with that of `dummy_hook`.  Subsequent calls to `dummy_func` now print \"I am hooked!\".  The original function is stored and can be invoked using `old_func` to print the original message.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/hookfunction.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function dummy_func()\n    print(\"I am not hooked!\")\nend\n\nlocal function dummy_hook()\n    print(\"I am hooked!\")\nend\n\ndummy_func() -- Output: I am not hooked!\n\nlocal old_func = hookfunction(dummy_func, dummy_hook)\n\ndummy_func() -- Output: I am hooked!\nold_func() -- Output: I am not hooked!\n```\n\n----------------------------------------\n\nTITLE: Performing Basic POST Request with Payload in Luau\nDESCRIPTION: This Luau example illustrates making a basic HTTP POST request including a text payload. It demonstrates setting the `Method` and `Body` fields in the `RequestOptions`. The example then prints the response status message, status code, and decodes the response body to verify that the sent payload was received correctly by the target server.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Miscellaneous/request.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nlocal response = request({\n    Url = \"http://httpbin.org/post\",\n    Method = \"POST\",\n    Body = \"Example\"\n})\n\nprint(response.StatusMessage)                               -- Output: OK\nprint(response.StatusCode)                                  -- Output: 200\nprint(game:GetService(\"HttpService\"):JSONDecode(response.Body).data) -- Output: Example\n```\n\n----------------------------------------\n\nTITLE: Defining fireproximityprompt function in Luau\nDESCRIPTION: This code snippet defines the `fireproximityprompt` function.  It takes a ProximityPrompt instance as a parameter and triggers it instantly.  It should not be implemented in Luau due to potential detection vectors.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/fireproximityprompt.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction fireproximityprompt(prompt: ProximityPrompt): ()\nend\n```\n\n----------------------------------------\n\nTITLE: Using getscripts to Find a Script (Luau)\nDESCRIPTION: Provides an example of how to use the `getscripts` function in Luau. It demonstrates creating a dummy script and then iterating through the results of `getscripts()` to locate it within the list of all script instances. This snippet shows typical usage for searching or processing scripts and requires the `Instance` class.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getscripts.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal dummy_script = Instance.new(\"LocalScript\")\ndummy_script.Name = \"TestScript\"\n\nfor _, script in pairs(getscripts()) do\n    if script == dummy_script then\n        print(\"Found the dummy script!\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: getcustomasset Function Signature Luau\nDESCRIPTION: Defines the function signature for `getcustomasset`. It takes a file path as a string and returns a string representing the content ID.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/getcustomasset.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction getcustomasset(path: string): string\n```\n\n----------------------------------------\n\nTITLE: Creating and parenting UI using `gethui` - Luau\nDESCRIPTION: Demonstrates how to use the `gethui` function to parent a new `ScreenGui` and add a `TextLabel` to it. It shows the standard process of creating UI instances and setting their properties, followed by parenting to the container returned by `gethui`. The snippet also verifies the parenting using `FindFirstChild`. This code is intended for execution within a Roblox environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/gethui.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal gui = Instance.new(\"ScreenGui\")\ngui.Parent = gethui()\ngui.Name = \"GUI\"\n\nlocal label = Instance.new(\"TextLabel\")\nlabel.Size = UDim2.fromOffset(200, 50)\nlabel.Text = \"Hello from gethui!\"\nlabel.Parent = gui\n\nprint(gethui():FindFirstChild(gui)) -- Output: GUI\n```\n\n----------------------------------------\n\nTITLE: Declaring the checkcaller Function Signature in Luau\nDESCRIPTION: Defines the signature for the `checkcaller` function in Luau. It takes no parameters and returns a boolean value indicating whether the calling function was invoked from the executor's own thread.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/checkcaller.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction checkcaller(): boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Drawing Property Function - Luau\nDESCRIPTION: This Luau code defines the `getrenderproperty` function.  It takes a Drawing object and a property name (string) as input and returns the value of that property. It mimics the behavior of direct property access with dynamic names. There are no external dependencies specified. The function is designed to take a Drawing object and the property name as a string.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/getrenderproperty.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getrenderproperty(drawing: Drawing, property: string): any\n```\n\n----------------------------------------\n\nTITLE: Defining getscriptclosure for Script Bytecode Extraction in Luau\nDESCRIPTION: Defines the getscriptclosure function signature, which accepts a Script or ModuleScript instance and returns a compiled function closure or nil if bytecode is absent. Requires access to the Roblox scripting environment with scripts providing compiled bytecode. The function is central for extracting constants or code representation without running the actual script, and expects a valid script instance as input, returning a function or nil based on the script's compilation status.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getscriptclosure.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getscriptclosure(script: BaseScript | ModuleScript): (...any) -> (...any) | nil\n```\n\n----------------------------------------\n\nTITLE: Using sethiddenproperty in Luau\nDESCRIPTION: Enables writing to hidden or non-scriptable properties of Instances that are normally protected from modification.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/README.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nsethiddenproperty\n```\n\n----------------------------------------\n\nTITLE: Defining the `getconnections` function signature in Luau\nDESCRIPTION: This snippet shows the function signature for `getconnections`. It takes one parameter, `signal` (an `RBXScriptSignal`), and returns an array table containing `Connection` objects associated with that signal.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Signals/getconnections.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getconnections(signal: RBXScriptSignal): {Connection}\n```\n\n----------------------------------------\n\nTITLE: Detecting Calling Script in Hook Example (Luau)\nDESCRIPTION: This example demonstrates how to use `getcallingscript` within a `__index` metatable hook applied to the global `game` object. It checks if the caller is an executor thread using `checkcaller()` and, if not, retrieves the calling script's full name to issue a warning, showcasing how to identify the source of arbitrary property access.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getcallingscript.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal old; old = hookmetamethod(game, \"__index\", function(self, key)\n    if not checkcaller() then\n        local caller = getcallingscript()\n        warn(\"__index access from script:\", caller and caller:GetFullName() or \"Unknown\")\n\n        hookmetamethod(game, \"__index\", old) -- Restore the original\n        return old(self, key)\n    end\n\n    return old(self, key)\nend)\n\nprint(getcallingscript()) -- Output: nil, since we called from an executor thread\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving constants from a Luau function using debug.getconstants\nDESCRIPTION: This snippet demonstrates how to retrieve all literal constants (numbers, strings, booleans, nil) used within a custom Luau function by calling 'debug.getconstants'. It shows the typical usage pattern, including defining a function, invoking 'debug.getconstants', and iterating over the returned list to print each constant with its index.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getconstants.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function dummy_function()\n    local dummy_string = \"foo bar\"\n    string.split(dummy_string, \" \")\nend\n\nlocal constants = debug.getconstants(dummy_function)\nfor constant_index, constant in constants do\n    print(`[{constant_index}]: {constant}`)\nend\n\n-- Output:\n-- [1]: \"string\"\n-- [2]: \"split\"\n-- [4]: \"foo bar\"\n-- [5]: \" \"\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Luau\nDESCRIPTION: This Luau code snippet demonstrates how to use the `isfile` function to check if a file exists.  It takes a file path as input and returns a boolean value: `true` if the file exists and is a file, and `false` otherwise. This example tests for a non-existent file and then creates a file, demonstrating how the function's output changes.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/isfile.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nprint(isfile(\"nonexistent.txt\")) -- Output: false\nwritefile(\"file3.txt\", \"\")\nprint(isfile(\"file3.txt\")) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Example: Getting an Out-of-Range Constant - Luau\nDESCRIPTION: This Luau snippet uses `debug.getconstant` to retrieve a constant that is out of range. It defines a function `dummy_function` with a string, attempts to retrieve a constant at index 3, which doesn't exist, so should return nil. The example requires a Luau environment and demonstrates accessing constants that are not valid.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getconstant.md#_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\nlocal function dummy_function()\n    local dummy_string = \"foo bar\"\n    string.split(dummy_string, \" \")\nend\n\nlocal result = debug.getconstant(dummy_function, 3)\nprint(result) -- Output: nil\n```\n\n----------------------------------------\n\nTITLE: Example: Handling C Closures - Luau\nDESCRIPTION: This Luau snippet illustrates the behavior of `debug.getconstant` when called on a C closure (e.g., print). Since C closures have no accessible constants, this call should result in an error. The example requires a Luau environment and the `print` function.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getconstant.md#_snippet_3\n\nLANGUAGE: luau\nCODE:\n```\nprint(debug.getconstant(print, 1)) -- Should error due to being a C closure\n```\n\n----------------------------------------\n\nTITLE: Matching Tables by Metatable using filtergc - Luau\nDESCRIPTION: This example uses the filtergc utility in Luau to locate tables with a specific metatable. The snippet creates a dummy table and assigns it a metatable, then filters all tables to find those with a matching metatable using the 'Metatable' filter option. Requires filtergc and getgenv/getmetatable functions to be present. Inputs include the reference metatable to match, and output is a table reference or nil. Use caution as raw metatable comparison is performed, and results may vary with session timing or object identity.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/filtergc/TableFilterOptions.md#_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\nlocal dummy_table = setmetatable({}, { __index = getgenv() })\n\nlocal retrieved = filtergc(\"table\", { \n    Metatable = getmetatable(dummy_table) \n}, true)\n\nprint(retrieved == dummy_table) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Creating a New Folder in Luau\nDESCRIPTION: Example of creating a folder named 'test_folder' and verifying its existence using the isfolder function. The example demonstrates the basic usage of makefolder.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/makefolder.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nmakefolder(\"test_folder\")\nprint(isfolder(\"test_folder\")) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Error Handling: C Closure in Luau\nDESCRIPTION: This snippet showcases the error handling when trying to retrieve an upvalue from a C closure, such as `print`. The code attempts to call `debug.getupvalue` with the `print` function, which is a C closure, and this will result in an error. Requires a Luau environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getupvalue.md#_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\ndebug.getupvalue(print, 1) -- Should error due to C closure\n```\n\n----------------------------------------\n\nTITLE: Finding Nil-Parented Instance in Luau\nDESCRIPTION: This snippet demonstrates how to use `getinstances` to find an instance with its parent set to `nil`.  It creates a new `Part` instance and sets its parent to `nil`.  The code then iterates through the instances returned by `getinstances` and checks if any matches the created dummy part. The output will print \"Found the dummy part!\" if it successfully finds the part.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/getinstances.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal dummy_part = Instance.new(\"Part\")\ndummy_part.Parent = nil\n\nfor _, instance in pairs(getinstances()) do\n    if instance == dummy_part then\n        print(\"Found the dummy part!\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining `gethui` function signature - Luau\nDESCRIPTION: Provides the function signature for `gethui`. This function takes no parameters and returns a `ScreenGui` instance intended for use as a hidden container for UI elements.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/gethui.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction gethui(): ScreenGui\n```\n\n----------------------------------------\n\nTITLE: Function Signature for getloadedmodules in Luau\nDESCRIPTION: The type signature for the getloadedmodules function that returns an array of ModuleScript objects representing all loaded modules in the Roblox environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getloadedmodules.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getloadedmodules(): { ModuleScript }\n```\n\n----------------------------------------\n\nTITLE: Formatting Luau Code Examples in Markdown\nDESCRIPTION: Illustrates the required Markdown format for including code examples within function documentation. Examples must use a fenced code block tagged with `luau` for syntax highlighting, enable line numbers via `linenums=\"1\"`, and include a short, descriptive `title` attribute. At least one example is mandatory per function page.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/About/contributing.md#_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n## Example\n\n` ` `luau title=\"Short but descriptive title for your code\" linenums=\"1\"\n-- an example is here\nprint(\"Hello world!\")\nprint(\"This is some example code\")\n` ` `\n```\n\n----------------------------------------\n\nTITLE: Using getthreadidentity in Luau\nDESCRIPTION: Queries the current thread's permission level (security context), indicating what operations the current thread is allowed to perform.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/README.md#_snippet_4\n\nLANGUAGE: luau\nCODE:\n```\ngetthreadidentity\n```\n\n----------------------------------------\n\nTITLE: Checking Folder Existence and Printing Results in Luau\nDESCRIPTION: This example demonstrates how to use isfolder by creating a file and a folder, then checking each path. It uses writefile to create a file, makefolder for directory creation, and isfolder to validate each entity. The snippet prints out true if the path is a folder and false otherwise, illustrating expected outputs and common usage patterns for scripts that need directory checks.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/isfolder.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nwritefile(\"file7.txt\", \"\")\nmakefolder(\"folder2\")\nprint(isfolder(\"file7.txt\")) -- Output: false\nprint(isfolder(\"folder2\"))   -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Defining Function Documentation Titles in Markdown\nDESCRIPTION: Illustrates the required Markdown format for the title of a function documentation page. The title must start with a level 1 heading (`#`) followed by the function name enclosed in backticks for code formatting. Emojis are explicitly forbidden in function titles.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/About/contributing.md#_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n# `function_name`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Script Environment - Luau\nDESCRIPTION: The `getsenv` function retrieves the global environment table of a specified script (BaseScript or ModuleScript). This environment holds all global variables and functions accessible within that script. The function can return `nil` if the script isn't currently running or exists on a different Lua state. The primary input is a script instance, and the output is a table representing the environment or `nil`.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getsenv.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getsenv(script: BaseScript | ModuleScript): { [any]: any } | nil\n```\n\n----------------------------------------\n\nTITLE: Example: `getrawmetatable` Returning `nil` for Proxy without Metatable in Luau\nDESCRIPTION: Illustrates a scenario where `getrawmetatable` is called on an object created with `newproxy(false)`. Since such a proxy typically lacks a metatable by default, the function correctly returns `nil`.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Metatable/getrawmetatable.md#_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\nprint(getrawmetatable(newproxy(false)))\n```\n\n----------------------------------------\n\nTITLE: Accessing Script's Internal Environment - Luau\nDESCRIPTION: This snippet demonstrates how to use the `getsenv` function to access the environment of a script. It first finds a script instance named \"Animate\". Then, it calls `getsenv` on this instance to retrieve the environment. Finally, it prints the type of a member of the retrieved environment. The code depends on the script being present and accessible from where the example is run.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getsenv.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal animate = game.Players.LocalPlayer.Character:FindFirstChild(\"Animate\")\n\nlocal env = getsenv(animate)\n\nprint(typeof(env.onSwimming)) -- Output: function\n```\n\n----------------------------------------\n\nTITLE: Structuring Function Parameters Table in Markdown\nDESCRIPTION: Specifies the mandatory Markdown table structure for documenting function parameters. It requires columns for 'Parameter' and 'Description'. Parameter names must be formatted as inline Luau code (`#!luau parameter_name`), using snake_case for variables and camelCase for parameters. No horizontal rule should separate this section from the preceding type definition.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/About/contributing.md#_snippet_4\n\nLANGUAGE: md\nCODE:\n```\n## Parameters\n\n| Parameter               | Description                         |\n|-------------------------|-------------------------------------|\n| `#!luau parameter_name` | Short description of the parameter. |\n```\n\n----------------------------------------\n\nTITLE: Referencing Function Names in Descriptions using Markdown\nDESCRIPTION: Provides an example of how to correctly reference the function's name within its description text. The function name must be enclosed in backticks with the `#!luau` specifier for proper inline Luau code formatting.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/About/contributing.md#_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n`#!luau function_name` allows you to do this and that.\n```\n\n----------------------------------------\n\nTITLE: Using checkcaller to Identify Call Source in Luau\nDESCRIPTION: Demonstrates using `checkcaller` within a `hookmetamethod` callback for the `__namecall` metamethod. It checks if the initial `__namecall` invocation originated from the executor's thread and stores the boolean result in `from_caller`. The example later contrasts this stored value (expected to be false) with a direct call to `checkcaller` from the main thread (expected to be true).\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/checkcaller.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal from_caller\n\nlocal original; original = hookmetamethod(game, \"__namecall\", function(...)\n    if not from_caller then\n        from_caller = checkcaller()\n    end\n\n    return original(...)\nend)\n\ntask.wait(0.1) -- Step a bit\nhookmetamethod(game, \"__namecall\", original)\n\nprint(from_caller)       -- Output: false\nprint(checkcaller())    -- Output: true (current thread)\n```\n\n----------------------------------------\n\nTITLE: Triggering a ProximityPrompt Manually in Luau\nDESCRIPTION: This example demonstrates how to create a ProximityPrompt and manually trigger it using the `fireproximityprompt` function. It creates a Part, adds a ProximityPrompt to it, sets the ActionText, connects a function to the Triggered event, and then calls `fireproximityprompt` to trigger the prompt.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/fireproximityprompt.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal part = Instance.new(\"Part\", workspace)\nlocal prompt = Instance.new(\"ProximityPrompt\", part)\nprompt.ActionText = \"Click Me\"\n\nprompt.Triggered:Connect(function(player)\n    print(player.Name .. \" triggered the prompt\")\nend)\n\nfireproximityprompt(prompt) -- Output: [YourName] triggered the prompt\n```\n\n----------------------------------------\n\nTITLE: sUNC Testing Script\nDESCRIPTION: This Lua script initializes a debug table and then loads and executes the sUNC testing script from a remote URL. It sets debug options such as printing checkpoints and delay between tests. The main sUNC script is retrieved via `game:HttpGet` and executed using `loadstring`. Note that as of v2.0, the script needs to be executed inside the official testing game, which can be retrieved from the Discord server.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\ngetgenv().sUNCDebug = {\n    [\"printcheckpoints\"] = false,\n    [\"delaybetweentests\"] = 0\n}\n\nloadstring(game:HttpGet(\"https://script.sunc.su/\"))() -- (1)\n```\n\n----------------------------------------\n\nTITLE: Handling argument mismatch errors when replicating UI MouseWheelForward signal in Luau\nDESCRIPTION: Shows examples of calling replicatesignal improperly and properly with the MouseWheelForward signal from a UI frame. Initial calls with no or a single argument fail due to missing parameters, demonstrating that the signal requires exactly two parameters (e.g., 121, 214). The correct usage replicates the signal with two numeric arguments, waits, and then verifies replication by printing a player attribute. This underscores the importance of matching argument count and type to the signal's signature.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Signals/replicatesignal.md#_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\nlocal ui_frame = game.Players.LocalPlayer.PlayerGui.ScreenGui.Frame\n\n-- These will throw an error.\nreplicatesignal(ui_frame.MouseWheelForward)\nreplicatesignal(ui_frame.MouseWheelForward, 121)\n\n-- This succeeds\nreplicatesignal(ui_frame.MouseWheelForward, 121, 214)\ntask.wait(0.1)\n\nprint(game.Players.LocalPlayer:GetAttribute(\"MouseWheelForwardReplicated\")) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Defining the filtergc Function Signature in Luau\nDESCRIPTION: Provides the function signature for `filtergc`. It accepts a `filterType` ('function' or 'table'), `filterOptions` (specific to the type), and an optional boolean `returnOne`. It returns either a single function/table or a table containing all matching functions/tables found in Luau's garbage collector, depending on `returnOne`.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/filtergc/README.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction filtergc(\n    filterType: \"function\" | \"table\",\n    filterOptions: FunctionFilterOptions | TableFilterOptions,\n    returnOne: boolean\n):\n    (...any) -> (...any) | { [any]: any } | { (...any) -> (...any) | { [any]: any } }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating isreadonly Function Usage in Luau\nDESCRIPTION: This snippet demonstrates how to use the `isreadonly` Luau function. It shows two examples: checking a standard empty table (which is not readonly) and checking the metatable of the `game` object (which is typically readonly), illustrating the expected boolean output for each case.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Metatable/isreadonly.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nprint(isreadonly({})) -- Output: false\nprint(isreadonly(getrawmetatable(game))) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Defining getscriptbytecode Function in Luau\nDESCRIPTION: Declares the function getscriptbytecode which accepts a Roblox script instance (BaseScript or ModuleScript) and returns the script's bytecode as a string, or nil if the script contains no bytecode. This function requires the script parameter to be an instance of BaseScript or ModuleScript and returns a string or nil, facilitating consistent handling of bytecode presence.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getscriptbytecode.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getscriptbytecode(script: BaseScript | ModuleScript): string | nil\n```\n\n----------------------------------------\n\nTITLE: Using the __OBJECT_EXISTS Property with Drawing Objects in Luau\nDESCRIPTION: Illustrates checking the existence state of a Drawing object via the __OBJECT_EXISTS boolean property before and after calling Destroy. The example creates a circle at the center, sets visual properties, prints the state, destroys the object, and prints the state again. Requires Luau's Drawing library and color utilities. Input: none explicit; Output: prints true/false for the object existence.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/README.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal Camera = game.Workspace.CurrentCamera\nlocal Viewport = Camera.ViewportSize\nlocal Position = Vector2.new(Viewport.X / 2, Viewport.Y / 2)\n\nlocal circle = Drawing.new(\"Circle\")\ncircle.Radius = 50\ncircle.Color = Color3.fromRGB(255, 0, 0)\ncircle.Filled = true\ncircle.NumSides = 150\ncircle.Position = Position\ncircle.Transparency = 1\ncircle.Visible = true\n\nprint(circle.__OBJECT_EXISTS) -- Output: true\ncircle:Destroy()\nprint(circle.__OBJECT_EXISTS) -- Output: false\n```\n\n----------------------------------------\n\nTITLE: Declaring debug.getstack Function in Luau\nDESCRIPTION: Declares the function signature for debug.getstack, an API for retrieving values from a given stack level in Luau. Requires Luau runtime and the debug standard library. Takes mandatory level and optional index arguments to return specific or all values at the given stack level. Inputs are level:number, index?:number; output is either a single value or a table of values.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getstack.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction debug.getstack(level: number, index: number?): any | { any }\n```\n\n----------------------------------------\n\nTITLE: Example: Hooking and Restoring the `__index` Metamethod in Luau\nDESCRIPTION: Demonstrates using `hookmetamethod` to intercept calls to the `__index` metamethod of the global `game` object. The hook function prints the key being accessed before calling the original `__index` function, which is saved in the `original` variable. The example later shows how to restore the original `__index` metamethod by calling `hookmetamethod` again with the saved original function.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/hookmetamethod.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal original; original = hookmetamethod(game, \"__index\", function(...)\n    local key = select(2, ...)\n    print(key)\n    return original(...)\nend)\n\nlocal _ = game.PlaceId -- Output: \"PlaceId\"\n\nhookmetamethod(game, \"__index\", original) -- Restores game's __index\n```\n\n----------------------------------------\n\nTITLE: Retrieving Assigned Callback Properties on Roblox Instances Using Luau\nDESCRIPTION: Defines the getcallbackvalue function which reads the assigned callback function on a given Roblox Instance's callback property, even though such properties are normally write-only. It takes an Instance object and the callback property name as a string, returning the assigned callback function or nil if none is assigned. This function enables direct access to callbacks like OnInvoke on BindableFunction instances, which is useful for debugging or introspection.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/getcallbackvalue.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getcallbackvalue(object: Instance, property: string): (...any) -> (...any) | nil\n```\n\n----------------------------------------\n\nTITLE: Creating Drawing Objects with Drawing.new in Luau\nDESCRIPTION: Implements the Drawing.new constructor function, which instantiates a renderable 2D drawing object of the specified type (e.g., Circle, Text, Image). Requires Luau and access to the Drawing library; Drawing types must match one of the supported primitives. The \"type\" parameter defines the drawing's shape, and the returned object inherits core properties and shape-specific fields. Input: type (string); Output: Drawing object with extended methods and properties.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/README.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction Drawing.new(type: string): Drawing\n```\n\n----------------------------------------\n\nTITLE: Defining getscripts Function Signature (Luau)\nDESCRIPTION: Defines the Luau function signature for `getscripts`. This function is a utility provided by the library, accepting no parameters and returning a table containing instances of `BaseScript` or `ModuleScript`, excluding CoreScripts. It describes the expected return type for users calling the function.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getscripts.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction getscripts(): { BaseScript | ModuleScript }\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Upvalue Index in Luau\nDESCRIPTION: This code snippet demonstrates the error handling when calling `debug.getupvalue` with an invalid index.  `DummyFunction` has no upvalues, and calling `debug.getupvalue` with an index of 0 will result in an error. Requires a Luau environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getupvalue.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal function DummyFunction() end\n\ndebug.getupvalue(DummyFunction, 0) -- Should error\n```\n\n----------------------------------------\n\nTITLE: Example usage of sethiddenproperty to modify a hidden property\nDESCRIPTION: This code example creates a new Roblox Part instance, retrieves its current hidden property 'DataCost', assigns a new value to it using sethiddenproperty, and then retrieves the property again to confirm the update. The example demonstrates setting a hidden property on an Instance object in Lua.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/sethiddenproperty.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal part = Instance.new(\"Part\")\n\nprint(gethiddenproperty(part, \"DataCost\")) -- Output: 20, true\n\nsethiddenproperty(part, \"DataCost\", 100)\n\nprint(gethiddenproperty(part, \"DataCost\")) -- Output: 100, true\n```\n\n----------------------------------------\n\nTITLE: Defining isexecutorclosure Function - Luau\nDESCRIPTION: Declares the isexecutorclosure function signature in Luau, which checks whether the supplied function is an executor closure. Requires no external module dependencies but expects the Luau environment that supports this function. Accepts a callback function of any signature as its parameter and returns a boolean indicating if it is an executor closure. Used to differentiate between executor-specific and standard Lua/C functions, with no additional options or flags required.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/isexecutorclosure.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction isexecutorclosure(func: (...any) -> (...any)): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining getscripthash Function in Luau\nDESCRIPTION: Defines the `getscripthash` function in Luau, which takes a `BaseScript` or `ModuleScript` as input and returns a string representing the SHA-384 hash of the script's bytecode, or `nil` if the script has no bytecode.  The hash is computed on the encrypted, compressed bytecode.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getscripthash.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getscripthash(script: BaseScript | ModuleScript): string | nil\n```\n\n----------------------------------------\n\nTITLE: Detecting a Detached Part Using getnilinstances in Luau\nDESCRIPTION: Demonstrates how to use getnilinstances to detect if a newly created part is unparented. The example creates a Part instance, then iterates through the result of getnilinstances to check for the detached part and prints a message if found. This requires no parameters, works with Instance objects, and expects the function to return all unparented objects currently in memory.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/getnilinstances.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal part = Instance.new(\"Part\")\nfor _, instance in pairs(getnilinstances()) do\n    if instance == part then\n        print(\"Found our unattached part!\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Script's Closure Using getscriptclosure in Luau\nDESCRIPTION: Demonstrates usage of getscriptclosure to retrieve the function closure of a script instance, specifically by extracting the closure from a player's Animate script and checking the result's type. Assumes the Roblox environment provides game and player APIs, and that the Animate script is accessible. The example shows how to validate whether a closure was successfully created and highlights that calling getscriptclosure on a newly created script without bytecode returns nil.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getscriptclosure.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal animate = game.Players.LocalPlayer.Character:FindFirstChild(\"Animate\")\n\nlocal closure = getscriptclosure(animate)\n\nprint(typeof(closure)) -- Output: function 0x....\n\nprint(getscriptclosure(Instance.new(\"LocalScript\"))) -- Output: nil\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upvalues in Luau\nDESCRIPTION: This snippet demonstrates retrieving upvalues from a Luau function using `debug.getupvalues`. The function `dummy_function` closes over `var1` and `var2`.  The code iterates through the returned table, printing the index and value of each upvalue. The example expects the output to show the upvalues and their initial values before they are modified inside `dummy_function`.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getupvalues.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nlocal var1 = false\nlocal var2 = \"Hi\"\n\nlocal function dummy_function()\n    var1 = true\n    var2 ..= \", hello\"\nend\n\nfor index, value in pairs(debug.getupvalues(dummy_function)) do\n    print(index, value)\nend\n\n-- Output:\n-- 1 false\n-- 2 Hi\n```\n\n----------------------------------------\n\nTITLE: Including Luau Type Definitions in Function Documentation\nDESCRIPTION: Demonstrates the required format for including a Luau type definition at the end of the function's introductory section, immediately before the parameters table. It must use Luau syntax highlighting (`luau`) but explicitly excludes line numbers or individual line highlighting. This is a mandatory part of function documentation.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/About/contributing.md#_snippet_3\n\nLANGUAGE: luau\nCODE:\n```\nfunction newcclosure<A..., R...>(functionToWrap: (A...) -> R...): (A...) -> R...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upvalue From Luau Function\nDESCRIPTION: This code snippet demonstrates how to retrieve an upvalue from a Luau function's closure using `debug.getupvalue`. It defines a function `DummyFunction` that calls `UpFunction`. The `debug.getupvalue` function is then used to retrieve the upvalue from `DummyFunction`, and the retrieved upvalue is then called, which outputs 'Hello from up'. Requires a Luau environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getupvalue.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nlocal UpFunction = function()\n    print(\"Hello from up\")\nend\n\nlocal function DummyFunction()\n    UpFunction()\nend\n\nlocal Retrieved = debug.getupvalue(DummyFunction, 1)\nRetrieved() -- Output: Hello from up\n```\n\n----------------------------------------\n\nTITLE: Calling debug.getconstants on a C closure to trigger an error\nDESCRIPTION: This snippet shows that invoking 'debug.getconstants' on a C closure, such as the 'print' function, is expected to throw an error because C closures do not have accessible constants. It emphasizes the limitation of the function when used with C-based functions.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getconstants.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nprint(debug.getconstants(print)) -- Should error due to being a C closure\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle and Destroying the Drawing Object in Luau\nDESCRIPTION: Demonstrates creating a centered red circle using Drawing.new, configuring its shape- and color-specific properties, making it visible, and destroying it using the Destroy method. This snippet expects access to the game.Workspace, Drawing, and Color3 APIs. Key parameters include Radius, Color, NumSides, and Position. The circle's existence is checked before and after destruction via __OBJECT_EXISTS. Input: none explicit; Output: printed boolean values for the existence of the drawing object.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/README.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal Camera = game.Workspace.CurrentCamera\nlocal Viewport = Camera.ViewportSize\nlocal Position = Vector2.new(Viewport.X / 2, Viewport.Y / 2)\n\nlocal circle = Drawing.new(\"Circle\")\ncircle.Radius = 50\ncircle.Color = Color3.fromRGB(255, 0, 0)\ncircle.Filled = true\ncircle.NumSides = 150\ncircle.Position = Position\ncircle.Transparency = 1\ncircle.Visible = true\n\nprint(circle.__OBJECT_EXISTS) -- Output: true\ncircle:Destroy()\nprint(circle.__OBJECT_EXISTS) -- Output: false\n```\n\n----------------------------------------\n\nTITLE: Matching Tables by Key-Value Pairs using filtergc - Luau\nDESCRIPTION: This snippet shows how to filter for tables containing specific key-value pairs using filtergc in Luau. It constructs a table with a 'dummy_key' assigned to 'dummy_value', then sets the 'KeyValuePairs' filter to match this exact mapping. After calling filtergc, the result is compared for identity with the original table. Requires the filtergc utility to be available. Inputs are the target key-value pairs, and the output is a reference to the located table or nil. Limitations may include false negatives when rapidly repeated.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/filtergc/TableFilterOptions.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal dummy_table = { [\"dummy_key\"] = \"dummy_value\" }\n\nlocal retrieved = filtergc(\"table\", {\n    KeyValuePairs = { [\"dummy_key\"] = \"dummy_value\" },\n}, true)\n\nprint(retrieved == dummy_table) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Using `setreadonly` to Modify a Metatable in Luau\nDESCRIPTION: Demonstrates unlocking a game's metatable using `setreadonly(mt, false)`, adding a property, printing it, and then locking the metatable again with `setreadonly(mt, true)`. This example assumes the existence of `getrawmetatable`.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Metatable/setreadonly.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal mt = getrawmetatable(game)\nmt.Example = \"Hello\" -- Throws an error\n\nsetreadonly(mt, false)\nmt.Example = \"Hello\"\nprint(mt.Example) -- Output: Hello\n\nsetreadonly(mt, true) -- Lock back\n```\n\n----------------------------------------\n\nTITLE: Defining the delfile Function in Luau\nDESCRIPTION: Defines the delfile function, which deletes a file at the specified path if it exists. No additional dependencies are required beyond the Luau runtime that provides file I/O functionality. The function accepts a single string parameter path, representing the target file's location, and performs side effects by removing the file if possible. It returns no value. Limitations may include platform file permissions and the existence of the specified file.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/delfile.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction delfile(path: string): ()\n```\n\n----------------------------------------\n\nTITLE: Checking Function Types with `iscclosure` in Luau\nDESCRIPTION: Provides an example demonstrating the usage of the `iscclosure` function in Luau. It defines a Lua closure, a C closure using `newcclosure`, and references standard library (`print`) and global C (`getgc`) functions. It then calls `iscclosure` on each function to show which ones are identified as C closures (returning true) and which are not (returning false).\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/iscclosure.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal function dummy_lua_function()\n    print(\"This is an executor Lua closure\")\nend\n\nlocal dummy_cfunction = newcclosure(function()\n    print(\"This is an Executor C Closure\")\nend)\n\nlocal dummy_standard_function = print\nlocal dummy_global_cfunction = getgc\n\nprint(iscclosure(dummy_cfunction)) -- Output: true\nprint(iscclosure(dummy_global_cfunction)) -- Output: true\nprint(iscclosure(dummy_standard_function)) -- Output: true\nprint(iscclosure(dummy_lua_function)) -- Output: false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Garbage Collectable Values Including Tables - Luau\nDESCRIPTION: This snippet is very similar to the previous one, but includes tables in the `getgc` scan.  It also initializes a dummy table and function. The code iterates through the results of `getgc(true)` and checks if the returned values match the initialized ones. The inclusion of 'true' as a parameter to getgc() ensures tables are included in the search. The `task.wait(0.05)` call introduces a slight delay to allow for garbage collection.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/getgc.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal dummy_table = {}\nlocal function dummy_function() end\ntask.wait(0.05) -- Step a bit\n\nfor _, value in pairs(getgc(true)) do\n    if value == dummy_function then\n        print(`Found function: {dummy_function}`) -- Should print\n    elseif value == dummy_table then\n        print(`Found table: {dummy_table}`) -- Should also print\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Functions Without Upvalues in Luau\nDESCRIPTION: This Luau code snippet demonstrates using `debug.getupvalues` on a function that doesn't have any upvalues. The `dummy_function` does not close over any external variables, resulting in an empty table or `nil` when using `next`. The expected output is `nil` as the table returned by `debug.getupvalues` is empty.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getupvalues.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal function dummy_function()\n    return 123\nend\n\nprint(next(debug.getupvalues(dummy_function))) -- Output: nil\n```\n\n----------------------------------------\n\nTITLE: Example: Retrieving DataModel Metatable with `getrawmetatable` in Luau\nDESCRIPTION: Demonstrates using `getrawmetatable` to retrieve the actual metatable of the Roblox `game` object (DataModel), even if a `__metatable` field were present. It then prints the type of the retrieved metatable ('table') and confirms access to metamethods by calling `__index`.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Metatable/getrawmetatable.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal mt = getrawmetatable(game)\nprint(type(mt)) -- Output: table\nprint(mt.__index(game, \"Workspace\")) -- Output: Workspace\n```\n\n----------------------------------------\n\nTITLE: Using setrawmetatable to Override String Metatable\nDESCRIPTION: This example demonstrates how to use setrawmetatable to assign a custom metatable to a string value, allowing access to inherited methods or properties. It retrieves the global environment and sets it as the string's __index metamethod. The example prints the modified string and a property from its new metatable.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Metatable/setrawmetatable.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal dummy_string = \"Example\"\nlocal string_metatable = setrawmetatable(dummy_string, {\n    __index = getgenv()\n})\n\nprint(string_metatable)          -- Output: Example\nprint(string_metatable.getgenv)        -- Output: function: 0x...\n```\n\n----------------------------------------\n\nTITLE: Defining the `getrenv` Function Signature in Luau\nDESCRIPTION: Provides the Luau function signature for `getrenv`. This function takes no parameters and returns a table (`{ any }`) representing the Roblox global environment, where keys and values can be of any type. Accessing this environment allows interaction with global variables and functions within the Roblox game instance.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/getrenv.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction getrenv(): { any }\n```\n\n----------------------------------------\n\nTITLE: Checking Active Scripts Example - Luau\nDESCRIPTION: This example demonstrates how to use the `getrunningscripts` function to check for active scripts in the Roblox session. It retrieves a specific script (`Animate`) and creates a new `LocalScript` that isn't running. The code then iterates through the running scripts to compare them with the retrieved and created scripts.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getrunningscripts.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal running = game.Players.LocalPlayer.Character:FindFirstChild(\"Animate\")\nlocal inactive = Instance.new(\"LocalScript\") -- Not running because no bytecode to run\n\nfor _, script in pairs(getrunningscripts()) do\n    if script == running then\n        print(\"Found the running Animate script.\")\n    elseif script == inactive then\n        print(\"This should never print.\")\n        print(\"If this did print, then you have just experienced 1 in a quintillion chance of BITS FLIPPING from radiation. Do you live inside a nuclear reactor?\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using getgenv for Persistent Values Across Scripts in Luau\nDESCRIPTION: This example demonstrates how getgenv maintains values separately from the thread's global environment. It shows setting values in both environments and how they interact when accessed directly or through getgenv.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/getgenv.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\ngetgenv().dummy_val = \"value\"\ngetfenv().dummy_val_2 = 1\n\nprint(dummy_val, getgenv().dummy_val_2) -- Output: value, 1\n\ngetgenv().dummy_val = \"value2\"\ndummy_val = nil\nprint(dummy_val) -- Output: value2\n\n```\n\n----------------------------------------\n\nTITLE: Using cleardrawcache with Drawing Library in Luau\nDESCRIPTION: Demonstrates how to use the cleardrawcache function to remove all currently active drawing objects. The example creates a red filled circle centered in the viewport using Drawing.new, then clears the cache with cleardrawcache. After deferring the cache clear with task.defer, the script shows that the Drawing object is removed on the next thread cycle. Dependencies include the Drawing library and appropriate execution environment (Roblox with Luau support).\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/cleardrawcache.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal camera = game.Workspace.CurrentCamera\nlocal viewport = camera.ViewportSize\nlocal pos = Vector2.new(viewport.X / 2, viewport.Y / 2)\n\nlocal circle = Drawing.new(\"Circle\")\ncircle.Radius = 50\ncircle.Color = Color3.fromRGB(255, 0, 0)\ncircle.Filled = true\ncircle.NumSides = 60\ncircle.Position = pos\ncircle.Transparency = 1\ncircle.Visible = true\n\ntask.defer(cleardrawcache)\n\nprint(circle.__OBJECT_EXISTS) -- Output: true\ntask.wait()\nprint(circle.__OBJECT_EXISTS) -- Output: false\n```\n\n----------------------------------------\n\nTITLE: Deleting a folder with delfolder Luau\nDESCRIPTION: This example demonstrates how to use the `delfolder` function to delete a folder in Luau. First, a folder named \"folder3\" is created, then its existence is checked. Finally, `delfolder` is called to delete the folder, and its existence is checked again to confirm the deletion.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/delfolder.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nmakefolder(\"folder3\")\nprint(isfolder(\"folder3\")) -- Output: true\ndelfolder(\"folder3\")\nprint(isfolder(\"folder3\")) -- Output: false\n```\n\n----------------------------------------\n\nTITLE: Declaring hookfunction in Luau\nDESCRIPTION: This code snippet defines the signature of the `hookfunction` function. It takes two functions as input: `functionToHook`, the function to be replaced, and `hook`, the replacement function.  It returns the original, unhooked function.  The parameters A1... and R1... represent generic types for arguments and return values, respectively.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/hookfunction.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction hookfunction<A1..., R1...>(functionToHook: (A1...) -> R1..., hook: (A1...) -> R1...): (A1...) -> R1...\n```\n\n----------------------------------------\n\nTITLE: Using gethiddenproperty in Luau\nDESCRIPTION: Allows reading hidden or non-scriptable properties of Instances that are normally inaccessible through standard Luau.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/README.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\ngethiddenproperty\n```\n\n----------------------------------------\n\nTITLE: Using `getfunctionhash` to Check Function Hashes in Luau\nDESCRIPTION: This example demonstrates the usage of `getfunctionhash`. It defines several dummy Luau functions, calculates their hashes using `getfunctionhash`, and compares them. It includes a helper function `is_sha384_hex` to validate the hash format (96 hex characters). The example shows that identical functions produce the same hash, while functions with different logic or different constants produce different hashes.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/getfunctionhash.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal function is_sha384_hex(hash)\n    return #hash == 96 and hash:match(\"^[0-9a-fA-F]+$\") ~= nil\nend\n\nlocal dummy_function_0 = function() end\nlocal dummy_function_1 = function(...) end\nlocal dummy_function_2 = function() end\nlocal dummy_function_3 = function() return \"Constant\" end\nlocal dummy_function_4 = function() return \"Constant2\" end\n\nprint(is_sha384_hex(getfunctionhash(dummy_function_0))) -- Output: true\nprint(getfunctionhash(dummy_function_0) == getfunctionhash(dummy_function_1)) -- Output: false\nprint(getfunctionhash(dummy_function_0) == getfunctionhash(dummy_function_2)) -- Output: true\nprint(getfunctionhash(dummy_function_3) == getfunctionhash(dummy_function_4)) -- Output: false\n```\n\n----------------------------------------\n\nTITLE: Define `setreadonly` Function Signature in Luau\nDESCRIPTION: Defines the signature for the `setreadonly` function. It accepts a table (`table`) and a boolean (`state`) indicating whether to make the table readonly (`true`) or writable (`false`). The function returns nothing (`()`).\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Metatable/setreadonly.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction setreadonly(table: { any }, state: boolean): ()\n```\n\n----------------------------------------\n\nTITLE: Enabling Scriptability of a Property in Luau\nDESCRIPTION: Illustrates how to use the `setscriptable` function to temporarily enable scriptability of a property named \"BottomParamA\" on a Part instance. It demonstrates accessing the property after enabling scriptability and the error that occurs when scriptability is disabled and the property is accessed.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/setscriptable.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal part = Instance.new(\"Part\")\n\nsetscriptable(part, \"BottomParamA\", true)\nprint(part.BottomParamA) -- Output: -0.5\n\nsetscriptable(part, \"BottomParamA\", false)\nprint(part.BottomParamA) -- Throws an error\n```\n\n----------------------------------------\n\nTITLE: Base64 Decoding Function Signature - Luau\nDESCRIPTION: Defines the function signature for `crypt.base64decode` in Luau. The function accepts a Base64-encoded string as input and returns the decoded string.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Cryptography/base64decode.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction crypt.base64decode(data: string): string\n```\n\n----------------------------------------\n\nTITLE: getrunningscripts Function Signature - Luau\nDESCRIPTION: Defines the function signature for `getrunningscripts`. It returns a table containing `BaseScript` or `ModuleScript` objects representing all running scripts in the caller's global state. It takes no parameters.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getrunningscripts.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction getrunningscripts(): { BaseScript | ModuleScript }\n```\n\n----------------------------------------\n\nTITLE: Defining the loadfile function signature in Luau\nDESCRIPTION: Declares the loadfile function which accepts a string path to a Lua source file and returns a function (chunk) that, when called, executes the loaded code and returns any results. This chunk runs in the global environment and throws syntax errors if the code is invalid.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/loadfile.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction loadfile(path: string): (...any) -> ...any\n```\n\n----------------------------------------\n\nTITLE: Defining getinstances Function in Luau\nDESCRIPTION: The `getinstances` function is defined to return a table of `Instance` objects. This function retrieves all instances tracked in memory, including those not currently part of the game hierarchy. It takes no parameters and returns a table of `Instance` objects.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/getinstances.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getinstances(): { Instance }\n```\n\n----------------------------------------\n\nTITLE: Using setthreadidentity in Luau\nDESCRIPTION: Elevates thread permissions by changing the security context level, allowing operations that would normally be restricted.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/README.md#_snippet_3\n\nLANGUAGE: luau\nCODE:\n```\nsetthreadidentity\n```\n\n----------------------------------------\n\nTITLE: Matching a function by name using Luau\nDESCRIPTION: This snippet demonstrates filtering Luau functions by their name using the filtergc function. It shows how to pass a filter table with the Name key to retrieve all matching functions as a table. The IgnoreExecutor flag is set to false to include executor-created functions. The input is the filter criteria and the string \"function\" as the filter type; the output is a table of matching functions. A dependency is having the filtergc utility available in the environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/filtergc/FunctionFilterOptions.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nlocal function dummy_function() end\n\nlocal retrieved = filtergc(\"function\", {\n    Name = \"dummy_function\", \n    IgnoreExecutor = false\n})\n\nprint(typeof(retrieved)) -- Output: table\nprint(retrieved[1] == dummy_function) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Matching a function by hash using Luau\nDESCRIPTION: This snippet filters for a function based on its unique hash value. It uses getfunctionhash to retrieve the hash of dummy_function, then applies filtergc with the Hash filter key to find the matching function. The IgnoreExecutor flag is set to false to include executor functions. The filtergc function is called with returnOne = true to get a single function. Expected outputs confirm the retrieved function matches the original by hash and by direct comparison. This requires the getfunctionhash method alongside filtergc.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/filtergc/FunctionFilterOptions.md#_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\nlocal function dummy_function()\n    return \"Hello\"\nend\n\nlocal dummy_function_hash = getfunctionhash(dummy_function)\n\nlocal retrieved = filtergc(\"function\", {\n    Hash = dummy_function_hash,\n    IgnoreExecutor = false\n}, true)\n\nprint(getfunctionhash(retrieved) == dummy_functionHash) -- Output: true\nprint(retrieved == dummy_function) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Declaring clonefunction Function in Luau\nDESCRIPTION: This code snippet demonstrates the declaration of the `clonefunction` in Luau. It shows the function signature and parameter types. The function takes a function as input and returns a new function with the same behavior. The parameters specified are the types of arguments and return values.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/clonefunction.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction clonefunction<A..., R...>(functionToClone: (A...) -> R...): (A...) -> R...\n```\n\n----------------------------------------\n\nTITLE: Matching function by constants and upvalues using Luau\nDESCRIPTION: This example filters functions by matching constants and upvalues within the function body. A function with an upvalue and constants such as \"print\" and \"game\" is defined. filtergc is called with Constants and Upvalues keys, passing arrays of expected constant values and upvalue values. IgnoreExecutor is false. The snippet shows that the filtering returns the correct function when searched by these internal attributes. It highlights the ability to refine matches beyond just names or hashes.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/filtergc/FunctionFilterOptions.md#_snippet_3\n\nLANGUAGE: luau\nCODE:\n```\nlocal upvalue = 5\n\nlocal function dummy_function()\n    upvalue += 1\n    print(game.Players.LocalPlayer)\nend\n\nlocal retrieved = filtergc(\"function\", {\n    Constants = { \"print\", \"game\", \"Players\", \"LocalPlayer\", 1 },\n    Upvalues = { 5 },\n    IgnoreExecutor = false\n}, true)\n\nprint(retrieved == dummy_function) -- Output: true\n```\n\n----------------------------------------\n\nTITLE: Defining getnilinstances in Luau\nDESCRIPTION: Declares the getnilinstances function, which returns a table (array) of Instance objects that are currently unparented in the Roblox environment. There are no parameters and it returns a read-only list containing all such instances found in memory. No dependencies are required, but it must be used within the context of Roblox and the Luau programming environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/getnilinstances.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getnilinstances(): { Instance }\n```\n\n----------------------------------------\n\nTITLE: Defining the setrawmetatable Function in Luau\nDESCRIPTION: This snippet declares the setrawmetatable function that forcibly sets the metatable of a given object, bypassing the __metatable protection. It specifies the input parameters and return type, serving as a type-safe function declaration in Luau.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Metatable/setrawmetatable.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction setrawmetatable<T>(object: T & ({ any } | userdata), metatable: { any }): T\n```\n\n----------------------------------------\n\nTITLE: Using setscriptable in Luau\nDESCRIPTION: Toggles the scriptability status of properties, allowing access to normally restricted properties. May be detected by games that check for unusual property access.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/README.md#_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\nsetscriptable\n```\n\n----------------------------------------\n\nTITLE: Defining firetouchinterest Signature in Luau\nDESCRIPTION: Declares the firetouchinterest function which simulates a physical touch event between two BasePart instances. The parameters part1 and part2 are BasePart objects representing the initiator and recipient of the touch, while toggle determines whether a touch or un-touch event is simulated. No implementation is provided to encourage appropriate usage, and dependencies include Roblox's Instance and BasePart classes.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Instances/firetouchinterest.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction firetouchinterest(part1: BasePart, part2: BasePart, toggle: boolean | number): ()\n```\n\n----------------------------------------\n\nTITLE: Checking Object Type with isrenderobj: Example Usage in Luau\nDESCRIPTION: Demonstrates usage of the isrenderobj function by validating different values, including an actual Drawing object, the workspace, and a string. This example highlights input cases and the boolean outputs, showing integration in runtime scripts. The snippet requires the Drawing library and a proper implementation of isrenderobj; it prints the result of each check to the console.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/isrenderobj.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nlocal square = Drawing.new(\"Square\")\n\nprint(isrenderobj(square))       -- Output: true\nprint(isrenderobj(workspace))    -- Output: false\nprint(isrenderobj(\"not a draw\")) -- Output: false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Function Constants - Luau\nDESCRIPTION: This snippet demonstrates the usage of `debug.getconstant` to extract constants from a Luau function. It defines a dummy function, retrieves a constant using its index, and prints the result. The function requires a Luau environment and utilizes the `debug` library. The output is dependent on the constants defined within the dummy function; it showcases how to obtain a specific constant within the function.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getconstant.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction debug.getconstant(func: (...any) -> (...any) | number, index: number): number | string | boolean | nil\n```\n\n----------------------------------------\n\nTITLE: Error Handling for C Closures in Luau\nDESCRIPTION: This snippet shows the expected behavior when calling `debug.getupvalues` on a C closure (e.g., the built-in `print` function).  C closures are not supported, and the code is expected to throw an error when executed, due to security reasons. The input is the `print` function.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getupvalues.md#_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\nprint(debug.getupvalues(print)) -- Should error due to being a C closure\n```\n\n----------------------------------------\n\nTITLE: Reading hidden properties with gethiddenproperty in Luau\nDESCRIPTION: This example demonstrates how to use gethiddenproperty to access both normal and hidden properties from a Part instance. It shows the function returning the property value and whether it was hidden.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/gethiddenproperty.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal part = Instance.new(\"Part\")\n\nprint(gethiddenproperty(part, \"Name\"))       -- Output: Part, false\nprint(gethiddenproperty(part, \"DataCost\"))   -- Output: 20, true\n```\n\n----------------------------------------\n\nTITLE: Example: Getting a Valid Constant - Luau\nDESCRIPTION: This Luau snippet demonstrates retrieving a valid constant using `debug.getconstant`. It defines a function `dummy_function`, containing a string, and then uses `debug.getconstant` to retrieve a constant. The expected output is the string \"foo bar\" or its type. The snippet requires the `debug` and `string` libraries and a valid Luau environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getconstant.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal function dummy_function()\n    local dummy_string = \"foo bar\"\n    string.split(dummy_string, \" \")\nend\n\nlocal result = debug.getconstant(dummy_function, 2)\nprint(result) -- Output: string\n```\n\n----------------------------------------\n\nTITLE: Defining the `hookmetamethod` Function Signature in Luau\nDESCRIPTION: Specifies the function signature for `hookmetamethod`. It accepts a Luau object (table or userdata), the string name of the metamethod to hook (e.g., \"__index\"), and a hook function. It returns the original metamethod function, allowing for chaining or restoration. This function relies on an underlying `hookfunction` implemented in C++.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/hookmetamethod.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction hookmetamethod(object: { any } | userdata, metamethodName: string, hook: (...any) -> (...any)): (...any) -> (...any)\n```\n\n----------------------------------------\n\nTITLE: makefolder Function Signature in Luau\nDESCRIPTION: The function signature for makefolder which takes a string path parameter and creates a folder at that location if one doesn't already exist.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/makefolder.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction makefolder(path: string): ()\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for sUNC Documentation Development\nDESCRIPTION: Creates a Python virtual environment for isolated development of the sUNC documentation platform. This keeps dependencies contained and prevents conflicts with system packages.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Defining the `getfunctionhash` Function Signature in Luau\nDESCRIPTION: This snippet defines the function signature for `getfunctionhash` in Luau. It accepts a single argument `functionToHash`, which must be a Luau function (variadic arguments and return values allowed), and it returns a string representing the hex-encoded SHA384 hash.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/getfunctionhash.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getfunctionhash(functionToHash: (...any) -> (...any)): string\n```\n\n----------------------------------------\n\nTITLE: Basic C closure wrapping example with newcclosure\nDESCRIPTION: This snippet demonstrates how to wrap a simple Lua function into a C closure using `#!luau newcclosure`, verifying its closure status before and after wrapping, and showing the return values are preserved. It illustrates the basic usage of the function. Dependencies include the `iscclosure` function for checking closure status.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/newcclosure.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal dummy_function = function(...)\n    return ...\nend\n\nprint(iscclosure(dummy_function)) -- Output: false\n\nlocal wrapped_function = newcclosure(dummy_function)\n\nprint(iscclosure(wrapped_function)) -- Output: true\n\nlocal function_results = wrapped_function(\"Hello\")\nprint(function_results) -- Output: Hello\n```\n\n----------------------------------------\n\nTITLE: Declaring isfolder Function in Luau\nDESCRIPTION: This snippet declares the isfolder function in Luau, specifying the accepted parameter and return types. The function takes a string path and returns a boolean indicating whether the path refers to an existing folder. It is typically used in file system validation workflows and requires access to file system utilities provided by the Luau environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/isfolder.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction isfolder(path: string): boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving nested prototypes using debug.getproto in Luau\nDESCRIPTION: This snippet demonstrates how to retrieve nested function prototypes within a Lua function by index, showcasing how to call `debug.getproto` on a user-defined function and access its sub-functions. It highlights how to obtain and invoke specific prototypes based on their index, handling nested functions in Luau.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/getproto.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nlocal function dummy_function()\n    local function dummy_proto_1()\n        print(\"Hello\")\n    end\n    local function dummy_proto_2()\n        print(\"Hello2\")\n    end\nend\n\ndebug.getproto(dummy_function, 1)() -- Output: Hello\ndebug.getproto(dummy_function, 2)() -- Output: Hello2\n```\n\n----------------------------------------\n\nTITLE: Using debug.setstack to replace the 'error' function - Luau\nDESCRIPTION: This Luau code snippet demonstrates replacing the global `error` function with a custom function using `debug.setstack`. It replaces the first local variable on the stack of the current function, in this case the global 'error' function. The code then calls the replaced 'error' function, which prints \"Replaced\". This requires the `debug` library to be accessible.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/setstack.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nerror(debug.setstack(1, 1, function()\n    return function()\n        print(\"Replaced\")\n    end\nend))() -- Output: Replaced\n```\n\n----------------------------------------\n\nTITLE: Getting Executor and Version - Luau\nDESCRIPTION: This Luau code demonstrates how to call the `identifyexecutor` function. The function call assigns the returned tuple (executor name and version) to the variables `exec_name` and `exec_version`. The example then prints these variables to the console. The output is expected to be the name and version of the executor, such as \"YourExploitName 0.0.1\".\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Miscellaneous/identifyexecutor.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal exec_name, exec_version = identifyexecutor()\nprint(exec_name, exec_version) -- Output: \"YourExploitName 0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Defining isreadonly Function Signature in Luau\nDESCRIPTION: This snippet shows the type signature for the `isreadonly` Luau function. It specifies that the function accepts a single parameter, `table`, which must be of type table, and returns a boolean value indicating whether the table is readonly.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Metatable/isreadonly.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction isreadonly(table: { any }): boolean\n```\n\n----------------------------------------\n\nTITLE: Verifying Lua closures with islclosure in Luau\nDESCRIPTION: Example demonstrating how to use islclosure to check different types of functions. It shows the behavior of islclosure when checking a Lua closure, a C closure created with newcclosure, and a standard C function.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/islclosure.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nlocal function dummy_lua_function()\n    print(\"This is an executor Lua closure\")\nend\n\nlocal dummy_cfunction = newcclosure(function()\n    print(\"This is an executor C closure\")\nend)\n\nlocal dummy_standard_cfunction = print\n\nprint(islclosure(dummy_lua_function)) -- Output: true\nprint(islclosure(dummy_standard_cfunction)) -- Output: false\nprint(islclosure(dummy_cfunction)) -- Output: false\n```\n\n----------------------------------------\n\nTITLE: Defining `debug.setconstant` Function in Luau\nDESCRIPTION: This snippet defines the `debug.setconstant` function in Luau, which modifies a specified constant in a function's bytecode at a given index. It involves passing a function, index, and new value, and is used to alter behavior dynamically. Dependencies include the `debug` module with the `setconstant` method available. The function signature specifies input parameters and return type, supporting modification of constants at runtime.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Debug/setconstant.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction debug.setconstant(func: (...any) -> (...any) | number, index: number, value: number | string | boolean | nil): ()\n```\n\n----------------------------------------\n\nTITLE: setscriptable Function Signature in Luau\nDESCRIPTION: Defines the `setscriptable` function signature, specifying the input parameters (instance, property name, and state) and the return type (boolean or nil). This function toggles the scriptability of a hidden or non-scriptable property on an Instance.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Reflection/setscriptable.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction setscriptable(instance: Instance, property_name: string, state: boolean): boolean | nil\n```\n\n----------------------------------------\n\nTITLE: islclosure Function Signature in Luau\nDESCRIPTION: The function signature for islclosure, which takes a function as input and returns a boolean indicating whether the function is a Lua closure.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/islclosure.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction islclosure(func: (...any) -> (...any)): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining setrenderproperty function signature in Luau\nDESCRIPTION: This snippet defines the function signature for `setrenderproperty`. It specifies that the function takes a `Drawing` object, a string representing the property name, and a value of any type to assign. The function returns nothing (`()`).\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/setrenderproperty.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction setrenderproperty(drawing: Drawing, property: string, value: any): ()\n```\n\n----------------------------------------\n\nTITLE: Defining the `iscclosure` Function Signature in Luau\nDESCRIPTION: Specifies the type signature for the `iscclosure` function in Luau. It accepts a function (`func`) with any number of arguments and return values, and returns a boolean indicating whether the input function is a C closure.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Closures/iscclosure.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction iscclosure(func: (...any) -> (...any)): boolean\n```\n\n----------------------------------------\n\nTITLE: `getrawmetatable` Function Signature in Luau\nDESCRIPTION: Defines the signature for the `getrawmetatable` function in Luau. It accepts a table or userdata object as input and returns its raw metatable (a table) or nil if no metatable is set, ignoring any `__metatable` field.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Metatable/getrawmetatable.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getrawmetatable(object: { any } | userdata): { [any]: any } | nil\n```\n\n----------------------------------------\n\nTITLE: Defining cleardrawcache in Luau\nDESCRIPTION: Defines the cleardrawcache function, which removes all active drawing objects created with Drawing.new. This function does not require any parameters and does not return a value. It requires the Drawing library and is intended for use in scripts managing dynamic drawing objects.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Drawing/cleardrawcache.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction cleardrawcache(): ()\n```\n\n----------------------------------------\n\nTITLE: listfiles Function Signature in Luau\nDESCRIPTION: The function signature for listfiles in Luau, showing it takes a string path parameter and returns an array of strings.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/listfiles.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction listfiles(path: string): { string }\n```\n\n----------------------------------------\n\nTITLE: Defining the crypt.base64encode Function in Luau\nDESCRIPTION: Defines the crypt.base64encode function that takes a string input and returns its Base64 encoded version. It includes the function signature and describes its parameter and output. The snippet requires the Luau language environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Cryptography/base64encode.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction crypt.base64encode(data: string): string\n```\n\n----------------------------------------\n\nTITLE: Basic getgenv Function Signature in Luau\nDESCRIPTION: The function signature for getgenv in Luau, showing that it takes no parameters and returns a table that can contain any type of values.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Environment/getgenv.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction getgenv(): { any }\n```\n\n----------------------------------------\n\nTITLE: Accessing a C connection using `getconnections`\nDESCRIPTION: This example shows retrieving a connection from a built-in Roblox signal (`game.Players.LocalPlayer.Idled`), which might be implemented internally in C. It demonstrates that for such connections, the `Function` and `Thread` properties of the retrieved `Connection` object may be `nil`.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Signals/getconnections.md#_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\nlocal cconnection = getconnections(game.Players.LocalPlayer.Idled)[1]\nprint(cconnection.Function)  -- Output: nil\nprint(cconnection.Thread)    -- Output: nil\n```\n\n----------------------------------------\n\nTITLE: Using identifyexecutor in Luau\nDESCRIPTION: The identifyexecutor function returns information about the current executor and its version. It should be used for informational purposes only and not as a secure identifier.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Miscellaneous/README.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nidentifyexecutor\n```\n\n----------------------------------------\n\nTITLE: Defining identifyexecutor Function - Luau\nDESCRIPTION: This Luau code defines the `identifyexecutor` function.  It's a simple function that is expected to return a tuple consisting of two strings: the executor's name/identifier and its version. This function has no parameters and is useful for debugging and identification purposes within a Luau environment.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Miscellaneous/identifyexecutor.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction identifyexecutor(): (string, string)\n```\n\n----------------------------------------\n\nTITLE: Using request function in Luau\nDESCRIPTION: The request function allows sending HTTP requests with support for custom methods, headers, body data, and cookies. It returns full responses but operates synchronously, yielding until the server responds.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Miscellaneous/README.md#_snippet_1\n\nLANGUAGE: luau\nCODE:\n```\nrequest\n```\n\n----------------------------------------\n\nTITLE: Defining getcallingscript Function Signature (Luau)\nDESCRIPTION: This snippet provides the function signature for the `getcallingscript` function. It shows that the function accepts no parameters and returns a `BaseScript`, `ModuleScript`, or `nil`, indicating the type of script that initiated the current execution context.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Scripts/getcallingscript.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nfunction getcallingscript(): BaseScript | ModuleScript | nil\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Closure - Luau\nDESCRIPTION: This snippet demonstrates the use of the `OnClose` event and the `Close` method.  It connects to a WebSocket server, sets up an `OnClose` handler that prints \"Closed\" to the console, and immediately closes the connection using `ws:Close()`. The `OnClose` event is triggered when the connection is closed. The output will be \"Closed\".\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/WebSocket/README.md#_snippet_2\n\nLANGUAGE: luau\nCODE:\n```\nlocal ws = WebSocket.connect(\"ws://echo.websocket.events\")\nws.OnClose:Connect(function()\n    print(\"Closed\")\nend)\nws:Close() -- Output: Closed\n```\n\n----------------------------------------\n\nTITLE: delfolder Function Signature Luau\nDESCRIPTION: Defines the signature for the `delfolder` function in Luau. This function takes a string representing the path to a folder and deletes it. It does not return any value.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/Filesystem/delfolder.md#_snippet_0\n\nLANGUAGE: luau\nCODE:\n```\nfunction delfolder(path: string): ()\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for sUNC Documentation Platform\nDESCRIPTION: Installs all the necessary packages defined in requirements.txt using pip within the virtual environment. This ensures all required dependencies for the documentation platform are available.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Formatting Inline Links for Luau References in Markdown\nDESCRIPTION: Shows the Markdown syntax for creating a hyperlink that displays Luau code (`task.defer`) while linking to external documentation (Roblox API). This format is mandatory for referencing key terms like Luau functions or libraries in the sUNC documentation, ensuring code formatting and link functionality.\nSOURCE: https://github.com/sunc-utilities/docs.sunc.su/blob/main/docs/About/contributing.md#_snippet_0\n\nLANGUAGE: md\nCODE:\n```\n[`#!luau task.defer`](https://create.roblox.com/docs/reference/engine/libraries/task#defer)\n```"
  }
]