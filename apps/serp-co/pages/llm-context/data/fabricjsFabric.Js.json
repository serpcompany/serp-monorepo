[
  {
    "owner": "fabricjs",
    "repo": "fabric.js",
    "content": "TITLE: Basic Fabric.js HTML Implementation\nDESCRIPTION: Simple HTML example showing how to create a canvas and add a rectangle using Fabric.js CDN.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/README.md#2025-04-05_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<canvas id=\"canvas\" width=\"300\" height=\"300\"></canvas>\n\n<script src=\"https://cdn.jsdelivr.net/npm/fabric@6.4.3/dist/index.js\"></script>\n<script>\n  const canvas = new fabric.Canvas('canvas');\n  const rect = new fabric.Rect({\n    top: 100,\n    left: 100,\n    width: 60,\n    height: 70,\n    fill: 'red',\n  });\n  canvas.add(rect);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Fabric.js in JavaScript\nDESCRIPTION: Examples of importing Fabric.js in different JavaScript environments, showing both v5 and v6 import syntax.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/README.md#2025-04-05_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// v6\nimport { Canvas, Rect } from 'fabric'; // browser\nimport { StaticCanvas, Rect } from 'fabric/node'; // node\n\n// v5\nimport { fabric } from 'fabric';\n```\n\n----------------------------------------\n\nTITLE: Installing Fabric.js via Package Managers\nDESCRIPTION: Commands for installing Fabric.js using different package managers including npm, yarn, and pnpm.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install fabric --save\n# or use yarn\n$ yarn add fabric\n# or use pnpm\n$ pnpm install fabric\n```\n\n----------------------------------------\n\nTITLE: React Implementation with Fabric.js\nDESCRIPTION: React component example showing how to integrate Fabric.js with proper lifecycle management and canvas reference handling.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/README.md#2025-04-05_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect, useRef } from 'react';\nimport * as fabric from 'fabric'; // v6\nimport { fabric } from 'fabric'; // v5\n\nexport const FabricJSCanvas = () => {\n  const canvasEl = useRef<HTMLCanvasElement>(null);\n  useEffect(() => {\n    const options = { ... };\n    const canvas = new fabric.Canvas(canvasEl.current, options);\n    // make the fabric.Canvas instance available to your app\n    updateCanvasContext(canvas);\n    return () => {\n      updateCanvasContext(null);\n      canvas.dispose();\n    }\n  }, []);\n\n  return <canvas width=\"300\" height=\"300\" ref={canvasEl}/>;\n};\n```\n\n----------------------------------------\n\nTITLE: Node.js Server Implementation with Fabric.js\nDESCRIPTION: Example of using Fabric.js in a Node.js server environment to create and serve canvas content in different formats.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/README.md#2025-04-05_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport http from 'http';\nimport * as fabric from 'fabric/node'; // v6\nimport { fabric } from 'fabric'; // v5\n\nconst port = 8080;\n\nhttp\n  .createServer((req, res) => {\n    const canvas = new fabric.Canvas(null, { width: 100, height: 100 });\n    const rect = new fabric.Rect({ width: 20, height: 50, fill: '#ff0000' });\n    const text = new fabric.Text('fabric.js', { fill: 'blue', fontSize: 24 });\n    canvas.add(rect, text);\n    canvas.renderAll();\n    if (req.url === '/download') {\n      res.setHeader('Content-Type', 'image/png');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"fabric.png\"');\n      canvas.createPNGStream().pipe(res);\n    } else if (req.url === '/view') {\n      canvas.createPNGStream().pipe(res);\n    } else {\n      const imageData = canvas.toDataURL();\n      res.writeHead(200, '', { 'Content-Type': 'text/html' });\n      res.write(`<img src=\"${imageData}\" />`);\n      res.end();\n    }\n  })\n  .listen(port, (err) => {\n    if (err) throw err;\n    console.log(\n      `> Ready on http://localhost:${port}, http://localhost:${port}/view, http://localhost:${port}/download`,\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing Origin Wrapper Updater in FabricJS with Default Values\nDESCRIPTION: Simple example of importing and calling the installOriginWrapperUpdater function with default origin values. This enables automatic handling of objects with different origin settings during deserialization.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/extensions/data_updaters/origins/README.md#2025-04-05_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { installOriginWrapperUpdater } from 'fabric/extensions';\n\ninstallOriginWrapperUpdater();\n```\n\n----------------------------------------\n\nTITLE: Installing Origin Wrapper Updater in FabricJS with Custom Origin Values\nDESCRIPTION: Example of importing and calling the installOriginWrapperUpdater function with custom origin values. This allows handling deserialized objects when your application uses non-standard origin defaults.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/extensions/data_updaters/origins/README.md#2025-04-05_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { installOriginWrapperUpdater } from 'fabric/extensions';\n\ninstallOriginWrapperUpdater(0.2, 'bottom');\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in FabricJS 4.0\nDESCRIPTION: Examples of API changes and deprecations in version 4.0, showing migration from old to new patterns.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CHANGELOG.md#2025-04-05_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old pattern:\nrect.setShadow(options);\n// New pattern:\nrect.set('shadow', new fabric.Shadow(options));\n\n// Old pattern:\nrect.setGradient(options);\n// New pattern:\nrect.set('fill', new fabric.Gradient(otherOptions));\n\n// Old pattern:\nrect.setPatternFill(options);\n// New pattern:\nrect.set('fill', new fabric.Pattern(options));\n\n// Old pattern:\nrect.setColor(color);\n// New pattern:\nrect.set('fill', color);\n```\n\n----------------------------------------\n\nTITLE: Starting a FabricJS App with Template\nDESCRIPTION: This command starts a FabricJS app using a specified template. It's used for development and prototyping.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm start <template>\nnpm start -- --help\n```\n\n----------------------------------------\n\nTITLE: Deploying and Building FabricJS Apps\nDESCRIPTION: These commands allow deploying a FabricJS app to CodeSandbox or building an app at a specified path. They're useful for sharing and testing app builds.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sandbox deploy <path/to/app>\nnpm run sandbox build <template> <path/to/app>\nnpm run sandbox -- --help\n```\n\n----------------------------------------\n\nTITLE: clearFabricCharWidthsCache Function Addition\nDESCRIPTION: New utility function added to clear character width caches at the fabric level rather than iText level. Can be called with a specific font name to clear its cache.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CHANGELOG.md#2025-04-05_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfabric.util.clearFabricCharWidthsCache(fontName)\n```\n\n----------------------------------------\n\nTITLE: Building and Watching for Changes in FabricJS\nDESCRIPTION: This command builds the FabricJS project and watches for changes, allowing for real-time development updates.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build -- -f -w\n```\n\n----------------------------------------\n\nTITLE: Generating Playwright Tests for Fabric.js\nDESCRIPTION: Commands to start a vanilla Fabric.js instance and generate Playwright tests using the codegen feature.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start vanilla\nnpx playwright codegen http://localhost:1234\n```\n\n----------------------------------------\n\nTITLE: Building Fabric.js for Testing\nDESCRIPTION: Command to build Fabric.js with force and watch options, typically used before running end-to-end tests.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build -- -f -w\n```\n\n----------------------------------------\n\nTITLE: Running Vitest Unit Tests in Node.js for Fabric.js\nDESCRIPTION: Command to run Vitest unit tests for Fabric.js in Node.js environment, with optional filters and watch mode.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:vitest -- [filters] [-w]\n```\n\n----------------------------------------\n\nTITLE: Running Playwright E2E Tests in Browser for Fabric.js\nDESCRIPTION: Command to run Playwright end-to-end tests for Fabric.js in a browser environment, with optional filters and UI mode.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:e2e -- [filters] [--ui]\n```\n\n----------------------------------------\n\nTITLE: Running FabricJS Tests in Development Mode\nDESCRIPTION: This command runs FabricJS tests in development mode, launching the browser test suite and watching for test changes.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -c chrome --dev -l\n```\n\n----------------------------------------\n\nTITLE: Running FabricJS Tests in Visual Debug Mode\nDESCRIPTION: This command runs FabricJS tests in visual debug mode, allowing developers to view visual diffs for failing tests.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -d -c chrome\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Files in FabricJS\nDESCRIPTION: This command allows running specific test files in FabricJS, useful for focusing on failing tests or newly added tests.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -c chrome\n```\n\n----------------------------------------\n\nTITLE: Running Legacy Test Suite for FabricJS on Chrome\nDESCRIPTION: This command runs the legacy test suite for FabricJS specifically on the Chrome browser. Many tests are skipped when run on Node.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -a -c chrome\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Files with Node.js\nDESCRIPTION: This snippet demonstrates the potential command to run benchmark files using Node.js. It's important to note that this is not currently set up as a formal command, but rather a suggestion for possible execution.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/src/benchmarks/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode filepath.mjs\n```\n\n----------------------------------------\n\nTITLE: Viewing FabricJS Test Command Documentation\nDESCRIPTION: This command displays the documentation for FabricJS test commands, providing information on available options and usage.\nSOURCE: https://github.com/fabricjs/fabric.js/blob/master/CONTRIBUTING.md#2025-04-05_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -h\n```"
  }
]